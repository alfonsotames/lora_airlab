
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	e0 90 00 20 95 51 00 08 a5 26 01 08 69 51 00 08     ... .Q...&..iQ..
 8000010:	69 51 00 08 69 51 00 08 69 51 00 08 00 00 00 00     iQ..iQ..iQ......
	...
 800002c:	2d 4b 00 08 69 51 00 08 00 00 00 00 d9 4a 00 08     -K..iQ.......J..
 800003c:	55 e7 00 08                                         U...

08000040 <_irq_vector_table>:
 8000040:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000050:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000060:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000070:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000080:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000090:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 80000a0:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 80000b0:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 80000c0:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 80000d0:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 80000e0:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 80000f0:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000100:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000110:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000120:	dd 4b 00 08 dd 4b 00 08 dd 4b 00 08 dd 4b 00 08     .K...K...K...K..
 8000130:	dd 4b 00 08 dd 4b 00 08                             .K...K..

Disassembly of section text:

08000140 <memchr>:
 8000140:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000144:	2a10      	cmp	r2, #16
 8000146:	db2b      	blt.n	80001a0 <memchr+0x60>
 8000148:	f010 0f07 	tst.w	r0, #7
 800014c:	d008      	beq.n	8000160 <memchr+0x20>
 800014e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000152:	3a01      	subs	r2, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d02d      	beq.n	80001b4 <memchr+0x74>
 8000158:	f010 0f07 	tst.w	r0, #7
 800015c:	b342      	cbz	r2, 80001b0 <memchr+0x70>
 800015e:	d1f6      	bne.n	800014e <memchr+0xe>
 8000160:	b4f0      	push	{r4, r5, r6, r7}
 8000162:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000166:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800016a:	f022 0407 	bic.w	r4, r2, #7
 800016e:	f07f 0700 	mvns.w	r7, #0
 8000172:	2300      	movs	r3, #0
 8000174:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000178:	3c08      	subs	r4, #8
 800017a:	ea85 0501 	eor.w	r5, r5, r1
 800017e:	ea86 0601 	eor.w	r6, r6, r1
 8000182:	fa85 f547 	uadd8	r5, r5, r7
 8000186:	faa3 f587 	sel	r5, r3, r7
 800018a:	fa86 f647 	uadd8	r6, r6, r7
 800018e:	faa5 f687 	sel	r6, r5, r7
 8000192:	b98e      	cbnz	r6, 80001b8 <memchr+0x78>
 8000194:	d1ee      	bne.n	8000174 <memchr+0x34>
 8000196:	bcf0      	pop	{r4, r5, r6, r7}
 8000198:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800019c:	f002 0207 	and.w	r2, r2, #7
 80001a0:	b132      	cbz	r2, 80001b0 <memchr+0x70>
 80001a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a6:	3a01      	subs	r2, #1
 80001a8:	ea83 0301 	eor.w	r3, r3, r1
 80001ac:	b113      	cbz	r3, 80001b4 <memchr+0x74>
 80001ae:	d1f8      	bne.n	80001a2 <memchr+0x62>
 80001b0:	2000      	movs	r0, #0
 80001b2:	4770      	bx	lr
 80001b4:	3801      	subs	r0, #1
 80001b6:	4770      	bx	lr
 80001b8:	2d00      	cmp	r5, #0
 80001ba:	bf06      	itte	eq
 80001bc:	4635      	moveq	r5, r6
 80001be:	3803      	subeq	r0, #3
 80001c0:	3807      	subne	r0, #7
 80001c2:	f015 0f01 	tst.w	r5, #1
 80001c6:	d107      	bne.n	80001d8 <memchr+0x98>
 80001c8:	3001      	adds	r0, #1
 80001ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80001ce:	bf02      	ittt	eq
 80001d0:	3001      	addeq	r0, #1
 80001d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80001d6:	3001      	addeq	r0, #1
 80001d8:	bcf0      	pop	{r4, r5, r6, r7}
 80001da:	3801      	subs	r0, #1
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_frsub>:
 8000a6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	e002      	b.n	8000a78 <__addsf3>
 8000a72:	bf00      	nop

08000a74 <__aeabi_fsub>:
 8000a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a78 <__addsf3>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	bf1f      	itttt	ne
 8000a7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a80:	ea92 0f03 	teqne	r2, r3
 8000a84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8c:	d06a      	beq.n	8000b64 <__addsf3+0xec>
 8000a8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a96:	bfc1      	itttt	gt
 8000a98:	18d2      	addgt	r2, r2, r3
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	4048      	eorgt	r0, r1
 8000a9e:	4041      	eorgt	r1, r0
 8000aa0:	bfb8      	it	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	2b19      	cmp	r3, #25
 8000aa6:	bf88      	it	hi
 8000aa8:	4770      	bxhi	lr
 8000aaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ac2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4249      	negne	r1, r1
 8000aca:	ea92 0f03 	teq	r2, r3
 8000ace:	d03f      	beq.n	8000b50 <__addsf3+0xd8>
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad8:	eb10 000c 	adds.w	r0, r0, ip
 8000adc:	f1c3 0320 	rsb	r3, r3, #32
 8000ae0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__addsf3+0x78>
 8000aea:	4249      	negs	r1, r1
 8000aec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af4:	d313      	bcc.n	8000b1e <__addsf3+0xa6>
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d306      	bcc.n	8000b0a <__addsf3+0x92>
 8000afc:	0840      	lsrs	r0, r0, #1
 8000afe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b02:	f102 0201 	add.w	r2, r2, #1
 8000b06:	2afe      	cmp	r2, #254	; 0xfe
 8000b08:	d251      	bcs.n	8000bae <__addsf3+0x136>
 8000b0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b12:	bf08      	it	eq
 8000b14:	f020 0001 	biceq.w	r0, r0, #1
 8000b18:	ea40 0003 	orr.w	r0, r0, r3
 8000b1c:	4770      	bx	lr
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	eb40 0000 	adc.w	r0, r0, r0
 8000b24:	3a01      	subs	r2, #1
 8000b26:	bf28      	it	cs
 8000b28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b2c:	d2ed      	bcs.n	8000b0a <__addsf3+0x92>
 8000b2e:	fab0 fc80 	clz	ip, r0
 8000b32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b36:	ebb2 020c 	subs.w	r2, r2, ip
 8000b3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3e:	bfaa      	itet	ge
 8000b40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b44:	4252      	neglt	r2, r2
 8000b46:	4318      	orrge	r0, r3
 8000b48:	bfbc      	itt	lt
 8000b4a:	40d0      	lsrlt	r0, r2
 8000b4c:	4318      	orrlt	r0, r3
 8000b4e:	4770      	bx	lr
 8000b50:	f092 0f00 	teq	r2, #0
 8000b54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b58:	bf06      	itte	eq
 8000b5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5e:	3201      	addeq	r2, #1
 8000b60:	3b01      	subne	r3, #1
 8000b62:	e7b5      	b.n	8000ad0 <__addsf3+0x58>
 8000b64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b6c:	bf18      	it	ne
 8000b6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b72:	d021      	beq.n	8000bb8 <__addsf3+0x140>
 8000b74:	ea92 0f03 	teq	r2, r3
 8000b78:	d004      	beq.n	8000b84 <__addsf3+0x10c>
 8000b7a:	f092 0f00 	teq	r2, #0
 8000b7e:	bf08      	it	eq
 8000b80:	4608      	moveq	r0, r1
 8000b82:	4770      	bx	lr
 8000b84:	ea90 0f01 	teq	r0, r1
 8000b88:	bf1c      	itt	ne
 8000b8a:	2000      	movne	r0, #0
 8000b8c:	4770      	bxne	lr
 8000b8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b92:	d104      	bne.n	8000b9e <__addsf3+0x126>
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	bf28      	it	cs
 8000b98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ba2:	bf3c      	itt	cc
 8000ba4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bxcc	lr
 8000baa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bbc:	bf16      	itet	ne
 8000bbe:	4608      	movne	r0, r1
 8000bc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc4:	4601      	movne	r1, r0
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	bf06      	itte	eq
 8000bca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bce:	ea90 0f01 	teqeq	r0, r1
 8000bd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_ui2f>:
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e004      	b.n	8000be8 <__aeabi_i2f+0x8>
 8000bde:	bf00      	nop

08000be0 <__aeabi_i2f>:
 8000be0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	bf48      	it	mi
 8000be6:	4240      	negmi	r0, r0
 8000be8:	ea5f 0c00 	movs.w	ip, r0
 8000bec:	bf08      	it	eq
 8000bee:	4770      	bxeq	lr
 8000bf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	e01c      	b.n	8000c36 <__aeabi_l2f+0x2a>

08000bfc <__aeabi_ul2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e00a      	b.n	8000c20 <__aeabi_l2f+0x14>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_l2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__aeabi_l2f+0x14>
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	ea5f 0c01 	movs.w	ip, r1
 8000c24:	bf02      	ittt	eq
 8000c26:	4684      	moveq	ip, r0
 8000c28:	4601      	moveq	r1, r0
 8000c2a:	2000      	moveq	r0, #0
 8000c2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c30:	bf08      	it	eq
 8000c32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c3a:	fabc f28c 	clz	r2, ip
 8000c3e:	3a08      	subs	r2, #8
 8000c40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c44:	db10      	blt.n	8000c68 <__aeabi_l2f+0x5c>
 8000c46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c58:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f102 0220 	add.w	r2, r2, #32
 8000c6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c78:	fa21 f202 	lsr.w	r2, r1, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_fmul>:
 8000c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c90:	bf1e      	ittt	ne
 8000c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c96:	ea92 0f0c 	teqne	r2, ip
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d06f      	beq.n	8000d80 <__aeabi_fmul+0xf8>
 8000ca0:	441a      	add	r2, r3
 8000ca2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca6:	0240      	lsls	r0, r0, #9
 8000ca8:	bf18      	it	ne
 8000caa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cae:	d01e      	beq.n	8000cee <__aeabi_fmul+0x66>
 8000cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc8:	bf3e      	ittt	cc
 8000cca:	0049      	lslcc	r1, r1, #1
 8000ccc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd0:	005b      	lslcc	r3, r3, #1
 8000cd2:	ea40 0001 	orr.w	r0, r0, r1
 8000cd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cda:	2afd      	cmp	r2, #253	; 0xfd
 8000cdc:	d81d      	bhi.n	8000d1a <__aeabi_fmul+0x92>
 8000cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf6:	bf08      	it	eq
 8000cf8:	0249      	lsleq	r1, r1, #9
 8000cfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d02:	3a7f      	subs	r2, #127	; 0x7f
 8000d04:	bfc2      	ittt	gt
 8000d06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0e:	4770      	bxgt	lr
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	dc5d      	bgt.n	8000dd8 <__aeabi_fmul+0x150>
 8000d1c:	f112 0f19 	cmn.w	r2, #25
 8000d20:	bfdc      	itt	le
 8000d22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d26:	4770      	bxle	lr
 8000d28:	f1c2 0200 	rsb	r2, r2, #0
 8000d2c:	0041      	lsls	r1, r0, #1
 8000d2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d32:	f1c2 0220 	rsb	r2, r2, #32
 8000d36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3e:	f140 0000 	adc.w	r0, r0, #0
 8000d42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d46:	bf08      	it	eq
 8000d48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4c:	4770      	bx	lr
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0040      	lsleq	r0, r0, #1
 8000d5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5e:	3a01      	subeq	r2, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fmul+0xce>
 8000d62:	ea40 000c 	orr.w	r0, r0, ip
 8000d66:	f093 0f00 	teq	r3, #0
 8000d6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0049      	lsleq	r1, r1, #1
 8000d72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d76:	3b01      	subeq	r3, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xe6>
 8000d7a:	ea41 010c 	orr.w	r1, r1, ip
 8000d7e:	e78f      	b.n	8000ca0 <__aeabi_fmul+0x18>
 8000d80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	bf18      	it	ne
 8000d8a:	ea93 0f0c 	teqne	r3, ip
 8000d8e:	d00a      	beq.n	8000da6 <__aeabi_fmul+0x11e>
 8000d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d94:	bf18      	it	ne
 8000d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	d1d8      	bne.n	8000d4e <__aeabi_fmul+0xc6>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	bf17      	itett	ne
 8000dac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db0:	4608      	moveq	r0, r1
 8000db2:	f091 0f00 	teqne	r1, #0
 8000db6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dba:	d014      	beq.n	8000de6 <__aeabi_fmul+0x15e>
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d101      	bne.n	8000dc6 <__aeabi_fmul+0x13e>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	d10f      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dc6:	ea93 0f0c 	teq	r3, ip
 8000dca:	d103      	bne.n	8000dd4 <__aeabi_fmul+0x14c>
 8000dcc:	024b      	lsls	r3, r1, #9
 8000dce:	bf18      	it	ne
 8000dd0:	4608      	movne	r0, r1
 8000dd2:	d108      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dd4:	ea80 0001 	eor.w	r0, r0, r1
 8000dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ddc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bx	lr
 8000de6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fdiv>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d069      	beq.n	8000edc <__aeabi_fdiv+0xec>
 8000e08:	eba2 0203 	sub.w	r2, r2, r3
 8000e0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e16:	d037      	beq.n	8000e88 <__aeabi_fdiv+0x98>
 8000e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	bf38      	it	cc
 8000e2c:	005b      	lslcc	r3, r3, #1
 8000e2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e36:	428b      	cmp	r3, r1
 8000e38:	bf24      	itt	cs
 8000e3a:	1a5b      	subcs	r3, r3, r1
 8000e3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e44:	bf24      	itt	cs
 8000e46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e52:	bf24      	itt	cs
 8000e54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	bf18      	it	ne
 8000e6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e72:	d1e0      	bne.n	8000e36 <__aeabi_fdiv+0x46>
 8000e74:	2afd      	cmp	r2, #253	; 0xfd
 8000e76:	f63f af50 	bhi.w	8000d1a <__aeabi_fmul+0x92>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e80:	bf08      	it	eq
 8000e82:	f020 0001 	biceq.w	r0, r0, #1
 8000e86:	4770      	bx	lr
 8000e88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e90:	327f      	adds	r2, #127	; 0x7f
 8000e92:	bfc2      	ittt	gt
 8000e94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9c:	4770      	bxgt	lr
 8000e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	3a01      	subs	r2, #1
 8000ea8:	e737      	b.n	8000d1a <__aeabi_fmul+0x92>
 8000eaa:	f092 0f00 	teq	r2, #0
 8000eae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0040      	lsleq	r0, r0, #1
 8000eb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eba:	3a01      	subeq	r2, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fdiv+0xc2>
 8000ebe:	ea40 000c 	orr.w	r0, r0, ip
 8000ec2:	f093 0f00 	teq	r3, #0
 8000ec6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0049      	lsleq	r1, r1, #1
 8000ece:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed2:	3b01      	subeq	r3, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xda>
 8000ed6:	ea41 010c 	orr.w	r1, r1, ip
 8000eda:	e795      	b.n	8000e08 <__aeabi_fdiv+0x18>
 8000edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	d108      	bne.n	8000ef8 <__aeabi_fdiv+0x108>
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	f47f af7d 	bne.w	8000de6 <__aeabi_fmul+0x15e>
 8000eec:	ea93 0f0c 	teq	r3, ip
 8000ef0:	f47f af70 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e776      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	d104      	bne.n	8000f08 <__aeabi_fdiv+0x118>
 8000efe:	024b      	lsls	r3, r1, #9
 8000f00:	f43f af4c 	beq.w	8000d9c <__aeabi_fmul+0x114>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e76e      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f0c:	bf18      	it	ne
 8000f0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	d1ca      	bne.n	8000eaa <__aeabi_fdiv+0xba>
 8000f14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f18:	f47f af5c 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000f1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f20:	f47f af3c 	bne.w	8000d9c <__aeabi_fmul+0x114>
 8000f24:	e75f      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f26:	bf00      	nop

08000f28 <__aeabi_ldivmod>:
 8000f28:	b97b      	cbnz	r3, 8000f4a <__aeabi_ldivmod+0x22>
 8000f2a:	b972      	cbnz	r2, 8000f4a <__aeabi_ldivmod+0x22>
 8000f2c:	2900      	cmp	r1, #0
 8000f2e:	bfbe      	ittt	lt
 8000f30:	2000      	movlt	r0, #0
 8000f32:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f36:	e006      	blt.n	8000f46 <__aeabi_ldivmod+0x1e>
 8000f38:	bf08      	it	eq
 8000f3a:	2800      	cmpeq	r0, #0
 8000f3c:	bf1c      	itt	ne
 8000f3e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f42:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f46:	f000 b857 	b.w	8000ff8 <__aeabi_idiv0>
 8000f4a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f52:	2900      	cmp	r1, #0
 8000f54:	db09      	blt.n	8000f6a <__aeabi_ldivmod+0x42>
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db1a      	blt.n	8000f90 <__aeabi_ldivmod+0x68>
 8000f5a:	f000 f8d7 	bl	800110c <__udivmoddi4>
 8000f5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f66:	b004      	add	sp, #16
 8000f68:	4770      	bx	lr
 8000f6a:	4240      	negs	r0, r0
 8000f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db1b      	blt.n	8000fac <__aeabi_ldivmod+0x84>
 8000f74:	f000 f8ca 	bl	800110c <__udivmoddi4>
 8000f78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f80:	b004      	add	sp, #16
 8000f82:	4240      	negs	r0, r0
 8000f84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f88:	4252      	negs	r2, r2
 8000f8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8e:	4770      	bx	lr
 8000f90:	4252      	negs	r2, r2
 8000f92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f96:	f000 f8b9 	bl	800110c <__udivmoddi4>
 8000f9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa2:	b004      	add	sp, #16
 8000fa4:	4240      	negs	r0, r0
 8000fa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000faa:	4770      	bx	lr
 8000fac:	4252      	negs	r2, r2
 8000fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fb2:	f000 f8ab 	bl	800110c <__udivmoddi4>
 8000fb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fbe:	b004      	add	sp, #16
 8000fc0:	4252      	negs	r2, r2
 8000fc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc6:	4770      	bx	lr

08000fc8 <__aeabi_uldivmod>:
 8000fc8:	b953      	cbnz	r3, 8000fe0 <__aeabi_uldivmod+0x18>
 8000fca:	b94a      	cbnz	r2, 8000fe0 <__aeabi_uldivmod+0x18>
 8000fcc:	2900      	cmp	r1, #0
 8000fce:	bf08      	it	eq
 8000fd0:	2800      	cmpeq	r0, #0
 8000fd2:	bf1c      	itt	ne
 8000fd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000fd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f000 b80c 	b.w	8000ff8 <__aeabi_idiv0>
 8000fe0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe8:	f000 f890 	bl	800110c <__udivmoddi4>
 8000fec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff4:	b004      	add	sp, #16
 8000ff6:	4770      	bx	lr

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <__gedf2>:
 8000ffc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001000:	e006      	b.n	8001010 <__cmpdf2+0x4>
 8001002:	bf00      	nop

08001004 <__ledf2>:
 8001004:	f04f 0c01 	mov.w	ip, #1
 8001008:	e002      	b.n	8001010 <__cmpdf2+0x4>
 800100a:	bf00      	nop

0800100c <__cmpdf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800101c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001020:	bf18      	it	ne
 8001022:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001026:	d01b      	beq.n	8001060 <__cmpdf2+0x54>
 8001028:	b001      	add	sp, #4
 800102a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800102e:	bf0c      	ite	eq
 8001030:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001034:	ea91 0f03 	teqne	r1, r3
 8001038:	bf02      	ittt	eq
 800103a:	ea90 0f02 	teqeq	r0, r2
 800103e:	2000      	moveq	r0, #0
 8001040:	4770      	bxeq	lr
 8001042:	f110 0f00 	cmn.w	r0, #0
 8001046:	ea91 0f03 	teq	r1, r3
 800104a:	bf58      	it	pl
 800104c:	4299      	cmppl	r1, r3
 800104e:	bf08      	it	eq
 8001050:	4290      	cmpeq	r0, r2
 8001052:	bf2c      	ite	cs
 8001054:	17d8      	asrcs	r0, r3, #31
 8001056:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800105a:	f040 0001 	orr.w	r0, r0, #1
 800105e:	4770      	bx	lr
 8001060:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001064:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001068:	d102      	bne.n	8001070 <__cmpdf2+0x64>
 800106a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800106e:	d107      	bne.n	8001080 <__cmpdf2+0x74>
 8001070:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001074:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001078:	d1d6      	bne.n	8001028 <__cmpdf2+0x1c>
 800107a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800107e:	d0d3      	beq.n	8001028 <__cmpdf2+0x1c>
 8001080:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <__aeabi_cdrcmple>:
 8001088:	4684      	mov	ip, r0
 800108a:	4610      	mov	r0, r2
 800108c:	4662      	mov	r2, ip
 800108e:	468c      	mov	ip, r1
 8001090:	4619      	mov	r1, r3
 8001092:	4663      	mov	r3, ip
 8001094:	e000      	b.n	8001098 <__aeabi_cdcmpeq>
 8001096:	bf00      	nop

08001098 <__aeabi_cdcmpeq>:
 8001098:	b501      	push	{r0, lr}
 800109a:	f7ff ffb7 	bl	800100c <__cmpdf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd01      	pop	{r0, pc}

080010a8 <__aeabi_dcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cdcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_dcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cdcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_dcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cdcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_dcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffce 	bl	8001088 <__aeabi_cdrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_dcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc4 	bl	8001088 <__aeabi_cdrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__udivmoddi4>:
 800110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001110:	4607      	mov	r7, r0
 8001112:	468c      	mov	ip, r1
 8001114:	4608      	mov	r0, r1
 8001116:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001118:	4615      	mov	r5, r2
 800111a:	463c      	mov	r4, r7
 800111c:	4619      	mov	r1, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 80c6 	bne.w	80012b0 <__udivmoddi4+0x1a4>
 8001124:	4282      	cmp	r2, r0
 8001126:	fab2 f782 	clz	r7, r2
 800112a:	d946      	bls.n	80011ba <__udivmoddi4+0xae>
 800112c:	b14f      	cbz	r7, 8001142 <__udivmoddi4+0x36>
 800112e:	f1c7 0e20 	rsb	lr, r7, #32
 8001132:	fa24 fe0e 	lsr.w	lr, r4, lr
 8001136:	fa00 f307 	lsl.w	r3, r0, r7
 800113a:	40bd      	lsls	r5, r7
 800113c:	ea4e 0c03 	orr.w	ip, lr, r3
 8001140:	40bc      	lsls	r4, r7
 8001142:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001146:	fa1f fe85 	uxth.w	lr, r5
 800114a:	fbbc f9f8 	udiv	r9, ip, r8
 800114e:	0c22      	lsrs	r2, r4, #16
 8001150:	fb08 c319 	mls	r3, r8, r9, ip
 8001154:	fb09 fa0e 	mul.w	sl, r9, lr
 8001158:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800115c:	459a      	cmp	sl, r3
 800115e:	d928      	bls.n	80011b2 <__udivmoddi4+0xa6>
 8001160:	18eb      	adds	r3, r5, r3
 8001162:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001166:	d204      	bcs.n	8001172 <__udivmoddi4+0x66>
 8001168:	459a      	cmp	sl, r3
 800116a:	d902      	bls.n	8001172 <__udivmoddi4+0x66>
 800116c:	f1a9 0002 	sub.w	r0, r9, #2
 8001170:	442b      	add	r3, r5
 8001172:	eba3 030a 	sub.w	r3, r3, sl
 8001176:	b2a4      	uxth	r4, r4
 8001178:	fbb3 f2f8 	udiv	r2, r3, r8
 800117c:	fb08 3312 	mls	r3, r8, r2, r3
 8001180:	fb02 fe0e 	mul.w	lr, r2, lr
 8001184:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001188:	45a6      	cmp	lr, r4
 800118a:	d914      	bls.n	80011b6 <__udivmoddi4+0xaa>
 800118c:	192c      	adds	r4, r5, r4
 800118e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8001192:	d203      	bcs.n	800119c <__udivmoddi4+0x90>
 8001194:	45a6      	cmp	lr, r4
 8001196:	d901      	bls.n	800119c <__udivmoddi4+0x90>
 8001198:	1e93      	subs	r3, r2, #2
 800119a:	442c      	add	r4, r5
 800119c:	eba4 040e 	sub.w	r4, r4, lr
 80011a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011a4:	b11e      	cbz	r6, 80011ae <__udivmoddi4+0xa2>
 80011a6:	40fc      	lsrs	r4, r7
 80011a8:	2300      	movs	r3, #0
 80011aa:	6034      	str	r4, [r6, #0]
 80011ac:	6073      	str	r3, [r6, #4]
 80011ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011b2:	4648      	mov	r0, r9
 80011b4:	e7dd      	b.n	8001172 <__udivmoddi4+0x66>
 80011b6:	4613      	mov	r3, r2
 80011b8:	e7f0      	b.n	800119c <__udivmoddi4+0x90>
 80011ba:	b902      	cbnz	r2, 80011be <__udivmoddi4+0xb2>
 80011bc:	deff      	udf	#255	; 0xff
 80011be:	bb87      	cbnz	r7, 8001222 <__udivmoddi4+0x116>
 80011c0:	1a83      	subs	r3, r0, r2
 80011c2:	2101      	movs	r1, #1
 80011c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011c8:	b2aa      	uxth	r2, r5
 80011ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80011ce:	0c20      	lsrs	r0, r4, #16
 80011d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80011d4:	fb0c f802 	mul.w	r8, ip, r2
 80011d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011dc:	4598      	cmp	r8, r3
 80011de:	d963      	bls.n	80012a8 <__udivmoddi4+0x19c>
 80011e0:	18eb      	adds	r3, r5, r3
 80011e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80011e6:	d204      	bcs.n	80011f2 <__udivmoddi4+0xe6>
 80011e8:	4598      	cmp	r8, r3
 80011ea:	d902      	bls.n	80011f2 <__udivmoddi4+0xe6>
 80011ec:	f1ac 0002 	sub.w	r0, ip, #2
 80011f0:	442b      	add	r3, r5
 80011f2:	eba3 0308 	sub.w	r3, r3, r8
 80011f6:	b2a4      	uxth	r4, r4
 80011f8:	fbb3 fcfe 	udiv	ip, r3, lr
 80011fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8001200:	fb0c f202 	mul.w	r2, ip, r2
 8001204:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001208:	42a2      	cmp	r2, r4
 800120a:	d94f      	bls.n	80012ac <__udivmoddi4+0x1a0>
 800120c:	192c      	adds	r4, r5, r4
 800120e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8001212:	d204      	bcs.n	800121e <__udivmoddi4+0x112>
 8001214:	42a2      	cmp	r2, r4
 8001216:	d902      	bls.n	800121e <__udivmoddi4+0x112>
 8001218:	f1ac 0302 	sub.w	r3, ip, #2
 800121c:	442c      	add	r4, r5
 800121e:	1aa4      	subs	r4, r4, r2
 8001220:	e7be      	b.n	80011a0 <__udivmoddi4+0x94>
 8001222:	f1c7 0c20 	rsb	ip, r7, #32
 8001226:	fa20 f80c 	lsr.w	r8, r0, ip
 800122a:	fa00 f307 	lsl.w	r3, r0, r7
 800122e:	fa24 fc0c 	lsr.w	ip, r4, ip
 8001232:	40bd      	lsls	r5, r7
 8001234:	ea4c 0203 	orr.w	r2, ip, r3
 8001238:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800123c:	b2ab      	uxth	r3, r5
 800123e:	fbb8 fcfe 	udiv	ip, r8, lr
 8001242:	0c11      	lsrs	r1, r2, #16
 8001244:	fb0e 801c 	mls	r0, lr, ip, r8
 8001248:	fb0c f903 	mul.w	r9, ip, r3
 800124c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8001250:	4581      	cmp	r9, r0
 8001252:	fa04 f407 	lsl.w	r4, r4, r7
 8001256:	d923      	bls.n	80012a0 <__udivmoddi4+0x194>
 8001258:	1828      	adds	r0, r5, r0
 800125a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800125e:	d204      	bcs.n	800126a <__udivmoddi4+0x15e>
 8001260:	4581      	cmp	r9, r0
 8001262:	d902      	bls.n	800126a <__udivmoddi4+0x15e>
 8001264:	f1ac 0102 	sub.w	r1, ip, #2
 8001268:	4428      	add	r0, r5
 800126a:	eba0 0009 	sub.w	r0, r0, r9
 800126e:	b292      	uxth	r2, r2
 8001270:	fbb0 fcfe 	udiv	ip, r0, lr
 8001274:	fb0e 001c 	mls	r0, lr, ip, r0
 8001278:	fb0c f803 	mul.w	r8, ip, r3
 800127c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8001280:	4598      	cmp	r8, r3
 8001282:	d90f      	bls.n	80012a4 <__udivmoddi4+0x198>
 8001284:	18eb      	adds	r3, r5, r3
 8001286:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800128a:	d204      	bcs.n	8001296 <__udivmoddi4+0x18a>
 800128c:	4598      	cmp	r8, r3
 800128e:	d902      	bls.n	8001296 <__udivmoddi4+0x18a>
 8001290:	f1ac 0202 	sub.w	r2, ip, #2
 8001294:	442b      	add	r3, r5
 8001296:	eba3 0308 	sub.w	r3, r3, r8
 800129a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800129e:	e791      	b.n	80011c4 <__udivmoddi4+0xb8>
 80012a0:	4661      	mov	r1, ip
 80012a2:	e7e2      	b.n	800126a <__udivmoddi4+0x15e>
 80012a4:	4662      	mov	r2, ip
 80012a6:	e7f6      	b.n	8001296 <__udivmoddi4+0x18a>
 80012a8:	4660      	mov	r0, ip
 80012aa:	e7a2      	b.n	80011f2 <__udivmoddi4+0xe6>
 80012ac:	4663      	mov	r3, ip
 80012ae:	e7b6      	b.n	800121e <__udivmoddi4+0x112>
 80012b0:	4283      	cmp	r3, r0
 80012b2:	d905      	bls.n	80012c0 <__udivmoddi4+0x1b4>
 80012b4:	b10e      	cbz	r6, 80012ba <__udivmoddi4+0x1ae>
 80012b6:	e9c6 7000 	strd	r7, r0, [r6]
 80012ba:	2100      	movs	r1, #0
 80012bc:	4608      	mov	r0, r1
 80012be:	e776      	b.n	80011ae <__udivmoddi4+0xa2>
 80012c0:	fab3 f183 	clz	r1, r3
 80012c4:	b981      	cbnz	r1, 80012e8 <__udivmoddi4+0x1dc>
 80012c6:	4283      	cmp	r3, r0
 80012c8:	d301      	bcc.n	80012ce <__udivmoddi4+0x1c2>
 80012ca:	42ba      	cmp	r2, r7
 80012cc:	d80a      	bhi.n	80012e4 <__udivmoddi4+0x1d8>
 80012ce:	1abc      	subs	r4, r7, r2
 80012d0:	eb60 0303 	sbc.w	r3, r0, r3
 80012d4:	2001      	movs	r0, #1
 80012d6:	469c      	mov	ip, r3
 80012d8:	2e00      	cmp	r6, #0
 80012da:	d068      	beq.n	80013ae <__udivmoddi4+0x2a2>
 80012dc:	e9c6 4c00 	strd	r4, ip, [r6]
 80012e0:	2100      	movs	r1, #0
 80012e2:	e764      	b.n	80011ae <__udivmoddi4+0xa2>
 80012e4:	4608      	mov	r0, r1
 80012e6:	e7f7      	b.n	80012d8 <__udivmoddi4+0x1cc>
 80012e8:	f1c1 0c20 	rsb	ip, r1, #32
 80012ec:	408b      	lsls	r3, r1
 80012ee:	fa22 f40c 	lsr.w	r4, r2, ip
 80012f2:	431c      	orrs	r4, r3
 80012f4:	fa02 f501 	lsl.w	r5, r2, r1
 80012f8:	fa00 f301 	lsl.w	r3, r0, r1
 80012fc:	fa27 f20c 	lsr.w	r2, r7, ip
 8001300:	fa20 fb0c 	lsr.w	fp, r0, ip
 8001304:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8001308:	4313      	orrs	r3, r2
 800130a:	fbbb f8f9 	udiv	r8, fp, r9
 800130e:	fa1f fe84 	uxth.w	lr, r4
 8001312:	fb09 bb18 	mls	fp, r9, r8, fp
 8001316:	0c1a      	lsrs	r2, r3, #16
 8001318:	fb08 fa0e 	mul.w	sl, r8, lr
 800131c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8001320:	4592      	cmp	sl, r2
 8001322:	fa07 f701 	lsl.w	r7, r7, r1
 8001326:	d93e      	bls.n	80013a6 <__udivmoddi4+0x29a>
 8001328:	18a2      	adds	r2, r4, r2
 800132a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800132e:	d204      	bcs.n	800133a <__udivmoddi4+0x22e>
 8001330:	4592      	cmp	sl, r2
 8001332:	d902      	bls.n	800133a <__udivmoddi4+0x22e>
 8001334:	f1a8 0002 	sub.w	r0, r8, #2
 8001338:	4422      	add	r2, r4
 800133a:	eba2 020a 	sub.w	r2, r2, sl
 800133e:	b29b      	uxth	r3, r3
 8001340:	fbb2 f8f9 	udiv	r8, r2, r9
 8001344:	fb09 2218 	mls	r2, r9, r8, r2
 8001348:	fb08 fe0e 	mul.w	lr, r8, lr
 800134c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001350:	4596      	cmp	lr, r2
 8001352:	d92a      	bls.n	80013aa <__udivmoddi4+0x29e>
 8001354:	18a2      	adds	r2, r4, r2
 8001356:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800135a:	d204      	bcs.n	8001366 <__udivmoddi4+0x25a>
 800135c:	4596      	cmp	lr, r2
 800135e:	d902      	bls.n	8001366 <__udivmoddi4+0x25a>
 8001360:	f1a8 0302 	sub.w	r3, r8, #2
 8001364:	4422      	add	r2, r4
 8001366:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800136a:	fba0 9305 	umull	r9, r3, r0, r5
 800136e:	eba2 020e 	sub.w	r2, r2, lr
 8001372:	429a      	cmp	r2, r3
 8001374:	46ce      	mov	lr, r9
 8001376:	4698      	mov	r8, r3
 8001378:	d302      	bcc.n	8001380 <__udivmoddi4+0x274>
 800137a:	d106      	bne.n	800138a <__udivmoddi4+0x27e>
 800137c:	454f      	cmp	r7, r9
 800137e:	d204      	bcs.n	800138a <__udivmoddi4+0x27e>
 8001380:	ebb9 0e05 	subs.w	lr, r9, r5
 8001384:	eb63 0804 	sbc.w	r8, r3, r4
 8001388:	3801      	subs	r0, #1
 800138a:	b186      	cbz	r6, 80013ae <__udivmoddi4+0x2a2>
 800138c:	ebb7 030e 	subs.w	r3, r7, lr
 8001390:	eb62 0708 	sbc.w	r7, r2, r8
 8001394:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001398:	40cb      	lsrs	r3, r1
 800139a:	ea4c 0303 	orr.w	r3, ip, r3
 800139e:	40cf      	lsrs	r7, r1
 80013a0:	e9c6 3700 	strd	r3, r7, [r6]
 80013a4:	e79c      	b.n	80012e0 <__udivmoddi4+0x1d4>
 80013a6:	4640      	mov	r0, r8
 80013a8:	e7c7      	b.n	800133a <__udivmoddi4+0x22e>
 80013aa:	4643      	mov	r3, r8
 80013ac:	e7db      	b.n	8001366 <__udivmoddi4+0x25a>
 80013ae:	4631      	mov	r1, r6
 80013b0:	e6fd      	b.n	80011ae <__udivmoddi4+0xa2>

080013b2 <strcmp>:
 80013b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013ba:	2a01      	cmp	r2, #1
 80013bc:	bf28      	it	cs
 80013be:	429a      	cmpcs	r2, r3
 80013c0:	d0f7      	beq.n	80013b2 <strcmp>
 80013c2:	1ad0      	subs	r0, r2, r3
 80013c4:	4770      	bx	lr

080013c6 <strlen>:
 80013c6:	4603      	mov	r3, r0
 80013c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d1fb      	bne.n	80013c8 <strlen+0x2>
 80013d0:	1a18      	subs	r0, r3, r0
 80013d2:	3801      	subs	r0, #1
 80013d4:	4770      	bx	lr
	...

080013d8 <ambient_sensors_read>:
    LOG_INF("Found device \"%s\", getting sensor data", dev->name);
    return dev;
}


void ambient_sensors_read(uint8_t samples, float *ambientsensor) {
 80013d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013dc:	b089      	sub	sp, #36	; 0x24
 80013de:	af00      	add	r7, sp, #0
    
    struct sensor_value temp, hum, press;
    
    float sum[3];

    for(int i=0; i<samples; i++) {
 80013e0:	2300      	movs	r3, #0
            printf("SHT3XD: failed: %d\n", rc);
            return;
        }
         */
        k_msleep(20);
        rc = sensor_sample_fetch(dev_bme280);
 80013e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8001608 <ambient_sensors_read+0x230>
void ambient_sensors_read(uint8_t samples, float *ambientsensor) {
 80013e6:	6038      	str	r0, [r7, #0]
 80013e8:	460c      	mov	r4, r1
    for(int i=0; i<samples; i++) {
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	e9d7 3200 	ldrd	r3, r2, [r7]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	dc68      	bgt.n	80014c6 <ambient_sensors_read+0xee>
        sum[1] = sum[1] + sensor_value_to_double(&temp);
        sum[2] = sum[2] + sensor_value_to_double(&press);

    }
    
    double div = samples;
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f835 	bl	8000464 <__aeabi_ui2d>
 80013fa:	4680      	mov	r8, r0
 80013fc:	4689      	mov	r9, r1
    ambientsensor[0] = sum[0]/div;
 80013fe:	4628      	mov	r0, r5
 8001400:	f7ff f852 	bl	80004a8 <__aeabi_f2d>
 8001404:	4642      	mov	r2, r8
 8001406:	464b      	mov	r3, r9
 8001408:	f7ff f9d0 	bl	80007ac <__aeabi_ddiv>
 800140c:	f7ff fade 	bl	80009cc <__aeabi_d2f>
 8001410:	4683      	mov	fp, r0
 8001412:	6020      	str	r0, [r4, #0]
    ambientsensor[1] = sum[1]/div;
 8001414:	4630      	mov	r0, r6
 8001416:	f7ff f847 	bl	80004a8 <__aeabi_f2d>
 800141a:	4642      	mov	r2, r8
 800141c:	464b      	mov	r3, r9
 800141e:	f7ff f9c5 	bl	80007ac <__aeabi_ddiv>
 8001422:	f7ff fad3 	bl	80009cc <__aeabi_d2f>
 8001426:	6060      	str	r0, [r4, #4]
    ambientsensor[2] = sum[2]/div;
 8001428:	4650      	mov	r0, sl
 800142a:	f7ff f83d 	bl	80004a8 <__aeabi_f2d>
 800142e:	4642      	mov	r2, r8
 8001430:	464b      	mov	r3, r9
 8001432:	f7ff f9bb 	bl	80007ac <__aeabi_ddiv>
 8001436:	f7ff fac9 	bl	80009cc <__aeabi_d2f>
    LOG_INF("Humidity:\t %0.2f",ambientsensor[0]);
 800143a:	46e8      	mov	r8, sp
 800143c:	b088      	sub	sp, #32
 800143e:	466d      	mov	r5, sp
 8001440:	4b72      	ldr	r3, [pc, #456]	; (800160c <ambient_sensors_read+0x234>)
    ambientsensor[2] = sum[2]/div;
 8001442:	60a0      	str	r0, [r4, #8]
    LOG_INF("Humidity:\t %0.2f",ambientsensor[0]);
 8001444:	612b      	str	r3, [r5, #16]
 8001446:	2100      	movs	r1, #0
 8001448:	4658      	mov	r0, fp
 800144a:	f7ff fb15 	bl	8000a78 <__addsf3>
 800144e:	f7ff f82b 	bl	80004a8 <__aeabi_f2d>
 8001452:	462e      	mov	r6, r5
 8001454:	f04f 0905 	mov.w	r9, #5
 8001458:	e9c5 0106 	strd	r0, r1, [r5, #24]
 800145c:	f846 9f0c 	str.w	r9, [r6, #12]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8001460:	486b      	ldr	r0, [pc, #428]	; (8001610 <ambient_sensors_read+0x238>)
 8001462:	4632      	mov	r2, r6
 8001464:	2300      	movs	r3, #0
 8001466:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 800146a:	f011 f897 	bl	801259c <z_impl_z_log_msg2_static_create>
    LOG_INF("Temperature:\t %0.2f",ambientsensor[1]);
 800146e:	4b69      	ldr	r3, [pc, #420]	; (8001614 <ambient_sensors_read+0x23c>)
 8001470:	612b      	str	r3, [r5, #16]
 8001472:	46c5      	mov	sp, r8
 8001474:	6860      	ldr	r0, [r4, #4]
 8001476:	46ad      	mov	sp, r5
 8001478:	2100      	movs	r1, #0
 800147a:	f7ff fafd 	bl	8000a78 <__addsf3>
 800147e:	f7ff f813 	bl	80004a8 <__aeabi_f2d>
 8001482:	f8c5 900c 	str.w	r9, [r5, #12]
 8001486:	e9c5 0106 	strd	r0, r1, [r5, #24]
 800148a:	4861      	ldr	r0, [pc, #388]	; (8001610 <ambient_sensors_read+0x238>)
 800148c:	4632      	mov	r2, r6
 800148e:	2300      	movs	r3, #0
 8001490:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 8001494:	f011 f882 	bl	801259c <z_impl_z_log_msg2_static_create>
    LOG_INF("Pressure:\t %0.2f",ambientsensor[2]);
 8001498:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <ambient_sensors_read+0x240>)
 800149a:	612b      	str	r3, [r5, #16]
 800149c:	46c5      	mov	sp, r8
 800149e:	68a0      	ldr	r0, [r4, #8]
 80014a0:	46ad      	mov	sp, r5
 80014a2:	2100      	movs	r1, #0
 80014a4:	f7ff fae8 	bl	8000a78 <__addsf3>
 80014a8:	f7fe fffe 	bl	80004a8 <__aeabi_f2d>
 80014ac:	f8c5 900c 	str.w	r9, [r5, #12]
 80014b0:	e9c5 0106 	strd	r0, r1, [r5, #24]
 80014b4:	4856      	ldr	r0, [pc, #344]	; (8001610 <ambient_sensors_read+0x238>)
 80014b6:	2300      	movs	r3, #0
 80014b8:	4632      	mov	r2, r6
 80014ba:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 80014be:	f011 f86d 	bl	801259c <z_impl_z_log_msg2_static_create>
 80014c2:	46c5      	mov	sp, r8
 80014c4:	e030      	b.n	8001528 <ambient_sensors_read+0x150>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80014c6:	2100      	movs	r1, #0
 80014c8:	20c8      	movs	r0, #200	; 0xc8
 80014ca:	f00f f98b 	bl	80107e4 <z_impl_k_sleep>
        rc = sensor_sample_fetch(dev_bme280);
 80014ce:	f8db 0000 	ldr.w	r0, [fp]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 80014d2:	6883      	ldr	r3, [r0, #8]
 80014d4:	2139      	movs	r1, #57	; 0x39
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4798      	blx	r3
 80014da:	4680      	mov	r8, r0
 80014dc:	20c8      	movs	r0, #200	; 0xc8
 80014de:	2100      	movs	r1, #0
 80014e0:	f00f f980 	bl	80107e4 <z_impl_k_sleep>
        if (rc == 0) {
 80014e4:	f1b8 0f00 	cmp.w	r8, #0
 80014e8:	d11a      	bne.n	8001520 <ambient_sensors_read+0x148>
            rc = sensor_channel_get(dev_bme280, SENSOR_CHAN_PRESS, &press);
 80014ea:	f8db 0000 	ldr.w	r0, [fp]
 80014ee:	f107 0218 	add.w	r2, r7, #24
 80014f2:	210e      	movs	r1, #14
 80014f4:	f010 fb97 	bl	8011c26 <sensor_channel_get>
        if (rc == 0) {
 80014f8:	4680      	mov	r8, r0
 80014fa:	b988      	cbnz	r0, 8001520 <ambient_sensors_read+0x148>
            rc = sensor_channel_get(dev_bme280, SENSOR_CHAN_AMBIENT_TEMP, &temp);
 80014fc:	f8db 0000 	ldr.w	r0, [fp]
 8001500:	f107 0208 	add.w	r2, r7, #8
 8001504:	210d      	movs	r1, #13
 8001506:	f010 fb8e 	bl	8011c26 <sensor_channel_get>
        if (rc == 0) {
 800150a:	4680      	mov	r8, r0
 800150c:	b940      	cbnz	r0, 8001520 <ambient_sensors_read+0x148>
            rc = sensor_channel_get(dev_bme280, SENSOR_CHAN_HUMIDITY, &hum);
 800150e:	f8db 0000 	ldr.w	r0, [fp]
 8001512:	f107 0210 	add.w	r2, r7, #16
 8001516:	2110      	movs	r1, #16
 8001518:	f010 fb85 	bl	8011c26 <sensor_channel_get>
        if (rc != 0) {
 800151c:	4680      	mov	r8, r0
 800151e:	b138      	cbz	r0, 8001530 <ambient_sensors_read+0x158>
            printf("BME280: failed: %d\n", rc);
 8001520:	483e      	ldr	r0, [pc, #248]	; (800161c <ambient_sensors_read+0x244>)
 8001522:	4641      	mov	r1, r8
 8001524:	f00f fe0e 	bl	8011144 <iprintf>
    
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7fe ffa7 	bl	8000484 <__aeabi_i2d>
 8001536:	a332      	add	r3, pc, #200	; (adr r3, 8001600 <ambient_sensors_read+0x228>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f936 	bl	80007ac <__aeabi_ddiv>
 8001540:	4680      	mov	r8, r0
 8001542:	6938      	ldr	r0, [r7, #16]
 8001544:	4689      	mov	r9, r1
 8001546:	f7fe ff9d 	bl	8000484 <__aeabi_i2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4640      	mov	r0, r8
 8001550:	4649      	mov	r1, r9
 8001552:	f7fe fe4b 	bl	80001ec <__adddf3>
 8001556:	4680      	mov	r8, r0
        sum[0] = sum[0] + sensor_value_to_double(&hum);
 8001558:	4628      	mov	r0, r5
 800155a:	4689      	mov	r9, r1
 800155c:	f7fe ffa4 	bl	80004a8 <__aeabi_f2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4640      	mov	r0, r8
 8001566:	4649      	mov	r1, r9
 8001568:	f7fe fe40 	bl	80001ec <__adddf3>
 800156c:	f7ff fa2e 	bl	80009cc <__aeabi_d2f>
 8001570:	4605      	mov	r5, r0
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7fe ff86 	bl	8000484 <__aeabi_i2d>
 8001578:	a321      	add	r3, pc, #132	; (adr r3, 8001600 <ambient_sensors_read+0x228>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f915 	bl	80007ac <__aeabi_ddiv>
 8001582:	4680      	mov	r8, r0
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	4689      	mov	r9, r1
 8001588:	f7fe ff7c 	bl	8000484 <__aeabi_i2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4640      	mov	r0, r8
 8001592:	4649      	mov	r1, r9
 8001594:	f7fe fe2a 	bl	80001ec <__adddf3>
 8001598:	4680      	mov	r8, r0
        sum[1] = sum[1] + sensor_value_to_double(&temp);
 800159a:	4630      	mov	r0, r6
 800159c:	4689      	mov	r9, r1
 800159e:	f7fe ff83 	bl	80004a8 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4640      	mov	r0, r8
 80015a8:	4649      	mov	r1, r9
 80015aa:	f7fe fe1f 	bl	80001ec <__adddf3>
 80015ae:	f7ff fa0d 	bl	80009cc <__aeabi_d2f>
 80015b2:	4606      	mov	r6, r0
 80015b4:	69f8      	ldr	r0, [r7, #28]
 80015b6:	f7fe ff65 	bl	8000484 <__aeabi_i2d>
 80015ba:	a311      	add	r3, pc, #68	; (adr r3, 8001600 <ambient_sensors_read+0x228>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f8f4 	bl	80007ac <__aeabi_ddiv>
 80015c4:	4680      	mov	r8, r0
 80015c6:	69b8      	ldr	r0, [r7, #24]
 80015c8:	4689      	mov	r9, r1
 80015ca:	f7fe ff5b 	bl	8000484 <__aeabi_i2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4640      	mov	r0, r8
 80015d4:	4649      	mov	r1, r9
 80015d6:	f7fe fe09 	bl	80001ec <__adddf3>
 80015da:	4680      	mov	r8, r0
        sum[2] = sum[2] + sensor_value_to_double(&press);
 80015dc:	4650      	mov	r0, sl
 80015de:	4689      	mov	r9, r1
 80015e0:	f7fe ff62 	bl	80004a8 <__aeabi_f2d>
 80015e4:	460b      	mov	r3, r1
 80015e6:	4602      	mov	r2, r0
 80015e8:	4649      	mov	r1, r9
 80015ea:	4640      	mov	r0, r8
 80015ec:	f7fe fdfe 	bl	80001ec <__adddf3>
 80015f0:	f7ff f9ec 	bl	80009cc <__aeabi_d2f>
    for(int i=0; i<samples; i++) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
        sum[2] = sum[2] + sensor_value_to_double(&press);
 80015f8:	4682      	mov	sl, r0
    for(int i=0; i<samples; i++) {
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	e6f6      	b.n	80013ec <ambient_sensors_read+0x14>
 80015fe:	bf00      	nop
 8001600:	00000000 	.word	0x00000000
 8001604:	412e8480 	.word	0x412e8480
 8001608:	20000cd8 	.word	0x20000cd8
 800160c:	08018b71 	.word	0x08018b71
 8001610:	08018070 	.word	0x08018070
 8001614:	08018b82 	.word	0x08018b82
 8001618:	08018b96 	.word	0x08018b96
 800161c:	08018b5d 	.word	0x08018b5d

08001620 <floor>:
 8001620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001624:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8001628:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800162c:	2e13      	cmp	r6, #19
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4607      	mov	r7, r0
 8001634:	460c      	mov	r4, r1
 8001636:	4605      	mov	r5, r0
 8001638:	dc33      	bgt.n	80016a2 <floor+0x82>
 800163a:	2e00      	cmp	r6, #0
 800163c:	da14      	bge.n	8001668 <floor+0x48>
 800163e:	a334      	add	r3, pc, #208	; (adr r3, 8001710 <floor+0xf0>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe fdd2 	bl	80001ec <__adddf3>
 8001648:	2200      	movs	r2, #0
 800164a:	2300      	movs	r3, #0
 800164c:	f7ff fd54 	bl	80010f8 <__aeabi_dcmpgt>
 8001650:	b138      	cbz	r0, 8001662 <floor+0x42>
 8001652:	2c00      	cmp	r4, #0
 8001654:	da58      	bge.n	8001708 <floor+0xe8>
 8001656:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800165a:	431d      	orrs	r5, r3
 800165c:	d001      	beq.n	8001662 <floor+0x42>
 800165e:	4c2e      	ldr	r4, [pc, #184]	; (8001718 <floor+0xf8>)
 8001660:	2500      	movs	r5, #0
 8001662:	4623      	mov	r3, r4
 8001664:	462f      	mov	r7, r5
 8001666:	e025      	b.n	80016b4 <floor+0x94>
 8001668:	4a2c      	ldr	r2, [pc, #176]	; (800171c <floor+0xfc>)
 800166a:	fa42 f806 	asr.w	r8, r2, r6
 800166e:	ea01 0208 	and.w	r2, r1, r8
 8001672:	4302      	orrs	r2, r0
 8001674:	d01e      	beq.n	80016b4 <floor+0x94>
 8001676:	a326      	add	r3, pc, #152	; (adr r3, 8001710 <floor+0xf0>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe fdb6 	bl	80001ec <__adddf3>
 8001680:	2200      	movs	r2, #0
 8001682:	2300      	movs	r3, #0
 8001684:	f7ff fd38 	bl	80010f8 <__aeabi_dcmpgt>
 8001688:	2800      	cmp	r0, #0
 800168a:	d0ea      	beq.n	8001662 <floor+0x42>
 800168c:	2c00      	cmp	r4, #0
 800168e:	bfbe      	ittt	lt
 8001690:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8001694:	fa43 f606 	asrlt.w	r6, r3, r6
 8001698:	19a4      	addlt	r4, r4, r6
 800169a:	ea24 0408 	bic.w	r4, r4, r8
 800169e:	2500      	movs	r5, #0
 80016a0:	e7df      	b.n	8001662 <floor+0x42>
 80016a2:	2e33      	cmp	r6, #51	; 0x33
 80016a4:	dd0a      	ble.n	80016bc <floor+0x9c>
 80016a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80016aa:	d103      	bne.n	80016b4 <floor+0x94>
 80016ac:	f7fe fd9e 	bl	80001ec <__adddf3>
 80016b0:	4607      	mov	r7, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4638      	mov	r0, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016bc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c4:	fa22 f808 	lsr.w	r8, r2, r8
 80016c8:	ea18 0f00 	tst.w	r8, r0
 80016cc:	d0f2      	beq.n	80016b4 <floor+0x94>
 80016ce:	a310      	add	r3, pc, #64	; (adr r3, 8001710 <floor+0xf0>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe fd8a 	bl	80001ec <__adddf3>
 80016d8:	2200      	movs	r2, #0
 80016da:	2300      	movs	r3, #0
 80016dc:	f7ff fd0c 	bl	80010f8 <__aeabi_dcmpgt>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d0be      	beq.n	8001662 <floor+0x42>
 80016e4:	2c00      	cmp	r4, #0
 80016e6:	da02      	bge.n	80016ee <floor+0xce>
 80016e8:	2e14      	cmp	r6, #20
 80016ea:	d103      	bne.n	80016f4 <floor+0xd4>
 80016ec:	3401      	adds	r4, #1
 80016ee:	ea25 0508 	bic.w	r5, r5, r8
 80016f2:	e7b6      	b.n	8001662 <floor+0x42>
 80016f4:	2301      	movs	r3, #1
 80016f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80016fa:	fa03 f606 	lsl.w	r6, r3, r6
 80016fe:	4435      	add	r5, r6
 8001700:	42bd      	cmp	r5, r7
 8001702:	bf38      	it	cc
 8001704:	18e4      	addcc	r4, r4, r3
 8001706:	e7f2      	b.n	80016ee <floor+0xce>
 8001708:	2500      	movs	r5, #0
 800170a:	462c      	mov	r4, r5
 800170c:	e7a9      	b.n	8001662 <floor+0x42>
 800170e:	bf00      	nop
 8001710:	8800759c 	.word	0x8800759c
 8001714:	7e37e43c 	.word	0x7e37e43c
 8001718:	bff00000 	.word	0xbff00000
 800171c:	000fffff 	.word	0x000fffff

08001720 <get_bme280_device>:
const struct device *get_bme280_device(void) {
 8001720:	b530      	push	{r4, r5, lr}
 8001722:	b08b      	sub	sp, #44	; 0x2c
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <get_bme280_device+0x64>)
 8001726:	f00e f8f3 	bl	800f910 <z_impl_device_get_binding>
    if (dev == NULL) {
 800172a:	4604      	mov	r4, r0
 800172c:	b968      	cbnz	r0, 800174a <get_bme280_device+0x2a>
        LOG_ERR("\nError: no device BME280 found.\n");
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <get_bme280_device+0x68>)
 8001730:	9308      	str	r3, [sp, #32]
 8001732:	2302      	movs	r3, #2
 8001734:	9307      	str	r3, [sp, #28]
 8001736:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800173a:	4603      	mov	r3, r0
 800173c:	aa07      	add	r2, sp, #28
 800173e:	4813      	ldr	r0, [pc, #76]	; (800178c <get_bme280_device+0x6c>)
 8001740:	f010 ff2c 	bl	801259c <z_impl_z_log_msg2_static_create>
}
 8001744:	4620      	mov	r0, r4
 8001746:	b00b      	add	sp, #44	; 0x2c
 8001748:	bd30      	pop	{r4, r5, pc}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800174a:	f015 fcea 	bl	8017122 <z_device_is_ready>
 800174e:	6823      	ldr	r3, [r4, #0]
        LOG_ERR("\nError: Device \"%s\" is not ready; "
 8001750:	9303      	str	r3, [sp, #12]
    if (!device_is_ready(dev)) {
 8001752:	4605      	mov	r5, r0
 8001754:	b950      	cbnz	r0, 800176c <get_bme280_device+0x4c>
        LOG_ERR("\nError: Device \"%s\" is not ready; "
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <get_bme280_device+0x70>)
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <get_bme280_device+0x6c>)
 800175a:	9000      	str	r0, [sp, #0]
 800175c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	4603      	mov	r3, r0
 8001764:	f010 fa62 	bl	8011c2c <z_log_msg2_runtime_create.constprop.0>
        return NULL;
 8001768:	462c      	mov	r4, r5
 800176a:	e7eb      	b.n	8001744 <get_bme280_device+0x24>
    LOG_INF("Found device \"%s\", getting sensor data", dev->name);
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <get_bme280_device+0x74>)
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	2300      	movs	r3, #0
 8001772:	e9cd 3300 	strd	r3, r3, [sp]
 8001776:	4905      	ldr	r1, [pc, #20]	; (800178c <get_bme280_device+0x6c>)
 8001778:	2203      	movs	r2, #3
 800177a:	4618      	mov	r0, r3
 800177c:	f010 fa56 	bl	8011c2c <z_log_msg2_runtime_create.constprop.0>
    return dev;
 8001780:	e7e0      	b.n	8001744 <get_bme280_device+0x24>
 8001782:	bf00      	nop
 8001784:	08018aba 	.word	0x08018aba
 8001788:	08018ac1 	.word	0x08018ac1
 800178c:	08018070 	.word	0x08018070
 8001790:	08018ae2 	.word	0x08018ae2
 8001794:	08018b36 	.word	0x08018b36

08001798 <save_data>:
                    
          
}

/* * * * * * * * Save data to SD CARD * * * * * * * * * */
 void save_data(char* data, char* type) {
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	b098      	sub	sp, #96	; 0x60
     
    LOG_INF("Saving data...");
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <save_data+0xc0>)
 800179e:	9312      	str	r3, [sp, #72]	; 0x48
 80017a0:	ad0e      	add	r5, sp, #56	; 0x38
 80017a2:	2302      	movs	r3, #2
 void save_data(char* data, char* type) {
 80017a4:	460e      	mov	r6, r1
    LOG_INF("Saving data...");
 80017a6:	aa11      	add	r2, sp, #68	; 0x44
 80017a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 void save_data(char* data, char* type) {
 80017ac:	4604      	mov	r4, r0
    LOG_INF("Saving data...");
 80017ae:	482b      	ldr	r0, [pc, #172]	; (800185c <save_data+0xc4>)
 80017b0:	9311      	str	r3, [sp, #68]	; 0x44
 80017b2:	f010 fa4a 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
    
    
    char fname[40];
    
    //snprintfcb(fname, 40, "/SD:/%s.%s", get_date(), type);
    snprintfcb(fname, 40, "/SD:/0000.%s", type);
 80017b6:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <save_data+0xc8>)
 80017b8:	4633      	mov	r3, r6
 80017ba:	2128      	movs	r1, #40	; 0x28
 80017bc:	4628      	mov	r0, r5
 80017be:	f010 faec 	bl	8011d9a <snprintfcb>

        struct fs_file_t file;
        fs_file_t_init(&file);
        LOG_INF("Attemting to write to file: %s",fname);
 80017c2:	4a28      	ldr	r2, [pc, #160]	; (8001864 <save_data+0xcc>)
 80017c4:	4925      	ldr	r1, [pc, #148]	; (800185c <save_data+0xc4>)
 80017c6:	9503      	str	r5, [sp, #12]
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
 80017c8:	2300      	movs	r3, #0
 80017ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2203      	movs	r2, #3
 80017d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80017d8:	9307      	str	r3, [sp, #28]
 80017da:	f010 fa39 	bl	8011c50 <z_log_msg2_runtime_create.constprop.0>
        int rc = fs_open(&file, fname, FS_O_CREATE | FS_O_APPEND | FS_O_RDWR);
 80017de:	2233      	movs	r2, #51	; 0x33
 80017e0:	4629      	mov	r1, r5
 80017e2:	a805      	add	r0, sp, #20
 80017e4:	f00a f89c 	bl	800b920 <fs_open>
        if (rc < 0) {
 80017e8:	2800      	cmp	r0, #0
 80017ea:	da0a      	bge.n	8001802 <save_data+0x6a>
                LOG_ERR("FAIL: open file to write: %d", rc);
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <save_data+0xd0>)
 80017ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80017f0:	e9cd 300c 	strd	r3, r0, [sp, #48]	; 0x30
 80017f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80017f8:	2303      	movs	r3, #3
 80017fa:	4818      	ldr	r0, [pc, #96]	; (800185c <save_data+0xc4>)
 80017fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80017fe:	f010 fa24 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
        }
        rc = fs_write(&file, data, strlen(data));
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fddf 	bl	80013c6 <strlen>
 8001808:	4621      	mov	r1, r4
 800180a:	4602      	mov	r2, r0
 800180c:	a805      	add	r0, sp, #20
 800180e:	f00a f90f 	bl	800ba30 <fs_write>

        if (rc < 0) {
 8001812:	2800      	cmp	r0, #0
 8001814:	f04f 0303 	mov.w	r3, #3
 8001818:	da13      	bge.n	8001842 <save_data+0xaa>
                LOG_ERR("FAIL: cannot write: %d\n", rc);
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <save_data+0xd4>)
 800181c:	930b      	str	r3, [sp, #44]	; 0x2c
 800181e:	e9cd 200c 	strd	r2, r0, [sp, #48]	; 0x30
 8001822:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <save_data+0xc4>)
 8001828:	aa0b      	add	r2, sp, #44	; 0x2c
 800182a:	f010 fa0e 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
 800182e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001832:	2100      	movs	r1, #0
 8001834:	f00e ffd6 	bl	80107e4 <z_impl_k_sleep>
        } else {

            LOG_INF(" **** fs_write wrote %d bytes ****",rc);

        }
        fs_close(&file);
 8001838:	a805      	add	r0, sp, #20
 800183a:	f00a f8d5 	bl	800b9e8 <fs_close>

 
 }
 800183e:	b018      	add	sp, #96	; 0x60
 8001840:	bd70      	pop	{r4, r5, r6, pc}
            LOG_INF(" **** fs_write wrote %d bytes ****",rc);
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <save_data+0xd8>)
 8001844:	930b      	str	r3, [sp, #44]	; 0x2c
 8001846:	e9cd 200c 	strd	r2, r0, [sp, #48]	; 0x30
 800184a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800184e:	4803      	ldr	r0, [pc, #12]	; (800185c <save_data+0xc4>)
 8001850:	aa0b      	add	r2, sp, #44	; 0x2c
 8001852:	f010 f9fa 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
 8001856:	e7ef      	b.n	8001838 <save_data+0xa0>
 8001858:	08018bb7 	.word	0x08018bb7
 800185c:	08018088 	.word	0x08018088
 8001860:	08018bc6 	.word	0x08018bc6
 8001864:	08018bd3 	.word	0x08018bd3
 8001868:	08018bf2 	.word	0x08018bf2
 800186c:	08018c0f 	.word	0x08018c0f
 8001870:	08018c27 	.word	0x08018c27

08001874 <lsdir>:

/* * * * * * * * List Dir Contents * * * * * * * * * */

 int lsdir(const char *path)
{
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001876:	b089      	sub	sp, #36	; 0x24
	static struct fs_dirent entry;

	fs_dir_t_init(&dirp);

	/* Verify fs_opendir() */
	res = fs_opendir(&dirp, path);
 8001878:	4601      	mov	r1, r0
{
 800187a:	4605      	mov	r5, r0
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
 800187c:	2600      	movs	r6, #0
	res = fs_opendir(&dirp, path);
 800187e:	a806      	add	r0, sp, #24
 8001880:	e9cd 6606 	strd	r6, r6, [sp, #24]
 8001884:	f00a f8f6 	bl	800ba74 <fs_opendir>
	if (res) {
 8001888:	4604      	mov	r4, r0
 800188a:	b170      	cbz	r0, 80018aa <lsdir+0x36>
		LOG_ERR("Error opening dir %s [%d]", path, res);
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <lsdir+0x9c>)
 800188e:	4921      	ldr	r1, [pc, #132]	; (8001914 <lsdir+0xa0>)
 8001890:	9600      	str	r6, [sp, #0]
 8001892:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8001896:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	4633      	mov	r3, r6
 800189e:	4630      	mov	r0, r6
 80018a0:	f010 f9d6 	bl	8011c50 <z_log_msg2_runtime_create.constprop.0>

	/* Verify fs_closedir() */
	fs_closedir(&dirp);

	return res;
 80018a4:	4620      	mov	r0, r4
 80018a6:	b009      	add	sp, #36	; 0x24
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("\nListing dir %s ...", path);
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <lsdir+0xa4>)
 80018ac:	9503      	str	r5, [sp, #12]
 80018ae:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80018b2:	4918      	ldr	r1, [pc, #96]	; (8001914 <lsdir+0xa0>)
 80018b4:	9000      	str	r0, [sp, #0]
 80018b6:	4603      	mov	r3, r0
 80018b8:	2203      	movs	r2, #3
		res = fs_readdir(&dirp, &entry);
 80018ba:	4d18      	ldr	r5, [pc, #96]	; (800191c <lsdir+0xa8>)
			LOG_INF("[FILE] %s (size = %zu)",
 80018bc:	4f18      	ldr	r7, [pc, #96]	; (8001920 <lsdir+0xac>)
	LOG_INF("\nListing dir %s ...", path);
 80018be:	f010 f9c7 	bl	8011c50 <z_log_msg2_runtime_create.constprop.0>
 80018c2:	1c6e      	adds	r6, r5, #1
		res = fs_readdir(&dirp, &entry);
 80018c4:	4915      	ldr	r1, [pc, #84]	; (800191c <lsdir+0xa8>)
 80018c6:	a806      	add	r0, sp, #24
 80018c8:	f00a f946 	bl	800bb58 <fs_readdir>
		if (res || entry.name[0] == 0) {
 80018cc:	4604      	mov	r4, r0
 80018ce:	b9d8      	cbnz	r0, 8001908 <lsdir+0x94>
 80018d0:	786b      	ldrb	r3, [r5, #1]
 80018d2:	b1cb      	cbz	r3, 8001908 <lsdir+0x94>
		if (entry.type == FS_DIR_ENTRY_DIR) {
 80018d4:	782b      	ldrb	r3, [r5, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d10a      	bne.n	80018f0 <lsdir+0x7c>
			LOG_INF("[DIR ] %s", entry.name);
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <lsdir+0xb0>)
 80018dc:	490d      	ldr	r1, [pc, #52]	; (8001914 <lsdir+0xa0>)
 80018de:	9603      	str	r6, [sp, #12]
 80018e0:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80018e4:	9000      	str	r0, [sp, #0]
 80018e6:	4603      	mov	r3, r0
 80018e8:	2203      	movs	r2, #3
 80018ea:	f010 f9b1 	bl	8011c50 <z_log_msg2_runtime_create.constprop.0>
 80018ee:	e7e9      	b.n	80018c4 <lsdir+0x50>
			LOG_INF("[FILE] %s (size = %zu)",
 80018f0:	692b      	ldr	r3, [r5, #16]
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <lsdir+0xa0>)
 80018f4:	9000      	str	r0, [sp, #0]
 80018f6:	e9cd 6303 	strd	r6, r3, [sp, #12]
 80018fa:	e9cd 0701 	strd	r0, r7, [sp, #4]
 80018fe:	4603      	mov	r3, r0
 8001900:	2203      	movs	r2, #3
 8001902:	f010 f9a5 	bl	8011c50 <z_log_msg2_runtime_create.constprop.0>
 8001906:	e7dd      	b.n	80018c4 <lsdir+0x50>
	fs_closedir(&dirp);
 8001908:	a806      	add	r0, sp, #24
 800190a:	f00a f9a7 	bl	800bc5c <fs_closedir>
	return res;
 800190e:	e7c9      	b.n	80018a4 <lsdir+0x30>
 8001910:	08018c4a 	.word	0x08018c4a
 8001914:	08018088 	.word	0x08018088
 8001918:	08018c64 	.word	0x08018c64
 800191c:	20000cdc 	.word	0x20000cdc
 8001920:	08018c82 	.word	0x08018c82
 8001924:	08018c78 	.word	0x08018c78

08001928 <init_and_mount_sdcard>:
 void init_and_mount_sdcard() {
 8001928:	b530      	push	{r4, r5, lr}
	mp.type = FS_FATFS;
 800192a:	4c36      	ldr	r4, [pc, #216]	; (8001a04 <init_and_mount_sdcard+0xdc>)
            if (disk_access_init(disk_pdrv) != 0) {
 800192c:	4836      	ldr	r0, [pc, #216]	; (8001a08 <init_and_mount_sdcard+0xe0>)
	mp.type = FS_FATFS;
 800192e:	2300      	movs	r3, #0
 void init_and_mount_sdcard() {
 8001930:	b089      	sub	sp, #36	; 0x24
	mp.type = FS_FATFS;
 8001932:	60a3      	str	r3, [r4, #8]
	mp.fs_data = &fat_fs;
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <init_and_mount_sdcard+0xe4>)
 8001936:	6123      	str	r3, [r4, #16]
            if (disk_access_init(disk_pdrv) != 0) {
 8001938:	f010 fe50 	bl	80125dc <disk_access_init>
 800193c:	b300      	cbz	r0, 8001980 <init_and_mount_sdcard+0x58>
                    LOG_ERR("Storage init ERROR!");
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <init_and_mount_sdcard+0xe8>)
                    LOG_ERR("Unable to get sector size");
 8001940:	9306      	str	r3, [sp, #24]
 8001942:	2302      	movs	r3, #2
 8001944:	9305      	str	r3, [sp, #20]
 8001946:	aa05      	add	r2, sp, #20
 8001948:	f44f 5182 	mov.w	r1, #4160	; 0x1040
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 800194c:	4831      	ldr	r0, [pc, #196]	; (8001a14 <init_and_mount_sdcard+0xec>)
    mp.mnt_point = disk_mount_pt;
 800194e:	4d32      	ldr	r5, [pc, #200]	; (8001a18 <init_and_mount_sdcard+0xf0>)
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 8001950:	f010 f97b 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
    int res = fs_mount(&mp);
 8001954:	482b      	ldr	r0, [pc, #172]	; (8001a04 <init_and_mount_sdcard+0xdc>)
    mp.mnt_point = disk_mount_pt;
 8001956:	60e5      	str	r5, [r4, #12]
    int res = fs_mount(&mp);
 8001958:	f00a f9a6 	bl	800bca8 <fs_mount>
    if (res == FR_OK) {
 800195c:	2302      	movs	r3, #2
 800195e:	2800      	cmp	r0, #0
 8001960:	d144      	bne.n	80019ec <init_and_mount_sdcard+0xc4>
            LOG_INF("Disk mounted.");
 8001962:	4a2e      	ldr	r2, [pc, #184]	; (8001a1c <init_and_mount_sdcard+0xf4>)
 8001964:	482b      	ldr	r0, [pc, #172]	; (8001a14 <init_and_mount_sdcard+0xec>)
 8001966:	e9cd 3205 	strd	r3, r2, [sp, #20]
 800196a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800196e:	aa05      	add	r2, sp, #20
 8001970:	f010 f96b 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
            lsdir(disk_mount_pt);
 8001974:	4628      	mov	r0, r5
}
 8001976:	b009      	add	sp, #36	; 0x24
 8001978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lsdir(disk_mount_pt);
 800197c:	f7ff bf7a 	b.w	8001874 <lsdir>
            if (disk_access_ioctl(disk_pdrv,
 8001980:	4821      	ldr	r0, [pc, #132]	; (8001a08 <init_and_mount_sdcard+0xe0>)
 8001982:	466a      	mov	r2, sp
 8001984:	2101      	movs	r1, #1
 8001986:	f010 fe73 	bl	8012670 <disk_access_ioctl>
 800198a:	b108      	cbz	r0, 8001990 <init_and_mount_sdcard+0x68>
                    LOG_ERR("Unable to get sector count");
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <init_and_mount_sdcard+0xf8>)
 800198e:	e7d7      	b.n	8001940 <init_and_mount_sdcard+0x18>
            LOG_INF("Block count %u", block_count);
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <init_and_mount_sdcard+0xfc>)
 8001992:	4820      	ldr	r0, [pc, #128]	; (8001a14 <init_and_mount_sdcard+0xec>)
 8001994:	9306      	str	r3, [sp, #24]
 8001996:	aa05      	add	r2, sp, #20
 8001998:	9b00      	ldr	r3, [sp, #0]
 800199a:	9307      	str	r3, [sp, #28]
 800199c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80019a0:	2503      	movs	r5, #3
 80019a2:	9505      	str	r5, [sp, #20]
 80019a4:	f010 f951 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
            if (disk_access_ioctl(disk_pdrv,
 80019a8:	4817      	ldr	r0, [pc, #92]	; (8001a08 <init_and_mount_sdcard+0xe0>)
 80019aa:	aa01      	add	r2, sp, #4
 80019ac:	2102      	movs	r1, #2
 80019ae:	f010 fe5f 	bl	8012670 <disk_access_ioctl>
 80019b2:	b108      	cbz	r0, 80019b8 <init_and_mount_sdcard+0x90>
                    LOG_ERR("Unable to get sector size");
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <init_and_mount_sdcard+0x100>)
 80019b6:	e7c3      	b.n	8001940 <init_and_mount_sdcard+0x18>
            LOG_INF("Sector size %u", block_size);
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <init_and_mount_sdcard+0x104>)
 80019ba:	9306      	str	r3, [sp, #24]
 80019bc:	aa05      	add	r2, sp, #20
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	4814      	ldr	r0, [pc, #80]	; (8001a14 <init_and_mount_sdcard+0xec>)
 80019c2:	9307      	str	r3, [sp, #28]
 80019c4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80019c8:	9505      	str	r5, [sp, #20]
 80019ca:	f010 f93e 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
            memory_size_mb = (uint64_t)block_count * block_size;
 80019ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80019d2:	fba3 3202 	umull	r3, r2, r3, r2
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 80019d6:	0d1b      	lsrs	r3, r3, #20
 80019d8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <init_and_mount_sdcard+0x108>)
 80019de:	9505      	str	r5, [sp, #20]
 80019e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80019e4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80019e8:	aa05      	add	r2, sp, #20
 80019ea:	e7af      	b.n	800194c <init_and_mount_sdcard+0x24>
            LOG_ERR("Error mounting disk.");
 80019ec:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <init_and_mount_sdcard+0x10c>)
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <init_and_mount_sdcard+0xec>)
 80019f0:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80019f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80019f8:	aa05      	add	r2, sp, #20
 80019fa:	f010 f926 	bl	8011c4a <z_log_msg2_static_create.constprop.0>
}
 80019fe:	b009      	add	sp, #36	; 0x24
 8001a00:	bd30      	pop	{r4, r5, pc}
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000
 8001a08:	08018c99 	.word	0x08018c99
 8001a0c:	20000cf0 	.word	0x20000cf0
 8001a10:	08018c9c 	.word	0x08018c9c
 8001a14:	08018088 	.word	0x08018088
 8001a18:	08018d16 	.word	0x08018d16
 8001a1c:	08018d1b 	.word	0x08018d1b
 8001a20:	08018cb0 	.word	0x08018cb0
 8001a24:	08018ccb 	.word	0x08018ccb
 8001a28:	08018cda 	.word	0x08018cda
 8001a2c:	08018cf4 	.word	0x08018cf4
 8001a30:	08018d03 	.word	0x08018d03
 8001a34:	08018d29 	.word	0x08018d29

08001a38 <gas_sensors_init>:
const struct device *i2c3_dev;




void gas_sensors_init() {
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	b086      	sub	sp, #24
     
    /* * * * * * * * * * * * * i2c3 Device * * * * * * * * * * * * * */
    uint32_t i2c3_cfg = I2C_SPEED_SET(I2C_SPEED_FAST) | I2C_MODE_MASTER;

    LOG_INF("Initializing I2C 3...");
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <gas_sensors_init+0x60>)
 8001a3e:	9304      	str	r3, [sp, #16]
 8001a40:	2402      	movs	r4, #2
 8001a42:	9403      	str	r4, [sp, #12]
 8001a44:	4815      	ldr	r0, [pc, #84]	; (8001a9c <gas_sensors_init+0x64>)
 8001a46:	2300      	movs	r3, #0
 8001a48:	aa03      	add	r2, sp, #12
 8001a4a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001a4e:	f010 fda5 	bl	801259c <z_impl_z_log_msg2_static_create>
 8001a52:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <gas_sensors_init+0x68>)
 8001a54:	f00d ff5c 	bl	800f910 <z_impl_device_get_binding>
    i2c3_dev = device_get_binding("I2C_3");
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <gas_sensors_init+0x6c>)
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6010      	str	r0, [r2, #0]
    if (!i2c3_dev) {
 8001a5e:	b930      	cbnz	r0, 8001a6e <gas_sensors_init+0x36>
        LOG_INF("I2C3: Device driver not found.");
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <gas_sensors_init+0x70>)
    }

    if (i2c_configure(i2c3_dev, i2c3_cfg)) {
        LOG_ERR("I2C3 config failed");
    } else {
        LOG_INF("i2c3 configured...");
 8001a62:	e9cd 4203 	strd	r4, r2, [sp, #12]
 8001a66:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001a6a:	aa03      	add	r2, sp, #12
 8001a6c:	e00c      	b.n	8001a88 <gas_sensors_init+0x50>
				       uint32_t dev_config)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	return api->configure(dev, dev_config);
 8001a6e:	6883      	ldr	r3, [r0, #8]
 8001a70:	2114      	movs	r1, #20
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4798      	blx	r3
    if (i2c_configure(i2c3_dev, i2c3_cfg)) {
 8001a76:	4603      	mov	r3, r0
 8001a78:	b158      	cbz	r0, 8001a92 <gas_sensors_init+0x5a>
        LOG_ERR("I2C3 config failed");
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <gas_sensors_init+0x74>)
 8001a7c:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8001a80:	2300      	movs	r3, #0
 8001a82:	aa03      	add	r2, sp, #12
 8001a84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <gas_sensors_init+0x64>)
 8001a8a:	f010 fd87 	bl	801259c <z_impl_z_log_msg2_static_create>
    }

}
 8001a8e:	b006      	add	sp, #24
 8001a90:	bd10      	pop	{r4, pc}
        LOG_INF("i2c3 configured...");
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <gas_sensors_init+0x78>)
 8001a94:	e7e5      	b.n	8001a62 <gas_sensors_init+0x2a>
 8001a96:	bf00      	nop
 8001a98:	08018d4a 	.word	0x08018d4a
 8001a9c:	08018098 	.word	0x08018098
 8001aa0:	08018d60 	.word	0x08018d60
 8001aa4:	20000f20 	.word	0x20000f20
 8001aa8:	08018d66 	.word	0x08018d66
 8001aac:	08018d85 	.word	0x08018d85
 8001ab0:	08018d98 	.word	0x08018d98

08001ab4 <gas_sensors_read>:




void gas_sensors_read(uint16_t *result, int samples) {
 8001ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ab8:	b08b      	sub	sp, #44	; 0x2c
 8001aba:	af00      	add	r7, sp, #0
                    cmd[1] = 0xF1;
                    break;
            }

            cmd[2] = 0x83;
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001abc:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8001ce0 <gas_sensors_read+0x22c>
void gas_sensors_read(uint16_t *result, int samples) {
 8001ac0:	6079      	str	r1, [r7, #4]
 8001ac2:	4604      	mov	r4, r0
    for (int s=0; s < samples; s++) {
 8001ac4:	f04f 0900 	mov.w	r9, #0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	454b      	cmp	r3, r9
 8001acc:	dc62      	bgt.n	8001b94 <gas_sensors_read+0xe0>
 8001ace:	1ea3      	subs	r3, r4, #2
 8001ad0:	f104 010e 	add.w	r1, r4, #14
        }
        k_msleep(1000);
    }
    
    for (int i=0; i< 8; i++) {
        result[i] = result[i]/samples;
 8001ad4:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	fb92 f2f0 	sdiv	r2, r2, r0
    for (int i=0; i< 8; i++) {
 8001ade:	4299      	cmp	r1, r3
        result[i] = result[i]/samples;
 8001ae0:	801a      	strh	r2, [r3, #0]
    for (int i=0; i< 8; i++) {
 8001ae2:	d1f7      	bne.n	8001ad4 <gas_sensors_read+0x20>
    }
    
            LOG_INF("Gas Sensors:");
 8001ae4:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <gas_sensors_read+0x230>)
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	46e9      	mov	r9, sp
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	487e      	ldr	r0, [pc, #504]	; (8001ce8 <gas_sensors_read+0x234>)
 8001af0:	f107 021c 	add.w	r2, r7, #28
 8001af4:	2300      	movs	r3, #0
 8001af6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001afa:	f010 fd4f 	bl	801259c <z_impl_z_log_msg2_static_create>
            LOG_INF("SO2   we: %d   ae: %d", result[0], result[1]);
 8001afe:	b088      	sub	sp, #32
 8001b00:	466d      	mov	r5, sp
 8001b02:	8822      	ldrh	r2, [r4, #0]
 8001b04:	4979      	ldr	r1, [pc, #484]	; (8001cec <gas_sensors_read+0x238>)
 8001b06:	8863      	ldrh	r3, [r4, #2]
 8001b08:	61ab      	str	r3, [r5, #24]
 8001b0a:	462e      	mov	r6, r5
 8001b0c:	f04f 0804 	mov.w	r8, #4
 8001b10:	e9c5 1204 	strd	r1, r2, [r5, #16]
 8001b14:	f846 8f0c 	str.w	r8, [r6, #12]!
 8001b18:	4873      	ldr	r0, [pc, #460]	; (8001ce8 <gas_sensors_read+0x234>)
 8001b1a:	4632      	mov	r2, r6
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b22:	f010 fd3b 	bl	801259c <z_impl_z_log_msg2_static_create>
            LOG_INF("O3N2  we: %d   ae: %d", result[2], result[3]);
 8001b26:	4972      	ldr	r1, [pc, #456]	; (8001cf0 <gas_sensors_read+0x23c>)
 8001b28:	88a2      	ldrh	r2, [r4, #4]
 8001b2a:	88e3      	ldrh	r3, [r4, #6]
 8001b2c:	61ab      	str	r3, [r5, #24]
 8001b2e:	46cd      	mov	sp, r9
 8001b30:	e9c5 1204 	strd	r1, r2, [r5, #16]
 8001b34:	46ad      	mov	sp, r5
 8001b36:	f8c5 800c 	str.w	r8, [r5, #12]
 8001b3a:	486b      	ldr	r0, [pc, #428]	; (8001ce8 <gas_sensors_read+0x234>)
 8001b3c:	4632      	mov	r2, r6
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b44:	f010 fd2a 	bl	801259c <z_impl_z_log_msg2_static_create>
            LOG_INF("NO2   we: %d   ae: %d", result[4], result[5]);
 8001b48:	496a      	ldr	r1, [pc, #424]	; (8001cf4 <gas_sensors_read+0x240>)
 8001b4a:	8922      	ldrh	r2, [r4, #8]
 8001b4c:	8963      	ldrh	r3, [r4, #10]
 8001b4e:	61ab      	str	r3, [r5, #24]
 8001b50:	46cd      	mov	sp, r9
 8001b52:	e9c5 1204 	strd	r1, r2, [r5, #16]
 8001b56:	46ad      	mov	sp, r5
 8001b58:	f8c5 800c 	str.w	r8, [r5, #12]
 8001b5c:	4862      	ldr	r0, [pc, #392]	; (8001ce8 <gas_sensors_read+0x234>)
 8001b5e:	4632      	mov	r2, r6
 8001b60:	2300      	movs	r3, #0
 8001b62:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b66:	f010 fd19 	bl	801259c <z_impl_z_log_msg2_static_create>
            LOG_INF("CO    we: %d   ae: %d", result[6], result[7]); 
 8001b6a:	4963      	ldr	r1, [pc, #396]	; (8001cf8 <gas_sensors_read+0x244>)
 8001b6c:	89a2      	ldrh	r2, [r4, #12]
 8001b6e:	89e3      	ldrh	r3, [r4, #14]
 8001b70:	61ab      	str	r3, [r5, #24]
 8001b72:	46cd      	mov	sp, r9
 8001b74:	e9c5 1204 	strd	r1, r2, [r5, #16]
 8001b78:	46ad      	mov	sp, r5
 8001b7a:	f8c5 800c 	str.w	r8, [r5, #12]
 8001b7e:	485a      	ldr	r0, [pc, #360]	; (8001ce8 <gas_sensors_read+0x234>)
 8001b80:	2300      	movs	r3, #0
 8001b82:	4632      	mov	r2, r6
 8001b84:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b88:	f010 fd08 	bl	801259c <z_impl_z_log_msg2_static_create>

 8001b8c:	372c      	adds	r7, #44	; 0x2c
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i = 0; i < 4; i++) {
 8001b94:	2600      	movs	r6, #0
            cmd[0] = 0x01;
 8001b96:	f04f 0301 	mov.w	r3, #1
            switch (i) {
 8001b9a:	2e02      	cmp	r6, #2
            cmd[0] = 0x01;
 8001b9c:	733b      	strb	r3, [r7, #12]
            switch (i) {
 8001b9e:	f000 8097 	beq.w	8001cd0 <gas_sensors_read+0x21c>
 8001ba2:	2e03      	cmp	r6, #3
 8001ba4:	f000 8096 	beq.w	8001cd4 <gas_sensors_read+0x220>
 8001ba8:	2e01      	cmp	r6, #1
                    cmd[1] = 0xC1;
 8001baa:	bf14      	ite	ne
 8001bac:	23c1      	movne	r3, #193	; 0xc1
                    cmd[1] = 0xD1;
 8001bae:	23d1      	moveq	r3, #209	; 0xd1
                    cmd[1] = 0xF1;
 8001bb0:	737b      	strb	r3, [r7, #13]
            cmd[2] = 0x83;
 8001bb2:	2383      	movs	r3, #131	; 0x83
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001bb4:	f107 010c 	add.w	r1, r7, #12
 8001bb8:	f8d8 0000 	ldr.w	r0, [r8]
            cmd[2] = 0x83;
 8001bbc:	73bb      	strb	r3, [r7, #14]
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	2348      	movs	r3, #72	; 0x48
 8001bc2:	f010 f859 	bl	8011c78 <i2c_write.isra.0>
            k_msleep(10);
 8001bc6:	200a      	movs	r0, #10
 8001bc8:	f010 f851 	bl	8011c6e <k_msleep.isra.0>
            cmd[0] = 0x00;
 8001bcc:	2500      	movs	r5, #0
            ret = i2c_write(i2c3_dev, cmd, 1, addr);
 8001bce:	f8d8 0000 	ldr.w	r0, [r8]
            cmd[0] = 0x00;
 8001bd2:	733d      	strb	r5, [r7, #12]
            ret = i2c_write(i2c3_dev, cmd, 1, addr);
 8001bd4:	2348      	movs	r3, #72	; 0x48
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f107 010c 	add.w	r1, r7, #12
 8001bdc:	f010 f84c 	bl	8011c78 <i2c_write.isra.0>
            k_msleep(10);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f010 f844 	bl	8011c6e <k_msleep.isra.0>
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	613b      	str	r3, [r7, #16]
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
 8001bec:	f04f 0a03 	mov.w	sl, #3
	msg.len = num_bytes;
 8001bf0:	2302      	movs	r3, #2
            ret = i2c_read(i2c3_dev, readbuf, 2, addr);
 8001bf2:	f8d8 0000 	ldr.w	r0, [r8]
 8001bf6:	617b      	str	r3, [r7, #20]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
 8001bf8:	f887 a018 	strb.w	sl, [r7, #24]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8001bfc:	6883      	ldr	r3, [r0, #8]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8001c04:	f107 0110 	add.w	r1, r7, #16
 8001c08:	2348      	movs	r3, #72	; 0x48
 8001c0a:	47d8      	blx	fp
            k_msleep(20);
 8001c0c:	2014      	movs	r0, #20
 8001c0e:	f010 f82e 	bl	8011c6e <k_msleep.isra.0>
            reading = (readbuf[0] << 8 | readbuf[1]);
 8001c12:	893b      	ldrh	r3, [r7, #8]
 8001c14:	ba5b      	rev16	r3, r3
 8001c16:	b29b      	uxth	r3, r3
                reading=0;
 8001c18:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	bf88      	it	hi
 8001c20:	462b      	movhi	r3, r5
            result[i] = reading;
 8001c22:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (int i = 0; i < 4; i++) {
 8001c26:	3601      	adds	r6, #1
 8001c28:	2e04      	cmp	r6, #4
 8001c2a:	d1b4      	bne.n	8001b96 <gas_sensors_read+0xe2>
        k_msleep(10);
 8001c2c:	200a      	movs	r0, #10
 8001c2e:	f010 f81e 	bl	8011c6e <k_msleep.isra.0>
        for (int i = 0; i < 4; i++) {
 8001c32:	1da6      	adds	r6, r4, #6
            cmd[0] = 0x01;
 8001c34:	f04f 0301 	mov.w	r3, #1
            switch (i) {
 8001c38:	2d02      	cmp	r5, #2
            cmd[0] = 0x01;
 8001c3a:	733b      	strb	r3, [r7, #12]
            switch (i) {
 8001c3c:	d04c      	beq.n	8001cd8 <gas_sensors_read+0x224>
 8001c3e:	2d03      	cmp	r5, #3
 8001c40:	d04c      	beq.n	8001cdc <gas_sensors_read+0x228>
 8001c42:	2d01      	cmp	r5, #1
                    cmd[1] = 0xC1;
 8001c44:	bf14      	ite	ne
 8001c46:	23c1      	movne	r3, #193	; 0xc1
                    cmd[1] = 0xD1;
 8001c48:	23d1      	moveq	r3, #209	; 0xd1
                    cmd[1] = 0xF1;
 8001c4a:	737b      	strb	r3, [r7, #13]
            cmd[2] = 0x83;
 8001c4c:	2383      	movs	r3, #131	; 0x83
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001c4e:	f107 010c 	add.w	r1, r7, #12
 8001c52:	f8d8 0000 	ldr.w	r0, [r8]
            cmd[2] = 0x83;
 8001c56:	73bb      	strb	r3, [r7, #14]
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001c58:	2203      	movs	r2, #3
 8001c5a:	2349      	movs	r3, #73	; 0x49
 8001c5c:	f010 f80c 	bl	8011c78 <i2c_write.isra.0>
            k_msleep(10);
 8001c60:	200a      	movs	r0, #10
 8001c62:	f010 f804 	bl	8011c6e <k_msleep.isra.0>
            cmd[0] = 0x00;
 8001c66:	2300      	movs	r3, #0
            ret = i2c_write(i2c3_dev, cmd, 1, addr);
 8001c68:	f8d8 0000 	ldr.w	r0, [r8]
            cmd[0] = 0x00;
 8001c6c:	733b      	strb	r3, [r7, #12]
            ret = i2c_write(i2c3_dev, cmd, 1, addr);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2349      	movs	r3, #73	; 0x49
 8001c72:	f107 010c 	add.w	r1, r7, #12
 8001c76:	f00f ffff 	bl	8011c78 <i2c_write.isra.0>
            k_msleep(10);
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	f00f fff7 	bl	8011c6e <k_msleep.isra.0>
	msg.buf = buf;
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	613b      	str	r3, [r7, #16]
	msg.len = num_bytes;
 8001c86:	2302      	movs	r3, #2
            ret = i2c_read(i2c3_dev, readbuf, 2, addr);
 8001c88:	f8d8 0000 	ldr.w	r0, [r8]
 8001c8c:	617b      	str	r3, [r7, #20]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
 8001c8e:	f887 a018 	strb.w	sl, [r7, #24]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8001c92:	6883      	ldr	r3, [r0, #8]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8001c9a:	f107 0110 	add.w	r1, r7, #16
 8001c9e:	2349      	movs	r3, #73	; 0x49
 8001ca0:	47d8      	blx	fp
            k_msleep(20);
 8001ca2:	2014      	movs	r0, #20
 8001ca4:	f00f ffe3 	bl	8011c6e <k_msleep.isra.0>
            reading = (readbuf[0] << 8 | readbuf[1]);
 8001ca8:	893b      	ldrh	r3, [r7, #8]
 8001caa:	ba5b      	rev16	r3, r3
 8001cac:	b29b      	uxth	r3, r3
                reading=0;
 8001cae:	f242 7210 	movw	r2, #10000	; 0x2710
        for (int i = 0; i < 4; i++) {
 8001cb2:	3501      	adds	r5, #1
                reading=0;
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bf88      	it	hi
 8001cb8:	2300      	movhi	r3, #0
        for (int i = 0; i < 4; i++) {
 8001cba:	2d04      	cmp	r5, #4
            result[i + 4] = reading;
 8001cbc:	f826 3f02 	strh.w	r3, [r6, #2]!
        for (int i = 0; i < 4; i++) {
 8001cc0:	d1b8      	bne.n	8001c34 <gas_sensors_read+0x180>
        k_msleep(1000);
 8001cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc6:	f00f ffd2 	bl	8011c6e <k_msleep.isra.0>
    for (int s=0; s < samples; s++) {
 8001cca:	f109 0901 	add.w	r9, r9, #1
 8001cce:	e6fb      	b.n	8001ac8 <gas_sensors_read+0x14>
                    cmd[1] = 0xE1;
 8001cd0:	23e1      	movs	r3, #225	; 0xe1
 8001cd2:	e76d      	b.n	8001bb0 <gas_sensors_read+0xfc>
                    cmd[1] = 0xF1;
 8001cd4:	23f1      	movs	r3, #241	; 0xf1
 8001cd6:	e76b      	b.n	8001bb0 <gas_sensors_read+0xfc>
                    cmd[1] = 0xE1;
 8001cd8:	23e1      	movs	r3, #225	; 0xe1
 8001cda:	e7b6      	b.n	8001c4a <gas_sensors_read+0x196>
                    cmd[1] = 0xF1;
 8001cdc:	23f1      	movs	r3, #241	; 0xf1
 8001cde:	e7b4      	b.n	8001c4a <gas_sensors_read+0x196>
 8001ce0:	20000f20 	.word	0x20000f20
 8001ce4:	08018dab 	.word	0x08018dab
 8001ce8:	08018098 	.word	0x08018098
 8001cec:	08018db8 	.word	0x08018db8
 8001cf0:	08018dce 	.word	0x08018dce
 8001cf4:	08018de4 	.word	0x08018de4
 8001cf8:	08018dfa 	.word	0x08018dfa

08001cfc <lorwan_datarate_changed>:
        LOG_INF("IT CONTAINS DATA !!!!!!!!!!!!!!!");
        LOG_HEXDUMP_INF(data, len, "Payload: ");
    }
}

static void lorwan_datarate_changed(enum lorawan_datarate dr) {
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4604      	mov	r4, r0
    uint8_t unused, max_size;

    lorawan_get_payload_sizes(&unused, &max_size);
 8001d04:	1df9      	adds	r1, r7, #7
 8001d06:	1db8      	adds	r0, r7, #6
 8001d08:	f010 fd1c 	bl	8012744 <lorawan_get_payload_sizes>
    LOG_INF("New Datarate: DR_%d, Max Payload %d", dr, max_size);
 8001d0c:	b088      	sub	sp, #32
 8001d0e:	466a      	mov	r2, sp
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4907      	ldr	r1, [pc, #28]	; (8001d30 <lorwan_datarate_changed+0x34>)
 8001d14:	6193      	str	r3, [r2, #24]
 8001d16:	2304      	movs	r3, #4
 8001d18:	e9c2 1404 	strd	r1, r4, [r2, #16]
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <lorwan_datarate_changed+0x38>)
 8001d1e:	f842 3f0c 	str.w	r3, [r2, #12]!
 8001d22:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001d26:	f00f ffb4 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
}
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	08018e1c 	.word	0x08018e1c
 8001d34:	080180d0 	.word	0x080180d0

08001d38 <dl_callback>:
        uint8_t len, const uint8_t *data) {
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	b08b      	sub	sp, #44	; 0x2c
    LOG_INF("Downlink Callback: Port %d, Pending %d, RSSI %ddB, SNR %ddBm", port, data_pending, rssi, snr);
 8001d3c:	466e      	mov	r6, sp
        uint8_t len, const uint8_t *data) {
 8001d3e:	af04      	add	r7, sp, #16
    LOG_INF("Downlink Callback: Port %d, Pending %d, RSSI %ddB, SNR %ddBm", port, data_pending, rssi, snr);
 8001d40:	b08a      	sub	sp, #40	; 0x28
 8001d42:	ac04      	add	r4, sp, #16
 8001d44:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8001d48:	f8df c058 	ldr.w	ip, [pc, #88]	; 8001da4 <dl_callback+0x6c>
 8001d4c:	930c      	str	r3, [sp, #48]	; 0x30
 8001d4e:	4622      	mov	r2, r4
 8001d50:	2306      	movs	r3, #6
        uint8_t len, const uint8_t *data) {
 8001d52:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    LOG_INF("Downlink Callback: Port %d, Pending %d, RSSI %ddB, SNR %ddBm", port, data_pending, rssi, snr);
 8001d54:	e9cd c008 	strd	ip, r0, [sp, #32]
 8001d58:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001d5c:	f842 3f0c 	str.w	r3, [r2, #12]!
 8001d60:	4811      	ldr	r0, [pc, #68]	; (8001da8 <dl_callback+0x70>)
 8001d62:	f00f ff96 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
 8001d66:	46b5      	mov	sp, r6
    if (data) {
 8001d68:	b1c5      	cbz	r5, 8001d9c <dl_callback+0x64>
        LOG_INF("IT CONTAINS DATA !!!!!!!!!!!!!!!");
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <dl_callback+0x74>)
 8001d6c:	480e      	ldr	r0, [pc, #56]	; (8001da8 <dl_callback+0x70>)
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	f107 020c 	add.w	r2, r7, #12
 8001d74:	2302      	movs	r3, #2
 8001d76:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	f00f ff89 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
        LOG_HEXDUMP_INF(data, len, "Payload: ");
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <dl_callback+0x78>)
 8001d82:	9303      	str	r3, [sp, #12]
 8001d84:	2000      	movs	r0, #0
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <dl_callback+0x7c>)
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	9001      	str	r0, [sp, #4]
 8001d8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4905      	ldr	r1, [pc, #20]	; (8001da8 <dl_callback+0x70>)
 8001d94:	462b      	mov	r3, r5
 8001d96:	2203      	movs	r2, #3
 8001d98:	f00f ff7e 	bl	8011c98 <z_log_msg2_runtime_create.constprop.0>
}
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	08018e40 	.word	0x08018e40
 8001da8:	080180d0 	.word	0x080180d0
 8001dac:	08018e7d 	.word	0x08018e7d
 8001db0:	08018e9e 	.word	0x08018e9e
 8001db4:	08019947 	.word	0x08019947

08001db8 <read_gas_and_ambient_sensors>:

/* * * * * * * * THREAD: Read Gas & Ambient Sensors * * * * * * * */

K_THREAD_STACK_DEFINE(read_gas_and_ambient_sensors_stack_area, STACKSIZE);
struct k_thread read_gas_and_ambient_sensors_thread_data;
extern void read_gas_and_ambient_sensors() {
 8001db8:	b530      	push	{r4, r5, lr}
 8001dba:	b0c9      	sub	sp, #292	; 0x124
    
    LOG_INF("Read Gas Sensors Thread Spawn!");
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <read_gas_and_ambient_sensors+0xc4>)
 8001dbe:	4830      	ldr	r0, [pc, #192]	; (8001e80 <read_gas_and_ambient_sensors+0xc8>)
 8001dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8001dc2:	2402      	movs	r4, #2
 8001dc4:	aa19      	add	r2, sp, #100	; 0x64
 8001dc6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001dca:	9419      	str	r4, [sp, #100]	; 0x64
 8001dcc:	f00f ff61 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
    LOG_INF("Warming up!");
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <read_gas_and_ambient_sensors+0xcc>)
 8001dd2:	482b      	ldr	r0, [pc, #172]	; (8001e80 <read_gas_and_ambient_sensors+0xc8>)
    while(1) {
        //LOG_INF("Reading gas sensors...");
        //verificar con el otro sensor el lapso!!!!!!!!!!!
        gas_sensors_read(gs,5);
        ambient_sensors_read(1, amb_sensors);
        snprintfcb(text_data, 200, "%s|%d|%d|%d|"
 8001dd4:	4d2c      	ldr	r5, [pc, #176]	; (8001e88 <read_gas_and_ambient_sensors+0xd0>)
    LOG_INF("Warming up!");
 8001dd6:	aa19      	add	r2, sp, #100	; 0x64
 8001dd8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001ddc:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
 8001de0:	f00f ff57 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
    k_msleep(10000);
 8001de4:	f242 7010 	movw	r0, #10000	; 0x2710
 8001de8:	f00f ff93 	bl	8011d12 <k_msleep.isra.0>
        snprintfcb(text_data, 200, "%s|%d|%d|%d|"
 8001dec:	4c27      	ldr	r4, [pc, #156]	; (8001e8c <read_gas_and_ambient_sensors+0xd4>)
    amb_sensors[0] = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	930f      	str	r3, [sp, #60]	; 0x3c
    amb_sensors[1] = 0;
 8001df2:	9310      	str	r3, [sp, #64]	; 0x40
    amb_sensors[2] = 0;
 8001df4:	9311      	str	r3, [sp, #68]	; 0x44
        gas_sensors_read(gs,5);
 8001df6:	a812      	add	r0, sp, #72	; 0x48
 8001df8:	2105      	movs	r1, #5
 8001dfa:	f7ff fe5b 	bl	8001ab4 <gas_sensors_read>
        ambient_sensors_read(1, amb_sensors);
 8001dfe:	a90f      	add	r1, sp, #60	; 0x3c
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7ff fae9 	bl	80013d8 <ambient_sensors_read>
        snprintfcb(text_data, 200, "%s|%d|%d|%d|"
 8001e06:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001e08:	f7fe fb4e 	bl	80004a8 <__aeabi_f2d>
 8001e0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001e10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001e12:	f7fe fb49 	bl	80004a8 <__aeabi_f2d>
 8001e16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001e1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001e1c:	f7fe fb44 	bl	80004a8 <__aeabi_f2d>
 8001e20:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8001e24:	9307      	str	r3, [sp, #28]
 8001e26:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8001e2a:	9306      	str	r3, [sp, #24]
 8001e2c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8001e30:	9305      	str	r3, [sp, #20]
 8001e32:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8001e36:	9304      	str	r3, [sp, #16]
 8001e38:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8001e3c:	9303      	str	r3, [sp, #12]
 8001e3e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001e54:	462b      	mov	r3, r5
 8001e56:	4622      	mov	r2, r4
 8001e58:	21c8      	movs	r1, #200	; 0xc8
 8001e5a:	a816      	add	r0, sp, #88	; 0x58
 8001e5c:	f00f ff9d 	bl	8011d9a <snprintfcb>
                gs[6],
                gs[7],
                amb_sensors[0],
                amb_sensors[1],
                amb_sensors[2]);                
        save_data(text_data, "gas");
 8001e60:	a816      	add	r0, sp, #88	; 0x58
 8001e62:	490b      	ldr	r1, [pc, #44]	; (8001e90 <read_gas_and_ambient_sensors+0xd8>)
 8001e64:	f7ff fc98 	bl	8001798 <save_data>
        strcpy(gas_msg, text_data);
 8001e68:	22c8      	movs	r2, #200	; 0xc8
 8001e6a:	a916      	add	r1, sp, #88	; 0x58
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <read_gas_and_ambient_sensors+0xdc>)
 8001e6e:	f015 fd23 	bl	80178b8 <__strcpy_chk>
        k_msleep(30000);
 8001e72:	f247 5030 	movw	r0, #30000	; 0x7530
 8001e76:	f00f ff4c 	bl	8011d12 <k_msleep.isra.0>
    while(1) {
 8001e7a:	e7bc      	b.n	8001df6 <read_gas_and_ambient_sensors+0x3e>
 8001e7c:	08018ea8 	.word	0x08018ea8
 8001e80:	080180d0 	.word	0x080180d0
 8001e84:	08018ec7 	.word	0x08018ec7
 8001e88:	08018ed3 	.word	0x08018ed3
 8001e8c:	08018ee7 	.word	0x08018ee7
 8001e90:	08018f15 	.word	0x08018f15
 8001e94:	200022b6 	.word	0x200022b6

08001e98 <count_particles>:
extern void count_particles() {
 8001e98:	b530      	push	{r4, r5, lr}
 8001e9a:	b0f9      	sub	sp, #484	; 0x1e4
    LOG_INF("Count Particles Thread Spawn!");
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <count_particles+0xdc>)
 8001e9e:	934a      	str	r3, [sp, #296]	; 0x128
 8001ea0:	4835      	ldr	r0, [pc, #212]	; (8001f78 <count_particles+0xe0>)
        LOG_INF("Counting Particles...");
 8001ea2:	4d36      	ldr	r5, [pc, #216]	; (8001f7c <count_particles+0xe4>)
        gpio_pin_set_dt(&led_red,1);
 8001ea4:	4c36      	ldr	r4, [pc, #216]	; (8001f80 <count_particles+0xe8>)
    LOG_INF("Count Particles Thread Spawn!");
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	aa49      	add	r2, sp, #292	; 0x124
 8001eaa:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001eae:	9349      	str	r3, [sp, #292]	; 0x124
 8001eb0:	f00f feef 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
    amb_sensors[0] = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9311      	str	r3, [sp, #68]	; 0x44
    amb_sensors[1] = 0;
 8001eb8:	9312      	str	r3, [sp, #72]	; 0x48
    amb_sensors[2] = 0;
 8001eba:	9313      	str	r3, [sp, #76]	; 0x4c
        LOG_INF("Counting Particles...");
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	aa17      	add	r2, sp, #92	; 0x5c
 8001ec0:	482d      	ldr	r0, [pc, #180]	; (8001f78 <count_particles+0xe0>)
 8001ec2:	9317      	str	r3, [sp, #92]	; 0x5c
 8001ec4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001ec8:	9518      	str	r5, [sp, #96]	; 0x60
 8001eca:	f00f fee2 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
        gpio_pin_set_dt(&led_red,1);
 8001ece:	4620      	mov	r0, r4
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	f00f fef0 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
        opc_init();    
 8001ed6:	f000 fac7 	bl	8002468 <opc_init>
        opc_start();
 8001eda:	f000 fb33 	bl	8002544 <opc_start>
        data = opc_read_histogram(7);
 8001ede:	a81a      	add	r0, sp, #104	; 0x68
 8001ee0:	2107      	movs	r1, #7
 8001ee2:	f000 fc9d 	bl	8002820 <opc_read_histogram>
        opc_stop();
 8001ee6:	f000 fbeb 	bl	80026c0 <opc_stop>
        opc_release();
 8001eea:	f000 fa73 	bl	80023d4 <opc_release>
        gpio_pin_set_dt(&led_red,0);
 8001eee:	4620      	mov	r0, r4
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f00f fee0 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
        ambient_sensors_read(1, amb_sensors);
 8001ef6:	a911      	add	r1, sp, #68	; 0x44
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff fa6d 	bl	80013d8 <ambient_sensors_read>
        snprintfcb(text_data, 200, "%s|%0.2f|%0.2f|%0.2f|%0.2f|"
 8001efe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001f00:	f7fe fad2 	bl	80004a8 <__aeabi_f2d>
 8001f04:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001f08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001f0a:	f7fe facd 	bl	80004a8 <__aeabi_f2d>
 8001f0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001f12:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f14:	f7fe fac8 	bl	80004a8 <__aeabi_f2d>
 8001f18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001f1c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001f1e:	f7fe fac3 	bl	80004a8 <__aeabi_f2d>
 8001f22:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001f26:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8001f28:	f7fe fabe 	bl	80004a8 <__aeabi_f2d>
 8001f2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001f30:	9842      	ldr	r0, [sp, #264]	; 0x108
 8001f32:	f7fe fab9 	bl	80004a8 <__aeabi_f2d>
 8001f36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f3a:	983e      	ldr	r0, [sp, #248]	; 0xf8
 8001f3c:	f7fe fab4 	bl	80004a8 <__aeabi_f2d>
 8001f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f44:	9840      	ldr	r0, [sp, #256]	; 0x100
 8001f46:	f7fe faaf 	bl	80004a8 <__aeabi_f2d>
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <count_particles+0xec>)
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <count_particles+0xf0>)
 8001f4e:	e9cd 0100 	strd	r0, r1, [sp]
 8001f52:	21c8      	movs	r1, #200	; 0xc8
 8001f54:	a846      	add	r0, sp, #280	; 0x118
 8001f56:	f00f ff20 	bl	8011d9a <snprintfcb>
        strcpy(opc_msg, text_data);
 8001f5a:	22c8      	movs	r2, #200	; 0xc8
 8001f5c:	a946      	add	r1, sp, #280	; 0x118
 8001f5e:	480b      	ldr	r0, [pc, #44]	; (8001f8c <count_particles+0xf4>)
 8001f60:	f015 fcaa 	bl	80178b8 <__strcpy_chk>
        save_data(text_data, "opc");
 8001f64:	a846      	add	r0, sp, #280	; 0x118
 8001f66:	490a      	ldr	r1, [pc, #40]	; (8001f90 <count_particles+0xf8>)
 8001f68:	f7ff fc16 	bl	8001798 <save_data>
        k_msleep(120000);
 8001f6c:	4809      	ldr	r0, [pc, #36]	; (8001f94 <count_particles+0xfc>)
 8001f6e:	f00f fed0 	bl	8011d12 <k_msleep.isra.0>
    while(1) {
 8001f72:	e7a3      	b.n	8001ebc <count_particles+0x24>
 8001f74:	08018f19 	.word	0x08018f19
 8001f78:	080180d0 	.word	0x080180d0
 8001f7c:	08018f37 	.word	0x08018f37
 8001f80:	0801825c 	.word	0x0801825c
 8001f84:	08018ed3 	.word	0x08018ed3
 8001f88:	08018f4d 	.word	0x08018f4d
 8001f8c:	2000237e 	.word	0x2000237e
 8001f90:	08018f81 	.word	0x08018f81
 8001f94:	0001d4c0 	.word	0x0001d4c0

08001f98 <send_data>:

/* * * * * * * * THREAD: Send Data * * * * * * * */

K_THREAD_STACK_DEFINE(send_data_stack_area, STACKSIZE);
struct k_thread send_data_thread_data;
extern void send_data() {
 8001f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f9c:	b09c      	sub	sp, #112	; 0x70
    

    LOG_INF("LoRaWAN Update Results Thread Spawn!");
 8001f9e:	4b9b      	ldr	r3, [pc, #620]	; (800220c <send_data+0x274>)
 8001fa0:	489b      	ldr	r0, [pc, #620]	; (8002210 <send_data+0x278>)
 8001fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8001fa4:	aa19      	add	r2, sp, #100	; 0x64
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001fac:	9319      	str	r3, [sp, #100]	; 0x64
 8001fae:	f00f fe70 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
    int ret;
    /* * * * * * * * * * * * * LORA * * * * * * * * * * * * * */
    const struct device *lora_dev;
    struct lorawan_join_config join_cfg;
    uint8_t dev_eui[] = LORAWAN_DEV_EUI;
 8001fb2:	4a98      	ldr	r2, [pc, #608]	; (8002214 <send_data+0x27c>)
 8001fb4:	6810      	ldr	r0, [r2, #0]
 8001fb6:	6851      	ldr	r1, [r2, #4]
    uint8_t join_eui[] = LORAWAN_JOIN_EUI;
 8001fb8:	4a97      	ldr	r2, [pc, #604]	; (8002218 <send_data+0x280>)
    uint8_t dev_eui[] = LORAWAN_DEV_EUI;
 8001fba:	ab05      	add	r3, sp, #20
 8001fbc:	c303      	stmia	r3!, {r0, r1}
    uint8_t join_eui[] = LORAWAN_JOIN_EUI;
 8001fbe:	6810      	ldr	r0, [r2, #0]
 8001fc0:	6851      	ldr	r1, [r2, #4]
 8001fc2:	c303      	stmia	r3!, {r0, r1}
    uint8_t app_key[] = LORAWAN_APP_KEY;
 8001fc4:	4b95      	ldr	r3, [pc, #596]	; (800221c <send_data+0x284>)
 8001fc6:	aa0c      	add	r2, sp, #48	; 0x30
 8001fc8:	f103 0610 	add.w	r6, r3, #16
 8001fcc:	4615      	mov	r5, r2
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	c403      	stmia	r4!, {r0, r1}
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	42b3      	cmp	r3, r6
 8001fda:	4622      	mov	r2, r4
 8001fdc:	d1f7      	bne.n	8001fce <send_data+0x36>


    struct lorawan_downlink_cb downlink_cb = {
 8001fde:	2600      	movs	r6, #0
 8001fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe4:	9609      	str	r6, [sp, #36]	; 0x24
 8001fe6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8001fea:	4b8d      	ldr	r3, [pc, #564]	; (8002220 <send_data+0x288>)
 8001fec:	960b      	str	r6, [sp, #44]	; 0x2c
 8001fee:	930a      	str	r3, [sp, #40]	; 0x28
 8001ff0:	4c8c      	ldr	r4, [pc, #560]	; (8002224 <send_data+0x28c>)
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f00d fc8c 	bl	800f910 <z_impl_device_get_binding>
 8001ff8:	4603      	mov	r3, r0
        .port = LW_RECV_PORT_ANY,
        .cb = dl_callback
    };

    lora_dev = device_get_binding(DEFAULT_RADIO);
    if (!lora_dev) {
 8001ffa:	b958      	cbnz	r0, 8002014 <send_data+0x7c>
        LOG_ERR("%s Device not found", DEFAULT_RADIO);
 8001ffc:	4a8a      	ldr	r2, [pc, #552]	; (8002228 <send_data+0x290>)
 8001ffe:	4984      	ldr	r1, [pc, #528]	; (8002210 <send_data+0x278>)
 8002000:	9403      	str	r4, [sp, #12]
 8002002:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8002006:	9000      	str	r0, [sp, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	f00f fe45 	bl	8011c98 <z_log_msg2_runtime_create.constprop.0>
        }
     

        k_msleep(10000);
    }
}
 800200e:	b01c      	add	sp, #112	; 0x70
 8002010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LOG_INF("LoRaWAN Device Found...");
 8002014:	4b85      	ldr	r3, [pc, #532]	; (800222c <send_data+0x294>)
 8002016:	487e      	ldr	r0, [pc, #504]	; (8002210 <send_data+0x278>)
 8002018:	931a      	str	r3, [sp, #104]	; 0x68
 800201a:	aa19      	add	r2, sp, #100	; 0x64
 800201c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002020:	2402      	movs	r4, #2
 8002022:	9419      	str	r4, [sp, #100]	; 0x64
 8002024:	f00f fe35 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
    ret = lorawan_start();
 8002028:	f003 fcba 	bl	80059a0 <lorawan_start>
    if (ret < 0) {
 800202c:	2800      	cmp	r0, #0
 800202e:	da0b      	bge.n	8002048 <send_data+0xb0>
        LOG_ERR("lorawan_start failed: %d", ret);
 8002030:	4b7f      	ldr	r3, [pc, #508]	; (8002230 <send_data+0x298>)
 8002032:	aa19      	add	r2, sp, #100	; 0x64
 8002034:	e9cd 301a 	strd	r3, r0, [sp, #104]	; 0x68
 8002038:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800203c:	2303      	movs	r3, #3
 800203e:	4874      	ldr	r0, [pc, #464]	; (8002210 <send_data+0x278>)
 8002040:	9319      	str	r3, [sp, #100]	; 0x64
 8002042:	f00f fe26 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
        return;
 8002046:	e7e2      	b.n	800200e <send_data+0x76>
        LOG_INF("LoRaWAN Started...");
 8002048:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <send_data+0x29c>)
 800204a:	4871      	ldr	r0, [pc, #452]	; (8002210 <send_data+0x278>)
            LOG_INF("Connected to network over OTAA!");
 800204c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002238 <send_data+0x2a0>
            gpio_pin_set_dt(&led_green,1);
 8002050:	4f7a      	ldr	r7, [pc, #488]	; (800223c <send_data+0x2a4>)
        LOG_INF("LoRaWAN Started...");
 8002052:	aa19      	add	r2, sp, #100	; 0x64
 8002054:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002058:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
 800205c:	f00f fe19 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
    lorawan_register_downlink_callback(&downlink_cb);
 8002060:	a809      	add	r0, sp, #36	; 0x24
 8002062:	f003 fc87 	bl	8005974 <lorawan_register_downlink_callback>
    lorawan_register_dr_changed_callback(lorwan_datarate_changed);
 8002066:	4876      	ldr	r0, [pc, #472]	; (8002240 <send_data+0x2a8>)
 8002068:	f003 fc94 	bl	8005994 <lorawan_register_dr_changed_callback>
    join_cfg.dev_eui = dev_eui;
 800206c:	ab05      	add	r3, sp, #20
 800206e:	931a      	str	r3, [sp, #104]	; 0x68
    join_cfg.otaa.join_eui = join_eui;
 8002070:	ab07      	add	r3, sp, #28
    join_cfg.otaa.nwk_key = app_key;
 8002072:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
    join_cfg.otaa.join_eui = join_eui;
 8002076:	9316      	str	r3, [sp, #88]	; 0x58
            LOG_INF("Connected to network over OTAA!");
 8002078:	4d65      	ldr	r5, [pc, #404]	; (8002210 <send_data+0x278>)
    LOG_INF("Joining network over OTAA");
 800207a:	4b72      	ldr	r3, [pc, #456]	; (8002244 <send_data+0x2ac>)
 800207c:	4864      	ldr	r0, [pc, #400]	; (8002210 <send_data+0x278>)
    join_cfg.mode = LORAWAN_ACT_OTAA;
 800207e:	f88d 606c 	strb.w	r6, [sp, #108]	; 0x6c
    LOG_INF("Joining network over OTAA");
 8002082:	aa13      	add	r2, sp, #76	; 0x4c
 8002084:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002088:	e9cd 4313 	strd	r4, r3, [sp, #76]	; 0x4c
 800208c:	f00f fe01 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
        ret = lorawan_join(&join_cfg);
 8002090:	a816      	add	r0, sp, #88	; 0x58
 8002092:	f003 fb05 	bl	80056a0 <lorawan_join>
        if (ret < 0) {
 8002096:	1e04      	subs	r4, r0, #0
 8002098:	da1d      	bge.n	80020d6 <send_data+0x13e>
            gpio_pin_set_dt(&led_red,1);
 800209a:	486b      	ldr	r0, [pc, #428]	; (8002248 <send_data+0x2b0>)
 800209c:	2101      	movs	r1, #1
 800209e:	f00f fe0a 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
            LOG_ERR("lorawan_join_network failed: %d", ret);
 80020a2:	4b6a      	ldr	r3, [pc, #424]	; (800224c <send_data+0x2b4>)
 80020a4:	aa13      	add	r2, sp, #76	; 0x4c
 80020a6:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 80020aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80020ae:	2303      	movs	r3, #3
 80020b0:	4628      	mov	r0, r5
 80020b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80020b4:	f00f fded 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
 80020b8:	2100      	movs	r1, #0
 80020ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80020be:	f00e fb91 	bl	80107e4 <z_impl_k_sleep>
            gpio_pin_set_dt(&led_red,0);
 80020c2:	4861      	ldr	r0, [pc, #388]	; (8002248 <send_data+0x2b0>)
 80020c4:	2100      	movs	r1, #0
 80020c6:	f00f fdf6 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
 80020ca:	2100      	movs	r1, #0
 80020cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80020d0:	f00e fb88 	bl	80107e4 <z_impl_k_sleep>
    while (ret < 0) {
 80020d4:	e7dc      	b.n	8002090 <send_data+0xf8>
            ret = lorawan_set_datarate(LORAWAN_DR_2);
 80020d6:	2002      	movs	r0, #2
 80020d8:	f003 fbb2 	bl	8005840 <lorawan_set_datarate>
            if (ret < 0) {
 80020dc:	1e04      	subs	r4, r0, #0
 80020de:	da09      	bge.n	80020f4 <send_data+0x15c>
                LOG_ERR("Could not set datarate!");
 80020e0:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <send_data+0x2b8>)
 80020e2:	9314      	str	r3, [sp, #80]	; 0x50
 80020e4:	aa13      	add	r2, sp, #76	; 0x4c
 80020e6:	2302      	movs	r3, #2
 80020e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80020ec:	4628      	mov	r0, r5
 80020ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80020f0:	f00f fdcf 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
            LOG_INF("Connected to network over OTAA!");
 80020f4:	aa13      	add	r2, sp, #76	; 0x4c
 80020f6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80020fa:	4628      	mov	r0, r5
 80020fc:	2602      	movs	r6, #2
 80020fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8002102:	9613      	str	r6, [sp, #76]	; 0x4c
 8002104:	f00f fdc5 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
            gpio_pin_set_dt(&led_green,1);
 8002108:	2101      	movs	r1, #1
 800210a:	4638      	mov	r0, r7
 800210c:	f00f fdd3 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
    while (ret < 0) {
 8002110:	2c00      	cmp	r4, #0
 8002112:	dbbd      	blt.n	8002090 <send_data+0xf8>
    LOG_INF("Entering Loop...");
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <send_data+0x2bc>)
        ret = lorawan_send(1, gas_msg, strlen(gas_msg), LORAWAN_MSG_CONFIRMED);
 8002116:	4d50      	ldr	r5, [pc, #320]	; (8002258 <send_data+0x2c0>)
    LOG_INF("Entering Loop...");
 8002118:	483d      	ldr	r0, [pc, #244]	; (8002210 <send_data+0x278>)
 800211a:	e9cd 6313 	strd	r6, r3, [sp, #76]	; 0x4c
        ret = lorawan_send(2, opc_msg, strlen(opc_msg), LORAWAN_MSG_CONFIRMED);
 800211e:	4e4f      	ldr	r6, [pc, #316]	; (800225c <send_data+0x2c4>)
    LOG_INF("Entering Loop...");
 8002120:	aa13      	add	r2, sp, #76	; 0x4c
 8002122:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002126:	f00f fdb4 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
        ret = lorawan_send(1, gas_msg, strlen(gas_msg), LORAWAN_MSG_CONFIRMED);
 800212a:	4628      	mov	r0, r5
 800212c:	f7ff f94b 	bl	80013c6 <strlen>
 8002130:	2301      	movs	r3, #1
 8002132:	b2c2      	uxtb	r2, r0
 8002134:	4629      	mov	r1, r5
 8002136:	4618      	mov	r0, r3
 8002138:	f003 fba2 	bl	8005880 <lorawan_send>
        if (ret == -EAGAIN) {
 800213c:	f110 0f0b 	cmn.w	r0, #11
 8002140:	d124      	bne.n	800218c <send_data+0x1f4>
            k_msleep(2000);
 8002142:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002146:	f00f fde4 	bl	8011d12 <k_msleep.isra.0>
            k_msleep(2000);
 800214a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800214e:	f00f fde0 	bl	8011d12 <k_msleep.isra.0>
        k_msleep(10000);
 8002152:	f242 7010 	movw	r0, #10000	; 0x2710
 8002156:	f00f fddc 	bl	8011d12 <k_msleep.isra.0>
        ret = lorawan_send(2, opc_msg, strlen(opc_msg), LORAWAN_MSG_CONFIRMED);
 800215a:	4630      	mov	r0, r6
 800215c:	f7ff f933 	bl	80013c6 <strlen>
 8002160:	2301      	movs	r3, #1
 8002162:	b2c2      	uxtb	r2, r0
 8002164:	4631      	mov	r1, r6
 8002166:	2002      	movs	r0, #2
 8002168:	f003 fb8a 	bl	8005880 <lorawan_send>
        if (ret == -EAGAIN) {
 800216c:	f110 0f0b 	cmn.w	r0, #11
 8002170:	d12c      	bne.n	80021cc <send_data+0x234>
            k_msleep(2000);
 8002172:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002176:	f00f fdcc 	bl	8011d12 <k_msleep.isra.0>
            k_msleep(2000);
 800217a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800217e:	f00f fdc8 	bl	8011d12 <k_msleep.isra.0>
        k_msleep(10000);
 8002182:	f242 7010 	movw	r0, #10000	; 0x2710
 8002186:	f00f fdc4 	bl	8011d12 <k_msleep.isra.0>
        ret = lorawan_send(1, gas_msg, strlen(gas_msg), LORAWAN_MSG_CONFIRMED);
 800218a:	e7ce      	b.n	800212a <send_data+0x192>
        if (ret < 0) {
 800218c:	2800      	cmp	r0, #0
 800218e:	dbdc      	blt.n	800214a <send_data+0x1b2>
        if (ret == 0) {
 8002190:	d1df      	bne.n	8002152 <send_data+0x1ba>
            LOG_INF("* - * - * - * - * Sensor Data sent! * - * - * - * - * ");
 8002192:	4b33      	ldr	r3, [pc, #204]	; (8002260 <send_data+0x2c8>)
                gpio_pin_set_dt(&led_green,1);
 8002194:	4f29      	ldr	r7, [pc, #164]	; (800223c <send_data+0x2a4>)
            LOG_INF("* - * - * - * - * Sensor Data sent! * - * - * - * - * ");
 8002196:	9314      	str	r3, [sp, #80]	; 0x50
 8002198:	481d      	ldr	r0, [pc, #116]	; (8002210 <send_data+0x278>)
 800219a:	2302      	movs	r3, #2
 800219c:	aa13      	add	r2, sp, #76	; 0x4c
 800219e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80021a2:	2414      	movs	r4, #20
 80021a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80021a6:	f00f fd74 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
                gpio_pin_set_dt(&led_green,1);
 80021aa:	2101      	movs	r1, #1
 80021ac:	4638      	mov	r0, r7
 80021ae:	f00f fd82 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
                k_msleep(50);
 80021b2:	2032      	movs	r0, #50	; 0x32
 80021b4:	f00f fdad 	bl	8011d12 <k_msleep.isra.0>
                gpio_pin_set_dt(&led_green,0);
 80021b8:	2100      	movs	r1, #0
 80021ba:	4638      	mov	r0, r7
 80021bc:	f00f fd7b 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
                k_msleep(50);
 80021c0:	2032      	movs	r0, #50	; 0x32
 80021c2:	f00f fda6 	bl	8011d12 <k_msleep.isra.0>
            for (int i=0; i<20; i++) {
 80021c6:	3c01      	subs	r4, #1
 80021c8:	d1ef      	bne.n	80021aa <send_data+0x212>
 80021ca:	e7c2      	b.n	8002152 <send_data+0x1ba>
        if (ret < 0) {
 80021cc:	2800      	cmp	r0, #0
 80021ce:	dbd4      	blt.n	800217a <send_data+0x1e2>
            LOG_INF("* - * - * - * - * Sensor Data sent! * - * - * - * - * ");
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <send_data+0x2c8>)
                gpio_pin_set_dt(&led_green,1);
 80021d2:	4f1a      	ldr	r7, [pc, #104]	; (800223c <send_data+0x2a4>)
            LOG_INF("* - * - * - * - * Sensor Data sent! * - * - * - * - * ");
 80021d4:	9314      	str	r3, [sp, #80]	; 0x50
 80021d6:	480e      	ldr	r0, [pc, #56]	; (8002210 <send_data+0x278>)
 80021d8:	2302      	movs	r3, #2
 80021da:	aa13      	add	r2, sp, #76	; 0x4c
 80021dc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80021e0:	2414      	movs	r4, #20
 80021e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80021e4:	f00f fd55 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
                gpio_pin_set_dt(&led_green,1);
 80021e8:	2101      	movs	r1, #1
 80021ea:	4638      	mov	r0, r7
 80021ec:	f00f fd63 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
                k_msleep(50);
 80021f0:	2032      	movs	r0, #50	; 0x32
 80021f2:	f00f fd8e 	bl	8011d12 <k_msleep.isra.0>
                gpio_pin_set_dt(&led_green,0);
 80021f6:	2100      	movs	r1, #0
 80021f8:	4638      	mov	r0, r7
 80021fa:	f00f fd5c 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
                k_msleep(50);
 80021fe:	2032      	movs	r0, #50	; 0x32
 8002200:	f00f fd87 	bl	8011d12 <k_msleep.isra.0>
            for (int i=0; i<20; i++) {
 8002204:	3c01      	subs	r4, #1
 8002206:	d1ef      	bne.n	80021e8 <send_data+0x250>
 8002208:	e7bb      	b.n	8002182 <send_data+0x1ea>
 800220a:	bf00      	nop
 800220c:	08018f85 	.word	0x08018f85
 8002210:	080180d0 	.word	0x080180d0
 8002214:	08018230 	.word	0x08018230
 8002218:	080190c9 	.word	0x080190c9
 800221c:	080190d2 	.word	0x080190d2
 8002220:	08001d39 	.word	0x08001d39
 8002224:	08018faa 	.word	0x08018faa
 8002228:	08018fb7 	.word	0x08018fb7
 800222c:	08018fcb 	.word	0x08018fcb
 8002230:	08018fe3 	.word	0x08018fe3
 8002234:	08018ffc 	.word	0x08018ffc
 8002238:	08019061 	.word	0x08019061
 800223c:	08018254 	.word	0x08018254
 8002240:	08001cfd 	.word	0x08001cfd
 8002244:	0801900f 	.word	0x0801900f
 8002248:	0801825c 	.word	0x0801825c
 800224c:	08019029 	.word	0x08019029
 8002250:	08019049 	.word	0x08019049
 8002254:	08019081 	.word	0x08019081
 8002258:	200022b6 	.word	0x200022b6
 800225c:	2000237e 	.word	0x2000237e
 8002260:	08019092 	.word	0x08019092

08002264 <main>:



/* * * * * * * * * * * * * * * * * main * * * * * * * * * *  * * * * * * * */

void main(void) {
 8002264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002266:	b08f      	sub	sp, #60	; 0x3c
    
    LOG_INF("* * * * * * LoRaWAN Air Lab * * * * * * ");
 8002268:	4b41      	ldr	r3, [pc, #260]	; (8002370 <main+0x10c>)
 800226a:	4842      	ldr	r0, [pc, #264]	; (8002374 <main+0x110>)
 800226c:	930c      	str	r3, [sp, #48]	; 0x30
 800226e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002270:	2302      	movs	r3, #2
 8002272:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002276:	930b      	str	r3, [sp, #44]	; 0x2c
 8002278:	f00f fd0b 	bl	8011c92 <z_log_msg2_static_create.constprop.0>
    
    // System Initialitations
    
    
    //init_time_system();
    init_and_mount_sdcard();
 800227c:	f7ff fb54 	bl	8001928 <init_and_mount_sdcard>
    if (dev_sht3xd == NULL) {
        return;
    }
     */
    
    dev_bme280 = get_bme280_device();
 8002280:	f7ff fa4e 	bl	8001720 <get_bme280_device>
 8002284:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <main+0x114>)
 8002286:	6018      	str	r0, [r3, #0]
    if (dev_bme280 == NULL) {
 8002288:	2800      	cmp	r0, #0
 800228a:	d06f      	beq.n	800236c <main+0x108>
        return;
    }
     
    
    gas_sensors_init();
 800228c:	f7ff fbd4 	bl	8001a38 <gas_sensors_init>
 8002290:	483a      	ldr	r0, [pc, #232]	; (800237c <main+0x118>)
 
            
    //LOG_INF("Date: %s",get_formatted_time());

    
    gpioa = device_get_binding("GPIOA");
 8002292:	4c3b      	ldr	r4, [pc, #236]	; (8002380 <main+0x11c>)
 8002294:	f00d fb3c 	bl	800f910 <z_impl_device_get_binding>
 8002298:	6020      	str	r0, [r4, #0]
 800229a:	483a      	ldr	r0, [pc, #232]	; (8002384 <main+0x120>)
    gpiob = device_get_binding("GPIOB");
 800229c:	4d3a      	ldr	r5, [pc, #232]	; (8002388 <main+0x124>)
 800229e:	f00d fb37 	bl	800f910 <z_impl_device_get_binding>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 80022a2:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80022a6:	6028      	str	r0, [r5, #0]
 80022a8:	2109      	movs	r1, #9
 80022aa:	4838      	ldr	r0, [pc, #224]	; (800238c <main+0x128>)
 80022ac:	f00f fd17 	bl	8011cde <gpio_pin_configure.isra.0>
 80022b0:	4836      	ldr	r0, [pc, #216]	; (800238c <main+0x128>)
 80022b2:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80022b6:	210b      	movs	r1, #11
 80022b8:	f00f fd11 	bl	8011cde <gpio_pin_configure.isra.0>
    
    ret = gpio_pin_configure_dt(&led_green, GPIO_OUTPUT_INACTIVE);
    ret = gpio_pin_configure_dt(&led_red, GPIO_OUTPUT_INACTIVE);
    
    ret = gpio_pin_configure(gpiob, 3, GPIO_OUTPUT_INACTIVE);
 80022bc:	6828      	ldr	r0, [r5, #0]
 80022be:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80022c2:	2103      	movs	r1, #3
 80022c4:	f00f fd0b 	bl	8011cde <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_INACTIVE);
 80022c8:	6820      	ldr	r0, [r4, #0]
 80022ca:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80022ce:	2104      	movs	r1, #4
 80022d0:	f00f fd05 	bl	8011cde <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 5, GPIO_OUTPUT_LOW);
 80022d4:	6820      	ldr	r0, [r4, #0]
 80022d6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80022da:	2105      	movs	r1, #5
 80022dc:	f00f fcff 	bl	8011cde <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 7, GPIO_OUTPUT_LOW);
 80022e0:	6820      	ldr	r0, [r4, #0]
 80022e2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80022e6:	2107      	movs	r1, #7
 80022e8:	f00f fcf9 	bl	8011cde <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 6, GPIO_INPUT);
 80022ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022f0:	6820      	ldr	r0, [r4, #0]
 80022f2:	2106      	movs	r1, #6
 80022f4:	f00f fcf3 	bl	8011cde <gpio_pin_configure.isra.0>
    
    gpio_pin_set_dt(&led_green,0);
 80022f8:	4825      	ldr	r0, [pc, #148]	; (8002390 <main+0x12c>)
 80022fa:	2100      	movs	r1, #0
 80022fc:	f00f fcdb 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
    gpio_pin_set_dt(&led_red,0);
 8002300:	4824      	ldr	r0, [pc, #144]	; (8002394 <main+0x130>)
 8002302:	2100      	movs	r1, #0
 8002304:	f00f fcd7 	bl	8011cb6 <gpio_pin_set_dt.isra.0>
    
    /* Thread Create: Read Ambient Sensors*/
    k_thread_create(&send_data_thread_data, send_data_stack_area,
 8002308:	2600      	movs	r6, #0
 800230a:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800230c:	2400      	movs	r4, #0
 800230e:	2505      	movs	r5, #5
 8002310:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002314:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8002318:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <main+0x134>)
 800231e:	491f      	ldr	r1, [pc, #124]	; (800239c <main+0x138>)
 8002320:	9400      	str	r4, [sp, #0]
 8002322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002326:	481e      	ldr	r0, [pc, #120]	; (80023a0 <main+0x13c>)
 8002328:	f00d fcea 	bl	800fd00 <z_impl_k_thread_create>
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <main+0x140>)
 800232e:	491e      	ldr	r1, [pc, #120]	; (80023a8 <main+0x144>)
 8002330:	9400      	str	r4, [sp, #0]
 8002332:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002336:	e9cd 5403 	strd	r5, r4, [sp, #12]
 800233a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800233e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002342:	481a      	ldr	r0, [pc, #104]	; (80023ac <main+0x148>)
 8002344:	f00d fcdc 	bl	800fd00 <z_impl_k_thread_create>
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <main+0x14c>)
 800234a:	491a      	ldr	r1, [pc, #104]	; (80023b4 <main+0x150>)
 800234c:	481a      	ldr	r0, [pc, #104]	; (80023b8 <main+0x154>)
 800234e:	9400      	str	r4, [sp, #0]
 8002350:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002354:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8002358:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800235c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002360:	f00d fcce 	bl	800fd00 <z_impl_k_thread_create>
                                 NULL, NULL, NULL,
                                 5, 0, K_NO_WAIT);    
    
     
    while (1) {
        k_msleep(5);
 8002364:	2005      	movs	r0, #5
 8002366:	f00f fcd4 	bl	8011d12 <k_msleep.isra.0>
    while (1) {
 800236a:	e7fb      	b.n	8002364 <main+0x100>
    }
    
    
    
    
 800236c:	b00f      	add	sp, #60	; 0x3c
 800236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002370:	080190e3 	.word	0x080190e3
 8002374:	080180d0 	.word	0x080180d0
 8002378:	20000cd8 	.word	0x20000cd8
 800237c:	0801910c 	.word	0x0801910c
 8002380:	20000f24 	.word	0x20000f24
 8002384:	08019112 	.word	0x08019112
 8002388:	20000f28 	.word	0x20000f28
 800238c:	08017d18 	.word	0x08017d18
 8002390:	08018254 	.word	0x08018254
 8002394:	0801825c 	.word	0x0801825c
 8002398:	08001f99 	.word	0x08001f99
 800239c:	200075a0 	.word	0x200075a0
 80023a0:	200004e0 	.word	0x200004e0
 80023a4:	08001db9 	.word	0x08001db9
 80023a8:	20006580 	.word	0x20006580
 80023ac:	20000460 	.word	0x20000460
 80023b0:	08001e99 	.word	0x08001e99
 80023b4:	20002560 	.word	0x20002560
 80023b8:	200003e0 	.word	0x200003e0

080023bc <spi_transceive.constprop.0.isra.0>:
#endif

extern int z_impl_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);

__pinned_func
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
 80023bc:	b410      	push	{r4}
 80023be:	4613      	mov	r3, r2
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80023c0:	6882      	ldr	r2, [r0, #8]
 80023c2:	6814      	ldr	r4, [r2, #0]
 80023c4:	460a      	mov	r2, r1
 80023c6:	46a4      	mov	ip, r4
 80023c8:	4901      	ldr	r1, [pc, #4]	; (80023d0 <spi_transceive.constprop.0.isra.0+0x14>)
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
}
 80023ca:	bc10      	pop	{r4}
 80023cc:	4760      	bx	ip
 80023ce:	bf00      	nop
 80023d0:	20000f30 	.word	0x20000f30

080023d4 <opc_release>:


struct spi_cs_control *ctrl;
struct spi_config spi_cfg;
    
void opc_release() {
 80023d4:	b510      	push	{r4, lr}
    uint8_t r;
    r = spi_release(spi, NULL);
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <opc_release+0x80>)
void opc_release() {
 80023d8:	b086      	sub	sp, #24
    r = spi_release(spi, NULL);
 80023da:	6818      	ldr	r0, [r3, #0]
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
 80023dc:	6883      	ldr	r3, [r0, #8]
 80023de:	2100      	movs	r1, #0
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4798      	blx	r3
    if (r == 0) {
 80023e4:	b2c0      	uxtb	r0, r0
 80023e6:	b948      	cbnz	r0, 80023fc <opc_release+0x28>
        LOG_INF("SPI Released!");
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <opc_release+0x84>)
 80023ea:	9304      	str	r3, [sp, #16]
 80023ec:	481b      	ldr	r0, [pc, #108]	; (800245c <opc_release+0x88>)
 80023ee:	2302      	movs	r3, #2
 80023f0:	aa03      	add	r2, sp, #12
 80023f2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80023f6:	9303      	str	r3, [sp, #12]
 80023f8:	f00f fc90 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
    }
    r = gpio_pin_configure(gpioa, 7, GPIO_OUTPUT_LOW);
 80023fc:	4c18      	ldr	r4, [pc, #96]	; (8002460 <opc_release+0x8c>)
 80023fe:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002402:	6820      	ldr	r0, [r4, #0]
 8002404:	2107      	movs	r1, #7
 8002406:	f00f fcac 	bl	8011d62 <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 5, GPIO_OUTPUT_LOW);
 800240a:	6820      	ldr	r0, [r4, #0]
 800240c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002410:	2105      	movs	r1, #5
 8002412:	f00f fca6 	bl	8011d62 <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 6, GPIO_INPUT);
 8002416:	6820      	ldr	r0, [r4, #0]
 8002418:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800241c:	2106      	movs	r1, #6
 800241e:	f00f fca0 	bl	8011d62 <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_LOW);
 8002422:	6820      	ldr	r0, [r4, #0]
    
    
    
    gpio_pin_set(gpiob,4,0);
 8002424:	4c0f      	ldr	r4, [pc, #60]	; (8002464 <opc_release+0x90>)
    r = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_LOW);
 8002426:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800242a:	2104      	movs	r1, #4
 800242c:	f00f fc99 	bl	8011d62 <gpio_pin_configure.isra.0>
    gpio_pin_set(gpiob,4,0);
 8002430:	6820      	ldr	r0, [r4, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	2104      	movs	r1, #4
 8002436:	f00f fc84 	bl	8011d42 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,7,0);
 800243a:	6820      	ldr	r0, [r4, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	2107      	movs	r1, #7
 8002440:	f00f fc7f 	bl	8011d42 <gpio_pin_set.isra.0>
    //gpio_pin_set(gpiob,6,0);     // MISO (input line)
    gpio_pin_set(gpiob,5,0);
 8002444:	6820      	ldr	r0, [r4, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	2105      	movs	r1, #5
}    
 800244a:	b006      	add	sp, #24
 800244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_pin_set(gpiob,5,0);
 8002450:	f00f bc77 	b.w	8011d42 <gpio_pin_set.isra.0>
 8002454:	20000f2c 	.word	0x20000f2c
 8002458:	0801911d 	.word	0x0801911d
 800245c:	080180e0 	.word	0x080180e0
 8002460:	20000f24 	.word	0x20000f24
 8002464:	20000f28 	.word	0x20000f28

08002468 <opc_init>:
void opc_init() {
 8002468:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                        .gpio_dt_flags = GPIO_ACTIVE_LOW
    };
    */ 

    
    spi_cfg.frequency = 500000U;
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <opc_init+0x34>)
 800246c:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <opc_init+0x38>)
 800246e:	601a      	str	r2, [r3, #0]
    spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB | 
 8002470:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002474:	809a      	strh	r2, [r3, #4]
 8002476:	480b      	ldr	r0, [pc, #44]	; (80024a4 <opc_init+0x3c>)
 8002478:	f00d fa4a 	bl	800f910 <z_impl_device_get_binding>
            SPI_OP_MODE_MASTER | SPI_MODE_CPHA;

    
    spi = device_get_binding("OPC");
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <opc_init+0x40>)
 800247e:	6018      	str	r0, [r3, #0]

    if (spi == NULL) {
 8002480:	b948      	cbnz	r0, 8002496 <opc_init+0x2e>
        /* No such node, or the node does not have status "okay". */
        LOG_ERR("Error: no device SPI found.");
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <opc_init+0x44>)
 8002484:	9304      	str	r3, [sp, #16]
 8002486:	480a      	ldr	r0, [pc, #40]	; (80024b0 <opc_init+0x48>)
 8002488:	2302      	movs	r3, #2
 800248a:	aa03      	add	r2, sp, #12
 800248c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002490:	9303      	str	r3, [sp, #12]
 8002492:	f00f fc43 	bl	8011d1c <z_log_msg2_static_create.constprop.0>

    }
    
}
 8002496:	b007      	add	sp, #28
 8002498:	f85d fb04 	ldr.w	pc, [sp], #4
 800249c:	20000f30 	.word	0x20000f30
 80024a0:	0007a120 	.word	0x0007a120
 80024a4:	0801912b 	.word	0x0801912b
 80024a8:	20000f2c 	.word	0x20000f2c
 80024ac:	0801912f 	.word	0x0801912f
 80024b0:	080180e0 	.word	0x080180e0

080024b4 <opc_send_command>:
{
  // Return a 32-bit unsigned int from 4 bytes
  return ((val3 << 24) | (val2 << 16) | (val1 << 8) | val0);
}

uint8_t opc_send_command(uint8_t cmd) {
 80024b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b6:	b08b      	sub	sp, #44	; 0x2c
 80024b8:	af00      	add	r7, sp, #0
    
 
    
    uint8_t tx_buf[1];
    uint8_t rx_buf[1];
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80024ba:	2401      	movs	r4, #1
    struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
    
    tx_buf[0] = cmd;
    
    gpio_pin_set(gpioa,4,0);
 80024bc:	4e1d      	ldr	r6, [pc, #116]	; (8002534 <opc_send_command+0x80>)
    tx_buf[0] = cmd;
 80024be:	7038      	strb	r0, [r7, #0]
    struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
    struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
 80024c6:	f107 0308 	add.w	r3, r7, #8
 80024ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
uint8_t opc_send_command(uint8_t cmd) {
 80024ce:	4605      	mov	r5, r0
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 80024d0:	f107 0310 	add.w	r3, r7, #16
    gpio_pin_set(gpioa,4,0);
 80024d4:	6830      	ldr	r0, [r6, #0]
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80024d6:	60fc      	str	r4, [r7, #12]
    gpio_pin_set(gpioa,4,0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2104      	movs	r1, #4
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 80024dc:	e9c7 3408 	strd	r3, r4, [r7, #32]
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80024e0:	60bf      	str	r7, [r7, #8]
    gpio_pin_set(gpioa,4,0);
 80024e2:	f00f fc2e 	bl	8011d42 <gpio_pin_set.isra.0>
    k_usleep(4);
 80024e6:	2004      	movs	r0, #4
 80024e8:	f00f fc48 	bl	8011d7c <k_usleep.isra.0>
    spi_transceive(spi, &spi_cfg, &tx, &rx);
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <opc_send_command+0x84>)
 80024ee:	f107 0220 	add.w	r2, r7, #32
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	f107 0118 	add.w	r1, r7, #24
 80024f8:	f7ff ff60 	bl	80023bc <spi_transceive.constprop.0.isra.0>
    k_usleep(4);
 80024fc:	2004      	movs	r0, #4
 80024fe:	f00f fc3d 	bl	8011d7c <k_usleep.isra.0>
    gpio_pin_set(gpioa,4,1);                
 8002502:	6830      	ldr	r0, [r6, #0]
 8002504:	4622      	mov	r2, r4
 8002506:	2104      	movs	r1, #4
 8002508:	f00f fc1b 	bl	8011d42 <gpio_pin_set.isra.0>
    LOG_INF("Sent %d, received: %d",cmd,rx_buf[0]);
 800250c:	b088      	sub	sp, #32
 800250e:	466a      	mov	r2, sp
 8002510:	793b      	ldrb	r3, [r7, #4]
 8002512:	490a      	ldr	r1, [pc, #40]	; (800253c <opc_send_command+0x88>)
 8002514:	6193      	str	r3, [r2, #24]
 8002516:	2304      	movs	r3, #4
 8002518:	e9c2 1504 	strd	r1, r5, [r2, #16]
 800251c:	4808      	ldr	r0, [pc, #32]	; (8002540 <opc_send_command+0x8c>)
 800251e:	f842 3f0c 	str.w	r3, [r2, #12]!
 8002522:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8002526:	f00f fbf9 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
    return rx_buf[0];
}
 800252a:	7938      	ldrb	r0, [r7, #4]
 800252c:	372c      	adds	r7, #44	; 0x2c
 800252e:	46bd      	mov	sp, r7
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002532:	bf00      	nop
 8002534:	20000f24 	.word	0x20000f24
 8002538:	20000f2c 	.word	0x20000f2c
 800253c:	0801914b 	.word	0x0801914b
 8002540:	080180e0 	.word	0x080180e0

08002544 <opc_start>:


/* * * * * * * * * Start OPC * * * * * * * * * */

void opc_start() {
 8002544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002548:	b087      	sub	sp, #28
    LOG_INF("*** STARTING OPC ***");
 800254a:	4b54      	ldr	r3, [pc, #336]	; (800269c <opc_start+0x158>)
    // Switch on the relay
    for (int t=3; t>0; t--) {
        LOG_INF("Switching the relay ON in %d",t);
 800254c:	4f54      	ldr	r7, [pc, #336]	; (80026a0 <opc_start+0x15c>)
 800254e:	4d55      	ldr	r5, [pc, #340]	; (80026a4 <opc_start+0x160>)
    LOG_INF("*** STARTING OPC ***");
 8002550:	9304      	str	r3, [sp, #16]
    for (int t=3; t>0; t--) {
 8002552:	2403      	movs	r4, #3
    LOG_INF("*** STARTING OPC ***");
 8002554:	2302      	movs	r3, #2
 8002556:	4853      	ldr	r0, [pc, #332]	; (80026a4 <opc_start+0x160>)
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	aa03      	add	r2, sp, #12
 800255c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_INF("Switching the relay ON in %d",t);
 8002560:	4626      	mov	r6, r4
    LOG_INF("*** STARTING OPC ***");
 8002562:	f00f fbdb 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        LOG_INF("Switching the relay ON in %d",t);
 8002566:	aa03      	add	r2, sp, #12
 8002568:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800256c:	4628      	mov	r0, r5
 800256e:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8002572:	9603      	str	r6, [sp, #12]
 8002574:	f00f fbd2 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 8002578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800257c:	f00f fc00 	bl	8011d80 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 8002580:	3c01      	subs	r4, #1
 8002582:	d1f0      	bne.n	8002566 <opc_start+0x22>
    }    
    gpio_pin_set(gpiob,3,1);
 8002584:	4d48      	ldr	r5, [pc, #288]	; (80026a8 <opc_start+0x164>)
    uint8_t r2 = 0;
    
    uint8_t c = 0; 

    for (int t=3; t>0; t--) {
        LOG_INF("Sending ON Sequence in %d:",t);
 8002586:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80026ac <opc_start+0x168>
    gpio_pin_set(gpiob,3,1);
 800258a:	6828      	ldr	r0, [r5, #0]
        LOG_INF("Sending ON Sequence in %d:",t);
 800258c:	4e45      	ldr	r6, [pc, #276]	; (80026a4 <opc_start+0x160>)
    gpio_pin_set(gpiob,3,1);
 800258e:	2201      	movs	r2, #1
 8002590:	2103      	movs	r1, #3
 8002592:	f00f fbd6 	bl	8011d42 <gpio_pin_set.isra.0>
    for (int t=3; t>0; t--) {
 8002596:	2403      	movs	r4, #3
        LOG_INF("Sending ON Sequence in %d:",t);
 8002598:	4627      	mov	r7, r4
 800259a:	aa03      	add	r2, sp, #12
 800259c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80025a0:	4630      	mov	r0, r6
 80025a2:	e9cd 8404 	strd	r8, r4, [sp, #16]
 80025a6:	9703      	str	r7, [sp, #12]
 80025a8:	f00f fbb8 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 80025ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b0:	f00f fbe6 	bl	8011d80 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 80025b4:	3c01      	subs	r4, #1
 80025b6:	d1f0      	bne.n	800259a <opc_start+0x56>
        if (r1 == 243 && r2 == 3) {
                LOG_INF("**** Received 0xF3 and 0x03 :: OPC Unit is ready for start sequence...");
                break;
        }
        if (r1 == 49) {
                LOG_INF("Received busy status from OP");
 80025b8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80026b0 <opc_start+0x16c>
 80025bc:	4f39      	ldr	r7, [pc, #228]	; (80026a4 <opc_start+0x160>)
        if (c == 10) {
                LOG_INF("Waiting 5s for OPC's buffer to reset");
                k_msleep(5000);	
        }
        if (c > 20) {
                LOG_INF("power cycle...");
 80025be:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80026b4 <opc_start+0x170>
        r1 = opc_send_command(0x03);
 80025c2:	2003      	movs	r0, #3
 80025c4:	f7ff ff76 	bl	80024b4 <opc_send_command>
 80025c8:	4606      	mov	r6, r0
        k_msleep(10);
 80025ca:	200a      	movs	r0, #10
 80025cc:	f00f fbd8 	bl	8011d80 <k_msleep.isra.0>
        r2 = opc_send_command(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7ff ff6f 	bl	80024b4 <opc_send_command>
        if (r1 == 243 && r2 == 3) {
 80025d6:	2ef3      	cmp	r6, #243	; 0xf3
 80025d8:	d112      	bne.n	8002600 <opc_start+0xbc>
 80025da:	2803      	cmp	r0, #3
 80025dc:	d11c      	bne.n	8002618 <opc_start+0xd4>
                LOG_INF("**** Received 0xF3 and 0x03 :: OPC Unit is ready for start sequence...");
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <opc_start+0x174>)
 80025e0:	9304      	str	r3, [sp, #16]
 80025e2:	4830      	ldr	r0, [pc, #192]	; (80026a4 <opc_start+0x160>)
 80025e4:	2302      	movs	r3, #2
 80025e6:	aa03      	add	r2, sp, #12
 80025e8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80025ec:	9303      	str	r3, [sp, #12]
 80025ee:	f00f fb95 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
                c=0;
        }				
        c++;
    }

    k_msleep(5000);    
 80025f2:	f241 3088 	movw	r0, #5000	; 0x1388
}
 80025f6:	b007      	add	sp, #28
 80025f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    k_msleep(5000);    
 80025fc:	f00f bbc0 	b.w	8011d80 <k_msleep.isra.0>
        if (r1 == 49) {
 8002600:	2e31      	cmp	r6, #49	; 0x31
 8002602:	d109      	bne.n	8002618 <opc_start+0xd4>
                LOG_INF("Received busy status from OP");
 8002604:	2302      	movs	r3, #2
 8002606:	aa03      	add	r2, sp, #12
 8002608:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800260c:	4638      	mov	r0, r7
 800260e:	f8cd 8010 	str.w	r8, [sp, #16]
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	f00f fb82 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 8002618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800261c:	f00f fbb0 	bl	8011d80 <k_msleep.isra.0>
        if (c == 10) {
 8002620:	2c0a      	cmp	r4, #10
 8002622:	d110      	bne.n	8002646 <opc_start+0x102>
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <opc_start+0x178>)
 8002626:	9304      	str	r3, [sp, #16]
 8002628:	4638      	mov	r0, r7
 800262a:	2302      	movs	r3, #2
 800262c:	aa03      	add	r2, sp, #12
 800262e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002632:	9303      	str	r3, [sp, #12]
 8002634:	f00f fb72 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
                k_msleep(5000);	
 8002638:	f241 3088 	movw	r0, #5000	; 0x1388
 800263c:	f00f fba0 	bl	8011d80 <k_msleep.isra.0>
        c++;
 8002640:	3401      	adds	r4, #1
 8002642:	b2e4      	uxtb	r4, r4
        r1 = opc_send_command(0x03);
 8002644:	e7bd      	b.n	80025c2 <opc_start+0x7e>
        if (c > 20) {
 8002646:	2c14      	cmp	r4, #20
 8002648:	d9fa      	bls.n	8002640 <opc_start+0xfc>
                LOG_INF("power cycle...");
 800264a:	2302      	movs	r3, #2
 800264c:	aa03      	add	r2, sp, #12
 800264e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002652:	4638      	mov	r0, r7
 8002654:	9303      	str	r3, [sp, #12]
 8002656:	f8cd 9010 	str.w	r9, [sp, #16]
 800265a:	f00f fb5f 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
                gpio_pin_set(gpiob,3,0);
 800265e:	2200      	movs	r2, #0
 8002660:	6828      	ldr	r0, [r5, #0]
 8002662:	2103      	movs	r1, #3
 8002664:	f00f fb6d 	bl	8011d42 <gpio_pin_set.isra.0>
                gpio_pin_set(gpiob,4,0);
 8002668:	6828      	ldr	r0, [r5, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	2104      	movs	r1, #4
 800266e:	f00f fb68 	bl	8011d42 <gpio_pin_set.isra.0>
                gpio_pin_set(gpiob,7,0);
 8002672:	6828      	ldr	r0, [r5, #0]
 8002674:	2200      	movs	r2, #0
 8002676:	2107      	movs	r1, #7
 8002678:	f00f fb63 	bl	8011d42 <gpio_pin_set.isra.0>
                gpio_pin_set(gpiob,5,0);
 800267c:	2200      	movs	r2, #0
 800267e:	2105      	movs	r1, #5
 8002680:	6828      	ldr	r0, [r5, #0]
 8002682:	f00f fb5e 	bl	8011d42 <gpio_pin_set.isra.0>
                k_msleep(8000);
 8002686:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800268a:	f00f fb79 	bl	8011d80 <k_msleep.isra.0>
                gpio_pin_set(gpiob,3,1);
 800268e:	6828      	ldr	r0, [r5, #0]
 8002690:	2201      	movs	r2, #1
 8002692:	2103      	movs	r1, #3
 8002694:	f00f fb55 	bl	8011d42 <gpio_pin_set.isra.0>
                c=0;
 8002698:	2400      	movs	r4, #0
 800269a:	e7d1      	b.n	8002640 <opc_start+0xfc>
 800269c:	08019161 	.word	0x08019161
 80026a0:	08019176 	.word	0x08019176
 80026a4:	080180e0 	.word	0x080180e0
 80026a8:	20000f28 	.word	0x20000f28
 80026ac:	08019193 	.word	0x08019193
 80026b0:	080191f5 	.word	0x080191f5
 80026b4:	08019237 	.word	0x08019237
 80026b8:	080191ae 	.word	0x080191ae
 80026bc:	08019212 	.word	0x08019212

080026c0 <opc_stop>:

void opc_stop() {
 80026c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026c4:	b087      	sub	sp, #28
    LOG_INF("*** SHUTTING DOWN OPC ***");
 80026c6:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <opc_stop+0x13c>)
    // Switch on the relay
    for (int t=3; t>0; t--) {
        LOG_INF("Switching the relay OFF in %d",t);
 80026c8:	4f4d      	ldr	r7, [pc, #308]	; (8002800 <opc_stop+0x140>)
 80026ca:	4d4e      	ldr	r5, [pc, #312]	; (8002804 <opc_stop+0x144>)
    LOG_INF("*** SHUTTING DOWN OPC ***");
 80026cc:	9304      	str	r3, [sp, #16]
    for (int t=3; t>0; t--) {
 80026ce:	2403      	movs	r4, #3
    LOG_INF("*** SHUTTING DOWN OPC ***");
 80026d0:	2302      	movs	r3, #2
 80026d2:	484c      	ldr	r0, [pc, #304]	; (8002804 <opc_stop+0x144>)
 80026d4:	9303      	str	r3, [sp, #12]
 80026d6:	aa03      	add	r2, sp, #12
 80026d8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_INF("Switching the relay OFF in %d",t);
 80026dc:	4626      	mov	r6, r4
    LOG_INF("*** SHUTTING DOWN OPC ***");
 80026de:	f00f fb1d 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        LOG_INF("Switching the relay OFF in %d",t);
 80026e2:	aa03      	add	r2, sp, #12
 80026e4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80026e8:	4628      	mov	r0, r5
 80026ea:	e9cd 7404 	strd	r7, r4, [sp, #16]
 80026ee:	9603      	str	r6, [sp, #12]
 80026f0:	f00f fb14 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 80026f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026f8:	f00f fb42 	bl	8011d80 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 80026fc:	3c01      	subs	r4, #1
 80026fe:	d1f0      	bne.n	80026e2 <opc_stop+0x22>
    }    
    gpio_pin_set(gpiob,3,1);
 8002700:	4d41      	ldr	r5, [pc, #260]	; (8002808 <opc_stop+0x148>)
    uint8_t r2 = 0;
    
    uint8_t c = 0; 

    for (int t=3; t>0; t--) {
        LOG_INF("Sending OFF Sequence in %d:",t);
 8002702:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800280c <opc_stop+0x14c>
    gpio_pin_set(gpiob,3,1);
 8002706:	6828      	ldr	r0, [r5, #0]
        LOG_INF("Sending OFF Sequence in %d:",t);
 8002708:	4e3e      	ldr	r6, [pc, #248]	; (8002804 <opc_stop+0x144>)
    gpio_pin_set(gpiob,3,1);
 800270a:	2201      	movs	r2, #1
 800270c:	2103      	movs	r1, #3
 800270e:	f00f fb18 	bl	8011d42 <gpio_pin_set.isra.0>
    for (int t=3; t>0; t--) {
 8002712:	2403      	movs	r4, #3
        LOG_INF("Sending OFF Sequence in %d:",t);
 8002714:	4627      	mov	r7, r4
 8002716:	aa03      	add	r2, sp, #12
 8002718:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800271c:	4630      	mov	r0, r6
 800271e:	e9cd 8404 	strd	r8, r4, [sp, #16]
 8002722:	9703      	str	r7, [sp, #12]
 8002724:	f00f fafa 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 8002728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800272c:	f00f fb28 	bl	8011d80 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 8002730:	3c01      	subs	r4, #1
 8002732:	d1f0      	bne.n	8002716 <opc_stop+0x56>
                LOG_INF("**** Received 0xF3 and 0x03 :: "
                        "OPC Unit is ready for shutdown sequence...");
                break;
        }
        if (r1 == 49) {
                LOG_INF("Received busy status from OP");
 8002734:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002810 <opc_stop+0x150>
 8002738:	4f32      	ldr	r7, [pc, #200]	; (8002804 <opc_stop+0x144>)

        }		
        k_msleep(600);

        if (c == 10) {
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 800273a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8002814 <opc_stop+0x154>
        r1 = opc_send_command(0x03);
 800273e:	2003      	movs	r0, #3
 8002740:	f7ff feb8 	bl	80024b4 <opc_send_command>
 8002744:	4606      	mov	r6, r0
        k_msleep(10);
 8002746:	200a      	movs	r0, #10
 8002748:	f00f fb1a 	bl	8011d80 <k_msleep.isra.0>
        r2 = opc_send_command(0x01);
 800274c:	2001      	movs	r0, #1
 800274e:	f7ff feb1 	bl	80024b4 <opc_send_command>
        if (r1 == 243 && r2 == 3) {
 8002752:	2ef3      	cmp	r6, #243	; 0xf3
 8002754:	d12b      	bne.n	80027ae <opc_stop+0xee>
 8002756:	2803      	cmp	r0, #3
 8002758:	d135      	bne.n	80027c6 <opc_stop+0x106>
                LOG_INF("**** Received 0xF3 and 0x03 :: "
 800275a:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <opc_stop+0x158>)
                k_msleep(5000);	
        }
        if (c > 20) {
            LOG_INF("Couldn't confirm off command status");
 800275c:	9304      	str	r3, [sp, #16]
 800275e:	aa03      	add	r2, sp, #12
 8002760:	2302      	movs	r3, #2
 8002762:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002766:	4827      	ldr	r0, [pc, #156]	; (8002804 <opc_stop+0x144>)
 8002768:	9303      	str	r3, [sp, #12]
 800276a:	f00f fad7 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
            break;
        }				
        c++;
    }
    k_msleep(2000);
 800276e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002772:	f00f fb05 	bl	8011d80 <k_msleep.isra.0>
    gpio_pin_set(gpiob,3,0);
 8002776:	6828      	ldr	r0, [r5, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	2103      	movs	r1, #3
 800277c:	f00f fae1 	bl	8011d42 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,4,0);
 8002780:	6828      	ldr	r0, [r5, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	2104      	movs	r1, #4
 8002786:	f00f fadc 	bl	8011d42 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,7,0);
 800278a:	6828      	ldr	r0, [r5, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	2107      	movs	r1, #7
 8002790:	f00f fad7 	bl	8011d42 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,6,0);    
 8002794:	6828      	ldr	r0, [r5, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	2106      	movs	r1, #6
 800279a:	f00f fad2 	bl	8011d42 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,5,0);
 800279e:	6828      	ldr	r0, [r5, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2105      	movs	r1, #5
}
 80027a4:	b007      	add	sp, #28
 80027a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    gpio_pin_set(gpiob,5,0);
 80027aa:	f00f baca 	b.w	8011d42 <gpio_pin_set.isra.0>
        if (r1 == 49) {
 80027ae:	2e31      	cmp	r6, #49	; 0x31
 80027b0:	d109      	bne.n	80027c6 <opc_stop+0x106>
                LOG_INF("Received busy status from OP");
 80027b2:	2302      	movs	r3, #2
 80027b4:	aa03      	add	r2, sp, #12
 80027b6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80027ba:	4638      	mov	r0, r7
 80027bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80027c0:	9303      	str	r3, [sp, #12]
 80027c2:	f00f faab 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        k_msleep(600);
 80027c6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80027ca:	f00f fad9 	bl	8011d80 <k_msleep.isra.0>
        if (c == 10) {
 80027ce:	2c0a      	cmp	r4, #10
 80027d0:	b2e3      	uxtb	r3, r4
 80027d2:	d10f      	bne.n	80027f4 <opc_stop+0x134>
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 80027d4:	2302      	movs	r3, #2
 80027d6:	4638      	mov	r0, r7
 80027d8:	aa03      	add	r2, sp, #12
 80027da:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80027de:	f8cd 9010 	str.w	r9, [sp, #16]
 80027e2:	9303      	str	r3, [sp, #12]
 80027e4:	f00f fa9a 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
                k_msleep(5000);	
 80027e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80027ec:	f00f fac8 	bl	8011d80 <k_msleep.isra.0>
    while(1) {
 80027f0:	3401      	adds	r4, #1
        r1 = opc_send_command(0x03);
 80027f2:	e7a4      	b.n	800273e <opc_stop+0x7e>
        if (c > 20) {
 80027f4:	2b15      	cmp	r3, #21
 80027f6:	d1fb      	bne.n	80027f0 <opc_stop+0x130>
            LOG_INF("Couldn't confirm off command status");
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <opc_stop+0x15c>)
 80027fa:	e7af      	b.n	800275c <opc_stop+0x9c>
 80027fc:	08019246 	.word	0x08019246
 8002800:	08019260 	.word	0x08019260
 8002804:	080180e0 	.word	0x080180e0
 8002808:	20000f28 	.word	0x20000f28
 800280c:	0801927e 	.word	0x0801927e
 8002810:	080191f5 	.word	0x080191f5
 8002814:	08019212 	.word	0x08019212
 8002818:	0801929a 	.word	0x0801929a
 800281c:	080192e4 	.word	0x080192e4

08002820 <opc_read_histogram>:



/* * * * * * * * * Read Histogram * * * * * * * * * */

struct histogram opc_read_histogram(uint8_t samples) {
 8002820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002824:	b0db      	sub	sp, #364	; 0x16c
    data.period = 0;
    data.temp_pressure = 0;
    
    result.pm1  = 0;
    result.pm25 = 0;
    result.pm10 = 0;
 8002826:	f04f 0900 	mov.w	r9, #0
    result.sfr = 0;
    result.period = 0;
    result.temp_pressure = 0;

    for (uint8_t s=0; s<samples; s++) {
 800282a:	2300      	movs	r3, #0
        LOG_INF("READING SAMPLE %d",s);
 800282c:	4c24      	ldr	r4, [pc, #144]	; (80028c0 <opc_read_histogram+0xa0>)
struct histogram opc_read_histogram(uint8_t samples) {
 800282e:	9005      	str	r0, [sp, #20]
 8002830:	910b      	str	r1, [sp, #44]	; 0x2c
    for (uint8_t s=0; s<samples; s++) {
 8002832:	9306      	str	r3, [sp, #24]
    result.pm25 = 0;
 8002834:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    result.pm1  = 0;
 8002838:	f8cd 901c 	str.w	r9, [sp, #28]
    result.period = 0;
 800283c:	f8cd 9020 	str.w	r9, [sp, #32]
    result.sfr = 0;
 8002840:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    for (uint8_t s=0; s<samples; s++) {
 8002844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002846:	9a06      	ldr	r2, [sp, #24]
 8002848:	4293      	cmp	r3, r2
 800284a:	d13d      	bne.n	80028c8 <opc_read_histogram+0xa8>
        k_msleep(5000);
    }
    
    //LOG_INF("Calculating OPC data average");
    // Calculate Average
    float div = samples-SKIP;
 800284c:	1e98      	subs	r0, r3, #2
 800284e:	f7fe f9c7 	bl	8000be0 <__aeabi_i2f>
 8002852:	4604      	mov	r4, r0
    //LOG_INF("Dividing %0.2f over %d",result.pm10, samples-SKIP);
    result.pm1 = result.pm1 / div;
 8002854:	4601      	mov	r1, r0
 8002856:	9807      	ldr	r0, [sp, #28]
 8002858:	f7fe faca 	bl	8000df0 <__aeabi_fdiv>
    result.pm25 = result.pm25 / div;
 800285c:	4621      	mov	r1, r4
    result.pm1 = result.pm1 / div;
 800285e:	4607      	mov	r7, r0
    result.pm25 = result.pm25 / div;
 8002860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002862:	f7fe fac5 	bl	8000df0 <__aeabi_fdiv>
    result.pm10 = result.pm10 / div;
 8002866:	4621      	mov	r1, r4
    result.pm25 = result.pm25 / div;
 8002868:	4606      	mov	r6, r0
    result.pm10 = result.pm10 / div;
 800286a:	4648      	mov	r0, r9
 800286c:	f7fe fac0 	bl	8000df0 <__aeabi_fdiv>
    result.period = result.period / div;
 8002870:	4621      	mov	r1, r4
    result.pm10 = result.pm10 / div;
 8002872:	4605      	mov	r5, r0
    result.period = result.period / div;
 8002874:	9808      	ldr	r0, [sp, #32]
 8002876:	f7fe fabb 	bl	8000df0 <__aeabi_fdiv>
    result.sfr = result.sfr / div;
 800287a:	4621      	mov	r1, r4
    result.period = result.period / div;
 800287c:	4680      	mov	r8, r0
    result.sfr = result.sfr / div;
 800287e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002880:	f7fe fab6 	bl	8000df0 <__aeabi_fdiv>
    LOG_INF("Returning OPC read result...");
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <opc_read_histogram+0xa4>)
 8002886:	934e      	str	r3, [sp, #312]	; 0x138
    result.sfr = result.sfr / div;
 8002888:	4604      	mov	r4, r0
    LOG_INF("Returning OPC read result...");
 800288a:	2302      	movs	r3, #2
 800288c:	aa4d      	add	r2, sp, #308	; 0x134
 800288e:	480c      	ldr	r0, [pc, #48]	; (80028c0 <opc_read_histogram+0xa0>)
 8002890:	934d      	str	r3, [sp, #308]	; 0x134
 8002892:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002896:	f00f fa41 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
    
    return result;
 800289a:	9a05      	ldr	r2, [sp, #20]
 800289c:	9b05      	ldr	r3, [sp, #20]
 800289e:	f8c2 8098 	str.w	r8, [r2, #152]	; 0x98
 80028a2:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
}
 80028a6:	4610      	mov	r0, r2
    return result;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80028ae:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
 80028b2:	f8c2 60a4 	str.w	r6, [r2, #164]	; 0xa4
 80028b6:	f8c2 50a8 	str.w	r5, [r2, #168]	; 0xa8
}
 80028ba:	b05b      	add	sp, #364	; 0x16c
 80028bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028c0:	080180e0 	.word	0x080180e0
 80028c4:	08019378 	.word	0x08019378
        LOG_INF("READING SAMPLE %d",s);
 80028c8:	4ba4      	ldr	r3, [pc, #656]	; (8002b5c <opc_read_histogram+0x33c>)
 80028ca:	48a5      	ldr	r0, [pc, #660]	; (8002b60 <opc_read_histogram+0x340>)
 80028cc:	934e      	str	r3, [sp, #312]	; 0x138
 80028ce:	aa4d      	add	r2, sp, #308	; 0x134
 80028d0:	9b06      	ldr	r3, [sp, #24]
 80028d2:	934f      	str	r3, [sp, #316]	; 0x13c
 80028d4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80028d8:	f04f 0a03 	mov.w	sl, #3
 80028dc:	f8cd a134 	str.w	sl, [sp, #308]	; 0x134
 80028e0:	f00f fa1c 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
        r = opc_send_command(0x30);
 80028e4:	2030      	movs	r0, #48	; 0x30
 80028e6:	f7ff fde5 	bl	80024b4 <opc_send_command>
 80028ea:	900c      	str	r0, [sp, #48]	; 0x30
        k_msleep(12);
 80028ec:	200c      	movs	r0, #12
 80028ee:	f00f fa47 	bl	8011d80 <k_msleep.isra.0>
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80028f2:	ab0e      	add	r3, sp, #56	; 0x38
 80028f4:	a910      	add	r1, sp, #64	; 0x40
 80028f6:	9310      	str	r3, [sp, #64]	; 0x40
        struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 80028f8:	aa12      	add	r2, sp, #72	; 0x48
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80028fa:	2301      	movs	r3, #1
        struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 80028fc:	a80f      	add	r0, sp, #60	; 0x3c
 80028fe:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
        struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
 8002902:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
        struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 8002906:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 800290a:	9311      	str	r3, [sp, #68]	; 0x44
        if (r == 243) {
 800290c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800290e:	2bf3      	cmp	r3, #243	; 0xf3
 8002910:	d138      	bne.n	8002984 <opc_read_histogram+0x164>
            LOG_INF("Histogram %d is READY!!!!",s);
 8002912:	4b94      	ldr	r3, [pc, #592]	; (8002b64 <opc_read_histogram+0x344>)
 8002914:	934e      	str	r3, [sp, #312]	; 0x138
 8002916:	aa4d      	add	r2, sp, #308	; 0x134
 8002918:	9b06      	ldr	r3, [sp, #24]
 800291a:	934f      	str	r3, [sp, #316]	; 0x13c
 800291c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8002920:	4620      	mov	r0, r4
 8002922:	f8cd a134 	str.w	sl, [sp, #308]	; 0x134
 8002926:	f00f f9f9 	bl	8011d1c <z_log_msg2_static_create.constprop.0>
            gpio_pin_set(gpioa,4,0);
 800292a:	4b8f      	ldr	r3, [pc, #572]	; (8002b68 <opc_read_histogram+0x348>)
 800292c:	2200      	movs	r2, #0
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	2104      	movs	r1, #4
 8002932:	f00f fa06 	bl	8011d42 <gpio_pin_set.isra.0>
            k_usleep(6);
 8002936:	2006      	movs	r0, #6
 8002938:	f00f fa20 	bl	8011d7c <k_usleep.isra.0>
                tx_buf[0] = 0xC0;
 800293c:	aa0e      	add	r2, sp, #56	; 0x38
 800293e:	920c      	str	r2, [sp, #48]	; 0x30
 8002940:	ab4a      	add	r3, sp, #296	; 0x128
            for (int i=0; i<62; i++) {
 8002942:	f04f 0a00 	mov.w	sl, #0
                spi_transceive(spi, &spi_cfg, &tx, &rx);
 8002946:	aa16      	add	r2, sp, #88	; 0x58
 8002948:	930d      	str	r3, [sp, #52]	; 0x34
                tx_buf[0] = 0xC0;
 800294a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800294c:	f06f 013f 	mvn.w	r1, #63	; 0x3f
 8002950:	7019      	strb	r1, [r3, #0]
                spi_transceive(spi, &spi_cfg, &tx, &rx);
 8002952:	4b86      	ldr	r3, [pc, #536]	; (8002b6c <opc_read_histogram+0x34c>)
 8002954:	a914      	add	r1, sp, #80	; 0x50
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	f7ff fd30 	bl	80023bc <spi_transceive.constprop.0.isra.0>
            for (int i=0; i<62; i++) {
 800295c:	f10a 0a01 	add.w	sl, sl, #1
                vals[i] = rx_buf[0];
 8002960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002962:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8002966:	f803 1b01 	strb.w	r1, [r3], #1
            for (int i=0; i<62; i++) {
 800296a:	f1ba 0f3e 	cmp.w	sl, #62	; 0x3e
 800296e:	aa16      	add	r2, sp, #88	; 0x58
 8002970:	d1ea      	bne.n	8002948 <opc_read_histogram+0x128>
            k_usleep(6);
 8002972:	2006      	movs	r0, #6
 8002974:	f00f fa02 	bl	8011d7c <k_usleep.isra.0>
            gpio_pin_set(gpioa,4,1);
 8002978:	4b7b      	ldr	r3, [pc, #492]	; (8002b68 <opc_read_histogram+0x348>)
 800297a:	2201      	movs	r2, #1
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	2104      	movs	r1, #4
 8002980:	f00f f9df 	bl	8011d42 <gpio_pin_set.isra.0>
  u.b[0] = val0;
 8002984:	f89d 0154 	ldrb.w	r0, [sp, #340]	; 0x154
        data.period = calculate_float(vals[44], vals[45], vals[46], vals[47]);
 8002988:	f89d 1155 	ldrb.w	r1, [sp, #341]	; 0x155
 800298c:	f89d 2156 	ldrb.w	r2, [sp, #342]	; 0x156
 8002990:	f89d 3157 	ldrb.w	r3, [sp, #343]	; 0x157
  u.b[0] = val0;
 8002994:	f360 0707 	bfi	r7, r0, #0, #8
 8002998:	f89d 014c 	ldrb.w	r0, [sp, #332]	; 0x14c
  u.b[1] = val1;
 800299c:	f361 270f 	bfi	r7, r1, #8, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 80029a0:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
  u.b[2] = val2;
 80029a4:	f362 4717 	bfi	r7, r2, #16, #8
  u.b[0] = val0;
 80029a8:	f360 0807 	bfi	r8, r0, #0, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 80029ac:	f89d 214e 	ldrb.w	r2, [sp, #334]	; 0x14e
  u.b[0] = val0;
 80029b0:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
  u.b[3] = val3;
 80029b4:	f363 671f 	bfi	r7, r3, #24, #8
  u.b[1] = val1;
 80029b8:	f361 280f 	bfi	r8, r1, #8, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 80029bc:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 80029c0:	f89d 115b 	ldrb.w	r1, [sp, #347]	; 0x15b
  u.b[2] = val2;
 80029c4:	f362 4817 	bfi	r8, r2, #16, #8
  u.b[0] = val0;
 80029c8:	f360 0b07 	bfi	fp, r0, #0, #8
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 80029cc:	f89d 215c 	ldrb.w	r2, [sp, #348]	; 0x15c
  u.b[0] = val0;
 80029d0:	f89d 015e 	ldrb.w	r0, [sp, #350]	; 0x15e
  u.b[3] = val3;
 80029d4:	f363 681f 	bfi	r8, r3, #24, #8
  u.b[1] = val1;
 80029d8:	f361 2b0f 	bfi	fp, r1, #8, #8
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 80029dc:	f89d 315d 	ldrb.w	r3, [sp, #349]	; 0x15d
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 80029e0:	f89d 115f 	ldrb.w	r1, [sp, #351]	; 0x15f
  u.b[2] = val2;
 80029e4:	f362 4b17 	bfi	fp, r2, #16, #8
  u.b[0] = val0;
 80029e8:	f360 0507 	bfi	r5, r0, #0, #8
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 80029ec:	f89d 2160 	ldrb.w	r2, [sp, #352]	; 0x160
  u.b[0] = val0;
 80029f0:	f89d 0162 	ldrb.w	r0, [sp, #354]	; 0x162
  u.b[3] = val3;
 80029f4:	f363 6b1f 	bfi	fp, r3, #24, #8
  u.b[1] = val1;
 80029f8:	f361 250f 	bfi	r5, r1, #8, #8
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 80029fc:	f89d 3161 	ldrb.w	r3, [sp, #353]	; 0x161
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8002a00:	f89d 1163 	ldrb.w	r1, [sp, #355]	; 0x163
  u.b[2] = val2;
 8002a04:	f362 4517 	bfi	r5, r2, #16, #8
  u.b[0] = val0;
 8002a08:	f360 0607 	bfi	r6, r0, #0, #8
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8002a0c:	f89d 2164 	ldrb.w	r2, [sp, #356]	; 0x164
  u.b[3] = val3;
 8002a10:	f363 651f 	bfi	r5, r3, #24, #8
  u.b[1] = val1;
 8002a14:	f361 260f 	bfi	r6, r1, #8, #8
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8002a18:	f89d 3165 	ldrb.w	r3, [sp, #357]	; 0x165
  u.b[2] = val2;
 8002a1c:	f362 4617 	bfi	r6, r2, #16, #8
  u.b[3] = val3;
 8002a20:	f363 661f 	bfi	r6, r3, #24, #8
        snprintfcb(fperiod, 40, "%0.2f", data.period);
 8002a24:	4638      	mov	r0, r7
  return u.val;
 8002a26:	960c      	str	r6, [sp, #48]	; 0x30
        snprintfcb(fperiod, 40, "%0.2f", data.period);
 8002a28:	f7fd fd3e 	bl	80004a8 <__aeabi_f2d>
 8002a2c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8002a30:	e9cd 0100 	strd	r0, r1, [sp]
 8002a34:	4a4e      	ldr	r2, [pc, #312]	; (8002b70 <opc_read_histogram+0x350>)
 8002a36:	2128      	movs	r1, #40	; 0x28
 8002a38:	4650      	mov	r0, sl
 8002a3a:	f00f f9ae 	bl	8011d9a <snprintfcb>
        snprintfcb(fpm1, 40, "%0.2f", data.pm1);
 8002a3e:	4658      	mov	r0, fp
 8002a40:	f7fd fd32 	bl	80004a8 <__aeabi_f2d>
 8002a44:	4a4a      	ldr	r2, [pc, #296]	; (8002b70 <opc_read_histogram+0x350>)
 8002a46:	e9cd 0100 	strd	r0, r1, [sp]
 8002a4a:	2128      	movs	r1, #40	; 0x28
 8002a4c:	a822      	add	r0, sp, #136	; 0x88
 8002a4e:	f00f f9a4 	bl	8011d9a <snprintfcb>
        snprintfcb(fpm25, 40, "%0.2f", data.pm25);
 8002a52:	4628      	mov	r0, r5
 8002a54:	f7fd fd28 	bl	80004a8 <__aeabi_f2d>
 8002a58:	4a45      	ldr	r2, [pc, #276]	; (8002b70 <opc_read_histogram+0x350>)
 8002a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8002a5e:	2128      	movs	r1, #40	; 0x28
 8002a60:	a82c      	add	r0, sp, #176	; 0xb0
 8002a62:	f00f f99a 	bl	8011d9a <snprintfcb>
        snprintfcb(fpm10, 40, "%0.2f", data.pm10);
 8002a66:	4630      	mov	r0, r6
 8002a68:	f7fd fd1e 	bl	80004a8 <__aeabi_f2d>
 8002a6c:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <opc_read_histogram+0x350>)
 8002a6e:	e9cd 0100 	strd	r0, r1, [sp]
 8002a72:	2128      	movs	r1, #40	; 0x28
 8002a74:	a836      	add	r0, sp, #216	; 0xd8
 8002a76:	f00f f990 	bl	8011d9a <snprintfcb>
        snprintfcb(fflowrate, 40, "%0.2f", data.sfr);
 8002a7a:	4640      	mov	r0, r8
 8002a7c:	f7fd fd14 	bl	80004a8 <__aeabi_f2d>
 8002a80:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <opc_read_histogram+0x350>)
 8002a82:	e9cd 0100 	strd	r0, r1, [sp]
 8002a86:	2128      	movs	r1, #40	; 0x28
 8002a88:	a840      	add	r0, sp, #256	; 0x100
 8002a8a:	f00f f986 	bl	8011d9a <snprintfcb>
        LOG_INF("Sampling Period: %s", fperiod);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <opc_read_histogram+0x354>)
 8002a90:	f8cd a00c 	str.w	sl, [sp, #12]
 8002a94:	f04f 0a00 	mov.w	sl, #0
 8002a98:	9302      	str	r3, [sp, #8]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	4653      	mov	r3, sl
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	4650      	mov	r0, sl
 8002aa2:	e9cd aa00 	strd	sl, sl, [sp]
 8002aa6:	f00f f93c 	bl	8011d22 <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("Sample Flow Rate: %s",fflowrate);
 8002aaa:	ab40      	add	r3, sp, #256	; 0x100
 8002aac:	9303      	str	r3, [sp, #12]
 8002aae:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <opc_read_histogram+0x358>)
 8002ab0:	f8cd a000 	str.w	sl, [sp]
 8002ab4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	4653      	mov	r3, sl
 8002abc:	4621      	mov	r1, r4
 8002abe:	4650      	mov	r0, sl
 8002ac0:	f00f f92f 	bl	8011d22 <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM1: %s", fpm1);
 8002ac4:	ab22      	add	r3, sp, #136	; 0x88
 8002ac6:	9303      	str	r3, [sp, #12]
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <opc_read_histogram+0x35c>)
 8002aca:	f8cd a000 	str.w	sl, [sp]
 8002ace:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	4653      	mov	r3, sl
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	4650      	mov	r0, sl
 8002ada:	f00f f922 	bl	8011d22 <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM2.5: %s", fpm25);
 8002ade:	ab2c      	add	r3, sp, #176	; 0xb0
 8002ae0:	9303      	str	r3, [sp, #12]
 8002ae2:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <opc_read_histogram+0x360>)
 8002ae4:	f8cd a000 	str.w	sl, [sp]
 8002ae8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	4653      	mov	r3, sl
 8002af0:	4621      	mov	r1, r4
 8002af2:	4650      	mov	r0, sl
 8002af4:	f00f f915 	bl	8011d22 <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM10: %s", fpm10);
 8002af8:	ab36      	add	r3, sp, #216	; 0xd8
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <opc_read_histogram+0x364>)
 8002afe:	f8cd a000 	str.w	sl, [sp]
 8002b02:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002b06:	2203      	movs	r2, #3
 8002b08:	4653      	mov	r3, sl
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	4650      	mov	r0, sl
 8002b0e:	f00f f908 	bl	8011d22 <z_log_msg2_runtime_create.constprop.0>
        if (s > (SKIP-1)) {
 8002b12:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d918      	bls.n	8002b4c <opc_read_histogram+0x32c>
            result.pm1  = result.pm1 + data.pm1;
 8002b1a:	9807      	ldr	r0, [sp, #28]
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	f7fd ffab 	bl	8000a78 <__addsf3>
            result.pm10 = result.pm10 + data.pm10;
 8002b22:	4631      	mov	r1, r6
            result.pm1  = result.pm1 + data.pm1;
 8002b24:	9007      	str	r0, [sp, #28]
            result.pm10 = result.pm10 + data.pm10;
 8002b26:	4648      	mov	r0, r9
 8002b28:	f7fd ffa6 	bl	8000a78 <__addsf3>
            result.pm25 = result.pm25 + data.pm25;
 8002b2c:	4629      	mov	r1, r5
            result.pm10 = result.pm10 + data.pm10;
 8002b2e:	4681      	mov	r9, r0
            result.pm25 = result.pm25 + data.pm25;
 8002b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b32:	f7fd ffa1 	bl	8000a78 <__addsf3>
            result.period = result.period + data.period;
 8002b36:	4639      	mov	r1, r7
            result.pm25 = result.pm25 + data.pm25;
 8002b38:	9009      	str	r0, [sp, #36]	; 0x24
            result.period = result.period + data.period;
 8002b3a:	9808      	ldr	r0, [sp, #32]
 8002b3c:	f7fd ff9c 	bl	8000a78 <__addsf3>
            result.sfr = result.sfr + data.sfr;
 8002b40:	4641      	mov	r1, r8
            result.period = result.period + data.period;
 8002b42:	9008      	str	r0, [sp, #32]
            result.sfr = result.sfr + data.sfr;
 8002b44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b46:	f7fd ff97 	bl	8000a78 <__addsf3>
 8002b4a:	900a      	str	r0, [sp, #40]	; 0x28
        k_msleep(5000);
 8002b4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b50:	f00f f916 	bl	8011d80 <k_msleep.isra.0>
    for (uint8_t s=0; s<samples; s++) {
 8002b54:	9b06      	ldr	r3, [sp, #24]
 8002b56:	3301      	adds	r3, #1
 8002b58:	9306      	str	r3, [sp, #24]
 8002b5a:	e673      	b.n	8002844 <opc_read_histogram+0x24>
 8002b5c:	08019308 	.word	0x08019308
 8002b60:	080180e0 	.word	0x080180e0
 8002b64:	0801931a 	.word	0x0801931a
 8002b68:	20000f24 	.word	0x20000f24
 8002b6c:	20000f2c 	.word	0x20000f2c
 8002b70:	08018ba1 	.word	0x08018ba1
 8002b74:	08019334 	.word	0x08019334
 8002b78:	08019348 	.word	0x08019348
 8002b7c:	0801935d 	.word	0x0801935d
 8002b80:	08019365 	.word	0x08019365
 8002b84:	0801936f 	.word	0x0801936f

08002b88 <vsnprintfcb>:

	return rc;
}

int vsnprintfcb(char *str, size_t size, const char *format, va_list ap)
{
 8002b88:	b507      	push	{r0, r1, r2, lr}
	struct str_ctx ctx = {
 8002b8a:	9000      	str	r0, [sp, #0]
		.dp = str,
		.dpe = str + size,
 8002b8c:	4408      	add	r0, r1
	struct str_ctx ctx = {
 8002b8e:	9001      	str	r0, [sp, #4]
	};
	int rv = cbvprintf(str_out, &ctx, format, ap);
 8002b90:	4669      	mov	r1, sp
 8002b92:	4807      	ldr	r0, [pc, #28]	; (8002bb0 <vsnprintfcb+0x28>)
 8002b94:	f000 fb50 	bl	8003238 <cbvprintf>

	if (ctx.dp < ctx.dpe) {
 8002b98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	f04f 0200 	mov.w	r2, #0
		ctx.dp[0] = 0;
 8002ba2:	bf34      	ite	cc
 8002ba4:	701a      	strbcc	r2, [r3, #0]
	} else {
		ctx.dp[-1] = 0;
 8002ba6:	f803 2c01 	strbcs.w	r2, [r3, #-1]
	}

	return rv;
}
 8002baa:	b003      	add	sp, #12
 8002bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bb0:	08011d8b 	.word	0x08011d8b

08002bb4 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 8002bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb8:	b08d      	sub	sp, #52	; 0x34
 8002bba:	461f      	mov	r7, r3
 8002bbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002bbe:	9202      	str	r2, [sp, #8]
 8002bc0:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 8002bc2:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8002bc6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 8002bca:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8002bcc:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8002bce:	0782      	lsls	r2, r0, #30
{
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8002bd4:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
 8002bd6:	f040 821c 	bne.w	8003012 <cbvprintf_package+0x45e>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 8002bda:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	f040 821b 	bne.w	8003018 <cbvprintf_package+0x464>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 8002be2:	f001 0607 	and.w	r6, r1, #7
 8002be6:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 8002be8:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8002bec:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
 8002bf0:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
 8002bf4:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8002bf6:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 8002bfa:	4652      	mov	r2, sl
	bool parsing = false;
 8002bfc:	4651      	mov	r1, sl
	size = sizeof(char *);
 8002bfe:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 8002c00:	b105      	cbz	r5, 8002c04 <cbvprintf_package+0x50>
				*(const char **)buf = s;
 8002c02:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8002c04:	9804      	ldr	r0, [sp, #16]
 8002c06:	2800      	cmp	r0, #0
 8002c08:	dc07      	bgt.n	8002c1a <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8002c0a:	48c8      	ldr	r0, [pc, #800]	; (8002f2c <cbvprintf_package+0x378>)
 8002c0c:	4287      	cmp	r7, r0
 8002c0e:	f0c0 8139 	bcc.w	8002e84 <cbvprintf_package+0x2d0>
 8002c12:	48c7      	ldr	r0, [pc, #796]	; (8002f30 <cbvprintf_package+0x37c>)
 8002c14:	4287      	cmp	r7, r0
 8002c16:	f080 8135 	bcs.w	8002e84 <cbvprintf_package+0x2d0>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
 8002c1a:	9802      	ldr	r0, [sp, #8]
 8002c1c:	f010 0e02 	ands.w	lr, r0, #2
 8002c20:	f000 8149 	beq.w	8002eb6 <cbvprintf_package+0x302>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8002c24:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8002c28:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 8002c2a:	f1be 0f00 	cmp.w	lr, #0
 8002c2e:	f000 812f 	beq.w	8002e90 <cbvprintf_package+0x2dc>
 8002c32:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002c36:	f0c0 812b 	bcc.w	8002e90 <cbvprintf_package+0x2dc>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
 8002c3a:	f06f 0015 	mvn.w	r0, #21
 8002c3e:	e0f9      	b.n	8002e34 <cbvprintf_package+0x280>
		if (!parsing) {
 8002c40:	b939      	cbnz	r1, 8002c52 <cbvprintf_package+0x9e>
			if (*fmt == '%') {
 8002c42:	2825      	cmp	r0, #37	; 0x25
 8002c44:	f040 813b 	bne.w	8002ebe <cbvprintf_package+0x30a>
				parsing = true;
 8002c48:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
 8002c4a:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
 8002c4e:	46c1      	mov	r9, r8
 8002c50:	e135      	b.n	8002ebe <cbvprintf_package+0x30a>
		switch (*fmt) {
 8002c52:	282b      	cmp	r0, #43	; 0x2b
 8002c54:	d824      	bhi.n	8002ca0 <cbvprintf_package+0xec>
 8002c56:	281f      	cmp	r0, #31
 8002c58:	d801      	bhi.n	8002c5e <cbvprintf_package+0xaa>
			parsing = false;
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	e12f      	b.n	8002ebe <cbvprintf_package+0x30a>
		switch (*fmt) {
 8002c5e:	f1a0 0c20 	sub.w	ip, r0, #32
 8002c62:	f1bc 0f0b 	cmp.w	ip, #11
 8002c66:	d8f8      	bhi.n	8002c5a <cbvprintf_package+0xa6>
 8002c68:	f20f 0e04 	addw	lr, pc, #4
 8002c6c:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
 8002c70:	08002ebf 	.word	0x08002ebf
 8002c74:	08002c5b 	.word	0x08002c5b
 8002c78:	08002c5b 	.word	0x08002c5b
 8002c7c:	08002ebf 	.word	0x08002ebf
 8002c80:	08002c5b 	.word	0x08002c5b
 8002c84:	08002c5b 	.word	0x08002c5b
 8002c88:	08002c5b 	.word	0x08002c5b
 8002c8c:	08002c5b 	.word	0x08002c5b
 8002c90:	08002c5b 	.word	0x08002c5b
 8002c94:	08002c5b 	.word	0x08002c5b
 8002c98:	08002e4f 	.word	0x08002e4f
 8002c9c:	08002ebf 	.word	0x08002ebf
 8002ca0:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
 8002ca4:	fa5f fe8c 	uxtb.w	lr, ip
 8002ca8:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
 8002cac:	d8d5      	bhi.n	8002c5a <cbvprintf_package+0xa6>
 8002cae:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
 8002cb2:	d8d2      	bhi.n	8002c5a <cbvprintf_package+0xa6>
 8002cb4:	f20f 0e04 	addw	lr, pc, #4
 8002cb8:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
 8002cbc:	08002ebf 	.word	0x08002ebf
 8002cc0:	08002ebf 	.word	0x08002ebf
 8002cc4:	08002c5b 	.word	0x08002c5b
 8002cc8:	08002ebf 	.word	0x08002ebf
 8002ccc:	08002ebf 	.word	0x08002ebf
 8002cd0:	08002ebf 	.word	0x08002ebf
 8002cd4:	08002ebf 	.word	0x08002ebf
 8002cd8:	08002ebf 	.word	0x08002ebf
 8002cdc:	08002ebf 	.word	0x08002ebf
 8002ce0:	08002ebf 	.word	0x08002ebf
 8002ce4:	08002ebf 	.word	0x08002ebf
 8002ce8:	08002ebf 	.word	0x08002ebf
 8002cec:	08002ebf 	.word	0x08002ebf
 8002cf0:	08002c5b 	.word	0x08002c5b
 8002cf4:	08002c5b 	.word	0x08002c5b
 8002cf8:	08002c5b 	.word	0x08002c5b
 8002cfc:	08002c5b 	.word	0x08002c5b
 8002d00:	08002c5b 	.word	0x08002c5b
 8002d04:	08002c5b 	.word	0x08002c5b
 8002d08:	08002c5b 	.word	0x08002c5b
 8002d0c:	08002e11 	.word	0x08002e11
 8002d10:	08002c5b 	.word	0x08002c5b
 8002d14:	08002c5b 	.word	0x08002c5b
 8002d18:	08002c5b 	.word	0x08002c5b
 8002d1c:	08002e11 	.word	0x08002e11
 8002d20:	08002e11 	.word	0x08002e11
 8002d24:	08002e11 	.word	0x08002e11
 8002d28:	08002c5b 	.word	0x08002c5b
 8002d2c:	08002c5b 	.word	0x08002c5b
 8002d30:	08002c5b 	.word	0x08002c5b
 8002d34:	08002c5b 	.word	0x08002c5b
 8002d38:	08002ebf 	.word	0x08002ebf
 8002d3c:	08002c5b 	.word	0x08002c5b
 8002d40:	08002c5b 	.word	0x08002c5b
 8002d44:	08002c5b 	.word	0x08002c5b
 8002d48:	08002c5b 	.word	0x08002c5b
 8002d4c:	08002c5b 	.word	0x08002c5b
 8002d50:	08002c5b 	.word	0x08002c5b
 8002d54:	08002c5b 	.word	0x08002c5b
 8002d58:	08002c5b 	.word	0x08002c5b
 8002d5c:	08002c5b 	.word	0x08002c5b
 8002d60:	08002c5b 	.word	0x08002c5b
 8002d64:	08002c5b 	.word	0x08002c5b
 8002d68:	08002df5 	.word	0x08002df5
 8002d6c:	08002c5b 	.word	0x08002c5b
 8002d70:	08002c5b 	.word	0x08002c5b
 8002d74:	08002c5b 	.word	0x08002c5b
 8002d78:	08002c5b 	.word	0x08002c5b
 8002d7c:	08002c5b 	.word	0x08002c5b
 8002d80:	08002c5b 	.word	0x08002c5b
 8002d84:	08002c5b 	.word	0x08002c5b
 8002d88:	08002c5b 	.word	0x08002c5b
 8002d8c:	08002e11 	.word	0x08002e11
 8002d90:	08002c5b 	.word	0x08002c5b
 8002d94:	08002df5 	.word	0x08002df5
 8002d98:	08002df5 	.word	0x08002df5
 8002d9c:	08002e11 	.word	0x08002e11
 8002da0:	08002e11 	.word	0x08002e11
 8002da4:	08002e11 	.word	0x08002e11
 8002da8:	08002ebf 	.word	0x08002ebf
 8002dac:	08002df5 	.word	0x08002df5
 8002db0:	08002e43 	.word	0x08002e43
 8002db4:	08002c5b 	.word	0x08002c5b
 8002db8:	08002ebf 	.word	0x08002ebf
 8002dbc:	08002c5b 	.word	0x08002c5b
 8002dc0:	08002e49 	.word	0x08002e49
 8002dc4:	08002df5 	.word	0x08002df5
 8002dc8:	08002e49 	.word	0x08002e49
 8002dcc:	08002c5b 	.word	0x08002c5b
 8002dd0:	08002c5b 	.word	0x08002c5b
 8002dd4:	08002e49 	.word	0x08002e49
 8002dd8:	08002c4b 	.word	0x08002c4b
 8002ddc:	08002df5 	.word	0x08002df5
 8002de0:	08002c5b 	.word	0x08002c5b
 8002de4:	08002c5b 	.word	0x08002c5b
 8002de8:	08002df5 	.word	0x08002df5
 8002dec:	08002c5b 	.word	0x08002c5b
 8002df0:	08002c4b 	.word	0x08002c4b
			if (fmt[-1] == 'l') {
 8002df4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002df8:	296c      	cmp	r1, #108	; 0x6c
 8002dfa:	d127      	bne.n	8002e4c <cbvprintf_package+0x298>
				if (fmt[-2] == 'l') {
 8002dfc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8002e00:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
 8002e02:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
 8002e06:	d03a      	beq.n	8002e7e <cbvprintf_package+0x2ca>
			align = VA_STACK_ALIGN(void *);
 8002e08:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
 8002e0c:	46c1      	mov	r9, r8
 8002e0e:	e01e      	b.n	8002e4e <cbvprintf_package+0x29a>
				v.ld = va_arg(ap, long double);
 8002e10:	9800      	ldr	r0, [sp, #0]
 8002e12:	f100 0b07 	add.w	fp, r0, #7
 8002e16:	f02b 0007 	bic.w	r0, fp, #7
 8002e1a:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
 8002e1e:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
 8002e20:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
 8002e22:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
 8002e26:	b155      	cbz	r5, 8002e3e <cbvprintf_package+0x28a>
				if (BUF_OFFSET + size > len) {
 8002e28:	9805      	ldr	r0, [sp, #20]
 8002e2a:	4420      	add	r0, r4
 8002e2c:	42b0      	cmp	r0, r6
 8002e2e:	d904      	bls.n	8002e3a <cbvprintf_package+0x286>
					return -ENOSPC;
 8002e30:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8002e34:	b00d      	add	sp, #52	; 0x34
 8002e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
 8002e3a:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
 8002e3e:	3408      	adds	r4, #8
			parsing = false;
 8002e40:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
 8002e42:	f04f 0808 	mov.w	r8, #8
 8002e46:	e702      	b.n	8002c4e <cbvprintf_package+0x9a>
			parsing = false;
 8002e48:	2100      	movs	r1, #0
 8002e4a:	e7dd      	b.n	8002e08 <cbvprintf_package+0x254>
			parsing = false;
 8002e4c:	2100      	movs	r1, #0
		buf = (void *) ROUND_UP(buf, align);
 8002e4e:	3c01      	subs	r4, #1
 8002e50:	4444      	add	r4, r8
 8002e52:	f1c8 0c00 	rsb	ip, r8, #0
 8002e56:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 8002e5a:	b125      	cbz	r5, 8002e66 <cbvprintf_package+0x2b2>
 8002e5c:	eba9 0c05 	sub.w	ip, r9, r5
 8002e60:	44a4      	add	ip, r4
 8002e62:	4566      	cmp	r6, ip
 8002e64:	d3e4      	bcc.n	8002e30 <cbvprintf_package+0x27c>
		if (*fmt == 's') {
 8002e66:	2873      	cmp	r0, #115	; 0x73
 8002e68:	d152      	bne.n	8002f10 <cbvprintf_package+0x35c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8002e6a:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
 8002e6c:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8002e70:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
 8002e72:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8002e76:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
 8002e78:	f8cd b000 	str.w	fp, [sp]
 8002e7c:	e6c0      	b.n	8002c00 <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
 8002e7e:	f04f 0808 	mov.w	r8, #8
 8002e82:	e7c3      	b.n	8002e0c <cbvprintf_package+0x258>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
 8002e84:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8002e86:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
 8002e8a:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
 8002e8e:	e6cb      	b.n	8002c28 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 8002e90:	2a0f      	cmp	r2, #15
 8002e92:	f63f aed2 	bhi.w	8002c3a <cbvprintf_package+0x86>
				if (buf0 != NULL) {
 8002e96:	b345      	cbz	r5, 8002eea <cbvprintf_package+0x336>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8002e98:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8002e9c:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
 8002ea0:	4496      	add	lr, r2
 8002ea2:	f1bc 0f00 	cmp.w	ip, #0
 8002ea6:	d01a      	beq.n	8002ede <cbvprintf_package+0x32a>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 8002ea8:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8002eac:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
 8002eb0:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
 8002eb4:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
 8002eb6:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
 8002eba:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
 8002ebc:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
 8002ebe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	f47f aebc 	bne.w	8002c40 <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
 8002ec8:	1b61      	subs	r1, r4, r5
 8002eca:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002ece:	f4bf aeb4 	bcs.w	8002c3a <cbvprintf_package+0x86>
	if (buf0 == NULL) {
 8002ed2:	2d00      	cmp	r5, #0
 8002ed4:	d141      	bne.n	8002f5a <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 8002ed6:	f1a6 0408 	sub.w	r4, r6, #8
 8002eda:	1860      	adds	r0, r4, r1
 8002edc:	e7aa      	b.n	8002e34 <cbvprintf_package+0x280>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8002ede:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
 8002ee2:	9803      	ldr	r0, [sp, #12]
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	9003      	str	r0, [sp, #12]
 8002ee8:	e7e4      	b.n	8002eb4 <cbvprintf_package+0x300>
				} else if (is_ro || rws_pos_en) {
 8002eea:	f1bc 0f00 	cmp.w	ip, #0
 8002eee:	d101      	bne.n	8002ef4 <cbvprintf_package+0x340>
 8002ef0:	9801      	ldr	r0, [sp, #4]
 8002ef2:	b108      	cbz	r0, 8002ef8 <cbvprintf_package+0x344>
					len += 1;
 8002ef4:	3601      	adds	r6, #1
 8002ef6:	e7dd      	b.n	8002eb4 <cbvprintf_package+0x300>
					len += strlen(s) + 1 + 1;
 8002ef8:	4638      	mov	r0, r7
 8002efa:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8002efe:	9305      	str	r3, [sp, #20]
 8002f00:	f7fe fa61 	bl	80013c6 <strlen>
 8002f04:	3602      	adds	r6, #2
 8002f06:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8002f0a:	9b05      	ldr	r3, [sp, #20]
 8002f0c:	4406      	add	r6, r0
 8002f0e:	e7d1      	b.n	8002eb4 <cbvprintf_package+0x300>
		} else if (size == sizeof(int)) {
 8002f10:	f1b9 0f04 	cmp.w	r9, #4
 8002f14:	d10e      	bne.n	8002f34 <cbvprintf_package+0x380>
			int v = va_arg(ap, int);
 8002f16:	9800      	ldr	r0, [sp, #0]
 8002f18:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
 8002f1c:	b10d      	cbz	r5, 8002f22 <cbvprintf_package+0x36e>
			int v = va_arg(ap, int);
 8002f1e:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
 8002f20:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
 8002f22:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
 8002f24:	f8cd c000 	str.w	ip, [sp]
 8002f28:	e7c9      	b.n	8002ebe <cbvprintf_package+0x30a>
 8002f2a:	bf00      	nop
 8002f2c:	08017bc0 	.word	0x08017bc0
 8002f30:	0801ab98 	.word	0x0801ab98
		} else if (size == sizeof(long long)) {
 8002f34:	f1b9 0f08 	cmp.w	r9, #8
 8002f38:	f47f ae7f 	bne.w	8002c3a <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
 8002f3c:	9800      	ldr	r0, [sp, #0]
 8002f3e:	3007      	adds	r0, #7
 8002f40:	f020 0007 	bic.w	r0, r0, #7
 8002f44:	f100 0c08 	add.w	ip, r0, #8
 8002f48:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
 8002f4c:	b11d      	cbz	r5, 8002f56 <cbvprintf_package+0x3a2>
			long long v = va_arg(ap, long long);
 8002f4e:	e9d0 bc00 	ldrd	fp, ip, [r0]
 8002f52:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
 8002f56:	3408      	adds	r4, #8
 8002f58:	e7b1      	b.n	8002ebe <cbvprintf_package+0x30a>
	if (rws_pos_en) {
 8002f5a:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
 8002f5c:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
 8002f5e:	0889      	lsrs	r1, r1, #2
 8002f60:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
 8002f62:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
 8002f66:	b1a3      	cbz	r3, 8002f92 <cbvprintf_package+0x3de>
		buf0[1] = 0;
 8002f68:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
 8002f6a:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
 8002f6c:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
 8002f70:	f1ba 0f00 	cmp.w	sl, #0
 8002f74:	d006      	beq.n	8002f84 <cbvprintf_package+0x3d0>
 8002f76:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
 8002f78:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
 8002f7c:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
 8002f80:	4562      	cmp	r2, ip
 8002f82:	d10a      	bne.n	8002f9a <cbvprintf_package+0x3e6>
 8002f84:	f10d 0820 	add.w	r8, sp, #32
 8002f88:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
 8002f8c:	f1c5 0b01 	rsb	fp, r5, #1
 8002f90:	e039      	b.n	8003006 <cbvprintf_package+0x452>
		buf0[3] = 0;
 8002f92:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
 8002f94:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
 8002f96:	70eb      	strb	r3, [r5, #3]
 8002f98:	e7e8      	b.n	8002f6c <cbvprintf_package+0x3b8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 8002f9a:	f810 1b01 	ldrb.w	r1, [r0], #1
 8002f9e:	060b      	lsls	r3, r1, #24
 8002fa0:	d508      	bpl.n	8002fb4 <cbvprintf_package+0x400>
			if (BUF_OFFSET + 1 > len) {
 8002fa2:	eb04 080e 	add.w	r8, r4, lr
 8002fa6:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8002fa8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
 8002fac:	f4ff af40 	bcc.w	8002e30 <cbvprintf_package+0x27c>
			*buf++ = pos;
 8002fb0:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
 8002fb4:	f10c 0c01 	add.w	ip, ip, #1
 8002fb8:	e7e2      	b.n	8002f80 <cbvprintf_package+0x3cc>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 8002fba:	f1ba 0f00 	cmp.w	sl, #0
 8002fbe:	d003      	beq.n	8002fc8 <cbvprintf_package+0x414>
 8002fc0:	f998 2000 	ldrsb.w	r2, [r8]
 8002fc4:	2a00      	cmp	r2, #0
 8002fc6:	db1c      	blt.n	8003002 <cbvprintf_package+0x44e>
		if (rws_pos_en) {
 8002fc8:	9b01      	ldr	r3, [sp, #4]
 8002fca:	bb03      	cbnz	r3, 800300e <cbvprintf_package+0x45a>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8002fcc:	f898 2000 	ldrb.w	r2, [r8]
 8002fd0:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8002fd4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
 8002fd8:	4638      	mov	r0, r7
 8002fda:	f7fe f9f4 	bl	80013c6 <strlen>
 8002fde:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
 8002fe0:	eb04 010b 	add.w	r1, r4, fp
 8002fe4:	4411      	add	r1, r2
 8002fe6:	428e      	cmp	r6, r1
 8002fe8:	f4ff af22 	bcc.w	8002e30 <cbvprintf_package+0x27c>
		*buf++ = str_ptr_pos[i];
 8002fec:	f898 1000 	ldrb.w	r1, [r8]
 8002ff0:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8002ff4:	4639      	mov	r1, r7
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	9200      	str	r2, [sp, #0]
 8002ffa:	f014 fc18 	bl	801782e <memcpy>
		buf += size;
 8002ffe:	9a00      	ldr	r2, [sp, #0]
 8003000:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
 8003002:	f108 0801 	add.w	r8, r8, #1
 8003006:	45c1      	cmp	r9, r8
 8003008:	d1d7      	bne.n	8002fba <cbvprintf_package+0x406>
	return BUF_OFFSET;
 800300a:	1b60      	subs	r0, r4, r5
 800300c:	e712      	b.n	8002e34 <cbvprintf_package+0x280>
			size = 0;
 800300e:	2200      	movs	r2, #0
 8003010:	e7e6      	b.n	8002fe0 <cbvprintf_package+0x42c>
		return -EFAULT;
 8003012:	f06f 000d 	mvn.w	r0, #13
 8003016:	e70d      	b.n	8002e34 <cbvprintf_package+0x280>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8003018:	2907      	cmp	r1, #7
 800301a:	f63f ade7 	bhi.w	8002bec <cbvprintf_package+0x38>
 800301e:	e707      	b.n	8002e30 <cbvprintf_package+0x27c>

08003020 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8003020:	680b      	ldr	r3, [r1, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8003026:	4b01      	ldr	r3, [pc, #4]	; (800302c <char_out+0xc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4718      	bx	r3
 800302c:	20000024 	.word	0x20000024

08003030 <__printk_hook_install>:
	_char_out = fn;
 8003030:	4b01      	ldr	r3, [pc, #4]	; (8003038 <__printk_hook_install+0x8>)
 8003032:	6018      	str	r0, [r3, #0]
}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000024 	.word	0x20000024

0800303c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 800303c:	b507      	push	{r0, r1, r2, lr}
 800303e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8003040:	2100      	movs	r1, #0
{
 8003042:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
 8003044:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8003046:	4803      	ldr	r0, [pc, #12]	; (8003054 <vprintk+0x18>)
 8003048:	a901      	add	r1, sp, #4
 800304a:	f000 f8f5 	bl	8003238 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 800304e:	b003      	add	sp, #12
 8003050:	f85d fb04 	ldr.w	pc, [sp], #4
 8003054:	08003021 	.word	0x08003021

08003058 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8003058:	b530      	push	{r4, r5, lr}
 800305a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 800305c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 8003060:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8003062:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 8003064:	a901      	add	r1, sp, #4
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 8003068:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 800306a:	f000 f8e5 	bl	8003238 <cbvprintf>

	if (ctx.count < ctx.max) {
 800306e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8003072:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 8003074:	bfb8      	it	lt
 8003076:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 8003078:	b005      	add	sp, #20
 800307a:	bd30      	pop	{r4, r5, pc}
 800307c:	08011ecd 	.word	0x08011ecd

08003080 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
 8003080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
 8003084:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
 8003086:	6944      	ldr	r4, [r0, #20]
	unsigned int m = tm->tm_mon + 1;
 8003088:	6905      	ldr	r5, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
 800308a:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
 800308c:	f240 736c 	movw	r3, #1900	; 0x76c
 8003090:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
 8003092:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
 8003094:	18e4      	adds	r4, r4, r3
 8003096:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
 800309a:	2d02      	cmp	r5, #2
 800309c:	bf8c      	ite	hi
 800309e:	2300      	movhi	r3, #0
 80030a0:	2301      	movls	r3, #1
 80030a2:	1ae4      	subs	r4, r4, r3
 80030a4:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 80030a8:	2900      	cmp	r1, #0
{
 80030aa:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 80030ac:	da56      	bge.n	800315c <timeutil_timegm64+0xdc>
 80030ae:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
 80030b2:	1820      	adds	r0, r4, r0
 80030b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f161 0100 	sbc.w	r1, r1, #0
 80030c0:	f7fd ff32 	bl	8000f28 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <timeutil_timegm64+0xe8>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 80030c6:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
 80030c8:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 80030cc:	e9d8 9000 	ldrd	r9, r0, [r8]
 80030d0:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80030d4:	233c      	movs	r3, #60	; 0x3c
 80030d6:	17c6      	asrs	r6, r0, #31
 80030d8:	fbc8 0603 	smlal	r0, r6, r8, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 80030dc:	2d02      	cmp	r5, #2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 80030de:	46b4      	mov	ip, r6
 80030e0:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 80030e4:	bf8c      	ite	hi
 80030e6:	f06f 0e02 	mvnhi.w	lr, #2
 80030ea:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 80030ee:	fb03 660c 	mla	r6, r3, ip, r6
 80030f2:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 80030f6:	ea4f 0394 	mov.w	r3, r4, lsr #2
 80030fa:	f240 106d 	movw	r0, #365	; 0x16d
 80030fe:	fb00 3304 	mla	r3, r0, r4, r3
 8003102:	443b      	add	r3, r7
 8003104:	f04f 0064 	mov.w	r0, #100	; 0x64
 8003108:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 800310c:	eb05 000e 	add.w	r0, r5, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 8003110:	eba3 0304 	sub.w	r3, r3, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8003114:	f04f 0599 	mov.w	r5, #153	; 0x99
	return era * 146097 + (time_t)doe - 719468;
 8003118:	4c14      	ldr	r4, [pc, #80]	; (800316c <timeutil_timegm64+0xec>)
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 800311a:	fb05 f000 	mul.w	r0, r5, r0
 800311e:	f100 0002 	add.w	r0, r0, #2
 8003122:	f04f 0505 	mov.w	r5, #5
 8003126:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 800312a:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
 800312c:	fba2 0204 	umull	r0, r2, r2, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 8003130:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
 8003134:	181b      	adds	r3, r3, r0
 8003136:	480e      	ldr	r0, [pc, #56]	; (8003170 <timeutil_timegm64+0xf0>)
 8003138:	fb04 2101 	mla	r1, r4, r1, r2
	time += 86400LL * ndays;
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <timeutil_timegm64+0xf4>)
	return era * 146097 + (time_t)doe - 719468;
 800313e:	f141 0100 	adc.w	r1, r1, #0
 8003142:	1818      	adds	r0, r3, r0
	time += 86400LL * ndays;
 8003144:	fba0 0302 	umull	r0, r3, r0, r2
	return era * 146097 + (time_t)doe - 719468;
 8003148:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
 800314c:	fb02 3101 	mla	r1, r2, r1, r3
 8003150:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
 8003154:	eb41 0106 	adc.w	r1, r1, r6
 8003158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 800315c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003160:	2300      	movs	r3, #0
 8003162:	4620      	mov	r0, r4
 8003164:	e7ac      	b.n	80030c0 <timeutil_timegm64+0x40>
 8003166:	bf00      	nop
 8003168:	fffffe70 	.word	0xfffffe70
 800316c:	00023ab1 	.word	0x00023ab1
 8003170:	fff50594 	.word	0xfff50594
 8003174:	00015180 	.word	0x00015180

08003178 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 800317a:	4e08      	ldr	r6, [pc, #32]	; (800319c <extract_decimal+0x24>)
 800317c:	6802      	ldr	r2, [r0, #0]
{
 800317e:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
 8003180:	270a      	movs	r7, #10
	size_t val = 0;
 8003182:	2000      	movs	r0, #0
 8003184:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
 8003186:	3201      	adds	r2, #1
 8003188:	780c      	ldrb	r4, [r1, #0]
 800318a:	5da5      	ldrb	r5, [r4, r6]
 800318c:	076d      	lsls	r5, r5, #29
 800318e:	d401      	bmi.n	8003194 <extract_decimal+0x1c>
	}
	*str = sp;
 8003190:	6019      	str	r1, [r3, #0]
	return val;
}
 8003192:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 8003194:	fb07 4000 	mla	r0, r7, r0, r4
 8003198:	3830      	subs	r0, #48	; 0x30
 800319a:	e7f3      	b.n	8003184 <extract_decimal+0xc>
 800319c:	0801aa65 	.word	0x0801aa65

080031a0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 80031a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a4:	4615      	mov	r5, r2
 80031a6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80031a8:	78d3      	ldrb	r3, [r2, #3]
 80031aa:	4a22      	ldr	r2, [pc, #136]	; (8003234 <encode_uint+0x94>)
 80031ac:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 80031b0:	2b6f      	cmp	r3, #111	; 0x6f
{
 80031b2:	4680      	mov	r8, r0
 80031b4:	460f      	mov	r7, r1
 80031b6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 80031ba:	d029      	beq.n	8003210 <encode_uint+0x70>
 80031bc:	d824      	bhi.n	8003208 <encode_uint+0x68>
		return 16;
 80031be:	2b58      	cmp	r3, #88	; 0x58
 80031c0:	bf14      	ite	ne
 80031c2:	260a      	movne	r6, #10
 80031c4:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 80031c6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 80031ca:	4632      	mov	r2, r6
 80031cc:	2300      	movs	r3, #0
 80031ce:	4640      	mov	r0, r8
 80031d0:	4639      	mov	r1, r7
 80031d2:	f7fd fef9 	bl	8000fc8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 80031d6:	2a09      	cmp	r2, #9
 80031d8:	b2d4      	uxtb	r4, r2
 80031da:	d81e      	bhi.n	800321a <encode_uint+0x7a>
 80031dc:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 80031de:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80031e0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 80031e2:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80031e6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 80031ea:	d301      	bcc.n	80031f0 <encode_uint+0x50>
 80031ec:	45d1      	cmp	r9, sl
 80031ee:	d811      	bhi.n	8003214 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 80031f0:	782b      	ldrb	r3, [r5, #0]
 80031f2:	069b      	lsls	r3, r3, #26
 80031f4:	d505      	bpl.n	8003202 <encode_uint+0x62>
		if (radix == 8) {
 80031f6:	2e08      	cmp	r6, #8
 80031f8:	d115      	bne.n	8003226 <encode_uint+0x86>
			conv->altform_0 = true;
 80031fa:	78ab      	ldrb	r3, [r5, #2]
 80031fc:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 8003200:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 8003202:	4648      	mov	r0, r9
 8003204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8003208:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 800320c:	2b70      	cmp	r3, #112	; 0x70
 800320e:	e7d7      	b.n	80031c0 <encode_uint+0x20>
	switch (specifier) {
 8003210:	2608      	movs	r6, #8
 8003212:	e7d8      	b.n	80031c6 <encode_uint+0x26>
		value /= radix;
 8003214:	4680      	mov	r8, r0
 8003216:	460f      	mov	r7, r1
 8003218:	e7d7      	b.n	80031ca <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800321a:	f1bb 0f01 	cmp.w	fp, #1
 800321e:	bf0c      	ite	eq
 8003220:	3437      	addeq	r4, #55	; 0x37
 8003222:	3457      	addne	r4, #87	; 0x57
 8003224:	e7db      	b.n	80031de <encode_uint+0x3e>
		} else if (radix == 16) {
 8003226:	2e10      	cmp	r6, #16
 8003228:	d1eb      	bne.n	8003202 <encode_uint+0x62>
			conv->altform_0c = true;
 800322a:	78ab      	ldrb	r3, [r5, #2]
 800322c:	f043 0310 	orr.w	r3, r3, #16
 8003230:	e7e6      	b.n	8003200 <encode_uint+0x60>
 8003232:	bf00      	nop
 8003234:	0801aa65 	.word	0x0801aa65

08003238 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8003238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323c:	4681      	mov	r9, r0
 800323e:	b09b      	sub	sp, #108	; 0x6c
 8003240:	468a      	mov	sl, r1
 8003242:	4615      	mov	r5, r2
 8003244:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8003246:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8003248:	7828      	ldrb	r0, [r5, #0]
 800324a:	b910      	cbnz	r0, 8003252 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 800324c:	4630      	mov	r0, r6
 800324e:	f000 bdc5 	b.w	8003ddc <cbvprintf+0xba4>
			OUTC(*fp++);
 8003252:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 8003254:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8003256:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 8003258:	d006      	beq.n	8003268 <cbvprintf+0x30>
			OUTC(*fp++);
 800325a:	4651      	mov	r1, sl
			OUTC('%');
 800325c:	47c8      	blx	r9
 800325e:	2800      	cmp	r0, #0
 8003260:	f2c0 85bc 	blt.w	8003ddc <cbvprintf+0xba4>
 8003264:	3601      	adds	r6, #1
		if (bps == NULL) {
 8003266:	e226      	b.n	80036b6 <cbvprintf+0x47e>
		} state = {
 8003268:	2218      	movs	r2, #24
 800326a:	2100      	movs	r1, #0
 800326c:	a80c      	add	r0, sp, #48	; 0x30
 800326e:	f014 fb06 	bl	801787e <memset>
	if (*sp == '%') {
 8003272:	786b      	ldrb	r3, [r5, #1]
 8003274:	2b25      	cmp	r3, #37	; 0x25
 8003276:	d059      	beq.n	800332c <cbvprintf+0xf4>
 8003278:	1c6a      	adds	r2, r5, #1
 800327a:	4617      	mov	r7, r2
		switch (*sp) {
 800327c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003280:	2b2b      	cmp	r3, #43	; 0x2b
 8003282:	f000 808b 	beq.w	800339c <cbvprintf+0x164>
 8003286:	d879      	bhi.n	800337c <cbvprintf+0x144>
 8003288:	2b20      	cmp	r3, #32
 800328a:	f000 808c 	beq.w	80033a6 <cbvprintf+0x16e>
 800328e:	2b23      	cmp	r3, #35	; 0x23
 8003290:	f000 808e 	beq.w	80033b0 <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
 8003294:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003298:	f003 0244 	and.w	r2, r3, #68	; 0x44
 800329c:	2a44      	cmp	r2, #68	; 0x44
 800329e:	d103      	bne.n	80032a8 <cbvprintf+0x70>
		conv->flag_zero = false;
 80032a0:	f36f 1386 	bfc	r3, #6, #1
 80032a4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 80032a8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80032ac:	970a      	str	r7, [sp, #40]	; 0x28
 80032ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 80032b6:	783b      	ldrb	r3, [r7, #0]
 80032b8:	2b2a      	cmp	r3, #42	; 0x2a
 80032ba:	d17e      	bne.n	80033ba <cbvprintf+0x182>
		conv->width_star = true;
 80032bc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 80032c8:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 80032ca:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	2a2e      	cmp	r2, #46	; 0x2e
 80032d0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80032d4:	bf0c      	ite	eq
 80032d6:	2101      	moveq	r1, #1
 80032d8:	2100      	movne	r1, #0
 80032da:	f361 0241 	bfi	r2, r1, #1, #1
 80032de:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 80032e2:	d10b      	bne.n	80032fc <cbvprintf+0xc4>
	++sp;
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 80032e8:	785a      	ldrb	r2, [r3, #1]
 80032ea:	2a2a      	cmp	r2, #42	; 0x2a
 80032ec:	d17b      	bne.n	80033e6 <cbvprintf+0x1ae>
		conv->prec_star = true;
 80032ee:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80032f2:	f042 0204 	orr.w	r2, r2, #4
 80032f6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 80032fa:	3302      	adds	r3, #2
	switch (*sp) {
 80032fc:	461a      	mov	r2, r3
 80032fe:	f812 0b01 	ldrb.w	r0, [r2], #1
 8003302:	286c      	cmp	r0, #108	; 0x6c
 8003304:	f000 80cf 	beq.w	80034a6 <cbvprintf+0x26e>
 8003308:	d87d      	bhi.n	8003406 <cbvprintf+0x1ce>
 800330a:	2868      	cmp	r0, #104	; 0x68
 800330c:	f000 8084 	beq.w	8003418 <cbvprintf+0x1e0>
 8003310:	286a      	cmp	r0, #106	; 0x6a
 8003312:	f000 80d2 	beq.w	80034ba <cbvprintf+0x282>
 8003316:	284c      	cmp	r0, #76	; 0x4c
 8003318:	f000 80d6 	beq.w	80034c8 <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
 800331c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8003320:	f36f 02c6 	bfc	r2, #3, #4
 8003324:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 8003328:	461a      	mov	r2, r3
 800332a:	e080      	b.n	800342e <cbvprintf+0x1f6>
		conv->specifier = *sp++;
 800332c:	1caa      	adds	r2, r5, #2
 800332e:	9202      	str	r2, [sp, #8]
 8003330:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 8003334:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8003338:	07df      	lsls	r7, r3, #31
 800333a:	f140 8170 	bpl.w	800361e <cbvprintf+0x3e6>
			width = va_arg(ap, int);
 800333e:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 8003342:	f1bb 0f00 	cmp.w	fp, #0
 8003346:	da07      	bge.n	8003358 <cbvprintf+0x120>
				conv->flag_dash = true;
 8003348:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800334c:	f042 0204 	orr.w	r2, r2, #4
 8003350:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 8003354:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
 8003358:	0758      	lsls	r0, r3, #29
 800335a:	f140 8169 	bpl.w	8003630 <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
 800335e:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 8003362:	f1b8 0f00 	cmp.w	r8, #0
 8003366:	f280 8168 	bge.w	800363a <cbvprintf+0x402>
				conv->prec_present = false;
 800336a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800336e:	f36f 0341 	bfc	r3, #1, #1
 8003372:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 8003376:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800337a:	e15e      	b.n	800363a <cbvprintf+0x402>
		switch (*sp) {
 800337c:	2b2d      	cmp	r3, #45	; 0x2d
 800337e:	d006      	beq.n	800338e <cbvprintf+0x156>
 8003380:	2b30      	cmp	r3, #48	; 0x30
 8003382:	d187      	bne.n	8003294 <cbvprintf+0x5c>
			conv->flag_zero = true;
 8003384:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338c:	e003      	b.n	8003396 <cbvprintf+0x15e>
			conv->flag_dash = true;
 800338e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003392:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 8003396:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 800339a:	e76e      	b.n	800327a <cbvprintf+0x42>
			conv->flag_plus = true;
 800339c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80033a0:	f043 0308 	orr.w	r3, r3, #8
 80033a4:	e7f7      	b.n	8003396 <cbvprintf+0x15e>
			conv->flag_space = true;
 80033a6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80033aa:	f043 0310 	orr.w	r3, r3, #16
 80033ae:	e7f2      	b.n	8003396 <cbvprintf+0x15e>
			conv->flag_hash = true;
 80033b0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80033b4:	f043 0320 	orr.w	r3, r3, #32
 80033b8:	e7ed      	b.n	8003396 <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
 80033ba:	a80a      	add	r0, sp, #40	; 0x28
 80033bc:	f7ff fedc 	bl	8003178 <extract_decimal>
	if (sp != wp) {
 80033c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033c2:	42bb      	cmp	r3, r7
 80033c4:	d081      	beq.n	80032ca <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
 80033c6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
 80033ca:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 80033cc:	f3c1 0240 	ubfx	r2, r1, #1, #1
 80033d0:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 80033d4:	0052      	lsls	r2, r2, #1
 80033d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033da:	f001 017d 	and.w	r1, r1, #125	; 0x7d
 80033de:	430a      	orrs	r2, r1
 80033e0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80033e4:	e771      	b.n	80032ca <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
 80033e6:	a80a      	add	r0, sp, #40	; 0x28
 80033e8:	f7ff fec6 	bl	8003178 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 80033ec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 80033f0:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 80033f2:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80033f6:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 80033fa:	f360 0341 	bfi	r3, r0, #1, #1
 80033fe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8003402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003404:	e77a      	b.n	80032fc <cbvprintf+0xc4>
	switch (*sp) {
 8003406:	2874      	cmp	r0, #116	; 0x74
 8003408:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 800340c:	d059      	beq.n	80034c2 <cbvprintf+0x28a>
 800340e:	287a      	cmp	r0, #122	; 0x7a
 8003410:	d184      	bne.n	800331c <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
 8003412:	460b      	mov	r3, r1
 8003414:	2106      	movs	r1, #6
 8003416:	e041      	b.n	800349c <cbvprintf+0x264>
		if (*++sp == 'h') {
 8003418:	7859      	ldrb	r1, [r3, #1]
 800341a:	2968      	cmp	r1, #104	; 0x68
 800341c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 8003420:	d13a      	bne.n	8003498 <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
 8003422:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
 8003424:	f362 01c6 	bfi	r1, r2, #3, #4
 8003428:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
 800342c:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
 800342e:	4613      	mov	r3, r2
 8003430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003434:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 8003436:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8003438:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 800343c:	f200 80c5 	bhi.w	80035ca <cbvprintf+0x392>
 8003440:	2a57      	cmp	r2, #87	; 0x57
 8003442:	d84e      	bhi.n	80034e2 <cbvprintf+0x2aa>
 8003444:	2a41      	cmp	r2, #65	; 0x41
 8003446:	d004      	beq.n	8003452 <cbvprintf+0x21a>
 8003448:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 800344c:	2b02      	cmp	r3, #2
 800344e:	f200 80bc 	bhi.w	80035ca <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
 8003452:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 8003456:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 800345a:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 800345c:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 8003460:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 8003464:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
 8003468:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
 800346c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 8003470:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
 8003474:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 8003478:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 800347a:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
 800347e:	b2cb      	uxtb	r3, r1
 8003480:	f100 80cb 	bmi.w	800361a <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
 8003484:	f003 0278 	and.w	r2, r3, #120	; 0x78
 8003488:	2a18      	cmp	r2, #24
 800348a:	f040 809b 	bne.w	80035c4 <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
 800348e:	f36f 03c6 	bfc	r3, #3, #4
 8003492:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8003496:	e082      	b.n	800359e <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
 8003498:	460b      	mov	r3, r1
 800349a:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
 800349c:	f361 03c6 	bfi	r3, r1, #3, #4
 80034a0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80034a4:	e7c3      	b.n	800342e <cbvprintf+0x1f6>
		if (*++sp == 'l') {
 80034a6:	7859      	ldrb	r1, [r3, #1]
 80034a8:	296c      	cmp	r1, #108	; 0x6c
 80034aa:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 80034ae:	d101      	bne.n	80034b4 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
 80034b0:	2204      	movs	r2, #4
 80034b2:	e7b7      	b.n	8003424 <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
 80034b4:	460b      	mov	r3, r1
 80034b6:	2103      	movs	r1, #3
 80034b8:	e7f0      	b.n	800349c <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
 80034ba:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80034be:	2105      	movs	r1, #5
 80034c0:	e7ec      	b.n	800349c <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
 80034c2:	460b      	mov	r3, r1
 80034c4:	2107      	movs	r1, #7
 80034c6:	e7e9      	b.n	800349c <cbvprintf+0x264>
		conv->unsupported = true;
 80034c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80034cc:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80034d0:	f023 0302 	bic.w	r3, r3, #2
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 80034e0:	e7a5      	b.n	800342e <cbvprintf+0x1f6>
	switch (conv->specifier) {
 80034e2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d86f      	bhi.n	80035ca <cbvprintf+0x392>
 80034ea:	a101      	add	r1, pc, #4	; (adr r1, 80034f0 <cbvprintf+0x2b8>)
 80034ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034f0:	080035a3 	.word	0x080035a3
 80034f4:	080035cb 	.word	0x080035cb
 80034f8:	080035cb 	.word	0x080035cb
 80034fc:	080035cb 	.word	0x080035cb
 8003500:	080035cb 	.word	0x080035cb
 8003504:	080035cb 	.word	0x080035cb
 8003508:	080035cb 	.word	0x080035cb
 800350c:	080035cb 	.word	0x080035cb
 8003510:	080035cb 	.word	0x080035cb
 8003514:	08003453 	.word	0x08003453
 8003518:	080035cb 	.word	0x080035cb
 800351c:	080035a3 	.word	0x080035a3
 8003520:	08003575 	.word	0x08003575
 8003524:	08003453 	.word	0x08003453
 8003528:	08003453 	.word	0x08003453
 800352c:	08003453 	.word	0x08003453
 8003530:	080035cb 	.word	0x080035cb
 8003534:	08003575 	.word	0x08003575
 8003538:	080035cb 	.word	0x080035cb
 800353c:	080035cb 	.word	0x080035cb
 8003540:	080035cb 	.word	0x080035cb
 8003544:	080035cb 	.word	0x080035cb
 8003548:	080035d9 	.word	0x080035d9
 800354c:	080035a3 	.word	0x080035a3
 8003550:	080035fd 	.word	0x080035fd
 8003554:	080035cb 	.word	0x080035cb
 8003558:	080035cb 	.word	0x080035cb
 800355c:	080035fd 	.word	0x080035fd
 8003560:	080035cb 	.word	0x080035cb
 8003564:	080035a3 	.word	0x080035a3
 8003568:	080035cb 	.word	0x080035cb
 800356c:	080035cb 	.word	0x080035cb
 8003570:	080035a3 	.word	0x080035a3
		conv->specifier_cat = SPECIFIER_SINT;
 8003574:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8003578:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 800357a:	f361 0302 	bfi	r3, r1, #0, #3
 800357e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003582:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8003586:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800358a:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 800358c:	bf02      	ittt	eq
 800358e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 8003592:	f041 0101 	orreq.w	r1, r1, #1
 8003596:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 800359a:	2a63      	cmp	r2, #99	; 0x63
 800359c:	d005      	beq.n	80035aa <cbvprintf+0x372>
	bool unsupported = false;
 800359e:	2300      	movs	r3, #0
 80035a0:	e006      	b.n	80035b0 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
 80035a2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80035a6:	2102      	movs	r1, #2
 80035a8:	e7e7      	b.n	800357a <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80035aa:	3b00      	subs	r3, #0
 80035ac:	bf18      	it	ne
 80035ae:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 80035b0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80035b4:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80035b8:	430b      	orrs	r3, r1
 80035ba:	f363 0241 	bfi	r2, r3, #1, #1
 80035be:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 80035c2:	e6b7      	b.n	8003334 <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
 80035c4:	f013 0f38 	tst.w	r3, #56	; 0x38
 80035c8:	d0e9      	beq.n	800359e <cbvprintf+0x366>
			conv->invalid = true;
 80035ca:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 80035d6:	e7e2      	b.n	800359e <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
 80035d8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80035dc:	2203      	movs	r2, #3
 80035de:	f362 0302 	bfi	r3, r2, #0, #3
 80035e2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 80035e6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80035ea:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80035ee:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 80035f2:	f1dc 0300 	rsbs	r3, ip, #0
 80035f6:	eb43 030c 	adc.w	r3, r3, ip
 80035fa:	e7d9      	b.n	80035b0 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 80035fc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8003600:	2203      	movs	r2, #3
 8003602:	f362 0302 	bfi	r3, r2, #0, #3
 8003606:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 800360a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800360e:	f013 0f78 	tst.w	r3, #120	; 0x78
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	e7ca      	b.n	80035b0 <cbvprintf+0x378>
			unsupported = true;
 800361a:	2301      	movs	r3, #1
 800361c:	e7c8      	b.n	80035b0 <cbvprintf+0x378>
		} else if (conv->width_present) {
 800361e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 8003622:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8003624:	bfb4      	ite	lt
 8003626:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 800362a:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
 800362e:	e693      	b.n	8003358 <cbvprintf+0x120>
		} else if (conv->prec_present) {
 8003630:	0799      	lsls	r1, r3, #30
 8003632:	f57f aea0 	bpl.w	8003376 <cbvprintf+0x13e>
			precision = conv->prec_value;
 8003636:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 800363a:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 800363e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8003640:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8003644:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8003648:	f003 0207 	and.w	r2, r3, #7
 800364c:	2a04      	cmp	r2, #4
 800364e:	d109      	bne.n	8003664 <cbvprintf+0x42c>
		    && !conv->prec_present) {
 8003650:	078a      	lsls	r2, r1, #30
 8003652:	d407      	bmi.n	8003664 <cbvprintf+0x42c>
			if (conv->specifier_a) {
 8003654:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 8003658:	2a00      	cmp	r2, #0
 800365a:	bfb4      	ite	lt
 800365c:	f04f 080d 	movlt.w	r8, #13
 8003660:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 8003664:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8003668:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 800366a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 800366e:	d137      	bne.n	80036e0 <cbvprintf+0x4a8>
			switch (length_mod) {
 8003670:	1ecb      	subs	r3, r1, #3
 8003672:	2b04      	cmp	r3, #4
 8003674:	d821      	bhi.n	80036ba <cbvprintf+0x482>
 8003676:	e8df f003 	tbb	[pc, r3]
 800367a:	0903      	.short	0x0903
 800367c:	2009      	.short	0x2009
 800367e:	20          	.byte	0x20
 800367f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 8003680:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 8003684:	17da      	asrs	r2, r3, #31
 8003686:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 800368a:	e006      	b.n	800369a <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
 800368c:	3407      	adds	r4, #7
 800368e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 8003692:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8003696:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 800369a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 800369e:	07bb      	lsls	r3, r7, #30
 80036a0:	d056      	beq.n	8003750 <cbvprintf+0x518>
			OUTS(sp, fp);
 80036a2:	9b02      	ldr	r3, [sp, #8]
 80036a4:	462a      	mov	r2, r5
 80036a6:	4651      	mov	r1, sl
 80036a8:	4648      	mov	r0, r9
 80036aa:	f00e fce6 	bl	801207a <outs>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	f2c0 8394 	blt.w	8003ddc <cbvprintf+0xba4>
 80036b4:	4406      	add	r6, r0
			while (pad_len-- > 0) {
 80036b6:	9d02      	ldr	r5, [sp, #8]
 80036b8:	e5c6      	b.n	8003248 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80036ba:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 80036be:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80036c0:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80036c4:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 80036c8:	d105      	bne.n	80036d6 <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
 80036ca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 80036ce:	930c      	str	r3, [sp, #48]	; 0x30
 80036d0:	2300      	movs	r3, #0
 80036d2:	930d      	str	r3, [sp, #52]	; 0x34
 80036d4:	e7e1      	b.n	800369a <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
 80036d6:	2902      	cmp	r1, #2
 80036d8:	d1df      	bne.n	800369a <cbvprintf+0x462>
				value->sint = (short)value->sint;
 80036da:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80036de:	e7d1      	b.n	8003684 <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d123      	bne.n	800372c <cbvprintf+0x4f4>
			switch (length_mod) {
 80036e4:	1ecb      	subs	r3, r1, #3
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d813      	bhi.n	8003712 <cbvprintf+0x4da>
 80036ea:	e8df f003 	tbb	[pc, r3]
 80036ee:	0a03      	.short	0x0a03
 80036f0:	120a      	.short	0x120a
 80036f2:	12          	.byte	0x12
 80036f3:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 80036f4:	6822      	ldr	r2, [r4, #0]
 80036f6:	920c      	str	r2, [sp, #48]	; 0x30
 80036f8:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 80036fa:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 80036fc:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 80036fe:	4604      	mov	r4, r0
 8003700:	e7cb      	b.n	800369a <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
 8003702:	1de0      	adds	r0, r4, #7
 8003704:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8003708:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800370c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
 8003710:	e7f5      	b.n	80036fe <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
 8003712:	f854 3b04 	ldr.w	r3, [r4], #4
 8003716:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8003718:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 8003720:	d0d3      	beq.n	80036ca <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
 8003722:	2902      	cmp	r1, #2
 8003724:	d1b9      	bne.n	800369a <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
 8003726:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800372a:	e7d0      	b.n	80036ce <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
 800372c:	2b04      	cmp	r3, #4
 800372e:	d109      	bne.n	8003744 <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
 8003730:	1de3      	adds	r3, r4, #7
 8003732:	f023 0307 	bic.w	r3, r3, #7
 8003736:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003742:	e7aa      	b.n	800369a <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8003744:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8003746:	bf04      	itt	eq
 8003748:	f854 3b04 	ldreq.w	r3, [r4], #4
 800374c:	930c      	streq	r3, [sp, #48]	; 0x30
 800374e:	e7a4      	b.n	800369a <cbvprintf+0x462>
		switch (conv->specifier) {
 8003750:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8003754:	2a78      	cmp	r2, #120	; 0x78
 8003756:	d8ae      	bhi.n	80036b6 <cbvprintf+0x47e>
 8003758:	2a57      	cmp	r2, #87	; 0x57
 800375a:	f200 808c 	bhi.w	8003876 <cbvprintf+0x63e>
 800375e:	2a25      	cmp	r2, #37	; 0x25
 8003760:	f000 80d4 	beq.w	800390c <cbvprintf+0x6d4>
 8003764:	2a24      	cmp	r2, #36	; 0x24
 8003766:	d9a6      	bls.n	80036b6 <cbvprintf+0x47e>
 8003768:	2a41      	cmp	r2, #65	; 0x41
 800376a:	d003      	beq.n	8003774 <cbvprintf+0x53c>
 800376c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8003770:	2b02      	cmp	r3, #2
 8003772:	d8a0      	bhi.n	80036b6 <cbvprintf+0x47e>
	} u = {
 8003774:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 8003778:	2b00      	cmp	r3, #0
 800377a:	f2c0 81b7 	blt.w	8003aec <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
 800377e:	0738      	lsls	r0, r7, #28
 8003780:	f100 81b6 	bmi.w	8003af0 <cbvprintf+0x8b8>
		*sign = ' ';
 8003784:	f017 0710 	ands.w	r7, r7, #16
 8003788:	bf18      	it	ne
 800378a:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 800378c:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8003790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003794:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 8003798:	2d00      	cmp	r5, #0
 800379a:	f040 81ab 	bne.w	8003af4 <cbvprintf+0x8bc>
 800379e:	ea51 0003 	orrs.w	r0, r1, r3
 80037a2:	bf14      	ite	ne
 80037a4:	2001      	movne	r0, #1
 80037a6:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 80037a8:	02db      	lsls	r3, r3, #11
 80037aa:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80037ae:	02c9      	lsls	r1, r1, #11
		c = 'f';
 80037b0:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
 80037b2:	ea45 0e01 	orr.w	lr, r5, r1
 80037b6:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
 80037ba:	bf08      	it	eq
 80037bc:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
 80037be:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 80037c2:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 80037c6:	f000 8203 	beq.w	8003bd0 <cbvprintf+0x998>
		if (is_subnormal) {
 80037ca:	2800      	cmp	r0, #0
 80037cc:	f040 81cb 	bne.w	8003b66 <cbvprintf+0x92e>
		fract |= BIT_63;
 80037d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80037d4:	f04f 0c00 	mov.w	ip, #0
 80037d8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 80037dc:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
 80037e0:	9109      	str	r1, [sp, #36]	; 0x24
 80037e2:	4663      	mov	r3, ip
		fract *= 5U;
 80037e4:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
 80037e8:	f115 0f02 	cmn.w	r5, #2
 80037ec:	f2c0 81c2 	blt.w	8003b74 <cbvprintf+0x93c>
 80037f0:	f1bc 0f00 	cmp.w	ip, #0
 80037f4:	d001      	beq.n	80037fa <cbvprintf+0x5c2>
 80037f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 80037fa:	2d00      	cmp	r5, #0
		fract += 2;
 80037fc:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
 8003800:	f300 81cd 	bgt.w	8003b9e <cbvprintf+0x966>
	fract >>= (4 - expo);
 8003804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003806:	9908      	ldr	r1, [sp, #32]
 8003808:	f1c5 0c04 	rsb	ip, r5, #4
 800380c:	351c      	adds	r5, #28
 800380e:	fa00 f505 	lsl.w	r5, r0, r5
 8003812:	f1ac 0e20 	sub.w	lr, ip, #32
 8003816:	fa21 f10c 	lsr.w	r1, r1, ip
 800381a:	fa20 fe0e 	lsr.w	lr, r0, lr
 800381e:	4329      	orrs	r1, r5
 8003820:	ea41 010e 	orr.w	r1, r1, lr
 8003824:	fa20 f00c 	lsr.w	r0, r0, ip
 8003828:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 800382c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8003830:	2947      	cmp	r1, #71	; 0x47
 8003832:	f040 81d4 	bne.w	8003bde <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
 8003836:	1cdd      	adds	r5, r3, #3
 8003838:	db02      	blt.n	8003840 <cbvprintf+0x608>
 800383a:	4598      	cmp	r8, r3
 800383c:	f280 81cb 	bge.w	8003bd6 <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
 8003840:	3a02      	subs	r2, #2
			if (precision > 0) {
 8003842:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 8003846:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 8003848:	dd01      	ble.n	800384e <cbvprintf+0x616>
				precision--;
 800384a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 800384e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8003852:	0688      	lsls	r0, r1, #26
 8003854:	f100 81c3 	bmi.w	8003bde <cbvprintf+0x9a6>
 8003858:	f1b8 0f00 	cmp.w	r8, #0
 800385c:	bfd4      	ite	le
 800385e:	2100      	movle	r1, #0
 8003860:	2101      	movgt	r1, #1
	if (c == 'f') {
 8003862:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 8003864:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 8003866:	f040 81bc 	bne.w	8003be2 <cbvprintf+0x9aa>
		if (decimals < 0) {
 800386a:	eb13 0508 	adds.w	r5, r3, r8
 800386e:	f140 81ba 	bpl.w	8003be6 <cbvprintf+0x9ae>
			decimals = 0;
 8003872:	2500      	movs	r5, #0
 8003874:	e1ba      	b.n	8003bec <cbvprintf+0x9b4>
		switch (conv->specifier) {
 8003876:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800387a:	2b20      	cmp	r3, #32
 800387c:	f63f af1b 	bhi.w	80036b6 <cbvprintf+0x47e>
 8003880:	a001      	add	r0, pc, #4	; (adr r0, 8003888 <cbvprintf+0x650>)
 8003882:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003a8f 	.word	0x08003a8f
 800388c:	080036b7 	.word	0x080036b7
 8003890:	080036b7 	.word	0x080036b7
 8003894:	080036b7 	.word	0x080036b7
 8003898:	080036b7 	.word	0x080036b7
 800389c:	080036b7 	.word	0x080036b7
 80038a0:	080036b7 	.word	0x080036b7
 80038a4:	080036b7 	.word	0x080036b7
 80038a8:	080036b7 	.word	0x080036b7
 80038ac:	08003775 	.word	0x08003775
 80038b0:	080036b7 	.word	0x080036b7
 80038b4:	08003939 	.word	0x08003939
 80038b8:	08003a2f 	.word	0x08003a2f
 80038bc:	08003775 	.word	0x08003775
 80038c0:	08003775 	.word	0x08003775
 80038c4:	08003775 	.word	0x08003775
 80038c8:	080036b7 	.word	0x080036b7
 80038cc:	08003a2f 	.word	0x08003a2f
 80038d0:	080036b7 	.word	0x080036b7
 80038d4:	080036b7 	.word	0x080036b7
 80038d8:	080036b7 	.word	0x080036b7
 80038dc:	080036b7 	.word	0x080036b7
 80038e0:	08003ac5 	.word	0x08003ac5
 80038e4:	08003a8f 	.word	0x08003a8f
 80038e8:	08003a93 	.word	0x08003a93
 80038ec:	080036b7 	.word	0x080036b7
 80038f0:	080036b7 	.word	0x080036b7
 80038f4:	08003913 	.word	0x08003913
 80038f8:	080036b7 	.word	0x080036b7
 80038fc:	08003a8f 	.word	0x08003a8f
 8003900:	080036b7 	.word	0x080036b7
 8003904:	080036b7 	.word	0x080036b7
 8003908:	08003a8f 	.word	0x08003a8f
			OUTC('%');
 800390c:	4651      	mov	r1, sl
 800390e:	4610      	mov	r0, r2
 8003910:	e4a4      	b.n	800325c <cbvprintf+0x24>
			if (precision >= 0) {
 8003912:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8003916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 8003918:	db09      	blt.n	800392e <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
 800391a:	4641      	mov	r1, r8
 800391c:	4610      	mov	r0, r2
 800391e:	9203      	str	r2, [sp, #12]
 8003920:	f014 f80d 	bl	801793e <strnlen>
				len = strlen(bps);
 8003924:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 8003926:	2700      	movs	r7, #0
			bpe = bps + len;
 8003928:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 800392a:	b962      	cbnz	r2, 8003946 <cbvprintf+0x70e>
 800392c:	e6c3      	b.n	80036b6 <cbvprintf+0x47e>
				len = strlen(bps);
 800392e:	4610      	mov	r0, r2
 8003930:	9203      	str	r2, [sp, #12]
 8003932:	f7fd fd48 	bl	80013c6 <strlen>
 8003936:	e7f5      	b.n	8003924 <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8003938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800393a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
 800393e:	2700      	movs	r7, #0
			bpe = buf + 1;
 8003940:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
 8003944:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 8003946:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 8003948:	b107      	cbz	r7, 800394c <cbvprintf+0x714>
			nj_len += 1U;
 800394a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 800394c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 8003950:	06c1      	lsls	r1, r0, #27
 8003952:	f140 8237 	bpl.w	8003dc4 <cbvprintf+0xb8c>
			nj_len += 2U;
 8003956:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 8003958:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 800395a:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 800395c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 800395e:	bf44      	itt	mi
 8003960:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 8003962:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 8003964:	f1bb 0f00 	cmp.w	fp, #0
 8003968:	dd23      	ble.n	80039b2 <cbvprintf+0x77a>
			width -= (int)nj_len;
 800396a:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 800396e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003972:	0759      	lsls	r1, r3, #29
 8003974:	f3c3 0880 	ubfx	r8, r3, #2, #1
 8003978:	d41b      	bmi.n	80039b2 <cbvprintf+0x77a>
				if (conv->flag_zero) {
 800397a:	0658      	lsls	r0, r3, #25
 800397c:	f140 8236 	bpl.w	8003dec <cbvprintf+0xbb4>
					if (sign != 0) {
 8003980:	2f00      	cmp	r7, #0
 8003982:	f000 8236 	beq.w	8003df2 <cbvprintf+0xbba>
						OUTC(sign);
 8003986:	4651      	mov	r1, sl
 8003988:	4638      	mov	r0, r7
 800398a:	9203      	str	r2, [sp, #12]
 800398c:	47c8      	blx	r9
 800398e:	2800      	cmp	r0, #0
 8003990:	f2c0 8224 	blt.w	8003ddc <cbvprintf+0xba4>
 8003994:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
 8003996:	4647      	mov	r7, r8
						OUTC(sign);
 8003998:	3601      	adds	r6, #1
					pad = '0';
 800399a:	f04f 0830 	mov.w	r8, #48	; 0x30
 800399e:	445e      	add	r6, fp
 80039a0:	465b      	mov	r3, fp
				while (width-- > 0) {
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	eba6 000b 	sub.w	r0, r6, fp
 80039a8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80039ac:	f300 820e 	bgt.w	8003dcc <cbvprintf+0xb94>
 80039b0:	4606      	mov	r6, r0
		if (sign != 0) {
 80039b2:	b147      	cbz	r7, 80039c6 <cbvprintf+0x78e>
			OUTC(sign);
 80039b4:	4651      	mov	r1, sl
 80039b6:	4638      	mov	r0, r7
 80039b8:	9203      	str	r2, [sp, #12]
 80039ba:	47c8      	blx	r9
 80039bc:	2800      	cmp	r0, #0
 80039be:	f2c0 820d 	blt.w	8003ddc <cbvprintf+0xba4>
 80039c2:	9a03      	ldr	r2, [sp, #12]
 80039c4:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 80039c6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80039ca:	0659      	lsls	r1, r3, #25
 80039cc:	f140 8265 	bpl.w	8003e9a <cbvprintf+0xc62>
			if (conv->specifier_a) {
 80039d0:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	eba6 0602 	sub.w	r6, r6, r2
 80039da:	f280 8219 	bge.w	8003e10 <cbvprintf+0xbd8>
 80039de:	4617      	mov	r7, r2
 80039e0:	46b8      	mov	r8, r7
 80039e2:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 80039e4:	f817 0b01 	ldrb.w	r0, [r7], #1
 80039e8:	2870      	cmp	r0, #112	; 0x70
 80039ea:	f040 8205 	bne.w	8003df8 <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
 80039ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80039f0:	461e      	mov	r6, r3
 80039f2:	441f      	add	r7, r3
 80039f4:	1bbb      	subs	r3, r7, r6
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f300 8248 	bgt.w	8003e8c <cbvprintf+0xc54>
			OUTS(cp, bpe);
 80039fc:	462b      	mov	r3, r5
 80039fe:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 8003a00:	4651      	mov	r1, sl
 8003a02:	4648      	mov	r0, r9
 8003a04:	f00e fb39 	bl	801207a <outs>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	f2c0 81e7 	blt.w	8003ddc <cbvprintf+0xba4>
 8003a0e:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 8003a10:	4606      	mov	r6, r0
 8003a12:	4483      	add	fp, r0
		while (width > 0) {
 8003a14:	ebab 0306 	sub.w	r3, fp, r6
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f77f ae4c 	ble.w	80036b6 <cbvprintf+0x47e>
			OUTC(' ');
 8003a1e:	4651      	mov	r1, sl
 8003a20:	2020      	movs	r0, #32
 8003a22:	47c8      	blx	r9
 8003a24:	2800      	cmp	r0, #0
 8003a26:	f2c0 81d9 	blt.w	8003ddc <cbvprintf+0xba4>
 8003a2a:	3601      	adds	r6, #1
			--width;
 8003a2c:	e7f2      	b.n	8003a14 <cbvprintf+0x7dc>
			if (conv->flag_plus) {
 8003a2e:	073d      	lsls	r5, r7, #28
 8003a30:	d42b      	bmi.n	8003a8a <cbvprintf+0x852>
				sign = ' ';
 8003a32:	f017 0710 	ands.w	r7, r7, #16
 8003a36:	bf18      	it	ne
 8003a38:	2720      	movne	r7, #32
			sint = value->sint;
 8003a3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	da05      	bge.n	8003a4e <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
 8003a42:	4252      	negs	r2, r2
 8003a44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003a48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 8003a4c:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8003a4e:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	aa0e      	add	r2, sp, #56	; 0x38
 8003a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a5a:	ab13      	add	r3, sp, #76	; 0x4c
 8003a5c:	f7ff fba0 	bl	80031a0 <encode_uint>
 8003a60:	4602      	mov	r2, r0
			if (precision >= 0) {
 8003a62:	f1b8 0f00 	cmp.w	r8, #0
 8003a66:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 8003a6a:	f6ff af5e 	blt.w	800392a <cbvprintf+0x6f2>
				conv->flag_zero = false;
 8003a6e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8003a72:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 8003a74:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 8003a78:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8003a7a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8003a7e:	f67f af54 	bls.w	800392a <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
 8003a82:	eba8 0303 	sub.w	r3, r8, r3
 8003a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a88:	e74f      	b.n	800392a <cbvprintf+0x6f2>
				sign = '+';
 8003a8a:	272b      	movs	r7, #43	; 0x2b
 8003a8c:	e7d5      	b.n	8003a3a <cbvprintf+0x802>
		switch (conv->specifier) {
 8003a8e:	2700      	movs	r7, #0
 8003a90:	e7dd      	b.n	8003a4e <cbvprintf+0x816>
			if (value->ptr != NULL) {
 8003a92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003a94:	2800      	cmp	r0, #0
 8003a96:	f000 8191 	beq.w	8003dbc <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003a9a:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	aa0e      	add	r2, sp, #56	; 0x38
 8003aa2:	ab13      	add	r3, sp, #76	; 0x4c
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f7ff fb7b 	bl	80031a0 <encode_uint>
				conv->altform_0c = true;
 8003aaa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8003aae:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003ab2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8003ab6:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003aba:	4602      	mov	r2, r0
				conv->altform_0c = true;
 8003abc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8003ac0:	2700      	movs	r7, #0
				goto prec_int_pad0;
 8003ac2:	e7ce      	b.n	8003a62 <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
 8003ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 8003ac6:	2907      	cmp	r1, #7
 8003ac8:	f63f adf5 	bhi.w	80036b6 <cbvprintf+0x47e>
 8003acc:	e8df f001 	tbb	[pc, r1]
 8003ad0:	0c06040c 	.word	0x0c06040c
 8003ad4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8003ad8:	701e      	strb	r6, [r3, #0]
		break;
 8003ada:	e5ec      	b.n	80036b6 <cbvprintf+0x47e>
		*(short *)dp = (short)count;
 8003adc:	801e      	strh	r6, [r3, #0]
		break;
 8003ade:	e5ea      	b.n	80036b6 <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
 8003ae0:	17f2      	asrs	r2, r6, #31
 8003ae2:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 8003ae6:	e5e6      	b.n	80036b6 <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8003ae8:	601e      	str	r6, [r3, #0]
		break;
 8003aea:	e5e4      	b.n	80036b6 <cbvprintf+0x47e>
		*sign = '-';
 8003aec:	272d      	movs	r7, #45	; 0x2d
 8003aee:	e64d      	b.n	800378c <cbvprintf+0x554>
		*sign = '+';
 8003af0:	272b      	movs	r7, #43	; 0x2b
 8003af2:	e64b      	b.n	800378c <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8003af4:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8003af8:	4285      	cmp	r5, r0
 8003afa:	d131      	bne.n	8003b60 <cbvprintf+0x928>
			if (isupper((int)c)) {
 8003afc:	3201      	adds	r2, #1
 8003afe:	48b9      	ldr	r0, [pc, #740]	; (8003de4 <cbvprintf+0xbac>)
 8003b00:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
 8003b02:	430b      	orrs	r3, r1
 8003b04:	5c12      	ldrb	r2, [r2, r0]
 8003b06:	f002 0203 	and.w	r2, r2, #3
 8003b0a:	d11b      	bne.n	8003b44 <cbvprintf+0x90c>
			if (isupper((int)c)) {
 8003b0c:	2a01      	cmp	r2, #1
 8003b0e:	d111      	bne.n	8003b34 <cbvprintf+0x8fc>
				*buf++ = 'I';
 8003b10:	2349      	movs	r3, #73	; 0x49
 8003b12:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 8003b16:	234e      	movs	r3, #78	; 0x4e
 8003b18:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 8003b1c:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 8003b1e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
 8003b22:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003b26:	f36f 1386 	bfc	r3, #6, #1
 8003b2a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
 8003b2e:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
 8003b32:	e707      	b.n	8003944 <cbvprintf+0x70c>
				*buf++ = 'i';
 8003b34:	2369      	movs	r3, #105	; 0x69
 8003b36:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8003b3a:	236e      	movs	r3, #110	; 0x6e
 8003b3c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 8003b40:	2366      	movs	r3, #102	; 0x66
 8003b42:	e7ec      	b.n	8003b1e <cbvprintf+0x8e6>
			if (isupper((int)c)) {
 8003b44:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 8003b46:	bf07      	ittee	eq
 8003b48:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 8003b4a:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 8003b4c:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 8003b4e:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 8003b50:	bf0c      	ite	eq
 8003b52:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8003b56:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 8003b5a:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 8003b5e:	e7de      	b.n	8003b1e <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8003b60:	2000      	movs	r0, #0
 8003b62:	e621      	b.n	80037a8 <cbvprintf+0x570>
				expo--;
 8003b64:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8003b66:	1849      	adds	r1, r1, r1
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	dafa      	bge.n	8003b64 <cbvprintf+0x92c>
 8003b6e:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8003b72:	e62d      	b.n	80037d0 <cbvprintf+0x598>
			fract >>= 1;
 8003b74:	0840      	lsrs	r0, r0, #1
 8003b76:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8003b7a:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8003b7c:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 8003b80:	46ac      	mov	ip, r5
			expo++;
 8003b82:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8003b86:	d2f5      	bcs.n	8003b74 <cbvprintf+0x93c>
		fract *= 5U;
 8003b88:	fb0e f501 	mul.w	r5, lr, r1
 8003b8c:	fba0 010e 	umull	r0, r1, r0, lr
 8003b90:	4429      	add	r1, r5
		decexp--;
 8003b92:	3b01      	subs	r3, #1
		expo++;
 8003b94:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 8003b98:	f04f 0c01 	mov.w	ip, #1
 8003b9c:	e624      	b.n	80037e8 <cbvprintf+0x5b0>
		fract += 2;
 8003b9e:	3102      	adds	r1, #2
 8003ba0:	f140 0000 	adc.w	r0, r0, #0
 8003ba4:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
 8003ba8:	a808      	add	r0, sp, #32
 8003baa:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8003bae:	f00e fa35 	bl	801201c <_ldiv5>
		decexp++;
 8003bb2:	9b04      	ldr	r3, [sp, #16]
 8003bb4:	9a03      	ldr	r2, [sp, #12]
 8003bb6:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
 8003bba:	3d01      	subs	r5, #1
		decexp++;
 8003bbc:	3301      	adds	r3, #1
			fract <<= 1;
 8003bbe:	1849      	adds	r1, r1, r1
 8003bc0:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 8003bc2:	2800      	cmp	r0, #0
			expo--;
 8003bc4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 8003bc8:	daf9      	bge.n	8003bbe <cbvprintf+0x986>
 8003bca:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8003bce:	e614      	b.n	80037fa <cbvprintf+0x5c2>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	e616      	b.n	8003804 <cbvprintf+0x5cc>
			precision -= decexp;
 8003bd6:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 8003bda:	2266      	movs	r2, #102	; 0x66
 8003bdc:	e637      	b.n	800384e <cbvprintf+0x616>
	bool prune_zero = false;
 8003bde:	2100      	movs	r1, #0
 8003be0:	e63f      	b.n	8003862 <cbvprintf+0x62a>
		decimals = precision + 1;
 8003be2:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
 8003be6:	2d10      	cmp	r5, #16
 8003be8:	bfa8      	it	ge
 8003bea:	2510      	movge	r5, #16
 8003bec:	2110      	movs	r1, #16
 8003bee:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003bf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
 8003bfa:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
 8003bfe:	b9a5      	cbnz	r5, 8003c2a <cbvprintf+0x9f2>
	fract += round;
 8003c00:	9d08      	ldr	r5, [sp, #32]
 8003c02:	1949      	adds	r1, r1, r5
 8003c04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003c06:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
 8003c0a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8003c0e:	d21b      	bcs.n	8003c48 <cbvprintf+0xa10>
	fract += round;
 8003c10:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
 8003c14:	2a66      	cmp	r2, #102	; 0x66
 8003c16:	f040 8099 	bne.w	8003d4c <cbvprintf+0xb14>
		if (decexp > 0) {
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dc23      	bgt.n	8003c66 <cbvprintf+0xa2e>
			*buf++ = '0';
 8003c1e:	2130      	movs	r1, #48	; 0x30
 8003c20:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 8003c24:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8003c28:	e02f      	b.n	8003c8a <cbvprintf+0xa52>
	*v >>= 1;
 8003c2a:	0849      	lsrs	r1, r1, #1
 8003c2c:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8003c30:	0840      	lsrs	r0, r0, #1
 8003c32:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
 8003c36:	a80a      	add	r0, sp, #40	; 0x28
 8003c38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c3c:	3d01      	subs	r5, #1
 8003c3e:	f00e f9ed 	bl	801201c <_ldiv5>
 8003c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 8003c46:	e7d8      	b.n	8003bfa <cbvprintf+0x9c2>
	*v >>= 1;
 8003c48:	0849      	lsrs	r1, r1, #1
 8003c4a:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
 8003c4e:	a808      	add	r0, sp, #32
	*v >>= 1;
 8003c50:	086d      	lsrs	r5, r5, #1
 8003c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c56:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
 8003c5a:	f00e f9df 	bl	801201c <_ldiv5>
		decexp++;
 8003c5e:	9b05      	ldr	r3, [sp, #20]
 8003c60:	9a04      	ldr	r2, [sp, #16]
 8003c62:	3301      	adds	r3, #1
 8003c64:	e7d6      	b.n	8003c14 <cbvprintf+0x9dc>
	char *buf = bps;
 8003c66:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 8003c68:	9907      	ldr	r1, [sp, #28]
 8003c6a:	2900      	cmp	r1, #0
 8003c6c:	dd0b      	ble.n	8003c86 <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
 8003c6e:	a907      	add	r1, sp, #28
 8003c70:	a808      	add	r0, sp, #32
 8003c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c76:	f00e f9e9 	bl	801204c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8003c7a:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
 8003c7c:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 8003c80:	3b01      	subs	r3, #1
 8003c82:	9a04      	ldr	r2, [sp, #16]
 8003c84:	d1f0      	bne.n	8003c68 <cbvprintf+0xa30>
			conv->pad0_value = decexp;
 8003c86:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 8003c88:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 8003c8a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8003c8e:	0689      	lsls	r1, r1, #26
 8003c90:	d402      	bmi.n	8003c98 <cbvprintf+0xa60>
 8003c92:	f1b8 0f00 	cmp.w	r8, #0
 8003c96:	dd1d      	ble.n	8003cd4 <cbvprintf+0xa9c>
			*buf++ = '.';
 8003c98:	212e      	movs	r1, #46	; 0x2e
 8003c9a:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 8003c9e:	b19b      	cbz	r3, 8003cc8 <cbvprintf+0xa90>
 8003ca0:	f1b8 0f00 	cmp.w	r8, #0
 8003ca4:	dd16      	ble.n	8003cd4 <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
 8003ca6:	4259      	negs	r1, r3
 8003ca8:	4541      	cmp	r1, r8
 8003caa:	bfa8      	it	ge
 8003cac:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 8003cae:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 8003cb2:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 8003cb4:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 8003cb6:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
 8003cba:	bfd4      	ite	le
 8003cbc:	2100      	movle	r1, #0
 8003cbe:	2101      	movgt	r1, #1
 8003cc0:	f361 1045 	bfi	r0, r1, #5, #1
 8003cc4:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 8003cc8:	f1b8 0f00 	cmp.w	r8, #0
 8003ccc:	dd02      	ble.n	8003cd4 <cbvprintf+0xa9c>
 8003cce:	9907      	ldr	r1, [sp, #28]
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	dc56      	bgt.n	8003d82 <cbvprintf+0xb4a>
	if (prune_zero) {
 8003cd4:	9903      	ldr	r1, [sp, #12]
 8003cd6:	2900      	cmp	r1, #0
 8003cd8:	d163      	bne.n	8003da2 <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
 8003cda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 8003cde:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8003ce2:	2945      	cmp	r1, #69	; 0x45
 8003ce4:	d121      	bne.n	8003d2a <cbvprintf+0xaf2>
		if (decexp < 0) {
 8003ce6:	2b00      	cmp	r3, #0
		*buf++ = c;
 8003ce8:	4629      	mov	r1, r5
			decexp = -decexp;
 8003cea:	bfb8      	it	lt
 8003cec:	425b      	neglt	r3, r3
		*buf++ = c;
 8003cee:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 8003cf2:	bfb4      	ite	lt
 8003cf4:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 8003cf6:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 8003cf8:	2b63      	cmp	r3, #99	; 0x63
 8003cfa:	706a      	strb	r2, [r5, #1]
 8003cfc:	dd09      	ble.n	8003d12 <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
 8003cfe:	2064      	movs	r0, #100	; 0x64
 8003d00:	fbb3 f2f0 	udiv	r2, r3, r0
 8003d04:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8003d08:	1ce9      	adds	r1, r5, #3
 8003d0a:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
 8003d0e:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8003d12:	200a      	movs	r0, #10
 8003d14:	460d      	mov	r5, r1
 8003d16:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 8003d1a:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8003d1e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8003d22:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8003d24:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 8003d28:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 8003d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	dc43      	bgt.n	8003db8 <cbvprintf+0xb80>
 8003d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bfd4      	ite	le
 8003d36:	2300      	movle	r3, #0
 8003d38:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8003d3a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8003d3e:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8003d42:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 8003d44:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 8003d48:	702b      	strb	r3, [r5, #0]
	return bps;
 8003d4a:	e5fb      	b.n	8003944 <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
 8003d4c:	a907      	add	r1, sp, #28
 8003d4e:	a808      	add	r0, sp, #32
 8003d50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d54:	f00e f97a 	bl	801204c <_get_digit>
		if (*buf++ != '0') {
 8003d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
 8003d5c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
 8003d60:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 8003d64:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8003d66:	bf18      	it	ne
 8003d68:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 8003d6c:	0688      	lsls	r0, r1, #26
 8003d6e:	d402      	bmi.n	8003d76 <cbvprintf+0xb3e>
 8003d70:	f1b8 0f00 	cmp.w	r8, #0
 8003d74:	dd12      	ble.n	8003d9c <cbvprintf+0xb64>
			*buf++ = '.';
 8003d76:	212e      	movs	r1, #46	; 0x2e
 8003d78:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 8003d7c:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 8003d80:	e7a2      	b.n	8003cc8 <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
 8003d82:	a907      	add	r1, sp, #28
 8003d84:	a808      	add	r0, sp, #32
 8003d86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d8a:	f00e f95f 	bl	801204c <_get_digit>
		precision--;
 8003d8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 8003d96:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 8003d9a:	e795      	b.n	8003cc8 <cbvprintf+0xa90>
		if (*buf++ != '0') {
 8003d9c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8003da0:	e798      	b.n	8003cd4 <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
 8003da2:	2100      	movs	r1, #0
 8003da4:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 8003da6:	4628      	mov	r0, r5
 8003da8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003dac:	2930      	cmp	r1, #48	; 0x30
 8003dae:	d0fa      	beq.n	8003da6 <cbvprintf+0xb6e>
		if (*buf != '.') {
 8003db0:	292e      	cmp	r1, #46	; 0x2e
 8003db2:	bf18      	it	ne
 8003db4:	4605      	movne	r5, r0
 8003db6:	e792      	b.n	8003cde <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
 8003db8:	2301      	movs	r3, #1
 8003dba:	e7be      	b.n	8003d3a <cbvprintf+0xb02>
			bpe = bps + 5;
 8003dbc:	4d0a      	ldr	r5, [pc, #40]	; (8003de8 <cbvprintf+0xbb0>)
		char sign = 0;
 8003dbe:	4607      	mov	r7, r0
			bps = "(nil)";
 8003dc0:	1f6a      	subs	r2, r5, #5
 8003dc2:	e5c0      	b.n	8003946 <cbvprintf+0x70e>
		} else if (conv->altform_0) {
 8003dc4:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 8003dc6:	bf48      	it	mi
 8003dc8:	3301      	addmi	r3, #1
 8003dca:	e5c5      	b.n	8003958 <cbvprintf+0x720>
					OUTC(pad);
 8003dcc:	4651      	mov	r1, sl
 8003dce:	4640      	mov	r0, r8
 8003dd0:	9203      	str	r2, [sp, #12]
 8003dd2:	47c8      	blx	r9
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	9a03      	ldr	r2, [sp, #12]
 8003dd8:	f6bf ade2 	bge.w	80039a0 <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
 8003ddc:	b01b      	add	sp, #108	; 0x6c
 8003dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de2:	bf00      	nop
 8003de4:	0801aa64 	.word	0x0801aa64
 8003de8:	080193a6 	.word	0x080193a6
				char pad = ' ';
 8003dec:	f04f 0820 	mov.w	r8, #32
 8003df0:	e5d5      	b.n	800399e <cbvprintf+0x766>
					pad = '0';
 8003df2:	f04f 0830 	mov.w	r8, #48	; 0x30
 8003df6:	e5d2      	b.n	800399e <cbvprintf+0x766>
					OUTC(*cp++);
 8003df8:	4651      	mov	r1, sl
 8003dfa:	47c8      	blx	r9
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	f6bf adef 	bge.w	80039e0 <cbvprintf+0x7a8>
 8003e02:	e7eb      	b.n	8003ddc <cbvprintf+0xba4>
					OUTC(*cp++);
 8003e04:	4651      	mov	r1, sl
 8003e06:	9203      	str	r2, [sp, #12]
 8003e08:	47c8      	blx	r9
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	9a03      	ldr	r2, [sp, #12]
 8003e0e:	dbe5      	blt.n	8003ddc <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
 8003e10:	7810      	ldrb	r0, [r2, #0]
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <cbvprintf+0xcb8>)
 8003e14:	5cc3      	ldrb	r3, [r0, r3]
 8003e16:	075b      	lsls	r3, r3, #29
 8003e18:	4617      	mov	r7, r2
 8003e1a:	eb06 0802 	add.w	r8, r6, r2
 8003e1e:	f102 0201 	add.w	r2, r2, #1
 8003e22:	d4ef      	bmi.n	8003e04 <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
 8003e24:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 8003e28:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 8003e2a:	0699      	lsls	r1, r3, #26
 8003e2c:	d407      	bmi.n	8003e3e <cbvprintf+0xc06>
 8003e2e:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 8003e30:	2e00      	cmp	r6, #0
 8003e32:	eba8 0206 	sub.w	r2, r8, r6
 8003e36:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8003e3a:	dc0f      	bgt.n	8003e5c <cbvprintf+0xc24>
 8003e3c:	4690      	mov	r8, r2
				if (*cp == '.') {
 8003e3e:	7838      	ldrb	r0, [r7, #0]
 8003e40:	282e      	cmp	r0, #46	; 0x2e
 8003e42:	d108      	bne.n	8003e56 <cbvprintf+0xc1e>
					OUTC(*cp++);
 8003e44:	4651      	mov	r1, sl
 8003e46:	47c8      	blx	r9
						OUTC('0');
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	dbc7      	blt.n	8003ddc <cbvprintf+0xba4>
					while (pad_len-- > 0) {
 8003e4c:	2e00      	cmp	r6, #0
						OUTC('0');
 8003e4e:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 8003e52:	dc09      	bgt.n	8003e68 <cbvprintf+0xc30>
					OUTC(*cp++);
 8003e54:	3701      	adds	r7, #1
 8003e56:	eba8 0607 	sub.w	r6, r8, r7
 8003e5a:	e00e      	b.n	8003e7a <cbvprintf+0xc42>
						OUTC('0');
 8003e5c:	4651      	mov	r1, sl
 8003e5e:	2030      	movs	r0, #48	; 0x30
 8003e60:	47c8      	blx	r9
 8003e62:	2800      	cmp	r0, #0
 8003e64:	dae4      	bge.n	8003e30 <cbvprintf+0xbf8>
 8003e66:	e7b9      	b.n	8003ddc <cbvprintf+0xba4>
						OUTC('0');
 8003e68:	4651      	mov	r1, sl
 8003e6a:	2030      	movs	r0, #48	; 0x30
 8003e6c:	47c8      	blx	r9
 8003e6e:	3e01      	subs	r6, #1
 8003e70:	e7ea      	b.n	8003e48 <cbvprintf+0xc10>
					OUTC(*cp++);
 8003e72:	4651      	mov	r1, sl
 8003e74:	47c8      	blx	r9
 8003e76:	2800      	cmp	r0, #0
 8003e78:	dbb0      	blt.n	8003ddc <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <cbvprintf+0xcb8>)
 8003e7c:	46b8      	mov	r8, r7
 8003e7e:	19f3      	adds	r3, r6, r7
 8003e80:	f817 0b01 	ldrb.w	r0, [r7], #1
 8003e84:	5c12      	ldrb	r2, [r2, r0]
 8003e86:	0752      	lsls	r2, r2, #29
 8003e88:	d4f3      	bmi.n	8003e72 <cbvprintf+0xc3a>
 8003e8a:	e5b0      	b.n	80039ee <cbvprintf+0x7b6>
				OUTC('0');
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	2030      	movs	r0, #48	; 0x30
 8003e90:	47c8      	blx	r9
 8003e92:	2800      	cmp	r0, #0
 8003e94:	dba2      	blt.n	8003ddc <cbvprintf+0xba4>
 8003e96:	3601      	adds	r6, #1
 8003e98:	e5ac      	b.n	80039f4 <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
 8003e9a:	06d8      	lsls	r0, r3, #27
 8003e9c:	d401      	bmi.n	8003ea2 <cbvprintf+0xc6a>
 8003e9e:	0719      	lsls	r1, r3, #28
 8003ea0:	d507      	bpl.n	8003eb2 <cbvprintf+0xc7a>
				OUTC('0');
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	2030      	movs	r0, #48	; 0x30
 8003ea6:	9203      	str	r2, [sp, #12]
 8003ea8:	47c8      	blx	r9
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	db96      	blt.n	8003ddc <cbvprintf+0xba4>
 8003eae:	9a03      	ldr	r2, [sp, #12]
 8003eb0:	3601      	adds	r6, #1
			if (conv->altform_0c) {
 8003eb2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8003eb6:	06db      	lsls	r3, r3, #27
 8003eb8:	d508      	bpl.n	8003ecc <cbvprintf+0xc94>
				OUTC(conv->specifier);
 8003eba:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	47c8      	blx	r9
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	db89      	blt.n	8003ddc <cbvprintf+0xba4>
 8003ec8:	9a03      	ldr	r2, [sp, #12]
 8003eca:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
 8003ecc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8003ece:	4437      	add	r7, r6
 8003ed0:	1bbb      	subs	r3, r7, r6
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	dc01      	bgt.n	8003eda <cbvprintf+0xca2>
			OUTS(bps, bpe);
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	e592      	b.n	8003a00 <cbvprintf+0x7c8>
				OUTC('0');
 8003eda:	4651      	mov	r1, sl
 8003edc:	2030      	movs	r0, #48	; 0x30
 8003ede:	9203      	str	r2, [sp, #12]
 8003ee0:	47c8      	blx	r9
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	f6ff af7a 	blt.w	8003ddc <cbvprintf+0xba4>
 8003ee8:	9a03      	ldr	r2, [sp, #12]
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7f0      	b.n	8003ed0 <cbvprintf+0xc98>
 8003eee:	bf00      	nop
 8003ef0:	0801aa65 	.word	0x0801aa65

08003ef4 <stm32wl_init>:
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
#if defined(CORE_CM0PLUS)
  SET_BIT(FLASH->C2ACR, FLASH_C2ACR_ICEN);
#else
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <stm32wl_init+0x34>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8003f06:	f04f 0210 	mov.w	r2, #16
 8003f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f0e:	f382 8812 	msr	BASEPRI_MAX, r2
 8003f12:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8003f1e:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <stm32wl_init+0x38>)
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <stm32wl_init+0x3c>)
 8003f22:	601a      	str	r2, [r3, #0]

	return 0;
}
 8003f24:	2000      	movs	r0, #0
 8003f26:	4770      	bx	lr
 8003f28:	58004000 	.word	0x58004000
 8003f2c:	200001d4 	.word	0x200001d4
 8003f30:	003d0900 	.word	0x003d0900

08003f34 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8003f34:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8003f36:	4910      	ldr	r1, [pc, #64]	; (8003f78 <enable_logger+0x44>)
 8003f38:	4810      	ldr	r0, [pc, #64]	; (8003f7c <enable_logger+0x48>)
{
 8003f3a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f013 faf8 	bl	8017532 <k_timer_init>
 8003f42:	4d0f      	ldr	r5, [pc, #60]	; (8003f80 <enable_logger+0x4c>)
 8003f44:	490f      	ldr	r1, [pc, #60]	; (8003f84 <enable_logger+0x50>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003f4e:	2400      	movs	r4, #0
 8003f50:	230e      	movs	r3, #14
 8003f52:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003f56:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <enable_logger+0x54>)
 8003f5c:	9400      	str	r4, [sp, #0]
 8003f5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003f62:	4628      	mov	r0, r5
 8003f64:	f00b fecc 	bl	800fd00 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 8003f68:	4908      	ldr	r1, [pc, #32]	; (8003f8c <enable_logger+0x58>)
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f013 f92f 	bl	80171ce <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8003f70:	4620      	mov	r0, r4
 8003f72:	b009      	add	sp, #36	; 0x24
 8003f74:	bd30      	pop	{r4, r5, pc}
 8003f76:	bf00      	nop
 8003f78:	08003f91 	.word	0x08003f91
 8003f7c:	20000960 	.word	0x20000960
 8003f80:	20000998 	.word	0x20000998
 8003f84:	200085c0 	.word	0x200085c0
 8003f88:	080041b5 	.word	0x080041b5
 8003f8c:	080193a7 	.word	0x080193a7

08003f90 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8003f90:	4801      	ldr	r0, [pc, #4]	; (8003f98 <log_process_thread_timer_expiry_fn+0x8>)
 8003f92:	f00b bfe7 	b.w	800ff64 <z_impl_k_sem_give>
 8003f96:	bf00      	nop
 8003f98:	20000398 	.word	0x20000398

08003f9c <log_format_func_t_get>:
}
 8003f9c:	4b01      	ldr	r3, [pc, #4]	; (8003fa4 <log_format_func_t_get+0x8>)
 8003f9e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003fa2:	4770      	bx	lr
 8003fa4:	08018264 	.word	0x08018264

08003fa8 <log_init>:
{
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <log_init+0x4c>)
 8003fac:	f3bf 8f5b 	dmb	ish
 8003fb0:	e853 5f00 	ldrex	r5, [r3]
 8003fb4:	1c6a      	adds	r2, r5, #1
 8003fb6:	e843 2100 	strex	r1, r2, [r3]
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d1f8      	bne.n	8003fb0 <log_init+0x8>
 8003fbe:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8003fc2:	b92d      	cbnz	r5, 8003fd0 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8003fc4:	4c0c      	ldr	r4, [pc, #48]	; (8003ff8 <log_init+0x50>)
 8003fc6:	4e0d      	ldr	r6, [pc, #52]	; (8003ffc <log_init+0x54>)
 8003fc8:	1b36      	subs	r6, r6, r4
 8003fca:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8003fcc:	42b5      	cmp	r5, r6
 8003fce:	db00      	blt.n	8003fd2 <log_init+0x2a>
}
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8003fd2:	7b23      	ldrb	r3, [r4, #12]
 8003fd4:	b153      	cbz	r3, 8003fec <log_init+0x44>
			if (backend->api->init != NULL) {
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	b10b      	cbz	r3, 8003fe0 <log_init+0x38>
				backend->api->init(backend);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4798      	blx	r3
			log_backend_enable(backend,
 8003fe0:	6863      	ldr	r3, [r4, #4]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	6819      	ldr	r1, [r3, #0]
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f000 f992 	bl	8004310 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8003fec:	3501      	adds	r5, #1
 8003fee:	3410      	adds	r4, #16
 8003ff0:	e7ec      	b.n	8003fcc <log_init+0x24>
 8003ff2:	bf00      	nop
 8003ff4:	20000f44 	.word	0x20000f44
 8003ff8:	08018128 	.word	0x08018128
 8003ffc:	08018138 	.word	0x08018138

08004000 <z_log_notify_backend_enabled>:
{
 8004000:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8004002:	4c04      	ldr	r4, [pc, #16]	; (8004014 <z_log_notify_backend_enabled+0x14>)
 8004004:	7823      	ldrb	r3, [r4, #0]
 8004006:	b913      	cbnz	r3, 800400e <z_log_notify_backend_enabled+0xe>
 8004008:	4803      	ldr	r0, [pc, #12]	; (8004018 <z_log_notify_backend_enabled+0x18>)
 800400a:	f00b ffab 	bl	800ff64 <z_impl_k_sem_give>
	backend_attached = true;
 800400e:	2301      	movs	r3, #1
 8004010:	7023      	strb	r3, [r4, #0]
}
 8004012:	bd10      	pop	{r4, pc}
 8004014:	20002446 	.word	0x20002446
 8004018:	20000398 	.word	0x20000398

0800401c <z_log_dropped>:
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <z_log_dropped+0x34>)
 800401e:	f3bf 8f5b 	dmb	ish
 8004022:	e853 2f00 	ldrex	r2, [r3]
 8004026:	3201      	adds	r2, #1
 8004028:	e843 2100 	strex	r1, r2, [r3]
 800402c:	2900      	cmp	r1, #0
 800402e:	d1f8      	bne.n	8004022 <z_log_dropped+0x6>
 8004030:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 8004034:	b158      	cbz	r0, 800404e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8004036:	f3bf 8f5b 	dmb	ish
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <z_log_dropped+0x38>)
 800403c:	e853 2f00 	ldrex	r2, [r3]
 8004040:	3a01      	subs	r2, #1
 8004042:	e843 2100 	strex	r1, r2, [r3]
 8004046:	2900      	cmp	r1, #0
 8004048:	d1f8      	bne.n	800403c <z_log_dropped+0x20>
 800404a:	f3bf 8f5b 	dmb	ish
}
 800404e:	4770      	bx	lr
 8004050:	20000f40 	.word	0x20000f40
 8004054:	20000f3c 	.word	0x20000f3c

08004058 <z_log_dropped_read_and_clear>:
}
 8004058:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <z_log_dropped_read_and_clear+0x1c>)
 800405c:	f3bf 8f5b 	dmb	ish
 8004060:	4602      	mov	r2, r0
 8004062:	e853 0f00 	ldrex	r0, [r3]
 8004066:	e843 2100 	strex	r1, r2, [r3]
 800406a:	2900      	cmp	r1, #0
 800406c:	d1f9      	bne.n	8004062 <z_log_dropped_read_and_clear+0xa>
 800406e:	f3bf 8f5b 	dmb	ish
 8004072:	4770      	bx	lr
 8004074:	20000f40 	.word	0x20000f40

08004078 <dropped_notify>:
{
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 800407a:	f7ff ffed 	bl	8004058 <z_log_dropped_read_and_clear>
 800407e:	4c0a      	ldr	r4, [pc, #40]	; (80040a8 <dropped_notify+0x30>)
 8004080:	4d0a      	ldr	r5, [pc, #40]	; (80040ac <dropped_notify+0x34>)
 8004082:	1b2d      	subs	r5, r5, r4
 8004084:	4607      	mov	r7, r0
 8004086:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8004088:	2600      	movs	r6, #0
 800408a:	42ae      	cmp	r6, r5
 800408c:	db00      	blt.n	8004090 <dropped_notify+0x18>
}
 800408e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8004090:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8004092:	795b      	ldrb	r3, [r3, #5]
 8004094:	b12b      	cbz	r3, 80040a2 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	b113      	cbz	r3, 80040a2 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 800409c:	4639      	mov	r1, r7
 800409e:	4620      	mov	r0, r4
 80040a0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80040a2:	3601      	adds	r6, #1
 80040a4:	3410      	adds	r4, #16
 80040a6:	e7f0      	b.n	800408a <dropped_notify+0x12>
 80040a8:	08018128 	.word	0x08018128
 80040ac:	08018138 	.word	0x08018138

080040b0 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 80040b0:	4901      	ldr	r1, [pc, #4]	; (80040b8 <z_log_msg2_init+0x8>)
 80040b2:	4802      	ldr	r0, [pc, #8]	; (80040bc <z_log_msg2_init+0xc>)
 80040b4:	f00e b8ac 	b.w	8012210 <mpsc_pbuf_init>
 80040b8:	08018270 	.word	0x08018270
 80040bc:	20000f48 	.word	0x20000f48

080040c0 <log_core_init>:
	panic_mode = false;
 80040c0:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <log_core_init+0x24>)
{
 80040c2:	b508      	push	{r3, lr}
	panic_mode = false;
 80040c4:	2300      	movs	r3, #0
 80040c6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 80040c8:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <log_core_init+0x28>)
 80040ca:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <log_core_init+0x2c>)
 80040ce:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <log_core_init+0x30>)
 80040d0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 80040d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040d6:	f000 faff 	bl	80046d8 <log_output_timestamp_freq_set>
}
 80040da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
 80040de:	f7ff bfe7 	b.w	80040b0 <z_log_msg2_init>
 80040e2:	bf00      	nop
 80040e4:	20002447 	.word	0x20002447
 80040e8:	20000f40 	.word	0x20000f40
 80040ec:	20000028 	.word	0x20000028
 80040f0:	080124bd 	.word	0x080124bd

080040f4 <z_log_msg2_alloc>:
{
 80040f4:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 80040f6:	2200      	movs	r2, #0
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <z_log_msg2_alloc+0xc>)
 80040fa:	2300      	movs	r3, #0
 80040fc:	f00e b8a9 	b.w	8012252 <mpsc_pbuf_alloc>
 8004100:	20000f48 	.word	0x20000f48

08004104 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 8004104:	4801      	ldr	r0, [pc, #4]	; (800410c <z_log_msg2_claim+0x8>)
 8004106:	f00e b93a 	b.w	801237e <mpsc_pbuf_claim>
 800410a:	bf00      	nop
 800410c:	20000f48 	.word	0x20000f48

08004110 <z_log_msg2_free>:
{
 8004110:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8004112:	4801      	ldr	r0, [pc, #4]	; (8004118 <z_log_msg2_free+0x8>)
 8004114:	f00e b97f 	b.w	8012416 <mpsc_pbuf_free>
 8004118:	20000f48 	.word	0x20000f48

0800411c <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <z_log_msg2_pending+0x8>)
 800411e:	f00e b9ae 	b.w	801247e <mpsc_pbuf_is_pending>
 8004122:	bf00      	nop
 8004124:	20000f48 	.word	0x20000f48

08004128 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <z_impl_log_process+0x78>)
 800412a:	781b      	ldrb	r3, [r3, #0]
{
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
 8004132:	b903      	cbnz	r3, 8004136 <z_impl_log_process+0xe>
 8004134:	b388      	cbz	r0, 800419a <z_impl_log_process+0x72>
	msg = get_msg();
 8004136:	f00e f9ce 	bl	80124d6 <get_msg>
	if (msg.msg) {
 800413a:	4606      	mov	r6, r0
 800413c:	b118      	cbz	r0, 8004146 <z_impl_log_process+0x1e>
		if (!bypass) {
 800413e:	b16d      	cbz	r5, 800415c <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
 8004140:	4630      	mov	r0, r6
 8004142:	f7ff ffe5 	bl	8004110 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
 8004146:	b92d      	cbnz	r5, 8004154 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	dd01      	ble.n	8004154 <z_impl_log_process+0x2c>
		dropped_notify();
 8004150:	f7ff ff92 	bl	8004078 <dropped_notify>
}
 8004154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
 8004158:	f7ff bfe0 	b.w	800411c <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <z_impl_log_process+0x80>)
 800415e:	f3bf 8f5b 	dmb	ish
 8004162:	e853 2f00 	ldrex	r2, [r3]
 8004166:	3a01      	subs	r2, #1
 8004168:	e843 2100 	strex	r1, r2, [r3]
 800416c:	2900      	cmp	r1, #0
 800416e:	d1f8      	bne.n	8004162 <z_impl_log_process+0x3a>
 8004170:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
 8004174:	4c0d      	ldr	r4, [pc, #52]	; (80041ac <z_impl_log_process+0x84>)
 8004176:	4f0e      	ldr	r7, [pc, #56]	; (80041b0 <z_impl_log_process+0x88>)
 8004178:	1b3f      	subs	r7, r7, r4
 800417a:	113f      	asrs	r7, r7, #4
 800417c:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
 800417e:	45b8      	cmp	r8, r7
 8004180:	dade      	bge.n	8004140 <z_impl_log_process+0x18>
	return backend->cb->active;
 8004182:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
 8004184:	795b      	ldrb	r3, [r3, #5]
 8004186:	b123      	cbz	r3, 8004192 <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	4631      	mov	r1, r6
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4620      	mov	r0, r4
 8004190:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 8004192:	f108 0801 	add.w	r8, r8, #1
 8004196:	3410      	adds	r4, #16
 8004198:	e7f1      	b.n	800417e <z_impl_log_process+0x56>
}
 800419a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800419e:	bf00      	nop
 80041a0:	20002446 	.word	0x20002446
 80041a4:	20000f40 	.word	0x20000f40
 80041a8:	20000f3c 	.word	0x20000f3c
 80041ac:	08018128 	.word	0x08018128
 80041b0:	08018138 	.word	0x08018138

080041b4 <log_process_thread_func>:
{
 80041b4:	b510      	push	{r4, lr}
	log_init();
 80041b6:	f7ff fef7 	bl	8003fa8 <log_init>
	return z_impl_z_current_get();
 80041ba:	f00c fb2b 	bl	8010814 <z_impl_z_current_get>
	proc_tid = process_tid;
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <log_process_thread_func+0x3c>)
 80041c0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 80041c2:	b130      	cbz	r0, 80041d2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <log_process_thread_func+0x40>)
	    process_tid &&
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	dd02      	ble.n	80041d2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 80041cc:	480a      	ldr	r0, [pc, #40]	; (80041f8 <log_process_thread_func+0x44>)
 80041ce:	f00b fec9 	bl	800ff64 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 80041d2:	4c09      	ldr	r4, [pc, #36]	; (80041f8 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7ff ffa7 	bl	8004128 <z_impl_log_process>
		if (log_process(false) == false) {
 80041da:	2800      	cmp	r0, #0
 80041dc:	d1fa      	bne.n	80041d4 <log_process_thread_func+0x20>
 80041de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041e6:	4620      	mov	r0, r4
 80041e8:	f00b fee2 	bl	800ffb0 <z_impl_k_sem_take>
 80041ec:	e7f2      	b.n	80041d4 <log_process_thread_func+0x20>
 80041ee:	bf00      	nop
 80041f0:	20000f88 	.word	0x20000f88
 80041f4:	20000f3c 	.word	0x20000f3c
 80041f8:	20000398 	.word	0x20000398

080041fc <z_log_msg_post_finalize>:
{
 80041fc:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <z_log_msg_post_finalize+0x78>)
 8004200:	f3bf 8f5b 	dmb	ish
 8004204:	e853 2f00 	ldrex	r2, [r3]
 8004208:	1c51      	adds	r1, r2, #1
 800420a:	e843 1000 	strex	r0, r1, [r3]
 800420e:	2800      	cmp	r0, #0
 8004210:	d1f8      	bne.n	8004204 <z_log_msg_post_finalize+0x8>
 8004212:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <z_log_msg_post_finalize+0x7c>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	b183      	cbz	r3, 800423e <z_log_msg_post_finalize+0x42>
	__asm__ volatile(
 800421c:	f04f 0310 	mov.w	r3, #16
 8004220:	f3ef 8411 	mrs	r4, BASEPRI
 8004224:	f383 8812 	msr	BASEPRI_MAX, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	2000      	movs	r0, #0
 800422e:	f7ff ff7b 	bl	8004128 <z_impl_log_process>
	__asm__ volatile(
 8004232:	f384 8811 	msr	BASEPRI, r4
 8004236:	f3bf 8f6f 	isb	sy
}
 800423a:	b002      	add	sp, #8
 800423c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
 800423e:	4b0f      	ldr	r3, [pc, #60]	; (800427c <z_log_msg_post_finalize+0x80>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f9      	beq.n	800423a <z_log_msg_post_finalize+0x3e>
 8004246:	b952      	cbnz	r2, 800425e <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
 8004248:	2200      	movs	r2, #0
 800424a:	2300      	movs	r3, #0
 800424c:	e9cd 2300 	strd	r2, r3, [sp]
 8004250:	480b      	ldr	r0, [pc, #44]	; (8004280 <z_log_msg_post_finalize+0x84>)
 8004252:	f242 7210 	movw	r2, #10000	; 0x2710
 8004256:	2300      	movs	r3, #0
 8004258:	f00c fd06 	bl	8010c68 <z_impl_k_timer_start>
 800425c:	e7ed      	b.n	800423a <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800425e:	2a0a      	cmp	r2, #10
 8004260:	d1eb      	bne.n	800423a <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
 8004262:	4807      	ldr	r0, [pc, #28]	; (8004280 <z_log_msg_post_finalize+0x84>)
 8004264:	f013 f971 	bl	801754a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8004268:	4806      	ldr	r0, [pc, #24]	; (8004284 <z_log_msg_post_finalize+0x88>)
}
 800426a:	b002      	add	sp, #8
 800426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004270:	f00b be78 	b.w	800ff64 <z_impl_k_sem_give>
 8004274:	20000f3c 	.word	0x20000f3c
 8004278:	20002447 	.word	0x20002447
 800427c:	20000f88 	.word	0x20000f88
 8004280:	20000960 	.word	0x20000960
 8004284:	20000398 	.word	0x20000398

08004288 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <z_log_msg2_commit+0x1c>)
{
 800428a:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
 800428c:	681b      	ldr	r3, [r3, #0]
{
 800428e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8004290:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8004292:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 8004294:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8004296:	4804      	ldr	r0, [pc, #16]	; (80042a8 <z_log_msg2_commit+0x20>)
 8004298:	f00e f851 	bl	801233e <mpsc_pbuf_commit>
}
 800429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 80042a0:	f7ff bfac 	b.w	80041fc <z_log_msg_post_finalize>
 80042a4:	20000028 	.word	0x20000028
 80042a8:	20000f48 	.word	0x20000f48

080042ac <z_impl_log_panic>:
{
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 80042ae:	4f0e      	ldr	r7, [pc, #56]	; (80042e8 <z_impl_log_panic+0x3c>)
 80042b0:	783d      	ldrb	r5, [r7, #0]
 80042b2:	b975      	cbnz	r5, 80042d2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 80042b4:	4c0d      	ldr	r4, [pc, #52]	; (80042ec <z_impl_log_panic+0x40>)
 80042b6:	4e0e      	ldr	r6, [pc, #56]	; (80042f0 <z_impl_log_panic+0x44>)
	log_init();
 80042b8:	f7ff fe76 	bl	8003fa8 <log_init>
 80042bc:	1b36      	subs	r6, r6, r4
 80042be:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80042c0:	42b5      	cmp	r5, r6
 80042c2:	db07      	blt.n	80042d4 <z_impl_log_panic+0x28>
 80042c4:	2000      	movs	r0, #0
 80042c6:	f7ff ff2f 	bl	8004128 <z_impl_log_process>
		while (log_process(false) == true) {
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d1fa      	bne.n	80042c4 <z_impl_log_panic+0x18>
	panic_mode = true;
 80042ce:	2301      	movs	r3, #1
 80042d0:	703b      	strb	r3, [r7, #0]
}
 80042d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 80042d4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80042d6:	795b      	ldrb	r3, [r3, #5]
 80042d8:	b11b      	cbz	r3, 80042e2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	4620      	mov	r0, r4
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80042e2:	3501      	adds	r5, #1
 80042e4:	3410      	adds	r4, #16
 80042e6:	e7eb      	b.n	80042c0 <z_impl_log_panic+0x14>
 80042e8:	20002447 	.word	0x20002447
 80042ec:	08018128 	.word	0x08018128
 80042f0:	08018138 	.word	0x08018138

080042f4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <log_source_name_get+0x14>)
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <log_source_name_get+0x18>)
 80042f8:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80042fa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 80042fe:	bf34      	ite	cc
 8004300:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8004304:	2000      	movcs	r0, #0
}
 8004306:	4770      	bx	lr
 8004308:	08018058 	.word	0x08018058
 800430c:	08018128 	.word	0x08018128

08004310 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8004310:	4a05      	ldr	r2, [pc, #20]	; (8004328 <log_backend_enable+0x18>)
	backend->cb->id = id;
 8004312:	6843      	ldr	r3, [r0, #4]
 8004314:	1a80      	subs	r0, r0, r2
 8004316:	1100      	asrs	r0, r0, #4
 8004318:	3001      	adds	r0, #1
	backend->cb->active = true;
 800431a:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
 800431c:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
 800431e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8004320:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 8004322:	f7ff be6d 	b.w	8004000 <z_log_notify_backend_enabled>
 8004326:	bf00      	nop
 8004328:	08018128 	.word	0x08018128

0800432c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 800432c:	b40e      	push	{r1, r2, r3}
 800432e:	b503      	push	{r0, r1, lr}
 8004330:	ab03      	add	r3, sp, #12
 8004332:	4601      	mov	r1, r0
 8004334:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8004338:	4804      	ldr	r0, [pc, #16]	; (800434c <print_formatted+0x20>)
	va_start(args, fmt);
 800433a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 800433c:	f7fe ff7c 	bl	8003238 <cbvprintf>
	va_end(args);

	return length;
}
 8004340:	b002      	add	sp, #8
 8004342:	f85d eb04 	ldr.w	lr, [sp], #4
 8004346:	b003      	add	sp, #12
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	08012517 	.word	0x08012517

08004350 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	461d      	mov	r5, r3
 8004356:	9b08      	ldr	r3, [sp, #32]
 8004358:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800435a:	06da      	lsls	r2, r3, #27
{
 800435c:	4604      	mov	r4, r0
 800435e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8004360:	d405      	bmi.n	800436e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8004362:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 8004364:	bf4c      	ite	mi
 8004366:	492b      	ldrmi	r1, [pc, #172]	; (8004414 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 8004368:	492b      	ldrpl	r1, [pc, #172]	; (8004418 <hexdump_line_print+0xc8>)
 800436a:	f7ff ffdf 	bl	800432c <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 800436e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800441c <hexdump_line_print+0xcc>
{
 8004372:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 8004376:	45a8      	cmp	r8, r5
 8004378:	db2d      	blt.n	80043d6 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 800437a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004420 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
 800437e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004424 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
 8004382:	f8df a098 	ldr.w	sl, [pc, #152]	; 800441c <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004386:	2500      	movs	r5, #0
		if (i < length) {
 8004388:	42bd      	cmp	r5, r7
 800438a:	d232      	bcs.n	80043f2 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 800438c:	5d72      	ldrb	r2, [r6, r5]
 800438e:	4649      	mov	r1, r9
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff ffcb 	bl	800432c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004396:	3501      	adds	r5, #1
 8004398:	2d10      	cmp	r5, #16
 800439a:	d123      	bne.n	80043e4 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
 800439c:	4922      	ldr	r1, [pc, #136]	; (8004428 <hexdump_line_print+0xd8>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 800439e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800441c <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
 80043a2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800442c <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
 80043a6:	f8df a088 	ldr.w	sl, [pc, #136]	; 8004430 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff ffbe 	bl	800432c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80043b0:	2500      	movs	r5, #0
		if (i < length) {
 80043b2:	42af      	cmp	r7, r5
 80043b4:	d929      	bls.n	800440a <hexdump_line_print+0xba>
			char c = (char)data[i];
 80043b6:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 80043b8:	f812 3009 	ldrb.w	r3, [r2, r9]
 80043bc:	f013 0f97 	tst.w	r3, #151	; 0x97
 80043c0:	bf08      	it	eq
 80043c2:	222e      	moveq	r2, #46	; 0x2e
 80043c4:	4651      	mov	r1, sl
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7ff ffb0 	bl	800432c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80043cc:	3501      	adds	r5, #1
 80043ce:	2d10      	cmp	r5, #16
 80043d0:	d114      	bne.n	80043fc <hexdump_line_print+0xac>
		}
	}
}
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 80043d6:	4649      	mov	r1, r9
 80043d8:	4620      	mov	r0, r4
 80043da:	f7ff ffa7 	bl	800432c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80043de:	f108 0801 	add.w	r8, r8, #1
 80043e2:	e7c8      	b.n	8004376 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 80043e4:	076a      	lsls	r2, r5, #29
 80043e6:	d1cf      	bne.n	8004388 <hexdump_line_print+0x38>
			print_formatted(output, " ");
 80043e8:	4651      	mov	r1, sl
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7ff ff9e 	bl	800432c <print_formatted>
 80043f0:	e7ca      	b.n	8004388 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 80043f2:	4641      	mov	r1, r8
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7ff ff99 	bl	800432c <print_formatted>
 80043fa:	e7cc      	b.n	8004396 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 80043fc:	076b      	lsls	r3, r5, #29
 80043fe:	d1d8      	bne.n	80043b2 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8004400:	4641      	mov	r1, r8
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff ff92 	bl	800432c <print_formatted>
 8004408:	e7d3      	b.n	80043b2 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 800440a:	4641      	mov	r1, r8
 800440c:	4620      	mov	r0, r4
 800440e:	f7ff ff8d 	bl	800432c <print_formatted>
 8004412:	e7db      	b.n	80043cc <hexdump_line_print+0x7c>
 8004414:	080193b4 	.word	0x080193b4
 8004418:	080193b3 	.word	0x080193b3
 800441c:	0801a8b6 	.word	0x0801a8b6
 8004420:	0801a8b4 	.word	0x0801a8b4
 8004424:	080193b6 	.word	0x080193b6
 8004428:	080193bc 	.word	0x080193bc
 800442c:	0801aa65 	.word	0x0801aa65
 8004430:	080193be 	.word	0x080193be

08004434 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8004434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004438:	b087      	sub	sp, #28
 800443a:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800443c:	f001 0301 	and.w	r3, r1, #1
{
 8004440:	9205      	str	r2, [sp, #20]
 8004442:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 8004446:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800444a:	9304      	str	r3, [sp, #16]
{
 800444c:	4607      	mov	r7, r0
 800444e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8004450:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8004454:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
 8004458:	f00e f841 	bl	80124de <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 800445c:	4602      	mov	r2, r0
 800445e:	2800      	cmp	r0, #0
 8004460:	d044      	beq.n	80044ec <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
 8004462:	493a      	ldr	r1, [pc, #232]	; (800454c <prefix_print+0x118>)
 8004464:	4638      	mov	r0, r7
 8004466:	f7ff ff61 	bl	800432c <print_formatted>
 800446a:	4605      	mov	r5, r0
	}

	if (stamp) {
 800446c:	f1bb 0f00 	cmp.w	fp, #0
 8004470:	d008      	beq.n	8004484 <prefix_print+0x50>
	if (!format) {
 8004472:	f018 0f44 	tst.w	r8, #68	; 0x44
 8004476:	d13b      	bne.n	80044f0 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
 8004478:	4935      	ldr	r1, [pc, #212]	; (8004550 <prefix_print+0x11c>)
 800447a:	4622      	mov	r2, r4
 800447c:	4638      	mov	r0, r7
 800447e:	f7ff ff55 	bl	800432c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 8004482:	4405      	add	r5, r0
	if (color) {
 8004484:	9b04      	ldr	r3, [sp, #16]
 8004486:	b153      	cbz	r3, 800449e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
 8004488:	4b32      	ldr	r3, [pc, #200]	; (8004554 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
 800448a:	4933      	ldr	r1, [pc, #204]	; (8004558 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
 800448c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
 8004490:	4b32      	ldr	r3, [pc, #200]	; (800455c <prefix_print+0x128>)
 8004492:	4638      	mov	r0, r7
 8004494:	2a00      	cmp	r2, #0
 8004496:	bf08      	it	eq
 8004498:	461a      	moveq	r2, r3
 800449a:	f7ff ff47 	bl	800432c <print_formatted>
	if (level_on) {
 800449e:	b13e      	cbz	r6, 80044b0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80044a0:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <prefix_print+0x12c>)
 80044a2:	4930      	ldr	r1, [pc, #192]	; (8004564 <prefix_print+0x130>)
 80044a4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80044a8:	4638      	mov	r0, r7
 80044aa:	f7ff ff3f 	bl	800432c <print_formatted>
 80044ae:	4606      	mov	r6, r0
	if (source_id >= 0) {
 80044b0:	f1ba 0f00 	cmp.w	sl, #0
 80044b4:	db16      	blt.n	80044e4 <prefix_print+0xb0>
		total += print_formatted(output,
 80044b6:	9b05      	ldr	r3, [sp, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d045      	beq.n	8004548 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80044bc:	2301      	movs	r3, #1
 80044be:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
 80044c2:	4b29      	ldr	r3, [pc, #164]	; (8004568 <prefix_print+0x134>)
 80044c4:	4c29      	ldr	r4, [pc, #164]	; (800456c <prefix_print+0x138>)
 80044c6:	f019 0f10 	tst.w	r9, #16
 80044ca:	bf18      	it	ne
 80044cc:	461c      	movne	r4, r3
 80044ce:	4651      	mov	r1, sl
 80044d0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80044d4:	f7ff ff0e 	bl	80042f4 <log_source_name_get>
 80044d8:	4621      	mov	r1, r4
 80044da:	4602      	mov	r2, r0
 80044dc:	4638      	mov	r0, r7
 80044de:	f7ff ff25 	bl	800432c <print_formatted>
 80044e2:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 80044e4:	1970      	adds	r0, r6, r5
 80044e6:	b007      	add	sp, #28
 80044e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 80044ec:	4605      	mov	r5, r0
 80044ee:	e7bd      	b.n	800446c <prefix_print+0x38>
	} else if (freq != 0U) {
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <prefix_print+0x13c>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d0c4      	beq.n	8004482 <prefix_print+0x4e>
		timestamp /= timestamp_div;
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
 80044fa:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
 8004504:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004508:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
 800450c:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
 8004510:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
 8004514:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8004518:	fbb3 f2f1 	udiv	r2, r3, r1
 800451c:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8004520:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
 8004524:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8004528:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
 800452c:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8004530:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
 8004534:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8004536:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
 800453a:	490f      	ldr	r1, [pc, #60]	; (8004578 <prefix_print+0x144>)
 800453c:	e9cd e001 	strd	lr, r0, [sp, #4]
 8004540:	4638      	mov	r0, r7
 8004542:	f7ff fef3 	bl	800432c <print_formatted>
 8004546:	e79c      	b.n	8004482 <prefix_print+0x4e>
		total += print_formatted(output,
 8004548:	4c08      	ldr	r4, [pc, #32]	; (800456c <prefix_print+0x138>)
 800454a:	e7c0      	b.n	80044ce <prefix_print+0x9a>
 800454c:	080193cf 	.word	0x080193cf
 8004550:	080193d3 	.word	0x080193d3
 8004554:	08018284 	.word	0x08018284
 8004558:	08019947 	.word	0x08019947
 800455c:	080193c1 	.word	0x080193c1
 8004560:	08018298 	.word	0x08018298
 8004564:	080193f8 	.word	0x080193f8
 8004568:	080193cb 	.word	0x080193cb
 800456c:	080193c6 	.word	0x080193c6
 8004570:	20000f8c 	.word	0x20000f8c
 8004574:	20000f90 	.word	0x20000f90
 8004578:	080193dc 	.word	0x080193dc

0800457c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	460c      	mov	r4, r1
	if (color) {
 8004580:	07e1      	lsls	r1, r4, #31
{
 8004582:	4605      	mov	r5, r0
	if (color) {
 8004584:	d503      	bpl.n	800458e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 8004586:	4a08      	ldr	r2, [pc, #32]	; (80045a8 <postfix_print+0x2c>)
 8004588:	4908      	ldr	r1, [pc, #32]	; (80045ac <postfix_print+0x30>)
 800458a:	f7ff fecf 	bl	800432c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800458e:	06e2      	lsls	r2, r4, #27
 8004590:	d408      	bmi.n	80045a4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8004592:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 8004594:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 8004596:	bf4c      	ite	mi
 8004598:	4905      	ldrmi	r1, [pc, #20]	; (80045b0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 800459a:	4906      	ldrpl	r1, [pc, #24]	; (80045b4 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 800459c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 80045a0:	f7ff bec4 	b.w	800432c <print_formatted>
}
 80045a4:	bd38      	pop	{r3, r4, r5, pc}
 80045a6:	bf00      	nop
 80045a8:	080193c1 	.word	0x080193c1
 80045ac:	08019947 	.word	0x08019947
 80045b0:	080193b4 	.word	0x080193b4
 80045b4:	080193b3 	.word	0x080193b3

080045b8 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 80045b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
 80045bc:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
 80045be:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
 80045c2:	4606      	mov	r6, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	4690      	mov	r8, r2
 80045c8:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
 80045cc:	d04d      	beq.n	800466a <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
 80045ce:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
 80045d0:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
 80045d2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d044      	beq.n	8004664 <log_output_msg2_process+0xac>
 80045da:	4925      	ldr	r1, [pc, #148]	; (8004670 <log_output_msg2_process+0xb8>)
 80045dc:	1a5b      	subs	r3, r3, r1
 80045de:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 80045e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80045e6:	f8cd 9000 	str.w	r9, [sp]
 80045ea:	68a3      	ldr	r3, [r4, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	4641      	mov	r1, r8
 80045f0:	4630      	mov	r0, r6
 80045f2:	f7ff ff1f 	bl	8004434 <prefix_print>
 80045f6:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
 80045f8:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
 80045fa:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 80045fe:	f3c3 2349 	ubfx	r3, r3, #9, #10
 8004602:	b153      	cbz	r3, 800461a <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8004604:	4f1b      	ldr	r7, [pc, #108]	; (8004674 <log_output_msg2_process+0xbc>)
 8004606:	481c      	ldr	r0, [pc, #112]	; (8004678 <log_output_msg2_process+0xc0>)
 8004608:	491c      	ldr	r1, [pc, #112]	; (800467c <log_output_msg2_process+0xc4>)
 800460a:	462b      	mov	r3, r5
 800460c:	4632      	mov	r2, r6
 800460e:	f1b9 0f00 	cmp.w	r9, #0
 8004612:	bf08      	it	eq
 8004614:	4638      	moveq	r0, r7
 8004616:	f00d fbcd 	bl	8011db4 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 800461a:	8867      	ldrh	r7, [r4, #2]
 800461c:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 8004620:	b197      	cbz	r7, 8004648 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	f3c3 2349 	ubfx	r3, r3, #9, #10
 8004628:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800462a:	2f10      	cmp	r7, #16
 800462c:	463c      	mov	r4, r7
 800462e:	bf28      	it	cs
 8004630:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 8004632:	4629      	mov	r1, r5
 8004634:	f8cd 8000 	str.w	r8, [sp]
 8004638:	4653      	mov	r3, sl
 800463a:	4622      	mov	r2, r4
 800463c:	4630      	mov	r0, r6
 800463e:	f7ff fe87 	bl	8004350 <hexdump_line_print>
	} while (len);
 8004642:	1b3f      	subs	r7, r7, r4
		data += length;
 8004644:	4425      	add	r5, r4
	} while (len);
 8004646:	d1f0      	bne.n	800462a <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 8004648:	f1b9 0f00 	cmp.w	r9, #0
 800464c:	d004      	beq.n	8004658 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
 800464e:	464a      	mov	r2, r9
 8004650:	4641      	mov	r1, r8
 8004652:	4630      	mov	r0, r6
 8004654:	f7ff ff92 	bl	800457c <postfix_print>
	}

	log_output_flush(output);
 8004658:	4630      	mov	r0, r6
}
 800465a:	b004      	add	sp, #16
 800465c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 8004660:	f00d bf4c 	b.w	80124fc <log_output_flush>
		int16_t source_id = source ?
 8004664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004668:	e7bb      	b.n	80045e2 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
 800466a:	46ca      	mov	sl, r9
 800466c:	e7c4      	b.n	80045f8 <log_output_msg2_process+0x40>
 800466e:	bf00      	nop
 8004670:	08018058 	.word	0x08018058
 8004674:	0801254d 	.word	0x0801254d
 8004678:	08012517 	.word	0x08012517
 800467c:	08003239 	.word	0x08003239

08004680 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8004680:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004682:	f242 730f 	movw	r3, #9999	; 0x270f
 8004686:	428b      	cmp	r3, r1
 8004688:	bf28      	it	cs
 800468a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 800468c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800468e:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <log_output_dropped_process+0x4c>)
{
 8004690:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004692:	2105      	movs	r1, #5
 8004694:	4668      	mov	r0, sp
 8004696:	f00d fc39 	bl	8011f0c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	490c      	ldr	r1, [pc, #48]	; (80046d0 <log_output_dropped_process+0x50>)
 800469e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80046a0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80046a2:	220b      	movs	r2, #11
 80046a4:	4628      	mov	r0, r5
 80046a6:	f00d ff1c 	bl	80124e2 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 80046aa:	6863      	ldr	r3, [r4, #4]
 80046ac:	4632      	mov	r2, r6
 80046ae:	4669      	mov	r1, sp
 80046b0:	4628      	mov	r0, r5
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f00d ff15 	bl	80124e2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 80046b8:	6863      	ldr	r3, [r4, #4]
 80046ba:	4906      	ldr	r1, [pc, #24]	; (80046d4 <log_output_dropped_process+0x54>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	221b      	movs	r2, #27
 80046c0:	4628      	mov	r0, r5
 80046c2:	f00d ff0e 	bl	80124e2 <buffer_write>
		     output->control_block->ctx);
}
 80046c6:	b002      	add	sp, #8
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	bf00      	nop
 80046cc:	08019cd6 	.word	0x08019cd6
 80046d0:	0801943a 	.word	0x0801943a
 80046d4:	0801941e 	.word	0x0801941e

080046d8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 80046d8:	4a08      	ldr	r2, [pc, #32]	; (80046fc <log_output_timestamp_freq_set+0x24>)
{
 80046da:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 80046dc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80046de:	4c08      	ldr	r4, [pc, #32]	; (8004700 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 80046e0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80046e2:	2100      	movs	r1, #0
 80046e4:	42a0      	cmp	r0, r4
 80046e6:	d804      	bhi.n	80046f2 <log_output_timestamp_freq_set+0x1a>
 80046e8:	b101      	cbz	r1, 80046ec <log_output_timestamp_freq_set+0x14>
 80046ea:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <log_output_timestamp_freq_set+0x2c>)
 80046ee:	6018      	str	r0, [r3, #0]
}
 80046f0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 80046f2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2101      	movs	r1, #1
 80046f8:	e7f4      	b.n	80046e4 <log_output_timestamp_freq_set+0xc>
 80046fa:	bf00      	nop
 80046fc:	20000f90 	.word	0x20000f90
 8004700:	000f4240 	.word	0x000f4240
 8004704:	20000f8c 	.word	0x20000f8c

08004708 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	b087      	sub	sp, #28
 800470e:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
 8004712:	469a      	mov	sl, r3
 8004714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004716:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800471a:	9303      	str	r3, [sp, #12]
 800471c:	4604      	mov	r4, r0
 800471e:	4689      	mov	r9, r1
 8004720:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
 8004722:	b3cf      	cbz	r7, 8004798 <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 8004724:	f8cd b000 	str.w	fp, [sp]
 8004728:	463b      	mov	r3, r7
 800472a:	462a      	mov	r2, r5
 800472c:	210c      	movs	r1, #12
 800472e:	2000      	movs	r0, #0
		va_copy(ap2, ap);
 8004730:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 8004734:	f7fe fa3e 	bl	8002bb4 <cbvprintf_package>
 8004738:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
 800473a:	9a03      	ldr	r2, [sp, #12]
 800473c:	f008 0307 	and.w	r3, r8, #7
 8004740:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 8004744:	f102 0013 	add.w	r0, r2, #19
	struct log_msg2_desc desc =
 8004748:	4c14      	ldr	r4, [pc, #80]	; (800479c <z_impl_z_log_msg2_runtime_vcreate+0x94>)
 800474a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800474e:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 8004752:	4430      	add	r0, r6
	struct log_msg2_desc desc =
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
 8004756:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 800475a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
 800475e:	ea48 0804 	orr.w	r8, r8, r4
 8004762:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
 8004766:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
 8004768:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
 800476c:	f7ff fcc2 	bl	80040f4 <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
 8004770:	4604      	mov	r4, r0
 8004772:	b140      	cbz	r0, 8004786 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
 8004774:	b13f      	cbz	r7, 8004786 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
 8004776:	f8cd b000 	str.w	fp, [sp]
 800477a:	463b      	mov	r3, r7
 800477c:	462a      	mov	r2, r5
 800477e:	4631      	mov	r1, r6
 8004780:	300c      	adds	r0, #12
 8004782:	f7fe fa17 	bl	8002bb4 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
 8004786:	4653      	mov	r3, sl
 8004788:	4642      	mov	r2, r8
 800478a:	4649      	mov	r1, r9
 800478c:	4620      	mov	r0, r4
	}
}
 800478e:	b007      	add	sp, #28
 8004790:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
 8004794:	f00d bee7 	b.w	8012566 <z_log_msg2_finalize>
		plen = 0;
 8004798:	463e      	mov	r6, r7
 800479a:	e7ce      	b.n	800473a <z_impl_z_log_msg2_runtime_vcreate+0x32>
 800479c:	0007fe00 	.word	0x0007fe00
 80047a0:	7ff80000 	.word	0x7ff80000

080047a4 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
 80047a6:	4f07      	ldr	r7, [pc, #28]	; (80047c4 <char_out+0x20>)
{
 80047a8:	460d      	mov	r5, r1
 80047aa:	4604      	mov	r4, r0
 80047ac:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
 80047ae:	42b4      	cmp	r4, r6
 80047b0:	d101      	bne.n	80047b6 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 80047b2:	4628      	mov	r0, r5
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 80047b6:	6838      	ldr	r0, [r7, #0]
 80047b8:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80047bc:	6883      	ldr	r3, [r0, #8]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 80047c2:	e7f4      	b.n	80047ae <char_out+0xa>
 80047c4:	20000fac 	.word	0x20000fac

080047c8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 80047c8:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <format_set+0x8>)
	return 0;
}
 80047ca:	2000      	movs	r0, #0
	log_format_current = log_type;
 80047cc:	6019      	str	r1, [r3, #0]
}
 80047ce:	4770      	bx	lr
 80047d0:	20000f9c 	.word	0x20000f9c

080047d4 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80047d4:	4b01      	ldr	r3, [pc, #4]	; (80047dc <log_backend_uart_init+0x8>)
 80047d6:	4a02      	ldr	r2, [pc, #8]	; (80047e0 <log_backend_uart_init+0xc>)
 80047d8:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 80047da:	4770      	bx	lr
 80047dc:	20000fac 	.word	0x20000fac
 80047e0:	08017d48 	.word	0x08017d48

080047e4 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 80047e6:	4803      	ldr	r0, [pc, #12]	; (80047f4 <panic+0x10>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	f00d be86 	b.w	80124fc <log_output_flush>
 80047f0:	20002448 	.word	0x20002448
 80047f4:	080182cc 	.word	0x080182cc

080047f8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <dropped+0x8>)
 80047fa:	f7ff bf41 	b.w	8004680 <log_output_dropped_process>
 80047fe:	bf00      	nop
 8004800:	080182cc 	.word	0x080182cc

08004804 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <process+0x1c>)
{
 8004806:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8004808:	6818      	ldr	r0, [r3, #0]
{
 800480a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 800480c:	f7ff fbc6 	bl	8003f9c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 8004810:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8004812:	4603      	mov	r3, r0
}
 8004814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <process+0x20>)
 800481a:	220f      	movs	r2, #15
 800481c:	4718      	bx	r3
 800481e:	bf00      	nop
 8004820:	20000f9c 	.word	0x20000f9c
 8004824:	080182cc 	.word	0x080182cc

08004828 <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
 8004828:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 800482a:	4804      	ldr	r0, [pc, #16]	; (800483c <disk_init+0x14>)
 800482c:	f012 fcea 	bl	8017204 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
 8004832:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8004834:	e9c3 3300 	strd	r3, r3, [r3]
 8004838:	bd08      	pop	{r3, pc}
 800483a:	bf00      	nop
 800483c:	20000fb8 	.word	0x20000fb8
 8004840:	20000fb0 	.word	0x20000fb0

08004844 <disk_access_get_di>:
{
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
 8004848:	f7fc fdbd 	bl	80013c6 <strlen>
 800484c:	4605      	mov	r5, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800484e:	4f12      	ldr	r7, [pc, #72]	; (8004898 <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
 8004850:	4812      	ldr	r0, [pc, #72]	; (800489c <disk_access_get_di+0x58>)
 8004852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800485a:	f00b fac9 	bl	800fdf0 <z_impl_k_mutex_lock>
 800485e:	683c      	ldr	r4, [r7, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004860:	42bc      	cmp	r4, r7
 8004862:	d10e      	bne.n	8004882 <disk_access_get_di+0x3e>
	struct disk_info *disk = NULL, *itr;
 8004864:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 8004866:	480d      	ldr	r0, [pc, #52]	; (800489c <disk_access_get_di+0x58>)
 8004868:	f00b fb3a 	bl	800fee0 <z_impl_k_mutex_unlock>
}
 800486c:	4620      	mov	r0, r4
 800486e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strlen(itr->name) != name_len) {
 8004870:	68a0      	ldr	r0, [r4, #8]
 8004872:	f7fc fda8 	bl	80013c6 <strlen>
 8004876:	42a8      	cmp	r0, r5
 8004878:	d006      	beq.n	8004888 <disk_access_get_di+0x44>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	429c      	cmp	r4, r3
 800487e:	d0f1      	beq.n	8004864 <disk_access_get_di+0x20>
 8004880:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
 8004882:	2c00      	cmp	r4, #0
 8004884:	d1f4      	bne.n	8004870 <disk_access_get_di+0x2c>
 8004886:	e7ed      	b.n	8004864 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
 8004888:	68a1      	ldr	r1, [r4, #8]
 800488a:	462a      	mov	r2, r5
 800488c:	4630      	mov	r0, r6
 800488e:	f013 f82f 	bl	80178f0 <strncmp>
 8004892:	2800      	cmp	r0, #0
 8004894:	d1f1      	bne.n	800487a <disk_access_get_di+0x36>
 8004896:	e7e6      	b.n	8004866 <disk_access_get_di+0x22>
 8004898:	20000fb0 	.word	0x20000fb0
 800489c:	20000fb8 	.word	0x20000fb8

080048a0 <disk_access_register>:
{
 80048a0:	b530      	push	{r4, r5, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	b087      	sub	sp, #28
	return z_impl_k_mutex_lock(mutex, timeout);
 80048a6:	4815      	ldr	r0, [pc, #84]	; (80048fc <disk_access_register+0x5c>)
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b0:	f00b fa9e 	bl	800fdf0 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
 80048b4:	b10d      	cbz	r5, 80048ba <disk_access_register+0x1a>
 80048b6:	68a8      	ldr	r0, [r5, #8]
 80048b8:	b990      	cbnz	r0, 80048e0 <disk_access_register+0x40>
		LOG_ERR("invalid disk interface!!");
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <disk_access_register+0x60>)
		LOG_ERR("disk interface already registered!!");
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	2302      	movs	r3, #2
 80048c0:	9303      	str	r3, [sp, #12]
 80048c2:	4810      	ldr	r0, [pc, #64]	; (8004904 <disk_access_register+0x64>)
 80048c4:	2300      	movs	r3, #0
 80048c6:	aa03      	add	r2, sp, #12
 80048c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		rc = -EINVAL;
 80048cc:	f06f 0415 	mvn.w	r4, #21
 80048d0:	f00d fe64 	bl	801259c <z_impl_z_log_msg2_static_create>
	return z_impl_k_mutex_unlock(mutex);
 80048d4:	4809      	ldr	r0, [pc, #36]	; (80048fc <disk_access_register+0x5c>)
 80048d6:	f00b fb03 	bl	800fee0 <z_impl_k_mutex_unlock>
}
 80048da:	4620      	mov	r0, r4
 80048dc:	b007      	add	sp, #28
 80048de:	bd30      	pop	{r4, r5, pc}
	if (disk_access_get_di(disk->name) != NULL) {
 80048e0:	f7ff ffb0 	bl	8004844 <disk_access_get_di>
 80048e4:	4604      	mov	r4, r0
 80048e6:	b108      	cbz	r0, 80048ec <disk_access_register+0x4c>
		LOG_ERR("disk interface already registered!!");
 80048e8:	4b07      	ldr	r3, [pc, #28]	; (8004908 <disk_access_register+0x68>)
 80048ea:	e7e7      	b.n	80048bc <disk_access_register+0x1c>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <disk_access_register+0x6c>)
 80048ee:	685a      	ldr	r2, [r3, #4]

	node->next = list;
	node->prev = tail;
 80048f0:	e9c5 3200 	strd	r3, r2, [r5]

	tail->next = node;
 80048f4:	6015      	str	r5, [r2, #0]
	list->tail = node;
 80048f6:	605d      	str	r5, [r3, #4]
	LOG_DBG("disk interface(%s) registred", disk->name);
 80048f8:	e7ec      	b.n	80048d4 <disk_access_register+0x34>
 80048fa:	bf00      	nop
 80048fc:	20000fb8 	.word	0x20000fb8
 8004900:	08019460 	.word	0x08019460
 8004904:	08018080 	.word	0x08018080
 8004908:	08019479 	.word	0x08019479
 800490c:	20000fb0 	.word	0x20000fb0

08004910 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8004910:	4901      	ldr	r1, [pc, #4]	; (8004918 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8004912:	2210      	movs	r2, #16
	str	r2, [r1]
 8004914:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8004916:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8004918:	e000ed10 	.word	0xe000ed10

0800491c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800491c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800491e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8004920:	f380 8811 	msr	BASEPRI, r0
	isb
 8004924:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8004928:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 800492c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800492e:	b662      	cpsie	i
	isb
 8004930:	f3bf 8f6f 	isb	sy

	bx	lr
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8004938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	b086      	sub	sp, #24
 800493e:	4680      	mov	r8, r0
 8004940:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 8004942:	460c      	mov	r4, r1
 8004944:	2900      	cmp	r1, #0
 8004946:	d045      	beq.n	80049d4 <z_arm_fatal_error+0x9c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004948:	46e9      	mov	r9, sp
 800494a:	b088      	sub	sp, #32
 800494c:	466d      	mov	r5, sp
 800494e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	4823      	ldr	r0, [pc, #140]	; (80049e4 <z_arm_fatal_error+0xac>)
 8004956:	462e      	mov	r6, r5
 8004958:	f04f 0a05 	mov.w	sl, #5
 800495c:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8004960:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8004964:	f846 af0c 	str.w	sl, [r6, #12]!
 8004968:	481f      	ldr	r0, [pc, #124]	; (80049e8 <z_arm_fatal_error+0xb0>)
 800496a:	4632      	mov	r2, r6
 800496c:	2300      	movs	r3, #0
 800496e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8004972:	f00d fe13 	bl	801259c <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8004976:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800497a:	6963      	ldr	r3, [r4, #20]
 800497c:	481b      	ldr	r0, [pc, #108]	; (80049ec <z_arm_fatal_error+0xb4>)
 800497e:	f8c5 a00c 	str.w	sl, [r5, #12]
 8004982:	46cd      	mov	sp, r9
 8004984:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8004988:	e9c5 2306 	strd	r2, r3, [r5, #24]
 800498c:	46ad      	mov	sp, r5
 800498e:	4816      	ldr	r0, [pc, #88]	; (80049e8 <z_arm_fatal_error+0xb0>)
 8004990:	4632      	mov	r2, r6
 8004992:	2300      	movs	r3, #0
 8004994:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8004998:	f00d fe00 	bl	801259c <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <z_arm_fatal_error+0xb8>)
 800499e:	69e3      	ldr	r3, [r4, #28]
 80049a0:	2503      	movs	r5, #3
 80049a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80049a6:	46cd      	mov	sp, r9
 80049a8:	60fd      	str	r5, [r7, #12]
 80049aa:	480f      	ldr	r0, [pc, #60]	; (80049e8 <z_arm_fatal_error+0xb0>)
 80049ac:	f107 020c 	add.w	r2, r7, #12
 80049b0:	2300      	movs	r3, #0
 80049b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80049b6:	f00d fdf1 	bl	801259c <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 80049ba:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <z_arm_fatal_error+0xbc>)
 80049bc:	69a3      	ldr	r3, [r4, #24]
 80049be:	60fd      	str	r5, [r7, #12]
 80049c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80049c4:	4808      	ldr	r0, [pc, #32]	; (80049e8 <z_arm_fatal_error+0xb0>)
 80049c6:	2300      	movs	r3, #0
 80049c8:	f107 020c 	add.w	r2, r7, #12
 80049cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80049d0:	f00d fde4 	bl	801259c <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 80049d4:	4621      	mov	r1, r4
 80049d6:	4640      	mov	r0, r8
 80049d8:	f00a ffe2 	bl	800f9a0 <z_fatal_error>
}
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e4:	080194a2 	.word	0x080194a2
 80049e8:	080180e8 	.word	0x080180e8
 80049ec:	080194d1 	.word	0x080194d1
 80049f0:	08019500 	.word	0x08019500
 80049f4:	0801950f 	.word	0x0801950f

080049f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80049f8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	db08      	blt.n	8004a10 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049fe:	2201      	movs	r2, #1
 8004a00:	f000 001f 	and.w	r0, r0, #31
 8004a04:	fa02 f000 	lsl.w	r0, r2, r0
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	4a02      	ldr	r2, [pc, #8]	; (8004a14 <arch_irq_enable+0x1c>)
 8004a0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	e000e100 	.word	0xe000e100

08004a18 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8004a18:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	db0d      	blt.n	8004a3a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1e:	2201      	movs	r2, #1
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f000 001f 	and.w	r0, r0, #31
 8004a26:	fa02 f000 	lsl.w	r0, r2, r0
 8004a2a:	3320      	adds	r3, #32
 8004a2c:	4a03      	ldr	r2, [pc, #12]	; (8004a3c <arch_irq_disable+0x24>)
 8004a2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a36:	f3bf 8f6f 	isb	sy
}
 8004a3a:	4770      	bx	lr
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8004a40:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004a42:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a44:	bfa8      	it	ge
 8004a46:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8004a4a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4e:	bfb8      	it	lt
 8004a50:	4b06      	ldrlt	r3, [pc, #24]	; (8004a6c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a52:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8004a56:	bfac      	ite	ge
 8004a58:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a60:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a62:	bfb4      	ite	lt
 8004a64:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a66:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8004a6a:	4770      	bx	lr
 8004a6c:	e000ed14 	.word	0xe000ed14

08004a70 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004a70:	bf30      	wfi
    b z_SysNmiOnReset
 8004a72:	f7ff bffd 	b.w	8004a70 <z_SysNmiOnReset>
 8004a76:	bf00      	nop

08004a78 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8004a78:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <z_arm_prep_c+0x24>)
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <z_arm_prep_c+0x28>)
 8004a7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a82:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a88:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8004a8c:	f00b f806 	bl	800fa9c <z_bss_zero>
	z_data_copy();
 8004a90:	f00b ff3a 	bl	8010908 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8004a94:	f000 fb72 	bl	800517c <z_arm_interrupt_init>
	z_cstart();
 8004a98:	f00b f844 	bl	800fb24 <z_cstart>
 8004a9c:	08000000 	.word	0x08000000
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8004aa4:	4a09      	ldr	r2, [pc, #36]	; (8004acc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8004aa6:	490a      	ldr	r1, [pc, #40]	; (8004ad0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8004aa8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8004aaa:	6809      	ldr	r1, [r1, #0]
 8004aac:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004aae:	4909      	ldr	r1, [pc, #36]	; (8004ad4 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8004ab0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004ab2:	684b      	ldr	r3, [r1, #4]
 8004ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	604b      	str	r3, [r1, #4]
 8004aba:	2300      	movs	r3, #0
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8004ac4:	6893      	ldr	r3, [r2, #8]
}
 8004ac6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20002268 	.word	0x20002268
 8004ad0:	08018a04 	.word	0x08018a04
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8004ad8:	4912      	ldr	r1, [pc, #72]	; (8004b24 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8004ada:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8004adc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8004ae0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8004ae2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8004ae6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004aea:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8004aec:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8004af0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8004af4:	4f0c      	ldr	r7, [pc, #48]	; (8004b28 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8004af6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8004afa:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8004afc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8004afe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8004b00:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8004b02:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8004b04:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8004b06:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8004b0a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8004b0c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8004b0e:	f000 fb75 	bl	80051fc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8004b12:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8004b16:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8004b1a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8004b1e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8004b22:	4770      	bx	lr
    ldr r1, =_kernel
 8004b24:	20002268 	.word	0x20002268
    ldr v4, =_SCS_ICSR
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8004b2c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004b30:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004b32:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004b36:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8004b3a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8004b3c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004b40:	2902      	cmp	r1, #2
    beq _oops
 8004b42:	d0ff      	beq.n	8004b44 <_oops>

08004b44 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004b44:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8004b46:	f00d fda5 	bl	8012694 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8004b4a:	bd01      	pop	{r0, pc}

08004b4c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8004b4c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004b50:	9b00      	ldr	r3, [sp, #0]
 8004b52:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8004b56:	490a      	ldr	r1, [pc, #40]	; (8004b80 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8004b58:	9b01      	ldr	r3, [sp, #4]
 8004b5a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8004b5e:	9b02      	ldr	r3, [sp, #8]
 8004b60:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8004b64:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b6c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8004b70:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8004b74:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8004b76:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8004b78:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8004b7a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	08011f27 	.word	0x08011f27

08004b84 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <z_check_thread_stack_fail+0x28>)
{
 8004b86:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8004b88:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8004b8a:	b170      	cbz	r0, 8004baa <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8004b8c:	f113 0f16 	cmn.w	r3, #22
 8004b90:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8004b92:	d005      	beq.n	8004ba0 <z_check_thread_stack_fail+0x1c>
 8004b94:	f1a0 0220 	sub.w	r2, r0, #32
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d805      	bhi.n	8004ba8 <z_check_thread_stack_fail+0x24>
 8004b9c:	4283      	cmp	r3, r0
 8004b9e:	d203      	bcs.n	8004ba8 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8004ba0:	4281      	cmp	r1, r0
 8004ba2:	bf28      	it	cs
 8004ba4:	2000      	movcs	r0, #0
 8004ba6:	4770      	bx	lr
 8004ba8:	2000      	movs	r0, #0
}
 8004baa:	4770      	bx	lr
 8004bac:	20002268 	.word	0x20002268

08004bb0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8004bb0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <arch_switch_to_main_thread+0x28>)
 8004bb4:	6098      	str	r0, [r3, #8]
{
 8004bb6:	460d      	mov	r5, r1
 8004bb8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8004bba:	f000 fb1f 	bl	80051fc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f385 8809 	msr	PSP, r5
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	b663      	cpsie	if
 8004bc8:	f381 8811 	msr	BASEPRI, r1
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f00d f9a7 	bl	8011f26 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8004bd8:	20002268 	.word	0x20002268

08004bdc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8004bdc:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8004bde:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8004be2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8004be6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8004bea:	4904      	ldr	r1, [pc, #16]	; (8004bfc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8004bec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8004bee:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8004bf0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8004bf2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8004bf6:	4902      	ldr	r1, [pc, #8]	; (8004c00 <_isr_wrapper+0x24>)
	bx r1
 8004bf8:	4708      	bx	r1
 8004bfa:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8004bfc:	08017e68 	.word	0x08017e68
	ldr r1, =z_arm_int_exit
 8004c00:	08004c05 	.word	0x08004c05

08004c04 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8004c06:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004c08:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8004c0a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8004c0c:	d003      	beq.n	8004c16 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8004c0e:	4903      	ldr	r1, [pc, #12]	; (8004c1c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8004c14:	600a      	str	r2, [r1, #0]

08004c16 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8004c16:	4770      	bx	lr
	ldr r3, =_kernel
 8004c18:	20002268 	.word	0x20002268
	ldr r1, =_SCS_ICSR
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 8004c24:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <bus_fault.constprop.0+0xe0>)
 8004c26:	9304      	str	r3, [sp, #16]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8004c28:	4606      	mov	r6, r0
 8004c2a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8004c2c:	4835      	ldr	r0, [pc, #212]	; (8004d04 <bus_fault.constprop.0+0xe4>)
 8004c2e:	2402      	movs	r4, #2
 8004c30:	aa03      	add	r2, sp, #12
 8004c32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004c36:	9403      	str	r4, [sp, #12]
 8004c38:	f00d fd3b 	bl	80126b2 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004c3c:	4b32      	ldr	r3, [pc, #200]	; (8004d08 <bus_fault.constprop.0+0xe8>)
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	04db      	lsls	r3, r3, #19
 8004c42:	d508      	bpl.n	8004c56 <bus_fault.constprop.0+0x36>
		PR_FAULT_INFO("  Stacking error");
 8004c44:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <bus_fault.constprop.0+0xec>)
 8004c46:	482f      	ldr	r0, [pc, #188]	; (8004d04 <bus_fault.constprop.0+0xe4>)
 8004c48:	aa03      	add	r2, sp, #12
 8004c4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004c4e:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8004c52:	f00d fd2e 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8004c56:	4b2c      	ldr	r3, [pc, #176]	; (8004d08 <bus_fault.constprop.0+0xe8>)
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	051c      	lsls	r4, r3, #20
 8004c5c:	d509      	bpl.n	8004c72 <bus_fault.constprop.0+0x52>
		PR_FAULT_INFO("  Unstacking error");
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <bus_fault.constprop.0+0xf0>)
 8004c60:	9304      	str	r3, [sp, #16]
 8004c62:	4828      	ldr	r0, [pc, #160]	; (8004d04 <bus_fault.constprop.0+0xe4>)
 8004c64:	2302      	movs	r3, #2
 8004c66:	aa03      	add	r2, sp, #12
 8004c68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004c6c:	9303      	str	r3, [sp, #12]
 8004c6e:	f00d fd20 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004c72:	4c25      	ldr	r4, [pc, #148]	; (8004d08 <bus_fault.constprop.0+0xe8>)
 8004c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c76:	0598      	lsls	r0, r3, #22
 8004c78:	d51d      	bpl.n	8004cb6 <bus_fault.constprop.0+0x96>
		PR_FAULT_INFO("  Precise data bus error");
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <bus_fault.constprop.0+0xf4>)
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	aa03      	add	r2, sp, #12
 8004c80:	2302      	movs	r3, #2
 8004c82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004c86:	481f      	ldr	r0, [pc, #124]	; (8004d04 <bus_fault.constprop.0+0xe4>)
 8004c88:	9303      	str	r3, [sp, #12]
 8004c8a:	f00d fd12 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8004c8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004c90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c92:	0411      	lsls	r1, r2, #16
 8004c94:	d50f      	bpl.n	8004cb6 <bus_fault.constprop.0+0x96>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8004c96:	4a20      	ldr	r2, [pc, #128]	; (8004d18 <bus_fault.constprop.0+0xf8>)
 8004c98:	481a      	ldr	r0, [pc, #104]	; (8004d04 <bus_fault.constprop.0+0xe4>)
 8004c9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	aa03      	add	r2, sp, #12
 8004ca6:	9303      	str	r3, [sp, #12]
 8004ca8:	f00d fd03 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
 8004cac:	b11e      	cbz	r6, 8004cb6 <bus_fault.constprop.0+0x96>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004cae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cb4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <bus_fault.constprop.0+0xe8>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	055a      	lsls	r2, r3, #21
 8004cbc:	d509      	bpl.n	8004cd2 <bus_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <bus_fault.constprop.0+0xfc>)
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	4810      	ldr	r0, [pc, #64]	; (8004d04 <bus_fault.constprop.0+0xe4>)
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	aa03      	add	r2, sp, #12
 8004cc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ccc:	9303      	str	r3, [sp, #12]
 8004cce:	f00d fcf0 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <bus_fault.constprop.0+0xe8>)
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	05db      	lsls	r3, r3, #23
 8004cd8:	d509      	bpl.n	8004cee <bus_fault.constprop.0+0xce>
		PR_FAULT_INFO("  Instruction bus error");
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <bus_fault.constprop.0+0x100>)
 8004cdc:	9304      	str	r3, [sp, #16]
 8004cde:	4809      	ldr	r0, [pc, #36]	; (8004d04 <bus_fault.constprop.0+0xe4>)
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	aa03      	add	r2, sp, #12
 8004ce4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ce8:	9303      	str	r3, [sp, #12]
 8004cea:	f00d fce2 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004cee:	4a06      	ldr	r2, [pc, #24]	; (8004d08 <bus_fault.constprop.0+0xe8>)
 8004cf0:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8004cf2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004cf4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8004cf8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004cfa:	7028      	strb	r0, [r5, #0]

	return reason;
}
 8004cfc:	b006      	add	sp, #24
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	0801953d 	.word	0x0801953d
 8004d04:	080180e8 	.word	0x080180e8
 8004d08:	e000ed00 	.word	0xe000ed00
 8004d0c:	08019553 	.word	0x08019553
 8004d10:	08019564 	.word	0x08019564
 8004d14:	08019577 	.word	0x08019577
 8004d18:	08019590 	.word	0x08019590
 8004d1c:	080195a5 	.word	0x080195a5
 8004d20:	080195c0 	.word	0x080195c0

08004d24 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8004d24:	b510      	push	{r4, lr}
 8004d26:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8004d28:	4b33      	ldr	r3, [pc, #204]	; (8004df8 <usage_fault.constprop.0+0xd4>)
 8004d2a:	4834      	ldr	r0, [pc, #208]	; (8004dfc <usage_fault.constprop.0+0xd8>)
 8004d2c:	9304      	str	r3, [sp, #16]
 8004d2e:	2402      	movs	r4, #2
 8004d30:	aa03      	add	r2, sp, #12
 8004d32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004d36:	9403      	str	r4, [sp, #12]
 8004d38:	f00d fcbb 	bl	80126b2 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004d3c:	4b30      	ldr	r3, [pc, #192]	; (8004e00 <usage_fault.constprop.0+0xdc>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	019b      	lsls	r3, r3, #6
 8004d42:	d508      	bpl.n	8004d56 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
 8004d44:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <usage_fault.constprop.0+0xe0>)
 8004d46:	482d      	ldr	r0, [pc, #180]	; (8004dfc <usage_fault.constprop.0+0xd8>)
 8004d48:	aa03      	add	r2, sp, #12
 8004d4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004d4e:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8004d52:	f00d fcae 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004d56:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <usage_fault.constprop.0+0xdc>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	01dc      	lsls	r4, r3, #7
 8004d5c:	d509      	bpl.n	8004d72 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
 8004d5e:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <usage_fault.constprop.0+0xe4>)
 8004d60:	9304      	str	r3, [sp, #16]
 8004d62:	4826      	ldr	r0, [pc, #152]	; (8004dfc <usage_fault.constprop.0+0xd8>)
 8004d64:	2302      	movs	r3, #2
 8004d66:	aa03      	add	r2, sp, #12
 8004d68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004d6c:	9303      	str	r3, [sp, #12]
 8004d6e:	f00d fca0 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8004d72:	4b23      	ldr	r3, [pc, #140]	; (8004e00 <usage_fault.constprop.0+0xdc>)
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	0318      	lsls	r0, r3, #12
 8004d78:	d509      	bpl.n	8004d8e <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <usage_fault.constprop.0+0xe8>)
 8004d7c:	9304      	str	r3, [sp, #16]
 8004d7e:	481f      	ldr	r0, [pc, #124]	; (8004dfc <usage_fault.constprop.0+0xd8>)
 8004d80:	2302      	movs	r3, #2
 8004d82:	aa03      	add	r2, sp, #12
 8004d84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004d88:	9303      	str	r3, [sp, #12]
 8004d8a:	f00d fc92 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004d8e:	4b1c      	ldr	r3, [pc, #112]	; (8004e00 <usage_fault.constprop.0+0xdc>)
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	0359      	lsls	r1, r3, #13
 8004d94:	d509      	bpl.n	8004daa <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <usage_fault.constprop.0+0xec>)
 8004d98:	9304      	str	r3, [sp, #16]
 8004d9a:	4818      	ldr	r0, [pc, #96]	; (8004dfc <usage_fault.constprop.0+0xd8>)
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	aa03      	add	r2, sp, #12
 8004da0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004da4:	9303      	str	r3, [sp, #12]
 8004da6:	f00d fc84 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004daa:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <usage_fault.constprop.0+0xdc>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	039a      	lsls	r2, r3, #14
 8004db0:	d509      	bpl.n	8004dc6 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8004db2:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <usage_fault.constprop.0+0xf0>)
 8004db4:	9304      	str	r3, [sp, #16]
 8004db6:	4811      	ldr	r0, [pc, #68]	; (8004dfc <usage_fault.constprop.0+0xd8>)
 8004db8:	2302      	movs	r3, #2
 8004dba:	aa03      	add	r2, sp, #12
 8004dbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004dc0:	9303      	str	r3, [sp, #12]
 8004dc2:	f00d fc76 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <usage_fault.constprop.0+0xdc>)
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	03db      	lsls	r3, r3, #15
 8004dcc:	d509      	bpl.n	8004de2 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <usage_fault.constprop.0+0xf4>)
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	480a      	ldr	r0, [pc, #40]	; (8004dfc <usage_fault.constprop.0+0xd8>)
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	aa03      	add	r2, sp, #12
 8004dd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ddc:	9303      	str	r3, [sp, #12]
 8004dde:	f00d fc68 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004de2:	4a07      	ldr	r2, [pc, #28]	; (8004e00 <usage_fault.constprop.0+0xdc>)
 8004de4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004de6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004dea:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
 8004dee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004df0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004df2:	b006      	add	sp, #24
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	bf00      	nop
 8004df8:	080195d8 	.word	0x080195d8
 8004dfc:	080180e8 	.word	0x080180e8
 8004e00:	e000ed00 	.word	0xe000ed00
 8004e04:	080195f0 	.word	0x080195f0
 8004e08:	08019603 	.word	0x08019603
 8004e0c:	0801961d 	.word	0x0801961d
 8004e10:	0801963b 	.word	0x0801963b
 8004e14:	08019660 	.word	0x08019660
 8004e18:	0801967a 	.word	0x0801967a

08004e1c <mem_manage_fault>:
{
 8004e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e20:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** MPU FAULT *****");
 8004e22:	4b3e      	ldr	r3, [pc, #248]	; (8004f1c <mem_manage_fault+0x100>)
 8004e24:	9304      	str	r3, [sp, #16]
{
 8004e26:	4607      	mov	r7, r0
 8004e28:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8004e2a:	483d      	ldr	r0, [pc, #244]	; (8004f20 <mem_manage_fault+0x104>)
{
 8004e2c:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8004e2e:	2402      	movs	r4, #2
 8004e30:	aa03      	add	r2, sp, #12
 8004e32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004e36:	9403      	str	r4, [sp, #12]
 8004e38:	f00d fc3b 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8004e3c:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <mem_manage_fault+0x108>)
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	06d8      	lsls	r0, r3, #27
 8004e42:	d508      	bpl.n	8004e56 <mem_manage_fault+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8004e44:	4b38      	ldr	r3, [pc, #224]	; (8004f28 <mem_manage_fault+0x10c>)
 8004e46:	4836      	ldr	r0, [pc, #216]	; (8004f20 <mem_manage_fault+0x104>)
 8004e48:	aa03      	add	r2, sp, #12
 8004e4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004e4e:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8004e52:	f00d fc2e 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8004e56:	4b33      	ldr	r3, [pc, #204]	; (8004f24 <mem_manage_fault+0x108>)
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	0719      	lsls	r1, r3, #28
 8004e5c:	d509      	bpl.n	8004e72 <mem_manage_fault+0x56>
		PR_FAULT_INFO("  Unstacking error");
 8004e5e:	4b33      	ldr	r3, [pc, #204]	; (8004f2c <mem_manage_fault+0x110>)
 8004e60:	9304      	str	r3, [sp, #16]
 8004e62:	482f      	ldr	r0, [pc, #188]	; (8004f20 <mem_manage_fault+0x104>)
 8004e64:	2302      	movs	r3, #2
 8004e66:	aa03      	add	r2, sp, #12
 8004e68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004e6c:	9303      	str	r3, [sp, #12]
 8004e6e:	f00d fc20 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8004e72:	4c2c      	ldr	r4, [pc, #176]	; (8004f24 <mem_manage_fault+0x108>)
 8004e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e76:	079a      	lsls	r2, r3, #30
 8004e78:	d421      	bmi.n	8004ebe <mem_manage_fault+0xa2>
	uint32_t mmfar = -EINVAL;
 8004e7a:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8004e7e:	4b29      	ldr	r3, [pc, #164]	; (8004f24 <mem_manage_fault+0x108>)
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	07d8      	lsls	r0, r3, #31
 8004e84:	d509      	bpl.n	8004e9a <mem_manage_fault+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
 8004e86:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <mem_manage_fault+0x114>)
 8004e88:	9304      	str	r3, [sp, #16]
 8004e8a:	4825      	ldr	r0, [pc, #148]	; (8004f20 <mem_manage_fault+0x104>)
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	aa03      	add	r2, sp, #12
 8004e90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004e94:	9303      	str	r3, [sp, #12]
 8004e96:	f00d fc0c 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004e9a:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <mem_manage_fault+0x108>)
 8004e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9e:	06d1      	lsls	r1, r2, #27
 8004ea0:	d42e      	bmi.n	8004f00 <mem_manage_fault+0xe4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8004ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004ea4:	0792      	lsls	r2, r2, #30
 8004ea6:	d42b      	bmi.n	8004f00 <mem_manage_fault+0xe4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004ea8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <mem_manage_fault+0x108>)
 8004eac:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004eae:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8004eb2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	702b      	strb	r3, [r5, #0]
}
 8004eb8:	b006      	add	sp, #24
 8004eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <mem_manage_fault+0x118>)
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	4817      	ldr	r0, [pc, #92]	; (8004f20 <mem_manage_fault+0x104>)
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	aa03      	add	r2, sp, #12
 8004ec8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	f00d fbf0 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 8004ed2:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8004ed4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	d5cf      	bpl.n	8004e7a <mem_manage_fault+0x5e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8004eda:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <mem_manage_fault+0x11c>)
 8004edc:	4810      	ldr	r0, [pc, #64]	; (8004f20 <mem_manage_fault+0x104>)
 8004ede:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8004ee2:	aa03      	add	r2, sp, #12
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	f00d fbe1 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
 8004ef0:	f1b8 0f00 	cmp.w	r8, #0
 8004ef4:	d0c3      	beq.n	8004e7e <mem_manage_fault+0x62>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8004ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004efe:	e7be      	b.n	8004e7e <mem_manage_fault+0x62>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	051b      	lsls	r3, r3, #20
 8004f04:	d5d0      	bpl.n	8004ea8 <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8004f06:	4639      	mov	r1, r7
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f7ff fe3b 	bl	8004b84 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0ca      	beq.n	8004ea8 <mem_manage_fault+0x8c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004f12:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8004f16:	2002      	movs	r0, #2
 8004f18:	e7c7      	b.n	8004eaa <mem_manage_fault+0x8e>
 8004f1a:	bf00      	nop
 8004f1c:	080196a5 	.word	0x080196a5
 8004f20:	080180e8 	.word	0x080180e8
 8004f24:	e000ed00 	.word	0xe000ed00
 8004f28:	080196bb 	.word	0x080196bb
 8004f2c:	08019564 	.word	0x08019564
 8004f30:	0801971c 	.word	0x0801971c
 8004f34:	080196ee 	.word	0x080196ee
 8004f38:	08019706 	.word	0x08019706

08004f3c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8004f3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8004f3e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004f40:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8004f42:	9303      	str	r3, [sp, #12]
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <z_log_msg2_runtime_create.constprop.0+0x20>)
 8004f46:	9302      	str	r3, [sp, #8]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e9cd 3300 	strd	r3, r3, [sp]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fbd9 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 8004f56:	b007      	add	sp, #28
 8004f58:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f5c:	0801973b 	.word	0x0801973b

08004f60 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8004f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004f64:	4b70      	ldr	r3, [pc, #448]	; (8005128 <z_arm_fault+0x1c8>)
 8004f66:	685e      	ldr	r6, [r3, #4]
{
 8004f68:	b091      	sub	sp, #68	; 0x44
 8004f6a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004f6c:	f3c6 0408 	ubfx	r4, r6, #0, #9
 8004f70:	2700      	movs	r7, #0
 8004f72:	f387 8811 	msr	BASEPRI, r7
 8004f76:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8004f7a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8004f7e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8004f82:	d10d      	bne.n	8004fa0 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8004f84:	f002 030c 	and.w	r3, r2, #12
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d10b      	bne.n	8004fa4 <z_arm_fault+0x44>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8004f8c:	4b67      	ldr	r3, [pc, #412]	; (800512c <z_arm_fault+0x1cc>)
 8004f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f90:	4867      	ldr	r0, [pc, #412]	; (8005130 <z_arm_fault+0x1d0>)
 8004f92:	2302      	movs	r3, #2
 8004f94:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f9c:	f00d fb89 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
		return NULL;
 8004fa0:	463d      	mov	r5, r7
 8004fa2:	e003      	b.n	8004fac <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8004fa4:	0712      	lsls	r2, r2, #28
 8004fa6:	d401      	bmi.n	8004fac <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
 8004fa8:	4605      	mov	r5, r0
			*nested_exc = true;
 8004faa:	2701      	movs	r7, #1
	*recoverable = false;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f88d 301f 	strb.w	r3, [sp, #31]
	switch (fault) {
 8004fb2:	1ee3      	subs	r3, r4, #3
 8004fb4:	2b09      	cmp	r3, #9
 8004fb6:	f200 809c 	bhi.w	80050f2 <z_arm_fault+0x192>
 8004fba:	e8df f003 	tbb	[pc, r3]
 8004fbe:	8d05      	.short	0x8d05
 8004fc0:	9a9a8a91 	.word	0x9a9a8a91
 8004fc4:	959a9a9a 	.word	0x959a9a9a
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004fc8:	4e57      	ldr	r6, [pc, #348]	; (8005128 <z_arm_fault+0x1c8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
 8004fca:	4b5a      	ldr	r3, [pc, #360]	; (8005134 <z_arm_fault+0x1d4>)
 8004fcc:	4858      	ldr	r0, [pc, #352]	; (8005130 <z_arm_fault+0x1d0>)
 8004fce:	930c      	str	r3, [sp, #48]	; 0x30
 8004fd0:	f04f 0802 	mov.w	r8, #2
 8004fd4:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004fda:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8004fde:	f00d fb68 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004fe2:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
 8004fe4:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004fe8:	ea14 0408 	ands.w	r4, r4, r8
	*recoverable = false;
 8004fec:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004ff0:	d00a      	beq.n	8005008 <z_arm_fault+0xa8>
		PR_EXC("  Bus fault on vector table read");
 8004ff2:	4b51      	ldr	r3, [pc, #324]	; (8005138 <z_arm_fault+0x1d8>)
 8004ff4:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
	PR_FAULT_INFO(
 8004ff8:	484d      	ldr	r0, [pc, #308]	; (8005130 <z_arm_fault+0x1d0>)
 8004ffa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ffc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005000:	f00d fb57 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005004:	2400      	movs	r4, #0
}
 8005006:	e00b      	b.n	8005020 <z_arm_fault+0xc0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8005008:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800500a:	2b00      	cmp	r3, #0
 800500c:	da28      	bge.n	8005060 <z_arm_fault+0x100>
		PR_EXC("  Debug event");
 800500e:	4b4b      	ldr	r3, [pc, #300]	; (800513c <z_arm_fault+0x1dc>)
 8005010:	4847      	ldr	r0, [pc, #284]	; (8005130 <z_arm_fault+0x1d0>)
 8005012:	aa0b      	add	r2, sp, #44	; 0x2c
 8005014:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005018:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
 800501c:	f00d fb49 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8005020:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005024:	b9cb      	cbnz	r3, 800505a <z_arm_fault+0xfa>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8005026:	aa08      	add	r2, sp, #32
 8005028:	f105 0620 	add.w	r6, r5, #32
 800502c:	6828      	ldr	r0, [r5, #0]
 800502e:	6869      	ldr	r1, [r5, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	c303      	stmia	r3!, {r0, r1}
 8005034:	3508      	adds	r5, #8
 8005036:	42b5      	cmp	r5, r6
 8005038:	461a      	mov	r2, r3
 800503a:	d1f7      	bne.n	800502c <z_arm_fault+0xcc>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 800503c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800503e:	2f00      	cmp	r7, #0
 8005040:	d06c      	beq.n	800511c <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8005042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005046:	b922      	cbnz	r2, 8005052 <z_arm_fault+0xf2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8005048:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800504c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8005050:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
 8005052:	a908      	add	r1, sp, #32
 8005054:	4620      	mov	r0, r4
 8005056:	f7ff fc6f 	bl	8004938 <z_arm_fatal_error>
}
 800505a:	b011      	add	sp, #68	; 0x44
 800505c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8005060:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	d5dc      	bpl.n	8005020 <z_arm_fault+0xc0>
		PR_EXC("  Fault escalation (see below)");
 8005066:	4b36      	ldr	r3, [pc, #216]	; (8005140 <z_arm_fault+0x1e0>)
 8005068:	4831      	ldr	r0, [pc, #196]	; (8005130 <z_arm_fault+0x1d0>)
 800506a:	aa0b      	add	r2, sp, #44	; 0x2c
 800506c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005070:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
 8005074:	f00d fb1d 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
 8005078:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800507a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800507e:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8005082:	429a      	cmp	r2, r3
 8005084:	d00a      	beq.n	800509c <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
 8005086:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800508a:	b1ab      	cbz	r3, 80050b8 <z_arm_fault+0x158>
			reason = mem_manage_fault(esf, 1, recoverable);
 800508c:	f10d 021f 	add.w	r2, sp, #31
 8005090:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8005092:	4628      	mov	r0, r5
 8005094:	f7ff fec2 	bl	8004e1c <mem_manage_fault>
 8005098:	4604      	mov	r4, r0
		break;
 800509a:	e7c1      	b.n	8005020 <z_arm_fault+0xc0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	4a29      	ldr	r2, [pc, #164]	; (8005144 <z_arm_fault+0x1e4>)
 80050a0:	4823      	ldr	r0, [pc, #140]	; (8005130 <z_arm_fault+0x1d0>)
 80050a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80050a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80050aa:	2303      	movs	r3, #3
 80050ac:	aa0b      	add	r2, sp, #44	; 0x2c
 80050ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b0:	f00d faff 	bl	80126b2 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
 80050b4:	682c      	ldr	r4, [r5, #0]
 80050b6:	e7b3      	b.n	8005020 <z_arm_fault+0xc0>
		} else if (SCB_BFSR != 0) {
 80050b8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80050bc:	b12b      	cbz	r3, 80050ca <z_arm_fault+0x16a>
			reason = bus_fault(esf, 1, recoverable);
 80050be:	f10d 011f 	add.w	r1, sp, #31
 80050c2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80050c4:	f7ff fdac 	bl	8004c20 <bus_fault.constprop.0>
 80050c8:	e7e6      	b.n	8005098 <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
 80050ca:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0a6      	beq.n	8005020 <z_arm_fault+0xc0>
		reason = usage_fault(esf);
 80050d2:	f7ff fe27 	bl	8004d24 <usage_fault.constprop.0>
 80050d6:	e7df      	b.n	8005098 <z_arm_fault+0x138>
		reason = mem_manage_fault(esf, 0, recoverable);
 80050d8:	f10d 021f 	add.w	r2, sp, #31
 80050dc:	2100      	movs	r1, #0
 80050de:	e7d8      	b.n	8005092 <z_arm_fault+0x132>
		reason = bus_fault(esf, 0, recoverable);
 80050e0:	f10d 011f 	add.w	r1, sp, #31
 80050e4:	2000      	movs	r0, #0
 80050e6:	e7ed      	b.n	80050c4 <z_arm_fault+0x164>
	PR_FAULT_INFO(
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <z_arm_fault+0x1e8>)
 80050ea:	930c      	str	r3, [sp, #48]	; 0x30
 80050ec:	2302      	movs	r3, #2
 80050ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f0:	e782      	b.n	8004ff8 <z_arm_fault+0x98>
	PR_FAULT_INFO("***** %s %d) *****",
 80050f2:	4a16      	ldr	r2, [pc, #88]	; (800514c <z_arm_fault+0x1ec>)
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <z_arm_fault+0x1f0>)
 80050f6:	490e      	ldr	r1, [pc, #56]	; (8005130 <z_arm_fault+0x1d0>)
 80050f8:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 80050fc:	bf18      	it	ne
 80050fe:	4613      	movne	r3, r2
 8005100:	3c10      	subs	r4, #16
 8005102:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8005106:	2400      	movs	r4, #0
 8005108:	4b12      	ldr	r3, [pc, #72]	; (8005154 <z_arm_fault+0x1f4>)
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	e9cd 4400 	strd	r4, r4, [sp]
 8005110:	4623      	mov	r3, r4
 8005112:	2201      	movs	r2, #1
 8005114:	4620      	mov	r0, r4
 8005116:	f7ff ff11 	bl	8004f3c <z_log_msg2_runtime_create.constprop.0>
}
 800511a:	e781      	b.n	8005020 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800511c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	e794      	b.n	8005050 <z_arm_fault+0xf0>
 8005126:	bf00      	nop
 8005128:	e000ed00 	.word	0xe000ed00
 800512c:	0801977c 	.word	0x0801977c
 8005130:	080180e8 	.word	0x080180e8
 8005134:	080197a7 	.word	0x080197a7
 8005138:	080197be 	.word	0x080197be
 800513c:	080197df 	.word	0x080197df
 8005140:	080197ed 	.word	0x080197ed
 8005144:	0801980c 	.word	0x0801980c
 8005148:	08019828 	.word	0x08019828
 800514c:	08019763 	.word	0x08019763
 8005150:	0801974e 	.word	0x0801974e
 8005154:	0801973b 	.word	0x0801973b

08005158 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8005158:	4a02      	ldr	r2, [pc, #8]	; (8005164 <z_arm_fault_init+0xc>)
 800515a:	6953      	ldr	r3, [r2, #20]
 800515c:	f043 0310 	orr.w	r3, r3, #16
 8005160:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 8005162:	4770      	bx	lr
 8005164:	e000ed00 	.word	0xe000ed00

08005168 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8005168:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 800516c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8005170:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8005172:	4672      	mov	r2, lr
	bl z_arm_fault
 8005174:	f7ff fef4 	bl	8004f60 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8005178:	bd01      	pop	{r0, pc}
 800517a:	bf00      	nop

0800517c <z_arm_interrupt_init>:
 800517c:	4804      	ldr	r0, [pc, #16]	; (8005190 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	2110      	movs	r1, #16
 8005182:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8005184:	3301      	adds	r3, #1
 8005186:	2b3e      	cmp	r3, #62	; 0x3e
 8005188:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800518c:	d1f9      	bne.n	8005182 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 800518e:	4770      	bx	lr
 8005190:	e000e100 	.word	0xe000e100

08005194 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8005194:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8005196:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800519a:	4808      	ldr	r0, [pc, #32]	; (80051bc <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 800519c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80051a0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80051a2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80051a6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80051aa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80051ac:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80051ae:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80051b2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80051b6:	f7ff fc5f 	bl	8004a78 <z_arm_prep_c>
 80051ba:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80051bc:	20009220 	.word	0x20009220

080051c0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <z_impl_k_thread_abort+0x1c>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4283      	cmp	r3, r0
 80051c6:	d107      	bne.n	80051d8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80051cc:	b123      	cbz	r3, 80051d8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80051ce:	4a04      	ldr	r2, [pc, #16]	; (80051e0 <z_impl_k_thread_abort+0x20>)
 80051d0:	6853      	ldr	r3, [r2, #4]
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 80051d8:	f00b bb32 	b.w	8010840 <z_thread_abort>
 80051dc:	20002268 	.word	0x20002268
 80051e0:	e000ed00 	.word	0xe000ed00

080051e4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80051e4:	4b02      	ldr	r3, [pc, #8]	; (80051f0 <z_arm_configure_static_mpu_regions+0xc>)
 80051e6:	4a03      	ldr	r2, [pc, #12]	; (80051f4 <z_arm_configure_static_mpu_regions+0x10>)
 80051e8:	4803      	ldr	r0, [pc, #12]	; (80051f8 <z_arm_configure_static_mpu_regions+0x14>)
 80051ea:	2101      	movs	r1, #1
 80051ec:	f000 b886 	b.w	80052fc <arm_core_mpu_configure_static_mpu_regions>
 80051f0:	20010000 	.word	0x20010000
 80051f4:	20000000 	.word	0x20000000
 80051f8:	080182dc 	.word	0x080182dc

080051fc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80051fc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8005200:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 8005202:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8005206:	2120      	movs	r1, #32
 8005208:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 800520c:	4618      	mov	r0, r3
 800520e:	2101      	movs	r1, #1
 8005210:	f000 b87e 	b.w	8005310 <arm_core_mpu_configure_dynamic_mpu_regions>
 8005214:	20000fcc 	.word	0x20000fcc
 8005218:	150b0000 	.word	0x150b0000

0800521c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 800521c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 800521e:	4f28      	ldr	r7, [pc, #160]	; (80052c0 <mpu_configure_regions+0xa4>)
 8005220:	b087      	sub	sp, #28
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8005222:	2600      	movs	r6, #0
 8005224:	428e      	cmp	r6, r1
 8005226:	da16      	bge.n	8005256 <mpu_configure_regions+0x3a>
		if (regions[i].size == 0U) {
 8005228:	6844      	ldr	r4, [r0, #4]
 800522a:	2c00      	cmp	r4, #0
 800522c:	d045      	beq.n	80052ba <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 800522e:	b1db      	cbz	r3, 8005268 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8005230:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8005234:	ea14 0f0c 	tst.w	r4, ip
 8005238:	d010      	beq.n	800525c <mpu_configure_regions+0x40>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 800523a:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <mpu_configure_regions+0xa8>)
 800523c:	e9cd 3604 	strd	r3, r6, [sp, #16]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8005240:	2303      	movs	r3, #3
 8005242:	9303      	str	r3, [sp, #12]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8005244:	4820      	ldr	r0, [pc, #128]	; (80052c8 <mpu_configure_regions+0xac>)
 8005246:	aa03      	add	r2, sp, #12
 8005248:	2300      	movs	r3, #0
 800524a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800524e:	f00d f9a5 	bl	801259c <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8005252:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8005256:	4610      	mov	r0, r2
 8005258:	b007      	add	sp, #28
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
 800525c:	2c1f      	cmp	r4, #31
 800525e:	d9ec      	bls.n	800523a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
 8005260:	6805      	ldr	r5, [r0, #0]
		&&
 8005262:	ea1c 0f05 	tst.w	ip, r5
 8005266:	d1e8      	bne.n	800523a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8005268:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 800526a:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800526c:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8005270:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 8005272:	d910      	bls.n	8005296 <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
 8005274:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8005278:	d80f      	bhi.n	800529a <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800527a:	3c01      	subs	r4, #1
 800527c:	fab4 f484 	clz	r4, r4
 8005280:	f1c4 041f 	rsb	r4, r4, #31
 8005284:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8005286:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8005288:	ea4c 0404 	orr.w	r4, ip, r4
 800528c:	d907      	bls.n	800529e <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <mpu_configure_regions+0xb0>)
 8005290:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8005294:	e7d4      	b.n	8005240 <mpu_configure_regions+0x24>
		return REGION_32B;
 8005296:	2408      	movs	r4, #8
 8005298:	e7f5      	b.n	8005286 <mpu_configure_regions+0x6a>
		return REGION_4G;
 800529a:	243e      	movs	r4, #62	; 0x3e
 800529c:	e7f3      	b.n	8005286 <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800529e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 80052a2:	4315      	orrs	r5, r2
 80052a4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80052a8:	f044 0401 	orr.w	r4, r4, #1
 80052ac:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80052b0:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 80052b4:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80052b6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 80052ba:	3601      	adds	r6, #1
 80052bc:	300c      	adds	r0, #12
 80052be:	e7b1      	b.n	8005224 <mpu_configure_regions+0x8>
 80052c0:	e000ed00 	.word	0xe000ed00
 80052c4:	08019850 	.word	0x08019850
 80052c8:	080180d8 	.word	0x080180d8
 80052cc:	08019873 	.word	0x08019873

080052d0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80052d0:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <arm_core_mpu_enable+0x14>)
 80052d2:	2205      	movs	r2, #5
 80052d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80052d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80052dc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	e000ed00 	.word	0xe000ed00

080052e8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80052e8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80052ec:	4b02      	ldr	r3, [pc, #8]	; (80052f8 <arm_core_mpu_disable+0x10>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000ed00 	.word	0xe000ed00

080052fc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 80052fc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80052fe:	4c03      	ldr	r4, [pc, #12]	; (800530c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8005300:	2301      	movs	r3, #1
 8005302:	7822      	ldrb	r2, [r4, #0]
 8005304:	f7ff ff8a 	bl	800521c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005308:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 800530a:	bd10      	pop	{r4, pc}
 800530c:	2000244a 	.word	0x2000244a

08005310 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8005310:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8005312:	4a09      	ldr	r2, [pc, #36]	; (8005338 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8005314:	2300      	movs	r3, #0
 8005316:	7812      	ldrb	r2, [r2, #0]
 8005318:	f7ff ff80 	bl	800521c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 800531c:	f110 0f16 	cmn.w	r0, #22
 8005320:	d003      	beq.n	800532a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8005324:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8005326:	2807      	cmp	r0, #7
 8005328:	dd00      	ble.n	800532c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 800532a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 800532c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8005330:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005334:	3001      	adds	r0, #1
 8005336:	e7f6      	b.n	8005326 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8005338:	2000244a 	.word	0x2000244a
 800533c:	e000ed00 	.word	0xe000ed00

08005340 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8005340:	4914      	ldr	r1, [pc, #80]	; (8005394 <z_arm_mpu_init+0x54>)
 8005342:	6808      	ldr	r0, [r1, #0]
 8005344:	2808      	cmp	r0, #8
{
 8005346:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8005348:	d821      	bhi.n	800538e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800534a:	f7ff ffcd 	bl	80052e8 <arm_core_mpu_disable>
 800534e:	4c12      	ldr	r4, [pc, #72]	; (8005398 <z_arm_mpu_init+0x58>)
 8005350:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005352:	2200      	movs	r2, #0
 8005354:	4290      	cmp	r0, r2
 8005356:	f101 010c 	add.w	r1, r1, #12
 800535a:	d105      	bne.n	8005368 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <z_arm_mpu_init+0x5c>)
 800535e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8005360:	f7ff ffb6 	bl	80052d0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8005364:	2000      	movs	r0, #0
}
 8005366:	bd10      	pop	{r4, pc}
 8005368:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800536c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8005370:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8005374:	4313      	orrs	r3, r2
 8005376:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800537a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800537e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800538a:	3201      	adds	r2, #1
 800538c:	e7e2      	b.n	8005354 <z_arm_mpu_init+0x14>
		return -1;
 800538e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005392:	e7e8      	b.n	8005366 <z_arm_mpu_init+0x26>
 8005394:	080182e8 	.word	0x080182e8
 8005398:	e000ed00 	.word	0xe000ed00
 800539c:	2000244a 	.word	0x2000244a

080053a0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80053a0:	4b01      	ldr	r3, [pc, #4]	; (80053a8 <__stdout_hook_install+0x8>)
 80053a2:	6018      	str	r0, [r3, #0]
}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000030 	.word	0x20000030

080053ac <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 80053ae:	4f08      	ldr	r7, [pc, #32]	; (80053d0 <z_impl_zephyr_read_stdin+0x24>)
{
 80053b0:	4606      	mov	r6, r0
 80053b2:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 80053b4:	2400      	movs	r4, #0
 80053b6:	42ac      	cmp	r4, r5
 80053b8:	da08      	bge.n	80053cc <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80053be:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 80053c0:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 80053c2:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80053c6:	d001      	beq.n	80053cc <z_impl_zephyr_read_stdin+0x20>
 80053c8:	280d      	cmp	r0, #13
 80053ca:	d1f4      	bne.n	80053b6 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 80053cc:	4620      	mov	r0, r4
 80053ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d0:	2000002c 	.word	0x2000002c

080053d4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	4f0a      	ldr	r7, [pc, #40]	; (8005400 <z_impl_zephyr_write_stdout+0x2c>)
 80053d8:	460d      	mov	r5, r1
 80053da:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 80053dc:	f1c0 0401 	rsb	r4, r0, #1
 80053e0:	19a3      	adds	r3, r4, r6
 80053e2:	429d      	cmp	r5, r3
 80053e4:	dc01      	bgt.n	80053ea <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 80053e6:	4628      	mov	r0, r5
 80053e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 80053ea:	7873      	ldrb	r3, [r6, #1]
 80053ec:	2b0a      	cmp	r3, #10
 80053ee:	d102      	bne.n	80053f6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	200d      	movs	r0, #13
 80053f4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 80053fc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 80053fe:	e7ef      	b.n	80053e0 <z_impl_zephyr_write_stdout+0xc>
 8005400:	20000030 	.word	0x20000030

08005404 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8005404:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8005406:	4c07      	ldr	r4, [pc, #28]	; (8005424 <_sbrk+0x20>)
 8005408:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 800540a:	18c2      	adds	r2, r0, r3
 800540c:	4806      	ldr	r0, [pc, #24]	; (8005428 <_sbrk+0x24>)
 800540e:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 8005412:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8005416:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 8005418:	bf3a      	itte	cc
 800541a:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 800541c:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 800541e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8005422:	bd10      	pop	{r4, pc}
 8005424:	20000fd8 	.word	0x20000fd8
 8005428:	2000c3b0 	.word	0x2000c3b0

0800542c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 800542c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800542e:	211d      	movs	r1, #29
 8005430:	4804      	ldr	r0, [pc, #16]	; (8005444 <__chk_fail+0x18>)
 8005432:	f7ff ffcf 	bl	80053d4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
 8005436:	4040      	eors	r0, r0
 8005438:	f380 8811 	msr	BASEPRI, r0
 800543c:	f04f 0003 	mov.w	r0, #3
 8005440:	df02      	svc	2
	CODE_UNREACHABLE;
 8005442:	bf00      	nop
 8005444:	08019899 	.word	0x08019899

08005448 <getBatteryLevelLocal>:
	/* Do not change the default value */
}

static uint8_t getBatteryLevelLocal(void)
{
	if (getBatteryLevelUser != NULL) {
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <getBatteryLevelLocal+0xc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	b103      	cbz	r3, 8005450 <getBatteryLevelLocal+0x8>
		return getBatteryLevelUser();
 800544e:	4718      	bx	r3
	}

	return 255;
}
 8005450:	20ff      	movs	r0, #255	; 0xff
 8005452:	4770      	bx	lr
 8005454:	20000fe8 	.word	0x20000fe8

08005458 <lorawan_init>:

	return 0;
}

static int lorawan_init(const struct device *dev)
{
 8005458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
 800545a:	4b14      	ldr	r3, [pc, #80]	; (80054ac <lorawan_init+0x54>)
	LoRaMacStatus_t status;

	sys_slist_init(&dl_callbacks);

	macPrimitives.MacMcpsConfirm = McpsConfirm;
 800545c:	4814      	ldr	r0, [pc, #80]	; (80054b0 <lorawan_init+0x58>)
	macPrimitives.MacMcpsIndication = McpsIndication;
	macPrimitives.MacMlmeConfirm = MlmeConfirm;
	macPrimitives.MacMlmeIndication = MlmeIndication;
	macCallbacks.GetBatteryLevel = getBatteryLevelLocal;
 800545e:	4915      	ldr	r1, [pc, #84]	; (80054b4 <lorawan_init+0x5c>)
 8005460:	2400      	movs	r4, #0
	list->tail = NULL;
 8005462:	e9c3 4400 	strd	r4, r4, [r3]
	macPrimitives.MacMcpsConfirm = McpsConfirm;
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <lorawan_init+0x60>)
 8005468:	6003      	str	r3, [r0, #0]
	macPrimitives.MacMcpsIndication = McpsIndication;
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <lorawan_init+0x64>)
 800546c:	6043      	str	r3, [r0, #4]
	macPrimitives.MacMlmeConfirm = MlmeConfirm;
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <lorawan_init+0x68>)
 8005470:	6083      	str	r3, [r0, #8]
	macPrimitives.MacMlmeIndication = MlmeIndication;
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <lorawan_init+0x6c>)
 8005474:	60c3      	str	r3, [r0, #12]
	macCallbacks.GetBatteryLevel = getBatteryLevelLocal;
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <lorawan_init+0x70>)
	macCallbacks.GetTemperatureLevel = NULL;
	macCallbacks.NvmDataChange = NULL;
 8005478:	608c      	str	r4, [r1, #8]
	macCallbacks.GetTemperatureLevel = NULL;
 800547a:	e9c1 3400 	strd	r3, r4, [r1]
	macCallbacks.MacProcessNotify = OnMacProcessNotify;

	status = LoRaMacInitialization(&macPrimitives, &macCallbacks,
 800547e:	2208      	movs	r2, #8
	macCallbacks.MacProcessNotify = OnMacProcessNotify;
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <lorawan_init+0x74>)
 8005482:	60cb      	str	r3, [r1, #12]
	status = LoRaMacInitialization(&macPrimitives, &macCallbacks,
 8005484:	f004 f848 	bl	8009518 <LoRaMacInitialization>
				       LORAWAN_REGION);
	if (status != LORAMAC_STATUS_OK) {
 8005488:	b170      	cbz	r0, 80054a8 <lorawan_init+0x50>
		LOG_ERR("LoRaMacInitialization failed: %s",
 800548a:	f000 fabf 	bl	8005a0c <lorawan_status2str>
 800548e:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <lorawan_init+0x78>)
 8005490:	9003      	str	r0, [sp, #12]
 8005492:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8005496:	4620      	mov	r0, r4
 8005498:	490e      	ldr	r1, [pc, #56]	; (80054d4 <lorawan_init+0x7c>)
 800549a:	9400      	str	r4, [sp, #0]
 800549c:	4623      	mov	r3, r4
 800549e:	2201      	movs	r2, #1
 80054a0:	f00d f93f 	bl	8012722 <z_log_msg2_runtime_create.constprop.0>
			lorawan_status2str(status));
		return -EINVAL;
 80054a4:	f06f 0015 	mvn.w	r0, #21
	}

	LOG_DBG("LoRaMAC Initialized");

	return 0;
}
 80054a8:	b004      	add	sp, #16
 80054aa:	bd10      	pop	{r4, pc}
 80054ac:	20000fdc 	.word	0x20000fdc
 80054b0:	20000ffc 	.word	0x20000ffc
 80054b4:	20000fec 	.word	0x20000fec
 80054b8:	080055b9 	.word	0x080055b9
 80054bc:	08005535 	.word	0x08005535
 80054c0:	0800560d 	.word	0x0800560d
 80054c4:	0801271d 	.word	0x0801271d
 80054c8:	08005449 	.word	0x08005449
 80054cc:	0801271f 	.word	0x0801271f
 80054d0:	080198c6 	.word	0x080198c6
 80054d4:	080180c8 	.word	0x080180c8

080054d8 <datarate_observe>:
{
 80054d8:	b530      	push	{r4, r5, lr}
	if ((mibGet.Param.ChannelsDatarate != current_datarate) ||
 80054da:	4c12      	ldr	r4, [pc, #72]	; (8005524 <datarate_observe+0x4c>)
{
 80054dc:	b091      	sub	sp, #68	; 0x44
	mibGet.Type = MIB_CHANNELS_DATARATE;
 80054de:	232d      	movs	r3, #45	; 0x2d
{
 80054e0:	4605      	mov	r5, r0
	LoRaMacMibGetRequestConfirm(&mibGet);
 80054e2:	a807      	add	r0, sp, #28
	mibGet.Type = MIB_CHANNELS_DATARATE;
 80054e4:	f88d 301c 	strb.w	r3, [sp, #28]
	LoRaMacMibGetRequestConfirm(&mibGet);
 80054e8:	f004 fa28 	bl	800993c <LoRaMacMibGetRequestConfirm>
	if ((mibGet.Param.ChannelsDatarate != current_datarate) ||
 80054ec:	f99d 3020 	ldrsb.w	r3, [sp, #32]
 80054f0:	7822      	ldrb	r2, [r4, #0]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d100      	bne.n	80054f8 <datarate_observe+0x20>
 80054f6:	b195      	cbz	r5, 800551e <datarate_observe+0x46>
		current_datarate = mibGet.Param.ChannelsDatarate;
 80054f8:	b2d8      	uxtb	r0, r3
		if (dr_change_cb) {
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <datarate_observe+0x50>)
		current_datarate = mibGet.Param.ChannelsDatarate;
 80054fc:	7020      	strb	r0, [r4, #0]
		if (dr_change_cb) {
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	b103      	cbz	r3, 8005504 <datarate_observe+0x2c>
			dr_change_cb(current_datarate);
 8005502:	4798      	blx	r3
		LOG_INF("Datarate changed: DR_%d", current_datarate);
 8005504:	7823      	ldrb	r3, [r4, #0]
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <datarate_observe+0x54>)
 8005508:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800550c:	2303      	movs	r3, #3
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	4807      	ldr	r0, [pc, #28]	; (8005530 <datarate_observe+0x58>)
 8005512:	2300      	movs	r3, #0
 8005514:	aa03      	add	r2, sp, #12
 8005516:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800551a:	f00d f83f 	bl	801259c <z_impl_z_log_msg2_static_create>
}
 800551e:	b011      	add	sp, #68	; 0x44
 8005520:	bd30      	pop	{r4, r5, pc}
 8005522:	bf00      	nop
 8005524:	2000244b 	.word	0x2000244b
 8005528:	20000fe4 	.word	0x20000fe4
 800552c:	080198e7 	.word	0x080198e7
 8005530:	080180c8 	.word	0x080180c8

08005534 <McpsIndication>:
{
 8005534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005536:	4605      	mov	r5, r0
	if (mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8005538:	7840      	ldrb	r0, [r0, #1]
{
 800553a:	b085      	sub	sp, #20
	if (mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 800553c:	b170      	cbz	r0, 800555c <McpsIndication+0x28>
		LOG_ERR("McpsIndication failed : %s",
 800553e:	f000 fa71 	bl	8005a24 <lorawan_eventinfo2str>
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <McpsIndication+0x74>)
 8005544:	9302      	str	r3, [sp, #8]
 8005546:	2300      	movs	r3, #0
 8005548:	9003      	str	r0, [sp, #12]
 800554a:	e9cd 3300 	strd	r3, r3, [sp]
 800554e:	4917      	ldr	r1, [pc, #92]	; (80055ac <McpsIndication+0x78>)
 8005550:	2201      	movs	r2, #1
 8005552:	4618      	mov	r0, r3
 8005554:	f00d f8e5 	bl	8012722 <z_log_msg2_runtime_create.constprop.0>
}
 8005558:	b005      	add	sp, #20
 800555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (lorawan_adr_enable) {
 800555c:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <McpsIndication+0x7c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	b10b      	cbz	r3, 8005566 <McpsIndication+0x32>
		datarate_observe(false);
 8005562:	f7ff ffb9 	bl	80054d8 <datarate_observe>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8005566:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <McpsIndication+0x80>)
 8005568:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
 800556a:	2c00      	cmp	r4, #0
 800556c:	d0f4      	beq.n	8005558 <McpsIndication+0x24>
 800556e:	3c08      	subs	r4, #8
		if ((cb->port == LW_RECV_PORT_ANY) ||
 8005570:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005574:	8823      	ldrh	r3, [r4, #0]
		    (cb->port == mcpsIndication->Port)) {
 8005576:	78e8      	ldrb	r0, [r5, #3]
		if ((cb->port == LW_RECV_PORT_ANY) ||
 8005578:	42bb      	cmp	r3, r7
 800557a:	d001      	beq.n	8005580 <McpsIndication+0x4c>
 800557c:	4283      	cmp	r3, r0
 800557e:	d10d      	bne.n	800559c <McpsIndication+0x68>
			cb->cb(mcpsIndication->Port,
 8005580:	68ab      	ldr	r3, [r5, #8]
 8005582:	7969      	ldrb	r1, [r5, #5]
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	7b2b      	ldrb	r3, [r5, #12]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	3900      	subs	r1, #0
 800558c:	6866      	ldr	r6, [r4, #4]
 800558e:	f995 3010 	ldrsb.w	r3, [r5, #16]
 8005592:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8005596:	bf18      	it	ne
 8005598:	2101      	movne	r1, #1
 800559a:	47b0      	blx	r6
	return node->next;
 800559c:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
 800559e:	2c00      	cmp	r4, #0
 80055a0:	d0da      	beq.n	8005558 <McpsIndication+0x24>
 80055a2:	3c08      	subs	r4, #8
 80055a4:	e7e6      	b.n	8005574 <McpsIndication+0x40>
 80055a6:	bf00      	nop
 80055a8:	080198ff 	.word	0x080198ff
 80055ac:	080180c8 	.word	0x080180c8
 80055b0:	2000244f 	.word	0x2000244f
 80055b4:	20000fdc 	.word	0x20000fdc

080055b8 <McpsConfirm>:
{
 80055b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055ba:	4604      	mov	r4, r0
	if (mcpsConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 80055bc:	7840      	ldrb	r0, [r0, #1]
 80055be:	b160      	cbz	r0, 80055da <McpsConfirm+0x22>
		LOG_ERR("McpsRequest failed : %s",
 80055c0:	f000 fa30 	bl	8005a24 <lorawan_eventinfo2str>
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <McpsConfirm+0x40>)
 80055c6:	9302      	str	r3, [sp, #8]
 80055c8:	2300      	movs	r3, #0
 80055ca:	9003      	str	r0, [sp, #12]
 80055cc:	e9cd 3300 	strd	r3, r3, [sp]
 80055d0:	490a      	ldr	r1, [pc, #40]	; (80055fc <McpsConfirm+0x44>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f00d f8a4 	bl	8012722 <z_log_msg2_runtime_create.constprop.0>
	if (lorawan_adr_enable) {
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <McpsConfirm+0x48>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b113      	cbz	r3, 80055e6 <McpsConfirm+0x2e>
		datarate_observe(false);
 80055e0:	2000      	movs	r0, #0
 80055e2:	f7ff ff79 	bl	80054d8 <datarate_observe>
	last_mcps_confirm_status = mcpsConfirm->Status;
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <McpsConfirm+0x4c>)
 80055e8:	7862      	ldrb	r2, [r4, #1]
 80055ea:	701a      	strb	r2, [r3, #0]
	z_impl_k_sem_give(sem);
 80055ec:	4806      	ldr	r0, [pc, #24]	; (8005608 <McpsConfirm+0x50>)
}
 80055ee:	b004      	add	sp, #16
 80055f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f4:	f00a bcb6 	b.w	800ff64 <z_impl_k_sem_give>
 80055f8:	0801991a 	.word	0x0801991a
 80055fc:	080180c8 	.word	0x080180c8
 8005600:	2000244f 	.word	0x2000244f
 8005604:	2000244d 	.word	0x2000244d
 8005608:	200003b0 	.word	0x200003b0

0800560c <MlmeConfirm>:
{
 800560c:	b530      	push	{r4, r5, lr}
	if (mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 800560e:	7845      	ldrb	r5, [r0, #1]
{
 8005610:	b095      	sub	sp, #84	; 0x54
 8005612:	4604      	mov	r4, r0
	if (mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8005614:	b1ad      	cbz	r5, 8005642 <MlmeConfirm+0x36>
		LOG_ERR("MlmeConfirm failed : %s",
 8005616:	4628      	mov	r0, r5
 8005618:	f000 fa04 	bl	8005a24 <lorawan_eventinfo2str>
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <MlmeConfirm+0x7c>)
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	2300      	movs	r3, #0
 8005622:	9003      	str	r0, [sp, #12]
 8005624:	e9cd 3300 	strd	r3, r3, [sp]
 8005628:	4918      	ldr	r1, [pc, #96]	; (800568c <MlmeConfirm+0x80>)
 800562a:	2201      	movs	r2, #1
 800562c:	4618      	mov	r0, r3
 800562e:	f00d f878 	bl	8012722 <z_log_msg2_runtime_create.constprop.0>
	last_mlme_confirm_status = mlmeConfirm->Status;
 8005632:	4b17      	ldr	r3, [pc, #92]	; (8005690 <MlmeConfirm+0x84>)
 8005634:	7862      	ldrb	r2, [r4, #1]
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	4816      	ldr	r0, [pc, #88]	; (8005694 <MlmeConfirm+0x88>)
 800563a:	f00a fc93 	bl	800ff64 <z_impl_k_sem_give>
}
 800563e:	b015      	add	sp, #84	; 0x54
 8005640:	bd30      	pop	{r4, r5, pc}
	switch (mlmeConfirm->MlmeRequest) {
 8005642:	7803      	ldrb	r3, [r0, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d00a      	beq.n	800565e <MlmeConfirm+0x52>
 8005648:	2b04      	cmp	r3, #4
 800564a:	d1f2      	bne.n	8005632 <MlmeConfirm+0x26>
		LOG_INF("Link check not implemented yet!");
 800564c:	4b12      	ldr	r3, [pc, #72]	; (8005698 <MlmeConfirm+0x8c>)
 800564e:	930e      	str	r3, [sp, #56]	; 0x38
 8005650:	2302      	movs	r3, #2
 8005652:	930d      	str	r3, [sp, #52]	; 0x34
 8005654:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8005658:	462b      	mov	r3, r5
 800565a:	aa0d      	add	r2, sp, #52	; 0x34
 800565c:	e00f      	b.n	800567e <MlmeConfirm+0x72>
		mibGet.Type = MIB_DEV_ADDR;
 800565e:	2307      	movs	r3, #7
		LoRaMacMibGetRequestConfirm(&mibGet);
 8005660:	a80a      	add	r0, sp, #40	; 0x28
		mibGet.Type = MIB_DEV_ADDR;
 8005662:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		LoRaMacMibGetRequestConfirm(&mibGet);
 8005666:	f004 f969 	bl	800993c <LoRaMacMibGetRequestConfirm>
		LOG_INF("Joined network! DevAddr: %08x", mibGet.Param.DevAddr);
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <MlmeConfirm+0x90>)
 800566c:	9308      	str	r3, [sp, #32]
 800566e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	2303      	movs	r3, #3
 8005674:	9307      	str	r3, [sp, #28]
 8005676:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800567a:	462b      	mov	r3, r5
 800567c:	aa07      	add	r2, sp, #28
 800567e:	4803      	ldr	r0, [pc, #12]	; (800568c <MlmeConfirm+0x80>)
 8005680:	f00c ff8c 	bl	801259c <z_impl_z_log_msg2_static_create>
		break;
 8005684:	e7d5      	b.n	8005632 <MlmeConfirm+0x26>
 8005686:	bf00      	nop
 8005688:	08019932 	.word	0x08019932
 800568c:	080180c8 	.word	0x080180c8
 8005690:	2000244e 	.word	0x2000244e
 8005694:	200003c8 	.word	0x200003c8
 8005698:	08019968 	.word	0x08019968
 800569c:	0801994a 	.word	0x0801994a

080056a0 <lorawan_join>:
{
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	4604      	mov	r4, r0
 80056a4:	b09c      	sub	sp, #112	; 0x70
	return z_impl_k_mutex_lock(mutex, timeout);
 80056a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ae:	485c      	ldr	r0, [pc, #368]	; (8005820 <lorawan_join+0x180>)
 80056b0:	f00a fb9e 	bl	800fdf0 <z_impl_k_mutex_lock>
	mib_req.Param.EnablePublicNetwork = true;
 80056b4:	2601      	movs	r6, #1
	mib_req.Type = MIB_PUBLIC_NETWORK;
 80056b6:	231d      	movs	r3, #29
	LoRaMacMibSetRequestConfirm(&mib_req);
 80056b8:	a80a      	add	r0, sp, #40	; 0x28
	mib_req.Type = MIB_PUBLIC_NETWORK;
 80056ba:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	mib_req.Param.EnablePublicNetwork = true;
 80056be:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80056c2:	f004 fa11 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	if (join_cfg->mode == LORAWAN_ACT_OTAA) {
 80056c6:	7d25      	ldrb	r5, [r4, #20]
 80056c8:	2d00      	cmp	r5, #0
 80056ca:	d153      	bne.n	8005774 <lorawan_join+0xd4>
	mlme_req.Req.Join.Datarate = default_datarate;
 80056cc:	4b55      	ldr	r3, [pc, #340]	; (8005824 <lorawan_join+0x184>)
	mlme_req.Type = MLME_JOIN;
 80056ce:	f88d 6014 	strb.w	r6, [sp, #20]
	mlme_req.Req.Join.Datarate = default_datarate;
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f88d 3019 	strb.w	r3, [sp, #25]
	mlme_req.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80056d8:	2302      	movs	r3, #2
 80056da:	f88d 3018 	strb.w	r3, [sp, #24]
	mib_req.Type = MIB_DEV_EUI;
 80056de:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80056e2:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.DevEui = join_cfg->dev_eui;
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80056e8:	f004 f9fe 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_JOIN_EUI;
 80056ec:	2303      	movs	r3, #3
 80056ee:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80056f2:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.JoinEui = join_cfg->otaa.join_eui;
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80056f8:	f004 f9f6 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_KEY;
 80056fc:	2309      	movs	r3, #9
 80056fe:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005702:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.NwkKey = join_cfg->otaa.nwk_key;
 8005704:	6863      	ldr	r3, [r4, #4]
 8005706:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005708:	f004 f9ee 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_APP_KEY;
 800570c:	2308      	movs	r3, #8
 800570e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005712:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.AppKey = join_cfg->otaa.app_key;
 8005714:	68a3      	ldr	r3, [r4, #8]
 8005716:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005718:	f004 f9e6 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	return LoRaMacMlmeRequest(&mlme_req);
 800571c:	a805      	add	r0, sp, #20
 800571e:	f004 fc8d 	bl	800a03c <LoRaMacMlmeRequest>
		if (status != LORAMAC_STATUS_OK) {
 8005722:	4604      	mov	r4, r0
 8005724:	b1c0      	cbz	r0, 8005758 <lorawan_join+0xb8>
			LOG_ERR("OTAA join failed: %s",
 8005726:	f000 f971 	bl	8005a0c <lorawan_status2str>
 800572a:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <lorawan_join+0x188>)
 800572c:	9003      	str	r0, [sp, #12]
 800572e:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8005732:	4628      	mov	r0, r5
 8005734:	493d      	ldr	r1, [pc, #244]	; (800582c <lorawan_join+0x18c>)
 8005736:	9500      	str	r5, [sp, #0]
 8005738:	462b      	mov	r3, r5
 800573a:	4632      	mov	r2, r6
 800573c:	f00c fff1 	bl	8012722 <z_log_msg2_runtime_create.constprop.0>
			ret = lorawan_status2errno(status);
 8005740:	4620      	mov	r0, r4
 8005742:	f000 f97b 	bl	8005a3c <lorawan_status2errno>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
 8005746:	4604      	mov	r4, r0
	if (ret == 0) {
 8005748:	2800      	cmp	r0, #0
 800574a:	d054      	beq.n	80057f6 <lorawan_join+0x156>
	return z_impl_k_mutex_unlock(mutex);
 800574c:	4834      	ldr	r0, [pc, #208]	; (8005820 <lorawan_join+0x180>)
 800574e:	f00a fbc7 	bl	800fee0 <z_impl_k_mutex_unlock>
}
 8005752:	4620      	mov	r0, r4
 8005754:	b01c      	add	sp, #112	; 0x70
 8005756:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
 8005758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575c:	4834      	ldr	r0, [pc, #208]	; (8005830 <lorawan_join+0x190>)
 800575e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005762:	f00a fc25 	bl	800ffb0 <z_impl_k_sem_take>
		if (last_mlme_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8005766:	4b33      	ldr	r3, [pc, #204]	; (8005834 <lorawan_join+0x194>)
 8005768:	7818      	ldrb	r0, [r3, #0]
 800576a:	2800      	cmp	r0, #0
 800576c:	d043      	beq.n	80057f6 <lorawan_join+0x156>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
 800576e:	f000 f977 	bl	8005a60 <lorawan_eventinfo2errno>
 8005772:	e7e8      	b.n	8005746 <lorawan_join+0xa6>
	} else if (join_cfg->mode == LORAWAN_ACT_ABP) {
 8005774:	2d01      	cmp	r5, #1
 8005776:	d150      	bne.n	800581a <lorawan_join+0x17a>
	mib_req.Type = MIB_ABP_LORAWAN_VERSION;
 8005778:	2335      	movs	r3, #53	; 0x35
 800577a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 800577e:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.AbpLrWanVersion.Value = LORAWAN_ABP_VERSION;
 8005780:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <lorawan_join+0x198>)
 8005782:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005784:	f004 f9b0 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NET_ID;
 8005788:	2306      	movs	r3, #6
 800578a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 800578e:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.NetID = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005794:	f004 f9a8 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_DEV_ADDR;
 8005798:	2307      	movs	r3, #7
 800579a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 800579e:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.DevAddr = join_cfg->abp.dev_addr;
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057a4:	f004 f9a0 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_F_NWK_S_INT_KEY;
 80057a8:	230c      	movs	r3, #12
 80057aa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057ae:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.FNwkSIntKey = join_cfg->abp.nwk_skey;
 80057b0:	68a3      	ldr	r3, [r4, #8]
 80057b2:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057b4:	f004 f998 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_S_NWK_S_INT_KEY;
 80057b8:	230d      	movs	r3, #13
 80057ba:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057be:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.SNwkSIntKey = join_cfg->abp.nwk_skey;
 80057c0:	68a3      	ldr	r3, [r4, #8]
 80057c2:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057c4:	f004 f990 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_S_ENC_KEY;
 80057c8:	230e      	movs	r3, #14
 80057ca:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057ce:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.NwkSEncKey = join_cfg->abp.nwk_skey;
 80057d0:	68a3      	ldr	r3, [r4, #8]
 80057d2:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057d4:	f004 f988 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_APP_S_KEY;
 80057d8:	230f      	movs	r3, #15
 80057da:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057de:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.AppSKey = join_cfg->abp.app_skey;
 80057e0:	6863      	ldr	r3, [r4, #4]
 80057e2:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057e4:	f004 f980 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057e8:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Type = MIB_NETWORK_ACTIVATION;
 80057ea:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
	mib_req.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80057ee:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80057f2:	f004 f979 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
		if (!lorawan_adr_enable) {
 80057f6:	4b11      	ldr	r3, [pc, #68]	; (800583c <lorawan_join+0x19c>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b94b      	cbnz	r3, 8005810 <lorawan_join+0x170>
			mib_req.Type = MIB_CHANNELS_DATARATE;
 80057fc:	232d      	movs	r3, #45	; 0x2d
 80057fe:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
			mib_req.Param.ChannelsDatarate = default_datarate;
 8005802:	4b08      	ldr	r3, [pc, #32]	; (8005824 <lorawan_join+0x184>)
			LoRaMacMibSetRequestConfirm(&mib_req);
 8005804:	a813      	add	r0, sp, #76	; 0x4c
			mib_req.Param.ChannelsDatarate = default_datarate;
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
			LoRaMacMibSetRequestConfirm(&mib_req);
 800580c:	f004 f96c 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
		datarate_observe(true);
 8005810:	2001      	movs	r0, #1
 8005812:	f7ff fe61 	bl	80054d8 <datarate_observe>
 8005816:	2400      	movs	r4, #0
 8005818:	e798      	b.n	800574c <lorawan_join+0xac>
		ret = -EINVAL;
 800581a:	f06f 0415 	mvn.w	r4, #21
 800581e:	e795      	b.n	800574c <lorawan_join+0xac>
 8005820:	20000370 	.word	0x20000370
 8005824:	2000244c 	.word	0x2000244c
 8005828:	08019988 	.word	0x08019988
 800582c:	080180c8 	.word	0x080180c8
 8005830:	200003c8 	.word	0x200003c8
 8005834:	2000244e 	.word	0x2000244e
 8005838:	01000300 	.word	0x01000300
 800583c:	2000244f 	.word	0x2000244f

08005840 <lorawan_set_datarate>:
{
 8005840:	b510      	push	{r4, lr}
	if (lorawan_adr_enable) {
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <lorawan_set_datarate+0x34>)
 8005844:	781b      	ldrb	r3, [r3, #0]
{
 8005846:	b08a      	sub	sp, #40	; 0x28
 8005848:	4604      	mov	r4, r0
	if (lorawan_adr_enable) {
 800584a:	b11b      	cbz	r3, 8005854 <lorawan_set_datarate+0x14>
		return -EINVAL;
 800584c:	f06f 0015 	mvn.w	r0, #21
}
 8005850:	b00a      	add	sp, #40	; 0x28
 8005852:	bd10      	pop	{r4, pc}
	mib_req.Type = MIB_CHANNELS_DATARATE;
 8005854:	232d      	movs	r3, #45	; 0x2d
	mib_req.Param.ChannelsDatarate = dr;
 8005856:	f88d 0008 	strb.w	r0, [sp, #8]
	if (LoRaMacMibSetRequestConfirm(&mib_req) != LORAMAC_STATUS_OK) {
 800585a:	a801      	add	r0, sp, #4
	mib_req.Type = MIB_CHANNELS_DATARATE;
 800585c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (LoRaMacMibSetRequestConfirm(&mib_req) != LORAMAC_STATUS_OK) {
 8005860:	f004 f942 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
 8005864:	2800      	cmp	r0, #0
 8005866:	d1f1      	bne.n	800584c <lorawan_set_datarate+0xc>
	default_datarate = dr;
 8005868:	4b03      	ldr	r3, [pc, #12]	; (8005878 <lorawan_set_datarate+0x38>)
 800586a:	701c      	strb	r4, [r3, #0]
	current_datarate = dr;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <lorawan_set_datarate+0x3c>)
 800586e:	701c      	strb	r4, [r3, #0]
	return 0;
 8005870:	e7ee      	b.n	8005850 <lorawan_set_datarate+0x10>
 8005872:	bf00      	nop
 8005874:	2000244f 	.word	0x2000244f
 8005878:	2000244c 	.word	0x2000244c
 800587c:	2000244b 	.word	0x2000244b

08005880 <lorawan_send>:
{
 8005880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005882:	4607      	mov	r7, r0
 8005884:	b08b      	sub	sp, #44	; 0x2c
 8005886:	4615      	mov	r5, r2
 8005888:	461c      	mov	r4, r3
	if (data == NULL) {
 800588a:	460e      	mov	r6, r1
 800588c:	2900      	cmp	r1, #0
 800588e:	d060      	beq.n	8005952 <lorawan_send+0xd2>
	return z_impl_k_mutex_lock(mutex, timeout);
 8005890:	4831      	ldr	r0, [pc, #196]	; (8005958 <lorawan_send+0xd8>)
 8005892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800589a:	f00a faa9 	bl	800fdf0 <z_impl_k_mutex_lock>
	status = LoRaMacQueryTxPossible(len, &txInfo);
 800589e:	a904      	add	r1, sp, #16
 80058a0:	4628      	mov	r0, r5
 80058a2:	f003 ffeb 	bl	800987c <LoRaMacQueryTxPossible>
	if (status != LORAMAC_STATUS_OK) {
 80058a6:	b388      	cbz	r0, 800590c <lorawan_send+0x8c>
		LOG_ERR("LoRaWAN Query Tx Possible Failed: %s",
 80058a8:	f000 f8b0 	bl	8005a0c <lorawan_status2str>
 80058ac:	2400      	movs	r4, #0
 80058ae:	4b2b      	ldr	r3, [pc, #172]	; (800595c <lorawan_send+0xdc>)
 80058b0:	9003      	str	r0, [sp, #12]
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	e9cd 4400 	strd	r4, r4, [sp]
 80058b8:	4929      	ldr	r1, [pc, #164]	; (8005960 <lorawan_send+0xe0>)
 80058ba:	4623      	mov	r3, r4
 80058bc:	2201      	movs	r2, #1
 80058be:	4620      	mov	r0, r4
 80058c0:	f00c ff2f 	bl	8012722 <z_log_msg2_runtime_create.constprop.0>
		empty_frame = true;
 80058c4:	2501      	movs	r5, #1
		mcpsReq.Type = MCPS_UNCONFIRMED;
 80058c6:	f88d 4014 	strb.w	r4, [sp, #20]
		mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80058ca:	9407      	str	r4, [sp, #28]
		mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80058cc:	f8ad 4020 	strh.w	r4, [sp, #32]
		mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 80058d0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
	status = LoRaMacMcpsRequest(&mcpsReq);
 80058d4:	a805      	add	r0, sp, #20
 80058d6:	f004 fc91 	bl	800a1fc <LoRaMacMcpsRequest>
	if (status != LORAMAC_STATUS_OK) {
 80058da:	4604      	mov	r4, r0
 80058dc:	b338      	cbz	r0, 800592e <lorawan_send+0xae>
		LOG_ERR("LoRaWAN Send failed: %s", lorawan_status2str(status));
 80058de:	f000 f895 	bl	8005a0c <lorawan_status2str>
 80058e2:	4b20      	ldr	r3, [pc, #128]	; (8005964 <lorawan_send+0xe4>)
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	2300      	movs	r3, #0
 80058e8:	e9cd 3300 	strd	r3, r3, [sp]
 80058ec:	491c      	ldr	r1, [pc, #112]	; (8005960 <lorawan_send+0xe0>)
 80058ee:	9003      	str	r0, [sp, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	4618      	mov	r0, r3
 80058f4:	f00c ff15 	bl	8012722 <z_log_msg2_runtime_create.constprop.0>
		ret = lorawan_status2errno(status);
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f89f 	bl	8005a3c <lorawan_status2errno>
 80058fe:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
 8005900:	4815      	ldr	r0, [pc, #84]	; (8005958 <lorawan_send+0xd8>)
 8005902:	f00a faed 	bl	800fee0 <z_impl_k_mutex_unlock>
}
 8005906:	4620      	mov	r0, r4
 8005908:	b00b      	add	sp, #44	; 0x2c
 800590a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (type) {
 800590c:	b164      	cbz	r4, 8005928 <lorawan_send+0xa8>
 800590e:	2c01      	cmp	r4, #1
 8005910:	d00a      	beq.n	8005928 <lorawan_send+0xa8>
		mcpsReq.Req.Unconfirmed.Datarate = current_datarate;
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <lorawan_send+0xe8>)
		mcpsReq.Req.Unconfirmed.fBufferSize = len;
 8005914:	f8ad 5020 	strh.w	r5, [sp, #32]
		mcpsReq.Req.Unconfirmed.Datarate = current_datarate;
 8005918:	781b      	ldrb	r3, [r3, #0]
		mcpsReq.Req.Unconfirmed.fPort = port;
 800591a:	f88d 7018 	strb.w	r7, [sp, #24]
		mcpsReq.Req.Unconfirmed.fBuffer = data;
 800591e:	9607      	str	r6, [sp, #28]
		mcpsReq.Req.Unconfirmed.Datarate = current_datarate;
 8005920:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	bool empty_frame = false;
 8005924:	2500      	movs	r5, #0
 8005926:	e7d5      	b.n	80058d4 <lorawan_send+0x54>
			mcpsReq.Type = MCPS_CONFIRMED;
 8005928:	f88d 4014 	strb.w	r4, [sp, #20]
			break;
 800592c:	e7f1      	b.n	8005912 <lorawan_send+0x92>
	return z_impl_k_sem_take(sem, timeout);
 800592e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005932:	480e      	ldr	r0, [pc, #56]	; (800596c <lorawan_send+0xec>)
 8005934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005938:	f00a fb3a 	bl	800ffb0 <z_impl_k_sem_take>
	if (last_mcps_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <lorawan_send+0xf0>)
 800593e:	7818      	ldrb	r0, [r3, #0]
 8005940:	b108      	cbz	r0, 8005946 <lorawan_send+0xc6>
		ret = lorawan_eventinfo2errno(last_mcps_confirm_status);
 8005942:	f000 f88d 	bl	8005a60 <lorawan_eventinfo2errno>
		ret = -EAGAIN;
 8005946:	2d00      	cmp	r5, #0
	int ret = 0;
 8005948:	4604      	mov	r4, r0
		ret = -EAGAIN;
 800594a:	bf18      	it	ne
 800594c:	f06f 040a 	mvnne.w	r4, #10
 8005950:	e7d6      	b.n	8005900 <lorawan_send+0x80>
		return -EINVAL;
 8005952:	f06f 0415 	mvn.w	r4, #21
 8005956:	e7d6      	b.n	8005906 <lorawan_send+0x86>
 8005958:	20000384 	.word	0x20000384
 800595c:	0801999d 	.word	0x0801999d
 8005960:	080180c8 	.word	0x080180c8
 8005964:	080199c2 	.word	0x080199c2
 8005968:	2000244b 	.word	0x2000244b
 800596c:	200003b0 	.word	0x200003b0
 8005970:	2000244d 	.word	0x2000244d

08005974 <lorawan_register_downlink_callback>:
	parent->next = child;
 8005974:	2300      	movs	r3, #0
 8005976:	6083      	str	r3, [r0, #8]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8005978:	4b05      	ldr	r3, [pc, #20]	; (8005990 <lorawan_register_downlink_callback+0x1c>)
 800597a:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&dl_callbacks, &cb->node);
 800597c:	f100 0208 	add.w	r2, r0, #8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8005980:	b911      	cbnz	r1, 8005988 <lorawan_register_downlink_callback+0x14>
	list->head = node;
 8005982:	e9c3 2200 	strd	r2, r2, [r3]
}
 8005986:	4770      	bx	lr
	parent->next = child;
 8005988:	600a      	str	r2, [r1, #0]
	list->tail = node;
 800598a:	605a      	str	r2, [r3, #4]
}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000fdc 	.word	0x20000fdc

08005994 <lorawan_register_dr_changed_callback>:
	dr_change_cb = cb;
 8005994:	4b01      	ldr	r3, [pc, #4]	; (800599c <lorawan_register_dr_changed_callback+0x8>)
 8005996:	6018      	str	r0, [r3, #0]
}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000fe4 	.word	0x20000fe4

080059a0 <lorawan_start>:
{
 80059a0:	b510      	push	{r4, lr}
 80059a2:	b090      	sub	sp, #64	; 0x40
	status = LoRaMacStart();
 80059a4:	f003 ff62 	bl	800986c <LoRaMacStart>
	if (status != LORAMAC_STATUS_OK) {
 80059a8:	4604      	mov	r4, r0
 80059aa:	b180      	cbz	r0, 80059ce <lorawan_start+0x2e>
		LOG_ERR("Failed to start the LoRaMAC stack: %s",
 80059ac:	f000 f82e 	bl	8005a0c <lorawan_status2str>
 80059b0:	4b12      	ldr	r3, [pc, #72]	; (80059fc <lorawan_start+0x5c>)
 80059b2:	9302      	str	r3, [sp, #8]
 80059b4:	2300      	movs	r3, #0
 80059b6:	9003      	str	r0, [sp, #12]
 80059b8:	e9cd 3300 	strd	r3, r3, [sp]
 80059bc:	4618      	mov	r0, r3
 80059be:	4910      	ldr	r1, [pc, #64]	; (8005a00 <lorawan_start+0x60>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	f00c feae 	bl	8012722 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
 80059c6:	f06f 0015 	mvn.w	r0, #21
}
 80059ca:	b010      	add	sp, #64	; 0x40
 80059cc:	bd10      	pop	{r4, pc}
	phy_params.Attribute = PHY_DEF_TX_DR;
 80059ce:	2306      	movs	r3, #6
	phy_param = RegionGetPhyParam(LORAWAN_REGION, &phy_params);
 80059d0:	a905      	add	r1, sp, #20
 80059d2:	2008      	movs	r0, #8
	phy_params.Attribute = PHY_DEF_TX_DR;
 80059d4:	f88d 3014 	strb.w	r3, [sp, #20]
	phy_param = RegionGetPhyParam(LORAWAN_REGION, &phy_params);
 80059d8:	f00e f908 	bl	8013bec <RegionGetPhyParam>
	default_datarate = phy_param.Value;
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <lorawan_start+0x64>)
 80059de:	b2c0      	uxtb	r0, r0
 80059e0:	7018      	strb	r0, [r3, #0]
	current_datarate = default_datarate;
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <lorawan_start+0x68>)
 80059e4:	7018      	strb	r0, [r3, #0]
	mib_req.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80059e6:	2330      	movs	r3, #48	; 0x30
 80059e8:	f88d 301c 	strb.w	r3, [sp, #28]
	LoRaMacMibSetRequestConfirm(&mib_req);
 80059ec:	a807      	add	r0, sp, #28
	mib_req.Param.SystemMaxRxError = CONFIG_LORAWAN_SYSTEM_MAX_RX_ERROR;
 80059ee:	2314      	movs	r3, #20
 80059f0:	9308      	str	r3, [sp, #32]
	LoRaMacMibSetRequestConfirm(&mib_req);
 80059f2:	f004 f879 	bl	8009ae8 <LoRaMacMibSetRequestConfirm>
	return 0;
 80059f6:	4620      	mov	r0, r4
 80059f8:	e7e7      	b.n	80059ca <lorawan_start+0x2a>
 80059fa:	bf00      	nop
 80059fc:	080199da 	.word	0x080199da
 8005a00:	080180c8 	.word	0x080180c8
 8005a04:	2000244c 	.word	0x2000244c
 8005a08:	2000244b 	.word	0x2000244b

08005a0c <lorawan_status2str>:
	[LORAMAC_STATUS_ERROR] = "Unknown error",
};

const char *lorawan_status2str(unsigned int status)
{
	if (status < ARRAY_SIZE(status2str)) {
 8005a0c:	2817      	cmp	r0, #23
		return status2str[status];
 8005a0e:	bf9a      	itte	ls
 8005a10:	4b02      	ldrls	r3, [pc, #8]	; (8005a1c <lorawan_status2str+0x10>)
 8005a12:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown status!";
 8005a16:	4802      	ldrhi	r0, [pc, #8]	; (8005a20 <lorawan_status2str+0x14>)
	}
}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	080183e4 	.word	0x080183e4
 8005a20:	08019a08 	.word	0x08019a08

08005a24 <lorawan_eventinfo2str>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = "Beacon not found",
};

const char *lorawan_eventinfo2str(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2str)) {
 8005a24:	280f      	cmp	r0, #15
		return eventinfo2str[status];
 8005a26:	bf9a      	itte	ls
 8005a28:	4b02      	ldrls	r3, [pc, #8]	; (8005a34 <lorawan_eventinfo2str+0x10>)
 8005a2a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown event!";
 8005a2e:	4802      	ldrhi	r0, [pc, #8]	; (8005a38 <lorawan_eventinfo2str+0x14>)
	}
}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	08018348 	.word	0x08018348
 8005a38:	08019a18 	.word	0x08019a18

08005a3c <lorawan_status2errno>:
	[LORAMAC_STATUS_MC_GROUP_UNDEFINED] = -EINVAL,
};

const int lorawan_status2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
 8005a3c:	2816      	cmp	r0, #22
{
 8005a3e:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
 8005a40:	d808      	bhi.n	8005a54 <lorawan_status2errno+0x18>
 8005a42:	4a06      	ldr	r2, [pc, #24]	; (8005a5c <lorawan_status2errno+0x20>)
 8005a44:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005a48:	b930      	cbnz	r0, 8005a58 <lorawan_status2errno+0x1c>
		return status2errno[status];
	} else {
		return status == LORAMAC_STATUS_OK ? 0 : -EINVAL;
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf18      	it	ne
 8005a4e:	f06f 0015 	mvnne.w	r0, #21
 8005a52:	4770      	bx	lr
 8005a54:	f06f 0015 	mvn.w	r0, #21
	}
}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	08018388 	.word	0x08018388

08005a60 <lorawan_eventinfo2errno>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = -EINVAL,
};

const int lorawan_eventinfo2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2errno) &&
 8005a60:	280f      	cmp	r0, #15
{
 8005a62:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(eventinfo2errno) &&
 8005a64:	d808      	bhi.n	8005a78 <lorawan_eventinfo2errno+0x18>
	    eventinfo2errno[status] != 0) {
 8005a66:	4a06      	ldr	r2, [pc, #24]	; (8005a80 <lorawan_eventinfo2errno+0x20>)
 8005a68:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
	if (status < ARRAY_SIZE(eventinfo2errno) &&
 8005a6c:	b930      	cbnz	r0, 8005a7c <lorawan_eventinfo2errno+0x1c>
		return eventinfo2errno[status];
	} else {
		return status == LORAMAC_EVENT_INFO_STATUS_OK ? 0 : -EINVAL;
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf18      	it	ne
 8005a72:	f06f 0015 	mvnne.w	r0, #21
 8005a76:	4770      	bx	lr
 8005a78:	f06f 0015 	mvn.w	r0, #21
	}
}
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	08018308 	.word	0x08018308

08005a84 <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <timer_callback+0x8>)
 8005a86:	f00a bba1 	b.w	80101cc <k_work_submit>
 8005a8a:	bf00      	nop
 8005a8c:	20000034 	.word	0x20000034

08005a90 <RtcBkupWrite>:

K_TIMER_DEFINE(lora_timer, timer_callback, NULL);

void RtcBkupWrite(uint32_t data0, uint32_t data1)
{
	backup_reg[0] = data0;
 8005a90:	4b01      	ldr	r3, [pc, #4]	; (8005a98 <RtcBkupWrite+0x8>)
 8005a92:	6018      	str	r0, [r3, #0]
	backup_reg[1] = data1;
 8005a94:	6059      	str	r1, [r3, #4]
}
 8005a96:	4770      	bx	lr
 8005a98:	2000100c 	.word	0x2000100c

08005a9c <RtcBkupRead>:

void RtcBkupRead(uint32_t *data0, uint32_t *data1)
{
	*data0 = backup_reg[0];
 8005a9c:	4b02      	ldr	r3, [pc, #8]	; (8005aa8 <RtcBkupRead+0xc>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
	*data1 = backup_reg[1];
 8005aa0:	685b      	ldr	r3, [r3, #4]
	*data0 = backup_reg[0];
 8005aa2:	6002      	str	r2, [r0, #0]
	*data1 = backup_reg[1];
 8005aa4:	600b      	str	r3, [r1, #0]
}
 8005aa6:	4770      	bx	lr
 8005aa8:	2000100c 	.word	0x2000100c

08005aac <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8005aac:	b508      	push	{r3, lr}
	return (k_uptime_get_32() - saved_time);
 8005aae:	f00c fe5a 	bl	8012766 <k_uptime_get_32>
 8005ab2:	4b02      	ldr	r3, [pc, #8]	; (8005abc <RtcGetTimerElapsedTime+0x10>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
}
 8005ab6:	1ac0      	subs	r0, r0, r3
 8005ab8:	bd08      	pop	{r3, pc}
 8005aba:	bf00      	nop
 8005abc:	20001014 	.word	0x20001014

08005ac0 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
 8005ac0:	4801      	ldr	r0, [pc, #4]	; (8005ac8 <RtcStopAlarm+0x8>)
 8005ac2:	f011 bd42 	b.w	801754a <z_impl_k_timer_stop>
 8005ac6:	bf00      	nop
 8005ac8:	200002b0 	.word	0x200002b0

08005acc <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
 8005acc:	b507      	push	{r0, r1, r2, lr}
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8005ace:	220a      	movs	r2, #10
 8005ad0:	fba0 2302 	umull	r2, r3, r0, r2
	z_impl_k_timer_start(timer, duration, period);
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e9cd 0100 	strd	r0, r1, [sp]
 8005adc:	4802      	ldr	r0, [pc, #8]	; (8005ae8 <RtcSetAlarm+0x1c>)
 8005ade:	f00b f8c3 	bl	8010c68 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8005ae2:	b003      	add	sp, #12
 8005ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ae8:	200002b0 	.word	0x200002b0

08005aec <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8005aec:	b508      	push	{r3, lr}
	saved_time = k_uptime_get_32();
 8005aee:	f00c fe3a 	bl	8012766 <k_uptime_get_32>
 8005af2:	4b01      	ldr	r3, [pc, #4]	; (8005af8 <RtcSetTimerContext+0xc>)
 8005af4:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8005af6:	bd08      	pop	{r3, pc}
 8005af8:	20001014 	.word	0x20001014

08005afc <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8005afc:	4b01      	ldr	r3, [pc, #4]	; (8005b04 <RtcGetTimerContext+0x8>)
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20001014 	.word	0x20001014

08005b08 <sx12xx_ev_rx_done>:
	return true;
}

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 8005b08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal *sig = dev_data.operation_done;

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
 8005b0c:	4c28      	ldr	r4, [pc, #160]	; (8005bb0 <sx12xx_ev_rx_done+0xa8>)
{
 8005b0e:	469a      	mov	sl, r3
	if (dev_data.async_rx_cb) {
 8005b10:	68a3      	ldr	r3, [r4, #8]
{
 8005b12:	4607      	mov	r7, r0
 8005b14:	460d      	mov	r5, r1
 8005b16:	4616      	mov	r6, r2
	if (dev_data.async_rx_cb) {
 8005b18:	b17b      	cbz	r3, 8005b3a <sx12xx_ev_rx_done+0x32>
		/* Start receiving again */
		Radio.Rx(0);
 8005b1a:	4b26      	ldr	r3, [pc, #152]	; (8005bb4 <sx12xx_ev_rx_done+0xac>)
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b20:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 8005b22:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005b26:	6820      	ldr	r0, [r4, #0]
 8005b28:	f8cd a000 	str.w	sl, [sp]
 8005b2c:	4633      	mov	r3, r6
 8005b2e:	462a      	mov	r2, r5
 8005b30:	4639      	mov	r1, r7
 8005b32:	47c0      	blx	r8
	/* Completely release modem */
	dev_data.operation_done = NULL;
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 8005b34:	b002      	add	sp, #8
 8005b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005b3a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8005b3e:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 8005b40:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8005b44:	f3bf 8f5b 	dmb	ish
 8005b48:	e852 1f00 	ldrex	r1, [r2]
 8005b4c:	2901      	cmp	r1, #1
 8005b4e:	d103      	bne.n	8005b58 <sx12xx_ev_rx_done+0x50>
 8005b50:	e842 3000 	strex	r0, r3, [r2]
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d1f7      	bne.n	8005b48 <sx12xx_ev_rx_done+0x40>
 8005b58:	f3bf 8f5b 	dmb	ish
 8005b5c:	4690      	mov	r8, r2
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005b5e:	d1e9      	bne.n	8005b34 <sx12xx_ev_rx_done+0x2c>
	if (size < *dev_data.rx_params.size) {
 8005b60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	42aa      	cmp	r2, r5
		*dev_data.rx_params.size = size;
 8005b66:	bf88      	it	hi
 8005b68:	701d      	strbhi	r5, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 8005b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b6c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	4639      	mov	r1, r7
 8005b72:	f011 fe5c 	bl	801782e <memcpy>
	if (dev_data.rx_params.rssi) {
 8005b76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b78:	b103      	cbz	r3, 8005b7c <sx12xx_ev_rx_done+0x74>
		*dev_data.rx_params.rssi = rssi;
 8005b7a:	801e      	strh	r6, [r3, #0]
	if (dev_data.rx_params.snr) {
 8005b7c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b7e:	b10b      	cbz	r3, 8005b84 <sx12xx_ev_rx_done+0x7c>
		*dev_data.rx_params.snr = snr;
 8005b80:	f883 a000 	strb.w	sl, [r3]
	Radio.Sleep();
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <sx12xx_ev_rx_done+0xac>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	4798      	blx	r3
	dev_data.operation_done = NULL;
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005b8e:	f3bf 8f5b 	dmb	ish
 8005b92:	e858 3f00 	ldrex	r3, [r8]
 8005b96:	e848 1200 	strex	r2, r1, [r8]
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	d1f9      	bne.n	8005b92 <sx12xx_ev_rx_done+0x8a>
 8005b9e:	f3bf 8f5b 	dmb	ish
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8005ba2:	4648      	mov	r0, r9
}
 8005ba4:	b002      	add	sp, #8
 8005ba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005baa:	f00b b90b 	b.w	8010dc4 <z_impl_k_poll_signal_raise>
 8005bae:	bf00      	nop
 8005bb0:	20001018 	.word	0x20001018
 8005bb4:	08018558 	.word	0x08018558

08005bb8 <modem_release.constprop.0>:
static bool modem_release(struct sx12xx_data *data)
 8005bb8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005bba:	4e13      	ldr	r6, [pc, #76]	; (8005c08 <modem_release.constprop.0+0x50>)
 8005bbc:	f3bf 8f5b 	dmb	ish
 8005bc0:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e854 2f00 	ldrex	r2, [r4]
 8005bca:	2a01      	cmp	r2, #1
 8005bcc:	d103      	bne.n	8005bd6 <modem_release.constprop.0+0x1e>
 8005bce:	e844 3100 	strex	r1, r3, [r4]
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	d1f7      	bne.n	8005bc6 <modem_release.constprop.0+0xe>
 8005bd6:	f3bf 8f5b 	dmb	ish
 8005bda:	bf0c      	ite	eq
 8005bdc:	2001      	moveq	r0, #1
 8005bde:	2000      	movne	r0, #0
 8005be0:	f04f 0500 	mov.w	r5, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005be4:	d10e      	bne.n	8005c04 <modem_release.constprop.0+0x4c>
	Radio.Sleep();
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <modem_release.constprop.0+0x54>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	4798      	blx	r3
	data->operation_done = NULL;
 8005bec:	6075      	str	r5, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005bee:	f3bf 8f5b 	dmb	ish
 8005bf2:	e854 3f00 	ldrex	r3, [r4]
 8005bf6:	e844 5200 	strex	r2, r5, [r4]
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	d1f9      	bne.n	8005bf2 <modem_release.constprop.0+0x3a>
 8005bfe:	f3bf 8f5b 	dmb	ish
	return true;
 8005c02:	2001      	movs	r0, #1
}
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	bf00      	nop
 8005c08:	20001018 	.word	0x20001018
 8005c0c:	08018558 	.word	0x08018558

08005c10 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
	struct k_poll_signal *sig = dev_data.operation_done;
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <sx12xx_ev_tx_done+0x1c>)
{
 8005c12:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8005c14:	685c      	ldr	r4, [r3, #4]

	if (modem_release(&dev_data)) {
 8005c16:	f7ff ffcf 	bl	8005bb8 <modem_release.constprop.0>
 8005c1a:	b130      	cbz	r0, 8005c2a <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
 8005c1c:	b12c      	cbz	r4, 8005c2a <sx12xx_ev_tx_done+0x1a>
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8005c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c26:	f00b b8cd 	b.w	8010dc4 <z_impl_k_poll_signal_raise>
 8005c2a:	bd10      	pop	{r4, pc}
 8005c2c:	20001018 	.word	0x20001018

08005c30 <__sx12xx_configure_pin>:
{
 8005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c32:	4604      	mov	r4, r0
 8005c34:	b087      	sub	sp, #28
	if (!device_is_ready(gpio->port)) {
 8005c36:	6800      	ldr	r0, [r0, #0]
{
 8005c38:	460e      	mov	r6, r1
 8005c3a:	f011 fa72 	bl	8017122 <z_device_is_ready>
 8005c3e:	6825      	ldr	r5, [r4, #0]
	if (!device_is_ready(gpio->port)) {
 8005c40:	4603      	mov	r3, r0
 8005c42:	b970      	cbnz	r0, 8005c62 <__sx12xx_configure_pin+0x32>
		LOG_ERR("GPIO device not ready %s", gpio->port->name);
 8005c44:	682a      	ldr	r2, [r5, #0]
 8005c46:	9203      	str	r2, [sp, #12]
 8005c48:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <__sx12xx_configure_pin+0x94>)
 8005c4a:	491f      	ldr	r1, [pc, #124]	; (8005cc8 <__sx12xx_configure_pin+0x98>)
 8005c4c:	9000      	str	r0, [sp, #0]
 8005c4e:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f00c fdc2 	bl	80127dc <z_log_msg2_runtime_create.constprop.0>
		return -ENODEV;
 8005c58:	f06f 0512 	mvn.w	r5, #18
}
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	b007      	add	sp, #28
 8005c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
				  spec->pin,
				  spec->dt_flags | extra_flags);
 8005c62:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
 8005c64:	7921      	ldrb	r1, [r4, #4]
 8005c66:	4333      	orrs	r3, r6
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005c68:	02d8      	lsls	r0, r3, #11
	const struct gpio_driver_api *api =
 8005c6a:	f8d5 c008 	ldr.w	ip, [r5, #8]
	struct gpio_driver_data *data =
 8005c6e:	692f      	ldr	r7, [r5, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005c70:	d506      	bpl.n	8005c80 <__sx12xx_configure_pin+0x50>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8005c72:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8005c76:	d003      	beq.n	8005c80 <__sx12xx_configure_pin+0x50>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8005c78:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005c7a:	bf48      	it	mi
 8005c7c:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005c80:	6838      	ldr	r0, [r7, #0]
 8005c82:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005c84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005c88:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8005c8a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005c8c:	bf4c      	ite	mi
 8005c8e:	4330      	orrmi	r0, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8005c90:	43b0      	bicpl	r0, r6
 8005c92:	6038      	str	r0, [r7, #0]
	return api->pin_configure(port, pin, flags);
 8005c94:	f8dc 3000 	ldr.w	r3, [ip]
 8005c98:	4628      	mov	r0, r5
 8005c9a:	4798      	blx	r3
	if (err) {
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d0dc      	beq.n	8005c5c <__sx12xx_configure_pin+0x2c>
		LOG_ERR("Cannot configure gpio %s %d: %d", gpio->port->name,
 8005ca2:	7923      	ldrb	r3, [r4, #4]
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	9005      	str	r0, [sp, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	9303      	str	r3, [sp, #12]
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <__sx12xx_configure_pin+0x9c>)
 8005cb0:	9302      	str	r3, [sp, #8]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e9cd 3300 	strd	r3, r3, [sp]
 8005cb8:	4903      	ldr	r1, [pc, #12]	; (8005cc8 <__sx12xx_configure_pin+0x98>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f00c fd8d 	bl	80127dc <z_log_msg2_runtime_create.constprop.0>
		return err;
 8005cc2:	e7cb      	b.n	8005c5c <__sx12xx_configure_pin+0x2c>
 8005cc4:	08019ca0 	.word	0x08019ca0
 8005cc8:	08018110 	.word	0x08018110
 8005ccc:	08019cb9 	.word	0x08019cb9

08005cd0 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005cd4:	4910      	ldr	r1, [pc, #64]	; (8005d18 <sx12xx_lora_send_async+0x48>)
 8005cd6:	f3bf 8f5b 	dmb	ish
 8005cda:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 8005cde:	2001      	movs	r0, #1
 8005ce0:	e854 6f00 	ldrex	r6, [r4]
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	d104      	bne.n	8005cf2 <sx12xx_lora_send_async+0x22>
 8005ce8:	e844 0c00 	strex	ip, r0, [r4]
 8005cec:	f1bc 0f00 	cmp.w	ip, #0
 8005cf0:	d1f6      	bne.n	8005ce0 <sx12xx_lora_send_async+0x10>
 8005cf2:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005cf6:	d10b      	bne.n	8005d10 <sx12xx_lora_send_async+0x40>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005cf8:	4e08      	ldr	r6, [pc, #32]	; (8005d1c <sx12xx_lora_send_async+0x4c>)
	dev_data.operation_done = async;
 8005cfa:	604b      	str	r3, [r1, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005cfc:	b2d4      	uxtb	r4, r2
 8005cfe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8005d00:	4621      	mov	r1, r4
 8005d02:	4798      	blx	r3

	Radio.Send(data, data_len);
 8005d04:	4628      	mov	r0, r5
 8005d06:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4798      	blx	r3

	return 0;
 8005d0c:	2000      	movs	r0, #0
}
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005d10:	f06f 000f 	mvn.w	r0, #15
 8005d14:	e7fb      	b.n	8005d0e <sx12xx_lora_send_async+0x3e>
 8005d16:	bf00      	nop
 8005d18:	20001018 	.word	0x20001018
 8005d1c:	08018558 	.word	0x08018558

08005d20 <sx12xx_lora_send>:
{
 8005d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005d24:	2600      	movs	r6, #0
{
 8005d26:	b095      	sub	sp, #84	; 0x54
	if (!dev_data.tx_cfg.frequency) {
 8005d28:	4f2a      	ldr	r7, [pc, #168]	; (8005dd4 <sx12xx_lora_send+0xb4>)
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005d2a:	ab05      	add	r3, sp, #20
{
 8005d2c:	4680      	mov	r8, r0
 8005d2e:	4689      	mov	r9, r1
 8005d30:	4614      	mov	r4, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005d32:	4631      	mov	r1, r6
 8005d34:	2210      	movs	r2, #16
 8005d36:	a809      	add	r0, sp, #36	; 0x24
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005d38:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005d3c:	e9cd 6607 	strd	r6, r6, [sp, #28]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005d40:	f011 fd9d 	bl	801787e <memset>
	if (!dev_data.tx_cfg.frequency) {
 8005d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005d46:	2501      	movs	r5, #1
 8005d48:	ab05      	add	r3, sp, #20
 8005d4a:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8005d4e:	930d      	str	r3, [sp, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d03c      	beq.n	8005dce <sx12xx_lora_send+0xae>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 8005d54:	4622      	mov	r2, r4
 8005d56:	4649      	mov	r1, r9
 8005d58:	4640      	mov	r0, r8
 8005d5a:	f7ff ffb9 	bl	8005cd0 <sx12xx_lora_send_async>
	if (ret < 0) {
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	db1a      	blt.n	8005d98 <sx12xx_lora_send+0x78>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8005d62:	b2e4      	uxtb	r4, r4
 8005d64:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8005d68:	4c1b      	ldr	r4, [pc, #108]	; (8005dd8 <sx12xx_lora_send+0xb8>)
 8005d6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d6c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8005d76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005d7a:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8005d7c:	9503      	str	r5, [sp, #12]
 8005d7e:	4628      	mov	r0, r5
 8005d80:	47a0      	blx	r4
 8005d82:	220a      	movs	r2, #10
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8005d84:	40a8      	lsls	r0, r5
 8005d86:	fba0 2302 	umull	r2, r3, r0, r2
	return z_impl_k_poll(events, num_events, timeout);
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	a809      	add	r0, sp, #36	; 0x24
 8005d8e:	f00a ffbd 	bl	8010d0c <z_impl_k_poll>
	if (ret < 0) {
 8005d92:	42b0      	cmp	r0, r6
 8005d94:	db03      	blt.n	8005d9e <sx12xx_lora_send+0x7e>
	return 0;
 8005d96:	2000      	movs	r0, #0
}
 8005d98:	b015      	add	sp, #84	; 0x54
 8005d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Packet transmission failed!");
 8005d9e:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <sx12xx_lora_send+0xbc>)
 8005da0:	9312      	str	r3, [sp, #72]	; 0x48
 8005da2:	2302      	movs	r3, #2
 8005da4:	9311      	str	r3, [sp, #68]	; 0x44
 8005da6:	480e      	ldr	r0, [pc, #56]	; (8005de0 <sx12xx_lora_send+0xc0>)
 8005da8:	4633      	mov	r3, r6
 8005daa:	aa11      	add	r2, sp, #68	; 0x44
 8005dac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005db0:	f00c fbf4 	bl	801259c <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 8005db4:	f7ff ff00 	bl	8005bb8 <modem_release.constprop.0>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d1ec      	bne.n	8005d96 <sx12xx_lora_send+0x76>
 8005dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	a809      	add	r0, sp, #36	; 0x24
 8005dc8:	f00a ffa0 	bl	8010d0c <z_impl_k_poll>
 8005dcc:	e7e3      	b.n	8005d96 <sx12xx_lora_send+0x76>
		return -EINVAL;
 8005dce:	f06f 0015 	mvn.w	r0, #21
 8005dd2:	e7e1      	b.n	8005d98 <sx12xx_lora_send+0x78>
 8005dd4:	20001018 	.word	0x20001018
 8005dd8:	08018558 	.word	0x08018558
 8005ddc:	08019cd9 	.word	0x08019cd9
 8005de0:	08018110 	.word	0x08018110

08005de4 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8005de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de6:	b093      	sub	sp, #76	; 0x4c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005de8:	2500      	movs	r5, #0
{
 8005dea:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005dee:	ac03      	add	r4, sp, #12
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005df0:	2210      	movs	r2, #16
{
 8005df2:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005df4:	a807      	add	r0, sp, #28
 8005df6:	4629      	mov	r1, r5
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005df8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005dfc:	e9cd 5505 	strd	r5, r5, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005e00:	f011 fd3d 	bl	801787e <memset>
 8005e04:	4b26      	ldr	r3, [pc, #152]	; (8005ea0 <sx12xx_lora_recv+0xbc>)
 8005e06:	940b      	str	r4, [sp, #44]	; 0x2c
 8005e08:	2601      	movs	r6, #1
 8005e0a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8005e0e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005e12:	f3bf 8f5b 	dmb	ish
 8005e16:	e852 1f00 	ldrex	r1, [r2]
 8005e1a:	42a9      	cmp	r1, r5
 8005e1c:	d103      	bne.n	8005e26 <sx12xx_lora_recv+0x42>
 8005e1e:	e842 6000 	strex	r0, r6, [r2]
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d1f7      	bne.n	8005e16 <sx12xx_lora_recv+0x32>
 8005e26:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 8005e2a:	d135      	bne.n	8005e98 <sx12xx_lora_recv+0xb4>
	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
 8005e2c:	f10d 0207 	add.w	r2, sp, #7
	dev_data.operation_done = &done;
 8005e30:	e9c3 4501 	strd	r4, r5, [r3, #4]
	dev_data.rx_params.size = &size;
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
	dev_data.rx_params.rssi = rssi;
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005e36:	4c1b      	ldr	r4, [pc, #108]	; (8005ea4 <sx12xx_lora_recv+0xc0>)
	dev_data.rx_params.rssi = rssi;
 8005e38:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005e3a:	649a      	str	r2, [r3, #72]	; 0x48
	dev_data.rx_params.snr = snr;
 8005e3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005e3e:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.buf = data;
 8005e40:	641f      	str	r7, [r3, #64]	; 0x40
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005e42:	21ff      	movs	r1, #255	; 0xff
 8005e44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e46:	4630      	mov	r0, r6
 8005e48:	4798      	blx	r3
	Radio.Rx(0);
 8005e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	4798      	blx	r3
 8005e50:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005e54:	4631      	mov	r1, r6
 8005e56:	a807      	add	r0, sp, #28
 8005e58:	f00a ff58 	bl	8010d0c <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 8005e5c:	1e04      	subs	r4, r0, #0
 8005e5e:	da0a      	bge.n	8005e76 <sx12xx_lora_recv+0x92>
		if (!modem_release(&dev_data)) {
 8005e60:	f7ff feaa 	bl	8005bb8 <modem_release.constprop.0>
 8005e64:	b950      	cbnz	r0, 8005e7c <sx12xx_lora_recv+0x98>
 8005e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e6e:	4631      	mov	r1, r6
 8005e70:	a807      	add	r0, sp, #28
 8005e72:	f00a ff4b 	bl	8010d0c <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8005e76:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8005e7a:	e00a      	b.n	8005e92 <sx12xx_lora_recv+0xae>
		LOG_INF("Receive timeout");
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <sx12xx_lora_recv+0xc4>)
 8005e7e:	9310      	str	r3, [sp, #64]	; 0x40
 8005e80:	2302      	movs	r3, #2
 8005e82:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e84:	4809      	ldr	r0, [pc, #36]	; (8005eac <sx12xx_lora_recv+0xc8>)
 8005e86:	462b      	mov	r3, r5
 8005e88:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e8a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8005e8e:	f00c fb85 	bl	801259c <z_impl_z_log_msg2_static_create>
}
 8005e92:	4620      	mov	r0, r4
 8005e94:	b013      	add	sp, #76	; 0x4c
 8005e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
 8005e98:	f06f 040f 	mvn.w	r4, #15
 8005e9c:	e7f9      	b.n	8005e92 <sx12xx_lora_recv+0xae>
 8005e9e:	bf00      	nop
 8005ea0:	20001018 	.word	0x20001018
 8005ea4:	08018558 	.word	0x08018558
 8005ea8:	08019cf5 	.word	0x08019cf5
 8005eac:	08018110 	.word	0x08018110

08005eb0 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
 8005eb0:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
 8005eb2:	b939      	cbnz	r1, 8005ec4 <sx12xx_lora_recv_async+0x14>
		if (!modem_release(&dev_data)) {
 8005eb4:	f7ff fe80 	bl	8005bb8 <modem_release.constprop.0>
			/* Not receiving or already being stopped */
			return -EINVAL;
		}
		return 0;
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	bf0c      	ite	eq
 8005ebc:	f06f 0015 	mvneq.w	r0, #21
 8005ec0:	2000      	movne	r0, #0
	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
	Radio.Rx(0);

	return 0;
}
 8005ec2:	bd10      	pop	{r4, pc}
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <sx12xx_lora_recv_async+0x54>)
 8005ec6:	f3bf 8f5b 	dmb	ish
 8005eca:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005ece:	2001      	movs	r0, #1
 8005ed0:	e852 4f00 	ldrex	r4, [r2]
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d104      	bne.n	8005ee2 <sx12xx_lora_recv_async+0x32>
 8005ed8:	e842 0c00 	strex	ip, r0, [r2]
 8005edc:	f1bc 0f00 	cmp.w	ip, #0
 8005ee0:	d1f6      	bne.n	8005ed0 <sx12xx_lora_recv_async+0x20>
 8005ee2:	f3bf 8f5b 	dmb	ish
	if (!modem_acquire(&dev_data)) {
 8005ee6:	d109      	bne.n	8005efc <sx12xx_lora_recv_async+0x4c>
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005ee8:	4c07      	ldr	r4, [pc, #28]	; (8005f08 <sx12xx_lora_recv_async+0x58>)
	dev_data.async_rx_cb = cb;
 8005eea:	6099      	str	r1, [r3, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005eec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005eee:	21ff      	movs	r1, #255	; 0xff
 8005ef0:	4798      	blx	r3
	Radio.Rx(0);
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ef6:	4798      	blx	r3
	return 0;
 8005ef8:	2000      	movs	r0, #0
 8005efa:	e7e2      	b.n	8005ec2 <sx12xx_lora_recv_async+0x12>
		return -EBUSY;
 8005efc:	f06f 000f 	mvn.w	r0, #15
 8005f00:	e7df      	b.n	8005ec2 <sx12xx_lora_recv_async+0x12>
 8005f02:	bf00      	nop
 8005f04:	20001018 	.word	0x20001018
 8005f08:	08018558 	.word	0x08018558

08005f0c <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8005f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0e:	4d27      	ldr	r5, [pc, #156]	; (8005fac <sx12xx_lora_config+0xa0>)
 8005f10:	f3bf 8f5b 	dmb	ish
 8005f14:	b08b      	sub	sp, #44	; 0x2c
 8005f16:	460c      	mov	r4, r1
 8005f18:	2601      	movs	r6, #1
 8005f1a:	e855 3f00 	ldrex	r3, [r5]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <sx12xx_lora_config+0x1e>
 8005f22:	e845 6200 	strex	r2, r6, [r5]
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	d1f7      	bne.n	8005f1a <sx12xx_lora_config+0xe>
 8005f2a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8005f2e:	d139      	bne.n	8005fa4 <sx12xx_lora_config+0x98>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8005f30:	4f1f      	ldr	r7, [pc, #124]	; (8005fb0 <sx12xx_lora_config+0xa4>)
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4798      	blx	r3

	if (config->tx) {
 8005f38:	7ae3      	ldrb	r3, [r4, #11]
 8005f3a:	b303      	cbz	r3, 8005f7e <sx12xx_lora_config+0x72>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	6861      	ldr	r1, [r4, #4]
 8005f40:	f1a5 030c 	sub.w	r3, r5, #12
 8005f44:	c303      	stmia	r3!, {r0, r1}
 8005f46:	68a0      	ldr	r0, [r4, #8]
 8005f48:	6018      	str	r0, [r3, #0]
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005f50:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8005f54:	8923      	ldrh	r3, [r4, #8]
 8005f56:	9302      	str	r3, [sp, #8]
 8005f58:	79a3      	ldrb	r3, [r4, #6]
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	7963      	ldrb	r3, [r4, #5]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8005f64:	e9cd 2603 	strd	r2, r6, [sp, #12]
 8005f68:	69fd      	ldr	r5, [r7, #28]
 8005f6a:	7923      	ldrb	r3, [r4, #4]
 8005f6c:	f994 100a 	ldrsb.w	r1, [r4, #10]
 8005f70:	4630      	mov	r0, r6
 8005f72:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 8005f74:	f7ff fe20 	bl	8005bb8 <modem_release.constprop.0>
	return 0;
 8005f78:	2000      	movs	r0, #0
}
 8005f7a:	b00b      	add	sp, #44	; 0x2c
 8005f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8005f7e:	220a      	movs	r2, #10
 8005f80:	9202      	str	r2, [sp, #8]
 8005f82:	8922      	ldrh	r2, [r4, #8]
 8005f84:	9303      	str	r3, [sp, #12]
 8005f86:	e9cd 3200 	strd	r3, r2, [sp]
 8005f8a:	e9cd 3608 	strd	r3, r6, [sp, #32]
 8005f8e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005f92:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005f96:	69bd      	ldr	r5, [r7, #24]
 8005f98:	79a3      	ldrb	r3, [r4, #6]
 8005f9a:	7962      	ldrb	r2, [r4, #5]
 8005f9c:	7921      	ldrb	r1, [r4, #4]
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	47a8      	blx	r5
 8005fa2:	e7e7      	b.n	8005f74 <sx12xx_lora_config+0x68>
		return -EBUSY;
 8005fa4:	f06f 000f 	mvn.w	r0, #15
 8005fa8:	e7e7      	b.n	8005f7a <sx12xx_lora_config+0x6e>
 8005faa:	bf00      	nop
 8005fac:	20001054 	.word	0x20001054
 8005fb0:	08018558 	.word	0x08018558

08005fb4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	4611      	mov	r1, r2
 8005fba:	461a      	mov	r2, r3
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <sx12xx_lora_test_cw+0x38>)
 8005fbe:	f3bf 8f5b 	dmb	ish
 8005fc2:	2401      	movs	r4, #1
 8005fc4:	e853 5f00 	ldrex	r5, [r3]
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	d104      	bne.n	8005fd6 <sx12xx_lora_test_cw+0x22>
 8005fcc:	e843 4c00 	strex	ip, r4, [r3]
 8005fd0:	f1bc 0f00 	cmp.w	ip, #0
 8005fd4:	d1f6      	bne.n	8005fc4 <sx12xx_lora_test_cw+0x10>
 8005fd6:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005fda:	d104      	bne.n	8005fe6 <sx12xx_lora_test_cw+0x32>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8005fdc:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <sx12xx_lora_test_cw+0x3c>)
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	4798      	blx	r3
	return 0;
 8005fe2:	2000      	movs	r0, #0
}
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
 8005fe6:	f06f 000f 	mvn.w	r0, #15
 8005fea:	e7fb      	b.n	8005fe4 <sx12xx_lora_test_cw+0x30>
 8005fec:	20001054 	.word	0x20001054
 8005ff0:	08018558 	.word	0x08018558

08005ff4 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8005ff4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <sx12xx_init+0x3c>)
 8005ff8:	f3bf 8f5b 	dmb	ish
 8005ffc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006000:	2400      	movs	r4, #0
 8006002:	e852 1f00 	ldrex	r1, [r2]
 8006006:	e842 4500 	strex	r5, r4, [r2]
 800600a:	2d00      	cmp	r5, #0
 800600c:	d1f9      	bne.n	8006002 <sx12xx_init+0xe>
 800600e:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
 8006012:	4d08      	ldr	r5, [pc, #32]	; (8006034 <sx12xx_init+0x40>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8006014:	4a08      	ldr	r2, [pc, #32]	; (8006038 <sx12xx_init+0x44>)
 8006016:	60da      	str	r2, [r3, #12]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8006018:	4a08      	ldr	r2, [pc, #32]	; (800603c <sx12xx_init+0x48>)
	dev_data.dev = dev;
 800601a:	6018      	str	r0, [r3, #0]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 800601c:	615a      	str	r2, [r3, #20]
	Radio.Init(&dev_data.events);
 800601e:	f103 000c 	add.w	r0, r3, #12
 8006022:	682a      	ldr	r2, [r5, #0]
 8006024:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8006026:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006028:	4798      	blx	r3

	return 0;
}
 800602a:	4620      	mov	r0, r4
 800602c:	bd38      	pop	{r3, r4, r5, pc}
 800602e:	bf00      	nop
 8006030:	20001018 	.word	0x20001018
 8006034:	08018558 	.word	0x08018558
 8006038:	08005c11 	.word	0x08005c11
 800603c:	08005b09 	.word	0x08005b09

08006040 <sx126x_set_rx_enable>:
	gpio_pin_set_dt(&dev_config.tx_enable, value);
#endif
}

static void sx126x_set_rx_enable(int value)
{
 8006040:	4602      	mov	r2, r0
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8006042:	2105      	movs	r1, #5
 8006044:	4801      	ldr	r0, [pc, #4]	; (800604c <sx126x_set_rx_enable+0xc>)
 8006046:	f00c bbd9 	b.w	80127fc <gpio_pin_set.isra.0>
 800604a:	bf00      	nop
 800604c:	08017d00 	.word	0x08017d00

08006050 <sx126x_set_tx_enable>:
{
 8006050:	4602      	mov	r2, r0
 8006052:	2104      	movs	r1, #4
 8006054:	4801      	ldr	r0, [pc, #4]	; (800605c <sx126x_set_tx_enable+0xc>)
 8006056:	f00c bbd1 	b.w	80127fc <gpio_pin_set.isra.0>
 800605a:	bf00      	nop
 800605c:	08017d00 	.word	0x08017d00

08006060 <sx126x_dio1_irq_work_handler.part.0>:
uint32_t SX126xGetDio1PinState(void)
{
	return sx126x_get_dio1_pin_state(&dev_data);
}

static void sx126x_dio1_irq_work_handler(struct k_work *work)
 8006060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	LOG_DBG("Processing DIO1 interrupt");
	if (!dev_data.radio_dio_irq) {
		LOG_WRN("DIO1 interrupt without valid HAL IRQ callback.");
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <sx126x_dio1_irq_work_handler.part.0+0x20>)
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	2302      	movs	r3, #2
 8006068:	9303      	str	r3, [sp, #12]
 800606a:	4806      	ldr	r0, [pc, #24]	; (8006084 <sx126x_dio1_irq_work_handler.part.0+0x24>)
 800606c:	2300      	movs	r3, #0
 800606e:	aa03      	add	r2, sp, #12
 8006070:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8006074:	f00c fa92 	bl	801259c <z_impl_z_log_msg2_static_create>

	/* Re-enable the interrupt if we are not in sleep mode */
	if (dev_data.mode != MODE_SLEEP) {
		sx126x_dio1_irq_enable(&dev_data);
	}
}
 8006078:	b007      	add	sp, #28
 800607a:	f85d fb04 	ldr.w	pc, [sp], #4
 800607e:	bf00      	nop
 8006080:	08019d13 	.word	0x08019d13
 8006084:	08018108 	.word	0x08018108

08006088 <sx126x_dio1_irq_work_handler>:
{
 8006088:	b510      	push	{r4, lr}
	if (!dev_data.radio_dio_irq) {
 800608a:	4c0b      	ldr	r4, [pc, #44]	; (80060b8 <sx126x_dio1_irq_work_handler+0x30>)
 800608c:	69e3      	ldr	r3, [r4, #28]
 800608e:	b91b      	cbnz	r3, 8006098 <sx126x_dio1_irq_work_handler+0x10>
}
 8006090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006094:	f7ff bfe4 	b.w	8006060 <sx126x_dio1_irq_work_handler.part.0>
	dev_data.radio_dio_irq(NULL);
 8006098:	2000      	movs	r0, #0
 800609a:	4798      	blx	r3
	if (Radio.IrqProcess) {
 800609c:	4b07      	ldr	r3, [pc, #28]	; (80060bc <sx126x_dio1_irq_work_handler+0x34>)
 800609e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a0:	b103      	cbz	r3, 80060a4 <sx126x_dio1_irq_work_handler+0x1c>
		Radio.IrqProcess();
 80060a2:	4798      	blx	r3
	if (dev_data.mode != MODE_SLEEP) {
 80060a4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80060a8:	b123      	cbz	r3, 80060b4 <sx126x_dio1_irq_work_handler+0x2c>
}
 80060aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sx126x_dio1_irq_enable(&dev_data);
 80060ae:	4802      	ldr	r0, [pc, #8]	; (80060b8 <sx126x_dio1_irq_work_handler+0x30>)
 80060b0:	f000 b944 	b.w	800633c <sx126x_dio1_irq_enable>
}
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	bf00      	nop
 80060b8:	20001068 	.word	0x20001068
 80060bc:	08018558 	.word	0x08018558

080060c0 <sx126x_lora_init>:

static int sx126x_lora_init(const struct device *dev)
{
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret;

	LOG_DBG("Initializing %s", DT_INST_LABEL(0));

	if (sx12xx_configure_pin(antenna_enable, GPIO_OUTPUT_INACTIVE) ||
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 80060c2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
	const struct sx126x_config *config = dev->config;
 80060c6:	6847      	ldr	r7, [r0, #4]
{
 80060c8:	b087      	sub	sp, #28
 80060ca:	4605      	mov	r5, r0
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 80060cc:	4828      	ldr	r0, [pc, #160]	; (8006170 <sx126x_lora_init+0xb0>)
 80060ce:	f7ff fdaf 	bl	8005c30 <__sx12xx_configure_pin>
	if (sx12xx_configure_pin(antenna_enable, GPIO_OUTPUT_INACTIVE) ||
 80060d2:	b120      	cbz	r0, 80060de <sx126x_lora_init+0x1e>
	    sx12xx_configure_pin(tx_enable, GPIO_OUTPUT_INACTIVE)) {
		return -EIO;
 80060d4:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 80060d8:	4620      	mov	r0, r4
 80060da:	b007      	add	sp, #28
 80060dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    sx12xx_configure_pin(tx_enable, GPIO_OUTPUT_INACTIVE)) {
 80060de:	4825      	ldr	r0, [pc, #148]	; (8006174 <sx126x_lora_init+0xb4>)
 80060e0:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 80060e4:	f7ff fda4 	bl	8005c30 <__sx12xx_configure_pin>
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 80060e8:	4606      	mov	r6, r0
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d1f2      	bne.n	80060d4 <sx126x_lora_init+0x14>
	k_work_init(&dev_data.dio1_irq_work, sx126x_dio1_irq_work_handler);
 80060ee:	4922      	ldr	r1, [pc, #136]	; (8006178 <sx126x_lora_init+0xb8>)
 80060f0:	4822      	ldr	r0, [pc, #136]	; (800617c <sx126x_lora_init+0xbc>)
 80060f2:	f011 f8b0 	bl	8017256 <k_work_init>
	ret = sx126x_variant_init(dev);
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 f92a 	bl	8006350 <sx126x_variant_init>
	if (ret) {
 80060fc:	4604      	mov	r4, r0
 80060fe:	b158      	cbz	r0, 8006118 <sx126x_lora_init+0x58>
		LOG_ERR("Variant initialization failed");
 8006100:	4b1f      	ldr	r3, [pc, #124]	; (8006180 <sx126x_lora_init+0xc0>)
 8006102:	9304      	str	r3, [sp, #16]
 8006104:	2302      	movs	r3, #2
 8006106:	9303      	str	r3, [sp, #12]
 8006108:	481e      	ldr	r0, [pc, #120]	; (8006184 <sx126x_lora_init+0xc4>)
 800610a:	4633      	mov	r3, r6
 800610c:	aa03      	add	r2, sp, #12
 800610e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006112:	f00c fa43 	bl	801259c <z_impl_z_log_msg2_static_create>
		return ret;
 8006116:	e7df      	b.n	80060d8 <sx126x_lora_init+0x18>
	if (!device_is_ready(spec->bus)) {
 8006118:	6838      	ldr	r0, [r7, #0]
 800611a:	f011 f802 	bl	8017122 <z_device_is_ready>
 800611e:	b968      	cbnz	r0, 800613c <sx126x_lora_init+0x7c>
		LOG_ERR("SPI device not ready");
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <sx126x_lora_init+0xc8>)
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	2302      	movs	r3, #2
 8006126:	9303      	str	r3, [sp, #12]
 8006128:	4816      	ldr	r0, [pc, #88]	; (8006184 <sx126x_lora_init+0xc4>)
 800612a:	2300      	movs	r3, #0
 800612c:	aa03      	add	r2, sp, #12
 800612e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006132:	f00c fa33 	bl	801259c <z_impl_z_log_msg2_static_create>
		return -ENODEV;
 8006136:	f06f 0412 	mvn.w	r4, #18
 800613a:	e7cd      	b.n	80060d8 <sx126x_lora_init+0x18>
	if (spec->config.cs &&
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	b123      	cbz	r3, 800614a <sx126x_lora_init+0x8a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	f010 ffee 	bl	8017122 <z_device_is_ready>
	if (spec->config.cs &&
 8006146:	2800      	cmp	r0, #0
 8006148:	d0ea      	beq.n	8006120 <sx126x_lora_init+0x60>
	ret = sx12xx_init(dev);
 800614a:	4628      	mov	r0, r5
 800614c:	f7ff ff52 	bl	8005ff4 <sx12xx_init>
	if (ret < 0) {
 8006150:	1e05      	subs	r5, r0, #0
 8006152:	dac1      	bge.n	80060d8 <sx126x_lora_init+0x18>
		LOG_ERR("Failed to initialize SX12xx common");
 8006154:	4b0d      	ldr	r3, [pc, #52]	; (800618c <sx126x_lora_init+0xcc>)
 8006156:	9304      	str	r3, [sp, #16]
 8006158:	2302      	movs	r3, #2
 800615a:	9303      	str	r3, [sp, #12]
 800615c:	4809      	ldr	r0, [pc, #36]	; (8006184 <sx126x_lora_init+0xc4>)
 800615e:	2300      	movs	r3, #0
 8006160:	aa03      	add	r2, sp, #12
 8006162:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006166:	f00c fa19 	bl	801259c <z_impl_z_log_msg2_static_create>
		return ret;
 800616a:	462c      	mov	r4, r5
 800616c:	e7b4      	b.n	80060d8 <sx126x_lora_init+0x18>
 800616e:	bf00      	nop
 8006170:	0801845c 	.word	0x0801845c
 8006174:	08018454 	.word	0x08018454
 8006178:	08006089 	.word	0x08006089
 800617c:	20001074 	.word	0x20001074
 8006180:	08019d42 	.word	0x08019d42
 8006184:	08018108 	.word	0x08018108
 8006188:	08019d60 	.word	0x08019d60
 800618c:	08019d75 	.word	0x08019d75

08006190 <SX126xGetOperatingMode>:
}
 8006190:	4b01      	ldr	r3, [pc, #4]	; (8006198 <SX126xGetOperatingMode+0x8>)
 8006192:	f893 0020 	ldrb.w	r0, [r3, #32]
 8006196:	4770      	bx	lr
 8006198:	20001068 	.word	0x20001068

0800619c <SX126xSetOperatingMode>:
{
 800619c:	b508      	push	{r3, lr}
 800619e:	4603      	mov	r3, r0
	dev_data.mode = mode;
 80061a0:	4810      	ldr	r0, [pc, #64]	; (80061e4 <SX126xSetOperatingMode+0x48>)
	switch (mode) {
 80061a2:	2b04      	cmp	r3, #4
	dev_data.mode = mode;
 80061a4:	f880 3020 	strb.w	r3, [r0, #32]
	switch (mode) {
 80061a8:	d011      	beq.n	80061ce <SX126xSetOperatingMode+0x32>
 80061aa:	d805      	bhi.n	80061b8 <SX126xSetOperatingMode+0x1c>
 80061ac:	b1bb      	cbz	r3, 80061de <SX126xSetOperatingMode+0x42>
		sx126x_set_rx_enable(0);
 80061ae:	2000      	movs	r0, #0
 80061b0:	f7ff ff46 	bl	8006040 <sx126x_set_rx_enable>
		sx126x_set_tx_enable(0);
 80061b4:	2000      	movs	r0, #0
 80061b6:	e00e      	b.n	80061d6 <SX126xSetOperatingMode+0x3a>
	switch (mode) {
 80061b8:	3b05      	subs	r3, #5
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d8f7      	bhi.n	80061ae <SX126xSetOperatingMode+0x12>
		sx126x_set_tx_enable(0);
 80061be:	2000      	movs	r0, #0
 80061c0:	f7ff ff46 	bl	8006050 <sx126x_set_tx_enable>
}
 80061c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sx126x_set_rx_enable(1);
 80061c8:	2001      	movs	r0, #1
 80061ca:	f7ff bf39 	b.w	8006040 <sx126x_set_rx_enable>
		sx126x_set_rx_enable(0);
 80061ce:	2000      	movs	r0, #0
 80061d0:	f7ff ff36 	bl	8006040 <sx126x_set_rx_enable>
		sx126x_set_tx_enable(1);
 80061d4:	2001      	movs	r0, #1
}
 80061d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sx126x_set_tx_enable(0);
 80061da:	f7ff bf39 	b.w	8006050 <sx126x_set_tx_enable>
		sx126x_dio1_irq_disable(&dev_data);
 80061de:	f00c fbdf 	bl	80129a0 <sx126x_dio1_irq_disable>
 80061e2:	e7e4      	b.n	80061ae <SX126xSetOperatingMode+0x12>
 80061e4:	20001068 	.word	0x20001068

080061e8 <SX126xIoIrqInit>:
	dev_data.radio_dio_irq = dioIrq;
 80061e8:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <SX126xIoIrqInit+0x8>)
 80061ea:	61d8      	str	r0, [r3, #28]
}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20001068 	.word	0x20001068

080061f4 <SX126xReset>:
{
 80061f4:	b510      	push	{r4, lr}
	sx126x_reset(&dev_data);
 80061f6:	4c04      	ldr	r4, [pc, #16]	; (8006208 <SX126xReset+0x14>)
 80061f8:	4620      	mov	r0, r4
 80061fa:	f00c fbb6 	bl	801296a <sx126x_reset>
	dev_data.mode = MODE_STDBY_RC;
 80061fe:	2301      	movs	r3, #1
 8006200:	f884 3020 	strb.w	r3, [r4, #32]
}
 8006204:	bd10      	pop	{r4, pc}
 8006206:	bf00      	nop
 8006208:	20001068 	.word	0x20001068

0800620c <SX126xWaitOnBusy>:
{
 800620c:	b510      	push	{r4, lr}
	while (sx126x_is_busy(&dev_data)) {
 800620e:	4c05      	ldr	r4, [pc, #20]	; (8006224 <SX126xWaitOnBusy+0x18>)
 8006210:	4620      	mov	r0, r4
 8006212:	f000 f88b 	bl	800632c <sx126x_is_busy>
 8006216:	b900      	cbnz	r0, 800621a <SX126xWaitOnBusy+0xe>
}
 8006218:	bd10      	pop	{r4, pc}
	return z_impl_k_sleep(timeout);
 800621a:	2100      	movs	r1, #0
 800621c:	200a      	movs	r0, #10
 800621e:	f00a fae1 	bl	80107e4 <z_impl_k_sleep>
 8006222:	e7f5      	b.n	8006210 <SX126xWaitOnBusy+0x4>
 8006224:	20001068 	.word	0x20001068

08006228 <sx126x_spi_transceive.isra.0>:
static int sx126x_spi_transceive(uint8_t *req_tx, uint8_t *req_rx,
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	b092      	sub	sp, #72	; 0x48
 800622c:	460d      	mov	r5, r1
 800622e:	e9dd 6116 	ldrd	r6, r1, [sp, #88]	; 0x58
	const struct spi_buf tx_buf[] = {
 8006232:	e9cd 3106 	strd	r3, r1, [sp, #24]
	const struct spi_buf_set tx = {
 8006236:	ab04      	add	r3, sp, #16
	const struct spi_buf tx_buf[] = {
 8006238:	e9cd 0204 	strd	r0, r2, [sp, #16]
	const struct spi_buf rx_buf[] = {
 800623c:	e9cd 5208 	strd	r5, r2, [sp, #32]
	const struct spi_buf_set tx = {
 8006240:	9300      	str	r3, [sp, #0]
	const struct spi_buf_set rx = {
 8006242:	aa08      	add	r2, sp, #32
	const struct spi_buf_set tx = {
 8006244:	2302      	movs	r3, #2
static int sx126x_spi_transceive(uint8_t *req_tx, uint8_t *req_rx,
 8006246:	4604      	mov	r4, r0
	const struct spi_buf rx_buf[] = {
 8006248:	e9cd 610a 	strd	r6, r1, [sp, #40]	; 0x28
	const struct spi_buf_set rx = {
 800624c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	const struct spi_buf_set tx = {
 8006250:	9301      	str	r3, [sp, #4]
	SX126xCheckDeviceReady();
 8006252:	f00c fce2 	bl	8012c1a <SX126xCheckDeviceReady>
	if (!req_rx && !data_rx) {
 8006256:	4812      	ldr	r0, [pc, #72]	; (80062a0 <sx126x_spi_transceive.isra.0+0x78>)
 8006258:	b9dd      	cbnz	r5, 8006292 <sx126x_spi_transceive.isra.0+0x6a>
 800625a:	b9d6      	cbnz	r6, 8006292 <sx126x_spi_transceive.isra.0+0x6a>
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800625c:	6883      	ldr	r3, [r0, #8]
 800625e:	4911      	ldr	r1, [pc, #68]	; (80062a4 <sx126x_spi_transceive.isra.0+0x7c>)
 8006260:	681d      	ldr	r5, [r3, #0]
 8006262:	466a      	mov	r2, sp
 8006264:	4633      	mov	r3, r6
 8006266:	47a8      	blx	r5
	if (ret < 0) {
 8006268:	2800      	cmp	r0, #0
 800626a:	da0b      	bge.n	8006284 <sx126x_spi_transceive.isra.0+0x5c>
		LOG_ERR("SPI transaction failed: %i", ret);
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <sx126x_spi_transceive.isra.0+0x80>)
 800626e:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
 8006272:	2303      	movs	r3, #3
 8006274:	930f      	str	r3, [sp, #60]	; 0x3c
 8006276:	480d      	ldr	r0, [pc, #52]	; (80062ac <sx126x_spi_transceive.isra.0+0x84>)
 8006278:	2300      	movs	r3, #0
 800627a:	aa0f      	add	r2, sp, #60	; 0x3c
 800627c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8006280:	f00c f98c 	bl	801259c <z_impl_z_log_msg2_static_create>
	if (req_len >= 1 && req_tx[0] != RADIO_SET_SLEEP) {
 8006284:	7823      	ldrb	r3, [r4, #0]
 8006286:	2b84      	cmp	r3, #132	; 0x84
 8006288:	d001      	beq.n	800628e <sx126x_spi_transceive.isra.0+0x66>
		SX126xWaitOnBusy();
 800628a:	f7ff ffbf 	bl	800620c <SX126xWaitOnBusy>
}
 800628e:	b012      	add	sp, #72	; 0x48
 8006290:	bd70      	pop	{r4, r5, r6, pc}
 8006292:	6883      	ldr	r3, [r0, #8]
 8006294:	4903      	ldr	r1, [pc, #12]	; (80062a4 <sx126x_spi_transceive.isra.0+0x7c>)
 8006296:	681d      	ldr	r5, [r3, #0]
 8006298:	4801      	ldr	r0, [pc, #4]	; (80062a0 <sx126x_spi_transceive.isra.0+0x78>)
 800629a:	ab02      	add	r3, sp, #8
 800629c:	466a      	mov	r2, sp
 800629e:	e7e2      	b.n	8006266 <sx126x_spi_transceive.isra.0+0x3e>
 80062a0:	08017dc0 	.word	0x08017dc0
 80062a4:	08018448 	.word	0x08018448
 80062a8:	08019d98 	.word	0x08019d98
 80062ac:	08018108 	.word	0x08018108

080062b0 <SX126xWakeup>:
{
 80062b0:	b570      	push	{r4, r5, r6, lr}
	sx126x_dio1_irq_enable(&dev_data);
 80062b2:	4c16      	ldr	r4, [pc, #88]	; (800630c <SX126xWakeup+0x5c>)
{
 80062b4:	b08c      	sub	sp, #48	; 0x30
	sx126x_dio1_irq_enable(&dev_data);
 80062b6:	4620      	mov	r0, r4
 80062b8:	f000 f840 	bl	800633c <sx126x_dio1_irq_enable>
	uint8_t req[] = { RADIO_GET_STATUS, 0 };
 80062bc:	23c0      	movs	r3, #192	; 0xc0
 80062be:	f8ad 3004 	strh.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
 80062c2:	ab01      	add	r3, sp, #4
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	2302      	movs	r3, #2
 80062c8:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set tx = {
 80062ca:	2501      	movs	r5, #1
 80062cc:	ab02      	add	r3, sp, #8
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	9505      	str	r5, [sp, #20]
 80062d2:	480f      	ldr	r0, [pc, #60]	; (8006310 <SX126xWakeup+0x60>)
 80062d4:	490f      	ldr	r1, [pc, #60]	; (8006314 <SX126xWakeup+0x64>)
 80062d6:	6883      	ldr	r3, [r0, #8]
 80062d8:	aa04      	add	r2, sp, #16
 80062da:	681e      	ldr	r6, [r3, #0]
 80062dc:	2300      	movs	r3, #0
 80062de:	47b0      	blx	r6
	if (ret < 0) {
 80062e0:	2800      	cmp	r0, #0
 80062e2:	da0d      	bge.n	8006300 <SX126xWakeup+0x50>
		LOG_ERR("SPI transaction failed: %i", ret);
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <SX126xWakeup+0x68>)
 80062e6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80062ea:	2303      	movs	r3, #3
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	480b      	ldr	r0, [pc, #44]	; (800631c <SX126xWakeup+0x6c>)
 80062f0:	2300      	movs	r3, #0
 80062f2:	aa09      	add	r2, sp, #36	; 0x24
 80062f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80062f8:	f00c f950 	bl	801259c <z_impl_z_log_msg2_static_create>
}
 80062fc:	b00c      	add	sp, #48	; 0x30
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
	SX126xWaitOnBusy();
 8006300:	f7ff ff84 	bl	800620c <SX126xWaitOnBusy>
	dev_data.mode = MODE_STDBY_RC;
 8006304:	f884 5020 	strb.w	r5, [r4, #32]
 8006308:	e7f8      	b.n	80062fc <SX126xWakeup+0x4c>
 800630a:	bf00      	nop
 800630c:	20001068 	.word	0x20001068
 8006310:	08017dc0 	.word	0x08017dc0
 8006314:	08018448 	.word	0x08018448
 8006318:	08019d98 	.word	0x08019d98
 800631c:	08018108 	.word	0x08018108

08006320 <SX126xGetDio1PinState>:
	return sx126x_get_dio1_pin_state(&dev_data);
 8006320:	4801      	ldr	r0, [pc, #4]	; (8006328 <SX126xGetDio1PinState+0x8>)
 8006322:	f00c bb3b 	b.w	801299c <sx126x_get_dio1_pin_state>
 8006326:	bf00      	nop
 8006328:	20001068 	.word	0x20001068

0800632c <sx126x_is_busy>:
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <sx126x_is_busy+0xc>)
 800632e:	6958      	ldr	r0, [r3, #20]
}

bool sx126x_is_busy(struct sx126x_data *dev_data)
{
	return LL_PWR_IsActiveFlag_RFBUSYS();
}
 8006330:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	58000400 	.word	0x58000400

0800633c <sx126x_dio1_irq_enable>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <sx126x_dio1_irq_enable+0x10>)
 800633e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006342:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}

void sx126x_dio1_irq_enable(struct sx126x_data *dev_data)
{
	NVIC_ClearPendingIRQ(DT_INST_IRQN(0));
	irq_enable(DT_INST_IRQN(0));
 8006346:	2032      	movs	r0, #50	; 0x32
 8006348:	f7fe bb56 	b.w	80049f8 <arch_irq_enable>
 800634c:	e000e100 	.word	0xe000e100

08006350 <sx126x_variant_init>:
	k_work_submit(&dev_data->dio1_irq_work);
}

int sx126x_variant_init(const struct device *dev)
{
	IRQ_CONNECT(DT_INST_IRQN(0),
 8006350:	2200      	movs	r2, #0
{
 8006352:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQN(0),
 8006354:	4611      	mov	r1, r2
 8006356:	2032      	movs	r0, #50	; 0x32
 8006358:	f7fe fb72 	bl	8004a40 <z_arm_irq_priority_set>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800635c:	4a05      	ldr	r2, [pc, #20]	; (8006374 <sx126x_variant_init+0x24>)
 800635e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		    DT_INST_IRQ(0, priority),
		    radio_isr, DEVICE_DT_INST_GET(0), 0);
	LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
	irq_enable(DT_INST_IRQN(0));
 800636a:	2032      	movs	r0, #50	; 0x32
 800636c:	f7fe fb44 	bl	80049f8 <arch_irq_enable>

	return 0;
}
 8006370:	2000      	movs	r0, #0
 8006372:	bd08      	pop	{r3, pc}
 8006374:	58000800 	.word	0x58000800

08006378 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8006378:	4b07      	ldr	r3, [pc, #28]	; (8006398 <rand1+0x20>)
 800637a:	4908      	ldr	r1, [pc, #32]	; (800639c <rand1+0x24>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	f243 0039 	movw	r0, #12345	; 0x3039
 8006382:	fb01 0002 	mla	r0, r1, r2, r0
 8006386:	6018      	str	r0, [r3, #0]
 8006388:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800638c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006390:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8006394:	1ac0      	subs	r0, r0, r3
 8006396:	4770      	bx	lr
 8006398:	20000044 	.word	0x20000044
 800639c:	41c64e6d 	.word	0x41c64e6d

080063a0 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80063a0:	4b01      	ldr	r3, [pc, #4]	; (80063a8 <srand1+0x8>)
 80063a2:	6018      	str	r0, [r3, #0]
}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000044 	.word	0x20000044

080063ac <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80063ac:	b530      	push	{r4, r5, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80063ae:	b130      	cbz	r0, 80063be <Crc32+0x12>
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80063b0:	4d0a      	ldr	r5, [pc, #40]	; (80063dc <Crc32+0x30>)
 80063b2:	4401      	add	r1, r0
    uint32_t crc = 0xFFFFFFFF;
 80063b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    for( uint16_t i = 0; i < length; ++i )
 80063b8:	4281      	cmp	r1, r0
 80063ba:	d101      	bne.n	80063c0 <Crc32+0x14>
        }
    }

    return ~crc;
 80063bc:	43d8      	mvns	r0, r3
}
 80063be:	bd30      	pop	{r4, r5, pc}
        crc ^= ( uint32_t )buffer[i];
 80063c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c4:	4053      	eors	r3, r2
 80063c6:	2208      	movs	r2, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80063c8:	f343 0400 	sbfx	r4, r3, #0, #1
        for( uint16_t i = 0; i < 8; i++ )
 80063cc:	3a01      	subs	r2, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80063ce:	402c      	ands	r4, r5
        for( uint16_t i = 0; i < 8; i++ )
 80063d0:	b292      	uxth	r2, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80063d2:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 80063d6:	2a00      	cmp	r2, #0
 80063d8:	d1f6      	bne.n	80063c8 <Crc32+0x1c>
 80063da:	e7ed      	b.n	80063b8 <Crc32+0xc>
 80063dc:	edb88320 	.word	0xedb88320

080063e0 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80063e0:	4a04      	ldr	r2, [pc, #16]	; (80063f4 <TimerInsertNewHeadTimer+0x14>)
 80063e2:	6813      	ldr	r3, [r2, #0]

    if( cur != NULL )
 80063e4:	b10b      	cbz	r3, 80063ea <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
 80063e6:	2100      	movs	r1, #0
 80063e8:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
 80063ea:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 80063ec:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
 80063ee:	f00c bbcd 	b.w	8012b8c <TimerSetTimeout>
 80063f2:	bf00      	nop
 80063f4:	2000108c 	.word	0x2000108c

080063f8 <TimerStart>:
{
 80063f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063fa:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80063fc:	a801      	add	r0, sp, #4
 80063fe:	f00c f9dd 	bl	80127bc <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006402:	b16c      	cbz	r4, 8006420 <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8006404:	4d17      	ldr	r5, [pc, #92]	; (8006464 <TimerStart+0x6c>)
 8006406:	682a      	ldr	r2, [r5, #0]
 8006408:	4613      	mov	r3, r2

    while( cur != NULL )
 800640a:	b973      	cbnz	r3, 800642a <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8006410:	2301      	movs	r3, #1
 8006412:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 8006414:	b96a      	cbnz	r2, 8006432 <TimerStart+0x3a>
        RtcSetTimerContext( );
 8006416:	f7ff fb69 	bl	8005aec <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
 800641a:	4620      	mov	r0, r4
 800641c:	f7ff ffe0 	bl	80063e0 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
 8006420:	a801      	add	r0, sp, #4
 8006422:	f00c f9d5 	bl	80127d0 <BoardCriticalSectionEnd>
}
 8006426:	b003      	add	sp, #12
 8006428:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
 800642a:	429c      	cmp	r4, r3
 800642c:	d0f8      	beq.n	8006420 <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	e7eb      	b.n	800640a <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
 8006432:	f7ff fb3b 	bl	8005aac <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
 800643a:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
 800643c:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4290      	cmp	r0, r2
 8006442:	d3ea      	bcc.n	800641a <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
 8006444:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 8006446:	6959      	ldr	r1, [r3, #20]
 8006448:	b911      	cbnz	r1, 8006450 <TimerStart+0x58>
    cur->Next = obj;
 800644a:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
 800644c:	6161      	str	r1, [r4, #20]
 800644e:	e7e7      	b.n	8006420 <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
 8006450:	6811      	ldr	r1, [r2, #0]
 8006452:	4288      	cmp	r0, r1
 8006454:	d902      	bls.n	800645c <TimerStart+0x64>
            next = next->Next;
 8006456:	4613      	mov	r3, r2
 8006458:	6952      	ldr	r2, [r2, #20]
 800645a:	e7f4      	b.n	8006446 <TimerStart+0x4e>
            cur->Next = obj;
 800645c:	615c      	str	r4, [r3, #20]
            obj->Next = next;
 800645e:	6162      	str	r2, [r4, #20]
            return;
 8006460:	e7de      	b.n	8006420 <TimerStart+0x28>
 8006462:	bf00      	nop
 8006464:	2000108c 	.word	0x2000108c

08006468 <TimerIrqHandler>:
{
 8006468:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 800646a:	f7ff fb47 	bl	8005afc <RtcGetTimerContext>
    if( TimerListHead != NULL )
 800646e:	4c1b      	ldr	r4, [pc, #108]	; (80064dc <TimerIrqHandler+0x74>)
    uint32_t old =  RtcGetTimerContext( );
 8006470:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8006472:	f7ff fb3b 	bl	8005aec <RtcSetTimerContext>
    if( TimerListHead != NULL )
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	b19a      	cbz	r2, 80064a2 <TimerIrqHandler+0x3a>
    uint32_t deltaContext = now - old; // intentional wrap around
 800647a:	1b46      	subs	r6, r0, r5
 800647c:	4611      	mov	r1, r2
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800647e:	6949      	ldr	r1, [r1, #20]
 8006480:	b929      	cbnz	r1, 800648e <TimerIrqHandler+0x26>
        TimerListHead = TimerListHead->Next;
 8006482:	6953      	ldr	r3, [r2, #20]
 8006484:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006486:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
 8006488:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800648a:	b943      	cbnz	r3, 800649e <TimerIrqHandler+0x36>
 800648c:	e7fe      	b.n	800648c <TimerIrqHandler+0x24>
            if( next->Timestamp > deltaContext )
 800648e:	680b      	ldr	r3, [r1, #0]
 8006490:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
 8006492:	bf86      	itte	hi
 8006494:	195b      	addhi	r3, r3, r5
 8006496:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
 8006498:	2300      	movls	r3, #0
 800649a:	600b      	str	r3, [r1, #0]
 800649c:	e7ef      	b.n	800647e <TimerIrqHandler+0x16>
        ExecuteCallBack( cur->Callback, cur->Context );
 800649e:	6910      	ldr	r0, [r2, #16]
 80064a0:	4798      	blx	r3
        cur->IsStarted = false;
 80064a2:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	b92b      	cbnz	r3, 80064b4 <TimerIrqHandler+0x4c>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	b980      	cbnz	r0, 80064ce <TimerIrqHandler+0x66>
}
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
 80064ae:	6918      	ldr	r0, [r3, #16]
 80064b0:	4790      	blx	r2
 80064b2:	e7f7      	b.n	80064a4 <TimerIrqHandler+0x3c>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80064b4:	681d      	ldr	r5, [r3, #0]
 80064b6:	f7ff faf9 	bl	8005aac <RtcGetTimerElapsedTime>
 80064ba:	4285      	cmp	r5, r0
 80064bc:	d2f4      	bcs.n	80064a8 <TimerIrqHandler+0x40>
        cur = TimerListHead;
 80064be:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 80064c4:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
 80064c6:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	d1f0      	bne.n	80064ae <TimerIrqHandler+0x46>
 80064cc:	e7fe      	b.n	80064cc <TimerIrqHandler+0x64>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80064ce:	7a43      	ldrb	r3, [r0, #9]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1eb      	bne.n	80064ac <TimerIrqHandler+0x44>
}
 80064d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
 80064d8:	f00c bb58 	b.w	8012b8c <TimerSetTimeout>
 80064dc:	2000108c 	.word	0x2000108c

080064e0 <TimerStop>:
{
 80064e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
 80064e2:	4d14      	ldr	r5, [pc, #80]	; (8006534 <TimerStop+0x54>)
{
 80064e4:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80064e6:	a801      	add	r0, sp, #4
 80064e8:	f00c f968 	bl	80127bc <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 80064ec:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80064ee:	b103      	cbz	r3, 80064f2 <TimerStop+0x12>
 80064f0:	b924      	cbnz	r4, 80064fc <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
 80064f2:	a801      	add	r0, sp, #4
 80064f4:	f00c f96c 	bl	80127d0 <BoardCriticalSectionEnd>
}
 80064f8:	b003      	add	sp, #12
 80064fa:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
 80064fc:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
 80064fe:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
 8006500:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8006502:	d10d      	bne.n	8006520 <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8006504:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
 8006506:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8006508:	b141      	cbz	r1, 800651c <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
 800650a:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 800650c:	b124      	cbz	r4, 8006518 <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
 800650e:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
 8006510:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
 8006512:	f00c fb3b 	bl	8012b8c <TimerSetTimeout>
 8006516:	e7ec      	b.n	80064f2 <TimerStop+0x12>
                RtcStopAlarm( );
 8006518:	f7ff fad2 	bl	8005ac0 <RtcStopAlarm>
                TimerListHead = NULL;
 800651c:	602c      	str	r4, [r5, #0]
 800651e:	e7e8      	b.n	80064f2 <TimerStop+0x12>
                cur = cur->Next;
 8006520:	461a      	mov	r2, r3
 8006522:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0e4      	beq.n	80064f2 <TimerStop+0x12>
            if( cur == obj )
 8006528:	429c      	cmp	r4, r3
 800652a:	d1f9      	bne.n	8006520 <TimerStop+0x40>
                if( cur->Next != NULL )
 800652c:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
 800652e:	6153      	str	r3, [r2, #20]
 8006530:	e7df      	b.n	80064f2 <TimerStop+0x12>
 8006532:	bf00      	nop
 8006534:	2000108c 	.word	0x2000108c

08006538 <SX126xSetCrcSeed>:
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SX126xSetCrcSeed( uint16_t seed )
{
 8006538:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800653a:	0a03      	lsrs	r3, r0, #8
 800653c:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <SX126xSetCrcSeed+0x24>)
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006542:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SX126xGetPacketType( ) )
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	b92b      	cbnz	r3, 8006556 <SX126xSetCrcSeed+0x1e>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800654a:	2202      	movs	r2, #2
 800654c:	a901      	add	r1, sp, #4
 800654e:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006552:	f00c f9bf 	bl	80128d4 <SX126xWriteRegisters>
}
 8006556:	b003      	add	sp, #12
 8006558:	f85d fb04 	ldr.w	pc, [sp], #4
 800655c:	20002452 	.word	0x20002452

08006560 <SX126xSetCrcPolynomial>:
{
 8006560:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006562:	0a03      	lsrs	r3, r0, #8
 8006564:	f88d 3004 	strb.w	r3, [sp, #4]
    return PacketType;
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <SX126xSetCrcPolynomial+0x24>)
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800656a:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SX126xGetPacketType( ) )
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b92b      	cbnz	r3, 800657e <SX126xSetCrcPolynomial+0x1e>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006572:	2202      	movs	r2, #2
 8006574:	a901      	add	r1, sp, #4
 8006576:	f240 60be 	movw	r0, #1726	; 0x6be
 800657a:	f00c f9ab 	bl	80128d4 <SX126xWriteRegisters>
}
 800657e:	b003      	add	sp, #12
 8006580:	f85d fb04 	ldr.w	pc, [sp], #4
 8006584:	20002452 	.word	0x20002452

08006588 <SX126xSetWhiteningSeed>:
{
 8006588:	b510      	push	{r4, lr}
    return PacketType;
 800658a:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <SX126xSetWhiteningSeed+0x34>)
    switch( SX126xGetPacketType( ) )
 800658c:	781b      	ldrb	r3, [r3, #0]
{
 800658e:	4604      	mov	r4, r0
    switch( SX126xGetPacketType( ) )
 8006590:	b99b      	cbnz	r3, 80065ba <SX126xSetWhiteningSeed+0x32>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006592:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006596:	f00c f9d2 	bl	801293e <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800659a:	f3c4 2100 	ubfx	r1, r4, #8, #1
 800659e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80065a2:	4301      	orrs	r1, r0
 80065a4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80065a8:	f00c f9a8 	bl	80128fc <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 80065ac:	b2e1      	uxtb	r1, r4
 80065ae:	f240 60b9 	movw	r0, #1721	; 0x6b9
}
 80065b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 80065b6:	f00c b9a1 	b.w	80128fc <SX126xWriteRegister>
}
 80065ba:	bd10      	pop	{r4, pc}
 80065bc:	20002452 	.word	0x20002452

080065c0 <SX126xSetSleep>:
{
 80065c0:	b513      	push	{r0, r1, r4, lr}
 80065c2:	4604      	mov	r4, r0
    SX126xAntSwOff( );
 80065c4:	f00c f92b 	bl	801281e <SX126xAntSwOff>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80065c8:	f004 0307 	and.w	r3, r4, #7
    if( sleepConfig.Fields.WarmStart == 0 )
 80065cc:	f014 0404 	ands.w	r4, r4, #4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80065d0:	f88d 3007 	strb.w	r3, [sp, #7]
        ImageCalibrated = false;
 80065d4:	bf08      	it	eq
 80065d6:	4b08      	ldreq	r3, [pc, #32]	; (80065f8 <SX126xSetSleep+0x38>)
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80065d8:	f04f 0201 	mov.w	r2, #1
 80065dc:	f10d 0107 	add.w	r1, sp, #7
 80065e0:	f04f 0084 	mov.w	r0, #132	; 0x84
        ImageCalibrated = false;
 80065e4:	bf08      	it	eq
 80065e6:	701c      	strbeq	r4, [r3, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80065e8:	f00c f954 	bl	8012894 <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_SLEEP );
 80065ec:	2000      	movs	r0, #0
 80065ee:	f7ff fdd5 	bl	800619c <SX126xSetOperatingMode>
}
 80065f2:	b002      	add	sp, #8
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	bf00      	nop
 80065f8:	20002450 	.word	0x20002450

080065fc <SX126xInit>:
{
 80065fc:	b510      	push	{r4, lr}
 80065fe:	4604      	mov	r4, r0
    SX126xReset( );
 8006600:	f7ff fdf8 	bl	80061f4 <SX126xReset>
    SX126xIoIrqInit( dioIrq );
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff fdef 	bl	80061e8 <SX126xIoIrqInit>
    SX126xWakeup( );
 800660a:	f7ff fe51 	bl	80062b0 <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 800660e:	2000      	movs	r0, #0
 8006610:	f00c fb22 	bl	8012c58 <SX126xSetStandby>
    SX126xIoTcxoInit( );
 8006614:	f00c f908 	bl	8012828 <SX126xIoTcxoInit>
    SX126xIoRfSwitchInit( );
 8006618:	f00c f912 	bl	8012840 <SX126xIoRfSwitchInit>
    ImageCalibrated = false;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <SX126xInit+0x30>)
 800661e:	2200      	movs	r2, #0
}
 8006620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX126xSetOperatingMode( MODE_STDBY_RC );
 8006624:	2001      	movs	r0, #1
    ImageCalibrated = false;
 8006626:	701a      	strb	r2, [r3, #0]
    SX126xSetOperatingMode( MODE_STDBY_RC );
 8006628:	f7ff bdb8 	b.w	800619c <SX126xSetOperatingMode>
 800662c:	20002450 	.word	0x20002450

08006630 <SX126xCalibrateImage>:
    if( freq > 900000000 )
 8006630:	4b18      	ldr	r3, [pc, #96]	; (8006694 <SX126xCalibrateImage+0x64>)
 8006632:	4298      	cmp	r0, r3
{
 8006634:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 8006636:	d90d      	bls.n	8006654 <SX126xCalibrateImage+0x24>
        calFreq[0] = 0xE1;
 8006638:	23e1      	movs	r3, #225	; 0xe1
 800663a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800663e:	23e9      	movs	r3, #233	; 0xe9
        calFreq[1] = 0x6F;
 8006640:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006644:	2202      	movs	r2, #2
 8006646:	a901      	add	r1, sp, #4
 8006648:	2098      	movs	r0, #152	; 0x98
 800664a:	f00c f923 	bl	8012894 <SX126xWriteCommand>
}
 800664e:	b003      	add	sp, #12
 8006650:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <SX126xCalibrateImage+0x68>)
 8006656:	4298      	cmp	r0, r3
 8006658:	d904      	bls.n	8006664 <SX126xCalibrateImage+0x34>
        calFreq[0] = 0xD7;
 800665a:	23d7      	movs	r3, #215	; 0xd7
 800665c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8006660:	23db      	movs	r3, #219	; 0xdb
 8006662:	e7ed      	b.n	8006640 <SX126xCalibrateImage+0x10>
    else if( freq > 770000000 )
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <SX126xCalibrateImage+0x6c>)
 8006666:	4298      	cmp	r0, r3
 8006668:	d904      	bls.n	8006674 <SX126xCalibrateImage+0x44>
        calFreq[0] = 0xC1;
 800666a:	23c1      	movs	r3, #193	; 0xc1
 800666c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8006670:	23c5      	movs	r3, #197	; 0xc5
 8006672:	e7e5      	b.n	8006640 <SX126xCalibrateImage+0x10>
    else if( freq > 460000000 )
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <SX126xCalibrateImage+0x70>)
 8006676:	4298      	cmp	r0, r3
 8006678:	d904      	bls.n	8006684 <SX126xCalibrateImage+0x54>
        calFreq[0] = 0x75;
 800667a:	2375      	movs	r3, #117	; 0x75
 800667c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8006680:	2381      	movs	r3, #129	; 0x81
 8006682:	e7dd      	b.n	8006640 <SX126xCalibrateImage+0x10>
    else if( freq > 425000000 )
 8006684:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <SX126xCalibrateImage+0x74>)
 8006686:	4298      	cmp	r0, r3
 8006688:	d9dc      	bls.n	8006644 <SX126xCalibrateImage+0x14>
        calFreq[0] = 0x6B;
 800668a:	236b      	movs	r3, #107	; 0x6b
 800668c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8006690:	236f      	movs	r3, #111	; 0x6f
 8006692:	e7d5      	b.n	8006640 <SX126xCalibrateImage+0x10>
 8006694:	35a4e900 	.word	0x35a4e900
 8006698:	32a9f880 	.word	0x32a9f880
 800669c:	2de54480 	.word	0x2de54480
 80066a0:	1b6b0b00 	.word	0x1b6b0b00
 80066a4:	1954fc40 	.word	0x1954fc40

080066a8 <SX126xSetRfFrequency>:
{
 80066a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 80066aa:	4d14      	ldr	r5, [pc, #80]	; (80066fc <SX126xSetRfFrequency+0x54>)
 80066ac:	782b      	ldrb	r3, [r5, #0]
{
 80066ae:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80066b0:	b91b      	cbnz	r3, 80066ba <SX126xSetRfFrequency+0x12>
        SX126xCalibrateImage( frequency );
 80066b2:	f7ff ffbd 	bl	8006630 <SX126xCalibrateImage>
        ImageCalibrated = true;
 80066b6:	2301      	movs	r3, #1
 80066b8:	702b      	strb	r3, [r5, #0]
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
    stepsFrac = freqInHz - ( stepsInt * SX126X_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80066ba:	f643 5209 	movw	r2, #15625	; 0x3d09
 80066be:	f641 6384 	movw	r3, #7812	; 0x1e84
 80066c2:	fbb4 f1f2 	udiv	r1, r4, r2
 80066c6:	fb02 4411 	mls	r4, r2, r1, r4
 80066ca:	eb03 3384 	add.w	r3, r3, r4, lsl #14
 80066ce:	fbb3 f3f2 	udiv	r3, r3, r2
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 80066d2:	eb03 3381 	add.w	r3, r3, r1, lsl #14
    buf[0] = ( uint8_t )( ( freqInPllSteps >> 24 ) & 0xFF );
 80066d6:	0e1a      	lsrs	r2, r3, #24
 80066d8:	f88d 2004 	strb.w	r2, [sp, #4]
    buf[1] = ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF );
 80066dc:	0c1a      	lsrs	r2, r3, #16
 80066de:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[2] = ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF );
 80066e2:	0a1a      	lsrs	r2, r3, #8
 80066e4:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80066e8:	2204      	movs	r2, #4
 80066ea:	eb0d 0102 	add.w	r1, sp, r2
 80066ee:	2086      	movs	r0, #134	; 0x86
    buf[3] = ( uint8_t )( freqInPllSteps & 0xFF );
 80066f0:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80066f4:	f00c f8ce 	bl	8012894 <SX126xWriteCommand>
}
 80066f8:	b003      	add	sp, #12
 80066fa:	bd30      	pop	{r4, r5, pc}
 80066fc:	20002450 	.word	0x20002450

08006700 <SX126xSetPacketType>:
{
 8006700:	b507      	push	{r0, r1, r2, lr}
    PacketType = packetType;
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <SX126xSetPacketType+0x1c>)
{
 8006704:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8006708:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800670a:	2201      	movs	r2, #1
 800670c:	f10d 0107 	add.w	r1, sp, #7
 8006710:	208a      	movs	r0, #138	; 0x8a
 8006712:	f00c f8bf 	bl	8012894 <SX126xWriteCommand>
}
 8006716:	b003      	add	sp, #12
 8006718:	f85d fb04 	ldr.w	pc, [sp], #4
 800671c:	20002452 	.word	0x20002452

08006720 <SX126xGetPacketType>:
}
 8006720:	4b01      	ldr	r3, [pc, #4]	; (8006728 <SX126xGetPacketType+0x8>)
 8006722:	7818      	ldrb	r0, [r3, #0]
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20002452 	.word	0x20002452

0800672c <SX126xSetModulationParams>:
{
 800672c:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800672e:	4a28      	ldr	r2, [pc, #160]	; (80067d0 <SX126xSetModulationParams+0xa4>)
{
 8006730:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006732:	6851      	ldr	r1, [r2, #4]
 8006734:	6810      	ldr	r0, [r2, #0]
 8006736:	466b      	mov	r3, sp
 8006738:	c303      	stmia	r3!, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800673a:	4b26      	ldr	r3, [pc, #152]	; (80067d4 <SX126xSetModulationParams+0xa8>)
 800673c:	7820      	ldrb	r0, [r4, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	4283      	cmp	r3, r0
 8006742:	d001      	beq.n	8006748 <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 8006744:	f7ff ffdc 	bl	8006700 <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 8006748:	7823      	ldrb	r3, [r4, #0]
 800674a:	b11b      	cbz	r3, 8006754 <SX126xSetModulationParams+0x28>
 800674c:	2b01      	cmp	r3, #1
 800674e:	d030      	beq.n	80067b2 <SX126xSetModulationParams+0x86>
}
 8006750:	b002      	add	sp, #8
 8006752:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t )( 32 * SX126X_XTAL_FREQ / modulationParams->Params.Gfsk.BitRate );
 8006754:	6862      	ldr	r2, [r4, #4]
 8006756:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <SX126xSetModulationParams+0xac>)
 8006758:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800675c:	0c1a      	lsrs	r2, r3, #16
 800675e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006762:	0a1a      	lsrs	r2, r3, #8
 8006764:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8006768:	f88d 3002 	strb.w	r3, [sp, #2]
        tempVal = SX126xConvertFreqInHzToPllStep( modulationParams->Params.Gfsk.Fdev );
 800676c:	68a2      	ldr	r2, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800676e:	7b23      	ldrb	r3, [r4, #12]
 8006770:	f88d 3003 	strb.w	r3, [sp, #3]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8006774:	f643 5109 	movw	r1, #15625	; 0x3d09
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006778:	7b63      	ldrb	r3, [r4, #13]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800677a:	fbb2 f0f1 	udiv	r0, r2, r1
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800677e:	f88d 3004 	strb.w	r3, [sp, #4]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8006782:	fb01 2210 	mls	r2, r1, r0, r2
 8006786:	f641 6384 	movw	r3, #7812	; 0x1e84
 800678a:	eb03 3382 	add.w	r3, r3, r2, lsl #14
 800678e:	fbb3 f3f1 	udiv	r3, r3, r1
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 8006792:	eb03 3380 	add.w	r3, r3, r0, lsl #14
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006796:	0c1a      	lsrs	r2, r3, #16
 8006798:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800679c:	0a1a      	lsrs	r2, r3, #8
 800679e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80067a2:	f88d 3007 	strb.w	r3, [sp, #7]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80067a6:	2208      	movs	r2, #8
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80067a8:	4669      	mov	r1, sp
 80067aa:	208b      	movs	r0, #139	; 0x8b
 80067ac:	f00c f872 	bl	8012894 <SX126xWriteCommand>
        break;
 80067b0:	e7ce      	b.n	8006750 <SX126xSetModulationParams+0x24>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80067b2:	7c23      	ldrb	r3, [r4, #16]
 80067b4:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80067b8:	7c63      	ldrb	r3, [r4, #17]
 80067ba:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80067be:	7ca3      	ldrb	r3, [r4, #18]
 80067c0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80067c4:	7ce3      	ldrb	r3, [r4, #19]
 80067c6:	f88d 3003 	strb.w	r3, [sp, #3]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80067ca:	2204      	movs	r2, #4
 80067cc:	e7ec      	b.n	80067a8 <SX126xSetModulationParams+0x7c>
 80067ce:	bf00      	nop
 80067d0:	08018238 	.word	0x08018238
 80067d4:	20002452 	.word	0x20002452
 80067d8:	3d090000 	.word	0x3d090000

080067dc <SX126xSetPacketParams>:
{
 80067dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80067de:	4a31      	ldr	r2, [pc, #196]	; (80068a4 <SX126xSetPacketParams+0xc8>)
{
 80067e0:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80067e2:	68d1      	ldr	r1, [r2, #12]
 80067e4:	6890      	ldr	r0, [r2, #8]
 80067e6:	7c12      	ldrb	r2, [r2, #16]
 80067e8:	ab01      	add	r3, sp, #4
 80067ea:	c303      	stmia	r3!, {r0, r1}
 80067ec:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80067ee:	4b2e      	ldr	r3, [pc, #184]	; (80068a8 <SX126xSetPacketParams+0xcc>)
 80067f0:	7820      	ldrb	r0, [r4, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	4283      	cmp	r3, r0
 80067f6:	d001      	beq.n	80067fc <SX126xSetPacketParams+0x20>
        SX126xSetPacketType( packetParams->PacketType );
 80067f8:	f7ff ff82 	bl	8006700 <SX126xSetPacketType>
    switch( packetParams->PacketType )
 80067fc:	7823      	ldrb	r3, [r4, #0]
 80067fe:	b11b      	cbz	r3, 8006808 <SX126xSetPacketParams+0x2c>
 8006800:	2b01      	cmp	r3, #1
 8006802:	d039      	beq.n	8006878 <SX126xSetPacketParams+0x9c>
}
 8006804:	b004      	add	sp, #16
 8006806:	bd10      	pop	{r4, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006808:	7a63      	ldrb	r3, [r4, #9]
 800680a:	2bf1      	cmp	r3, #241	; 0xf1
 800680c:	d128      	bne.n	8006860 <SX126xSetPacketParams+0x84>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 800680e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006812:	f7ff fe91 	bl	8006538 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006816:	f248 0005 	movw	r0, #32773	; 0x8005
 800681a:	f7ff fea1 	bl	8006560 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800681e:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006820:	8862      	ldrh	r2, [r4, #2]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006822:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006826:	0a11      	lsrs	r1, r2, #8
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006828:	7922      	ldrb	r2, [r4, #4]
 800682a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800682e:	7962      	ldrb	r2, [r4, #5]
 8006830:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006834:	79a2      	ldrb	r2, [r4, #6]
 8006836:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800683a:	79e2      	ldrb	r2, [r4, #7]
 800683c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[7] = crcVal;
 8006840:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006844:	7a22      	ldrb	r2, [r4, #8]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006846:	7aa3      	ldrb	r3, [r4, #10]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006848:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800684c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006850:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8006854:	2209      	movs	r2, #9
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006856:	a901      	add	r1, sp, #4
 8006858:	208c      	movs	r0, #140	; 0x8c
 800685a:	f00c f81b 	bl	8012894 <SX126xWriteCommand>
 800685e:	e7d1      	b.n	8006804 <SX126xSetPacketParams+0x28>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006860:	2bf2      	cmp	r3, #242	; 0xf2
 8006862:	d1dd      	bne.n	8006820 <SX126xSetPacketParams+0x44>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 8006864:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8006868:	f7ff fe66 	bl	8006538 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800686c:	f241 0021 	movw	r0, #4129	; 0x1021
 8006870:	f7ff fe76 	bl	8006560 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8006874:	2306      	movs	r3, #6
 8006876:	e7d3      	b.n	8006820 <SX126xSetPacketParams+0x44>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006878:	89a3      	ldrh	r3, [r4, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800687a:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800687e:	0a1a      	lsrs	r2, r3, #8
 8006880:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8006884:	4a09      	ldr	r2, [pc, #36]	; (80068ac <SX126xSetPacketParams+0xd0>)
 8006886:	7ba3      	ldrb	r3, [r4, #14]
 8006888:	7013      	strb	r3, [r2, #0]
 800688a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800688e:	7be3      	ldrb	r3, [r4, #15]
 8006890:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006894:	7c23      	ldrb	r3, [r4, #16]
 8006896:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800689a:	7c63      	ldrb	r3, [r4, #17]
 800689c:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80068a0:	2206      	movs	r2, #6
        break;
 80068a2:	e7d8      	b.n	8006856 <SX126xSetPacketParams+0x7a>
 80068a4:	08018238 	.word	0x08018238
 80068a8:	20002452 	.word	0x20002452
 80068ac:	20002451 	.word	0x20002451

080068b0 <SX126xGetRxBufferStatus>:
{
 80068b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068b2:	4604      	mov	r4, r0
 80068b4:	460d      	mov	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80068b6:	2202      	movs	r2, #2
 80068b8:	a901      	add	r1, sp, #4
 80068ba:	2013      	movs	r0, #19
 80068bc:	f00b fff8 	bl	80128b0 <SX126xReadCommand>
    return PacketType;
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <SX126xGetRxBufferStatus+0x3c>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d10d      	bne.n	80068e4 <SX126xGetRxBufferStatus+0x34>
 80068c8:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <SX126xGetRxBufferStatus+0x40>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d109      	bne.n	80068e4 <SX126xGetRxBufferStatus+0x34>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 80068d0:	f240 7002 	movw	r0, #1794	; 0x702
 80068d4:	f00c f833 	bl	801293e <SX126xReadRegister>
 80068d8:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 80068da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80068de:	702b      	strb	r3, [r5, #0]
}
 80068e0:	b003      	add	sp, #12
 80068e2:	bd30      	pop	{r4, r5, pc}
        *payloadLength = status[0];
 80068e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80068e8:	7023      	strb	r3, [r4, #0]
 80068ea:	e7f6      	b.n	80068da <SX126xGetRxBufferStatus+0x2a>
 80068ec:	20002452 	.word	0x20002452
 80068f0:	20002451 	.word	0x20002451

080068f4 <SX126xGetPacketStatus>:
{
 80068f4:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80068f6:	2203      	movs	r2, #3
{
 80068f8:	4604      	mov	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80068fa:	a901      	add	r1, sp, #4
 80068fc:	2014      	movs	r0, #20
 80068fe:	f00b ffd7 	bl	80128b0 <SX126xReadCommand>
    return PacketType;
 8006902:	4b18      	ldr	r3, [pc, #96]	; (8006964 <SX126xGetPacketStatus+0x70>)
 8006904:	781a      	ldrb	r2, [r3, #0]
    pktStatus->packetType = SX126xGetPacketType( );
 8006906:	7022      	strb	r2, [r4, #0]
    switch( pktStatus->packetType )
 8006908:	b14a      	cbz	r2, 800691e <SX126xGetPacketStatus+0x2a>
 800690a:	2a01      	cmp	r2, #1
 800690c:	d017      	beq.n	800693e <SX126xGetPacketStatus+0x4a>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 800690e:	2214      	movs	r2, #20
 8006910:	2100      	movs	r1, #0
 8006912:	4620      	mov	r0, r4
 8006914:	f010 ffb3 	bl	801787e <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006918:	230f      	movs	r3, #15
 800691a:	7023      	strb	r3, [r4, #0]
}
 800691c:	e00d      	b.n	800693a <SX126xGetPacketStatus+0x46>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800691e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006922:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006924:	f89d 3005 	ldrb.w	r3, [sp, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8006928:	60a2      	str	r2, [r4, #8]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800692a:	425b      	negs	r3, r3
 800692c:	105b      	asrs	r3, r3, #1
 800692e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8006930:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006934:	425b      	negs	r3, r3
 8006936:	105b      	asrs	r3, r3, #1
 8006938:	7163      	strb	r3, [r4, #5]
}
 800693a:	b002      	add	sp, #8
 800693c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800693e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006942:	425b      	negs	r3, r3
 8006944:	105b      	asrs	r3, r3, #1
 8006946:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8006948:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800694c:	3302      	adds	r3, #2
 800694e:	109b      	asrs	r3, r3, #2
 8006950:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006952:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006956:	425b      	negs	r3, r3
 8006958:	105b      	asrs	r3, r3, #1
 800695a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <SX126xGetPacketStatus+0x74>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6123      	str	r3, [r4, #16]
            break;
 8006962:	e7ea      	b.n	800693a <SX126xGetPacketStatus+0x46>
 8006964:	20002452 	.word	0x20002452
 8006968:	20001090 	.word	0x20001090

0800696c <RadioOnTxTimeoutIrq>:
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800696c:	4b03      	ldr	r3, [pc, #12]	; (800697c <RadioOnTxTimeoutIrq+0x10>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	b113      	cbz	r3, 8006978 <RadioOnTxTimeoutIrq+0xc>
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	b103      	cbz	r3, 8006978 <RadioOnTxTimeoutIrq+0xc>
    {
        RadioEvents->TxTimeout( );
 8006976:	4718      	bx	r3
    }
}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20001094 	.word	0x20001094

08006980 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006980:	4b03      	ldr	r3, [pc, #12]	; (8006990 <RadioOnRxTimeoutIrq+0x10>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	b113      	cbz	r3, 800698c <RadioOnRxTimeoutIrq+0xc>
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	b103      	cbz	r3, 800698c <RadioOnRxTimeoutIrq+0xc>
    {
        RadioEvents->RxTimeout( );
 800698a:	4718      	bx	r3
    }
}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20001094 	.word	0x20001094

08006994 <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
    IrqFired = true;
 8006994:	4b01      	ldr	r3, [pc, #4]	; (800699c <RadioOnDioIrq+0x8>)
 8006996:	2201      	movs	r2, #1
 8006998:	701a      	strb	r2, [r3, #0]
}
 800699a:	4770      	bx	lr
 800699c:	20002453 	.word	0x20002453

080069a0 <RadioGetStatus>:
{
 80069a0:	b508      	push	{r3, lr}
    switch( SX126xGetOperatingMode( ) )
 80069a2:	f7ff fbf5 	bl	8006190 <SX126xGetOperatingMode>
 80069a6:	3804      	subs	r0, #4
 80069a8:	b2c0      	uxtb	r0, r0
 80069aa:	2803      	cmp	r0, #3
 80069ac:	bf96      	itet	ls
 80069ae:	4b02      	ldrls	r3, [pc, #8]	; (80069b8 <RadioGetStatus+0x18>)
 80069b0:	2000      	movhi	r0, #0
 80069b2:	5c18      	ldrbls	r0, [r3, r0]
}
 80069b4:	bd08      	pop	{r3, pc}
 80069b6:	bf00      	nop
 80069b8:	08019dbd 	.word	0x08019dbd

080069bc <RadioSend>:
{
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	460c      	mov	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80069c0:	2300      	movs	r3, #0
 80069c2:	f240 2101 	movw	r1, #513	; 0x201
 80069c6:	461a      	mov	r2, r3
{
 80069c8:	4605      	mov	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80069ca:	4608      	mov	r0, r1
 80069cc:	f00c fa70 	bl	8012eb0 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 80069d0:	f7ff fea6 	bl	8006720 <SX126xGetPacketType>
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <RadioSend+0x4c>)
 80069d6:	2801      	cmp	r0, #1
    SX126xSetPacketParams( &SX126x.PacketParams );
 80069d8:	480c      	ldr	r0, [pc, #48]	; (8006a0c <RadioSend+0x50>)
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 80069da:	bf0c      	ite	eq
 80069dc:	f883 40c7 	strbeq.w	r4, [r3, #199]	; 0xc7
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 80069e0:	f883 40c0 	strbne.w	r4, [r3, #192]	; 0xc0
    SX126xSetPacketParams( &SX126x.PacketParams );
 80069e4:	f7ff fefa 	bl	80067dc <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 80069e8:	4621      	mov	r1, r4
 80069ea:	4628      	mov	r0, r5
 80069ec:	2200      	movs	r2, #0
 80069ee:	f00c f95b 	bl	8012ca8 <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <RadioSend+0x54>)
 80069f4:	4807      	ldr	r0, [pc, #28]	; (8006a14 <RadioSend+0x58>)
 80069f6:	6819      	ldr	r1, [r3, #0]
 80069f8:	f00c f8e6 	bl	8012bc8 <TimerSetValue>
}
 80069fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TimerStart( &TxTimeoutTimer );
 8006a00:	4804      	ldr	r0, [pc, #16]	; (8006a14 <RadioSend+0x58>)
 8006a02:	f7ff bcf9 	b.w	80063f8 <TimerStart>
 8006a06:	bf00      	nop
 8006a08:	200010c8 	.word	0x200010c8
 8006a0c:	20001180 	.word	0x20001180
 8006a10:	200011bc 	.word	0x200011bc
 8006a14:	200011c0 	.word	0x200011c0

08006a18 <RadioSetTxContinuousWave>:
{
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	4614      	mov	r4, r2
    SX126xSetRfFrequency( freq );
 8006a1e:	f7ff fe43 	bl	80066a8 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 8006a22:	4628      	mov	r0, r5
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006a24:	4d07      	ldr	r5, [pc, #28]	; (8006a44 <RadioSetTxContinuousWave+0x2c>)
    SX126xSetRfTxPower( power );
 8006a26:	f00b ff0e 	bl	8012846 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 8006a2a:	f00c f9d3 	bl	8012dd4 <SX126xSetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006a2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a32:	4628      	mov	r0, r5
 8006a34:	4361      	muls	r1, r4
 8006a36:	f00c f8c7 	bl	8012bc8 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 8006a3a:	4628      	mov	r0, r5
}
 8006a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TimerStart( &TxTimeoutTimer );
 8006a40:	f7ff bcda 	b.w	80063f8 <TimerStart>
 8006a44:	200011c0 	.word	0x200011c0

08006a48 <RadioGetFskBandwidthRegValue>:
{
 8006a48:	b510      	push	{r4, lr}
    if( bandwidth == 0 )
 8006a4a:	b190      	cbz	r0, 8006a72 <RadioGetFskBandwidthRegValue+0x2a>
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <RadioGetFskBandwidthRegValue+0x30>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4619      	mov	r1, r3
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8006a52:	681c      	ldr	r4, [r3, #0]
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	d306      	bcc.n	8006a66 <RadioGetFskBandwidthRegValue+0x1e>
 8006a58:	689c      	ldr	r4, [r3, #8]
 8006a5a:	42a0      	cmp	r0, r4
 8006a5c:	d203      	bcs.n	8006a66 <RadioGetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i+1].RegValue;
 8006a5e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006a62:	7910      	ldrb	r0, [r2, #4]
}
 8006a64:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006a66:	3201      	adds	r2, #1
 8006a68:	2a16      	cmp	r2, #22
 8006a6a:	f103 0308 	add.w	r3, r3, #8
 8006a6e:	d1f0      	bne.n	8006a52 <RadioGetFskBandwidthRegValue+0xa>
    while( 1 );
 8006a70:	e7fe      	b.n	8006a70 <RadioGetFskBandwidthRegValue+0x28>
        return( 0x1F );
 8006a72:	201f      	movs	r0, #31
 8006a74:	e7f6      	b.n	8006a64 <RadioGetFskBandwidthRegValue+0x1c>
 8006a76:	bf00      	nop
 8006a78:	080184a8 	.word	0x080184a8

08006a7c <RadioSetMaxPayloadLength>:
    if( modem == MODEM_LORA )
 8006a7c:	2801      	cmp	r0, #1
 8006a7e:	4809      	ldr	r0, [pc, #36]	; (8006aa4 <RadioSetMaxPayloadLength+0x28>)
 8006a80:	d106      	bne.n	8006a90 <RadioSetMaxPayloadLength+0x14>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <RadioSetMaxPayloadLength+0x2c>)
 8006a84:	f880 10c7 	strb.w	r1, [r0, #199]	; 0xc7
 8006a88:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 8006a8a:	30b8      	adds	r0, #184	; 0xb8
 8006a8c:	f7ff bea6 	b.w	80067dc <SX126xSetPacketParams>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8006a90:	f890 30bf 	ldrb.w	r3, [r0, #191]	; 0xbf
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d104      	bne.n	8006aa2 <RadioSetMaxPayloadLength+0x26>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006a98:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <RadioSetMaxPayloadLength+0x2c>)
 8006a9a:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
 8006a9e:	7019      	strb	r1, [r3, #0]
 8006aa0:	e7f3      	b.n	8006a8a <RadioSetMaxPayloadLength+0xe>
}
 8006aa2:	4770      	bx	lr
 8006aa4:	200010c8 	.word	0x200010c8
 8006aa8:	2000024c 	.word	0x2000024c

08006aac <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006aac:	2300      	movs	r3, #0
 8006aae:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
 8006ab2:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006ab4:	461a      	mov	r2, r3
{
 8006ab6:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006ab8:	4608      	mov	r0, r1
 8006aba:	f00c f9f9 	bl	8012eb0 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8006abe:	b134      	cbz	r4, 8006ace <RadioRx+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006ac0:	4809      	ldr	r0, [pc, #36]	; (8006ae8 <RadioRx+0x3c>)
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	f00c f880 	bl	8012bc8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006ac8:	4807      	ldr	r0, [pc, #28]	; (8006ae8 <RadioRx+0x3c>)
 8006aca:	f7ff fc95 	bl	80063f8 <TimerStart>
    if( RxContinuous == true )
 8006ace:	4b07      	ldr	r3, [pc, #28]	; (8006aec <RadioRx+0x40>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	b12b      	cbz	r3, 8006ae0 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8006ad4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
}
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRx( RxTimeout << 6 );
 8006adc:	f00c b8ed 	b.w	8012cba <SX126xSetRx>
 8006ae0:	4b03      	ldr	r3, [pc, #12]	; (8006af0 <RadioRx+0x44>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	0180      	lsls	r0, r0, #6
 8006ae6:	e7f7      	b.n	8006ad8 <RadioRx+0x2c>
 8006ae8:	200010b0 	.word	0x200010b0
 8006aec:	20002555 	.word	0x20002555
 8006af0:	200010ac 	.word	0x200010ac

08006af4 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006af4:	2300      	movs	r3, #0
 8006af6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
 8006afa:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006afc:	461a      	mov	r2, r3
{
 8006afe:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006b00:	4608      	mov	r0, r1
 8006b02:	f00c f9d5 	bl	8012eb0 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8006b06:	b134      	cbz	r4, 8006b16 <RadioRxBoosted+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006b08:	4809      	ldr	r0, [pc, #36]	; (8006b30 <RadioRxBoosted+0x3c>)
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	f00c f85c 	bl	8012bc8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006b10:	4807      	ldr	r0, [pc, #28]	; (8006b30 <RadioRxBoosted+0x3c>)
 8006b12:	f7ff fc71 	bl	80063f8 <TimerStart>
    if( RxContinuous == true )
 8006b16:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <RadioRxBoosted+0x40>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	b12b      	cbz	r3, 8006b28 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006b1c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
}
 8006b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRxBoosted( RxTimeout << 6 );
 8006b24:	f00c b916 	b.w	8012d54 <SX126xSetRxBoosted>
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <RadioRxBoosted+0x44>)
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	0180      	lsls	r0, r0, #6
 8006b2e:	e7f7      	b.n	8006b20 <RadioRxBoosted+0x2c>
 8006b30:	200010b0 	.word	0x200010b0
 8006b34:	20002555 	.word	0x20002555
 8006b38:	200010ac 	.word	0x200010ac

08006b3c <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 8006b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    CRITICAL_SECTION_BEGIN( );
    // Clear IRQ flag
    const bool isIrqFired = IrqFired;
 8006b3e:	4d57      	ldr	r5, [pc, #348]	; (8006c9c <RadioIrqProcess+0x160>)
    CRITICAL_SECTION_BEGIN( );
 8006b40:	a802      	add	r0, sp, #8
 8006b42:	f00b fe3b 	bl	80127bc <BoardCriticalSectionBegin>
    const bool isIrqFired = IrqFired;
 8006b46:	782c      	ldrb	r4, [r5, #0]
    IrqFired = false;
 8006b48:	2300      	movs	r3, #0
    CRITICAL_SECTION_END( );
 8006b4a:	a802      	add	r0, sp, #8
    IrqFired = false;
 8006b4c:	702b      	strb	r3, [r5, #0]
    CRITICAL_SECTION_END( );
 8006b4e:	f00b fe3f 	bl	80127d0 <BoardCriticalSectionEnd>

    if( isIrqFired == true )
 8006b52:	2c00      	cmp	r4, #0
 8006b54:	d061      	beq.n	8006c1a <RadioIrqProcess+0xde>
    {
        uint16_t irqRegs = SX126xGetIrqStatus( );
 8006b56:	f00c f9c7 	bl	8012ee8 <SX126xGetIrqStatus>
 8006b5a:	4604      	mov	r4, r0
        SX126xClearIrqStatus( irqRegs );
 8006b5c:	f00c fa64 	bl	8013028 <SX126xClearIrqStatus>

        // Check if DIO1 pin is High. If it is the case revert IrqFired to true
        CRITICAL_SECTION_BEGIN( );
 8006b60:	a803      	add	r0, sp, #12
 8006b62:	f00b fe2b 	bl	80127bc <BoardCriticalSectionBegin>
        if( SX126xGetDio1PinState( ) == 1 )
 8006b66:	f7ff fbdb 	bl	8006320 <SX126xGetDio1PinState>
 8006b6a:	2801      	cmp	r0, #1
        {
            IrqFired = true;
 8006b6c:	bf08      	it	eq
 8006b6e:	7028      	strbeq	r0, [r5, #0]
        }
        CRITICAL_SECTION_END( );
 8006b70:	a803      	add	r0, sp, #12
 8006b72:	f00b fe2d 	bl	80127d0 <BoardCriticalSectionEnd>

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8006b76:	07e5      	lsls	r5, r4, #31
 8006b78:	d50b      	bpl.n	8006b92 <RadioIrqProcess+0x56>
        {
            TimerStop( &TxTimeoutTimer );
 8006b7a:	4849      	ldr	r0, [pc, #292]	; (8006ca0 <RadioIrqProcess+0x164>)
 8006b7c:	f7ff fcb0 	bl	80064e0 <TimerStop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8006b80:	2001      	movs	r0, #1
 8006b82:	f7ff fb0b 	bl	800619c <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006b86:	4b47      	ldr	r3, [pc, #284]	; (8006ca4 <RadioIrqProcess+0x168>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	b113      	cbz	r3, 8006b92 <RadioIrqProcess+0x56>
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	b103      	cbz	r3, 8006b92 <RadioIrqProcess+0x56>
            {
                RadioEvents->TxDone( );
 8006b90:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8006b92:	07a0      	lsls	r0, r4, #30
 8006b94:	d511      	bpl.n	8006bba <RadioIrqProcess+0x7e>
        {
            TimerStop( &RxTimeoutTimer );
 8006b96:	4844      	ldr	r0, [pc, #272]	; (8006ca8 <RadioIrqProcess+0x16c>)
 8006b98:	4e42      	ldr	r6, [pc, #264]	; (8006ca4 <RadioIrqProcess+0x168>)
 8006b9a:	f7ff fca1 	bl	80064e0 <TimerStop>

            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8006b9e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006ba2:	4b42      	ldr	r3, [pc, #264]	; (8006cac <RadioIrqProcess+0x170>)
 8006ba4:	d03b      	beq.n	8006c1e <RadioIrqProcess+0xe2>
            {
                if( RxContinuous == false )
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b913      	cbnz	r3, 8006bb0 <RadioIrqProcess+0x74>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8006baa:	2001      	movs	r0, #1
 8006bac:	f7ff faf6 	bl	800619c <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8006bb0:	6833      	ldr	r3, [r6, #0]
 8006bb2:	b113      	cbz	r3, 8006bba <RadioIrqProcess+0x7e>
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	b103      	cbz	r3, 8006bba <RadioIrqProcess+0x7e>
                {
                    RadioEvents->RxError( );
 8006bb8:	4798      	blx	r3
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8006bba:	0621      	lsls	r1, r4, #24
 8006bbc:	d50a      	bpl.n	8006bd4 <RadioIrqProcess+0x98>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f7ff faec 	bl	800619c <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006bc4:	4b37      	ldr	r3, [pc, #220]	; (8006ca4 <RadioIrqProcess+0x168>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	b123      	cbz	r3, 8006bd4 <RadioIrqProcess+0x98>
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	b113      	cbz	r3, 8006bd4 <RadioIrqProcess+0x98>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 8006bce:	f3c4 2000 	ubfx	r0, r4, #8, #1
 8006bd2:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8006bd4:	05a2      	lsls	r2, r4, #22
 8006bd6:	d50f      	bpl.n	8006bf8 <RadioIrqProcess+0xbc>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 8006bd8:	f7ff fada 	bl	8006190 <SX126xGetOperatingMode>
 8006bdc:	2804      	cmp	r0, #4
 8006bde:	d14c      	bne.n	8006c7a <RadioIrqProcess+0x13e>
            {
                TimerStop( &TxTimeoutTimer );
 8006be0:	482f      	ldr	r0, [pc, #188]	; (8006ca0 <RadioIrqProcess+0x164>)
 8006be2:	f7ff fc7d 	bl	80064e0 <TimerStop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8006be6:	2001      	movs	r0, #1
 8006be8:	f7ff fad8 	bl	800619c <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006bec:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <RadioIrqProcess+0x168>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	b113      	cbz	r3, 8006bf8 <RadioIrqProcess+0xbc>
 8006bf2:	685b      	ldr	r3, [r3, #4]
            else if( SX126xGetOperatingMode( ) == MODE_RX )
            {
                TimerStop( &RxTimeoutTimer );
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006bf4:	b103      	cbz	r3, 8006bf8 <RadioIrqProcess+0xbc>
                {
                    RadioEvents->RxTimeout( );
 8006bf6:	4798      	blx	r3
        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8006bf8:	06a3      	lsls	r3, r4, #26
 8006bfa:	d50e      	bpl.n	8006c1a <RadioIrqProcess+0xde>
        {
            TimerStop( &RxTimeoutTimer );
 8006bfc:	482a      	ldr	r0, [pc, #168]	; (8006ca8 <RadioIrqProcess+0x16c>)
 8006bfe:	f7ff fc6f 	bl	80064e0 <TimerStop>
            if( RxContinuous == false )
 8006c02:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <RadioIrqProcess+0x170>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b913      	cbnz	r3, 8006c0e <RadioIrqProcess+0xd2>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f7ff fac7 	bl	800619c <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006c0e:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <RadioIrqProcess+0x168>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	b113      	cbz	r3, 8006c1a <RadioIrqProcess+0xde>
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	b103      	cbz	r3, 8006c1a <RadioIrqProcess+0xde>
            {
                RadioEvents->RxTimeout( );
 8006c18:	4798      	blx	r3
            }
        }
    }
}
 8006c1a:	b004      	add	sp, #16
 8006c1c:	bd70      	pop	{r4, r5, r6, pc}
                if( RxContinuous == false )
 8006c1e:	781d      	ldrb	r5, [r3, #0]
 8006c20:	b995      	cbnz	r5, 8006c48 <RadioIrqProcess+0x10c>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8006c22:	2001      	movs	r0, #1
 8006c24:	f7ff faba 	bl	800619c <SX126xSetOperatingMode>
                    SX126xWriteRegister( REG_RTC_CTRL, 0x00 );
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f640 1002 	movw	r0, #2306	; 0x902
 8006c2e:	f00b fe65 	bl	80128fc <SX126xWriteRegister>
                    SX126xWriteRegister( REG_EVT_CLR, SX126xReadRegister( REG_EVT_CLR ) | ( 1 << 1 ) );
 8006c32:	f640 1044 	movw	r0, #2372	; 0x944
 8006c36:	f00b fe82 	bl	801293e <SX126xReadRegister>
 8006c3a:	f040 0102 	orr.w	r1, r0, #2
 8006c3e:	b2c9      	uxtb	r1, r1
 8006c40:	f640 1044 	movw	r0, #2372	; 0x944
 8006c44:	f00b fe5a 	bl	80128fc <SX126xWriteRegister>
                SX126xGetPacketStatus( &RadioPktStatus );
 8006c48:	4d19      	ldr	r5, [pc, #100]	; (8006cb0 <RadioIrqProcess+0x174>)
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 8006c4a:	481a      	ldr	r0, [pc, #104]	; (8006cb4 <RadioIrqProcess+0x178>)
 8006c4c:	22ff      	movs	r2, #255	; 0xff
 8006c4e:	f10d 0107 	add.w	r1, sp, #7
 8006c52:	f00c f9d0 	bl	8012ff6 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 8006c56:	4628      	mov	r0, r5
 8006c58:	f7ff fe4c 	bl	80068f4 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0ab      	beq.n	8006bba <RadioIrqProcess+0x7e>
 8006c62:	689e      	ldr	r6, [r3, #8]
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	d0a8      	beq.n	8006bba <RadioIrqProcess+0x7e>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 8006c68:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8006c6c:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8006c70:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006c74:	480f      	ldr	r0, [pc, #60]	; (8006cb4 <RadioIrqProcess+0x178>)
 8006c76:	47b0      	blx	r6
 8006c78:	e79f      	b.n	8006bba <RadioIrqProcess+0x7e>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8006c7a:	f7ff fa89 	bl	8006190 <SX126xGetOperatingMode>
 8006c7e:	2805      	cmp	r0, #5
 8006c80:	d1ba      	bne.n	8006bf8 <RadioIrqProcess+0xbc>
                TimerStop( &RxTimeoutTimer );
 8006c82:	4809      	ldr	r0, [pc, #36]	; (8006ca8 <RadioIrqProcess+0x16c>)
 8006c84:	f7ff fc2c 	bl	80064e0 <TimerStop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f7ff fa87 	bl	800619c <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <RadioIrqProcess+0x168>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0b0      	beq.n	8006bf8 <RadioIrqProcess+0xbc>
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	e7ac      	b.n	8006bf4 <RadioIrqProcess+0xb8>
 8006c9a:	bf00      	nop
 8006c9c:	20002453 	.word	0x20002453
 8006ca0:	200011c0 	.word	0x200011c0
 8006ca4:	20001094 	.word	0x20001094
 8006ca8:	200010b0 	.word	0x200010b0
 8006cac:	20002555 	.word	0x20002555
 8006cb0:	20001098 	.word	0x20001098
 8006cb4:	20002456 	.word	0x20002456

08006cb8 <RadioTimeOnAir>:
{
 8006cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cba:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8006cbe:	f89d c018 	ldrb.w	ip, [sp, #24]
 8006cc2:	f89d 701c 	ldrb.w	r7, [sp, #28]
 8006cc6:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
 8006cca:	b140      	cbz	r0, 8006cde <RadioTimeOnAir+0x26>
 8006ccc:	2801      	cmp	r0, #1
 8006cce:	d019      	beq.n	8006d04 <RadioTimeOnAir+0x4c>
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 8006cd4:	18a0      	adds	r0, r4, r2
 8006cd6:	3801      	subs	r0, #1
 8006cd8:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8006cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006cde:	f1bc 0f00 	cmp.w	ip, #0
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2308      	moveq	r3, #8
 8006ce6:	2300      	movne	r3, #0
               ( ( crcOn == true ) ? 2 : 0 ) 
 8006ce8:	2d00      	cmp	r5, #0
    return ( preambleLen << 3 ) +
 8006cea:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
               ( ( crcOn == true ) ? 2 : 0 ) 
 8006cee:	bf14      	ite	ne
 8006cf0:	2002      	movne	r0, #2
 8006cf2:	2000      	moveq	r0, #0
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006cf4:	3418      	adds	r4, #24
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8006cf6:	4438      	add	r0, r7
             ( syncWordLength << 3 ) +
 8006cf8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8006cfc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006d00:	4344      	muls	r4, r0
        break;
 8006d02:	e7e7      	b.n	8006cd4 <RadioTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006d04:	1f50      	subs	r0, r2, #5
 8006d06:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 8006d08:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006d0c:	d802      	bhi.n	8006d14 <RadioTimeOnAir+0x5c>
        if( preambleLen < 12 )
 8006d0e:	2c0c      	cmp	r4, #12
 8006d10:	bf38      	it	cc
 8006d12:	240c      	movcc	r4, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d137      	bne.n	8006d88 <RadioTimeOnAir+0xd0>
 8006d18:	f1a2 060b 	sub.w	r6, r2, #11
 8006d1c:	2e01      	cmp	r6, #1
 8006d1e:	bf8c      	ite	hi
 8006d20:	2600      	movhi	r6, #0
 8006d22:	2601      	movls	r6, #1
                            ( crcOn ? 16 : 0 ) -
 8006d24:	2d00      	cmp	r5, #0
 8006d26:	bf14      	ite	ne
 8006d28:	2010      	movne	r0, #16
 8006d2a:	2000      	moveq	r0, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006d2c:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
                            ( fixLen ? 0 : 20 );
 8006d30:	f1bc 0f00 	cmp.w	ip, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2700      	movne	r7, #0
 8006d38:	2714      	moveq	r7, #20
                            ( crcOn ? 16 : 0 ) -
 8006d3a:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
 8006d3e:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
 8006d40:	4438      	add	r0, r7
 8006d42:	ea4f 0582 	mov.w	r5, r2, lsl #2
            ceilDenominator = 4 * ( datarate - 2 );
 8006d46:	f1a2 0702 	sub.w	r7, r2, #2
    if( datarate <= 6 )
 8006d4a:	d902      	bls.n	8006d52 <RadioTimeOnAir+0x9a>
        ceilNumerator += 8;
 8006d4c:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 8006d4e:	b106      	cbz	r6, 8006d52 <RadioTimeOnAir+0x9a>
            ceilDenominator = 4 * ( datarate - 2 );
 8006d50:	00bd      	lsls	r5, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006d52:	2800      	cmp	r0, #0
 8006d54:	bfac      	ite	ge
 8006d56:	182e      	addge	r6, r5, r0
 8006d58:	1c2e      	addlt	r6, r5, #0
 8006d5a:	1e70      	subs	r0, r6, #1
 8006d5c:	fb90 f5f5 	sdiv	r5, r0, r5
 8006d60:	fb03 4405 	mla	r4, r3, r5, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006d64:	4b0d      	ldr	r3, [pc, #52]	; (8006d9c <RadioTimeOnAir+0xe4>)
 8006d66:	5c5b      	ldrb	r3, [r3, r1]
    if( datarate <= 6 )
 8006d68:	2a06      	cmp	r2, #6
    int32_t intermediate =
 8006d6a:	bf8c      	ite	hi
 8006d6c:	340c      	addhi	r4, #12
        intermediate += 2;
 8006d6e:	340e      	addls	r4, #14
    switch( bw )
 8006d70:	2b0a      	cmp	r3, #10
 8006d72:	d812      	bhi.n	8006d9a <RadioTimeOnAir+0xe2>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006d74:	00a4      	lsls	r4, r4, #2
 8006d76:	4a0a      	ldr	r2, [pc, #40]	; (8006da0 <RadioTimeOnAir+0xe8>)
 8006d78:	3401      	adds	r4, #1
 8006d7a:	40bc      	lsls	r4, r7
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006d84:	4344      	muls	r4, r0
 8006d86:	e7a5      	b.n	8006cd4 <RadioTimeOnAir+0x1c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006d88:	2901      	cmp	r1, #1
 8006d8a:	d104      	bne.n	8006d96 <RadioTimeOnAir+0xde>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006d8c:	2a0c      	cmp	r2, #12
 8006d8e:	bf14      	ite	ne
 8006d90:	2600      	movne	r6, #0
 8006d92:	2601      	moveq	r6, #1
 8006d94:	e7c6      	b.n	8006d24 <RadioTimeOnAir+0x6c>
    bool    lowDatareOptimize = false;
 8006d96:	2600      	movs	r6, #0
 8006d98:	e7c4      	b.n	8006d24 <RadioTimeOnAir+0x6c>
    return ( numerator + denominator - 1 ) / denominator;
 8006d9a:	deff      	udf	#255	; 0xff
 8006d9c:	08019dba 	.word	0x08019dba
 8006da0:	0801847c 	.word	0x0801847c

08006da4 <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8006da4:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <RadioSetPublicNetwork+0x38>)
{
 8006da6:	b510      	push	{r4, lr}
 8006da8:	4604      	mov	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8006daa:	7018      	strb	r0, [r3, #0]
 8006dac:	7058      	strb	r0, [r3, #1]
    switch( modem )
 8006dae:	f000 f817 	bl	8006de0 <RadioSetModem.part.0>
    if( enable == true )
 8006db2:	b15c      	cbz	r4, 8006dcc <RadioSetPublicNetwork+0x28>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006db4:	2134      	movs	r1, #52	; 0x34
 8006db6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006dba:	f00b fd9f 	bl	80128fc <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8006dbe:	2144      	movs	r1, #68	; 0x44
}
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006dc4:	f240 7041 	movw	r0, #1857	; 0x741
 8006dc8:	f00b bd98 	b.w	80128fc <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006dcc:	2114      	movs	r1, #20
 8006dce:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006dd2:	f00b fd93 	bl	80128fc <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006dd6:	2124      	movs	r1, #36	; 0x24
 8006dd8:	e7f2      	b.n	8006dc0 <RadioSetPublicNetwork+0x1c>
 8006dda:	bf00      	nop
 8006ddc:	20002454 	.word	0x20002454

08006de0 <RadioSetModem.part.0>:
void RadioSetModem( RadioModems_t modem )
 8006de0:	b508      	push	{r3, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 8006de2:	2001      	movs	r0, #1
 8006de4:	f7ff fc8c 	bl	8006700 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <RadioSetModem.part.0+0x20>)
 8006dea:	7818      	ldrb	r0, [r3, #0]
 8006dec:	785a      	ldrb	r2, [r3, #1]
 8006dee:	4282      	cmp	r2, r0
 8006df0:	d004      	beq.n	8006dfc <RadioSetModem.part.0+0x1c>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8006df2:	7058      	strb	r0, [r3, #1]
}
 8006df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 8006df8:	f7ff bfd4 	b.w	8006da4 <RadioSetPublicNetwork>
}
 8006dfc:	bd08      	pop	{r3, pc}
 8006dfe:	bf00      	nop
 8006e00:	20002454 	.word	0x20002454

08006e04 <RadioSetModem>:
    switch( modem )
 8006e04:	2801      	cmp	r0, #1
{
 8006e06:	b508      	push	{r3, lr}
    switch( modem )
 8006e08:	d006      	beq.n	8006e18 <RadioSetModem+0x14>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f7ff fc78 	bl	8006700 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 8006e10:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <RadioSetModem+0x1c>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	705a      	strb	r2, [r3, #1]
}
 8006e16:	bd08      	pop	{r3, pc}
 8006e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e1c:	f7ff bfe0 	b.w	8006de0 <RadioSetModem.part.0>
 8006e20:	20002454 	.word	0x20002454

08006e24 <RadioSetRxConfig>:
{
 8006e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	460e      	mov	r6, r1
 8006e2c:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8006e30:	9100      	str	r1, [sp, #0]
 8006e32:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8006e36:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8006e3a:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
    RxContinuous = rxContinuous;
 8006e3e:	4c6a      	ldr	r4, [pc, #424]	; (8006fe8 <RadioSetRxConfig+0x1c4>)
 8006e40:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8006fec <RadioSetRxConfig+0x1c8>
{
 8006e44:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
    RxContinuous = rxContinuous;
 8006e48:	7021      	strb	r1, [r4, #0]
        symbTimeout = 0;
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	bf18      	it	ne
 8006e4e:	2700      	movne	r7, #0
        MaxPayloadLength = 0xFF;
 8006e50:	f1b9 0f00 	cmp.w	r9, #0
{
 8006e54:	4615      	mov	r5, r2
 8006e56:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
        MaxPayloadLength = 0xFF;
 8006e5a:	bf08      	it	eq
 8006e5c:	22ff      	moveq	r2, #255	; 0xff
 8006e5e:	f88b 2000 	strb.w	r2, [fp]
    switch( modem )
 8006e62:	4680      	mov	r8, r0
 8006e64:	b120      	cbz	r0, 8006e70 <RadioSetRxConfig+0x4c>
 8006e66:	2801      	cmp	r0, #1
 8006e68:	d054      	beq.n	8006f14 <RadioSetRxConfig+0xf0>
}
 8006e6a:	b005      	add	sp, #20
 8006e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006e70:	4c5f      	ldr	r4, [pc, #380]	; (8006ff0 <RadioSetRxConfig+0x1cc>)
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8006e72:	f00b ffba 	bl	8012dea <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006e76:	230b      	movs	r3, #11
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8006e78:	0070      	lsls	r0, r6, #1
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006e7a:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006e7e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006e82:	f884 80e0 	strb.w	r8, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8006e86:	f7ff fddf 	bl	8006a48 <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006e8a:	f641 0304 	movw	r3, #6148	; 0x1804
 8006e8e:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006e92:	f89b 3000 	ldrb.w	r3, [fp]
 8006e96:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006e9a:	9b00      	ldr	r3, [sp, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8006e9c:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bf14      	ite	ne
 8006ea4:	23f2      	movne	r3, #242	; 0xf2
 8006ea6:	2301      	moveq	r3, #1
 8006ea8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006eac:	ea4f 0aca 	mov.w	sl, sl, lsl #3
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006eb0:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006eb2:	f089 0901 	eor.w	r9, r9, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006eb6:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006eba:	f884 80b8 	strb.w	r8, [r4, #184]	; 0xb8
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006ebe:	f8a4 a0ba 	strh.w	sl, [r4, #186]	; 0xba
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006ec2:	f884 80be 	strb.w	r8, [r4, #190]	; 0xbe
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006ec6:	f884 90bf 	strb.w	r9, [r4, #191]	; 0xbf
            RadioStandby( );
 8006eca:	f00c f8bd 	bl	8013048 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006ece:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 8006ed2:	3800      	subs	r0, #0
 8006ed4:	bf18      	it	ne
 8006ed6:	2001      	movne	r0, #1
 8006ed8:	f7ff ff94 	bl	8006e04 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8006edc:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8006ee0:	f7ff fc24 	bl	800672c <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8006ee4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8006ee8:	f7ff fc78 	bl	80067dc <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006eec:	4a41      	ldr	r2, [pc, #260]	; (8006ff4 <RadioSetRxConfig+0x1d0>)
 8006eee:	6810      	ldr	r0, [r2, #0]
 8006ef0:	6851      	ldr	r1, [r2, #4]
 8006ef2:	ab02      	add	r3, sp, #8
 8006ef4:	c303      	stmia	r3!, {r0, r1}
 8006ef6:	a802      	add	r0, sp, #8
 8006ef8:	f00b fea5 	bl	8012c46 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8006efc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f00:	f7ff fb42 	bl	8006588 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8006f04:	4b3c      	ldr	r3, [pc, #240]	; (8006ff8 <RadioSetRxConfig+0x1d4>)
 8006f06:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006f0a:	4357      	muls	r7, r2
 8006f0c:	fbb7 f5f5 	udiv	r5, r7, r5
 8006f10:	601d      	str	r5, [r3, #0]
            break;
 8006f12:	e7aa      	b.n	8006e6a <RadioSetRxConfig+0x46>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8006f14:	2000      	movs	r0, #0
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	f00b ff67 	bl	8012dea <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006f1c:	4937      	ldr	r1, [pc, #220]	; (8006ffc <RadioSetRxConfig+0x1d8>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006f1e:	4c34      	ldr	r4, [pc, #208]	; (8006ff0 <RadioSetRxConfig+0x1cc>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006f20:	5d89      	ldrb	r1, [r1, r6]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006f22:	9b01      	ldr	r3, [sp, #4]
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006f24:	f884 80e0 	strb.w	r8, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006f28:	b2ea      	uxtb	r2, r5
 8006f2a:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006f2e:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006f32:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006f36:	2e00      	cmp	r6, #0
 8006f38:	d144      	bne.n	8006fc4 <RadioSetRxConfig+0x1a0>
 8006f3a:	3d0b      	subs	r5, #11
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006f3c:	2d01      	cmp	r5, #1
 8006f3e:	bf8c      	ite	hi
 8006f40:	2500      	movhi	r5, #0
 8006f42:	2501      	movls	r5, #1
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006f44:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006f46:	3a05      	subs	r2, #5
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006f4e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006f52:	d840      	bhi.n	8006fd6 <RadioSetRxConfig+0x1b2>
                if( preambleLen < 12 )
 8006f54:	f1ba 0f0b 	cmp.w	sl, #11
 8006f58:	d83d      	bhi.n	8006fd6 <RadioSetRxConfig+0x1b2>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006f60:	f89b 3000 	ldrb.w	r3, [fp]
 8006f64:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006f68:	9b00      	ldr	r3, [sp, #0]
 8006f6a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006f6e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8006f72:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006f76:	f884 90c6 	strb.w	r9, [r4, #198]	; 0xc6
            RadioStandby( );
 8006f7a:	f00c f865 	bl	8013048 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006f7e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 8006f82:	3800      	subs	r0, #0
 8006f84:	bf18      	it	ne
 8006f86:	2001      	movne	r0, #1
 8006f88:	f7ff ff3c 	bl	8006e04 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8006f8c:	481c      	ldr	r0, [pc, #112]	; (8007000 <RadioSetRxConfig+0x1dc>)
 8006f8e:	f7ff fbcd 	bl	800672c <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8006f92:	481c      	ldr	r0, [pc, #112]	; (8007004 <RadioSetRxConfig+0x1e0>)
 8006f94:	f7ff fc22 	bl	80067dc <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 8006f98:	b2f8      	uxtb	r0, r7
 8006f9a:	f00b ff32 	bl	8012e02 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006f9e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
 8006fa2:	2b01      	cmp	r3, #1
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 8006fa4:	f240 7036 	movw	r0, #1846	; 0x736
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006fa8:	d118      	bne.n	8006fdc <RadioSetRxConfig+0x1b8>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 8006faa:	f00b fcc8 	bl	801293e <SX126xReadRegister>
 8006fae:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 8006fb2:	f240 7036 	movw	r0, #1846	; 0x736
 8006fb6:	f00b fca1 	bl	80128fc <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 8006fba:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <RadioSetRxConfig+0x1d4>)
 8006fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fc0:	601a      	str	r2, [r3, #0]
}
 8006fc2:	e752      	b.n	8006e6a <RadioSetRxConfig+0x46>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006fc4:	2e01      	cmp	r6, #1
 8006fc6:	d104      	bne.n	8006fd2 <RadioSetRxConfig+0x1ae>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006fc8:	f1a5 030c 	sub.w	r3, r5, #12
 8006fcc:	425d      	negs	r5, r3
 8006fce:	415d      	adcs	r5, r3
 8006fd0:	e7b8      	b.n	8006f44 <RadioSetRxConfig+0x120>
 8006fd2:	2500      	movs	r5, #0
 8006fd4:	e7b6      	b.n	8006f44 <RadioSetRxConfig+0x120>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006fd6:	f8a4 a0c4 	strh.w	sl, [r4, #196]	; 0xc4
 8006fda:	e7c1      	b.n	8006f60 <RadioSetRxConfig+0x13c>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 8006fdc:	f00b fcaf 	bl	801293e <SX126xReadRegister>
 8006fe0:	f040 0104 	orr.w	r1, r0, #4
 8006fe4:	b2c9      	uxtb	r1, r1
 8006fe6:	e7e4      	b.n	8006fb2 <RadioSetRxConfig+0x18e>
 8006fe8:	20002555 	.word	0x20002555
 8006fec:	2000024c 	.word	0x2000024c
 8006ff0:	200010c8 	.word	0x200010c8
 8006ff4:	08018249 	.word	0x08018249
 8006ff8:	200010ac 	.word	0x200010ac
 8006ffc:	08019dba 	.word	0x08019dba
 8007000:	200011a8 	.word	0x200011a8
 8007004:	20001180 	.word	0x20001180

08007008 <RadioSetTxConfig>:
{
 8007008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800700e:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8007012:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8007016:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 800701a:	460f      	mov	r7, r1
 800701c:	4693      	mov	fp, r2
    switch( modem )
 800701e:	4606      	mov	r6, r0
 8007020:	b148      	cbz	r0, 8007036 <RadioSetTxConfig+0x2e>
 8007022:	2801      	cmp	r0, #1
 8007024:	d04e      	beq.n	80070c4 <RadioSetTxConfig+0xbc>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 8007026:	f640 0089 	movw	r0, #2185	; 0x889
 800702a:	f00b fc88 	bl	801293e <SX126xReadRegister>
 800702e:	f040 0104 	orr.w	r1, r0, #4
 8007032:	b2c9      	uxtb	r1, r1
 8007034:	e08f      	b.n	8007156 <RadioSetTxConfig+0x14e>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007036:	4c54      	ldr	r4, [pc, #336]	; (8007188 <RadioSetTxConfig+0x180>)
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007038:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800703a:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800703e:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007040:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007044:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8007048:	f7ff fcfe 	bl	8006a48 <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800704c:	f641 0304 	movw	r3, #6148	; 0x1804
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007050:	f1ba 0f00 	cmp.w	sl, #0
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007054:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007058:	bf14      	ite	ne
 800705a:	23f2      	movne	r3, #242	; 0xf2
 800705c:	2301      	moveq	r3, #1
 800705e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007062:	ea4f 08c8 	mov.w	r8, r8, lsl #3
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007066:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007068:	f089 0901 	eor.w	r9, r9, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800706c:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8007070:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007074:	f8c4 b0e8 	str.w	fp, [r4, #232]	; 0xe8
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007078:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800707c:	f8a4 80ba 	strh.w	r8, [r4, #186]	; 0xba
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007080:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007084:	f884 90bf 	strb.w	r9, [r4, #191]	; 0xbf
            RadioStandby( );
 8007088:	f00b ffde 	bl	8013048 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800708c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 8007090:	3800      	subs	r0, #0
 8007092:	bf18      	it	ne
 8007094:	2001      	movne	r0, #1
 8007096:	f7ff feb5 	bl	8006e04 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800709a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 800709e:	f7ff fb45 	bl	800672c <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80070a2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80070a6:	f7ff fb99 	bl	80067dc <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80070aa:	4a38      	ldr	r2, [pc, #224]	; (800718c <RadioSetTxConfig+0x184>)
 80070ac:	6810      	ldr	r0, [r2, #0]
 80070ae:	6851      	ldr	r1, [r2, #4]
 80070b0:	466b      	mov	r3, sp
 80070b2:	c303      	stmia	r3!, {r0, r1}
 80070b4:	4668      	mov	r0, sp
 80070b6:	f00b fdc6 	bl	8012c46 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 80070ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070be:	f7ff fa63 	bl	8006588 <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80070c2:	e7b0      	b.n	8007026 <RadioSetTxConfig+0x1e>
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80070c4:	4932      	ldr	r1, [pc, #200]	; (8007190 <RadioSetTxConfig+0x188>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80070c6:	4c30      	ldr	r4, [pc, #192]	; (8007188 <RadioSetTxConfig+0x180>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80070c8:	5cc9      	ldrb	r1, [r1, r3]
 80070ca:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80070ce:	b2ea      	uxtb	r2, r5
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80070d0:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80070d4:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80070d8:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80070dc:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d145      	bne.n	8007170 <RadioSetTxConfig+0x168>
 80070e4:	3d0b      	subs	r5, #11
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80070e6:	2d01      	cmp	r5, #1
 80070e8:	bf8c      	ite	hi
 80070ea:	2500      	movhi	r5, #0
 80070ec:	2501      	movls	r5, #1
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80070ee:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80070f0:	3a05      	subs	r2, #5
 80070f2:	429a      	cmp	r2, r3
 80070f4:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80070f8:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80070fc:	d841      	bhi.n	8007182 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 80070fe:	f1b8 0f0b 	cmp.w	r8, #11
 8007102:	d83e      	bhi.n	8007182 <RadioSetTxConfig+0x17a>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8007104:	230c      	movs	r3, #12
 8007106:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <RadioSetTxConfig+0x18c>)
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800710c:	f884 90c6 	strb.w	r9, [r4, #198]	; 0xc6
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007116:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800711a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800711e:	f884 a0c8 	strb.w	sl, [r4, #200]	; 0xc8
            RadioStandby( );
 8007122:	f00b ff91 	bl	8013048 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8007126:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 800712a:	3800      	subs	r0, #0
 800712c:	bf18      	it	ne
 800712e:	2001      	movne	r0, #1
 8007130:	f7ff fe68 	bl	8006e04 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8007134:	4818      	ldr	r0, [pc, #96]	; (8007198 <RadioSetTxConfig+0x190>)
 8007136:	f7ff faf9 	bl	800672c <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800713a:	4818      	ldr	r0, [pc, #96]	; (800719c <RadioSetTxConfig+0x194>)
 800713c:	f7ff fb4e 	bl	80067dc <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007140:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
 8007144:	2b06      	cmp	r3, #6
 8007146:	f47f af6e 	bne.w	8007026 <RadioSetTxConfig+0x1e>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) & ~( 1 << 2 ) );
 800714a:	f640 0089 	movw	r0, #2185	; 0x889
 800714e:	f00b fbf6 	bl	801293e <SX126xReadRegister>
 8007152:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 8007156:	f640 0089 	movw	r0, #2185	; 0x889
 800715a:	f00b fbcf 	bl	80128fc <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 800715e:	4638      	mov	r0, r7
 8007160:	f00b fb71 	bl	8012846 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 8007164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007166:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <RadioSetTxConfig+0x198>)
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	b003      	add	sp, #12
 800716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007170:	2b01      	cmp	r3, #1
 8007172:	d104      	bne.n	800717e <RadioSetTxConfig+0x176>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007174:	f1a5 030c 	sub.w	r3, r5, #12
 8007178:	425d      	negs	r5, r3
 800717a:	415d      	adcs	r5, r3
 800717c:	e7b7      	b.n	80070ee <RadioSetTxConfig+0xe6>
 800717e:	2500      	movs	r5, #0
 8007180:	e7b5      	b.n	80070ee <RadioSetTxConfig+0xe6>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007182:	f8a4 80c4 	strh.w	r8, [r4, #196]	; 0xc4
 8007186:	e7c0      	b.n	800710a <RadioSetTxConfig+0x102>
 8007188:	200010c8 	.word	0x200010c8
 800718c:	08018249 	.word	0x08018249
 8007190:	08019dba 	.word	0x08019dba
 8007194:	2000024c 	.word	0x2000024c
 8007198:	200011a8 	.word	0x200011a8
 800719c:	20001180 	.word	0x20001180
 80071a0:	200011bc 	.word	0x200011bc

080071a4 <RadioInit>:
{
 80071a4:	b508      	push	{r3, lr}
    RadioEvents = events;
 80071a6:	4b17      	ldr	r3, [pc, #92]	; (8007204 <RadioInit+0x60>)
 80071a8:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 80071aa:	4817      	ldr	r0, [pc, #92]	; (8007208 <RadioInit+0x64>)
 80071ac:	f7ff fa26 	bl	80065fc <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 80071b0:	2000      	movs	r0, #0
 80071b2:	f00b fd51 	bl	8012c58 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 80071b6:	2001      	movs	r0, #1
 80071b8:	f00b fe4e 	bl	8012e58 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 80071bc:	2100      	movs	r1, #0
 80071be:	4608      	mov	r0, r1
 80071c0:	f00b feff 	bl	8012fc2 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 80071c4:	2104      	movs	r1, #4
 80071c6:	2000      	movs	r0, #0
 80071c8:	f00b febd 	bl	8012f46 <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80071cc:	2300      	movs	r3, #0
 80071ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80071d2:	461a      	mov	r2, r3
 80071d4:	4608      	mov	r0, r1
 80071d6:	f00b fe6b 	bl	8012eb0 <SX126xSetDioIrqParams>
    RadioAddRegisterToRetentionList( REG_RX_GAIN );
 80071da:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80071de:	f00b ffb1 	bl	8013144 <RadioAddRegisterToRetentionList>
    RadioAddRegisterToRetentionList( REG_TX_MODULATION );
 80071e2:	f640 0089 	movw	r0, #2185	; 0x889
 80071e6:	f00b ffad 	bl	8013144 <RadioAddRegisterToRetentionList>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80071ea:	4908      	ldr	r1, [pc, #32]	; (800720c <RadioInit+0x68>)
 80071ec:	4808      	ldr	r0, [pc, #32]	; (8007210 <RadioInit+0x6c>)
 80071ee:	f00b fce3 	bl	8012bb8 <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80071f2:	4908      	ldr	r1, [pc, #32]	; (8007214 <RadioInit+0x70>)
 80071f4:	4808      	ldr	r0, [pc, #32]	; (8007218 <RadioInit+0x74>)
 80071f6:	f00b fcdf 	bl	8012bb8 <TimerInit>
    IrqFired = false;
 80071fa:	4b08      	ldr	r3, [pc, #32]	; (800721c <RadioInit+0x78>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	701a      	strb	r2, [r3, #0]
}
 8007200:	bd08      	pop	{r3, pc}
 8007202:	bf00      	nop
 8007204:	20001094 	.word	0x20001094
 8007208:	08006995 	.word	0x08006995
 800720c:	0800696d 	.word	0x0800696d
 8007210:	200011c0 	.word	0x200011c0
 8007214:	08006981 	.word	0x08006981
 8007218:	200010b0 	.word	0x200010b0
 800721c:	20002453 	.word	0x20002453

08007220 <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8007220:	f1a1 0310 	sub.w	r3, r1, #16
{
 8007224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	b2dc      	uxtb	r4, r3
 800722a:	2c10      	cmp	r4, #16
 800722c:	d806      	bhi.n	800723c <aes_set_key+0x1c>
 800722e:	2301      	movs	r3, #1
 8007230:	40a3      	lsls	r3, r4
 8007232:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800723a:	b92b      	cbnz	r3, 8007248 <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 8007242:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while( nn-- )
 8007248:	1e53      	subs	r3, r2, #1
 800724a:	1844      	adds	r4, r0, r1
 800724c:	42a0      	cmp	r0, r4
 800724e:	d152      	bne.n	80072f6 <aes_set_key+0xd6>
    hi = (keylen + 28) << 2;
 8007250:	f101 031c 	add.w	r3, r1, #28
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	fa5f f883 	uxtb.w	r8, r3
    ctx->rnd = (hi >> 4) - 1;
 800725a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800725e:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 8007260:	4c2c      	ldr	r4, [pc, #176]	; (8007314 <aes_set_key+0xf4>)
    ctx->rnd = (hi >> 4) - 1;
 8007262:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007266:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 800726a:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 800726c:	eb02 0c03 	add.w	ip, r2, r3
        if( cc % keylen == 0 )
 8007270:	fbb3 f0f1 	udiv	r0, r3, r1
 8007274:	fb01 3010 	mls	r0, r1, r0, r3
 8007278:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 800727c:	f81c ac04 	ldrb.w	sl, [ip, #-4]
        t1 = ctx->ksch[cc - 3];
 8007280:	f81c 7c03 	ldrb.w	r7, [ip, #-3]
        t2 = ctx->ksch[cc - 2];
 8007284:	f81c 6c02 	ldrb.w	r6, [ip, #-2]
        t3 = ctx->ksch[cc - 1];
 8007288:	f81c 5c01 	ldrb.w	r5, [ip, #-1]
        if( cc % keylen == 0 )
 800728c:	d138      	bne.n	8007300 <aes_set_key+0xe0>
            rc = f2(rc);
 800728e:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 8007292:	f814 e007 	ldrb.w	lr, [r4, r7]
            t1 = s_box(t2);
 8007296:	5da7      	ldrb	r7, [r4, r6]
            t2 = s_box(t3);
 8007298:	5d66      	ldrb	r6, [r4, r5]
            t3 = s_box(tt);
 800729a:	f814 500a 	ldrb.w	r5, [r4, sl]
            rc = f2(rc);
 800729e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80072a2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 80072a6:	ea89 0e0e 	eor.w	lr, r9, lr
            rc = f2(rc);
 80072aa:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 80072ae:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 80072b2:	46f2      	mov	sl, lr
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80072b4:	1a58      	subs	r0, r3, r1
 80072b6:	b2c0      	uxtb	r0, r0
 80072b8:	f812 e000 	ldrb.w	lr, [r2, r0]
 80072bc:	ea8a 0a0e 	eor.w	sl, sl, lr
 80072c0:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80072c4:	4410      	add	r0, r2
 80072c6:	f103 0e01 	add.w	lr, r3, #1
 80072ca:	f890 a001 	ldrb.w	sl, [r0, #1]
 80072ce:	fa5f fe8e 	uxtb.w	lr, lr
 80072d2:	ea87 070a 	eor.w	r7, r7, sl
 80072d6:	f802 700e 	strb.w	r7, [r2, lr]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80072da:	7887      	ldrb	r7, [r0, #2]
 80072dc:	407e      	eors	r6, r7
 80072de:	f88c 6002 	strb.w	r6, [ip, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80072e2:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80072e4:	3304      	adds	r3, #4
 80072e6:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80072e8:	4045      	eors	r5, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80072ea:	4598      	cmp	r8, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80072ec:	f88c 5003 	strb.w	r5, [ip, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80072f0:	d8bc      	bhi.n	800726c <aes_set_key+0x4c>
    return 0;
 80072f2:	2000      	movs	r0, #0
 80072f4:	e7a6      	b.n	8007244 <aes_set_key+0x24>
        *d++ = *s++;
 80072f6:	f810 5b01 	ldrb.w	r5, [r0], #1
 80072fa:	f803 5f01 	strb.w	r5, [r3, #1]!
 80072fe:	e7a5      	b.n	800724c <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8007300:	2918      	cmp	r1, #24
 8007302:	d9d7      	bls.n	80072b4 <aes_set_key+0x94>
 8007304:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 8007306:	bf01      	itttt	eq
 8007308:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 800730c:	5de7      	ldrbeq	r7, [r4, r7]
            t2 = s_box(t2);
 800730e:	5da6      	ldrbeq	r6, [r4, r6]
            t3 = s_box(t3);
 8007310:	5d65      	ldrbeq	r5, [r4, r5]
 8007312:	e7cf      	b.n	80072b4 <aes_set_key+0x94>
 8007314:	08019fc1 	.word	0x08019fc1

08007318 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	b093      	sub	sp, #76	; 0x4c
    if( ctx->rnd )
 800731e:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 8007322:	910d      	str	r1, [sp, #52]	; 0x34
 8007324:	920b      	str	r2, [sp, #44]	; 0x2c
    if( ctx->rnd )
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8144 	beq.w	80075b4 <aes_encrypt+0x29c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800732c:	4601      	mov	r1, r0
 800732e:	a80e      	add	r0, sp, #56	; 0x38
 8007330:	f00b ff7e 	bl	8013230 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8007334:	4ca0      	ldr	r4, [pc, #640]	; (80075b8 <aes_encrypt+0x2a0>)
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007336:	4da1      	ldr	r5, [pc, #644]	; (80075bc <aes_encrypt+0x2a4>)
 8007338:	4ea1      	ldr	r6, [pc, #644]	; (80075c0 <aes_encrypt+0x2a8>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 800733a:	2301      	movs	r3, #1
 800733c:	9301      	str	r3, [sp, #4]
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800733e:	9a01      	ldr	r2, [sp, #4]
 8007340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007342:	f8dd 9004 	ldr.w	r9, [sp, #4]
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8007346:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800734a:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800734e:	f89d c03d 	ldrb.w	ip, [sp, #61]	; 0x3d
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8007352:	f89d 7041 	ldrb.w	r7, [sp, #65]	; 0x41
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8007356:	f89d 0042 	ldrb.w	r0, [sp, #66]	; 0x42
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800735a:	f89d 1046 	ldrb.w	r1, [sp, #70]	; 0x46
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800735e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007362:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8007364:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8007368:	9302      	str	r3, [sp, #8]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800736a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800736e:	9303      	str	r3, [sp, #12]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8007370:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8007374:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8007376:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800737a:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800737c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8007380:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8007382:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8007386:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8007388:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800738c:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800738e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8007392:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8007394:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8007398:	930a      	str	r3, [sp, #40]	; 0x28
        for( r = 1 ; r < ctx->rnd ; ++r )
 800739a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800739c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
        for( r = 1 ; r < ctx->rnd ; ++r )
 80073a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80073a4:	454b      	cmp	r3, r9
 80073a6:	d844      	bhi.n	8007432 <aes_encrypt+0x11a>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80073a8:	f814 3008 	ldrb.w	r3, [r4, r8]
 80073ac:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 80073b0:	f814 300e 	ldrb.w	r3, [r4, lr]
 80073b4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80073b8:	9b07      	ldr	r3, [sp, #28]
 80073ba:	5ce3      	ldrb	r3, [r4, r3]
 80073bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80073c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c2:	5ce3      	ldrb	r3, [r4, r3]
 80073c4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80073c8:	f814 300c 	ldrb.w	r3, [r4, ip]
 80073cc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80073d0:	5de3      	ldrb	r3, [r4, r7]
 80073d2:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	5ce3      	ldrb	r3, [r4, r3]
 80073da:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 80073de:	9b02      	ldr	r3, [sp, #8]
 80073e0:	5ce3      	ldrb	r3, [r4, r3]
 80073e2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80073e6:	5c23      	ldrb	r3, [r4, r0]
 80073e8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	5ce3      	ldrb	r3, [r4, r3]
 80073f0:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80073f4:	5c63      	ldrb	r3, [r4, r1]
 80073f6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 80073fa:	9b05      	ldr	r3, [sp, #20]
 80073fc:	5ce3      	ldrb	r3, [r4, r3]
 80073fe:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007402:	9b08      	ldr	r3, [sp, #32]
 8007404:	5ce3      	ldrb	r3, [r4, r3]
 8007406:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 800740a:	9b06      	ldr	r3, [sp, #24]
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800740c:	980d      	ldr	r0, [sp, #52]	; 0x34
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800740e:	5ce3      	ldrb	r3, [r4, r3]
 8007410:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007414:	9b04      	ldr	r3, [sp, #16]
 8007416:	5ce3      	ldrb	r3, [r4, r3]
 8007418:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800741c:	a90e      	add	r1, sp, #56	; 0x38
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800741e:	5ca3      	ldrb	r3, [r4, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007422:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007426:	f00b ff03 	bl	8013230 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800742a:	2000      	movs	r0, #0
}
 800742c:	b013      	add	sp, #76	; 0x4c
 800742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007432:	f816 b00c 	ldrb.w	fp, [r6, ip]
 8007436:	f815 9008 	ldrb.w	r9, [r5, r8]
 800743a:	f814 a000 	ldrb.w	sl, [r4, r0]
 800743e:	5ca3      	ldrb	r3, [r4, r2]
 8007440:	ea89 090b 	eor.w	r9, r9, fp
 8007444:	ea8a 0909 	eor.w	r9, sl, r9
 8007448:	ea83 0909 	eor.w	r9, r3, r9
 800744c:	f88d 9038 	strb.w	r9, [sp, #56]	; 0x38
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8007450:	f814 9008 	ldrb.w	r9, [r4, r8]
 8007454:	f815 b00c 	ldrb.w	fp, [r5, ip]
 8007458:	ea83 0309 	eor.w	r3, r3, r9
 800745c:	ea8b 0303 	eor.w	r3, fp, r3
 8007460:	f816 b000 	ldrb.w	fp, [r6, r0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007464:	5c28      	ldrb	r0, [r5, r0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8007466:	ea83 030b 	eor.w	r3, r3, fp
 800746a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800746e:	f814 300c 	ldrb.w	r3, [r4, ip]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007472:	f816 c007 	ldrb.w	ip, [r6, r7]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007476:	ea89 0903 	eor.w	r9, r9, r3
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800747a:	ea8a 0303 	eor.w	r3, sl, r3
 800747e:	f816 a008 	ldrb.w	sl, [r6, r8]
 8007482:	ea8a 0a03 	eor.w	sl, sl, r3
 8007486:	5cab      	ldrb	r3, [r5, r2]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007488:	ea89 0900 	eor.w	r9, r9, r0
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800748c:	ea8a 0303 	eor.w	r3, sl, r3
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007490:	5cb0      	ldrb	r0, [r6, r2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007492:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007496:	f815 200e 	ldrb.w	r2, [r5, lr]
 800749a:	9b04      	ldr	r3, [sp, #16]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800749c:	ea89 0900 	eor.w	r9, r9, r0
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80074a0:	5c60      	ldrb	r0, [r4, r1]
 80074a2:	5ce3      	ldrb	r3, [r4, r3]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80074a4:	f88d 903a 	strb.w	r9, [sp, #58]	; 0x3a
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80074a8:	ea82 020c 	eor.w	r2, r2, ip
 80074ac:	4042      	eors	r2, r0
 80074ae:	405a      	eors	r2, r3
 80074b0:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80074b4:	f814 200e 	ldrb.w	r2, [r4, lr]
 80074b8:	f815 c007 	ldrb.w	ip, [r5, r7]
 80074bc:	4053      	eors	r3, r2
 80074be:	ea8c 0303 	eor.w	r3, ip, r3
 80074c2:	f816 c001 	ldrb.w	ip, [r6, r1]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80074c6:	5c69      	ldrb	r1, [r5, r1]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80074c8:	ea83 030c 	eor.w	r3, r3, ip
 80074cc:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80074d0:	5de3      	ldrb	r3, [r4, r7]
 80074d2:	405a      	eors	r2, r3
 80074d4:	404a      	eors	r2, r1
 80074d6:	9904      	ldr	r1, [sp, #16]
 80074d8:	5c71      	ldrb	r1, [r6, r1]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074da:	4043      	eors	r3, r0
 80074dc:	f816 000e 	ldrb.w	r0, [r6, lr]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80074e0:	404a      	eors	r2, r1
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074e2:	4058      	eors	r0, r3
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80074e4:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074e8:	9b04      	ldr	r3, [sp, #16]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80074ea:	9a07      	ldr	r2, [sp, #28]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074ec:	5ceb      	ldrb	r3, [r5, r3]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80074ee:	5caa      	ldrb	r2, [r5, r2]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80074f0:	4043      	eors	r3, r0
 80074f2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80074f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	5c30      	ldrb	r0, [r6, r0]
 80074fc:	5ce1      	ldrb	r1, [r4, r3]
 80074fe:	9b06      	ldr	r3, [sp, #24]
 8007500:	4042      	eors	r2, r0
 8007502:	5ce3      	ldrb	r3, [r4, r3]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007504:	980a      	ldr	r0, [sp, #40]	; 0x28
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007506:	404a      	eors	r2, r1
 8007508:	405a      	eors	r2, r3
 800750a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800750e:	9a07      	ldr	r2, [sp, #28]
 8007510:	5c28      	ldrb	r0, [r5, r0]
 8007512:	5ca2      	ldrb	r2, [r4, r2]
 8007514:	4053      	eors	r3, r2
 8007516:	4043      	eors	r3, r0
 8007518:	9803      	ldr	r0, [sp, #12]
 800751a:	5c30      	ldrb	r0, [r6, r0]
 800751c:	4043      	eors	r3, r0
 800751e:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007524:	9803      	ldr	r0, [sp, #12]
 8007526:	5ce3      	ldrb	r3, [r4, r3]
 8007528:	5c28      	ldrb	r0, [r5, r0]
 800752a:	405a      	eors	r2, r3
 800752c:	4042      	eors	r2, r0
 800752e:	9806      	ldr	r0, [sp, #24]
 8007530:	5c30      	ldrb	r0, [r6, r0]
 8007532:	4042      	eors	r2, r0
 8007534:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007538:	9a07      	ldr	r2, [sp, #28]
 800753a:	404b      	eors	r3, r1
 800753c:	5cb1      	ldrb	r1, [r6, r2]
 800753e:	9a06      	ldr	r2, [sp, #24]
 8007540:	404b      	eors	r3, r1
 8007542:	5ca9      	ldrb	r1, [r5, r2]
 8007544:	404b      	eors	r3, r1
 8007546:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800754a:	9b05      	ldr	r3, [sp, #20]
 800754c:	5ce3      	ldrb	r3, [r4, r3]
 800754e:	9a08      	ldr	r2, [sp, #32]
 8007550:	9802      	ldr	r0, [sp, #8]
 8007552:	5ca1      	ldrb	r1, [r4, r2]
 8007554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007556:	5c30      	ldrb	r0, [r6, r0]
 8007558:	5caa      	ldrb	r2, [r5, r2]
 800755a:	4042      	eors	r2, r0
 800755c:	405a      	eors	r2, r3
 800755e:	404a      	eors	r2, r1
 8007560:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8007564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007566:	9802      	ldr	r0, [sp, #8]
 8007568:	5ca2      	ldrb	r2, [r4, r2]
 800756a:	5c28      	ldrb	r0, [r5, r0]
 800756c:	4051      	eors	r1, r2
 800756e:	4041      	eors	r1, r0
 8007570:	9805      	ldr	r0, [sp, #20]
 8007572:	5c30      	ldrb	r0, [r6, r0]
 8007574:	4041      	eors	r1, r0
 8007576:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800757a:	9902      	ldr	r1, [sp, #8]
 800757c:	9805      	ldr	r0, [sp, #20]
 800757e:	5c61      	ldrb	r1, [r4, r1]
 8007580:	5c28      	ldrb	r0, [r5, r0]
 8007582:	404a      	eors	r2, r1
 8007584:	4042      	eors	r2, r0
 8007586:	9808      	ldr	r0, [sp, #32]
 8007588:	5c30      	ldrb	r0, [r6, r0]
 800758a:	4042      	eors	r2, r0
 800758c:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007592:	5cb2      	ldrb	r2, [r6, r2]
 8007594:	404b      	eors	r3, r1
 8007596:	4053      	eors	r3, r2
 8007598:	9a08      	ldr	r2, [sp, #32]
    xor_block(d, k);
 800759a:	990c      	ldr	r1, [sp, #48]	; 0x30
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800759c:	5caa      	ldrb	r2, [r5, r2]
    xor_block(d, k);
 800759e:	a80e      	add	r0, sp, #56	; 0x38
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80075a0:	4053      	eors	r3, r2
 80075a2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    xor_block(d, k);
 80075a6:	f00b fe02 	bl	80131ae <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80075aa:	9b01      	ldr	r3, [sp, #4]
 80075ac:	3301      	adds	r3, #1
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	e6c4      	b.n	800733e <aes_encrypt+0x26>
        return ( uint8_t )-1;
 80075b4:	20ff      	movs	r0, #255	; 0xff
 80075b6:	e739      	b.n	800742c <aes_encrypt+0x114>
 80075b8:	08019fc1 	.word	0x08019fc1
 80075bc:	08019dc1 	.word	0x08019dc1
 80075c0:	08019ec1 	.word	0x08019ec1

080075c4 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 80075c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075c8:	b0cb      	sub	sp, #300	; 0x12c
 80075ca:	4606      	mov	r6, r0
 80075cc:	f8dd 9148 	ldr.w	r9, [sp, #328]	; 0x148
 80075d0:	4617      	mov	r7, r2
 80075d2:	4698      	mov	r8, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80075d4:	460d      	mov	r5, r1
 80075d6:	b389      	cbz	r1, 800763c <ComputeCmac+0x78>
 80075d8:	f1b9 0f00 	cmp.w	r9, #0
 80075dc:	d02e      	beq.n	800763c <ComputeCmac+0x78>
    }

    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80075de:	a804      	add	r0, sp, #16
 80075e0:	f00b fe68 	bl	80132b4 <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80075e4:	4b16      	ldr	r3, [pc, #88]	; (8007640 <ComputeCmac+0x7c>)
 80075e6:	6819      	ldr	r1, [r3, #0]
 80075e8:	2400      	movs	r4, #0
 80075ea:	f101 0314 	add.w	r3, r1, #20
 80075ee:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 80075f2:	5c1a      	ldrb	r2, [r3, r0]
 80075f4:	4542      	cmp	r2, r8
 80075f6:	d113      	bne.n	8007620 <ComputeCmac+0x5c>
    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80075f8:	3015      	adds	r0, #21
 80075fa:	4401      	add	r1, r0
 80075fc:	a804      	add	r0, sp, #16
 80075fe:	f00b fe69 	bl	80132d4 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8007602:	b9a6      	cbnz	r6, 800762e <ComputeCmac+0x6a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8007604:	463a      	mov	r2, r7
 8007606:	4629      	mov	r1, r5
 8007608:	a804      	add	r0, sp, #16
 800760a:	f00b fe68 	bl	80132de <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800760e:	4668      	mov	r0, sp
 8007610:	a904      	add	r1, sp, #16
 8007612:	f00b fecb 	bl	80133ac <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8007616:	9b00      	ldr	r3, [sp, #0]
 8007618:	f8c9 3000 	str.w	r3, [r9]
 800761c:	2000      	movs	r0, #0
 800761e:	e003      	b.n	8007628 <ComputeCmac+0x64>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007620:	3401      	adds	r4, #1
 8007622:	2c17      	cmp	r4, #23
 8007624:	d1e3      	bne.n	80075ee <ComputeCmac+0x2a>
 8007626:	2003      	movs	r0, #3
                              ( uint32_t ) Cmac[0] );
    }

    return retval;
}
 8007628:	b04b      	add	sp, #300	; 0x12c
 800762a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800762e:	2210      	movs	r2, #16
 8007630:	4631      	mov	r1, r6
 8007632:	eb0d 0002 	add.w	r0, sp, r2
 8007636:	f00b fe52 	bl	80132de <AES_CMAC_Update>
 800763a:	e7e3      	b.n	8007604 <ComputeCmac+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
 800763c:	2002      	movs	r0, #2
 800763e:	e7f3      	b.n	8007628 <ComputeCmac+0x64>
 8007640:	200011d8 	.word	0x200011d8

08007644 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	b0e8      	sub	sp, #416	; 0x1a0
    SecureElementNvmData_t seNvmInit =
 8007648:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800764c:	2100      	movs	r1, #0
{
 800764e:	4604      	mov	r4, r0
    SecureElementNvmData_t seNvmInit =
 8007650:	4668      	mov	r0, sp
 8007652:	f010 f914 	bl	801787e <memset>
 8007656:	4a46      	ldr	r2, [pc, #280]	; (8007770 <SecureElementInit+0x12c>)
 8007658:	f10d 0115 	add.w	r1, sp, #21
 800765c:	f102 0310 	add.w	r3, r2, #16
 8007660:	f852 0b04 	ldr.w	r0, [r2], #4
 8007664:	f841 0b04 	str.w	r0, [r1], #4
 8007668:	429a      	cmp	r2, r3
 800766a:	d1f9      	bne.n	8007660 <SecureElementInit+0x1c>
 800766c:	2201      	movs	r2, #1
 800766e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8007672:	4a3f      	ldr	r2, [pc, #252]	; (8007770 <SecureElementInit+0x12c>)
 8007674:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007678:	f852 0b04 	ldr.w	r0, [r2], #4
 800767c:	f841 0b04 	str.w	r0, [r1], #4
 8007680:	429a      	cmp	r2, r3
 8007682:	d1f9      	bne.n	8007678 <SecureElementInit+0x34>
 8007684:	2202      	movs	r2, #2
 8007686:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800768a:	2203      	movs	r2, #3
 800768c:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8007690:	2204      	movs	r2, #4
 8007692:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
 8007696:	4a36      	ldr	r2, [pc, #216]	; (8007770 <SecureElementInit+0x12c>)
 8007698:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 800769c:	f852 0b04 	ldr.w	r0, [r2], #4
 80076a0:	f841 0b04 	str.w	r0, [r1], #4
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d1f9      	bne.n	800769c <SecureElementInit+0x58>
 80076a8:	2205      	movs	r2, #5
 80076aa:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80076ae:	4a30      	ldr	r2, [pc, #192]	; (8007770 <SecureElementInit+0x12c>)
 80076b0:	f10d 016a 	add.w	r1, sp, #106	; 0x6a
 80076b4:	f852 0b04 	ldr.w	r0, [r2], #4
 80076b8:	f841 0b04 	str.w	r0, [r1], #4
 80076bc:	429a      	cmp	r2, r3
 80076be:	d1f9      	bne.n	80076b4 <SecureElementInit+0x70>
 80076c0:	2206      	movs	r2, #6
 80076c2:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80076c6:	4a2a      	ldr	r2, [pc, #168]	; (8007770 <SecureElementInit+0x12c>)
 80076c8:	f10d 017b 	add.w	r1, sp, #123	; 0x7b
 80076cc:	f852 0b04 	ldr.w	r0, [r2], #4
 80076d0:	f841 0b04 	str.w	r0, [r1], #4
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d1f9      	bne.n	80076cc <SecureElementInit+0x88>
 80076d8:	2207      	movs	r2, #7
 80076da:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 80076de:	4a24      	ldr	r2, [pc, #144]	; (8007770 <SecureElementInit+0x12c>)
 80076e0:	ae23      	add	r6, sp, #140	; 0x8c
 80076e2:	6810      	ldr	r0, [r2, #0]
 80076e4:	6851      	ldr	r1, [r2, #4]
 80076e6:	4635      	mov	r5, r6
 80076e8:	c503      	stmia	r5!, {r0, r1}
 80076ea:	3208      	adds	r2, #8
 80076ec:	429a      	cmp	r2, r3
 80076ee:	462e      	mov	r6, r5
 80076f0:	d1f7      	bne.n	80076e2 <SecureElementInit+0x9e>
 80076f2:	2308      	movs	r3, #8
 80076f4:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 80076f8:	237f      	movs	r3, #127	; 0x7f
 80076fa:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
 80076fe:	2380      	movs	r3, #128	; 0x80
 8007700:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
 8007704:	2381      	movs	r3, #129	; 0x81
 8007706:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
 800770a:	2382      	movs	r3, #130	; 0x82
 800770c:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
 8007710:	2383      	movs	r3, #131	; 0x83
 8007712:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8007716:	2384      	movs	r3, #132	; 0x84
 8007718:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 800771c:	2385      	movs	r3, #133	; 0x85
 800771e:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
 8007722:	2386      	movs	r3, #134	; 0x86
 8007724:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 8007728:	2387      	movs	r3, #135	; 0x87
 800772a:	f88d 3135 	strb.w	r3, [sp, #309]	; 0x135
 800772e:	2388      	movs	r3, #136	; 0x88
 8007730:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
 8007734:	2389      	movs	r3, #137	; 0x89
 8007736:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
 800773a:	238a      	movs	r3, #138	; 0x8a
 800773c:	f88d 3168 	strb.w	r3, [sp, #360]	; 0x168
 8007740:	238b      	movs	r3, #139	; 0x8b
 8007742:	f88d 3179 	strb.w	r3, [sp, #377]	; 0x179
 8007746:	238c      	movs	r3, #140	; 0x8c
 8007748:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800774c:	b16c      	cbz	r4, 800776a <SecureElementInit+0x126>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800774e:	4d09      	ldr	r5, [pc, #36]	; (8007774 <SecureElementInit+0x130>)

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8007750:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8007754:	4669      	mov	r1, sp
 8007756:	4620      	mov	r0, r4
    SeNvm = nvm;
 8007758:	602c      	str	r4, [r5, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800775a:	f00b f931 	bl	80129c0 <memcpy1>

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    // Get a DevEUI from MCU unique ID
    SoftSeHalGetUniqueId( SeNvm->DevEui );
 800775e:	6828      	ldr	r0, [r5, #0]
 8007760:	f00b ff64 	bl	801362c <SoftSeHalGetUniqueId>
#endif
#endif
    return SECURE_ELEMENT_SUCCESS;
 8007764:	2000      	movs	r0, #0
}
 8007766:	b068      	add	sp, #416	; 0x1a0
 8007768:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800776a:	2002      	movs	r0, #2
 800776c:	e7fb      	b.n	8007766 <SecureElementInit+0x122>
 800776e:	bf00      	nop
 8007770:	080190d2 	.word	0x080190d2
 8007774:	200011d8 	.word	0x200011d8

08007778 <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8007778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777c:	460d      	mov	r5, r1
 800777e:	b0be      	sub	sp, #248	; 0xf8
 8007780:	4616      	mov	r6, r2
 8007782:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
 8007784:	4607      	mov	r7, r0
 8007786:	b370      	cbz	r0, 80077e6 <SecureElementAesEncrypt+0x6e>
 8007788:	b36b      	cbz	r3, 80077e6 <SecureElementAesEncrypt+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800778a:	f011 040f 	ands.w	r4, r1, #15
 800778e:	d12c      	bne.n	80077ea <SecureElementAesEncrypt+0x72>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8007790:	22f0      	movs	r2, #240	; 0xf0
 8007792:	4621      	mov	r1, r4
 8007794:	a801      	add	r0, sp, #4
 8007796:	f00b f927 	bl	80129e8 <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <SecureElementAesEncrypt+0x78>)
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	4621      	mov	r1, r4
 80077a0:	f100 0214 	add.w	r2, r0, #20
 80077a4:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 80077a8:	5cd4      	ldrb	r4, [r2, r3]
 80077aa:	42b4      	cmp	r4, r6
 80077ac:	d10b      	bne.n	80077c6 <SecureElementAesEncrypt+0x4e>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        aes_set_key( pItem->KeyValue, 16, &aesContext );
 80077ae:	3315      	adds	r3, #21
 80077b0:	aa01      	add	r2, sp, #4
 80077b2:	2110      	movs	r1, #16
 80077b4:	4418      	add	r0, r3
 80077b6:	f7ff fd33 	bl	8007220 <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 80077ba:	462c      	mov	r4, r5
 80077bc:	1b2e      	subs	r6, r5, r4
 80077be:	b2f6      	uxtb	r6, r6
 80077c0:	b944      	cbnz	r4, 80077d4 <SecureElementAesEncrypt+0x5c>
 80077c2:	4620      	mov	r0, r4
 80077c4:	e003      	b.n	80077ce <SecureElementAesEncrypt+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80077c6:	3101      	adds	r1, #1
 80077c8:	2917      	cmp	r1, #23
 80077ca:	d1eb      	bne.n	80077a4 <SecureElementAesEncrypt+0x2c>
 80077cc:	2003      	movs	r0, #3
            block = block + 16;
            size  = size - 16;
        }
    }
    return retval;
}
 80077ce:	b03e      	add	sp, #248	; 0xf8
 80077d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80077d4:	aa01      	add	r2, sp, #4
 80077d6:	eb08 0106 	add.w	r1, r8, r6
 80077da:	19b8      	adds	r0, r7, r6
            size  = size - 16;
 80077dc:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80077de:	f7ff fd9b 	bl	8007318 <aes_encrypt>
            size  = size - 16;
 80077e2:	b2a4      	uxth	r4, r4
 80077e4:	e7ea      	b.n	80077bc <SecureElementAesEncrypt+0x44>
        return SECURE_ELEMENT_ERROR_NPE;
 80077e6:	2002      	movs	r0, #2
 80077e8:	e7f1      	b.n	80077ce <SecureElementAesEncrypt+0x56>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80077ea:	2005      	movs	r0, #5
 80077ec:	e7ef      	b.n	80077ce <SecureElementAesEncrypt+0x56>
 80077ee:	bf00      	nop
 80077f0:	200011d8 	.word	0x200011d8

080077f4 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 80077f4:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 80077f6:	4d1c      	ldr	r5, [pc, #112]	; (8007868 <SecureElementSetKey.part.0+0x74>)
 80077f8:	682c      	ldr	r4, [r5, #0]
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 80077fa:	4603      	mov	r3, r0
 80077fc:	b085      	sub	sp, #20
 80077fe:	4608      	mov	r0, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007800:	2200      	movs	r2, #0
 8007802:	f104 0114 	add.w	r1, r4, #20
 8007806:	eb02 1602 	add.w	r6, r2, r2, lsl #4
 800780a:	5d8f      	ldrb	r7, [r1, r6]
 800780c:	429f      	cmp	r7, r3
 800780e:	d126      	bne.n	800785e <SecureElementSetKey.part.0+0x6a>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8007810:	f083 0280 	eor.w	r2, r3, #128	; 0x80
 8007814:	2a09      	cmp	r2, #9
 8007816:	f106 0615 	add.w	r6, r6, #21
 800781a:	d819      	bhi.n	8007850 <SecureElementSetKey.part.0+0x5c>
 800781c:	f240 2349 	movw	r3, #585	; 0x249
 8007820:	40d3      	lsrs	r3, r2
 8007822:	43db      	mvns	r3, r3
 8007824:	f013 0301 	ands.w	r3, r3, #1
 8007828:	d112      	bne.n	8007850 <SecureElementSetKey.part.0+0x5c>
                uint8_t               decryptedKey[16] = { 0 };
 800782a:	e9cd 3300 	strd	r3, r3, [sp]
 800782e:	e9cd 3302 	strd	r3, r3, [sp, #8]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8007832:	227f      	movs	r2, #127	; 0x7f
 8007834:	2110      	movs	r1, #16
 8007836:	466b      	mov	r3, sp
 8007838:	f7ff ff9e 	bl	8007778 <SecureElementAesEncrypt>
 800783c:	4604      	mov	r4, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800783e:	6828      	ldr	r0, [r5, #0]
 8007840:	2210      	movs	r2, #16
 8007842:	4669      	mov	r1, sp
 8007844:	4430      	add	r0, r6
 8007846:	f00b f8bb 	bl	80129c0 <memcpy1>
}
 800784a:	4620      	mov	r0, r4
 800784c:	b005      	add	sp, #20
 800784e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8007850:	4601      	mov	r1, r0
 8007852:	2210      	movs	r2, #16
 8007854:	19a0      	adds	r0, r4, r6
 8007856:	f00b f8b3 	bl	80129c0 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800785a:	2400      	movs	r4, #0
 800785c:	e7f5      	b.n	800784a <SecureElementSetKey.part.0+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800785e:	3201      	adds	r2, #1
 8007860:	2a17      	cmp	r2, #23
 8007862:	d1d0      	bne.n	8007806 <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007864:	2403      	movs	r4, #3
 8007866:	e7f0      	b.n	800784a <SecureElementSetKey.part.0+0x56>
 8007868:	200011d8 	.word	0x200011d8

0800786c <SecureElementSetDevEui>:

    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800786c:	b508      	push	{r3, lr}
    if( devEui == NULL )
 800786e:	4601      	mov	r1, r0
 8007870:	b130      	cbz	r0, 8007880 <SecureElementSetDevEui+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8007872:	4b04      	ldr	r3, [pc, #16]	; (8007884 <SecureElementSetDevEui+0x18>)
 8007874:	2208      	movs	r2, #8
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	f00b f8a2 	bl	80129c0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800787c:	2000      	movs	r0, #0
}
 800787e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8007880:	2002      	movs	r0, #2
 8007882:	e7fc      	b.n	800787e <SecureElementSetDevEui+0x12>
 8007884:	200011d8 	.word	0x200011d8

08007888 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8007888:	4b01      	ldr	r3, [pc, #4]	; (8007890 <SecureElementGetDevEui+0x8>)
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	200011d8 	.word	0x200011d8

08007894 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8007894:	b508      	push	{r3, lr}
    if( joinEui == NULL )
 8007896:	4601      	mov	r1, r0
 8007898:	b138      	cbz	r0, 80078aa <SecureElementSetJoinEui+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <SecureElementSetJoinEui+0x1c>)
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	2208      	movs	r2, #8
 80078a0:	4410      	add	r0, r2
 80078a2:	f00b f88d 	bl	80129c0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80078a6:	2000      	movs	r0, #0
}
 80078a8:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80078aa:	2002      	movs	r0, #2
 80078ac:	e7fc      	b.n	80078a8 <SecureElementSetJoinEui+0x14>
 80078ae:	bf00      	nop
 80078b0:	200011d8 	.word	0x200011d8

080078b4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 80078b4:	4b01      	ldr	r3, [pc, #4]	; (80078bc <SecureElementGetJoinEui+0x8>)
 80078b6:	6818      	ldr	r0, [r3, #0]
}
 80078b8:	3008      	adds	r0, #8
 80078ba:	4770      	bx	lr
 80078bc:	200011d8 	.word	0x200011d8

080078c0 <SecureElementSetPin>:

SecureElementStatus_t SecureElementSetPin( uint8_t* pin )
{
 80078c0:	b508      	push	{r3, lr}
    if( pin == NULL )
 80078c2:	4601      	mov	r1, r0
 80078c4:	b138      	cbz	r0, 80078d6 <SecureElementSetPin+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <SecureElementSetPin+0x1c>)
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	2204      	movs	r2, #4
 80078cc:	3010      	adds	r0, #16
 80078ce:	f00b f877 	bl	80129c0 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80078d2:	2000      	movs	r0, #0
}
 80078d4:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80078d6:	2002      	movs	r0, #2
 80078d8:	e7fc      	b.n	80078d4 <SecureElementSetPin+0x14>
 80078da:	bf00      	nop
 80078dc:	200011d8 	.word	0x200011d8

080078e0 <SecureElementGetPin>:

uint8_t* SecureElementGetPin( void )
{
    return SeNvm->Pin;
 80078e0:	4b01      	ldr	r3, [pc, #4]	; (80078e8 <SecureElementGetPin+0x8>)
 80078e2:	6818      	ldr	r0, [r3, #0]
}
 80078e4:	3010      	adds	r0, #16
 80078e6:	4770      	bx	lr
 80078e8:	200011d8 	.word	0x200011d8

080078ec <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80078ec:	4a06      	ldr	r2, [pc, #24]	; (8007908 <OnRadioTxTimeout+0x1c>)
 80078ee:	7813      	ldrb	r3, [r2, #0]
 80078f0:	f043 0308 	orr.w	r3, r3, #8
 80078f4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <OnRadioTxTimeout+0x20>)
 80078f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80078fc:	b113      	cbz	r3, 8007904 <OnRadioTxTimeout+0x18>
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	b103      	cbz	r3, 8007904 <OnRadioTxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007902:	4718      	bx	r3
    }
}
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	200011dc 	.word	0x200011dc
 800790c:	200011e0 	.word	0x200011e0

08007910 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8007910:	4a06      	ldr	r2, [pc, #24]	; (800792c <OnRadioRxError+0x1c>)
 8007912:	7813      	ldrb	r3, [r2, #0]
 8007914:	f043 0304 	orr.w	r3, r3, #4
 8007918:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800791a:	4b05      	ldr	r3, [pc, #20]	; (8007930 <OnRadioRxError+0x20>)
 800791c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007920:	b113      	cbz	r3, 8007928 <OnRadioRxError+0x18>
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	b103      	cbz	r3, 8007928 <OnRadioRxError+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007926:	4718      	bx	r3
    }
}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	200011dc 	.word	0x200011dc
 8007930:	200011e0 	.word	0x200011e0

08007934 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8007934:	4a06      	ldr	r2, [pc, #24]	; (8007950 <OnRadioRxTimeout+0x1c>)
 8007936:	7813      	ldrb	r3, [r2, #0]
 8007938:	f043 0302 	orr.w	r3, r3, #2
 800793c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <OnRadioRxTimeout+0x20>)
 8007940:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007944:	b113      	cbz	r3, 800794c <OnRadioRxTimeout+0x18>
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	b103      	cbz	r3, 800794c <OnRadioRxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800794a:	4718      	bx	r3
    }
}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	200011dc 	.word	0x200011dc
 8007954:	200011e0 	.word	0x200011e0

08007958 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007958:	4b04      	ldr	r3, [pc, #16]	; (800796c <UpdateRxSlotIdleState+0x14>)
 800795a:	4a05      	ldr	r2, [pc, #20]	; (8007970 <UpdateRxSlotIdleState+0x18>)
 800795c:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007960:	2b02      	cmp	r3, #2
 8007962:	bf18      	it	ne
 8007964:	2306      	movne	r3, #6
 8007966:	f882 348c 	strb.w	r3, [r2, #1164]	; 0x48c
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800796a:	4770      	bx	lr
 800796c:	200016f8 	.word	0x200016f8
 8007970:	200011e0 	.word	0x200011e0

08007974 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8007974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <GetMaxAppPayloadWithoutFOptsLength+0x28>)
    getPhy.Datarate = datarate;
 8007978:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800797c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8007980:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007984:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007988:	220d      	movs	r2, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800798a:	a902      	add	r1, sp, #8
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800798c:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007990:	f00c f92c 	bl	8013bec <RegionGetPhyParam>

    return phyParam.Value;
}
 8007994:	b2c0      	uxtb	r0, r0
 8007996:	b005      	add	sp, #20
 8007998:	f85d fb04 	ldr.w	pc, [sp], #4
 800799c:	200016f8 	.word	0x200016f8

080079a0 <OnRetransmitTimeoutTimerEvent>:
{
 80079a0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80079a2:	4c0a      	ldr	r4, [pc, #40]	; (80079cc <OnRetransmitTimeoutTimerEvent+0x2c>)
 80079a4:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80079a8:	f7fe fd9a 	bl	80064e0 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 80079ac:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80079b0:	b113      	cbz	r3, 80079b8 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80079b8:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 80079bc:	b123      	cbz	r3, 80079c8 <OnRetransmitTimeoutTimerEvent+0x28>
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	b113      	cbz	r3, 80079c8 <OnRetransmitTimeoutTimerEvent+0x28>
}
 80079c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 80079c6:	4718      	bx	r3
}
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	bf00      	nop
 80079cc:	200011e0 	.word	0x200011e0

080079d0 <PrepareRxDoneAbort>:
{
 80079d0:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80079d2:	4c0c      	ldr	r4, [pc, #48]	; (8007a04 <PrepareRxDoneAbort+0x34>)
 80079d4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80079d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079dc:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80079e0:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80079e4:	b113      	cbz	r3, 80079ec <PrepareRxDoneAbort+0x1c>
        OnRetransmitTimeoutTimerEvent( NULL );
 80079e6:	2000      	movs	r0, #0
 80079e8:	f7ff ffda 	bl	80079a0 <OnRetransmitTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80079ec:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80079f0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80079f4:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 80079f8:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
}
 80079fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 8007a00:	f7ff bfaa 	b.w	8007958 <UpdateRxSlotIdleState>
 8007a04:	200011e0 	.word	0x200011e0

08007a08 <HandleRadioRxErrorTimeout>:
{
 8007a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007a0c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007abc <HandleRadioRxErrorTimeout+0xb4>
 8007a10:	f898 3184 	ldrb.w	r3, [r8, #388]	; 0x184
 8007a14:	2b02      	cmp	r3, #2
{
 8007a16:	4606      	mov	r6, r0
 8007a18:	460d      	mov	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007a1a:	d002      	beq.n	8007a22 <HandleRadioRxErrorTimeout+0x1a>
        Radio.Sleep( );
 8007a1c:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <HandleRadioRxErrorTimeout+0xb8>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007a22:	f00b fe9e 	bl	8013762 <LoRaMacClassBIsBeaconExpected>
 8007a26:	4604      	mov	r4, r0
 8007a28:	b128      	cbz	r0, 8007a36 <HandleRadioRxErrorTimeout+0x2e>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8007a2a:	2002      	movs	r0, #2
 8007a2c:	f00b fe8f 	bl	801374e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8007a30:	2000      	movs	r0, #0
 8007a32:	f00b fe91 	bl	8013758 <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007a36:	f898 3184 	ldrb.w	r3, [r8, #388]	; 0x184
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d117      	bne.n	8007a6e <HandleRadioRxErrorTimeout+0x66>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007a3e:	f00b fe92 	bl	8013766 <LoRaMacClassBIsPingExpected>
 8007a42:	4607      	mov	r7, r0
 8007a44:	b130      	cbz	r0, 8007a54 <HandleRadioRxErrorTimeout+0x4c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007a46:	2000      	movs	r0, #0
 8007a48:	f00b fe82 	bl	8013750 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f00b fe84 	bl	801375a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007a52:	463c      	mov	r4, r7
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007a54:	f00b fe89 	bl	801376a <LoRaMacClassBIsMulticastExpected>
 8007a58:	b148      	cbz	r0, 8007a6e <HandleRadioRxErrorTimeout+0x66>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f00b fe79 	bl	8013752 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007a60:	2000      	movs	r0, #0
 8007a62:	f00b fe7b 	bl	801375c <LoRaMacClassBMulticastSlotTimerEvent>
}
 8007a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8007a6a:	f7ff bf75 	b.w	8007958 <UpdateRxSlotIdleState>
    if( classBRx == false )
 8007a6e:	2c00      	cmp	r4, #0
 8007a70:	d1f9      	bne.n	8007a66 <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 8007a72:	4c14      	ldr	r4, [pc, #80]	; (8007ac4 <HandleRadioRxErrorTimeout+0xbc>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a74:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
            if( MacCtx.NodeAckRequested == true )
 8007a78:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a7c:	b9ba      	cbnz	r2, 8007aae <HandleRadioRxErrorTimeout+0xa6>
            if( MacCtx.NodeAckRequested == true )
 8007a7e:	b10b      	cbz	r3, 8007a84 <HandleRadioRxErrorTimeout+0x7c>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007a80:	f884 6445 	strb.w	r6, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8007a84:	4630      	mov	r0, r6
 8007a86:	f002 fe13 	bl	800a6b0 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8007a8a:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8007a8e:	f00b f8b3 	bl	8012bf8 <TimerGetElapsedTime>
 8007a92:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8007a96:	4298      	cmp	r0, r3
 8007a98:	d3e5      	bcc.n	8007a66 <HandleRadioRxErrorTimeout+0x5e>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8007a9a:	480b      	ldr	r0, [pc, #44]	; (8007ac8 <HandleRadioRxErrorTimeout+0xc0>)
 8007a9c:	f7fe fd20 	bl	80064e0 <TimerStop>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8007aa0:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007aa4:	f043 0320 	orr.w	r3, r3, #32
 8007aa8:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
 8007aac:	e7db      	b.n	8007a66 <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 8007aae:	b10b      	cbz	r3, 8007ab4 <HandleRadioRxErrorTimeout+0xac>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8007ab0:	f884 5445 	strb.w	r5, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f002 fdfb 	bl	800a6b0 <LoRaMacConfirmQueueSetStatusCmn>
 8007aba:	e7f1      	b.n	8007aa0 <HandleRadioRxErrorTimeout+0x98>
 8007abc:	200016f8 	.word	0x200016f8
 8007ac0:	08018558 	.word	0x08018558
 8007ac4:	200011e0 	.word	0x200011e0
 8007ac8:	20001580 	.word	0x20001580

08007acc <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 8007acc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007ace:	4c15      	ldr	r4, [pc, #84]	; (8007b24 <OpenContinuousRxCWindow+0x58>)
 8007ad0:	4d15      	ldr	r5, [pc, #84]	; (8007b28 <OpenContinuousRxCWindow+0x5c>)
 8007ad2:	f504 767a 	add.w	r6, r4, #1000	; 0x3e8
 8007ad6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007ad8:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
 8007adc:	f995 107c 	ldrsb.w	r1, [r5, #124]	; 0x7c
 8007ae0:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 8007ae4:	9600      	str	r6, [sp, #0]
 8007ae6:	f00c f8ad 	bl	8013c44 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007aea:	2302      	movs	r3, #2
 8007aec:	f884 33fa 	strb.w	r3, [r4, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007af0:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
 8007af4:	f884 33fb 	strb.w	r3, [r4, #1019]	; 0x3fb
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007af8:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007afc:	2301      	movs	r3, #1
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007afe:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8007b02:	4631      	mov	r1, r6
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007b04:	f884 33f9 	strb.w	r3, [r4, #1017]	; 0x3f9
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007b08:	f00c f8a9 	bl	8013c5e <RegionRxConfig>
 8007b0c:	b138      	cbz	r0, 8007b1e <OpenContinuousRxCWindow+0x52>
    {
        Radio.Rx( 0 ); // Continuous mode
 8007b0e:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <OpenContinuousRxCWindow+0x60>)
 8007b10:	2000      	movs	r0, #0
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8007b16:	f894 33fa 	ldrb.w	r3, [r4, #1018]	; 0x3fa
 8007b1a:	f884 348c 	strb.w	r3, [r4, #1164]	; 0x48c
    }
}
 8007b1e:	b002      	add	sp, #8
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	bf00      	nop
 8007b24:	200011e0 	.word	0x200011e0
 8007b28:	200016f8 	.word	0x200016f8
 8007b2c:	08018558 	.word	0x08018558

08007b30 <SwitchClass>:
{
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 8007b32:	4d33      	ldr	r5, [pc, #204]	; (8007c00 <SwitchClass+0xd0>)
 8007b34:	f895 4184 	ldrb.w	r4, [r5, #388]	; 0x184
 8007b38:	2c01      	cmp	r4, #1
{
 8007b3a:	4606      	mov	r6, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8007b3c:	d04f      	beq.n	8007bde <SwitchClass+0xae>
 8007b3e:	2c02      	cmp	r4, #2
 8007b40:	d055      	beq.n	8007bee <SwitchClass+0xbe>
 8007b42:	b934      	cbnz	r4, 8007b52 <SwitchClass+0x22>
            if( deviceClass == CLASS_A )
 8007b44:	b938      	cbnz	r0, 8007b56 <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8007b46:	e9d5 011c 	ldrd	r0, r1, [r5, #112]	; 0x70
 8007b4a:	f105 0378 	add.w	r3, r5, #120	; 0x78
 8007b4e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007b52:	2403      	movs	r4, #3
 8007b54:	e03b      	b.n	8007bce <SwitchClass+0x9e>
            if( deviceClass == CLASS_B )
 8007b56:	2801      	cmp	r0, #1
 8007b58:	d041      	beq.n	8007bde <SwitchClass+0xae>
            if( deviceClass == CLASS_C )
 8007b5a:	2802      	cmp	r0, #2
 8007b5c:	d1f9      	bne.n	8007b52 <SwitchClass+0x22>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007b5e:	4f29      	ldr	r7, [pc, #164]	; (8007c04 <SwitchClass+0xd4>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007b60:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007b64:	f507 7e75 	add.w	lr, r7, #980	; 0x3d4
 8007b68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007b6c:	f507 7c7a 	add.w	ip, r7, #1000	; 0x3e8
 8007b70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007b74:	f8de 3000 	ldr.w	r3, [lr]
 8007b78:	f8cc 3000 	str.w	r3, [ip]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007b7c:	462a      	mov	r2, r5
 8007b7e:	f887 63fa 	strb.w	r6, [r7, #1018]	; 0x3fa
 8007b82:	4623      	mov	r3, r4
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8007b84:	f892 10d6 	ldrb.w	r1, [r2, #214]	; 0xd6
 8007b88:	b319      	cbz	r1, 8007bd2 <SwitchClass+0xa2>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007b8a:	222c      	movs	r2, #44	; 0x2c
 8007b8c:	fb02 5303 	mla	r3, r2, r3, r5
 8007b90:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007b94:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007b98:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007b9c:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8007ba0:	f887 33e8 	strb.w	r3, [r7, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007ba4:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
 8007ba8:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007bac:	2303      	movs	r3, #3
 8007bae:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007bb2:	2301      	movs	r3, #1
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007bb4:	67aa      	str	r2, [r5, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007bb6:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007bba:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
                MacCtx.NodeAckRequested = false;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
                Radio.Sleep( );
 8007bc4:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <SwitchClass+0xd8>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8007bca:	f7ff ff7f 	bl	8007acc <OpenContinuousRxCWindow>
}
 8007bce:	4620      	mov	r0, r4
 8007bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007bda:	d1d3      	bne.n	8007b84 <SwitchClass+0x54>
 8007bdc:	e7ef      	b.n	8007bbe <SwitchClass+0x8e>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8007bde:	f00b fdcb 	bl	8013778 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8007be2:	4604      	mov	r4, r0
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d1f2      	bne.n	8007bce <SwitchClass+0x9e>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007be8:	f885 6184 	strb.w	r6, [r5, #388]	; 0x184
 8007bec:	e7ef      	b.n	8007bce <SwitchClass+0x9e>
            if( deviceClass == CLASS_A )
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d1af      	bne.n	8007b52 <SwitchClass+0x22>
                Radio.Sleep( );
 8007bf2:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <SwitchClass+0xd8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007bf4:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
                Radio.Sleep( );
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8007bfc:	4634      	mov	r4, r6
 8007bfe:	e7e6      	b.n	8007bce <SwitchClass+0x9e>
 8007c00:	200016f8 	.word	0x200016f8
 8007c04:	200011e0 	.word	0x200011e0
 8007c08:	08018558 	.word	0x08018558

08007c0c <OnRadioRxDone>:
{
 8007c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c10:	4616      	mov	r6, r2
 8007c12:	461d      	mov	r5, r3
 8007c14:	4680      	mov	r8, r0
 8007c16:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007c18:	f00a ffe7 	bl	8012bea <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8007c1c:	4a0b      	ldr	r2, [pc, #44]	; (8007c4c <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007c1e:	4c0c      	ldr	r4, [pc, #48]	; (8007c50 <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8007c20:	7813      	ldrb	r3, [r2, #0]
    RxDoneParams.Size = size;
 8007c22:	8127      	strh	r7, [r4, #8]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8007c24:	f023 0311 	bic.w	r3, r3, #17
 8007c28:	f043 0311 	orr.w	r3, r3, #17
 8007c2c:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007c2e:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <OnRadioRxDone+0x48>)
    RxDoneParams.Rssi = rssi;
 8007c30:	8166      	strh	r6, [r4, #10]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007c32:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
    RxDoneParams.Snr = snr;
 8007c36:	7325      	strb	r5, [r4, #12]
    RxDoneParams.Payload = payload;
 8007c38:	e9c4 0800 	strd	r0, r8, [r4]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007c3c:	b123      	cbz	r3, 8007c48 <OnRadioRxDone+0x3c>
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	b113      	cbz	r3, 8007c48 <OnRadioRxDone+0x3c>
}
 8007c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007c46:	4718      	bx	r3
}
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	200011dc 	.word	0x200011dc
 8007c50:	20001dfc 	.word	0x20001dfc
 8007c54:	200011e0 	.word	0x200011e0

08007c58 <OnRadioTxDone>:
{
 8007c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007c5a:	f00a ffc6 	bl	8012bea <TimerGetCurrentTime>
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <OnRadioTxDone+0x40>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007c60:	4d0e      	ldr	r5, [pc, #56]	; (8007c9c <OnRadioTxDone+0x44>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007c62:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007c64:	466c      	mov	r4, sp
 8007c66:	4620      	mov	r0, r4
 8007c68:	f00a ff1c 	bl	8012aa4 <SysTimeGet>
 8007c6c:	e894 0003 	ldmia.w	r4, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8007c70:	4a0b      	ldr	r2, [pc, #44]	; (8007ca0 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007c72:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8007c76:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8007c7a:	7813      	ldrb	r3, [r2, #0]
 8007c7c:	f043 0320 	orr.w	r3, r3, #32
 8007c80:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007c82:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8007c86:	b12b      	cbz	r3, 8007c94 <OnRadioTxDone+0x3c>
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	b11b      	cbz	r3, 8007c94 <OnRadioTxDone+0x3c>
}
 8007c8c:	b003      	add	sp, #12
 8007c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007c92:	4718      	bx	r3
}
 8007c94:	b003      	add	sp, #12
 8007c96:	bd30      	pop	{r4, r5, pc}
 8007c98:	20001e0c 	.word	0x20001e0c
 8007c9c:	200011e0 	.word	0x200011e0
 8007ca0:	200011dc 	.word	0x200011dc

08007ca4 <ResetMacParameters>:
{
 8007ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007ca8:	4c46      	ldr	r4, [pc, #280]	; (8007dc4 <ResetMacParameters+0x120>)
    MacCtx.ResponseTimeoutStartTime = 0;
 8007caa:	4d47      	ldr	r5, [pc, #284]	; (8007dc8 <ResetMacParameters+0x124>)
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007cac:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8007cb0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007cb4:	e9d4 012b 	ldrd	r0, r1, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007cb8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8007cbc:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007cc0:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8007cc4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007cc8:	e9d4 012d 	ldrd	r0, r1, [r4, #180]	; 0xb4
 8007ccc:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8007cd0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8007cd4:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
 8007cd8:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007cdc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8007ce0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
{
 8007ce4:	b090      	sub	sp, #64	; 0x40
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007ce6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8007cea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007cee:	f504 7351 	add.w	r3, r4, #836	; 0x344
 8007cf2:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007cf4:	f504 7356 	add.w	r3, r4, #856	; 0x358
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007cf8:	2600      	movs	r6, #0
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007cfa:	f04f 0801 	mov.w	r8, #1
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007cfe:	9304      	str	r3, [sp, #16]
    params.Bands = &RegionBands;
 8007d00:	4b32      	ldr	r3, [pc, #200]	; (8007dcc <ResetMacParameters+0x128>)
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007d02:	f884 619c 	strb.w	r6, [r4, #412]	; 0x19c
    Nvm.MacGroup1.AdrAckCounter = 0;
 8007d06:	6366      	str	r6, [r4, #52]	; 0x34
    Nvm.MacGroup2.MaxDCycle = 0;
 8007d08:	f884 6187 	strb.w	r6, [r4, #391]	; 0x187
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007d0c:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
    Nvm.MacGroup1.SrvAckRequested = false;
 8007d10:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8007d14:	f884 6189 	strb.w	r6, [r4, #393]	; 0x189
    Nvm.MacGroup2.DownlinkReceived = false;
 8007d18:	f884 618a 	strb.w	r6, [r4, #394]	; 0x18a
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007d1c:	a903      	add	r1, sp, #12
    MacCtx.ResponseTimeoutStartTime = 0;
 8007d1e:	f8c5 6494 	str.w	r6, [r5, #1172]	; 0x494
    MacCtx.ChannelsNbTransCounter = 0;
 8007d22:	f8a5 6418 	strh.w	r6, [r5, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8007d26:	f885 641a 	strb.w	r6, [r5, #1050]	; 0x41a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007d2a:	f88d 8018 	strb.w	r8, [sp, #24]
    params.Bands = &RegionBands;
 8007d2e:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007d30:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8007d34:	f00b ff6a 	bl	8013c0c <RegionInitDefaults>
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007d38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007d3a:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007d3e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8007d42:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007d46:	f885 63d4 	strb.w	r6, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007d4a:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
 8007d4e:	f885 33e7 	strb.w	r3, [r5, #999]	; 0x3e7
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007d52:	f505 7775 	add.w	r7, r5, #980	; 0x3d4
 8007d56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007d58:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 8007d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007d5e:	f885 63e5 	strb.w	r6, [r5, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8007d62:	f885 83e6 	strb.w	r8, [r5, #998]	; 0x3e6
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( MacCtx.MacCallbacks != NULL )
 8007d70:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
    MacCtx.Channel = 0;
 8007d74:	f885 641b 	strb.w	r6, [r5, #1051]	; 0x41b
    classBCallbacks.MacProcessNotify = NULL;
 8007d78:	e9cd 6601 	strd	r6, r6, [sp, #4]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007d7c:	f885 83f9 	strb.w	r8, [r5, #1017]	; 0x3f9
    if( MacCtx.MacCallbacks != NULL )
 8007d80:	b11b      	cbz	r3, 8007d8a <ResetMacParameters+0xe6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007d82:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007d84:	68db      	ldr	r3, [r3, #12]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007d86:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007d88:	9302      	str	r3, [sp, #8]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007d8a:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <ResetMacParameters+0x12c>)
 8007d8c:	9307      	str	r3, [sp, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007d8e:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
 8007d92:	9208      	str	r2, [sp, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007d94:	f1a3 0214 	sub.w	r2, r3, #20
 8007d98:	9209      	str	r2, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8007d9a:	4a0e      	ldr	r2, [pc, #56]	; (8007dd4 <ResetMacParameters+0x130>)
 8007d9c:	920b      	str	r2, [sp, #44]	; 0x2c
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8007d9e:	3321      	adds	r3, #33	; 0x21
 8007da0:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8007da2:	f1a2 0384 	sub.w	r3, r2, #132	; 0x84
 8007da6:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8007da8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007dac:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007dae:	a901      	add	r1, sp, #4
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8007db0:	1d13      	adds	r3, r2, #4
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007db2:	a807      	add	r0, sp, #28
 8007db4:	f202 6204 	addw	r2, r2, #1540	; 0x604
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8007db8:	930e      	str	r3, [sp, #56]	; 0x38
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007dba:	f00b fcc7 	bl	801374c <LoRaMacClassBInit>
}
 8007dbe:	b010      	add	sp, #64	; 0x40
 8007dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc4:	200016f8 	.word	0x200016f8
 8007dc8:	200011e0 	.word	0x200011e0
 8007dcc:	20001de4 	.word	0x20001de4
 8007dd0:	2000164c 	.word	0x2000164c
 8007dd4:	200017c8 	.word	0x200017c8

08007dd8 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Radio.Standby( );
 8007dda:	4f0b      	ldr	r7, [pc, #44]	; (8007e08 <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007ddc:	4d0b      	ldr	r5, [pc, #44]	; (8007e0c <RxWindowSetup.constprop.0+0x34>)
 8007dde:	4e0c      	ldr	r6, [pc, #48]	; (8007e10 <RxWindowSetup.constprop.0+0x38>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8007de0:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8007de2:	f7fe fb7d 	bl	80064e0 <TimerStop>
    Radio.Standby( );
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007dea:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
 8007dee:	f205 4224 	addw	r2, r5, #1060	; 0x424
 8007df2:	4621      	mov	r1, r4
 8007df4:	f00b ff33 	bl	8013c5e <RegionRxConfig>
 8007df8:	b128      	cbz	r0, 8007e06 <RxWindowSetup.constprop.0+0x2e>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8007dfe:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8007e00:	7ca3      	ldrb	r3, [r4, #18]
 8007e02:	f885 348c 	strb.w	r3, [r5, #1164]	; 0x48c
}
 8007e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e08:	08018558 	.word	0x08018558
 8007e0c:	200011e0 	.word	0x200011e0
 8007e10:	200016f8 	.word	0x200016f8

08007e14 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8007e14:	480e      	ldr	r0, [pc, #56]	; (8007e50 <OnRxWindow1TimerEvent+0x3c>)
 8007e16:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 8007e1a:	f880 33c0 	strb.w	r3, [r0, #960]	; 0x3c0
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8007e1e:	4b0d      	ldr	r3, [pc, #52]	; (8007e54 <OnRxWindow1TimerEvent+0x40>)
 8007e20:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 8007e24:	f880 23c3 	strb.w	r2, [r0, #963]	; 0x3c3
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007e28:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8007e2c:	f880 23d0 	strb.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007e30:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8007e34:	f880 33d3 	strb.w	r3, [r0, #979]	; 0x3d3
    MacCtx.RxWindow1Config.RxContinuous = false;
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f880 23d1 	strb.w	r2, [r0, #977]	; 0x3d1
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8007e3e:	f880 23d2 	strb.w	r2, [r0, #978]	; 0x3d2
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8007e42:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8007e46:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8007e4a:	f7ff bfc5 	b.w	8007dd8 <RxWindowSetup.constprop.0>
 8007e4e:	bf00      	nop
 8007e50:	200011e0 	.word	0x200011e0
 8007e54:	200016f8 	.word	0x200016f8

08007e58 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007e58:	4810      	ldr	r0, [pc, #64]	; (8007e9c <OnRxWindow2TimerEvent+0x44>)
 8007e5a:	f890 348c 	ldrb.w	r3, [r0, #1164]	; 0x48c
 8007e5e:	b1db      	cbz	r3, 8007e98 <OnRxWindow2TimerEvent+0x40>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007e60:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 8007e64:	f880 33d4 	strb.w	r3, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007e68:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <OnRxWindow2TimerEvent+0x48>)
 8007e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e6c:	f8c0 23d8 	str.w	r2, [r0, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007e70:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8007e74:	f880 23e4 	strb.w	r2, [r0, #996]	; 0x3e4
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f880 23e5 	strb.w	r2, [r0, #997]	; 0x3e5
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007e7e:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8007e82:	f880 33e7 	strb.w	r3, [r0, #999]	; 0x3e7
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8007e86:	2201      	movs	r2, #1
 8007e88:	f880 23e6 	strb.w	r2, [r0, #998]	; 0x3e6
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8007e8c:	f500 7175 	add.w	r1, r0, #980	; 0x3d4
 8007e90:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8007e94:	f7ff bfa0 	b.w	8007dd8 <RxWindowSetup.constprop.0>
}
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	200011e0 	.word	0x200011e0
 8007ea0:	200016f8 	.word	0x200016f8

08007ea4 <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 8007eaa:	f04f 0800 	mov.w	r8, #0
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8007eae:	2b01      	cmp	r3, #1
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460f      	mov	r7, r1
 8007eb4:	9202      	str	r2, [sp, #8]
    uint8_t status = 0;
 8007eb6:	f88d 8015 	strb.w	r8, [sp, #21]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007eba:	f8ad 8018 	strh.w	r8, [sp, #24]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8007ebe:	d803      	bhi.n	8007ec8 <ProcessMacCommands.constprop.0+0x24>
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8007ec0:	4ec3      	ldr	r6, [pc, #780]	; (80081d0 <ProcessMacCommands.constprop.0+0x32c>)
 8007ec2:	46c1      	mov	r9, r8
    while( macIndex < commandsSize )
 8007ec4:	45b9      	cmp	r9, r7
 8007ec6:	d302      	bcc.n	8007ece <ProcessMacCommands.constprop.0+0x2a>
}
 8007ec8:	b011      	add	sp, #68	; 0x44
 8007eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8007ece:	f815 0009 	ldrb.w	r0, [r5, r9]
 8007ed2:	f002 fb5b 	bl	800a58c <LoRaMacCommandsGetCmdSize>
 8007ed6:	4448      	add	r0, r9
 8007ed8:	42b8      	cmp	r0, r7
 8007eda:	dcf5      	bgt.n	8007ec8 <ProcessMacCommands.constprop.0+0x24>
        switch( payload[macIndex++] )
 8007edc:	f815 3009 	ldrb.w	r3, [r5, r9]
 8007ee0:	f109 0401 	add.w	r4, r9, #1
 8007ee4:	3b02      	subs	r3, #2
 8007ee6:	b2e4      	uxtb	r4, r4
 8007ee8:	2b11      	cmp	r3, #17
 8007eea:	d8ed      	bhi.n	8007ec8 <ProcessMacCommands.constprop.0+0x24>
 8007eec:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <ProcessMacCommands.constprop.0+0x50>)
 8007eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef2:	bf00      	nop
 8007ef4:	08007f3d 	.word	0x08007f3d
 8007ef8:	08007f6f 	.word	0x08007f6f
 8007efc:	08008073 	.word	0x08008073
 8007f00:	0800809b 	.word	0x0800809b
 8007f04:	08008131 	.word	0x08008131
 8007f08:	0800815d 	.word	0x0800815d
 8007f0c:	080081d9 	.word	0x080081d9
 8007f10:	08008215 	.word	0x08008215
 8007f14:	080082a1 	.word	0x080082a1
 8007f18:	08007ec9 	.word	0x08007ec9
 8007f1c:	08007ec9 	.word	0x08007ec9
 8007f20:	080082ff 	.word	0x080082ff
 8007f24:	08007ec9 	.word	0x08007ec9
 8007f28:	08007ec9 	.word	0x08007ec9
 8007f2c:	080083bd 	.word	0x080083bd
 8007f30:	080083e5 	.word	0x080083e5
 8007f34:	08008429 	.word	0x08008429
 8007f38:	08008467 	.word	0x08008467
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8007f3c:	2004      	movs	r0, #4
 8007f3e:	f002 fbd1 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 8007f42:	b190      	cbz	r0, 8007f6a <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8007f44:	2104      	movs	r1, #4
 8007f46:	2000      	movs	r0, #0
 8007f48:	f002 fb90 	bl	800a66c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007f4c:	5d2a      	ldrb	r2, [r5, r4]
 8007f4e:	4ba1      	ldr	r3, [pc, #644]	; (80081d4 <ProcessMacCommands.constprop.0+0x330>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007f50:	f109 0403 	add.w	r4, r9, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007f54:	f109 0902 	add.w	r9, r9, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007f58:	fa5f f989 	uxtb.w	r9, r9
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007f5c:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007f60:	f815 2009 	ldrb.w	r2, [r5, r9]
 8007f64:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 8007f68:	b2e4      	uxtb	r4, r4
                uint8_t eirpDwellTime = payload[macIndex++];
 8007f6a:	46a1      	mov	r9, r4
 8007f6c:	e7aa      	b.n	8007ec4 <ProcessMacCommands.constprop.0+0x20>
                int8_t linkAdrDatarate = DR_0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 8007f74:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 8007f78:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 8007f7c:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 8007f80:	f1b8 0f00 	cmp.w	r8, #0
 8007f84:	d170      	bne.n	8008068 <ProcessMacCommands.constprop.0+0x1c4>
                            linkAdrReq.PayloadSize = 5;
 8007f86:	f04f 0805 	mov.w	r8, #5
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007f8a:	f896 2080 	ldrb.w	r2, [r6, #128]	; 0x80
 8007f8e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8007f92:	1e63      	subs	r3, r4, #1
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007f94:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
 8007f98:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8007f9c:	442b      	add	r3, r5
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007f9e:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8007fa2:	930d      	str	r3, [sp, #52]	; 0x34
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007fa4:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007fa8:	f896 3186 	ldrb.w	r3, [r6, #390]	; 0x186
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007fac:	f896 206c 	ldrb.w	r2, [r6, #108]	; 0x6c
 8007fb0:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8007fb4:	f8d6 2198 	ldr.w	r2, [r6, #408]	; 0x198
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007fb8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8007fbc:	920c      	str	r2, [sp, #48]	; 0x30
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007fbe:	b373      	cbz	r3, 800801e <ProcessMacCommands.constprop.0+0x17a>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8007fc0:	1c7b      	adds	r3, r7, #1
 8007fc2:	1b1b      	subs	r3, r3, r4
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8007fca:	ab08      	add	r3, sp, #32
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	ab07      	add	r3, sp, #28
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
 8007fd6:	f10d 0317 	add.w	r3, sp, #23
 8007fda:	f10d 0216 	add.w	r2, sp, #22
 8007fde:	a90c      	add	r1, sp, #48	; 0x30
 8007fe0:	f00b fe53 	bl	8013c8a <RegionLinkAdrReq>
 8007fe4:	f88d 0015 	strb.w	r0, [sp, #21]
                        if( ( status & 0x07 ) == 0x07 )
 8007fe8:	f000 0007 	and.w	r0, r0, #7
 8007fec:	2807      	cmp	r0, #7
 8007fee:	d113      	bne.n	8008018 <ProcessMacCommands.constprop.0+0x174>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8007ff0:	f996 2045 	ldrsb.w	r2, [r6, #69]	; 0x45
 8007ff4:	f99d 3016 	ldrsb.w	r3, [sp, #22]
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8007ff8:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8007ffc:	429a      	cmp	r2, r3
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8007ffe:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008002:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8008006:	bfb8      	it	lt
 8008008:	2201      	movlt	r2, #1
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800800a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800800e:	bfb8      	it	lt
 8008010:	f886 2189 	strblt.w	r2, [r6, #393]	; 0x189
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008014:	f886 306c 	strb.w	r3, [r6, #108]	; 0x6c
                            linkAdrReq.PayloadSize = 5;
 8008018:	f04f 0900 	mov.w	r9, #0
 800801c:	e009      	b.n	8008032 <ProcessMacCommands.constprop.0+0x18e>
 800801e:	2305      	movs	r3, #5
 8008020:	e7d1      	b.n	8007fc6 <ProcessMacCommands.constprop.0+0x122>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008022:	2201      	movs	r2, #1
 8008024:	f10d 0115 	add.w	r1, sp, #21
 8008028:	2003      	movs	r0, #3
 800802a:	f002 f9b9 	bl	800a3a0 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800802e:	f109 0901 	add.w	r9, r9, #1
 8008032:	fa5f f289 	uxtb.w	r2, r9
 8008036:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800803a:	fbb3 f1f8 	udiv	r1, r3, r8
 800803e:	4291      	cmp	r1, r2
 8008040:	d8ef      	bhi.n	8008022 <ProcessMacCommands.constprop.0+0x17e>
                        macIndex += linkAdrNbBytesParsed - 1;
 8008042:	441c      	add	r4, r3
 8008044:	b2e4      	uxtb	r4, r4
 8008046:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800804a:	fa5f f989 	uxtb.w	r9, r9
                        if( macIndex >= commandsSize )
 800804e:	454f      	cmp	r7, r9
 8008050:	d906      	bls.n	8008060 <ProcessMacCommands.constprop.0+0x1bc>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008052:	f815 3009 	ldrb.w	r3, [r5, r9]
 8008056:	2b03      	cmp	r3, #3
 8008058:	d097      	beq.n	8007f8a <ProcessMacCommands.constprop.0+0xe6>
                    if( macIndex < commandsSize )
 800805a:	42a7      	cmp	r7, r4
 800805c:	bf98      	it	ls
 800805e:	46a1      	movls	r9, r4
                break;
 8008060:	464c      	mov	r4, r9
 8008062:	f04f 0801 	mov.w	r8, #1
 8008066:	e780      	b.n	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                    macIndex += 4;
 8008068:	f109 0905 	add.w	r9, r9, #5
 800806c:	fa5f f989 	uxtb.w	r9, r9
 8008070:	e7f6      	b.n	8008060 <ProcessMacCommands.constprop.0+0x1bc>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008072:	5d2b      	ldrb	r3, [r5, r4]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008074:	2201      	movs	r2, #1
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008076:	f003 030f 	and.w	r3, r3, #15
 800807a:	f109 0902 	add.w	r9, r9, #2
 800807e:	f886 3187 	strb.w	r3, [r6, #391]	; 0x187
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008082:	fa02 f303 	lsl.w	r3, r2, r3
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008086:	fa5f f989 	uxtb.w	r9, r9
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800808a:	f8a6 318c 	strh.w	r3, [r6, #396]	; 0x18c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800808e:	2200      	movs	r2, #0
 8008090:	a906      	add	r1, sp, #24
 8008092:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008094:	f002 f984 	bl	800a3a0 <LoRaMacCommandsAddCmd>
                break;
 8008098:	e0ba      	b.n	8008210 <ProcessMacCommands.constprop.0+0x36c>
                status = 0x07;
 800809a:	2307      	movs	r3, #7
 800809c:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80080a0:	5d2b      	ldrb	r3, [r5, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80080a2:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80080a6:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80080aa:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80080ae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80080b2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80080b6:	f109 0204 	add.w	r2, r9, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80080ba:	f109 0303 	add.w	r3, r9, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80080be:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	f109 0405 	add.w	r4, r9, #5
                macIndex++;
 80080c6:	f109 0902 	add.w	r9, r9, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80080ca:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080cc:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80080ce:	fa5f f989 	uxtb.w	r9, r9
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080d2:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80080d4:	f815 2009 	ldrb.w	r2, [r5, r9]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80080dc:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 80080de:	2264      	movs	r2, #100	; 0x64
 80080e0:	4353      	muls	r3, r2
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80080e2:	a90c      	add	r1, sp, #48	; 0x30
                rxParamSetupReq.Frequency *= 100;
 80080e4:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80080e6:	f00b fde0 	bl	8013caa <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 80080ea:	f000 0307 	and.w	r3, r0, #7
 80080ee:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080f0:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80080f2:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 80080f6:	d10c      	bne.n	8008112 <ProcessMacCommands.constprop.0+0x26e>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80080f8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80080fc:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008100:	f886 307c 	strb.w	r3, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008106:	6733      	str	r3, [r6, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008108:	67b3      	str	r3, [r6, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800810a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800810e:	f886 306d 	strb.w	r3, [r6, #109]	; 0x6d
                macCmdPayload[0] = status;
 8008112:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008116:	2201      	movs	r2, #1
 8008118:	a906      	add	r1, sp, #24
 800811a:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800811c:	f002 f940 	bl	800a3a0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008120:	4a2c      	ldr	r2, [pc, #176]	; (80081d4 <ProcessMacCommands.constprop.0+0x330>)
 8008122:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 8008126:	f043 0310 	orr.w	r3, r3, #16
 800812a:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
}
 800812e:	e71c      	b.n	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008130:	4b28      	ldr	r3, [pc, #160]	; (80081d4 <ProcessMacCommands.constprop.0+0x330>)
 8008132:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008136:	b17b      	cbz	r3, 8008158 <ProcessMacCommands.constprop.0+0x2b4>
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	b16b      	cbz	r3, 8008158 <ProcessMacCommands.constprop.0+0x2b4>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800813c:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800813e:	9b02      	ldr	r3, [sp, #8]
                macCmdPayload[0] = batteryLevel;
 8008140:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008148:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800814c:	2202      	movs	r2, #2
 800814e:	a906      	add	r1, sp, #24
 8008150:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008152:	f002 f925 	bl	800a3a0 <LoRaMacCommandsAddCmd>
                break;
 8008156:	e708      	b.n	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008158:	20ff      	movs	r0, #255	; 0xff
 800815a:	e7f0      	b.n	800813e <ProcessMacCommands.constprop.0+0x29a>
                status = 0x03;
 800815c:	2303      	movs	r3, #3
 800815e:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 8008162:	5d2b      	ldrb	r3, [r5, r4]
 8008164:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 8008168:	ab0c      	add	r3, sp, #48	; 0x30
 800816a:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800816c:	f109 0204 	add.w	r2, r9, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008170:	f109 0303 	add.w	r3, r9, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008174:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008176:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008178:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800817a:	5cab      	ldrb	r3, [r5, r2]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800817c:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                newChannelReq.ChannelId = payload[macIndex++];
 8008180:	f109 0202 	add.w	r2, r9, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008184:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008186:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008188:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800818a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800818e:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8008190:	f109 0406 	add.w	r4, r9, #6
                chParam.Frequency *= 100;
 8008194:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008196:	f109 0905 	add.w	r9, r9, #5
                chParam.Frequency *= 100;
 800819a:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 800819c:	fa5f f989 	uxtb.w	r9, r9
                chParam.Frequency *= 100;
 80081a0:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	930d      	str	r3, [sp, #52]	; 0x34
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80081a6:	a908      	add	r1, sp, #32
                chParam.DrRange.Value = payload[macIndex++];
 80081a8:	f815 3009 	ldrb.w	r3, [r5, r9]
 80081ac:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80081b0:	f00b fd82 	bl	8013cb8 <RegionNewChannelReq>
 80081b4:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 80081b6:	2800      	cmp	r0, #0
                chParam.DrRange.Value = payload[macIndex++];
 80081b8:	b2e4      	uxtb	r4, r4
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80081ba:	f88d 3015 	strb.w	r3, [sp, #21]
                if( ( int8_t )status >= 0 )
 80081be:	f6ff aed4 	blt.w	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                    macCmdPayload[0] = status;
 80081c2:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80081c6:	2201      	movs	r2, #1
 80081c8:	a906      	add	r1, sp, #24
 80081ca:	2007      	movs	r0, #7
 80081cc:	e7c1      	b.n	8008152 <ProcessMacCommands.constprop.0+0x2ae>
 80081ce:	bf00      	nop
 80081d0:	200016f8 	.word	0x200016f8
 80081d4:	200011e0 	.word	0x200011e0
                uint8_t delay = payload[macIndex++] & 0x0F;
 80081d8:	5d2b      	ldrb	r3, [r5, r4]
 80081da:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80081de:	2b01      	cmp	r3, #1
 80081e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081e4:	bf38      	it	cc
 80081e6:	2301      	movcc	r3, #1
 80081e8:	4353      	muls	r3, r2
 80081ea:	65f3      	str	r3, [r6, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80081ec:	a906      	add	r1, sp, #24
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80081ee:	4413      	add	r3, r2
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80081f0:	2008      	movs	r0, #8
 80081f2:	2200      	movs	r2, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80081f4:	6633      	str	r3, [r6, #96]	; 0x60
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80081f6:	f002 f8d3 	bl	800a3a0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80081fa:	4aa9      	ldr	r2, [pc, #676]	; (80084a0 <ProcessMacCommands.constprop.0+0x5fc>)
 80081fc:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008200:	f109 0902 	add.w	r9, r9, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008204:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008208:	fa5f f989 	uxtb.w	r9, r9
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800820c:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008210:	464c      	mov	r4, r9
}
 8008212:	e6aa      	b.n	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                uint8_t eirpDwellTime = payload[macIndex++];
 8008214:	5d2b      	ldrb	r3, [r5, r4]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008216:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                txParamSetupReq.UplinkDwellTime = 0;
 800821a:	2200      	movs	r2, #0
 800821c:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008220:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 8008224:	bf18      	it	ne
 8008226:	2201      	movne	r2, #1
 8008228:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800822c:	06da      	lsls	r2, r3, #27
                    txParamSetupReq.UplinkDwellTime = 1;
 800822e:	bf48      	it	mi
 8008230:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008232:	f003 030f 	and.w	r3, r3, #15
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008236:	a907      	add	r1, sp, #28
                    txParamSetupReq.UplinkDwellTime = 1;
 8008238:	bf48      	it	mi
 800823a:	f88d 201c 	strbmi.w	r2, [sp, #28]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800823e:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008242:	f00b fd40 	bl	8013cc6 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 8008246:	f109 0902 	add.w	r9, r9, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800824a:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 800824c:	fa5f f989 	uxtb.w	r9, r9
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008250:	d0de      	beq.n	8008210 <ProcessMacCommands.constprop.0+0x36c>
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008252:	f89d 301d 	ldrb.w	r3, [sp, #29]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008256:	4a93      	ldr	r2, [pc, #588]	; (80084a4 <ProcessMacCommands.constprop.0+0x600>)
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008258:	f886 3081 	strb.w	r3, [r6, #129]	; 0x81
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800825c:	f89d 301e 	ldrb.w	r3, [sp, #30]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8008260:	f89d 401c 	ldrb.w	r4, [sp, #28]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008264:	5cd0      	ldrb	r0, [r2, r3]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8008266:	f886 4080 	strb.w	r4, [r6, #128]	; 0x80
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800826a:	f7f8 fcb5 	bl	8000bd8 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800826e:	2302      	movs	r3, #2
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008270:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008274:	a90c      	add	r1, sp, #48	; 0x30
 8008276:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800827a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800827e:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008282:	f00b fcb3 	bl	8013bec <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008286:	f996 3045 	ldrsb.w	r3, [r6, #69]	; 0x45
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800828a:	9008      	str	r0, [sp, #32]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800828c:	b240      	sxtb	r0, r0
 800828e:	4298      	cmp	r0, r3
 8008290:	bfb8      	it	lt
 8008292:	4618      	movlt	r0, r3
 8008294:	f886 0045 	strb.w	r0, [r6, #69]	; 0x45
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008298:	2200      	movs	r2, #0
 800829a:	a906      	add	r1, sp, #24
 800829c:	2009      	movs	r0, #9
 800829e:	e6f9      	b.n	8008094 <ProcessMacCommands.constprop.0+0x1f0>
                status = 0x03;
 80082a0:	2303      	movs	r3, #3
 80082a2:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 80082a6:	5d2b      	ldrb	r3, [r5, r4]
 80082a8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80082ac:	f109 0204 	add.w	r2, r9, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80082b0:	f109 0303 	add.w	r3, r9, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80082b4:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	f109 0405 	add.w	r4, r9, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 80082bc:	f109 0902 	add.w	r9, r9, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80082c0:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082c2:	5cab      	ldrb	r3, [r5, r2]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80082c4:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80082c8:	fa5f f989 	uxtb.w	r9, r9
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082cc:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80082ce:	f815 2009 	ldrb.w	r2, [r5, r9]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80082d6:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 80082d8:	2264      	movs	r2, #100	; 0x64
 80082da:	4353      	muls	r3, r2
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80082dc:	a90c      	add	r1, sp, #48	; 0x30
                dlChannelReq.Rx1Frequency *= 100;
 80082de:	930d      	str	r3, [sp, #52]	; 0x34
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80082e0:	f00b fcf8 	bl	8013cd4 <RegionDlChannelReq>
 80082e4:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 80082e6:	2800      	cmp	r0, #0
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80082e8:	b2e4      	uxtb	r4, r4
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80082ea:	f88d 3015 	strb.w	r3, [sp, #21]
                if( ( int8_t )status >= 0 )
 80082ee:	f6ff ae3c 	blt.w	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                    macCmdPayload[0] = status;
 80082f2:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80082f6:	2201      	movs	r2, #1
 80082f8:	a906      	add	r1, sp, #24
 80082fa:	200a      	movs	r0, #10
 80082fc:	e70e      	b.n	800811c <ProcessMacCommands.constprop.0+0x278>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80082fe:	2009      	movs	r0, #9
 8008300:	f002 f9f0 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 8008304:	f8df a198 	ldr.w	sl, [pc, #408]	; 80084a0 <ProcessMacCommands.constprop.0+0x5fc>
 8008308:	2800      	cmp	r0, #0
 800830a:	d054      	beq.n	80083b6 <ProcessMacCommands.constprop.0+0x512>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800830c:	2109      	movs	r1, #9
 800830e:	2000      	movs	r0, #0
 8008310:	f002 f9ac 	bl	800a66c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8008314:	2300      	movs	r3, #0
 8008316:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800831a:	f109 0203 	add.w	r2, r9, #3
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800831e:	f109 0302 	add.w	r3, r9, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008322:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008324:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008326:	5ce9      	ldrb	r1, [r5, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008328:	5cab      	ldrb	r3, [r5, r2]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800832a:	5d2a      	ldrb	r2, [r5, r4]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800832c:	041b      	lsls	r3, r3, #16
 800832e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008332:	4313      	orrs	r3, r2
 8008334:	f109 0204 	add.w	r2, r9, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008338:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800833a:	f109 0406 	add.w	r4, r9, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800833e:	f109 0905 	add.w	r9, r9, #5
 8008342:	5caa      	ldrb	r2, [r5, r2]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008344:	fa5f f989 	uxtb.w	r9, r9
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008348:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800834c:	f815 2009 	ldrb.w	r2, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008350:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008352:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008356:	434a      	muls	r2, r1
                    sysTimeCurrent = SysTimeGet( );
 8008358:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800835c:	1212      	asrs	r2, r2, #8
                    sysTimeCurrent = SysTimeGet( );
 800835e:	4658      	mov	r0, fp
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008360:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                    sysTimeCurrent = SysTimeGet( );
 8008364:	f00a fb9e 	bl	8012aa4 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 800836e:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 8008372:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008376:	9308      	str	r3, [sp, #32]
 8008378:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	f10d 0920 	add.w	r9, sp, #32
 8008382:	e899 0006 	ldmia.w	r9, {r1, r2}
 8008386:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 800838a:	a80a      	add	r0, sp, #40	; 0x28
 800838c:	f00a fb4e 	bl	8012a2c <SysTimeSub>
 8008390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800839a:	4648      	mov	r0, r9
 800839c:	f00a fb2b 	bl	80129f6 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80083a0:	e899 0003 	ldmia.w	r9, {r0, r1}
 80083a4:	f00a fb5d 	bl	8012a62 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80083a8:	f00b f9f0 	bl	801378c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80083ac:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80083ae:	b2e4      	uxtb	r4, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80083b0:	f88a 343c 	strb.w	r3, [sl, #1084]	; 0x43c
 80083b4:	e5d9      	b.n	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80083b6:	f88a 043c 	strb.w	r0, [sl, #1084]	; 0x43c
 80083ba:	e5d6      	b.n	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80083bc:	200c      	movs	r0, #12
 80083be:	f002 f991 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f43f add1 	beq.w	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80083c8:	210c      	movs	r1, #12
 80083ca:	2000      	movs	r0, #0
 80083cc:	f002 f94e 	bl	800a66c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80083d0:	4b33      	ldr	r3, [pc, #204]	; (80084a0 <ProcessMacCommands.constprop.0+0x5fc>)
 80083d2:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
 80083d6:	3b04      	subs	r3, #4
 80083d8:	2b01      	cmp	r3, #1
 80083da:	f67f adc6 	bls.w	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                        LoRaMacClassBPingSlotInfoAns( );
 80083de:	f00b f9d1 	bl	8013784 <LoRaMacClassBPingSlotInfoAns>
 80083e2:	e5c2      	b.n	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                frequency = ( uint32_t )payload[macIndex++];
 80083e4:	f109 0202 	add.w	r2, r9, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80083e8:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 80083ea:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80083ec:	5ca8      	ldrb	r0, [r5, r2]
 80083ee:	f109 0203 	add.w	r2, r9, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80083f2:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 80083f4:	f109 0405 	add.w	r4, r9, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80083f8:	5cab      	ldrb	r3, [r5, r2]
 80083fa:	f109 0904 	add.w	r9, r9, #4
                datarate = payload[macIndex++] & 0x0F;
 80083fe:	fa5f f989 	uxtb.w	r9, r9
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008402:	041b      	lsls	r3, r3, #16
 8008404:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8008408:	f815 0009 	ldrb.w	r0, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800840c:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800840e:	2164      	movs	r1, #100	; 0x64
 8008410:	4359      	muls	r1, r3
 8008412:	f000 000f 	and.w	r0, r0, #15
 8008416:	f00b f9b6 	bl	8013786 <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
 800841a:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 800841c:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008420:	2201      	movs	r2, #1
 8008422:	a906      	add	r1, sp, #24
 8008424:	2011      	movs	r0, #17
 8008426:	e679      	b.n	800811c <ProcessMacCommands.constprop.0+0x278>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008428:	200d      	movs	r0, #13
 800842a:	f002 f95b 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 800842e:	2800      	cmp	r0, #0
 8008430:	f43f ad9b 	beq.w	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008434:	210d      	movs	r1, #13
 8008436:	2000      	movs	r0, #0
 8008438:	f002 f918 	bl	800a66c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800843c:	f109 0302 	add.w	r3, r9, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008440:	b2db      	uxtb	r3, r3
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008442:	4a19      	ldr	r2, [pc, #100]	; (80084a8 <ProcessMacCommands.constprop.0+0x604>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008444:	5ce8      	ldrb	r0, [r5, r3]
 8008446:	5d2b      	ldrb	r3, [r5, r4]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008448:	6812      	ldr	r2, [r2, #0]
                    beaconTimingChannel = payload[macIndex++];
 800844a:	f109 0404 	add.w	r4, r9, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800844e:	f109 0903 	add.w	r9, r9, #3
                    beaconTimingChannel = payload[macIndex++];
 8008452:	fa5f f989 	uxtb.w	r9, r9
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008456:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800845a:	f815 1009 	ldrb.w	r1, [r5, r9]
                    beaconTimingChannel = payload[macIndex++];
 800845e:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008460:	f00b f993 	bl	801378a <LoRaMacClassBBeaconTimingAns>
 8008464:	e581      	b.n	8007f6a <ProcessMacCommands.constprop.0+0xc6>
                    frequency = ( uint32_t )payload[macIndex++];
 8008466:	5d28      	ldrb	r0, [r5, r4]
 8008468:	f109 0302 	add.w	r3, r9, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800846c:	f109 0404 	add.w	r4, r9, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008470:	f109 0903 	add.w	r9, r9, #3
 8008474:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008476:	fa5f f989 	uxtb.w	r9, r9
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800847a:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800847c:	f815 3009 	ldrb.w	r3, [r5, r9]
 8008480:	041b      	lsls	r3, r3, #16
 8008482:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008486:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008488:	2064      	movs	r0, #100	; 0x64
 800848a:	4358      	muls	r0, r3
 800848c:	f00b f97f 	bl	801378e <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008490:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008492:	f88d 0018 	strb.w	r0, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008496:	2201      	movs	r2, #1
 8008498:	a906      	add	r1, sp, #24
 800849a:	2013      	movs	r0, #19
 800849c:	e659      	b.n	8008152 <ProcessMacCommands.constprop.0+0x2ae>
 800849e:	bf00      	nop
 80084a0:	200011e0 	.word	0x200011e0
 80084a4:	0801a0c1 	.word	0x0801a0c1
 80084a8:	20001dfc 	.word	0x20001dfc

080084ac <StopRetransmission.isra.0>:
    return counter;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80084ac:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <StopRetransmission.isra.0+0x3c>)
 80084ae:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 80084b2:	0792      	lsls	r2, r2, #30
 80084b4:	d503      	bpl.n	80084be <StopRetransmission.isra.0+0x12>
 80084b6:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 80084ba:	2a01      	cmp	r2, #1
 80084bc:	d908      	bls.n	80084d0 <StopRetransmission.isra.0+0x24>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80084be:	490b      	ldr	r1, [pc, #44]	; (80084ec <StopRetransmission.isra.0+0x40>)
 80084c0:	f891 2186 	ldrb.w	r2, [r1, #390]	; 0x186
 80084c4:	b122      	cbz	r2, 80084d0 <StopRetransmission.isra.0+0x24>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80084c6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if( counter < ADR_ACK_COUNTER_MAX )
 80084c8:	1c50      	adds	r0, r2, #1
        counter++;
 80084ca:	bf18      	it	ne
 80084cc:	3201      	addne	r2, #1
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80084ce:	634a      	str	r2, [r1, #52]	; 0x34
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 80084d6:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80084da:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80084de:	f022 0202 	bic.w	r2, r2, #2
 80084e2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80084e6:	4770      	bx	lr
 80084e8:	200011e0 	.word	0x200011e0
 80084ec:	200016f8 	.word	0x200016f8

080084f0 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 80084f0:	4b07      	ldr	r3, [pc, #28]	; (8008510 <LoRaMacIsBusy+0x20>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	07db      	lsls	r3, r3, #31
 80084f6:	d409      	bmi.n	800850c <LoRaMacIsBusy+0x1c>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80084f8:	4b06      	ldr	r3, [pc, #24]	; (8008514 <LoRaMacIsBusy+0x24>)
 80084fa:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80084fe:	b92a      	cbnz	r2, 800850c <LoRaMacIsBusy+0x1c>
 8008500:	f893 048e 	ldrb.w	r0, [r3, #1166]	; 0x48e
 8008504:	3801      	subs	r0, #1
 8008506:	bf18      	it	ne
 8008508:	2001      	movne	r0, #1
 800850a:	4770      	bx	lr
        return true;
 800850c:	2001      	movs	r0, #1
}
 800850e:	4770      	bx	lr
 8008510:	200011dc 	.word	0x200011dc
 8008514:	200011e0 	.word	0x200011e0

08008518 <PrepareFrame>:
{
 8008518:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    MacCtx.PktBufferLen = 0;
 800851c:	4c50      	ldr	r4, [pc, #320]	; (8008660 <PrepareFrame+0x148>)
{
 800851e:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
        fBufferSize = 0;
 8008522:	1e1e      	subs	r6, r3, #0
    MacCtx.PktBufferLen = 0;
 8008524:	f04f 0500 	mov.w	r5, #0
        fBufferSize = 0;
 8008528:	bf08      	it	eq
 800852a:	46aa      	moveq	sl, r5
{
 800852c:	4680      	mov	r8, r0
 800852e:	460f      	mov	r7, r1
 8008530:	4691      	mov	r9, r2
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008532:	4631      	mov	r1, r6
 8008534:	4652      	mov	r2, sl
 8008536:	f504 709c 	add.w	r0, r4, #312	; 0x138
    size_t macCmdsSize = 0;
 800853a:	e9cd 5500 	strd	r5, r5, [sp]
    MacCtx.PktBufferLen = 0;
 800853e:	8025      	strh	r5, [r4, #0]
    MacCtx.NodeAckRequested = false;
 8008540:	f884 541a 	strb.w	r5, [r4, #1050]	; 0x41a
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008544:	f00a fa3c 	bl	80129c0 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8008548:	fa5f f28a 	uxtb.w	r2, sl
 800854c:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8008550:	f898 3000 	ldrb.w	r3, [r8]
 8008554:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 8008556:	f898 3000 	ldrb.w	r3, [r8]
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	2b04      	cmp	r3, #4
 800855e:	d007      	beq.n	8008570 <PrepareFrame+0x58>
 8008560:	2b07      	cmp	r3, #7
 8008562:	d06e      	beq.n	8008642 <PrepareFrame+0x12a>
 8008564:	2b02      	cmp	r3, #2
 8008566:	d006      	beq.n	8008576 <PrepareFrame+0x5e>
 8008568:	2002      	movs	r0, #2
}
 800856a:	b002      	add	sp, #8
 800856c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            MacCtx.NodeAckRequested = true;
 8008570:	2301      	movs	r3, #1
 8008572:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8008576:	2304      	movs	r3, #4
 8008578:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800857c:	4d39      	ldr	r5, [pc, #228]	; (8008664 <PrepareFrame+0x14c>)
 800857e:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008582:	23ff      	movs	r3, #255	; 0xff
 8008584:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8008588:	4e37      	ldr	r6, [pc, #220]	; (8008668 <PrepareFrame+0x150>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800858a:	f898 3000 	ldrb.w	r3, [r8]
 800858e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8008592:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8008596:	f884 9128 	strb.w	r9, [r4, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800859a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800859e:	783b      	ldrb	r3, [r7, #0]
 80085a0:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80085a4:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80085a6:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80085aa:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80085ae:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80085b2:	f002 f999 	bl	800a8e8 <LoRaMacCryptoGetFCntUp>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d150      	bne.n	800865c <PrepareFrame+0x144>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80085ba:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.AckReceived = false;
 80085bc:	f8a4 0448 	strh.w	r0, [r4, #1096]	; 0x448
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80085c0:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80085c2:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80085c6:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80085ca:	f001 ff8d 	bl	800a4e8 <LoRaMacCommandsGetSizeSerializedCmds>
 80085ce:	b108      	cbz	r0, 80085d4 <PrepareFrame+0xbc>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80085d0:	2013      	movs	r0, #19
 80085d2:	e7ca      	b.n	800856a <PrepareFrame+0x52>
            if( macCmdsSize > 0 )
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	b90b      	cbnz	r3, 80085dc <PrepareFrame+0xc4>
    return LORAMAC_STATUS_OK;
 80085d8:	2000      	movs	r0, #0
 80085da:	e7c6      	b.n	800856a <PrepareFrame+0x52>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80085dc:	f996 0045 	ldrsb.w	r0, [r6, #69]	; 0x45
 80085e0:	f7ff f9c8 	bl	8007974 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80085e4:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 80085e8:	b1db      	cbz	r3, 8008622 <PrepareFrame+0x10a>
 80085ea:	9b01      	ldr	r3, [sp, #4]
 80085ec:	2b0f      	cmp	r3, #15
 80085ee:	d80f      	bhi.n	8008610 <PrepareFrame+0xf8>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80085f0:	f505 728b 	add.w	r2, r5, #278	; 0x116
 80085f4:	a901      	add	r1, sp, #4
 80085f6:	200f      	movs	r0, #15
 80085f8:	f001 ff82 	bl	800a500 <LoRaMacCommandsSerializeCmds>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d1e7      	bne.n	80085d0 <PrepareFrame+0xb8>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8008600:	783b      	ldrb	r3, [r7, #0]
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	f362 0303 	bfi	r3, r2, #0, #4
 8008608:	703b      	strb	r3, [r7, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800860a:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 800860e:	e7ac      	b.n	800856a <PrepareFrame+0x52>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008610:	f205 4296 	addw	r2, r5, #1174	; 0x496
 8008614:	a901      	add	r1, sp, #4
 8008616:	f001 ff73 	bl	800a500 <LoRaMacCommandsSerializeCmds>
 800861a:	2800      	cmp	r0, #0
 800861c:	d1d8      	bne.n	80085d0 <PrepareFrame+0xb8>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800861e:	200a      	movs	r0, #10
 8008620:	e7a3      	b.n	800856a <PrepareFrame+0x52>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008622:	f205 4596 	addw	r5, r5, #1174	; 0x496
 8008626:	462a      	mov	r2, r5
 8008628:	a901      	add	r1, sp, #4
 800862a:	f001 ff69 	bl	800a500 <LoRaMacCommandsSerializeCmds>
 800862e:	2800      	cmp	r0, #0
 8008630:	d1ce      	bne.n	80085d0 <PrepareFrame+0xb8>
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008632:	9b01      	ldr	r3, [sp, #4]
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008634:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8008638:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800863c:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
 8008640:	e793      	b.n	800856a <PrepareFrame+0x52>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8008642:	2e00      	cmp	r6, #0
 8008644:	d0c8      	beq.n	80085d8 <PrepareFrame+0xc0>
 8008646:	2a00      	cmp	r2, #0
 8008648:	d0c6      	beq.n	80085d8 <PrepareFrame+0xc0>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800864a:	4631      	mov	r1, r6
 800864c:	1ce0      	adds	r0, r4, #3
 800864e:	f00a f9b7 	bl	80129c0 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8008652:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8008656:	3301      	adds	r3, #1
 8008658:	8023      	strh	r3, [r4, #0]
 800865a:	e7bd      	b.n	80085d8 <PrepareFrame+0xc0>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800865c:	2012      	movs	r0, #18
 800865e:	e784      	b.n	800856a <PrepareFrame+0x52>
 8008660:	200011e0 	.word	0x200011e0
 8008664:	200011e2 	.word	0x200011e2
 8008668:	200016f8 	.word	0x200016f8

0800866c <SendFrameOnChannel>:
{
 800866c:	b570      	push	{r4, r5, r6, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800866e:	4d45      	ldr	r5, [pc, #276]	; (8008784 <SendFrameOnChannel+0x118>)
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008670:	4c45      	ldr	r4, [pc, #276]	; (8008788 <SendFrameOnChannel+0x11c>)
{
 8008672:	b086      	sub	sp, #24
    int8_t txPower = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	f88d 3003 	strb.w	r3, [sp, #3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800867a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800867e:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008682:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8008686:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800868a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800868e:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008690:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8008694:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008696:	8823      	ldrh	r3, [r4, #0]
    txConfig.Channel = channel;
 8008698:	f88d 0008 	strb.w	r0, [sp, #8]
{
 800869c:	4606      	mov	r6, r0
    txConfig.PktLen = MacCtx.PktBufferLen;
 800869e:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80086a2:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 80086a6:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 80086aa:	f10d 0203 	add.w	r2, sp, #3
 80086ae:	a902      	add	r1, sp, #8
 80086b0:	f00b fade 	bl	8013c70 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80086ba:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80086be:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 80086c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80086c6:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80086ca:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 80086ce:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80086d2:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80086d6:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80086da:	f00b f848 	bl	801376e <LoRaMacClassBIsBeaconModeActive>
 80086de:	b9a8      	cbnz	r0, 800870c <SendFrameOnChannel+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80086e0:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <SendFrameOnChannel+0x80>
        LoRaMacClassBStopRxSlots( );
 80086e8:	f00b f855 	bl	8013796 <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 80086ec:	f00b f842 	bl	8013774 <LoRaMacClassBHaltBeaconing>
    uint32_t fCntUp = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 80086f4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80086f8:	f995 5045 	ldrsb.w	r5, [r5, #69]	; 0x45
 80086fc:	f894 641b 	ldrb.w	r6, [r4, #1051]	; 0x41b
    switch( MacCtx.TxMsg.Type )
 8008700:	b163      	cbz	r3, 800871c <SendFrameOnChannel+0xb0>
 8008702:	2b04      	cmp	r3, #4
 8008704:	d029      	beq.n	800875a <SendFrameOnChannel+0xee>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8008706:	2003      	movs	r0, #3
}
 8008708:	b006      	add	sp, #24
 800870a:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800870c:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8008710:	f00b f83f 	bl	8013792 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8008714:	2800      	cmp	r0, #0
 8008716:	d0e3      	beq.n	80086e0 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8008718:	2010      	movs	r0, #16
 800871a:	e7f5      	b.n	8008708 <SendFrameOnChannel+0x9c>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800871c:	481b      	ldr	r0, [pc, #108]	; (800878c <SendFrameOnChannel+0x120>)
 800871e:	f002 f905 	bl	800a92c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008722:	bb58      	cbnz	r0, 800877c <SendFrameOnChannel+0x110>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008724:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8008728:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800872a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800872e:	4818      	ldr	r0, [pc, #96]	; (8008790 <SendFrameOnChannel+0x124>)
 8008730:	7821      	ldrb	r1, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008732:	f043 0302 	orr.w	r3, r3, #2
 8008736:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800873a:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800873e:	3301      	adds	r3, #1
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8008746:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800874a:	4b12      	ldr	r3, [pc, #72]	; (8008794 <SendFrameOnChannel+0x128>)
    MacCtx.ResponseTimeoutStartTime = 0;
 800874c:	2500      	movs	r5, #0
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    MacCtx.ResponseTimeoutStartTime = 0;
 8008750:	f8c4 5494 	str.w	r5, [r4, #1172]	; 0x494
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008754:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8008756:	4628      	mov	r0, r5
 8008758:	e7d6      	b.n	8008708 <SendFrameOnChannel+0x9c>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800875a:	a801      	add	r0, sp, #4
 800875c:	f002 f8c4 	bl	800a8e8 <LoRaMacCryptoGetFCntUp>
 8008760:	b970      	cbnz	r0, 8008780 <SendFrameOnChannel+0x114>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8008762:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8008766:	b113      	cbz	r3, 800876e <SendFrameOnChannel+0x102>
                fCntUp -= 1;
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	3b01      	subs	r3, #1
 800876c:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800876e:	4b07      	ldr	r3, [pc, #28]	; (800878c <SendFrameOnChannel+0x120>)
 8008770:	9801      	ldr	r0, [sp, #4]
 8008772:	4632      	mov	r2, r6
 8008774:	b2e9      	uxtb	r1, r5
 8008776:	f002 f8fd 	bl	800a974 <LoRaMacCryptoSecureMessage>
 800877a:	e7d2      	b.n	8008722 <SendFrameOnChannel+0xb6>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800877c:	2011      	movs	r0, #17
 800877e:	e7c3      	b.n	8008708 <SendFrameOnChannel+0x9c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008780:	2012      	movs	r0, #18
 8008782:	e7c1      	b.n	8008708 <SendFrameOnChannel+0x9c>
 8008784:	200016f8 	.word	0x200016f8
 8008788:	200011e0 	.word	0x200011e0
 800878c:	200012e8 	.word	0x200012e8
 8008790:	200011e2 	.word	0x200011e2
 8008794:	08018558 	.word	0x08018558

08008798 <ScheduleTx>:
{
 8008798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879c:	b08e      	sub	sp, #56	; 0x38
 800879e:	4606      	mov	r6, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80087a0:	f00a ffdf 	bl	8013762 <LoRaMacClassBIsBeaconExpected>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	f040 80d3 	bne.w	8008950 <ScheduleTx+0x1b8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80087aa:	4c6a      	ldr	r4, [pc, #424]	; (8008954 <ScheduleTx+0x1bc>)
 80087ac:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d009      	beq.n	80087c8 <ScheduleTx+0x30>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80087b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087b6:	4d68      	ldr	r5, [pc, #416]	; (8008958 <ScheduleTx+0x1c0>)
 80087b8:	b193      	cbz	r3, 80087e0 <ScheduleTx+0x48>
    switch( MacCtx.TxMsg.Type )
 80087ba:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 80087be:	b1bb      	cbz	r3, 80087f0 <ScheduleTx+0x58>
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d01b      	beq.n	80087fc <ScheduleTx+0x64>
 80087c4:	2003      	movs	r0, #3
 80087c6:	e003      	b.n	80087d0 <ScheduleTx+0x38>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80087c8:	f00a ffcd 	bl	8013766 <LoRaMacClassBIsPingExpected>
 80087cc:	b118      	cbz	r0, 80087d6 <ScheduleTx+0x3e>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80087ce:	200f      	movs	r0, #15
}
 80087d0:	b00e      	add	sp, #56	; 0x38
 80087d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80087d6:	f00a ffc8 	bl	801376a <LoRaMacClassBIsMulticastExpected>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d0ea      	beq.n	80087b4 <ScheduleTx+0x1c>
 80087de:	e7f6      	b.n	80087ce <ScheduleTx+0x36>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80087e0:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
 80087e4:	f8d5 241c 	ldr.w	r2, [r5, #1052]	; 0x41c
 80087e8:	3b01      	subs	r3, #1
 80087ea:	4353      	muls	r3, r2
 80087ec:	63e3      	str	r3, [r4, #60]	; 0x3c
 80087ee:	e7e4      	b.n	80087ba <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80087f0:	485a      	ldr	r0, [pc, #360]	; (800895c <ScheduleTx+0x1c4>)
 80087f2:	f00b f956 	bl	8013aa2 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80087f6:	b128      	cbz	r0, 8008804 <ScheduleTx+0x6c>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80087f8:	2011      	movs	r0, #17
 80087fa:	e7e9      	b.n	80087d0 <ScheduleTx+0x38>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80087fc:	4857      	ldr	r0, [pc, #348]	; (800895c <ScheduleTx+0x1c4>)
 80087fe:	f00b f984 	bl	8013b0a <LoRaMacSerializerData>
 8008802:	e7f8      	b.n	80087f6 <ScheduleTx+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008804:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
 8008808:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800880a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800880c:	9308      	str	r3, [sp, #32]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800880e:	f10d 0818 	add.w	r8, sp, #24
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008812:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008816:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800881a:	4640      	mov	r0, r8
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800881c:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
 8008820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008824:	f00a f961 	bl	8012aea <SysTimeGetMcuTime>
 8008828:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	af02      	add	r7, sp, #8
 8008830:	e898 0006 	ldmia.w	r8, {r1, r2}
 8008834:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
 8008838:	4638      	mov	r0, r7
 800883a:	f00a f8f7 	bl	8012a2c <SysTimeSub>
 800883e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008842:	ab0b      	add	r3, sp, #44	; 0x2c
 8008844:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8008848:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800884a:	9309      	str	r3, [sp, #36]	; 0x24
    nextChan.LastTxIsJoinRequest = false;
 800884c:	2300      	movs	r3, #0
 800884e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    nextChan.PktLen = MacCtx.PktBufferLen;
 8008852:	882b      	ldrh	r3, [r5, #0]
 8008854:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008858:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    nextChan.Joined = true;
 800885c:	2201      	movs	r2, #1
 800885e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008862:	b91b      	cbnz	r3, 800886c <ScheduleTx+0xd4>
        nextChan.LastTxIsJoinRequest = true;
 8008864:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
        nextChan.Joined = false;
 8008868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800886c:	4b3c      	ldr	r3, [pc, #240]	; (8008960 <ScheduleTx+0x1c8>)
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	4b3c      	ldr	r3, [pc, #240]	; (8008964 <ScheduleTx+0x1cc>)
 8008872:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8008876:	f1a3 0275 	sub.w	r2, r3, #117	; 0x75
 800887a:	a908      	add	r1, sp, #32
 800887c:	f00b fa3a 	bl	8013cf4 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8008880:	b1a0      	cbz	r0, 80088ac <ScheduleTx+0x114>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008882:	280b      	cmp	r0, #11
 8008884:	d1a4      	bne.n	80087d0 <ScheduleTx+0x38>
 8008886:	2e00      	cmp	r6, #0
 8008888:	d0a2      	beq.n	80087d0 <ScheduleTx+0x38>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800888a:	f8d5 1490 	ldr.w	r1, [r5, #1168]	; 0x490
 800888e:	b159      	cbz	r1, 80088a8 <ScheduleTx+0x110>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008890:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8008894:	4834      	ldr	r0, [pc, #208]	; (8008968 <ScheduleTx+0x1d0>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008896:	f043 0320 	orr.w	r3, r3, #32
 800889a:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800889e:	f00a f993 	bl	8012bc8 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 80088a2:	4831      	ldr	r0, [pc, #196]	; (8008968 <ScheduleTx+0x1d0>)
 80088a4:	f7fd fda8 	bl	80063f8 <TimerStart>
            return LORAMAC_STATUS_OK;
 80088a8:	2000      	movs	r0, #0
 80088aa:	e791      	b.n	80087d0 <ScheduleTx+0x38>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80088ac:	f894 704c 	ldrb.w	r7, [r4, #76]	; 0x4c
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80088b0:	f994 306d 	ldrsb.w	r3, [r4, #109]	; 0x6d
 80088b4:	f994 2045 	ldrsb.w	r2, [r4, #69]	; 0x45
 80088b8:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80088bc:	4e2b      	ldr	r6, [pc, #172]	; (800896c <ScheduleTx+0x1d4>)
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80088be:	4638      	mov	r0, r7
 80088c0:	f00b fa26 	bl	8013d10 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80088c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80088c6:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 80088ca:	9600      	str	r6, [sp, #0]
 80088cc:	b241      	sxtb	r1, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80088ce:	3614      	adds	r6, #20
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80088d0:	4638      	mov	r0, r7
 80088d2:	f00b f9b7 	bl	8013c44 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80088d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80088d8:	f994 1074 	ldrsb.w	r1, [r4, #116]	; 0x74
 80088dc:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 80088e0:	9600      	str	r6, [sp, #0]
 80088e2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 80088e6:	f00b f9ad 	bl	8013c44 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80088ea:	f8d5 03e0 	ldr.w	r0, [r5, #992]	; 0x3e0
 80088ee:	6e21      	ldr	r1, [r4, #96]	; 0x60
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80088f0:	f8d5 63cc 	ldr.w	r6, [r5, #972]	; 0x3cc
 80088f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80088f6:	4401      	add	r1, r0
 80088f8:	f8c5 13bc 	str.w	r1, [r5, #956]	; 0x3bc
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80088fc:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008900:	4433      	add	r3, r6
 8008902:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008906:	b939      	cbnz	r1, 8008918 <ScheduleTx+0x180>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008908:	6e62      	ldr	r2, [r4, #100]	; 0x64
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800890a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800890c:	4432      	add	r2, r6
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800890e:	4403      	add	r3, r0
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008910:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008914:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    size_t macCmdsSize = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	9305      	str	r3, [sp, #20]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800891c:	b179      	cbz	r1, 800893e <ScheduleTx+0x1a6>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800891e:	a805      	add	r0, sp, #20
 8008920:	f001 fde2 	bl	800a4e8 <LoRaMacCommandsGetSizeSerializedCmds>
 8008924:	b990      	cbnz	r0, 800894c <ScheduleTx+0x1b4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008926:	f994 0045 	ldrsb.w	r0, [r4, #69]	; 0x45
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800892a:	f895 6237 	ldrb.w	r6, [r5, #567]	; 0x237
 800892e:	f89d 7014 	ldrb.w	r7, [sp, #20]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008932:	f7ff f81f 	bl	8007974 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008936:	443e      	add	r6, r7
 8008938:	b280      	uxth	r0, r0
 800893a:	42b0      	cmp	r0, r6
 800893c:	d304      	bcc.n	8008948 <ScheduleTx+0x1b0>
    return SendFrameOnChannel( MacCtx.Channel );
 800893e:	f895 041b 	ldrb.w	r0, [r5, #1051]	; 0x41b
 8008942:	f7ff fe93 	bl	800866c <SendFrameOnChannel>
 8008946:	e743      	b.n	80087d0 <ScheduleTx+0x38>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008948:	2008      	movs	r0, #8
 800894a:	e741      	b.n	80087d0 <ScheduleTx+0x38>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800894c:	2013      	movs	r0, #19
 800894e:	e73f      	b.n	80087d0 <ScheduleTx+0x38>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008950:	200e      	movs	r0, #14
 8008952:	e73d      	b.n	80087d0 <ScheduleTx+0x38>
 8008954:	200016f8 	.word	0x200016f8
 8008958:	200011e0 	.word	0x200011e0
 800895c:	200012e8 	.word	0x200012e8
 8008960:	20001734 	.word	0x20001734
 8008964:	20001670 	.word	0x20001670
 8008968:	20001550 	.word	0x20001550
 800896c:	200015a0 	.word	0x200015a0

08008970 <OnTxDelayedTimerEvent>:
{
 8008970:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8008972:	4c18      	ldr	r4, [pc, #96]	; (80089d4 <OnTxDelayedTimerEvent+0x64>)
 8008974:	f504 705c 	add.w	r0, r4, #880	; 0x370
 8008978:	f7fd fdb2 	bl	80064e0 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800897c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8008980:	f8d4 0494 	ldr.w	r0, [r4, #1172]	; 0x494
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008984:	f023 0320 	bic.w	r3, r3, #32
 8008988:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( startTimeInMs != 0 )
 800898c:	b148      	cbz	r0, 80089a2 <OnTxDelayedTimerEvent+0x32>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800898e:	f00a f933 	bl	8012bf8 <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8008992:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8008996:	d904      	bls.n	80089a2 <OnTxDelayedTimerEvent+0x32>
            Nvm.MacGroup1.SrvAckRequested = false;
 8008998:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <OnTxDelayedTimerEvent+0x68>)
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 80089a0:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 80089a2:	2001      	movs	r0, #1
 80089a4:	f7ff fef8 	bl	8008798 <ScheduleTx>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d0f9      	beq.n	80089a0 <OnTxDelayedTimerEvent+0x30>
 80089ac:	280b      	cmp	r0, #11
 80089ae:	d0f7      	beq.n	80089a0 <OnTxDelayedTimerEvent+0x30>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80089b0:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <OnTxDelayedTimerEvent+0x68>)
 80089b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089b6:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80089ba:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80089bc:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80089c0:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80089c4:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80089c8:	f001 fe72 	bl	800a6b0 <LoRaMacConfirmQueueSetStatusCmn>
}
 80089cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 80089d0:	f7ff bd6c 	b.w	80084ac <StopRetransmission.isra.0>
 80089d4:	200011e0 	.word	0x200011e0
 80089d8:	200016f8 	.word	0x200016f8

080089dc <Send>:
{
 80089dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089e0:	4c3b      	ldr	r4, [pc, #236]	; (8008ad0 <Send+0xf4>)
 80089e2:	b08b      	sub	sp, #44	; 0x2c
 80089e4:	4617      	mov	r7, r2
 80089e6:	4699      	mov	r9, r3
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80089e8:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
 80089ec:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80089f0:	f8b4 8044 	ldrh.w	r8, [r4, #68]	; 0x44
{
 80089f4:	460e      	mov	r6, r1
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80089f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f8:	9104      	str	r1, [sp, #16]
{
 80089fa:	4605      	mov	r5, r0
 80089fc:	ba5b      	rev16	r3, r3
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	d064      	beq.n	8008acc <Send+0xf0>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8008a02:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
 8008a06:	b902      	cbnz	r2, 8008a0a <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8008a08:	63e2      	str	r2, [r4, #60]	; 0x3c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8008a0a:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
 8008a0e:	f04f 0200 	mov.w	r2, #0
 8008a12:	f360 12c7 	bfi	r2, r0, #7, #1
 8008a16:	f88d 200c 	strb.w	r2, [sp, #12]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008a1a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
 8008a1e:	2a01      	cmp	r2, #1
        fCtrl.Bits.FPending      = 1;
 8008a20:	bf02      	ittt	eq
 8008a22:	f89d 200c 	ldrbeq.w	r2, [sp, #12]
 8008a26:	f042 0210 	orreq.w	r2, r2, #16
 8008a2a:	f88d 200c 	strbeq.w	r2, [sp, #12]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8008a2e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8008a32:	b12a      	cbz	r2, 8008a40 <Send+0x64>
        fCtrl.Bits.Ack = 1;
 8008a34:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008a38:	f042 0220 	orr.w	r2, r2, #32
 8008a3c:	f88d 200c 	strb.w	r2, [sp, #12]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008a40:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008a44:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8008a48:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    adrNext.UpdateChanMask = true;
 8008a4c:	2201      	movs	r2, #1
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008a4e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    adrNext.UpdateChanMask = true;
 8008a52:	f88d 2014 	strb.w	r2, [sp, #20]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008a56:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008a5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <Send+0xf8>)
    adrNext.Region = Nvm.MacGroup2.Region;
 8008a5c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8008a60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008a64:	ab04      	add	r3, sp, #16
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008a66:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <Send+0xfc>)
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8008a6e:	f88d 0015 	strb.w	r0, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008a72:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008a74:	9207      	str	r2, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008a76:	f1a3 0127 	sub.w	r1, r3, #39	; 0x27
 8008a7a:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8008a7e:	a805      	add	r0, sp, #20
 8008a80:	f00a fdf7 	bl	8013672 <LoRaMacAdrCalcNext>
 8008a84:	f89d 300c 	ldrb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008a88:	f8cd 9000 	str.w	r9, [sp]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008a8c:	f360 1386 	bfi	r3, r0, #6, #1
 8008a90:	f88d 300c 	strb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008a94:	4632      	mov	r2, r6
 8008a96:	463b      	mov	r3, r7
 8008a98:	a903      	add	r1, sp, #12
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f7ff fd3c 	bl	8008518 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8008aa0:	b108      	cbz	r0, 8008aa6 <Send+0xca>
 8008aa2:	280a      	cmp	r0, #10
 8008aa4:	d103      	bne.n	8008aae <Send+0xd2>
        status = ScheduleTx( false );
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	f7ff fe76 	bl	8008798 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8008aac:	b120      	cbz	r0, 8008ab8 <Send+0xdc>
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8008aae:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
}
 8008ab2:	b00b      	add	sp, #44	; 0x2c
 8008ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8008ab8:	9b04      	ldr	r3, [sp, #16]
        Nvm.MacGroup1.SrvAckRequested = false;
 8008aba:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8008abe:	6363      	str	r3, [r4, #52]	; 0x34
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8008ac0:	f001 fcec 	bl	800a49c <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	bf18      	it	ne
 8008ac8:	2013      	movne	r0, #19
 8008aca:	e7f2      	b.n	8008ab2 <Send+0xd6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8008acc:	2007      	movs	r0, #7
 8008ace:	e7f0      	b.n	8008ab2 <Send+0xd6>
 8008ad0:	200016f8 	.word	0x200016f8
 8008ad4:	200011e0 	.word	0x200011e0
 8008ad8:	20001764 	.word	0x20001764

08008adc <SendReJoinReq>:
    switch( joinReqType )
 8008adc:	28ff      	cmp	r0, #255	; 0xff
{
 8008ade:	b570      	push	{r4, r5, r6, lr}
 8008ae0:	4606      	mov	r6, r0
    switch( joinReqType )
 8008ae2:	d120      	bne.n	8008b26 <SendReJoinReq+0x4a>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008ae4:	4c11      	ldr	r4, [pc, #68]	; (8008b2c <SendReJoinReq+0x50>)
            SwitchClass( CLASS_A );
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f7ff f822 	bl	8007b30 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008aec:	2500      	movs	r5, #0
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008aee:	1ca3      	adds	r3, r4, #2
 8008af0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008af4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008af8:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008afc:	f7fe feda 	bl	80078b4 <SecureElementGetJoinEui>
 8008b00:	2208      	movs	r2, #8
 8008b02:	4601      	mov	r1, r0
 8008b04:	f504 7087 	add.w	r0, r4, #270	; 0x10e
 8008b08:	f009 ff5a 	bl	80129c0 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8008b0c:	f7fe febc 	bl	8007888 <SecureElementGetDevEui>
 8008b10:	2208      	movs	r2, #8
 8008b12:	4601      	mov	r1, r0
 8008b14:	f504 708b 	add.w	r0, r4, #278	; 0x116
 8008b18:	f009 ff52 	bl	80129c0 <memcpy1>
            allowDelayedTx = false;
 8008b1c:	4628      	mov	r0, r5
}
 8008b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = ScheduleTx( allowDelayedTx );
 8008b22:	f7ff be39 	b.w	8008798 <ScheduleTx>
    bool allowDelayedTx = true;
 8008b26:	2001      	movs	r0, #1
 8008b28:	e7f9      	b.n	8008b1e <SendReJoinReq+0x42>
 8008b2a:	bf00      	nop
 8008b2c:	200011e0 	.word	0x200011e0

08008b30 <SetTxContinuousWave>:
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008b30:	4b08      	ldr	r3, [pc, #32]	; (8008b54 <SetTxContinuousWave+0x24>)
{
 8008b32:	b510      	push	{r4, lr}
 8008b34:	4604      	mov	r4, r0
 8008b36:	4608      	mov	r0, r1
 8008b38:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	b249      	sxtb	r1, r1
 8008b40:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008b42:	4a05      	ldr	r2, [pc, #20]	; (8008b58 <SetTxContinuousWave+0x28>)
 8008b44:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008b48:	f043 0302 	orr.w	r3, r3, #2
 8008b4c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8008b50:	2000      	movs	r0, #0
 8008b52:	bd10      	pop	{r4, pc}
 8008b54:	08018558 	.word	0x08018558
 8008b58:	200011e0 	.word	0x200011e0

08008b5c <LoRaMacProcess>:
{
 8008b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    events = LoRaMacRadioEvents;
 8008b60:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 8008e44 <LoRaMacProcess+0x2e8>
 8008b64:	4cb8      	ldr	r4, [pc, #736]	; (8008e48 <LoRaMacProcess+0x2ec>)
{
 8008b66:	b0a9      	sub	sp, #164	; 0xa4
    CRITICAL_SECTION_BEGIN( );
 8008b68:	a808      	add	r0, sp, #32
 8008b6a:	f009 fe27 	bl	80127bc <BoardCriticalSectionBegin>
    events = LoRaMacRadioEvents;
 8008b6e:	f8da 5000 	ldr.w	r5, [sl]
    LoRaMacRadioEvents.Value = 0;
 8008b72:	2300      	movs	r3, #0
    CRITICAL_SECTION_END( );
 8008b74:	a808      	add	r0, sp, #32
    LoRaMacRadioEvents.Value = 0;
 8008b76:	f8ca 3000 	str.w	r3, [sl]
    CRITICAL_SECTION_END( );
 8008b7a:	f009 fe29 	bl	80127d0 <BoardCriticalSectionEnd>
    if( events.Value != 0 )
 8008b7e:	2d00      	cmp	r5, #0
 8008b80:	f000 80d9 	beq.w	8008d36 <LoRaMacProcess+0x1da>
        if( events.Events.TxDone == 1 )
 8008b84:	b2eb      	uxtb	r3, r5
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	06ab      	lsls	r3, r5, #26
 8008b8a:	d559      	bpl.n	8008c40 <LoRaMacProcess+0xe4>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008b8c:	4daf      	ldr	r5, [pc, #700]	; (8008e4c <LoRaMacProcess+0x2f0>)
 8008b8e:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d002      	beq.n	8008b9c <LoRaMacProcess+0x40>
        Radio.Sleep( );
 8008b96:	4bae      	ldr	r3, [pc, #696]	; (8008e50 <LoRaMacProcess+0x2f4>)
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8008b9c:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 8008ba0:	48ac      	ldr	r0, [pc, #688]	; (8008e54 <LoRaMacProcess+0x2f8>)
 8008ba2:	f00a f811 	bl	8012bc8 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008ba6:	48ab      	ldr	r0, [pc, #684]	; (8008e54 <LoRaMacProcess+0x2f8>)
 8008ba8:	f7fd fc26 	bl	80063f8 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8008bac:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
 8008bb0:	48a9      	ldr	r0, [pc, #676]	; (8008e58 <LoRaMacProcess+0x2fc>)
 8008bb2:	f00a f809 	bl	8012bc8 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008bb6:	48a8      	ldr	r0, [pc, #672]	; (8008e58 <LoRaMacProcess+0x2fc>)
 8008bb8:	f7fd fc1e 	bl	80063f8 <TimerStart>
    if( MacCtx.NodeAckRequested == true )
 8008bbc:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 81f4 	beq.w	8008fae <LoRaMacProcess+0x452>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008bc6:	2314      	movs	r3, #20
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008bc8:	a912      	add	r1, sp, #72	; 0x48
 8008bca:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008bce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008bd2:	f00b f80b 	bl	8013bec <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008bd6:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008bda:	900f      	str	r0, [sp, #60]	; 0x3c
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008bdc:	4401      	add	r1, r0
 8008bde:	489f      	ldr	r0, [pc, #636]	; (8008e5c <LoRaMacProcess+0x300>)
 8008be0:	f009 fff2 	bl	8012bc8 <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8008be4:	489d      	ldr	r0, [pc, #628]	; (8008e5c <LoRaMacProcess+0x300>)
 8008be6:	f7fd fc07 	bl	80063f8 <TimerStart>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008bea:	4b9d      	ldr	r3, [pc, #628]	; (8008e60 <LoRaMacProcess+0x304>)
    txDone.Channel = MacCtx.Channel;
 8008bec:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	63ab      	str	r3, [r5, #56]	; 0x38
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008bf4:	af0d      	add	r7, sp, #52	; 0x34
 8008bf6:	4638      	mov	r0, r7
    txDone.Channel = MacCtx.Channel;
 8008bf8:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008bfc:	931d      	str	r3, [sp, #116]	; 0x74
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008bfe:	f009 ff74 	bl	8012aea <SysTimeGetMcuTime>
 8008c02:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	ae06      	add	r6, sp, #24
 8008c0a:	e897 0006 	ldmia.w	r7, {r1, r2}
 8008c0e:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
 8008c12:	4630      	mov	r0, r6
 8008c14:	f009 ff0a 	bl	8012a2c <SysTimeSub>
 8008c18:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008c1c:	ab1f      	add	r3, sp, #124	; 0x7c
 8008c1e:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008c22:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8008c26:	931e      	str	r3, [sp, #120]	; 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008c28:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008c2c:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
        txDone.Joined  = false;
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bf18      	it	ne
 8008c34:	2301      	movne	r3, #1
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008c36:	a91c      	add	r1, sp, #112	; 0x70
        txDone.Joined  = false;
 8008c38:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008c3c:	f00a ffe0 	bl	8013c00 <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	06df      	lsls	r7, r3, #27
 8008c44:	d54b      	bpl.n	8008cde <LoRaMacProcess+0x182>
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008c46:	4d81      	ldr	r5, [pc, #516]	; (8008e4c <LoRaMacProcess+0x2f0>)
    uint8_t *payload = RxDoneParams.Payload;
 8008c48:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008e64 <LoRaMacProcess+0x308>
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008c4c:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
    int16_t rssi = RxDoneParams.Rssi;
 8008c50:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008c54:	9205      	str	r2, [sp, #20]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008c56:	f89a 2000 	ldrb.w	r2, [sl]
    int16_t rssi = RxDoneParams.Rssi;
 8008c5a:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 8008c5c:	2300      	movs	r3, #0
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008c5e:	f363 0200 	bfi	r2, r3, #0, #1
    uint32_t downLinkCounter = 0;
 8008c62:	930a      	str	r3, [sp, #40]	; 0x28
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008c64:	f88a 2000 	strb.w	r2, [sl]
    MacCtx.McpsConfirm.AckReceived = false;
 8008c68:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.McpsIndication.Rssi = rssi;
 8008c6c:	9a04      	ldr	r2, [sp, #16]
    MacCtx.McpsIndication.Multicast = 0;
 8008c6e:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 8008c72:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8008c76:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8008c7a:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.AckReceived = false;
 8008c7e:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008c82:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008c86:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8008c8a:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008c8e:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008c92:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 8008c96:	4b6e      	ldr	r3, [pc, #440]	; (8008e50 <LoRaMacProcess+0x2f4>)
    int8_t snr = RxDoneParams.Snr;
 8008c98:	f999 800c 	ldrsb.w	r8, [r9, #12]
    MacCtx.McpsIndication.Rssi = rssi;
 8008c9c:	f8a4 242e 	strh.w	r2, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8008ca0:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
    Radio.Sleep( );
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    MacCtx.McpsIndication.Snr = snr;
 8008ca6:	f884 8430 	strb.w	r8, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8008caa:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint8_t *payload = RxDoneParams.Payload;
 8008cae:	f8d9 7004 	ldr.w	r7, [r9, #4]
    uint16_t size = RxDoneParams.Size;
 8008cb2:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    Radio.Sleep( );
 8008cb6:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8008cb8:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8008cbc:	b913      	cbnz	r3, 8008cc4 <LoRaMacProcess+0x168>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008cbe:	4866      	ldr	r0, [pc, #408]	; (8008e58 <LoRaMacProcess+0x2fc>)
 8008cc0:	f7fd fc0e 	bl	80064e0 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f00a fd49 	bl	801375e <LoRaMacClassBRxBeacon>
 8008ccc:	4683      	mov	fp, r0
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f000 8170 	beq.w	8008fb4 <LoRaMacProcess+0x458>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008cd4:	9b04      	ldr	r3, [sp, #16]
 8008cd6:	f8a4 347e 	strh.w	r3, [r4, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008cda:	f884 8480 	strb.w	r8, [r4, #1152]	; 0x480
        if( events.Events.TxTimeout == 1 )
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	0718      	lsls	r0, r3, #28
 8008ce2:	d51a      	bpl.n	8008d1a <LoRaMacProcess+0x1be>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008ce4:	4b59      	ldr	r3, [pc, #356]	; (8008e4c <LoRaMacProcess+0x2f0>)
 8008ce6:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d002      	beq.n	8008cf4 <LoRaMacProcess+0x198>
        Radio.Sleep( );
 8008cee:	4b58      	ldr	r3, [pc, #352]	; (8008e50 <LoRaMacProcess+0x2f4>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008cf4:	2002      	movs	r0, #2
    UpdateRxSlotIdleState( );
 8008cf6:	f7fe fe2f 	bl	8007958 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008cfa:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008cfe:	f001 fcd7 	bl	800a6b0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008d02:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8008d06:	b113      	cbz	r3, 8008d0e <LoRaMacProcess+0x1b2>
        MacCtx.RetransmitTimeoutRetry = true;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008d0e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008d12:	f043 0320 	orr.w	r3, r3, #32
 8008d16:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( events.Events.RxError == 1 )
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	0759      	lsls	r1, r3, #29
 8008d1e:	d503      	bpl.n	8008d28 <LoRaMacProcess+0x1cc>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008d20:	2106      	movs	r1, #6
 8008d22:	2005      	movs	r0, #5
 8008d24:	f7fe fe70 	bl	8007a08 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8008d28:	9b03      	ldr	r3, [sp, #12]
 8008d2a:	079a      	lsls	r2, r3, #30
 8008d2c:	d503      	bpl.n	8008d36 <LoRaMacProcess+0x1da>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008d2e:	2104      	movs	r1, #4
 8008d30:	2003      	movs	r0, #3
 8008d32:	f7fe fe69 	bl	8007a08 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8008d36:	f00a fd30 	bl	801379a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8008d3a:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
 8008d3e:	0693      	lsls	r3, r2, #26
 8008d40:	d571      	bpl.n	8008e26 <LoRaMacProcess+0x2ca>
    MacCtx.AllowRequests = requestState;
 8008d42:	2300      	movs	r3, #0
 8008d44:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008d48:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008d4c:	061f      	lsls	r7, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d4e:	bf44      	itt	mi
 8008d50:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 8008d54:	f8c4 3340 	strmi.w	r3, [r4, #832]	; 0x340
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
    }
}
static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008d58:	f012 0f05 	tst.w	r2, #5
 8008d5c:	f000 8378 	beq.w	8009450 <LoRaMacProcess+0x8f4>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008d60:	200b      	movs	r0, #11
 8008d62:	f001 fcbf 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f000 8372 	beq.w	8009450 <LoRaMacProcess+0x8f4>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008d6c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008d70:	07de      	lsls	r6, r3, #31
 8008d72:	f100 836d 	bmi.w	8009450 <LoRaMacProcess+0x8f4>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008d76:	075d      	lsls	r5, r3, #29
 8008d78:	f140 8384 	bpl.w	8009484 <LoRaMacProcess+0x928>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d7c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008d80:	f023 0302 	bic.w	r3, r3, #2
 8008d84:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008d88:	f8d4 2340 	ldr.w	r2, [r4, #832]	; 0x340
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	d141      	bne.n	8008e14 <LoRaMacProcess+0x2b8>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008d90:	f894 548d 	ldrb.w	r5, [r4, #1165]	; 0x48d
 8008d94:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8008d98:	bf1e      	ittt	ne
 8008d9a:	462b      	movne	r3, r5
 8008d9c:	f362 0300 	bfine	r3, r2, #0, #1
 8008da0:	f884 348d 	strbne.w	r3, [r4, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008da4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008da8:	075f      	lsls	r7, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8008daa:	bf44      	itt	mi
 8008dac:	f36f 0382 	bfcmi	r3, #2, #1
 8008db0:	f884 348d 	strbmi.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        if( reqEvents.Bits.McpsReq == 1 )
 8008dba:	b121      	cbz	r1, 8008dc6 <LoRaMacProcess+0x26a>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8008dbc:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8008dc0:	4829      	ldr	r0, [pc, #164]	; (8008e68 <LoRaMacProcess+0x30c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8008dc6:	076e      	lsls	r6, r5, #29
 8008dc8:	d50b      	bpl.n	8008de2 <LoRaMacProcess+0x286>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8008dca:	4828      	ldr	r0, [pc, #160]	; (8008e6c <LoRaMacProcess+0x310>)
 8008dcc:	f001 fc96 	bl	800a6fc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8008dd0:	f001 fcbe 	bl	800a750 <LoRaMacConfirmQueueGetCnt>
 8008dd4:	b128      	cbz	r0, 8008de2 <LoRaMacProcess+0x286>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008dd6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008dda:	f043 0304 	orr.w	r3, r3, #4
 8008dde:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        LoRaMacClassBResumeBeaconing( );
 8008de2:	f00a fcc8 	bl	8013776 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008de6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008dea:	f36f 1345 	bfc	r3, #5, #1
 8008dee:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008df2:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008df6:	b96b      	cbnz	r3, 8008e14 <LoRaMacProcess+0x2b8>
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008df8:	a81c      	add	r0, sp, #112	; 0x70
        bool isStickyMacCommandPending = false;
 8008dfa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008dfe:	f001 fbb1 	bl	800a564 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008e02:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8008e06:	b12b      	cbz	r3, 8008e14 <LoRaMacProcess+0x2b8>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008e08:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008e0c:	f043 0310 	orr.w	r3, r3, #16
 8008e10:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 8008e14:	2301      	movs	r3, #1
 8008e16:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8008e1a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e22:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008e26:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008e2a:	071d      	lsls	r5, r3, #28
 8008e2c:	d522      	bpl.n	8008e74 <LoRaMacProcess+0x318>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008e2e:	f36f 03c3 	bfc	r3, #3, #1
 8008e32:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8008e36:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8008e3a:	480d      	ldr	r0, [pc, #52]	; (8008e70 <LoRaMacProcess+0x314>)
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	4798      	blx	r3
 8008e40:	e018      	b.n	8008e74 <LoRaMacProcess+0x318>
 8008e42:	bf00      	nop
 8008e44:	200011dc 	.word	0x200011dc
 8008e48:	200011e0 	.word	0x200011e0
 8008e4c:	200016f8 	.word	0x200016f8
 8008e50:	08018558 	.word	0x08018558
 8008e54:	20001568 	.word	0x20001568
 8008e58:	20001580 	.word	0x20001580
 8008e5c:	200015e0 	.word	0x200015e0
 8008e60:	20001e0c 	.word	0x20001e0c
 8008e64:	20001dfc 	.word	0x20001dfc
 8008e68:	20001624 	.word	0x20001624
 8008e6c:	20001638 	.word	0x20001638
 8008e70:	2000164c 	.word	0x2000164c
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8008e74:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008e78:	06d8      	lsls	r0, r3, #27
 8008e7a:	d50d      	bpl.n	8008e98 <LoRaMacProcess+0x33c>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008e7c:	2306      	movs	r3, #6
 8008e7e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8008e82:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8008e86:	a81c      	add	r0, sp, #112	; 0x70
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8008e8c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008e90:	f36f 1304 	bfc	r3, #4, #1
 8008e94:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008e98:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008e9c:	0799      	lsls	r1, r3, #30
 8008e9e:	d508      	bpl.n	8008eb2 <LoRaMacProcess+0x356>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008ea0:	f36f 0341 	bfc	r3, #1, #1
 8008ea4:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8008ea8:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8008eac:	4893      	ldr	r0, [pc, #588]	; (80090fc <LoRaMacProcess+0x5a0>)
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8008eb2:	f894 348c 	ldrb.w	r3, [r4, #1164]	; 0x48c
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d101      	bne.n	8008ebe <LoRaMacProcess+0x362>
        OpenContinuousRxCWindow( );
 8008eba:	f7fe fe07 	bl	8007acc <OpenContinuousRxCWindow>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8008ebe:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008ec2:	065a      	lsls	r2, r3, #25
 8008ec4:	f140 8321 	bpl.w	800950a <LoRaMacProcess+0x9ae>
    if( MacCtx.MacState != LORAMAC_IDLE )
 8008ec8:	f8d4 5340 	ldr.w	r5, [r4, #832]	; 0x340
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8008ecc:	f36f 1386 	bfc	r3, #6, #1
 8008ed0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState != LORAMAC_IDLE )
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	f040 8318 	bne.w	800950a <LoRaMacProcess+0x9ae>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8008eda:	4e89      	ldr	r6, [pc, #548]	; (8009100 <LoRaMacProcess+0x5a4>)
 8008edc:	2130      	movs	r1, #48	; 0x30
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f7fd fa64 	bl	80063ac <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8008ee4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008ee6:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
 8008ee8:	bf18      	it	ne
 8008eea:	6330      	strne	r0, [r6, #48]	; 0x30
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008eec:	f04f 0114 	mov.w	r1, #20
 8008ef0:	4884      	ldr	r0, [pc, #528]	; (8009104 <LoRaMacProcess+0x5a8>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008ef2:	bf18      	it	ne
 8008ef4:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008ef6:	f7fd fa59 	bl	80063ac <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8008efa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8008efc:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
 8008efe:	bf18      	it	ne
 8008f00:	64b0      	strne	r0, [r6, #72]	; 0x48
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8008f02:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8008f06:	4880      	ldr	r0, [pc, #512]	; (8009108 <LoRaMacProcess+0x5ac>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008f08:	bf18      	it	ne
 8008f0a:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8008f0e:	f7fd fa4d 	bl	80063ac <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8008f12:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 8008f16:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
 8008f18:	bf18      	it	ne
 8008f1a:	f8c6 01a0 	strne.w	r0, [r6, #416]	; 0x1a0
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8008f1e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8008f22:	487a      	ldr	r0, [pc, #488]	; (800910c <LoRaMacProcess+0x5b0>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8008f24:	bf18      	it	ne
 8008f26:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8008f2a:	f7fd fa3f 	bl	80063ac <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8008f2e:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8008f32:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
 8008f34:	bf18      	it	ne
 8008f36:	f8c6 0340 	strne.w	r0, [r6, #832]	; 0x340
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8008f3a:	f04f 0110 	mov.w	r1, #16
 8008f3e:	4874      	ldr	r0, [pc, #464]	; (8009110 <LoRaMacProcess+0x5b4>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8008f40:	bf18      	it	ne
 8008f42:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8008f46:	f7fd fa31 	bl	80063ac <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8008f4a:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
 8008f4e:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
 8008f50:	bf18      	it	ne
 8008f52:	f8c6 0354 	strne.w	r0, [r6, #852]	; 0x354
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8008f56:	f44f 715e 	mov.w	r1, #888	; 0x378
 8008f5a:	486e      	ldr	r0, [pc, #440]	; (8009114 <LoRaMacProcess+0x5b8>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8008f5c:	bf18      	it	ne
 8008f5e:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8008f62:	f7fd fa23 	bl	80063ac <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8008f66:	f8d6 36d0 	ldr.w	r3, [r6, #1744]	; 0x6d0
 8008f6a:	4298      	cmp	r0, r3
        nvmData->RegionGroup2.Crc32 = crc;
 8008f6c:	bf18      	it	ne
 8008f6e:	f8c6 06d0 	strne.w	r0, [r6, #1744]	; 0x6d0
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8008f72:	f04f 0114 	mov.w	r1, #20
 8008f76:	4868      	ldr	r0, [pc, #416]	; (8009118 <LoRaMacProcess+0x5bc>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8008f78:	bf18      	it	ne
 8008f7a:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8008f7e:	f7fd fa15 	bl	80063ac <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8008f82:	f8d6 36e8 	ldr.w	r3, [r6, #1768]	; 0x6e8
 8008f86:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008f88:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        nvmData->ClassB.Crc32 = crc;
 8008f8c:	bf1c      	itt	ne
 8008f8e:	f8c6 06e8 	strne.w	r0, [r6, #1768]	; 0x6e8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8008f92:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 82b7 	beq.w	800950a <LoRaMacProcess+0x9ae>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008f9c:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 82b3 	beq.w	800950a <LoRaMacProcess+0x9ae>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008fa4:	4628      	mov	r0, r5
}
 8008fa6:	b029      	add	sp, #164	; 0xa4
 8008fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008fac:	4718      	bx	r3
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008fae:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
 8008fb2:	e61a      	b.n	8008bea <LoRaMacProcess+0x8e>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008fb4:	f895 2184 	ldrb.w	r2, [r5, #388]	; 0x184
 8008fb8:	2a01      	cmp	r2, #1
 8008fba:	d10c      	bne.n	8008fd6 <LoRaMacProcess+0x47a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008fbc:	f00a fbd3 	bl	8013766 <LoRaMacClassBIsPingExpected>
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	b1c0      	cbz	r0, 8008ff6 <LoRaMacProcess+0x49a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008fc4:	4658      	mov	r0, fp
 8008fc6:	f00a fbc3 	bl	8013750 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008fca:	4658      	mov	r0, fp
 8008fcc:	f00a fbc5 	bl	801375a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008fd0:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008fd2:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 8008fd6:	783b      	ldrb	r3, [r7, #0]
 8008fd8:	9304      	str	r3, [sp, #16]
    switch( macHdr.Bits.MType )
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	2b06      	cmp	r3, #6
 8008fe0:	f200 821d 	bhi.w	800941e <LoRaMacProcess+0x8c2>
 8008fe4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fe8:	021b0013 	.word	0x021b0013
 8008fec:	021b009d 	.word	0x021b009d
 8008ff0:	021b009a 	.word	0x021b009a
 8008ff4:	020c      	.short	0x020c
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008ff6:	f00a fbb8 	bl	801376a <LoRaMacClassBIsMulticastExpected>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d0eb      	beq.n	8008fd6 <LoRaMacProcess+0x47a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ffe:	4650      	mov	r0, sl
 8009000:	f00a fba7 	bl	8013752 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009004:	4650      	mov	r0, sl
 8009006:	f00a fba9 	bl	801375c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800900a:	2305      	movs	r3, #5
 800900c:	e7e1      	b.n	8008fd2 <LoRaMacProcess+0x476>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800900e:	2e10      	cmp	r6, #16
 8009010:	d803      	bhi.n	800901a <LoRaMacProcess+0x4be>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 8009018:	e12e      	b.n	8009278 <LoRaMacProcess+0x71c>
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800901a:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
            macMsgJoinAccept.Buffer = payload;
 800901e:	9712      	str	r7, [sp, #72]	; 0x48
            macMsgJoinAccept.BufSize = size;
 8009020:	b2f6      	uxtb	r6, r6
 8009022:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f3      	bne.n	8009012 <LoRaMacProcess+0x4b6>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800902a:	f7fe fc43 	bl	80078b4 <SecureElementGetJoinEui>
 800902e:	aa12      	add	r2, sp, #72	; 0x48
 8009030:	4601      	mov	r1, r0
 8009032:	20ff      	movs	r0, #255	; 0xff
 8009034:	f001 fdb2 	bl	800ab9c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8009038:	2800      	cmp	r0, #0
 800903a:	d157      	bne.n	80090ec <LoRaMacProcess+0x590>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800903c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009040:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009044:	041b      	lsls	r3, r3, #16
 8009046:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800904a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800904e:	4313      	orrs	r3, r2
 8009050:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8009054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009056:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800905a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800905e:	f3c3 1202 	ubfx	r2, r3, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009062:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009066:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800906a:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800906e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009072:	f885 206d 	strb.w	r2, [r5, #109]	; 0x6d
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8009076:	b3bb      	cbz	r3, 80090e8 <LoRaMacProcess+0x58c>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8009078:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800907a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800907c:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8009080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009084:	4353      	muls	r3, r2
 8009086:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009088:	4413      	add	r3, r2
 800908a:	662b      	str	r3, [r5, #96]	; 0x60
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800908c:	f10d 035a 	add.w	r3, sp, #90	; 0x5a
 8009090:	9310      	str	r3, [sp, #64]	; 0x40
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8009092:	2700      	movs	r7, #0
                applyCFList.JoinChannel = MacCtx.Channel;
 8009094:	f894 341b 	ldrb.w	r3, [r4, #1051]	; 0x41b
 8009098:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
                applyCFList.Size = size - 17;
 800909c:	3e11      	subs	r6, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800909e:	a90f      	add	r1, sp, #60	; 0x3c
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80090a0:	f885 719a 	strb.w	r7, [r5, #410]	; 0x19a
                applyCFList.Size = size - 17;
 80090a4:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80090a8:	f00a fdbf 	bl	8013c2a <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80090ac:	2302      	movs	r3, #2
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80090ae:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80090b0:	f885 319c 	strb.w	r3, [r5, #412]	; 0x19c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80090b4:	f001 fb16 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 80090b8:	b118      	cbz	r0, 80090c2 <LoRaMacProcess+0x566>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80090ba:	2101      	movs	r1, #1
 80090bc:	4638      	mov	r0, r7
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80090be:	f001 fad5 	bl	800a66c <LoRaMacConfirmQueueSetStatus>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80090c2:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	f200 81b7 	bhi.w	800943a <LoRaMacProcess+0x8de>
        if( MacCtx.NodeAckRequested == true )
 80090cc:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f040 81aa 	bne.w	800942a <LoRaMacProcess+0x8ce>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80090d6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80090da:	f043 0320 	orr.w	r3, r3, #32
 80090de:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
 80090e2:	f7fe fc39 	bl	8007958 <UpdateRxSlotIdleState>
 80090e6:	e5fa      	b.n	8008cde <LoRaMacProcess+0x182>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e7c5      	b.n	8009078 <LoRaMacProcess+0x51c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80090ec:	2001      	movs	r0, #1
 80090ee:	f001 faf9 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d0e5      	beq.n	80090c2 <LoRaMacProcess+0x566>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80090f6:	2101      	movs	r1, #1
 80090f8:	2007      	movs	r0, #7
 80090fa:	e7e0      	b.n	80090be <LoRaMacProcess+0x562>
 80090fc:	20001600 	.word	0x20001600
 8009100:	200016f8 	.word	0x200016f8
 8009104:	2000172c 	.word	0x2000172c
 8009108:	20001744 	.word	0x20001744
 800910c:	2000189c 	.word	0x2000189c
 8009110:	20001a3c 	.word	0x20001a3c
 8009114:	20001a50 	.word	0x20001a50
 8009118:	20001dcc 	.word	0x20001dcc
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800911c:	2301      	movs	r3, #1
 800911e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009122:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
 8009126:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800912a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
 800912e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009132:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009136:	230d      	movs	r3, #13
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009138:	a90b      	add	r1, sp, #44	; 0x2c
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800913a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800913e:	f00a fd55 	bl	8013bec <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009142:	f1a6 030d 	sub.w	r3, r6, #13
 8009146:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009148:	9009      	str	r0, [sp, #36]	; 0x24
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800914a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800914e:	b200      	sxth	r0, r0
 8009150:	4283      	cmp	r3, r0
 8009152:	f73f af5e 	bgt.w	8009012 <LoRaMacProcess+0x4b6>
 8009156:	2e0b      	cmp	r6, #11
 8009158:	f67f af5b 	bls.w	8009012 <LoRaMacProcess+0x4b6>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800915c:	4bba      	ldr	r3, [pc, #744]	; (8009448 <LoRaMacProcess+0x8ec>)
 800915e:	9325      	str	r3, [sp, #148]	; 0x94
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009160:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009164:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009166:	4658      	mov	r0, fp
            macMsgData.Buffer = payload;
 8009168:	971c      	str	r7, [sp, #112]	; 0x70
            macMsgData.BufSize = size;
 800916a:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800916e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009172:	f00a fc3b 	bl	80139ec <LoRaMacParserData>
 8009176:	4607      	mov	r7, r0
 8009178:	2800      	cmp	r0, #0
 800917a:	f47f af4a 	bne.w	8009012 <LoRaMacProcess+0x4b6>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800917e:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8009182:	2b01      	cmp	r3, #1
 8009184:	d114      	bne.n	80091b0 <LoRaMacProcess+0x654>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8009186:	f00a faee 	bl	8013766 <LoRaMacClassBIsPingExpected>
 800918a:	4606      	mov	r6, r0
 800918c:	2800      	cmp	r0, #0
 800918e:	d043      	beq.n	8009218 <LoRaMacProcess+0x6bc>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009190:	4638      	mov	r0, r7
 8009192:	f00a fadd 	bl	8013750 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8009196:	4638      	mov	r0, r7
 8009198:	f00a fadf 	bl	801375a <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800919c:	2304      	movs	r3, #4
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800919e:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80091a2:	981e      	ldr	r0, [sp, #120]	; 0x78
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80091a4:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80091a8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80091ac:	f00a faf4 	bl	8013798 <LoRaMacClassBSetFPendingBit>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80091b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80091b2:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80091b6:	a90f      	add	r1, sp, #60	; 0x3c
 80091b8:	4658      	mov	r0, fp
 80091ba:	f00a fa39 	bl	8013630 <DetermineFrameType>
 80091be:	4607      	mov	r7, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	f47f af26 	bne.w	8009012 <LoRaMacProcess+0x4b6>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80091c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091c8:	4ba0      	ldr	r3, [pc, #640]	; (800944c <LoRaMacProcess+0x8f0>)
            downLinkCounter = 0;
 80091ca:	900a      	str	r0, [sp, #40]	; 0x28
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80091cc:	4682      	mov	sl, r0
 80091ce:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80091d2:	428a      	cmp	r2, r1
 80091d4:	d12c      	bne.n	8009230 <LoRaMacProcess+0x6d4>
 80091d6:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
 80091da:	b348      	cbz	r0, 8009230 <LoRaMacProcess+0x6d4>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80091dc:	232c      	movs	r3, #44	; 0x2c
 80091de:	fb03 530a 	mla	r3, r3, sl, r5
 80091e2:	f893 a0d7 	ldrb.w	sl, [r3, #215]	; 0xd7
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80091e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	930a      	str	r3, [sp, #40]	; 0x28
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80091ee:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d102      	bne.n	80091fc <LoRaMacProcess+0x6a0>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80091f6:	2303      	movs	r3, #3
 80091f8:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80091fc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8009200:	2b03      	cmp	r3, #3
 8009202:	f47f af06 	bne.w	8009012 <LoRaMacProcess+0x4b6>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009206:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 800920a:	f013 0f60 	tst.w	r3, #96	; 0x60
 800920e:	f47f af00 	bne.w	8009012 <LoRaMacProcess+0x4b6>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009212:	9205      	str	r2, [sp, #20]
 8009214:	2701      	movs	r7, #1
 8009216:	e012      	b.n	800923e <LoRaMacProcess+0x6e2>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009218:	f00a faa7 	bl	801376a <LoRaMacClassBIsMulticastExpected>
 800921c:	2800      	cmp	r0, #0
 800921e:	d0c7      	beq.n	80091b0 <LoRaMacProcess+0x654>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009220:	4630      	mov	r0, r6
 8009222:	f00a fa96 	bl	8013752 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009226:	4630      	mov	r0, r6
 8009228:	f00a fa98 	bl	801375c <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800922c:	2305      	movs	r3, #5
 800922e:	e7b6      	b.n	800919e <LoRaMacProcess+0x642>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009230:	f10a 0a01 	add.w	sl, sl, #1
 8009234:	f1ba 0f04 	cmp.w	sl, #4
 8009238:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800923c:	d1c7      	bne.n	80091ce <LoRaMacProcess+0x672>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800923e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8009242:	f895 619a 	ldrb.w	r6, [r5, #410]	; 0x19a
    switch( addrID )
 8009246:	f1ba 0f04 	cmp.w	sl, #4
 800924a:	d829      	bhi.n	80092a0 <LoRaMacProcess+0x744>
 800924c:	e8df f00a 	tbb	[pc, sl]
 8009250:	201e0322 	.word	0x201e0322
 8009254:	17          	.byte	0x17
 8009255:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_1;
 8009256:	2605      	movs	r6, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8009258:	f8bd 107e 	ldrh.w	r1, [sp, #126]	; 0x7e
 800925c:	aa0a      	add	r2, sp, #40	; 0x28
 800925e:	4630      	mov	r0, r6
 8009260:	f00a fb38 	bl	80138d4 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009264:	b1f0      	cbz	r0, 80092a4 <LoRaMacProcess+0x748>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009266:	2807      	cmp	r0, #7
 8009268:	bf0c      	ite	eq
 800926a:	2308      	moveq	r3, #8
 800926c:	2301      	movne	r3, #1
 800926e:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009274:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 8009278:	f7fe fbaa 	bl	80079d0 <PrepareRxDoneAbort>
                return;
 800927c:	e52f      	b.n	8008cde <LoRaMacProcess+0x182>
            if( lrWanVersion.Fields.Minor == 1 )
 800927e:	2e01      	cmp	r6, #1
 8009280:	d10a      	bne.n	8009298 <LoRaMacProcess+0x73c>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009282:	b15b      	cbz	r3, 800929c <LoRaMacProcess+0x740>
                    *fCntID = A_FCNT_DOWN;
 8009284:	2b03      	cmp	r3, #3
 8009286:	bf08      	it	eq
 8009288:	2602      	moveq	r6, #2
 800928a:	e7e5      	b.n	8009258 <LoRaMacProcess+0x6fc>
            *fCntID = MC_FCNT_DOWN_2;
 800928c:	2606      	movs	r6, #6
            break;
 800928e:	e7e3      	b.n	8009258 <LoRaMacProcess+0x6fc>
            *fCntID = MC_FCNT_DOWN_3;
 8009290:	2607      	movs	r6, #7
            break;
 8009292:	e7e1      	b.n	8009258 <LoRaMacProcess+0x6fc>
    switch( addrID )
 8009294:	2604      	movs	r6, #4
 8009296:	e7df      	b.n	8009258 <LoRaMacProcess+0x6fc>
                *fCntID = FCNT_DOWN;
 8009298:	2603      	movs	r6, #3
 800929a:	e7dd      	b.n	8009258 <LoRaMacProcess+0x6fc>
                    *fCntID = A_FCNT_DOWN;
 800929c:	2602      	movs	r6, #2
 800929e:	e7db      	b.n	8009258 <LoRaMacProcess+0x6fc>
    switch( addrID )
 80092a0:	2301      	movs	r3, #1
 80092a2:	e7e4      	b.n	800926e <LoRaMacProcess+0x712>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80092a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a6:	9905      	ldr	r1, [sp, #20]
 80092a8:	f8cd b000 	str.w	fp, [sp]
 80092ac:	4632      	mov	r2, r6
 80092ae:	4650      	mov	r0, sl
 80092b0:	f001 fbd2 	bl	800aa58 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80092b4:	b120      	cbz	r0, 80092c0 <LoRaMacProcess+0x764>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80092b6:	2802      	cmp	r0, #2
 80092b8:	bf0c      	ite	eq
 80092ba:	230a      	moveq	r3, #10
 80092bc:	230b      	movne	r3, #11
 80092be:	e6a9      	b.n	8009014 <LoRaMacProcess+0x4b8>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80092c0:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80092c4:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80092c8:	f3c3 1200 	ubfx	r2, r3, #4, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80092cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80092d0:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80092d4:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80092d8:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80092dc:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80092e0:	2b01      	cmp	r3, #1
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80092e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092e4:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
                Nvm.MacGroup2.DownlinkReceived = true;
 80092e8:	bf9e      	ittt	ls
 80092ea:	2201      	movls	r2, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
 80092ec:	6368      	strls	r0, [r5, #52]	; 0x34
                Nvm.MacGroup2.DownlinkReceived = true;
 80092ee:	f885 218a 	strbls.w	r2, [r5, #394]	; 0x18a
            if( multicast == 1 )
 80092f2:	2f01      	cmp	r7, #1
            MacCtx.McpsIndication.Multicast = multicast;
 80092f4:	f884 7422 	strb.w	r7, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80092f8:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80092fc:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009300:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            if( multicast == 1 )
 8009304:	d103      	bne.n	800930e <LoRaMacProcess+0x7b2>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009306:	2202      	movs	r2, #2
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009308:	f884 2420 	strb.w	r2, [r4, #1056]	; 0x420
 800930c:	e018      	b.n	8009340 <LoRaMacProcess+0x7e4>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800930e:	9a04      	ldr	r2, [sp, #16]
 8009310:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 8009314:	2aa0      	cmp	r2, #160	; 0xa0
 8009316:	d127      	bne.n	8009368 <LoRaMacProcess+0x80c>
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009318:	f895 119a 	ldrb.w	r1, [r5, #410]	; 0x19a
                    Nvm.MacGroup1.SrvAckRequested = true;
 800931c:	2201      	movs	r2, #1
 800931e:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009322:	b909      	cbnz	r1, 8009328 <LoRaMacProcess+0x7cc>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009324:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009326:	6429      	str	r1, [r5, #64]	; 0x40
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8009328:	2b01      	cmp	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800932a:	f884 2420 	strb.w	r2, [r4, #1056]	; 0x420
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800932e:	d907      	bls.n	8009340 <LoRaMacProcess+0x7e4>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
 8009330:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009334:	f8c4 2440 	str.w	r2, [r4, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8009338:	f8d9 2000 	ldr.w	r2, [r9]
 800933c:	f8c4 2494 	str.w	r2, [r4, #1172]	; 0x494
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009340:	2b01      	cmp	r3, #1
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009342:	f894 1444 	ldrb.w	r1, [r4, #1092]	; 0x444
 8009346:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800934a:	d805      	bhi.n	8009358 <LoRaMacProcess+0x7fc>
        if( request == MCPS_CONFIRMED )
 800934c:	2901      	cmp	r1, #1
 800934e:	d101      	bne.n	8009354 <LoRaMacProcess+0x7f8>
            if( fCtrl.Bits.Ack == 1 )
 8009350:	0696      	lsls	r6, r2, #26
 8009352:	d501      	bpl.n	8009358 <LoRaMacProcess+0x7fc>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009354:	f001 f8b0 	bl	800a4b8 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8009358:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800935c:	2b03      	cmp	r3, #3
 800935e:	d849      	bhi.n	80093f4 <LoRaMacProcess+0x898>
 8009360:	e8df f003 	tbb	[pc, r3]
 8009364:	10411f06 	.word	0x10411f06
                    Nvm.MacGroup1.SrvAckRequested = false;
 8009368:	2200      	movs	r2, #0
 800936a:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
 800936e:	e7cb      	b.n	8009308 <LoRaMacProcess+0x7ac>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8009370:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8009374:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8009378:	4642      	mov	r2, r8
 800937a:	f001 010f 	and.w	r1, r1, #15
 800937e:	a820      	add	r0, sp, #128	; 0x80
 8009380:	f7fe fd90 	bl	8007ea4 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009384:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8009388:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800938c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800938e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009392:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8009396:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800939a:	2301      	movs	r3, #1
 800939c:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
                    break;
 80093a0:	e00d      	b.n	80093be <LoRaMacProcess+0x862>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80093a2:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80093a6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80093aa:	4642      	mov	r2, r8
 80093ac:	f001 010f 	and.w	r1, r1, #15
 80093b0:	a820      	add	r0, sp, #128	; 0x80
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80093b2:	f7fe fd77 	bl	8007ea4 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80093b6:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 80093ba:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80093be:	f89d 2090 	ldrb.w	r2, [sp, #144]	; 0x90
 80093c2:	2ae0      	cmp	r2, #224	; 0xe0
 80093c4:	d108      	bne.n	80093d8 <LoRaMacProcess+0x87c>
 80093c6:	f895 318b 	ldrb.w	r3, [r5, #395]	; 0x18b
 80093ca:	b92b      	cbnz	r3, 80093d8 <LoRaMacProcess+0x87c>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 80093cc:	f884 2423 	strb.w	r2, [r4, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 80093d0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 80093d4:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80093d8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80093dc:	f043 0302 	orr.w	r3, r3, #2
 80093e0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            break;
 80093e4:	e66d      	b.n	80090c2 <LoRaMacProcess+0x566>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80093e6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80093ea:	f89d 1098 	ldrb.w	r1, [sp, #152]	; 0x98
 80093ee:	9825      	ldr	r0, [sp, #148]	; 0x94
 80093f0:	4642      	mov	r2, r8
 80093f2:	e7de      	b.n	80093b2 <LoRaMacProcess+0x856>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 80093fa:	f7fe fae9 	bl	80079d0 <PrepareRxDoneAbort>
                    break;
 80093fe:	e7de      	b.n	80093be <LoRaMacProcess+0x862>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009400:	4d11      	ldr	r5, [pc, #68]	; (8009448 <LoRaMacProcess+0x8ec>)
 8009402:	3e01      	subs	r6, #1
 8009404:	b2b2      	uxth	r2, r6
 8009406:	1c79      	adds	r1, r7, #1
 8009408:	4628      	mov	r0, r5
 800940a:	f009 fad9 	bl	80129c0 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800940e:	2303      	movs	r3, #3
 8009410:	f8a4 3420 	strh.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009414:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009418:	f884 642c 	strb.w	r6, [r4, #1068]	; 0x42c
 800941c:	e7dc      	b.n	80093d8 <LoRaMacProcess+0x87c>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8009424:	f7fe fad4 	bl	80079d0 <PrepareRxDoneAbort>
            break;
 8009428:	e64b      	b.n	80090c2 <LoRaMacProcess+0x566>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800942a:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 800942e:	2b00      	cmp	r3, #0
 8009430:	f43f ae51 	beq.w	80090d6 <LoRaMacProcess+0x57a>
                OnRetransmitTimeoutTimerEvent( NULL );
 8009434:	2000      	movs	r0, #0
 8009436:	f7fe fab3 	bl	80079a0 <OnRetransmitTimeoutTimerEvent>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 800943a:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 800943e:	2b02      	cmp	r3, #2
 8009440:	f43f ae4f 	beq.w	80090e2 <LoRaMacProcess+0x586>
 8009444:	e647      	b.n	80090d6 <LoRaMacProcess+0x57a>
 8009446:	bf00      	nop
 8009448:	20001418 	.word	0x20001418
 800944c:	200016f8 	.word	0x200016f8
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009450:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8009454:	0758      	lsls	r0, r3, #29
 8009456:	d515      	bpl.n	8009484 <LoRaMacProcess+0x928>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009458:	2001      	movs	r0, #1
 800945a:	f001 f943 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 800945e:	b160      	cbz	r0, 800947a <LoRaMacProcess+0x91e>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009460:	2001      	movs	r0, #1
 8009462:	f001 f915 	bl	800a690 <LoRaMacConfirmQueueGetStatus>
 8009466:	b908      	cbnz	r0, 800946c <LoRaMacProcess+0x910>
                MacCtx.ChannelsNbTransCounter = 0;
 8009468:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800946c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009470:	f023 0302 	bic.w	r3, r3, #2
 8009474:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
 8009478:	e004      	b.n	8009484 <LoRaMacProcess+0x928>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800947a:	2005      	movs	r0, #5
 800947c:	f001 f932 	bl	800a6e4 <LoRaMacConfirmQueueIsCmdActive>
 8009480:	2800      	cmp	r0, #0
 8009482:	d1f3      	bne.n	800946c <LoRaMacProcess+0x910>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009484:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8009488:	07d9      	lsls	r1, r3, #31
 800948a:	f57f ac7d 	bpl.w	8008d88 <LoRaMacProcess+0x22c>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800948e:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
 8009492:	b10a      	cbz	r2, 8009498 <LoRaMacProcess+0x93c>
 8009494:	2a03      	cmp	r2, #3
 8009496:	d118      	bne.n	80094ca <LoRaMacProcess+0x96e>
    if( counter >= limit )
 8009498:	4a1d      	ldr	r2, [pc, #116]	; (8009510 <LoRaMacProcess+0x9b4>)
 800949a:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
 800949e:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 80094a2:	4291      	cmp	r1, r2
 80094a4:	d205      	bcs.n	80094b2 <LoRaMacProcess+0x956>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80094a6:	079a      	lsls	r2, r3, #30
 80094a8:	d523      	bpl.n	80094f2 <LoRaMacProcess+0x996>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80094aa:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d81f      	bhi.n	80094f2 <LoRaMacProcess+0x996>
            TimerStop( &MacCtx.TxDelayedTimer );
 80094b2:	4818      	ldr	r0, [pc, #96]	; (8009514 <LoRaMacProcess+0x9b8>)
 80094b4:	f7fd f814 	bl	80064e0 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80094b8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80094bc:	f023 0320 	bic.w	r3, r3, #32
 80094c0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80094c4:	f7fe fff2 	bl	80084ac <StopRetransmission.isra.0>
 80094c8:	e45e      	b.n	8008d88 <LoRaMacProcess+0x22c>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80094ca:	2a01      	cmp	r2, #1
 80094cc:	d111      	bne.n	80094f2 <LoRaMacProcess+0x996>
            if( MacCtx.RetransmitTimeoutRetry == true )
 80094ce:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	f43f ac58 	beq.w	8008d88 <LoRaMacProcess+0x22c>
    if( counter >= limit )
 80094d8:	4a0d      	ldr	r2, [pc, #52]	; (8009510 <LoRaMacProcess+0x9b4>)
 80094da:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
 80094de:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 80094e2:	4291      	cmp	r1, r2
 80094e4:	d2e5      	bcs.n	80094b2 <LoRaMacProcess+0x956>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80094e6:	079b      	lsls	r3, r3, #30
 80094e8:	d503      	bpl.n	80094f2 <LoRaMacProcess+0x996>
        if( MacCtx.McpsConfirm.AckReceived == true )
 80094ea:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1df      	bne.n	80094b2 <LoRaMacProcess+0x956>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80094f2:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 80094f6:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 80094f8:	f36f 1345 	bfc	r3, #5, #1
 80094fc:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 8009500:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8009504:	f7ff fa34 	bl	8008970 <OnTxDelayedTimerEvent>
 8009508:	e43e      	b.n	8008d88 <LoRaMacProcess+0x22c>
}
 800950a:	b029      	add	sp, #164	; 0xa4
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	200016f8 	.word	0x200016f8
 8009514:	20001550 	.word	0x20001550

08009518 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	4689      	mov	r9, r1
 800951e:	b08b      	sub	sp, #44	; 0x2c
 8009520:	4690      	mov	r8, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8009522:	4606      	mov	r6, r0
 8009524:	2800      	cmp	r0, #0
 8009526:	f000 817b 	beq.w	8009820 <LoRaMacInitialization+0x308>
 800952a:	2900      	cmp	r1, #0
 800952c:	f000 8178 	beq.w	8009820 <LoRaMacInitialization+0x308>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009530:	6803      	ldr	r3, [r0, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 8174 	beq.w	8009820 <LoRaMacInitialization+0x308>
 8009538:	6843      	ldr	r3, [r0, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 8170 	beq.w	8009820 <LoRaMacInitialization+0x308>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009540:	6883      	ldr	r3, [r0, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 816c 	beq.w	8009820 <LoRaMacInitialization+0x308>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009548:	68c3      	ldr	r3, [r0, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 8168 	beq.w	8009820 <LoRaMacInitialization+0x308>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009550:	4610      	mov	r0, r2
 8009552:	f00a fb46 	bl	8013be2 <RegionIsActive>
 8009556:	2800      	cmp	r0, #0
 8009558:	f000 8164 	beq.w	8009824 <LoRaMacInitialization+0x30c>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800955c:	4cb3      	ldr	r4, [pc, #716]	; (800982c <LoRaMacInitialization+0x314>)
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800955e:	4db4      	ldr	r5, [pc, #720]	; (8009830 <LoRaMacInitialization+0x318>)
    LoRaMacConfirmQueueInit( primitives );
 8009560:	4630      	mov	r0, r6
 8009562:	f001 f839 	bl	800a5d8 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8009566:	f240 62ec 	movw	r2, #1772	; 0x6ec
 800956a:	2100      	movs	r1, #0
 800956c:	4620      	mov	r0, r4
 800956e:	f009 fa3b 	bl	80129e8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009572:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 8009576:	2100      	movs	r1, #0
 8009578:	4628      	mov	r0, r5
 800957a:	f009 fa35 	bl	80129e8 <memset1>
    // Set non zero variables to its default value
    Nvm.MacGroup2.Region = region;
    Nvm.MacGroup2.DeviceClass = CLASS_A;

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800957e:	4bad      	ldr	r3, [pc, #692]	; (8009834 <LoRaMacInitialization+0x31c>)
 8009580:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009584:	f504 7351 	add.w	r3, r4, #836	; 0x344
 8009588:	9306      	str	r3, [sp, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800958a:	f504 7356 	add.w	r3, r4, #856	; 0x358
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800958e:	2700      	movs	r7, #0
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009590:	4640      	mov	r0, r8
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009592:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009594:	a906      	add	r1, sp, #24
    params.Bands = &RegionBands;
 8009596:	4ba8      	ldr	r3, [pc, #672]	; (8009838 <LoRaMacInitialization+0x320>)
    Nvm.MacGroup2.Region = region;
 8009598:	f884 804c 	strb.w	r8, [r4, #76]	; 0x4c
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800959c:	f884 7184 	strb.w	r7, [r4, #388]	; 0x184
    params.Type = INIT_TYPE_DEFAULTS;
 80095a0:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    params.Bands = &RegionBands;
 80095a4:	9308      	str	r3, [sp, #32]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80095a6:	f00a fb31 	bl	8013c0c <RegionInitDefaults>

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80095aa:	230e      	movs	r3, #14
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095ac:	a904      	add	r1, sp, #16
 80095ae:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80095b2:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095b6:	f00a fb19 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80095ba:	1bc0      	subs	r0, r0, r7
 80095bc:	bf18      	it	ne
 80095be:	2001      	movne	r0, #1

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80095c0:	f04f 0b0a 	mov.w	fp, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80095c4:	f884 0188 	strb.w	r0, [r4, #392]	; 0x188
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095c8:	a904      	add	r1, sp, #16
 80095ca:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_TX_POWER;
 80095ce:	f88d b010 	strb.w	fp, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095d2:	f00a fb0b 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 80095d6:	f04f 0a06 	mov.w	sl, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80095da:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095de:	a904      	add	r1, sp, #16
 80095e0:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_TX_DR;
 80095e4:	f88d a010 	strb.w	sl, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095e8:	f00a fb00 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80095ec:	230f      	movs	r3, #15
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80095ee:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095f2:	a904      	add	r1, sp, #16
 80095f4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80095f8:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80095fc:	f00a faf6 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009600:	2310      	movs	r3, #16
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009602:	eb0d 0103 	add.w	r1, sp, r3
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009606:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800960a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800960e:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009612:	f00a faeb 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009616:	2311      	movs	r3, #17
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009618:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800961c:	a904      	add	r1, sp, #16
 800961e:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009622:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009626:	f00a fae1 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800962a:	2312      	movs	r3, #18
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800962c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009630:	a904      	add	r1, sp, #16
 8009632:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009636:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800963a:	f00a fad7 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800963e:	2313      	movs	r3, #19
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009640:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009644:	a904      	add	r1, sp, #16
 8009646:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800964a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800964e:	f00a facd 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009652:	2315      	movs	r3, #21
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009654:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009658:	a904      	add	r1, sp, #16
 800965a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800965e:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009662:	f00a fac3 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009666:	2316      	movs	r3, #22
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009668:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800966c:	a904      	add	r1, sp, #16
 800966e:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009672:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009676:	f00a fab9 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800967a:	2317      	movs	r3, #23
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800967c:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009680:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009684:	a904      	add	r1, sp, #16
 8009686:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800968a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800968e:	f00a faad 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009692:	b2c0      	uxtb	r0, r0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009694:	231c      	movs	r3, #28
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009696:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800969a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800969e:	a904      	add	r1, sp, #16
 80096a0:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80096a4:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096a8:	f00a faa0 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80096ac:	231d      	movs	r3, #29
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80096ae:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096b2:	a904      	add	r1, sp, #16
 80096b4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80096b8:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096bc:	f00a fa96 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80096c0:	231e      	movs	r3, #30
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80096c2:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096c6:	a904      	add	r1, sp, #16
 80096c8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80096cc:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096d0:	f00a fa8c 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80096d4:	231f      	movs	r3, #31
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80096d6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096da:	a904      	add	r1, sp, #16
 80096dc:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80096e0:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096e4:	f00a fa82 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80096e8:	230b      	movs	r3, #11
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80096ea:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096ee:	a904      	add	r1, sp, #16
 80096f0:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80096f4:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096f8:	f00a fa78 	bl	8013bec <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80096fc:	230c      	movs	r3, #12
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80096fe:	a904      	add	r1, sp, #16
    MacCtx.AdrAckLimit = phyParam.Value;
 8009700:	f8a5 03fc 	strh.w	r0, [r5, #1020]	; 0x3fc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009704:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009708:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800970c:	f00a fa6e 	bl	8013bec <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009710:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009714:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8009716:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800971a:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800971c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009720:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8009722:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009726:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009728:	f04f 0801 	mov.w	r8, #1
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800972c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009730:	66a3      	str	r3, [r4, #104]	; 0x68
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009732:	9003      	str	r0, [sp, #12]
    MacCtx.AdrAckDelay = phyParam.Value;
 8009734:	f8a5 03fe 	strh.w	r0, [r5, #1022]	; 0x3fe
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009738:	f884 80a8 	strb.w	r8, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800973c:	f8c4 b08c 	str.w	fp, [r4, #140]	; 0x8c
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8009740:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8009744:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8009748:	f884 a054 	strb.w	sl, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800974c:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c

    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8009750:	f884 818b 	strb.w	r8, [r4, #395]	; 0x18b

    ResetMacParameters( );
 8009754:	f7fe faa6 	bl	8007ca4 <ResetMacParameters>
    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009758:	4938      	ldr	r1, [pc, #224]	; (800983c <LoRaMacInitialization+0x324>)
    MacCtx.MacFlags.Value = 0;
 800975a:	f885 748d 	strb.w	r7, [r5, #1165]	; 0x48d
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800975e:	f505 705c 	add.w	r0, r5, #880	; 0x370
    MacCtx.MacCallbacks = callbacks;
 8009762:	e9c5 69d1 	strd	r6, r9, [r5, #836]	; 0x344
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009766:	e9c4 770e 	strd	r7, r7, [r4, #56]	; 0x38
    Nvm.MacGroup2.PublicNetwork = true;
 800976a:	f884 8185 	strb.w	r8, [r4, #389]	; 0x185
    MacCtx.MacState = LORAMAC_STOPPED;
 800976e:	f8c5 8340 	str.w	r8, [r5, #832]	; 0x340
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009772:	f009 fa21 	bl	8012bb8 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009776:	4932      	ldr	r1, [pc, #200]	; (8009840 <LoRaMacInitialization+0x328>)
 8009778:	f505 7062 	add.w	r0, r5, #904	; 0x388
 800977c:	f009 fa1c 	bl	8012bb8 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009780:	4930      	ldr	r1, [pc, #192]	; (8009844 <LoRaMacInitialization+0x32c>)
 8009782:	f505 7068 	add.w	r0, r5, #928	; 0x3a0
 8009786:	f009 fa17 	bl	8012bb8 <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800978a:	466e      	mov	r6, sp
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800978c:	492e      	ldr	r1, [pc, #184]	; (8009848 <LoRaMacInitialization+0x330>)
 800978e:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8009792:	f009 fa11 	bl	8012bb8 <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8009796:	4630      	mov	r0, r6
 8009798:	f009 f9a7 	bl	8012aea <SysTimeGetMcuTime>
 800979c:	e896 0003 	ldmia.w	r6, {r0, r1}
 80097a0:	f504 73c8 	add.w	r3, r4, #400	; 0x190
 80097a4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80097a8:	4b28      	ldr	r3, [pc, #160]	; (800984c <LoRaMacInitialization+0x334>)
 80097aa:	601f      	str	r7, [r3, #0]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80097ac:	4b28      	ldr	r3, [pc, #160]	; (8009850 <LoRaMacInitialization+0x338>)
 80097ae:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80097b2:	4b28      	ldr	r3, [pc, #160]	; (8009854 <LoRaMacInitialization+0x33c>)
 80097b4:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80097b8:	4b27      	ldr	r3, [pc, #156]	; (8009858 <LoRaMacInitialization+0x340>)
 80097ba:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 80097be:	4f27      	ldr	r7, [pc, #156]	; (800985c <LoRaMacInitialization+0x344>)
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80097c0:	4b27      	ldr	r3, [pc, #156]	; (8009860 <LoRaMacInitialization+0x348>)
 80097c2:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80097c6:	4b27      	ldr	r3, [pc, #156]	; (8009864 <LoRaMacInitialization+0x34c>)
 80097c8:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80097cc:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80097d4:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 80097d8:	f7fd ff34 	bl	8007644 <SecureElementInit>
 80097dc:	b120      	cbz	r0, 80097e8 <LoRaMacInitialization+0x2d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80097de:	2611      	movs	r6, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 80097e0:	4630      	mov	r0, r6
 80097e2:	b00b      	add	sp, #44	; 0x2c
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80097e8:	4620      	mov	r0, r4
 80097ea:	f001 f857 	bl	800a89c <LoRaMacCryptoInit>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d1f5      	bne.n	80097de <LoRaMacInitialization+0x2c6>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80097f2:	f000 fdc7 	bl	800a384 <LoRaMacCommandsInit>
 80097f6:	b9b8      	cbnz	r0, 8009828 <LoRaMacInitialization+0x310>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80097f8:	481b      	ldr	r0, [pc, #108]	; (8009868 <LoRaMacInitialization+0x350>)
 80097fa:	f001 f881 	bl	800a900 <LoRaMacCryptoSetMulticastReference>
 80097fe:	4606      	mov	r6, r0
 8009800:	2800      	cmp	r0, #0
 8009802:	d1ec      	bne.n	80097de <LoRaMacInitialization+0x2c6>
    srand1( Radio.Random( ) );
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	4798      	blx	r3
 8009808:	f7fc fdca 	bl	80063a0 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800980c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800980e:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
 8009812:	4798      	blx	r3
    Radio.Sleep( );
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8009818:	2301      	movs	r3, #1
 800981a:	f885 348e 	strb.w	r3, [r5, #1166]	; 0x48e
    return LORAMAC_STATUS_OK;
 800981e:	e7df      	b.n	80097e0 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009820:	2603      	movs	r6, #3
 8009822:	e7dd      	b.n	80097e0 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009824:	2609      	movs	r6, #9
 8009826:	e7db      	b.n	80097e0 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009828:	2613      	movs	r6, #19
 800982a:	e7d9      	b.n	80097e0 <LoRaMacInitialization+0x2c8>
 800982c:	200016f8 	.word	0x200016f8
 8009830:	200011e0 	.word	0x200011e0
 8009834:	01000400 	.word	0x01000400
 8009838:	20001de4 	.word	0x20001de4
 800983c:	08008971 	.word	0x08008971
 8009840:	08007e15 	.word	0x08007e15
 8009844:	08007e59 	.word	0x08007e59
 8009848:	080079a1 	.word	0x080079a1
 800984c:	200011dc 	.word	0x200011dc
 8009850:	08007c59 	.word	0x08007c59
 8009854:	08007c0d 	.word	0x08007c0d
 8009858:	08007911 	.word	0x08007911
 800985c:	08018558 	.word	0x08018558
 8009860:	080078ed 	.word	0x080078ed
 8009864:	08007935 	.word	0x08007935
 8009868:	200017cc 	.word	0x200017cc

0800986c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <LoRaMacStart+0xc>)
 800986e:	2000      	movs	r0, #0
 8009870:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	200011e0 	.word	0x200011e0

0800987c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800987c:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800987e:	4b2d      	ldr	r3, [pc, #180]	; (8009934 <LoRaMacQueryTxPossible+0xb8>)
{
 8009880:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009882:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 8009886:	f88d 2009 	strb.w	r2, [sp, #9]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800988a:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 800988e:	f88d 200a 	strb.w	r2, [sp, #10]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8009892:	4a29      	ldr	r2, [pc, #164]	; (8009938 <LoRaMacQueryTxPossible+0xbc>)
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009894:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009896:	9603      	str	r6, [sp, #12]
{
 8009898:	4605      	mov	r5, r0
    size_t macCmdsSize = 0;
 800989a:	2700      	movs	r7, #0
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800989c:	f892 0418 	ldrb.w	r0, [r2, #1048]	; 0x418
 80098a0:	f88d 000b 	strb.w	r0, [sp, #11]
    size_t macCmdsSize = 0;
 80098a4:	9704      	str	r7, [sp, #16]

    if( txInfo == NULL )
 80098a6:	460c      	mov	r4, r1
 80098a8:	2900      	cmp	r1, #0
 80098aa:	d03e      	beq.n	800992a <LoRaMacQueryTxPossible+0xae>

    // Setup ADR request
    adrNext.UpdateChanMask = false;
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80098ac:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
 80098b0:	9207      	str	r2, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80098b2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80098b6:	f893 1186 	ldrb.w	r1, [r3, #390]	; 0x186
 80098ba:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80098be:	ba52      	rev16	r2, r2
 80098c0:	f8ad 2020 	strh.w	r2, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80098c4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
    adrNext.Region = Nvm.MacGroup2.Region;
 80098c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80098cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80098d0:	ab03      	add	r3, sp, #12
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80098d2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80098d6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	f10d 020a 	add.w	r2, sp, #10
 80098e0:	f10d 030b 	add.w	r3, sp, #11
 80098e4:	f10d 0109 	add.w	r1, sp, #9
 80098e8:	a805      	add	r0, sp, #20
    adrNext.UpdateChanMask = false;
 80098ea:	f88d 7014 	strb.w	r7, [sp, #20]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80098ee:	9606      	str	r6, [sp, #24]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80098f0:	f009 febf 	bl	8013672 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80098f4:	f99d 0009 	ldrsb.w	r0, [sp, #9]
 80098f8:	f7fe f83c 	bl	8007974 <GetMaxAppPayloadWithoutFOptsLength>
 80098fc:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80098fe:	a804      	add	r0, sp, #16
 8009900:	f000 fdf2 	bl	800a4e8 <LoRaMacCommandsGetSizeSerializedCmds>
 8009904:	b998      	cbnz	r0, 800992e <LoRaMacQueryTxPossible+0xb2>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	2b0f      	cmp	r3, #15
 800990a:	d80a      	bhi.n	8009922 <LoRaMacQueryTxPossible+0xa6>
 800990c:	7862      	ldrb	r2, [r4, #1]
 800990e:	4293      	cmp	r3, r2
 8009910:	d807      	bhi.n	8009922 <LoRaMacQueryTxPossible+0xa6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009912:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8009914:	442b      	add	r3, r5
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009916:	7021      	strb	r1, [r4, #0]
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8009918:	429a      	cmp	r2, r3
 800991a:	bf38      	it	cc
 800991c:	2008      	movcc	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800991e:	b00b      	add	sp, #44	; 0x2c
 8009920:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8009926:	2008      	movs	r0, #8
 8009928:	e7f9      	b.n	800991e <LoRaMacQueryTxPossible+0xa2>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800992a:	2003      	movs	r0, #3
 800992c:	e7f7      	b.n	800991e <LoRaMacQueryTxPossible+0xa2>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800992e:	2013      	movs	r0, #19
 8009930:	e7f5      	b.n	800991e <LoRaMacQueryTxPossible+0xa2>
 8009932:	bf00      	nop
 8009934:	200016f8 	.word	0x200016f8
 8009938:	200011e0 	.word	0x200011e0

0800993c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800993c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800993e:	4604      	mov	r4, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	f000 80c4 	beq.w	8009ace <LoRaMacMibGetRequestConfirm+0x192>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 8009946:	7800      	ldrb	r0, [r0, #0]
 8009948:	2844      	cmp	r0, #68	; 0x44
 800994a:	f200 80ba 	bhi.w	8009ac2 <LoRaMacMibGetRequestConfirm+0x186>
 800994e:	e8df f000 	tbb	[pc, r0]
 8009952:	2923      	.short	0x2923
 8009954:	3936332e 	.word	0x3936332e
 8009958:	b8b8423d 	.word	0xb8b8423d
 800995c:	b8b8b8b8 	.word	0xb8b8b8b8
 8009960:	b8b8b8b8 	.word	0xb8b8b8b8
 8009964:	b8b8b8b8 	.word	0xb8b8b8b8
 8009968:	b8b8b8b8 	.word	0xb8b8b8b8
 800996c:	46b8b8b8 	.word	0x46b8b8b8
 8009970:	5e5b544a 	.word	0x5e5b544a
 8009974:	68646661 	.word	0x68646661
 8009978:	75726f6c 	.word	0x75726f6c
 800997c:	8e8a7b78 	.word	0x8e8a7b78
 8009980:	9d9a9296 	.word	0x9d9a9296
 8009984:	b8a6a8a1 	.word	0xb8a6a8a1
 8009988:	b8b8b8ac 	.word	0xb8b8b8ac
 800998c:	b8b8b8b8 	.word	0xb8b8b8b8
 8009990:	b8b8b8b8 	.word	0xb8b8b8b8
 8009994:	b8b8      	.short	0xb8b8
 8009996:	b4          	.byte	0xb4
 8009997:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8009998:	4b4e      	ldr	r3, [pc, #312]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 800999a:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800999e:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 80099a0:	b004      	add	sp, #16
 80099a2:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80099a4:	4b4b      	ldr	r3, [pc, #300]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 80099a6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80099aa:	7123      	strb	r3, [r4, #4]
            break;
 80099ac:	e002      	b.n	80099b4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80099ae:	f7fd ff6b 	bl	8007888 <SecureElementGetDevEui>
 80099b2:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099b4:	2000      	movs	r0, #0
            break;
 80099b6:	e7f3      	b.n	80099a0 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80099b8:	f7fd ff7c 	bl	80078b4 <SecureElementGetJoinEui>
 80099bc:	e7f9      	b.n	80099b2 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.SePin = SecureElementGetPin( );
 80099be:	f7fd ff8f 	bl	80078e0 <SecureElementGetPin>
 80099c2:	e7f6      	b.n	80099b2 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80099c4:	4b43      	ldr	r3, [pc, #268]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 80099c6:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 80099ca:	e7ee      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80099cc:	4b41      	ldr	r3, [pc, #260]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 80099ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80099d2:	6063      	str	r3, [r4, #4]
            break;
 80099d4:	e7ee      	b.n	80099b4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80099d6:	4b3f      	ldr	r3, [pc, #252]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 80099d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80099dc:	e7f9      	b.n	80099d2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80099de:	4b3d      	ldr	r3, [pc, #244]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 80099e0:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 80099e4:	e7e1      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            getPhy.Attribute = PHY_CHANNELS;
 80099e6:	231b      	movs	r3, #27
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80099e8:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80099ec:	4b39      	ldr	r3, [pc, #228]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 80099ee:	a902      	add	r1, sp, #8
 80099f0:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 80099f4:	f00a f8fa 	bl	8013bec <RegionGetPhyParam>
 80099f8:	e7db      	b.n	80099b2 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80099fa:	4b37      	ldr	r3, [pc, #220]	; (8009ad8 <LoRaMacMibGetRequestConfirm+0x19c>)
 80099fc:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80099fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a02:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
 8009a06:	e7d5      	b.n	80099b4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009a08:	4b34      	ldr	r3, [pc, #208]	; (8009adc <LoRaMacMibGetRequestConfirm+0x1a0>)
 8009a0a:	3404      	adds	r4, #4
 8009a0c:	e7f7      	b.n	80099fe <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8009a0e:	4b34      	ldr	r3, [pc, #208]	; (8009ae0 <LoRaMacMibGetRequestConfirm+0x1a4>)
 8009a10:	3404      	adds	r4, #4
 8009a12:	e7f4      	b.n	80099fe <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009a14:	4b33      	ldr	r3, [pc, #204]	; (8009ae4 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8009a16:	3404      	adds	r4, #4
 8009a18:	e7f1      	b.n	80099fe <LoRaMacMibGetRequestConfirm+0xc2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8009a1a:	2319      	movs	r3, #25
 8009a1c:	e7e4      	b.n	80099e8 <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8009a1e:	2318      	movs	r3, #24
 8009a20:	e7e2      	b.n	80099e8 <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009a22:	4b2c      	ldr	r3, [pc, #176]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a24:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009a28:	e7bf      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8009a2a:	4b2a      	ldr	r3, [pc, #168]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2e:	e7d0      	b.n	80099d2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8009a30:	4b28      	ldr	r3, [pc, #160]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a34:	e7cd      	b.n	80099d2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8009a36:	4b27      	ldr	r3, [pc, #156]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a3a:	e7ca      	b.n	80099d2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8009a3c:	4b25      	ldr	r3, [pc, #148]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a40:	e7c7      	b.n	80099d2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8009a42:	4b24      	ldr	r3, [pc, #144]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a46:	e7c4      	b.n	80099d2 <LoRaMacMibGetRequestConfirm+0x96>
            getPhy.Attribute = PHY_MIN_TX_DR;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009a4e:	4b21      	ldr	r3, [pc, #132]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009a50:	a902      	add	r1, sp, #8
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009a52:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009a56:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009a5a:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009a5e:	f00a f8c5 	bl	8013bec <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8009a62:	7120      	strb	r0, [r4, #4]
            break;
 8009a64:	e7a6      	b.n	80099b4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009a66:	4b1b      	ldr	r3, [pc, #108]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a68:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009a6c:	e79d      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009a6e:	4b19      	ldr	r3, [pc, #100]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a74:	e799      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009a76:	4b17      	ldr	r3, [pc, #92]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a78:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009a7c:	e795      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009a7e:	4b15      	ldr	r3, [pc, #84]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a84:	e791      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8009a86:	4b13      	ldr	r3, [pc, #76]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8a:	e7a2      	b.n	80099d2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8009a8c:	4b11      	ldr	r3, [pc, #68]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009a92:	e78a      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009a94:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009a9a:	6063      	str	r3, [r4, #4]
            break;
 8009a9c:	e78a      	b.n	80099b4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Contexts = GetNvmData( );
 8009a9e:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009aa0:	e797      	b.n	80099d2 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009aa2:	4b0c      	ldr	r3, [pc, #48]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009aa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009aa8:	e7f7      	b.n	8009a9a <LoRaMacMibGetRequestConfirm+0x15e>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8009aaa:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009aac:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009ab0:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8009ab2:	f001 f8f3 	bl	800ac9c <RegionGetVersion>
 8009ab6:	60a0      	str	r0, [r4, #8]
            break;
 8009ab8:	e77c      	b.n	80099b4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8009aba:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <LoRaMacMibGetRequestConfirm+0x198>)
 8009abc:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8009ac0:	e773      	b.n	80099aa <LoRaMacMibGetRequestConfirm+0x6e>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009ac2:	4620      	mov	r0, r4
}
 8009ac4:	b004      	add	sp, #16
 8009ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009aca:	f009 be57 	b.w	801377c <LoRaMacClassBMibGetRequestConfirm>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009ace:	2003      	movs	r0, #3
 8009ad0:	e766      	b.n	80099a0 <LoRaMacMibGetRequestConfirm+0x64>
 8009ad2:	bf00      	nop
 8009ad4:	200016f8 	.word	0x200016f8
 8009ad8:	20001768 	.word	0x20001768
 8009adc:	200017a4 	.word	0x200017a4
 8009ae0:	20001770 	.word	0x20001770
 8009ae4:	200017ac 	.word	0x200017ac

08009ae8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8009aea:	4604      	mov	r4, r0
{
 8009aec:	b085      	sub	sp, #20
    if( mibSet == NULL )
 8009aee:	b910      	cbnz	r0, 8009af6 <LoRaMacMibSetRequestConfirm+0xe>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009af0:	2003      	movs	r0, #3
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
    return status;
}
 8009af2:	b005      	add	sp, #20
 8009af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009af6:	4d9b      	ldr	r5, [pc, #620]	; (8009d64 <LoRaMacMibSetRequestConfirm+0x27c>)
 8009af8:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
 8009afc:	079a      	lsls	r2, r3, #30
 8009afe:	f100 828e 	bmi.w	800a01e <LoRaMacMibSetRequestConfirm+0x536>
    switch( mibSet->Type )
 8009b02:	7802      	ldrb	r2, [r0, #0]
 8009b04:	2a44      	cmp	r2, #68	; 0x44
 8009b06:	f200 8287 	bhi.w	800a018 <LoRaMacMibSetRequestConfirm+0x530>
 8009b0a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009b0e:	0045      	.short	0x0045
 8009b10:	0059004b 	.word	0x0059004b
 8009b14:	0063005f 	.word	0x0063005f
 8009b18:	006c0067 	.word	0x006c0067
 8009b1c:	00760071 	.word	0x00760071
 8009b20:	00870081 	.word	0x00870081
 8009b24:	0093008d 	.word	0x0093008d
 8009b28:	009f0099 	.word	0x009f0099
 8009b2c:	00ab00a5 	.word	0x00ab00a5
 8009b30:	00b700b1 	.word	0x00b700b1
 8009b34:	00c300bd 	.word	0x00c300bd
 8009b38:	00cf00c9 	.word	0x00cf00c9
 8009b3c:	00db00d5 	.word	0x00db00d5
 8009b40:	00e700e1 	.word	0x00e700e1
 8009b44:	00f300ed 	.word	0x00f300ed
 8009b48:	028500f9 	.word	0x028500f9
 8009b4c:	01180101 	.word	0x01180101
 8009b50:	01580131 	.word	0x01580131
 8009b54:	016b017a 	.word	0x016b017a
 8009b58:	0187017e 	.word	0x0187017e
 8009b5c:	018f018b 	.word	0x018f018b
 8009b60:	01970193 	.word	0x01970193
 8009b64:	019b0285 	.word	0x019b0285
 8009b68:	01d501ad 	.word	0x01d501ad
 8009b6c:	01e701c3 	.word	0x01e701c3
 8009b70:	01f401ed 	.word	0x01f401ed
 8009b74:	01fe01f9 	.word	0x01fe01f9
 8009b78:	02850274 	.word	0x02850274
 8009b7c:	02850285 	.word	0x02850285
 8009b80:	02850285 	.word	0x02850285
 8009b84:	02850285 	.word	0x02850285
 8009b88:	02850285 	.word	0x02850285
 8009b8c:	02850285 	.word	0x02850285
 8009b90:	02850285 	.word	0x02850285
 8009b94:	02800285 	.word	0x02800285
            status = SwitchClass( mibSet->Param.Class );
 8009b98:	7900      	ldrb	r0, [r0, #4]
 8009b9a:	f7fd ffc9 	bl	8007b30 <SwitchClass>
    if( status == LORAMAC_STATUS_OK )
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d1a7      	bne.n	8009af2 <LoRaMacMibSetRequestConfirm+0xa>
 8009ba2:	e005      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8009ba4:	7903      	ldrb	r3, [r0, #4]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d0a2      	beq.n	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8009baa:	4a6f      	ldr	r2, [pc, #444]	; (8009d68 <LoRaMacMibSetRequestConfirm+0x280>)
 8009bac:	f882 319c 	strb.w	r3, [r2, #412]	; 0x19c
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8009bb0:	f895 348d 	ldrb.w	r3, [r5, #1165]	; 0x48d
 8009bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb8:	f885 348d 	strb.w	r3, [r5, #1165]	; 0x48d
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	e798      	b.n	8009af2 <LoRaMacMibSetRequestConfirm+0xa>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8009bc0:	6840      	ldr	r0, [r0, #4]
 8009bc2:	f7fd fe53 	bl	800786c <SecureElementSetDevEui>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d0f2      	beq.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
 8009bca:	e791      	b.n	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8009bcc:	6840      	ldr	r0, [r0, #4]
 8009bce:	f7fd fe61 	bl	8007894 <SecureElementSetJoinEui>
 8009bd2:	e7f8      	b.n	8009bc6 <LoRaMacMibSetRequestConfirm+0xde>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 8009bd4:	6840      	ldr	r0, [r0, #4]
 8009bd6:	f7fd fe73 	bl	80078c0 <SecureElementSetPin>
 8009bda:	e7f4      	b.n	8009bc6 <LoRaMacMibSetRequestConfirm+0xde>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8009bdc:	4b62      	ldr	r3, [pc, #392]	; (8009d68 <LoRaMacMibSetRequestConfirm+0x280>)
 8009bde:	7902      	ldrb	r2, [r0, #4]
 8009be0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    if( status == LORAMAC_STATUS_OK )
 8009be4:	e7e4      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8009be6:	4b60      	ldr	r3, [pc, #384]	; (8009d68 <LoRaMacMibSetRequestConfirm+0x280>)
 8009be8:	6842      	ldr	r2, [r0, #4]
 8009bea:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    if( status == LORAMAC_STATUS_OK )
 8009bee:	e7df      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8009bf0:	4b5d      	ldr	r3, [pc, #372]	; (8009d68 <LoRaMacMibSetRequestConfirm+0x280>)
 8009bf2:	6842      	ldr	r2, [r0, #4]
 8009bf4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    if( status == LORAMAC_STATUS_OK )
 8009bf8:	e7da      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            if( mibSet->Param.AppKey != NULL )
 8009bfa:	6841      	ldr	r1, [r0, #4]
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	f43f af77 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8009c02:	2000      	movs	r0, #0
 8009c04:	f000 ffb4 	bl	800ab70 <LoRaMacCryptoSetKey>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d0d1      	beq.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009c0c:	2011      	movs	r0, #17
 8009c0e:	e770      	b.n	8009af2 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.NwkKey != NULL )
 8009c10:	6841      	ldr	r1, [r0, #4]
 8009c12:	2900      	cmp	r1, #0
 8009c14:	f43f af6c 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009c18:	2001      	movs	r0, #1
 8009c1a:	e7f3      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.JSIntKey != NULL )
 8009c1c:	6841      	ldr	r1, [r0, #4]
 8009c1e:	2900      	cmp	r1, #0
 8009c20:	f43f af66 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8009c24:	2002      	movs	r0, #2
 8009c26:	e7ed      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.JSEncKey != NULL )
 8009c28:	6841      	ldr	r1, [r0, #4]
 8009c2a:	2900      	cmp	r1, #0
 8009c2c:	f43f af60 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 8009c30:	2003      	movs	r0, #3
 8009c32:	e7e7      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8009c34:	6841      	ldr	r1, [r0, #4]
 8009c36:	2900      	cmp	r1, #0
 8009c38:	f43f af5a 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8009c3c:	2004      	movs	r0, #4
 8009c3e:	e7e1      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.SNwkSIntKey != NULL )
 8009c40:	6841      	ldr	r1, [r0, #4]
 8009c42:	2900      	cmp	r1, #0
 8009c44:	f43f af54 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8009c48:	2005      	movs	r0, #5
 8009c4a:	e7db      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.NwkSEncKey != NULL )
 8009c4c:	6841      	ldr	r1, [r0, #4]
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	f43f af4e 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8009c54:	2006      	movs	r0, #6
 8009c56:	e7d5      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.AppSKey != NULL )
 8009c58:	6841      	ldr	r1, [r0, #4]
 8009c5a:	2900      	cmp	r1, #0
 8009c5c:	f43f af48 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8009c60:	2007      	movs	r0, #7
 8009c62:	e7cf      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKEKey != NULL )
 8009c64:	6841      	ldr	r1, [r0, #4]
 8009c66:	2900      	cmp	r1, #0
 8009c68:	f43f af42 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8009c6c:	207f      	movs	r0, #127	; 0x7f
 8009c6e:	e7c9      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKey0 != NULL )
 8009c70:	6841      	ldr	r1, [r0, #4]
 8009c72:	2900      	cmp	r1, #0
 8009c74:	f43f af3c 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8009c78:	2080      	movs	r0, #128	; 0x80
 8009c7a:	e7c3      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McAppSKey0 != NULL )
 8009c7c:	6841      	ldr	r1, [r0, #4]
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	f43f af36 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009c84:	2081      	movs	r0, #129	; 0x81
 8009c86:	e7bd      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009c88:	6841      	ldr	r1, [r0, #4]
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	f43f af30 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009c90:	2082      	movs	r0, #130	; 0x82
 8009c92:	e7b7      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKey1 != NULL )
 8009c94:	6841      	ldr	r1, [r0, #4]
 8009c96:	2900      	cmp	r1, #0
 8009c98:	f43f af2a 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8009c9c:	2083      	movs	r0, #131	; 0x83
 8009c9e:	e7b1      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McAppSKey1 != NULL )
 8009ca0:	6841      	ldr	r1, [r0, #4]
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	f43f af24 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 8009ca8:	2084      	movs	r0, #132	; 0x84
 8009caa:	e7ab      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8009cac:	6841      	ldr	r1, [r0, #4]
 8009cae:	2900      	cmp	r1, #0
 8009cb0:	f43f af1e 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8009cb4:	2085      	movs	r0, #133	; 0x85
 8009cb6:	e7a5      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKey2 != NULL )
 8009cb8:	6841      	ldr	r1, [r0, #4]
 8009cba:	2900      	cmp	r1, #0
 8009cbc:	f43f af18 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8009cc0:	2086      	movs	r0, #134	; 0x86
 8009cc2:	e79f      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McAppSKey2 != NULL )
 8009cc4:	6841      	ldr	r1, [r0, #4]
 8009cc6:	2900      	cmp	r1, #0
 8009cc8:	f43f af12 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 8009ccc:	2087      	movs	r0, #135	; 0x87
 8009cce:	e799      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8009cd0:	6841      	ldr	r1, [r0, #4]
 8009cd2:	2900      	cmp	r1, #0
 8009cd4:	f43f af0c 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8009cd8:	2088      	movs	r0, #136	; 0x88
 8009cda:	e793      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKey3 != NULL )
 8009cdc:	6841      	ldr	r1, [r0, #4]
 8009cde:	2900      	cmp	r1, #0
 8009ce0:	f43f af06 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8009ce4:	2089      	movs	r0, #137	; 0x89
 8009ce6:	e78d      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McAppSKey3 != NULL )
 8009ce8:	6841      	ldr	r1, [r0, #4]
 8009cea:	2900      	cmp	r1, #0
 8009cec:	f43f af00 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 8009cf0:	208a      	movs	r0, #138	; 0x8a
 8009cf2:	e787      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McNwkSKey3 != NULL )
 8009cf4:	6841      	ldr	r1, [r0, #4]
 8009cf6:	2900      	cmp	r1, #0
 8009cf8:	f43f aefa 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 8009cfc:	208b      	movs	r0, #139	; 0x8b
 8009cfe:	e781      	b.n	8009c04 <LoRaMacMibSetRequestConfirm+0x11c>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009d00:	4b19      	ldr	r3, [pc, #100]	; (8009d68 <LoRaMacMibSetRequestConfirm+0x280>)
 8009d02:	7900      	ldrb	r0, [r0, #4]
 8009d04:	f883 0185 	strb.w	r0, [r3, #389]	; 0x185
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009d08:	4b18      	ldr	r3, [pc, #96]	; (8009d6c <LoRaMacMibSetRequestConfirm+0x284>)
 8009d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0c:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
 8009d0e:	e74f      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d10:	4e15      	ldr	r6, [pc, #84]	; (8009d68 <LoRaMacMibSetRequestConfirm+0x280>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009d12:	7a03      	ldrb	r3, [r0, #8]
 8009d14:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009d18:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d1c:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 8009d20:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009d24:	2207      	movs	r2, #7
 8009d26:	a901      	add	r1, sp, #4
 8009d28:	f009 ff76 	bl	8013c18 <RegionVerify>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	f43f aedf 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009d32:	3670      	adds	r6, #112	; 0x70
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009d34:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8009d38:	e886 0003 	stmia.w	r6, {r0, r1}
    if( status == LORAMAC_STATUS_OK )
 8009d3c:	e738      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d3e:	4e0a      	ldr	r6, [pc, #40]	; (8009d68 <LoRaMacMibSetRequestConfirm+0x280>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009d40:	7a03      	ldrb	r3, [r0, #8]
 8009d42:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009d46:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d4a:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 8009d4e:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009d52:	2207      	movs	r2, #7
 8009d54:	a901      	add	r1, sp, #4
 8009d56:	f009 ff5f 	bl	8013c18 <RegionVerify>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f43f aec8 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009d60:	36ac      	adds	r6, #172	; 0xac
 8009d62:	e7e7      	b.n	8009d34 <LoRaMacMibSetRequestConfirm+0x24c>
 8009d64:	200011e0 	.word	0x200011e0
 8009d68:	200016f8 	.word	0x200016f8
 8009d6c:	08018558 	.word	0x08018558
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d70:	4eac      	ldr	r6, [pc, #688]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009d72:	7a03      	ldrb	r3, [r0, #8]
 8009d74:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009d78:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d7c:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 8009d80:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009d84:	2207      	movs	r2, #7
 8009d86:	a901      	add	r1, sp, #4
 8009d88:	f009 ff46 	bl	8013c18 <RegionVerify>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f43f aeaf 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8009d92:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8009d96:	f106 0378 	add.w	r3, r6, #120	; 0x78
 8009d9a:	e883 0003 	stmia.w	r3, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009d9e:	f896 3184 	ldrb.w	r3, [r6, #388]	; 0x184
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	f47f af04 	bne.w	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
 8009da8:	f896 319c 	ldrb.w	r3, [r6, #412]	; 0x19c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f43f aeff 	beq.w	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
                    Radio.Sleep( );
 8009db2:	4b9d      	ldr	r3, [pc, #628]	; (800a028 <LoRaMacMibSetRequestConfirm+0x540>)
 8009db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db6:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8009db8:	f7fd fe88 	bl	8007acc <OpenContinuousRxCWindow>
    if( status == LORAMAC_STATUS_OK )
 8009dbc:	e6f8      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009dbe:	4e99      	ldr	r6, [pc, #612]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009dc0:	7a03      	ldrb	r3, [r0, #8]
 8009dc2:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009dc6:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009dca:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 8009dce:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009dd2:	2207      	movs	r2, #7
 8009dd4:	a901      	add	r1, sp, #4
 8009dd6:	f009 ff1f 	bl	8013c18 <RegionVerify>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	f43f ae88 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009de0:	36b4      	adds	r6, #180	; 0xb4
 8009de2:	e7a7      	b.n	8009d34 <LoRaMacMibSetRequestConfirm+0x24c>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009de4:	6843      	ldr	r3, [r0, #4]
 8009de6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009de8:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009dea:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009dee:	4b8d      	ldr	r3, [pc, #564]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009df0:	a902      	add	r1, sp, #8
 8009df2:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 8009df6:	f009 ff1e 	bl	8013c36 <RegionChanMaskSet>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	f47f aed8 	bne.w	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
 8009e00:	e676      	b.n	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009e02:	6843      	ldr	r3, [r0, #4]
 8009e04:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e7ef      	b.n	8009dea <LoRaMacMibSetRequestConfirm+0x302>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009e0a:	7903      	ldrb	r3, [r0, #4]
 8009e0c:	1e5a      	subs	r2, r3, #1
 8009e0e:	2a0e      	cmp	r2, #14
 8009e10:	f63f ae6e 	bhi.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009e14:	4a83      	ldr	r2, [pc, #524]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009e16:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
    if( status == LORAMAC_STATUS_OK )
 8009e1a:	e6c9      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009e1c:	4b81      	ldr	r3, [pc, #516]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009e1e:	6842      	ldr	r2, [r0, #4]
 8009e20:	659a      	str	r2, [r3, #88]	; 0x58
    if( status == LORAMAC_STATUS_OK )
 8009e22:	e6c5      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009e24:	4b7f      	ldr	r3, [pc, #508]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009e26:	6842      	ldr	r2, [r0, #4]
 8009e28:	65da      	str	r2, [r3, #92]	; 0x5c
    if( status == LORAMAC_STATUS_OK )
 8009e2a:	e6c1      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009e2c:	4b7d      	ldr	r3, [pc, #500]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009e2e:	6842      	ldr	r2, [r0, #4]
 8009e30:	661a      	str	r2, [r3, #96]	; 0x60
    if( status == LORAMAC_STATUS_OK )
 8009e32:	e6bd      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009e34:	4b7b      	ldr	r3, [pc, #492]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009e36:	6842      	ldr	r2, [r0, #4]
 8009e38:	665a      	str	r2, [r3, #100]	; 0x64
    if( status == LORAMAC_STATUS_OK )
 8009e3a:	e6b9      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009e3c:	4b79      	ldr	r3, [pc, #484]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009e3e:	6842      	ldr	r2, [r0, #4]
 8009e40:	669a      	str	r2, [r3, #104]	; 0x68
    if( status == LORAMAC_STATUS_OK )
 8009e42:	e6b5      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009e44:	4c77      	ldr	r4, [pc, #476]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009e46:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009e48:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009e4c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009e50:	2206      	movs	r2, #6
 8009e52:	a901      	add	r1, sp, #4
 8009e54:	f009 fee0 	bl	8013c18 <RegionVerify>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f43f ae49 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8009e5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009e62:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if( status == LORAMAC_STATUS_OK )
 8009e66:	e6a3      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e68:	4c6e      	ldr	r4, [pc, #440]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009e6a:	7903      	ldrb	r3, [r0, #4]
 8009e6c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009e70:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009e74:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8009e78:	f88d 3006 	strb.w	r3, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	a901      	add	r1, sp, #4
 8009e80:	f009 feca 	bl	8013c18 <RegionVerify>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	f43f ae33 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009e8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    if( status == LORAMAC_STATUS_OK )
 8009e92:	e68d      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009e94:	4c63      	ldr	r4, [pc, #396]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009e96:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009e98:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009e9c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	a901      	add	r1, sp, #4
 8009ea4:	f009 feb8 	bl	8013c18 <RegionVerify>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	f43f ae21 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8009eae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009eb2:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if( status == LORAMAC_STATUS_OK )
 8009eb6:	e67b      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009eb8:	4c5a      	ldr	r4, [pc, #360]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009eba:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009ebc:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009ec0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009ec4:	2209      	movs	r2, #9
 8009ec6:	a901      	add	r1, sp, #4
 8009ec8:	f009 fea6 	bl	8013c18 <RegionVerify>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	f43f ae0f 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009ed2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009ed6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if( status == LORAMAC_STATUS_OK )
 8009eda:	e669      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009edc:	4b51      	ldr	r3, [pc, #324]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009ede:	6842      	ldr	r2, [r0, #4]
 8009ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8009ee4:	651a      	str	r2, [r3, #80]	; 0x50
    if( status == LORAMAC_STATUS_OK )
 8009ee6:	e663      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009ee8:	4b4e      	ldr	r3, [pc, #312]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009eea:	7902      	ldrb	r2, [r0, #4]
 8009eec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8009ef0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if( status == LORAMAC_STATUS_OK )
 8009ef4:	e65c      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009ef6:	4b4b      	ldr	r3, [pc, #300]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009ef8:	6842      	ldr	r2, [r0, #4]
 8009efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if( status == LORAMAC_STATUS_OK )
 8009efe:	e657      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009f00:	4b48      	ldr	r3, [pc, #288]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009f02:	6842      	ldr	r2, [r0, #4]
 8009f04:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    if( status == LORAMAC_STATUS_OK )
 8009f08:	e652      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            if( mibSet->Param.Contexts != 0 )
 8009f0a:	6844      	ldr	r4, [r0, #4]
 8009f0c:	2c00      	cmp	r4, #0
 8009f0e:	f43f adef 	beq.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	f040 8083 	bne.w	800a01e <LoRaMacMibSetRequestConfirm+0x536>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8009f18:	2130      	movs	r1, #48	; 0x30
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f7fc fa46 	bl	80063ac <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8009f20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f22:	4298      	cmp	r0, r3
 8009f24:	d104      	bne.n	8009f30 <LoRaMacMibSetRequestConfirm+0x448>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8009f26:	483f      	ldr	r0, [pc, #252]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009f28:	2234      	movs	r2, #52	; 0x34
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	f008 fd48 	bl	80129c0 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8009f30:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8009f34:	2114      	movs	r1, #20
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7fc fa38 	bl	80063ac <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 8009f3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009f3e:	4298      	cmp	r0, r3
 8009f40:	d104      	bne.n	8009f4c <LoRaMacMibSetRequestConfirm+0x464>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8009f42:	483a      	ldr	r0, [pc, #232]	; (800a02c <LoRaMacMibSetRequestConfirm+0x544>)
 8009f44:	2218      	movs	r2, #24
 8009f46:	4631      	mov	r1, r6
 8009f48:	f008 fd3a 	bl	80129c0 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8009f4c:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8009f50:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7fc fa29 	bl	80063ac <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8009f5a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009f5e:	4298      	cmp	r0, r3
 8009f60:	d118      	bne.n	8009f94 <LoRaMacMibSetRequestConfirm+0x4ac>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8009f62:	4e30      	ldr	r6, [pc, #192]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 8009f64:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8009f68:	4639      	mov	r1, r7
 8009f6a:	f106 004c 	add.w	r0, r6, #76	; 0x4c
 8009f6e:	f008 fd27 	bl	80129c0 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009f72:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
 8009f76:	f885 33e8 	strb.w	r3, [r5, #1000]	; 0x3e8
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009f7a:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 8009f7c:	f8c5 33ec 	str.w	r3, [r5, #1004]	; 0x3ec
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009f80:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 8009f84:	f885 33f8 	strb.w	r3, [r5, #1016]	; 0x3f8
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	f885 33f9 	strb.w	r3, [r5, #1017]	; 0x3f9
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8009f94:	f504 76d2 	add.w	r6, r4, #420	; 0x1a4
 8009f98:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7fc fa05 	bl	80063ac <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8009fa2:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009fa6:	4298      	cmp	r0, r3
 8009fa8:	d105      	bne.n	8009fb6 <LoRaMacMibSetRequestConfirm+0x4ce>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8009faa:	4821      	ldr	r0, [pc, #132]	; (800a030 <LoRaMacMibSetRequestConfirm+0x548>)
 8009fac:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	f008 fd05 	bl	80129c0 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8009fb6:	f504 7651 	add.w	r6, r4, #836	; 0x344
 8009fba:	2110      	movs	r1, #16
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f7fc f9f5 	bl	80063ac <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8009fc2:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 8009fc6:	4298      	cmp	r0, r3
 8009fc8:	d104      	bne.n	8009fd4 <LoRaMacMibSetRequestConfirm+0x4ec>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8009fca:	481a      	ldr	r0, [pc, #104]	; (800a034 <LoRaMacMibSetRequestConfirm+0x54c>)
 8009fcc:	2214      	movs	r2, #20
 8009fce:	4631      	mov	r1, r6
 8009fd0:	f008 fcf6 	bl	80129c0 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8009fd4:	f204 66d4 	addw	r6, r4, #1748	; 0x6d4
 8009fd8:	2114      	movs	r1, #20
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f7fc f9e6 	bl	80063ac <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8009fe0:	f8d4 36e8 	ldr.w	r3, [r4, #1768]	; 0x6e8
 8009fe4:	4298      	cmp	r0, r3
 8009fe6:	f47f ade3 	bne.w	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8009fea:	4813      	ldr	r0, [pc, #76]	; (800a038 <LoRaMacMibSetRequestConfirm+0x550>)
 8009fec:	2218      	movs	r2, #24
 8009fee:	4631      	mov	r1, r6
 8009ff0:	f008 fce6 	bl	80129c0 <memcpy1>
    if( status == LORAMAC_STATUS_OK )
 8009ff4:	e5dc      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009ff6:	7983      	ldrb	r3, [r0, #6]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	f63f ad79 	bhi.w	8009af0 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a000:	6842      	ldr	r2, [r0, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a002:	6840      	ldr	r0, [r0, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800a004:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a008:	f000 fc66 	bl	800a8d8 <LoRaMacCryptoSetLrWanVersion>
 800a00c:	e5fc      	b.n	8009c08 <LoRaMacMibSetRequestConfirm+0x120>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a010:	7902      	ldrb	r2, [r0, #4]
 800a012:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
    if( status == LORAMAC_STATUS_OK )
 800a016:	e5cb      	b.n	8009bb0 <LoRaMacMibSetRequestConfirm+0xc8>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800a018:	f009 fbb2 	bl	8013780 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800a01c:	e5bf      	b.n	8009b9e <LoRaMacMibSetRequestConfirm+0xb6>
        return LORAMAC_STATUS_BUSY;
 800a01e:	2001      	movs	r0, #1
 800a020:	e567      	b.n	8009af2 <LoRaMacMibSetRequestConfirm+0xa>
 800a022:	bf00      	nop
 800a024:	200016f8 	.word	0x200016f8
 800a028:	08018558 	.word	0x08018558
 800a02c:	2000172c 	.word	0x2000172c
 800a030:	2000189c 	.word	0x2000189c
 800a034:	20001a3c 	.word	0x20001a3c
 800a038:	20001dcc 	.word	0x20001dcc

0800a03c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800a03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a040:	b087      	sub	sp, #28
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a042:	2300      	movs	r3, #0
 800a044:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800a048:	4605      	mov	r5, r0
 800a04a:	2800      	cmp	r0, #0
 800a04c:	f000 80ce 	beq.w	800a1ec <LoRaMacMlmeRequest+0x1b0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800a050:	6103      	str	r3, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800a052:	f7fe fa4d 	bl	80084f0 <LoRaMacIsBusy>
 800a056:	b120      	cbz	r0, 800a062 <LoRaMacMlmeRequest+0x26>
    {
        return LORAMAC_STATUS_BUSY;
 800a058:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800a05a:	4620      	mov	r0, r4
 800a05c:	b007      	add	sp, #28
 800a05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800a062:	f000 fb7b 	bl	800a75c <LoRaMacConfirmQueueIsFull>
 800a066:	2800      	cmp	r0, #0
 800a068:	d1f6      	bne.n	800a058 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a06a:	f000 fb71 	bl	800a750 <LoRaMacConfirmQueueGetCnt>
 800a06e:	4601      	mov	r1, r0
 800a070:	b918      	cbnz	r0, 800a07a <LoRaMacMlmeRequest+0x3e>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800a072:	485f      	ldr	r0, [pc, #380]	; (800a1f0 <LoRaMacMlmeRequest+0x1b4>)
 800a074:	2214      	movs	r2, #20
 800a076:	f008 fcb7 	bl	80129e8 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a07a:	4e5e      	ldr	r6, [pc, #376]	; (800a1f4 <LoRaMacMlmeRequest+0x1b8>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a07c:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a080:	2201      	movs	r2, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a082:	f043 0304 	orr.w	r3, r3, #4
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a086:	f886 2459 	strb.w	r2, [r6, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a08a:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
    queueElement.Request = mlmeRequest->Type;
 800a08e:	782b      	ldrb	r3, [r5, #0]
 800a090:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.RestrictCommonReadyToHandle = false;
 800a094:	2100      	movs	r1, #0
    switch( mlmeRequest->Type )
 800a096:	3b01      	subs	r3, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a098:	f88d 2005 	strb.w	r2, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800a09c:	f88d 1007 	strb.w	r1, [sp, #7]
    queueElement.ReadyToHandle = false;
 800a0a0:	f88d 1006 	strb.w	r1, [sp, #6]
    switch( mlmeRequest->Type )
 800a0a4:	2b0c      	cmp	r3, #12
 800a0a6:	f200 8099 	bhi.w	800a1dc <LoRaMacMlmeRequest+0x1a0>
 800a0aa:	e8df f003 	tbb	[pc, r3]
 800a0ae:	9707      	.short	0x9707
 800a0b0:	976d6497 	.word	0x976d6497
 800a0b4:	97749797 	.word	0x97749797
 800a0b8:	788b      	.short	0x788b
 800a0ba:	87          	.byte	0x87
 800a0bb:	00          	.byte	0x00
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800a0bc:	f8d6 4340 	ldr.w	r4, [r6, #832]	; 0x340
 800a0c0:	f014 0720 	ands.w	r7, r4, #32
 800a0c4:	d1c8      	bne.n	800a058 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800a0c6:	f895 8004 	ldrb.w	r8, [r5, #4]
 800a0ca:	f1b8 0f02 	cmp.w	r8, #2
 800a0ce:	d12f      	bne.n	800a130 <LoRaMacMlmeRequest+0xf4>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a0d0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800a1f8 <LoRaMacMlmeRequest+0x1bc>
                ResetMacParameters( );
 800a0d4:	f7fd fde6 	bl	8007ca4 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a0d8:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800a0dc:	f898 004c 	ldrb.w	r0, [r8, #76]	; 0x4c
 800a0e0:	463a      	mov	r2, r7
 800a0e2:	f009 fdfe 	bl	8013ce2 <RegionAlternateDr>
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a0e6:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a0e8:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
                status = SendReJoinReq( JOIN_REQ );
 800a0ec:	20ff      	movs	r0, #255	; 0xff
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a0ee:	f88d 3005 	strb.w	r3, [sp, #5]
                status = SendReJoinReq( JOIN_REQ );
 800a0f2:	f7fe fcf3 	bl	8008adc <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	b140      	cbz	r0, 800a10c <LoRaMacMlmeRequest+0xd0>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800a0fa:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800a0fe:	f898 004c 	ldrb.w	r0, [r8, #76]	; 0x4c
 800a102:	2201      	movs	r2, #1
 800a104:	f009 fded 	bl	8013ce2 <RegionAlternateDr>
 800a108:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a10c:	f8d6 3490 	ldr.w	r3, [r6, #1168]	; 0x490
 800a110:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800a112:	2c00      	cmp	r4, #0
 800a114:	d066      	beq.n	800a1e4 <LoRaMacMlmeRequest+0x1a8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a116:	f000 fb1b 	bl	800a750 <LoRaMacConfirmQueueGetCnt>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d19d      	bne.n	800a05a <LoRaMacMlmeRequest+0x1e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a11e:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
            MacCtx.NodeAckRequested = false;
 800a122:	f886 041a 	strb.w	r0, [r6, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a126:	f360 0382 	bfi	r3, r0, #2, #1
 800a12a:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
 800a12e:	e794      	b.n	800a05a <LoRaMacMlmeRequest+0x1e>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800a130:	f1b8 0f01 	cmp.w	r8, #1
 800a134:	f04f 0402 	mov.w	r4, #2
 800a138:	d1e8      	bne.n	800a10c <LoRaMacMlmeRequest+0xd0>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800a13a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800a1f8 <LoRaMacMlmeRequest+0x1bc>
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a13e:	f88d 4014 	strb.w	r4, [sp, #20]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a142:	f899 004c 	ldrb.w	r0, [r9, #76]	; 0x4c
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800a146:	f889 7189 	strb.w	r7, [r9, #393]	; 0x189
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a14a:	a902      	add	r1, sp, #8
 800a14c:	f009 fd5e 	bl	8013c0c <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800a150:	792b      	ldrb	r3, [r5, #4]
 800a152:	f889 319c 	strb.w	r3, [r9, #412]	; 0x19c
                MacCtx.MacCallbacks->MacProcessNotify( );
 800a156:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a15a:	f88d 7005 	strb.w	r7, [sp, #5]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800a15e:	68db      	ldr	r3, [r3, #12]
                queueElement.ReadyToHandle = true;
 800a160:	f88d 8006 	strb.w	r8, [sp, #6]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800a164:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a166:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
 800a16a:	f043 0320 	orr.w	r3, r3, #32
 800a16e:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
            status = LORAMAC_STATUS_OK;
 800a172:	2400      	movs	r4, #0
 800a174:	e7ca      	b.n	800a10c <LoRaMacMlmeRequest+0xd0>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a176:	2200      	movs	r2, #0
 800a178:	4669      	mov	r1, sp
 800a17a:	2002      	movs	r0, #2
 800a17c:	f000 f910 	bl	800a3a0 <LoRaMacCommandsAddCmd>
 800a180:	2800      	cmp	r0, #0
 800a182:	d0f6      	beq.n	800a172 <LoRaMacMlmeRequest+0x136>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a184:	2413      	movs	r4, #19
 800a186:	e7c1      	b.n	800a10c <LoRaMacMlmeRequest+0xd0>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a188:	7b2a      	ldrb	r2, [r5, #12]
 800a18a:	68a9      	ldr	r1, [r5, #8]
 800a18c:	88a8      	ldrh	r0, [r5, #4]
 800a18e:	f7fe fccf 	bl	8008b30 <SetTxContinuousWave>
 800a192:	4604      	mov	r4, r0
            break;
 800a194:	e7ba      	b.n	800a10c <LoRaMacMlmeRequest+0xd0>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a196:	2200      	movs	r2, #0
 800a198:	4669      	mov	r1, sp
 800a19a:	200d      	movs	r0, #13
 800a19c:	e7ee      	b.n	800a17c <LoRaMacMlmeRequest+0x140>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800a19e:	4b16      	ldr	r3, [pc, #88]	; (800a1f8 <LoRaMacMlmeRequest+0x1bc>)
 800a1a0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a1a4:	b9d3      	cbnz	r3, 800a1dc <LoRaMacMlmeRequest+0x1a0>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800a1a6:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800a1a8:	f004 0007 	and.w	r0, r4, #7
 800a1ac:	f009 fae1 	bl	8013772 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800a1b0:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	4669      	mov	r1, sp
 800a1b8:	2010      	movs	r0, #16
 800a1ba:	e7df      	b.n	800a17c <LoRaMacMlmeRequest+0x140>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4669      	mov	r1, sp
 800a1c0:	2012      	movs	r0, #18
 800a1c2:	e7db      	b.n	800a17c <LoRaMacMlmeRequest+0x140>
            queueElement.RestrictCommonReadyToHandle = true;
 800a1c4:	f88d 2007 	strb.w	r2, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800a1c8:	f009 fac4 	bl	8013754 <LoRaMacClassBIsAcquisitionInProgress>
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	b938      	cbnz	r0, 800a1e0 <LoRaMacMlmeRequest+0x1a4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800a1d0:	f009 fabd 	bl	801374e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f009 fabf 	bl	8013758 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800a1da:	e797      	b.n	800a10c <LoRaMacMlmeRequest+0xd0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a1dc:	2402      	movs	r4, #2
 800a1de:	e795      	b.n	800a10c <LoRaMacMlmeRequest+0xd0>
                status = LORAMAC_STATUS_BUSY;
 800a1e0:	2401      	movs	r4, #1
 800a1e2:	e793      	b.n	800a10c <LoRaMacMlmeRequest+0xd0>
        LoRaMacConfirmQueueAdd( &queueElement );
 800a1e4:	a801      	add	r0, sp, #4
 800a1e6:	f000 fa0b 	bl	800a600 <LoRaMacConfirmQueueAdd>
 800a1ea:	e736      	b.n	800a05a <LoRaMacMlmeRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a1ec:	2403      	movs	r4, #3
 800a1ee:	e734      	b.n	800a05a <LoRaMacMlmeRequest+0x1e>
 800a1f0:	20001638 	.word	0x20001638
 800a1f4:	200011e0 	.word	0x200011e0
 800a1f8:	200016f8 	.word	0x200016f8

0800a1fc <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800a200:	4606      	mov	r6, r0
{
 800a202:	b08d      	sub	sp, #52	; 0x34
    if( mcpsRequest == NULL )
 800a204:	b918      	cbnz	r0, 800a20e <LoRaMacMcpsRequest+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a206:	2003      	movs	r0, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800a208:	b00d      	add	sp, #52	; 0x34
 800a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	6103      	str	r3, [r0, #16]
    if( LoRaMacIsBusy( ) == true )
 800a212:	f7fe f96d 	bl	80084f0 <LoRaMacIsBusy>
 800a216:	4605      	mov	r5, r0
 800a218:	2800      	cmp	r0, #0
 800a21a:	d173      	bne.n	800a304 <LoRaMacMcpsRequest+0x108>
    McpsReq_t request = *mcpsRequest;
 800a21c:	4637      	mov	r7, r6
 800a21e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a220:	4f56      	ldr	r7, [pc, #344]	; (800a37c <LoRaMacMcpsRequest+0x180>)
    McpsReq_t request = *mcpsRequest;
 800a222:	f896 8000 	ldrb.w	r8, [r6]
 800a226:	f996 b00e 	ldrsb.w	fp, [r6, #14]
    macHdr.Value = 0;
 800a22a:	f88d 5008 	strb.w	r5, [sp, #8]
    McpsReq_t request = *mcpsRequest;
 800a22e:	ac07      	add	r4, sp, #28
 800a230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a232:	89b3      	ldrh	r3, [r6, #12]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800a234:	4c52      	ldr	r4, [pc, #328]	; (800a380 <LoRaMacMcpsRequest+0x184>)
    McpsReq_t request = *mcpsRequest;
 800a236:	9301      	str	r3, [sp, #4]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a238:	2214      	movs	r2, #20
 800a23a:	4629      	mov	r1, r5
 800a23c:	f207 4044 	addw	r0, r7, #1092	; 0x444
 800a240:	f008 fbd2 	bl	80129e8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a244:	2201      	movs	r2, #1
 800a246:	f887 2445 	strb.w	r2, [r7, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800a24a:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
 800a24e:	2a02      	cmp	r2, #2
 800a250:	d10b      	bne.n	800a26a <LoRaMacMcpsRequest+0x6e>
 800a252:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
 800a256:	2a02      	cmp	r2, #2
 800a258:	d107      	bne.n	800a26a <LoRaMacMcpsRequest+0x6e>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800a25a:	f894 218a 	ldrb.w	r2, [r4, #394]	; 0x18a
 800a25e:	b922      	cbnz	r2, 800a26a <LoRaMacMcpsRequest+0x6e>
 800a260:	f1b8 0f01 	cmp.w	r8, #1
 800a264:	bf38      	it	cc
 800a266:	f04f 0801 	movcc.w	r8, #1
    switch( request.Type )
 800a26a:	f1b8 0f01 	cmp.w	r8, #1
 800a26e:	d02c      	beq.n	800a2ca <LoRaMacMcpsRequest+0xce>
 800a270:	f1b8 0f03 	cmp.w	r8, #3
 800a274:	d02d      	beq.n	800a2d2 <LoRaMacMcpsRequest+0xd6>
 800a276:	f1b8 0f00 	cmp.w	r8, #0
 800a27a:	d13b      	bne.n	800a2f4 <LoRaMacMcpsRequest+0xf8>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a27c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a280:	2102      	movs	r1, #2
 800a282:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = request.Req.Unconfirmed.fPort;
 800a286:	f89d 9020 	ldrb.w	r9, [sp, #32]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800a28a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a28e:	f88d 2008 	strb.w	r2, [sp, #8]
            readyToSend = true;
 800a292:	2501      	movs	r5, #1
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a294:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
 800a298:	f88d 1016 	strb.w	r1, [sp, #22]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a29c:	2202      	movs	r2, #2
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a29e:	a905      	add	r1, sp, #20
 800a2a0:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a2a4:	f88d 2014 	strb.w	r2, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2a8:	f009 fca0 	bl	8013bec <RegionGetPhyParam>
    if( ( adr == true ) &&
 800a2ac:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a2b0:	b240      	sxtb	r0, r0
    if( ( adr == true ) &&
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	b359      	cbz	r1, 800a30e <LoRaMacMcpsRequest+0x112>
 800a2b6:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800a2ba:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
    if( ( adr == true ) &&
 800a2be:	2901      	cmp	r1, #1
 800a2c0:	d122      	bne.n	800a308 <LoRaMacMcpsRequest+0x10c>
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800a2c2:	bb0b      	cbnz	r3, 800a308 <LoRaMacMcpsRequest+0x10c>
    if( readyToSend == true )
 800a2c4:	bb45      	cbnz	r5, 800a318 <LoRaMacMcpsRequest+0x11c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	e054      	b.n	800a374 <LoRaMacMcpsRequest+0x178>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a2ca:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a2ce:	2104      	movs	r1, #4
 800a2d0:	e7d7      	b.n	800a282 <LoRaMacMcpsRequest+0x86>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a2d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
            fBuffer = request.Req.Proprietary.fBuffer;
 800a2d6:	f8dd a020 	ldr.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800a2da:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a2de:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800a2e2:	f88d 3008 	strb.w	r3, [sp, #8]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800a2e6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800a2ea:	9301      	str	r3, [sp, #4]
            readyToSend = true;
 800a2ec:	2501      	movs	r5, #1
    uint8_t fPort = 0;
 800a2ee:	f04f 0900 	mov.w	r9, #0
            break;
 800a2f2:	e7cf      	b.n	800a294 <LoRaMacMcpsRequest+0x98>
    switch( request.Type )
 800a2f4:	f04f 0b00 	mov.w	fp, #0
 800a2f8:	46d9      	mov	r9, fp
 800a2fa:	e7cb      	b.n	800a294 <LoRaMacMcpsRequest+0x98>
            MacCtx.NodeAckRequested = false;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
 800a302:	e037      	b.n	800a374 <LoRaMacMcpsRequest+0x178>
        return LORAMAC_STATUS_BUSY;
 800a304:	2001      	movs	r0, #1
 800a306:	e77f      	b.n	800a208 <LoRaMacMcpsRequest+0xc>
    if( readyToSend == true )
 800a308:	b9cd      	cbnz	r5, 800a33e <LoRaMacMcpsRequest+0x142>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a30a:	2002      	movs	r0, #2
 800a30c:	e032      	b.n	800a374 <LoRaMacMcpsRequest+0x178>
    if( readyToSend == true )
 800a30e:	2d00      	cmp	r5, #0
 800a310:	d0d9      	beq.n	800a2c6 <LoRaMacMcpsRequest+0xca>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a312:	4558      	cmp	r0, fp
 800a314:	bfb8      	it	lt
 800a316:	4658      	movlt	r0, fp
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a318:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
            verify.DatarateParams.Datarate = datarate;
 800a31c:	f88d 0010 	strb.w	r0, [sp, #16]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a320:	2205      	movs	r2, #5
 800a322:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a326:	f88d 3012 	strb.w	r3, [sp, #18]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a32a:	a904      	add	r1, sp, #16
 800a32c:	f009 fc74 	bl	8013c18 <RegionVerify>
 800a330:	2800      	cmp	r0, #0
 800a332:	f43f af68 	beq.w	800a206 <LoRaMacMcpsRequest+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a336:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a33a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 800a33e:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
    if( startTimeInMs != 0 )
 800a342:	b138      	cbz	r0, 800a354 <LoRaMacMcpsRequest+0x158>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800a344:	f008 fc58 	bl	8012bf8 <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800a348:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
            Nvm.MacGroup1.SrvAckRequested = false;
 800a34c:	bf84      	itt	hi
 800a34e:	2300      	movhi	r3, #0
 800a350:	f884 3046 	strbhi.w	r3, [r4, #70]	; 0x46
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800a354:	9b01      	ldr	r3, [sp, #4]
 800a356:	4652      	mov	r2, sl
 800a358:	4649      	mov	r1, r9
 800a35a:	a802      	add	r0, sp, #8
 800a35c:	f7fe fb3e 	bl	80089dc <Send>
        if( status == LORAMAC_STATUS_OK )
 800a360:	2800      	cmp	r0, #0
 800a362:	d1cb      	bne.n	800a2fc <LoRaMacMcpsRequest+0x100>
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a364:	f897 348d 	ldrb.w	r3, [r7, #1165]	; 0x48d
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800a368:	f887 8444 	strb.w	r8, [r7, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a36c:	f043 0301 	orr.w	r3, r3, #1
 800a370:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a374:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800a378:	6133      	str	r3, [r6, #16]
    return status;
 800a37a:	e745      	b.n	800a208 <LoRaMacMcpsRequest+0xc>
 800a37c:	200011e0 	.word	0x200011e0
 800a380:	200016f8 	.word	0x200016f8

0800a384 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a384:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a386:	4c05      	ldr	r4, [pc, #20]	; (800a39c <LoRaMacCommandsInit+0x18>)
 800a388:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a38c:	4620      	mov	r0, r4
 800a38e:	2100      	movs	r1, #0
 800a390:	f008 fb2a 	bl	80129e8 <memset1>
    list->First = NULL;
 800a394:	2000      	movs	r0, #0
    list->Last = NULL;
 800a396:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a39a:	bd10      	pop	{r4, pc}
 800a39c:	20001e10 	.word	0x20001e10

0800a3a0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800a3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	4616      	mov	r6, r2
    if( payload == NULL )
 800a3a8:	2900      	cmp	r1, #0
 800a3aa:	d040      	beq.n	800a42e <LoRaMacCommandsAddCmd+0x8e>
 800a3ac:	4b23      	ldr	r3, [pc, #140]	; (800a43c <LoRaMacCommandsAddCmd+0x9c>)
 800a3ae:	2400      	movs	r4, #0
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a3b0:	f103 0c01 	add.w	ip, r3, #1
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	0122      	lsls	r2, r4, #4
 800a3b8:	3310      	adds	r3, #16
        if( mem[size] != 0x00 )
 800a3ba:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800a3be:	bbc7      	cbnz	r7, 800a432 <LoRaMacCommandsAddCmd+0x92>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a3c0:	4298      	cmp	r0, r3
 800a3c2:	d1fa      	bne.n	800a3ba <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800a3c4:	4d1e      	ldr	r5, [pc, #120]	; (800a440 <LoRaMacCommandsAddCmd+0xa0>)
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	b90b      	cbnz	r3, 800a3ce <LoRaMacCommandsAddCmd+0x2e>
        list->First = element;
 800a3ca:	f8c5 c000 	str.w	ip, [r5]
    if( list->Last )
 800a3ce:	686b      	ldr	r3, [r5, #4]
 800a3d0:	b10b      	cbz	r3, 800a3d6 <LoRaMacCommandsAddCmd+0x36>
        list->Last->Next = element;
 800a3d2:	f8c3 c000 	str.w	ip, [r3]
    element->Next = NULL;
 800a3d6:	18ab      	adds	r3, r5, r2
 800a3d8:	f04f 0900 	mov.w	r9, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 800a3dc:	3401      	adds	r4, #1
    element->Next = NULL;
 800a3de:	f8c3 9008 	str.w	r9, [r3, #8]
    newCmd->CID = cid;
 800a3e2:	f883 800c 	strb.w	r8, [r3, #12]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a3e6:	f102 000d 	add.w	r0, r2, #13
    newCmd->PayloadSize = payloadSize;
 800a3ea:	0123      	lsls	r3, r4, #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a3ec:	b2b2      	uxth	r2, r6
 800a3ee:	4428      	add	r0, r5
    newCmd->PayloadSize = payloadSize;
 800a3f0:	50ee      	str	r6, [r5, r3]
    list->Last = element;
 800a3f2:	f8c5 c004 	str.w	ip, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a3f6:	f008 fae3 	bl	80129c0 <memcpy1>
    switch( cid )
 800a3fa:	f1b8 0f11 	cmp.w	r8, #17
 800a3fe:	d814      	bhi.n	800a42a <LoRaMacCommandsAddCmd+0x8a>
 800a400:	4b10      	ldr	r3, [pc, #64]	; (800a444 <LoRaMacCommandsAddCmd+0xa4>)
 800a402:	2001      	movs	r0, #1
 800a404:	fa00 f808 	lsl.w	r8, r0, r8
 800a408:	ea18 0f03 	tst.w	r8, r3
 800a40c:	bf14      	ite	ne
 800a40e:	4603      	movne	r3, r0
 800a410:	464b      	moveq	r3, r9
    newCmd->IsSticky = IsSticky( cid );
 800a412:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 800a416:	7123      	strb	r3, [r4, #4]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a418:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800a41c:	3301      	adds	r3, #1
 800a41e:	441e      	add	r6, r3
 800a420:	f8c5 6208 	str.w	r6, [r5, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a424:	4638      	mov	r0, r7
 800a426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a42a:	464b      	mov	r3, r9
 800a42c:	e7f1      	b.n	800a412 <LoRaMacCommandsAddCmd+0x72>
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a42e:	2701      	movs	r7, #1
 800a430:	e7f8      	b.n	800a424 <LoRaMacCommandsAddCmd+0x84>
        if( itr == NUM_OF_MAC_COMMANDS )
 800a432:	3401      	adds	r4, #1
 800a434:	2c20      	cmp	r4, #32
 800a436:	d1bb      	bne.n	800a3b0 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a438:	2702      	movs	r7, #2
 800a43a:	e7f3      	b.n	800a424 <LoRaMacCommandsAddCmd+0x84>
 800a43c:	20001e17 	.word	0x20001e17
 800a440:	20001e10 	.word	0x20001e10
 800a444:	00020720 	.word	0x00020720

0800a448 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800a448:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 800a44a:	b310      	cbz	r0, 800a492 <LoRaMacCommandsRemoveCmd+0x4a>
    curElement = list->First;
 800a44c:	4a12      	ldr	r2, [pc, #72]	; (800a498 <LoRaMacCommandsRemoveCmd+0x50>)
 800a44e:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 800a450:	4298      	cmp	r0, r3
 800a452:	d104      	bne.n	800a45e <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 800a454:	6803      	ldr	r3, [r0, #0]
 800a456:	6013      	str	r3, [r2, #0]
 800a458:	2300      	movs	r3, #0
 800a45a:	e004      	b.n	800a466 <LoRaMacCommandsRemoveCmd+0x1e>
 800a45c:	460b      	mov	r3, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a45e:	b113      	cbz	r3, 800a466 <LoRaMacCommandsRemoveCmd+0x1e>
 800a460:	6819      	ldr	r1, [r3, #0]
 800a462:	4288      	cmp	r0, r1
 800a464:	d1fa      	bne.n	800a45c <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 800a466:	6851      	ldr	r1, [r2, #4]
 800a468:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 800a46a:	bf08      	it	eq
 800a46c:	6053      	streq	r3, [r2, #4]
    if( PrevElement != NULL )
 800a46e:	b10b      	cbz	r3, 800a474 <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 800a470:	6801      	ldr	r1, [r0, #0]
 800a472:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a474:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800a478:	6881      	ldr	r1, [r0, #8]
 800a47a:	3b01      	subs	r3, #1
    element->Next = NULL;
 800a47c:	2400      	movs	r4, #0
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a47e:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 800a480:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a482:	4621      	mov	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a484:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a488:	2210      	movs	r2, #16
 800a48a:	f008 faad 	bl	80129e8 <memset1>
    return true;
 800a48e:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a490:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a492:	2001      	movs	r0, #1
 800a494:	e7fc      	b.n	800a490 <LoRaMacCommandsRemoveCmd+0x48>
 800a496:	bf00      	nop
 800a498:	20001e10 	.word	0x20001e10

0800a49c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800a49c:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a49e:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>)
 800a4a0:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a4a2:	b900      	cbnz	r0, 800a4a6 <LoRaMacCommandsRemoveNoneStickyCmds+0xa>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a4a4:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 800a4a6:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 800a4a8:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 800a4aa:	b90b      	cbnz	r3, 800a4b0 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            LoRaMacCommandsRemoveCmd( curElement );
 800a4ac:	f7ff ffcc 	bl	800a448 <LoRaMacCommandsRemoveCmd>
{
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	e7f6      	b.n	800a4a2 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800a4b4:	20001e10 	.word	0x20001e10

0800a4b8 <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a4b8:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
{
 800a4ba:	b570      	push	{r4, r5, r6, lr}
    curElement = CommandsCtx.MacCommandList.First;
 800a4bc:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a4be:	4d09      	ldr	r5, [pc, #36]	; (800a4e4 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
 800a4c0:	2401      	movs	r4, #1
 800a4c2:	b900      	cbnz	r0, 800a4c6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800a4c6:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 800a4c8:	6806      	ldr	r6, [r0, #0]
    switch( cid )
 800a4ca:	2b11      	cmp	r3, #17
 800a4cc:	d805      	bhi.n	800a4da <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
 800a4ce:	fa04 f303 	lsl.w	r3, r4, r3
 800a4d2:	422b      	tst	r3, r5
 800a4d4:	d001      	beq.n	800a4da <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
            LoRaMacCommandsRemoveCmd( curElement );
 800a4d6:	f7ff ffb7 	bl	800a448 <LoRaMacCommandsRemoveCmd>
{
 800a4da:	4630      	mov	r0, r6
 800a4dc:	e7f1      	b.n	800a4c2 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
 800a4de:	bf00      	nop
 800a4e0:	20001e10 	.word	0x20001e10
 800a4e4:	00020720 	.word	0x00020720

0800a4e8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800a4e8:	b128      	cbz	r0, 800a4f6 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800a4ea:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a4ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a4f0:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a4f6:	2001      	movs	r0, #1
}
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20001e10 	.word	0x20001e10

0800a500 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a504:	4607      	mov	r7, r0
 800a506:	460e      	mov	r6, r1
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a508:	4615      	mov	r5, r2
 800a50a:	b332      	cbz	r2, 800a55a <LoRaMacCommandsSerializeCmds+0x5a>
 800a50c:	b329      	cbz	r1, 800a55a <LoRaMacCommandsSerializeCmds+0x5a>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a50e:	4b14      	ldr	r3, [pc, #80]	; (800a560 <LoRaMacCommandsSerializeCmds+0x60>)
 800a510:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800a512:	2300      	movs	r3, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a514:	b92c      	cbnz	r4, 800a522 <LoRaMacCommandsSerializeCmds+0x22>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ffe6 	bl	800a4e8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a51c:	2000      	movs	r0, #0
}
 800a51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a522:	68a2      	ldr	r2, [r4, #8]
 800a524:	1af9      	subs	r1, r7, r3
 800a526:	3201      	adds	r2, #1
 800a528:	4291      	cmp	r1, r2
 800a52a:	d30f      	bcc.n	800a54c <LoRaMacCommandsSerializeCmds+0x4c>
            buffer[itr++] = curElement->CID;
 800a52c:	7922      	ldrb	r2, [r4, #4]
 800a52e:	54ea      	strb	r2, [r5, r3]
 800a530:	1c58      	adds	r0, r3, #1
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a532:	8922      	ldrh	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
 800a534:	fa5f f880 	uxtb.w	r8, r0
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a538:	1d61      	adds	r1, r4, #5
 800a53a:	fa55 f080 	uxtab	r0, r5, r0
 800a53e:	f008 fa3f 	bl	80129c0 <memcpy1>
            itr += curElement->PayloadSize;
 800a542:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800a544:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800a546:	4443      	add	r3, r8
 800a548:	b2db      	uxtb	r3, r3
        curElement = curElement->Next;
 800a54a:	e7e3      	b.n	800a514 <LoRaMacCommandsSerializeCmds+0x14>
        nextElement = curElement->Next;
 800a54c:	4620      	mov	r0, r4
 800a54e:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a550:	f7ff ff7a 	bl	800a448 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800a554:	2c00      	cmp	r4, #0
 800a556:	d1f9      	bne.n	800a54c <LoRaMacCommandsSerializeCmds+0x4c>
 800a558:	e7dd      	b.n	800a516 <LoRaMacCommandsSerializeCmds+0x16>
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a55a:	2001      	movs	r0, #1
 800a55c:	e7df      	b.n	800a51e <LoRaMacCommandsSerializeCmds+0x1e>
 800a55e:	bf00      	nop
 800a560:	20001e10 	.word	0x20001e10

0800a564 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800a564:	4603      	mov	r3, r0
 800a566:	b168      	cbz	r0, 800a584 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800a568:	4a07      	ldr	r2, [pc, #28]	; (800a588 <LoRaMacCommandsStickyCmdsPending+0x24>)
 800a56a:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800a56c:	2200      	movs	r2, #0
 800a56e:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a570:	b900      	cbnz	r0, 800a574 <LoRaMacCommandsStickyCmdsPending+0x10>
 800a572:	4770      	bx	lr
    {
        if( curElement->IsSticky == true )
 800a574:	7b02      	ldrb	r2, [r0, #12]
 800a576:	b11a      	cbz	r2, 800a580 <LoRaMacCommandsStickyCmdsPending+0x1c>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800a578:	2201      	movs	r2, #1
 800a57a:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a57c:	2000      	movs	r0, #0
 800a57e:	4770      	bx	lr
        }
        curElement = curElement->Next;
 800a580:	6800      	ldr	r0, [r0, #0]
 800a582:	e7f5      	b.n	800a570 <LoRaMacCommandsStickyCmdsPending+0xc>
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a584:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a586:	4770      	bx	lr
 800a588:	20001e10 	.word	0x20001e10

0800a58c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a58c:	3802      	subs	r0, #2
 800a58e:	b2c0      	uxtb	r0, r0
 800a590:	2811      	cmp	r0, #17
 800a592:	bf9a      	itte	ls
 800a594:	4b01      	ldrls	r3, [pc, #4]	; (800a59c <LoRaMacCommandsGetCmdSize+0x10>)
 800a596:	5c18      	ldrbls	r0, [r3, r0]
{
 800a598:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a59a:	4770      	bx	lr
 800a59c:	0801a0d1 	.word	0x0801a0d1

0800a5a0 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a5a0:	b530      	push	{r4, r5, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <GetElement.constprop.0+0x30>)
 800a5a4:	f893 2020 	ldrb.w	r2, [r3, #32]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	4608      	mov	r0, r1
    if( count == 0 )
 800a5ac:	b172      	cbz	r2, 800a5cc <GetElement.constprop.0+0x2c>
 800a5ae:	2100      	movs	r1, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a5b0:	331c      	adds	r3, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800a5b2:	7805      	ldrb	r5, [r0, #0]
 800a5b4:	42a5      	cmp	r5, r4
 800a5b6:	d008      	beq.n	800a5ca <GetElement.constprop.0+0x2a>
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a5b8:	3101      	adds	r1, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a5ba:	4298      	cmp	r0, r3
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a5bc:	b2cd      	uxtb	r5, r1
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a5be:	bf0c      	ite	eq
 800a5c0:	4804      	ldreq	r0, [pc, #16]	; (800a5d4 <GetElement.constprop.0+0x34>)
        bufferPointer++;
 800a5c2:	3004      	addne	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a5c4:	42aa      	cmp	r2, r5
 800a5c6:	d8f4      	bhi.n	800a5b2 <GetElement.constprop.0+0x12>
        return NULL;
 800a5c8:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800a5ca:	bd30      	pop	{r4, r5, pc}
        return NULL;
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	e7fc      	b.n	800a5ca <GetElement.constprop.0+0x2a>
 800a5d0:	2000201c 	.word	0x2000201c
 800a5d4:	20002028 	.word	0x20002028

0800a5d8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a5d8:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a5da:	4c08      	ldr	r4, [pc, #32]	; (800a5fc <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a5dc:	2300      	movs	r3, #0
    ConfirmQueueCtx.Primitives = primitives;
 800a5de:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a5e0:	2214      	movs	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a5e2:	f104 000c 	add.w	r0, r4, #12
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a5e6:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a5e8:	f884 3020 	strb.w	r3, [r4, #32]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a5ec:	e9c4 0001 	strd	r0, r0, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a5f0:	f008 f9fa 	bl	80129e8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800a5fa:	bd10      	pop	{r4, pc}
 800a5fc:	2000201c 	.word	0x2000201c

0800a600 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a600:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a602:	4a0e      	ldr	r2, [pc, #56]	; (800a63c <LoRaMacConfirmQueueAdd+0x3c>)
 800a604:	f892 1020 	ldrb.w	r1, [r2, #32]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a608:	2904      	cmp	r1, #4
 800a60a:	d815      	bhi.n	800a638 <LoRaMacConfirmQueueAdd+0x38>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a60c:	6893      	ldr	r3, [r2, #8]
 800a60e:	7804      	ldrb	r4, [r0, #0]
 800a610:	701c      	strb	r4, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a612:	7844      	ldrb	r4, [r0, #1]
 800a614:	705c      	strb	r4, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a616:	78c4      	ldrb	r4, [r0, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800a618:	7880      	ldrb	r0, [r0, #2]
 800a61a:	7098      	strb	r0, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a61c:	3101      	adds	r1, #1
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a61e:	70dc      	strb	r4, [r3, #3]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a620:	f882 1020 	strb.w	r1, [r2, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a624:	f102 011c 	add.w	r1, r2, #28
 800a628:	428b      	cmp	r3, r1
        bufferPointer++;
 800a62a:	bf14      	ite	ne
 800a62c:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a62e:	f102 030c 	addeq.w	r3, r2, #12
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a632:	6093      	str	r3, [r2, #8]

    return true;
 800a634:	2001      	movs	r0, #1
}
 800a636:	bd10      	pop	{r4, pc}
        return false;
 800a638:	2000      	movs	r0, #0
 800a63a:	e7fc      	b.n	800a636 <LoRaMacConfirmQueueAdd+0x36>
 800a63c:	2000201c 	.word	0x2000201c

0800a640 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a640:	4b09      	ldr	r3, [pc, #36]	; (800a668 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a642:	f893 0020 	ldrb.w	r0, [r3, #32]
    if( count == 0 )
 800a646:	b168      	cbz	r0, 800a664 <LoRaMacConfirmQueueRemoveFirst+0x24>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a648:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a64a:	f103 011c 	add.w	r1, r3, #28
 800a64e:	428a      	cmp	r2, r1
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a650:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
        bufferPointer++;
 800a654:	bf14      	ite	ne
 800a656:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a658:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a65c:	f883 0020 	strb.w	r0, [r3, #32]
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a660:	605a      	str	r2, [r3, #4]

    return true;
 800a662:	2001      	movs	r0, #1
}
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	2000201c 	.word	0x2000201c

0800a66c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a66c:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a66e:	4b07      	ldr	r3, [pc, #28]	; (800a68c <LoRaMacConfirmQueueSetStatus+0x20>)
    if( count == 0 )
 800a670:	f893 2020 	ldrb.w	r2, [r3, #32]
{
 800a674:	4604      	mov	r4, r0
 800a676:	4608      	mov	r0, r1
    if( count == 0 )
 800a678:	b132      	cbz	r2, 800a688 <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a67a:	6859      	ldr	r1, [r3, #4]
 800a67c:	f7ff ff90 	bl	800a5a0 <GetElement.constprop.0>
        if( element != NULL )
 800a680:	b110      	cbz	r0, 800a688 <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800a682:	2301      	movs	r3, #1
            element->Status = status;
 800a684:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800a686:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800a688:	bd10      	pop	{r4, pc}
 800a68a:	bf00      	nop
 800a68c:	2000201c 	.word	0x2000201c

0800a690 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a690:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a692:	4b06      	ldr	r3, [pc, #24]	; (800a6ac <LoRaMacConfirmQueueGetStatus+0x1c>)
    if( count == 0 )
 800a694:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a698:	b12a      	cbz	r2, 800a6a6 <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a69a:	6859      	ldr	r1, [r3, #4]
 800a69c:	f7ff ff80 	bl	800a5a0 <GetElement.constprop.0>
        if( element != NULL )
 800a6a0:	b108      	cbz	r0, 800a6a6 <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
 800a6a2:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
 800a6a4:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	e7fc      	b.n	800a6a4 <LoRaMacConfirmQueueGetStatus+0x14>
 800a6aa:	bf00      	nop
 800a6ac:	2000201c 	.word	0x2000201c

0800a6b0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a6b0:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a6b2:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <LoRaMacConfirmQueueSetStatusCmn+0x2c>)
    if( count == 0 )
 800a6b4:	f892 1020 	ldrb.w	r1, [r2, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a6b8:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a6ba:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
    if( count == 0 )
 800a6be:	b161      	cbz	r1, 800a6da <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a6c0:	6891      	ldr	r1, [r2, #8]
                element->ReadyToHandle = true;
 800a6c2:	2401      	movs	r4, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6c4:	321c      	adds	r2, #28
            if( element->RestrictCommonReadyToHandle == false )
 800a6c6:	78dd      	ldrb	r5, [r3, #3]
            element->Status = status;
 800a6c8:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a6ca:	b905      	cbnz	r5, 800a6ce <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 800a6cc:	709c      	strb	r4, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6ce:	4293      	cmp	r3, r2
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a6d0:	bf0c      	ite	eq
 800a6d2:	4b03      	ldreq	r3, [pc, #12]	; (800a6e0 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
        bufferPointer++;
 800a6d4:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	d1f5      	bne.n	800a6c6 <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 800a6da:	bd30      	pop	{r4, r5, pc}
 800a6dc:	2000201c 	.word	0x2000201c
 800a6e0:	20002028 	.word	0x20002028

0800a6e4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800a6e4:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a6e6:	4b04      	ldr	r3, [pc, #16]	; (800a6f8 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800a6e8:	6859      	ldr	r1, [r3, #4]
 800a6ea:	f7ff ff59 	bl	800a5a0 <GetElement.constprop.0>
    {
        return true;
    }
    return false;
}
 800a6ee:	3800      	subs	r0, #0
 800a6f0:	bf18      	it	ne
 800a6f2:	2001      	movne	r0, #1
 800a6f4:	bd08      	pop	{r3, pc}
 800a6f6:	bf00      	nop
 800a6f8:	2000201c 	.word	0x2000201c

0800a6fc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a6fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a700:	4e12      	ldr	r6, [pc, #72]	; (800a74c <LoRaMacConfirmQueueHandleCb+0x50>)
 800a702:	f896 8020 	ldrb.w	r8, [r6, #32]
{
 800a706:	4604      	mov	r4, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a708:	2500      	movs	r5, #0
 800a70a:	b2eb      	uxtb	r3, r5
 800a70c:	4598      	cmp	r8, r3
 800a70e:	d802      	bhi.n	800a716 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800a710:	b002      	add	sp, #8
 800a712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a716:	6873      	ldr	r3, [r6, #4]
 800a718:	7819      	ldrb	r1, [r3, #0]
 800a71a:	7021      	strb	r1, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a71c:	785a      	ldrb	r2, [r3, #1]
 800a71e:	7062      	strb	r2, [r4, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a720:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800a722:	b15f      	cbz	r7, 800a73c <LoRaMacConfirmQueueHandleCb+0x40>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a724:	6833      	ldr	r3, [r6, #0]
 800a726:	4620      	mov	r0, r4
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800a72c:	f7ff ff88 	bl	800a640 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800a730:	b917      	cbnz	r7, 800a738 <LoRaMacConfirmQueueHandleCb+0x3c>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a732:	a801      	add	r0, sp, #4
 800a734:	f7ff ff64 	bl	800a600 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a738:	3501      	adds	r5, #1
 800a73a:	e7e6      	b.n	800a70a <LoRaMacConfirmQueueHandleCb+0xe>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a73c:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a73e:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a742:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a746:	f88d 3007 	strb.w	r3, [sp, #7]
 800a74a:	e7ef      	b.n	800a72c <LoRaMacConfirmQueueHandleCb+0x30>
 800a74c:	2000201c 	.word	0x2000201c

0800a750 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800a750:	4b01      	ldr	r3, [pc, #4]	; (800a758 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a752:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a756:	4770      	bx	lr
 800a758:	2000201c 	.word	0x2000201c

0800a75c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a75c:	4b03      	ldr	r3, [pc, #12]	; (800a76c <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a75e:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
 800a762:	2804      	cmp	r0, #4
 800a764:	bf94      	ite	ls
 800a766:	2000      	movls	r0, #0
 800a768:	2001      	movhi	r0, #1
 800a76a:	4770      	bx	lr
 800a76c:	2000201c 	.word	0x2000201c

0800a770 <GetLastFcntDown.constprop.0>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800a770:	3801      	subs	r0, #1
 800a772:	2806      	cmp	r0, #6
 800a774:	d82a      	bhi.n	800a7cc <GetLastFcntDown.constprop.0+0x5c>
 800a776:	e8df f000 	tbb	[pc, r0]
 800a77a:	0c04      	.short	0x0c04
 800a77c:	211d1812 	.word	0x211d1812
 800a780:	25          	.byte	0x25
 800a781:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a782:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <GetLastFcntDown.constprop.0+0x60>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	691a      	ldr	r2, [r3, #16]
 800a788:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800a78a:	691a      	ldr	r2, [r3, #16]
            break;
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a78c:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
#endif
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800a78e:	2000      	movs	r0, #0
            break;
 800a790:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a792:	4b0f      	ldr	r3, [pc, #60]	; (800a7d0 <GetLastFcntDown.constprop.0+0x60>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	695a      	ldr	r2, [r3, #20]
 800a798:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a79a:	695a      	ldr	r2, [r3, #20]
 800a79c:	e7f6      	b.n	800a78c <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a79e:	4b0c      	ldr	r3, [pc, #48]	; (800a7d0 <GetLastFcntDown.constprop.0+0x60>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	699a      	ldr	r2, [r3, #24]
 800a7a4:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a7a6:	699a      	ldr	r2, [r3, #24]
 800a7a8:	e7f0      	b.n	800a78c <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <GetLastFcntDown.constprop.0+0x60>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 800a7b0:	600b      	str	r3, [r1, #0]
            break;
 800a7b2:	e7ec      	b.n	800a78e <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <GetLastFcntDown.constprop.0+0x60>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	e7f9      	b.n	800a7b0 <GetLastFcntDown.constprop.0+0x40>
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
 800a7bc:	4b04      	ldr	r3, [pc, #16]	; (800a7d0 <GetLastFcntDown.constprop.0+0x60>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	e7f5      	b.n	800a7b0 <GetLastFcntDown.constprop.0+0x40>
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 800a7c4:	4b02      	ldr	r3, [pc, #8]	; (800a7d0 <GetLastFcntDown.constprop.0+0x60>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ca:	e7f1      	b.n	800a7b0 <GetLastFcntDown.constprop.0+0x40>
    switch( fCntID )
 800a7cc:	2005      	movs	r0, #5
}
 800a7ce:	4770      	bx	lr
 800a7d0:	20002040 	.word	0x20002040

0800a7d4 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a7d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7d8:	b0c5      	sub	sp, #276	; 0x114
 800a7da:	e9dd 654c 	ldrd	r6, r5, [sp, #304]	; 0x130
 800a7de:	460c      	mov	r4, r1
 800a7e0:	4690      	mov	r8, r2
 800a7e2:	461f      	mov	r7, r3
    if( msg == 0 )
 800a7e4:	4681      	mov	r9, r0
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d051      	beq.n	800a88e <VerifyCmacB0.constprop.0+0xba>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a7ea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a7ee:	d850      	bhi.n	800a892 <VerifyCmacB0.constprop.0+0xbe>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a7f0:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	4668      	mov	r0, sp
 800a7f8:	f008 f8f6 	bl	80129e8 <memset1>
    b0[0] = 0x49;
 800a7fc:	2349      	movs	r3, #73	; 0x49
 800a7fe:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 800a802:	2f00      	cmp	r7, #0
 800a804:	d03e      	beq.n	800a884 <VerifyCmacB0.constprop.0+0xb0>
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
 800a806:	4b24      	ldr	r3, [pc, #144]	; (800a898 <VerifyCmacB0.constprop.0+0xc4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 800a80c:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800a810:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800a814:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[5] = dir;
 800a818:	2201      	movs	r2, #1
 800a81a:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a81e:	0a32      	lsrs	r2, r6, #8
 800a820:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a824:	0c32      	lsrs	r2, r6, #16
 800a826:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a82a:	0a2a      	lsrs	r2, r5, #8
 800a82c:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a830:	0c2a      	lsrs	r2, r5, #16
    b0[3] = 0x00;
 800a832:	2300      	movs	r3, #0
    b0[6] = devAddr & 0xFF;
 800a834:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[10] = fCnt & 0xFF;
 800a838:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a83c:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a840:	4649      	mov	r1, r9
 800a842:	4622      	mov	r2, r4
 800a844:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a846:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a848:	0e2d      	lsrs	r5, r5, #24
    b0[3] = 0x00;
 800a84a:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 800a84e:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[14] = 0x00;
 800a852:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a856:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a85a:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[15] = msgLen & 0xFF;
 800a85e:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a862:	f008 f8ad 	bl	80129c0 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800a866:	f104 0110 	add.w	r1, r4, #16
 800a86a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800a86c:	4643      	mov	r3, r8
 800a86e:	b289      	uxth	r1, r1
 800a870:	4668      	mov	r0, sp
 800a872:	f008 fe5a 	bl	801352a <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800a876:	b110      	cbz	r0, 800a87e <VerifyCmacB0.constprop.0+0xaa>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a878:	2801      	cmp	r0, #1
 800a87a:	bf18      	it	ne
 800a87c:	200e      	movne	r0, #14
}
 800a87e:	b045      	add	sp, #276	; 0x114
 800a880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        b0[1] = 0x00;
 800a884:	f88d 7001 	strb.w	r7, [sp, #1]
        b0[2] = 0x00;
 800a888:	f88d 7002 	strb.w	r7, [sp, #2]
 800a88c:	e7c4      	b.n	800a818 <VerifyCmacB0.constprop.0+0x44>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a88e:	2009      	movs	r0, #9
 800a890:	e7f5      	b.n	800a87e <VerifyCmacB0.constprop.0+0xaa>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a892:	200d      	movs	r0, #13
 800a894:	e7f3      	b.n	800a87e <VerifyCmacB0.constprop.0+0xaa>
 800a896:	bf00      	nop
 800a898:	20002040 	.word	0x20002040

0800a89c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 800a89c:	b510      	push	{r4, lr}
    if( nvm == NULL )
 800a89e:	b1a8      	cbz	r0, 800a8cc <LoRaMacCryptoInit+0x30>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800a8a0:	4c0b      	ldr	r4, [pc, #44]	; (800a8d0 <LoRaMacCryptoInit+0x34>)

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800a8a2:	2234      	movs	r2, #52	; 0x34
 800a8a4:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 800a8a6:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800a8a8:	f008 f89e 	bl	80129e8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800a8ac:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800a8ae:	4a09      	ldr	r2, [pc, #36]	; (800a8d4 <LoRaMacCryptoInit+0x38>)
 800a8b0:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8b8:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a8bc:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800a8c0:	e9c3 2207 	strd	r2, r2, [r3, #28]
 800a8c4:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a8c8:	62da      	str	r2, [r3, #44]	; 0x2c

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a8ca:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800a8cc:	2008      	movs	r0, #8
 800a8ce:	e7fc      	b.n	800a8ca <LoRaMacCryptoInit+0x2e>
 800a8d0:	20002040 	.word	0x20002040
 800a8d4:	01010100 	.word	0x01010100

0800a8d8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800a8d8:	4b02      	ldr	r3, [pc, #8]	; (800a8e4 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800a8de:	2000      	movs	r0, #0
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20002040 	.word	0x20002040

0800a8e8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800a8e8:	b130      	cbz	r0, 800a8f8 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800a8ea:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <LoRaMacCryptoGetFCntUp+0x14>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a8f8:	2009      	movs	r0, #9
}
 800a8fa:	4770      	bx	lr
 800a8fc:	20002040 	.word	0x20002040

0800a900 <LoRaMacCryptoSetMulticastReference>:
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800a900:	b178      	cbz	r0, 800a922 <LoRaMacCryptoSetMulticastReference+0x22>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800a902:	4b09      	ldr	r3, [pc, #36]	; (800a928 <LoRaMacCryptoSetMulticastReference+0x28>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f103 021c 	add.w	r2, r3, #28
 800a90a:	6202      	str	r2, [r0, #32]
 800a90c:	f103 0220 	add.w	r2, r3, #32
 800a910:	64c2      	str	r2, [r0, #76]	; 0x4c
 800a912:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a916:	3328      	adds	r3, #40	; 0x28
 800a918:	6782      	str	r2, [r0, #120]	; 0x78
 800a91a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800a91e:	2000      	movs	r0, #0
 800a920:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a922:	2009      	movs	r0, #9
}
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	20002040 	.word	0x20002040

0800a92c <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800a92c:	b513      	push	{r0, r1, r4, lr}
    if( macMsg == 0 )
 800a92e:	4604      	mov	r4, r0
 800a930:	b1c8      	cbz	r0, 800a966 <LoRaMacCryptoPrepareJoinRequest+0x3a>
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800a932:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <LoRaMacCryptoPrepareJoinRequest+0x44>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	8893      	ldrh	r3, [r2, #4]
 800a938:	3301      	adds	r3, #1
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	8093      	strh	r3, [r2, #4]
#endif
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800a93e:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a940:	f009 f8af 	bl	8013aa2 <LoRaMacSerializerJoinRequest>
 800a944:	b960      	cbnz	r0, 800a960 <LoRaMacCryptoPrepareJoinRequest+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800a946:	f104 0318 	add.w	r3, r4, #24
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	6821      	ldr	r1, [r4, #0]
 800a94e:	2301      	movs	r3, #1
 800a950:	2213      	movs	r2, #19
 800a952:	f008 fde1 	bl	8013518 <SecureElementComputeAesCmac>
 800a956:	b940      	cbnz	r0, 800a96a <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a958:	4620      	mov	r0, r4
 800a95a:	f009 f8a2 	bl	8013aa2 <LoRaMacSerializerJoinRequest>
 800a95e:	b100      	cbz	r0, 800a962 <LoRaMacCryptoPrepareJoinRequest+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800a960:	2010      	movs	r0, #16
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a962:	b002      	add	sp, #8
 800a964:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a966:	2009      	movs	r0, #9
 800a968:	e7fb      	b.n	800a962 <LoRaMacCryptoPrepareJoinRequest+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a96a:	200e      	movs	r0, #14
 800a96c:	e7f9      	b.n	800a962 <LoRaMacCryptoPrepareJoinRequest+0x36>
 800a96e:	bf00      	nop
 800a970:	20002040 	.word	0x20002040

0800a974 <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800a974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a976:	4605      	mov	r5, r0
 800a978:	b087      	sub	sp, #28
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800a97a:	461c      	mov	r4, r3
 800a97c:	b323      	cbz	r3, 800a9c8 <LoRaMacCryptoSecureMessage+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800a97e:	4e35      	ldr	r6, [pc, #212]	; (800aa54 <LoRaMacCryptoSecureMessage+0xe0>)
 800a980:	6833      	ldr	r3, [r6, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	4283      	cmp	r3, r0
 800a986:	d863      	bhi.n	800aa50 <LoRaMacCryptoSecureMessage+0xdc>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800a988:	f894 2020 	ldrb.w	r2, [r4, #32]
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800a98c:	2a00      	cmp	r2, #0
 800a98e:	bf14      	ite	ne
 800a990:	2207      	movne	r2, #7
 800a992:	2206      	moveq	r2, #6
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800a994:	4283      	cmp	r3, r0
 800a996:	d305      	bcc.n	800a9a4 <LoRaMacCryptoSecureMessage+0x30>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a998:	4620      	mov	r0, r4
 800a99a:	f009 f8b6 	bl	8013b0a <LoRaMacSerializerData>
 800a99e:	b170      	cbz	r0, 800a9be <LoRaMacCryptoSecureMessage+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800a9a0:	2010      	movs	r0, #16
 800a9a2:	e00a      	b.n	800a9ba <LoRaMacCryptoSecureMessage+0x46>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9001      	str	r0, [sp, #4]
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	68a3      	ldr	r3, [r4, #8]
 800a9ac:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800a9b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9b2:	f008 ff1d 	bl	80137f0 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d0ee      	beq.n	800a998 <LoRaMacCryptoSecureMessage+0x24>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a9ba:	b007      	add	sp, #28
 800a9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a9be:	7927      	ldrb	r7, [r4, #4]
 800a9c0:	6821      	ldr	r1, [r4, #0]
 800a9c2:	3f04      	subs	r7, #4
 800a9c4:	b2ba      	uxth	r2, r7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800a9c6:	b909      	cbnz	r1, 800a9cc <LoRaMacCryptoSecureMessage+0x58>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a9c8:	2009      	movs	r0, #9
 800a9ca:	e7f6      	b.n	800a9ba <LoRaMacCryptoSecureMessage+0x46>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a9cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a9d0:	d83c      	bhi.n	800aa4c <LoRaMacCryptoSecureMessage+0xd8>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a9d2:	68a3      	ldr	r3, [r4, #8]
    b0[6] = devAddr & 0xFF;
 800a9d4:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[0] = 0x49;
 800a9d8:	f04f 0c49 	mov.w	ip, #73	; 0x49
 800a9dc:	f88d c008 	strb.w	ip, [sp, #8]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a9e0:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800a9e4:	f88d c00f 	strb.w	ip, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a9e8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a9ec:	0e1b      	lsrs	r3, r3, #24
 800a9ee:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a9f2:	0a2b      	lsrs	r3, r5, #8
 800a9f4:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a9f8:	0c2b      	lsrs	r3, r5, #16
 800a9fa:	f88d 3014 	strb.w	r3, [sp, #20]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a9fe:	0e2b      	lsrs	r3, r5, #24
 800aa00:	f88d 3015 	strb.w	r3, [sp, #21]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800aa04:	f104 032c 	add.w	r3, r4, #44	; 0x2c
        b0[1] = 0x00;
 800aa08:	f88d 0009 	strb.w	r0, [sp, #9]
        b0[2] = 0x00;
 800aa0c:	f88d 000a 	strb.w	r0, [sp, #10]
    b0[3] = 0x00;
 800aa10:	f88d 000b 	strb.w	r0, [sp, #11]
    b0[4] = 0x00;
 800aa14:	f88d 000c 	strb.w	r0, [sp, #12]
    b0[5] = dir;
 800aa18:	f88d 000d 	strb.w	r0, [sp, #13]
    b0[14] = 0x00;
 800aa1c:	f88d 0016 	strb.w	r0, [sp, #22]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	a802      	add	r0, sp, #8
 800aa24:	2306      	movs	r3, #6
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800aa26:	f88d c010 	strb.w	ip, [sp, #16]
    b0[10] = fCnt & 0xFF;
 800aa2a:	f88d 5012 	strb.w	r5, [sp, #18]
    b0[15] = msgLen & 0xFF;
 800aa2e:	f88d 7017 	strb.w	r7, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800aa32:	f008 fd71 	bl	8013518 <SecureElementComputeAesCmac>
 800aa36:	b108      	cbz	r0, 800aa3c <LoRaMacCryptoSecureMessage+0xc8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa38:	200e      	movs	r0, #14
 800aa3a:	e7be      	b.n	800a9ba <LoRaMacCryptoSecureMessage+0x46>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f009 f864 	bl	8013b0a <LoRaMacSerializerData>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d1ac      	bne.n	800a9a0 <LoRaMacCryptoSecureMessage+0x2c>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 800aa46:	6833      	ldr	r3, [r6, #0]
 800aa48:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 800aa4a:	e7b6      	b.n	800a9ba <LoRaMacCryptoSecureMessage+0x46>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800aa4c:	200d      	movs	r0, #13
 800aa4e:	e7b4      	b.n	800a9ba <LoRaMacCryptoSecureMessage+0x46>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800aa50:	2006      	movs	r0, #6
 800aa52:	e7b2      	b.n	800a9ba <LoRaMacCryptoSecureMessage+0x46>
 800aa54:	20002040 	.word	0x20002040

0800aa58 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800aa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5c:	b086      	sub	sp, #24
 800aa5e:	4681      	mov	r9, r0
 800aa60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aa62:	4688      	mov	r8, r1
 800aa64:	4617      	mov	r7, r2
 800aa66:	461c      	mov	r4, r3
    if( macMsg == 0 )
 800aa68:	2d00      	cmp	r5, #0
 800aa6a:	d079      	beq.n	800ab60 <LoRaMacCryptoUnsecureMessage+0x108>
    uint32_t lastDown = 0;
 800aa6c:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800aa6e:	a905      	add	r1, sp, #20
 800aa70:	4610      	mov	r0, r2
    uint32_t lastDown = 0;
 800aa72:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800aa74:	f7ff fe7c 	bl	800a770 <GetLastFcntDown.constprop.0>
 800aa78:	b118      	cbz	r0, 800aa82 <LoRaMacCryptoUnsecureMessage+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800aa7a:	2006      	movs	r0, #6
#endif

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800aa7c:	b006      	add	sp, #24
 800aa7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( currentDown > lastDown ) ||
 800aa82:	9b05      	ldr	r3, [sp, #20]
 800aa84:	429c      	cmp	r4, r3
 800aa86:	d801      	bhi.n	800aa8c <LoRaMacCryptoUnsecureMessage+0x34>
 800aa88:	3301      	adds	r3, #1
 800aa8a:	d1f6      	bne.n	800aa7a <LoRaMacCryptoUnsecureMessage+0x22>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f008 ffad 	bl	80139ec <LoRaMacParserData>
 800aa92:	4606      	mov	r6, r0
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d165      	bne.n	800ab64 <LoRaMacCryptoUnsecureMessage+0x10c>
        if( KeyAddrList[i].AddrID == addrID )
 800aa98:	4833      	ldr	r0, [pc, #204]	; (800ab68 <LoRaMacCryptoUnsecureMessage+0x110>)
 800aa9a:	f810 3026 	ldrb.w	r3, [r0, r6, lsl #2]
 800aa9e:	454b      	cmp	r3, r9
 800aaa0:	d104      	bne.n	800aaac <LoRaMacCryptoUnsecureMessage+0x54>
    if( address != macMsg->FHDR.DevAddr )
 800aaa2:	68ab      	ldr	r3, [r5, #8]
 800aaa4:	4543      	cmp	r3, r8
 800aaa6:	d006      	beq.n	800aab6 <LoRaMacCryptoUnsecureMessage+0x5e>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800aaa8:	2002      	movs	r0, #2
 800aaaa:	e7e7      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800aaac:	3601      	adds	r6, #1
 800aaae:	2e05      	cmp	r6, #5
 800aab0:	d1f3      	bne.n	800aa9a <LoRaMacCryptoUnsecureMessage+0x42>
 800aab2:	200b      	movs	r0, #11
 800aab4:	e7e2      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800aab6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800ab6c <LoRaMacCryptoUnsecureMessage+0x114>
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800aaba:	7b2b      	ldrb	r3, [r5, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800aabc:	f8d9 2000 	ldr.w	r2, [r9]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800aac0:	7929      	ldrb	r1, [r5, #4]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800aac2:	7892      	ldrb	r2, [r2, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800aac4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        isAck = false;
 800aac8:	2a00      	cmp	r2, #0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800aaca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800aacc:	f896 a001 	ldrb.w	sl, [r6, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800aad0:	f8cd 8000 	str.w	r8, [sp]
 800aad4:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800aad8:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800aadc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800aae0:	78b2      	ldrb	r2, [r6, #2]
 800aae2:	6828      	ldr	r0, [r5, #0]
 800aae4:	bf08      	it	eq
 800aae6:	2300      	moveq	r3, #0
 800aae8:	b289      	uxth	r1, r1
 800aaea:	f7ff fe73 	bl	800a7d4 <VerifyCmacB0.constprop.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d1c4      	bne.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
    if( macMsg->FPort == 0 )
 800aaf2:	f895 3020 	ldrb.w	r3, [r5, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800aaf6:	9401      	str	r4, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800aaf8:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800aafa:	f04f 0301 	mov.w	r3, #1
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	bf14      	ite	ne
 800ab02:	4652      	movne	r2, sl
 800ab04:	2206      	moveq	r2, #6
 800ab06:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ab0a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ab0c:	4643      	mov	r3, r8
 800ab0e:	f008 fe6f 	bl	80137f0 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d1b2      	bne.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
    switch( fCntID )
 800ab16:	3f01      	subs	r7, #1
 800ab18:	2f06      	cmp	r7, #6
 800ab1a:	d8af      	bhi.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
 800ab1c:	e8df f007 	tbb	[pc, r7]
 800ab20:	100c0804 	.word	0x100c0804
 800ab24:	1814      	.short	0x1814
 800ab26:	1c          	.byte	0x1c
 800ab27:	00          	.byte	0x00
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800ab28:	f8d9 3000 	ldr.w	r3, [r9]
 800ab2c:	611c      	str	r4, [r3, #16]
            break;
 800ab2e:	e7a5      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800ab30:	f8d9 3000 	ldr.w	r3, [r9]
 800ab34:	615c      	str	r4, [r3, #20]
            break;
 800ab36:	e7a1      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800ab38:	f8d9 3000 	ldr.w	r3, [r9]
 800ab3c:	619c      	str	r4, [r3, #24]
            break;
 800ab3e:	e79d      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800ab40:	f8d9 3000 	ldr.w	r3, [r9]
 800ab44:	61dc      	str	r4, [r3, #28]
            break;
 800ab46:	e799      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
 800ab48:	f8d9 3000 	ldr.w	r3, [r9]
 800ab4c:	621c      	str	r4, [r3, #32]
            break;
 800ab4e:	e795      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
 800ab50:	f8d9 3000 	ldr.w	r3, [r9]
 800ab54:	625c      	str	r4, [r3, #36]	; 0x24
            break;
 800ab56:	e791      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 800ab58:	f8d9 3000 	ldr.w	r3, [r9]
 800ab5c:	629c      	str	r4, [r3, #40]	; 0x28
            break;
 800ab5e:	e78d      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab60:	2009      	movs	r0, #9
 800ab62:	e78b      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ab64:	200f      	movs	r0, #15
 800ab66:	e789      	b.n	800aa7c <LoRaMacCryptoUnsecureMessage+0x24>
 800ab68:	2000024d 	.word	0x2000024d
 800ab6c:	20002040 	.word	0x20002040

0800ab70 <LoRaMacCryptoSetKey>:
{
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ab74:	f008 fcef 	bl	8013556 <SecureElementSetKey>
 800ab78:	4604      	mov	r4, r0
 800ab7a:	b950      	cbnz	r0, 800ab92 <LoRaMacCryptoSetKey+0x22>
    if( keyID == APP_KEY )
 800ab7c:	b955      	cbnz	r5, 800ab94 <LoRaMacCryptoSetKey+0x24>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ab7e:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <LoRaMacCryptoSetKey+0x28>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4601      	mov	r1, r0
 800ab84:	7898      	ldrb	r0, [r3, #2]
 800ab86:	f008 fec8 	bl	801391a <LoRaMacCryptoDeriveMcRootKey>
 800ab8a:	b910      	cbnz	r0, 800ab92 <LoRaMacCryptoSetKey+0x22>
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800ab8c:	f008 fe91 	bl	80138b2 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ab90:	b100      	cbz	r0, 800ab94 <LoRaMacCryptoSetKey+0x24>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ab92:	240e      	movs	r4, #14
}
 800ab94:	4620      	mov	r0, r4
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	20002040 	.word	0x20002040

0800ab9c <LoRaMacCryptoHandleJoinAccept>:
{
 800ab9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aba0:	4680      	mov	r8, r0
 800aba2:	b08f      	sub	sp, #60	; 0x3c
 800aba4:	460c      	mov	r4, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800aba6:	4617      	mov	r7, r2
 800aba8:	2a00      	cmp	r2, #0
 800abaa:	d06d      	beq.n	800ac88 <LoRaMacCryptoHandleJoinAccept+0xec>
 800abac:	2900      	cmp	r1, #0
 800abae:	d06b      	beq.n	800ac88 <LoRaMacCryptoHandleJoinAccept+0xec>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800abb0:	2500      	movs	r5, #0
 800abb2:	4629      	mov	r1, r5
 800abb4:	221d      	movs	r2, #29
 800abb6:	a806      	add	r0, sp, #24
 800abb8:	9505      	str	r5, [sp, #20]
 800abba:	f00c fe60 	bl	801787e <memset>
    uint8_t versionMinor         = 0;
 800abbe:	f88d 5013 	strb.w	r5, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800abc2:	4d35      	ldr	r5, [pc, #212]	; (800ac98 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800abc4:	682b      	ldr	r3, [r5, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800abc6:	f10d 0914 	add.w	r9, sp, #20
    uint16_t nonce               = CryptoNvm->DevNonce;
 800abca:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800abcc:	f8cd 9004 	str.w	r9, [sp, #4]
 800abd0:	f10d 0313 	add.w	r3, sp, #19
 800abd4:	9302      	str	r3, [sp, #8]
 800abd6:	793b      	ldrb	r3, [r7, #4]
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	4632      	mov	r2, r6
 800abde:	4621      	mov	r1, r4
 800abe0:	4640      	mov	r0, r8
 800abe2:	f008 fcd9 	bl	8013598 <SecureElementProcessJoinAccept>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d150      	bne.n	800ac8c <LoRaMacCryptoHandleJoinAccept+0xf0>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800abea:	4649      	mov	r1, r9
 800abec:	793a      	ldrb	r2, [r7, #4]
 800abee:	6838      	ldr	r0, [r7, #0]
 800abf0:	f007 fee6 	bl	80129c0 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800abf4:	4638      	mov	r0, r7
 800abf6:	f008 feab 	bl	8013950 <LoRaMacParserJoinAccept>
 800abfa:	4601      	mov	r1, r0
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d147      	bne.n	800ac90 <LoRaMacCryptoHandleJoinAccept+0xf4>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ac00:	7a3c      	ldrb	r4, [r7, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ac02:	79fa      	ldrb	r2, [r7, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ac04:	79bb      	ldrb	r3, [r7, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ac06:	0424      	lsls	r4, r4, #16
 800ac08:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800ac0c:	431c      	orrs	r4, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	689a      	ldr	r2, [r3, #8]
 800ac12:	42a2      	cmp	r2, r4
 800ac14:	d03e      	beq.n	800ac94 <LoRaMacCryptoHandleJoinAccept+0xf8>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ac16:	f89d 0013 	ldrb.w	r0, [sp, #19]
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ac1a:	609c      	str	r4, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ac1c:	f008 fe7d 	bl	801391a <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac20:	bb78      	cbnz	r0, 800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
    if( keyID != MC_ROOT_KEY )
 800ac22:	f008 fe46 	bl	80138b2 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac26:	bb60      	cbnz	r0, 800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
        netID = ( uint32_t )macMsg->NetID[0];
 800ac28:	7a7a      	ldrb	r2, [r7, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ac2a:	7abb      	ldrb	r3, [r7, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ac2c:	7aff      	ldrb	r7, [r7, #11]
 800ac2e:	043f      	lsls	r7, r7, #16
 800ac30:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800ac34:	4317      	orrs	r7, r2
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ac36:	4633      	mov	r3, r6
 800ac38:	463a      	mov	r2, r7
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	2007      	movs	r0, #7
 800ac3e:	f008 fdad 	bl	801379c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac42:	b9f0      	cbnz	r0, 800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
 800ac44:	4633      	mov	r3, r6
 800ac46:	463a      	mov	r2, r7
 800ac48:	4621      	mov	r1, r4
 800ac4a:	2006      	movs	r0, #6
 800ac4c:	f008 fda6 	bl	801379c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac50:	b9b8      	cbnz	r0, 800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 800ac52:	4633      	mov	r3, r6
 800ac54:	463a      	mov	r2, r7
 800ac56:	4621      	mov	r1, r4
 800ac58:	2004      	movs	r0, #4
 800ac5a:	f008 fd9f 	bl	801379c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac5e:	b980      	cbnz	r0, 800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 800ac60:	4633      	mov	r3, r6
 800ac62:	463a      	mov	r2, r7
 800ac64:	4621      	mov	r1, r4
 800ac66:	2005      	movs	r0, #5
 800ac68:	f008 fd98 	bl	801379c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac6c:	b948      	cbnz	r0, 800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800ac74:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ac76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ac7a:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntUp = 0;
 800ac7e:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ac80:	619a      	str	r2, [r3, #24]
}
 800ac82:	b00f      	add	sp, #60	; 0x3c
 800ac84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac88:	2009      	movs	r0, #9
 800ac8a:	e7fa      	b.n	800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac8c:	200e      	movs	r0, #14
 800ac8e:	e7f8      	b.n	800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ac90:	200f      	movs	r0, #15
 800ac92:	e7f6      	b.n	800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ac94:	2003      	movs	r0, #3
 800ac96:	e7f4      	b.n	800ac82 <LoRaMacCryptoHandleJoinAccept+0xe6>
 800ac98:	20002040 	.word	0x20002040

0800ac9c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800ac9c:	4800      	ldr	r0, [pc, #0]	; (800aca0 <RegionGetVersion+0x4>)
 800ac9e:	4770      	bx	lr
 800aca0:	02010001 	.word	0x02010001

0800aca4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800aca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca8:	b091      	sub	sp, #68	; 0x44
 800acaa:	4615      	mov	r5, r2
 800acac:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800acb6:	9309      	str	r3, [sp, #36]	; 0x24
 800acb8:	460c      	mov	r4, r1
 800acba:	4606      	mov	r6, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800acbc:	f007 ff95 	bl	8012bea <TimerGetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800acc0:	4a68      	ldr	r2, [pc, #416]	; (800ae64 <RegionCommonUpdateBandTimeOff+0x1c0>)
 800acc2:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 800ae68 <RegionCommonUpdateBandTimeOff+0x1c4>
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800acc6:	9005      	str	r0, [sp, #20]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800acc8:	f5a8 33f6 	sub.w	r3, r8, #125952	; 0x1ec00
 800accc:	3b30      	subs	r3, #48	; 0x30
 800acce:	fbb3 f3f2 	udiv	r3, r3, r2
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800acd2:	4353      	muls	r3, r2
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800acd4:	f503 32f6 	add.w	r2, r3, #125952	; 0x1ec00
 800acd8:	3230      	adds	r2, #48	; 0x30
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800acda:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800acde:	f503 73c0 	add.w	r3, r3, #384	; 0x180
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ace2:	9206      	str	r2, [sp, #24]
 800ace4:	2218      	movs	r2, #24
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ace6:	9303      	str	r3, [sp, #12]
 800ace8:	fb12 4305 	smlabb	r3, r2, r5, r4
 800acec:	9308      	str	r3, [sp, #32]
    uint8_t validBands = 0;
 800acee:	2500      	movs	r5, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800acf0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    for( uint8_t i = 0; i < nbBands; i++ )
 800acf4:	9b08      	ldr	r3, [sp, #32]
 800acf6:	42a3      	cmp	r3, r4
 800acf8:	d107      	bne.n	800ad0a <RegionCommonUpdateBandTimeOff+0x66>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800acfa:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
 800acfc:	bf14      	ite	ne
 800acfe:	4650      	movne	r0, sl
 800ad00:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 800ad04:	b011      	add	sp, #68	; 0x44
 800ad06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800ad0a:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800ad0e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800ad12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad14:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 800ad18:	4640      	mov	r0, r8
 800ad1a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800ad1e:	f007 fef6 	bl	8012b0e <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800ad22:	f8b4 9000 	ldrh.w	r9, [r4]
    if( joined == false )
 800ad26:	b96e      	cbnz	r6, 800ad44 <RegionCommonUpdateBandTimeOff+0xa0>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800ad28:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
 800ad2c:	d35b      	bcc.n	800ade6 <RegionCommonUpdateBandTimeOff+0x142>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800ad2e:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800ad32:	f242 7310 	movw	r3, #10000	; 0x2710
 800ad36:	4590      	cmp	r8, r2
 800ad38:	bf98      	it	ls
 800ad3a:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800ad3e:	4599      	cmp	r9, r3
 800ad40:	bf38      	it	cc
 800ad42:	4699      	movcc	r9, r3
    if( dutyCycle == 0 )
 800ad44:	464b      	mov	r3, r9
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	bf38      	it	cc
 800ad4a:	2301      	movcc	r3, #1
 800ad4c:	9307      	str	r3, [sp, #28]
    if( joined == false )
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	d152      	bne.n	800adf8 <RegionCommonUpdateBandTimeOff+0x154>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ad52:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 800ad56:	d148      	bne.n	800adea <RegionCommonUpdateBandTimeOff+0x146>
            band->LastMaxCreditAssignTime = elapsedTime;
 800ad58:	60a0      	str	r0, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ad5a:	465f      	mov	r7, fp
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800ad5c:	68a1      	ldr	r1, [r4, #8]
 800ad5e:	a80e      	add	r0, sp, #56	; 0x38
 800ad60:	f007 fef4 	bl	8012b4c <SysTimeFromMs>
 800ad64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800ad6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad6e:	a80c      	add	r0, sp, #48	; 0x30
 800ad70:	f007 fe5c 	bl	8012a2c <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800ad74:	9b04      	ldr	r3, [sp, #16]
 800ad76:	b90b      	cbnz	r3, 800ad7c <RegionCommonUpdateBandTimeOff+0xd8>
 800ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7a:	b133      	cbz	r3, 800ad8a <RegionCommonUpdateBandTimeOff+0xe6>
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	42bb      	cmp	r3, r7
 800ad80:	d103      	bne.n	800ad8a <RegionCommonUpdateBandTimeOff+0xe6>
            ( band->MaxTimeCredits != maxCredits ) ||
 800ad82:	4b3a      	ldr	r3, [pc, #232]	; (800ae6c <RegionCommonUpdateBandTimeOff+0x1c8>)
 800ad84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d90d      	bls.n	800ada6 <RegionCommonUpdateBandTimeOff+0x102>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ad8a:	4b39      	ldr	r3, [pc, #228]	; (800ae70 <RegionCommonUpdateBandTimeOff+0x1cc>)
            band->TimeCredits = maxCredits;
 800ad8c:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ad8e:	4598      	cmp	r8, r3
 800ad90:	d909      	bls.n	800ada6 <RegionCommonUpdateBandTimeOff+0x102>
                timeDiff.SubSeconds = 0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800ad98:	9b06      	ldr	r3, [sp, #24]
 800ad9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ad9c:	930c      	str	r3, [sp, #48]	; 0x30
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f007 feb5 	bl	8012b0e <SysTimeToMs>
 800ada4:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800ada6:	6860      	ldr	r0, [r4, #4]
 800ada8:	b900      	cbnz	r0, 800adac <RegionCommonUpdateBandTimeOff+0x108>
        band->TimeCredits = maxCredits;
 800adaa:	60e7      	str	r7, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800adac:	6127      	str	r7, [r4, #16]
    if( joined == true )
 800adae:	b126      	cbz	r6, 800adba <RegionCommonUpdateBandTimeOff+0x116>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800adb0:	f007 ff22 	bl	8012bf8 <TimerGetElapsedTime>
 800adb4:	68e3      	ldr	r3, [r4, #12]
 800adb6:	4403      	add	r3, r0
 800adb8:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800adba:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800adbe:	4293      	cmp	r3, r2
    band->LastBandUpdateTime = currentTime;
 800adc0:	9b05      	ldr	r3, [sp, #20]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800adc2:	991d      	ldr	r1, [sp, #116]	; 0x74
    band->LastBandUpdateTime = currentTime;
 800adc4:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800adc6:	9b07      	ldr	r3, [sp, #28]
        band->TimeCredits = band->MaxTimeCredits;
 800adc8:	bf88      	it	hi
 800adca:	60e2      	strhi	r2, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800adcc:	434b      	muls	r3, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800adce:	68e1      	ldr	r1, [r4, #12]
 800add0:	4299      	cmp	r1, r3
 800add2:	d802      	bhi.n	800adda <RegionCommonUpdateBandTimeOff+0x136>
 800add4:	9804      	ldr	r0, [sp, #16]
 800add6:	b9a8      	cbnz	r0, 800ae04 <RegionCommonUpdateBandTimeOff+0x160>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800add8:	b1a6      	cbz	r6, 800ae04 <RegionCommonUpdateBandTimeOff+0x160>
            bands[i].ReadyForTransmission = true;
 800adda:	2301      	movs	r3, #1
            validBands++;
 800addc:	441d      	add	r5, r3
            bands[i].ReadyForTransmission = true;
 800adde:	7523      	strb	r3, [r4, #20]
            validBands++;
 800ade0:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
 800ade2:	3418      	adds	r4, #24
 800ade4:	e786      	b.n	800acf4 <RegionCommonUpdateBandTimeOff+0x50>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800ade6:	2364      	movs	r3, #100	; 0x64
 800ade8:	e7a9      	b.n	800ad3e <RegionCommonUpdateBandTimeOff+0x9a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800adea:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800adee:	bf0a      	itet	eq
 800adf0:	4f20      	ldreq	r7, [pc, #128]	; (800ae74 <RegionCommonUpdateBandTimeOff+0x1d0>)
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800adf2:	4f21      	ldrne	r7, [pc, #132]	; (800ae78 <RegionCommonUpdateBandTimeOff+0x1d4>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800adf4:	60a0      	streq	r0, [r4, #8]
 800adf6:	e7b1      	b.n	800ad5c <RegionCommonUpdateBandTimeOff+0xb8>
        if( dutyCycleEnabled == false )
 800adf8:	9b04      	ldr	r3, [sp, #16]
 800adfa:	b90b      	cbnz	r3, 800ae00 <RegionCommonUpdateBandTimeOff+0x15c>
            band->TimeCredits = maxCredits;
 800adfc:	f8c4 b00c 	str.w	fp, [r4, #12]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ae00:	465f      	mov	r7, fp
 800ae02:	e7d0      	b.n	800ada6 <RegionCommonUpdateBandTimeOff+0x102>
            bands[i].ReadyForTransmission = false;
 800ae04:	2000      	movs	r0, #0
            if( bands[i].MaxTimeCredits > creditCosts )
 800ae06:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
 800ae08:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800ae0a:	d206      	bcs.n	800ae1a <RegionCommonUpdateBandTimeOff+0x176>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800ae0c:	1a5b      	subs	r3, r3, r1
 800ae0e:	459a      	cmp	sl, r3
                validBands++;
 800ae10:	f105 0501 	add.w	r5, r5, #1
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800ae14:	bf28      	it	cs
 800ae16:	469a      	movcs	sl, r3
                validBands++;
 800ae18:	b2ed      	uxtb	r5, r5
            if( joined == false )
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	d1e1      	bne.n	800ade2 <RegionCommonUpdateBandTimeOff+0x13e>
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ae1e:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 800ae22:	4a16      	ldr	r2, [pc, #88]	; (800ae7c <RegionCommonUpdateBandTimeOff+0x1d8>)
                SysTime_t backoffTimeRange = {
 800ae24:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ae28:	d019      	beq.n	800ae5e <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ae2a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800ae2e:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 800ae32:	bf18      	it	ne
 800ae34:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ae36:	4590      	cmp	r8, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800ae38:	bf84      	itt	hi
 800ae3a:	9a03      	ldrhi	r2, [sp, #12]
 800ae3c:	189b      	addhi	r3, r3, r2
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800ae3e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	af0c      	add	r7, sp, #48	; 0x30
 800ae46:	e897 0006 	ldmia.w	r7, {r1, r2}
 800ae4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	f007 fded 	bl	8012a2c <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800ae52:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ae56:	f007 fe5a 	bl	8012b0e <SysTimeToMs>
 800ae5a:	4682      	mov	sl, r0
 800ae5c:	e7c1      	b.n	800ade2 <RegionCommonUpdateBandTimeOff+0x13e>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800ae5e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ae62:	e7e8      	b.n	800ae36 <RegionCommonUpdateBandTimeOff+0x192>
 800ae64:	00015180 	.word	0x00015180
 800ae68:	001b7740 	.word	0x001b7740
 800ae6c:	0001517f 	.word	0x0001517f
 800ae70:	0001ec2f 	.word	0x0001ec2f
 800ae74:	0112a880 	.word	0x0112a880
 800ae78:	02932e00 	.word	0x02932e00
 800ae7c:	0001ec30 	.word	0x0001ec30

0800ae80 <RegionCommonComputeSymbolTimeLoRa>:
    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800ae80:	4b02      	ldr	r3, [pc, #8]	; (800ae8c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800ae82:	fa03 f000 	lsl.w	r0, r3, r0
}
 800ae86:	fbb0 f0f1 	udiv	r0, r0, r1
 800ae8a:	4770      	bx	lr
 800ae8c:	000f4240 	.word	0x000f4240

0800ae90 <RegionCommonGetBandwidth>:
    return MAX( txPower, maxBandTxPower );
}

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800ae90:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800ae94:	4b05      	ldr	r3, [pc, #20]	; (800aeac <RegionCommonGetBandwidth+0x1c>)
 800ae96:	4298      	cmp	r0, r3
 800ae98:	d005      	beq.n	800aea6 <RegionCommonGetBandwidth+0x16>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <RegionCommonGetBandwidth+0x20>)
 800ae9c:	4298      	cmp	r0, r3
 800ae9e:	bf0c      	ite	eq
 800aea0:	2002      	moveq	r0, #2
 800aea2:	2000      	movne	r0, #0
 800aea4:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800aea6:	2001      	movs	r0, #1
    }
}
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	0003d090 	.word	0x0003d090
 800aeb0:	0007a120 	.word	0x0007a120

0800aeb4 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800aeb4:	b530      	push	{r4, r5, lr}
    int8_t phyDr = DataratesUS915[datarate];
 800aeb6:	4b0b      	ldr	r3, [pc, #44]	; (800aee4 <GetTimeOnAir+0x30>)
{
 800aeb8:	b085      	sub	sp, #20
 800aeba:	460c      	mov	r4, r1
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800aebc:	490a      	ldr	r1, [pc, #40]	; (800aee8 <GetTimeOnAir+0x34>)
    int8_t phyDr = DataratesUS915[datarate];
 800aebe:	561d      	ldrsb	r5, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800aec0:	f7ff ffe6 	bl	800ae90 <RegionCommonGetBandwidth>

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800aec4:	2208      	movs	r2, #8
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800aec6:	4601      	mov	r1, r0
    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800aec8:	2000      	movs	r0, #0
 800aeca:	e9cd 2000 	strd	r2, r0, [sp]
 800aece:	4a07      	ldr	r2, [pc, #28]	; (800aeec <GetTimeOnAir+0x38>)
 800aed0:	2301      	movs	r3, #1
 800aed2:	b2e4      	uxtb	r4, r4
 800aed4:	9402      	str	r4, [sp, #8]
 800aed6:	9303      	str	r3, [sp, #12]
 800aed8:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800aeda:	4618      	mov	r0, r3
 800aedc:	462a      	mov	r2, r5
 800aede:	47a0      	blx	r4
}
 800aee0:	b005      	add	sp, #20
 800aee2:	bd30      	pop	{r4, r5, pc}
 800aee4:	0801a0f7 	.word	0x0801a0f7
 800aee8:	080185c4 	.word	0x080185c4
 800aeec:	08018558 	.word	0x08018558

0800aef0 <VerifyRfFreq>:
    if( Radio.CheckRfFrequency( freq ) == false )
 800aef0:	4b0b      	ldr	r3, [pc, #44]	; (800af20 <VerifyRfFreq+0x30>)
{
 800aef2:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800aef4:	6a1b      	ldr	r3, [r3, #32]
{
 800aef6:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800aef8:	4798      	blx	r3
 800aefa:	b168      	cbz	r0, 800af18 <VerifyRfFreq+0x28>
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <VerifyRfFreq+0x34>)
 800aefe:	4a0a      	ldr	r2, [pc, #40]	; (800af28 <VerifyRfFreq+0x38>)
 800af00:	4423      	add	r3, r4
 800af02:	4293      	cmp	r3, r2
 800af04:	d809      	bhi.n	800af1a <VerifyRfFreq+0x2a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800af06:	4a09      	ldr	r2, [pc, #36]	; (800af2c <VerifyRfFreq+0x3c>)
 800af08:	4353      	muls	r3, r2
 800af0a:	f641 32f6 	movw	r2, #7158	; 0x1bf6
 800af0e:	ebb2 1fb3 	cmp.w	r2, r3, ror #6
 800af12:	bf2c      	ite	cs
 800af14:	2001      	movcs	r0, #1
 800af16:	2000      	movcc	r0, #0
}
 800af18:	bd10      	pop	{r4, pc}
        return false;
 800af1a:	2000      	movs	r0, #0
 800af1c:	e7fc      	b.n	800af18 <VerifyRfFreq+0x28>
 800af1e:	bf00      	nop
 800af20:	08018558 	.word	0x08018558
 800af24:	c8f78f60 	.word	0xc8f78f60
 800af28:	00401640 	.word	0x00401640
 800af2c:	5943f75f 	.word	0x5943f75f

0800af30 <RegionUS915GetPhyParam>:

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800af30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800af32:	2300      	movs	r3, #0
 800af34:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 800af36:	7803      	ldrb	r3, [r0, #0]
 800af38:	3b01      	subs	r3, #1
 800af3a:	2b36      	cmp	r3, #54	; 0x36
 800af3c:	d81f      	bhi.n	800af7e <RegionUS915GetPhyParam+0x4e>
 800af3e:	e8df f003 	tbb	[pc, r3]
 800af42:	1e1c      	.short	0x1e1c
 800af44:	1e1e1e1e 	.word	0x1e1e1e1e
 800af48:	1e1e1e1e 	.word	0x1e1e1e1e
 800af4c:	1e3b3937 	.word	0x1e3b3937
 800af50:	49464340 	.word	0x49464340
 800af54:	571e4f4c 	.word	0x571e4f4c
 800af58:	635e591c 	.word	0x635e591c
 800af5c:	681e1e65 	.word	0x681e1e65
 800af60:	1e1e221e 	.word	0x1e1e221e
 800af64:	1e1e1e1e 	.word	0x1e1e1e1e
 800af68:	1e1e1e1e 	.word	0x1e1e1e1e
 800af6c:	6b1e1e1e 	.word	0x6b1e1e1e
 800af70:	1e1c1c71 	.word	0x1e1c1c71
 800af74:	791c1c6b 	.word	0x791c1c6b
 800af78:	7d          	.byte	0x7d
 800af79:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800af7a:	2308      	movs	r3, #8
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
            break;
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800af7c:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800af7e:	9800      	ldr	r0, [sp, #0]
 800af80:	b005      	add	sp, #20
 800af82:	f85d fb04 	ldr.w	pc, [sp], #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800af86:	7843      	ldrb	r3, [r0, #1]
 800af88:	f88d 3004 	strb.w	r3, [sp, #4]
 800af8c:	2304      	movs	r3, #4
 800af8e:	f88d 3005 	strb.w	r3, [sp, #5]
 800af92:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800af96:	f8ad 3006 	strh.w	r3, [sp, #6]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800af9a:	4b2b      	ldr	r3, [pc, #172]	; (800b048 <RegionUS915GetPhyParam+0x118>)
 800af9c:	681b      	ldr	r3, [r3, #0]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800af9e:	a801      	add	r0, sp, #4
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800afa0:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800afa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800afa8:	f009 f8a4 	bl	80140f4 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800afac:	9000      	str	r0, [sp, #0]
            break;
 800afae:	e7e6      	b.n	800af7e <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	e7e3      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800afb4:	2320      	movs	r3, #32
 800afb6:	e7e1      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800afb8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800afbc:	4a23      	ldr	r2, [pc, #140]	; (800b04c <RegionUS915GetPhyParam+0x11c>)
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800afbe:	5cd3      	ldrb	r3, [r2, r3]
 800afc0:	e7dc      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800afc2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800afc6:	e7d9      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800afc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800afcc:	e7d6      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800afce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800afd2:	e7d3      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800afd4:	f241 3388 	movw	r3, #5000	; 0x1388
 800afd8:	e7d0      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800afda:	f241 7370 	movw	r3, #6000	; 0x1770
 800afde:	e7cd      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800afe0:	481b      	ldr	r0, [pc, #108]	; (800b050 <RegionUS915GetPhyParam+0x120>)
 800afe2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800afe6:	f007 fcde 	bl	80129a6 <randr>
 800afea:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800afee:	e7dd      	b.n	800afac <RegionUS915GetPhyParam+0x7c>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800aff0:	4b18      	ldr	r3, [pc, #96]	; (800b054 <RegionUS915GetPhyParam+0x124>)
 800aff2:	e7c3      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800aff4:	4b14      	ldr	r3, [pc, #80]	; (800b048 <RegionUS915GetPhyParam+0x118>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800affc:	e7be      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800affe:	4b12      	ldr	r3, [pc, #72]	; (800b048 <RegionUS915GetPhyParam+0x118>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800b006:	e7b9      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800b008:	2348      	movs	r3, #72	; 0x48
 800b00a:	e7b7      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800b00c:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <RegionUS915GetPhyParam+0x118>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	e7b4      	b.n	800af7c <RegionUS915GetPhyParam+0x4c>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800b012:	4b11      	ldr	r3, [pc, #68]	; (800b058 <RegionUS915GetPhyParam+0x128>)
 800b014:	9300      	str	r3, [sp, #0]
            break;
 800b016:	e7b2      	b.n	800af7e <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800b018:	4a10      	ldr	r2, [pc, #64]	; (800b05c <RegionUS915GetPhyParam+0x12c>)
 800b01a:	490e      	ldr	r1, [pc, #56]	; (800b054 <RegionUS915GetPhyParam+0x124>)
 800b01c:	7900      	ldrb	r0, [r0, #4]
 800b01e:	f009 f8cc 	bl	80141ba <RegionBaseUSCalcDownlinkFrequency>
 800b022:	e7c3      	b.n	800afac <RegionUS915GetPhyParam+0x7c>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800b024:	f240 4317 	movw	r3, #1047	; 0x417
 800b028:	f8ad 3000 	strh.w	r3, [sp]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800b02c:	2303      	movs	r3, #3
 800b02e:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 800b032:	e7a4      	b.n	800af7e <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800b034:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b038:	4a09      	ldr	r2, [pc, #36]	; (800b060 <RegionUS915GetPhyParam+0x130>)
 800b03a:	e7c0      	b.n	800afbe <RegionUS915GetPhyParam+0x8e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800b03c:	4909      	ldr	r1, [pc, #36]	; (800b064 <RegionUS915GetPhyParam+0x134>)
 800b03e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800b042:	f7ff ff25 	bl	800ae90 <RegionCommonGetBandwidth>
 800b046:	e7b1      	b.n	800afac <RegionUS915GetPhyParam+0x7c>
 800b048:	2000204c 	.word	0x2000204c
 800b04c:	0801a107 	.word	0x0801a107
 800b050:	fffffc18 	.word	0xfffffc18
 800b054:	370870a0 	.word	0x370870a0
 800b058:	4200999a 	.word	0x4200999a
 800b05c:	000927c0 	.word	0x000927c0
 800b060:	0801a0f7 	.word	0x0801a0f7
 800b064:	080185c4 	.word	0x080185c4

0800b068 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800b068:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800b06a:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <RegionUS915SetBandTxDone+0x30>)
 800b06c:	7802      	ldrb	r2, [r0, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	210c      	movs	r1, #12
 800b072:	fb01 3302 	mla	r3, r1, r2, r3
 800b076:	7a5b      	ldrb	r3, [r3, #9]
 800b078:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800b07c:	4b07      	ldr	r3, [pc, #28]	; (800b09c <RegionUS915SetBandTxDone+0x34>)
 800b07e:	681d      	ldr	r5, [r3, #0]
 800b080:	6903      	ldr	r3, [r0, #16]
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	68c3      	ldr	r3, [r0, #12]
 800b086:	7842      	ldrb	r2, [r0, #1]
 800b088:	6881      	ldr	r1, [r0, #8]
 800b08a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800b08e:	f008 fecd 	bl	8013e2c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800b092:	b003      	add	sp, #12
 800b094:	bd30      	pop	{r4, r5, pc}
 800b096:	bf00      	nop
 800b098:	2000204c 	.word	0x2000204c
 800b09c:	20002044 	.word	0x20002044

0800b0a0 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800b0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a2:	b087      	sub	sp, #28
    Band_t bands[US915_MAX_NB_BANDS] =
 800b0a4:	2301      	movs	r3, #1
    {
       US915_BAND0
    };

    switch( params->Type )
 800b0a6:	7b04      	ldrb	r4, [r0, #12]
    Band_t bands[US915_MAX_NB_BANDS] =
 800b0a8:	f8ad 3000 	strh.w	r3, [sp]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800b0b2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b0b6:	f88d 3002 	strb.w	r3, [sp, #2]
 800b0ba:	f88d 3014 	strb.w	r3, [sp, #20]
    switch( params->Type )
 800b0be:	b124      	cbz	r4, 800b0ca <RegionUS915InitDefaults+0x2a>
 800b0c0:	3c01      	subs	r4, #1
 800b0c2:	2c01      	cmp	r4, #1
 800b0c4:	d94e      	bls.n	800b164 <RegionUS915InitDefaults+0xc4>
        default:
        {
            break;
        }
    }
}
 800b0c6:	b007      	add	sp, #28
 800b0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800b0ca:	6803      	ldr	r3, [r0, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0fa      	beq.n	800b0c6 <RegionUS915InitDefaults+0x26>
 800b0d0:	6842      	ldr	r2, [r0, #4]
 800b0d2:	2a00      	cmp	r2, #0
 800b0d4:	d0f7      	beq.n	800b0c6 <RegionUS915InitDefaults+0x26>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800b0d6:	4e30      	ldr	r6, [pc, #192]	; (800b198 <RegionUS915InitDefaults+0xf8>)
            RegionBands = (Band_t*) params->Bands;
 800b0d8:	6880      	ldr	r0, [r0, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800b0da:	6032      	str	r2, [r6, #0]
            RegionBands = (Band_t*) params->Bands;
 800b0dc:	4a2f      	ldr	r2, [pc, #188]	; (800b19c <RegionUS915InitDefaults+0xfc>)
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b0de:	4d30      	ldr	r5, [pc, #192]	; (800b1a0 <RegionUS915InitDefaults+0x100>)
            RegionBands = (Band_t*) params->Bands;
 800b0e0:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800b0e2:	819c      	strh	r4, [r3, #12]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800b0e4:	2218      	movs	r2, #24
 800b0e6:	4669      	mov	r1, sp
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b0e8:	602b      	str	r3, [r5, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800b0ea:	f007 fc69 	bl	80129c0 <memcpy1>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800b0ee:	6830      	ldr	r0, [r6, #0]
 800b0f0:	4b2c      	ldr	r3, [pc, #176]	; (800b1a4 <RegionUS915InitDefaults+0x104>)
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800b0f2:	4f2d      	ldr	r7, [pc, #180]	; (800b1a8 <RegionUS915InitDefaults+0x108>)
 800b0f4:	4602      	mov	r2, r0
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800b0f6:	4601      	mov	r1, r0
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800b0f8:	f04f 0c30 	mov.w	ip, #48	; 0x30
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800b0fc:	600b      	str	r3, [r1, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800b0fe:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 800b102:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b106:	42bb      	cmp	r3, r7
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800b108:	f881 c008 	strb.w	ip, [r1, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800b10c:	724c      	strb	r4, [r1, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800b10e:	f101 010c 	add.w	r1, r1, #12
 800b112:	d1f3      	bne.n	800b0fc <RegionUS915InitDefaults+0x5c>
 800b114:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <RegionUS915InitDefaults+0x10c>)
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800b116:	4926      	ldr	r1, [pc, #152]	; (800b1b0 <RegionUS915InitDefaults+0x110>)
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800b118:	2744      	movs	r7, #68	; 0x44
                RegionNvmGroup2->Channels[i].Band = 0;
 800b11a:	2400      	movs	r4, #0
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800b11c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800b120:	f503 13c3 	add.w	r3, r3, #1597440	; 0x186000
 800b124:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800b128:	428b      	cmp	r3, r1
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800b12a:	f882 7308 	strb.w	r7, [r2, #776]	; 0x308
                RegionNvmGroup2->Channels[i].Band = 0;
 800b12e:	f882 4309 	strb.w	r4, [r2, #777]	; 0x309
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800b132:	f102 020c 	add.w	r2, r2, #12
 800b136:	d1f1      	bne.n	800b11c <RegionUS915InitDefaults+0x7c>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800b138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800b13c:	e9c0 33db 	strd	r3, r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800b140:	23ff      	movs	r3, #255	; 0xff
 800b142:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b146:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800b14a:	2206      	movs	r2, #6
 800b14c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800b150:	f008 fe5d 	bl	8013e0e <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b154:	6831      	ldr	r1, [r6, #0]
 800b156:	6828      	ldr	r0, [r5, #0]
 800b158:	2206      	movs	r2, #6
 800b15a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800b15e:	f008 fe56 	bl	8013e0e <RegionCommonChanMaskCopy>
            break;
 800b162:	e7b0      	b.n	800b0c6 <RegionUS915InitDefaults+0x26>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b164:	4c0c      	ldr	r4, [pc, #48]	; (800b198 <RegionUS915InitDefaults+0xf8>)
 800b166:	6820      	ldr	r0, [r4, #0]
 800b168:	2206      	movs	r2, #6
 800b16a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800b16e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800b172:	f008 fe4c 	bl	8013e0e <RegionCommonChanMaskCopy>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b176:	4b0a      	ldr	r3, [pc, #40]	; (800b1a0 <RegionUS915InitDefaults+0x100>)
 800b178:	6821      	ldr	r1, [r4, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800b180:	1e9a      	subs	r2, r3, #2
 800b182:	330a      	adds	r3, #10
 800b184:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 800b188:	f831 0b02 	ldrh.w	r0, [r1], #2
            for( uint8_t i = 0; i < 6; i++ )
 800b18c:	429a      	cmp	r2, r3
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b18e:	ea00 0004 	and.w	r0, r0, r4
 800b192:	8010      	strh	r0, [r2, #0]
            for( uint8_t i = 0; i < 6; i++ )
 800b194:	d1f6      	bne.n	800b184 <RegionUS915InitDefaults+0xe4>
 800b196:	e796      	b.n	800b0c6 <RegionUS915InitDefaults+0x26>
 800b198:	2000204c 	.word	0x2000204c
 800b19c:	20002044 	.word	0x20002044
 800b1a0:	20002048 	.word	0x20002048
 800b1a4:	35c80160 	.word	0x35c80160
 800b1a8:	368b5160 	.word	0x368b5160
 800b1ac:	35d2afc0 	.word	0x35d2afc0
 800b1b0:	3695ffc0 	.word	0x3695ffc0

0800b1b4 <RegionUS915ApplyCFList>:
            return false;
    }
}

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 800b1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800b1b6:	7a03      	ldrb	r3, [r0, #8]
 800b1b8:	2b10      	cmp	r3, #16
 800b1ba:	d123      	bne.n	800b204 <RegionUS915ApplyCFList+0x50>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800b1bc:	6844      	ldr	r4, [r0, #4]
 800b1be:	7be3      	ldrb	r3, [r4, #15]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d11f      	bne.n	800b204 <RegionUS915ApplyCFList+0x50>
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800b1c4:	4b10      	ldr	r3, [pc, #64]	; (800b208 <RegionUS915ApplyCFList+0x54>)
 800b1c6:	681d      	ldr	r5, [r3, #0]
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b1c8:	4b10      	ldr	r3, [pc, #64]	; (800b20c <RegionUS915ApplyCFList+0x58>)
 800b1ca:	6819      	ldr	r1, [r3, #0]
 800b1cc:	f505 7058 	add.w	r0, r5, #864	; 0x360
 800b1d0:	3902      	subs	r1, #2
 800b1d2:	2200      	movs	r2, #0
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800b1d4:	1c67      	adds	r7, r4, #1
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800b1d6:	f814 3012 	ldrb.w	r3, [r4, r2, lsl #1]
 800b1da:	8003      	strh	r3, [r0, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800b1dc:	f817 6012 	ldrb.w	r6, [r7, r2, lsl #1]
        if( chMaskItr == 4 )
 800b1e0:	2a04      	cmp	r2, #4
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800b1e2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800b1e6:	f820 3b02 	strh.w	r3, [r0], #2
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800b1ea:	bf04      	itt	eq
 800b1ec:	b2db      	uxtbeq	r3, r3
 800b1ee:	f8a5 3368 	strheq.w	r3, [r5, #872]	; 0x368
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b1f2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800b1f6:	f830 6c02 	ldrh.w	r6, [r0, #-2]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b1fa:	3201      	adds	r2, #1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b1fc:	4033      	ands	r3, r6
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b1fe:	2a05      	cmp	r2, #5
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b200:	800b      	strh	r3, [r1, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b202:	d1e8      	bne.n	800b1d6 <RegionUS915ApplyCFList+0x22>
    }
}
 800b204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b206:	bf00      	nop
 800b208:	2000204c 	.word	0x2000204c
 800b20c:	20002048 	.word	0x20002048

0800b210 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800b210:	b570      	push	{r4, r5, r6, lr}
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800b212:	2204      	movs	r2, #4
{
 800b214:	4605      	mov	r5, r0
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800b216:	2100      	movs	r1, #0
 800b218:	6800      	ldr	r0, [r0, #0]
 800b21a:	f008 fdda 	bl	8013dd2 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800b21e:	2801      	cmp	r0, #1
 800b220:	d003      	beq.n	800b22a <RegionUS915ChanMaskSet+0x1a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800b222:	792c      	ldrb	r4, [r5, #4]
 800b224:	b11c      	cbz	r4, 800b22e <RegionUS915ChanMaskSet+0x1e>
 800b226:	2c01      	cmp	r4, #1
 800b228:	d021      	beq.n	800b26e <RegionUS915ChanMaskSet+0x5e>
        return false;
 800b22a:	2000      	movs	r0, #0
 800b22c:	e01e      	b.n	800b26c <RegionUS915ChanMaskSet+0x5c>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800b22e:	4e14      	ldr	r6, [pc, #80]	; (800b280 <RegionUS915ChanMaskSet+0x70>)
 800b230:	6829      	ldr	r1, [r5, #0]
 800b232:	6830      	ldr	r0, [r6, #0]
 800b234:	2206      	movs	r2, #6
 800b236:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800b23a:	f008 fde8 	bl	8013e0e <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800b23e:	6833      	ldr	r3, [r6, #0]
 800b240:	f893 2374 	ldrb.w	r2, [r3, #884]	; 0x374
 800b244:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b248:	4a0e      	ldr	r2, [pc, #56]	; (800b284 <RegionUS915ChanMaskSet+0x74>)
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800b24a:	f8a3 4376 	strh.w	r4, [r3, #886]	; 0x376
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800b254:	1e91      	subs	r1, r2, #2
 800b256:	320a      	adds	r2, #10
 800b258:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 800b25c:	f833 0b02 	ldrh.w	r0, [r3], #2
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b260:	4291      	cmp	r1, r2
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b262:	ea00 0004 	and.w	r0, r0, r4
 800b266:	8008      	strh	r0, [r1, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b268:	d1f6      	bne.n	800b258 <RegionUS915ChanMaskSet+0x48>
            break;
        }
        default:
            return false;
    }
    return true;
 800b26a:	2001      	movs	r0, #1
}
 800b26c:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800b26e:	4b04      	ldr	r3, [pc, #16]	; (800b280 <RegionUS915ChanMaskSet+0x70>)
 800b270:	6829      	ldr	r1, [r5, #0]
 800b272:	6818      	ldr	r0, [r3, #0]
 800b274:	2206      	movs	r2, #6
 800b276:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800b27a:	f008 fdc8 	bl	8013e0e <RegionCommonChanMaskCopy>
            break;
 800b27e:	e7f4      	b.n	800b26a <RegionUS915ChanMaskSet+0x5a>
 800b280:	2000204c 	.word	0x2000204c
 800b284:	20002048 	.word	0x20002048

0800b288 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800b28a:	280d      	cmp	r0, #13
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800b28c:	4d11      	ldr	r5, [pc, #68]	; (800b2d4 <RegionUS915ComputeRxWindowParameters+0x4c>)
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800b28e:	bfa8      	it	ge
 800b290:	200d      	movge	r0, #13
{
 800b292:	461c      	mov	r4, r3
 800b294:	460e      	mov	r6, r1
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800b296:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800b298:	4629      	mov	r1, r5
{
 800b29a:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800b29c:	f7ff fdf8 	bl	800ae90 <RegionCommonGetBandwidth>

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800b2a0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800b2a4:	4a0c      	ldr	r2, [pc, #48]	; (800b2d8 <RegionUS915ComputeRxWindowParameters+0x50>)
 800b2a6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800b2aa:	70a0      	strb	r0, [r4, #2]
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800b2ac:	5cd0      	ldrb	r0, [r2, r3]
 800b2ae:	f7ff fde7 	bl	800ae80 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	; (800b2dc <RegionUS915ComputeRxWindowParameters+0x54>)
 800b2b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800b2b6:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b2b8:	4798      	blx	r3
 800b2ba:	f104 020c 	add.w	r2, r4, #12
 800b2be:	3408      	adds	r4, #8
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	9201      	str	r2, [sp, #4]
 800b2c4:	9400      	str	r4, [sp, #0]
 800b2c6:	463a      	mov	r2, r7
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f008 fe36 	bl	8013f3c <RegionCommonComputeRxWindowParameters>
}
 800b2d0:	b003      	add	sp, #12
 800b2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2d4:	080185c4 	.word	0x080185c4
 800b2d8:	0801a0f7 	.word	0x0801a0f7
 800b2dc:	08018558 	.word	0x08018558

0800b2e0 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int8_t dr = rxConfig->Datarate;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800b2e4:	4e1f      	ldr	r6, [pc, #124]	; (800b364 <RegionUS915RxConfig+0x84>)
    int8_t dr = rxConfig->Datarate;
 800b2e6:	f990 9001 	ldrsb.w	r9, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 800b2ea:	6873      	ldr	r3, [r6, #4]
    uint32_t frequency = rxConfig->Frequency;
 800b2ec:	6845      	ldr	r5, [r0, #4]
{
 800b2ee:	b08a      	sub	sp, #40	; 0x28
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	4688      	mov	r8, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 800b2f4:	4798      	blx	r3
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d131      	bne.n	800b35e <RegionUS915RxConfig+0x7e>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800b2fa:	7ca3      	ldrb	r3, [r4, #18]
 800b2fc:	b933      	cbnz	r3, 800b30c <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800b2fe:	7825      	ldrb	r5, [r4, #0]
 800b300:	4a19      	ldr	r2, [pc, #100]	; (800b368 <RegionUS915RxConfig+0x88>)
 800b302:	f005 0307 	and.w	r3, r5, #7
 800b306:	4d19      	ldr	r5, [pc, #100]	; (800b36c <RegionUS915RxConfig+0x8c>)
 800b308:	fb02 5503 	mla	r5, r2, r3, r5
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800b30c:	4b18      	ldr	r3, [pc, #96]	; (800b370 <RegionUS915RxConfig+0x90>)

    Radio.SetChannel( frequency );
 800b30e:	4628      	mov	r0, r5
    phyDr = DataratesUS915[dr];
 800b310:	f913 a009 	ldrsb.w	sl, [r3, r9]
    Radio.SetChannel( frequency );
 800b314:	68f3      	ldr	r3, [r6, #12]
 800b316:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b318:	7c63      	ldrb	r3, [r4, #17]
 800b31a:	8922      	ldrh	r2, [r4, #8]
 800b31c:	9309      	str	r3, [sp, #36]	; 0x24
 800b31e:	2501      	movs	r5, #1
 800b320:	2300      	movs	r3, #0
 800b322:	9202      	str	r2, [sp, #8]
 800b324:	2208      	movs	r2, #8
 800b326:	e9cd 3200 	strd	r3, r2, [sp]
 800b32a:	e9cd 3507 	strd	r3, r5, [sp, #28]
 800b32e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b332:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b336:	78a1      	ldrb	r1, [r4, #2]
 800b338:	69b7      	ldr	r7, [r6, #24]
 800b33a:	462b      	mov	r3, r5
 800b33c:	4652      	mov	r2, sl
 800b33e:	4628      	mov	r0, r5
 800b340:	47b8      	blx	r7

    Radio.SetMaxPayloadLength( MODEM_LORA, MaxPayloadOfDatarateUS915[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800b342:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <RegionUS915RxConfig+0x94>)
 800b344:	f813 1009 	ldrb.w	r1, [r3, r9]
 800b348:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800b34a:	310d      	adds	r1, #13
 800b34c:	4628      	mov	r0, r5
 800b34e:	b2c9      	uxtb	r1, r1
 800b350:	4798      	blx	r3

    *datarate = (uint8_t) dr;
 800b352:	f888 9000 	strb.w	r9, [r8]
    return true;
 800b356:	4628      	mov	r0, r5
}
 800b358:	b00a      	add	sp, #40	; 0x28
 800b35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return false;
 800b35e:	2000      	movs	r0, #0
 800b360:	e7fa      	b.n	800b358 <RegionUS915RxConfig+0x78>
 800b362:	bf00      	nop
 800b364:	08018558 	.word	0x08018558
 800b368:	000927c0 	.word	0x000927c0
 800b36c:	370870a0 	.word	0x370870a0
 800b370:	0801a0f7 	.word	0x0801a0f7
 800b374:	0801a107 	.word	0x0801a107

0800b378 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800b37c:	4b37      	ldr	r3, [pc, #220]	; (800b45c <RegionUS915TxConfig+0xe4>)
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800b37e:	4e38      	ldr	r6, [pc, #224]	; (800b460 <RegionUS915TxConfig+0xe8>)
 800b380:	f990 a002 	ldrsb.w	sl, [r0, #2]
 800b384:	f8d6 b000 	ldr.w	fp, [r6]
{
 800b388:	4691      	mov	r9, r2
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800b38a:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800b38e:	569f      	ldrsb	r7, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800b390:	7803      	ldrb	r3, [r0, #0]
{
 800b392:	4688      	mov	r8, r1
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800b394:	210c      	movs	r1, #12
 800b396:	fb01 b303 	mla	r3, r1, r3, fp
 800b39a:	4932      	ldr	r1, [pc, #200]	; (800b464 <RegionUS915TxConfig+0xec>)
 800b39c:	7a5b      	ldrb	r3, [r3, #9]
 800b39e:	6809      	ldr	r1, [r1, #0]
 800b3a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b3a4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
{
 800b3a8:	b08d      	sub	sp, #52	; 0x34
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800b3aa:	f993 1002 	ldrsb.w	r1, [r3, #2]
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800b3ae:	920b      	str	r2, [sp, #44]	; 0x2c
{
 800b3b0:	4604      	mov	r4, r0
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	f008 feb9 	bl	801412a <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800b3b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3ba:	2a04      	cmp	r2, #4
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800b3bc:	4605      	mov	r5, r0
    if( datarate == DR_4 )
 800b3be:	d13f      	bne.n	800b440 <RegionUS915TxConfig+0xc8>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800b3c0:	4655      	mov	r5, sl
 800b3c2:	2d02      	cmp	r5, #2
 800b3c4:	bfb8      	it	lt
 800b3c6:	2502      	movlt	r5, #2
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800b3c8:	4927      	ldr	r1, [pc, #156]	; (800b468 <RegionUS915TxConfig+0xf0>)
 800b3ca:	f994 0001 	ldrsb.w	r0, [r4, #1]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b3ce:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800b46c <RegionUS915TxConfig+0xf4>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800b3d2:	f7ff fd5d 	bl	800ae90 <RegionCommonGetBandwidth>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800b3d6:	4926      	ldr	r1, [pc, #152]	; (800b470 <RegionUS915TxConfig+0xf8>)
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800b3d8:	4683      	mov	fp, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800b3da:	2200      	movs	r2, #0
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f008 fdd6 	bl	8013f8e <RegionCommonComputeTxPower>
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b3e2:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800b3e4:	900b      	str	r0, [sp, #44]	; 0x2c
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b3e6:	230c      	movs	r3, #12
 800b3e8:	435a      	muls	r2, r3
 800b3ea:	6830      	ldr	r0, [r6, #0]
 800b3ec:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b3f0:	5880      	ldr	r0, [r0, r2]
 800b3f2:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b3fa:	2601      	movs	r6, #1
 800b3fc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800b400:	2308      	movs	r3, #8
 800b402:	e9cd 2205 	strd	r2, r2, [sp, #20]
 800b406:	e9cd 2603 	strd	r2, r6, [sp, #12]
 800b40a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800b40e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b410:	9700      	str	r7, [sp, #0]
 800b412:	465b      	mov	r3, fp
 800b414:	4630      	mov	r0, r6
 800b416:	f8da 701c 	ldr.w	r7, [sl, #28]
 800b41a:	47b8      	blx	r7

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800b41c:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800b420:	7b21      	ldrb	r1, [r4, #12]
 800b422:	4630      	mov	r0, r6
 800b424:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800b426:	89a1      	ldrh	r1, [r4, #12]
 800b428:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800b42c:	f7ff fd42 	bl	800aeb4 <GetTimeOnAir>
 800b430:	f8c9 0000 	str.w	r0, [r9]

    *txPower = txPowerLimited;
    return true;
}
 800b434:	4630      	mov	r0, r6
    *txPower = txPowerLimited;
 800b436:	f888 5000 	strb.w	r5, [r8]
}
 800b43a:	b00d      	add	sp, #52	; 0x34
 800b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800b440:	2204      	movs	r2, #4
 800b442:	2100      	movs	r1, #0
 800b444:	f50b 7058 	add.w	r0, fp, #864	; 0x360
 800b448:	f008 fcc3 	bl	8013dd2 <RegionCommonCountChannels>
 800b44c:	2831      	cmp	r0, #49	; 0x31
 800b44e:	d8bb      	bhi.n	800b3c8 <RegionUS915TxConfig+0x50>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800b450:	4655      	mov	r5, sl
 800b452:	2d05      	cmp	r5, #5
 800b454:	bfb8      	it	lt
 800b456:	2505      	movlt	r5, #5
 800b458:	e7b6      	b.n	800b3c8 <RegionUS915TxConfig+0x50>
 800b45a:	bf00      	nop
 800b45c:	0801a0f7 	.word	0x0801a0f7
 800b460:	2000204c 	.word	0x2000204c
 800b464:	20002044 	.word	0x20002044
 800b468:	080185c4 	.word	0x080185c4
 800b46c:	08018558 	.word	0x08018558
 800b470:	41f00000 	.word	0x41f00000

0800b474 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b478:	4f84      	ldr	r7, [pc, #528]	; (800b68c <RegionUS915LinkAdrReq+0x218>)
{
 800b47a:	b093      	sub	sp, #76	; 0x4c
 800b47c:	e9cd 1201 	strd	r1, r2, [sp, #4]
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b480:	6839      	ldr	r1, [r7, #0]
{
 800b482:	9303      	str	r3, [sp, #12]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800b484:	ae07      	add	r6, sp, #28
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b486:	2400      	movs	r4, #0
{
 800b488:	4605      	mov	r5, r0
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b48a:	2206      	movs	r2, #6
 800b48c:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800b490:	4630      	mov	r0, r6
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800b492:	e9c6 4401 	strd	r4, r4, [r6, #4]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b496:	9405      	str	r4, [sp, #20]
 800b498:	f8ad 4018 	strh.w	r4, [sp, #24]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800b49c:	9407      	str	r4, [sp, #28]
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b49e:	f008 fcb6 	bl	8013e0e <RegionCommonChanMaskCopy>
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 800b4a2:	46a0      	mov	r8, r4
            channelsMask[0] = 0xFFFF;
 800b4a4:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800b4a8:	7a2b      	ldrb	r3, [r5, #8]
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	d906      	bls.n	800b4bc <RegionUS915LinkAdrReq+0x48>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800b4ae:	6868      	ldr	r0, [r5, #4]
 800b4b0:	a905      	add	r1, sp, #20
 800b4b2:	4420      	add	r0, r4
 800b4b4:	f008 fcdd 	bl	8013e72 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d176      	bne.n	800b5aa <RegionUS915LinkAdrReq+0x136>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800b4bc:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	dc07      	bgt.n	800b4d4 <RegionUS915LinkAdrReq+0x60>
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	a807      	add	r0, sp, #28
 800b4ca:	f008 fc82 	bl	8013dd2 <RegionCommonCountChannels>
 800b4ce:	2801      	cmp	r0, #1
 800b4d0:	f240 80da 	bls.w	800b688 <RegionUS915LinkAdrReq+0x214>
    uint8_t bytesProcessed = 0;
 800b4d4:	2307      	movs	r3, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionUS915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800b4d6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800b4da:	7aab      	ldrb	r3, [r5, #10]
 800b4dc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b4e0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800b4e4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800b4e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b4ec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800b4f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b4f4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800b4f8:	7aeb      	ldrb	r3, [r5, #11]
 800b4fa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800b4fe:	7b2b      	ldrb	r3, [r5, #12]
 800b500:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800b504:	7b6b      	ldrb	r3, [r5, #13]
 800b506:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800b50a:	2348      	movs	r3, #72	; 0x48
 800b50c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800b510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b514:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	9310      	str	r3, [sp, #64]	; 0x40
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800b51c:	230e      	movs	r3, #14
 800b51e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800b522:	682b      	ldr	r3, [r5, #0]
 800b524:	930a      	str	r3, [sp, #40]	; 0x28

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b526:	f10d 0216 	add.w	r2, sp, #22
 800b52a:	ab05      	add	r3, sp, #20
 800b52c:	f10d 0115 	add.w	r1, sp, #21
 800b530:	a80a      	add	r0, sp, #40	; 0x28
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800b532:	960e      	str	r6, [sp, #56]	; 0x38
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b534:	f008 fcb7 	bl	8013ea6 <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800b538:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b53a:	4605      	mov	r5, r0
    if( status == 0x07 )
 800b53c:	d123      	bne.n	800b586 <RegionUS915LinkAdrReq+0x112>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800b53e:	6838      	ldr	r0, [r7, #0]
 800b540:	2206      	movs	r2, #6
 800b542:	4631      	mov	r1, r6
 800b544:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800b548:	f008 fc61 	bl	8013e0e <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800b54c:	4b50      	ldr	r3, [pc, #320]	; (800b690 <RegionUS915LinkAdrReq+0x21c>)
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f8b2 0360 	ldrh.w	r0, [r2, #864]	; 0x360
 800b556:	8819      	ldrh	r1, [r3, #0]
 800b558:	4001      	ands	r1, r0
 800b55a:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800b55c:	f8b2 0362 	ldrh.w	r0, [r2, #866]	; 0x362
 800b560:	8859      	ldrh	r1, [r3, #2]
 800b562:	4001      	ands	r1, r0
 800b564:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800b566:	f8b2 0364 	ldrh.w	r0, [r2, #868]	; 0x364
 800b56a:	8899      	ldrh	r1, [r3, #4]
 800b56c:	4001      	ands	r1, r0
 800b56e:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800b570:	f8b2 0366 	ldrh.w	r0, [r2, #870]	; 0x366
 800b574:	88d9      	ldrh	r1, [r3, #6]
 800b576:	4001      	ands	r1, r0
 800b578:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800b57a:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800b57e:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800b582:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800b584:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800b586:	9a01      	ldr	r2, [sp, #4]
 800b588:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800b58c:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800b58e:	9a02      	ldr	r2, [sp, #8]
 800b590:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b594:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800b596:	9a03      	ldr	r2, [sp, #12]
 800b598:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b59c:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800b59e:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    return status;
}
 800b5a0:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 800b5a2:	701c      	strb	r4, [r3, #0]
}
 800b5a4:	b013      	add	sp, #76	; 0x4c
 800b5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( linkAdrParams.ChMaskCtrl == 6 )
 800b5aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800b5ae:	f8bd 2018 	ldrh.w	r2, [sp, #24]
        bytesProcessed += nextIndex;
 800b5b2:	4404      	add	r4, r0
        if( linkAdrParams.ChMaskCtrl == 6 )
 800b5b4:	2b06      	cmp	r3, #6
        bytesProcessed += nextIndex;
 800b5b6:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800b5b8:	d10b      	bne.n	800b5d2 <RegionUS915LinkAdrReq+0x15e>
            channelsMask[0] = 0xFFFF;
 800b5ba:	f8ad 901c 	strh.w	r9, [sp, #28]
            channelsMask[1] = 0xFFFF;
 800b5be:	f8ad 901e 	strh.w	r9, [sp, #30]
            channelsMask[2] = 0xFFFF;
 800b5c2:	f8ad 9020 	strh.w	r9, [sp, #32]
            channelsMask[3] = 0xFFFF;
 800b5c6:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800b5d0:	e76a      	b.n	800b4a8 <RegionUS915LinkAdrReq+0x34>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800b5d2:	2b07      	cmp	r3, #7
 800b5d4:	d108      	bne.n	800b5e8 <RegionUS915LinkAdrReq+0x174>
            channelsMask[0] = 0x0000;
 800b5d6:	f8ad 801c 	strh.w	r8, [sp, #28]
            channelsMask[1] = 0x0000;
 800b5da:	f8ad 801e 	strh.w	r8, [sp, #30]
            channelsMask[2] = 0x0000;
 800b5de:	f8ad 8020 	strh.w	r8, [sp, #32]
            channelsMask[3] = 0x0000;
 800b5e2:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800b5e6:	e7f0      	b.n	800b5ca <RegionUS915LinkAdrReq+0x156>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800b5e8:	2b05      	cmp	r3, #5
 800b5ea:	d147      	bne.n	800b67c <RegionUS915LinkAdrReq+0x208>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b5ec:	f04f 0c00 	mov.w	ip, #0
 800b5f0:	b2d2      	uxtb	r2, r2
            uint8_t cntChannelMask = 0;
 800b5f2:	4661      	mov	r1, ip
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	fa03 fa0c 	lsl.w	sl, r3, ip
                    if( ( i % 2 ) == 0 )
 800b5fa:	ea0c 0b03 	and.w	fp, ip, r3
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b5fe:	ab12      	add	r3, sp, #72	; 0x48
 800b600:	eb03 0e41 	add.w	lr, r3, r1, lsl #1
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b604:	ea12 0f0a 	tst.w	r2, sl
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b608:	f83e 3c2c 	ldrh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 800b60c:	fa0f f08a 	sxth.w	r0, sl
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b610:	d01d      	beq.n	800b64e <RegionUS915LinkAdrReq+0x1da>
                    if( ( i % 2 ) == 0 )
 800b612:	f1bb 0f00 	cmp.w	fp, #0
 800b616:	d10e      	bne.n	800b636 <RegionUS915LinkAdrReq+0x1c2>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b618:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800b61c:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 800b620:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b624:	4303      	orrs	r3, r0
 800b626:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            for( uint8_t i = 0; i <= 7; i++ )
 800b62a:	f10c 0c01 	add.w	ip, ip, #1
 800b62e:	f1bc 0f08 	cmp.w	ip, #8
 800b632:	d1df      	bne.n	800b5f4 <RegionUS915LinkAdrReq+0x180>
 800b634:	e738      	b.n	800b4a8 <RegionUS915LinkAdrReq+0x34>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800b636:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800b63a:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 800b63e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b642:	4303      	orrs	r3, r0
 800b644:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                        cntChannelMask++;
 800b648:	3101      	adds	r1, #1
 800b64a:	b2c9      	uxtb	r1, r1
 800b64c:	e7ed      	b.n	800b62a <RegionUS915LinkAdrReq+0x1b6>
                        channelsMask[4] &= ~( bitMask << i );
 800b64e:	43c0      	mvns	r0, r0
                    if( ( i % 2 ) == 0 )
 800b650:	f1bb 0f00 	cmp.w	fp, #0
 800b654:	d109      	bne.n	800b66a <RegionUS915LinkAdrReq+0x1f6>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800b656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b65a:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 800b65e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b662:	4018      	ands	r0, r3
 800b664:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800b668:	e7df      	b.n	800b62a <RegionUS915LinkAdrReq+0x1b6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 800b670:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b674:	4018      	ands	r0, r3
 800b676:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800b67a:	e7e5      	b.n	800b648 <RegionUS915LinkAdrReq+0x1d4>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800b67c:	a912      	add	r1, sp, #72	; 0x48
 800b67e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b682:	f823 2c2c 	strh.w	r2, [r3, #-44]
 800b686:	e70f      	b.n	800b4a8 <RegionUS915LinkAdrReq+0x34>
        status &= 0xFE; // Channel mask KO
 800b688:	2306      	movs	r3, #6
 800b68a:	e724      	b.n	800b4d6 <RegionUS915LinkAdrReq+0x62>
 800b68c:	2000204c 	.word	0x2000204c
 800b690:	20002048 	.word	0x20002048

0800b694 <RegionUS915AlternateDr>:
{
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800b694:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <RegionUS915AlternateDr+0x28>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	7b53      	ldrb	r3, [r2, #13]
    if( type == ALTERNATE_DR )
 800b69a:	b961      	cbnz	r1, 800b6b6 <RegionUS915AlternateDr+0x22>
        RegionNvmGroup1->JoinTrialsCounter++;
 800b69c:	3301      	adds	r3, #1
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 800b69e:	7353      	strb	r3, [r2, #13]
 800b6a0:	7b53      	ldrb	r3, [r2, #13]
 800b6a2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800b6a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800b6aa:	b2db      	uxtb	r3, r3
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800b6ac:	2b1d      	cmp	r3, #29
    }
    return currentDr;
}
 800b6ae:	bf34      	ite	cc
 800b6b0:	2004      	movcc	r0, #4
 800b6b2:	2000      	movcs	r0, #0
 800b6b4:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	e7f1      	b.n	800b69e <RegionUS915AlternateDr+0xa>
 800b6ba:	bf00      	nop
 800b6bc:	20002048 	.word	0x20002048

0800b6c0 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t nbEnabledChannels = 0;
 800b6c4:	2500      	movs	r5, #0
{
 800b6c6:	b0a4      	sub	sp, #144	; 0x90
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800b6c8:	4e48      	ldr	r6, [pc, #288]	; (800b7ec <RegionUS915NextChannel+0x12c>)
    uint8_t nbEnabledChannels = 0;
 800b6ca:	f88d 500e 	strb.w	r5, [sp, #14]
{
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	460f      	mov	r7, r1
 800b6d2:	4691      	mov	r9, r2
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	2244      	movs	r2, #68	; 0x44
 800b6d8:	a813      	add	r0, sp, #76	; 0x4c
{
 800b6da:	4698      	mov	r8, r3
    uint8_t nbRestrictedChannels = 0;
 800b6dc:	f88d 500f 	strb.w	r5, [sp, #15]
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800b6e0:	9512      	str	r5, [sp, #72]	; 0x48
 800b6e2:	f00c f8cc 	bl	801787e <memset>
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	6830      	ldr	r0, [r6, #0]
 800b6ea:	f8df a104 	ldr.w	sl, [pc, #260]	; 800b7f0 <RegionUS915NextChannel+0x130>
 800b6ee:	2204      	movs	r2, #4
 800b6f0:	f008 fb6f 	bl	8013dd2 <RegionCommonCountChannels>
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	b948      	cbnz	r0, 800b70c <RegionUS915NextChannel+0x4c>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800b6f8:	f8da 1000 	ldr.w	r1, [sl]
 800b6fc:	6830      	ldr	r0, [r6, #0]
 800b6fe:	2204      	movs	r2, #4
 800b700:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800b704:	f008 fb83 	bl	8013e0e <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800b708:	6833      	ldr	r3, [r6, #0]
 800b70a:	731d      	strb	r5, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800b70c:	f994 3008 	ldrsb.w	r3, [r4, #8]
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800b710:	6832      	ldr	r2, [r6, #0]
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800b712:	f8da 1000 	ldr.w	r1, [sl]
    if( nextChanParams->Datarate >= DR_4 )
 800b716:	2b03      	cmp	r3, #3
 800b718:	dd04      	ble.n	800b724 <RegionUS915NextChannel+0x64>
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800b71a:	7a10      	ldrb	r0, [r2, #8]
 800b71c:	b910      	cbnz	r0, 800b724 <RegionUS915NextChannel+0x64>
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800b71e:	f8b1 0368 	ldrh.w	r0, [r1, #872]	; 0x368
 800b722:	8110      	strh	r0, [r2, #8]

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800b724:	e9cd 2105 	strd	r2, r1, [sp, #20]
    countChannelsParams.Bands = RegionBands;
 800b728:	4a32      	ldr	r2, [pc, #200]	; (800b7f4 <RegionUS915NextChannel+0x134>)
    countChannelsParams.Joined = nextChanParams->Joined;
 800b72a:	7a60      	ldrb	r0, [r4, #9]
    countChannelsParams.Bands = RegionBands;
 800b72c:	6812      	ldr	r2, [r2, #0]
 800b72e:	9207      	str	r2, [sp, #28]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800b730:	2248      	movs	r2, #72	; 0x48
 800b732:	f8ad 2020 	strh.w	r2, [sp, #32]
    countChannelsParams.JoinChannels = NULL;
 800b736:	2200      	movs	r2, #0
 800b738:	9209      	str	r2, [sp, #36]	; 0x24

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800b73a:	6822      	ldr	r2, [r4, #0]
 800b73c:	920a      	str	r2, [sp, #40]	; 0x28
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800b73e:	6862      	ldr	r2, [r4, #4]
 800b740:	920b      	str	r2, [sp, #44]	; 0x2c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800b742:	7aa2      	ldrb	r2, [r4, #10]
    countChannelsParams.Joined = nextChanParams->Joined;
 800b744:	f88d 0010 	strb.w	r0, [sp, #16]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800b748:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800b74c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800b750:	2201      	movs	r2, #1
 800b752:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800b756:	aa04      	add	r2, sp, #16
 800b758:	9211      	str	r2, [sp, #68]	; 0x44
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800b75a:	aa0d      	add	r2, sp, #52	; 0x34
 800b75c:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800b760:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b762:	8ae1      	ldrh	r1, [r4, #22]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800b764:	f88d 3011 	strb.w	r3, [sp, #17]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b768:	4618      	mov	r0, r3
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800b76a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b76e:	f7ff fba1 	bl	800aeb4 <GetTimeOnAir>

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800b772:	f10d 030f 	add.w	r3, sp, #15
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b776:	9010      	str	r0, [sp, #64]	; 0x40
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	f8cd 9004 	str.w	r9, [sp, #4]
 800b77e:	f10d 030e 	add.w	r3, sp, #14
 800b782:	aa12      	add	r2, sp, #72	; 0x48
 800b784:	4641      	mov	r1, r8
 800b786:	a80a      	add	r0, sp, #40	; 0x28
 800b788:	f008 fc70 	bl	801406c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800b78c:	4605      	mov	r5, r0
 800b78e:	b980      	cbnz	r0, 800b7b2 <RegionUS915NextChannel+0xf2>
    {
        if( nextChanParams->Joined == true )
 800b790:	7a63      	ldrb	r3, [r4, #9]
 800b792:	b193      	cbz	r3, 800b7ba <RegionUS915NextChannel+0xfa>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800b794:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800b798:	3901      	subs	r1, #1
 800b79a:	f007 f904 	bl	80129a6 <randr>
 800b79e:	ab24      	add	r3, sp, #144	; 0x90
 800b7a0:	4418      	add	r0, r3
 800b7a2:	f810 3c48 	ldrb.w	r3, [r0, #-72]
                uint8_t i = 0;
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
                }
                *channel = 64 + i;
 800b7a6:	703b      	strb	r3, [r7, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800b7a8:	7839      	ldrb	r1, [r7, #0]
 800b7aa:	6830      	ldr	r0, [r6, #0]
 800b7ac:	2248      	movs	r2, #72	; 0x48
 800b7ae:	f008 faf7 	bl	8013da0 <RegionCommonChanDisable>
    }
    return status;
}
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	b024      	add	sp, #144	; 0x90
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( nextChanParams->Datarate == DR_0 )
 800b7ba:	f994 3008 	ldrsb.w	r3, [r4, #8]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800b7be:	6830      	ldr	r0, [r6, #0]
            if( nextChanParams->Datarate == DR_0 )
 800b7c0:	b153      	cbz	r3, 800b7d8 <RegionUS915NextChannel+0x118>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800b7c2:	7a00      	ldrb	r0, [r0, #8]
 800b7c4:	462a      	mov	r2, r5
 800b7c6:	b2d3      	uxtb	r3, r2
 800b7c8:	fa40 f103 	asr.w	r1, r0, r3
 800b7cc:	07c9      	lsls	r1, r1, #31
 800b7ce:	f102 0201 	add.w	r2, r2, #1
 800b7d2:	d5f8      	bpl.n	800b7c6 <RegionUS915NextChannel+0x106>
                *channel = 64 + i;
 800b7d4:	3340      	adds	r3, #64	; 0x40
 800b7d6:	e7e6      	b.n	800b7a6 <RegionUS915NextChannel+0xe6>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800b7d8:	463a      	mov	r2, r7
 800b7da:	f100 010c 	add.w	r1, r0, #12
 800b7de:	f008 fca8 	bl	8014132 <RegionBaseUSComputeNext125kHzJoinChannel>
 800b7e2:	2803      	cmp	r0, #3
 800b7e4:	d1e0      	bne.n	800b7a8 <RegionUS915NextChannel+0xe8>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	e7e3      	b.n	800b7b2 <RegionUS915NextChannel+0xf2>
 800b7ea:	bf00      	nop
 800b7ec:	20002048 	.word	0x20002048
 800b7f0:	2000204c 	.word	0x2000204c
 800b7f4:	20002044 	.word	0x20002044

0800b7f8 <RegionUS915ApplyDrOffset>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800b7f8:	4b03      	ldr	r3, [pc, #12]	; (800b808 <RegionUS915ApplyDrOffset+0x10>)
 800b7fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b7fe:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800b800:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 800b804:	b2c0      	uxtb	r0, r0
 800b806:	4770      	bx	lr
 800b808:	0801a0e3 	.word	0x0801a0e3

0800b80c <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
 800b80c:	4b08      	ldr	r3, [pc, #32]	; (800b830 <registry_find+0x24>)
 800b80e:	6859      	ldr	r1, [r3, #4]
{
 800b810:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
 800b812:	b111      	cbz	r1, 800b81a <registry_find+0xe>
 800b814:	6819      	ldr	r1, [r3, #0]
 800b816:	4288      	cmp	r0, r1
 800b818:	d007      	beq.n	800b82a <registry_find+0x1e>
 800b81a:	68d8      	ldr	r0, [r3, #12]
 800b81c:	b130      	cbz	r0, 800b82c <registry_find+0x20>
 800b81e:	689b      	ldr	r3, [r3, #8]
		struct registry_entry *ep = &registry[i];
 800b820:	4804      	ldr	r0, [pc, #16]	; (800b834 <registry_find+0x28>)
 800b822:	429a      	cmp	r2, r3
 800b824:	bf18      	it	ne
 800b826:	2000      	movne	r0, #0
 800b828:	4770      	bx	lr
 800b82a:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	2000206c 	.word	0x2000206c
 800b834:	20002074 	.word	0x20002074

0800b838 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800b838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800b83a:	ab0b      	add	r3, sp, #44	; 0x2c
 800b83c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800b83e:	9303      	str	r3, [sp, #12]
 800b840:	4b05      	ldr	r3, [pc, #20]	; (800b858 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800b842:	9302      	str	r3, [sp, #8]
 800b844:	2300      	movs	r3, #0
 800b846:	e9cd 3300 	strd	r3, r3, [sp]
 800b84a:	2202      	movs	r2, #2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7f8 ff5b 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 800b852:	b007      	add	sp, #28
 800b854:	f85d fb04 	ldr.w	pc, [sp], #4
 800b858:	0801a117 	.word	0x0801a117

0800b85c <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
 800b85c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 800b85e:	4804      	ldr	r0, [pc, #16]	; (800b870 <fs_init+0x14>)
 800b860:	f00b fcd0 	bl	8017204 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
 800b864:	4b03      	ldr	r3, [pc, #12]	; (800b874 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
 800b866:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 800b868:	e9c3 3300 	strd	r3, r3, [r3]
 800b86c:	bd08      	pop	{r3, pc}
 800b86e:	bf00      	nop
 800b870:	20002058 	.word	0x20002058
 800b874:	20002050 	.word	0x20002050

0800b878 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800b87c:	4801      	ldr	r0, [pc, #4]	; (800b884 <k_mutex_lock.constprop.0.isra.0+0xc>)
 800b87e:	f004 bab7 	b.w	800fdf0 <z_impl_k_mutex_lock>
 800b882:	bf00      	nop
 800b884:	20002058 	.word	0x20002058

0800b888 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 800b888:	4801      	ldr	r0, [pc, #4]	; (800b890 <k_mutex_unlock.constprop.0.isra.0+0x8>)
 800b88a:	f004 bb29 	b.w	800fee0 <z_impl_k_mutex_unlock>
 800b88e:	bf00      	nop
 800b890:	20002058 	.word	0x20002058

0800b894 <fs_get_mnt_point>:
{
 800b894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b898:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
 800b89a:	4608      	mov	r0, r1
{
 800b89c:	4688      	mov	r8, r1
 800b89e:	4615      	mov	r5, r2
	size_t len, name_len = strlen(name);
 800b8a0:	f7f5 fd91 	bl	80013c6 <strlen>
	k_mutex_lock(&mutex, K_FOREVER);
 800b8a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	size_t len, name_len = strlen(name);
 800b8a8:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
 800b8aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8ae:	f7ff ffe3 	bl	800b878 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
 800b8b2:	4b1a      	ldr	r3, [pc, #104]	; (800b91c <fs_get_mnt_point+0x88>)
 800b8b4:	681c      	ldr	r4, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
 800b8b6:	f04f 0900 	mov.w	r9, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b8ba:	429c      	cmp	r4, r3
 800b8bc:	bf08      	it	eq
 800b8be:	2400      	moveq	r4, #0
	return (node == list->tail) ? NULL : node->next;
 800b8c0:	464f      	mov	r7, r9
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 800b8c2:	b954      	cbnz	r4, 800b8da <fs_get_mnt_point+0x46>
	k_mutex_unlock(&mutex);
 800b8c4:	f7ff ffe0 	bl	800b888 <k_mutex_unlock.constprop.0.isra.0>
	if (mnt_p == NULL) {
 800b8c8:	b317      	cbz	r7, 800b910 <fs_get_mnt_point+0x7c>
	*mnt_pntp = mnt_p;
 800b8ca:	f8ca 7000 	str.w	r7, [sl]
	if (match_len)
 800b8ce:	b315      	cbz	r5, 800b916 <fs_get_mnt_point+0x82>
		*match_len = mnt_p->mountp_len;
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	602b      	str	r3, [r5, #0]
	return 0;
 800b8d4:	2000      	movs	r0, #0
}
 800b8d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
 800b8da:	69a6      	ldr	r6, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
 800b8dc:	45b1      	cmp	r9, r6
 800b8de:	d812      	bhi.n	800b906 <fs_get_mnt_point+0x72>
 800b8e0:	45b3      	cmp	fp, r6
 800b8e2:	d310      	bcc.n	800b906 <fs_get_mnt_point+0x72>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
 800b8e4:	2e01      	cmp	r6, #1
 800b8e6:	d904      	bls.n	800b8f2 <fs_get_mnt_point+0x5e>
 800b8e8:	f818 2006 	ldrb.w	r2, [r8, r6]
 800b8ec:	2a2f      	cmp	r2, #47	; 0x2f
 800b8ee:	d000      	beq.n	800b8f2 <fs_get_mnt_point+0x5e>
 800b8f0:	b94a      	cbnz	r2, 800b906 <fs_get_mnt_point+0x72>
		if (strncmp(name, itr->mnt_point, len) == 0) {
 800b8f2:	68e1      	ldr	r1, [r4, #12]
 800b8f4:	4632      	mov	r2, r6
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	f00b fffa 	bl	80178f0 <strncmp>
 800b8fc:	4b07      	ldr	r3, [pc, #28]	; (800b91c <fs_get_mnt_point+0x88>)
 800b8fe:	2800      	cmp	r0, #0
 800b900:	bf04      	itt	eq
 800b902:	46b1      	moveq	r9, r6
 800b904:	4627      	moveq	r7, r4
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	4294      	cmp	r4, r2
 800b90a:	d0db      	beq.n	800b8c4 <fs_get_mnt_point+0x30>
 800b90c:	6824      	ldr	r4, [r4, #0]
 800b90e:	e7d8      	b.n	800b8c2 <fs_get_mnt_point+0x2e>
		return -ENOENT;
 800b910:	f06f 0001 	mvn.w	r0, #1
 800b914:	e7df      	b.n	800b8d6 <fs_get_mnt_point+0x42>
	return 0;
 800b916:	4628      	mov	r0, r5
 800b918:	e7dd      	b.n	800b8d6 <fs_get_mnt_point+0x42>
 800b91a:	bf00      	nop
 800b91c:	20002050 	.word	0x20002050

0800b920 <fs_open>:
{
 800b920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b922:	4605      	mov	r5, r0
 800b924:	b089      	sub	sp, #36	; 0x24
 800b926:	4617      	mov	r7, r2
	if ((file_name == NULL) ||
 800b928:	460e      	mov	r6, r1
 800b92a:	b971      	cbnz	r1, 800b94a <fs_open+0x2a>
		LOG_ERR("invalid file name!!");
 800b92c:	4b2a      	ldr	r3, [pc, #168]	; (800b9d8 <fs_open+0xb8>)
 800b92e:	9306      	str	r3, [sp, #24]
 800b930:	482a      	ldr	r0, [pc, #168]	; (800b9dc <fs_open+0xbc>)
 800b932:	2302      	movs	r3, #2
 800b934:	aa05      	add	r2, sp, #20
 800b936:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 800b93a:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("invalid file name!!");
 800b93e:	9305      	str	r3, [sp, #20]
 800b940:	f008 fc96 	bl	8014270 <z_log_msg2_static_create.constprop.0>
}
 800b944:	4620      	mov	r0, r4
 800b946:	b009      	add	sp, #36	; 0x24
 800b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
 800b94a:	4608      	mov	r0, r1
 800b94c:	f7f5 fd3b 	bl	80013c6 <strlen>
	if ((file_name == NULL) ||
 800b950:	2801      	cmp	r0, #1
 800b952:	d9eb      	bls.n	800b92c <fs_open+0xc>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
 800b954:	7833      	ldrb	r3, [r6, #0]
 800b956:	2b2f      	cmp	r3, #47	; 0x2f
 800b958:	d1e8      	bne.n	800b92c <fs_open+0xc>
	if (zfp->mp != NULL) {
 800b95a:	686a      	ldr	r2, [r5, #4]
 800b95c:	2a00      	cmp	r2, #0
 800b95e:	d132      	bne.n	800b9c6 <fs_open+0xa6>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
 800b960:	4631      	mov	r1, r6
 800b962:	a801      	add	r0, sp, #4
 800b964:	f7ff ff96 	bl	800b894 <fs_get_mnt_point>
	if (rc < 0) {
 800b968:	1e04      	subs	r4, r0, #0
 800b96a:	da0a      	bge.n	800b982 <fs_open+0x62>
		LOG_ERR("mount point not found!!");
 800b96c:	4b1c      	ldr	r3, [pc, #112]	; (800b9e0 <fs_open+0xc0>)
 800b96e:	9306      	str	r3, [sp, #24]
 800b970:	481a      	ldr	r0, [pc, #104]	; (800b9dc <fs_open+0xbc>)
 800b972:	2302      	movs	r3, #2
 800b974:	aa05      	add	r2, sp, #20
 800b976:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b97a:	9305      	str	r3, [sp, #20]
 800b97c:	f008 fc78 	bl	8014270 <z_log_msg2_static_create.constprop.0>
		return rc;
 800b980:	e7e0      	b.n	800b944 <fs_open+0x24>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
 800b982:	9b01      	ldr	r3, [sp, #4]
 800b984:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b988:	0792      	lsls	r2, r2, #30
 800b98a:	d502      	bpl.n	800b992 <fs_open+0x72>
 800b98c:	f017 0f12 	tst.w	r7, #18
 800b990:	d11c      	bne.n	800b9cc <fs_open+0xac>
	CHECKIF(mp->fs->open == NULL) {
 800b992:	69da      	ldr	r2, [r3, #28]
 800b994:	6814      	ldr	r4, [r2, #0]
 800b996:	b1e4      	cbz	r4, 800b9d2 <fs_open+0xb2>
	zfp->mp = mp;
 800b998:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
 800b99a:	463a      	mov	r2, r7
 800b99c:	4631      	mov	r1, r6
 800b99e:	4628      	mov	r0, r5
 800b9a0:	47a0      	blx	r4
	if (rc < 0) {
 800b9a2:	1e04      	subs	r4, r0, #0
 800b9a4:	da0d      	bge.n	800b9c2 <fs_open+0xa2>
		LOG_ERR("file open error (%d)", rc);
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	; (800b9e4 <fs_open+0xc4>)
 800b9a8:	480c      	ldr	r0, [pc, #48]	; (800b9dc <fs_open+0xbc>)
 800b9aa:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b9ae:	aa05      	add	r2, sp, #20
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800b9b6:	9305      	str	r3, [sp, #20]
 800b9b8:	f008 fc5a 	bl	8014270 <z_log_msg2_static_create.constprop.0>
		zfp->mp = NULL;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	606b      	str	r3, [r5, #4]
		return rc;
 800b9c0:	e7c0      	b.n	800b944 <fs_open+0x24>
	zfp->flags = flags;
 800b9c2:	722f      	strb	r7, [r5, #8]
	return rc;
 800b9c4:	e7be      	b.n	800b944 <fs_open+0x24>
		return -EBUSY;
 800b9c6:	f06f 040f 	mvn.w	r4, #15
 800b9ca:	e7bb      	b.n	800b944 <fs_open+0x24>
		return -EROFS;
 800b9cc:	f06f 041d 	mvn.w	r4, #29
 800b9d0:	e7b8      	b.n	800b944 <fs_open+0x24>
		return -ENOTSUP;
 800b9d2:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800b9d6:	e7b5      	b.n	800b944 <fs_open+0x24>
 800b9d8:	0801a138 	.word	0x0801a138
 800b9dc:	08018090 	.word	0x08018090
 800b9e0:	0801a14c 	.word	0x0801a14c
 800b9e4:	0801a164 	.word	0x0801a164

0800b9e8 <fs_close>:
{
 800b9e8:	b530      	push	{r4, r5, lr}
	if (zfp->mp == NULL) {
 800b9ea:	6844      	ldr	r4, [r0, #4]
{
 800b9ec:	b087      	sub	sp, #28
 800b9ee:	4605      	mov	r5, r0
	if (zfp->mp == NULL) {
 800b9f0:	b184      	cbz	r4, 800ba14 <fs_close+0x2c>
	CHECKIF(zfp->mp->fs->close == NULL) {
 800b9f2:	69e3      	ldr	r3, [r4, #28]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	b19b      	cbz	r3, 800ba20 <fs_close+0x38>
	rc = zfp->mp->fs->close(zfp);
 800b9f8:	4798      	blx	r3
	if (rc < 0) {
 800b9fa:	1e04      	subs	r4, r0, #0
 800b9fc:	da0d      	bge.n	800ba1a <fs_close+0x32>
		LOG_ERR("file close error (%d)", rc);
 800b9fe:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <fs_close+0x40>)
 800ba00:	480a      	ldr	r0, [pc, #40]	; (800ba2c <fs_close+0x44>)
 800ba02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba06:	aa03      	add	r2, sp, #12
 800ba08:	2303      	movs	r3, #3
 800ba0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800ba0e:	9303      	str	r3, [sp, #12]
 800ba10:	f008 fc2e 	bl	8014270 <z_log_msg2_static_create.constprop.0>
}
 800ba14:	4620      	mov	r0, r4
 800ba16:	b007      	add	sp, #28
 800ba18:	bd30      	pop	{r4, r5, pc}
	zfp->mp = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	606b      	str	r3, [r5, #4]
	return rc;
 800ba1e:	e7f9      	b.n	800ba14 <fs_close+0x2c>
		return -ENOTSUP;
 800ba20:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800ba24:	e7f6      	b.n	800ba14 <fs_close+0x2c>
 800ba26:	bf00      	nop
 800ba28:	0801a179 	.word	0x0801a179
 800ba2c:	08018090 	.word	0x08018090

0800ba30 <fs_write>:
{
 800ba30:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
 800ba32:	6843      	ldr	r3, [r0, #4]
{
 800ba34:	b086      	sub	sp, #24
	if (zfp->mp == NULL) {
 800ba36:	b19b      	cbz	r3, 800ba60 <fs_write+0x30>
	CHECKIF(zfp->mp->fs->write == NULL) {
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	b19b      	cbz	r3, 800ba66 <fs_write+0x36>
	rc = zfp->mp->fs->write(zfp, ptr, size);
 800ba3e:	4798      	blx	r3
	if (rc < 0) {
 800ba40:	1e04      	subs	r4, r0, #0
 800ba42:	da0a      	bge.n	800ba5a <fs_write+0x2a>
		LOG_ERR("file write error (%d)", rc);
 800ba44:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <fs_write+0x3c>)
 800ba46:	480a      	ldr	r0, [pc, #40]	; (800ba70 <fs_write+0x40>)
 800ba48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba4c:	aa03      	add	r2, sp, #12
 800ba4e:	2303      	movs	r3, #3
 800ba50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800ba54:	9303      	str	r3, [sp, #12]
 800ba56:	f008 fc0b 	bl	8014270 <z_log_msg2_static_create.constprop.0>
}
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	b006      	add	sp, #24
 800ba5e:	bd10      	pop	{r4, pc}
		return -EBADF;
 800ba60:	f06f 0408 	mvn.w	r4, #8
 800ba64:	e7f9      	b.n	800ba5a <fs_write+0x2a>
		return -ENOTSUP;
 800ba66:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800ba6a:	e7f6      	b.n	800ba5a <fs_write+0x2a>
 800ba6c:	0801a18f 	.word	0x0801a18f
 800ba70:	08018090 	.word	0x08018090

0800ba74 <fs_opendir>:
{
 800ba74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba76:	4606      	mov	r6, r0
 800ba78:	b089      	sub	sp, #36	; 0x24
	if ((abs_path == NULL) ||
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	b971      	cbnz	r1, 800ba9c <fs_opendir+0x28>
		LOG_ERR("invalid directory name!!");
 800ba7e:	4b30      	ldr	r3, [pc, #192]	; (800bb40 <fs_opendir+0xcc>)
 800ba80:	9306      	str	r3, [sp, #24]
 800ba82:	4830      	ldr	r0, [pc, #192]	; (800bb44 <fs_opendir+0xd0>)
 800ba84:	2302      	movs	r3, #2
 800ba86:	aa05      	add	r2, sp, #20
 800ba88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 800ba8c:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("invalid directory name!!");
 800ba90:	9305      	str	r3, [sp, #20]
 800ba92:	f008 fbed 	bl	8014270 <z_log_msg2_static_create.constprop.0>
}
 800ba96:	4620      	mov	r0, r4
 800ba98:	b009      	add	sp, #36	; 0x24
 800ba9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	f7f5 fc92 	bl	80013c6 <strlen>
	if ((abs_path == NULL) ||
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d0eb      	beq.n	800ba7e <fs_opendir+0xa>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 800baa6:	782b      	ldrb	r3, [r5, #0]
 800baa8:	2b2f      	cmp	r3, #47	; 0x2f
 800baaa:	d1e8      	bne.n	800ba7e <fs_opendir+0xa>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
 800baac:	6873      	ldr	r3, [r6, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d140      	bne.n	800bb34 <fs_opendir+0xc0>
 800bab2:	6837      	ldr	r7, [r6, #0]
 800bab4:	2f00      	cmp	r7, #0
 800bab6:	d13d      	bne.n	800bb34 <fs_opendir+0xc0>
	if (strcmp(abs_path, "/") == 0) {
 800bab8:	4923      	ldr	r1, [pc, #140]	; (800bb48 <fs_opendir+0xd4>)
 800baba:	4628      	mov	r0, r5
 800babc:	f7f5 fc79 	bl	80013b2 <strcmp>
 800bac0:	4604      	mov	r4, r0
 800bac2:	b980      	cbnz	r0, 800bae6 <fs_opendir+0x72>
		k_mutex_lock(&mutex, K_FOREVER);
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bacc:	f7ff fed4 	bl	800b878 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
 800bad0:	4a1e      	ldr	r2, [pc, #120]	; (800bb4c <fs_opendir+0xd8>)
		zdp->mp = NULL;
 800bad2:	6074      	str	r4, [r6, #4]
 800bad4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bad6:	4293      	cmp	r3, r2
 800bad8:	bf14      	ite	ne
 800bada:	461f      	movne	r7, r3
 800badc:	4627      	moveq	r7, r4
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
 800bade:	6037      	str	r7, [r6, #0]
		k_mutex_unlock(&mutex);
 800bae0:	f7ff fed2 	bl	800b888 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
 800bae4:	e7d7      	b.n	800ba96 <fs_opendir+0x22>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 800bae6:	463a      	mov	r2, r7
 800bae8:	4629      	mov	r1, r5
 800baea:	a801      	add	r0, sp, #4
 800baec:	f7ff fed2 	bl	800b894 <fs_get_mnt_point>
	if (rc < 0) {
 800baf0:	1e04      	subs	r4, r0, #0
 800baf2:	da0a      	bge.n	800bb0a <fs_opendir+0x96>
		LOG_ERR("mount point not found!!");
 800baf4:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <fs_opendir+0xdc>)
 800baf6:	9306      	str	r3, [sp, #24]
 800baf8:	2302      	movs	r3, #2
 800bafa:	9305      	str	r3, [sp, #20]
 800bafc:	aa05      	add	r2, sp, #20
 800bafe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		LOG_ERR("directory open error (%d)", rc);
 800bb02:	4810      	ldr	r0, [pc, #64]	; (800bb44 <fs_opendir+0xd0>)
 800bb04:	f008 fbb4 	bl	8014270 <z_log_msg2_static_create.constprop.0>
 800bb08:	e7c5      	b.n	800ba96 <fs_opendir+0x22>
	CHECKIF(mp->fs->opendir == NULL) {
 800bb0a:	9901      	ldr	r1, [sp, #4]
 800bb0c:	69cb      	ldr	r3, [r1, #28]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	b19b      	cbz	r3, 800bb3a <fs_opendir+0xc6>
	zdp->mp = mp;
 800bb12:	6071      	str	r1, [r6, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
 800bb14:	4630      	mov	r0, r6
 800bb16:	4629      	mov	r1, r5
 800bb18:	4798      	blx	r3
	if (rc < 0) {
 800bb1a:	1e04      	subs	r4, r0, #0
 800bb1c:	dabb      	bge.n	800ba96 <fs_opendir+0x22>
		LOG_ERR("directory open error (%d)", rc);
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	; (800bb54 <fs_opendir+0xe0>)
 800bb20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bb24:	2303      	movs	r3, #3
		zdp->dirp = NULL;
 800bb26:	e9c6 7700 	strd	r7, r7, [r6]
		LOG_ERR("directory open error (%d)", rc);
 800bb2a:	9305      	str	r3, [sp, #20]
 800bb2c:	aa05      	add	r2, sp, #20
 800bb2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bb32:	e7e6      	b.n	800bb02 <fs_opendir+0x8e>
		return -EBUSY;
 800bb34:	f06f 040f 	mvn.w	r4, #15
 800bb38:	e7ad      	b.n	800ba96 <fs_opendir+0x22>
		return -ENOTSUP;
 800bb3a:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800bb3e:	e7aa      	b.n	800ba96 <fs_opendir+0x22>
 800bb40:	0801a1a5 	.word	0x0801a1a5
 800bb44:	08018090 	.word	0x08018090
 800bb48:	0801a1be 	.word	0x0801a1be
 800bb4c:	20002050 	.word	0x20002050
 800bb50:	0801a14c 	.word	0x0801a14c
 800bb54:	0801a1c0 	.word	0x0801a1c0

0800bb58 <fs_readdir>:
{
 800bb58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (zdp->mp) {
 800bb5c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 800bb60:	b087      	sub	sp, #28
 800bb62:	4606      	mov	r6, r0
 800bb64:	460f      	mov	r7, r1
	if (zdp->mp) {
 800bb66:	f1b8 0f00 	cmp.w	r8, #0
 800bb6a:	d024      	beq.n	800bbb6 <fs_readdir+0x5e>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
 800bb6c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d056      	beq.n	800bc24 <fs_readdir+0xcc>
			if ((strcmp(entry->name, ".") != 0)
 800bb76:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc48 <fs_readdir+0xf0>
 800bb7a:	1c4d      	adds	r5, r1, #1
			rc = zdp->mp->fs->readdir(zdp, entry);
 800bb7c:	6873      	ldr	r3, [r6, #4]
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	4639      	mov	r1, r7
 800bb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb84:	4630      	mov	r0, r6
 800bb86:	4798      	blx	r3
			if (rc < 0) {
 800bb88:	1e04      	subs	r4, r0, #0
 800bb8a:	db51      	blt.n	800bc30 <fs_readdir+0xd8>
			if (entry->name[0] == 0) {
 800bb8c:	787b      	ldrb	r3, [r7, #1]
 800bb8e:	b173      	cbz	r3, 800bbae <fs_readdir+0x56>
			if (entry->type != FS_DIR_ENTRY_DIR) {
 800bb90:	783b      	ldrb	r3, [r7, #0]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d10b      	bne.n	800bbae <fs_readdir+0x56>
			if ((strcmp(entry->name, ".") != 0)
 800bb96:	4641      	mov	r1, r8
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f7f5 fc0a 	bl	80013b2 <strcmp>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d0ec      	beq.n	800bb7c <fs_readdir+0x24>
			    && (strcmp(entry->name, "..") != 0)) {
 800bba2:	492a      	ldr	r1, [pc, #168]	; (800bc4c <fs_readdir+0xf4>)
 800bba4:	4628      	mov	r0, r5
 800bba6:	f7f5 fc04 	bl	80013b2 <strcmp>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d0e6      	beq.n	800bb7c <fs_readdir+0x24>
}
 800bbae:	4620      	mov	r0, r4
 800bbb0:	b007      	add	sp, #28
 800bbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (zdp->dirp == NULL) {
 800bbb6:	6804      	ldr	r4, [r0, #0]
 800bbb8:	b90c      	cbnz	r4, 800bbbe <fs_readdir+0x66>
		entry->name[0] = 0;
 800bbba:	704c      	strb	r4, [r1, #1]
		return 0;
 800bbbc:	e7f7      	b.n	800bbae <fs_readdir+0x56>
	return list->head == list;
 800bbbe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800bc50 <fs_readdir+0xf8>
	k_mutex_lock(&mutex, K_FOREVER);
 800bbc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bbca:	f7ff fe55 	bl	800b878 <k_mutex_lock.constprop.0.isra.0>
 800bbce:	f8d9 5000 	ldr.w	r5, [r9]
	return (node == list->tail) ? NULL : node->next;
 800bbd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bbd6:	454d      	cmp	r5, r9
 800bbd8:	bf08      	it	eq
 800bbda:	2500      	moveq	r5, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 800bbdc:	b915      	cbnz	r5, 800bbe4 <fs_readdir+0x8c>
	sys_dnode_t *node, *next = NULL;
 800bbde:	46a8      	mov	r8, r5
	bool found = false;
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	e014      	b.n	800bc0e <fs_readdir+0xb6>
		if (node == zdp->dirp) {
 800bbe4:	6832      	ldr	r2, [r6, #0]
 800bbe6:	4295      	cmp	r5, r2
 800bbe8:	d118      	bne.n	800bc1c <fs_readdir+0xc4>
			entry->type = FS_DIR_ENTRY_DIR;
 800bbea:	4638      	mov	r0, r7
 800bbec:	2401      	movs	r4, #1
 800bbee:	f800 4b01 	strb.w	r4, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
 800bbf2:	68e9      	ldr	r1, [r5, #12]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800bbf4:	220c      	movs	r2, #12
 800bbf6:	4421      	add	r1, r4
 800bbf8:	f00b fe8e 	bl	8017918 <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	737b      	strb	r3, [r7, #13]
			entry->size = 0;
 800bc00:	613b      	str	r3, [r7, #16]
	return (node == list->tail) ? NULL : node->next;
 800bc02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bc06:	429d      	cmp	r5, r3
 800bc08:	d001      	beq.n	800bc0e <fs_readdir+0xb6>
 800bc0a:	f8d5 8000 	ldr.w	r8, [r5]
	k_mutex_unlock(&mutex);
 800bc0e:	f7ff fe3b 	bl	800b888 <k_mutex_unlock.constprop.0.isra.0>
	if (!found) {
 800bc12:	b154      	cbz	r4, 800bc2a <fs_readdir+0xd2>
	zdp->dirp = next;
 800bc14:	f8c6 8000 	str.w	r8, [r6]
	return 0;
 800bc18:	2400      	movs	r4, #0
 800bc1a:	e7c8      	b.n	800bbae <fs_readdir+0x56>
 800bc1c:	429d      	cmp	r5, r3
 800bc1e:	d0df      	beq.n	800bbe0 <fs_readdir+0x88>
 800bc20:	682d      	ldr	r5, [r5, #0]
 800bc22:	e7db      	b.n	800bbdc <fs_readdir+0x84>
			return  -ENOTSUP;
 800bc24:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800bc28:	e7c1      	b.n	800bbae <fs_readdir+0x56>
		return -ENOENT;
 800bc2a:	f06f 0401 	mvn.w	r4, #1
 800bc2e:	e7be      	b.n	800bbae <fs_readdir+0x56>
			LOG_ERR("directory read error (%d)", rc);
 800bc30:	4b08      	ldr	r3, [pc, #32]	; (800bc54 <fs_readdir+0xfc>)
 800bc32:	4809      	ldr	r0, [pc, #36]	; (800bc58 <fs_readdir+0x100>)
 800bc34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bc38:	aa03      	add	r2, sp, #12
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bc40:	9303      	str	r3, [sp, #12]
 800bc42:	f008 fb15 	bl	8014270 <z_log_msg2_static_create.constprop.0>
 800bc46:	e7b2      	b.n	800bbae <fs_readdir+0x56>
 800bc48:	0801a85f 	.word	0x0801a85f
 800bc4c:	08018c75 	.word	0x08018c75
 800bc50:	20002050 	.word	0x20002050
 800bc54:	0801a1da 	.word	0x0801a1da
 800bc58:	08018090 	.word	0x08018090

0800bc5c <fs_closedir>:
{
 800bc5c:	b530      	push	{r4, r5, lr}
	if (zdp->mp == NULL) {
 800bc5e:	6844      	ldr	r4, [r0, #4]
{
 800bc60:	b087      	sub	sp, #28
 800bc62:	4605      	mov	r5, r0
	if (zdp->mp == NULL) {
 800bc64:	b91c      	cbnz	r4, 800bc6e <fs_closedir+0x12>
		zdp->dirp = NULL;
 800bc66:	6004      	str	r4, [r0, #0]
}
 800bc68:	4620      	mov	r0, r4
 800bc6a:	b007      	add	sp, #28
 800bc6c:	bd30      	pop	{r4, r5, pc}
	CHECKIF(zdp->mp->fs->closedir == NULL) {
 800bc6e:	69e3      	ldr	r3, [r4, #28]
 800bc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc72:	b193      	cbz	r3, 800bc9a <fs_closedir+0x3e>
	rc = zdp->mp->fs->closedir(zdp);
 800bc74:	4798      	blx	r3
	if (rc < 0) {
 800bc76:	1e04      	subs	r4, r0, #0
 800bc78:	da0b      	bge.n	800bc92 <fs_closedir+0x36>
		LOG_ERR("directory close error (%d)", rc);
 800bc7a:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <fs_closedir+0x44>)
 800bc7c:	4809      	ldr	r0, [pc, #36]	; (800bca4 <fs_closedir+0x48>)
 800bc7e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bc82:	aa03      	add	r2, sp, #12
 800bc84:	2303      	movs	r3, #3
 800bc86:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bc8a:	9303      	str	r3, [sp, #12]
 800bc8c:	f008 faf0 	bl	8014270 <z_log_msg2_static_create.constprop.0>
		return rc;
 800bc90:	e7ea      	b.n	800bc68 <fs_closedir+0xc>
	zdp->mp = NULL;
 800bc92:	2300      	movs	r3, #0
	zdp->dirp = NULL;
 800bc94:	e9c5 3300 	strd	r3, r3, [r5]
	return rc;
 800bc98:	e7e6      	b.n	800bc68 <fs_closedir+0xc>
		return -ENOTSUP;
 800bc9a:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800bc9e:	e7e3      	b.n	800bc68 <fs_closedir+0xc>
 800bca0:	0801a1f4 	.word	0x0801a1f4
 800bca4:	08018090 	.word	0x08018090

0800bca8 <fs_mount>:
{
 800bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
 800bcac:	4604      	mov	r4, r0
{
 800bcae:	b08a      	sub	sp, #40	; 0x28
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
 800bcb0:	b108      	cbz	r0, 800bcb6 <fs_mount+0xe>
 800bcb2:	68c0      	ldr	r0, [r0, #12]
 800bcb4:	b978      	cbnz	r0, 800bcd6 <fs_mount+0x2e>
		LOG_ERR("mount point not initialized!!");
 800bcb6:	4b4a      	ldr	r3, [pc, #296]	; (800bde0 <fs_mount+0x138>)
		LOG_ERR("invalid mount point!!");
 800bcb8:	9308      	str	r3, [sp, #32]
 800bcba:	484a      	ldr	r0, [pc, #296]	; (800bde4 <fs_mount+0x13c>)
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	aa07      	add	r2, sp, #28
 800bcc0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 800bcc4:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("invalid mount point!!");
 800bcc8:	9307      	str	r3, [sp, #28]
 800bcca:	f008 fad1 	bl	8014270 <z_log_msg2_static_create.constprop.0>
}
 800bcce:	4628      	mov	r0, r5
 800bcd0:	b00a      	add	sp, #40	; 0x28
 800bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = strlen(mp->mnt_point);
 800bcd6:	f7f5 fb76 	bl	80013c6 <strlen>
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 800bcda:	2801      	cmp	r0, #1
	len = strlen(mp->mnt_point);
 800bcdc:	4607      	mov	r7, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 800bcde:	d903      	bls.n	800bce8 <fs_mount+0x40>
 800bce0:	68e3      	ldr	r3, [r4, #12]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	2b2f      	cmp	r3, #47	; 0x2f
 800bce6:	d001      	beq.n	800bcec <fs_mount+0x44>
		LOG_ERR("invalid mount point!!");
 800bce8:	4b3f      	ldr	r3, [pc, #252]	; (800bde8 <fs_mount+0x140>)
 800bcea:	e7e5      	b.n	800bcb8 <fs_mount+0x10>
	return list->head == list;
 800bcec:	4e3f      	ldr	r6, [pc, #252]	; (800bdec <fs_mount+0x144>)
	k_mutex_lock(&mutex, K_FOREVER);
 800bcee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bcf6:	f7ff fdbf 	bl	800b878 <k_mutex_lock.constprop.0.isra.0>
 800bcfa:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bcfc:	42b5      	cmp	r5, r6
 800bcfe:	d115      	bne.n	800bd2c <fs_mount+0x84>
	fs = fs_type_get(mp->type);
 800bd00:	68a5      	ldr	r5, [r4, #8]
	struct registry_entry *ep = registry_find(type);
 800bd02:	4628      	mov	r0, r5
 800bd04:	f7ff fd82 	bl	800b80c <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 800bd08:	bb58      	cbnz	r0, 800bd62 <fs_mount+0xba>
		LOG_ERR("requested file system type not registered!!");
 800bd0a:	4b39      	ldr	r3, [pc, #228]	; (800bdf0 <fs_mount+0x148>)
 800bd0c:	9308      	str	r3, [sp, #32]
 800bd0e:	4835      	ldr	r0, [pc, #212]	; (800bde4 <fs_mount+0x13c>)
 800bd10:	2302      	movs	r3, #2
 800bd12:	aa07      	add	r2, sp, #28
 800bd14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800bd18:	9307      	str	r3, [sp, #28]
		rc = -ENOENT;
 800bd1a:	f06f 0501 	mvn.w	r5, #1
		LOG_ERR("requested file system type not registered!!");
 800bd1e:	f008 faa7 	bl	8014270 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 800bd22:	e01b      	b.n	800bd5c <fs_mount+0xb4>
	return (node == list->tail) ? NULL : node->next;
 800bd24:	6873      	ldr	r3, [r6, #4]
 800bd26:	429d      	cmp	r5, r3
 800bd28:	d0ea      	beq.n	800bd00 <fs_mount+0x58>
 800bd2a:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 800bd2c:	2d00      	cmp	r5, #0
 800bd2e:	d0e7      	beq.n	800bd00 <fs_mount+0x58>
		if (len != itr->mountp_len) {
 800bd30:	69ab      	ldr	r3, [r5, #24]
 800bd32:	42bb      	cmp	r3, r7
 800bd34:	d1f6      	bne.n	800bd24 <fs_mount+0x7c>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
 800bd36:	68e9      	ldr	r1, [r5, #12]
 800bd38:	68e0      	ldr	r0, [r4, #12]
 800bd3a:	463a      	mov	r2, r7
 800bd3c:	f00b fdd8 	bl	80178f0 <strncmp>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d1ef      	bne.n	800bd24 <fs_mount+0x7c>
			LOG_ERR("mount point already exists!!");
 800bd44:	4b2b      	ldr	r3, [pc, #172]	; (800bdf4 <fs_mount+0x14c>)
 800bd46:	9308      	str	r3, [sp, #32]
 800bd48:	4826      	ldr	r0, [pc, #152]	; (800bde4 <fs_mount+0x13c>)
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	aa07      	add	r2, sp, #28
 800bd4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			rc = -EBUSY;
 800bd52:	f06f 050f 	mvn.w	r5, #15
			LOG_ERR("mount point already exists!!");
 800bd56:	9307      	str	r3, [sp, #28]
 800bd58:	f008 fa8a 	bl	8014270 <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&mutex);
 800bd5c:	f7ff fd94 	bl	800b888 <k_mutex_unlock.constprop.0.isra.0>
	return rc;
 800bd60:	e7b5      	b.n	800bcce <fs_mount+0x26>
	return (ep != NULL) ? ep->fstp : NULL;
 800bd62:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (fs == NULL) {
 800bd66:	f1b8 0f00 	cmp.w	r8, #0
 800bd6a:	d0ce      	beq.n	800bd0a <fs_mount+0x62>
	CHECKIF(fs->mount == NULL) {
 800bd6c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800bd70:	b96b      	cbnz	r3, 800bd8e <fs_mount+0xe6>
		LOG_ERR("fs type %d does not support mounting", mp->type);
 800bd72:	4b21      	ldr	r3, [pc, #132]	; (800bdf8 <fs_mount+0x150>)
 800bd74:	481b      	ldr	r0, [pc, #108]	; (800bde4 <fs_mount+0x13c>)
 800bd76:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800bd7a:	aa07      	add	r2, sp, #28
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bd82:	9307      	str	r3, [sp, #28]
		rc = -ENOTSUP;
 800bd84:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("fs type %d does not support mounting", mp->type);
 800bd88:	f008 fa72 	bl	8014270 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 800bd8c:	e7e6      	b.n	800bd5c <fs_mount+0xb4>
	if (fs->unmount == NULL) {
 800bd8e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800bd92:	b953      	cbnz	r3, 800bdaa <fs_mount+0x102>
		LOG_WRN("mount path %s is not unmountable",
 800bd94:	68e2      	ldr	r2, [r4, #12]
 800bd96:	9203      	str	r2, [sp, #12]
 800bd98:	4a18      	ldr	r2, [pc, #96]	; (800bdfc <fs_mount+0x154>)
 800bd9a:	4912      	ldr	r1, [pc, #72]	; (800bde4 <fs_mount+0x13c>)
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bda2:	4618      	mov	r0, r3
 800bda4:	2202      	movs	r2, #2
 800bda6:	f7ff fd47 	bl	800b838 <z_log_msg2_runtime_create.constprop.0>
	rc = fs->mount(mp);
 800bdaa:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800bdae:	4620      	mov	r0, r4
 800bdb0:	4798      	blx	r3
	if (rc < 0) {
 800bdb2:	1e05      	subs	r5, r0, #0
 800bdb4:	da0b      	bge.n	800bdce <fs_mount+0x126>
		LOG_ERR("fs mount error (%d)", rc);
 800bdb6:	4b12      	ldr	r3, [pc, #72]	; (800be00 <fs_mount+0x158>)
 800bdb8:	480a      	ldr	r0, [pc, #40]	; (800bde4 <fs_mount+0x13c>)
 800bdba:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800bdbe:	aa07      	add	r2, sp, #28
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bdc6:	9307      	str	r3, [sp, #28]
 800bdc8:	f008 fa52 	bl	8014270 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 800bdcc:	e7c6      	b.n	800bd5c <fs_mount+0xb4>
	sys_dnode_t *const tail = list->tail;
 800bdce:	6873      	ldr	r3, [r6, #4]
	mp->fs = fs;
 800bdd0:	e9c4 7806 	strd	r7, r8, [r4, #24]
	node->prev = tail;
 800bdd4:	e9c4 6300 	strd	r6, r3, [r4]
	tail->next = node;
 800bdd8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800bdda:	6074      	str	r4, [r6, #4]
	LOG_DBG("fs mounted at %s", log_strdup(mp->mnt_point));
 800bddc:	e7be      	b.n	800bd5c <fs_mount+0xb4>
 800bdde:	bf00      	nop
 800bde0:	0801a20f 	.word	0x0801a20f
 800bde4:	08018090 	.word	0x08018090
 800bde8:	0801a22d 	.word	0x0801a22d
 800bdec:	20002050 	.word	0x20002050
 800bdf0:	0801a260 	.word	0x0801a260
 800bdf4:	0801a243 	.word	0x0801a243
 800bdf8:	0801a28c 	.word	0x0801a28c
 800bdfc:	0801a117 	.word	0x0801a117
 800be00:	0801a2b1 	.word	0x0801a2b1

0800be04 <fs_register>:
{
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800be12:	f7ff fd31 	bl	800b878 <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
 800be16:	4620      	mov	r0, r4
 800be18:	f7ff fcf8 	bl	800b80c <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 800be1c:	b108      	cbz	r0, 800be22 <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
 800be1e:	6843      	ldr	r3, [r0, #4]
 800be20:	b97b      	cbnz	r3, 800be42 <fs_register+0x3e>
		if (ep->fstp == NULL) {
 800be22:	4b0b      	ldr	r3, [pc, #44]	; (800be50 <fs_register+0x4c>)
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	b112      	cbz	r2, 800be2e <fs_register+0x2a>
 800be28:	68da      	ldr	r2, [r3, #12]
 800be2a:	b96a      	cbnz	r2, 800be48 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
 800be2c:	2201      	movs	r2, #1
			ep->type = type;
 800be2e:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			ep->fstp = fstp;
 800be32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			rv = 0;
 800be36:	2400      	movs	r4, #0
			ep->fstp = fstp;
 800be38:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
 800be3a:	f7ff fd25 	bl	800b888 <k_mutex_unlock.constprop.0.isra.0>
}
 800be3e:	4620      	mov	r0, r4
 800be40:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
 800be42:	f06f 0477 	mvn.w	r4, #119	; 0x77
 800be46:	e7f8      	b.n	800be3a <fs_register+0x36>
	int rv = -ENOSPC;
 800be48:	f06f 041b 	mvn.w	r4, #27
 800be4c:	e7f5      	b.n	800be3a <fs_register+0x36>
 800be4e:	bf00      	nop
 800be50:	2000206c 	.word	0x2000206c

0800be54 <translate_error>:
K_MEM_SLAB_DEFINE(fatfs_filep_pool, sizeof(FIL),
			CONFIG_FS_FATFS_NUM_FILES, 4);

static int translate_error(int error)
{
	switch (error) {
 800be54:	2813      	cmp	r0, #19
 800be56:	bf9a      	itte	ls
 800be58:	4b02      	ldrls	r3, [pc, #8]	; (800be64 <translate_error+0x10>)
 800be5a:	5618      	ldrsbls	r0, [r3, r0]
{
 800be5c:	f06f 0004 	mvnhi.w	r0, #4
	case FR_NOT_READY:
		return -EIO;
	}

	return -EIO;
}
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	0801a2c8 	.word	0x0801a2c8

0800be68 <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
 800be68:	4901      	ldr	r1, [pc, #4]	; (800be70 <fatfs_init+0x8>)
 800be6a:	2000      	movs	r0, #0
 800be6c:	f7ff bfca 	b.w	800be04 <fs_register>
 800be70:	08018604 	.word	0x08018604

0800be74 <fatfs_mount>:
{
 800be74:	b530      	push	{r4, r5, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 800be76:	68c1      	ldr	r1, [r0, #12]
 800be78:	2201      	movs	r2, #1
{
 800be7a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800be7e:	4604      	mov	r4, r0
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 800be80:	4411      	add	r1, r2
 800be82:	6900      	ldr	r0, [r0, #16]
 800be84:	f002 ffe6 	bl	800ee54 <f_mount>
	if (res == FR_NO_FILESYSTEM &&
 800be88:	280d      	cmp	r0, #13
 800be8a:	d119      	bne.n	800bec0 <fatfs_mount+0x4c>
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
 800be8c:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
 800be90:	079a      	lsls	r2, r3, #30
 800be92:	d422      	bmi.n	800beda <fatfs_mount+0x66>
	if (res == FR_NO_FILESYSTEM &&
 800be94:	07db      	lsls	r3, r3, #31
 800be96:	d41a      	bmi.n	800bece <fatfs_mount+0x5a>
		MKFS_PARM mkfs_opt = {
 800be98:	4b12      	ldr	r3, [pc, #72]	; (800bee4 <fatfs_mount+0x70>)
 800be9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be9c:	466d      	mov	r5, sp
 800be9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(&mountp->mnt_point[1], &mkfs_opt, work, sizeof(work));
 800bea2:	68e0      	ldr	r0, [r4, #12]
 800bea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bea8:	aa04      	add	r2, sp, #16
 800beaa:	4629      	mov	r1, r5
 800beac:	3001      	adds	r0, #1
 800beae:	f002 fff5 	bl	800ee9c <f_mkfs>
		if (res == FR_OK) {
 800beb2:	b960      	cbnz	r0, 800bece <fatfs_mount+0x5a>
					&mountp->mnt_point[1], 1);
 800beb4:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
 800beb6:	6920      	ldr	r0, [r4, #16]
 800beb8:	2201      	movs	r2, #1
 800beba:	4411      	add	r1, r2
 800bebc:	f002 ffca 	bl	800ee54 <f_mount>
	if (res == FR_OK) {
 800bec0:	b928      	cbnz	r0, 800bece <fatfs_mount+0x5a>
		mountp->flags |= FS_MOUNT_FLAG_USE_DISK_ACCESS;
 800bec2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800bec6:	f043 0308 	orr.w	r3, r3, #8
 800beca:	f884 3020 	strb.w	r3, [r4, #32]
}
 800bece:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800bed2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 800bed6:	f7ff bfbd 	b.w	800be54 <translate_error>
}
 800beda:	f06f 001d 	mvn.w	r0, #29
 800bede:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800bee2:	bd30      	pop	{r4, r5, pc}
 800bee4:	080181f4 	.word	0x080181f4

0800bee8 <fatfs_closedir>:
{
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4604      	mov	r4, r0
	res = f_closedir(zdp->dirp);
 800beec:	6800      	ldr	r0, [r0, #0]
 800beee:	f00a fdab 	bl	8016a48 <f_closedir>
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 800bef2:	4621      	mov	r1, r4
	res = f_closedir(zdp->dirp);
 800bef4:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 800bef6:	4804      	ldr	r0, [pc, #16]	; (800bf08 <fatfs_closedir+0x20>)
 800bef8:	f00b f93a 	bl	8017170 <k_mem_slab_free>
	return translate_error(res);
 800befc:	4628      	mov	r0, r5
}
 800befe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
 800bf02:	f7ff bfa7 	b.w	800be54 <translate_error>
 800bf06:	bf00      	nop
 800bf08:	200002e8 	.word	0x200002e8

0800bf0c <fatfs_close>:
{
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
 800bf10:	6800      	ldr	r0, [r0, #0]
 800bf12:	f00a fcd6 	bl	80168c2 <f_close>
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 800bf16:	4621      	mov	r1, r4
	res = f_close(zfp->filep);
 800bf18:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 800bf1a:	4805      	ldr	r0, [pc, #20]	; (800bf30 <fatfs_close+0x24>)
 800bf1c:	f00b f928 	bl	8017170 <k_mem_slab_free>
	zfp->filep = NULL;
 800bf20:	2300      	movs	r3, #0
 800bf22:	6023      	str	r3, [r4, #0]
	return translate_error(res);
 800bf24:	4628      	mov	r0, r5
}
 800bf26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
 800bf2a:	f7ff bf93 	b.w	800be54 <translate_error>
 800bf2e:	bf00      	nop
 800bf30:	20000304 	.word	0x20000304

0800bf34 <fatfs_opendir>:
{
 800bf34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 800bf36:	2200      	movs	r2, #0
{
 800bf38:	4606      	mov	r6, r0
 800bf3a:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 800bf3c:	4810      	ldr	r0, [pc, #64]	; (800bf80 <fatfs_opendir+0x4c>)
 800bf3e:	2300      	movs	r3, #0
 800bf40:	a901      	add	r1, sp, #4
 800bf42:	f003 fe7d 	bl	800fc40 <k_mem_slab_alloc>
 800bf46:	4604      	mov	r4, r0
 800bf48:	b9b0      	cbnz	r0, 800bf78 <fatfs_opendir+0x44>
__ssp_bos_icheck3(memset, void *, int)
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	222c      	movs	r2, #44	; 0x2c
 800bf4e:	9801      	ldr	r0, [sp, #4]
 800bf50:	f00b fc95 	bl	801787e <memset>
		zdp->dirp = ptr;
 800bf54:	9801      	ldr	r0, [sp, #4]
 800bf56:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
 800bf58:	1c69      	adds	r1, r5, #1
 800bf5a:	f00a fd42 	bl	80169e2 <f_opendir>
	if (res != FR_OK) {
 800bf5e:	4605      	mov	r5, r0
 800bf60:	b120      	cbz	r0, 800bf6c <fatfs_opendir+0x38>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
 800bf62:	4807      	ldr	r0, [pc, #28]	; (800bf80 <fatfs_opendir+0x4c>)
 800bf64:	a901      	add	r1, sp, #4
 800bf66:	f00b f903 	bl	8017170 <k_mem_slab_free>
		zdp->dirp = NULL;
 800bf6a:	6034      	str	r4, [r6, #0]
	return translate_error(res);
 800bf6c:	4628      	mov	r0, r5
}
 800bf6e:	b002      	add	sp, #8
 800bf70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return translate_error(res);
 800bf74:	f7ff bf6e 	b.w	800be54 <translate_error>
}
 800bf78:	f06f 000b 	mvn.w	r0, #11
 800bf7c:	b002      	add	sp, #8
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	200002e8 	.word	0x200002e8

0800bf84 <fatfs_open>:
{
 800bf84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 800bf86:	2300      	movs	r3, #0
{
 800bf88:	4606      	mov	r6, r0
 800bf8a:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 800bf8c:	4812      	ldr	r0, [pc, #72]	; (800bfd8 <fatfs_open+0x54>)
{
 800bf8e:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 800bf90:	a901      	add	r1, sp, #4
 800bf92:	2200      	movs	r2, #0
 800bf94:	f003 fe54 	bl	800fc40 <k_mem_slab_alloc>
 800bf98:	4604      	mov	r4, r0
 800bf9a:	b9c0      	cbnz	r0, 800bfce <fatfs_open+0x4a>
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	2228      	movs	r2, #40	; 0x28
 800bfa0:	9801      	ldr	r0, [sp, #4]
 800bfa2:	f00b fc6c 	bl	801787e <memset>
		zfp->filep = ptr;
 800bfa6:	9801      	ldr	r0, [sp, #4]
 800bfa8:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
 800bfaa:	1c69      	adds	r1, r5, #1
 800bfac:	f007 0213 	and.w	r2, r7, #19
 800bfb0:	f00a fa29 	bl	8016406 <f_open>
	if (res != FR_OK) {
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	b120      	cbz	r0, 800bfc2 <fatfs_open+0x3e>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
 800bfb8:	4807      	ldr	r0, [pc, #28]	; (800bfd8 <fatfs_open+0x54>)
 800bfba:	a901      	add	r1, sp, #4
 800bfbc:	f00b f8d8 	bl	8017170 <k_mem_slab_free>
		zfp->filep = NULL;
 800bfc0:	6034      	str	r4, [r6, #0]
	return translate_error(res);
 800bfc2:	4628      	mov	r0, r5
}
 800bfc4:	b003      	add	sp, #12
 800bfc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return translate_error(res);
 800bfca:	f7ff bf43 	b.w	800be54 <translate_error>
}
 800bfce:	f06f 000b 	mvn.w	r0, #11
 800bfd2:	b003      	add	sp, #12
 800bfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20000304 	.word	0x20000304

0800bfdc <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 800bfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  *         @arg @ref LL_EXTI_LINE_22
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800bfe0:	4f0d      	ldr	r7, [pc, #52]	; (800c018 <__stm32_exti_isr.isra.0+0x3c>)
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	460e      	mov	r6, r1
 800bfe6:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800bfe8:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800bfec:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 800bff0:	42b4      	cmp	r4, r6
 800bff2:	db01      	blt.n	800bff8 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 800bff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff8:	68fa      	ldr	r2, [r7, #12]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800bffa:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800bffe:	ea33 0202 	bics.w	r2, r3, r2
 800c002:	d107      	bne.n	800c014 <__stm32_exti_isr.isra.0+0x38>
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800c004:	60fb      	str	r3, [r7, #12]
			if (!data->cb[line].cb) {
 800c006:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800c00a:	b11b      	cbz	r3, 800c014 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800c00c:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 800c010:	4620      	mov	r0, r4
 800c012:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800c014:	3401      	adds	r4, #1
 800c016:	e7eb      	b.n	800bff0 <__stm32_exti_isr.isra.0+0x14>
 800c018:	58000800 	.word	0x58000800

0800c01c <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 800c01c:	4a05      	ldr	r2, [pc, #20]	; (800c034 <stm32_exti_enable+0x18>)
	LL_EXTI_EnableIT_0_31(1 << line);
 800c01e:	2301      	movs	r3, #1
 800c020:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 800c024:	4083      	lsls	r3, r0
 800c026:	430b      	orrs	r3, r1
 800c028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	irq_enable(irqnum);
 800c02c:	4b02      	ldr	r3, [pc, #8]	; (800c038 <stm32_exti_enable+0x1c>)
 800c02e:	5618      	ldrsb	r0, [r3, r0]
 800c030:	f7f8 bce2 	b.w	80049f8 <arch_irq_enable>
 800c034:	58000800 	.word	0x58000800
 800c038:	0801a2fa 	.word	0x0801a2fa

0800c03c <stm32_exti_disable>:
	if (line < 32) {
 800c03c:	281f      	cmp	r0, #31
 800c03e:	dc09      	bgt.n	800c054 <stm32_exti_disable+0x18>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800c040:	4905      	ldr	r1, [pc, #20]	; (800c058 <stm32_exti_disable+0x1c>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800c042:	2201      	movs	r2, #1
 800c044:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800c048:	fa02 f000 	lsl.w	r0, r2, r0
 800c04c:	ea23 0000 	bic.w	r0, r3, r0
 800c050:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
}
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	58000800 	.word	0x58000800

0800c05c <stm32_exti_trigger>:
	switch (trigger) {
 800c05c:	2903      	cmp	r1, #3
 800c05e:	d80f      	bhi.n	800c080 <stm32_exti_trigger+0x24>
 800c060:	e8df f001 	tbb	[pc, r1]
 800c064:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c068:	4b15      	ldr	r3, [pc, #84]	; (800c0c0 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800c06a:	2201      	movs	r2, #1
 800c06c:	6819      	ldr	r1, [r3, #0]
 800c06e:	fa02 f000 	lsl.w	r0, r2, r0
 800c072:	ea21 0100 	bic.w	r1, r1, r0
 800c076:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c07e:	6058      	str	r0, [r3, #4]
}
 800c080:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800c082:	2301      	movs	r3, #1
 800c084:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c088:	4b0d      	ldr	r3, [pc, #52]	; (800c0c0 <stm32_exti_trigger+0x64>)
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	4302      	orrs	r2, r0
 800c08e:	601a      	str	r2, [r3, #0]
 800c090:	e7f2      	b.n	800c078 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800c092:	2301      	movs	r3, #1
 800c094:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c098:	4b09      	ldr	r3, [pc, #36]	; (800c0c0 <stm32_exti_trigger+0x64>)
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	4302      	orrs	r2, r0
 800c09e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	ea22 0000 	bic.w	r0, r2, r0
 800c0a6:	6018      	str	r0, [r3, #0]
}
 800c0a8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c0b0:	4b03      	ldr	r3, [pc, #12]	; (800c0c0 <stm32_exti_trigger+0x64>)
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	4302      	orrs	r2, r0
 800c0b6:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	4310      	orrs	r0, r2
 800c0bc:	e7df      	b.n	800c07e <stm32_exti_trigger+0x22>
 800c0be:	bf00      	nop
 800c0c0:	58000800 	.word	0x58000800

0800c0c4 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 800c0c4:	4b07      	ldr	r3, [pc, #28]	; (800c0e4 <stm32_exti_set_callback+0x20>)
{
 800c0c6:	b510      	push	{r4, lr}
 800c0c8:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800c0ca:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800c0ce:	b928      	cbnz	r0, 800c0dc <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800c0d0:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 800c0d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0d8:	605a      	str	r2, [r3, #4]

	return 0;
}
 800c0da:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800c0dc:	f06f 000f 	mvn.w	r0, #15
 800c0e0:	e7fb      	b.n	800c0da <stm32_exti_set_callback+0x16>
 800c0e2:	bf00      	nop
 800c0e4:	2000207c 	.word	0x2000207c

0800c0e8 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800c0e8:	4b03      	ldr	r3, [pc, #12]	; (800c0f8 <stm32_exti_unset_callback+0x10>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800c0f0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800c0f4:	605a      	str	r2, [r3, #4]
}
 800c0f6:	4770      	bx	lr
 800c0f8:	2000207c 	.word	0x2000207c

0800c0fc <disk_spi_sdhc_access_ioctl>:
	return err;
}

static int disk_spi_sdhc_access_ioctl(struct disk_info *disk,
	uint8_t cmd, void *buf)
{
 800c0fc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = disk->dev;
	struct sdhc_spi_data *data = dev->data;
 800c0fe:	6903      	ldr	r3, [r0, #16]
}

/* Converts disk status into an error code */
static inline int sdhc_map_disk_status(int status)
{
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 800c100:	480c      	ldr	r0, [pc, #48]	; (800c134 <disk_spi_sdhc_access_ioctl+0x38>)
 800c102:	691e      	ldr	r6, [r3, #16]
{
 800c104:	460c      	mov	r4, r1
 800c106:	7c31      	ldrb	r1, [r6, #16]
 800c108:	4615      	mov	r5, r2
 800c10a:	f008 fa17 	bl	801453c <sdhc_map_flags>
	int err;

	err = sdhc_map_disk_status(data->status);
	if (err != 0) {
 800c10e:	b948      	cbnz	r0, 800c124 <disk_spi_sdhc_access_ioctl+0x28>
		return err;
	}

	switch (cmd) {
 800c110:	1e61      	subs	r1, r4, #1
 800c112:	2904      	cmp	r1, #4
 800c114:	d80a      	bhi.n	800c12c <disk_spi_sdhc_access_ioctl+0x30>
 800c116:	e8df f001 	tbb	[pc, r1]
 800c11a:	0603      	.short	0x0603
 800c11c:	0609      	.short	0x0609
 800c11e:	05          	.byte	0x05
 800c11f:	00          	.byte	0x00
	case DISK_IOCTL_CTRL_SYNC:
		break;
	case DISK_IOCTL_GET_SECTOR_COUNT:
		*(uint32_t *)buf = data->sector_count;
 800c120:	68f3      	ldr	r3, [r6, #12]
		break;
	case DISK_IOCTL_GET_SECTOR_SIZE:
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
 800c122:	602b      	str	r3, [r5, #0]
	default:
		return -EINVAL;
	}

	return 0;
}
 800c124:	bd70      	pop	{r4, r5, r6, pc}
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
 800c126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c12a:	e7fa      	b.n	800c122 <disk_spi_sdhc_access_ioctl+0x26>
		return -EINVAL;
 800c12c:	f06f 0015 	mvn.w	r0, #21
 800c130:	e7f8      	b.n	800c124 <disk_spi_sdhc_access_ioctl+0x28>
 800c132:	bf00      	nop
 800c134:	0801a3ab 	.word	0x0801a3ab

0800c138 <sdhc_map_r1_idle_status>:
}

/* Converts an early stage idle mode R1 code into an error code */
static inline int sdhc_map_r1_idle_status(int status)
{
	if (status < 0) {
 800c138:	2800      	cmp	r0, #0
 800c13a:	db06      	blt.n	800c14a <sdhc_map_r1_idle_status+0x12>
		return status;
	}

	if (status == SDHC_R1_IDLE) {
 800c13c:	2801      	cmp	r0, #1
 800c13e:	d003      	beq.n	800c148 <sdhc_map_r1_idle_status+0x10>
	return sdhc_map_flags(sdhc_r1_flags, status);
 800c140:	4601      	mov	r1, r0
 800c142:	4802      	ldr	r0, [pc, #8]	; (800c14c <sdhc_map_r1_idle_status+0x14>)
 800c144:	f008 b9fa 	b.w	801453c <sdhc_map_flags>
		return 0;
 800c148:	2000      	movs	r0, #0
	}

	return sdhc_map_r1_status(status);
}
 800c14a:	4770      	bx	lr
 800c14c:	0801a3f3 	.word	0x0801a3f3

0800c150 <sdhc_spi_rx_bytes>:
{
 800c150:	b500      	push	{lr}
	struct spi_buf tx_bufs[] = {
 800c152:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <sdhc_spi_rx_bytes+0x30>)
{
 800c154:	b089      	sub	sp, #36	; 0x24
	struct spi_buf tx_bufs[] = {
 800c156:	e9cd 3200 	strd	r3, r2, [sp]
	struct spi_buf rx_bufs[] = {
 800c15a:	9205      	str	r2, [sp, #20]
	const struct spi_buf_set tx = {
 800c15c:	2301      	movs	r3, #1
	const struct spi_buf_set rx = {
 800c15e:	aa04      	add	r2, sp, #16
	struct spi_buf rx_bufs[] = {
 800c160:	e9cd 3103 	strd	r3, r1, [sp, #12]
	const struct spi_buf_set rx = {
 800c164:	e9cd 2306 	strd	r2, r3, [sp, #24]
	return sdhc_spi_trace(data, -1,
 800c168:	e9d0 0100 	ldrd	r0, r1, [r0]
 800c16c:	ab06      	add	r3, sp, #24
 800c16e:	aa02      	add	r2, sp, #8
	const struct spi_buf_set tx = {
 800c170:	f8cd d008 	str.w	sp, [sp, #8]
	return sdhc_spi_trace(data, -1,
 800c174:	f008 f9ee 	bl	8014554 <spi_transceive.constprop.0>
}
 800c178:	b009      	add	sp, #36	; 0x24
 800c17a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c17e:	bf00      	nop
 800c180:	0801a3b3 	.word	0x0801a3b3

0800c184 <sdhc_spi_init>:
{
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4604      	mov	r4, r0
	struct sdhc_spi_data *data = dev->data;
 800c188:	6905      	ldr	r5, [r0, #16]
 800c18a:	4807      	ldr	r0, [pc, #28]	; (800c1a8 <sdhc_spi_init+0x24>)
 800c18c:	f003 fbc0 	bl	800f910 <z_impl_device_get_binding>
	struct sdhc_spi_data *data = dev->data;
 800c190:	6923      	ldr	r3, [r4, #16]
	data->spi = device_get_binding(DT_BUS_LABEL(SPI_SDHC_NODE));
 800c192:	6028      	str	r0, [r5, #0]
	const struct sdhc_spi_config *cfg = dev->config;
 800c194:	6862      	ldr	r2, [r4, #4]

static int disk_spi_sdhc_init(const struct device *dev)
{
	sdhc_spi_set_status(dev, DISK_STATUS_UNINIT);

	spi_sdhc_disk.dev = dev;
 800c196:	4805      	ldr	r0, [pc, #20]	; (800c1ac <sdhc_spi_init+0x28>)
		data->spi_cfg = &cfg->init_cfg;
 800c198:	605a      	str	r2, [r3, #4]
	data->status = status;
 800c19a:	2101      	movs	r1, #1
 800c19c:	7419      	strb	r1, [r3, #16]
	spi_sdhc_disk.dev = dev;
 800c19e:	6104      	str	r4, [r0, #16]

	return disk_access_register(&spi_sdhc_disk);
 800c1a0:	f7f8 fb7e 	bl	80048a0 <disk_access_register>
}
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	0801a30a 	.word	0x0801a30a
 800c1ac:	20000048 	.word	0x20000048

0800c1b0 <sdhc_spi_cmd_r1_raw>:
{
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	460e      	mov	r6, r1
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 800c1b6:	f008 f9e3 	bl	8014580 <sdhc_spi_tx_cmd>
	if (err != 0) {
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	b968      	cbnz	r0, 800c1da <sdhc_spi_cmd_r1_raw+0x2a>
	err = sdhc_spi_skip_until_start(data);
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f008 fa43 	bl	801464a <sdhc_spi_skip_until_start>
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
 800c1c4:	2e19      	cmp	r6, #25
	err = sdhc_spi_skip_until_start(data);
 800c1c6:	4604      	mov	r4, r0
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
 800c1c8:	d804      	bhi.n	800c1d4 <sdhc_spi_cmd_r1_raw+0x24>
 800c1ca:	4905      	ldr	r1, [pc, #20]	; (800c1e0 <sdhc_spi_cmd_r1_raw+0x30>)
 800c1cc:	fa21 f606 	lsr.w	r6, r1, r6
 800c1d0:	07f3      	lsls	r3, r6, #31
 800c1d2:	d402      	bmi.n	800c1da <sdhc_spi_cmd_r1_raw+0x2a>
		sdhc_spi_rx_u8(data);
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	f008 f9f5 	bl	80145c4 <sdhc_spi_rx_u8>
}
 800c1da:	4620      	mov	r0, r4
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
 800c1de:	bf00      	nop
 800c1e0:	03060600 	.word	0x03060600

0800c1e4 <sdhc_spi_rx_block>:
{
 800c1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e8:	b08d      	sub	sp, #52	; 0x34
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 800c1ea:	f10d 0910 	add.w	r9, sp, #16
{
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	4688      	mov	r8, r1
 800c1f2:	4616      	mov	r6, r2
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 800c1f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4648      	mov	r0, r9
 800c1fc:	f008 fa15 	bl	801462a <sdhc_retry_init>
		err = sdhc_spi_rx_u8(data);
 800c200:	4628      	mov	r0, r5
 800c202:	f008 f9df 	bl	80145c4 <sdhc_spi_rx_u8>
		if (err != discard) {
 800c206:	28ff      	cmp	r0, #255	; 0xff
		err = sdhc_spi_rx_u8(data);
 800c208:	4604      	mov	r4, r0
		if (err != discard) {
 800c20a:	d116      	bne.n	800c23a <sdhc_spi_rx_block+0x56>
	} while (sdhc_retry_ok(&retry));
 800c20c:	4648      	mov	r0, r9
 800c20e:	f008 f9ec 	bl	80145ea <sdhc_retry_ok>
 800c212:	4603      	mov	r3, r0
 800c214:	2800      	cmp	r0, #0
 800c216:	d1f3      	bne.n	800c200 <sdhc_spi_rx_block+0x1c>
	LOG_WRN("Timeout while waiting for !%d", discard);
 800c218:	4a26      	ldr	r2, [pc, #152]	; (800c2b4 <sdhc_spi_rx_block+0xd0>)
 800c21a:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 800c21e:	2203      	movs	r2, #3
 800c220:	9209      	str	r2, [sp, #36]	; 0x24
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800c222:	4825      	ldr	r0, [pc, #148]	; (800c2b8 <sdhc_spi_rx_block+0xd4>)
 800c224:	aa09      	add	r2, sp, #36	; 0x24
 800c226:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
	return -ETIMEDOUT;
 800c22a:	f06f 0473 	mvn.w	r4, #115	; 0x73
 800c22e:	f006 f9b5 	bl	801259c <z_impl_z_log_msg2_static_create>
}
 800c232:	4620      	mov	r0, r4
 800c234:	b00d      	add	sp, #52	; 0x34
 800c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (token < 0) {
 800c23a:	2800      	cmp	r0, #0
 800c23c:	dbf9      	blt.n	800c232 <sdhc_spi_rx_block+0x4e>
	if (token != SDHC_TOKEN_SINGLE) {
 800c23e:	28fe      	cmp	r0, #254	; 0xfe
 800c240:	d135      	bne.n	800c2ae <sdhc_spi_rx_block+0xca>
		struct spi_buf tx_bufs[] = {
 800c242:	f8df b078 	ldr.w	fp, [pc, #120]	; 800c2bc <sdhc_spi_rx_block+0xd8>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
 800c246:	2700      	movs	r7, #0
		const struct spi_buf_set tx = {
 800c248:	f04f 0a01 	mov.w	sl, #1
		int remain = MIN(sizeof(sdhc_ones), len - i);
 800c24c:	1bf3      	subs	r3, r6, r7
 800c24e:	2b40      	cmp	r3, #64	; 0x40
 800c250:	bf28      	it	cs
 800c252:	2340      	movcs	r3, #64	; 0x40
		struct spi_buf rx_bufs[] = {
 800c254:	eb08 0207 	add.w	r2, r8, r7
 800c258:	e9cd 2304 	strd	r2, r3, [sp, #16]
		struct spi_buf tx_bufs[] = {
 800c25c:	e9cd b300 	strd	fp, r3, [sp]
		err = sdhc_spi_trace(data, -1,
 800c260:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c264:	ab06      	add	r3, sp, #24
 800c266:	aa02      	add	r2, sp, #8
		const struct spi_buf_set rx = {
 800c268:	e9cd 9a06 	strd	r9, sl, [sp, #24]
		const struct spi_buf_set tx = {
 800c26c:	f8cd d008 	str.w	sp, [sp, #8]
 800c270:	f8cd a00c 	str.w	sl, [sp, #12]
		err = sdhc_spi_trace(data, -1,
 800c274:	f008 f96e 	bl	8014554 <spi_transceive.constprop.0>
		if (err != 0) {
 800c278:	4604      	mov	r4, r0
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d1d9      	bne.n	800c232 <sdhc_spi_rx_block+0x4e>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
 800c27e:	3740      	adds	r7, #64	; 0x40
 800c280:	42be      	cmp	r6, r7
 800c282:	dce3      	bgt.n	800c24c <sdhc_spi_rx_block+0x68>
	err = sdhc_spi_rx_bytes(data, crc, sizeof(crc));
 800c284:	2203      	movs	r2, #3
 800c286:	a906      	add	r1, sp, #24
 800c288:	4628      	mov	r0, r5
 800c28a:	f7ff ff61 	bl	800c150 <sdhc_spi_rx_bytes>
	if (err != 0) {
 800c28e:	4604      	mov	r4, r0
 800c290:	2800      	cmp	r0, #0
 800c292:	d1ce      	bne.n	800c232 <sdhc_spi_rx_block+0x4e>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
	return ((uint16_t)src[0] << 8) | src[1];
 800c294:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (sys_get_be16(crc) != crc16_itu_t(0, buf, len)) {
 800c298:	4632      	mov	r2, r6
 800c29a:	4641      	mov	r1, r8
 800c29c:	f005 fdb7 	bl	8011e0e <crc16_itu_t>
 800c2a0:	ba6d      	rev16	r5, r5
 800c2a2:	b2ad      	uxth	r5, r5
		return -EILSEQ;
 800c2a4:	42a8      	cmp	r0, r5
 800c2a6:	bf18      	it	ne
 800c2a8:	f06f 0489 	mvnne.w	r4, #137	; 0x89
 800c2ac:	e7c1      	b.n	800c232 <sdhc_spi_rx_block+0x4e>
		return -EIO;
 800c2ae:	f06f 0404 	mvn.w	r4, #4
 800c2b2:	e7be      	b.n	800c232 <sdhc_spi_rx_block+0x4e>
 800c2b4:	0801a310 	.word	0x0801a310
 800c2b8:	080180f0 	.word	0x080180f0
 800c2bc:	0801a3b3 	.word	0x0801a3b3

0800c2c0 <sdhc_spi_cmd_r1>:
{
 800c2c0:	b508      	push	{r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800c2c2:	f7ff ff75 	bl	800c1b0 <sdhc_spi_cmd_r1_raw>
}
 800c2c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800c2ca:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
 800c2cc:	4801      	ldr	r0, [pc, #4]	; (800c2d4 <sdhc_spi_cmd_r1+0x14>)
 800c2ce:	f008 b935 	b.w	801453c <sdhc_map_flags>
 800c2d2:	bf00      	nop
 800c2d4:	0801a3f3 	.word	0x0801a3f3

0800c2d8 <disk_spi_sdhc_access_init>:
{
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	b093      	sub	sp, #76	; 0x4c
	const struct device *dev = disk->dev;
 800c2de:	f8d0 8010 	ldr.w	r8, [r0, #16]
	sdhc_spi_tx(data, sdhc_ones, 10);
 800c2e2:	4da3      	ldr	r5, [pc, #652]	; (800c570 <disk_spi_sdhc_access_init+0x298>)
	struct sdhc_spi_data *data = dev->data;
 800c2e4:	f8d8 4010 	ldr.w	r4, [r8, #16]
	const struct sdhc_spi_config *cfg = dev->config;
 800c2e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
		data->spi_cfg = &cfg->init_cfg;
 800c2ec:	6063      	str	r3, [r4, #4]
{
 800c2ee:	af00      	add	r7, sp, #0
	data->status = status;
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	7422      	strb	r2, [r4, #16]
	sdhc_retry_init(&retry, SDHC_INIT_TIMEOUT, SDHC_RETRY_DELAY);
 800c2f4:	f241 3188 	movw	r1, #5000	; 0x1388
 800c2f8:	2214      	movs	r2, #20
 800c2fa:	f107 0018 	add.w	r0, r7, #24
 800c2fe:	f008 f994 	bl	801462a <sdhc_retry_init>
	sdhc_spi_tx(data, sdhc_ones, 10);
 800c302:	220a      	movs	r2, #10
 800c304:	4629      	mov	r1, r5
 800c306:	4620      	mov	r0, r4
 800c308:	f008 f92a 	bl	8014560 <sdhc_spi_tx>
	spi_release(data->spi, data->spi_cfg);
 800c30c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c310:	f008 f963 	bl	80145da <spi_release.isra.0>
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800c314:	2200      	movs	r2, #0
 800c316:	4611      	mov	r1, r2
 800c318:	4620      	mov	r0, r4
 800c31a:	f7ff ff49 	bl	800c1b0 <sdhc_spi_cmd_r1_raw>
 800c31e:	f7ff ff0b 	bl	800c138 <sdhc_map_r1_idle_status>
		if (err == 0) {
 800c322:	bb58      	cbnz	r0, 800c37c <disk_spi_sdhc_access_init+0xa4>
	return sdhc_map_r1_idle_status(
 800c324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c328:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c32c:	2108      	movs	r1, #8
 800c32e:	4620      	mov	r0, r4
 800c330:	f008 f9a3 	bl	801467a <sdhc_spi_cmd_r37_raw>
 800c334:	f7ff ff00 	bl	800c138 <sdhc_map_r1_idle_status>
	if (err != 0) {
 800c338:	4605      	mov	r5, r0
 800c33a:	b950      	cbnz	r0, 800c352 <disk_spi_sdhc_access_init+0x7a>
	if ((cond & 0xFF) != SDHC_CHECK) {
 800c33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	2aaa      	cmp	r2, #170	; 0xaa
 800c342:	d118      	bne.n	800c376 <disk_spi_sdhc_access_init+0x9e>
	if ((cond & SDHC_VHS_MASK) != SDHC_VHS_3V3) {
 800c344:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
		return -ENOTSUP;
 800c348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c34c:	bf18      	it	ne
 800c34e:	f06f 0585 	mvnne.w	r5, #133	; 0x85
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800c352:	2201      	movs	r2, #1
 800c354:	213b      	movs	r1, #59	; 0x3b
 800c356:	4620      	mov	r0, r4
 800c358:	f7ff ff2a 	bl	800c1b0 <sdhc_spi_cmd_r1_raw>
 800c35c:	f7ff feec 	bl	800c138 <sdhc_map_r1_idle_status>
	if (err != 0) {
 800c360:	4606      	mov	r6, r0
 800c362:	b1a0      	cbz	r0, 800c38e <disk_spi_sdhc_access_init+0xb6>
	spi_release(data->spi, data->spi_cfg);
 800c364:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c368:	f008 f937 	bl	80145da <spi_release.isra.0>
}
 800c36c:	4630      	mov	r0, r6
 800c36e:	374c      	adds	r7, #76	; 0x4c
 800c370:	46bd      	mov	sp, r7
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
 800c376:	f06f 0501 	mvn.w	r5, #1
 800c37a:	e7ea      	b.n	800c352 <disk_spi_sdhc_access_init+0x7a>
		if (!sdhc_retry_ok(&retry)) {
 800c37c:	f107 0018 	add.w	r0, r7, #24
 800c380:	f008 f933 	bl	80145ea <sdhc_retry_ok>
 800c384:	2800      	cmp	r0, #0
 800c386:	d1bc      	bne.n	800c302 <disk_spi_sdhc_access_init+0x2a>
			return -ENOENT;
 800c388:	f06f 0601 	mvn.w	r6, #1
 800c38c:	e7ea      	b.n	800c364 <disk_spi_sdhc_access_init+0x8c>
 800c38e:	2d00      	cmp	r5, #0
 800c390:	bf0c      	ite	eq
 800c392:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 800c396:	2600      	movne	r6, #0
		sdhc_spi_cmd_r1_raw(data, SDHC_APP_CMD, 0);
 800c398:	2200      	movs	r2, #0
 800c39a:	2137      	movs	r1, #55	; 0x37
 800c39c:	4620      	mov	r0, r4
 800c39e:	f7ff ff07 	bl	800c1b0 <sdhc_spi_cmd_r1_raw>
		err = sdhc_spi_cmd_r1(data, SDHC_SEND_OP_COND, is_v2 ? SDHC_HCS : 0);
 800c3a2:	4632      	mov	r2, r6
 800c3a4:	2129      	movs	r1, #41	; 0x29
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f7ff ff8a 	bl	800c2c0 <sdhc_spi_cmd_r1>
		if (err == 0) {
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f000 80d8 	beq.w	800c562 <disk_spi_sdhc_access_init+0x28a>
	} while (sdhc_retry_ok(&retry));
 800c3b2:	f107 0018 	add.w	r0, r7, #24
 800c3b6:	f008 f918 	bl	80145ea <sdhc_retry_ok>
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d1ec      	bne.n	800c398 <disk_spi_sdhc_access_init+0xc0>
		return -ETIMEDOUT;
 800c3be:	f06f 0673 	mvn.w	r6, #115	; 0x73
 800c3c2:	e7cf      	b.n	800c364 <disk_spi_sdhc_access_init+0x8c>
		} while (sdhc_retry_ok(&retry));
 800c3c4:	f107 0018 	add.w	r0, r7, #24
 800c3c8:	f008 f90f 	bl	80145ea <sdhc_retry_ok>
 800c3cc:	b180      	cbz	r0, 800c3f0 <disk_spi_sdhc_access_init+0x118>
	return sdhc_map_r1_status(
 800c3ce:	f107 0314 	add.w	r3, r7, #20
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	213a      	movs	r1, #58	; 0x3a
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f008 f94f 	bl	801467a <sdhc_spi_cmd_r37_raw>
 800c3dc:	4601      	mov	r1, r0
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f008 f8ac 	bl	801453c <sdhc_map_flags>
			if (err != 0) {
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d1bc      	bne.n	800c364 <disk_spi_sdhc_access_init+0x8c>
			if ((ocr & SDHC_BUSY) != 0U) {
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	dae9      	bge.n	800c3c4 <disk_spi_sdhc_access_init+0xec>
	if ((ocr & SDHC_CCS) != 0U) {
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	005b      	lsls	r3, r3, #1
 800c3f4:	d40a      	bmi.n	800c40c <disk_spi_sdhc_access_init+0x134>
		data->high_capacity = false;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	7223      	strb	r3, [r4, #8]
		err = sdhc_spi_cmd_r1(data, SDHC_SET_BLOCK_SIZE, SDMMC_DEFAULT_BLOCK_SIZE);
 800c3fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3fe:	2110      	movs	r1, #16
 800c400:	4620      	mov	r0, r4
 800c402:	f7ff ff5d 	bl	800c2c0 <sdhc_spi_cmd_r1>
		if (err != 0) {
 800c406:	4606      	mov	r6, r0
 800c408:	b110      	cbz	r0, 800c410 <disk_spi_sdhc_access_init+0x138>
 800c40a:	e7ab      	b.n	800c364 <disk_spi_sdhc_access_init+0x8c>
		data->high_capacity = true;
 800c40c:	2301      	movs	r3, #1
 800c40e:	7223      	strb	r3, [r4, #8]
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CSD, 0);
 800c410:	2200      	movs	r2, #0
 800c412:	2109      	movs	r1, #9
 800c414:	4620      	mov	r0, r4
 800c416:	f7ff ff53 	bl	800c2c0 <sdhc_spi_cmd_r1>
	if (err != 0) {
 800c41a:	4606      	mov	r6, r0
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d1a1      	bne.n	800c364 <disk_spi_sdhc_access_init+0x8c>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
 800c420:	2210      	movs	r2, #16
 800c422:	f107 0120 	add.w	r1, r7, #32
 800c426:	4620      	mov	r0, r4
 800c428:	f7ff fedc 	bl	800c1e4 <sdhc_spi_rx_block>
	if (err != 0) {
 800c42c:	4606      	mov	r6, r0
 800c42e:	2800      	cmp	r0, #0
 800c430:	d198      	bne.n	800c364 <disk_spi_sdhc_access_init+0x8c>
	structure = (buf[0] >> 6);
 800c432:	f897 3020 	ldrb.w	r3, [r7, #32]
	switch (structure) {
 800c436:	099b      	lsrs	r3, r3, #6
 800c438:	d005      	beq.n	800c446 <disk_spi_sdhc_access_init+0x16e>
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	f000 8082 	beq.w	800c544 <disk_spi_sdhc_access_init+0x26c>
			return -ENOTSUP;
 800c440:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800c444:	e78e      	b.n	800c364 <disk_spi_sdhc_access_init+0x8c>
		readbllen = buf[5] & ((1 << 4) - 1);
 800c446:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c44a:	f003 030f 	and.w	r3, r3, #15
		if ((readbllen < 9) || (readbllen > 11)) {
 800c44e:	f1a3 0209 	sub.w	r2, r3, #9
 800c452:	2a02      	cmp	r2, #2
 800c454:	d8f4      	bhi.n	800c440 <disk_spi_sdhc_access_init+0x168>
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
 800c456:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800c45a:	f008 f85b 	bl	8014514 <sys_get_be32>
		csizemult = (uint8_t) ((sys_get_be16(&buf[9]) >> 7) & ((1 << 3) - 1));
 800c45e:	f8b7 2029 	ldrh.w	r2, [r7, #41]	; 0x29
 800c462:	ba52      	rev16	r2, r2
 800c464:	f3c2 12c2 	ubfx	r2, r2, #7, #3
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
 800c468:	f3c0 308b 	ubfx	r0, r0, #14, #12
		data->sector_count = ((csize + 1) << (csizemult + 2 + readbllen - 9));
 800c46c:	4413      	add	r3, r2
 800c46e:	3001      	adds	r0, #1
 800c470:	3b07      	subs	r3, #7
 800c472:	fa00 f303 	lsl.w	r3, r0, r3
 800c476:	60e3      	str	r3, [r4, #12]
	LOG_INF("Found a ~%u MiB SDHC card.",
 800c478:	68e3      	ldr	r3, [r4, #12]
 800c47a:	4a3e      	ldr	r2, [pc, #248]	; (800c574 <disk_spi_sdhc_access_init+0x29c>)
 800c47c:	0adb      	lsrs	r3, r3, #11
 800c47e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800c482:	2303      	movs	r3, #3
 800c484:	46e9      	mov	r9, sp
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c488:	483b      	ldr	r0, [pc, #236]	; (800c578 <disk_spi_sdhc_access_init+0x2a0>)
 800c48a:	2300      	movs	r3, #0
 800c48c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c490:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800c494:	f006 f882 	bl	801259c <z_impl_z_log_msg2_static_create>
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CID, 0);
 800c498:	2200      	movs	r2, #0
 800c49a:	210a      	movs	r1, #10
 800c49c:	4620      	mov	r0, r4
 800c49e:	f7ff ff0f 	bl	800c2c0 <sdhc_spi_cmd_r1>
	if (err != 0) {
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	f47f af5d 	bne.w	800c364 <disk_spi_sdhc_access_init+0x8c>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
 800c4aa:	2210      	movs	r2, #16
 800c4ac:	f107 0120 	add.w	r1, r7, #32
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f7ff fe97 	bl	800c1e4 <sdhc_spi_rx_block>
	if (err != 0) {
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f47f af53 	bne.w	800c364 <disk_spi_sdhc_access_init+0x8c>
	LOG_INF("Manufacturer ID=%d OEM='%c%c' Name='%c%c%c%c%c' "
 800c4be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4c8:	60bb      	str	r3, [r7, #8]
 800c4ca:	f107 0029 	add.w	r0, r7, #41	; 0x29
 800c4ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c4d2:	607b      	str	r3, [r7, #4]
 800c4d4:	f897 b020 	ldrb.w	fp, [r7, #32]
 800c4d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c4dc:	f897 5026 	ldrb.w	r5, [r7, #38]	; 0x26
 800c4e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c4e4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800c4e8:	f897 a021 	ldrb.w	sl, [r7, #33]	; 0x21
 800c4ec:	f008 f812 	bl	8014514 <sys_get_be32>
 800c4f0:	f8df e088 	ldr.w	lr, [pc, #136]	; 800c57c <disk_spi_sdhc_access_init+0x2a4>
 800c4f4:	b090      	sub	sp, #64	; 0x40
 800c4f6:	46ec      	mov	ip, sp
 800c4f8:	e9cc eb04 	strd	lr, fp, [ip, #16]
 800c4fc:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800c500:	f8cc e01c 	str.w	lr, [ip, #28]
 800c504:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800c508:	f8cc a018 	str.w	sl, [ip, #24]
 800c50c:	e9cc e208 	strd	lr, r2, [ip, #32]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
 800c516:	e9cc 250a 	strd	r2, r5, [ip, #40]	; 0x28
 800c51a:	4662      	mov	r2, ip
 800c51c:	e9cc 130c 	strd	r1, r3, [ip, #48]	; 0x30
 800c520:	230c      	movs	r3, #12
 800c522:	f842 3f0c 	str.w	r3, [r2, #12]!
 800c526:	4814      	ldr	r0, [pc, #80]	; (800c578 <disk_spi_sdhc_access_init+0x2a0>)
 800c528:	4633      	mov	r3, r6
 800c52a:	f246 01c0 	movw	r1, #24768	; 0x60c0
 800c52e:	f006 f835 	bl	801259c <z_impl_z_log_msg2_static_create>
	const struct sdhc_spi_config *cfg = dev->config;
 800c532:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct sdhc_spi_data *data = dev->data;
 800c536:	f8d8 2010 	ldr.w	r2, [r8, #16]
		data->spi_cfg = &cfg->oper_cfg;
 800c53a:	330c      	adds	r3, #12
 800c53c:	46cd      	mov	sp, r9
	data->status = status;
 800c53e:	7416      	strb	r6, [r2, #16]
		data->spi_cfg = &cfg->oper_cfg;
 800c540:	6053      	str	r3, [r2, #4]
	return 0;
 800c542:	e70f      	b.n	800c364 <disk_spi_sdhc_access_init+0x8c>
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
 800c544:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800c548:	f007 ffe4 	bl	8014514 <sys_get_be32>
		if (csize < 4112) {
 800c54c:	f241 030f 	movw	r3, #4111	; 0x100f
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
 800c550:	f3c0 0015 	ubfx	r0, r0, #0, #22
		if (csize < 4112) {
 800c554:	4298      	cmp	r0, r3
 800c556:	f67f af73 	bls.w	800c440 <disk_spi_sdhc_access_init+0x168>
		data->sector_count = (csize + 1) *
 800c55a:	3001      	adds	r0, #1
 800c55c:	0280      	lsls	r0, r0, #10
 800c55e:	60e0      	str	r0, [r4, #12]
		break;
 800c560:	e78a      	b.n	800c478 <disk_spi_sdhc_access_init+0x1a0>
	ocr = 0;
 800c562:	6178      	str	r0, [r7, #20]
	if (is_v2) {
 800c564:	2d00      	cmp	r5, #0
 800c566:	f47f af46 	bne.w	800c3f6 <disk_spi_sdhc_access_init+0x11e>
 800c56a:	4d05      	ldr	r5, [pc, #20]	; (800c580 <disk_spi_sdhc_access_init+0x2a8>)
 800c56c:	e72f      	b.n	800c3ce <disk_spi_sdhc_access_init+0xf6>
 800c56e:	bf00      	nop
 800c570:	0801a3b3 	.word	0x0801a3b3
 800c574:	0801a32e 	.word	0x0801a32e
 800c578:	080180f0 	.word	0x080180f0
 800c57c:	0801a349 	.word	0x0801a349
 800c580:	0801a3f3 	.word	0x0801a3f3

0800c584 <sdhc_spi_read>:
{
 800c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c588:	4605      	mov	r5, r0
 800c58a:	460f      	mov	r7, r1
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 800c58c:	7c01      	ldrb	r1, [r0, #16]
 800c58e:	4818      	ldr	r0, [pc, #96]	; (800c5f0 <sdhc_spi_read+0x6c>)
 800c590:	4690      	mov	r8, r2
 800c592:	461e      	mov	r6, r3
 800c594:	f007 ffd2 	bl	801453c <sdhc_map_flags>
	if (err != 0) {
 800c598:	4604      	mov	r4, r0
 800c59a:	b970      	cbnz	r0, 800c5ba <sdhc_spi_read+0x36>
	if (data->high_capacity) {
 800c59c:	7a2b      	ldrb	r3, [r5, #8]
 800c59e:	b90b      	cbnz	r3, 800c5a4 <sdhc_spi_read+0x20>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800c5a0:	ea4f 2848 	mov.w	r8, r8, lsl #9
	err = sdhc_spi_cmd_r1(data, SDHC_READ_MULTIPLE_BLOCK, addr);
 800c5a4:	4642      	mov	r2, r8
 800c5a6:	2112      	movs	r1, #18
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f7ff fe89 	bl	800c2c0 <sdhc_spi_cmd_r1>
	if (err != 0) {
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	b190      	cbz	r0, 800c5d8 <sdhc_spi_read+0x54>
	spi_release(data->spi, data->spi_cfg);
 800c5b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c5b6:	f008 f810 	bl	80145da <spi_release.isra.0>
}
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sdhc_spi_rx_block(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
 800c5c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f7ff fe0c 	bl	800c1e4 <sdhc_spi_rx_block>
		if (err != 0) {
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d1ef      	bne.n	800c5b2 <sdhc_spi_read+0x2e>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800c5d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
 800c5d6:	3e01      	subs	r6, #1
 800c5d8:	2e00      	cmp	r6, #0
 800c5da:	d1f1      	bne.n	800c5c0 <sdhc_spi_read+0x3c>
	sdhc_spi_cmd_r1(data, SDHC_STOP_TRANSMISSION, 0);
 800c5dc:	4632      	mov	r2, r6
 800c5de:	210c      	movs	r1, #12
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	f7ff fe6d 	bl	800c2c0 <sdhc_spi_cmd_r1>
	err = sdhc_spi_skip_until_ready(data);
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f008 f866 	bl	80146b8 <sdhc_spi_skip_until_ready>
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	e7e0      	b.n	800c5b2 <sdhc_spi_read+0x2e>
 800c5f0:	0801a3ab 	.word	0x0801a3ab

0800c5f4 <sdhc_spi_write>:
{
 800c5f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	460f      	mov	r7, r1
 800c5fc:	7c01      	ldrb	r1, [r0, #16]
 800c5fe:	483d      	ldr	r0, [pc, #244]	; (800c6f4 <sdhc_spi_write+0x100>)
 800c600:	4616      	mov	r6, r2
 800c602:	4698      	mov	r8, r3
 800c604:	f007 ff9a 	bl	801453c <sdhc_map_flags>
	if (err != 0) {
 800c608:	b960      	cbnz	r0, 800c624 <sdhc_spi_write+0x30>

/* Converts the data block response flags into an error code */
static inline int sdhc_map_data_status(int status)
{
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800c60a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800c6f8 <sdhc_spi_write+0x104>
	return sdhc_map_flags(sdhc_r1_flags, status);
 800c60e:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800c6fc <sdhc_spi_write+0x108>
 800c612:	44b0      	add	r8, r6
	for (; count != 0U; count--) {
 800c614:	4546      	cmp	r6, r8
 800c616:	d108      	bne.n	800c62a <sdhc_spi_write+0x36>
	err = 0;
 800c618:	2400      	movs	r4, #0
	spi_release(data->spi, data->spi_cfg);
 800c61a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c61e:	f007 ffdc 	bl	80145da <spi_release.isra.0>
 800c622:	4620      	mov	r0, r4
}
 800c624:	b003      	add	sp, #12
 800c626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (data->high_capacity) {
 800c62a:	7a2b      	ldrb	r3, [r5, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d15c      	bne.n	800c6ea <sdhc_spi_write+0xf6>
			addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800c630:	0272      	lsls	r2, r6, #9
		err = sdhc_spi_cmd_r1(data, SDHC_WRITE_BLOCK, addr);
 800c632:	2118      	movs	r1, #24
 800c634:	4628      	mov	r0, r5
 800c636:	f7ff fe43 	bl	800c2c0 <sdhc_spi_cmd_r1>
		if (err < 0) {
 800c63a:	1e04      	subs	r4, r0, #0
 800c63c:	dbed      	blt.n	800c61a <sdhc_spi_write+0x26>
	buf[0] = SDHC_TOKEN_SINGLE;
 800c63e:	23fe      	movs	r3, #254	; 0xfe
	err = sdhc_spi_tx(data, buf, 1);
 800c640:	2201      	movs	r2, #1
 800c642:	a901      	add	r1, sp, #4
 800c644:	4628      	mov	r0, r5
	buf[0] = SDHC_TOKEN_SINGLE;
 800c646:	f88d 3004 	strb.w	r3, [sp, #4]
	err = sdhc_spi_tx(data, buf, 1);
 800c64a:	f007 ff89 	bl	8014560 <sdhc_spi_tx>
	if (err != 0) {
 800c64e:	4604      	mov	r4, r0
 800c650:	2800      	cmp	r0, #0
 800c652:	d1e2      	bne.n	800c61a <sdhc_spi_write+0x26>
	err = sdhc_spi_tx(data, send, len);
 800c654:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c658:	4639      	mov	r1, r7
 800c65a:	4628      	mov	r0, r5
 800c65c:	f007 ff80 	bl	8014560 <sdhc_spi_tx>
	if (err != 0) {
 800c660:	4604      	mov	r4, r0
 800c662:	2800      	cmp	r0, #0
 800c664:	d1d9      	bne.n	800c61a <sdhc_spi_write+0x26>
	sys_put_be16(crc16_itu_t(0, send, len), buf);
 800c666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c66a:	4639      	mov	r1, r7
 800c66c:	f005 fbcf 	bl	8011e0e <crc16_itu_t>
	err = sdhc_spi_tx(data, buf, sizeof(buf));
 800c670:	2202      	movs	r2, #2
	dst[0] = val >> 8;
 800c672:	0a03      	lsrs	r3, r0, #8
	dst[1] = val;
 800c674:	f88d 0005 	strb.w	r0, [sp, #5]
 800c678:	a901      	add	r1, sp, #4
 800c67a:	4628      	mov	r0, r5
	dst[0] = val >> 8;
 800c67c:	f88d 3004 	strb.w	r3, [sp, #4]
 800c680:	f007 ff6e 	bl	8014560 <sdhc_spi_tx>
	if (err != 0) {
 800c684:	4604      	mov	r4, r0
 800c686:	2800      	cmp	r0, #0
 800c688:	d1c7      	bne.n	800c61a <sdhc_spi_write+0x26>
	return sdhc_map_data_status(sdhc_spi_rx_u8(data));
 800c68a:	4628      	mov	r0, r5
 800c68c:	f007 ff9a 	bl	80145c4 <sdhc_spi_rx_u8>
 800c690:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800c692:	4648      	mov	r0, r9
 800c694:	f007 ff52 	bl	801453c <sdhc_map_flags>
		if (err != 0) {
 800c698:	4604      	mov	r4, r0
 800c69a:	2800      	cmp	r0, #0
 800c69c:	d1bd      	bne.n	800c61a <sdhc_spi_write+0x26>
		err = sdhc_spi_skip_until_ready(data);
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f008 f80a 	bl	80146b8 <sdhc_spi_skip_until_ready>
		if (err != 0) {
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d1b7      	bne.n	800c61a <sdhc_spi_write+0x26>
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	210d      	movs	r1, #13
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	f007 ff66 	bl	8014580 <sdhc_spi_tx_cmd>
	if (err != 0) {
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d1af      	bne.n	800c61a <sdhc_spi_write+0x26>
	r1 = sdhc_map_r1_status(sdhc_spi_skip_until_start(data));
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f007 ffc5 	bl	801464a <sdhc_spi_skip_until_start>
 800c6c0:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	f007 ff3a 	bl	801453c <sdhc_map_flags>
 800c6c8:	4683      	mov	fp, r0
	r2 = sdhc_spi_rx_u8(data);
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	f007 ff7a 	bl	80145c4 <sdhc_spi_rx_u8>
 800c6d0:	4604      	mov	r4, r0
	sdhc_spi_rx_u8(data);
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f007 ff76 	bl	80145c4 <sdhc_spi_rx_u8>
	if (r1 < 0) {
 800c6d8:	f1bb 0f00 	cmp.w	fp, #0
 800c6dc:	db07      	blt.n	800c6ee <sdhc_spi_write+0xfa>
		if (err != 0) {
 800c6de:	2c00      	cmp	r4, #0
 800c6e0:	d19b      	bne.n	800c61a <sdhc_spi_write+0x26>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800c6e2:	f507 7700 	add.w	r7, r7, #512	; 0x200
		sector++;
 800c6e6:	3601      	adds	r6, #1
	for (; count != 0U; count--) {
 800c6e8:	e794      	b.n	800c614 <sdhc_spi_write+0x20>
 800c6ea:	4632      	mov	r2, r6
 800c6ec:	e7a1      	b.n	800c632 <sdhc_spi_write+0x3e>
 800c6ee:	465c      	mov	r4, fp
 800c6f0:	e793      	b.n	800c61a <sdhc_spi_write+0x26>
 800c6f2:	bf00      	nop
 800c6f4:	0801a3ab 	.word	0x0801a3ab
 800c6f8:	0801a3a3 	.word	0x0801a3a3
 800c6fc:	0801a3f3 	.word	0x0801a3f3

0800c700 <sdhc_spi_write_multi>:
{
 800c700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c704:	4605      	mov	r5, r0
 800c706:	460f      	mov	r7, r1
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 800c708:	7c01      	ldrb	r1, [r0, #16]
 800c70a:	4830      	ldr	r0, [pc, #192]	; (800c7cc <sdhc_spi_write_multi+0xcc>)
 800c70c:	4690      	mov	r8, r2
 800c70e:	461e      	mov	r6, r3
 800c710:	f007 ff14 	bl	801453c <sdhc_map_flags>
	if (err != 0) {
 800c714:	4604      	mov	r4, r0
 800c716:	b9e0      	cbnz	r0, 800c752 <sdhc_spi_write_multi+0x52>
	if (data->high_capacity) {
 800c718:	7a2b      	ldrb	r3, [r5, #8]
 800c71a:	b90b      	cbnz	r3, 800c720 <sdhc_spi_write_multi+0x20>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800c71c:	ea4f 2848 	mov.w	r8, r8, lsl #9
	err = sdhc_spi_cmd_r1(data, SDHC_WRITE_MULTIPLE_BLOCK, addr);
 800c720:	4642      	mov	r2, r8
 800c722:	2119      	movs	r1, #25
 800c724:	4628      	mov	r0, r5
 800c726:	f7ff fdcb 	bl	800c2c0 <sdhc_spi_cmd_r1>
	if (err < 0) {
 800c72a:	1e04      	subs	r4, r0, #0
 800c72c:	db0d      	blt.n	800c74a <sdhc_spi_write_multi+0x4a>
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800c72e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800c7d0 <sdhc_spi_write_multi+0xd0>
		block[0] = SDHC_TOKEN_MULTI_WRITE;
 800c732:	f04f 08fc 	mov.w	r8, #252	; 0xfc
	for (; count != 0U; count--) {
 800c736:	b986      	cbnz	r6, 800c75a <sdhc_spi_write_multi+0x5a>
	sdhc_spi_tx_cmd(data, SDHC_STOP_TRANSMISSION, 0);
 800c738:	4632      	mov	r2, r6
 800c73a:	210c      	movs	r1, #12
 800c73c:	4628      	mov	r0, r5
 800c73e:	f007 ff1f 	bl	8014580 <sdhc_spi_tx_cmd>
	err = sdhc_spi_skip_until_ready(data);
 800c742:	4628      	mov	r0, r5
 800c744:	f007 ffb8 	bl	80146b8 <sdhc_spi_skip_until_ready>
 800c748:	4604      	mov	r4, r0
	spi_release(data->spi, data->spi_cfg);
 800c74a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c74e:	f007 ff44 	bl	80145da <spi_release.isra.0>
}
 800c752:	4620      	mov	r0, r4
 800c754:	b003      	add	sp, #12
 800c756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sdhc_spi_tx(data, block, 1);
 800c75a:	2201      	movs	r2, #1
 800c75c:	a901      	add	r1, sp, #4
 800c75e:	4628      	mov	r0, r5
		block[0] = SDHC_TOKEN_MULTI_WRITE;
 800c760:	f88d 8004 	strb.w	r8, [sp, #4]
		err = sdhc_spi_tx(data, block, 1);
 800c764:	f007 fefc 	bl	8014560 <sdhc_spi_tx>
		if (err != 0) {
 800c768:	4604      	mov	r4, r0
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d1ed      	bne.n	800c74a <sdhc_spi_write_multi+0x4a>
		err = sdhc_spi_tx(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
 800c76e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c772:	4639      	mov	r1, r7
 800c774:	4628      	mov	r0, r5
 800c776:	f007 fef3 	bl	8014560 <sdhc_spi_tx>
		if (err != 0) {
 800c77a:	4604      	mov	r4, r0
 800c77c:	2800      	cmp	r0, #0
 800c77e:	d1e4      	bne.n	800c74a <sdhc_spi_write_multi+0x4a>
		sys_put_be16(crc16_itu_t(0, buf, SDMMC_DEFAULT_BLOCK_SIZE),
 800c780:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c784:	4639      	mov	r1, r7
 800c786:	f005 fb42 	bl	8011e0e <crc16_itu_t>
		err = sdhc_spi_tx(data, block, sizeof(block));
 800c78a:	2202      	movs	r2, #2
 800c78c:	0a03      	lsrs	r3, r0, #8
	dst[1] = val;
 800c78e:	f88d 0005 	strb.w	r0, [sp, #5]
 800c792:	a901      	add	r1, sp, #4
 800c794:	4628      	mov	r0, r5
	dst[0] = val >> 8;
 800c796:	f88d 3004 	strb.w	r3, [sp, #4]
 800c79a:	f007 fee1 	bl	8014560 <sdhc_spi_tx>
		if (err != 0) {
 800c79e:	4604      	mov	r4, r0
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d1d2      	bne.n	800c74a <sdhc_spi_write_multi+0x4a>
		err = sdhc_map_data_status(sdhc_spi_rx_u8(data));
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f007 ff0d 	bl	80145c4 <sdhc_spi_rx_u8>
 800c7aa:	4601      	mov	r1, r0
 800c7ac:	4648      	mov	r0, r9
 800c7ae:	f007 fec5 	bl	801453c <sdhc_map_flags>
		if (err != 0) {
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d1c8      	bne.n	800c74a <sdhc_spi_write_multi+0x4a>
		err = sdhc_spi_skip_until_ready(data);
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	f007 ff7d 	bl	80146b8 <sdhc_spi_skip_until_ready>
		if (err != 0) {
 800c7be:	4604      	mov	r4, r0
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d1c2      	bne.n	800c74a <sdhc_spi_write_multi+0x4a>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800c7c4:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
 800c7c8:	3e01      	subs	r6, #1
 800c7ca:	e7b4      	b.n	800c736 <sdhc_spi_write_multi+0x36>
 800c7cc:	0801a3ab 	.word	0x0801a3ab
 800c7d0:	0801a3a3 	.word	0x0801a3a3

0800c7d4 <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800c7d4:	6809      	ldr	r1, [r1, #0]
 800c7d6:	290a      	cmp	r1, #10
 800c7d8:	d80a      	bhi.n	800c7f0 <stm32_clock_control_get_subsys_rate+0x1c>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	408b      	lsls	r3, r1
 800c7de:	f240 415f 	movw	r1, #1119	; 0x45f
 800c7e2:	420b      	tst	r3, r1
 800c7e4:	d004      	beq.n	800c7f0 <stm32_clock_control_get_subsys_rate+0x1c>
	uint32_t ahb_clock = SystemCoreClock;
 800c7e6:	4b04      	ldr	r3, [pc, #16]	; (800c7f8 <stm32_clock_control_get_subsys_rate+0x24>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
#endif
#if defined(CONFIG_SOC_SERIES_STM32WLX)
	case STM32_CLOCK_BUS_AHB3:
	case STM32_CLOCK_BUS_APB3:
		/* AHB3 and APB3 share the same clock and prescaler. */
		*rate = ahb3_clock;
 800c7ea:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800c7ec:	2000      	movs	r0, #0
		break;
 800c7ee:	4770      	bx	lr
	switch (pclken->bus) {
 800c7f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	200001d4 	.word	0x200001d4

0800c7fc <rtc_stm32_cancel_alarm>:
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <rtc_stm32_cancel_alarm+0x2c>)
}


static int rtc_stm32_cancel_alarm(const struct device *dev, uint8_t chan_id)
{
	struct rtc_stm32_data *data = dev->data;
 800c7fe:	6901      	ldr	r1, [r0, #16]
 800c800:	22ca      	movs	r2, #202	; 0xca
 800c802:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800c804:	2253      	movs	r2, #83	; 0x53
 800c806:	625a      	str	r2, [r3, #36]	; 0x24
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALRA(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800c808:	2201      	movs	r2, #1
 800c80a:	65da      	str	r2, [r3, #92]	; 0x5c
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableIT_ALRA(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800c80c:	699a      	ldr	r2, [r3, #24]
 800c80e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c812:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800c814:	699a      	ldr	r2, [r3, #24]
 800c816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c81a:	619a      	str	r2, [r3, #24]
	LL_RTC_ClearFlag_ALRA(RTC);
	LL_RTC_DisableIT_ALRA(RTC);
	LL_RTC_ALMA_Disable(RTC);
	LL_RTC_EnableWriteProtection(RTC);

	data->callback = NULL;
 800c81c:	2000      	movs	r0, #0
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800c81e:	22ff      	movs	r2, #255	; 0xff
 800c820:	625a      	str	r2, [r3, #36]	; 0x24
 800c822:	6008      	str	r0, [r1, #0]

	return 0;
}
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	40002800 	.word	0x40002800

0800c82c <rtc_stm32_get_pending_int>:
  return ((READ_BIT(RTCx->SR, RTC_SR_ALRAF) == (RTC_SR_ALRAF)) ? 1U : 0U);
 800c82c:	4b02      	ldr	r3, [pc, #8]	; (800c838 <rtc_stm32_get_pending_int+0xc>)
 800c82e:	6d18      	ldr	r0, [r3, #80]	; 0x50


static uint32_t rtc_stm32_get_pending_int(const struct device *dev)
{
	return LL_RTC_IsActiveFlag_ALRA(RTC) != 0;
}
 800c830:	f000 0001 	and.w	r0, r0, #1
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	40002800 	.word	0x40002800

0800c83c <rtc_stm32_read>:
{
 800c83c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct tm now = { 0 };
 800c83e:	2500      	movs	r5, #0
{
 800c840:	b08b      	sub	sp, #44	; 0x2c
	struct tm now = { 0 };
 800c842:	e9cd 5507 	strd	r5, r5, [sp, #28]
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800c846:	4b31      	ldr	r3, [pc, #196]	; (800c90c <rtc_stm32_read+0xd0>)
 800c848:	9509      	str	r5, [sp, #36]	; 0x24
 800c84a:	6819      	ldr	r1, [r3, #0]
  temp = READ_BIT(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU));
 800c84c:	685b      	ldr	r3, [r3, #4]
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800c84e:	4a30      	ldr	r2, [pc, #192]	; (800c910 <rtc_stm32_read+0xd4>)
                    ((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos)));
 800c850:	f3c3 5403 	ubfx	r4, r3, #20, #4
{
 800c854:	4606      	mov	r6, r0
			__LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_YEAR(rtc_date));
 800c856:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800c85a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800c85e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800c862:	b2c0      	uxtb	r0, r0
	now.tm_year = 100 +
 800c864:	3064      	adds	r0, #100	; 0x64
 800c866:	9006      	str	r0, [sp, #24]
	now.tm_mon = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MONTH(rtc_date)) - 1;
 800c868:	f3c3 3000 	ubfx	r0, r3, #12, #1
 800c86c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800c870:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800c874:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800c878:	3801      	subs	r0, #1
 800c87a:	9005      	str	r0, [sp, #20]
	now.tm_mday = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_DAY(rtc_date));
 800c87c:	f3c3 1001 	ubfx	r0, r3, #4, #2
 800c880:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c884:	f003 030f 	and.w	r3, r3, #15
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800c888:	400a      	ands	r2, r1
 800c88a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c88e:	9304      	str	r3, [sp, #16]
	now.tm_hour = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_HOUR(rtc_time));
 800c890:	0d13      	lsrs	r3, r2, #20
 800c892:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800c896:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c89a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c89e:	9303      	str	r3, [sp, #12]
	now.tm_min = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MINUTE(rtc_time));
 800c8a0:	f3c2 3302 	ubfx	r3, r2, #12, #3
 800c8a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c8a8:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800c8ac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 800c8b0:	f3c1 1302 	ubfx	r3, r1, #4, #3
 800c8b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c8b8:	f001 010f 	and.w	r1, r1, #15
 800c8bc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	ts = timeutil_timegm(&now);
 800c8c0:	a801      	add	r0, sp, #4
	now.tm_min = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MINUTE(rtc_time));
 800c8c2:	9202      	str	r2, [sp, #8]
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 800c8c4:	9101      	str	r1, [sp, #4]
	ts = timeutil_timegm(&now);
 800c8c6:	f005 fb38 	bl	8011f3a <timeutil_timegm>
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	460f      	mov	r7, r1
__syscall uint32_t counter_us_to_ticks(const struct device *dev, uint64_t us);

static inline uint32_t z_impl_counter_us_to_ticks(const struct device *dev,
					       uint64_t us)
{
	uint64_t ticks = (us * z_impl_counter_get_frequency(dev)) / USEC_PER_SEC;
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f008 f85e 	bl	8014990 <z_impl_counter_get_frequency>
	ts -= T_TIME_OFFSET;
 800c8d4:	490f      	ldr	r1, [pc, #60]	; (800c914 <rtc_stm32_read+0xd8>)
	ticks = counter_us_to_ticks(dev, ts * USEC_PER_SEC);
 800c8d6:	4b10      	ldr	r3, [pc, #64]	; (800c918 <rtc_stm32_read+0xdc>)
 800c8d8:	4a0f      	ldr	r2, [pc, #60]	; (800c918 <rtc_stm32_read+0xdc>)
	ts -= T_TIME_OFFSET;
 800c8da:	1864      	adds	r4, r4, r1
 800c8dc:	f167 0700 	sbc.w	r7, r7, #0
	ticks = counter_us_to_ticks(dev, ts * USEC_PER_SEC);
 800c8e0:	fba4 4103 	umull	r4, r1, r4, r3
 800c8e4:	4606      	mov	r6, r0
 800c8e6:	fb03 1107 	mla	r1, r3, r7, r1
 800c8ea:	fba4 0400 	umull	r0, r4, r4, r0
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	fb06 4101 	mla	r1, r6, r1, r4
 800c8f4:	f7f4 fb68 	bl	8000fc8 <__aeabi_uldivmod>

	return (ticks > (uint64_t)UINT32_MAX) ? UINT32_MAX : ticks;
 800c8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8fc:	4282      	cmp	r2, r0
 800c8fe:	eb75 0301 	sbcs.w	r3, r5, r1
 800c902:	bf38      	it	cc
 800c904:	4610      	movcc	r0, r2
}
 800c906:	b00b      	add	sp, #44	; 0x2c
 800c908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c90a:	bf00      	nop
 800c90c:	40002800 	.word	0x40002800
 800c910:	003f7f7f 	.word	0x003f7f7f
 800c914:	c792bc80 	.word	0xc792bc80
 800c918:	000f4240 	.word	0x000f4240

0800c91c <rtc_stm32_isr>:


}

void rtc_stm32_isr(const struct device *dev)
{
 800c91c:	b570      	push	{r4, r5, r6, lr}
	struct rtc_stm32_data *data = dev->data;
 800c91e:	6905      	ldr	r5, [r0, #16]
{
 800c920:	4604      	mov	r4, r0
	counter_alarm_callback_t alarm_callback = data->callback;
 800c922:	682e      	ldr	r6, [r5, #0]

	uint32_t now = rtc_stm32_read(dev);
 800c924:	f7ff ff8a 	bl	800c83c <rtc_stm32_read>
  return ((READ_BIT(RTCx->SR, RTC_SR_ALRAF) == (RTC_SR_ALRAF)) ? 1U : 0U);
 800c928:	4b0f      	ldr	r3, [pc, #60]	; (800c968 <rtc_stm32_isr+0x4c>)
 800c92a:	6d19      	ldr	r1, [r3, #80]	; 0x50

	if (LL_RTC_IsActiveFlag_ALRA(RTC) != 0) {
 800c92c:	07c9      	lsls	r1, r1, #31
	uint32_t now = rtc_stm32_read(dev);
 800c92e:	4602      	mov	r2, r0
	if (LL_RTC_IsActiveFlag_ALRA(RTC) != 0) {
 800c930:	d515      	bpl.n	800c95e <rtc_stm32_isr+0x42>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800c932:	21ca      	movs	r1, #202	; 0xca
 800c934:	6259      	str	r1, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800c936:	2153      	movs	r1, #83	; 0x53
 800c938:	6259      	str	r1, [r3, #36]	; 0x24
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800c93a:	2101      	movs	r1, #1
 800c93c:	65d9      	str	r1, [r3, #92]	; 0x5c
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800c93e:	6999      	ldr	r1, [r3, #24]
 800c940:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800c944:	6199      	str	r1, [r3, #24]
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800c946:	6999      	ldr	r1, [r3, #24]
 800c948:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c94c:	6199      	str	r1, [r3, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800c94e:	21ff      	movs	r1, #255	; 0xff
 800c950:	6259      	str	r1, [r3, #36]	; 0x24
		LL_RTC_ClearFlag_ALRA(RTC);
		LL_RTC_DisableIT_ALRA(RTC);
		LL_RTC_ALMA_Disable(RTC);
		LL_RTC_EnableWriteProtection(RTC);

		if (alarm_callback != NULL) {
 800c952:	b126      	cbz	r6, 800c95e <rtc_stm32_isr+0x42>
			data->callback = NULL;
 800c954:	2100      	movs	r1, #0
			alarm_callback(dev, 0, now, data->user_data);
 800c956:	68ab      	ldr	r3, [r5, #8]
			data->callback = NULL;
 800c958:	6029      	str	r1, [r5, #0]
			alarm_callback(dev, 0, now, data->user_data);
 800c95a:	4620      	mov	r0, r4
 800c95c:	47b0      	blx	r6
  WRITE_REG(EXTI->PR1, ExtiLine);
 800c95e:	4b03      	ldr	r3, [pc, #12]	; (800c96c <rtc_stm32_isr+0x50>)
 800c960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c964:	60da      	str	r2, [r3, #12]
#elif defined(CONFIG_SOC_SERIES_STM32G0X)
	LL_EXTI_ClearRisingFlag_0_31(RTC_EXTI_LINE);
#else
	LL_EXTI_ClearFlag_0_31(RTC_EXTI_LINE);
#endif
}
 800c966:	bd70      	pop	{r4, r5, r6, pc}
 800c968:	40002800 	.word	0x40002800
 800c96c:	58000800 	.word	0x58000800

0800c970 <rtc_stm32_init>:


static int rtc_stm32_init(const struct device *dev)
{
 800c970:	b570      	push	{r4, r5, r6, lr}
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct rtc_stm32_config *cfg = dev->config;
	struct rtc_stm32_data *data = dev->data;

	data->callback = NULL;
 800c972:	6903      	ldr	r3, [r0, #16]
	const struct rtc_stm32_config *cfg = dev->config;
 800c974:	6846      	ldr	r6, [r0, #4]
	data->callback = NULL;
 800c976:	2200      	movs	r2, #0
{
 800c978:	b086      	sub	sp, #24
	data->callback = NULL;
 800c97a:	601a      	str	r2, [r3, #0]

	if (clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken) != 0) {
 800c97c:	f106 050c 	add.w	r5, r6, #12
 800c980:	4c39      	ldr	r4, [pc, #228]	; (800ca68 <rtc_stm32_init+0xf8>)
 800c982:	4620      	mov	r0, r4
 800c984:	f00a fbcd 	bl	8017122 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 800c988:	b978      	cbnz	r0, 800c9aa <rtc_stm32_init+0x3a>
		LOG_ERR("clock op failed\n");
 800c98a:	4b38      	ldr	r3, [pc, #224]	; (800ca6c <rtc_stm32_init+0xfc>)
 800c98c:	9304      	str	r3, [sp, #16]
 800c98e:	2302      	movs	r3, #2
 800c990:	9303      	str	r3, [sp, #12]
 800c992:	4837      	ldr	r0, [pc, #220]	; (800ca70 <rtc_stm32_init+0x100>)
 800c994:	2300      	movs	r3, #0
 800c996:	aa03      	add	r2, sp, #12
 800c998:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800c99c:	f005 fdfe 	bl	801259c <z_impl_z_log_msg2_static_create>

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#if !defined(CONFIG_COUNTER_RTC_STM32_SAVE_VALUE_BETWEEN_RESETS)
	if (LL_RTC_DeInit(RTC) != SUCCESS) {
		return -EIO;
 800c9a0:	f06f 0504 	mvn.w	r5, #4
	LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE);

	rtc_stm32_irq_config(dev);

	return 0;
}
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	b006      	add	sp, #24
 800c9a8:	bd70      	pop	{r4, r5, r6, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800c9aa:	68a3      	ldr	r3, [r4, #8]
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	4798      	blx	r3
	if (clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken) != 0) {
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d1e7      	bne.n	800c98a <rtc_stm32_init+0x1a>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c9ba:	4a2e      	ldr	r2, [pc, #184]	; (800ca74 <rtc_stm32_init+0x104>)
 800c9bc:	6813      	ldr	r3, [r2, #0]
 800c9be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9c2:	6013      	str	r3, [r2, #0]
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c9c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c9cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c9d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c9d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c9d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c9dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800c9e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c9e4:	f042 0201 	orr.w	r2, r2, #1
 800c9e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800c9ec:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c9f0:	0792      	lsls	r2, r2, #30
 800c9f2:	d5fb      	bpl.n	800c9ec <rtc_stm32_init+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c9f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	if (LL_RTC_DeInit(RTC) != SUCCESS) {
 800c9f8:	4c1f      	ldr	r4, [pc, #124]	; (800ca78 <rtc_stm32_init+0x108>)
 800c9fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c9fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800ca06:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800ca0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800ca12:	4620      	mov	r0, r4
 800ca14:	f002 fe1c 	bl	800f650 <LL_RTC_DeInit>
 800ca18:	2801      	cmp	r0, #1
 800ca1a:	d1c1      	bne.n	800c9a0 <rtc_stm32_init+0x30>
	if (LL_RTC_Init(RTC, ((LL_RTC_InitTypeDef *)
 800ca1c:	f106 0114 	add.w	r1, r6, #20
 800ca20:	4620      	mov	r0, r4
 800ca22:	f00a fafe 	bl	8017022 <LL_RTC_Init>
 800ca26:	2801      	cmp	r0, #1
 800ca28:	d1ba      	bne.n	800c9a0 <rtc_stm32_init+0x30>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800ca2a:	23ca      	movs	r3, #202	; 0xca
 800ca2c:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800ca2e:	2353      	movs	r3, #83	; 0x53
 800ca30:	6263      	str	r3, [r4, #36]	; 0x24
  SET_BIT(RTCx->CR, RTC_CR_BYPSHAD);
 800ca32:	69a3      	ldr	r3, [r4, #24]
 800ca34:	f043 0320 	orr.w	r3, r3, #32
 800ca38:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800ca3a:	23ff      	movs	r3, #255	; 0xff
 800ca3c:	6263      	str	r3, [r4, #36]	; 0x24
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ca3e:	4b0f      	ldr	r3, [pc, #60]	; (800ca7c <rtc_stm32_init+0x10c>)
 800ca40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ca44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ca48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ca52:	601a      	str	r2, [r3, #0]
		    &rtc_data, &rtc_config, PRE_KERNEL_1,
		    CONFIG_COUNTER_INIT_PRIORITY, &rtc_stm32_driver_api);

static void rtc_stm32_irq_config(const struct device *dev)
{
	IRQ_CONNECT(DT_INST_IRQN(0),
 800ca54:	2200      	movs	r2, #0
 800ca56:	4611      	mov	r1, r2
 800ca58:	202a      	movs	r0, #42	; 0x2a
 800ca5a:	f7f7 fff1 	bl	8004a40 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    rtc_stm32_isr, DEVICE_DT_INST_GET(0), 0);
	irq_enable(DT_INST_IRQN(0));
 800ca5e:	202a      	movs	r0, #42	; 0x2a
 800ca60:	f7f7 ffca 	bl	80049f8 <arch_irq_enable>
}
 800ca64:	e79e      	b.n	800c9a4 <rtc_stm32_init+0x34>
 800ca66:	bf00      	nop
 800ca68:	08017cb8 	.word	0x08017cb8
 800ca6c:	0801a411 	.word	0x0801a411
 800ca70:	08018078 	.word	0x08018078
 800ca74:	58000400 	.word	0x58000400
 800ca78:	40002800 	.word	0x40002800
 800ca7c:	58000800 	.word	0x58000800

0800ca80 <rtc_stm32_set_alarm>:
{
 800ca80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct rtc_stm32_data *data = dev->data;
 800ca84:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 800ca88:	b091      	sub	sp, #68	; 0x44
 800ca8a:	4616      	mov	r6, r2
 800ca8c:	4607      	mov	r7, r0
	uint32_t now = rtc_stm32_read(dev);
 800ca8e:	f7ff fed5 	bl	800c83c <rtc_stm32_read>
	if (data->callback != NULL) {
 800ca92:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t ticks = alarm_cfg->ticks;
 800ca96:	6875      	ldr	r5, [r6, #4]
	uint32_t now = rtc_stm32_read(dev);
 800ca98:	4604      	mov	r4, r0
	if (data->callback != NULL) {
 800ca9a:	f1b9 0f00 	cmp.w	r9, #0
 800ca9e:	d168      	bne.n	800cb72 <rtc_stm32_set_alarm+0xf2>
	data->callback = alarm_cfg->callback;
 800caa0:	6833      	ldr	r3, [r6, #0]
	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800caa2:	68f2      	ldr	r2, [r6, #12]
	data->callback = alarm_cfg->callback;
 800caa4:	f8c8 3000 	str.w	r3, [r8]
	data->user_data = alarm_cfg->user_data;
 800caa8:	68b3      	ldr	r3, [r6, #8]
 800caaa:	f8c8 3008 	str.w	r3, [r8, #8]
	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800caae:	f012 0801 	ands.w	r8, r2, #1
 800cab2:	4e33      	ldr	r6, [pc, #204]	; (800cb80 <rtc_stm32_set_alarm+0x100>)
 800cab4:	d14d      	bne.n	800cb52 <rtc_stm32_set_alarm+0xd2>
		ticks += now + 1;
 800cab6:	3501      	adds	r5, #1
__syscall uint64_t counter_ticks_to_us(const struct device *dev, uint32_t ticks);

static inline uint64_t z_impl_counter_ticks_to_us(const struct device *dev,
					       uint32_t ticks)
{
	return ((uint64_t)ticks * USEC_PER_SEC) / z_impl_counter_get_frequency(dev);
 800cab8:	4638      	mov	r0, r7
 800caba:	f007 ff69 	bl	8014990 <z_impl_counter_get_frequency>
 800cabe:	1961      	adds	r1, r4, r5
 800cac0:	4602      	mov	r2, r0
 800cac2:	4643      	mov	r3, r8
 800cac4:	fba1 0106 	umull	r0, r1, r1, r6
 800cac8:	f7f4 fa7e 	bl	8000fc8 <__aeabi_uldivmod>
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC)
 800cacc:	2300      	movs	r3, #0
 800cace:	4a2c      	ldr	r2, [pc, #176]	; (800cb80 <rtc_stm32_set_alarm+0x100>)
 800cad0:	f7f4 fa7a 	bl	8000fc8 <__aeabi_uldivmod>
			+ T_TIME_OFFSET;
 800cad4:	4b2b      	ldr	r3, [pc, #172]	; (800cb84 <rtc_stm32_set_alarm+0x104>)
 800cad6:	18c0      	adds	r0, r0, r3
 800cad8:	f141 0100 	adc.w	r1, r1, #0
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC)
 800cadc:	e9cd 0100 	strd	r0, r1, [sp]
	gmtime_r(&alarm_val, &alarm_tm);
 800cae0:	a907      	add	r1, sp, #28
 800cae2:	4668      	mov	r0, sp
 800cae4:	f004 f9d4 	bl	8010e90 <gmtime_r>
	rtc_alarm.AlarmTime.Hours = alarm_tm.tm_hour;
 800cae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caea:	f88d 300c 	strb.w	r3, [sp, #12]
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 800caee:	2500      	movs	r5, #0
	rtc_alarm.AlarmTime.Minutes = alarm_tm.tm_min;
 800caf0:	9b08      	ldr	r3, [sp, #32]
 800caf2:	f88d 300d 	strb.w	r3, [sp, #13]
	rtc_alarm.AlarmDateWeekDaySel = LL_RTC_ALMA_DATEWEEKDAYSEL_DATE;
 800caf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	rtc_alarm.AlarmTime.Seconds = alarm_tm.tm_sec;
 800cafa:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800cafc:	4c22      	ldr	r4, [pc, #136]	; (800cb88 <rtc_stm32_set_alarm+0x108>)
 800cafe:	f88d 300e 	strb.w	r3, [sp, #14]
 800cb02:	f04f 08ca 	mov.w	r8, #202	; 0xca
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 800cb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 800cb08:	9502      	str	r5, [sp, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800cb0a:	2753      	movs	r7, #83	; 0x53
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 800cb0c:	f88d 3018 	strb.w	r3, [sp, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800cb10:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800cb14:	6267      	str	r7, [r4, #36]	; 0x24
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800cb16:	69a3      	ldr	r3, [r4, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800cb18:	26ff      	movs	r6, #255	; 0xff
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800cb1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb1e:	61a3      	str	r3, [r4, #24]
	if (LL_RTC_ALMA_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_alarm) != SUCCESS) {
 800cb20:	aa02      	add	r2, sp, #8
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800cb22:	6266      	str	r6, [r4, #36]	; 0x24
 800cb24:	4629      	mov	r1, r5
 800cb26:	4620      	mov	r0, r4
 800cb28:	f00a f9e1 	bl	8016eee <LL_RTC_ALMA_Init>
 800cb2c:	2801      	cmp	r0, #1
 800cb2e:	d123      	bne.n	800cb78 <rtc_stm32_set_alarm+0xf8>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800cb30:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800cb34:	6267      	str	r7, [r4, #36]	; 0x24
  SET_BIT(RTCx->CR, RTC_CR_ALRAE);
 800cb36:	69a3      	ldr	r3, [r4, #24]
 800cb38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb3c:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800cb3e:	65e0      	str	r0, [r4, #92]	; 0x5c
  SET_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800cb40:	69a3      	ldr	r3, [r4, #24]
 800cb42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cb46:	61a3      	str	r3, [r4, #24]
	return 0;
 800cb48:	4628      	mov	r0, r5
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800cb4a:	6266      	str	r6, [r4, #36]	; 0x24
}
 800cb4c:	b011      	add	sp, #68	; 0x44
 800cb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb52:	4638      	mov	r0, r7
 800cb54:	f007 ff1c 	bl	8014990 <z_impl_counter_get_frequency>
 800cb58:	464b      	mov	r3, r9
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	fba5 0106 	umull	r0, r1, r5, r6
 800cb60:	f7f4 fa32 	bl	8000fc8 <__aeabi_uldivmod>
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC);
 800cb64:	4a06      	ldr	r2, [pc, #24]	; (800cb80 <rtc_stm32_set_alarm+0x100>)
 800cb66:	2300      	movs	r3, #0
 800cb68:	f7f4 fa2e 	bl	8000fc8 <__aeabi_uldivmod>
 800cb6c:	e9cd 0100 	strd	r0, r1, [sp]
 800cb70:	e7b6      	b.n	800cae0 <rtc_stm32_set_alarm+0x60>
		return -EBUSY;
 800cb72:	f06f 000f 	mvn.w	r0, #15
 800cb76:	e7e9      	b.n	800cb4c <rtc_stm32_set_alarm+0xcc>
		return -EIO;
 800cb78:	f06f 0004 	mvn.w	r0, #4
 800cb7c:	e7e6      	b.n	800cb4c <rtc_stm32_set_alarm+0xcc>
 800cb7e:	bf00      	nop
 800cb80:	000f4240 	.word	0x000f4240
 800cb84:	386d4380 	.word	0x386d4380
 800cb88:	40002800 	.word	0x40002800

0800cb8c <sync_timer_handler>:
	data->syncpoint.syncclock = data->isw_syncclock;
	sync_finish(dev, 0);
}

static void sync_timer_handler(struct k_timer *tmr)
{
 800cb8c:	b510      	push	{r4, lr}
 800cb8e:	b086      	sub	sp, #24
	struct ds3231_data *data = CONTAINER_OF(tmr, struct ds3231_data,
						sync_timer);

	LOG_INF("sync_timer fired");
 800cb90:	4b08      	ldr	r3, [pc, #32]	; (800cbb4 <sync_timer_handler+0x28>)
 800cb92:	9304      	str	r3, [sp, #16]
{
 800cb94:	4604      	mov	r4, r0
	LOG_INF("sync_timer fired");
 800cb96:	2302      	movs	r3, #2
 800cb98:	4807      	ldr	r0, [pc, #28]	; (800cbb8 <sync_timer_handler+0x2c>)
 800cb9a:	9303      	str	r3, [sp, #12]
 800cb9c:	aa03      	add	r2, sp, #12
 800cb9e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800cba2:	f007 ff7e 	bl	8014aa2 <z_log_msg2_static_create.constprop.0>
	k_work_submit(&data->sync_work);
 800cba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 800cbaa:	b006      	add	sp, #24
 800cbac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->sync_work);
 800cbb0:	f003 bb0c 	b.w	80101cc <k_work_submit>
 800cbb4:	0801a43a 	.word	0x0801a43a
 800cbb8:	08018060 	.word	0x08018060

0800cbbc <validate_isw_monitoring>:
{
 800cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ds3231_data *data = dev->data;
 800cbc0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 800cbc4:	6846      	ldr	r6, [r0, #4]
	if (rp->ctrl & (MAXIM_DS3231_ALARM1 | MAXIM_DS3231_ALARM2)) {
 800cbc6:	f898 4012 	ldrb.w	r4, [r8, #18]
	if (data->sync_state != SYNCSM_IDLE) {
 800cbca:	f898 3113 	ldrb.w	r3, [r8, #275]	; 0x113
	uint8_t isw_mon_req = 0;
 800cbce:	f014 0403 	ands.w	r4, r4, #3
{
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	4605      	mov	r5, r0
	uint8_t isw_mon_req = 0;
 800cbd6:	bf18      	it	ne
 800cbd8:	2401      	movne	r4, #1
	if (data->sync_state != SYNCSM_IDLE) {
 800cbda:	b10b      	cbz	r3, 800cbe0 <validate_isw_monitoring+0x24>
		isw_mon_req |= ISW_MON_REQ_Sync;
 800cbdc:	f044 0402 	orr.w	r4, r4, #2
	if ((cfg->isw_gpios.port != NULL)
 800cbe0:	6973      	ldr	r3, [r6, #20]
 800cbe2:	b39b      	cbz	r3, 800cc4c <validate_isw_monitoring+0x90>
	    && (isw_mon_req != data->isw_mon_req)) {
 800cbe4:	f898 3112 	ldrb.w	r3, [r8, #274]	; 0x112
 800cbe8:	42a3      	cmp	r3, r4
 800cbea:	d02f      	beq.n	800cc4c <validate_isw_monitoring+0x90>
		rc = gpio_pin_interrupt_configure_dt(&cfg->isw_gpios,
 800cbec:	3614      	adds	r6, #20
 800cbee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f007 ff0a 	bl	8014a0c <gpio_pin_interrupt_configure_dt>
		if ((rc >= 0)
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	db0d      	blt.n	800cc18 <validate_isw_monitoring+0x5c>
			!= (data->isw_mon_req & ISW_MON_REQ_Sync))) {
 800cbfc:	f898 3112 	ldrb.w	r3, [r8, #274]	; 0x112
 800cc00:	4063      	eors	r3, r4
		    && ((isw_mon_req & ISW_MON_REQ_Sync)
 800cc02:	079b      	lsls	r3, r3, #30
 800cc04:	d508      	bpl.n	800cc18 <validate_isw_monitoring+0x5c>
			if (isw_mon_req & ISW_MON_REQ_Sync) {
 800cc06:	f014 0202 	ands.w	r2, r4, #2
				rc = sc_ctrl(dev, 0,
 800cc0a:	bf1a      	itte	ne
 800cc0c:	221c      	movne	r2, #28
 800cc0e:	2100      	movne	r1, #0
				rc = sc_ctrl(dev, MAXIM_DS3231_REG_CTRL_INTCN, 0);
 800cc10:	2104      	moveq	r1, #4
 800cc12:	4628      	mov	r0, r5
 800cc14:	f007 ff72 	bl	8014afc <sc_ctrl>
		if ((rc >= 0) && (isw_mon_req != 0)) {
 800cc18:	2800      	cmp	r0, #0
		data->isw_mon_req = isw_mon_req;
 800cc1a:	f888 4112 	strb.w	r4, [r8, #274]	; 0x112
		if ((rc >= 0) && (isw_mon_req != 0)) {
 800cc1e:	db05      	blt.n	800cc2c <validate_isw_monitoring+0x70>
 800cc20:	b124      	cbz	r4, 800cc2c <validate_isw_monitoring+0x70>
			rc = gpio_pin_interrupt_configure_dt(
 800cc22:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
 800cc26:	4630      	mov	r0, r6
 800cc28:	f007 fef0 	bl	8014a0c <gpio_pin_interrupt_configure_dt>
		LOG_INF("ISW reconfigure to %x: %d", isw_mon_req, rc);
 800cc2c:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <validate_isw_monitoring+0x98>)
 800cc2e:	466d      	mov	r5, sp
 800cc30:	b088      	sub	sp, #32
 800cc32:	466a      	mov	r2, sp
 800cc34:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800cc38:	2304      	movs	r3, #4
 800cc3a:	6190      	str	r0, [r2, #24]
 800cc3c:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 800cc40:	f842 3f0c 	str.w	r3, [r2, #12]!
 800cc44:	4804      	ldr	r0, [pc, #16]	; (800cc58 <validate_isw_monitoring+0x9c>)
 800cc46:	f007 ff2c 	bl	8014aa2 <z_log_msg2_static_create.constprop.0>
 800cc4a:	46ad      	mov	sp, r5
}
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc52:	bf00      	nop
 800cc54:	0801a44b 	.word	0x0801a44b
 800cc58:	08018060 	.word	0x08018060

0800cc5c <alarm_worker>:
{
 800cc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *ds3231 = data->ds3231;
 800cc60:	f850 5c68 	ldr.w	r5, [r0, #-104]
{
 800cc64:	b089      	sub	sp, #36	; 0x24
	const struct ds3231_config *cfg = ds3231->config;
 800cc66:	686b      	ldr	r3, [r5, #4]
 800cc68:	9300      	str	r3, [sp, #0]
	k_sem_take(&data->lock, K_FOREVER);
 800cc6a:	f1a0 0750 	sub.w	r7, r0, #80	; 0x50
{
 800cc6e:	4606      	mov	r6, r0
	k_sem_take(&data->lock, K_FOREVER);
 800cc70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc78:	4638      	mov	r0, r7
 800cc7a:	f007 ff2d 	bl	8014ad8 <k_sem_take.constprop.0.isra.0>
		af = check_handled_alarms(ds3231);
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f007 ffe7 	bl	8014c52 <check_handled_alarms>
	while (af > 0) {
 800cc84:	2800      	cmp	r0, #0
		af = check_handled_alarms(ds3231);
 800cc86:	4604      	mov	r4, r0
	while (af > 0) {
 800cc88:	dc5a      	bgt.n	800cd40 <alarm_worker+0xe4>
	k_sem_give(&data->lock);
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	f007 fee5 	bl	8014a5a <k_sem_give>
	if (af < 0) {
 800cc90:	b14c      	cbz	r4, 800cca6 <alarm_worker+0x4a>
		LOG_ERR("failed to read alarm flags");
 800cc92:	4b2d      	ldr	r3, [pc, #180]	; (800cd48 <alarm_worker+0xec>)
 800cc94:	9306      	str	r3, [sp, #24]
 800cc96:	482d      	ldr	r0, [pc, #180]	; (800cd4c <alarm_worker+0xf0>)
 800cc98:	2302      	movs	r3, #2
 800cc9a:	aa05      	add	r2, sp, #20
 800cc9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800cca0:	9305      	str	r3, [sp, #20]
 800cca2:	f007 fefe 	bl	8014aa2 <z_log_msg2_static_create.constprop.0>
}
 800cca6:	b009      	add	sp, #36	; 0x24
 800cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((af & (MAXIM_DS3231_ALARM1 << id)) == 0) {
 800ccac:	fa24 f30a 	lsr.w	r3, r4, sl
 800ccb0:	07db      	lsls	r3, r3, #31
 800ccb2:	d533      	bpl.n	800cd1c <alarm_worker+0xc0>
			if (data->alarm_flags[id] & MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE) {
 800ccb4:	eb06 020a 	add.w	r2, r6, sl
 800ccb8:	eb06 038a 	add.w	r3, r6, sl, lsl #2
 800ccbc:	f992 20a8 	ldrsb.w	r2, [r2, #168]	; 0xa8
			maxim_ds3231_alarm_callback_handler_t handler
 800ccc0:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
			void *ud = data->alarm_user_data[id];
 800ccc4:	f8d3 b0a0 	ldr.w	fp, [r3, #160]	; 0xa0
			if (data->alarm_flags[id] & MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE) {
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	da08      	bge.n	800ccde <alarm_worker+0x82>
				int rc = cancel_alarm(ds3231, id);
 800cccc:	4651      	mov	r1, sl
 800ccce:	4628      	mov	r0, r5
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	f007 ff2e 	bl	8014b32 <cancel_alarm>
				validate_isw_monitoring(ds3231);
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f7ff ff70 	bl	800cbbc <validate_isw_monitoring>
 800ccdc:	9b01      	ldr	r3, [sp, #4]
			if (handler == counter_alarm_forwarder) {
 800ccde:	4a1c      	ldr	r2, [pc, #112]	; (800cd50 <alarm_worker+0xf4>)
 800cce0:	4591      	cmp	r9, r2
 800cce2:	d124      	bne.n	800cd2e <alarm_worker+0xd2>
				uint32_t ticks = data->counter_ticks[id];
 800cce4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
				counter_alarm_callback_t cb = data->counter_handler[id];
 800cce8:	f8d3 9088 	ldr.w	r9, [r3, #136]	; 0x88
				uint32_t ticks = data->counter_ticks[id];
 800ccec:	9201      	str	r2, [sp, #4]
				data->counter_handler[id] = NULL;
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				data->counter_ticks[id] = 0;
 800ccf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				if (cb) {
 800ccf8:	f1b9 0f00 	cmp.w	r9, #0
 800ccfc:	d00e      	beq.n	800cd1c <alarm_worker+0xc0>
					k_sem_give(&data->lock);
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f007 feab 	bl	8014a5a <k_sem_give>
					cb(ds3231, id, ticks, ud);
 800cd04:	9a01      	ldr	r2, [sp, #4]
 800cd06:	465b      	mov	r3, fp
				handler(ds3231, id, data->isw_syncclock, ud);
 800cd08:	4628      	mov	r0, r5
 800cd0a:	4651      	mov	r1, sl
 800cd0c:	47c8      	blx	r9
				k_sem_take(&data->lock, K_FOREVER);
 800cd0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd16:	4638      	mov	r0, r7
 800cd18:	f007 fede 	bl	8014ad8 <k_sem_take.constprop.0.isra.0>
		for (id = 0; id < cfg->generic.channels; ++id) {
 800cd1c:	f108 0801 	add.w	r8, r8, #1
 800cd20:	9b00      	ldr	r3, [sp, #0]
 800cd22:	7a5b      	ldrb	r3, [r3, #9]
 800cd24:	fa5f fa88 	uxtb.w	sl, r8
 800cd28:	4553      	cmp	r3, sl
 800cd2a:	d8bf      	bhi.n	800ccac <alarm_worker+0x50>
 800cd2c:	e7a7      	b.n	800cc7e <alarm_worker+0x22>
			} else if (handler != NULL) {
 800cd2e:	f1b9 0f00 	cmp.w	r9, #0
 800cd32:	d0f3      	beq.n	800cd1c <alarm_worker+0xc0>
				k_sem_give(&data->lock);
 800cd34:	4638      	mov	r0, r7
 800cd36:	f007 fe90 	bl	8014a5a <k_sem_give>
				handler(ds3231, id, data->isw_syncclock, ud);
 800cd3a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800cd3c:	465b      	mov	r3, fp
 800cd3e:	e7e3      	b.n	800cd08 <alarm_worker+0xac>
 800cd40:	f04f 0800 	mov.w	r8, #0
 800cd44:	e7ec      	b.n	800cd20 <alarm_worker+0xc4>
 800cd46:	bf00      	nop
 800cd48:	0801a465 	.word	0x0801a465
 800cd4c:	08018060 	.word	0x08018060
 800cd50:	08014a3d 	.word	0x08014a3d

0800cd54 <ds3231_counter_set_alarm>:
}

int ds3231_counter_set_alarm(const struct device *dev,
			     uint8_t id,
			     const struct counter_alarm_cfg *alarm_cfg)
{
 800cd54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct register_map *rp = &data->registers;
	const struct ds3231_config *cfg = dev->config;
	time_t when;
	int rc = 0;

	if (id >= cfg->generic.channels) {
 800cd58:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 800cd5a:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (id >= cfg->generic.channels) {
 800cd5e:	7a5b      	ldrb	r3, [r3, #9]
 800cd60:	428b      	cmp	r3, r1
{
 800cd62:	b089      	sub	sp, #36	; 0x24
 800cd64:	4606      	mov	r6, r0
 800cd66:	460f      	mov	r7, r1
 800cd68:	4615      	mov	r5, r2
	if (id >= cfg->generic.channels) {
 800cd6a:	d949      	bls.n	800ce00 <ds3231_counter_set_alarm+0xac>
		rc = -ENOTSUP;
		goto out;
	}

	k_sem_take(&data->lock, K_FOREVER);
 800cd6c:	f108 0918 	add.w	r9, r8, #24
 800cd70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd78:	4648      	mov	r0, r9
 800cd7a:	f007 fead 	bl	8014ad8 <k_sem_take.constprop.0.isra.0>

	if (rp->ctrl & (MAXIM_DS3231_ALARM1 << id)) {
 800cd7e:	f898 4012 	ldrb.w	r4, [r8, #18]
 800cd82:	40fc      	lsrs	r4, r7
 800cd84:	f014 0401 	ands.w	r4, r4, #1
 800cd88:	d137      	bne.n	800cdfa <ds3231_counter_set_alarm+0xa6>
		rc = -EBUSY;
		goto out_locked;
	}

	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800cd8a:	68eb      	ldr	r3, [r5, #12]
 800cd8c:	07db      	lsls	r3, r3, #31
 800cd8e:	d430      	bmi.n	800cdf2 <ds3231_counter_set_alarm+0x9e>
		rc = read_time(dev, &when);
 800cd90:	4669      	mov	r1, sp
 800cd92:	4630      	mov	r0, r6
 800cd94:	f008 f869 	bl	8014e6a <read_time>
		if (rc >= 0) {
 800cd98:	1e04      	subs	r4, r0, #0
 800cd9a:	db07      	blt.n	800cdac <ds3231_counter_set_alarm+0x58>
			when += alarm_cfg->ticks;
 800cd9c:	686a      	ldr	r2, [r5, #4]
 800cd9e:	9b00      	ldr	r3, [sp, #0]
 800cda0:	189b      	adds	r3, r3, r2
 800cda2:	9a01      	ldr	r2, [sp, #4]
 800cda4:	f142 0200 	adc.w	r2, r2, #0
 800cda8:	e9cd 3200 	strd	r3, r2, [sp]
		}
	} else {
		when = alarm_cfg->ticks;
	}

	struct maxim_ds3231_alarm alarm = {
 800cdac:	2200      	movs	r2, #0
 800cdae:	9203      	str	r2, [sp, #12]
 800cdb0:	4a15      	ldr	r2, [pc, #84]	; (800ce08 <ds3231_counter_set_alarm+0xb4>)
 800cdb2:	9204      	str	r2, [sp, #16]
 800cdb4:	68aa      	ldr	r2, [r5, #8]
		.time = (uint32_t)when,
 800cdb6:	9b00      	ldr	r3, [sp, #0]
	struct maxim_ds3231_alarm alarm = {
 800cdb8:	9205      	str	r2, [sp, #20]
		.handler = counter_alarm_forwarder,
		.user_data = alarm_cfg->user_data,
		.flags = MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE,
	};

	if (rc >= 0) {
 800cdba:	2c00      	cmp	r4, #0
	struct maxim_ds3231_alarm alarm = {
 800cdbc:	f04f 0280 	mov.w	r2, #128	; 0x80
 800cdc0:	9302      	str	r3, [sp, #8]
 800cdc2:	f88d 2018 	strb.w	r2, [sp, #24]
	if (rc >= 0) {
 800cdc6:	db0c      	blt.n	800cde2 <ds3231_counter_set_alarm+0x8e>
		data->counter_handler[id] = alarm_cfg->callback;
 800cdc8:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800cdcc:	682a      	ldr	r2, [r5, #0]
 800cdce:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
		.time = (uint32_t)when,
 800cdd2:	f8c8 30f8 	str.w	r3, [r8, #248]	; 0xf8
		data->counter_ticks[id] = alarm.time;
		rc = set_alarm(dev, id, &alarm);
 800cdd6:	aa02      	add	r2, sp, #8
 800cdd8:	4639      	mov	r1, r7
 800cdda:	4630      	mov	r0, r6
 800cddc:	f007 ff46 	bl	8014c6c <set_alarm>
 800cde0:	4604      	mov	r4, r0
	}

out_locked:
	k_sem_give(&data->lock);
 800cde2:	4648      	mov	r0, r9
 800cde4:	f007 fe39 	bl	8014a5a <k_sem_give>

out:
	/* Throw away information counter API disallows */
	if (rc >= 0) {
 800cde8:	ea04 70e4 	and.w	r0, r4, r4, asr #31
		rc = 0;
	}

	return rc;
}
 800cdec:	b009      	add	sp, #36	; 0x24
 800cdee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		when = alarm_cfg->ticks;
 800cdf2:	686b      	ldr	r3, [r5, #4]
 800cdf4:	e9cd 3400 	strd	r3, r4, [sp]
 800cdf8:	e7d8      	b.n	800cdac <ds3231_counter_set_alarm+0x58>
		rc = -EBUSY;
 800cdfa:	f06f 040f 	mvn.w	r4, #15
 800cdfe:	e7f0      	b.n	800cde2 <ds3231_counter_set_alarm+0x8e>
		rc = -ENOTSUP;
 800ce00:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800ce04:	e7f2      	b.n	800cdec <ds3231_counter_set_alarm+0x98>
 800ce06:	bf00      	nop
 800ce08:	08014a3d 	.word	0x08014a3d

0800ce0c <sync_worker>:
{
 800ce0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce10:	4604      	mov	r4, r0
 800ce12:	b091      	sub	sp, #68	; 0x44
	k_sem_take(&data->lock, K_FOREVER);
 800ce14:	f1a4 0670 	sub.w	r6, r4, #112	; 0x70
{
 800ce18:	af02      	add	r7, sp, #8
 *
 * @return the current value of the synchronization clock.
 */
static inline uint32_t maxim_ds3231_read_syncclock(const struct device *dev)
{
	return k_uptime_get_32();
 800ce1a:	f007 fe20 	bl	8014a5e <k_uptime_get_32>
	k_sem_take(&data->lock, K_FOREVER);
 800ce1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce26:	4630      	mov	r0, r6
 800ce28:	f007 fe56 	bl	8014ad8 <k_sem_take.constprop.0.isra.0>
	switch (data->sync_state) {
 800ce2c:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800ce30:	3b01      	subs	r3, #1
 800ce32:	2b03      	cmp	r3, #3
 800ce34:	d817      	bhi.n	800ce66 <sync_worker+0x5a>
 800ce36:	e8df f003 	tbb	[pc, r3]
 800ce3a:	1a02      	.short	0x1a02
 800ce3c:	8833      	.short	0x8833
		sync_prep_read(data->ds3231);
 800ce3e:	f854 4c88 	ldr.w	r4, [r4, #-136]
	int rc = sc_ctrl(dev, 0U, MAXIM_DS3231_REG_CTRL_INTCN
 800ce42:	2100      	movs	r1, #0
 800ce44:	221c      	movs	r2, #28
 800ce46:	4620      	mov	r0, r4
	struct ds3231_data *data = dev->data;
 800ce48:	6925      	ldr	r5, [r4, #16]
	int rc = sc_ctrl(dev, 0U, MAXIM_DS3231_REG_CTRL_INTCN
 800ce4a:	f007 fe57 	bl	8014afc <sc_ctrl>
	if (rc < 0) {
 800ce4e:	1e01      	subs	r1, r0, #0
 800ce50:	da03      	bge.n	800ce5a <sync_worker+0x4e>
		sync_finish(dev, rc);
 800ce52:	4620      	mov	r0, r4
	sync_finish(dev, 0);
 800ce54:	f007 fe9a 	bl	8014b8c <sync_finish>
}
 800ce58:	e005      	b.n	800ce66 <sync_worker+0x5a>
	data->sync_state = SYNCSM_FINISH_READ;
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
	validate_isw_monitoring(dev);
 800ce60:	4620      	mov	r0, r4
 800ce62:	f7ff feab 	bl	800cbbc <validate_isw_monitoring>
		k_sem_give(&data->lock);
 800ce66:	4630      	mov	r0, r6
 800ce68:	f007 fdf7 	bl	8014a5a <k_sem_give>
 800ce6c:	e0ce      	b.n	800d00c <sync_worker+0x200>
		sync_finish_read(data->ds3231);
 800ce6e:	f854 5c88 	ldr.w	r5, [r4, #-136]
	time_t time = 0;
 800ce72:	2200      	movs	r2, #0
 800ce74:	2300      	movs	r3, #0
	(void)read_time(dev, &time);
 800ce76:	f107 0110 	add.w	r1, r7, #16
 800ce7a:	4628      	mov	r0, r5
	struct ds3231_data *data = dev->data;
 800ce7c:	692c      	ldr	r4, [r5, #16]
	time_t time = 0;
 800ce7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	(void)read_time(dev, &time);
 800ce82:	f007 fff2 	bl	8014e6a <read_time>
	data->syncpoint.rtc.tv_sec = time;
 800ce86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	data->syncpoint.rtc.tv_nsec = 0;
 800ce8a:	2100      	movs	r1, #0
	data->syncpoint.rtc.tv_sec = time;
 800ce8c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
	data->syncpoint.syncclock = data->isw_syncclock;
 800ce90:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	data->syncpoint.rtc.tv_nsec = 0;
 800ce94:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	data->syncpoint.syncclock = data->isw_syncclock;
 800ce98:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	sync_finish(dev, 0);
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	e7d9      	b.n	800ce54 <sync_worker+0x48>
		sync_prep_write(data->ds3231);
 800cea0:	f854 3c88 	ldr.w	r3, [r4, #-136]
 800cea4:	691d      	ldr	r5, [r3, #16]
 800cea6:	f007 fdda 	bl	8014a5e <k_uptime_get_32>
	uint32_t offset = syncclock - data->new_sp.syncclock;
 800ceaa:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	uint32_t offset_ms = (offset % syncclock_Hz) * 1000U / syncclock_Hz;
 800ceae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	uint32_t offset = syncclock - data->new_sp.syncclock;
 800ceb2:	1ac3      	subs	r3, r0, r3
	uint32_t offset_ms = (offset % syncclock_Hz) * 1000U / syncclock_Hz;
 800ceb4:	fbb3 f4f2 	udiv	r4, r3, r2
 800ceb8:	fb02 3314 	mls	r3, r2, r4, r3
 800cebc:	4353      	muls	r3, r2
 800cebe:	fbb3 f3f2 	udiv	r3, r3, r2
	time_t when = data->new_sp.rtc.tv_sec;
 800cec2:	e9d5 2130 	ldrd	r2, r1, [r5, #192]	; 0xc0
 800cec6:	4680      	mov	r8, r0
	when += offset_s;
 800cec8:	18a4      	adds	r4, r4, r2
	offset_ms += data->new_sp.rtc.tv_nsec / NSEC_PER_USEC / USEC_PER_MSEC;
 800ceca:	4852      	ldr	r0, [pc, #328]	; (800d014 <sync_worker+0x208>)
 800cecc:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
 800ced0:	fbb2 f2f0 	udiv	r2, r2, r0
 800ced4:	4413      	add	r3, r2
	when += offset_s;
 800ced6:	f141 0100 	adc.w	r1, r1, #0
	if (offset_ms >= MSEC_PER_SEC) {
 800ceda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cede:	d330      	bcc.n	800cf42 <sync_worker+0x136>
		offset_ms -= MSEC_PER_SEC;
 800cee0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
	uint32_t rem_ms = MSEC_PER_SEC - offset_ms;
 800cee4:	f5c3 797a 	rsb	r9, r3, #1000	; 0x3e8
	if (rem_ms < 5) {
 800cee8:	f1b9 0f04 	cmp.w	r9, #4
 800ceec:	d804      	bhi.n	800cef8 <sync_worker+0xec>
		when += 1;
 800ceee:	3401      	adds	r4, #1
 800cef0:	f141 0100 	adc.w	r1, r1, #0
		rem_ms += MSEC_PER_SEC;
 800cef4:	f5c3 69fa 	rsb	r9, r3, #2000	; 0x7d0
	data->new_sp.rtc.tv_nsec = 0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	data->sync_state = SYNCSM_FINISH_WRITE;
 800cefe:	2304      	movs	r3, #4
 800cf00:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
 800cf04:	230a      	movs	r3, #10
	data->new_sp.rtc.tv_sec = when;
 800cf06:	e9c5 4130 	strd	r4, r1, [r5, #192]	; 0xc0
 800cf0a:	fba9 2303 	umull	r2, r3, r9, r3
	z_impl_k_timer_start(timer, duration, period);
 800cf0e:	2100      	movs	r1, #0
 800cf10:	2000      	movs	r0, #0
 800cf12:	e9cd 0100 	strd	r0, r1, [sp]
 800cf16:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800cf1a:	f003 fea5 	bl	8010c68 <z_impl_k_timer_start>
	LOG_INF("sync %u in %u ms after %u", (uint32_t)when, rem_ms, syncclock);
 800cf1e:	466d      	mov	r5, sp
 800cf20:	4b3d      	ldr	r3, [pc, #244]	; (800d018 <sync_worker+0x20c>)
 800cf22:	483e      	ldr	r0, [pc, #248]	; (800d01c <sync_worker+0x210>)
 800cf24:	b088      	sub	sp, #32
 800cf26:	aa02      	add	r2, sp, #8
 800cf28:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800cf2c:	2305      	movs	r3, #5
 800cf2e:	e9c2 9806 	strd	r9, r8, [r2, #24]
 800cf32:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 800cf36:	f842 3f0c 	str.w	r3, [r2, #12]!
 800cf3a:	f007 fdb2 	bl	8014aa2 <z_log_msg2_static_create.constprop.0>
 800cf3e:	46ad      	mov	sp, r5
}
 800cf40:	e791      	b.n	800ce66 <sync_worker+0x5a>
		when += 1;
 800cf42:	3401      	adds	r4, #1
 800cf44:	f141 0100 	adc.w	r1, r1, #0
 800cf48:	e7cc      	b.n	800cee4 <sync_worker+0xd8>
		sync_finish_write(data->ds3231);
 800cf4a:	f854 4c88 	ldr.w	r4, [r4, #-136]
	struct ds3231_data *data = dev->data;
 800cf4e:	6926      	ldr	r6, [r4, #16]
	const struct ds3231_config *cfg = dev->config;
 800cf50:	6865      	ldr	r5, [r4, #4]
	time_t when = data->new_sp.rtc.tv_sec;
 800cf52:	e9d6 2330 	ldrd	r2, r3, [r6, #192]	; 0xc0
	(void)gmtime_r(&when, &tm);
 800cf56:	f107 0110 	add.w	r1, r7, #16
	time_t when = data->new_sp.rtc.tv_sec;
 800cf5a:	e9c7 2300 	strd	r2, r3, [r7]
	(void)gmtime_r(&when, &tm);
 800cf5e:	4638      	mov	r0, r7
	*bp++ = offsetof(struct register_map, sec);
 800cf60:	2300      	movs	r3, #0
 800cf62:	723b      	strb	r3, [r7, #8]
	(void)gmtime_r(&when, &tm);
 800cf64:	f003 ff94 	bl	8010e90 <gmtime_r>
	val = bin2bcd(tm.tm_sec);
 800cf68:	7c38      	ldrb	r0, [r7, #16]
 800cf6a:	f007 fd46 	bl	80149fa <bin2bcd>
	*bp++ = val;
 800cf6e:	7278      	strb	r0, [r7, #9]
	val = bin2bcd(tm.tm_min);
 800cf70:	7d38      	ldrb	r0, [r7, #20]
 800cf72:	f007 fd42 	bl	80149fa <bin2bcd>
	*bp++ = val;
 800cf76:	72b8      	strb	r0, [r7, #10]
	val = bin2bcd(tm.tm_hour);
 800cf78:	7e38      	ldrb	r0, [r7, #24]
 800cf7a:	f007 fd3e 	bl	80149fa <bin2bcd>
	*bp++ = 1 + tm.tm_wday;
 800cf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
	*bp++ = val;
 800cf80:	72f8      	strb	r0, [r7, #11]
	*bp++ = 1 + tm.tm_wday;
 800cf82:	3301      	adds	r3, #1
	val = bin2bcd(tm.tm_mday);
 800cf84:	7f38      	ldrb	r0, [r7, #28]
	*bp++ = 1 + tm.tm_wday;
 800cf86:	733b      	strb	r3, [r7, #12]
	val = bin2bcd(tm.tm_mday);
 800cf88:	f007 fd37 	bl	80149fa <bin2bcd>
	*bp++ = val;
 800cf8c:	7378      	strb	r0, [r7, #13]
	tm.tm_mon += 1;
 800cf8e:	6a38      	ldr	r0, [r7, #32]
 800cf90:	3001      	adds	r0, #1
 800cf92:	6238      	str	r0, [r7, #32]
	val = bin2bcd(tm.tm_mon);
 800cf94:	b2c0      	uxtb	r0, r0
 800cf96:	f007 fd30 	bl	80149fa <bin2bcd>
	if (tm.tm_year >= 100) {
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	2b63      	cmp	r3, #99	; 0x63
		val |= REG_MONCEN_CENTURY;
 800cf9e:	bfc1      	itttt	gt
 800cfa0:	f060 007f 	orngt	r0, r0, #127	; 0x7f
		tm.tm_year -= 100;
 800cfa4:	3b64      	subgt	r3, #100	; 0x64
		val |= REG_MONCEN_CENTURY;
 800cfa6:	b2c0      	uxtbgt	r0, r0
		tm.tm_year -= 100;
 800cfa8:	627b      	strgt	r3, [r7, #36]	; 0x24
	*bp++ = val;
 800cfaa:	73b8      	strb	r0, [r7, #14]
	val = bin2bcd(tm.tm_year);
 800cfac:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800cfb0:	f007 fd23 	bl	80149fa <bin2bcd>
	*bp++ = val;
 800cfb4:	73f8      	strb	r0, [r7, #15]
 800cfb6:	f007 fd52 	bl	8014a5e <k_uptime_get_32>
	int rc = i2c_write_dt(&cfg->bus, buf, bp - buf);
 800cfba:	2208      	movs	r2, #8
 800cfbc:	4680      	mov	r8, r0
 800cfbe:	18b9      	adds	r1, r7, r2
 800cfc0:	f105 000c 	add.w	r0, r5, #12
 800cfc4:	f007 fd8a 	bl	8014adc <i2c_write_dt>
	if (rc >= 0) {
 800cfc8:	1e05      	subs	r5, r0, #0
 800cfca:	db1b      	blt.n	800d004 <sync_worker+0x1f8>
		data->syncpoint.rtc.tv_sec = when;
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
		data->syncpoint.rtc.tv_nsec = 0;
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f8c6 20b0 	str.w	r2, [r6, #176]	; 0xb0
		data->syncpoint.syncclock = syncclock;
 800cfde:	f8c6 80b8 	str.w	r8, [r6, #184]	; 0xb8
		LOG_INF("sync %u at %u", (uint32_t)when, syncclock);
 800cfe2:	490f      	ldr	r1, [pc, #60]	; (800d020 <sync_worker+0x214>)
 800cfe4:	480d      	ldr	r0, [pc, #52]	; (800d01c <sync_worker+0x210>)
 800cfe6:	466e      	mov	r6, sp
 800cfe8:	b088      	sub	sp, #32
 800cfea:	aa02      	add	r2, sp, #8
 800cfec:	e9c2 1304 	strd	r1, r3, [r2, #16]
 800cff0:	2304      	movs	r3, #4
 800cff2:	f8c2 8018 	str.w	r8, [r2, #24]
 800cff6:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 800cffa:	f842 3f0c 	str.w	r3, [r2, #12]!
 800cffe:	f007 fd50 	bl	8014aa2 <z_log_msg2_static_create.constprop.0>
 800d002:	46b5      	mov	sp, r6
	sync_finish(dev, rc);
 800d004:	4629      	mov	r1, r5
 800d006:	4620      	mov	r0, r4
 800d008:	f007 fdc0 	bl	8014b8c <sync_finish>
}
 800d00c:	373c      	adds	r7, #60	; 0x3c
 800d00e:	46bd      	mov	sp, r7
 800d010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d014:	000f4240 	.word	0x000f4240
 800d018:	0801a480 	.word	0x0801a480
 800d01c:	08018060 	.word	0x08018060
 800d020:	0801a49a 	.word	0x0801a49a

0800d024 <ds3231_init>:
{
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct ds3231_data *data = dev->data;
 800d028:	6905      	ldr	r5, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 800d02a:	6847      	ldr	r7, [r0, #4]
{
 800d02c:	b086      	sub	sp, #24
 800d02e:	4606      	mov	r6, r0
	k_sem_init(&data->lock, 0, 1);
 800d030:	f105 0818 	add.w	r8, r5, #24
	return z_impl_k_sem_init(sem, initial_count, limit);
 800d034:	2201      	movs	r2, #1
 800d036:	2100      	movs	r1, #0
 800d038:	4640      	mov	r0, r8
 800d03a:	f00a f8ea 	bl	8017212 <z_impl_k_sem_init>
	if (!device_is_ready(cfg->bus.bus)) {
 800d03e:	68f8      	ldr	r0, [r7, #12]
	data->ds3231 = dev;
 800d040:	602e      	str	r6, [r5, #0]
 800d042:	f00a f86e 	bl	8017122 <z_device_is_ready>
	if (!device_is_ready(cfg->bus.bus)) {
 800d046:	b998      	cbnz	r0, 800d070 <ds3231_init+0x4c>
		LOG_ERR("I2C device not ready");
 800d048:	4b4d      	ldr	r3, [pc, #308]	; (800d180 <ds3231_init+0x15c>)
			LOG_ERR("INTn/SQW GPIO device not ready");
 800d04a:	9304      	str	r3, [sp, #16]
 800d04c:	484d      	ldr	r0, [pc, #308]	; (800d184 <ds3231_init+0x160>)
 800d04e:	2302      	movs	r3, #2
 800d050:	aa03      	add	r2, sp, #12
 800d052:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			rc = -ENODEV;
 800d056:	f06f 0412 	mvn.w	r4, #18
			LOG_ERR("INTn/SQW GPIO device not ready");
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	f007 fd21 	bl	8014aa2 <z_log_msg2_static_create.constprop.0>
	k_sem_give(&data->lock);
 800d060:	4640      	mov	r0, r8
 800d062:	f007 fcfa 	bl	8014a5a <k_sem_give>
}
 800d066:	ea04 70e4 	and.w	r0, r4, r4, asr #31
 800d06a:	b006      	add	sp, #24
 800d06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t addr = 0;
 800d070:	f04f 0a00 	mov.w	sl, #0
	struct ds3231_data *data = dev->data;
 800d074:	f8d6 9010 	ldr.w	r9, [r6, #16]
	const struct ds3231_config *cfg = dev->config;
 800d078:	6874      	ldr	r4, [r6, #4]
	uint8_t addr = 0;
 800d07a:	f88d a000 	strb.w	sl, [sp]
 800d07e:	f007 fcee 	bl	8014a5e <k_uptime_get_32>
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &data->registers,
 800d082:	2313      	movs	r3, #19
	data->syncclock_base = maxim_ds3231_read_syncclock(dev);
 800d084:	f8c9 00e8 	str.w	r0, [r9, #232]	; 0xe8
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &data->registers,
 800d088:	f109 0204 	add.w	r2, r9, #4
 800d08c:	4669      	mov	r1, sp
 800d08e:	f104 000c 	add.w	r0, r4, #12
 800d092:	f007 fd09 	bl	8014aa8 <i2c_write_read_dt.constprop.0>
 800d096:	4604      	mov	r4, r0
 800d098:	f007 fce1 	bl	8014a5e <k_uptime_get_32>
	if (rc < 0) {
 800d09c:	4554      	cmp	r4, sl
 800d09e:	db0d      	blt.n	800d0bc <ds3231_init+0x98>
	data->rtc_base = decode_rtc(data);
 800d0a0:	4648      	mov	r0, r9
 800d0a2:	f007 fea8 	bl	8014df6 <decode_rtc>
	rc = sc_ctrl(dev,
 800d0a6:	221b      	movs	r2, #27
	data->rtc_base = decode_rtc(data);
 800d0a8:	e9c9 0a38 	strd	r0, sl, [r9, #224]	; 0xe0
	rc = sc_ctrl(dev,
 800d0ac:	2104      	movs	r1, #4
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	f007 fd24 	bl	8014afc <sc_ctrl>
	if (rc < 0) {
 800d0b4:	1e04      	subs	r4, r0, #0
 800d0b6:	da0d      	bge.n	800d0d4 <ds3231_init+0xb0>
		LOG_WRN("Failed to reset config: %d", rc);
 800d0b8:	4b33      	ldr	r3, [pc, #204]	; (800d188 <ds3231_init+0x164>)
 800d0ba:	e000      	b.n	800d0be <ds3231_init+0x9a>
		LOG_WRN("Failed to fetch registers: %d", rc);
 800d0bc:	4b33      	ldr	r3, [pc, #204]	; (800d18c <ds3231_init+0x168>)
		LOG_WRN("Failed to reset config: %d", rc);
 800d0be:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d0c2:	2303      	movs	r3, #3
 800d0c4:	9303      	str	r3, [sp, #12]
 800d0c6:	aa03      	add	r2, sp, #12
 800d0c8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
				LOG_ERR("Failed to configure ISW callback: %d",
 800d0cc:	482d      	ldr	r0, [pc, #180]	; (800d184 <ds3231_init+0x160>)
 800d0ce:	f007 fce8 	bl	8014aa2 <z_log_msg2_static_create.constprop.0>
 800d0d2:	e7c5      	b.n	800d060 <ds3231_init+0x3c>
	if (cfg->isw_gpios.port != NULL) {
 800d0d4:	6978      	ldr	r0, [r7, #20]
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d0c2      	beq.n	800d060 <ds3231_init+0x3c>
 800d0da:	f00a f822 	bl	8017122 <z_device_is_ready>
		if (!device_is_ready(cfg->isw_gpios.port)) {
 800d0de:	b908      	cbnz	r0, 800d0e4 <ds3231_init+0xc0>
			LOG_ERR("INTn/SQW GPIO device not ready");
 800d0e0:	4b2b      	ldr	r3, [pc, #172]	; (800d190 <ds3231_init+0x16c>)
 800d0e2:	e7b2      	b.n	800d04a <ds3231_init+0x26>
		k_timer_init(&data->sync_timer, sync_timer_handler, NULL);
 800d0e4:	4652      	mov	r2, sl
 800d0e6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800d0ea:	492a      	ldr	r1, [pc, #168]	; (800d194 <ds3231_init+0x170>)
 800d0ec:	f00a fa21 	bl	8017532 <k_timer_init>
		k_work_init(&data->alarm_work, alarm_worker);
 800d0f0:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800d0f4:	4928      	ldr	r1, [pc, #160]	; (800d198 <ds3231_init+0x174>)
 800d0f6:	f00a f8ae 	bl	8017256 <k_work_init>
		k_work_init(&data->sqw_work, sqw_worker);
 800d0fa:	f105 0078 	add.w	r0, r5, #120	; 0x78
 800d0fe:	4927      	ldr	r1, [pc, #156]	; (800d19c <ds3231_init+0x178>)
 800d100:	f00a f8a9 	bl	8017256 <k_work_init>
		k_work_init(&data->sync_work, sync_worker);
 800d104:	f105 0088 	add.w	r0, r5, #136	; 0x88
 800d108:	4925      	ldr	r1, [pc, #148]	; (800d1a0 <ds3231_init+0x17c>)
 800d10a:	f00a f8a4 	bl	8017256 <k_work_init>
				   BIT(cfg->isw_gpios.pin));
 800d10e:	7e39      	ldrb	r1, [r7, #24]
	return gpio_pin_configure(spec->port,
 800d110:	6978      	ldr	r0, [r7, #20]
 800d112:	2301      	movs	r3, #1
 800d114:	fa03 f401 	lsl.w	r4, r3, r1
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 800d118:	4b22      	ldr	r3, [pc, #136]	; (800d1a4 <ds3231_init+0x180>)
	callback->pin_mask = pin_mask;
 800d11a:	e9c5 3427 	strd	r3, r4, [r5, #156]	; 0x9c
				  spec->dt_flags | extra_flags);
 800d11e:	8b7b      	ldrh	r3, [r7, #26]
	return gpio_pin_configure(spec->port,
 800d120:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
 800d124:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
 800d126:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800d12a:	f013 0f01 	tst.w	r3, #1
 800d12e:	6833      	ldr	r3, [r6, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800d130:	bf14      	ite	ne
 800d132:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800d134:	43a3      	biceq	r3, r4
 800d136:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 800d138:	f8dc 3000 	ldr.w	r3, [ip]
 800d13c:	4798      	blx	r3
		if (rc >= 0) {
 800d13e:	1e04      	subs	r4, r0, #0
 800d140:	db8e      	blt.n	800d060 <ds3231_init+0x3c>
			rc = gpio_pin_interrupt_configure_dt(&cfg->isw_gpios,
 800d142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d146:	f107 0014 	add.w	r0, r7, #20
 800d14a:	f007 fc5f 	bl	8014a0c <gpio_pin_interrupt_configure_dt>
		if (rc >= 0) {
 800d14e:	1e04      	subs	r4, r0, #0
 800d150:	db86      	blt.n	800d060 <ds3231_init+0x3c>
			rc = gpio_add_callback(cfg->isw_gpios.port,
 800d152:	6978      	ldr	r0, [r7, #20]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 800d154:	6883      	ldr	r3, [r0, #8]
 800d156:	69db      	ldr	r3, [r3, #28]
 800d158:	b17b      	cbz	r3, 800d17a <ds3231_init+0x156>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 800d15a:	2201      	movs	r2, #1
 800d15c:	f105 0198 	add.w	r1, r5, #152	; 0x98
 800d160:	4798      	blx	r3
			if (rc < 0) {
 800d162:	1e04      	subs	r4, r0, #0
 800d164:	f6bf af7c 	bge.w	800d060 <ds3231_init+0x3c>
				LOG_ERR("Failed to configure ISW callback: %d",
 800d168:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <ds3231_init+0x184>)
 800d16a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d16e:	2303      	movs	r3, #3
 800d170:	9303      	str	r3, [sp, #12]
 800d172:	aa03      	add	r2, sp, #12
 800d174:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800d178:	e7a8      	b.n	800d0cc <ds3231_init+0xa8>
		return -ENOTSUP;
 800d17a:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800d17e:	e7f3      	b.n	800d168 <ds3231_init+0x144>
 800d180:	0801a4a8 	.word	0x0801a4a8
 800d184:	08018060 	.word	0x08018060
 800d188:	0801a4db 	.word	0x0801a4db
 800d18c:	0801a4bd 	.word	0x0801a4bd
 800d190:	0801a4f6 	.word	0x0801a4f6
 800d194:	0800cb8d 	.word	0x0800cb8d
 800d198:	0800cc5d 	.word	0x0800cc5d
 800d19c:	08014a6f 	.word	0x08014a6f
 800d1a0:	0800ce0d 	.word	0x0800ce0d
 800d1a4:	08014a73 	.word	0x08014a73
 800d1a8:	0801a515 	.word	0x0801a515

0800d1ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800d1ac:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800d1ae:	4b08      	ldr	r3, [pc, #32]	; (800d1d0 <uart_console_init+0x24>)
 800d1b0:	4808      	ldr	r0, [pc, #32]	; (800d1d4 <uart_console_init+0x28>)
 800d1b2:	6018      	str	r0, [r3, #0]
 800d1b4:	f009 ffb5 	bl	8017122 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 800d1b8:	b138      	cbz	r0, 800d1ca <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 800d1ba:	4807      	ldr	r0, [pc, #28]	; (800d1d8 <uart_console_init+0x2c>)
 800d1bc:	f7f8 f8f0 	bl	80053a0 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800d1c0:	4805      	ldr	r0, [pc, #20]	; (800d1d8 <uart_console_init+0x2c>)
 800d1c2:	f7f5 ff35 	bl	8003030 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 800d1c6:	2000      	movs	r0, #0
}
 800d1c8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800d1ca:	f06f 0012 	mvn.w	r0, #18
 800d1ce:	e7fb      	b.n	800d1c8 <uart_console_init+0x1c>
 800d1d0:	2000211c 	.word	0x2000211c
 800d1d4:	08017d48 	.word	0x08017d48
 800d1d8:	0800d1dd 	.word	0x0800d1dd

0800d1dc <console_out>:
	if ('\n' == c) {
 800d1dc:	280a      	cmp	r0, #10
{
 800d1de:	b538      	push	{r3, r4, r5, lr}
 800d1e0:	4d07      	ldr	r5, [pc, #28]	; (800d200 <console_out+0x24>)
 800d1e2:	4604      	mov	r4, r0
	if ('\n' == c) {
 800d1e4:	d104      	bne.n	800d1f0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 800d1e6:	6828      	ldr	r0, [r5, #0]
 800d1e8:	6883      	ldr	r3, [r0, #8]
 800d1ea:	210d      	movs	r1, #13
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 800d1f0:	6828      	ldr	r0, [r5, #0]
 800d1f2:	6883      	ldr	r3, [r0, #8]
 800d1f4:	b2e1      	uxtb	r1, r4
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	4798      	blx	r3
}
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	bd38      	pop	{r3, r4, r5, pc}
 800d1fe:	bf00      	nop
 800d200:	2000211c 	.word	0x2000211c

0800d204 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800d204:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 800d206:	6903      	ldr	r3, [r0, #16]
 800d208:	6058      	str	r0, [r3, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 800d20a:	6845      	ldr	r5, [r0, #4]
 800d20c:	350c      	adds	r5, #12
 800d20e:	4c08      	ldr	r4, [pc, #32]	; (800d230 <gpio_stm32_init+0x2c>)
 800d210:	4620      	mov	r0, r4
 800d212:	f009 ff86 	bl	8017122 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800d216:	b138      	cbz	r0, 800d228 <gpio_stm32_init+0x24>
	return api->on(dev, sys);
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	4629      	mov	r1, r5
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4620      	mov	r0, r4
 800d220:	4798      	blx	r3

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800d222:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 800d226:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 800d228:	f06f 0012 	mvn.w	r0, #18
 800d22c:	e7f9      	b.n	800d222 <gpio_stm32_init+0x1e>
 800d22e:	bf00      	nop
 800d230:	08017cb8 	.word	0x08017cb8

0800d234 <gpio_stm32_pin_interrupt_configure>:
{
 800d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d236:	460c      	mov	r4, r1
 800d238:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 800d23a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 800d23e:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800d240:	6902      	ldr	r2, [r0, #16]
{
 800d242:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800d244:	d124      	bne.n	800d290 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800d246:	f004 0303 	and.w	r3, r4, #3
 800d24a:	3304      	adds	r3, #4
 800d24c:	009a      	lsls	r2, r3, #2
 800d24e:	230f      	movs	r3, #15
 800d250:	4093      	lsls	r3, r2
 800d252:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT)) >> POSITION_VAL(Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT));
 800d256:	f003 0203 	and.w	r2, r3, #3
 800d25a:	492f      	ldr	r1, [pc, #188]	; (800d318 <gpio_stm32_pin_interrupt_configure+0xe4>)
 800d25c:	3202      	adds	r2, #2
 800d25e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d262:	0c19      	lsrs	r1, r3, #16
 800d264:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d268:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800d26c:	fab2 f282 	clz	r2, r2
 800d270:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	429a      	cmp	r2, r3
 800d276:	d109      	bne.n	800d28c <gpio_stm32_pin_interrupt_configure+0x58>
			stm32_exti_disable(pin);
 800d278:	4620      	mov	r0, r4
 800d27a:	f7fe fedf 	bl	800c03c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800d27e:	4620      	mov	r0, r4
 800d280:	f7fe ff32 	bl	800c0e8 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800d284:	2100      	movs	r1, #0
 800d286:	4620      	mov	r0, r4
 800d288:	f7fe fee8 	bl	800c05c <stm32_exti_trigger>
	int err = 0;
 800d28c:	2500      	movs	r5, #0
 800d28e:	e037      	b.n	800d300 <gpio_stm32_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
 800d290:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800d294:	d03a      	beq.n	800d30c <gpio_stm32_pin_interrupt_configure+0xd8>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800d296:	4921      	ldr	r1, [pc, #132]	; (800d31c <gpio_stm32_pin_interrupt_configure+0xe8>)
 800d298:	4620      	mov	r0, r4
 800d29a:	f7fe ff13 	bl	800c0c4 <stm32_exti_set_callback>
 800d29e:	4605      	mov	r5, r0
 800d2a0:	bbb8      	cbnz	r0, 800d312 <gpio_stm32_pin_interrupt_configure+0xde>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800d2a2:	f004 0303 	and.w	r3, r4, #3
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	009a      	lsls	r2, r3, #2
 800d2aa:	230f      	movs	r3, #15
 800d2ac:	4093      	lsls	r3, r2
 800d2ae:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT), (Port << ((POSITION_VAL((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT))) & 0x0000000FUL)));
 800d2b2:	f003 0203 	and.w	r2, r3, #3
 800d2b6:	0092      	lsls	r2, r2, #2
 800d2b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800d2bc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	LL_SYSCFG_SetEXTISource(port, line);
 800d2c0:	68b8      	ldr	r0, [r7, #8]
 800d2c2:	6897      	ldr	r7, [r2, #8]
 800d2c4:	0c19      	lsrs	r1, r3, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2c6:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 800d2ca:	fab1 f181 	clz	r1, r1
 800d2ce:	f001 010f 	and.w	r1, r1, #15
 800d2d2:	ea27 4313 	bic.w	r3, r7, r3, lsr #16
 800d2d6:	fa00 f101 	lsl.w	r1, r0, r1
 800d2da:	430b      	orrs	r3, r1
	switch (trig) {
 800d2dc:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 800d2e0:	6093      	str	r3, [r2, #8]
 800d2e2:	d00f      	beq.n	800d304 <gpio_stm32_pin_interrupt_configure+0xd0>
 800d2e4:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 800d2e8:	d00e      	beq.n	800d308 <gpio_stm32_pin_interrupt_configure+0xd4>
 800d2ea:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800d2ee:	bf14      	ite	ne
 800d2f0:	2100      	movne	r1, #0
 800d2f2:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f7fe feb1 	bl	800c05c <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f7fe fe8e 	bl	800c01c <stm32_exti_enable>
}
 800d300:	4628      	mov	r0, r5
 800d302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 800d304:	2101      	movs	r1, #1
 800d306:	e7f5      	b.n	800d2f4 <gpio_stm32_pin_interrupt_configure+0xc0>
		edge = STM32_EXTI_TRIG_BOTH;
 800d308:	2103      	movs	r1, #3
 800d30a:	e7f3      	b.n	800d2f4 <gpio_stm32_pin_interrupt_configure+0xc0>
		err = -ENOTSUP;
 800d30c:	f06f 0585 	mvn.w	r5, #133	; 0x85
 800d310:	e7f6      	b.n	800d300 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -EBUSY;
 800d312:	f06f 050f 	mvn.w	r5, #15
	return err;
 800d316:	e7f3      	b.n	800d300 <gpio_stm32_pin_interrupt_configure+0xcc>
 800d318:	40010000 	.word	0x40010000
 800d31c:	080150e7 	.word	0x080150e7

0800d320 <msg_init>:
#define STM32_I2C_TRANSFER_TIMEOUT_MSEC  500

static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
			    uint8_t *next_msg_flags, uint16_t slave,
			    uint32_t transfer)
{
 800d320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d322:	4606      	mov	r6, r0
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
	I2C_TypeDef *i2c = cfg->i2c;
 800d324:	6840      	ldr	r0, [r0, #4]
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800d326:	684d      	ldr	r5, [r1, #4]
 800d328:	68c4      	ldr	r4, [r0, #12]
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800d32a:	6860      	ldr	r0, [r4, #4]
 800d32c:	01c0      	lsls	r0, r0, #7
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800d32e:	ea4f 4505 	mov.w	r5, r5, lsl #16
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800d332:	d505      	bpl.n	800d340 <msg_init+0x20>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800d334:	6863      	ldr	r3, [r4, #4]
 800d336:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800d33a:	432b      	orrs	r3, r5
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800d33c:	6063      	str	r3, [r4, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 800d33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 800d340:	6930      	ldr	r0, [r6, #16]
 800d342:	4f1d      	ldr	r7, [pc, #116]	; (800d3b8 <msg_init+0x98>)
 800d344:	6b00      	ldr	r0, [r0, #48]	; 0x30
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800d346:	6866      	ldr	r6, [r4, #4]
 800d348:	f010 0f01 	tst.w	r0, #1
 800d34c:	d028      	beq.n	800d3a0 <msg_init+0x80>
 800d34e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 800d352:	6066      	str	r6, [r4, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800d354:	6860      	ldr	r0, [r4, #4]
 800d356:	4038      	ands	r0, r7
 800d358:	4318      	orrs	r0, r3
 800d35a:	6060      	str	r0, [r4, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 800d35c:	7a0b      	ldrb	r3, [r1, #8]
 800d35e:	0799      	lsls	r1, r3, #30
 800d360:	d426      	bmi.n	800d3b0 <msg_init+0x90>
 800d362:	b32a      	cbz	r2, 800d3b0 <msg_init+0x90>
 800d364:	7813      	ldrb	r3, [r2, #0]
 800d366:	075b      	lsls	r3, r3, #29
 800d368:	d422      	bmi.n	800d3b0 <msg_init+0x90>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800d36a:	6863      	ldr	r3, [r4, #4]
 800d36c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800d370:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800d372:	6863      	ldr	r3, [r4, #4]
 800d374:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d378:	6063      	str	r3, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800d37a:	6862      	ldr	r2, [r4, #4]
 800d37c:	9b05      	ldr	r3, [sp, #20]
 800d37e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d382:	431a      	orrs	r2, r3
 800d384:	6062      	str	r2, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800d386:	6863      	ldr	r3, [r4, #4]
 800d388:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800d38c:	432b      	orrs	r3, r5
 800d38e:	6063      	str	r3, [r4, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	f043 0301 	orr.w	r3, r3, #1
 800d396:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800d398:	6863      	ldr	r3, [r4, #4]
 800d39a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d39e:	e7cd      	b.n	800d33c <msg_init+0x1c>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800d3a0:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 800d3a4:	6066      	str	r6, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800d3a6:	6860      	ldr	r0, [r4, #4]
 800d3a8:	4038      	ands	r0, r7
 800d3aa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d3ae:	e7d4      	b.n	800d35a <msg_init+0x3a>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800d3b0:	6863      	ldr	r3, [r4, #4]
 800d3b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3b6:	e7db      	b.n	800d370 <msg_init+0x50>
 800d3b8:	fffffc00 	.word	0xfffffc00

0800d3bc <stm32_i2c_configure_timing>:
	return msg_done(dev, msg->flags);
}
#endif

int stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 800d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 800d3c0:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800d3c2:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800d3c6:	f8d7 800c 	ldr.w	r8, [r7, #12]
{
 800d3ca:	b087      	sub	sp, #28
 800d3cc:	460c      	mov	r4, r1
	uint32_t i2c_h_min_time, i2c_l_min_time;
	uint32_t presc = 1U;
	uint32_t timing = 0U;

	/*  Look for an adequate preset timing value */
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 800d3ce:	2500      	movs	r5, #0
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	42ab      	cmp	r3, r5
 800d3d4:	d83d      	bhi.n	800d452 <stm32_i2c_configure_timing+0x96>
			return 0;
		}
	}

	/* No preset timing was provided, let's dynamically configure */
	switch (I2C_SPEED_GET(data->dev_config)) {
 800d3d6:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800d3da:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d07c      	beq.n	800d4dc <stm32_i2c_configure_timing+0x120>
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	f040 8086 	bne.w	800d4f4 <stm32_i2c_configure_timing+0x138>
 800d3e8:	f240 5014 	movw	r0, #1300	; 0x514
 800d3ec:	f44f 7616 	mov.w	r6, #600	; 0x258
 800d3f0:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800d3f4:	f240 1777 	movw	r7, #375	; 0x177
	}

	/* Calculate period until prescaler matches */
	do {
		uint32_t t_presc = clock / presc;
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800d3f8:	f8df c100 	ldr.w	ip, [pc, #256]	; 800d4fc <stm32_i2c_configure_timing+0x140>
	switch (I2C_SPEED_GET(data->dev_config)) {
 800d3fc:	2102      	movs	r1, #2
		uint32_t t_presc = clock / presc;
 800d3fe:	1e4b      	subs	r3, r1, #1
 800d400:	fbb4 f3f3 	udiv	r3, r4, r3
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800d404:	fbbc f3f3 	udiv	r3, ip, r3
		uint32_t sclh = i2c_h_min_time / ns_presc;
 800d408:	fbb6 fef3 	udiv	lr, r6, r3
		uint32_t scll = i2c_l_min_time / ns_presc;
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
		uint32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800d40c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800d410:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800d414:	d86b      	bhi.n	800d4ee <stm32_i2c_configure_timing+0x132>
		uint32_t scll = i2c_l_min_time / ns_presc;
 800d416:	fbb0 f9f3 	udiv	r9, r0, r3
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800d41a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d41e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d422:	d864      	bhi.n	800d4ee <stm32_i2c_configure_timing+0x132>
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
 800d424:	fbb7 f2f3 	udiv	r2, r7, r3
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 800d428:	2a0f      	cmp	r2, #15
 800d42a:	d860      	bhi.n	800d4ee <stm32_i2c_configure_timing+0x132>
		uint32_t scldel = i2c_setup_time_min / ns_presc;
 800d42c:	fbb5 f3f3 	udiv	r3, r5, r3
		if (sdadel > 15 || (scldel - 1) > 15) {
 800d430:	3b01      	subs	r3, #1
 800d432:	2b0f      	cmp	r3, #15
 800d434:	d85b      	bhi.n	800d4ee <stm32_i2c_configure_timing+0x132>
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 800d436:	0412      	lsls	r2, r2, #16
 800d438:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 800d43c:	ea43 0309 	orr.w	r3, r3, r9
 800d440:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800d444:	3902      	subs	r1, #2
 800d446:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800d44a:	f8c8 3010 	str.w	r3, [r8, #16]
		return -EINVAL;
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
 800d44e:	2000      	movs	r0, #0
 800d450:	e02c      	b.n	800d4ac <stm32_i2c_configure_timing+0xf0>
		const struct i2c_config_timing *preset = &cfg->timings[i];
 800d452:	f8d7 b018 	ldr.w	fp, [r7, #24]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 800d456:	4a2a      	ldr	r2, [pc, #168]	; (800d500 <stm32_i2c_configure_timing+0x144>)
 800d458:	260c      	movs	r6, #12
 800d45a:	436e      	muls	r6, r5
 800d45c:	eb0b 0a06 	add.w	sl, fp, r6
		uint32_t speed = i2c_map_dt_bitrate(preset->i2c_speed);
 800d460:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d464:	4293      	cmp	r3, r2
 800d466:	d02f      	beq.n	800d4c8 <stm32_i2c_configure_timing+0x10c>
 800d468:	d823      	bhi.n	800d4b2 <stm32_i2c_configure_timing+0xf6>
 800d46a:	4a26      	ldr	r2, [pc, #152]	; (800d504 <stm32_i2c_configure_timing+0x148>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d02d      	beq.n	800d4cc <stm32_i2c_configure_timing+0x110>
 800d470:	4a25      	ldr	r2, [pc, #148]	; (800d508 <stm32_i2c_configure_timing+0x14c>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d02c      	beq.n	800d4d0 <stm32_i2c_configure_timing+0x114>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 800d476:	4b25      	ldr	r3, [pc, #148]	; (800d50c <stm32_i2c_configure_timing+0x150>)
 800d478:	9304      	str	r3, [sp, #16]
 800d47a:	2302      	movs	r3, #2
 800d47c:	9303      	str	r3, [sp, #12]
 800d47e:	2300      	movs	r3, #0
 800d480:	4823      	ldr	r0, [pc, #140]	; (800d510 <stm32_i2c_configure_timing+0x154>)
 800d482:	aa03      	add	r2, sp, #12
 800d484:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d488:	f005 f888 	bl	801259c <z_impl_z_log_msg2_static_create>

	return 0;
 800d48c:	2300      	movs	r3, #0
		if ((I2C_SPEED_GET(speed) == I2C_SPEED_GET(data->dev_config))
 800d48e:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 800d492:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800d496:	ea90 0053 	eors.w	r0, r0, r3, lsr #1
 800d49a:	d11d      	bne.n	800d4d8 <stm32_i2c_configure_timing+0x11c>
		   && (preset->periph_clock == clock)) {
 800d49c:	f85b 3006 	ldr.w	r3, [fp, r6]
 800d4a0:	42a3      	cmp	r3, r4
 800d4a2:	d119      	bne.n	800d4d8 <stm32_i2c_configure_timing+0x11c>
			LL_I2C_SetTiming(i2c, preset->timing_setting);
 800d4a4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d4a8:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800d4ac:	b007      	add	sp, #28
 800d4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bitrate) {
 800d4b2:	4a18      	ldr	r2, [pc, #96]	; (800d514 <stm32_i2c_configure_timing+0x158>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d00d      	beq.n	800d4d4 <stm32_i2c_configure_timing+0x118>
 800d4b8:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800d4bc:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d1d8      	bne.n	800d476 <stm32_i2c_configure_timing+0xba>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800d4c4:	230a      	movs	r3, #10
 800d4c6:	e7e2      	b.n	800d48e <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800d4c8:	2306      	movs	r3, #6
 800d4ca:	e7e0      	b.n	800d48e <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	e7de      	b.n	800d48e <stm32_i2c_configure_timing+0xd2>
	switch (bitrate) {
 800d4d0:	2304      	movs	r3, #4
 800d4d2:	e7dc      	b.n	800d48e <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800d4d4:	2308      	movs	r3, #8
 800d4d6:	e7da      	b.n	800d48e <stm32_i2c_configure_timing+0xd2>
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 800d4d8:	3501      	adds	r5, #1
 800d4da:	e779      	b.n	800d3d0 <stm32_i2c_configure_timing+0x14>
		i2c_l_min_time = 4700U;
 800d4dc:	f241 205c 	movw	r0, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 800d4e0:	f44f 667a 	mov.w	r6, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 800d4e4:	f240 45e2 	movw	r5, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 800d4e8:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800d4ec:	e784      	b.n	800d3f8 <stm32_i2c_configure_timing+0x3c>
	} while (presc < 16);
 800d4ee:	3101      	adds	r1, #1
 800d4f0:	2911      	cmp	r1, #17
 800d4f2:	d184      	bne.n	800d3fe <stm32_i2c_configure_timing+0x42>
	switch (I2C_SPEED_GET(data->dev_config)) {
 800d4f4:	f06f 0015 	mvn.w	r0, #21
 800d4f8:	e7d8      	b.n	800d4ac <stm32_i2c_configure_timing+0xf0>
 800d4fa:	bf00      	nop
 800d4fc:	3b9aca00 	.word	0x3b9aca00
 800d500:	000f4240 	.word	0x000f4240
 800d504:	000186a0 	.word	0x000186a0
 800d508:	00061a80 	.word	0x00061a80
 800d50c:	0801a551 	.word	0x0801a551
 800d510:	080180b0 	.word	0x080180b0
 800d514:	0033e140 	.word	0x0033e140

0800d518 <i2c_stm32_runtime_configure>:
LOG_MODULE_REGISTER(i2c_ll_stm32);

#include "i2c-priv.h"

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 800d518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 800d51c:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800d51e:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800d522:	68fe      	ldr	r6, [r7, #12]
{
 800d524:	b089      	sub	sp, #36	; 0x24
	uint32_t clock = 0U;
 800d526:	2200      	movs	r2, #0
{
 800d528:	4605      	mov	r5, r0
 800d52a:	460c      	mov	r4, r1
	uint32_t clock = 0U;
 800d52c:	9201      	str	r2, [sp, #4]
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 800d52e:	3704      	adds	r7, #4
 800d530:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800d5ac <i2c_stm32_runtime_configure+0x94>
 800d534:	4640      	mov	r0, r8
 800d536:	f009 fdf4 	bl	8017122 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 800d53a:	b980      	cbnz	r0, 800d55e <i2c_stm32_runtime_configure+0x46>
		LOG_ERR("Failed call clock_control_get_rate");
 800d53c:	4b1c      	ldr	r3, [pc, #112]	; (800d5b0 <i2c_stm32_runtime_configure+0x98>)
 800d53e:	9306      	str	r3, [sp, #24]
 800d540:	2302      	movs	r3, #2
 800d542:	9305      	str	r3, [sp, #20]
 800d544:	481b      	ldr	r0, [pc, #108]	; (800d5b4 <i2c_stm32_runtime_configure+0x9c>)
 800d546:	2300      	movs	r3, #0
 800d548:	aa05      	add	r2, sp, #20
 800d54a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800d54e:	f06f 0504 	mvn.w	r5, #4
 800d552:	f005 f823 	bl	801259c <z_impl_z_log_msg2_static_create>
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
	ret = stm32_i2c_configure_timing(dev, clock);
	k_sem_give(&data->bus_mutex);

	return ret;
}
 800d556:	4628      	mov	r0, r5
 800d558:	b009      	add	sp, #36	; 0x24
 800d55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800d55e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0e9      	beq.n	800d53c <i2c_stm32_runtime_configure+0x24>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800d568:	aa01      	add	r2, sp, #4
 800d56a:	4639      	mov	r1, r7
 800d56c:	4640      	mov	r0, r8
 800d56e:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800d570:	2800      	cmp	r0, #0
 800d572:	dbe3      	blt.n	800d53c <i2c_stm32_runtime_configure+0x24>
	data->dev_config = config;
 800d574:	f8c9 4030 	str.w	r4, [r9, #48]	; 0x30
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800d578:	f109 0918 	add.w	r9, r9, #24
	return z_impl_k_sem_take(sem, timeout);
 800d57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d584:	4648      	mov	r0, r9
 800d586:	f002 fd13 	bl	800ffb0 <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800d58a:	6833      	ldr	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 800d58c:	9901      	ldr	r1, [sp, #4]
 800d58e:	f023 0301 	bic.w	r3, r3, #1
 800d592:	6033      	str	r3, [r6, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800d594:	6833      	ldr	r3, [r6, #0]
 800d596:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d59a:	6033      	str	r3, [r6, #0]
 800d59c:	4628      	mov	r0, r5
 800d59e:	f7ff ff0d 	bl	800d3bc <stm32_i2c_configure_timing>
 800d5a2:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800d5a4:	4648      	mov	r0, r9
 800d5a6:	f002 fcdd 	bl	800ff64 <z_impl_k_sem_give>
}
 800d5aa:	e7d4      	b.n	800d556 <i2c_stm32_runtime_configure+0x3e>
 800d5ac:	08017cb8 	.word	0x08017cb8
 800d5b0:	0801a57c 	.word	0x0801a57c
 800d5b4:	080180a8 	.word	0x080180a8

0800d5b8 <i2c_stm32_init>:
	.slave_unregister = i2c_stm32_slave_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 800d5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = dev->config;
 800d5ba:	6845      	ldr	r5, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = dev->data;
 800d5bc:	6906      	ldr	r6, [r0, #16]
{
 800d5be:	b087      	sub	sp, #28
 800d5c0:	4607      	mov	r7, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 800d5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f009 fe22 	bl	8017212 <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 800d5ce:	682b      	ldr	r3, [r5, #0]
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	4798      	blx	r3
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800d5d4:	6968      	ldr	r0, [r5, #20]
 800d5d6:	466a      	mov	r2, sp
 800d5d8:	2100      	movs	r1, #0
 800d5da:	f008 fb81 	bl	8015ce0 <pinctrl_lookup_state>
	if (ret < 0) {
 800d5de:	1e04      	subs	r4, r0, #0
 800d5e0:	db07      	blt.n	800d5f2 <i2c_stm32_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800d5e2:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	7919      	ldrb	r1, [r3, #4]
 800d5e8:	6818      	ldr	r0, [r3, #0]
 800d5ea:	f001 f977 	bl	800e8dc <pinctrl_configure_pins>
#endif

	/* Configure dt provided device signals when available */
	ret = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 800d5ee:	1e04      	subs	r4, r0, #0
 800d5f0:	da0e      	bge.n	800d610 <i2c_stm32_init+0x58>
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 800d5f2:	4b37      	ldr	r3, [pc, #220]	; (800d6d0 <i2c_stm32_init+0x118>)
 800d5f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	9303      	str	r3, [sp, #12]
 800d5fc:	4835      	ldr	r0, [pc, #212]	; (800d6d4 <i2c_stm32_init+0x11c>)
 800d5fe:	2300      	movs	r3, #0
 800d600:	aa03      	add	r2, sp, #12
 800d602:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800d606:	f004 ffc9 	bl	801259c <z_impl_z_log_msg2_static_create>
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 800d60a:	4620      	mov	r0, r4
 800d60c:	b007      	add	sp, #28
 800d60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d610:	2201      	movs	r2, #1
 800d612:	4611      	mov	r1, r2
 800d614:	f106 0018 	add.w	r0, r6, #24
 800d618:	f009 fdfb 	bl	8017212 <z_impl_k_sem_init>
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
 800d61c:	1d2e      	adds	r6, r5, #4
 800d61e:	4c2e      	ldr	r4, [pc, #184]	; (800d6d8 <i2c_stm32_init+0x120>)
 800d620:	4620      	mov	r0, r4
 800d622:	f009 fd7e 	bl	8017122 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800d626:	b968      	cbnz	r0, 800d644 <i2c_stm32_init+0x8c>
		LOG_ERR("i2c: failure enabling clock");
 800d628:	4b2c      	ldr	r3, [pc, #176]	; (800d6dc <i2c_stm32_init+0x124>)
 800d62a:	9304      	str	r3, [sp, #16]
 800d62c:	2302      	movs	r3, #2
 800d62e:	9303      	str	r3, [sp, #12]
 800d630:	4828      	ldr	r0, [pc, #160]	; (800d6d4 <i2c_stm32_init+0x11c>)
 800d632:	2300      	movs	r3, #0
 800d634:	aa03      	add	r2, sp, #12
 800d636:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d63a:	f004 ffaf 	bl	801259c <z_impl_z_log_msg2_static_create>
		return -EIO;
 800d63e:	f06f 0404 	mvn.w	r4, #4
 800d642:	e7e2      	b.n	800d60a <i2c_stm32_init+0x52>
	return api->on(dev, sys);
 800d644:	68a3      	ldr	r3, [r4, #8]
 800d646:	4620      	mov	r0, r4
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4631      	mov	r1, r6
 800d64c:	4798      	blx	r3
	if (clock_control_on(clock,
 800d64e:	4604      	mov	r4, r0
 800d650:	2800      	cmp	r0, #0
 800d652:	d1e9      	bne.n	800d628 <i2c_stm32_init+0x70>
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 800d654:	692b      	ldr	r3, [r5, #16]
	switch (bitrate) {
 800d656:	4a22      	ldr	r2, [pc, #136]	; (800d6e0 <i2c_stm32_init+0x128>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d031      	beq.n	800d6c0 <i2c_stm32_init+0x108>
 800d65c:	d825      	bhi.n	800d6aa <i2c_stm32_init+0xf2>
 800d65e:	4a21      	ldr	r2, [pc, #132]	; (800d6e4 <i2c_stm32_init+0x12c>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d02f      	beq.n	800d6c4 <i2c_stm32_init+0x10c>
 800d664:	4a20      	ldr	r2, [pc, #128]	; (800d6e8 <i2c_stm32_init+0x130>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d02e      	beq.n	800d6c8 <i2c_stm32_init+0x110>
	LOG_ERR("Invalid I2C bit rate value");
 800d66a:	4b20      	ldr	r3, [pc, #128]	; (800d6ec <i2c_stm32_init+0x134>)
 800d66c:	9304      	str	r3, [sp, #16]
 800d66e:	2302      	movs	r3, #2
 800d670:	9303      	str	r3, [sp, #12]
 800d672:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d676:	4817      	ldr	r0, [pc, #92]	; (800d6d4 <i2c_stm32_init+0x11c>)
 800d678:	2300      	movs	r3, #0
 800d67a:	aa03      	add	r2, sp, #12
 800d67c:	f004 ff8e 	bl	801259c <z_impl_z_log_msg2_static_create>
	return 0;
 800d680:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 800d682:	f041 0110 	orr.w	r1, r1, #16
 800d686:	4638      	mov	r0, r7
 800d688:	f7ff ff46 	bl	800d518 <i2c_stm32_runtime_configure>
	if (ret < 0) {
 800d68c:	1e05      	subs	r5, r0, #0
 800d68e:	dabc      	bge.n	800d60a <i2c_stm32_init+0x52>
		LOG_ERR("i2c: failure initializing");
 800d690:	4b17      	ldr	r3, [pc, #92]	; (800d6f0 <i2c_stm32_init+0x138>)
 800d692:	9304      	str	r3, [sp, #16]
 800d694:	2302      	movs	r3, #2
 800d696:	9303      	str	r3, [sp, #12]
 800d698:	480e      	ldr	r0, [pc, #56]	; (800d6d4 <i2c_stm32_init+0x11c>)
 800d69a:	2300      	movs	r3, #0
 800d69c:	aa03      	add	r2, sp, #12
 800d69e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d6a2:	f004 ff7b 	bl	801259c <z_impl_z_log_msg2_static_create>
		return ret;
 800d6a6:	462c      	mov	r4, r5
 800d6a8:	e7af      	b.n	800d60a <i2c_stm32_init+0x52>
	switch (bitrate) {
 800d6aa:	4a12      	ldr	r2, [pc, #72]	; (800d6f4 <i2c_stm32_init+0x13c>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d00d      	beq.n	800d6cc <i2c_stm32_init+0x114>
 800d6b0:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800d6b4:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d1d6      	bne.n	800d66a <i2c_stm32_init+0xb2>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800d6bc:	210a      	movs	r1, #10
 800d6be:	e7e0      	b.n	800d682 <i2c_stm32_init+0xca>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800d6c0:	2106      	movs	r1, #6
 800d6c2:	e7de      	b.n	800d682 <i2c_stm32_init+0xca>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800d6c4:	2102      	movs	r1, #2
 800d6c6:	e7dc      	b.n	800d682 <i2c_stm32_init+0xca>
	switch (bitrate) {
 800d6c8:	2104      	movs	r1, #4
 800d6ca:	e7da      	b.n	800d682 <i2c_stm32_init+0xca>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800d6cc:	2108      	movs	r1, #8
 800d6ce:	e7d8      	b.n	800d682 <i2c_stm32_init+0xca>
 800d6d0:	0801a59f 	.word	0x0801a59f
 800d6d4:	080180a8 	.word	0x080180a8
 800d6d8:	08017cb8 	.word	0x08017cb8
 800d6dc:	0801a5bd 	.word	0x0801a5bd
 800d6e0:	000f4240 	.word	0x000f4240
 800d6e4:	000186a0 	.word	0x000186a0
 800d6e8:	00061a80 	.word	0x00061a80
 800d6ec:	0801a551 	.word	0x0801a551
 800d6f0:	0801a5d9 	.word	0x0801a5d9
 800d6f4:	0033e140 	.word	0x0033e140

0800d6f8 <bme280_channel_get>:
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme280_data *data = dev->data;

	switch (chan) {
 800d6f8:	290e      	cmp	r1, #14
{
 800d6fa:	b510      	push	{r4, lr}
	struct bme280_data *data = dev->data;
 800d6fc:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
 800d6fe:	d010      	beq.n	800d722 <bme280_channel_get+0x2a>
 800d700:	2910      	cmp	r1, #16
 800d702:	d01d      	beq.n	800d740 <bme280_channel_get+0x48>
 800d704:	290d      	cmp	r1, #13
 800d706:	d124      	bne.n	800d752 <bme280_channel_get+0x5a>
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->comp_temp has a resolution of 0.01 degC.  So
		 * 5123 equals 51.23 degC.
		 */
		val->val1 = data->comp_temp / 100;
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	2064      	movs	r0, #100	; 0x64
 800d70c:	fb93 f1f0 	sdiv	r1, r3, r0
		val->val2 = data->comp_temp % 100 * 10000;
 800d710:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = data->comp_temp / 100;
 800d714:	6011      	str	r1, [r2, #0]
		val->val2 = data->comp_temp % 100 * 10000;
 800d716:	f242 7110 	movw	r1, #10000	; 0x2710
 800d71a:	434b      	muls	r3, r1
		 * data->comp_humidity has 22 integer bits and 10
		 * fractional.  Output value of 47445 represents
		 * 47445/1024 = 46.333 %RH
		 */
		val->val1 = (data->comp_humidity >> 10);
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
 800d71c:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
 800d71e:	2000      	movs	r0, #0
}
 800d720:	bd10      	pop	{r4, pc}
		val->val1 = (data->comp_press >> 8) / 1000U;
 800d722:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d728:	0a0b      	lsrs	r3, r1, #8
			(((data->comp_press & 0xff) * 1000U) >> 8);
 800d72a:	b2c9      	uxtb	r1, r1
		val->val1 = (data->comp_press >> 8) / 1000U;
 800d72c:	fbb3 f4f0 	udiv	r4, r3, r0
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800d730:	fb00 3314 	mls	r3, r0, r4, r3
			(((data->comp_press & 0xff) * 1000U) >> 8);
 800d734:	4341      	muls	r1, r0
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800d736:	4343      	muls	r3, r0
		val->val1 = (data->comp_press >> 8) / 1000U;
 800d738:	6014      	str	r4, [r2, #0]
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800d73a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 800d73e:	e7ed      	b.n	800d71c <bme280_channel_get+0x24>
		val->val1 = (data->comp_humidity >> 10);
 800d740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d742:	0a99      	lsrs	r1, r3, #10
 800d744:	6011      	str	r1, [r2, #0]
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
 800d746:	4904      	ldr	r1, [pc, #16]	; (800d758 <bme280_channel_get+0x60>)
 800d748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d74c:	434b      	muls	r3, r1
 800d74e:	0a9b      	lsrs	r3, r3, #10
 800d750:	e7e4      	b.n	800d71c <bme280_channel_get+0x24>
	switch (chan) {
 800d752:	f06f 0015 	mvn.w	r0, #21
 800d756:	e7e3      	b.n	800d720 <bme280_channel_get+0x28>
 800d758:	000f4240 	.word	0x000f4240

0800d75c <sht3xd_channel_get>:

	/*
	 * See datasheet "Conversion of Signal Output" section
	 * for more details on processing sample data.
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800d75c:	290d      	cmp	r1, #13
{
 800d75e:	b570      	push	{r4, r5, r6, lr}
	const struct sht3xd_data *data = dev->data;
 800d760:	6903      	ldr	r3, [r0, #16]
{
 800d762:	4614      	mov	r4, r2
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800d764:	d121      	bne.n	800d7aa <sht3xd_channel_get+0x4e>
		/* val = -45 + 175 * sample / (2^16 -1) */
		tmp = (uint64_t)data->t_sample * 175U;
 800d766:	881e      	ldrh	r6, [r3, #0]
 800d768:	25af      	movs	r5, #175	; 0xaf
 800d76a:	fba6 6505 	umull	r6, r5, r6, r5
		val->val1 = (int32_t)(tmp / 0xFFFF) - 45;
 800d76e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d772:	2300      	movs	r3, #0
 800d774:	4630      	mov	r0, r6
 800d776:	4629      	mov	r1, r5
 800d778:	f7f3 fc26 	bl	8000fc8 <__aeabi_uldivmod>
 800d77c:	382d      	subs	r0, #45	; 0x2d
 800d77e:	6020      	str	r0, [r4, #0]
		val->val2 = ((tmp % 0xFFFF) * 1000000U) / 0xFFFF;
 800d780:	4629      	mov	r1, r5
 800d782:	4630      	mov	r0, r6
 800d784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d788:	2300      	movs	r3, #0
 800d78a:	f7f3 fc1d 	bl	8000fc8 <__aeabi_uldivmod>
 800d78e:	4d12      	ldr	r5, [pc, #72]	; (800d7d8 <sht3xd_channel_get+0x7c>)
 800d790:	461e      	mov	r6, r3
 800d792:	fba2 0105 	umull	r0, r1, r2, r5
 800d796:	2300      	movs	r3, #0
 800d798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d79c:	fb05 1106 	mla	r1, r5, r6, r1
 800d7a0:	f7f3 fc12 	bl	8000fc8 <__aeabi_uldivmod>
 800d7a4:	6060      	str	r0, [r4, #4]
		val->val2 = (tmp2 % 0xFFFF) * 15625U / 1024;
	} else {
		return -ENOTSUP;
	}

	return 0;
 800d7a6:	2000      	movs	r0, #0
}
 800d7a8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
 800d7aa:	2910      	cmp	r1, #16
 800d7ac:	d110      	bne.n	800d7d0 <sht3xd_channel_get+0x74>
		uint32_t tmp2 = (uint32_t)data->rh_sample * 100U;
 800d7ae:	885b      	ldrh	r3, [r3, #2]
 800d7b0:	2264      	movs	r2, #100	; 0x64
 800d7b2:	4353      	muls	r3, r2
		val->val1 = tmp2 / 0xFFFF;
 800d7b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d7b8:	fbb3 f1f1 	udiv	r1, r3, r1
 800d7bc:	6021      	str	r1, [r4, #0]
		val->val2 = (tmp2 % 0xFFFF) * 15625U / 1024;
 800d7be:	ebc1 4101 	rsb	r1, r1, r1, lsl #16
 800d7c2:	1a5b      	subs	r3, r3, r1
 800d7c4:	f643 5209 	movw	r2, #15625	; 0x3d09
 800d7c8:	4353      	muls	r3, r2
 800d7ca:	0a9b      	lsrs	r3, r3, #10
 800d7cc:	6063      	str	r3, [r4, #4]
 800d7ce:	e7ea      	b.n	800d7a6 <sht3xd_channel_get+0x4a>
		return -ENOTSUP;
 800d7d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800d7d4:	e7e8      	b.n	800d7a8 <sht3xd_channel_get+0x4c>
 800d7d6:	bf00      	nop
 800d7d8:	000f4240 	.word	0x000f4240

0800d7dc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800d7dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800d7de:	ab0b      	add	r3, sp, #44	; 0x2c
 800d7e0:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800d7e2:	9303      	str	r3, [sp, #12]
 800d7e4:	4b05      	ldr	r3, [pc, #20]	; (800d7fc <z_log_msg2_runtime_create.constprop.0+0x20>)
 800d7e6:	9302      	str	r3, [sp, #8]
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e9cd 3300 	strd	r3, r3, [sp]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7f6 ff89 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 800d7f6:	b007      	add	sp, #28
 800d7f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7fc:	0801a606 	.word	0x0801a606

0800d800 <sht3xd_init>:
	.sample_fetch = sht3xd_sample_fetch,
	.channel_get = sht3xd_channel_get,
};

static int sht3xd_init(const struct device *dev)
{
 800d800:	b530      	push	{r4, r5, lr}
	const struct sht3xd_config *cfg = dev->config;
 800d802:	6845      	ldr	r5, [r0, #4]
{
 800d804:	4604      	mov	r4, r0
 800d806:	b085      	sub	sp, #20

	if (!device_is_ready(cfg->bus.bus)) {
 800d808:	6828      	ldr	r0, [r5, #0]
 800d80a:	f009 fc8a 	bl	8017122 <z_device_is_ready>
 800d80e:	4603      	mov	r3, r0
 800d810:	b970      	cbnz	r0, 800d830 <sht3xd_init+0x30>
		LOG_ERR("I2C bus %s is not ready!", cfg->bus.bus->name);
 800d812:	682a      	ldr	r2, [r5, #0]
 800d814:	4914      	ldr	r1, [pc, #80]	; (800d868 <sht3xd_init+0x68>)
 800d816:	6812      	ldr	r2, [r2, #0]
 800d818:	9203      	str	r2, [sp, #12]
 800d81a:	4a14      	ldr	r2, [pc, #80]	; (800d86c <sht3xd_init+0x6c>)
 800d81c:	9000      	str	r0, [sp, #0]
 800d81e:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800d822:	2201      	movs	r2, #1
 800d824:	f7ff ffda 	bl	800d7dc <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
 800d828:	f06f 0015 	mvn.w	r0, #21
		return -EIO;
	}
#endif

	return 0;
}
 800d82c:	b005      	add	sp, #20
 800d82e:	bd30      	pop	{r4, r5, pc}
	if (sht3xd_write_command(dev, SHT3XD_CMD_CLEAR_STATUS) < 0) {
 800d830:	f243 0141 	movw	r1, #12353	; 0x3041
 800d834:	4620      	mov	r0, r4
 800d836:	f008 f8a4 	bl	8015982 <sht3xd_write_command>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	da02      	bge.n	800d844 <sht3xd_init+0x44>
		return -EIO;
 800d83e:	f06f 0004 	mvn.w	r0, #4
 800d842:	e7f3      	b.n	800d82c <sht3xd_init+0x2c>
	z_impl_k_busy_wait(usec_to_wait);
 800d844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d848:	f003 f9b0 	bl	8010bac <z_impl_k_busy_wait>
	if (sht3xd_write_command(dev,
 800d84c:	f242 1130 	movw	r1, #8496	; 0x2130
 800d850:	4620      	mov	r0, r4
 800d852:	f008 f896 	bl	8015982 <sht3xd_write_command>
 800d856:	2800      	cmp	r0, #0
 800d858:	dbf1      	blt.n	800d83e <sht3xd_init+0x3e>
 800d85a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800d85e:	f003 f9a5 	bl	8010bac <z_impl_k_busy_wait>
	return 0;
 800d862:	2000      	movs	r0, #0
}
 800d864:	e7e2      	b.n	800d82c <sht3xd_init+0x2c>
 800d866:	bf00      	nop
 800d868:	08018068 	.word	0x08018068
 800d86c:	0801a606 	.word	0x0801a606

0800d870 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 800d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 800d874:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800d876:	6847      	ldr	r7, [r0, #4]
{
 800d878:	b08c      	sub	sp, #48	; 0x30
 800d87a:	4604      	mov	r4, r0
 800d87c:	4d3f      	ldr	r5, [pc, #252]	; (800d97c <spi_stm32_init+0x10c>)
 800d87e:	4628      	mov	r0, r5
 800d880:	f009 fc4f 	bl	8017122 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800d884:	b980      	cbnz	r0, 800d8a8 <spi_stm32_init+0x38>
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 800d886:	4b3e      	ldr	r3, [pc, #248]	; (800d980 <spi_stm32_init+0x110>)
 800d888:	930a      	str	r3, [sp, #40]	; 0x28
 800d88a:	2302      	movs	r3, #2
 800d88c:	9309      	str	r3, [sp, #36]	; 0x24
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800d88e:	483d      	ldr	r0, [pc, #244]	; (800d984 <spi_stm32_init+0x114>)
 800d890:	2300      	movs	r3, #0
 800d892:	aa09      	add	r2, sp, #36	; 0x24
 800d894:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800d898:	f06f 0404 	mvn.w	r4, #4
 800d89c:	f004 fe7e 	bl	801259c <z_impl_z_log_msg2_static_create>
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	b00c      	add	sp, #48	; 0x30
 800d8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
 800d8a8:	68ab      	ldr	r3, [r5, #8]
 800d8aa:	4639      	mov	r1, r7
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d1e7      	bne.n	800d886 <spi_stm32_init+0x16>
	return cfg->use_subghzspi_nss;
 800d8b6:	6863      	ldr	r3, [r4, #4]
	if (!spi_stm32_is_subghzspi(dev)) {
 800d8b8:	7c1d      	ldrb	r5, [r3, #16]
 800d8ba:	b9dd      	cbnz	r5, 800d8f4 <spi_stm32_init+0x84>
	ret = pinctrl_lookup_state(config, id, &state);
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	aa06      	add	r2, sp, #24
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	f008 fa0d 	bl	8015ce0 <pinctrl_lookup_state>
	if (ret < 0) {
 800d8c6:	1e04      	subs	r4, r0, #0
 800d8c8:	db07      	blt.n	800d8da <spi_stm32_init+0x6a>
	return pinctrl_apply_state_direct(config, state);
 800d8ca:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800d8cc:	462a      	mov	r2, r5
 800d8ce:	7919      	ldrb	r1, [r3, #4]
 800d8d0:	6818      	ldr	r0, [r3, #0]
 800d8d2:	f001 f803 	bl	800e8dc <pinctrl_configure_pins>
		if (err < 0) {
 800d8d6:	1e04      	subs	r4, r0, #0
 800d8d8:	da0c      	bge.n	800d8f4 <spi_stm32_init+0x84>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 800d8da:	4b2b      	ldr	r3, [pc, #172]	; (800d988 <spi_stm32_init+0x118>)
 800d8dc:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800d8e0:	2303      	movs	r3, #3
 800d8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e4:	4827      	ldr	r0, [pc, #156]	; (800d984 <spi_stm32_init+0x114>)
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	aa09      	add	r2, sp, #36	; 0x24
 800d8ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800d8ee:	f004 fe55 	bl	801259c <z_impl_z_log_msg2_static_create>
			return err;
 800d8f2:	e7d5      	b.n	800d8a0 <spi_stm32_init+0x30>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800d8f4:	68b5      	ldr	r5, [r6, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800d8f6:	2701      	movs	r7, #1
 800d8f8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800d8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d900:	429d      	cmp	r5, r3
 800d902:	d304      	bcc.n	800d90e <spi_stm32_init+0x9e>
	spi_context_unlock_unconditionally(&data->ctx);
 800d904:	4630      	mov	r0, r6
 800d906:	f008 f8ac 	bl	8015a62 <spi_context_unlock_unconditionally>
	return 0;
 800d90a:	2400      	movs	r4, #0
 800d90c:	e7c8      	b.n	800d8a0 <spi_stm32_init+0x30>
		if (!device_is_ready(cs_gpio->port)) {
 800d90e:	6828      	ldr	r0, [r5, #0]
 800d910:	f009 fc07 	bl	8017122 <z_device_is_ready>
 800d914:	4603      	mov	r3, r0
 800d916:	b978      	cbnz	r0, 800d938 <spi_stm32_init+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 800d918:	792a      	ldrb	r2, [r5, #4]
 800d91a:	9204      	str	r2, [sp, #16]
 800d91c:	682a      	ldr	r2, [r5, #0]
 800d91e:	4919      	ldr	r1, [pc, #100]	; (800d984 <spi_stm32_init+0x114>)
 800d920:	6812      	ldr	r2, [r2, #0]
 800d922:	9203      	str	r2, [sp, #12]
 800d924:	4a19      	ldr	r2, [pc, #100]	; (800d98c <spi_stm32_init+0x11c>)
 800d926:	9000      	str	r0, [sp, #0]
 800d928:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800d92c:	2201      	movs	r2, #1
 800d92e:	f008 f852 	bl	80159d6 <z_log_msg2_runtime_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 800d932:	f06f 0412 	mvn.w	r4, #18
 800d936:	e7b3      	b.n	800d8a0 <spi_stm32_init+0x30>
	return gpio_pin_configure(spec->port,
 800d938:	6828      	ldr	r0, [r5, #0]
 800d93a:	7929      	ldrb	r1, [r5, #4]
				  spec->dt_flags | extra_flags);
 800d93c:	88eb      	ldrh	r3, [r5, #6]
	struct gpio_driver_data *data =
 800d93e:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 800d942:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800d946:	f8dc 4000 	ldr.w	r4, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800d94a:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 800d94c:	bf54      	ite	pl
 800d94e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800d952:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800d956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800d95a:	fa07 fe01 	lsl.w	lr, r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800d95e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800d960:	bf4c      	ite	mi
 800d962:	ea4e 0404 	orrmi.w	r4, lr, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800d966:	ea24 040e 	bicpl.w	r4, r4, lr
 800d96a:	f8cc 4000 	str.w	r4, [ip]
	return api->pin_configure(port, pin, flags);
 800d96e:	f8d8 3000 	ldr.w	r3, [r8]
 800d972:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 800d974:	1e04      	subs	r4, r0, #0
 800d976:	db93      	blt.n	800d8a0 <spi_stm32_init+0x30>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800d978:	3508      	adds	r5, #8
 800d97a:	e7bd      	b.n	800d8f8 <spi_stm32_init+0x88>
 800d97c:	08017cb8 	.word	0x08017cb8
 800d980:	0801a626 	.word	0x0801a626
 800d984:	08018100 	.word	0x08018100
 800d988:	0801a641 	.word	0x0801a641
 800d98c:	0801a65f 	.word	0x0801a65f

0800d990 <spi_stm32_transceive>:
{
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	b09b      	sub	sp, #108	; 0x6c
 800d996:	461e      	mov	r6, r3
 800d998:	af06      	add	r7, sp, #24
	SPI_TypeDef *spi = cfg->spi;
 800d99a:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800d99c:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800d99e:	f8d3 b008 	ldr.w	fp, [r3, #8]
{
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 800d9a6:	4691      	mov	r9, r2
 800d9a8:	b90a      	cbnz	r2, 800d9ae <spi_stm32_transceive+0x1e>
 800d9aa:	2e00      	cmp	r6, #0
 800d9ac:	d055      	beq.n	800da5a <spi_stm32_transceive+0xca>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800d9ae:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800d9b2:	049d      	lsls	r5, r3, #18
 800d9b4:	d456      	bmi.n	800da64 <spi_stm32_transceive+0xd4>
	return z_impl_k_sem_take(sem, timeout);
 800d9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9be:	f104 0010 	add.w	r0, r4, #16
 800d9c2:	f002 faf5 	bl	800ffb0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800d9c6:	f8c4 8004 	str.w	r8, [r4, #4]
	const struct spi_stm32_config *cfg = dev->config;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
	const uint32_t scaler[] = {
 800d9cc:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 800dc90 <spi_stm32_transceive+0x300>
	const struct spi_stm32_config *cfg = dev->config;
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	60bb      	str	r3, [r7, #8]
	struct spi_stm32_data *data = dev->data;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	607b      	str	r3, [r7, #4]
	const uint32_t scaler[] = {
 800d9da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d9de:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800d9e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9e4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800d9e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4598      	cmp	r8, r3
 800d9f2:	f000 80b2 	beq.w	800db5a <spi_stm32_transceive+0x1ca>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800d9f6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800d9fa:	f3c3 1245 	ubfx	r2, r3, #5, #6
 800d9fe:	2a08      	cmp	r2, #8
 800da00:	d002      	beq.n	800da08 <spi_stm32_transceive+0x78>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 800da02:	2a10      	cmp	r2, #16
 800da04:	f040 812d 	bne.w	800dc62 <spi_stm32_transceive+0x2d2>
	SPI_TypeDef *spi = cfg->spi;
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	6895      	ldr	r5, [r2, #8]
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 800da0c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800da10:	686b      	ldr	r3, [r5, #4]
 800da12:	bf14      	ite	ne
 800da14:	f043 0310 	orrne.w	r3, r3, #16
 800da18:	f023 0310 	biceq.w	r3, r3, #16
 800da1c:	606b      	str	r3, [r5, #4]
 800da1e:	f8df a274 	ldr.w	sl, [pc, #628]	; 800dc94 <spi_stm32_transceive+0x304>
 800da22:	4650      	mov	r0, sl
 800da24:	f009 fb7d 	bl	8017122 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800da28:	bb18      	cbnz	r0, 800da72 <spi_stm32_transceive+0xe2>
		LOG_ERR("Failed call clock_control_get_rate");
 800da2a:	4b9b      	ldr	r3, [pc, #620]	; (800dc98 <spi_stm32_transceive+0x308>)
 800da2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800da2e:	2302      	movs	r3, #2
 800da30:	627b      	str	r3, [r7, #36]	; 0x24
 800da32:	489a      	ldr	r0, [pc, #616]	; (800dc9c <spi_stm32_transceive+0x30c>)
 800da34:	2300      	movs	r3, #0
 800da36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800da3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800da3e:	f06f 0604 	mvn.w	r6, #4
 800da42:	f004 fdab 	bl	801259c <z_impl_z_log_msg2_static_create>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	889b      	ldrh	r3, [r3, #4]
 800da4a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800da4e:	d104      	bne.n	800da5a <spi_stm32_transceive+0xca>
		ctx->owner = NULL;
 800da50:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 800da52:	f104 0010 	add.w	r0, r4, #16
 800da56:	f002 fa85 	bl	800ff64 <z_impl_k_sem_give>
}
 800da5a:	4630      	mov	r0, r6
 800da5c:	3754      	adds	r7, #84	; 0x54
 800da5e:	46bd      	mov	sp, r7
 800da60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800da64:	69a3      	ldr	r3, [r4, #24]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1a5      	bne.n	800d9b6 <spi_stm32_transceive+0x26>
		(k_sem_count_get(&ctx->lock) == 0) &&
 800da6a:	6863      	ldr	r3, [r4, #4]
 800da6c:	4598      	cmp	r8, r3
 800da6e:	d1a2      	bne.n	800d9b6 <spi_stm32_transceive+0x26>
 800da70:	e7ab      	b.n	800d9ca <spi_stm32_transceive+0x3a>
	if (api->get_rate == NULL) {
 800da72:	f8da 3008 	ldr.w	r3, [sl, #8]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d0d6      	beq.n	800da2a <spi_stm32_transceive+0x9a>
	return api->get_rate(dev, sys, rate);
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	f107 0214 	add.w	r2, r7, #20
 800da82:	4650      	mov	r0, sl
 800da84:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800da86:	2800      	cmp	r0, #0
 800da88:	dbcf      	blt.n	800da2a <spi_stm32_transceive+0x9a>
		uint32_t clk = clock >> br;
 800da8a:	6979      	ldr	r1, [r7, #20]
		if (clk <= config->frequency) {
 800da8c:	f8d8 0000 	ldr.w	r0, [r8]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800da90:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 800da92:	fa21 f203 	lsr.w	r2, r1, r3
		if (clk <= config->frequency) {
 800da96:	4282      	cmp	r2, r0
 800da98:	f240 8218 	bls.w	800decc <spi_stm32_transceive+0x53c>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800da9c:	3301      	adds	r3, #1
 800da9e:	2b09      	cmp	r3, #9
 800daa0:	d1f7      	bne.n	800da92 <spi_stm32_transceive+0x102>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 800daa2:	4b7f      	ldr	r3, [pc, #508]	; (800dca0 <spi_stm32_transceive+0x310>)
 800daa4:	466d      	mov	r5, sp
 800daa6:	b088      	sub	sp, #32
 800daa8:	aa06      	add	r2, sp, #24
 800daaa:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800daae:	084b      	lsrs	r3, r1, #1
 800dab0:	6193      	str	r3, [r2, #24]
 800dab2:	0a09      	lsrs	r1, r1, #8
 800dab4:	2305      	movs	r3, #5
 800dab6:	61d1      	str	r1, [r2, #28]
 800dab8:	f842 3f0c 	str.w	r3, [r2, #12]!
 800dabc:	4877      	ldr	r0, [pc, #476]	; (800dc9c <spi_stm32_transceive+0x30c>)
 800dabe:	2300      	movs	r3, #0
 800dac0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800dac4:	f004 fd6a 	bl	801259c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800dac8:	f06f 0615 	mvn.w	r6, #21
 800dacc:	46ad      	mov	sp, r5
	if (ret) {
 800dace:	e7ba      	b.n	800da46 <spi_stm32_transceive+0xb6>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800dad0:	682a      	ldr	r2, [r5, #0]
 800dad2:	f042 0202 	orr.w	r2, r2, #2
 800dad6:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800dad8:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800dada:	0758      	lsls	r0, r3, #29
 800dadc:	bf4c      	ite	mi
 800dade:	f042 0201 	orrmi.w	r2, r2, #1
 800dae2:	f022 0201 	bicpl.w	r2, r2, #1
 800dae6:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800dae8:	682a      	ldr	r2, [r5, #0]
 800daea:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800daee:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800daf0:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 800daf2:	06d9      	lsls	r1, r3, #27
 800daf4:	bf4c      	ite	mi
 800daf6:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 800dafa:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800dafe:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 800db00:	682a      	ldr	r2, [r5, #0]
 800db02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db06:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800db08:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800db0c:	f003 0101 	and.w	r1, r3, #1
 800db10:	2a00      	cmp	r2, #0
 800db12:	f000 8095 	beq.w	800dc40 <spi_stm32_transceive+0x2b0>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800db16:	682a      	ldr	r2, [r5, #0]
 800db18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db1c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800db1e:	686a      	ldr	r2, [r5, #4]
 800db20:	f022 0204 	bic.w	r2, r2, #4
 800db24:	606a      	str	r2, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800db26:	2900      	cmp	r1, #0
 800db28:	f000 8097 	beq.w	800dc5a <spi_stm32_transceive+0x2ca>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800db2c:	682a      	ldr	r2, [r5, #0]
 800db2e:	f422 7282 	bic.w	r2, r2, #260	; 0x104
 800db32:	602a      	str	r2, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 800db34:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800db38:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800db3a:	686b      	ldr	r3, [r5, #4]
 800db3c:	bf06      	itte	eq
 800db3e:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 800db42:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 800db46:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 800db4a:	606b      	str	r3, [r5, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800db4c:	686b      	ldr	r3, [r5, #4]
 800db4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800db52:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8c3 8000 	str.w	r8, [r3]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800db5a:	f1b9 0f00 	cmp.w	r9, #0
 800db5e:	f040 8083 	bne.w	800dc68 <spi_stm32_transceive+0x2d8>
 800db62:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800db66:	464a      	mov	r2, r9
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800db68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db6c:	60bb      	str	r3, [r7, #8]
 800db6e:	f104 0558 	add.w	r5, r4, #88	; 0x58
 800db72:	f104 0348 	add.w	r3, r4, #72	; 0x48
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800db76:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800db78:	607b      	str	r3, [r7, #4]
 800db7a:	462a      	mov	r2, r5
 800db7c:	2301      	movs	r3, #1
 800db7e:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800db82:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800db86:	f007 ff12 	bl	80159ae <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 800db8a:	6560      	str	r0, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800db8c:	2e00      	cmp	r6, #0
 800db8e:	d174      	bne.n	800dc7a <spi_stm32_transceive+0x2ea>
 800db90:	64e6      	str	r6, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800db92:	f104 084c 	add.w	r8, r4, #76	; 0x4c
 800db96:	f104 0950 	add.w	r9, r4, #80	; 0x50
 800db9a:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 800db9e:	2301      	movs	r3, #1
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800dba0:	6526      	str	r6, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800dba2:	4652      	mov	r2, sl
 800dba4:	4649      	mov	r1, r9
 800dba6:	4640      	mov	r0, r8
 800dba8:	f007 ff01 	bl	80159ae <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 800dbac:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 800dbae:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
 800dbb0:	6423      	str	r3, [r4, #64]	; 0x40
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800dbb2:	f8db 2008 	ldr.w	r2, [fp, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800dbb6:	f012 0201 	ands.w	r2, r2, #1
 800dbba:	d165      	bne.n	800dc88 <spi_stm32_transceive+0x2f8>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800dbbc:	f8db 3000 	ldr.w	r3, [fp]
 800dbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc4:	f8cb 3000 	str.w	r3, [fp]
	_spi_context_cs_control(ctx, on, false);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2101      	movs	r1, #1
 800dbcc:	6918      	ldr	r0, [r3, #16]
 800dbce:	f007 ff26 	bl	8015a1e <_spi_context_cs_control>
	if (cfg->use_subghzspi_nss) {
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	7c1b      	ldrb	r3, [r3, #16]
 800dbd8:	b133      	cbz	r3, 800dbe8 <spi_stm32_transceive+0x258>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800dbda:	4a32      	ldr	r2, [pc, #200]	; (800dca4 <spi_stm32_transceive+0x314>)
 800dbdc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800dbe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dbe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	uint16_t operation = data->ctx.config->operation;
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800dbec:	f013 0101 	ands.w	r1, r3, #1
 800dbf0:	f040 80d2 	bne.w	800dd98 <spi_stm32_transceive+0x408>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800dbf4:	f8db 2008 	ldr.w	r2, [fp, #8]
 800dbf8:	0792      	lsls	r2, r2, #30
 800dbfa:	d5fb      	bpl.n	800dbf4 <spi_stm32_transceive+0x264>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800dbfc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800dc00:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800dc02:	6d62      	ldr	r2, [r4, #84]	; 0x54
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800dc04:	f040 809c 	bne.w	800dd40 <spi_stm32_transceive+0x3b0>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 800dc08:	b112      	cbz	r2, 800dc10 <spi_stm32_transceive+0x280>
 800dc0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc0c:	b103      	cbz	r3, 800dc10 <spi_stm32_transceive+0x280>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800dc0e:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800dc10:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800dc12:	f88b 100c 	strb.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 800dc16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d049      	beq.n	800dcb0 <spi_stm32_transceive+0x320>
	ctx->tx_len -= len;
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d141      	bne.n	800dca8 <spi_stm32_transceive+0x318>
		++ctx->current_tx;
 800dc24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc26:	3308      	adds	r3, #8
 800dc28:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800dc2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800dc30:	2301      	movs	r3, #1
 800dc32:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
 800dc36:	462a      	mov	r2, r5
 800dc38:	f007 feb9 	bl	80159ae <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800dc3c:	6560      	str	r0, [r4, #84]	; 0x54
 800dc3e:	e037      	b.n	800dcb0 <spi_stm32_transceive+0x320>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800dc40:	682a      	ldr	r2, [r5, #0]
 800dc42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800dc46:	2900      	cmp	r1, #0
 800dc48:	f47f af68 	bne.w	800db1c <spi_stm32_transceive+0x18c>
 800dc4c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dc50:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800dc52:	686a      	ldr	r2, [r5, #4]
 800dc54:	f042 0204 	orr.w	r2, r2, #4
 800dc58:	606a      	str	r2, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800dc5a:	682a      	ldr	r2, [r5, #0]
 800dc5c:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 800dc60:	e767      	b.n	800db32 <spi_stm32_transceive+0x1a2>
		return -ENOTSUP;
 800dc62:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800dc66:	e6ee      	b.n	800da46 <spi_stm32_transceive+0xb6>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800dc68:	f8d9 2000 	ldr.w	r2, [r9]
 800dc6c:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800dc6e:	2a00      	cmp	r2, #0
 800dc70:	f43f af7a 	beq.w	800db68 <spi_stm32_transceive+0x1d8>
 800dc74:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800dc78:	e776      	b.n	800db68 <spi_stm32_transceive+0x1d8>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800dc7a:	6833      	ldr	r3, [r6, #0]
 800dc7c:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800dc7e:	b10b      	cbz	r3, 800dc84 <spi_stm32_transceive+0x2f4>
 800dc80:	6876      	ldr	r6, [r6, #4]
 800dc82:	e786      	b.n	800db92 <spi_stm32_transceive+0x202>
 800dc84:	461e      	mov	r6, r3
 800dc86:	e784      	b.n	800db92 <spi_stm32_transceive+0x202>
  return (*((__IO uint8_t *)&SPIx->DR));
 800dc88:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800dc8c:	e791      	b.n	800dbb2 <spi_stm32_transceive+0x222>
 800dc8e:	bf00      	nop
 800dc90:	08018204 	.word	0x08018204
 800dc94:	08017cb8 	.word	0x08017cb8
 800dc98:	0801a57c 	.word	0x0801a57c
 800dc9c:	08018100 	.word	0x08018100
 800dca0:	0801a68e 	.word	0x0801a68e
 800dca4:	58000400 	.word	0x58000400
	} else if (ctx->tx_buf) {
 800dca8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dcaa:	b10b      	cbz	r3, 800dcb0 <spi_stm32_transceive+0x320>
		ctx->tx_buf += dfs * len;
 800dcac:	3301      	adds	r3, #1
 800dcae:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800dcb0:	f8db 3008 	ldr.w	r3, [fp, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 800dcb4:	07de      	lsls	r6, r3, #31
 800dcb6:	d5fb      	bpl.n	800dcb0 <spi_stm32_transceive+0x320>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800dcb8:	6822      	ldr	r2, [r4, #0]
 800dcba:	8892      	ldrh	r2, [r2, #4]
 800dcbc:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800dcc0:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800dcc2:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	; 0x5c
 800dcc6:	d153      	bne.n	800dd70 <spi_stm32_transceive+0x3e0>
  return (*((__IO uint8_t *)&SPIx->DR));
 800dcc8:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800dccc:	b2d2      	uxtb	r2, r2
 800dcce:	b10b      	cbz	r3, 800dcd4 <spi_stm32_transceive+0x344>
 800dcd0:	b101      	cbz	r1, 800dcd4 <spi_stm32_transceive+0x344>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800dcd2:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800dcd4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dcd6:	b18b      	cbz	r3, 800dcfc <spi_stm32_transceive+0x36c>
	ctx->rx_len -= len;
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f040 80ac 	bne.w	800de3a <spi_stm32_transceive+0x4aa>
		++ctx->current_rx;
 800dce2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dce4:	3308      	adds	r3, #8
 800dce6:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800dce8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dcea:	3b01      	subs	r3, #1
 800dcec:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800dcee:	2301      	movs	r3, #1
 800dcf0:	4652      	mov	r2, sl
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	f007 fe5a 	bl	80159ae <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 800dcfa:	65e0      	str	r0, [r4, #92]	; 0x5c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800dcfc:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 800dd00:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 800dd04:	f000 80a9 	beq.w	800de5a <spi_stm32_transceive+0x4ca>
		LOG_ERR("%s: err=%d", __func__,
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	4b7c      	ldr	r3, [pc, #496]	; (800defc <spi_stm32_transceive+0x56c>)
 800dd0c:	9303      	str	r3, [sp, #12]
 800dd0e:	4b7c      	ldr	r3, [pc, #496]	; (800df00 <spi_stm32_transceive+0x570>)
 800dd10:	9302      	str	r3, [sp, #8]
 800dd12:	2300      	movs	r3, #0
 800dd14:	e9cd 3300 	strd	r3, r3, [sp]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	4979      	ldr	r1, [pc, #484]	; (800df04 <spi_stm32_transceive+0x574>)
 800dd1e:	f007 fe5a 	bl	80159d6 <z_log_msg2_runtime_create.constprop.0>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 800dd22:	f8db 3008 	ldr.w	r3, [fp, #8]
 800dd26:	065a      	lsls	r2, r3, #25
 800dd28:	d507      	bpl.n	800dd3a <spi_stm32_transceive+0x3aa>
  tmpreg = SPIx->DR;
 800dd2a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800dd2e:	61bb      	str	r3, [r7, #24]
  (void) tmpreg;
 800dd30:	69bb      	ldr	r3, [r7, #24]
  tmpreg = SPIx->SR;
 800dd32:	f8db 3008 	ldr.w	r3, [fp, #8]
 800dd36:	61bb      	str	r3, [r7, #24]
  (void) tmpreg;
 800dd38:	69bb      	ldr	r3, [r7, #24]
		return -EIO;
 800dd3a:	f06f 0604 	mvn.w	r6, #4
 800dd3e:	e094      	b.n	800de6a <spi_stm32_transceive+0x4da>
	return !!(ctx->tx_len);
 800dd40:	6da3      	ldr	r3, [r4, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
 800dd42:	b10a      	cbz	r2, 800dd48 <spi_stm32_transceive+0x3b8>
 800dd44:	b103      	cbz	r3, 800dd48 <spi_stm32_transceive+0x3b8>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800dd46:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800dd48:	f8ab 100c 	strh.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0af      	beq.n	800dcb0 <spi_stm32_transceive+0x320>
	ctx->tx_len -= len;
 800dd50:	3b01      	subs	r3, #1
 800dd52:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800dd54:	b93b      	cbnz	r3, 800dd66 <spi_stm32_transceive+0x3d6>
		++ctx->current_tx;
 800dd56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dd58:	3308      	adds	r3, #8
 800dd5a:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800dd5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800dd62:	2302      	movs	r3, #2
 800dd64:	e765      	b.n	800dc32 <spi_stm32_transceive+0x2a2>
	} else if (ctx->tx_buf) {
 800dd66:	2a00      	cmp	r2, #0
 800dd68:	d0a2      	beq.n	800dcb0 <spi_stm32_transceive+0x320>
		ctx->tx_buf += dfs * len;
 800dd6a:	3202      	adds	r2, #2
 800dd6c:	6562      	str	r2, [r4, #84]	; 0x54
 800dd6e:	e79f      	b.n	800dcb0 <spi_stm32_transceive+0x320>
  return (uint16_t)(READ_REG(SPIx->DR));
 800dd70:	f8db 200c 	ldr.w	r2, [fp, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
 800dd74:	b10b      	cbz	r3, 800dd7a <spi_stm32_transceive+0x3ea>
 800dd76:	b101      	cbz	r1, 800dd7a <spi_stm32_transceive+0x3ea>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800dd78:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800dd7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d0bd      	beq.n	800dcfc <spi_stm32_transceive+0x36c>
	ctx->rx_len -= len;
 800dd80:	3b01      	subs	r3, #1
 800dd82:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d162      	bne.n	800de4e <spi_stm32_transceive+0x4be>
		++ctx->current_rx;
 800dd88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dd8a:	3308      	adds	r3, #8
 800dd8c:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800dd8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dd90:	3b01      	subs	r3, #1
 800dd92:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800dd94:	2302      	movs	r3, #2
 800dd96:	e7ab      	b.n	800dcf0 <spi_stm32_transceive+0x360>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800dd98:	f8db 2008 	ldr.w	r2, [fp, #8]
 800dd9c:	0790      	lsls	r0, r2, #30
 800dd9e:	d545      	bpl.n	800de2c <spi_stm32_transceive+0x49c>
	return !!(ctx->tx_len);
 800dda0:	6da1      	ldr	r1, [r4, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800dda2:	2900      	cmp	r1, #0
 800dda4:	d042      	beq.n	800de2c <spi_stm32_transceive+0x49c>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800dda6:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800ddaa:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800ddac:	6d62      	ldr	r2, [r4, #84]	; 0x54
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ddae:	d12c      	bne.n	800de0a <spi_stm32_transceive+0x47a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800ddb0:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 800ddb2:	f88b 300c 	strb.w	r3, [fp, #12]
	if (!ctx->tx_len) {
 800ddb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ddb8:	b1a3      	cbz	r3, 800dde4 <spi_stm32_transceive+0x454>
	ctx->tx_len -= len;
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800ddbe:	b96b      	cbnz	r3, 800dddc <spi_stm32_transceive+0x44c>
		++ctx->current_tx;
 800ddc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ddc2:	3308      	adds	r3, #8
 800ddc4:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800ddc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
 800ddd2:	462a      	mov	r2, r5
 800ddd4:	f007 fdeb 	bl	80159ae <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800ddd8:	6560      	str	r0, [r4, #84]	; 0x54
 800ddda:	e003      	b.n	800dde4 <spi_stm32_transceive+0x454>
	} else if (ctx->tx_buf) {
 800dddc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ddde:	b10b      	cbz	r3, 800dde4 <spi_stm32_transceive+0x454>
		ctx->tx_buf += dfs * len;
 800dde0:	3301      	adds	r3, #1
 800dde2:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800dde4:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 800dde8:	07d9      	lsls	r1, r3, #31
 800ddea:	d587      	bpl.n	800dcfc <spi_stm32_transceive+0x36c>
	return !!(ctx->rx_buf && ctx->rx_len);
 800ddec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d084      	beq.n	800dcfc <spi_stm32_transceive+0x36c>
 800ddf2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ddf4:	2a00      	cmp	r2, #0
 800ddf6:	d081      	beq.n	800dcfc <spi_stm32_transceive+0x36c>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ddf8:	6822      	ldr	r2, [r4, #0]
 800ddfa:	8892      	ldrh	r2, [r2, #4]
 800ddfc:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800de00:	2a08      	cmp	r2, #8
 800de02:	d121      	bne.n	800de48 <spi_stm32_transceive+0x4b8>
  return (*((__IO uint8_t *)&SPIx->DR));
 800de04:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800de08:	e763      	b.n	800dcd2 <spi_stm32_transceive+0x342>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800de0a:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 800de0c:	f8ab 300c 	strh.w	r3, [fp, #12]
	ctx->tx_len -= len;
 800de10:	3901      	subs	r1, #1
 800de12:	65a1      	str	r1, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800de14:	b939      	cbnz	r1, 800de26 <spi_stm32_transceive+0x496>
		++ctx->current_tx;
 800de16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800de18:	3308      	adds	r3, #8
 800de1a:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800de1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de1e:	3b01      	subs	r3, #1
 800de20:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800de22:	2302      	movs	r3, #2
 800de24:	e7d3      	b.n	800ddce <spi_stm32_transceive+0x43e>
		ctx->tx_buf += dfs * len;
 800de26:	3202      	adds	r2, #2
 800de28:	6562      	str	r2, [r4, #84]	; 0x54
 800de2a:	e7db      	b.n	800dde4 <spi_stm32_transceive+0x454>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800de2c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800de30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de34:	f8cb 3004 	str.w	r3, [fp, #4]
	defined(CONFIG_SOC_SERIES_STM32U5X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 800de38:	e7d4      	b.n	800dde4 <spi_stm32_transceive+0x454>
	} else if (ctx->rx_buf) {
 800de3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f43f af5d 	beq.w	800dcfc <spi_stm32_transceive+0x36c>
		ctx->rx_buf += dfs * len;
 800de42:	3301      	adds	r3, #1
 800de44:	65e3      	str	r3, [r4, #92]	; 0x5c
 800de46:	e759      	b.n	800dcfc <spi_stm32_transceive+0x36c>
  return (uint16_t)(READ_REG(SPIx->DR));
 800de48:	f8db 200c 	ldr.w	r2, [fp, #12]
 800de4c:	e794      	b.n	800dd78 <spi_stm32_transceive+0x3e8>
	} else if (ctx->rx_buf) {
 800de4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800de50:	2b00      	cmp	r3, #0
 800de52:	f43f af53 	beq.w	800dcfc <spi_stm32_transceive+0x36c>
		ctx->rx_buf += dfs * len;
 800de56:	3302      	adds	r3, #2
 800de58:	e7f4      	b.n	800de44 <spi_stm32_transceive+0x4b4>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800de5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f47f aec3 	bne.w	800dbe8 <spi_stm32_transceive+0x258>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 800de62:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800de64:	2e00      	cmp	r6, #0
 800de66:	f47f aebf 	bne.w	800dbe8 <spi_stm32_transceive+0x258>
	SPI_TypeDef *spi = cfg->spi;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	689d      	ldr	r5, [r3, #8]
	_spi_context_cs_control(ctx, on, false);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2200      	movs	r2, #0
 800de74:	6918      	ldr	r0, [r3, #16]
 800de76:	4611      	mov	r1, r2
 800de78:	f007 fdd1 	bl	8015a1e <_spi_context_cs_control>
	if (cfg->use_subghzspi_nss) {
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	7c1b      	ldrb	r3, [r3, #16]
 800de82:	b133      	cbz	r3, 800de92 <spi_stm32_transceive+0x502>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800de84:	4a20      	ldr	r2, [pc, #128]	; (800df08 <spi_stm32_transceive+0x578>)
 800de86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800de8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800de92:	68ab      	ldr	r3, [r5, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800de94:	07db      	lsls	r3, r3, #31
 800de96:	d417      	bmi.n	800dec8 <spi_stm32_transceive+0x538>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800de98:	682b      	ldr	r3, [r5, #0]
 800de9a:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800de9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dea2:	d102      	bne.n	800deaa <spi_stm32_transceive+0x51a>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800dea4:	68ab      	ldr	r3, [r5, #8]
 800dea6:	0618      	lsls	r0, r3, #24
 800dea8:	d4fc      	bmi.n	800dea4 <spi_stm32_transceive+0x514>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800deaa:	68ab      	ldr	r3, [r5, #8]
 800deac:	0699      	lsls	r1, r3, #26
 800deae:	d506      	bpl.n	800debe <spi_stm32_transceive+0x52e>
  tmpreg_sr = SPIx->SR;
 800deb0:	68ab      	ldr	r3, [r5, #8]
 800deb2:	633b      	str	r3, [r7, #48]	; 0x30
  (void) tmpreg_sr;
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800deb6:	682b      	ldr	r3, [r5, #0]
 800deb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800debc:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800debe:	682b      	ldr	r3, [r5, #0]
 800dec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dec4:	602b      	str	r3, [r5, #0]
}
 800dec6:	e5be      	b.n	800da46 <spi_stm32_transceive+0xb6>
  return (*((__IO uint8_t *)&SPIx->DR));
 800dec8:	7b2b      	ldrb	r3, [r5, #12]
 800deca:	e7e2      	b.n	800de92 <spi_stm32_transceive+0x502>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800decc:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 800dece:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ded2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ded6:	602a      	str	r2, [r5, #0]
 800ded8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800dedc:	682a      	ldr	r2, [r5, #0]
 800dede:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800dee2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800dee6:	4313      	orrs	r3, r2
 800dee8:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800deea:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800deee:	079a      	lsls	r2, r3, #30
 800def0:	f53f adee 	bmi.w	800dad0 <spi_stm32_transceive+0x140>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800def4:	682a      	ldr	r2, [r5, #0]
 800def6:	f022 0202 	bic.w	r2, r2, #2
 800defa:	e5ec      	b.n	800dad6 <spi_stm32_transceive+0x146>
 800defc:	0801a6d4 	.word	0x0801a6d4
 800df00:	0801a683 	.word	0x0801a683
 800df04:	08018100 	.word	0x08018100
 800df08:	58000400 	.word	0x58000400

0800df0c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800df0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800df0e:	ab0b      	add	r3, sp, #44	; 0x2c
 800df10:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800df12:	9303      	str	r3, [sp, #12]
 800df14:	4b05      	ldr	r3, [pc, #20]	; (800df2c <z_log_msg2_runtime_create.constprop.0+0x20>)
 800df16:	9302      	str	r3, [sp, #8]
 800df18:	2300      	movs	r3, #0
 800df1a:	e9cd 3300 	strd	r3, r3, [sp]
 800df1e:	2201      	movs	r2, #1
 800df20:	4618      	mov	r0, r3
 800df22:	f7f6 fbf1 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 800df26:	b007      	add	sp, #28
 800df28:	f85d fb04 	ldr.w	pc, [sp], #4
 800df2c:	0801a65f 	.word	0x0801a65f

0800df30 <spi_bitbang_init>:
	.transceive_async = spi_bitbang_transceive_async,
#endif /* CONFIG_SPI_ASYNC */
};

int spi_bitbang_init(const struct device *dev)
{
 800df30:	b530      	push	{r4, r5, lr}
	const struct spi_bitbang_config *config = dev->config;
 800df32:	6845      	ldr	r5, [r0, #4]
{
 800df34:	b087      	sub	sp, #28
	int rc;

	if (!device_is_ready(config->clk_gpio.port)) {
 800df36:	6828      	ldr	r0, [r5, #0]
 800df38:	f009 f8f3 	bl	8017122 <z_device_is_ready>
 800df3c:	4603      	mov	r3, r0
 800df3e:	b970      	cbnz	r0, 800df5e <spi_bitbang_init+0x2e>
		LOG_ERR("GPIO port for clk pin is not ready");
 800df40:	4a24      	ldr	r2, [pc, #144]	; (800dfd4 <spi_bitbang_init+0xa4>)
		return rc;
	}

	if (config->mosi_gpio.port != NULL) {
		if (!device_is_ready(config->mosi_gpio.port)) {
			LOG_ERR("GPIO port for mosi pin is not ready");
 800df42:	9204      	str	r2, [sp, #16]
 800df44:	2202      	movs	r2, #2
 800df46:	9203      	str	r2, [sp, #12]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800df48:	4823      	ldr	r0, [pc, #140]	; (800dfd8 <spi_bitbang_init+0xa8>)
 800df4a:	aa03      	add	r2, sp, #12
 800df4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			return -ENODEV;
 800df50:	f06f 0412 	mvn.w	r4, #18
 800df54:	f004 fb22 	bl	801259c <z_impl_z_log_msg2_static_create>
			return rc;
		}
	}

	return 0;
}
 800df58:	4620      	mov	r0, r4
 800df5a:	b007      	add	sp, #28
 800df5c:	bd30      	pop	{r4, r5, pc}
	rc = gpio_pin_configure_dt(&config->clk_gpio, GPIO_OUTPUT_INACTIVE);
 800df5e:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800df62:	4628      	mov	r0, r5
 800df64:	f007 fd93 	bl	8015a8e <gpio_pin_configure_dt>
	if (rc < 0) {
 800df68:	1e04      	subs	r4, r0, #0
 800df6a:	da0c      	bge.n	800df86 <spi_bitbang_init+0x56>
		LOG_ERR("Couldn't configure clk pin; (%d)", rc);
 800df6c:	4b1b      	ldr	r3, [pc, #108]	; (800dfdc <spi_bitbang_init+0xac>)
			LOG_ERR("Couldn't configure miso pin; (%d)", rc);
 800df6e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800df72:	2303      	movs	r3, #3
 800df74:	9303      	str	r3, [sp, #12]
 800df76:	4818      	ldr	r0, [pc, #96]	; (800dfd8 <spi_bitbang_init+0xa8>)
 800df78:	2300      	movs	r3, #0
 800df7a:	aa03      	add	r2, sp, #12
 800df7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800df80:	f004 fb0c 	bl	801259c <z_impl_z_log_msg2_static_create>
			return rc;
 800df84:	e7e8      	b.n	800df58 <spi_bitbang_init+0x28>
	if (config->mosi_gpio.port != NULL) {
 800df86:	68a8      	ldr	r0, [r5, #8]
 800df88:	b178      	cbz	r0, 800dfaa <spi_bitbang_init+0x7a>
 800df8a:	f009 f8ca 	bl	8017122 <z_device_is_ready>
		if (!device_is_ready(config->mosi_gpio.port)) {
 800df8e:	4603      	mov	r3, r0
 800df90:	b908      	cbnz	r0, 800df96 <spi_bitbang_init+0x66>
			LOG_ERR("GPIO port for mosi pin is not ready");
 800df92:	4a13      	ldr	r2, [pc, #76]	; (800dfe0 <spi_bitbang_init+0xb0>)
 800df94:	e7d5      	b.n	800df42 <spi_bitbang_init+0x12>
		rc = gpio_pin_configure_dt(&config->mosi_gpio,
 800df96:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800df9a:	f105 0008 	add.w	r0, r5, #8
 800df9e:	f007 fd76 	bl	8015a8e <gpio_pin_configure_dt>
		if (rc < 0) {
 800dfa2:	1e04      	subs	r4, r0, #0
 800dfa4:	da01      	bge.n	800dfaa <spi_bitbang_init+0x7a>
			LOG_ERR("Couldn't configure mosi pin; (%d)", rc);
 800dfa6:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <spi_bitbang_init+0xb4>)
 800dfa8:	e7e1      	b.n	800df6e <spi_bitbang_init+0x3e>
	if (config->miso_gpio.port != NULL) {
 800dfaa:	6928      	ldr	r0, [r5, #16]
 800dfac:	b908      	cbnz	r0, 800dfb2 <spi_bitbang_init+0x82>
	return 0;
 800dfae:	2400      	movs	r4, #0
 800dfb0:	e7d2      	b.n	800df58 <spi_bitbang_init+0x28>
 800dfb2:	f009 f8b6 	bl	8017122 <z_device_is_ready>
		if (!device_is_ready(config->miso_gpio.port)) {
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	b908      	cbnz	r0, 800dfbe <spi_bitbang_init+0x8e>
			LOG_ERR("GPIO port for miso pin is not ready");
 800dfba:	4a0b      	ldr	r2, [pc, #44]	; (800dfe8 <spi_bitbang_init+0xb8>)
 800dfbc:	e7c1      	b.n	800df42 <spi_bitbang_init+0x12>
		rc = gpio_pin_configure_dt(&config->miso_gpio, GPIO_INPUT);
 800dfbe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800dfc2:	f105 0010 	add.w	r0, r5, #16
 800dfc6:	f007 fd62 	bl	8015a8e <gpio_pin_configure_dt>
		if (rc < 0) {
 800dfca:	1e04      	subs	r4, r0, #0
 800dfcc:	daef      	bge.n	800dfae <spi_bitbang_init+0x7e>
			LOG_ERR("Couldn't configure miso pin; (%d)", rc);
 800dfce:	4b07      	ldr	r3, [pc, #28]	; (800dfec <spi_bitbang_init+0xbc>)
 800dfd0:	e7cd      	b.n	800df6e <spi_bitbang_init+0x3e>
 800dfd2:	bf00      	nop
 800dfd4:	0801a6e6 	.word	0x0801a6e6
 800dfd8:	080180f8 	.word	0x080180f8
 800dfdc:	0801a709 	.word	0x0801a709
 800dfe0:	0801a72a 	.word	0x0801a72a
 800dfe4:	0801a74e 	.word	0x0801a74e
 800dfe8:	0801a770 	.word	0x0801a770
 800dfec:	0801a794 	.word	0x0801a794

0800dff0 <spi_bitbang_transceive>:
{
 800dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	460f      	mov	r7, r1
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800dff6:	8889      	ldrh	r1, [r1, #4]
	const struct spi_bitbang_config *info = dev->config;
 800dff8:	6846      	ldr	r6, [r0, #4]
	struct spi_bitbang_data *data = dev->data;
 800dffa:	6904      	ldr	r4, [r0, #16]
{
 800dffc:	4691      	mov	r9, r2
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800dffe:	f011 0201 	ands.w	r2, r1, #1
{
 800e002:	b09d      	sub	sp, #116	; 0x74
 800e004:	4605      	mov	r5, r0
 800e006:	4698      	mov	r8, r3
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800e008:	f000 808d 	beq.w	800e126 <spi_bitbang_transceive+0x136>
		LOG_ERR("Slave mode not supported");
 800e00c:	4b75      	ldr	r3, [pc, #468]	; (800e1e4 <spi_bitbang_transceive+0x1f4>)
 800e00e:	931a      	str	r3, [sp, #104]	; 0x68
 800e010:	2302      	movs	r3, #2
 800e012:	9319      	str	r3, [sp, #100]	; 0x64
 800e014:	2300      	movs	r3, #0
 800e016:	4874      	ldr	r0, [pc, #464]	; (800e1e8 <spi_bitbang_transceive+0x1f8>)
 800e018:	aa19      	add	r2, sp, #100	; 0x64
 800e01a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e01e:	f004 fabd 	bl	801259c <z_impl_z_log_msg2_static_create>
	spi_context_buffers_setup(ctx, tx_bufs, rx_bufs, data->dfs);
 800e022:	f894 a06c 	ldrb.w	sl, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800e026:	f1b9 0f00 	cmp.w	r9, #0
 800e02a:	f040 80c5 	bne.w	800e1b8 <spi_bitbang_transceive+0x1c8>
 800e02e:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800e032:	464a      	mov	r2, r9
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800e034:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800e038:	930d      	str	r3, [sp, #52]	; 0x34
 800e03a:	f104 0b44 	add.w	fp, r4, #68	; 0x44
 800e03e:	f104 0358 	add.w	r3, r4, #88	; 0x58
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800e042:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800e044:	930e      	str	r3, [sp, #56]	; 0x38
 800e046:	f104 0258 	add.w	r2, r4, #88	; 0x58
 800e04a:	4653      	mov	r3, sl
 800e04c:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800e050:	4658      	mov	r0, fp
 800e052:	f007 fd4f 	bl	8015af4 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 800e056:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800e058:	f1b8 0f00 	cmp.w	r8, #0
 800e05c:	f040 80b5 	bne.w	800e1ca <spi_bitbang_transceive+0x1da>
 800e060:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800e064:	4643      	mov	r3, r8
 800e066:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800e068:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800e06c:	9310      	str	r3, [sp, #64]	; 0x40
 800e06e:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800e072:	9311      	str	r3, [sp, #68]	; 0x44
 800e074:	f104 0360 	add.w	r3, r4, #96	; 0x60
 800e078:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800e07c:	9312      	str	r3, [sp, #72]	; 0x48
 800e07e:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800e082:	4653      	mov	r3, sl
 800e084:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800e088:	f007 fd34 	bl	8015af4 <spi_context_get_next_buf>
	if (SPI_MODE_GET(spi_cfg->operation) & SPI_MODE_CPOL) {
 800e08c:	88bf      	ldrh	r7, [r7, #4]
	ctx->rx_buf = (uint8_t *)
 800e08e:	65e0      	str	r0, [r4, #92]	; 0x5c
 800e090:	f007 0302 	and.w	r3, r7, #2
 800e094:	930a      	str	r3, [sp, #40]	; 0x28
 800e096:	f3c7 0340 	ubfx	r3, r7, #1, #1
	ctx->sync_status = 0;
 800e09a:	f04f 0800 	mov.w	r8, #0
 800e09e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0a0:	f007 0304 	and.w	r3, r7, #4
 800e0a4:	930b      	str	r3, [sp, #44]	; 0x2c
	gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800e0a6:	f3c7 0140 	ubfx	r1, r7, #1, #1
 800e0aa:	f007 0308 	and.w	r3, r7, #8
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
	if (SPI_MODE_GET(spi_cfg->operation) & SPI_MODE_LOOP) {
 800e0b4:	930c      	str	r3, [sp, #48]	; 0x30
	gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800e0b6:	f007 fd31 	bl	8015b1c <gpio_pin_set_dt.isra.0>
	_spi_context_cs_control(ctx, on, false);
 800e0ba:	4642      	mov	r2, r8
 800e0bc:	2101      	movs	r1, #1
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f007 fd40 	bl	8015b44 <_spi_context_cs_control>
	const uint32_t wait_us = data->wait_us;
 800e0c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e0c6:	9308      	str	r3, [sp, #32]
	const struct spi_bitbang_config *info = dev->config;
 800e0c8:	686b      	ldr	r3, [r5, #4]
	return info->miso_gpio.port != NULL;
 800e0ca:	691a      	ldr	r2, [r3, #16]
	return info->mosi_gpio.port != NULL;
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	9309      	str	r3, [sp, #36]	; 0x24
			if (!loop && do_read && !cpha) {
 800e0d0:	f007 030c 	and.w	r3, r7, #12
	return info->miso_gpio.port != NULL;
 800e0d4:	9207      	str	r2, [sp, #28]
			if (!loop && do_read && !cpha) {
 800e0d6:	9314      	str	r3, [sp, #80]	; 0x50
	return !!(ctx->tx_buf && ctx->tx_len);
 800e0d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e0da:	b10b      	cbz	r3, 800e0e0 <spi_bitbang_transceive+0xf0>
 800e0dc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e0de:	b94a      	cbnz	r2, 800e0f4 <spi_bitbang_transceive+0x104>
	return !!(ctx->rx_buf && ctx->rx_len);
 800e0e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e0e2:	2a00      	cmp	r2, #0
 800e0e4:	f000 8116 	beq.w	800e314 <spi_bitbang_transceive+0x324>
 800e0e8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e0ea:	2a00      	cmp	r2, #0
 800e0ec:	f000 8112 	beq.w	800e314 <spi_bitbang_transceive+0x324>
		if (ctx->tx_len) {
 800e0f0:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800e0f2:	b12f      	cbz	r7, 800e100 <spi_bitbang_transceive+0x110>
			switch (data->dfs) {
 800e0f4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e0f6:	2a01      	cmp	r2, #1
 800e0f8:	d070      	beq.n	800e1dc <spi_bitbang_transceive+0x1ec>
 800e0fa:	2a02      	cmp	r2, #2
 800e0fc:	d170      	bne.n	800e1e0 <spi_bitbang_transceive+0x1f0>
				w = *(uint16_t *)(ctx->tx_buf);
 800e0fe:	881f      	ldrh	r7, [r3, #0]
		int shift = data->bits - 1;
 800e100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e102:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
		if (has_miso && spi_context_rx_buf_on(ctx)) {
 800e106:	9b07      	ldr	r3, [sp, #28]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 80ef 	beq.w	800e2ec <spi_bitbang_transceive+0x2fc>
 800e10e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800e110:	b11d      	cbz	r5, 800e11a <spi_bitbang_transceive+0x12a>
 800e112:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800e114:	3d00      	subs	r5, #0
 800e116:	bf18      	it	ne
 800e118:	2501      	movne	r5, #1
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800e11a:	f106 0308 	add.w	r3, r6, #8
		bool do_read = false;
 800e11e:	f04f 0900 	mov.w	r9, #0
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800e122:	9313      	str	r3, [sp, #76]	; 0x4c
 800e124:	e0a5      	b.n	800e272 <spi_bitbang_transceive+0x282>
	if (config->operation & (SPI_TRANSFER_LSB | SPI_LINES_DUAL
 800e126:	f011 0310 	ands.w	r3, r1, #16
 800e12a:	d001      	beq.n	800e130 <spi_bitbang_transceive+0x140>
		LOG_ERR("Unsupported configuration");
 800e12c:	4b2f      	ldr	r3, [pc, #188]	; (800e1ec <spi_bitbang_transceive+0x1fc>)
 800e12e:	e76e      	b.n	800e00e <spi_bitbang_transceive+0x1e>
	const int bits = SPI_WORD_SIZE_GET(config->operation);
 800e130:	f3c1 1145 	ubfx	r1, r1, #5, #6
	if (bits > 16) {
 800e134:	2910      	cmp	r1, #16
 800e136:	dd04      	ble.n	800e142 <spi_bitbang_transceive+0x152>
		LOG_ERR("Word sizes > 16 bits not supported");
 800e138:	4a2d      	ldr	r2, [pc, #180]	; (800e1f0 <spi_bitbang_transceive+0x200>)
 800e13a:	921a      	str	r2, [sp, #104]	; 0x68
 800e13c:	2202      	movs	r2, #2
 800e13e:	9219      	str	r2, [sp, #100]	; 0x64
 800e140:	e769      	b.n	800e016 <spi_bitbang_transceive+0x26>
	data->dfs = ((data->bits - 1) / 8) + 1;
 800e142:	1e4b      	subs	r3, r1, #1
 800e144:	bf48      	it	mi
 800e146:	1d8b      	addmi	r3, r1, #6
 800e148:	10db      	asrs	r3, r3, #3
	if (config->frequency > 0) {
 800e14a:	683a      	ldr	r2, [r7, #0]
	data->bits = bits;
 800e14c:	6661      	str	r1, [r4, #100]	; 0x64
	data->dfs = ((data->bits - 1) / 8) + 1;
 800e14e:	3301      	adds	r3, #1
 800e150:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (config->frequency > 0) {
 800e152:	b322      	cbz	r2, 800e19e <spi_bitbang_transceive+0x1ae>
		data->wait_us = (1000000ul * 2000ul / config->frequency) / 2000ul;
 800e154:	4b27      	ldr	r3, [pc, #156]	; (800e1f4 <spi_bitbang_transceive+0x204>)
 800e156:	fbb3 f3f2 	udiv	r3, r3, r2
		data->wait_us /= 2;
 800e15a:	105b      	asrs	r3, r3, #1
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800e15c:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800e160:	66a3      	str	r3, [r4, #104]	; 0x68
	data->ctx.config = config;
 800e162:	6027      	str	r7, [r4, #0]
 800e164:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800e168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e16c:	459a      	cmp	sl, r3
 800e16e:	f4bf af58 	bcs.w	800e022 <spi_bitbang_transceive+0x32>
		if (!device_is_ready(cs_gpio->port)) {
 800e172:	f8da 0000 	ldr.w	r0, [sl]
 800e176:	f008 ffd4 	bl	8017122 <z_device_is_ready>
 800e17a:	4603      	mov	r3, r0
 800e17c:	b988      	cbnz	r0, 800e1a2 <spi_bitbang_transceive+0x1b2>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 800e17e:	f89a 2004 	ldrb.w	r2, [sl, #4]
 800e182:	9204      	str	r2, [sp, #16]
 800e184:	f8da 2000 	ldr.w	r2, [sl]
 800e188:	4917      	ldr	r1, [pc, #92]	; (800e1e8 <spi_bitbang_transceive+0x1f8>)
 800e18a:	6812      	ldr	r2, [r2, #0]
 800e18c:	9203      	str	r2, [sp, #12]
 800e18e:	4a1a      	ldr	r2, [pc, #104]	; (800e1f8 <spi_bitbang_transceive+0x208>)
 800e190:	9000      	str	r0, [sp, #0]
 800e192:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f7ff feb8 	bl	800df0c <z_log_msg2_runtime_create.constprop.0>
			return -ENODEV;
 800e19c:	e741      	b.n	800e022 <spi_bitbang_transceive+0x32>
		data->wait_us = 8 / 2; /* 125 kHz */
 800e19e:	2304      	movs	r3, #4
 800e1a0:	e7dc      	b.n	800e15c <spi_bitbang_transceive+0x16c>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
 800e1a2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800e1a6:	4650      	mov	r0, sl
 800e1a8:	f007 fc71 	bl	8015a8e <gpio_pin_configure_dt>
		if (ret < 0) {
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	f6ff af38 	blt.w	800e022 <spi_bitbang_transceive+0x32>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800e1b2:	f10a 0a08 	add.w	sl, sl, #8
 800e1b6:	e7d5      	b.n	800e164 <spi_bitbang_transceive+0x174>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800e1b8:	f8d9 2000 	ldr.w	r2, [r9]
 800e1bc:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800e1be:	2a00      	cmp	r2, #0
 800e1c0:	f43f af38 	beq.w	800e034 <spi_bitbang_transceive+0x44>
 800e1c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800e1c8:	e734      	b.n	800e034 <spi_bitbang_transceive+0x44>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800e1ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ce:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f43f af48 	beq.w	800e066 <spi_bitbang_transceive+0x76>
 800e1d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e1da:	e744      	b.n	800e066 <spi_bitbang_transceive+0x76>
				w = *(uint8_t *)(ctx->tx_buf);
 800e1dc:	781f      	ldrb	r7, [r3, #0]
				break;
 800e1de:	e78f      	b.n	800e100 <spi_bitbang_transceive+0x110>
			switch (data->dfs) {
 800e1e0:	2700      	movs	r7, #0
 800e1e2:	e78d      	b.n	800e100 <spi_bitbang_transceive+0x110>
 800e1e4:	0801a7b6 	.word	0x0801a7b6
 800e1e8:	080180f8 	.word	0x080180f8
 800e1ec:	0801a7cf 	.word	0x0801a7cf
 800e1f0:	0801a7e9 	.word	0x0801a7e9
 800e1f4:	000f4240 	.word	0x000f4240
 800e1f8:	0801a65f 	.word	0x0801a65f
			if (has_mosi) {
 800e1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
			const int d = (w >> shift) & 0x1;
 800e1fe:	fa47 fa08 	asr.w	sl, r7, r8
 800e202:	f00a 0a01 	and.w	sl, sl, #1
			if (has_mosi) {
 800e206:	b11b      	cbz	r3, 800e210 <spi_bitbang_transceive+0x220>
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800e208:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e20a:	4651      	mov	r1, sl
 800e20c:	f007 fc86 	bl	8015b1c <gpio_pin_set_dt.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
 800e210:	9808      	ldr	r0, [sp, #32]
 800e212:	f002 fccb 	bl	8010bac <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, !clock_state);
 800e216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e218:	fab3 f183 	clz	r1, r3
 800e21c:	0949      	lsrs	r1, r1, #5
 800e21e:	4630      	mov	r0, r6
 800e220:	f007 fc7c 	bl	8015b1c <gpio_pin_set_dt.isra.0>
			if (!loop && do_read && !cpha) {
 800e224:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e226:	2b00      	cmp	r3, #0
 800e228:	d15a      	bne.n	800e2e0 <spi_bitbang_transceive+0x2f0>
 800e22a:	2d00      	cmp	r5, #0
 800e22c:	d05a      	beq.n	800e2e4 <spi_bitbang_transceive+0x2f4>
	return gpio_pin_get(spec->port, spec->pin);
 800e22e:	7d31      	ldrb	r1, [r6, #20]
 800e230:	6930      	ldr	r0, [r6, #16]
 800e232:	f007 fc4b 	bl	8015acc <gpio_pin_get>
 800e236:	4603      	mov	r3, r0
 800e238:	9315      	str	r3, [sp, #84]	; 0x54
 800e23a:	9808      	ldr	r0, [sp, #32]
 800e23c:	f002 fcb6 	bl	8010bac <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800e240:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e242:	4630      	mov	r0, r6
 800e244:	f007 fc6a 	bl	8015b1c <gpio_pin_set_dt.isra.0>
			if (!loop && do_read && cpha) {
 800e248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d14c      	bne.n	800e2e8 <spi_bitbang_transceive+0x2f8>
 800e24e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e250:	b135      	cbz	r5, 800e260 <spi_bitbang_transceive+0x270>
 800e252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e254:	b122      	cbz	r2, 800e260 <spi_bitbang_transceive+0x270>
 800e256:	7d31      	ldrb	r1, [r6, #20]
 800e258:	6930      	ldr	r0, [r6, #16]
 800e25a:	f007 fc37 	bl	8015acc <gpio_pin_get>
 800e25e:	4603      	mov	r3, r0
			r = (r << 1) | (b ? 0x1 : 0x0);
 800e260:	3b00      	subs	r3, #0
 800e262:	bf18      	it	ne
 800e264:	2301      	movne	r3, #1
 800e266:	ea43 0949 	orr.w	r9, r3, r9, lsl #1
 800e26a:	fa1f f989 	uxth.w	r9, r9
			--shift;
 800e26e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		while (shift >= 0) {
 800e272:	f1b8 0f00 	cmp.w	r8, #0
 800e276:	dac1      	bge.n	800e1fc <spi_bitbang_transceive+0x20c>
	return !!(ctx->rx_buf && ctx->rx_len);
 800e278:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e27a:	b143      	cbz	r3, 800e28e <spi_bitbang_transceive+0x29e>
 800e27c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e27e:	b132      	cbz	r2, 800e28e <spi_bitbang_transceive+0x29e>
			switch (data->dfs) {
 800e280:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e282:	2a01      	cmp	r2, #1
 800e284:	d034      	beq.n	800e2f0 <spi_bitbang_transceive+0x300>
 800e286:	2a02      	cmp	r2, #2
 800e288:	d101      	bne.n	800e28e <spi_bitbang_transceive+0x29e>
				*(uint16_t *)(ctx->rx_buf) = r;
 800e28a:	f8a3 9000 	strh.w	r9, [r3]
	if (!ctx->tx_len) {
 800e28e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e290:	b182      	cbz	r2, 800e2b4 <spi_bitbang_transceive+0x2c4>
	ctx->tx_len -= len;
 800e292:	3a01      	subs	r2, #1
		spi_context_update_tx(ctx, data->dfs, 1);
 800e294:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e296:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800e298:	bb6a      	cbnz	r2, 800e2f6 <spi_bitbang_transceive+0x306>
		++ctx->current_tx;
 800e29a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e29c:	3208      	adds	r2, #8
 800e29e:	6462      	str	r2, [r4, #68]	; 0x44
		--ctx->tx_count;
 800e2a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e2a2:	3a01      	subs	r2, #1
 800e2a4:	64a2      	str	r2, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 800e2ac:	4658      	mov	r0, fp
 800e2ae:	f007 fc21 	bl	8015af4 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800e2b2:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
 800e2b4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e2b6:	2a00      	cmp	r2, #0
 800e2b8:	f43f af0e 	beq.w	800e0d8 <spi_bitbang_transceive+0xe8>
	ctx->rx_len -= len;
 800e2bc:	3a01      	subs	r2, #1
		spi_context_update_rx(ctx, data->dfs, 1);
 800e2be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e2c0:	6622      	str	r2, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800e2c2:	b9fa      	cbnz	r2, 800e304 <spi_bitbang_transceive+0x314>
		++ctx->current_rx;
 800e2c4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
 800e2c6:	9810      	ldr	r0, [sp, #64]	; 0x40
		++ctx->current_rx;
 800e2c8:	3208      	adds	r2, #8
 800e2ca:	64e2      	str	r2, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800e2cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e2ce:	3a01      	subs	r2, #1
 800e2d0:	6522      	str	r2, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800e2d8:	f007 fc0c 	bl	8015af4 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 800e2dc:	65e0      	str	r0, [r4, #92]	; 0x5c
 800e2de:	e6fb      	b.n	800e0d8 <spi_bitbang_transceive+0xe8>
			b = 0;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e7a9      	b.n	800e238 <spi_bitbang_transceive+0x248>
 800e2e4:	462b      	mov	r3, r5
 800e2e6:	e7a7      	b.n	800e238 <spi_bitbang_transceive+0x248>
				b = d;
 800e2e8:	4653      	mov	r3, sl
 800e2ea:	e7b9      	b.n	800e260 <spi_bitbang_transceive+0x270>
		bool do_read = false;
 800e2ec:	9d07      	ldr	r5, [sp, #28]
 800e2ee:	e714      	b.n	800e11a <spi_bitbang_transceive+0x12a>
				*(uint8_t *)(ctx->rx_buf) = r;
 800e2f0:	f883 9000 	strb.w	r9, [r3]
				break;
 800e2f4:	e7cb      	b.n	800e28e <spi_bitbang_transceive+0x29e>
	} else if (ctx->tx_buf) {
 800e2f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800e2f8:	2a00      	cmp	r2, #0
 800e2fa:	d0db      	beq.n	800e2b4 <spi_bitbang_transceive+0x2c4>
		ctx->tx_buf += dfs * len;
 800e2fc:	fa52 f383 	uxtab	r3, r2, r3
 800e300:	6563      	str	r3, [r4, #84]	; 0x54
 800e302:	e7d7      	b.n	800e2b4 <spi_bitbang_transceive+0x2c4>
	} else if (ctx->rx_buf) {
 800e304:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e306:	2a00      	cmp	r2, #0
 800e308:	f43f aee6 	beq.w	800e0d8 <spi_bitbang_transceive+0xe8>
		ctx->rx_buf += dfs * len;
 800e30c:	fa52 f383 	uxtab	r3, r2, r3
 800e310:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e312:	e6e1      	b.n	800e0d8 <spi_bitbang_transceive+0xe8>
	_spi_context_cs_control(ctx, on, false);
 800e314:	2200      	movs	r2, #0
 800e316:	4611      	mov	r1, r2
 800e318:	4620      	mov	r0, r4
	ctx->sync_status = status;
 800e31a:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
 800e31c:	f007 fc12 	bl	8015b44 <_spi_context_cs_control>
	ctx->sync_status = status;
 800e320:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
 800e322:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e326:	f001 fe1d 	bl	800ff64 <z_impl_k_sem_give>
}
 800e32a:	4628      	mov	r0, r5
 800e32c:	b01d      	add	sp, #116	; 0x74
 800e32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e332:	bf00      	nop

0800e334 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800e334:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800e336:	ab0b      	add	r3, sp, #44	; 0x2c
 800e338:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800e33a:	9303      	str	r3, [sp, #12]
 800e33c:	4b05      	ldr	r3, [pc, #20]	; (800e354 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800e33e:	9302      	str	r3, [sp, #8]
 800e340:	2300      	movs	r3, #0
 800e342:	e9cd 3300 	strd	r3, r3, [sp]
 800e346:	2201      	movs	r2, #1
 800e348:	4618      	mov	r0, r3
 800e34a:	f7f6 f9dd 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 800e34e:	b007      	add	sp, #28
 800e350:	f85d fb04 	ldr.w	pc, [sp], #4
 800e354:	0801a818 	.word	0x0801a818

0800e358 <lpuartdiv_calc>:

#if HAS_LPUART_1
#ifdef USART_PRESC_PRESCALER
uint32_t lpuartdiv_calc(const uint64_t clock_rate, const uint16_t presc_idx,
			const uint32_t baud_rate)
{
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	461d      	mov	r5, r3
	uint64_t lpuartdiv;

	lpuartdiv = clock_rate / LPUART_PRESCALER_TAB[presc_idx];
 800e35c:	4b09      	ldr	r3, [pc, #36]	; (800e384 <lpuartdiv_calc+0x2c>)
 800e35e:	2600      	movs	r6, #0
 800e360:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e364:	4633      	mov	r3, r6
 800e366:	f7f2 fe2f 	bl	8000fc8 <__aeabi_uldivmod>
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 800e36a:	0209      	lsls	r1, r1, #8
 800e36c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
	lpuartdiv += baud_rate / 2;
 800e370:	086c      	lsrs	r4, r5, #1
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 800e372:	0200      	lsls	r0, r0, #8
	lpuartdiv += baud_rate / 2;
 800e374:	1820      	adds	r0, r4, r0
	lpuartdiv /= baud_rate;
 800e376:	462a      	mov	r2, r5
 800e378:	4633      	mov	r3, r6
 800e37a:	f141 0100 	adc.w	r1, r1, #0
 800e37e:	f7f2 fe23 	bl	8000fc8 <__aeabi_uldivmod>

	return (uint32_t)lpuartdiv;
}
 800e382:	bd70      	pop	{r4, r5, r6, pc}
 800e384:	08018a86 	.word	0x08018a86

0800e388 <uart_stm32_set_baudrate>:
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev,
					   uint32_t baud_rate)
{
 800e388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uart_stm32_data *data = dev->data;

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 800e38c:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 800e38e:	6846      	ldr	r6, [r0, #4]
	if (clock_control_get_rate(data->clock,
 800e390:	685d      	ldr	r5, [r3, #4]
{
 800e392:	b08e      	sub	sp, #56	; 0x38
 800e394:	4607      	mov	r7, r0
 800e396:	460c      	mov	r4, r1
			       (clock_control_subsys_t *)&config->pclken,
 800e398:	f106 0804 	add.w	r8, r6, #4
 800e39c:	4628      	mov	r0, r5
 800e39e:	f008 fec0 	bl	8017122 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800e3a2:	b968      	cbnz	r0, 800e3c0 <uart_stm32_set_baudrate+0x38>
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 800e3a4:	4b34      	ldr	r3, [pc, #208]	; (800e478 <uart_stm32_set_baudrate+0xf0>)
 800e3a6:	930c      	str	r3, [sp, #48]	; 0x30
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	930b      	str	r3, [sp, #44]	; 0x2c
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800e3ac:	4833      	ldr	r0, [pc, #204]	; (800e47c <uart_stm32_set_baudrate+0xf4>)
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	aa0b      	add	r2, sp, #44	; 0x2c
 800e3b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e3b6:	f004 f8f1 	bl	801259c <z_impl_z_log_msg2_static_create>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 800e3ba:	b00e      	add	sp, #56	; 0x38
 800e3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->get_rate == NULL) {
 800e3c0:	68ab      	ldr	r3, [r5, #8]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d0ed      	beq.n	800e3a4 <uart_stm32_set_baudrate+0x1c>
	return api->get_rate(dev, sys, rate);
 800e3c8:	aa07      	add	r2, sp, #28
 800e3ca:	4641      	mov	r1, r8
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	dbe7      	blt.n	800e3a4 <uart_stm32_set_baudrate+0x1c>
	if (IS_LPUART_INSTANCE(config->usart)) {
 800e3d4:	6833      	ldr	r3, [r6, #0]
 800e3d6:	4a2a      	ldr	r2, [pc, #168]	; (800e480 <uart_stm32_set_baudrate+0xf8>)
		LL_USART_SetBaudRate(config->usart,
 800e3d8:	9d07      	ldr	r5, [sp, #28]
	if (IS_LPUART_INSTANCE(config->usart)) {
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d11d      	bne.n	800e41a <uart_stm32_set_baudrate+0x92>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 800e3de:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e484 <uart_stm32_set_baudrate+0xfc>
			lpuartdiv = lpuartdiv_calc(clock_rate, presc_idx, baud_rate);
 800e3e2:	2600      	movs	r6, #0
 800e3e4:	4623      	mov	r3, r4
 800e3e6:	b2b2      	uxth	r2, r6
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	f7ff ffb4 	bl	800e358 <lpuartdiv_calc>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 800e3f0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 800e3f4:	4540      	cmp	r0, r8
 800e3f6:	d91d      	bls.n	800e434 <uart_stm32_set_baudrate+0xac>
		for (presc_idx = 0; presc_idx < ARRAY_SIZE(LPUART_PRESCALER_TAB); presc_idx++) {
 800e3f8:	3601      	adds	r6, #1
 800e3fa:	2e0c      	cmp	r6, #12
 800e3fc:	d1f2      	bne.n	800e3e4 <uart_stm32_set_baudrate+0x5c>
			LOG_ERR("Unable to set %s to %d", dev->name, baud_rate);
 800e3fe:	9404      	str	r4, [sp, #16]
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	9303      	str	r3, [sp, #12]
 800e404:	4b20      	ldr	r3, [pc, #128]	; (800e488 <uart_stm32_set_baudrate+0x100>)
 800e406:	9302      	str	r3, [sp, #8]
 800e408:	2300      	movs	r3, #0
 800e40a:	e9cd 3300 	strd	r3, r3, [sp]
 800e40e:	491b      	ldr	r1, [pc, #108]	; (800e47c <uart_stm32_set_baudrate+0xf4>)
 800e410:	2201      	movs	r2, #1
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff ff8e 	bl	800e334 <z_log_msg2_runtime_create.constprop.0>
			return;
 800e418:	e7cf      	b.n	800e3ba <uart_stm32_set_baudrate+0x32>
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e420:	601a      	str	r2, [r3, #0]

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 800e422:	2c00      	cmp	r4, #0
 800e424:	d0c9      	beq.n	800e3ba <uart_stm32_set_baudrate+0x32>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800e426:	eb05 0554 	add.w	r5, r5, r4, lsr #1
 800e42a:	fbb5 f4f4 	udiv	r4, r5, r4
 800e42e:	b2a4      	uxth	r4, r4
 800e430:	60dc      	str	r4, [r3, #12]
 800e432:	e7c2      	b.n	800e3ba <uart_stm32_set_baudrate+0x32>
  *         @arg @ref LL_LPUART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetPrescaler(USART_TypeDef *LPUARTx, uint32_t PrescalerValue)
{
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800e434:	4f12      	ldr	r7, [pc, #72]	; (800e480 <uart_stm32_set_baudrate+0xf8>)
 800e436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e438:	f023 030f 	bic.w	r3, r3, #15
 800e43c:	4333      	orrs	r3, r6
 800e43e:	62fb      	str	r3, [r7, #44]	; 0x2c
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
  if (BaudRate != 0U)
 800e440:	2c00      	cmp	r4, #0
 800e442:	d0ba      	beq.n	800e3ba <uart_stm32_set_baudrate+0x32>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800e444:	4b11      	ldr	r3, [pc, #68]	; (800e48c <uart_stm32_set_baudrate+0x104>)
 800e446:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800e44a:	2300      	movs	r3, #0
 800e44c:	4619      	mov	r1, r3
 800e44e:	4628      	mov	r0, r5
 800e450:	f7f2 fdba 	bl	8000fc8 <__aeabi_uldivmod>
 800e454:	0209      	lsls	r1, r1, #8
 800e456:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800e45a:	0863      	lsrs	r3, r4, #1
 800e45c:	0200      	lsls	r0, r0, #8
 800e45e:	18c0      	adds	r0, r0, r3
 800e460:	4622      	mov	r2, r4
 800e462:	f04f 0300 	mov.w	r3, #0
 800e466:	f141 0100 	adc.w	r1, r1, #0
 800e46a:	f7f2 fdad 	bl	8000fc8 <__aeabi_uldivmod>
 800e46e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	e7a1      	b.n	800e3ba <uart_stm32_set_baudrate+0x32>
 800e476:	bf00      	nop
 800e478:	0801a57c 	.word	0x0801a57c
 800e47c:	08018120 	.word	0x08018120
 800e480:	40008000 	.word	0x40008000
 800e484:	000ffcff 	.word	0x000ffcff
 800e488:	0801a818 	.word	0x0801a818
 800e48c:	08018a86 	.word	0x08018a86

0800e490 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 800e490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800e494:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 800e496:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800e498:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 800e49a:	2b01      	cmp	r3, #1
{
 800e49c:	460c      	mov	r4, r1
	switch (parity) {
 800e49e:	d01b      	beq.n	800e4d8 <uart_stm32_configure+0x48>
		return LL_USART_PARITY_NONE;
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	bf0c      	ite	eq
 800e4a4:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 800e4a8:	f04f 0800 	movne.w	r8, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800e4ac:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800e4b0:	79a7      	ldrb	r7, [r4, #6]
 800e4b2:	f1b9 0f02 	cmp.w	r9, #2
 800e4b6:	bf96      	itet	ls
 800e4b8:	4a43      	ldrls	r2, [pc, #268]	; (800e5c8 <uart_stm32_configure+0x138>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800e4ba:	f44f 5100 	movhi.w	r1, #8192	; 0x2000
 800e4be:	f832 1019 	ldrhls.w	r1, [r2, r9, lsl #1]
	switch (db) {
 800e4c2:	2f02      	cmp	r7, #2
 800e4c4:	d00b      	beq.n	800e4de <uart_stm32_configure+0x4e>
 800e4c6:	2f04      	cmp	r7, #4
 800e4c8:	d077      	beq.n	800e5ba <uart_stm32_configure+0x12a>
			return LL_USART_DATAWIDTH_8B;
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	bf14      	ite	ne
 800e4ce:	f44f 5e80 	movne.w	lr, #4096	; 0x1000
 800e4d2:	f04f 0e00 	moveq.w	lr, #0
 800e4d6:	e008      	b.n	800e4ea <uart_stm32_configure+0x5a>
	switch (parity) {
 800e4d8:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 800e4dc:	e7e6      	b.n	800e4ac <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	bf0c      	ite	eq
 800e4e2:	f04f 5e80 	moveq.w	lr, #268435456	; 0x10000000
 800e4e6:	f04f 0e00 	movne.w	lr, #0
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800e4ea:	79e2      	ldrb	r2, [r4, #7]

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e4ec:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800e4f0:	2a01      	cmp	r2, #1
 800e4f2:	bf14      	ite	ne
 800e4f4:	f04f 0c00 	movne.w	ip, #0
 800e4f8:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e4fc:	f1ba 0f01 	cmp.w	sl, #1
 800e500:	d95e      	bls.n	800e5c0 <uart_stm32_configure+0x130>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800e502:	b10b      	cbz	r3, 800e508 <uart_stm32_configure+0x78>
 800e504:	2f04      	cmp	r7, #4
 800e506:	d05b      	beq.n	800e5c0 <uart_stm32_configure+0x130>
	    (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
		return -ENOTSUP;
	}

#if defined(LL_USART_STOPBITS_0_5) && HAS_LPUART_1
	if (IS_LPUART_INSTANCE(config->usart) &&
 800e508:	682b      	ldr	r3, [r5, #0]
 800e50a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800e5cc <uart_stm32_configure+0x13c>
 800e50e:	4553      	cmp	r3, sl
 800e510:	d102      	bne.n	800e518 <uart_stm32_configure+0x88>
 800e512:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800e516:	d053      	beq.n	800e5c0 <uart_stm32_configure+0x130>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800e518:	2f01      	cmp	r7, #1
 800e51a:	d951      	bls.n	800e5c0 <uart_stm32_configure+0x130>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800e51c:	2f04      	cmp	r7, #4
 800e51e:	d04f      	beq.n	800e5c0 <uart_stm32_configure+0x130>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800e520:	b162      	cbz	r2, 800e53c <uart_stm32_configure+0xac>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800e522:	4f2b      	ldr	r7, [pc, #172]	; (800e5d0 <uart_stm32_configure+0x140>)
 800e524:	42bb      	cmp	r3, r7
 800e526:	d007      	beq.n	800e538 <uart_stm32_configure+0xa8>
 800e528:	f5a7 4774 	sub.w	r7, r7, #62464	; 0xf400
 800e52c:	42bb      	cmp	r3, r7
 800e52e:	d003      	beq.n	800e538 <uart_stm32_configure+0xa8>
 800e530:	f507 5770 	add.w	r7, r7, #15360	; 0x3c00
 800e534:	42bb      	cmp	r3, r7
 800e536:	d143      	bne.n	800e5c0 <uart_stm32_configure+0x130>
 800e538:	2a01      	cmp	r2, #1
 800e53a:	d141      	bne.n	800e5c0 <uart_stm32_configure+0x130>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	f022 0201 	bic.w	r2, r2, #1
 800e542:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(config->usart);

	if (parity != uart_stm32_get_parity(dev)) {
 800e54a:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800e54c:	bf1f      	itttt	ne
 800e54e:	681a      	ldrne	r2, [r3, #0]
 800e550:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800e554:	ea42 0208 	orrne.w	r2, r2, r8
 800e558:	601a      	strne	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800e560:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e562:	bf1f      	itttt	ne
 800e564:	685f      	ldrne	r7, [r3, #4]
 800e566:	f427 5740 	bicne.w	r7, r7, #12288	; 0x3000
 800e56a:	430f      	orrne	r7, r1
 800e56c:	605f      	strne	r7, [r3, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 800e574:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800e576:	bf1f      	itttt	ne
 800e578:	6819      	ldrne	r1, [r3, #0]
 800e57a:	f021 2110 	bicne.w	r1, r1, #268439552	; 0x10001000
 800e57e:	ea41 010e 	orrne.w	r1, r1, lr
 800e582:	6019      	strne	r1, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800e584:	689a      	ldr	r2, [r3, #8]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800e586:	6821      	ldr	r1, [r4, #0]
 800e588:	f402 7240 	and.w	r2, r2, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800e58c:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e58e:	bf1f      	itttt	ne
 800e590:	689a      	ldrne	r2, [r3, #8]
 800e592:	f422 7240 	bicne.w	r2, r2, #768	; 0x300
 800e596:	ea42 020c 	orrne.w	r2, r2, ip
 800e59a:	609a      	strne	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 800e59c:	6833      	ldr	r3, [r6, #0]
 800e59e:	4299      	cmp	r1, r3
 800e5a0:	d003      	beq.n	800e5aa <uart_stm32_configure+0x11a>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800e5a2:	f7ff fef1 	bl	800e388 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	6033      	str	r3, [r6, #0]
	}

	LL_USART_Enable(config->usart);
 800e5aa:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e5ac:	6813      	ldr	r3, [r2, #0]
 800e5ae:	f043 0301 	orr.w	r3, r3, #1
 800e5b2:	6013      	str	r3, [r2, #0]
	return 0;
 800e5b4:	2000      	movs	r0, #0
};
 800e5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 800e5ba:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 800e5be:	e794      	b.n	800e4ea <uart_stm32_configure+0x5a>
		return -ENOTSUP;
 800e5c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800e5c4:	e7f7      	b.n	800e5b6 <uart_stm32_configure+0x126>
 800e5c6:	bf00      	nop
 800e5c8:	08018a80 	.word	0x08018a80
 800e5cc:	40008000 	.word	0x40008000
 800e5d0:	40013800 	.word	0x40013800

0800e5d4 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800e5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
 800e5d8:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800e5da:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 800e5dc:	4c3e      	ldr	r4, [pc, #248]	; (800e6d8 <uart_stm32_init+0x104>)
 800e5de:	607c      	str	r4, [r7, #4]
{
 800e5e0:	b086      	sub	sp, #24
 800e5e2:	4606      	mov	r6, r0
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
 800e5e4:	f105 0804 	add.w	r8, r5, #4
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f008 fd9a 	bl	8017122 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d06c      	beq.n	800e6cc <uart_stm32_init+0xf8>
	return api->on(dev, sys);
 800e5f2:	68a3      	ldr	r3, [r4, #8]
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4641      	mov	r1, r8
 800e5fa:	4798      	blx	r3
	if (clock_control_on(data->clock,
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d164      	bne.n	800e6cc <uart_stm32_init+0xf8>
	ret = pinctrl_lookup_state(config, id, &state);
 800e602:	4601      	mov	r1, r0
 800e604:	466a      	mov	r2, sp
 800e606:	69a8      	ldr	r0, [r5, #24]
 800e608:	f007 fb6a 	bl	8015ce0 <pinctrl_lookup_state>
	if (ret < 0) {
 800e60c:	2800      	cmp	r0, #0
 800e60e:	db5f      	blt.n	800e6d0 <uart_stm32_init+0xfc>
	return pinctrl_apply_state_direct(config, state);
 800e610:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800e612:	4622      	mov	r2, r4
 800e614:	7919      	ldrb	r1, [r3, #4]
 800e616:	6818      	ldr	r0, [r3, #0]
 800e618:	f000 f960 	bl	800e8dc <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800e61c:	2800      	cmp	r0, #0
 800e61e:	db57      	blt.n	800e6d0 <uart_stm32_init+0xfc>
		return err;
	}

	LL_USART_Disable(config->usart);
 800e620:	682a      	ldr	r2, [r5, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800e622:	6813      	ldr	r3, [r2, #0]
 800e624:	f023 0301 	bic.w	r3, r3, #1
 800e628:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800e62e:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e632:	e842 3400 	strex	r4, r3, [r2]
 800e636:	2c00      	cmp	r4, #0
 800e638:	d1f7      	bne.n	800e62a <uart_stm32_init+0x56>
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800e63a:	692b      	ldr	r3, [r5, #16]
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d010      	beq.n	800e662 <uart_stm32_init+0x8e>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800e640:	2b01      	cmp	r3, #1
 800e642:	d03e      	beq.n	800e6c2 <uart_stm32_init+0xee>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 800e644:	b15b      	cbz	r3, 800e65e <uart_stm32_init+0x8a>
			LOG_WRN("Invalid parity setting '%d'."
 800e646:	4a25      	ldr	r2, [pc, #148]	; (800e6dc <uart_stm32_init+0x108>)
 800e648:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e64c:	2303      	movs	r3, #3
 800e64e:	9303      	str	r3, [sp, #12]
 800e650:	4823      	ldr	r0, [pc, #140]	; (800e6e0 <uart_stm32_init+0x10c>)
 800e652:	4623      	mov	r3, r4
 800e654:	aa03      	add	r2, sp, #12
 800e656:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800e65a:	f003 ff9f 	bl	801259c <z_impl_z_log_msg2_static_create>
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800e65e:	4622      	mov	r2, r4
 800e660:	e003      	b.n	800e66a <uart_stm32_init+0x96>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800e662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800e666:	f44f 6480 	mov.w	r4, #1024	; 0x400
	}

	/* Set datawidth and parity, 1 start bit, 1 stop bit  */
	LL_USART_ConfigCharacter(config->usart,
 800e66a:	6829      	ldr	r1, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800e66c:	680b      	ldr	r3, [r1, #0]
 800e66e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e672:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e676:	4314      	orrs	r4, r2
 800e678:	4323      	orrs	r3, r4
 800e67a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e67c:	684b      	ldr	r3, [r1, #4]
 800e67e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e682:	604b      	str	r3, [r1, #4]
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800e684:	7b2b      	ldrb	r3, [r5, #12]
 800e686:	b12b      	cbz	r3, 800e694 <uart_stm32_init+0xc0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 800e688:	6873      	ldr	r3, [r6, #4]
 800e68a:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e68c:	6893      	ldr	r3, [r2, #8]
 800e68e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e692:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800e694:	6839      	ldr	r1, [r7, #0]
 800e696:	4630      	mov	r0, r6
 800e698:	f7ff fe76 	bl	800e388 <uart_stm32_set_baudrate>

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 800e69c:	7d2a      	ldrb	r2, [r5, #20]
 800e69e:	682b      	ldr	r3, [r5, #0]
 800e6a0:	b11a      	cbz	r2, 800e6aa <uart_stm32_init+0xd6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800e6a2:	689a      	ldr	r2, [r3, #8]
 800e6a4:	f042 0208 	orr.w	r2, r2, #8
 800e6a8:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	f042 0201 	orr.w	r2, r2, #1
 800e6b0:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800e6b2:	69da      	ldr	r2, [r3, #28]
 800e6b4:	0291      	lsls	r1, r2, #10
 800e6b6:	d5fc      	bpl.n	800e6b2 <uart_stm32_init+0xde>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800e6b8:	69da      	ldr	r2, [r3, #28]
 800e6ba:	0252      	lsls	r2, r2, #9
 800e6bc:	d5fc      	bpl.n	800e6b8 <uart_stm32_init+0xe4>
#endif /* CONFIG_PM || CONFIG_UART_INTERRUPT_DRIVEN || CONFIG_UART_ASYNC_API */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
 800e6be:	2000      	movs	r0, #0
 800e6c0:	e006      	b.n	800e6d0 <uart_stm32_init+0xfc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800e6c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800e6c6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800e6ca:	e7ce      	b.n	800e66a <uart_stm32_init+0x96>
		return -EIO;
 800e6cc:	f06f 0004 	mvn.w	r0, #4
#endif
}
 800e6d0:	b006      	add	sp, #24
 800e6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d6:	bf00      	nop
 800e6d8:	08017cb8 	.word	0x08017cb8
 800e6dc:	0801a82f 	.word	0x0801a82f
 800e6e0:	08018120 	.word	0x08018120

0800e6e4 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800e6e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800e6e8:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800e6ea:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800e6ec:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800e6ee:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800e6f0:	4b09      	ldr	r3, [pc, #36]	; (800e718 <elapsed+0x34>)
 800e6f2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800e6f6:	4909      	ldr	r1, [pc, #36]	; (800e71c <elapsed+0x38>)
 800e6f8:	d101      	bne.n	800e6fe <elapsed+0x1a>
	    || (val1 < val2)) {
 800e6fa:	4282      	cmp	r2, r0
 800e6fc:	d206      	bcs.n	800e70c <elapsed+0x28>
		overflow_cyc += last_load;
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	680c      	ldr	r4, [r1, #0]
 800e702:	4422      	add	r2, r4
 800e704:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800e706:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e70a:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	680a      	ldr	r2, [r1, #0]
 800e710:	4413      	add	r3, r2
}
 800e712:	1a18      	subs	r0, r3, r0
 800e714:	bd10      	pop	{r4, pc}
 800e716:	bf00      	nop
 800e718:	20002244 	.word	0x20002244
 800e71c:	20002240 	.word	0x20002240

0800e720 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e720:	4b09      	ldr	r3, [pc, #36]	; (800e748 <sys_clock_driver_init+0x28>)
 800e722:	2210      	movs	r2, #16
 800e724:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800e728:	4b08      	ldr	r3, [pc, #32]	; (800e74c <sys_clock_driver_init+0x2c>)
 800e72a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800e72e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <sys_clock_driver_init+0x30>)
 800e732:	2000      	movs	r0, #0
 800e734:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800e736:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e73a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800e73c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800e73e:	691a      	ldr	r2, [r3, #16]
 800e740:	f042 0207 	orr.w	r2, r2, #7
 800e744:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800e746:	4770      	bx	lr
 800e748:	e000ed00 	.word	0xe000ed00
 800e74c:	20002240 	.word	0x20002240
 800e750:	20002244 	.word	0x20002244

0800e754 <sys_clock_isr>:
{
 800e754:	b508      	push	{r3, lr}
	elapsed();
 800e756:	f7ff ffc5 	bl	800e6e4 <elapsed>
	cycle_count += overflow_cyc;
 800e75a:	4b0c      	ldr	r3, [pc, #48]	; (800e78c <sys_clock_isr+0x38>)
 800e75c:	4a0c      	ldr	r2, [pc, #48]	; (800e790 <sys_clock_isr+0x3c>)
 800e75e:	6818      	ldr	r0, [r3, #0]
 800e760:	6811      	ldr	r1, [r2, #0]
 800e762:	4408      	add	r0, r1
 800e764:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800e766:	2200      	movs	r2, #0
 800e768:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800e76a:	4a0a      	ldr	r2, [pc, #40]	; (800e794 <sys_clock_isr+0x40>)
 800e76c:	6813      	ldr	r3, [r2, #0]
 800e76e:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 800e772:	1ac0      	subs	r0, r0, r3
 800e774:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 800e778:	fb01 3300 	mla	r3, r1, r0, r3
 800e77c:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800e77e:	f002 f9a1 	bl	8010ac4 <sys_clock_announce>
}
 800e782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800e786:	f7f6 ba3d 	b.w	8004c04 <z_arm_exc_exit>
 800e78a:	bf00      	nop
 800e78c:	20002244 	.word	0x20002244
 800e790:	2000223c 	.word	0x2000223c
 800e794:	20002238 	.word	0x20002238

0800e798 <sys_clock_set_timeout>:
{
 800e798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79a:	4c31      	ldr	r4, [pc, #196]	; (800e860 <sys_clock_set_timeout+0xc8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800e79c:	b159      	cbz	r1, 800e7b6 <sys_clock_set_timeout+0x1e>
 800e79e:	1c42      	adds	r2, r0, #1
 800e7a0:	d109      	bne.n	800e7b6 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800e7a2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e7a6:	6913      	ldr	r3, [r2, #16]
 800e7a8:	f023 0301 	bic.w	r3, r3, #1
 800e7ac:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800e7ae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800e7b2:	6023      	str	r3, [r4, #0]
}
 800e7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800e7b6:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 800e7b8:	6826      	ldr	r6, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800e7ba:	d023      	beq.n	800e804 <sys_clock_set_timeout+0x6c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800e7bc:	2801      	cmp	r0, #1
 800e7be:	dd24      	ble.n	800e80a <sys_clock_set_timeout+0x72>
 800e7c0:	f640 53a6 	movw	r3, #3494	; 0xda6
 800e7c4:	4298      	cmp	r0, r3
 800e7c6:	dc22      	bgt.n	800e80e <sys_clock_set_timeout+0x76>
 800e7c8:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 800e7ca:	f04f 0310 	mov.w	r3, #16
 800e7ce:	f3ef 8511 	mrs	r5, BASEPRI
 800e7d2:	f383 8812 	msr	BASEPRI_MAX, r3
 800e7d6:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800e7da:	f7ff ff83 	bl	800e6e4 <elapsed>
	cycle_count += pending;
 800e7de:	4921      	ldr	r1, [pc, #132]	; (800e864 <sys_clock_set_timeout+0xcc>)
	val1 = SysTick->VAL;
 800e7e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 800e7e4:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 800e7e6:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 800e7ea:	680b      	ldr	r3, [r1, #0]
 800e7ec:	4418      	add	r0, r3
	overflow_cyc = 0U;
 800e7ee:	4b1e      	ldr	r3, [pc, #120]	; (800e868 <sys_clock_set_timeout+0xd0>)
	cycle_count += pending;
 800e7f0:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 800e7f2:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800e7f4:	4b1d      	ldr	r3, [pc, #116]	; (800e86c <sys_clock_set_timeout+0xd4>)
 800e7f6:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800e7f8:	1a83      	subs	r3, r0, r2
 800e7fa:	d50a      	bpl.n	800e812 <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 800e7fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	e019      	b.n	800e838 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800e804:	f640 50a6 	movw	r0, #3494	; 0xda6
 800e808:	e7de      	b.n	800e7c8 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800e80a:	2700      	movs	r7, #0
 800e80c:	e7dd      	b.n	800e7ca <sys_clock_set_timeout+0x32>
 800e80e:	461f      	mov	r7, r3
 800e810:	e7db      	b.n	800e7ca <sys_clock_set_timeout+0x32>
		delay = ticks * CYC_PER_TICK;
 800e812:	f44f 5e96 	mov.w	lr, #4800	; 0x12c0
		delay += unannounced;
 800e816:	fb0e 3307 	mla	r3, lr, r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800e81a:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
		delay -= unannounced;
 800e81e:	1a12      	subs	r2, r2, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800e820:	331f      	adds	r3, #31
 800e822:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 800e826:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 800e82a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e82e:	d9e5      	bls.n	800e7fc <sys_clock_set_timeout+0x64>
		if (delay > MAX_CYCLES) {
 800e830:	4a0f      	ldr	r2, [pc, #60]	; (800e870 <sys_clock_set_timeout+0xd8>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d9e4      	bls.n	800e800 <sys_clock_set_timeout+0x68>
			last_load = MAX_CYCLES;
 800e836:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 800e838:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 800e83c:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 800e83e:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 800e840:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 800e842:	bf38      	it	cc
 800e844:	44b4      	addcc	ip, r6
	SysTick->LOAD = last_load - 1;
 800e846:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 800e848:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 800e84c:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 800e84e:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 800e850:	2400      	movs	r4, #0
 800e852:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 800e854:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 800e856:	f385 8811 	msr	BASEPRI, r5
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	e7a9      	b.n	800e7b4 <sys_clock_set_timeout+0x1c>
 800e860:	20002240 	.word	0x20002240
 800e864:	2000223c 	.word	0x2000223c
 800e868:	20002244 	.word	0x20002244
 800e86c:	20002238 	.word	0x20002238
 800e870:	00ffe880 	.word	0x00ffe880

0800e874 <sys_clock_elapsed>:
{
 800e874:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e876:	f04f 0310 	mov.w	r3, #16
 800e87a:	f3ef 8411 	mrs	r4, BASEPRI
 800e87e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e882:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800e886:	f7ff ff2d 	bl	800e6e4 <elapsed>
 800e88a:	4b07      	ldr	r3, [pc, #28]	; (800e8a8 <sys_clock_elapsed+0x34>)
 800e88c:	4a07      	ldr	r2, [pc, #28]	; (800e8ac <sys_clock_elapsed+0x38>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6812      	ldr	r2, [r2, #0]
 800e892:	1a9b      	subs	r3, r3, r2
 800e894:	4403      	add	r3, r0
	__asm__ volatile(
 800e896:	f384 8811 	msr	BASEPRI, r4
 800e89a:	f3bf 8f6f 	isb	sy
}
 800e89e:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800e8a2:	fbb3 f0f0 	udiv	r0, r3, r0
 800e8a6:	bd10      	pop	{r4, pc}
 800e8a8:	2000223c 	.word	0x2000223c
 800e8ac:	20002238 	.word	0x20002238

0800e8b0 <sys_clock_cycle_get_32>:
{
 800e8b0:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e8b2:	f04f 0310 	mov.w	r3, #16
 800e8b6:	f3ef 8411 	mrs	r4, BASEPRI
 800e8ba:	f383 8812 	msr	BASEPRI_MAX, r3
 800e8be:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800e8c2:	f7ff ff0f 	bl	800e6e4 <elapsed>
 800e8c6:	4b04      	ldr	r3, [pc, #16]	; (800e8d8 <sys_clock_cycle_get_32+0x28>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4418      	add	r0, r3
	__asm__ volatile(
 800e8cc:	f384 8811 	msr	BASEPRI, r4
 800e8d0:	f3bf 8f6f 	isb	sy
}
 800e8d4:	bd10      	pop	{r4, pc}
 800e8d6:	bf00      	nop
 800e8d8:	2000223c 	.word	0x2000223c

0800e8dc <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800e8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 800e8e0:	4f1c      	ldr	r7, [pc, #112]	; (800e954 <pinctrl_configure_pins+0x78>)
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t func = 0;
 800e8e8:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800e8ea:	42b4      	cmp	r4, r6
 800e8ec:	d101      	bne.n	800e8f2 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	e014      	b.n	800e91c <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 800e8f2:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800e8f4:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800e8f6:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800e8fa:	d411      	bmi.n	800e920 <pinctrl_configure_pins+0x44>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800e8fc:	6865      	ldr	r5, [r4, #4]
 800e8fe:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800e902:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800e906:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800e90a:	280a      	cmp	r0, #10
 800e90c:	d81e      	bhi.n	800e94c <pinctrl_configure_pins+0x70>
	port_device = gpio_ports[STM32_PORT(pin)];
 800e90e:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800e912:	f1b8 0f00 	cmp.w	r8, #0
 800e916:	d108      	bne.n	800e92a <pinctrl_configure_pins+0x4e>
		return -ENODEV;
 800e918:	f06f 0012 	mvn.w	r0, #18
}
 800e91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			func = STM32_MODER_ANALOG_MODE;
 800e920:	f1b9 0f10 	cmp.w	r9, #16
 800e924:	bf08      	it	eq
 800e926:	2530      	moveq	r5, #48	; 0x30
 800e928:	e7eb      	b.n	800e902 <pinctrl_configure_pins+0x26>
 800e92a:	4640      	mov	r0, r8
 800e92c:	f008 fbf9 	bl	8017122 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800e930:	2800      	cmp	r0, #0
 800e932:	d0f1      	beq.n	800e918 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800e934:	464b      	mov	r3, r9
 800e936:	462a      	mov	r2, r5
 800e938:	f00a 010f 	and.w	r1, sl, #15
 800e93c:	4640      	mov	r0, r8
 800e93e:	f006 fbe5 	bl	801510c <gpio_stm32_configure>
		if (ret < 0) {
 800e942:	2800      	cmp	r0, #0
 800e944:	f104 0408 	add.w	r4, r4, #8
 800e948:	dacf      	bge.n	800e8ea <pinctrl_configure_pins+0xe>
 800e94a:	e7e7      	b.n	800e91c <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800e94c:	f06f 0015 	mvn.w	r0, #21
 800e950:	e7e4      	b.n	800e91c <pinctrl_configure_pins+0x40>
 800e952:	bf00      	nop
 800e954:	08018934 	.word	0x08018934

0800e958 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800e958:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800e95a:	6804      	ldr	r4, [r0, #0]
{
 800e95c:	4605      	mov	r5, r0
	if (!tp) return vol;	/* Invalid path name? */
 800e95e:	b37c      	cbz	r4, 800e9c0 <get_ldnumber+0x68>
 800e960:	4621      	mov	r1, r4
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
 800e962:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e966:	2b20      	cmp	r3, #32
 800e968:	d92d      	bls.n	800e9c6 <get_ldnumber+0x6e>
 800e96a:	2b3a      	cmp	r3, #58	; 0x3a
 800e96c:	d1f9      	bne.n	800e962 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800e96e:	7820      	ldrb	r0, [r4, #0]
 800e970:	3830      	subs	r0, #48	; 0x30
 800e972:	b2c3      	uxtb	r3, r0
 800e974:	2b09      	cmp	r3, #9
 800e976:	d91e      	bls.n	800e9b6 <get_ldnumber+0x5e>
 800e978:	4f16      	ldr	r7, [pc, #88]	; (800e9d4 <get_ldnumber+0x7c>)
 800e97a:	2000      	movs	r0, #0
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
 800e97c:	f857 cb04 	ldr.w	ip, [r7], #4
 800e980:	4626      	mov	r6, r4
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
 800e982:	f81c 3b01 	ldrb.w	r3, [ip], #1
 800e986:	f816 2b01 	ldrb.w	r2, [r6], #1
					if (IsLower(c)) c -= 0x20;
 800e98a:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 800e98e:	f1be 0f19 	cmp.w	lr, #25
 800e992:	bf98      	it	ls
 800e994:	3b20      	subls	r3, #32
					if (IsLower(tc)) tc -= 0x20;
 800e996:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
					if (IsLower(c)) c -= 0x20;
 800e99a:	bf98      	it	ls
 800e99c:	b2db      	uxtbls	r3, r3
					if (IsLower(tc)) tc -= 0x20;
 800e99e:	f1be 0f19 	cmp.w	lr, #25
 800e9a2:	bf9c      	itt	ls
 800e9a4:	3a20      	subls	r2, #32
 800e9a6:	b2d2      	uxtbls	r2, r2
				} while (c && (TCHAR)c == tc);
 800e9a8:	b17b      	cbz	r3, 800e9ca <get_ldnumber+0x72>
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d0e9      	beq.n	800e982 <get_ldnumber+0x2a>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	2808      	cmp	r0, #8
 800e9b2:	d1e3      	bne.n	800e97c <get_ldnumber+0x24>
 800e9b4:	e004      	b.n	800e9c0 <get_ldnumber+0x68>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800e9b6:	1ca3      	adds	r3, r4, #2
 800e9b8:	4299      	cmp	r1, r3
 800e9ba:	d1dd      	bne.n	800e978 <get_ldnumber+0x20>
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800e9bc:	2807      	cmp	r0, #7
 800e9be:	dd06      	ble.n	800e9ce <get_ldnumber+0x76>
	if (!tp) return vol;	/* Invalid path name? */
 800e9c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9c4:	e004      	b.n	800e9d0 <get_ldnumber+0x78>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	e002      	b.n	800e9d0 <get_ldnumber+0x78>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 800e9ca:	42b1      	cmp	r1, r6
 800e9cc:	d1ef      	bne.n	800e9ae <get_ldnumber+0x56>
			*path = tt;		/* Snip the drive prefix off */
 800e9ce:	6029      	str	r1, [r5, #0]
}
 800e9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	08018960 	.word	0x08018960

0800e9d8 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800e9d8:	b538      	push	{r3, r4, r5, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800e9da:	2300      	movs	r3, #0
 800e9dc:	70c3      	strb	r3, [r0, #3]
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9e2:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800e9e4:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800e9e6:	f007 f9f2 	bl	8015dce <move_window>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d146      	bne.n	800ea7c <check_fs+0xa4>
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800e9ee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e9f2:	f8b4 522e 	ldrh.w	r5, [r4, #558]	; 0x22e
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800e9f6:	2beb      	cmp	r3, #235	; 0xeb
 800e9f8:	d00a      	beq.n	800ea10 <check_fs+0x38>
 800e9fa:	3318      	adds	r3, #24
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d906      	bls.n	800ea10 <check_fs+0x38>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800ea02:	f64a 2055 	movw	r0, #43605	; 0xaa55
 800ea06:	4285      	cmp	r5, r0
 800ea08:	bf0c      	ite	eq
 800ea0a:	2002      	moveq	r0, #2
 800ea0c:	2003      	movne	r0, #3
}
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800ea10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ea14:	429d      	cmp	r5, r3
 800ea16:	d027      	beq.n	800ea68 <check_fs+0x90>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800ea18:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 800ea1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea20:	d1ef      	bne.n	800ea02 <check_fs+0x2a>
		b = fs->win[BPB_SecPerClus];
 800ea22:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d0eb      	beq.n	800ea02 <check_fs+0x2a>
 800ea2a:	1e5a      	subs	r2, r3, #1
 800ea2c:	421a      	tst	r2, r3
 800ea2e:	d1e8      	bne.n	800ea02 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800ea30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d0e5      	beq.n	800ea02 <check_fs+0x2a>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800ea36:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d8e0      	bhi.n	800ea02 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800ea40:	f8b4 3041 	ldrh.w	r3, [r4, #65]	; 0x41
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d0dc      	beq.n	800ea02 <check_fs+0x2a>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800ea48:	f8b4 3043 	ldrh.w	r3, [r4, #67]	; 0x43
 800ea4c:	2b7f      	cmp	r3, #127	; 0x7f
 800ea4e:	d806      	bhi.n	800ea5e <check_fs+0x86>
 800ea50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea54:	f007 f95c 	bl	8015d10 <ld_dword>
 800ea58:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800ea5c:	d3d1      	bcc.n	800ea02 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800ea5e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d0cd      	beq.n	800ea02 <check_fs+0x2a>
 800ea66:	e007      	b.n	800ea78 <check_fs+0xa0>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800ea68:	4905      	ldr	r1, [pc, #20]	; (800ea80 <check_fs+0xa8>)
 800ea6a:	2208      	movs	r2, #8
 800ea6c:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800ea70:	f008 fecd 	bl	801780e <memcmp>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d1cf      	bne.n	800ea18 <check_fs+0x40>
			return 0;	/* It is an FAT32 VBR */
 800ea78:	2000      	movs	r0, #0
 800ea7a:	e7c8      	b.n	800ea0e <check_fs+0x36>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800ea7c:	2004      	movs	r0, #4
 800ea7e:	e7c6      	b.n	800ea0e <check_fs+0x36>
 800ea80:	0801a89b 	.word	0x0801a89b

0800ea84 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 800ea84:	b5f0      	push	{r4, r5, r6, r7, lr}
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800ea86:	2300      	movs	r3, #0
{
 800ea88:	b085      	sub	sp, #20
	*rfs = 0;
 800ea8a:	600b      	str	r3, [r1, #0]
{
 800ea8c:	460f      	mov	r7, r1
 800ea8e:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800ea90:	f7ff ff62 	bl	800e958 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea94:	1e06      	subs	r6, r0, #0
 800ea96:	f2c0 8101 	blt.w	800ec9c <mount_volume+0x218>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800ea9a:	4b87      	ldr	r3, [pc, #540]	; (800ecb8 <mount_volume+0x234>)
 800ea9c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800eaa0:	2c00      	cmp	r4, #0
 800eaa2:	f000 80fd 	beq.w	800eca0 <mount_volume+0x21c>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800eaa6:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800eaa8:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eaaa:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800eaae:	b163      	cbz	r3, 800eaca <mount_volume+0x46>
		stat = disk_status(fs->pdrv);
 800eab0:	7860      	ldrb	r0, [r4, #1]
 800eab2:	f000 fd6f 	bl	800f594 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eab6:	07c7      	lsls	r7, r0, #31
 800eab8:	d407      	bmi.n	800eaca <mount_volume+0x46>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eaba:	b11d      	cbz	r5, 800eac4 <mount_volume+0x40>
 800eabc:	f010 0504 	ands.w	r5, r0, #4
 800eac0:	d000      	beq.n	800eac4 <mount_volume+0x40>
				return FR_WRITE_PROTECTED;
 800eac2:	250a      	movs	r5, #10
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800eac4:	4628      	mov	r0, r5
 800eac6:	b005      	add	sp, #20
 800eac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800eaca:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
 800eacc:	2300      	movs	r3, #0
 800eace:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800ead0:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800ead2:	f000 fd6b 	bl	800f5ac <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ead6:	07c6      	lsls	r6, r0, #31
 800ead8:	f100 80e4 	bmi.w	800eca4 <mount_volume+0x220>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eadc:	b10d      	cbz	r5, 800eae2 <mount_volume+0x5e>
 800eade:	0741      	lsls	r1, r0, #29
 800eae0:	d4ef      	bmi.n	800eac2 <mount_volume+0x3e>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800eae2:	2100      	movs	r1, #0
 800eae4:	4620      	mov	r0, r4
 800eae6:	f7ff ff77 	bl	800e9d8 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800eaea:	2802      	cmp	r0, #2
 800eaec:	f040 80c0 	bne.w	800ec70 <mount_volume+0x1ec>
 800eaf0:	466e      	mov	r6, sp
 800eaf2:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 800eaf6:	f204 2136 	addw	r1, r4, #566	; 0x236
 800eafa:	4632      	mov	r2, r6
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800eafc:	4618      	mov	r0, r3
 800eafe:	f007 f907 	bl	8015d10 <ld_dword>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800eb02:	3310      	adds	r3, #16
 800eb04:	428b      	cmp	r3, r1
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800eb06:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800eb0a:	d1f7      	bne.n	800eafc <mount_volume+0x78>
 800eb0c:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800eb0e:	f856 1b04 	ldr.w	r1, [r6], #4
 800eb12:	2900      	cmp	r1, #0
 800eb14:	f000 80a3 	beq.w	800ec5e <mount_volume+0x1da>
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f7ff ff5d 	bl	800e9d8 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800eb1e:	2801      	cmp	r0, #1
 800eb20:	f200 809e 	bhi.w	800ec60 <mount_volume+0x1dc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eb24:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 800eb28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb2c:	f040 80a5 	bne.w	800ec7a <mount_volume+0x1f6>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eb30:	f8b4 6046 	ldrh.w	r6, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800eb34:	b926      	cbnz	r6, 800eb40 <mount_volume+0xbc>
 800eb36:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800eb3a:	f007 f8e9 	bl	8015d10 <ld_dword>
 800eb3e:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eb40:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	bsect = fs->winsect;					/* Volume offset */
 800eb44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		fs->fsize = fasize;
 800eb46:	61a6      	str	r6, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eb48:	1e5a      	subs	r2, r3, #1
 800eb4a:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eb4c:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eb4e:	f200 8094 	bhi.w	800ec7a <mount_volume+0x1f6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eb52:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 800eb56:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	f000 808e 	beq.w	800ec7a <mount_volume+0x1f6>
 800eb5e:	1e6a      	subs	r2, r5, #1
 800eb60:	422a      	tst	r2, r5
 800eb62:	f040 808a 	bne.w	800ec7a <mount_volume+0x1f6>
	rv = ptr[1];
 800eb66:	f8b4 7041 	ldrh.w	r7, [r4, #65]	; 0x41
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eb6a:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800eb6c:	073a      	lsls	r2, r7, #28
 800eb6e:	f040 8084 	bne.w	800ec7a <mount_volume+0x1f6>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eb72:	f8b4 0043 	ldrh.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eb76:	b918      	cbnz	r0, 800eb80 <mount_volume+0xfc>
 800eb78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb7c:	f007 f8c8 	bl	8015d10 <ld_dword>
	rv = ptr[1];
 800eb80:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eb82:	2a00      	cmp	r2, #0
 800eb84:	d079      	beq.n	800ec7a <mount_volume+0x1f6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eb86:	fb06 fe03 	mul.w	lr, r6, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eb8a:	eb02 1c17 	add.w	ip, r2, r7, lsr #4
 800eb8e:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eb90:	4560      	cmp	r0, ip
 800eb92:	d372      	bcc.n	800ec7a <mount_volume+0x1f6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eb94:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eb98:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eb9a:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eb9e:	d36c      	bcc.n	800ec7a <mount_volume+0x1f6>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800eba0:	4846      	ldr	r0, [pc, #280]	; (800ecbc <mount_volume+0x238>)
 800eba2:	4283      	cmp	r3, r0
 800eba4:	d869      	bhi.n	800ec7a <mount_volume+0x1f6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eba6:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800ebaa:	4283      	cmp	r3, r0
 800ebac:	d97c      	bls.n	800eca8 <mount_volume+0x224>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800ebae:	2503      	movs	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ebb0:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ebb2:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
 800ebb4:	eb01 000c 	add.w	r0, r1, ip
		if (fmt == FS_FAT32) {
 800ebb8:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ebba:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ebbc:	61e1      	str	r1, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ebbe:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ebc0:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ebc2:	d15c      	bne.n	800ec7e <mount_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 800ebc4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ebc8:	433a      	orrs	r2, r7
 800ebca:	d156      	bne.n	800ec7a <mount_volume+0x1f6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ebcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ebd0:	f007 f89e 	bl	8015d10 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ebd4:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ebd6:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ebd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ebdc:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 800ebe0:	d34b      	bcc.n	800ec7a <mount_volume+0x1f6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ebe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebe6:	e9c4 3303 	strd	r3, r3, [r4, #12]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800ebea:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
 800ebec:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ebf0:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800ebf2:	d12b      	bne.n	800ec4c <mount_volume+0x1c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ebf4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d127      	bne.n	800ec4c <mount_volume+0x1c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ebfc:	3101      	adds	r1, #1
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f007 f8e5 	bl	8015dce <move_window>
 800ec04:	bb10      	cbnz	r0, 800ec4c <mount_volume+0x1c8>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800ec06:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 800ec0a:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800ec0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d11b      	bne.n	800ec4c <mount_volume+0x1c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ec14:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800ec18:	f007 f87a 	bl	8015d10 <ld_dword>
 800ec1c:	4b28      	ldr	r3, [pc, #160]	; (800ecc0 <mount_volume+0x23c>)
 800ec1e:	4298      	cmp	r0, r3
 800ec20:	d114      	bne.n	800ec4c <mount_volume+0x1c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ec22:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800ec26:	f007 f873 	bl	8015d10 <ld_dword>
 800ec2a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800ec2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ec32:	3320      	adds	r3, #32
 800ec34:	4298      	cmp	r0, r3
 800ec36:	d109      	bne.n	800ec4c <mount_volume+0x1c8>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ec38:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800ec3c:	f007 f868 	bl	8015d10 <ld_dword>
 800ec40:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ec42:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800ec46:	f007 f863 	bl	8015d10 <ld_dword>
 800ec4a:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
 800ec4c:	4a1d      	ldr	r2, [pc, #116]	; (800ecc4 <mount_volume+0x240>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 800ec4e:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800ec50:	8813      	ldrh	r3, [r2, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	8013      	strh	r3, [r2, #0]
 800ec58:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800ec5a:	2500      	movs	r5, #0
 800ec5c:	e732      	b.n	800eac4 <mount_volume+0x40>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800ec5e:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800ec60:	3501      	adds	r5, #1
 800ec62:	2d04      	cmp	r5, #4
 800ec64:	f47f af53 	bne.w	800eb0e <mount_volume+0x8a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ec68:	2804      	cmp	r0, #4
 800ec6a:	d106      	bne.n	800ec7a <mount_volume+0x1f6>
 800ec6c:	2501      	movs	r5, #1
 800ec6e:	e729      	b.n	800eac4 <mount_volume+0x40>
 800ec70:	2804      	cmp	r0, #4
 800ec72:	d0fb      	beq.n	800ec6c <mount_volume+0x1e8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ec74:	2801      	cmp	r0, #1
 800ec76:	f67f af55 	bls.w	800eb24 <mount_volume+0xa0>
 800ec7a:	250d      	movs	r5, #13
 800ec7c:	e722      	b.n	800eac4 <mount_volume+0x40>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ec7e:	2f00      	cmp	r7, #0
 800ec80:	d0fb      	beq.n	800ec7a <mount_volume+0x1f6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ec82:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ec84:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ec86:	6262      	str	r2, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ec88:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ec8c:	bf1b      	ittet	ne
 800ec8e:	18d2      	addne	r2, r2, r3
 800ec90:	f003 0301 	andne.w	r3, r3, #1
 800ec94:	4613      	moveq	r3, r2
 800ec96:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800ec9a:	e79d      	b.n	800ebd8 <mount_volume+0x154>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec9c:	250b      	movs	r5, #11
 800ec9e:	e711      	b.n	800eac4 <mount_volume+0x40>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800eca0:	250c      	movs	r5, #12
 800eca2:	e70f      	b.n	800eac4 <mount_volume+0x40>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eca4:	2503      	movs	r5, #3
 800eca6:	e70d      	b.n	800eac4 <mount_volume+0x40>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eca8:	f640 75f5 	movw	r5, #4085	; 0xff5
 800ecac:	42ab      	cmp	r3, r5
 800ecae:	bf8c      	ite	hi
 800ecb0:	2502      	movhi	r5, #2
 800ecb2:	2501      	movls	r5, #1
 800ecb4:	e77c      	b.n	800ebb0 <mount_volume+0x12c>
 800ecb6:	bf00      	nop
 800ecb8:	20002248 	.word	0x20002248
 800ecbc:	0ffffff5 	.word	0x0ffffff5
 800ecc0:	41615252 	.word	0x41615252
 800ecc4:	200022b4 	.word	0x200022b4

0800ecc8 <follow_path>:
{
 800ecc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800eccc:	f8d0 b000 	ldr.w	fp, [r0]
{
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	460d      	mov	r5, r1
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800ecd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecd8:	2b2f      	cmp	r3, #47	; 0x2f
 800ecda:	d0fa      	beq.n	800ecd2 <follow_path+0xa>
 800ecdc:	2b5c      	cmp	r3, #92	; 0x5c
 800ecde:	d0f8      	beq.n	800ecd2 <follow_path+0xa>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800ece0:	2300      	movs	r3, #0
 800ece2:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ece4:	782b      	ldrb	r3, [r5, #0]
 800ece6:	2b1f      	cmp	r3, #31
 800ece8:	d956      	bls.n	800ed98 <follow_path+0xd0>
	p = *path; sfn = dp->fn;
 800ecea:	f104 0720 	add.w	r7, r4, #32
 800ecee:	f04f 3a20 	mov.w	sl, #538976288	; 0x20202020
 800ecf2:	f1c5 0302 	rsb	r3, r5, #2
 800ecf6:	9300      	str	r3, [sp, #0]
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800ecf8:	4a54      	ldr	r2, [pc, #336]	; (800ee4c <follow_path+0x184>)
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ecfa:	4b55      	ldr	r3, [pc, #340]	; (800ee50 <follow_path+0x188>)
 800ecfc:	f8c7 a004 	str.w	sl, [r7, #4]
 800ed00:	f8c7 a000 	str.w	sl, [r7]
 800ed04:	f8c7 a007 	str.w	sl, [r7, #7]
 800ed08:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ed0c:	2600      	movs	r6, #0
 800ed0e:	f04f 0808 	mov.w	r8, #8
		c = (BYTE)p[si++];				/* Get a byte */
 800ed12:	9900      	ldr	r1, [sp, #0]
 800ed14:	eb01 0009 	add.w	r0, r1, r9
 800ed18:	f819 1f01 	ldrb.w	r1, [r9, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ed1c:	2920      	cmp	r1, #32
 800ed1e:	d908      	bls.n	800ed32 <follow_path+0x6a>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800ed20:	292f      	cmp	r1, #47	; 0x2f
 800ed22:	d001      	beq.n	800ed28 <follow_path+0x60>
 800ed24:	295c      	cmp	r1, #92	; 0x5c
 800ed26:	d142      	bne.n	800edae <follow_path+0xe6>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800ed28:	5c2b      	ldrb	r3, [r5, r0]
 800ed2a:	2b2f      	cmp	r3, #47	; 0x2f
 800ed2c:	d03d      	beq.n	800edaa <follow_path+0xe2>
 800ed2e:	2b5c      	cmp	r3, #92	; 0x5c
 800ed30:	d03b      	beq.n	800edaa <follow_path+0xe2>
	*path = &p[si];						/* Return pointer to the next segment */
 800ed32:	4405      	add	r5, r0
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ed34:	2e00      	cmp	r6, #0
 800ed36:	d07e      	beq.n	800ee36 <follow_path+0x16e>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ed38:	f894 3020 	ldrb.w	r3, [r4, #32]
 800ed3c:	2be5      	cmp	r3, #229	; 0xe5
 800ed3e:	bf04      	itt	eq
 800ed40:	2305      	moveq	r3, #5
 800ed42:	f884 3020 	strbeq.w	r3, [r4, #32]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800ed46:	2920      	cmp	r1, #32
 800ed48:	d94d      	bls.n	800ede6 <follow_path+0x11e>
 800ed4a:	782b      	ldrb	r3, [r5, #0]
 800ed4c:	2b21      	cmp	r3, #33	; 0x21
 800ed4e:	bf34      	ite	cc
 800ed50:	2304      	movcc	r3, #4
 800ed52:	2300      	movcs	r3, #0
 800ed54:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ed58:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800ed5a:	f8d4 8000 	ldr.w	r8, [r4]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ed5e:	f007 fa6b 	bl	8016238 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800ed62:	4606      	mov	r6, r0
 800ed64:	2800      	cmp	r0, #0
 800ed66:	d146      	bne.n	800edf6 <follow_path+0x12e>
		res = move_window(fs, dp->sect);
 800ed68:	69a1      	ldr	r1, [r4, #24]
 800ed6a:	4640      	mov	r0, r8
 800ed6c:	f007 f82f 	bl	8015dce <move_window>
		if (res != FR_OK) break;
 800ed70:	4606      	mov	r6, r0
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d13f      	bne.n	800edf6 <follow_path+0x12e>
		c = dp->dir[DIR_Name];
 800ed76:	69e0      	ldr	r0, [r4, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ed78:	7803      	ldrb	r3, [r0, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d048      	beq.n	800ee10 <follow_path+0x148>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ed7e:	7ac3      	ldrb	r3, [r0, #11]
 800ed80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed84:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ed86:	7ac6      	ldrb	r6, [r0, #11]
 800ed88:	f016 0608 	ands.w	r6, r6, #8
 800ed8c:	d02d      	beq.n	800edea <follow_path+0x122>
		res = dir_next(dp, 0);	/* Next entry */
 800ed8e:	2100      	movs	r1, #0
 800ed90:	4620      	mov	r0, r4
 800ed92:	f007 fa83 	bl	801629c <dir_next>
 800ed96:	e7e4      	b.n	800ed62 <follow_path+0x9a>
		dp->fn[NSFLAG] = NS_NONAME;
 800ed98:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800ed9a:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800ed9c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 800eda0:	b003      	add	sp, #12
 800eda2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800eda6:	f007 ba47 	b.w	8016238 <dir_sdi.constprop.0>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800edaa:	3001      	adds	r0, #1
 800edac:	e7bc      	b.n	800ed28 <follow_path+0x60>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800edae:	292e      	cmp	r1, #46	; 0x2e
 800edb0:	d045      	beq.n	800ee3e <follow_path+0x176>
 800edb2:	45b0      	cmp	r8, r6
 800edb4:	d93f      	bls.n	800ee36 <follow_path+0x16e>
		if (c >= 0x80) {				/* Is SBC extended character? */
 800edb6:	0608      	lsls	r0, r1, #24
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800edb8:	bf48      	it	mi
 800edba:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800edbe:	4618      	mov	r0, r3
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800edc0:	bf48      	it	mi
 800edc2:	5c51      	ldrbmi	r1, [r2, r1]
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800edc4:	9101      	str	r1, [sp, #4]
 800edc6:	f008 fd62 	bl	801788e <strchr>
 800edca:	2800      	cmp	r0, #0
 800edcc:	d133      	bne.n	800ee36 <follow_path+0x16e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800edce:	9901      	ldr	r1, [sp, #4]
 800edd0:	4b1f      	ldr	r3, [pc, #124]	; (800ee50 <follow_path+0x188>)
 800edd2:	4a1e      	ldr	r2, [pc, #120]	; (800ee4c <follow_path+0x184>)
 800edd4:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
 800edd8:	2819      	cmp	r0, #25
 800edda:	bf9c      	itt	ls
 800eddc:	3920      	subls	r1, #32
 800edde:	b2c9      	uxtbls	r1, r1
			sfn[i++] = c;
 800ede0:	55b9      	strb	r1, [r7, r6]
 800ede2:	3601      	adds	r6, #1
 800ede4:	e795      	b.n	800ed12 <follow_path+0x4a>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800ede6:	2304      	movs	r3, #4
 800ede8:	e7b4      	b.n	800ed54 <follow_path+0x8c>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800edea:	220b      	movs	r2, #11
 800edec:	4639      	mov	r1, r7
 800edee:	f008 fd0e 	bl	801780e <memcmp>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d1cb      	bne.n	800ed8e <follow_path+0xc6>
			ns = dp->fn[NSFLAG];
 800edf6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 800edfa:	b15e      	cbz	r6, 800ee14 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800edfc:	2e04      	cmp	r6, #4
 800edfe:	d103      	bne.n	800ee08 <follow_path+0x140>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ee00:	f013 0f04 	tst.w	r3, #4
 800ee04:	bf08      	it	eq
 800ee06:	2605      	moveq	r6, #5
}
 800ee08:	4630      	mov	r0, r6
 800ee0a:	b003      	add	sp, #12
 800ee0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ee10:	2604      	movs	r6, #4
 800ee12:	e7f0      	b.n	800edf6 <follow_path+0x12e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800ee14:	075a      	lsls	r2, r3, #29
 800ee16:	d4f7      	bmi.n	800ee08 <follow_path+0x140>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800ee18:	79a3      	ldrb	r3, [r4, #6]
 800ee1a:	06db      	lsls	r3, r3, #27
 800ee1c:	d50d      	bpl.n	800ee3a <follow_path+0x172>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ee1e:	6921      	ldr	r1, [r4, #16]
 800ee20:	f89b 0000 	ldrb.w	r0, [fp]
 800ee24:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 800ee28:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800ee2c:	4419      	add	r1, r3
 800ee2e:	f007 f901 	bl	8016034 <ld_clust.isra.0>
 800ee32:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ee34:	e75d      	b.n	800ecf2 <follow_path+0x2a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ee36:	2606      	movs	r6, #6
 800ee38:	e7e6      	b.n	800ee08 <follow_path+0x140>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ee3a:	2605      	movs	r6, #5
	return res;
 800ee3c:	e7e4      	b.n	800ee08 <follow_path+0x140>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800ee3e:	f1b8 0f0b 	cmp.w	r8, #11
 800ee42:	d0f8      	beq.n	800ee36 <follow_path+0x16e>
			i = 8; ni = 11;				/* Enter file extension field */
 800ee44:	2608      	movs	r6, #8
 800ee46:	f04f 080b 	mov.w	r8, #11
 800ee4a:	e762      	b.n	800ed12 <follow_path+0x4a>
 800ee4c:	0801a8d6 	.word	0x0801a8d6
 800ee50:	0801a875 	.word	0x0801a875

0800ee54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800ee54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee56:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ee5a:	a803      	add	r0, sp, #12
{
 800ee5c:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 800ee5e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800ee60:	f7ff fd7a 	bl	800e958 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee64:	2800      	cmp	r0, #0
 800ee66:	db15      	blt.n	800ee94 <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ee68:	4a0b      	ldr	r2, [pc, #44]	; (800ee98 <f_mount+0x44>)
 800ee6a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {
 800ee6e:	b10b      	cbz	r3, 800ee74 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ee70:	2100      	movs	r1, #0
 800ee72:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 800ee74:	9b01      	ldr	r3, [sp, #4]
 800ee76:	b10b      	cbz	r3, 800ee7c <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
 800ee78:	2100      	movs	r1, #0
 800ee7a:	7019      	strb	r1, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ee7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 800ee80:	b12c      	cbz	r4, 800ee8e <f_mount+0x3a>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ee82:	2200      	movs	r2, #0
 800ee84:	a901      	add	r1, sp, #4
 800ee86:	4668      	mov	r0, sp
 800ee88:	f7ff fdfc 	bl	800ea84 <mount_volume>
 800ee8c:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 800ee8e:	4620      	mov	r0, r4
 800ee90:	b004      	add	sp, #16
 800ee92:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee94:	240b      	movs	r4, #11
 800ee96:	e7fa      	b.n	800ee8e <f_mount+0x3a>
 800ee98:	20002248 	.word	0x20002248

0800ee9c <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800ee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea0:	b091      	sub	sp, #68	; 0x44
 800eea2:	460e      	mov	r6, r1
 800eea4:	9009      	str	r0, [sp, #36]	; 0x24
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800eea6:	a809      	add	r0, sp, #36	; 0x24
{
 800eea8:	4614      	mov	r4, r2
 800eeaa:	9308      	str	r3, [sp, #32]
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800eeac:	f7ff fd54 	bl	800e958 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	f2c0 835f 	blt.w	800f574 <f_mkfs+0x6d8>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800eeb6:	4ba5      	ldr	r3, [pc, #660]	; (800f14c <f_mkfs+0x2b0>)
 800eeb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800eebc:	b10b      	cbz	r3, 800eec2 <f_mkfs+0x26>
 800eebe:	2200      	movs	r2, #0
 800eec0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800eec2:	4ba3      	ldr	r3, [pc, #652]	; (800f150 <f_mkfs+0x2b4>)
	pdrv = LD2PD(vol);			/* Physical drive */
 800eec4:	fa5f fb80 	uxtb.w	fp, r0

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
 800eec8:	4658      	mov	r0, fp
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800eeca:	2e00      	cmp	r6, #0
 800eecc:	bf08      	it	eq
 800eece:	461e      	moveq	r6, r3
	ds = disk_initialize(pdrv);
 800eed0:	f000 fb6c 	bl	800f5ac <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800eed4:	07c2      	lsls	r2, r0, #31
 800eed6:	f100 834f 	bmi.w	800f578 <f_mkfs+0x6dc>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800eeda:	0743      	lsls	r3, r0, #29
 800eedc:	f100 834e 	bmi.w	800f57c <f_mkfs+0x6e0>
	sz_blk = opt->align;
 800eee0:	6873      	ldr	r3, [r6, #4]
 800eee2:	930b      	str	r3, [sp, #44]	; 0x2c
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
 800eee4:	b93b      	cbnz	r3, 800eef6 <f_mkfs+0x5a>
 800eee6:	aa0b      	add	r2, sp, #44	; 0x2c
 800eee8:	2103      	movs	r1, #3
 800eeea:	4658      	mov	r0, fp
 800eeec:	f000 fb82 	bl	800f5f4 <disk_ioctl>
 800eef0:	b108      	cbz	r0, 800eef6 <f_mkfs+0x5a>
 800eef2:	2301      	movs	r3, #1
 800eef4:	930b      	str	r3, [sp, #44]	; 0x2c
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
 800eef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eef8:	1e53      	subs	r3, r2, #1
 800eefa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eefe:	d201      	bcs.n	800ef04 <f_mkfs+0x68>
 800ef00:	421a      	tst	r2, r3
 800ef02:	d001      	beq.n	800ef08 <f_mkfs+0x6c>
 800ef04:	2301      	movs	r3, #1
 800ef06:	930b      	str	r3, [sp, #44]	; 0x2c
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800ef08:	7873      	ldrb	r3, [r6, #1]
 800ef0a:	9301      	str	r3, [sp, #4]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	2b01      	cmp	r3, #1
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800ef10:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800ef14:	9b01      	ldr	r3, [sp, #4]
 800ef16:	bf88      	it	hi
 800ef18:	2301      	movhi	r3, #1
 800ef1a:	9301      	str	r3, [sp, #4]
 800ef1c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800ef20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef24:	d26c      	bcs.n	800f000 <f_mkfs+0x164>
 800ef26:	f019 0f0f 	tst.w	r9, #15
 800ef2a:	bf18      	it	ne
 800ef2c:	f44f 7900 	movne.w	r9, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800ef30:	68f5      	ldr	r5, [r6, #12]
 800ef32:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 800ef36:	d866      	bhi.n	800f006 <f_mkfs+0x16a>
 800ef38:	1e6b      	subs	r3, r5, #1
 800ef3a:	422b      	tst	r3, r5
 800ef3c:	bf18      	it	ne
 800ef3e:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800ef40:	9b08      	ldr	r3, [sp, #32]
 800ef42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef46:	f0c0 831b 	bcc.w	800f580 <f_mkfs+0x6e4>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800ef4a:	2c00      	cmp	r4, #0
 800ef4c:	f000 8318 	beq.w	800f580 <f_mkfs+0x6e4>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800ef50:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ef52:	aa0c      	add	r2, sp, #48	; 0x30
 800ef54:	2101      	movs	r1, #1
 800ef56:	4658      	mov	r0, fp
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800ef58:	f896 8000 	ldrb.w	r8, [r6]
	b_vol = sz_vol = 0;
 800ef5c:	930c      	str	r3, [sp, #48]	; 0x30
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ef5e:	f000 fb49 	bl	800f5f4 <disk_ioctl>
 800ef62:	4607      	mov	r7, r0
 800ef64:	2800      	cmp	r0, #0
 800ef66:	f040 8181 	bne.w	800f26c <f_mkfs+0x3d0>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800ef6a:	f018 0308 	ands.w	r3, r8, #8
 800ef6e:	9307      	str	r3, [sp, #28]
 800ef70:	d106      	bne.n	800ef80 <f_mkfs+0xe4>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800ef72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef74:	2b3f      	cmp	r3, #63	; 0x3f
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800ef76:	bf89      	itett	hi
 800ef78:	3b3f      	subhi	r3, #63	; 0x3f
	b_vol = sz_vol = 0;
 800ef7a:	9f07      	ldrls	r7, [sp, #28]
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800ef7c:	930c      	strhi	r3, [sp, #48]	; 0x30
 800ef7e:	273f      	movhi	r7, #63	; 0x3f
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800ef80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ef82:	2e7f      	cmp	r6, #127	; 0x7f
 800ef84:	f240 80d4 	bls.w	800f130 <f_mkfs+0x294>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800ef88:	f5b5 3f81 	cmp.w	r5, #66048	; 0x10200
	sz_au /= ss;	/* Byte --> Sector */
 800ef8c:	bf34      	ite	cc
 800ef8e:	0a6b      	lsrcc	r3, r5, #9
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800ef90:	2380      	movcs	r3, #128	; 0x80
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800ef92:	f018 0e02 	ands.w	lr, r8, #2
 800ef96:	f008 0201 	and.w	r2, r8, #1
 800ef9a:	d036      	beq.n	800f00a <f_mkfs+0x16e>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800ef9c:	2a00      	cmp	r2, #0
 800ef9e:	d038      	beq.n	800f012 <f_mkfs+0x176>
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
		fsty = FS_FAT16;
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800efa0:	f106 42a0 	add.w	r2, r6, #1342177280	; 0x50000000
 800efa4:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000
 800efa8:	9204      	str	r2, [sp, #16]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f040 8094 	bne.w	800f0d8 <f_mkfs+0x23c>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800efb0:	4868      	ldr	r0, [pc, #416]	; (800f154 <f_mkfs+0x2b8>)
 800efb2:	ea4f 3c16 	mov.w	ip, r6, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800efb6:	2501      	movs	r5, #1
 800efb8:	f830 2b02 	ldrh.w	r2, [r0], #2
 800efbc:	b112      	cbz	r2, 800efc4 <f_mkfs+0x128>
 800efbe:	4562      	cmp	r2, ip
 800efc0:	f240 8088 	bls.w	800f0d4 <f_mkfs+0x238>
				}
				n_clst = (DWORD)sz_vol / pau;
				if (n_clst > MAX_FAT12) {
 800efc4:	f640 70f5 	movw	r0, #4085	; 0xff5
				n_clst = (DWORD)sz_vol / pau;
 800efc8:	fbb6 f2f5 	udiv	r2, r6, r5
				if (n_clst > MAX_FAT12) {
 800efcc:	4282      	cmp	r2, r0
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fsty = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800efce:	bf9b      	ittet	ls
 800efd0:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
 800efd4:	3201      	addls	r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800efd6:	3202      	addhi	r2, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800efd8:	0852      	lsrls	r2, r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800efda:	bf8c      	ite	hi
 800efdc:	0052      	lslhi	r2, r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800efde:	3203      	addls	r2, #3
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800efe0:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800efe4:	ea4f 2252 	mov.w	r2, r2, lsr #9
 800efe8:	9203      	str	r2, [sp, #12]
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800efea:	f3c9 1216 	ubfx	r2, r9, #4, #23
 800efee:	bf8c      	ite	hi
 800eff0:	f04f 0802 	movhi.w	r8, #2
					fsty = FS_FAT12;
 800eff4:	f04f 0801 	movls.w	r8, #1
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800eff8:	9206      	str	r2, [sp, #24]
				sz_rsv = 1;						/* Number of reserved sectors */
 800effa:	f04f 0a01 	mov.w	sl, #1
 800effe:	e02d      	b.n	800f05c <f_mkfs+0x1c0>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800f000:	f44f 7900 	mov.w	r9, #512	; 0x200
 800f004:	e794      	b.n	800ef30 <f_mkfs+0x94>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800f006:	2500      	movs	r5, #0
 800f008:	e79a      	b.n	800ef40 <f_mkfs+0xa4>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800f00a:	2a00      	cmp	r2, #0
 800f00c:	d1c8      	bne.n	800efa0 <f_mkfs+0x104>
 800f00e:	2013      	movs	r0, #19
 800f010:	e2ad      	b.n	800f56e <f_mkfs+0x6d2>
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800f012:	f106 42a0 	add.w	r2, r6, #1342177280	; 0x50000000
 800f016:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000
 800f01a:	9204      	str	r2, [sp, #16]
				if (pau == 0) {	/* AU auto-selection */
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d157      	bne.n	800f0d0 <f_mkfs+0x234>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f020:	484d      	ldr	r0, [pc, #308]	; (800f158 <f_mkfs+0x2bc>)
 800f022:	0c75      	lsrs	r5, r6, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f024:	2301      	movs	r3, #1
 800f026:	f830 2b02 	ldrh.w	r2, [r0], #2
 800f02a:	b112      	cbz	r2, 800f032 <f_mkfs+0x196>
 800f02c:	42aa      	cmp	r2, r5
 800f02e:	d94d      	bls.n	800f0cc <f_mkfs+0x230>
 800f030:	2200      	movs	r2, #0
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800f032:	fbb6 f0f3 	udiv	r0, r6, r3
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f036:	0085      	lsls	r5, r0, #2
 800f038:	f205 2507 	addw	r5, r5, #519	; 0x207
 800f03c:	0a69      	lsrs	r1, r5, #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800f03e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
 800f042:	4d46      	ldr	r5, [pc, #280]	; (800f15c <f_mkfs+0x2c0>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f044:	9103      	str	r1, [sp, #12]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800f046:	38f6      	subs	r0, #246	; 0xf6
 800f048:	42a8      	cmp	r0, r5
 800f04a:	d871      	bhi.n	800f130 <f_mkfs+0x294>
 800f04c:	461d      	mov	r5, r3
 800f04e:	4613      	mov	r3, r2
				sz_dir = 0;		/* No static directory */
 800f050:	2200      	movs	r2, #0
 800f052:	9206      	str	r2, [sp, #24]
				sz_rsv = 32;	/* Number of reserved sectors */
 800f054:	f04f 0a20 	mov.w	sl, #32
 800f058:	f04f 0803 	mov.w	r8, #3
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800f05c:	9903      	ldr	r1, [sp, #12]
 800f05e:	9801      	ldr	r0, [sp, #4]

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800f060:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f064:	eb0a 0207 	add.w	r2, sl, r7
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800f068:	fb00 2001 	mla	r0, r0, r1, r2
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f06c:	9202      	str	r2, [sp, #8]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800f06e:	9a06      	ldr	r2, [sp, #24]
 800f070:	4410      	add	r0, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800f072:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800f076:	4402      	add	r2, r0
 800f078:	f1cc 0c00 	rsb	ip, ip, #0
 800f07c:	ea02 020c 	and.w	r2, r2, ip
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800f080:	f1b8 0f03 	cmp.w	r8, #3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800f084:	eba2 0200 	sub.w	r2, r2, r0
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800f088:	d128      	bne.n	800f0dc <f_mkfs+0x240>
				sz_rsv += n; b_fat += n;
 800f08a:	9902      	ldr	r1, [sp, #8]
 800f08c:	4411      	add	r1, r2
 800f08e:	4492      	add	sl, r2
 800f090:	9102      	str	r1, [sp, #8]
				}
				sz_fat += n / n_fat;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800f092:	ebc7 1205 	rsb	r2, r7, r5, lsl #4
 800f096:	4410      	add	r0, r2
 800f098:	4286      	cmp	r6, r0
 800f09a:	d349      	bcc.n	800f130 <f_mkfs+0x294>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800f09c:	9a06      	ldr	r2, [sp, #24]
 800f09e:	9903      	ldr	r1, [sp, #12]
 800f0a0:	9801      	ldr	r0, [sp, #4]
 800f0a2:	1ab2      	subs	r2, r6, r2
 800f0a4:	eba2 020a 	sub.w	r2, r2, sl
			if (fsty == FS_FAT32) {
 800f0a8:	f1b8 0f03 	cmp.w	r8, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800f0ac:	fb00 2211 	mls	r2, r0, r1, r2
 800f0b0:	fbb2 f2f5 	udiv	r2, r2, r5
 800f0b4:	9205      	str	r2, [sp, #20]
			if (fsty == FS_FAT32) {
 800f0b6:	d126      	bne.n	800f106 <f_mkfs+0x26a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800f0b8:	9905      	ldr	r1, [sp, #20]
 800f0ba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f0be:	4291      	cmp	r1, r2
 800f0c0:	d855      	bhi.n	800f16e <f_mkfs+0x2d2>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f0c2:	bbab      	cbnz	r3, 800f130 <f_mkfs+0x294>
 800f0c4:	2d01      	cmp	r5, #1
 800f0c6:	d933      	bls.n	800f130 <f_mkfs+0x294>
 800f0c8:	086b      	lsrs	r3, r5, #1
 800f0ca:	e7a7      	b.n	800f01c <f_mkfs+0x180>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f0cc:	005b      	lsls	r3, r3, #1
 800f0ce:	e7aa      	b.n	800f026 <f_mkfs+0x18a>
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	e7ae      	b.n	800f032 <f_mkfs+0x196>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f0d4:	006d      	lsls	r5, r5, #1
 800f0d6:	e76f      	b.n	800efb8 <f_mkfs+0x11c>
 800f0d8:	461d      	mov	r5, r3
 800f0da:	e773      	b.n	800efc4 <f_mkfs+0x128>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800f0dc:	9901      	ldr	r1, [sp, #4]
 800f0de:	fbb2 fcf1 	udiv	ip, r2, r1
 800f0e2:	fb01 2c1c 	mls	ip, r1, ip, r2
 800f0e6:	f1bc 0f00 	cmp.w	ip, #0
 800f0ea:	d005      	beq.n	800f0f8 <f_mkfs+0x25c>
					n--; sz_rsv++; b_fat++;
 800f0ec:	9902      	ldr	r1, [sp, #8]
 800f0ee:	3101      	adds	r1, #1
 800f0f0:	3a01      	subs	r2, #1
 800f0f2:	f10a 0a01 	add.w	sl, sl, #1
 800f0f6:	9102      	str	r1, [sp, #8]
				sz_fat += n / n_fat;
 800f0f8:	9901      	ldr	r1, [sp, #4]
 800f0fa:	fbb2 f2f1 	udiv	r2, r2, r1
 800f0fe:	9903      	ldr	r1, [sp, #12]
 800f100:	4411      	add	r1, r2
 800f102:	9103      	str	r1, [sp, #12]
 800f104:	e7c5      	b.n	800f092 <f_mkfs+0x1f6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT16) {
 800f106:	f1b8 0f02 	cmp.w	r8, #2
 800f10a:	d129      	bne.n	800f160 <f_mkfs+0x2c4>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f10c:	9905      	ldr	r1, [sp, #20]
 800f10e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f112:	4291      	cmp	r1, r2
 800f114:	d90e      	bls.n	800f134 <f_mkfs+0x298>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800f116:	2b00      	cmp	r3, #0
 800f118:	f040 8234 	bne.w	800f584 <f_mkfs+0x6e8>
 800f11c:	006b      	lsls	r3, r5, #1
 800f11e:	2b40      	cmp	r3, #64	; 0x40
 800f120:	f67f af43 	bls.w	800efaa <f_mkfs+0x10e>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
					}
					if ((fsopt & FM_FAT32)) {
 800f124:	f1be 0f00 	cmp.w	lr, #0
 800f128:	f47f af7a 	bne.w	800f020 <f_mkfs+0x184>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f12c:	2b80      	cmp	r3, #128	; 0x80
 800f12e:	d9d3      	bls.n	800f0d8 <f_mkfs+0x23c>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800f130:	200e      	movs	r0, #14
 800f132:	e21c      	b.n	800f56e <f_mkfs+0x6d2>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f134:	9905      	ldr	r1, [sp, #20]
 800f136:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f13a:	4291      	cmp	r1, r2
 800f13c:	d817      	bhi.n	800f16e <f_mkfs+0x2d2>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1f6      	bne.n	800f130 <f_mkfs+0x294>
 800f142:	006b      	lsls	r3, r5, #1
 800f144:	2b80      	cmp	r3, #128	; 0x80
 800f146:	f67f af30 	bls.w	800efaa <f_mkfs+0x10e>
 800f14a:	e7f1      	b.n	800f130 <f_mkfs+0x294>
 800f14c:	20002248 	.word	0x20002248
 800f150:	08018980 	.word	0x08018980
 800f154:	08018a9e 	.word	0x08018a9e
 800f158:	08018aac 	.word	0x08018aac
 800f15c:	0ffeffff 	.word	0x0ffeffff
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800f160:	9a05      	ldr	r2, [sp, #20]
 800f162:	f640 73f5 	movw	r3, #4085	; 0xff5
 800f166:	429a      	cmp	r2, r3
 800f168:	d8e2      	bhi.n	800f130 <f_mkfs+0x294>
 800f16a:	f04f 0801 	mov.w	r8, #1
 800f16e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f172:	2100      	movs	r1, #0
 800f174:	4620      	mov	r0, r4
 800f176:	f008 fb82 	bl	801787e <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800f17a:	4b4e      	ldr	r3, [pc, #312]	; (800f2b4 <f_mkfs+0x418>)
	*ptr++ = (BYTE)val; val >>= 8;
 800f17c:	f884 a00e 	strb.w	sl, [r4, #14]
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	6022      	str	r2, [r4, #0]
 800f184:	685a      	ldr	r2, [r3, #4]
 800f186:	6062      	str	r2, [r4, #4]
 800f188:	f1b8 0f03 	cmp.w	r8, #3
 800f18c:	891a      	ldrh	r2, [r3, #8]
 800f18e:	7a9b      	ldrb	r3, [r3, #10]
 800f190:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 800f192:	bf08      	it	eq
 800f194:	f04f 0900 	moveq.w	r9, #0
 800f198:	2302      	movs	r3, #2
 800f19a:	7323      	strb	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800f19c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
		memset(buf, 0, ss);
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800f1a0:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1a2:	f884 9011 	strb.w	r9, [r4, #17]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
 800f1a6:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
 800f1aa:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800f1ae:	8122      	strh	r2, [r4, #8]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f1b0:	7365      	strb	r5, [r4, #13]
	*ptr++ = (BYTE)val;
 800f1b2:	f884 a00f 	strb.w	sl, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800f1b6:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val;
 800f1b8:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
 800f1bc:	d258      	bcs.n	800f270 <f_mkfs+0x3d4>
	*ptr++ = (BYTE)val; val >>= 8;
 800f1be:	74e6      	strb	r6, [r4, #19]
 800f1c0:	f3c6 2607 	ubfx	r6, r6, #8, #8
	*ptr++ = (BYTE)val;
 800f1c4:	7526      	strb	r6, [r4, #20]
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f1c6:	23f8      	movs	r3, #248	; 0xf8
 800f1c8:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1ca:	233f      	movs	r3, #63	; 0x3f
 800f1cc:	7623      	strb	r3, [r4, #24]
	*ptr++ = (BYTE)val;
 800f1ce:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d0:	23ff      	movs	r3, #255	; 0xff
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800f1d2:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 800f1d4:	7662      	strb	r2, [r4, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d6:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
 800f1d8:	76e2      	strb	r2, [r4, #27]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800f1da:	f104 001c 	add.w	r0, r4, #28
 800f1de:	f006 fd99 	bl	8015d14 <st_dword>
		if (fsty == FS_FAT32) {
 800f1e2:	f1b8 0f03 	cmp.w	r8, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800f1e6:	9904      	ldr	r1, [sp, #16]
		if (fsty == FS_FAT32) {
 800f1e8:	d148      	bne.n	800f27c <f_mkfs+0x3e0>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800f1ea:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800f1ee:	f006 fd91 	bl	8015d14 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f1f2:	9903      	ldr	r1, [sp, #12]
 800f1f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f1f8:	f006 fd8c 	bl	8015d14 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800f202:	2301      	movs	r3, #1
 800f204:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f208:	2306      	movs	r3, #6
 800f20a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f20e:	2380      	movs	r3, #128	; 0x80
 800f210:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f214:	2329      	movs	r3, #41	; 0x29
 800f216:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f21a:	4b27      	ldr	r3, [pc, #156]	; (800f2b8 <f_mkfs+0x41c>)
	*ptr++ = (BYTE)val; val >>= 8;
 800f21c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
 800f220:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	*ptr++ = (BYTE)val;
 800f224:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	*ptr++ = (BYTE)val;
 800f228:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 800f22c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 800f230:	f103 0110 	add.w	r1, r3, #16
 800f234:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f238:	f853 0b04 	ldr.w	r0, [r3], #4
 800f23c:	f842 0b04 	str.w	r0, [r2], #4
 800f240:	428b      	cmp	r3, r1
 800f242:	d1f9      	bne.n	800f238 <f_mkfs+0x39c>
 800f244:	8819      	ldrh	r1, [r3, #0]
 800f246:	789b      	ldrb	r3, [r3, #2]
 800f248:	8011      	strh	r1, [r2, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f24a:	f04f 0a55 	mov.w	sl, #85	; 0x55
	*ptr++ = (BYTE)val;
 800f24e:	f04f 09aa 	mov.w	r9, #170	; 0xaa
 800f252:	7093      	strb	r3, [r2, #2]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800f254:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800f256:	f884 a1fe 	strb.w	sl, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800f25a:	f884 91ff 	strb.w	r9, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800f25e:	2301      	movs	r3, #1
 800f260:	463a      	mov	r2, r7
 800f262:	4658      	mov	r0, fp
 800f264:	f000 f9ba 	bl	800f5dc <disk_write>
 800f268:	4606      	mov	r6, r0
 800f26a:	b348      	cbz	r0, 800f2c0 <f_mkfs+0x424>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f26c:	2001      	movs	r0, #1
 800f26e:	e17e      	b.n	800f56e <f_mkfs+0x6d2>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800f270:	4631      	mov	r1, r6
 800f272:	f104 0020 	add.w	r0, r4, #32
 800f276:	f006 fd4d 	bl	8015d14 <st_dword>
 800f27a:	e7a4      	b.n	800f1c6 <f_mkfs+0x32a>
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800f27c:	f104 0027 	add.w	r0, r4, #39	; 0x27
 800f280:	f006 fd48 	bl	8015d14 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	75a3      	strb	r3, [r4, #22]
 800f288:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
 800f28c:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f28e:	2380      	movs	r3, #128	; 0x80
 800f290:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f294:	2329      	movs	r3, #41	; 0x29
 800f296:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800f29a:	4b08      	ldr	r3, [pc, #32]	; (800f2bc <f_mkfs+0x420>)
 800f29c:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800f2a0:	f103 0110 	add.w	r1, r3, #16
 800f2a4:	f853 0b04 	ldr.w	r0, [r3], #4
 800f2a8:	f842 0b04 	str.w	r0, [r2], #4
 800f2ac:	428b      	cmp	r3, r1
 800f2ae:	d1f9      	bne.n	800f2a4 <f_mkfs+0x408>
 800f2b0:	e7c8      	b.n	800f244 <f_mkfs+0x3a8>
 800f2b2:	bf00      	nop
 800f2b4:	0801a884 	.word	0x0801a884
 800f2b8:	0801a890 	.word	0x0801a890
 800f2bc:	0801a8a4 	.word	0x0801a8a4

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800f2c0:	f1b8 0f03 	cmp.w	r8, #3
 800f2c4:	d13a      	bne.n	800f33c <f_mkfs+0x4a0>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	1dba      	adds	r2, r7, #6
 800f2ca:	4621      	mov	r1, r4
 800f2cc:	4658      	mov	r0, fp
 800f2ce:	f000 f985 	bl	800f5dc <disk_write>
__ssp_bos_icheck3(memset, void *, int)
 800f2d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2d6:	4631      	mov	r1, r6
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f008 fad0 	bl	801787e <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800f2de:	2352      	movs	r3, #82	; 0x52
 800f2e0:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2e2:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2e4:	2361      	movs	r3, #97	; 0x61
 800f2e6:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 800f2e8:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			memset(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f2ec:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val;
 800f2ee:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800f2f0:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val;
 800f2f2:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2f4:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 800f2f8:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 800f2fc:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f300:	1e59      	subs	r1, r3, #1
 800f302:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 800f306:	f006 fd05 	bl	8015d14 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800f30a:	2302      	movs	r3, #2
 800f30c:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f310:	1dfa      	adds	r2, r7, #7
 800f312:	2301      	movs	r3, #1
 800f314:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800f316:	f884 61ed 	strb.w	r6, [r4, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 800f31a:	f884 61ee 	strb.w	r6, [r4, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
 800f31e:	f884 61ef 	strb.w	r6, [r4, #495]	; 0x1ef
	*ptr++ = (BYTE)val; val >>= 8;
 800f322:	f884 a1fe 	strb.w	sl, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800f326:	f884 91ff 	strb.w	r9, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f32a:	4658      	mov	r0, fp
 800f32c:	f000 f956 	bl	800f5dc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f330:	2301      	movs	r3, #1
 800f332:	18fa      	adds	r2, r7, r3
 800f334:	4621      	mov	r1, r4
 800f336:	4658      	mov	r0, fp
 800f338:	f000 f950 	bl	800f5dc <disk_write>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800f33c:	9b08      	ldr	r3, [sp, #32]
 800f33e:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 800f342:	f022 0201 	bic.w	r2, r2, #1
 800f346:	2100      	movs	r1, #0
 800f348:	4620      	mov	r0, r4
 800f34a:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 800f34e:	f008 fa96 	bl	801787e <memset>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800f352:	f1b8 0f01 	cmp.w	r8, #1
 800f356:	4b8e      	ldr	r3, [pc, #568]	; (800f590 <f_mkfs+0x6f4>)
 800f358:	bf18      	it	ne
 800f35a:	f06f 0307 	mvnne.w	r3, #7
 800f35e:	9305      	str	r3, [sp, #20]
 800f360:	2300      	movs	r3, #0
 800f362:	9304      	str	r3, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800f364:	26ff      	movs	r6, #255	; 0xff
			if (fsty == FS_FAT32) {
 800f366:	f1b8 0f03 	cmp.w	r8, #3
 800f36a:	f040 80d6 	bne.w	800f51a <f_mkfs+0x67e>
	*ptr++ = (BYTE)val; val >>= 8;
 800f36e:	f06f 0307 	mvn.w	r3, #7
 800f372:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val;
 800f374:	f04f 030f 	mov.w	r3, #15
	*ptr++ = (BYTE)val; val >>= 8;
 800f378:	7066      	strb	r6, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800f37a:	70a6      	strb	r6, [r4, #2]
	*ptr++ = (BYTE)val;
 800f37c:	70e6      	strb	r6, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800f37e:	7126      	strb	r6, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800f380:	7166      	strb	r6, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 800f382:	71a6      	strb	r6, [r4, #6]
	*ptr++ = (BYTE)val;
 800f384:	71e6      	strb	r6, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 800f386:	7226      	strb	r6, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800f388:	7266      	strb	r6, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 800f38a:	72a6      	strb	r6, [r4, #10]
	*ptr++ = (BYTE)val;
 800f38c:	72e3      	strb	r3, [r4, #11]
 800f38e:	9f03      	ldr	r7, [sp, #12]
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f390:	9a02      	ldr	r2, [sp, #8]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f392:	4557      	cmp	r7, sl
 800f394:	46b9      	mov	r9, r7
 800f396:	bf28      	it	cs
 800f398:	46d1      	movcs	r9, sl
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f39a:	4621      	mov	r1, r4
 800f39c:	464b      	mov	r3, r9
 800f39e:	4658      	mov	r0, fp
 800f3a0:	f000 f91c 	bl	800f5dc <disk_write>
 800f3a4:	4601      	mov	r1, r0
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f47f af60 	bne.w	800f26c <f_mkfs+0x3d0>
 800f3ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f008 fa64 	bl	801787e <memset>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
				sect += n; nsect -= n;
 800f3b6:	9b02      	ldr	r3, [sp, #8]
			} while (nsect);
 800f3b8:	ebb7 0709 	subs.w	r7, r7, r9
				sect += n; nsect -= n;
 800f3bc:	444b      	add	r3, r9
 800f3be:	9302      	str	r3, [sp, #8]
			} while (nsect);
 800f3c0:	d1e6      	bne.n	800f390 <f_mkfs+0x4f4>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800f3c2:	9b04      	ldr	r3, [sp, #16]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	9204      	str	r2, [sp, #16]
 800f3c8:	9a01      	ldr	r2, [sp, #4]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d8ca      	bhi.n	800f366 <f_mkfs+0x4ca>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f3d0:	9b06      	ldr	r3, [sp, #24]
 800f3d2:	f1b8 0f03 	cmp.w	r8, #3
 800f3d6:	bf18      	it	ne
 800f3d8:	461d      	movne	r5, r3
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f3da:	4555      	cmp	r5, sl
 800f3dc:	462e      	mov	r6, r5
 800f3de:	bf28      	it	cs
 800f3e0:	4656      	movcs	r6, sl
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f3e2:	9a02      	ldr	r2, [sp, #8]
 800f3e4:	4633      	mov	r3, r6
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	4658      	mov	r0, fp
 800f3ea:	f000 f8f7 	bl	800f5dc <disk_write>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	f47f af3c 	bne.w	800f26c <f_mkfs+0x3d0>
			sect += n; nsect -= n;
 800f3f4:	9b02      	ldr	r3, [sp, #8]
		} while (nsect);
 800f3f6:	1bad      	subs	r5, r5, r6
			sect += n; nsect -= n;
 800f3f8:	4433      	add	r3, r6
 800f3fa:	9302      	str	r3, [sp, #8]
		} while (nsect);
 800f3fc:	d1ed      	bne.n	800f3da <f_mkfs+0x53e>

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;			/* exFAT */
	} else {
		if (fsty == FS_FAT32) {
 800f3fe:	f1b8 0f03 	cmp.w	r8, #3
 800f402:	f000 808f 	beq.w	800f524 <f_mkfs+0x688>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
 800f406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f40c:	f080 808d 	bcs.w	800f52a <f_mkfs+0x68e>
				sys = 0x06;	/* FAT12/16 (large) */
			} else {
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 800f410:	f1b8 0f02 	cmp.w	r8, #2
 800f414:	bf0c      	ite	eq
 800f416:	f04f 0904 	moveq.w	r9, #4
 800f41a:	f04f 0901 	movne.w	r9, #1
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
 800f41e:	9b07      	ldr	r3, [sp, #28]
 800f420:	2b00      	cmp	r3, #0
 800f422:	f040 809c 	bne.w	800f55e <f_mkfs+0x6c2>
			lba[0] = sz_vol; lba[1] = 0;
 800f426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f428:	930e      	str	r3, [sp, #56]	; 0x38
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800f42a:	aa0d      	add	r2, sp, #52	; 0x34
			lba[0] = sz_vol; lba[1] = 0;
 800f42c:	9b07      	ldr	r3, [sp, #28]
 800f42e:	930f      	str	r3, [sp, #60]	; 0x3c
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800f430:	2101      	movs	r1, #1
 800f432:	4658      	mov	r0, fp
 800f434:	f000 f8de 	bl	800f5f4 <disk_ioctl>
 800f438:	2800      	cmp	r0, #0
 800f43a:	f47f af17 	bne.w	800f26c <f_mkfs+0x3d0>
		sz_drv32 = (DWORD)sz_drv;
 800f43e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800f442:	2305      	movs	r3, #5
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800f444:	2708      	movs	r7, #8
 800f446:	f64f 423e 	movw	r2, #64574	; 0xfc3e
 800f44a:	fbb8 f1f7 	udiv	r1, r8, r7
 800f44e:	4291      	cmp	r1, r2
 800f450:	d86e      	bhi.n	800f530 <f_mkfs+0x694>
 800f452:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f456:	2100      	movs	r1, #0
 800f458:	4620      	mov	r0, r4
 800f45a:	f008 fa10 	bl	801787e <memset>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800f45e:	2364      	movs	r3, #100	; 0x64
 800f460:	fbb8 f3f3 	udiv	r3, r8, r3
 800f464:	9301      	str	r3, [sp, #4]
 800f466:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 800f46a:	f504 75e3 	add.w	r5, r4, #454	; 0x1c6
 800f46e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800f472:	9302      	str	r3, [sp, #8]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800f474:	223f      	movs	r2, #63	; 0x3f
 800f476:	4590      	cmp	r8, r2
 800f478:	d962      	bls.n	800f540 <f_mkfs+0x6a4>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800f47a:	f85a 6b04 	ldr.w	r6, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800f47e:	2e64      	cmp	r6, #100	; 0x64
 800f480:	d803      	bhi.n	800f48a <f_mkfs+0x5ee>
 800f482:	bf16      	itet	ne
 800f484:	9901      	ldrne	r1, [sp, #4]
 800f486:	4646      	moveq	r6, r8
 800f488:	434e      	mulne	r6, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800f48a:	18b0      	adds	r0, r6, r2
 800f48c:	bf2c      	ite	cs
 800f48e:	2101      	movcs	r1, #1
 800f490:	2100      	movcc	r1, #0
 800f492:	4580      	cmp	r8, r0
 800f494:	d301      	bcc.n	800f49a <f_mkfs+0x5fe>
 800f496:	2900      	cmp	r1, #0
 800f498:	d050      	beq.n	800f53c <f_mkfs+0x6a0>
 800f49a:	eba8 0602 	sub.w	r6, r8, r2
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800f49e:	4611      	mov	r1, r2
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f006 fc37 	bl	8015d14 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	1d28      	adds	r0, r5, #4
 800f4aa:	f006 fc33 	bl	8015d14 <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800f4ae:	233f      	movs	r3, #63	; 0x3f
 800f4b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800f4b4:	fbb1 f0f7 	udiv	r0, r1, r7
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800f4b8:	fb07 1c10 	mls	ip, r7, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800f4bc:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 800f4c0:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800f4c2:	f805 cc07 	strb.w	ip, [r5, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f4c6:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 800f4ca:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800f4ce:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f4d0:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800f4d4:	4432      	add	r2, r6
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f4d6:	f805 1c06 	strb.w	r1, [r5, #-6]
			pte[PTE_StCyl] = (BYTE)cy;
 800f4da:	f805 0c05 	strb.w	r0, [r5, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800f4de:	1e51      	subs	r1, r2, #1
 800f4e0:	fbb1 f6f3 	udiv	r6, r1, r3
 800f4e4:	fbb6 f0f7 	udiv	r0, r6, r7
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800f4e8:	fb07 6c10 	mls	ip, r7, r0, r6
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800f4ec:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
 800f4f0:	1b89      	subs	r1, r1, r6
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f4f2:	0886      	lsrs	r6, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800f4f4:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f4f6:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800f4fa:	4331      	orrs	r1, r6
 800f4fc:	f805 1c02 	strb.w	r1, [r5, #-2]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800f500:	9902      	ldr	r1, [sp, #8]
			pte[PTE_System] = sys;					/* System type */
 800f502:	f805 9c04 	strb.w	r9, [r5, #-4]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800f506:	42a9      	cmp	r1, r5
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800f508:	f805 cc03 	strb.w	ip, [r5, #-3]
			pte[PTE_EdCyl] = (BYTE)cy;
 800f50c:	f805 0c01 	strb.w	r0, [r5, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800f510:	d016      	beq.n	800f540 <f_mkfs+0x6a4>
 800f512:	3510      	adds	r5, #16
 800f514:	2a00      	cmp	r2, #0
 800f516:	d1ae      	bne.n	800f476 <f_mkfs+0x5da>
 800f518:	e012      	b.n	800f540 <f_mkfs+0x6a4>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800f51a:	9905      	ldr	r1, [sp, #20]
 800f51c:	4620      	mov	r0, r4
 800f51e:	f006 fbf9 	bl	8015d14 <st_dword>
 800f522:	e734      	b.n	800f38e <f_mkfs+0x4f2>
			sys = 0x0C;		/* FAT32X */
 800f524:	f04f 090c 	mov.w	r9, #12
 800f528:	e779      	b.n	800f41e <f_mkfs+0x582>
				sys = 0x06;	/* FAT12/16 (large) */
 800f52a:	f04f 0906 	mov.w	r9, #6
 800f52e:	e776      	b.n	800f41e <f_mkfs+0x582>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800f530:	007f      	lsls	r7, r7, #1
 800f532:	3b01      	subs	r3, #1
 800f534:	b2ff      	uxtb	r7, r7
 800f536:	d188      	bne.n	800f44a <f_mkfs+0x5ae>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800f538:	27ff      	movs	r7, #255	; 0xff
 800f53a:	e78a      	b.n	800f452 <f_mkfs+0x5b6>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800f53c:	2e00      	cmp	r6, #0
 800f53e:	d1ae      	bne.n	800f49e <f_mkfs+0x602>
	*ptr++ = (BYTE)val; val >>= 8;
 800f540:	2355      	movs	r3, #85	; 0x55
 800f542:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800f546:	23aa      	movs	r3, #170	; 0xaa
 800f548:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f54c:	2200      	movs	r2, #0
 800f54e:	2301      	movs	r3, #1
 800f550:	4621      	mov	r1, r4
 800f552:	4658      	mov	r0, fp
 800f554:	f000 f842 	bl	800f5dc <disk_write>
 800f558:	2800      	cmp	r0, #0
 800f55a:	f47f ae87 	bne.w	800f26c <f_mkfs+0x3d0>
			fr = create_partition(pdrv, lba, sys, buf);
			if (fr != FR_OK) LEAVE_MKFS(fr);
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f55e:	2200      	movs	r2, #0
 800f560:	4611      	mov	r1, r2
 800f562:	4658      	mov	r0, fp
 800f564:	f000 f846 	bl	800f5f4 <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f568:	3800      	subs	r0, #0
 800f56a:	bf18      	it	ne
 800f56c:	2001      	movne	r0, #1

	LEAVE_MKFS(FR_OK);
}
 800f56e:	b011      	add	sp, #68	; 0x44
 800f570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800f574:	200b      	movs	r0, #11
 800f576:	e7fa      	b.n	800f56e <f_mkfs+0x6d2>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800f578:	2003      	movs	r0, #3
 800f57a:	e7f8      	b.n	800f56e <f_mkfs+0x6d2>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f57c:	200a      	movs	r0, #10
 800f57e:	e7f6      	b.n	800f56e <f_mkfs+0x6d2>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800f580:	2011      	movs	r0, #17
 800f582:	e7f4      	b.n	800f56e <f_mkfs+0x6d2>
					if ((fsopt & FM_FAT32)) {
 800f584:	f1be 0f00 	cmp.w	lr, #0
 800f588:	f47f ad48 	bne.w	800f01c <f_mkfs+0x180>
 800f58c:	e5d0      	b.n	800f130 <f_mkfs+0x294>
 800f58e:	bf00      	nop
 800f590:	00fffff8 	.word	0x00fffff8

0800f594 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
 800f594:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
 800f596:	4b04      	ldr	r3, [pc, #16]	; (800f5a8 <disk_status+0x14>)
 800f598:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f59c:	f003 f82c 	bl	80125f8 <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 800f5a0:	3800      	subs	r0, #0
 800f5a2:	bf18      	it	ne
 800f5a4:	2001      	movne	r0, #1
 800f5a6:	bd08      	pop	{r3, pc}
 800f5a8:	08018990 	.word	0x08018990

0800f5ac <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
 800f5ac:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
 800f5ae:	4b04      	ldr	r3, [pc, #16]	; (800f5c0 <disk_initialize+0x14>)
 800f5b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f5b4:	f003 f812 	bl	80125dc <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 800f5b8:	3800      	subs	r0, #0
 800f5ba:	bf18      	it	ne
 800f5bc:	2001      	movne	r0, #1
 800f5be:	bd08      	pop	{r3, pc}
 800f5c0:	08018990 	.word	0x08018990

0800f5c4 <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 800f5c4:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
 800f5c6:	4c04      	ldr	r4, [pc, #16]	; (800f5d8 <disk_read+0x14>)
 800f5c8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800f5cc:	f003 f822 	bl	8012614 <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
 800f5d0:	3800      	subs	r0, #0
 800f5d2:	bf18      	it	ne
 800f5d4:	2001      	movne	r0, #1
 800f5d6:	bd10      	pop	{r4, pc}
 800f5d8:	08018990 	.word	0x08018990

0800f5dc <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 800f5dc:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
 800f5de:	4c04      	ldr	r4, [pc, #16]	; (800f5f0 <disk_write+0x14>)
 800f5e0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800f5e4:	f003 f82d 	bl	8012642 <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
 800f5e8:	3800      	subs	r0, #0
 800f5ea:	bf18      	it	ne
 800f5ec:	2001      	movne	r0, #1
 800f5ee:	bd10      	pop	{r4, pc}
 800f5f0:	08018990 	.word	0x08018990

0800f5f4 <disk_ioctl>:
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
 800f5f4:	b513      	push	{r0, r1, r4, lr}
	int ret = RES_OK;
	uint32_t sector_size = 0;
 800f5f6:	2300      	movs	r3, #0
{
 800f5f8:	4614      	mov	r4, r2
	uint32_t sector_size = 0;
 800f5fa:	9301      	str	r3, [sp, #4]

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
 800f5fc:	2903      	cmp	r1, #3
 800f5fe:	d821      	bhi.n	800f644 <disk_ioctl+0x50>
 800f600:	e8df f001 	tbb	[pc, r1]
 800f604:	1e0e0c02 	.word	0x1e0e0c02
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
 800f608:	2105      	movs	r1, #5
			ret = RES_ERROR;
		}
		break;

	case GET_BLOCK_SIZE:
		if (disk_access_ioctl(pdrv_str[pdrv],
 800f60a:	4b10      	ldr	r3, [pc, #64]	; (800f64c <disk_ioctl+0x58>)
 800f60c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f610:	f003 f82e 	bl	8012670 <disk_access_ioctl>
 800f614:	3800      	subs	r0, #0
 800f616:	bf18      	it	ne
 800f618:	2001      	movne	r0, #1
 800f61a:	e00e      	b.n	800f63a <disk_ioctl+0x46>
		if (disk_access_ioctl(pdrv_str[pdrv],
 800f61c:	2101      	movs	r1, #1
 800f61e:	e7f4      	b.n	800f60a <disk_ioctl+0x16>
		if ((disk_access_ioctl(pdrv_str[pdrv],
 800f620:	4b0a      	ldr	r3, [pc, #40]	; (800f64c <disk_ioctl+0x58>)
 800f622:	aa01      	add	r2, sp, #4
 800f624:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f628:	2102      	movs	r1, #2
 800f62a:	f003 f821 	bl	8012670 <disk_access_ioctl>
 800f62e:	b958      	cbnz	r0, 800f648 <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
 800f630:	9b01      	ldr	r3, [sp, #4]
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
 800f632:	b29a      	uxth	r2, r3
 800f634:	4293      	cmp	r3, r2
 800f636:	d107      	bne.n	800f648 <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
 800f638:	8023      	strh	r3, [r4, #0]
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
 800f63a:	b2c0      	uxtb	r0, r0
 800f63c:	b002      	add	sp, #8
 800f63e:	bd10      	pop	{r4, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
 800f640:	2104      	movs	r1, #4
 800f642:	e7e2      	b.n	800f60a <disk_ioctl+0x16>
	switch (cmd) {
 800f644:	2004      	movs	r0, #4
 800f646:	e7f8      	b.n	800f63a <disk_ioctl+0x46>
			ret = RES_ERROR;
 800f648:	2001      	movs	r0, #1
 800f64a:	e7f6      	b.n	800f63a <disk_ioctl+0x46>
 800f64c:	08018990 	.word	0x08018990

0800f650 <LL_RTC_DeInit>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800f650:	23ca      	movs	r3, #202	; 0xca
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are de-initialized
  *          - ERROR: RTC registers are not de-initialized
  */
ErrorStatus LL_RTC_DeInit(RTC_TypeDef *RTCx)
{
 800f652:	b510      	push	{r4, lr}
 800f654:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800f656:	2353      	movs	r3, #83	; 0x53
 800f658:	6243      	str	r3, [r0, #36]	; 0x24
 800f65a:	4604      	mov	r4, r0

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800f65c:	f007 fcb9 	bl	8016fd2 <LL_RTC_EnterInitMode>
 800f660:	b1a0      	cbz	r0, 800f68c <LL_RTC_DeInit+0x3c>
  {
    /* Reset TR, DR and CR registers */
    WRITE_REG(RTCx->TR,       0x00000000U);
 800f662:	2300      	movs	r3, #0
#if defined(RTC_WAKEUP_SUPPORT)
    WRITE_REG(RTCx->WUTR,     RTC_WUTR_WUT);
#endif /* RTC_WAKEUP_SUPPORT */
    WRITE_REG(RTCx->DR, (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800f664:	f242 1201 	movw	r2, #8449	; 0x2101
    WRITE_REG(RTCx->TR,       0x00000000U);
 800f668:	6023      	str	r3, [r4, #0]
    WRITE_REG(RTCx->DR, (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800f66a:	6062      	str	r2, [r4, #4]
#if defined(RTC_WAKEUP_SUPPORT)
    WRITE_REG(RTCx->CR, (LL_RTC_ReadReg(RTCx, CR) & RTC_CR_WUCKSEL));
#else
    WRITE_REG(RTCx->CR, 0x00000000U);
#endif /* RTC_WAKEUP_SUPPORT */
    WRITE_REG(RTCx->PRER, (RTC_PRER_PREDIV_A | RTC_SYNCH_PRESC_DEFAULT));
 800f66c:	4a0e      	ldr	r2, [pc, #56]	; (800f6a8 <LL_RTC_DeInit+0x58>)
    WRITE_REG(RTCx->CR, 0x00000000U);
 800f66e:	61a3      	str	r3, [r4, #24]
    WRITE_REG(RTCx->PRER, (RTC_PRER_PREDIV_A | RTC_SYNCH_PRESC_DEFAULT));
 800f670:	6122      	str	r2, [r4, #16]
    WRITE_REG(RTCx->ALRMAR,   0x00000000U);
 800f672:	6423      	str	r3, [r4, #64]	; 0x40
    WRITE_REG(RTCx->ALRMBR,   0x00000000U);
 800f674:	64a3      	str	r3, [r4, #72]	; 0x48
    WRITE_REG(RTCx->SHIFTR,   0x00000000U);
 800f676:	62e3      	str	r3, [r4, #44]	; 0x2c
    WRITE_REG(RTCx->CALR,     0x00000000U);
 800f678:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(RTCx->ALRMASSR, 0x00000000U);
 800f67a:	6463      	str	r3, [r4, #68]	; 0x44
    WRITE_REG(RTCx->ALRMBSSR, 0x00000000U);
 800f67c:	64e3      	str	r3, [r4, #76]	; 0x4c
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 800f67e:	68e3      	ldr	r3, [r4, #12]
 800f680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f684:	60e3      	str	r3, [r4, #12]

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);

    /* Wait till the RTC RSF flag is set */
    status = LL_RTC_WaitForSynchro(RTCx);
 800f686:	4620      	mov	r0, r4
 800f688:	f007 fcf2 	bl	8017070 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800f68c:	23ff      	movs	r3, #255	; 0xff
 800f68e:	6263      	str	r3, [r4, #36]	; 0x24
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);

  /* DeInitialization of the TAMP */
  /* Reset TAMP CR1 and CR2 registers */
  WRITE_REG(TAMP->CR1,      0xFFFF0000U);
 800f690:	4b06      	ldr	r3, [pc, #24]	; (800f6ac <LL_RTC_DeInit+0x5c>)
 800f692:	4a07      	ldr	r2, [pc, #28]	; (800f6b0 <LL_RTC_DeInit+0x60>)
 800f694:	601a      	str	r2, [r3, #0]
  WRITE_REG(TAMP->CR2,     0x00000000U);
 800f696:	2200      	movs	r2, #0
 800f698:	605a      	str	r2, [r3, #4]
#if defined (RTC_OTHER_SUPPORT)
  WRITE_REG(TAMP->CR3,     0x00000000U);
  WRITE_REG(TAMP->SMCR,     0x00000000U);
  WRITE_REG(TAMP->PRIVCR,   0x00000000U);
#endif /* RTC_OTHER_SUPPORT */
  WRITE_REG(TAMP->FLTCR,    0x00000000U);
 800f69a:	60da      	str	r2, [r3, #12]
#if defined (RTC_ACTIVE_TAMPER_SUPPORT)
  WRITE_REG(TAMP->ATCR1,    0x00000000U);
  WRITE_REG(TAMP->ATCR2,    0x00000000U);
#endif /* RTC_ACTIVE_TAMPER_SUPPORT */
  WRITE_REG(TAMP->IER,      0x00000000U);
 800f69c:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(TAMP->SCR,      0xFFFFFFFFU);
 800f69e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6a2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined (RTC_OPTION_REG_SUPPORT)
  WRITE_REG(TAMP->OR,       0x00000000U);
#endif /* RTC_OPTION_REG_SUPPORT */

  return status;
}
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	bf00      	nop
 800f6a8:	007f00ff 	.word	0x007f00ff
 800f6ac:	4000b000 	.word	0x4000b000
 800f6b0:	ffff0000 	.word	0xffff0000

0800f6b4 <LL_SetFlashLatency>:

  /* Flash Clock source (HCLK3) range in MHz with a VCORE is range2 */
  const uint32_t UTILS_CLK_SRC_RANGE_VOS2[] = {6000000U, 12000000U, UTILS_MAX_FREQUENCY_SCALE2};

  /* Flash Latency range */
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800f6b4:	4a1f      	ldr	r2, [pc, #124]	; (800f734 <LL_SetFlashLatency+0x80>)
{
 800f6b6:	4603      	mov	r3, r0
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800f6b8:	ca07      	ldmia	r2, {r0, r1, r2}
{
 800f6ba:	b084      	sub	sp, #16
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800f6bc:	f10d 0c10 	add.w	ip, sp, #16
 800f6c0:	e90c 0007 	stmdb	ip, {r0, r1, r2}

  /* Frequency cannot be equal to 0 */
  if (HCLK3_Frequency != 0U)
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	b333      	cbz	r3, 800f716 <LL_SetFlashLatency+0x62>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800f6c8:	4b1b      	ldr	r3, [pc, #108]	; (800f738 <LL_SetFlashLatency+0x84>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  {
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800f6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6d4:	d122      	bne.n	800f71c <LL_SetFlashLatency+0x68>
    {
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE1)
 800f6d6:	4b19      	ldr	r3, [pc, #100]	; (800f73c <LL_SetFlashLatency+0x88>)
 800f6d8:	4298      	cmp	r0, r3
 800f6da:	d81c      	bhi.n	800f716 <LL_SetFlashLatency+0x62>
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS1); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS1[index])
 800f6dc:	4b18      	ldr	r3, [pc, #96]	; (800f740 <LL_SetFlashLatency+0x8c>)
 800f6de:	4298      	cmp	r0, r3
 800f6e0:	d924      	bls.n	800f72c <LL_SetFlashLatency+0x78>
 800f6e2:	4b18      	ldr	r3, [pc, #96]	; (800f744 <LL_SetFlashLatency+0x90>)
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS2); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 800f6e4:	4298      	cmp	r0, r3
 800f6e6:	bf94      	ite	ls
 800f6e8:	2001      	movls	r0, #1
 800f6ea:	2002      	movhi	r0, #2
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800f6ec:	4916      	ldr	r1, [pc, #88]	; (800f748 <LL_SetFlashLatency+0x94>)
          {
            latency = UTILS_LATENCY_RANGE[index];
 800f6ee:	ab04      	add	r3, sp, #16
 800f6f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f6f4:	680b      	ldr	r3, [r1, #0]
 800f6f6:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 800f6fa:	f023 0307 	bic.w	r3, r3, #7
 800f6fe:	4313      	orrs	r3, r2
 800f700:	600b      	str	r3, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800f702:	680b      	ldr	r3, [r1, #0]
 800f704:	f003 0307 	and.w	r3, r3, #7
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 800f708:	429a      	cmp	r2, r3
 800f70a:	d011      	beq.n	800f730 <LL_SetFlashLatency+0x7c>
 800f70c:	680b      	ldr	r3, [r1, #0]
 800f70e:	f003 0307 	and.w	r3, r3, #7
 800f712:	429a      	cmp	r2, r3
 800f714:	d00c      	beq.n	800f730 <LL_SetFlashLatency+0x7c>
  ErrorStatus status = ERROR;
 800f716:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800f718:	b004      	add	sp, #16
 800f71a:	4770      	bx	lr
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
 800f71c:	4b0b      	ldr	r3, [pc, #44]	; (800f74c <LL_SetFlashLatency+0x98>)
 800f71e:	4298      	cmp	r0, r3
 800f720:	d8f9      	bhi.n	800f716 <LL_SetFlashLatency+0x62>
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 800f722:	4b0b      	ldr	r3, [pc, #44]	; (800f750 <LL_SetFlashLatency+0x9c>)
 800f724:	4298      	cmp	r0, r3
 800f726:	d901      	bls.n	800f72c <LL_SetFlashLatency+0x78>
 800f728:	4b0a      	ldr	r3, [pc, #40]	; (800f754 <LL_SetFlashLatency+0xa0>)
 800f72a:	e7db      	b.n	800f6e4 <LL_SetFlashLatency+0x30>
 800f72c:	2000      	movs	r0, #0
 800f72e:	e7dd      	b.n	800f6ec <LL_SetFlashLatency+0x38>
 800f730:	2001      	movs	r0, #1
 800f732:	e7f1      	b.n	800f718 <LL_SetFlashLatency+0x64>
 800f734:	08018224 	.word	0x08018224
 800f738:	58000400 	.word	0x58000400
 800f73c:	02dc6c00 	.word	0x02dc6c00
 800f740:	0112a880 	.word	0x0112a880
 800f744:	02255100 	.word	0x02255100
 800f748:	58004000 	.word	0x58004000
 800f74c:	00f42400 	.word	0x00f42400
 800f750:	005b8d80 	.word	0x005b8d80
 800f754:	00b71b00 	.word	0x00b71b00

0800f758 <UTILS_EnablePLLAndSwitchSystem>:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency,
                                                  LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800f758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHB3CLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK3 frequency based on SYSCLK_Frequency target */
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800f75c:	688b      	ldr	r3, [r1, #8]
 800f75e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800f848 <UTILS_EnablePLLAndSwitchSystem+0xf0>

  /* Calculate HCLK3 frequency current */
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800f762:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800f84c <UTILS_EnablePLLAndSwitchSystem+0xf4>
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800f766:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 800f76a:	4607      	mov	r7, r0
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800f76c:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 800f770:	fbb0 f5f5 	udiv	r5, r0, r5
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800f778:	460c      	mov	r4, r1
 800f77a:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800f77c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800f780:	f3c2 1203 	ubfx	r2, r2, #4, #4
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800f784:	f003 030f 	and.w	r3, r3, #15
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800f788:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
 800f78c:	f8d9 2000 	ldr.w	r2, [r9]
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800f790:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800f794:	4356      	muls	r6, r2
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800f796:	fbb6 f6f3 	udiv	r6, r6, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (hclks_frequency_current < hclks_frequency_target)
 800f79a:	42b5      	cmp	r5, r6
 800f79c:	d847      	bhi.n	800f82e <UTILS_EnablePLLAndSwitchSystem+0xd6>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f79e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7a2:	681a      	ldr	r2, [r3, #0]
 800f7a4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800f7a8:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800f7aa:	68da      	ldr	r2, [r3, #12]
 800f7ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f7b0:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	0192      	lsls	r2, r2, #6
 800f7b6:	d5fc      	bpl.n	800f7b2 <UTILS_EnablePLLAndSwitchSystem+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800f7b8:	6899      	ldr	r1, [r3, #8]
 800f7ba:	6822      	ldr	r2, [r4, #0]
 800f7bc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800f7c0:	430a      	orrs	r2, r1
 800f7c2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800f7c4:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800f7c8:	6862      	ldr	r2, [r4, #4]
 800f7ca:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800f7ce:	430a      	orrs	r2, r1
 800f7d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800f7d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800f7d8:	68a1      	ldr	r1, [r4, #8]
 800f7da:	f022 020f 	bic.w	r2, r2, #15
 800f7de:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 800f7e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f7e6:	689a      	ldr	r2, [r3, #8]
 800f7e8:	f042 0203 	orr.w	r2, r2, #3
 800f7ec:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f7ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7f2:	689a      	ldr	r2, [r3, #8]
 800f7f4:	f002 020c 	and.w	r2, r2, #12
#if defined(DUAL_CORE)
    LL_C2_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->CPU2CLKDivider);
#endif /* DUAL_CORE */
    LL_RCC_SetAHB3Prescaler(UTILS_ClkInitStruct->AHB3CLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800f7f8:	2a0c      	cmp	r2, #12
 800f7fa:	d1fa      	bne.n	800f7f2 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800f7fc:	6899      	ldr	r1, [r3, #8]
 800f7fe:	68e2      	ldr	r2, [r4, #12]
 800f800:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800f804:	430a      	orrs	r2, r1
 800f806:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800f808:	6899      	ldr	r1, [r3, #8]
 800f80a:	6922      	ldr	r2, [r4, #16]
 800f80c:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800f810:	430a      	orrs	r2, r1
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (hclks_frequency_current > hclks_frequency_target)
 800f812:	42b5      	cmp	r5, r6
 800f814:	609a      	str	r2, [r3, #8]
 800f816:	d311      	bcc.n	800f83c <UTILS_EnablePLLAndSwitchSystem+0xe4>
  if (status == SUCCESS)
  {
#if defined(CORE_CM0PLUS) && defined(DUAL_CORE)
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK2_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU2CLKDivider));
#else
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU1CLKDivider));
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f81e:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800f822:	fbb7 f7f0 	udiv	r7, r7, r0
}
 800f826:	2001      	movs	r0, #1
  SystemCoreClock = HCLKFrequency;
 800f828:	f8c9 7000 	str.w	r7, [r9]
}
 800f82c:	e004      	b.n	800f838 <UTILS_EnablePLLAndSwitchSystem+0xe0>
    status = LL_SetFlashLatency(hclks_frequency_target);
 800f82e:	4628      	mov	r0, r5
 800f830:	f7ff ff40 	bl	800f6b4 <LL_SetFlashLatency>
  if (status == SUCCESS)
 800f834:	2801      	cmp	r0, #1
 800f836:	d0b2      	beq.n	800f79e <UTILS_EnablePLLAndSwitchSystem+0x46>
#endif /* CORE_CM0PLUS && DUAL_CORE */
  }

  return status;
}
 800f838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    status = LL_SetFlashLatency(hclks_frequency_target);
 800f83c:	4628      	mov	r0, r5
 800f83e:	f7ff ff39 	bl	800f6b4 <LL_SetFlashLatency>
  if (status == SUCCESS)
 800f842:	2801      	cmp	r0, #1
 800f844:	d1f8      	bne.n	800f838 <UTILS_EnablePLLAndSwitchSystem+0xe0>
 800f846:	e7e7      	b.n	800f818 <UTILS_EnablePLLAndSwitchSystem+0xc0>
 800f848:	080189b0 	.word	0x080189b0
 800f84c:	200001d4 	.word	0x200001d4

0800f850 <LL_PLL_ConfigSystemClock_HSI>:
{
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	4604      	mov	r4, r0
  if (UTILS_PLL_IsBusy() == SUCCESS)
 800f854:	f007 fc5c 	bl	8017110 <UTILS_PLL_IsBusy>
 800f858:	2801      	cmp	r0, #1
{
 800f85a:	460d      	mov	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 800f85c:	d12e      	bne.n	800f8bc <LL_PLL_ConfigSystemClock_HSI+0x6c>
    pllrfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800f85e:	4818      	ldr	r0, [pc, #96]	; (800f8c0 <LL_PLL_ConfigSystemClock_HSI+0x70>)
 800f860:	4621      	mov	r1, r4
 800f862:	f007 fc46 	bl	80170f2 <UTILS_GetPLLOutputFrequency>
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 800f866:	686b      	ldr	r3, [r5, #4]
 800f868:	4a16      	ldr	r2, [pc, #88]	; (800f8c4 <LL_PLL_ConfigSystemClock_HSI+0x74>)
 800f86a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (hclk2freq > UTILS_HCLK2_MAX)
 800f872:	4a15      	ldr	r2, [pc, #84]	; (800f8c8 <LL_PLL_ConfigSystemClock_HSI+0x78>)
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 800f874:	fbb0 f3f3 	udiv	r3, r0, r3
    if (hclk2freq > UTILS_HCLK2_MAX)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d81f      	bhi.n	800f8bc <LL_PLL_ConfigSystemClock_HSI+0x6c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f87c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	0551      	lsls	r1, r2, #21
 800f884:	d406      	bmi.n	800f894 <LL_PLL_ConfigSystemClock_HSI+0x44>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f88c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	0552      	lsls	r2, r2, #21
 800f892:	d5fc      	bpl.n	800f88e <LL_PLL_ConfigSystemClock_HSI+0x3e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800f894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f898:	4b0c      	ldr	r3, [pc, #48]	; (800f8cc <LL_PLL_ConfigSystemClock_HSI+0x7c>)
 800f89a:	68d6      	ldr	r6, [r2, #12]
 800f89c:	6861      	ldr	r1, [r4, #4]
 800f89e:	4033      	ands	r3, r6
 800f8a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f8a4:	6821      	ldr	r1, [r4, #0]
 800f8a6:	430b      	orrs	r3, r1
 800f8a8:	68a1      	ldr	r1, [r4, #8]
 800f8aa:	430b      	orrs	r3, r1
 800f8ac:	f043 0302 	orr.w	r3, r3, #2
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 800f8b0:	4629      	mov	r1, r5
 800f8b2:	60d3      	str	r3, [r2, #12]
}
 800f8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 800f8b8:	f7ff bf4e 	b.w	800f758 <UTILS_EnablePLLAndSwitchSystem>
}
 800f8bc:	2000      	movs	r0, #0
 800f8be:	bd70      	pop	{r4, r5, r6, pc}
 800f8c0:	00f42400 	.word	0x00f42400
 800f8c4:	080189b0 	.word	0x080189b0
 800f8c8:	02dc6c00 	.word	0x02dc6c00
 800f8cc:	1fff808c 	.word	0x1fff808c

0800f8d0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800f8d0:	4b0e      	ldr	r3, [pc, #56]	; (800f90c <z_sys_init_run_level+0x3c>)
{
 800f8d2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800f8d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800f8d8:	3001      	adds	r0, #1
 800f8da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f8de:	42a6      	cmp	r6, r4
 800f8e0:	d800      	bhi.n	800f8e4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 800f8e2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 800f8e4:	e9d4 3500 	ldrd	r3, r5, [r4]
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	4798      	blx	r3
		if (dev != NULL) {
 800f8ec:	b165      	cbz	r5, 800f908 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 800f8ee:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 800f8f0:	b130      	cbz	r0, 800f900 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	bfb8      	it	lt
 800f8f6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800f8f8:	28ff      	cmp	r0, #255	; 0xff
 800f8fa:	bfa8      	it	ge
 800f8fc:	20ff      	movge	r0, #255	; 0xff
 800f8fe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 800f900:	785a      	ldrb	r2, [r3, #1]
 800f902:	f042 0201 	orr.w	r2, r2, #1
 800f906:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800f908:	3408      	adds	r4, #8
 800f90a:	e7e8      	b.n	800f8de <z_sys_init_run_level+0xe>
 800f90c:	080189f0 	.word	0x080189f0

0800f910 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800f910:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800f912:	4605      	mov	r5, r0
 800f914:	b910      	cbnz	r0, 800f91c <z_impl_device_get_binding+0xc>
		return NULL;
 800f916:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 800f918:	4620      	mov	r0, r4
 800f91a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800f91c:	7803      	ldrb	r3, [r0, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d0f9      	beq.n	800f916 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 800f922:	4c0e      	ldr	r4, [pc, #56]	; (800f95c <z_impl_device_get_binding+0x4c>)
 800f924:	4e0e      	ldr	r6, [pc, #56]	; (800f960 <z_impl_device_get_binding+0x50>)
 800f926:	42b4      	cmp	r4, r6
 800f928:	d108      	bne.n	800f93c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 800f92a:	4c0c      	ldr	r4, [pc, #48]	; (800f95c <z_impl_device_get_binding+0x4c>)
 800f92c:	42b4      	cmp	r4, r6
 800f92e:	d0f2      	beq.n	800f916 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800f930:	4620      	mov	r0, r4
 800f932:	f007 fbf6 	bl	8017122 <z_device_is_ready>
 800f936:	b950      	cbnz	r0, 800f94e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 800f938:	3418      	adds	r4, #24
 800f93a:	e7f7      	b.n	800f92c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800f93c:	4620      	mov	r0, r4
 800f93e:	f007 fbf0 	bl	8017122 <z_device_is_ready>
 800f942:	b110      	cbz	r0, 800f94a <z_impl_device_get_binding+0x3a>
 800f944:	6823      	ldr	r3, [r4, #0]
 800f946:	42ab      	cmp	r3, r5
 800f948:	d0e6      	beq.n	800f918 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 800f94a:	3418      	adds	r4, #24
 800f94c:	e7eb      	b.n	800f926 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800f94e:	6821      	ldr	r1, [r4, #0]
 800f950:	4628      	mov	r0, r5
 800f952:	f7f1 fd2e 	bl	80013b2 <strcmp>
 800f956:	2800      	cmp	r0, #0
 800f958:	d1ee      	bne.n	800f938 <z_impl_device_get_binding+0x28>
 800f95a:	e7dd      	b.n	800f918 <z_impl_device_get_binding+0x8>
 800f95c:	08017cb8 	.word	0x08017cb8
 800f960:	08017e68 	.word	0x08017e68

0800f964 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800f964:	4b01      	ldr	r3, [pc, #4]	; (800f96c <z_impl_z_errno+0x8>)
 800f966:	6898      	ldr	r0, [r3, #8]
}
 800f968:	3064      	adds	r0, #100	; 0x64
 800f96a:	4770      	bx	lr
 800f96c:	20002268 	.word	0x20002268

0800f970 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800f970:	b510      	push	{r4, lr}
 800f972:	4604      	mov	r4, r0
 800f974:	b086      	sub	sp, #24
	z_impl_log_panic();
 800f976:	f7f4 fc99 	bl	80042ac <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 800f97a:	4b07      	ldr	r3, [pc, #28]	; (800f998 <k_sys_fatal_error_handler+0x28>)
 800f97c:	9304      	str	r3, [sp, #16]
 800f97e:	2302      	movs	r3, #2
 800f980:	9303      	str	r3, [sp, #12]
 800f982:	4806      	ldr	r0, [pc, #24]	; (800f99c <k_sys_fatal_error_handler+0x2c>)
 800f984:	2300      	movs	r3, #0
 800f986:	aa03      	add	r2, sp, #12
 800f988:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800f98c:	f002 fe06 	bl	801259c <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800f990:	4620      	mov	r0, r4
 800f992:	f007 fbe0 	bl	8017156 <arch_system_halt>
 800f996:	bf00      	nop
 800f998:	0801a956 	.word	0x0801a956
 800f99c:	080180e8 	.word	0x080180e8

0800f9a0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800f9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a4:	4605      	mov	r5, r0
 800f9a6:	b08c      	sub	sp, #48	; 0x30
 800f9a8:	460f      	mov	r7, r1
	__asm__ volatile(
 800f9aa:	f04f 0310 	mov.w	r3, #16
 800f9ae:	f3ef 8811 	mrs	r8, BASEPRI
 800f9b2:	f383 8812 	msr	BASEPRI_MAX, r3
 800f9b6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800f9ba:	f000 ff2b 	bl	8010814 <z_impl_z_current_get>
 800f9be:	2d04      	cmp	r5, #4
 800f9c0:	bf96      	itet	ls
 800f9c2:	4b22      	ldrls	r3, [pc, #136]	; (800fa4c <z_fatal_error+0xac>)
 800f9c4:	4b22      	ldrhi	r3, [pc, #136]	; (800fa50 <z_fatal_error+0xb0>)
 800f9c6:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800f9ca:	4922      	ldr	r1, [pc, #136]	; (800fa54 <z_fatal_error+0xb4>)
 800f9cc:	9503      	str	r5, [sp, #12]
 800f9ce:	2600      	movs	r6, #0
 800f9d0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 800f9d4:	4b20      	ldr	r3, [pc, #128]	; (800fa58 <z_fatal_error+0xb8>)
 800f9d6:	9600      	str	r6, [sp, #0]
 800f9d8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800f9dc:	4604      	mov	r4, r0
 800f9de:	4633      	mov	r3, r6
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f007 fba7 	bl	8017136 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800f9e8:	b177      	cbz	r7, 800fa08 <z_fatal_error+0x68>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9f0:	b153      	cbz	r3, 800fa08 <z_fatal_error+0x68>
		LOG_ERR("Fault during interrupt handling\n");
 800f9f2:	4b1a      	ldr	r3, [pc, #104]	; (800fa5c <z_fatal_error+0xbc>)
 800f9f4:	930a      	str	r3, [sp, #40]	; 0x28
 800f9f6:	2302      	movs	r3, #2
 800f9f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9fa:	4816      	ldr	r0, [pc, #88]	; (800fa54 <z_fatal_error+0xb4>)
 800f9fc:	4633      	mov	r3, r6
 800f9fe:	aa09      	add	r2, sp, #36	; 0x24
 800fa00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800fa04:	f002 fdca 	bl	801259c <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800fa08:	b12c      	cbz	r4, 800fa16 <z_fatal_error+0x76>
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f007 fbe2 	bl	80171d4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800fa10:	b108      	cbz	r0, 800fa16 <z_fatal_error+0x76>
 800fa12:	7803      	ldrb	r3, [r0, #0]
 800fa14:	b903      	cbnz	r3, 800fa18 <z_fatal_error+0x78>
		thread_name = "unknown";
 800fa16:	4812      	ldr	r0, [pc, #72]	; (800fa60 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800fa18:	4b12      	ldr	r3, [pc, #72]	; (800fa64 <z_fatal_error+0xc4>)
 800fa1a:	9302      	str	r3, [sp, #8]
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	e9cd 4003 	strd	r4, r0, [sp, #12]
 800fa22:	e9cd 3300 	strd	r3, r3, [sp]
 800fa26:	4618      	mov	r0, r3
 800fa28:	2201      	movs	r2, #1
 800fa2a:	490a      	ldr	r1, [pc, #40]	; (800fa54 <z_fatal_error+0xb4>)
 800fa2c:	f007 fb83 	bl	8017136 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800fa30:	4639      	mov	r1, r7
 800fa32:	4628      	mov	r0, r5
 800fa34:	f7ff ff9c 	bl	800f970 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800fa38:	f388 8811 	msr	BASEPRI, r8
 800fa3c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800fa40:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800fa42:	b00c      	add	sp, #48	; 0x30
 800fa44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa48:	f7f5 bbba 	b.w	80051c0 <z_impl_k_thread_abort>
 800fa4c:	08018a08 	.word	0x08018a08
 800fa50:	08019c92 	.word	0x08019c92
 800fa54:	080180e8 	.word	0x080180e8
 800fa58:	0801a965 	.word	0x0801a965
 800fa5c:	0801a98d 	.word	0x0801a98d
 800fa60:	08019afd 	.word	0x08019afd
 800fa64:	0801a9ae 	.word	0x0801a9ae

0800fa68 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800fa68:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800fa6a:	4b0a      	ldr	r3, [pc, #40]	; (800fa94 <bg_thread_main+0x2c>)
 800fa6c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800fa6e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 800fa70:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800fa72:	f7ff ff2d 	bl	800f8d0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800fa76:	f001 f9d3 	bl	8010e20 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800fa7a:	2003      	movs	r0, #3
 800fa7c:	f7ff ff28 	bl	800f8d0 <z_sys_init_run_level>

	z_init_static_threads();
 800fa80:	f000 f96a 	bl	800fd58 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 800fa84:	f7f2 fbee 	bl	8002264 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800fa88:	4a03      	ldr	r2, [pc, #12]	; (800fa98 <bg_thread_main+0x30>)
 800fa8a:	7b13      	ldrb	r3, [r2, #12]
 800fa8c:	f023 0301 	bic.w	r3, r3, #1
 800fa90:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800fa92:	bd08      	pop	{r3, pc}
 800fa94:	20002556 	.word	0x20002556
 800fa98:	20000bb0 	.word	0x20000bb0

0800fa9c <z_bss_zero>:
{
 800fa9c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 800fa9e:	4803      	ldr	r0, [pc, #12]	; (800faac <z_bss_zero+0x10>)
 800faa0:	4a03      	ldr	r2, [pc, #12]	; (800fab0 <z_bss_zero+0x14>)
 800faa2:	2100      	movs	r1, #0
 800faa4:	1a12      	subs	r2, r2, r0
 800faa6:	f007 fb5f 	bl	8017168 <z_early_memset>
}
 800faaa:	bd08      	pop	{r3, pc}
 800faac:	200003e0 	.word	0x200003e0
 800fab0:	20002558 	.word	0x20002558

0800fab4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 800fab4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 800fab6:	2300      	movs	r3, #0
{
 800fab8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 800faba:	2201      	movs	r2, #1
 800fabc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 800fac0:	4e13      	ldr	r6, [pc, #76]	; (800fb10 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800fac2:	4d14      	ldr	r5, [pc, #80]	; (800fb14 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 800fac4:	9301      	str	r3, [sp, #4]
 800fac6:	220f      	movs	r2, #15
 800fac8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800facc:	4912      	ldr	r1, [pc, #72]	; (800fb18 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800face:	2318      	movs	r3, #24
 800fad0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 800fad4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 800fad8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 800fada:	f44f 7090 	mov.w	r0, #288	; 0x120
 800fade:	fb00 1104 	mla	r1, r0, r4, r1
 800fae2:	4b0e      	ldr	r3, [pc, #56]	; (800fb1c <z_init_cpu+0x68>)
 800fae4:	9500      	str	r5, [sp, #0]
 800fae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800faea:	4630      	mov	r0, r6
 800faec:	f000 f8d6 	bl	800fc9c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800faf0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800faf2:	480b      	ldr	r0, [pc, #44]	; (800fb20 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
 800faf4:	752c      	strb	r4, [r5, #20]
 800faf6:	f023 0304 	bic.w	r3, r3, #4
 800fafa:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800fafc:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800fb00:	fb03 0404 	mla	r4, r3, r4, r0
 800fb04:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800fb06:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 800fb08:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 800fb0a:	b006      	add	sp, #24
 800fb0c:	bd70      	pop	{r4, r5, r6, pc}
 800fb0e:	bf00      	nop
 800fb10:	20000b30 	.word	0x20000b30
 800fb14:	20002268 	.word	0x20002268
 800fb18:	20009100 	.word	0x20009100
 800fb1c:	080171dd 	.word	0x080171dd
 800fb20:	20009220 	.word	0x20009220

0800fb24 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800fb24:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800fb26:	4b2e      	ldr	r3, [pc, #184]	; (800fbe0 <z_cstart+0xbc>)
 800fb28:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800fb2a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800fb2e:	4d2d      	ldr	r5, [pc, #180]	; (800fbe4 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 800fb30:	4e2d      	ldr	r6, [pc, #180]	; (800fbe8 <z_cstart+0xc4>)
 800fb32:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800fb34:	4f2d      	ldr	r7, [pc, #180]	; (800fbec <z_cstart+0xc8>)
 800fb36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fb3a:	616b      	str	r3, [r5, #20]
 800fb3c:	2400      	movs	r4, #0
 800fb3e:	23f0      	movs	r3, #240	; 0xf0
 800fb40:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800fb44:	77ec      	strb	r4, [r5, #31]
 800fb46:	762c      	strb	r4, [r5, #24]
 800fb48:	766c      	strb	r4, [r5, #25]
 800fb4a:	76ac      	strb	r4, [r5, #26]
 800fb4c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800fb50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb52:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800fb56:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800fb58:	f7f5 fafe 	bl	8005158 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800fb5c:	f7f4 fed8 	bl	8004910 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800fb60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb64:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800fb66:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
 800fb68:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800fb6a:	f7f5 fbe9 	bl	8005340 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800fb6e:	f7f5 fb39 	bl	80051e4 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800fb72:	f7f4 faa5 	bl	80040c0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800fb76:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
 800fb7a:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
 800fb7c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
 800fb80:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
 800fb84:	f001 f946 	bl	8010e14 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
 800fb88:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800fb8a:	f007 fac9 	bl	8017120 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800fb8e:	4620      	mov	r0, r4
 800fb90:	f7ff fe9e 	bl	800f8d0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800fb94:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 800fb96:	4d16      	ldr	r5, [pc, #88]	; (800fbf0 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800fb98:	f7ff fe9a 	bl	800f8d0 <z_sys_init_run_level>
	z_sched_init();
 800fb9c:	f000 fd8e 	bl	80106bc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800fba0:	4b14      	ldr	r3, [pc, #80]	; (800fbf4 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 800fba2:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800fba4:	9305      	str	r3, [sp, #20]
 800fba6:	2301      	movs	r3, #1
 800fba8:	4913      	ldr	r1, [pc, #76]	; (800fbf8 <z_cstart+0xd4>)
 800fbaa:	9400      	str	r4, [sp, #0]
 800fbac:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800fbb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fbb4:	463b      	mov	r3, r7
 800fbb6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800fbba:	4628      	mov	r0, r5
 800fbbc:	f000 f86e 	bl	800fc9c <z_setup_new_thread>
 800fbc0:	7b6a      	ldrb	r2, [r5, #13]
 800fbc2:	4606      	mov	r6, r0
 800fbc4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800fbc8:	4628      	mov	r0, r5
 800fbca:	736a      	strb	r2, [r5, #13]
 800fbcc:	f007 fbc4 	bl	8017358 <z_ready_thread>
	z_init_cpu(0);
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f7ff ff6f 	bl	800fab4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800fbd6:	463a      	mov	r2, r7
 800fbd8:	4631      	mov	r1, r6
 800fbda:	4628      	mov	r0, r5
 800fbdc:	f7f4 ffe8 	bl	8004bb0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800fbe0:	20009a40 	.word	0x20009a40
 800fbe4:	e000ed00 	.word	0xe000ed00
 800fbe8:	20002268 	.word	0x20002268
 800fbec:	0800fa69 	.word	0x0800fa69
 800fbf0:	20000bb0 	.word	0x20000bb0
 800fbf4:	08019118 	.word	0x08019118
 800fbf8:	200088e0 	.word	0x200088e0

0800fbfc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800fbfc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800fbfe:	4b0e      	ldr	r3, [pc, #56]	; (800fc38 <init_mem_slab_module+0x3c>)
 800fc00:	4c0e      	ldr	r4, [pc, #56]	; (800fc3c <init_mem_slab_module+0x40>)
 800fc02:	42a3      	cmp	r3, r4
 800fc04:	d301      	bcc.n	800fc0a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 800fc06:	2000      	movs	r0, #0
	return rc;
}
 800fc08:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800fc0a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 800fc0e:	ea41 0200 	orr.w	r2, r1, r0
 800fc12:	f012 0203 	ands.w	r2, r2, #3
 800fc16:	d10b      	bne.n	800fc30 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 800fc18:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 800fc1a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 800fc1c:	42aa      	cmp	r2, r5
 800fc1e:	d101      	bne.n	800fc24 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800fc20:	331c      	adds	r3, #28
 800fc22:	e7ee      	b.n	800fc02 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 800fc24:	695e      	ldr	r6, [r3, #20]
 800fc26:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 800fc28:	3201      	adds	r2, #1
		slab->free_list = p;
 800fc2a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
 800fc2c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 800fc2e:	e7f5      	b.n	800fc1c <init_mem_slab_module+0x20>
	return rc;
 800fc30:	f06f 0015 	mvn.w	r0, #21
 800fc34:	e7e8      	b.n	800fc08 <init_mem_slab_module+0xc>
 800fc36:	bf00      	nop
 800fc38:	200002e8 	.word	0x200002e8
 800fc3c:	20000320 	.word	0x20000320

0800fc40 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 800fc40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc42:	460c      	mov	r4, r1
	__asm__ volatile(
 800fc44:	f04f 0510 	mov.w	r5, #16
 800fc48:	f3ef 8111 	mrs	r1, BASEPRI
 800fc4c:	f385 8812 	msr	BASEPRI_MAX, r5
 800fc50:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 800fc54:	6945      	ldr	r5, [r0, #20]
 800fc56:	b15d      	cbz	r5, 800fc70 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 800fc58:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 800fc5a:	682b      	ldr	r3, [r5, #0]
 800fc5c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 800fc5e:	6983      	ldr	r3, [r0, #24]
 800fc60:	3301      	adds	r3, #1
 800fc62:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 800fc64:	2000      	movs	r0, #0
	__asm__ volatile(
 800fc66:	f381 8811 	msr	BASEPRI, r1
 800fc6a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 800fc6e:	e011      	b.n	800fc94 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 800fc70:	ea52 0c03 	orrs.w	ip, r2, r3
 800fc74:	d103      	bne.n	800fc7e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 800fc76:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 800fc78:	f06f 000b 	mvn.w	r0, #11
 800fc7c:	e7f3      	b.n	800fc66 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 800fc7e:	e9cd 2300 	strd	r2, r3, [sp]
 800fc82:	4602      	mov	r2, r0
 800fc84:	3008      	adds	r0, #8
 800fc86:	f000 fc6f 	bl	8010568 <z_pend_curr>
		if (result == 0) {
 800fc8a:	b918      	cbnz	r0, 800fc94 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 800fc8c:	4b02      	ldr	r3, [pc, #8]	; (800fc98 <k_mem_slab_alloc+0x58>)
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	695b      	ldr	r3, [r3, #20]
 800fc92:	6023      	str	r3, [r4, #0]
}
 800fc94:	b003      	add	sp, #12
 800fc96:	bd30      	pop	{r4, r5, pc}
 800fc98:	20002268 	.word	0x20002268

0800fc9c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800fc9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 800fca0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fca2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800fca4:	2604      	movs	r6, #4
 800fca6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 800fca8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800fcaa:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800fcac:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 800fcb0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800fcb2:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
 800fcb4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800fcb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 800fcba:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800fcbc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800fcc0:	3720      	adds	r7, #32
	node->prev = NULL;
 800fcc2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 800fcc6:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
 800fcca:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 800fccc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800fcce:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800fcd0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800fcd4:	9202      	str	r2, [sp, #8]
 800fcd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fcd8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800fcda:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800fcdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fcde:	9200      	str	r2, [sp, #0]
 800fce0:	4642      	mov	r2, r8
{
 800fce2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800fce4:	f7f4 ff32 	bl	8004b4c <arch_new_thread>
	if (!_current) {
 800fce8:	4b04      	ldr	r3, [pc, #16]	; (800fcfc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800fcea:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	b103      	cbz	r3, 800fcf2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 800fcf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800fcf2:	6763      	str	r3, [r4, #116]	; 0x74
}
 800fcf4:	4640      	mov	r0, r8
 800fcf6:	b004      	add	sp, #16
 800fcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcfc:	20002268 	.word	0x20002268

0800fd00 <z_impl_k_thread_create>:
{
 800fd00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd02:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800fd04:	2700      	movs	r7, #0
 800fd06:	9705      	str	r7, [sp, #20]
 800fd08:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800fd0a:	9704      	str	r7, [sp, #16]
 800fd0c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800fd0e:	9703      	str	r7, [sp, #12]
 800fd10:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800fd12:	9702      	str	r7, [sp, #8]
{
 800fd14:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800fd18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fd1a:	9701      	str	r7, [sp, #4]
 800fd1c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800fd1e:	9700      	str	r7, [sp, #0]
{
 800fd20:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800fd22:	f7ff ffbb 	bl	800fc9c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800fd26:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800fd2a:	bf08      	it	eq
 800fd2c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800fd30:	d005      	beq.n	800fd3e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800fd32:	ea55 0306 	orrs.w	r3, r5, r6
 800fd36:	d105      	bne.n	800fd44 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f000 fbb9 	bl	80104b0 <z_sched_start>
}
 800fd3e:	4620      	mov	r0, r4
 800fd40:	b007      	add	sp, #28
 800fd42:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800fd44:	4903      	ldr	r1, [pc, #12]	; (800fd54 <z_impl_k_thread_create+0x54>)
 800fd46:	4632      	mov	r2, r6
 800fd48:	462b      	mov	r3, r5
 800fd4a:	f104 0018 	add.w	r0, r4, #24
 800fd4e:	f000 fe3f 	bl	80109d0 <z_add_timeout>
 800fd52:	e7f4      	b.n	800fd3e <z_impl_k_thread_create+0x3e>
 800fd54:	08017379 	.word	0x08017379

0800fd58 <z_init_static_threads>:
{
 800fd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd5a:	4c22      	ldr	r4, [pc, #136]	; (800fde4 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 800fd5c:	4d22      	ldr	r5, [pc, #136]	; (800fde8 <z_init_static_threads+0x90>)
{
 800fd5e:	b087      	sub	sp, #28
 800fd60:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800fd62:	42ae      	cmp	r6, r5
 800fd64:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800fd68:	d30b      	bcc.n	800fd82 <z_init_static_threads+0x2a>
	k_sched_lock();
 800fd6a:	f000 fabb 	bl	80102e4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800fd6e:	4c1d      	ldr	r4, [pc, #116]	; (800fde4 <z_init_static_threads+0x8c>)
 800fd70:	4f1e      	ldr	r7, [pc, #120]	; (800fdec <z_init_static_threads+0x94>)
 800fd72:	260a      	movs	r6, #10
 800fd74:	42ac      	cmp	r4, r5
 800fd76:	d320      	bcc.n	800fdba <z_init_static_threads+0x62>
}
 800fd78:	b007      	add	sp, #28
 800fd7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800fd7e:	f000 bc81 	b.w	8010684 <k_sched_unlock>
		z_setup_new_thread(
 800fd82:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fd86:	9305      	str	r3, [sp, #20]
 800fd88:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800fd8c:	9304      	str	r3, [sp, #16]
 800fd8e:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800fd92:	9303      	str	r3, [sp, #12]
 800fd94:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800fd98:	9302      	str	r3, [sp, #8]
 800fd9a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800fd9e:	9301      	str	r3, [sp, #4]
 800fda0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800fdaa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800fdae:	f7ff ff75 	bl	800fc9c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800fdb2:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800fdb6:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800fdb8:	e7d2      	b.n	800fd60 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800fdba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fdbc:	1c53      	adds	r3, r2, #1
 800fdbe:	d009      	beq.n	800fdd4 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800fdc0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800fdc4:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800fdc8:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800fdcc:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800fdce:	d103      	bne.n	800fdd8 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800fdd0:	f000 fb6e 	bl	80104b0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800fdd4:	3430      	adds	r4, #48	; 0x30
 800fdd6:	e7cd      	b.n	800fd74 <z_init_static_threads+0x1c>
 800fdd8:	4639      	mov	r1, r7
 800fdda:	3018      	adds	r0, #24
 800fddc:	f000 fdf8 	bl	80109d0 <z_add_timeout>
 800fde0:	e7f8      	b.n	800fdd4 <z_init_static_threads+0x7c>
 800fde2:	bf00      	nop
 800fde4:	200002ac 	.word	0x200002ac
 800fde8:	200002ac 	.word	0x200002ac
 800fdec:	08017379 	.word	0x08017379

0800fdf0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800fdf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	4617      	mov	r7, r2
 800fdf8:	461e      	mov	r6, r3
	__asm__ volatile(
 800fdfa:	f04f 0310 	mov.w	r3, #16
 800fdfe:	f3ef 8811 	mrs	r8, BASEPRI
 800fe02:	f383 8812 	msr	BASEPRI_MAX, r3
 800fe06:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800fe0a:	68c3      	ldr	r3, [r0, #12]
 800fe0c:	4a32      	ldr	r2, [pc, #200]	; (800fed8 <z_impl_k_mutex_lock+0xe8>)
 800fe0e:	b16b      	cbz	r3, 800fe2c <z_impl_k_mutex_lock+0x3c>
 800fe10:	6880      	ldr	r0, [r0, #8]
 800fe12:	6891      	ldr	r1, [r2, #8]
 800fe14:	4288      	cmp	r0, r1
 800fe16:	d019      	beq.n	800fe4c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800fe18:	ea57 0306 	orrs.w	r3, r7, r6
 800fe1c:	d118      	bne.n	800fe50 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 800fe1e:	f388 8811 	msr	BASEPRI, r8
 800fe22:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 800fe26:	f06f 000f 	mvn.w	r0, #15
 800fe2a:	e00c      	b.n	800fe46 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 800fe2c:	6891      	ldr	r1, [r2, #8]
 800fe2e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800fe32:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 800fe34:	3301      	adds	r3, #1
 800fe36:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 800fe38:	6893      	ldr	r3, [r2, #8]
 800fe3a:	60a3      	str	r3, [r4, #8]
 800fe3c:	f388 8811 	msr	BASEPRI, r8
 800fe40:	f3bf 8f6f 	isb	sy
		return 0;
 800fe44:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800fe46:	b002      	add	sp, #8
 800fe48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 800fe4c:	6921      	ldr	r1, [r4, #16]
 800fe4e:	e7f0      	b.n	800fe32 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800fe50:	f991 100e 	ldrsb.w	r1, [r1, #14]
 800fe54:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 800fe58:	4299      	cmp	r1, r3
 800fe5a:	bfa8      	it	ge
 800fe5c:	4619      	movge	r1, r3
 800fe5e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 800fe62:	4291      	cmp	r1, r2
 800fe64:	bfb8      	it	lt
 800fe66:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800fe68:	428b      	cmp	r3, r1
 800fe6a:	dd2e      	ble.n	800feca <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 800fe6c:	f007 f9c2 	bl	80171f4 <adjust_owner_prio.isra.0>
 800fe70:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800fe72:	e9cd 7600 	strd	r7, r6, [sp]
 800fe76:	4819      	ldr	r0, [pc, #100]	; (800fedc <z_impl_k_mutex_lock+0xec>)
 800fe78:	4622      	mov	r2, r4
 800fe7a:	4641      	mov	r1, r8
 800fe7c:	f000 fb74 	bl	8010568 <z_pend_curr>
	if (got_mutex == 0) {
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d0e0      	beq.n	800fe46 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 800fe84:	f04f 0310 	mov.w	r3, #16
 800fe88:	f3ef 8611 	mrs	r6, BASEPRI
 800fe8c:	f383 8812 	msr	BASEPRI_MAX, r3
 800fe90:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800fe94:	6823      	ldr	r3, [r4, #0]
 800fe96:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fe98:	429c      	cmp	r4, r3
 800fe9a:	d00a      	beq.n	800feb2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800fe9c:	b14b      	cbz	r3, 800feb2 <z_impl_k_mutex_lock+0xc2>
 800fe9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800fea2:	4299      	cmp	r1, r3
 800fea4:	bfa8      	it	ge
 800fea6:	4619      	movge	r1, r3
 800fea8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800feac:	4299      	cmp	r1, r3
 800feae:	bfb8      	it	lt
 800feb0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800feb2:	68a0      	ldr	r0, [r4, #8]
 800feb4:	f007 f99e 	bl	80171f4 <adjust_owner_prio.isra.0>
 800feb8:	b900      	cbnz	r0, 800febc <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 800feba:	b145      	cbz	r5, 800fece <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 800febc:	4807      	ldr	r0, [pc, #28]	; (800fedc <z_impl_k_mutex_lock+0xec>)
 800febe:	4631      	mov	r1, r6
 800fec0:	f000 f9fe 	bl	80102c0 <z_reschedule>
	return -EAGAIN;
 800fec4:	f06f 000a 	mvn.w	r0, #10
 800fec8:	e7bd      	b.n	800fe46 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 800feca:	2500      	movs	r5, #0
 800fecc:	e7d1      	b.n	800fe72 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 800fece:	f386 8811 	msr	BASEPRI, r6
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	e7f5      	b.n	800fec4 <z_impl_k_mutex_lock+0xd4>
 800fed8:	20002268 	.word	0x20002268
 800fedc:	20002557 	.word	0x20002557

0800fee0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 800fee0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800fee2:	6883      	ldr	r3, [r0, #8]
{
 800fee4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d032      	beq.n	800ff50 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800feea:	4a1c      	ldr	r2, [pc, #112]	; (800ff5c <z_impl_k_mutex_unlock+0x7c>)
 800feec:	6892      	ldr	r2, [r2, #8]
 800feee:	4293      	cmp	r3, r2
 800fef0:	d131      	bne.n	800ff56 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800fef2:	7bda      	ldrb	r2, [r3, #15]
 800fef4:	3a01      	subs	r2, #1
 800fef6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800fef8:	68c3      	ldr	r3, [r0, #12]
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d905      	bls.n	800ff0a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800fefe:	3b01      	subs	r3, #1
 800ff00:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800ff02:	f000 fbbf 	bl	8010684 <k_sched_unlock>

	return 0;
 800ff06:	2000      	movs	r0, #0
}
 800ff08:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800ff0a:	f04f 0310 	mov.w	r3, #16
 800ff0e:	f3ef 8511 	mrs	r5, BASEPRI
 800ff12:	f383 8812 	msr	BASEPRI_MAX, r3
 800ff16:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800ff1a:	6901      	ldr	r1, [r0, #16]
 800ff1c:	6880      	ldr	r0, [r0, #8]
 800ff1e:	f007 f969 	bl	80171f4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800ff22:	4620      	mov	r0, r4
 800ff24:	f007 fa89 	bl	801743a <z_unpend_first_thread>
	mutex->owner = new_owner;
 800ff28:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800ff2a:	b158      	cbz	r0, 800ff44 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
 800ff2c:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800ff30:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800ff32:	2200      	movs	r2, #0
 800ff34:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800ff36:	f007 fa0f 	bl	8017358 <z_ready_thread>
		z_reschedule(&lock, key);
 800ff3a:	4809      	ldr	r0, [pc, #36]	; (800ff60 <z_impl_k_mutex_unlock+0x80>)
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	f000 f9bf 	bl	80102c0 <z_reschedule>
 800ff42:	e7de      	b.n	800ff02 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800ff44:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800ff46:	f385 8811 	msr	BASEPRI, r5
 800ff4a:	f3bf 8f6f 	isb	sy
 800ff4e:	e7d8      	b.n	800ff02 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800ff50:	f06f 0015 	mvn.w	r0, #21
 800ff54:	e7d8      	b.n	800ff08 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 800ff56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff5a:	e7d5      	b.n	800ff08 <z_impl_k_mutex_unlock+0x28>
 800ff5c:	20002268 	.word	0x20002268
 800ff60:	20002557 	.word	0x20002557

0800ff64 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	4604      	mov	r4, r0
	__asm__ volatile(
 800ff68:	f04f 0310 	mov.w	r3, #16
 800ff6c:	f3ef 8511 	mrs	r5, BASEPRI
 800ff70:	f383 8812 	msr	BASEPRI_MAX, r3
 800ff74:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800ff78:	f007 fa5f 	bl	801743a <z_unpend_first_thread>

	if (thread != NULL) {
 800ff7c:	b148      	cbz	r0, 800ff92 <z_impl_k_sem_give+0x2e>
 800ff7e:	2200      	movs	r2, #0
 800ff80:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800ff82:	f007 f9e9 	bl	8017358 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800ff86:	4629      	mov	r1, r5
 800ff88:	4808      	ldr	r0, [pc, #32]	; (800ffac <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800ff8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800ff8e:	f000 b997 	b.w	80102c0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800ff92:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	bf18      	it	ne
 800ff9a:	3301      	addne	r3, #1
 800ff9c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800ff9e:	2102      	movs	r1, #2
 800ffa0:	f104 0010 	add.w	r0, r4, #16
 800ffa4:	f007 fc1d 	bl	80177e2 <z_handle_obj_poll_events>
}
 800ffa8:	e7ed      	b.n	800ff86 <z_impl_k_sem_give+0x22>
 800ffaa:	bf00      	nop
 800ffac:	20002557 	.word	0x20002557

0800ffb0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800ffb0:	b513      	push	{r0, r1, r4, lr}
 800ffb2:	f04f 0410 	mov.w	r4, #16
 800ffb6:	f3ef 8111 	mrs	r1, BASEPRI
 800ffba:	f384 8812 	msr	BASEPRI_MAX, r4
 800ffbe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800ffc2:	6884      	ldr	r4, [r0, #8]
 800ffc4:	b144      	cbz	r4, 800ffd8 <z_impl_k_sem_take+0x28>
		sem->count--;
 800ffc6:	3c01      	subs	r4, #1
 800ffc8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800ffca:	f381 8811 	msr	BASEPRI, r1
 800ffce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800ffd2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800ffd4:	b002      	add	sp, #8
 800ffd6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800ffd8:	ea52 0403 	orrs.w	r4, r2, r3
 800ffdc:	d106      	bne.n	800ffec <z_impl_k_sem_take+0x3c>
 800ffde:	f381 8811 	msr	BASEPRI, r1
 800ffe2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800ffe6:	f06f 000f 	mvn.w	r0, #15
 800ffea:	e7f3      	b.n	800ffd4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800ffec:	e9cd 2300 	strd	r2, r3, [sp]
 800fff0:	4602      	mov	r2, r0
 800fff2:	4802      	ldr	r0, [pc, #8]	; (800fffc <z_impl_k_sem_take+0x4c>)
 800fff4:	f000 fab8 	bl	8010568 <z_pend_curr>
	return ret;
 800fff8:	e7ec      	b.n	800ffd4 <z_impl_k_sem_take+0x24>
 800fffa:	bf00      	nop
 800fffc:	20002557 	.word	0x20002557

08010000 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8010000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
 8010004:	4e47      	ldr	r6, [pc, #284]	; (8010124 <work_queue_main+0x124>)
 8010006:	b085      	sub	sp, #20
 8010008:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 801000a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801000e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
 8010012:	f04f 0310 	mov.w	r3, #16
 8010016:	f3ef 8711 	mrs	r7, BASEPRI
 801001a:	f383 8812 	msr	BASEPRI_MAX, r3
 801001e:	f3bf 8f6f 	isb	sy
 8010022:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 8010026:	b98d      	cbnz	r5, 801004c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 8010028:	2102      	movs	r1, #2
 801002a:	f104 0098 	add.w	r0, r4, #152	; 0x98
 801002e:	f007 f900 	bl	8017232 <flag_test_and_clear>
 8010032:	2800      	cmp	r0, #0
 8010034:	d135      	bne.n	80100a2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 8010036:	2300      	movs	r3, #0
 8010038:	e9cd 8900 	strd	r8, r9, [sp]
 801003c:	9302      	str	r3, [sp, #8]
 801003e:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8010042:	4639      	mov	r1, r7
 8010044:	4838      	ldr	r0, [pc, #224]	; (8010128 <work_queue_main+0x128>)
 8010046:	f000 fc4d 	bl	80108e4 <z_sched_wait>
			continue;
 801004a:	e7e2      	b.n	8010012 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 801004c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 8010050:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 8010052:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8010056:	4295      	cmp	r5, r2
 8010058:	d101      	bne.n	801005e <work_queue_main+0x5e>
	list->tail = node;
 801005a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 801005e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8010062:	f043 0302 	orr.w	r3, r3, #2
 8010066:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 801006a:	68eb      	ldr	r3, [r5, #12]
 801006c:	f023 0304 	bic.w	r3, r3, #4
 8010070:	f043 0301 	orr.w	r3, r3, #1
 8010074:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 8010076:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 8010078:	f387 8811 	msr	BASEPRI, r7
 801007c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 8010080:	4628      	mov	r0, r5
 8010082:	4798      	blx	r3
	__asm__ volatile(
 8010084:	f04f 0310 	mov.w	r3, #16
 8010088:	f3ef 8b11 	mrs	fp, BASEPRI
 801008c:	f383 8812 	msr	BASEPRI_MAX, r3
 8010090:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8010094:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8010096:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 8010098:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 801009c:	d40b      	bmi.n	80100b6 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 801009e:	60ea      	str	r2, [r5, #12]
 80100a0:	e00e      	b.n	80100c0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 80100a2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 80100a6:	2200      	movs	r2, #0
 80100a8:	2101      	movs	r1, #1
 80100aa:	4628      	mov	r0, r5
 80100ac:	f007 f9ee 	bl	801748c <z_sched_wake>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d1f8      	bne.n	80100a6 <work_queue_main+0xa6>
 80100b4:	e7bf      	b.n	8010036 <work_queue_main+0x36>
	return list->head;
 80100b6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 80100b8:	f023 0303 	bic.w	r3, r3, #3
 80100bc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80100be:	b970      	cbnz	r0, 80100de <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 80100c0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80100c4:	f023 0302 	bic.w	r3, r3, #2
 80100c8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
 80100cc:	f38b 8811 	msr	BASEPRI, fp
 80100d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 80100d4:	05d8      	lsls	r0, r3, #23
 80100d6:	d49c      	bmi.n	8010012 <work_queue_main+0x12>
	z_impl_k_yield();
 80100d8:	f000 fafc 	bl	80106d4 <z_impl_k_yield>
}
 80100dc:	e799      	b.n	8010012 <work_queue_main+0x12>
	return node->next;
 80100de:	2700      	movs	r7, #0
 80100e0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
 80100e4:	463b      	mov	r3, r7
		if (wc->work == work) {
 80100e6:	6842      	ldr	r2, [r0, #4]
 80100e8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 80100ea:	4601      	mov	r1, r0
		if (wc->work == work) {
 80100ec:	d10c      	bne.n	8010108 <work_queue_main+0x108>
	return node->next;
 80100ee:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 80100f0:	b997      	cbnz	r7, 8010118 <work_queue_main+0x118>
 80100f2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 80100f4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 80100f6:	4282      	cmp	r2, r0
 80100f8:	d100      	bne.n	80100fc <work_queue_main+0xfc>
	list->tail = node;
 80100fa:	6071      	str	r1, [r6, #4]
	parent->next = child;
 80100fc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 8010100:	f7ff ff30 	bl	800ff64 <z_impl_k_sem_give>
}
 8010104:	4639      	mov	r1, r7
 8010106:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8010108:	f1ba 0f00 	cmp.w	sl, #0
 801010c:	d0d8      	beq.n	80100c0 <work_queue_main+0xc0>
	return node->next;
 801010e:	4650      	mov	r0, sl
 8010110:	460f      	mov	r7, r1
 8010112:	f8da a000 	ldr.w	sl, [sl]
 8010116:	e7e6      	b.n	80100e6 <work_queue_main+0xe6>
	return list->tail;
 8010118:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
 801011a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 801011c:	4290      	cmp	r0, r2
	list->tail = node;
 801011e:	bf08      	it	eq
 8010120:	6077      	streq	r7, [r6, #4]
}
 8010122:	e7eb      	b.n	80100fc <work_queue_main+0xfc>
 8010124:	2000228c 	.word	0x2000228c
 8010128:	20002557 	.word	0x20002557

0801012c <submit_to_queue_locked>:
{
 801012c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 801012e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8010130:	079a      	lsls	r2, r3, #30
{
 8010132:	4604      	mov	r4, r0
 8010134:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8010136:	f3c3 0540 	ubfx	r5, r3, #1, #1
 801013a:	d41f      	bmi.n	801017c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 801013c:	075f      	lsls	r7, r3, #29
 801013e:	d41f      	bmi.n	8010180 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 8010140:	680a      	ldr	r2, [r1, #0]
 8010142:	b90a      	cbnz	r2, 8010148 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 8010144:	6882      	ldr	r2, [r0, #8]
 8010146:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8010148:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 801014a:	bf44      	itt	mi
 801014c:	68a3      	ldrmi	r3, [r4, #8]
 801014e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 8010150:	6837      	ldr	r7, [r6, #0]
			ret = 2;
 8010152:	bf4c      	ite	mi
 8010154:	2502      	movmi	r5, #2
		ret = 1;
 8010156:	2501      	movpl	r5, #1
	if (queue == NULL) {
 8010158:	b37f      	cbz	r7, 80101ba <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 801015a:	4b1b      	ldr	r3, [pc, #108]	; (80101c8 <submit_to_queue_locked+0x9c>)
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	42bb      	cmp	r3, r7
 8010160:	d111      	bne.n	8010186 <submit_to_queue_locked+0x5a>
 8010162:	f007 f82e 	bl	80171c2 <k_is_in_isr>
 8010166:	f080 0001 	eor.w	r0, r0, #1
 801016a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 801016c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8010170:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8010172:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8010176:	d523      	bpl.n	80101c0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 8010178:	b13a      	cbz	r2, 801018a <submit_to_queue_locked+0x5e>
 801017a:	b940      	cbnz	r0, 801018e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 801017c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 8010180:	2300      	movs	r3, #0
 8010182:	6033      	str	r3, [r6, #0]
	return ret;
 8010184:	e013      	b.n	80101ae <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8010186:	2000      	movs	r0, #0
 8010188:	e7f0      	b.n	801016c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 801018a:	071b      	lsls	r3, r3, #28
 801018c:	d4f6      	bmi.n	801017c <submit_to_queue_locked+0x50>
	parent->next = child;
 801018e:	2300      	movs	r3, #0
 8010190:	6023      	str	r3, [r4, #0]
	return list->tail;
 8010192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 8010196:	b963      	cbnz	r3, 80101b2 <submit_to_queue_locked+0x86>
	list->head = node;
 8010198:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
 801019c:	4638      	mov	r0, r7
 801019e:	f007 f853 	bl	8017248 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 80101a2:	68e3      	ldr	r3, [r4, #12]
 80101a4:	f043 0304 	orr.w	r3, r3, #4
 80101a8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 80101aa:	6833      	ldr	r3, [r6, #0]
 80101ac:	60a3      	str	r3, [r4, #8]
}
 80101ae:	4628      	mov	r0, r5
 80101b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 80101b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80101b4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
 80101b8:	e7f0      	b.n	801019c <submit_to_queue_locked+0x70>
		return -EINVAL;
 80101ba:	f06f 0515 	mvn.w	r5, #21
 80101be:	e7df      	b.n	8010180 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 80101c0:	f06f 0512 	mvn.w	r5, #18
 80101c4:	e7dc      	b.n	8010180 <submit_to_queue_locked+0x54>
 80101c6:	bf00      	nop
 80101c8:	20002268 	.word	0x20002268

080101cc <k_work_submit>:
{
 80101cc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 80101ce:	4801      	ldr	r0, [pc, #4]	; (80101d4 <k_work_submit+0x8>)
 80101d0:	f007 b84a 	b.w	8017268 <k_work_submit_to_queue>
 80101d4:	20000c38 	.word	0x20000c38

080101d8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 80101d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101da:	b089      	sub	sp, #36	; 0x24
 80101dc:	4604      	mov	r4, r0
	list->head = NULL;
 80101de:	2000      	movs	r0, #0
	list->tail = NULL;
 80101e0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 80101e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80101e6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 80101ea:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 80101ee:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80101f2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 80101f6:	b31d      	cbz	r5, 8010240 <k_work_queue_start+0x68>
 80101f8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 80101fa:	2800      	cmp	r0, #0
 80101fc:	f240 1001 	movw	r0, #257	; 0x101
 8010200:	bf08      	it	eq
 8010202:	2001      	moveq	r0, #1
	*flagp = flags;
 8010204:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8010208:	2000      	movs	r0, #0
 801020a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801020e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010212:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8010216:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801021a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801021e:	4b09      	ldr	r3, [pc, #36]	; (8010244 <k_work_queue_start+0x6c>)
 8010220:	9400      	str	r4, [sp, #0]
 8010222:	4620      	mov	r0, r4
 8010224:	f7ff fd6c 	bl	800fd00 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 8010228:	b125      	cbz	r5, 8010234 <k_work_queue_start+0x5c>
 801022a:	6829      	ldr	r1, [r5, #0]
 801022c:	b111      	cbz	r1, 8010234 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 801022e:	4620      	mov	r0, r4
 8010230:	f006 ffcd 	bl	80171ce <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8010234:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8010236:	b009      	add	sp, #36	; 0x24
 8010238:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801023c:	f006 bfcc 	b.w	80171d8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8010240:	2001      	movs	r0, #1
 8010242:	e7df      	b.n	8010204 <k_work_queue_start+0x2c>
 8010244:	08010001 	.word	0x08010001

08010248 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 8010248:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 801024a:	4d07      	ldr	r5, [pc, #28]	; (8010268 <z_reset_time_slice+0x20>)
 801024c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 801024e:	b154      	cbz	r4, 8010266 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8010250:	f7fe fb10 	bl	800e874 <sys_clock_elapsed>
 8010254:	4b05      	ldr	r3, [pc, #20]	; (801026c <z_reset_time_slice+0x24>)
 8010256:	4404      	add	r4, r0
 8010258:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 801025a:	6828      	ldr	r0, [r5, #0]
 801025c:	2100      	movs	r1, #0
	}
}
 801025e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 8010262:	f007 b946 	b.w	80174f2 <z_set_timeout_expiry>
}
 8010266:	bd38      	pop	{r3, r4, r5, pc}
 8010268:	2000229c 	.word	0x2000229c
 801026c:	20002268 	.word	0x20002268

08010270 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8010270:	b510      	push	{r4, lr}
	__asm__ volatile(
 8010272:	f04f 0310 	mov.w	r3, #16
 8010276:	f3ef 8411 	mrs	r4, BASEPRI
 801027a:	f383 8812 	msr	BASEPRI_MAX, r3
 801027e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8010282:	4a0c      	ldr	r2, [pc, #48]	; (80102b4 <k_sched_time_slice_set+0x44>)
 8010284:	2300      	movs	r3, #0
 8010286:	6113      	str	r3, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8010288:	2800      	cmp	r0, #0
			return ((uint32_t)t) * (to_hz / from_hz);
 801028a:	f04f 030a 	mov.w	r3, #10
 801028e:	fb00 f303 	mul.w	r3, r0, r3
 8010292:	4809      	ldr	r0, [pc, #36]	; (80102b8 <k_sched_time_slice_set+0x48>)
 8010294:	dc0a      	bgt.n	80102ac <k_sched_time_slice_set+0x3c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 8010296:	6003      	str	r3, [r0, #0]
		}
		slice_max_prio = prio;
 8010298:	4b08      	ldr	r3, [pc, #32]	; (80102bc <k_sched_time_slice_set+0x4c>)
		z_reset_time_slice(_current);
 801029a:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 801029c:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 801029e:	f7ff ffd3 	bl	8010248 <z_reset_time_slice>
	__asm__ volatile(
 80102a2:	f384 8811 	msr	BASEPRI, r4
 80102a6:	f3bf 8f6f 	isb	sy
	}
}
 80102aa:	bd10      	pop	{r4, pc}
			slice_ticks = MAX(2, slice_ticks);
 80102ac:	2b02      	cmp	r3, #2
 80102ae:	bfb8      	it	lt
 80102b0:	2302      	movlt	r3, #2
 80102b2:	e7f0      	b.n	8010296 <k_sched_time_slice_set+0x26>
 80102b4:	20002268 	.word	0x20002268
 80102b8:	2000229c 	.word	0x2000229c
 80102bc:	20002298 	.word	0x20002298

080102c0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80102c0:	b949      	cbnz	r1, 80102d6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102c2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 80102c6:	b930      	cbnz	r0, 80102d6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 80102c8:	4b05      	ldr	r3, [pc, #20]	; (80102e0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 80102ca:	699a      	ldr	r2, [r3, #24]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d001      	beq.n	80102d6 <z_reschedule+0x16>
	ret = arch_swap(key);
 80102d2:	f7f4 bbe7 	b.w	8004aa4 <arch_swap>
 80102d6:	f381 8811 	msr	BASEPRI, r1
 80102da:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 80102de:	4770      	bx	lr
 80102e0:	20002268 	.word	0x20002268

080102e4 <k_sched_lock>:
	__asm__ volatile(
 80102e4:	f04f 0310 	mov.w	r3, #16
 80102e8:	f3ef 8111 	mrs	r1, BASEPRI
 80102ec:	f383 8812 	msr	BASEPRI_MAX, r3
 80102f0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 80102f4:	4b04      	ldr	r3, [pc, #16]	; (8010308 <k_sched_lock+0x24>)
 80102f6:	689a      	ldr	r2, [r3, #8]
 80102f8:	7bd3      	ldrb	r3, [r2, #15]
 80102fa:	3b01      	subs	r3, #1
 80102fc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80102fe:	f381 8811 	msr	BASEPRI, r1
 8010302:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8010306:	4770      	bx	lr
 8010308:	20002268 	.word	0x20002268

0801030c <update_cache>:
{
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 8010310:	480c      	ldr	r0, [pc, #48]	; (8010344 <update_cache+0x38>)
 8010312:	4d0d      	ldr	r5, [pc, #52]	; (8010348 <update_cache+0x3c>)
 8010314:	f007 f81a 	bl	801734c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8010318:	4604      	mov	r4, r0
 801031a:	b900      	cbnz	r0, 801031e <update_cache+0x12>
 801031c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 801031e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8010320:	b94a      	cbnz	r2, 8010336 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8010322:	7b5a      	ldrb	r2, [r3, #13]
 8010324:	06d2      	lsls	r2, r2, #27
 8010326:	d106      	bne.n	8010336 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8010328:	69a2      	ldr	r2, [r4, #24]
 801032a:	b922      	cbnz	r2, 8010336 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 801032c:	89da      	ldrh	r2, [r3, #14]
 801032e:	2a7f      	cmp	r2, #127	; 0x7f
 8010330:	d901      	bls.n	8010336 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8010332:	61ab      	str	r3, [r5, #24]
}
 8010334:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8010336:	429c      	cmp	r4, r3
 8010338:	d002      	beq.n	8010340 <update_cache+0x34>
			z_reset_time_slice(thread);
 801033a:	4620      	mov	r0, r4
 801033c:	f7ff ff84 	bl	8010248 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8010340:	61ac      	str	r4, [r5, #24]
}
 8010342:	e7f7      	b.n	8010334 <update_cache+0x28>
 8010344:	20002284 	.word	0x20002284
 8010348:	20002268 	.word	0x20002268

0801034c <move_thread_to_end_of_prio_q>:
{
 801034c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 801034e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8010352:	7b43      	ldrb	r3, [r0, #13]
 8010354:	2a00      	cmp	r2, #0
{
 8010356:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8010358:	da04      	bge.n	8010364 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801035a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801035e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8010360:	f006 ff9f 	bl	80172a2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8010364:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8010366:	4a15      	ldr	r2, [pc, #84]	; (80103bc <move_thread_to_end_of_prio_q+0x70>)
 8010368:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801036c:	734b      	strb	r3, [r1, #13]
	return (node == list->tail) ? NULL : node->next;
 801036e:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010372:	f102 051c 	add.w	r5, r2, #28
 8010376:	42ab      	cmp	r3, r5
 8010378:	d01b      	beq.n	80103b2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801037a:	b1d3      	cbz	r3, 80103b2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 801037c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8010380:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 8010384:	4286      	cmp	r6, r0
 8010386:	d00f      	beq.n	80103a8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 8010388:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 801038a:	2800      	cmp	r0, #0
 801038c:	dd0c      	ble.n	80103a8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 801038e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8010390:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8010394:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8010396:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8010398:	6890      	ldr	r0, [r2, #8]
 801039a:	1a43      	subs	r3, r0, r1
 801039c:	4258      	negs	r0, r3
}
 801039e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80103a2:	4158      	adcs	r0, r3
 80103a4:	f7ff bfb2 	b.w	801030c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80103a8:	42a3      	cmp	r3, r4
 80103aa:	d002      	beq.n	80103b2 <move_thread_to_end_of_prio_q+0x66>
 80103ac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1e6      	bne.n	8010380 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 80103b2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 80103b6:	6021      	str	r1, [r4, #0]
	list->tail = node;
 80103b8:	6211      	str	r1, [r2, #32]
}
 80103ba:	e7ed      	b.n	8010398 <move_thread_to_end_of_prio_q+0x4c>
 80103bc:	20002268 	.word	0x20002268

080103c0 <z_time_slice>:
{
 80103c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80103c2:	f04f 0310 	mov.w	r3, #16
 80103c6:	f3ef 8511 	mrs	r5, BASEPRI
 80103ca:	f383 8812 	msr	BASEPRI_MAX, r3
 80103ce:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80103d2:	4b17      	ldr	r3, [pc, #92]	; (8010430 <z_time_slice+0x70>)
 80103d4:	4a17      	ldr	r2, [pc, #92]	; (8010434 <z_time_slice+0x74>)
 80103d6:	689c      	ldr	r4, [r3, #8]
 80103d8:	6811      	ldr	r1, [r2, #0]
 80103da:	428c      	cmp	r4, r1
 80103dc:	d107      	bne.n	80103ee <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 80103de:	4620      	mov	r0, r4
 80103e0:	f7ff ff32 	bl	8010248 <z_reset_time_slice>
	__asm__ volatile(
 80103e4:	f385 8811 	msr	BASEPRI, r5
 80103e8:	f3bf 8f6f 	isb	sy
}
 80103ec:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 80103ee:	2100      	movs	r1, #0
 80103f0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 80103f2:	4a11      	ldr	r2, [pc, #68]	; (8010438 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 80103f4:	6812      	ldr	r2, [r2, #0]
 80103f6:	b1c2      	cbz	r2, 801042a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80103f8:	89e2      	ldrh	r2, [r4, #14]
 80103fa:	2a7f      	cmp	r2, #127	; 0x7f
 80103fc:	d815      	bhi.n	801042a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 80103fe:	7b62      	ldrb	r2, [r4, #13]
 8010400:	06d2      	lsls	r2, r2, #27
 8010402:	d112      	bne.n	801042a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8010404:	4a0d      	ldr	r2, [pc, #52]	; (801043c <z_time_slice+0x7c>)
 8010406:	f994 100e 	ldrsb.w	r1, [r4, #14]
 801040a:	6812      	ldr	r2, [r2, #0]
 801040c:	4291      	cmp	r1, r2
 801040e:	db0c      	blt.n	801042a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
 8010410:	4a0b      	ldr	r2, [pc, #44]	; (8010440 <z_time_slice+0x80>)
 8010412:	4294      	cmp	r4, r2
 8010414:	d009      	beq.n	801042a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 8010416:	691a      	ldr	r2, [r3, #16]
 8010418:	4282      	cmp	r2, r0
 801041a:	dc03      	bgt.n	8010424 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 801041c:	4620      	mov	r0, r4
 801041e:	f7ff ff95 	bl	801034c <move_thread_to_end_of_prio_q>
 8010422:	e7dc      	b.n	80103de <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 8010424:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 8010426:	611a      	str	r2, [r3, #16]
 8010428:	e7dc      	b.n	80103e4 <z_time_slice+0x24>
 801042a:	2200      	movs	r2, #0
 801042c:	e7fb      	b.n	8010426 <z_time_slice+0x66>
 801042e:	bf00      	nop
 8010430:	20002268 	.word	0x20002268
 8010434:	20002294 	.word	0x20002294
 8010438:	2000229c 	.word	0x2000229c
 801043c:	20002298 	.word	0x20002298
 8010440:	20000b30 	.word	0x20000b30

08010444 <ready_thread>:
{
 8010444:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8010446:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801044a:	7b43      	ldrb	r3, [r0, #13]
 801044c:	2a00      	cmp	r2, #0
 801044e:	db2a      	blt.n	80104a6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8010450:	06da      	lsls	r2, r3, #27
 8010452:	d128      	bne.n	80104a6 <ready_thread+0x62>
 8010454:	6982      	ldr	r2, [r0, #24]
 8010456:	bb32      	cbnz	r2, 80104a6 <ready_thread+0x62>
	return list->head == list;
 8010458:	4a14      	ldr	r2, [pc, #80]	; (80104ac <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 801045a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801045e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 8010460:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010464:	f102 051c 	add.w	r5, r2, #28
 8010468:	42ab      	cmp	r3, r5
 801046a:	d017      	beq.n	801049c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801046c:	b1b3      	cbz	r3, 801049c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 801046e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8010472:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 8010476:	428e      	cmp	r6, r1
 8010478:	d00b      	beq.n	8010492 <ready_thread+0x4e>
		return b2 - b1;
 801047a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 801047c:	2900      	cmp	r1, #0
 801047e:	dd08      	ble.n	8010492 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 8010480:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8010482:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8010486:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8010488:	6058      	str	r0, [r3, #4]
}
 801048a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 801048c:	2000      	movs	r0, #0
 801048e:	f7ff bf3d 	b.w	801030c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8010492:	42a3      	cmp	r3, r4
 8010494:	d002      	beq.n	801049c <ready_thread+0x58>
 8010496:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010498:	2b00      	cmp	r3, #0
 801049a:	d1ea      	bne.n	8010472 <ready_thread+0x2e>
	node->prev = tail;
 801049c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 80104a0:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80104a2:	6210      	str	r0, [r2, #32]
}
 80104a4:	e7f1      	b.n	801048a <ready_thread+0x46>
}
 80104a6:	bc70      	pop	{r4, r5, r6}
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	20002268 	.word	0x20002268

080104b0 <z_sched_start>:
{
 80104b0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80104b2:	f04f 0210 	mov.w	r2, #16
 80104b6:	f3ef 8411 	mrs	r4, BASEPRI
 80104ba:	f382 8812 	msr	BASEPRI_MAX, r2
 80104be:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80104c2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 80104c4:	0751      	lsls	r1, r2, #29
 80104c6:	d404      	bmi.n	80104d2 <z_sched_start+0x22>
	__asm__ volatile(
 80104c8:	f384 8811 	msr	BASEPRI, r4
 80104cc:	f3bf 8f6f 	isb	sy
}
 80104d0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80104d2:	f022 0204 	bic.w	r2, r2, #4
 80104d6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 80104d8:	f7ff ffb4 	bl	8010444 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80104dc:	4621      	mov	r1, r4
 80104de:	4802      	ldr	r0, [pc, #8]	; (80104e8 <z_sched_start+0x38>)
}
 80104e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80104e4:	f7ff beec 	b.w	80102c0 <z_reschedule>
 80104e8:	20002557 	.word	0x20002557

080104ec <unready_thread>:
{
 80104ec:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80104ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80104f2:	7b43      	ldrb	r3, [r0, #13]
 80104f4:	2a00      	cmp	r2, #0
{
 80104f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80104f8:	da04      	bge.n	8010504 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80104fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8010500:	f006 fecf 	bl	80172a2 <sys_dlist_remove>
	update_cache(thread == _current);
 8010504:	4b04      	ldr	r3, [pc, #16]	; (8010518 <unready_thread+0x2c>)
 8010506:	6898      	ldr	r0, [r3, #8]
 8010508:	1a43      	subs	r3, r0, r1
 801050a:	4258      	negs	r0, r3
 801050c:	4158      	adcs	r0, r3
}
 801050e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8010512:	f7ff befb 	b.w	801030c <update_cache>
 8010516:	bf00      	nop
 8010518:	20002268 	.word	0x20002268

0801051c <pend>:
{
 801051c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010520:	4606      	mov	r6, r0
 8010522:	4615      	mov	r5, r2
 8010524:	461c      	mov	r4, r3
	__asm__ volatile(
 8010526:	f04f 0310 	mov.w	r3, #16
 801052a:	f3ef 8711 	mrs	r7, BASEPRI
 801052e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010532:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8010536:	f006 ff41 	bl	80173bc <add_to_waitq_locked>
	__asm__ volatile(
 801053a:	f387 8811 	msr	BASEPRI, r7
 801053e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010542:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8010546:	bf08      	it	eq
 8010548:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 801054c:	d008      	beq.n	8010560 <pend+0x44>
 801054e:	462a      	mov	r2, r5
 8010550:	4623      	mov	r3, r4
 8010552:	f106 0018 	add.w	r0, r6, #24
 8010556:	4903      	ldr	r1, [pc, #12]	; (8010564 <pend+0x48>)
}
 8010558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801055c:	f000 ba38 	b.w	80109d0 <z_add_timeout>
 8010560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010564:	08017379 	.word	0x08017379

08010568 <z_pend_curr>:
{
 8010568:	b510      	push	{r4, lr}
	pending_current = _current;
 801056a:	4b07      	ldr	r3, [pc, #28]	; (8010588 <z_pend_curr+0x20>)
 801056c:	6898      	ldr	r0, [r3, #8]
 801056e:	4b07      	ldr	r3, [pc, #28]	; (801058c <z_pend_curr+0x24>)
{
 8010570:	460c      	mov	r4, r1
	pending_current = _current;
 8010572:	6018      	str	r0, [r3, #0]
{
 8010574:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8010576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801057a:	f7ff ffcf 	bl	801051c <pend>
 801057e:	4620      	mov	r0, r4
}
 8010580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010584:	f7f4 ba8e 	b.w	8004aa4 <arch_swap>
 8010588:	20002268 	.word	0x20002268
 801058c:	20002294 	.word	0x20002294

08010590 <z_set_prio>:
{
 8010590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010592:	4604      	mov	r4, r0
	__asm__ volatile(
 8010594:	f04f 0310 	mov.w	r3, #16
 8010598:	f3ef 8611 	mrs	r6, BASEPRI
 801059c:	f383 8812 	msr	BASEPRI_MAX, r3
 80105a0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 80105a4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80105a6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 80105a8:	b249      	sxtb	r1, r1
 80105aa:	d133      	bne.n	8010614 <z_set_prio+0x84>
		if (need_sched) {
 80105ac:	6982      	ldr	r2, [r0, #24]
 80105ae:	bb8a      	cbnz	r2, 8010614 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80105b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105b4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80105b6:	f006 fe74 	bl	80172a2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80105ba:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 80105bc:	4a17      	ldr	r2, [pc, #92]	; (801061c <z_set_prio+0x8c>)
				thread->base.prio = prio;
 80105be:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 80105c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80105c4:	7343      	strb	r3, [r0, #13]
 80105c6:	4610      	mov	r0, r2
 80105c8:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80105cc:	4283      	cmp	r3, r0
 80105ce:	d01b      	beq.n	8010608 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80105d0:	b1d3      	cbz	r3, 8010608 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 80105d2:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
 80105d4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 80105d8:	42a9      	cmp	r1, r5
 80105da:	d010      	beq.n	80105fe <z_set_prio+0x6e>
		return b2 - b1;
 80105dc:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 80105de:	2d00      	cmp	r5, #0
 80105e0:	dd0d      	ble.n	80105fe <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 80105e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80105e4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80105e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80105ea:	605c      	str	r4, [r3, #4]
			update_cache(1);
 80105ec:	2001      	movs	r0, #1
 80105ee:	f7ff fe8d 	bl	801030c <update_cache>
 80105f2:	2001      	movs	r0, #1
	__asm__ volatile(
 80105f4:	f386 8811 	msr	BASEPRI, r6
 80105f8:	f3bf 8f6f 	isb	sy
}
 80105fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 80105fe:	42bb      	cmp	r3, r7
 8010600:	d002      	beq.n	8010608 <z_set_prio+0x78>
 8010602:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010604:	2b00      	cmp	r3, #0
 8010606:	d1e5      	bne.n	80105d4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 8010608:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
 801060a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 801060e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8010610:	6214      	str	r4, [r2, #32]
}
 8010612:	e7eb      	b.n	80105ec <z_set_prio+0x5c>
			thread->base.prio = prio;
 8010614:	73a1      	strb	r1, [r4, #14]
 8010616:	2000      	movs	r0, #0
 8010618:	e7ec      	b.n	80105f4 <z_set_prio+0x64>
 801061a:	bf00      	nop
 801061c:	20002268 	.word	0x20002268

08010620 <z_impl_k_thread_suspend>:
{
 8010620:	b570      	push	{r4, r5, r6, lr}
 8010622:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8010624:	3018      	adds	r0, #24
 8010626:	f006 ff4e 	bl	80174c6 <z_abort_timeout>
	__asm__ volatile(
 801062a:	f04f 0310 	mov.w	r3, #16
 801062e:	f3ef 8611 	mrs	r6, BASEPRI
 8010632:	f383 8812 	msr	BASEPRI_MAX, r3
 8010636:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 801063a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 801063e:	7b63      	ldrb	r3, [r4, #13]
 8010640:	2a00      	cmp	r2, #0
 8010642:	da05      	bge.n	8010650 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010648:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 801064a:	4620      	mov	r0, r4
 801064c:	f006 fe29 	bl	80172a2 <sys_dlist_remove>
		update_cache(thread == _current);
 8010650:	4d0b      	ldr	r5, [pc, #44]	; (8010680 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8010652:	7b63      	ldrb	r3, [r4, #13]
 8010654:	68a8      	ldr	r0, [r5, #8]
 8010656:	f043 0310 	orr.w	r3, r3, #16
 801065a:	7363      	strb	r3, [r4, #13]
 801065c:	1b03      	subs	r3, r0, r4
 801065e:	4258      	negs	r0, r3
 8010660:	4158      	adcs	r0, r3
 8010662:	f7ff fe53 	bl	801030c <update_cache>
	__asm__ volatile(
 8010666:	f386 8811 	msr	BASEPRI, r6
 801066a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 801066e:	68ab      	ldr	r3, [r5, #8]
 8010670:	42a3      	cmp	r3, r4
 8010672:	d103      	bne.n	801067c <z_impl_k_thread_suspend+0x5c>
}
 8010674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8010678:	f006 be5e 	b.w	8017338 <z_reschedule_unlocked>
}
 801067c:	bd70      	pop	{r4, r5, r6, pc}
 801067e:	bf00      	nop
 8010680:	20002268 	.word	0x20002268

08010684 <k_sched_unlock>:
{
 8010684:	b510      	push	{r4, lr}
	__asm__ volatile(
 8010686:	f04f 0310 	mov.w	r3, #16
 801068a:	f3ef 8411 	mrs	r4, BASEPRI
 801068e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010692:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8010696:	4b08      	ldr	r3, [pc, #32]	; (80106b8 <k_sched_unlock+0x34>)
 8010698:	689a      	ldr	r2, [r3, #8]
 801069a:	7bd3      	ldrb	r3, [r2, #15]
 801069c:	3301      	adds	r3, #1
 801069e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80106a0:	2000      	movs	r0, #0
 80106a2:	f7ff fe33 	bl	801030c <update_cache>
	__asm__ volatile(
 80106a6:	f384 8811 	msr	BASEPRI, r4
 80106aa:	f3bf 8f6f 	isb	sy
}
 80106ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80106b2:	f006 be41 	b.w	8017338 <z_reschedule_unlocked>
 80106b6:	bf00      	nop
 80106b8:	20002268 	.word	0x20002268

080106bc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 80106bc:	4b04      	ldr	r3, [pc, #16]	; (80106d0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80106be:	2100      	movs	r1, #0
 80106c0:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 80106c4:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80106c8:	4608      	mov	r0, r1
 80106ca:	f7ff bdd1 	b.w	8010270 <k_sched_time_slice_set>
 80106ce:	bf00      	nop
 80106d0:	20002268 	.word	0x20002268

080106d4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 80106d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80106d6:	f04f 0310 	mov.w	r3, #16
 80106da:	f3ef 8511 	mrs	r5, BASEPRI
 80106de:	f383 8812 	msr	BASEPRI_MAX, r3
 80106e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 80106e6:	491a      	ldr	r1, [pc, #104]	; (8010750 <z_impl_k_yield+0x7c>)
 80106e8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80106ea:	7b43      	ldrb	r3, [r0, #13]
 80106ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106f0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80106f2:	f006 fdd6 	bl	80172a2 <sys_dlist_remove>
	}
	queue_thread(_current);
 80106f6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 80106f8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 80106fa:	4608      	mov	r0, r1
 80106fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010700:	735a      	strb	r2, [r3, #13]
 8010702:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010706:	4282      	cmp	r2, r0
 8010708:	d01c      	beq.n	8010744 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801070a:	b1da      	cbz	r2, 8010744 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 801070c:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 801070e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8010712:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 8010716:	42a6      	cmp	r6, r4
 8010718:	d00f      	beq.n	801073a <z_impl_k_yield+0x66>
		return b2 - b1;
 801071a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 801071c:	2c00      	cmp	r4, #0
 801071e:	dd0c      	ble.n	801073a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8010720:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8010722:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 8010726:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8010728:	6053      	str	r3, [r2, #4]
	update_cache(1);
 801072a:	2001      	movs	r0, #1
 801072c:	f7ff fdee 	bl	801030c <update_cache>
 8010730:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8010732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010736:	f7f4 b9b5 	b.w	8004aa4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 801073a:	42ba      	cmp	r2, r7
 801073c:	d002      	beq.n	8010744 <z_impl_k_yield+0x70>
 801073e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010740:	2a00      	cmp	r2, #0
 8010742:	d1e6      	bne.n	8010712 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8010744:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 8010746:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 801074a:	6013      	str	r3, [r2, #0]
	list->tail = node;
 801074c:	620b      	str	r3, [r1, #32]
}
 801074e:	e7ec      	b.n	801072a <z_impl_k_yield+0x56>
 8010750:	20002268 	.word	0x20002268

08010754 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 8010754:	ea50 0301 	orrs.w	r3, r0, r1
{
 8010758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801075c:	4605      	mov	r5, r0
 801075e:	460e      	mov	r6, r1
	if (ticks == 0) {
 8010760:	d103      	bne.n	801076a <z_tick_sleep+0x16>
	z_impl_k_yield();
 8010762:	f7ff ffb7 	bl	80106d4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 8010766:	2000      	movs	r0, #0
 8010768:	e033      	b.n	80107d2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 801076a:	f06f 0401 	mvn.w	r4, #1
 801076e:	1a24      	subs	r4, r4, r0
 8010770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010774:	eb63 0301 	sbc.w	r3, r3, r1
 8010778:	2c01      	cmp	r4, #1
 801077a:	f173 0300 	sbcs.w	r3, r3, #0
 801077e:	da02      	bge.n	8010786 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8010780:	f006 fed1 	bl	8017526 <sys_clock_tick_get_32>
 8010784:	1944      	adds	r4, r0, r5
 8010786:	f04f 0310 	mov.w	r3, #16
 801078a:	f3ef 8811 	mrs	r8, BASEPRI
 801078e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010792:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8010796:	4f10      	ldr	r7, [pc, #64]	; (80107d8 <z_tick_sleep+0x84>)
 8010798:	4b10      	ldr	r3, [pc, #64]	; (80107dc <z_tick_sleep+0x88>)
 801079a:	68b8      	ldr	r0, [r7, #8]
 801079c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 801079e:	f7ff fea5 	bl	80104ec <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80107a2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80107a4:	490e      	ldr	r1, [pc, #56]	; (80107e0 <z_tick_sleep+0x8c>)
 80107a6:	462a      	mov	r2, r5
 80107a8:	4633      	mov	r3, r6
 80107aa:	3018      	adds	r0, #24
 80107ac:	f000 f910 	bl	80109d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	7b53      	ldrb	r3, [r2, #13]
 80107b4:	f043 0310 	orr.w	r3, r3, #16
 80107b8:	7353      	strb	r3, [r2, #13]
 80107ba:	4640      	mov	r0, r8
 80107bc:	f7f4 f972 	bl	8004aa4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80107c0:	f006 feb1 	bl	8017526 <sys_clock_tick_get_32>
 80107c4:	1a20      	subs	r0, r4, r0
 80107c6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80107ca:	2801      	cmp	r0, #1
 80107cc:	f173 0300 	sbcs.w	r3, r3, #0
 80107d0:	dbc9      	blt.n	8010766 <z_tick_sleep+0x12>
}
 80107d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d6:	bf00      	nop
 80107d8:	20002268 	.word	0x20002268
 80107dc:	20002294 	.word	0x20002294
 80107e0:	08017379 	.word	0x08017379

080107e4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80107e4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80107e8:	bf08      	it	eq
 80107ea:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 80107ee:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80107f0:	d106      	bne.n	8010800 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 80107f2:	4b07      	ldr	r3, [pc, #28]	; (8010810 <z_impl_k_sleep+0x2c>)
 80107f4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80107f6:	f7ff ff13 	bl	8010620 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 80107fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 80107fe:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8010800:	f7ff ffa8 	bl	8010754 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8010804:	220a      	movs	r2, #10
 8010806:	2300      	movs	r3, #0
 8010808:	17c1      	asrs	r1, r0, #31
 801080a:	f7f0 fbdd 	bl	8000fc8 <__aeabi_uldivmod>
	return ret;
 801080e:	e7f6      	b.n	80107fe <z_impl_k_sleep+0x1a>
 8010810:	20002268 	.word	0x20002268

08010814 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8010814:	4b01      	ldr	r3, [pc, #4]	; (801081c <z_impl_z_current_get+0x8>)
 8010816:	6898      	ldr	r0, [r3, #8]
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	20002268 	.word	0x20002268

08010820 <z_impl_k_is_preempt_thread>:
 8010820:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 8010824:	b93b      	cbnz	r3, 8010836 <z_impl_k_is_preempt_thread+0x16>
 8010826:	4b05      	ldr	r3, [pc, #20]	; (801083c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8010828:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 801082a:	89d8      	ldrh	r0, [r3, #14]
 801082c:	287f      	cmp	r0, #127	; 0x7f
 801082e:	bf8c      	ite	hi
 8010830:	2000      	movhi	r0, #0
 8010832:	2001      	movls	r0, #1
 8010834:	4770      	bx	lr
 8010836:	2000      	movs	r0, #0
}
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop
 801083c:	20002268 	.word	0x20002268

08010840 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8010840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010844:	4604      	mov	r4, r0
 8010846:	f04f 0310 	mov.w	r3, #16
 801084a:	f3ef 8611 	mrs	r6, BASEPRI
 801084e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010852:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8010856:	7b43      	ldrb	r3, [r0, #13]
 8010858:	071a      	lsls	r2, r3, #28
 801085a:	d505      	bpl.n	8010868 <z_thread_abort+0x28>
	__asm__ volatile(
 801085c:	f386 8811 	msr	BASEPRI, r6
 8010860:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8010864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8010868:	f023 0220 	bic.w	r2, r3, #32
 801086c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8010870:	09d2      	lsrs	r2, r2, #7
 8010872:	d120      	bne.n	80108b6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8010874:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8010876:	68a3      	ldr	r3, [r4, #8]
 8010878:	b113      	cbz	r3, 8010880 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 801087a:	4620      	mov	r0, r4
 801087c:	f006 fd19 	bl	80172b2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8010880:	f104 0018 	add.w	r0, r4, #24
 8010884:	f006 fe1f 	bl	80174c6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8010888:	f104 0758 	add.w	r7, r4, #88	; 0x58
 801088c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8010890:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010892:	42bd      	cmp	r5, r7
 8010894:	d000      	beq.n	8010898 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8010896:	b9b5      	cbnz	r5, 80108c6 <z_thread_abort+0x86>
		update_cache(1);
 8010898:	2001      	movs	r0, #1
 801089a:	f7ff fd37 	bl	801030c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 801089e:	4b10      	ldr	r3, [pc, #64]	; (80108e0 <z_thread_abort+0xa0>)
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	42a3      	cmp	r3, r4
 80108a4:	d1da      	bne.n	801085c <z_thread_abort+0x1c>
 80108a6:	f3ef 8305 	mrs	r3, IPSR
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d1d6      	bne.n	801085c <z_thread_abort+0x1c>
 80108ae:	4630      	mov	r0, r6
 80108b0:	f7f4 f8f8 	bl	8004aa4 <arch_swap>
	return ret;
 80108b4:	e7d2      	b.n	801085c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80108b6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80108ba:	f043 0308 	orr.w	r3, r3, #8
 80108be:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 80108c0:	f006 fcef 	bl	80172a2 <sys_dlist_remove>
}
 80108c4:	e7d7      	b.n	8010876 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 80108c6:	4628      	mov	r0, r5
 80108c8:	f006 fcf3 	bl	80172b2 <unpend_thread_no_timeout>
 80108cc:	f105 0018 	add.w	r0, r5, #24
 80108d0:	f006 fdf9 	bl	80174c6 <z_abort_timeout>
 80108d4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
 80108d8:	4628      	mov	r0, r5
 80108da:	f7ff fdb3 	bl	8010444 <ready_thread>
 80108de:	e7d7      	b.n	8010890 <z_thread_abort+0x50>
 80108e0:	20002268 	.word	0x20002268

080108e4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 80108e4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 80108e6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 80108ea:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 80108ec:	e9cd 6700 	strd	r6, r7, [sp]
 80108f0:	f7ff fe3a 	bl	8010568 <z_pend_curr>

	if (data != NULL) {
 80108f4:	b11c      	cbz	r4, 80108fe <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 80108f6:	4b03      	ldr	r3, [pc, #12]	; (8010904 <z_sched_wait+0x20>)
 80108f8:	689b      	ldr	r3, [r3, #8]
 80108fa:	695b      	ldr	r3, [r3, #20]
 80108fc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 80108fe:	b002      	add	sp, #8
 8010900:	bdd0      	pop	{r4, r6, r7, pc}
 8010902:	bf00      	nop
 8010904:	20002268 	.word	0x20002268

08010908 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8010908:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 801090a:	4806      	ldr	r0, [pc, #24]	; (8010924 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 801090c:	4a06      	ldr	r2, [pc, #24]	; (8010928 <z_data_copy+0x20>)
 801090e:	4907      	ldr	r1, [pc, #28]	; (801092c <z_data_copy+0x24>)
 8010910:	1a12      	subs	r2, r2, r0
 8010912:	f006 fc2b 	bl	801716c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8010916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 801091a:	4a05      	ldr	r2, [pc, #20]	; (8010930 <z_data_copy+0x28>)
 801091c:	4905      	ldr	r1, [pc, #20]	; (8010934 <z_data_copy+0x2c>)
 801091e:	4806      	ldr	r0, [pc, #24]	; (8010938 <z_data_copy+0x30>)
 8010920:	f006 bc24 	b.w	801716c <z_early_memcpy>
 8010924:	20000000 	.word	0x20000000
 8010928:	200003e0 	.word	0x200003e0
 801092c:	0801ab98 	.word	0x0801ab98
 8010930:	00000000 	.word	0x00000000
 8010934:	0801ab98 	.word	0x0801ab98
 8010938:	20000000 	.word	0x20000000

0801093c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 801093c:	4b03      	ldr	r3, [pc, #12]	; (801094c <elapsed+0x10>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	b90b      	cbnz	r3, 8010946 <elapsed+0xa>
 8010942:	f7fd bf97 	b.w	800e874 <sys_clock_elapsed>
}
 8010946:	2000      	movs	r0, #0
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop
 801094c:	200022a0 	.word	0x200022a0

08010950 <next_timeout>:
	return list->head == list;
 8010950:	4b10      	ldr	r3, [pc, #64]	; (8010994 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 8010952:	b510      	push	{r4, lr}
 8010954:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010956:	429c      	cmp	r4, r3
 8010958:	bf08      	it	eq
 801095a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 801095c:	f7ff ffee 	bl	801093c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8010960:	b1a4      	cbz	r4, 801098c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8010962:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010966:	1a1b      	subs	r3, r3, r0
 8010968:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 801096c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010970:	f170 0200 	sbcs.w	r2, r0, #0
 8010974:	da0a      	bge.n	801098c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 8010976:	2800      	cmp	r0, #0
 8010978:	bfac      	ite	ge
 801097a:	4618      	movge	r0, r3
 801097c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 801097e:	4b06      	ldr	r3, [pc, #24]	; (8010998 <next_timeout+0x48>)
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	b113      	cbz	r3, 801098a <next_timeout+0x3a>
 8010984:	4298      	cmp	r0, r3
 8010986:	bfa8      	it	ge
 8010988:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 801098a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 801098c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010990:	e7f5      	b.n	801097e <next_timeout+0x2e>
 8010992:	bf00      	nop
 8010994:	200001d8 	.word	0x200001d8
 8010998:	20002268 	.word	0x20002268

0801099c <remove_timeout>:
{
 801099c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 801099e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80109a0:	b168      	cbz	r0, 80109be <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 80109a2:	4a0a      	ldr	r2, [pc, #40]	; (80109cc <remove_timeout+0x30>)
 80109a4:	6852      	ldr	r2, [r2, #4]
 80109a6:	4290      	cmp	r0, r2
 80109a8:	d009      	beq.n	80109be <remove_timeout+0x22>
	if (next(t) != NULL) {
 80109aa:	b143      	cbz	r3, 80109be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80109ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80109b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80109b4:	1912      	adds	r2, r2, r4
 80109b6:	eb41 0105 	adc.w	r1, r1, r5
 80109ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 80109be:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 80109c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80109c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80109c4:	2300      	movs	r3, #0
	node->prev = NULL;
 80109c6:	e9c0 3300 	strd	r3, r3, [r0]
}
 80109ca:	bd30      	pop	{r4, r5, pc}
 80109cc:	200001d8 	.word	0x200001d8

080109d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80109d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109d4:	bf08      	it	eq
 80109d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80109da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109dc:	4604      	mov	r4, r0
 80109de:	461f      	mov	r7, r3
 80109e0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80109e2:	d067      	beq.n	8010ab4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80109e4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 80109e6:	f04f 0310 	mov.w	r3, #16
 80109ea:	f3ef 8611 	mrs	r6, BASEPRI
 80109ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80109f2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80109f6:	f06f 0201 	mvn.w	r2, #1
 80109fa:	1b53      	subs	r3, r2, r5
 80109fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010a00:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	db1b      	blt.n	8010a40 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8010a08:	4b2b      	ldr	r3, [pc, #172]	; (8010ab8 <z_add_timeout+0xe8>)
 8010a0a:	e9d3 1300 	ldrd	r1, r3, [r3]
 8010a0e:	1a52      	subs	r2, r2, r1
 8010a10:	eb6c 0303 	sbc.w	r3, ip, r3
 8010a14:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8010a16:	eb63 0307 	sbc.w	r3, r3, r7
 8010a1a:	2d01      	cmp	r5, #1
 8010a1c:	f173 0200 	sbcs.w	r2, r3, #0
 8010a20:	bfbc      	itt	lt
 8010a22:	2501      	movlt	r5, #1
 8010a24:	2300      	movlt	r3, #0
 8010a26:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 8010a2a:	4824      	ldr	r0, [pc, #144]	; (8010abc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 8010a2c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010a30:	4283      	cmp	r3, r0
 8010a32:	d118      	bne.n	8010a66 <z_add_timeout+0x96>
	node->prev = tail;
 8010a34:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8010a38:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8010a3c:	6044      	str	r4, [r0, #4]
}
 8010a3e:	e026      	b.n	8010a8e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8010a40:	f7ff ff7c 	bl	801093c <elapsed>
 8010a44:	3501      	adds	r5, #1
 8010a46:	f147 0700 	adc.w	r7, r7, #0
 8010a4a:	182d      	adds	r5, r5, r0
 8010a4c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8010a50:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8010a54:	e7e9      	b.n	8010a2a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8010a56:	1a52      	subs	r2, r2, r1
 8010a58:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8010a5c:	459c      	cmp	ip, r3
 8010a5e:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8010a62:	d0e7      	beq.n	8010a34 <z_add_timeout+0x64>
 8010a64:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d0e4      	beq.n	8010a34 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8010a6a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8010a6e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8010a72:	428a      	cmp	r2, r1
 8010a74:	eb75 0e07 	sbcs.w	lr, r5, r7
 8010a78:	daed      	bge.n	8010a56 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 8010a7a:	1a8a      	subs	r2, r1, r2
 8010a7c:	eb67 0505 	sbc.w	r5, r7, r5
 8010a80:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8010a84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8010a86:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8010a8a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8010a8c:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8010a8e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010a90:	4283      	cmp	r3, r0
 8010a92:	d00b      	beq.n	8010aac <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8010a94:	429c      	cmp	r4, r3
 8010a96:	d109      	bne.n	8010aac <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8010a98:	f7ff ff5a 	bl	8010950 <next_timeout>

			if (next_time == 0 ||
 8010a9c:	b118      	cbz	r0, 8010aa6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 8010a9e:	4b08      	ldr	r3, [pc, #32]	; (8010ac0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8010aa0:	691b      	ldr	r3, [r3, #16]
 8010aa2:	4283      	cmp	r3, r0
 8010aa4:	d002      	beq.n	8010aac <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	f7fd fe76 	bl	800e798 <sys_clock_set_timeout>
	__asm__ volatile(
 8010aac:	f386 8811 	msr	BASEPRI, r6
 8010ab0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8010ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	20000c30 	.word	0x20000c30
 8010abc:	200001d8 	.word	0x200001d8
 8010ac0:	20002268 	.word	0x20002268

08010ac4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8010ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ac8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8010aca:	f7ff fc79 	bl	80103c0 <z_time_slice>
	__asm__ volatile(
 8010ace:	f04f 0310 	mov.w	r3, #16
 8010ad2:	f3ef 8411 	mrs	r4, BASEPRI
 8010ad6:	f383 8812 	msr	BASEPRI_MAX, r3
 8010ada:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8010ade:	4e24      	ldr	r6, [pc, #144]	; (8010b70 <sys_clock_announce+0xac>)
	return list->head == list;
 8010ae0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8010b74 <sys_clock_announce+0xb0>
 8010ae4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8010ae6:	4d24      	ldr	r5, [pc, #144]	; (8010b78 <sys_clock_announce+0xb4>)
 8010ae8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8010aec:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010aee:	4540      	cmp	r0, r8
		curr_tick += dt;
 8010af0:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8010af4:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8010af8:	d00b      	beq.n	8010b12 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8010afa:	b150      	cbz	r0, 8010b12 <sys_clock_announce+0x4e>
 8010afc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	eb77 090c 	sbcs.w	r9, r7, ip
 8010b06:	da16      	bge.n	8010b36 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8010b08:	1a9b      	subs	r3, r3, r2
 8010b0a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8010b0e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8010b12:	1852      	adds	r2, r2, r1
 8010b14:	eb4e 0707 	adc.w	r7, lr, r7
 8010b18:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 8010b1c:	2500      	movs	r5, #0
 8010b1e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8010b20:	f7ff ff16 	bl	8010950 <next_timeout>
 8010b24:	4629      	mov	r1, r5
 8010b26:	f7fd fe37 	bl	800e798 <sys_clock_set_timeout>
	__asm__ volatile(
 8010b2a:	f384 8811 	msr	BASEPRI, r4
 8010b2e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8010b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8010b36:	1859      	adds	r1, r3, r1
 8010b38:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8010b3c:	1ad3      	subs	r3, r2, r3
 8010b3e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8010b40:	2200      	movs	r2, #0
 8010b42:	2300      	movs	r3, #0
 8010b44:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8010b48:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8010b4c:	f7ff ff26 	bl	801099c <remove_timeout>
 8010b50:	f384 8811 	msr	BASEPRI, r4
 8010b54:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8010b58:	6883      	ldr	r3, [r0, #8]
 8010b5a:	4798      	blx	r3
	__asm__ volatile(
 8010b5c:	f04f 0310 	mov.w	r3, #16
 8010b60:	f3ef 8411 	mrs	r4, BASEPRI
 8010b64:	f383 8812 	msr	BASEPRI_MAX, r3
 8010b68:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8010b6c:	e7bc      	b.n	8010ae8 <sys_clock_announce+0x24>
 8010b6e:	bf00      	nop
 8010b70:	200022a0 	.word	0x200022a0
 8010b74:	200001d8 	.word	0x200001d8
 8010b78:	20000c30 	.word	0x20000c30

08010b7c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8010b7c:	b510      	push	{r4, lr}
 8010b7e:	f04f 0310 	mov.w	r3, #16
 8010b82:	f3ef 8411 	mrs	r4, BASEPRI
 8010b86:	f383 8812 	msr	BASEPRI_MAX, r3
 8010b8a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 8010b8e:	f7fd fe71 	bl	800e874 <sys_clock_elapsed>
 8010b92:	4a05      	ldr	r2, [pc, #20]	; (8010ba8 <sys_clock_tick_get+0x2c>)
 8010b94:	e9d2 3100 	ldrd	r3, r1, [r2]
 8010b98:	18c0      	adds	r0, r0, r3
 8010b9a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8010b9e:	f384 8811 	msr	BASEPRI, r4
 8010ba2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8010ba6:	bd10      	pop	{r4, pc}
 8010ba8:	20000c30 	.word	0x20000c30

08010bac <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8010bac:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8010bae:	4604      	mov	r4, r0
 8010bb0:	b178      	cbz	r0, 8010bd2 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8010bb2:	f7fd fe7d 	bl	800e8b0 <sys_clock_cycle_get_32>
 8010bb6:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8010bb8:	4806      	ldr	r0, [pc, #24]	; (8010bd4 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8010bba:	4a07      	ldr	r2, [pc, #28]	; (8010bd8 <z_impl_k_busy_wait+0x2c>)
 8010bbc:	fba4 0100 	umull	r0, r1, r4, r0
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	f7f0 fa01 	bl	8000fc8 <__aeabi_uldivmod>
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	f7fd fe72 	bl	800e8b0 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8010bcc:	1b43      	subs	r3, r0, r5
 8010bce:	42a3      	cmp	r3, r4
 8010bd0:	d3fa      	bcc.n	8010bc8 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8010bd2:	bd38      	pop	{r3, r4, r5, pc}
 8010bd4:	02dc6c00 	.word	0x02dc6c00
 8010bd8:	000f4240 	.word	0x000f4240

08010bdc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	4604      	mov	r4, r0
	__asm__ volatile(
 8010be0:	f04f 0310 	mov.w	r3, #16
 8010be4:	f3ef 8511 	mrs	r5, BASEPRI
 8010be8:	f383 8812 	msr	BASEPRI_MAX, r3
 8010bec:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8010bf0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	f142 0200 	adc.w	r2, r2, #0
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	f172 0300 	sbcs.w	r3, r2, #0
 8010c00:	d304      	bcc.n	8010c0c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8010c02:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8010c06:	4917      	ldr	r1, [pc, #92]	; (8010c64 <z_timer_expiration_handler+0x88>)
 8010c08:	f7ff fee2 	bl	80109d0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8010c0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010c0e:	3301      	adds	r3, #1
 8010c10:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8010c12:	6a23      	ldr	r3, [r4, #32]
 8010c14:	b173      	cbz	r3, 8010c34 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
 8010c16:	f385 8811 	msr	BASEPRI, r5
 8010c1a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 8010c1e:	6a23      	ldr	r3, [r4, #32]
 8010c20:	4620      	mov	r0, r4
 8010c22:	4798      	blx	r3
	__asm__ volatile(
 8010c24:	f04f 0310 	mov.w	r3, #16
 8010c28:	f3ef 8511 	mrs	r5, BASEPRI
 8010c2c:	f383 8812 	msr	BASEPRI_MAX, r3
 8010c30:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8010c34:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010c38:	42a6      	cmp	r6, r4
 8010c3a:	d000      	beq.n	8010c3e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8010c3c:	b926      	cbnz	r6, 8010c48 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
 8010c3e:	f385 8811 	msr	BASEPRI, r5
 8010c42:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 8010c46:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
 8010c48:	4630      	mov	r0, r6
 8010c4a:	f006 fb45 	bl	80172d8 <z_unpend_thread_no_timeout>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010c52:	f385 8811 	msr	BASEPRI, r5
 8010c56:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 8010c5a:	4630      	mov	r0, r6
}
 8010c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 8010c60:	f006 bb7a 	b.w	8017358 <z_ready_thread>
 8010c64:	08010bdd 	.word	0x08010bdd

08010c68 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8010c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c6c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8010c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c72:	bf08      	it	eq
 8010c74:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
 8010c78:	4606      	mov	r6, r0
 8010c7a:	461c      	mov	r4, r3
 8010c7c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
 8010c80:	4689      	mov	r9, r1
 8010c82:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8010c84:	d03e      	beq.n	8010d04 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8010c86:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010c8a:	bf08      	it	eq
 8010c8c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8010c90:	4615      	mov	r5, r2
 8010c92:	4607      	mov	r7, r0
 8010c94:	d014      	beq.n	8010cc0 <z_impl_k_timer_start+0x58>
 8010c96:	ea50 0302 	orrs.w	r3, r0, r2
 8010c9a:	d011      	beq.n	8010cc0 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
 8010c9c:	f06f 0301 	mvn.w	r3, #1
 8010ca0:	1a9b      	subs	r3, r3, r2
 8010ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ca6:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	da08      	bge.n	8010cc0 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
 8010cae:	2a02      	cmp	r2, #2
 8010cb0:	f170 0300 	sbcs.w	r3, r0, #0
 8010cb4:	bfbc      	itt	lt
 8010cb6:	2502      	movlt	r5, #2
 8010cb8:	2700      	movlt	r7, #0
 8010cba:	3d01      	subs	r5, #1
 8010cbc:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8010cc0:	f06f 0301 	mvn.w	r3, #1
 8010cc4:	1a5b      	subs	r3, r3, r1
 8010cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cca:	eb63 0304 	sbc.w	r3, r3, r4
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	da09      	bge.n	8010ce6 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8010cd2:	2901      	cmp	r1, #1
 8010cd4:	f174 0300 	sbcs.w	r3, r4, #0
 8010cd8:	bfbc      	itt	lt
 8010cda:	2101      	movlt	r1, #1
 8010cdc:	2400      	movlt	r4, #0
 8010cde:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
 8010ce2:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f006 fbed 	bl	80174c6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 8010cec:	2300      	movs	r3, #0
 8010cee:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
 8010cf0:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8010cf4:	464a      	mov	r2, r9
 8010cf6:	4643      	mov	r3, r8
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	4903      	ldr	r1, [pc, #12]	; (8010d08 <z_impl_k_timer_start+0xa0>)
		     duration);
}
 8010cfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8010d00:	f7ff be66 	b.w	80109d0 <z_add_timeout>
}
 8010d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d08:	08010bdd 	.word	0x08010bdd

08010d0c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8010d0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d10:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 8010d12:	4b29      	ldr	r3, [pc, #164]	; (8010db8 <z_impl_k_poll+0xac>)
 8010d14:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
 8010d16:	2301      	movs	r3, #1
 8010d18:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 8010d1c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 8010d20:	ea52 0305 	orrs.w	r3, r2, r5
{
 8010d24:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
 8010d26:	bf0c      	ite	eq
 8010d28:	2301      	moveq	r3, #1
 8010d2a:	2300      	movne	r3, #0
 8010d2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 8010d30:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
 8010d32:	f006 fc56 	bl	80175e2 <register_events>
 8010d36:	4681      	mov	r9, r0
	__asm__ volatile(
 8010d38:	f04f 0310 	mov.w	r3, #16
 8010d3c:	f3ef 8a11 	mrs	sl, BASEPRI
 8010d40:	f383 8812 	msr	BASEPRI_MAX, r3
 8010d44:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 8010d48:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 8010d4c:	b964      	cbnz	r4, 8010d68 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
 8010d4e:	4601      	mov	r1, r0
 8010d50:	4652      	mov	r2, sl
 8010d52:	4640      	mov	r0, r8
 8010d54:	f006 fd16 	bl	8017784 <clear_event_registrations>
	__asm__ volatile(
 8010d58:	f38a 8811 	msr	BASEPRI, sl
 8010d5c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 8010d60:	4620      	mov	r0, r4
 8010d62:	b002      	add	sp, #8
 8010d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8010d6e:	ea56 0305 	orrs.w	r3, r6, r5
 8010d72:	d106      	bne.n	8010d82 <z_impl_k_poll+0x76>
 8010d74:	f38a 8811 	msr	BASEPRI, sl
 8010d78:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8010d7c:	f06f 040a 	mvn.w	r4, #10
 8010d80:	e7ee      	b.n	8010d60 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8010d82:	e9cd 6500 	strd	r6, r5, [sp]
 8010d86:	4a0d      	ldr	r2, [pc, #52]	; (8010dbc <z_impl_k_poll+0xb0>)
 8010d88:	480d      	ldr	r0, [pc, #52]	; (8010dc0 <z_impl_k_poll+0xb4>)
 8010d8a:	4651      	mov	r1, sl
 8010d8c:	f7ff fbec 	bl	8010568 <z_pend_curr>
 8010d90:	4604      	mov	r4, r0
	__asm__ volatile(
 8010d92:	f04f 0310 	mov.w	r3, #16
 8010d96:	f3ef 8511 	mrs	r5, BASEPRI
 8010d9a:	f383 8812 	msr	BASEPRI_MAX, r3
 8010d9e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
 8010da2:	462a      	mov	r2, r5
 8010da4:	4649      	mov	r1, r9
 8010da6:	4640      	mov	r0, r8
 8010da8:	f006 fcec 	bl	8017784 <clear_event_registrations>
	__asm__ volatile(
 8010dac:	f385 8811 	msr	BASEPRI, r5
 8010db0:	f3bf 8f6f 	isb	sy
	return swap_rc;
 8010db4:	e7d4      	b.n	8010d60 <z_impl_k_poll+0x54>
 8010db6:	bf00      	nop
 8010db8:	20002268 	.word	0x20002268
 8010dbc:	200001e0 	.word	0x200001e0
 8010dc0:	20002557 	.word	0x20002557

08010dc4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	4603      	mov	r3, r0
	__asm__ volatile(
 8010dc8:	f04f 0210 	mov.w	r2, #16
 8010dcc:	f3ef 8511 	mrs	r5, BASEPRI
 8010dd0:	f382 8812 	msr	BASEPRI_MAX, r2
 8010dd4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 8010dd8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 8010dda:	2101      	movs	r1, #1
 8010ddc:	6081      	str	r1, [r0, #8]
	return list->head == list;
 8010dde:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8010de0:	4283      	cmp	r3, r0
 8010de2:	d106      	bne.n	8010df2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 8010de4:	f385 8811 	msr	BASEPRI, r5
 8010de8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 8010dec:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
 8010dee:	4620      	mov	r0, r4
 8010df0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
 8010df2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8010df6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8010df8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8010dfa:	2300      	movs	r3, #0
	node->prev = NULL;
 8010dfc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8010e00:	f006 fc66 	bl	80176d0 <signal_poll_event>
	z_reschedule(&lock, key);
 8010e04:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8010e06:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 8010e08:	4801      	ldr	r0, [pc, #4]	; (8010e10 <z_impl_k_poll_signal_raise+0x4c>)
 8010e0a:	f7ff fa59 	bl	80102c0 <z_reschedule>
	return rc;
 8010e0e:	e7ee      	b.n	8010dee <z_impl_k_poll_signal_raise+0x2a>
 8010e10:	20002557 	.word	0x20002557

08010e14 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
 8010e14:	4b01      	ldr	r3, [pc, #4]	; (8010e1c <k_thread_system_pool_assign+0x8>)
 8010e16:	6743      	str	r3, [r0, #116]	; 0x74
}
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	20000320 	.word	0x20000320

08010e20 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8010e20:	4a02      	ldr	r2, [pc, #8]	; (8010e2c <boot_banner+0xc>)
 8010e22:	4903      	ldr	r1, [pc, #12]	; (8010e30 <boot_banner+0x10>)
 8010e24:	4803      	ldr	r0, [pc, #12]	; (8010e34 <boot_banner+0x14>)
 8010e26:	f001 b864 	b.w	8011ef2 <printk>
 8010e2a:	bf00      	nop
 8010e2c:	080190d1 	.word	0x080190d1
 8010e30:	0801aa13 	.word	0x0801aa13
 8010e34:	0801aa34 	.word	0x0801aa34

08010e38 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8010e38:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8010e3a:	4c06      	ldr	r4, [pc, #24]	; (8010e54 <statics_init+0x1c>)
 8010e3c:	4d06      	ldr	r5, [pc, #24]	; (8010e58 <statics_init+0x20>)
 8010e3e:	42ac      	cmp	r4, r5
 8010e40:	d301      	bcc.n	8010e46 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 8010e42:	2000      	movs	r0, #0
 8010e44:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8010e46:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	f006 fcd7 	bl	80177fe <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8010e50:	3414      	adds	r4, #20
 8010e52:	e7f4      	b.n	8010e3e <statics_init+0x6>
 8010e54:	20000320 	.word	0x20000320
 8010e58:	20000334 	.word	0x20000334

08010e5c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8010e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8010e5e:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <k_sys_work_q_init+0x28>)
 8010e60:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8010e62:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 8010e64:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	4907      	ldr	r1, [pc, #28]	; (8010e88 <k_sys_work_q_init+0x2c>)
 8010e6a:	4808      	ldr	r0, [pc, #32]	; (8010e8c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 8010e6c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 8010e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e78:	f7ff f9ae 	bl	80101d8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	b004      	add	sp, #16
 8010e80:	bd10      	pop	{r4, pc}
 8010e82:	bf00      	nop
 8010e84:	0801aa5b 	.word	0x0801aa5b
 8010e88:	20009a40 	.word	0x20009a40
 8010e8c:	20000c38 	.word	0x20000c38

08010e90 <gmtime_r>:
 8010e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e94:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010e98:	460c      	mov	r4, r1
 8010e9a:	4a50      	ldr	r2, [pc, #320]	; (8010fdc <gmtime_r+0x14c>)
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	f7f0 f841 	bl	8000f28 <__aeabi_ldivmod>
 8010ea6:	4639      	mov	r1, r7
 8010ea8:	4605      	mov	r5, r0
 8010eaa:	4a4c      	ldr	r2, [pc, #304]	; (8010fdc <gmtime_r+0x14c>)
 8010eac:	4630      	mov	r0, r6
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f7f0 f83a 	bl	8000f28 <__aeabi_ldivmod>
 8010eb4:	2a00      	cmp	r2, #0
 8010eb6:	bfbc      	itt	lt
 8010eb8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8010ebc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8010ec0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8010ec4:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 8010ec8:	fbb2 f1f0 	udiv	r1, r2, r0
 8010ecc:	fb00 2211 	mls	r2, r0, r1, r2
 8010ed0:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8010ed4:	bfac      	ite	ge
 8010ed6:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8010eda:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8010ede:	60a1      	str	r1, [r4, #8]
 8010ee0:	fbb2 f1f0 	udiv	r1, r2, r0
 8010ee4:	fb00 2211 	mls	r2, r0, r1, r2
 8010ee8:	6061      	str	r1, [r4, #4]
 8010eea:	6022      	str	r2, [r4, #0]
 8010eec:	2107      	movs	r1, #7
 8010eee:	1cda      	adds	r2, r3, #3
 8010ef0:	fb92 f1f1 	sdiv	r1, r2, r1
 8010ef4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010ef8:	1a52      	subs	r2, r2, r1
 8010efa:	bf48      	it	mi
 8010efc:	3207      	addmi	r2, #7
 8010efe:	4d38      	ldr	r5, [pc, #224]	; (8010fe0 <gmtime_r+0x150>)
 8010f00:	4838      	ldr	r0, [pc, #224]	; (8010fe4 <gmtime_r+0x154>)
 8010f02:	61a2      	str	r2, [r4, #24]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	bfb7      	itett	lt
 8010f08:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8010f0c:	fb93 f5f5 	sdivge	r5, r3, r5
 8010f10:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8010f14:	fb92 f5f5 	sdivlt	r5, r2, r5
 8010f18:	fb00 3005 	mla	r0, r0, r5, r3
 8010f1c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8010f20:	fbb0 f2f2 	udiv	r2, r0, r2
 8010f24:	4402      	add	r2, r0
 8010f26:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8010f2a:	fbb0 f1f3 	udiv	r1, r0, r3
 8010f2e:	1a52      	subs	r2, r2, r1
 8010f30:	f240 1c6d 	movw	ip, #365	; 0x16d
 8010f34:	492c      	ldr	r1, [pc, #176]	; (8010fe8 <gmtime_r+0x158>)
 8010f36:	fbb0 f1f1 	udiv	r1, r0, r1
 8010f3a:	2764      	movs	r7, #100	; 0x64
 8010f3c:	1a52      	subs	r2, r2, r1
 8010f3e:	fbb2 f1fc 	udiv	r1, r2, ip
 8010f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f46:	fbb1 f6f7 	udiv	r6, r1, r7
 8010f4a:	1af3      	subs	r3, r6, r3
 8010f4c:	4403      	add	r3, r0
 8010f4e:	fb0c 3311 	mls	r3, ip, r1, r3
 8010f52:	2299      	movs	r2, #153	; 0x99
 8010f54:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8010f58:	f10e 0e02 	add.w	lr, lr, #2
 8010f5c:	f103 0c01 	add.w	ip, r3, #1
 8010f60:	fbbe f0f2 	udiv	r0, lr, r2
 8010f64:	4342      	muls	r2, r0
 8010f66:	3202      	adds	r2, #2
 8010f68:	f04f 0805 	mov.w	r8, #5
 8010f6c:	fbb2 f2f8 	udiv	r2, r2, r8
 8010f70:	ebac 0c02 	sub.w	ip, ip, r2
 8010f74:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8010f78:	4596      	cmp	lr, r2
 8010f7a:	bf94      	ite	ls
 8010f7c:	2202      	movls	r2, #2
 8010f7e:	f06f 0209 	mvnhi.w	r2, #9
 8010f82:	4410      	add	r0, r2
 8010f84:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010f88:	fb02 1505 	mla	r5, r2, r5, r1
 8010f8c:	2801      	cmp	r0, #1
 8010f8e:	bf98      	it	ls
 8010f90:	3501      	addls	r5, #1
 8010f92:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8010f96:	d30d      	bcc.n	8010fb4 <gmtime_r+0x124>
 8010f98:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8010f9c:	61e3      	str	r3, [r4, #28]
 8010f9e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8010fa8:	f8c4 c00c 	str.w	ip, [r4, #12]
 8010fac:	6223      	str	r3, [r4, #32]
 8010fae:	4620      	mov	r0, r4
 8010fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fb4:	078a      	lsls	r2, r1, #30
 8010fb6:	d102      	bne.n	8010fbe <gmtime_r+0x12e>
 8010fb8:	fb07 1616 	mls	r6, r7, r6, r1
 8010fbc:	b95e      	cbnz	r6, 8010fd6 <gmtime_r+0x146>
 8010fbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010fc2:	fbb1 f6f2 	udiv	r6, r1, r2
 8010fc6:	fb02 1216 	mls	r2, r2, r6, r1
 8010fca:	fab2 f282 	clz	r2, r2
 8010fce:	0952      	lsrs	r2, r2, #5
 8010fd0:	333b      	adds	r3, #59	; 0x3b
 8010fd2:	4413      	add	r3, r2
 8010fd4:	e7e2      	b.n	8010f9c <gmtime_r+0x10c>
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	e7fa      	b.n	8010fd0 <gmtime_r+0x140>
 8010fda:	bf00      	nop
 8010fdc:	00015180 	.word	0x00015180
 8010fe0:	00023ab1 	.word	0x00023ab1
 8010fe4:	fffdc54f 	.word	0xfffdc54f
 8010fe8:	00023ab0 	.word	0x00023ab0

08010fec <malloc>:
 8010fec:	4b02      	ldr	r3, [pc, #8]	; (8010ff8 <malloc+0xc>)
 8010fee:	4601      	mov	r1, r0
 8010ff0:	6818      	ldr	r0, [r3, #0]
 8010ff2:	f000 b84d 	b.w	8011090 <_malloc_r>
 8010ff6:	bf00      	nop
 8010ff8:	200001e8 	.word	0x200001e8

08010ffc <_free_r>:
 8010ffc:	b538      	push	{r3, r4, r5, lr}
 8010ffe:	4605      	mov	r5, r0
 8011000:	2900      	cmp	r1, #0
 8011002:	d041      	beq.n	8011088 <_free_r+0x8c>
 8011004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011008:	1f0c      	subs	r4, r1, #4
 801100a:	2b00      	cmp	r3, #0
 801100c:	bfb8      	it	lt
 801100e:	18e4      	addlt	r4, r4, r3
 8011010:	f000 fb3e 	bl	8011690 <__malloc_lock>
 8011014:	4a1d      	ldr	r2, [pc, #116]	; (801108c <_free_r+0x90>)
 8011016:	6813      	ldr	r3, [r2, #0]
 8011018:	b933      	cbnz	r3, 8011028 <_free_r+0x2c>
 801101a:	6063      	str	r3, [r4, #4]
 801101c:	6014      	str	r4, [r2, #0]
 801101e:	4628      	mov	r0, r5
 8011020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011024:	f000 bb3a 	b.w	801169c <__malloc_unlock>
 8011028:	42a3      	cmp	r3, r4
 801102a:	d908      	bls.n	801103e <_free_r+0x42>
 801102c:	6820      	ldr	r0, [r4, #0]
 801102e:	1821      	adds	r1, r4, r0
 8011030:	428b      	cmp	r3, r1
 8011032:	bf01      	itttt	eq
 8011034:	6819      	ldreq	r1, [r3, #0]
 8011036:	685b      	ldreq	r3, [r3, #4]
 8011038:	1809      	addeq	r1, r1, r0
 801103a:	6021      	streq	r1, [r4, #0]
 801103c:	e7ed      	b.n	801101a <_free_r+0x1e>
 801103e:	461a      	mov	r2, r3
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	b10b      	cbz	r3, 8011048 <_free_r+0x4c>
 8011044:	42a3      	cmp	r3, r4
 8011046:	d9fa      	bls.n	801103e <_free_r+0x42>
 8011048:	6811      	ldr	r1, [r2, #0]
 801104a:	1850      	adds	r0, r2, r1
 801104c:	42a0      	cmp	r0, r4
 801104e:	d10b      	bne.n	8011068 <_free_r+0x6c>
 8011050:	6820      	ldr	r0, [r4, #0]
 8011052:	4401      	add	r1, r0
 8011054:	1850      	adds	r0, r2, r1
 8011056:	4283      	cmp	r3, r0
 8011058:	6011      	str	r1, [r2, #0]
 801105a:	d1e0      	bne.n	801101e <_free_r+0x22>
 801105c:	6818      	ldr	r0, [r3, #0]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	6053      	str	r3, [r2, #4]
 8011062:	4401      	add	r1, r0
 8011064:	6011      	str	r1, [r2, #0]
 8011066:	e7da      	b.n	801101e <_free_r+0x22>
 8011068:	d902      	bls.n	8011070 <_free_r+0x74>
 801106a:	230c      	movs	r3, #12
 801106c:	602b      	str	r3, [r5, #0]
 801106e:	e7d6      	b.n	801101e <_free_r+0x22>
 8011070:	6820      	ldr	r0, [r4, #0]
 8011072:	1821      	adds	r1, r4, r0
 8011074:	428b      	cmp	r3, r1
 8011076:	bf04      	itt	eq
 8011078:	6819      	ldreq	r1, [r3, #0]
 801107a:	685b      	ldreq	r3, [r3, #4]
 801107c:	6063      	str	r3, [r4, #4]
 801107e:	bf04      	itt	eq
 8011080:	1809      	addeq	r1, r1, r0
 8011082:	6021      	streq	r1, [r4, #0]
 8011084:	6054      	str	r4, [r2, #4]
 8011086:	e7ca      	b.n	801101e <_free_r+0x22>
 8011088:	bd38      	pop	{r3, r4, r5, pc}
 801108a:	bf00      	nop
 801108c:	200022a4 	.word	0x200022a4

08011090 <_malloc_r>:
 8011090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011092:	1ccd      	adds	r5, r1, #3
 8011094:	f025 0503 	bic.w	r5, r5, #3
 8011098:	3508      	adds	r5, #8
 801109a:	2d0c      	cmp	r5, #12
 801109c:	bf38      	it	cc
 801109e:	250c      	movcc	r5, #12
 80110a0:	2d00      	cmp	r5, #0
 80110a2:	4606      	mov	r6, r0
 80110a4:	db01      	blt.n	80110aa <_malloc_r+0x1a>
 80110a6:	42a9      	cmp	r1, r5
 80110a8:	d903      	bls.n	80110b2 <_malloc_r+0x22>
 80110aa:	230c      	movs	r3, #12
 80110ac:	6033      	str	r3, [r6, #0]
 80110ae:	2000      	movs	r0, #0
 80110b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110b2:	f000 faed 	bl	8011690 <__malloc_lock>
 80110b6:	4921      	ldr	r1, [pc, #132]	; (801113c <_malloc_r+0xac>)
 80110b8:	680a      	ldr	r2, [r1, #0]
 80110ba:	4614      	mov	r4, r2
 80110bc:	b99c      	cbnz	r4, 80110e6 <_malloc_r+0x56>
 80110be:	4f20      	ldr	r7, [pc, #128]	; (8011140 <_malloc_r+0xb0>)
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	b923      	cbnz	r3, 80110ce <_malloc_r+0x3e>
 80110c4:	4621      	mov	r1, r4
 80110c6:	4630      	mov	r0, r6
 80110c8:	f000 f854 	bl	8011174 <_sbrk_r>
 80110cc:	6038      	str	r0, [r7, #0]
 80110ce:	4629      	mov	r1, r5
 80110d0:	4630      	mov	r0, r6
 80110d2:	f000 f84f 	bl	8011174 <_sbrk_r>
 80110d6:	1c43      	adds	r3, r0, #1
 80110d8:	d123      	bne.n	8011122 <_malloc_r+0x92>
 80110da:	230c      	movs	r3, #12
 80110dc:	6033      	str	r3, [r6, #0]
 80110de:	4630      	mov	r0, r6
 80110e0:	f000 fadc 	bl	801169c <__malloc_unlock>
 80110e4:	e7e3      	b.n	80110ae <_malloc_r+0x1e>
 80110e6:	6823      	ldr	r3, [r4, #0]
 80110e8:	1b5b      	subs	r3, r3, r5
 80110ea:	d417      	bmi.n	801111c <_malloc_r+0x8c>
 80110ec:	2b0b      	cmp	r3, #11
 80110ee:	d903      	bls.n	80110f8 <_malloc_r+0x68>
 80110f0:	6023      	str	r3, [r4, #0]
 80110f2:	441c      	add	r4, r3
 80110f4:	6025      	str	r5, [r4, #0]
 80110f6:	e004      	b.n	8011102 <_malloc_r+0x72>
 80110f8:	6863      	ldr	r3, [r4, #4]
 80110fa:	42a2      	cmp	r2, r4
 80110fc:	bf0c      	ite	eq
 80110fe:	600b      	streq	r3, [r1, #0]
 8011100:	6053      	strne	r3, [r2, #4]
 8011102:	4630      	mov	r0, r6
 8011104:	f000 faca 	bl	801169c <__malloc_unlock>
 8011108:	f104 000b 	add.w	r0, r4, #11
 801110c:	1d23      	adds	r3, r4, #4
 801110e:	f020 0007 	bic.w	r0, r0, #7
 8011112:	1ac2      	subs	r2, r0, r3
 8011114:	d0cc      	beq.n	80110b0 <_malloc_r+0x20>
 8011116:	1a1b      	subs	r3, r3, r0
 8011118:	50a3      	str	r3, [r4, r2]
 801111a:	e7c9      	b.n	80110b0 <_malloc_r+0x20>
 801111c:	4622      	mov	r2, r4
 801111e:	6864      	ldr	r4, [r4, #4]
 8011120:	e7cc      	b.n	80110bc <_malloc_r+0x2c>
 8011122:	1cc4      	adds	r4, r0, #3
 8011124:	f024 0403 	bic.w	r4, r4, #3
 8011128:	42a0      	cmp	r0, r4
 801112a:	d0e3      	beq.n	80110f4 <_malloc_r+0x64>
 801112c:	1a21      	subs	r1, r4, r0
 801112e:	4630      	mov	r0, r6
 8011130:	f000 f820 	bl	8011174 <_sbrk_r>
 8011134:	3001      	adds	r0, #1
 8011136:	d1dd      	bne.n	80110f4 <_malloc_r+0x64>
 8011138:	e7cf      	b.n	80110da <_malloc_r+0x4a>
 801113a:	bf00      	nop
 801113c:	200022a4 	.word	0x200022a4
 8011140:	200022a8 	.word	0x200022a8

08011144 <iprintf>:
 8011144:	b40f      	push	{r0, r1, r2, r3}
 8011146:	4b0a      	ldr	r3, [pc, #40]	; (8011170 <iprintf+0x2c>)
 8011148:	b513      	push	{r0, r1, r4, lr}
 801114a:	681c      	ldr	r4, [r3, #0]
 801114c:	b124      	cbz	r4, 8011158 <iprintf+0x14>
 801114e:	69a3      	ldr	r3, [r4, #24]
 8011150:	b913      	cbnz	r3, 8011158 <iprintf+0x14>
 8011152:	4620      	mov	r0, r4
 8011154:	f000 f9de 	bl	8011514 <__sinit>
 8011158:	ab05      	add	r3, sp, #20
 801115a:	9a04      	ldr	r2, [sp, #16]
 801115c:	68a1      	ldr	r1, [r4, #8]
 801115e:	9301      	str	r3, [sp, #4]
 8011160:	4620      	mov	r0, r4
 8011162:	f000 faa1 	bl	80116a8 <_vfiprintf_r>
 8011166:	b002      	add	sp, #8
 8011168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801116c:	b004      	add	sp, #16
 801116e:	4770      	bx	lr
 8011170:	200001e8 	.word	0x200001e8

08011174 <_sbrk_r>:
 8011174:	b538      	push	{r3, r4, r5, lr}
 8011176:	4d06      	ldr	r5, [pc, #24]	; (8011190 <_sbrk_r+0x1c>)
 8011178:	2300      	movs	r3, #0
 801117a:	4604      	mov	r4, r0
 801117c:	4608      	mov	r0, r1
 801117e:	602b      	str	r3, [r5, #0]
 8011180:	f7f4 f940 	bl	8005404 <_sbrk>
 8011184:	1c43      	adds	r3, r0, #1
 8011186:	d102      	bne.n	801118e <_sbrk_r+0x1a>
 8011188:	682b      	ldr	r3, [r5, #0]
 801118a:	b103      	cbz	r3, 801118e <_sbrk_r+0x1a>
 801118c:	6023      	str	r3, [r4, #0]
 801118e:	bd38      	pop	{r3, r4, r5, pc}
 8011190:	200022ac 	.word	0x200022ac

08011194 <__swbuf_r>:
 8011194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011196:	460e      	mov	r6, r1
 8011198:	4614      	mov	r4, r2
 801119a:	4605      	mov	r5, r0
 801119c:	b118      	cbz	r0, 80111a6 <__swbuf_r+0x12>
 801119e:	6983      	ldr	r3, [r0, #24]
 80111a0:	b90b      	cbnz	r3, 80111a6 <__swbuf_r+0x12>
 80111a2:	f000 f9b7 	bl	8011514 <__sinit>
 80111a6:	4b21      	ldr	r3, [pc, #132]	; (801122c <__swbuf_r+0x98>)
 80111a8:	429c      	cmp	r4, r3
 80111aa:	d12b      	bne.n	8011204 <__swbuf_r+0x70>
 80111ac:	686c      	ldr	r4, [r5, #4]
 80111ae:	69a3      	ldr	r3, [r4, #24]
 80111b0:	60a3      	str	r3, [r4, #8]
 80111b2:	89a3      	ldrh	r3, [r4, #12]
 80111b4:	071a      	lsls	r2, r3, #28
 80111b6:	d52f      	bpl.n	8011218 <__swbuf_r+0x84>
 80111b8:	6923      	ldr	r3, [r4, #16]
 80111ba:	b36b      	cbz	r3, 8011218 <__swbuf_r+0x84>
 80111bc:	6923      	ldr	r3, [r4, #16]
 80111be:	6820      	ldr	r0, [r4, #0]
 80111c0:	1ac0      	subs	r0, r0, r3
 80111c2:	6963      	ldr	r3, [r4, #20]
 80111c4:	b2f6      	uxtb	r6, r6
 80111c6:	4283      	cmp	r3, r0
 80111c8:	4637      	mov	r7, r6
 80111ca:	dc04      	bgt.n	80111d6 <__swbuf_r+0x42>
 80111cc:	4621      	mov	r1, r4
 80111ce:	4628      	mov	r0, r5
 80111d0:	f000 f922 	bl	8011418 <_fflush_r>
 80111d4:	bb30      	cbnz	r0, 8011224 <__swbuf_r+0x90>
 80111d6:	68a3      	ldr	r3, [r4, #8]
 80111d8:	3b01      	subs	r3, #1
 80111da:	60a3      	str	r3, [r4, #8]
 80111dc:	6823      	ldr	r3, [r4, #0]
 80111de:	1c5a      	adds	r2, r3, #1
 80111e0:	6022      	str	r2, [r4, #0]
 80111e2:	701e      	strb	r6, [r3, #0]
 80111e4:	6963      	ldr	r3, [r4, #20]
 80111e6:	3001      	adds	r0, #1
 80111e8:	4283      	cmp	r3, r0
 80111ea:	d004      	beq.n	80111f6 <__swbuf_r+0x62>
 80111ec:	89a3      	ldrh	r3, [r4, #12]
 80111ee:	07db      	lsls	r3, r3, #31
 80111f0:	d506      	bpl.n	8011200 <__swbuf_r+0x6c>
 80111f2:	2e0a      	cmp	r6, #10
 80111f4:	d104      	bne.n	8011200 <__swbuf_r+0x6c>
 80111f6:	4621      	mov	r1, r4
 80111f8:	4628      	mov	r0, r5
 80111fa:	f000 f90d 	bl	8011418 <_fflush_r>
 80111fe:	b988      	cbnz	r0, 8011224 <__swbuf_r+0x90>
 8011200:	4638      	mov	r0, r7
 8011202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011204:	4b0a      	ldr	r3, [pc, #40]	; (8011230 <__swbuf_r+0x9c>)
 8011206:	429c      	cmp	r4, r3
 8011208:	d101      	bne.n	801120e <__swbuf_r+0x7a>
 801120a:	68ac      	ldr	r4, [r5, #8]
 801120c:	e7cf      	b.n	80111ae <__swbuf_r+0x1a>
 801120e:	4b09      	ldr	r3, [pc, #36]	; (8011234 <__swbuf_r+0xa0>)
 8011210:	429c      	cmp	r4, r3
 8011212:	bf08      	it	eq
 8011214:	68ec      	ldreq	r4, [r5, #12]
 8011216:	e7ca      	b.n	80111ae <__swbuf_r+0x1a>
 8011218:	4621      	mov	r1, r4
 801121a:	4628      	mov	r0, r5
 801121c:	f000 f80c 	bl	8011238 <__swsetup_r>
 8011220:	2800      	cmp	r0, #0
 8011222:	d0cb      	beq.n	80111bc <__swbuf_r+0x28>
 8011224:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011228:	e7ea      	b.n	8011200 <__swbuf_r+0x6c>
 801122a:	bf00      	nop
 801122c:	08018a40 	.word	0x08018a40
 8011230:	08018a60 	.word	0x08018a60
 8011234:	08018a20 	.word	0x08018a20

08011238 <__swsetup_r>:
 8011238:	4b32      	ldr	r3, [pc, #200]	; (8011304 <__swsetup_r+0xcc>)
 801123a:	b570      	push	{r4, r5, r6, lr}
 801123c:	681d      	ldr	r5, [r3, #0]
 801123e:	4606      	mov	r6, r0
 8011240:	460c      	mov	r4, r1
 8011242:	b125      	cbz	r5, 801124e <__swsetup_r+0x16>
 8011244:	69ab      	ldr	r3, [r5, #24]
 8011246:	b913      	cbnz	r3, 801124e <__swsetup_r+0x16>
 8011248:	4628      	mov	r0, r5
 801124a:	f000 f963 	bl	8011514 <__sinit>
 801124e:	4b2e      	ldr	r3, [pc, #184]	; (8011308 <__swsetup_r+0xd0>)
 8011250:	429c      	cmp	r4, r3
 8011252:	d10f      	bne.n	8011274 <__swsetup_r+0x3c>
 8011254:	686c      	ldr	r4, [r5, #4]
 8011256:	89a3      	ldrh	r3, [r4, #12]
 8011258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801125c:	0719      	lsls	r1, r3, #28
 801125e:	d42c      	bmi.n	80112ba <__swsetup_r+0x82>
 8011260:	06dd      	lsls	r5, r3, #27
 8011262:	d411      	bmi.n	8011288 <__swsetup_r+0x50>
 8011264:	2309      	movs	r3, #9
 8011266:	6033      	str	r3, [r6, #0]
 8011268:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801126c:	81a3      	strh	r3, [r4, #12]
 801126e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011272:	e03e      	b.n	80112f2 <__swsetup_r+0xba>
 8011274:	4b25      	ldr	r3, [pc, #148]	; (801130c <__swsetup_r+0xd4>)
 8011276:	429c      	cmp	r4, r3
 8011278:	d101      	bne.n	801127e <__swsetup_r+0x46>
 801127a:	68ac      	ldr	r4, [r5, #8]
 801127c:	e7eb      	b.n	8011256 <__swsetup_r+0x1e>
 801127e:	4b24      	ldr	r3, [pc, #144]	; (8011310 <__swsetup_r+0xd8>)
 8011280:	429c      	cmp	r4, r3
 8011282:	bf08      	it	eq
 8011284:	68ec      	ldreq	r4, [r5, #12]
 8011286:	e7e6      	b.n	8011256 <__swsetup_r+0x1e>
 8011288:	0758      	lsls	r0, r3, #29
 801128a:	d512      	bpl.n	80112b2 <__swsetup_r+0x7a>
 801128c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801128e:	b141      	cbz	r1, 80112a2 <__swsetup_r+0x6a>
 8011290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011294:	4299      	cmp	r1, r3
 8011296:	d002      	beq.n	801129e <__swsetup_r+0x66>
 8011298:	4630      	mov	r0, r6
 801129a:	f7ff feaf 	bl	8010ffc <_free_r>
 801129e:	2300      	movs	r3, #0
 80112a0:	6363      	str	r3, [r4, #52]	; 0x34
 80112a2:	89a3      	ldrh	r3, [r4, #12]
 80112a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112a8:	81a3      	strh	r3, [r4, #12]
 80112aa:	2300      	movs	r3, #0
 80112ac:	6063      	str	r3, [r4, #4]
 80112ae:	6923      	ldr	r3, [r4, #16]
 80112b0:	6023      	str	r3, [r4, #0]
 80112b2:	89a3      	ldrh	r3, [r4, #12]
 80112b4:	f043 0308 	orr.w	r3, r3, #8
 80112b8:	81a3      	strh	r3, [r4, #12]
 80112ba:	6923      	ldr	r3, [r4, #16]
 80112bc:	b94b      	cbnz	r3, 80112d2 <__swsetup_r+0x9a>
 80112be:	89a3      	ldrh	r3, [r4, #12]
 80112c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80112c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112c8:	d003      	beq.n	80112d2 <__swsetup_r+0x9a>
 80112ca:	4621      	mov	r1, r4
 80112cc:	4630      	mov	r0, r6
 80112ce:	f000 f99f 	bl	8011610 <__smakebuf_r>
 80112d2:	89a0      	ldrh	r0, [r4, #12]
 80112d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112d8:	f010 0301 	ands.w	r3, r0, #1
 80112dc:	d00a      	beq.n	80112f4 <__swsetup_r+0xbc>
 80112de:	2300      	movs	r3, #0
 80112e0:	60a3      	str	r3, [r4, #8]
 80112e2:	6963      	ldr	r3, [r4, #20]
 80112e4:	425b      	negs	r3, r3
 80112e6:	61a3      	str	r3, [r4, #24]
 80112e8:	6923      	ldr	r3, [r4, #16]
 80112ea:	b943      	cbnz	r3, 80112fe <__swsetup_r+0xc6>
 80112ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80112f0:	d1ba      	bne.n	8011268 <__swsetup_r+0x30>
 80112f2:	bd70      	pop	{r4, r5, r6, pc}
 80112f4:	0781      	lsls	r1, r0, #30
 80112f6:	bf58      	it	pl
 80112f8:	6963      	ldrpl	r3, [r4, #20]
 80112fa:	60a3      	str	r3, [r4, #8]
 80112fc:	e7f4      	b.n	80112e8 <__swsetup_r+0xb0>
 80112fe:	2000      	movs	r0, #0
 8011300:	e7f7      	b.n	80112f2 <__swsetup_r+0xba>
 8011302:	bf00      	nop
 8011304:	200001e8 	.word	0x200001e8
 8011308:	08018a40 	.word	0x08018a40
 801130c:	08018a60 	.word	0x08018a60
 8011310:	08018a20 	.word	0x08018a20

08011314 <__sflush_r>:
 8011314:	898a      	ldrh	r2, [r1, #12]
 8011316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011318:	4605      	mov	r5, r0
 801131a:	0710      	lsls	r0, r2, #28
 801131c:	460c      	mov	r4, r1
 801131e:	d457      	bmi.n	80113d0 <__sflush_r+0xbc>
 8011320:	684b      	ldr	r3, [r1, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	dc04      	bgt.n	8011330 <__sflush_r+0x1c>
 8011326:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011328:	2b00      	cmp	r3, #0
 801132a:	dc01      	bgt.n	8011330 <__sflush_r+0x1c>
 801132c:	2000      	movs	r0, #0
 801132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011332:	2e00      	cmp	r6, #0
 8011334:	d0fa      	beq.n	801132c <__sflush_r+0x18>
 8011336:	2300      	movs	r3, #0
 8011338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801133c:	682f      	ldr	r7, [r5, #0]
 801133e:	602b      	str	r3, [r5, #0]
 8011340:	d032      	beq.n	80113a8 <__sflush_r+0x94>
 8011342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	075a      	lsls	r2, r3, #29
 8011348:	d505      	bpl.n	8011356 <__sflush_r+0x42>
 801134a:	6863      	ldr	r3, [r4, #4]
 801134c:	1ac0      	subs	r0, r0, r3
 801134e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011350:	b10b      	cbz	r3, 8011356 <__sflush_r+0x42>
 8011352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011354:	1ac0      	subs	r0, r0, r3
 8011356:	2300      	movs	r3, #0
 8011358:	4602      	mov	r2, r0
 801135a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801135c:	6a21      	ldr	r1, [r4, #32]
 801135e:	4628      	mov	r0, r5
 8011360:	47b0      	blx	r6
 8011362:	1c43      	adds	r3, r0, #1
 8011364:	89a3      	ldrh	r3, [r4, #12]
 8011366:	d106      	bne.n	8011376 <__sflush_r+0x62>
 8011368:	6829      	ldr	r1, [r5, #0]
 801136a:	291d      	cmp	r1, #29
 801136c:	d82c      	bhi.n	80113c8 <__sflush_r+0xb4>
 801136e:	4a29      	ldr	r2, [pc, #164]	; (8011414 <__sflush_r+0x100>)
 8011370:	40ca      	lsrs	r2, r1
 8011372:	07d6      	lsls	r6, r2, #31
 8011374:	d528      	bpl.n	80113c8 <__sflush_r+0xb4>
 8011376:	2200      	movs	r2, #0
 8011378:	6062      	str	r2, [r4, #4]
 801137a:	04d9      	lsls	r1, r3, #19
 801137c:	6922      	ldr	r2, [r4, #16]
 801137e:	6022      	str	r2, [r4, #0]
 8011380:	d504      	bpl.n	801138c <__sflush_r+0x78>
 8011382:	1c42      	adds	r2, r0, #1
 8011384:	d101      	bne.n	801138a <__sflush_r+0x76>
 8011386:	682b      	ldr	r3, [r5, #0]
 8011388:	b903      	cbnz	r3, 801138c <__sflush_r+0x78>
 801138a:	6560      	str	r0, [r4, #84]	; 0x54
 801138c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801138e:	602f      	str	r7, [r5, #0]
 8011390:	2900      	cmp	r1, #0
 8011392:	d0cb      	beq.n	801132c <__sflush_r+0x18>
 8011394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011398:	4299      	cmp	r1, r3
 801139a:	d002      	beq.n	80113a2 <__sflush_r+0x8e>
 801139c:	4628      	mov	r0, r5
 801139e:	f7ff fe2d 	bl	8010ffc <_free_r>
 80113a2:	2000      	movs	r0, #0
 80113a4:	6360      	str	r0, [r4, #52]	; 0x34
 80113a6:	e7c2      	b.n	801132e <__sflush_r+0x1a>
 80113a8:	6a21      	ldr	r1, [r4, #32]
 80113aa:	2301      	movs	r3, #1
 80113ac:	4628      	mov	r0, r5
 80113ae:	47b0      	blx	r6
 80113b0:	1c41      	adds	r1, r0, #1
 80113b2:	d1c7      	bne.n	8011344 <__sflush_r+0x30>
 80113b4:	682b      	ldr	r3, [r5, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d0c4      	beq.n	8011344 <__sflush_r+0x30>
 80113ba:	2b1d      	cmp	r3, #29
 80113bc:	d001      	beq.n	80113c2 <__sflush_r+0xae>
 80113be:	2b16      	cmp	r3, #22
 80113c0:	d101      	bne.n	80113c6 <__sflush_r+0xb2>
 80113c2:	602f      	str	r7, [r5, #0]
 80113c4:	e7b2      	b.n	801132c <__sflush_r+0x18>
 80113c6:	89a3      	ldrh	r3, [r4, #12]
 80113c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113cc:	81a3      	strh	r3, [r4, #12]
 80113ce:	e7ae      	b.n	801132e <__sflush_r+0x1a>
 80113d0:	690f      	ldr	r7, [r1, #16]
 80113d2:	2f00      	cmp	r7, #0
 80113d4:	d0aa      	beq.n	801132c <__sflush_r+0x18>
 80113d6:	0793      	lsls	r3, r2, #30
 80113d8:	680e      	ldr	r6, [r1, #0]
 80113da:	bf08      	it	eq
 80113dc:	694b      	ldreq	r3, [r1, #20]
 80113de:	600f      	str	r7, [r1, #0]
 80113e0:	bf18      	it	ne
 80113e2:	2300      	movne	r3, #0
 80113e4:	1bf6      	subs	r6, r6, r7
 80113e6:	608b      	str	r3, [r1, #8]
 80113e8:	2e00      	cmp	r6, #0
 80113ea:	dd9f      	ble.n	801132c <__sflush_r+0x18>
 80113ec:	6a21      	ldr	r1, [r4, #32]
 80113ee:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80113f2:	4633      	mov	r3, r6
 80113f4:	463a      	mov	r2, r7
 80113f6:	4628      	mov	r0, r5
 80113f8:	47e0      	blx	ip
 80113fa:	2800      	cmp	r0, #0
 80113fc:	dc06      	bgt.n	801140c <__sflush_r+0xf8>
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011404:	81a3      	strh	r3, [r4, #12]
 8011406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801140a:	e790      	b.n	801132e <__sflush_r+0x1a>
 801140c:	4407      	add	r7, r0
 801140e:	1a36      	subs	r6, r6, r0
 8011410:	e7ea      	b.n	80113e8 <__sflush_r+0xd4>
 8011412:	bf00      	nop
 8011414:	20400001 	.word	0x20400001

08011418 <_fflush_r>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	690b      	ldr	r3, [r1, #16]
 801141c:	4605      	mov	r5, r0
 801141e:	460c      	mov	r4, r1
 8011420:	b913      	cbnz	r3, 8011428 <_fflush_r+0x10>
 8011422:	2500      	movs	r5, #0
 8011424:	4628      	mov	r0, r5
 8011426:	bd38      	pop	{r3, r4, r5, pc}
 8011428:	b118      	cbz	r0, 8011432 <_fflush_r+0x1a>
 801142a:	6983      	ldr	r3, [r0, #24]
 801142c:	b90b      	cbnz	r3, 8011432 <_fflush_r+0x1a>
 801142e:	f000 f871 	bl	8011514 <__sinit>
 8011432:	4b14      	ldr	r3, [pc, #80]	; (8011484 <_fflush_r+0x6c>)
 8011434:	429c      	cmp	r4, r3
 8011436:	d11b      	bne.n	8011470 <_fflush_r+0x58>
 8011438:	686c      	ldr	r4, [r5, #4]
 801143a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d0ef      	beq.n	8011422 <_fflush_r+0xa>
 8011442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011444:	07d0      	lsls	r0, r2, #31
 8011446:	d404      	bmi.n	8011452 <_fflush_r+0x3a>
 8011448:	0599      	lsls	r1, r3, #22
 801144a:	d402      	bmi.n	8011452 <_fflush_r+0x3a>
 801144c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801144e:	f001 f95b 	bl	8012708 <__retarget_lock_acquire_recursive>
 8011452:	4628      	mov	r0, r5
 8011454:	4621      	mov	r1, r4
 8011456:	f7ff ff5d 	bl	8011314 <__sflush_r>
 801145a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801145c:	07da      	lsls	r2, r3, #31
 801145e:	4605      	mov	r5, r0
 8011460:	d4e0      	bmi.n	8011424 <_fflush_r+0xc>
 8011462:	89a3      	ldrh	r3, [r4, #12]
 8011464:	059b      	lsls	r3, r3, #22
 8011466:	d4dd      	bmi.n	8011424 <_fflush_r+0xc>
 8011468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801146a:	f001 f953 	bl	8012714 <__retarget_lock_release_recursive>
 801146e:	e7d9      	b.n	8011424 <_fflush_r+0xc>
 8011470:	4b05      	ldr	r3, [pc, #20]	; (8011488 <_fflush_r+0x70>)
 8011472:	429c      	cmp	r4, r3
 8011474:	d101      	bne.n	801147a <_fflush_r+0x62>
 8011476:	68ac      	ldr	r4, [r5, #8]
 8011478:	e7df      	b.n	801143a <_fflush_r+0x22>
 801147a:	4b04      	ldr	r3, [pc, #16]	; (801148c <_fflush_r+0x74>)
 801147c:	429c      	cmp	r4, r3
 801147e:	bf08      	it	eq
 8011480:	68ec      	ldreq	r4, [r5, #12]
 8011482:	e7da      	b.n	801143a <_fflush_r+0x22>
 8011484:	08018a40 	.word	0x08018a40
 8011488:	08018a60 	.word	0x08018a60
 801148c:	08018a20 	.word	0x08018a20

08011490 <std>:
 8011490:	2300      	movs	r3, #0
 8011492:	b510      	push	{r4, lr}
 8011494:	4604      	mov	r4, r0
 8011496:	e9c0 3300 	strd	r3, r3, [r0]
 801149a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801149e:	6083      	str	r3, [r0, #8]
 80114a0:	8181      	strh	r1, [r0, #12]
 80114a2:	6643      	str	r3, [r0, #100]	; 0x64
 80114a4:	81c2      	strh	r2, [r0, #14]
 80114a6:	6183      	str	r3, [r0, #24]
 80114a8:	4619      	mov	r1, r3
 80114aa:	2208      	movs	r2, #8
 80114ac:	305c      	adds	r0, #92	; 0x5c
 80114ae:	f006 f9e6 	bl	801787e <memset>
 80114b2:	4b05      	ldr	r3, [pc, #20]	; (80114c8 <std+0x38>)
 80114b4:	6263      	str	r3, [r4, #36]	; 0x24
 80114b6:	4b05      	ldr	r3, [pc, #20]	; (80114cc <std+0x3c>)
 80114b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80114ba:	4b05      	ldr	r3, [pc, #20]	; (80114d0 <std+0x40>)
 80114bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114be:	4b05      	ldr	r3, [pc, #20]	; (80114d4 <std+0x44>)
 80114c0:	6224      	str	r4, [r4, #32]
 80114c2:	6323      	str	r3, [r4, #48]	; 0x30
 80114c4:	bd10      	pop	{r4, pc}
 80114c6:	bf00      	nop
 80114c8:	08017b33 	.word	0x08017b33
 80114cc:	08017b55 	.word	0x08017b55
 80114d0:	08017b8d 	.word	0x08017b8d
 80114d4:	08017bb1 	.word	0x08017bb1

080114d8 <_cleanup_r>:
 80114d8:	4901      	ldr	r1, [pc, #4]	; (80114e0 <_cleanup_r+0x8>)
 80114da:	f006 ba52 	b.w	8017982 <_fwalk_reent>
 80114de:	bf00      	nop
 80114e0:	08011419 	.word	0x08011419

080114e4 <__sfp_lock_acquire>:
 80114e4:	4801      	ldr	r0, [pc, #4]	; (80114ec <__sfp_lock_acquire+0x8>)
 80114e6:	f001 b90f 	b.w	8012708 <__retarget_lock_acquire_recursive>
 80114ea:	bf00      	nop
 80114ec:	20000348 	.word	0x20000348

080114f0 <__sfp_lock_release>:
 80114f0:	4801      	ldr	r0, [pc, #4]	; (80114f8 <__sfp_lock_release+0x8>)
 80114f2:	f001 b90f 	b.w	8012714 <__retarget_lock_release_recursive>
 80114f6:	bf00      	nop
 80114f8:	20000348 	.word	0x20000348

080114fc <__sinit_lock_acquire>:
 80114fc:	4801      	ldr	r0, [pc, #4]	; (8011504 <__sinit_lock_acquire+0x8>)
 80114fe:	f001 b903 	b.w	8012708 <__retarget_lock_acquire_recursive>
 8011502:	bf00      	nop
 8011504:	2000035c 	.word	0x2000035c

08011508 <__sinit_lock_release>:
 8011508:	4801      	ldr	r0, [pc, #4]	; (8011510 <__sinit_lock_release+0x8>)
 801150a:	f001 b903 	b.w	8012714 <__retarget_lock_release_recursive>
 801150e:	bf00      	nop
 8011510:	2000035c 	.word	0x2000035c

08011514 <__sinit>:
 8011514:	b510      	push	{r4, lr}
 8011516:	4604      	mov	r4, r0
 8011518:	f7ff fff0 	bl	80114fc <__sinit_lock_acquire>
 801151c:	69a3      	ldr	r3, [r4, #24]
 801151e:	b11b      	cbz	r3, 8011528 <__sinit+0x14>
 8011520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011524:	f7ff bff0 	b.w	8011508 <__sinit_lock_release>
 8011528:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801152c:	6523      	str	r3, [r4, #80]	; 0x50
 801152e:	4b13      	ldr	r3, [pc, #76]	; (801157c <__sinit+0x68>)
 8011530:	4a13      	ldr	r2, [pc, #76]	; (8011580 <__sinit+0x6c>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	62a2      	str	r2, [r4, #40]	; 0x28
 8011536:	42a3      	cmp	r3, r4
 8011538:	bf04      	itt	eq
 801153a:	2301      	moveq	r3, #1
 801153c:	61a3      	streq	r3, [r4, #24]
 801153e:	4620      	mov	r0, r4
 8011540:	f000 f820 	bl	8011584 <__sfp>
 8011544:	6060      	str	r0, [r4, #4]
 8011546:	4620      	mov	r0, r4
 8011548:	f000 f81c 	bl	8011584 <__sfp>
 801154c:	60a0      	str	r0, [r4, #8]
 801154e:	4620      	mov	r0, r4
 8011550:	f000 f818 	bl	8011584 <__sfp>
 8011554:	2200      	movs	r2, #0
 8011556:	60e0      	str	r0, [r4, #12]
 8011558:	2104      	movs	r1, #4
 801155a:	6860      	ldr	r0, [r4, #4]
 801155c:	f7ff ff98 	bl	8011490 <std>
 8011560:	68a0      	ldr	r0, [r4, #8]
 8011562:	2201      	movs	r2, #1
 8011564:	2109      	movs	r1, #9
 8011566:	f7ff ff93 	bl	8011490 <std>
 801156a:	68e0      	ldr	r0, [r4, #12]
 801156c:	2202      	movs	r2, #2
 801156e:	2112      	movs	r1, #18
 8011570:	f7ff ff8e 	bl	8011490 <std>
 8011574:	2301      	movs	r3, #1
 8011576:	61a3      	str	r3, [r4, #24]
 8011578:	e7d2      	b.n	8011520 <__sinit+0xc>
 801157a:	bf00      	nop
 801157c:	08018a1c 	.word	0x08018a1c
 8011580:	080114d9 	.word	0x080114d9

08011584 <__sfp>:
 8011584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011586:	4607      	mov	r7, r0
 8011588:	f7ff ffac 	bl	80114e4 <__sfp_lock_acquire>
 801158c:	4b1e      	ldr	r3, [pc, #120]	; (8011608 <__sfp+0x84>)
 801158e:	681e      	ldr	r6, [r3, #0]
 8011590:	69b3      	ldr	r3, [r6, #24]
 8011592:	b913      	cbnz	r3, 801159a <__sfp+0x16>
 8011594:	4630      	mov	r0, r6
 8011596:	f7ff ffbd 	bl	8011514 <__sinit>
 801159a:	3648      	adds	r6, #72	; 0x48
 801159c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80115a0:	3b01      	subs	r3, #1
 80115a2:	d503      	bpl.n	80115ac <__sfp+0x28>
 80115a4:	6833      	ldr	r3, [r6, #0]
 80115a6:	b30b      	cbz	r3, 80115ec <__sfp+0x68>
 80115a8:	6836      	ldr	r6, [r6, #0]
 80115aa:	e7f7      	b.n	801159c <__sfp+0x18>
 80115ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80115b0:	b9d5      	cbnz	r5, 80115e8 <__sfp+0x64>
 80115b2:	4b16      	ldr	r3, [pc, #88]	; (801160c <__sfp+0x88>)
 80115b4:	60e3      	str	r3, [r4, #12]
 80115b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115ba:	6665      	str	r5, [r4, #100]	; 0x64
 80115bc:	f001 f89a 	bl	80126f4 <__retarget_lock_init_recursive>
 80115c0:	f7ff ff96 	bl	80114f0 <__sfp_lock_release>
 80115c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80115c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80115cc:	6025      	str	r5, [r4, #0]
 80115ce:	61a5      	str	r5, [r4, #24]
 80115d0:	2208      	movs	r2, #8
 80115d2:	4629      	mov	r1, r5
 80115d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80115d8:	f006 f951 	bl	801787e <memset>
 80115dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80115e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80115e4:	4620      	mov	r0, r4
 80115e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115e8:	3468      	adds	r4, #104	; 0x68
 80115ea:	e7d9      	b.n	80115a0 <__sfp+0x1c>
 80115ec:	2104      	movs	r1, #4
 80115ee:	4638      	mov	r0, r7
 80115f0:	f006 f9b1 	bl	8017956 <__sfmoreglue>
 80115f4:	4604      	mov	r4, r0
 80115f6:	6030      	str	r0, [r6, #0]
 80115f8:	2800      	cmp	r0, #0
 80115fa:	d1d5      	bne.n	80115a8 <__sfp+0x24>
 80115fc:	f7ff ff78 	bl	80114f0 <__sfp_lock_release>
 8011600:	230c      	movs	r3, #12
 8011602:	603b      	str	r3, [r7, #0]
 8011604:	e7ee      	b.n	80115e4 <__sfp+0x60>
 8011606:	bf00      	nop
 8011608:	08018a1c 	.word	0x08018a1c
 801160c:	ffff0001 	.word	0xffff0001

08011610 <__smakebuf_r>:
 8011610:	898b      	ldrh	r3, [r1, #12]
 8011612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011614:	079d      	lsls	r5, r3, #30
 8011616:	4606      	mov	r6, r0
 8011618:	460c      	mov	r4, r1
 801161a:	d507      	bpl.n	801162c <__smakebuf_r+0x1c>
 801161c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011620:	6023      	str	r3, [r4, #0]
 8011622:	6123      	str	r3, [r4, #16]
 8011624:	2301      	movs	r3, #1
 8011626:	6163      	str	r3, [r4, #20]
 8011628:	b002      	add	sp, #8
 801162a:	bd70      	pop	{r4, r5, r6, pc}
 801162c:	ab01      	add	r3, sp, #4
 801162e:	466a      	mov	r2, sp
 8011630:	f006 f9c6 	bl	80179c0 <__swhatbuf_r>
 8011634:	9900      	ldr	r1, [sp, #0]
 8011636:	4605      	mov	r5, r0
 8011638:	4630      	mov	r0, r6
 801163a:	f7ff fd29 	bl	8011090 <_malloc_r>
 801163e:	b948      	cbnz	r0, 8011654 <__smakebuf_r+0x44>
 8011640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011644:	059a      	lsls	r2, r3, #22
 8011646:	d4ef      	bmi.n	8011628 <__smakebuf_r+0x18>
 8011648:	f023 0303 	bic.w	r3, r3, #3
 801164c:	f043 0302 	orr.w	r3, r3, #2
 8011650:	81a3      	strh	r3, [r4, #12]
 8011652:	e7e3      	b.n	801161c <__smakebuf_r+0xc>
 8011654:	4b0d      	ldr	r3, [pc, #52]	; (801168c <__smakebuf_r+0x7c>)
 8011656:	62b3      	str	r3, [r6, #40]	; 0x28
 8011658:	89a3      	ldrh	r3, [r4, #12]
 801165a:	6020      	str	r0, [r4, #0]
 801165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011660:	81a3      	strh	r3, [r4, #12]
 8011662:	9b00      	ldr	r3, [sp, #0]
 8011664:	6163      	str	r3, [r4, #20]
 8011666:	9b01      	ldr	r3, [sp, #4]
 8011668:	6120      	str	r0, [r4, #16]
 801166a:	b15b      	cbz	r3, 8011684 <__smakebuf_r+0x74>
 801166c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011670:	4630      	mov	r0, r6
 8011672:	f000 faa3 	bl	8011bbc <_isatty_r>
 8011676:	b128      	cbz	r0, 8011684 <__smakebuf_r+0x74>
 8011678:	89a3      	ldrh	r3, [r4, #12]
 801167a:	f023 0303 	bic.w	r3, r3, #3
 801167e:	f043 0301 	orr.w	r3, r3, #1
 8011682:	81a3      	strh	r3, [r4, #12]
 8011684:	89a0      	ldrh	r0, [r4, #12]
 8011686:	4305      	orrs	r5, r0
 8011688:	81a5      	strh	r5, [r4, #12]
 801168a:	e7cd      	b.n	8011628 <__smakebuf_r+0x18>
 801168c:	080114d9 	.word	0x080114d9

08011690 <__malloc_lock>:
 8011690:	4801      	ldr	r0, [pc, #4]	; (8011698 <__malloc_lock+0x8>)
 8011692:	f001 b839 	b.w	8012708 <__retarget_lock_acquire_recursive>
 8011696:	bf00      	nop
 8011698:	20000334 	.word	0x20000334

0801169c <__malloc_unlock>:
 801169c:	4801      	ldr	r0, [pc, #4]	; (80116a4 <__malloc_unlock+0x8>)
 801169e:	f001 b839 	b.w	8012714 <__retarget_lock_release_recursive>
 80116a2:	bf00      	nop
 80116a4:	20000334 	.word	0x20000334

080116a8 <_vfiprintf_r>:
 80116a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ac:	460d      	mov	r5, r1
 80116ae:	b09d      	sub	sp, #116	; 0x74
 80116b0:	4614      	mov	r4, r2
 80116b2:	4698      	mov	r8, r3
 80116b4:	4606      	mov	r6, r0
 80116b6:	b118      	cbz	r0, 80116c0 <_vfiprintf_r+0x18>
 80116b8:	6983      	ldr	r3, [r0, #24]
 80116ba:	b90b      	cbnz	r3, 80116c0 <_vfiprintf_r+0x18>
 80116bc:	f7ff ff2a 	bl	8011514 <__sinit>
 80116c0:	4b89      	ldr	r3, [pc, #548]	; (80118e8 <_vfiprintf_r+0x240>)
 80116c2:	429d      	cmp	r5, r3
 80116c4:	d11b      	bne.n	80116fe <_vfiprintf_r+0x56>
 80116c6:	6875      	ldr	r5, [r6, #4]
 80116c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116ca:	07d9      	lsls	r1, r3, #31
 80116cc:	d405      	bmi.n	80116da <_vfiprintf_r+0x32>
 80116ce:	89ab      	ldrh	r3, [r5, #12]
 80116d0:	059a      	lsls	r2, r3, #22
 80116d2:	d402      	bmi.n	80116da <_vfiprintf_r+0x32>
 80116d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116d6:	f001 f817 	bl	8012708 <__retarget_lock_acquire_recursive>
 80116da:	89ab      	ldrh	r3, [r5, #12]
 80116dc:	071b      	lsls	r3, r3, #28
 80116de:	d501      	bpl.n	80116e4 <_vfiprintf_r+0x3c>
 80116e0:	692b      	ldr	r3, [r5, #16]
 80116e2:	b9eb      	cbnz	r3, 8011720 <_vfiprintf_r+0x78>
 80116e4:	4629      	mov	r1, r5
 80116e6:	4630      	mov	r0, r6
 80116e8:	f7ff fda6 	bl	8011238 <__swsetup_r>
 80116ec:	b1c0      	cbz	r0, 8011720 <_vfiprintf_r+0x78>
 80116ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116f0:	07dc      	lsls	r4, r3, #31
 80116f2:	d50e      	bpl.n	8011712 <_vfiprintf_r+0x6a>
 80116f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116f8:	b01d      	add	sp, #116	; 0x74
 80116fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fe:	4b7b      	ldr	r3, [pc, #492]	; (80118ec <_vfiprintf_r+0x244>)
 8011700:	429d      	cmp	r5, r3
 8011702:	d101      	bne.n	8011708 <_vfiprintf_r+0x60>
 8011704:	68b5      	ldr	r5, [r6, #8]
 8011706:	e7df      	b.n	80116c8 <_vfiprintf_r+0x20>
 8011708:	4b79      	ldr	r3, [pc, #484]	; (80118f0 <_vfiprintf_r+0x248>)
 801170a:	429d      	cmp	r5, r3
 801170c:	bf08      	it	eq
 801170e:	68f5      	ldreq	r5, [r6, #12]
 8011710:	e7da      	b.n	80116c8 <_vfiprintf_r+0x20>
 8011712:	89ab      	ldrh	r3, [r5, #12]
 8011714:	0598      	lsls	r0, r3, #22
 8011716:	d4ed      	bmi.n	80116f4 <_vfiprintf_r+0x4c>
 8011718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801171a:	f000 fffb 	bl	8012714 <__retarget_lock_release_recursive>
 801171e:	e7e9      	b.n	80116f4 <_vfiprintf_r+0x4c>
 8011720:	2300      	movs	r3, #0
 8011722:	9309      	str	r3, [sp, #36]	; 0x24
 8011724:	2320      	movs	r3, #32
 8011726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801172a:	f8cd 800c 	str.w	r8, [sp, #12]
 801172e:	2330      	movs	r3, #48	; 0x30
 8011730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80118f4 <_vfiprintf_r+0x24c>
 8011734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011738:	f04f 0901 	mov.w	r9, #1
 801173c:	4623      	mov	r3, r4
 801173e:	469a      	mov	sl, r3
 8011740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011744:	b10a      	cbz	r2, 801174a <_vfiprintf_r+0xa2>
 8011746:	2a25      	cmp	r2, #37	; 0x25
 8011748:	d1f9      	bne.n	801173e <_vfiprintf_r+0x96>
 801174a:	ebba 0b04 	subs.w	fp, sl, r4
 801174e:	d00b      	beq.n	8011768 <_vfiprintf_r+0xc0>
 8011750:	465b      	mov	r3, fp
 8011752:	4622      	mov	r2, r4
 8011754:	4629      	mov	r1, r5
 8011756:	4630      	mov	r0, r6
 8011758:	f006 f96c 	bl	8017a34 <__sfputs_r>
 801175c:	3001      	adds	r0, #1
 801175e:	f000 80aa 	beq.w	80118b6 <_vfiprintf_r+0x20e>
 8011762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011764:	445a      	add	r2, fp
 8011766:	9209      	str	r2, [sp, #36]	; 0x24
 8011768:	f89a 3000 	ldrb.w	r3, [sl]
 801176c:	2b00      	cmp	r3, #0
 801176e:	f000 80a2 	beq.w	80118b6 <_vfiprintf_r+0x20e>
 8011772:	2300      	movs	r3, #0
 8011774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801177c:	f10a 0a01 	add.w	sl, sl, #1
 8011780:	9304      	str	r3, [sp, #16]
 8011782:	9307      	str	r3, [sp, #28]
 8011784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011788:	931a      	str	r3, [sp, #104]	; 0x68
 801178a:	4654      	mov	r4, sl
 801178c:	2205      	movs	r2, #5
 801178e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011792:	4858      	ldr	r0, [pc, #352]	; (80118f4 <_vfiprintf_r+0x24c>)
 8011794:	f7ee fcd4 	bl	8000140 <memchr>
 8011798:	9a04      	ldr	r2, [sp, #16]
 801179a:	b9d8      	cbnz	r0, 80117d4 <_vfiprintf_r+0x12c>
 801179c:	06d1      	lsls	r1, r2, #27
 801179e:	bf44      	itt	mi
 80117a0:	2320      	movmi	r3, #32
 80117a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117a6:	0713      	lsls	r3, r2, #28
 80117a8:	bf44      	itt	mi
 80117aa:	232b      	movmi	r3, #43	; 0x2b
 80117ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117b0:	f89a 3000 	ldrb.w	r3, [sl]
 80117b4:	2b2a      	cmp	r3, #42	; 0x2a
 80117b6:	d015      	beq.n	80117e4 <_vfiprintf_r+0x13c>
 80117b8:	9a07      	ldr	r2, [sp, #28]
 80117ba:	4654      	mov	r4, sl
 80117bc:	2000      	movs	r0, #0
 80117be:	f04f 0c0a 	mov.w	ip, #10
 80117c2:	4621      	mov	r1, r4
 80117c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117c8:	3b30      	subs	r3, #48	; 0x30
 80117ca:	2b09      	cmp	r3, #9
 80117cc:	d94e      	bls.n	801186c <_vfiprintf_r+0x1c4>
 80117ce:	b1b0      	cbz	r0, 80117fe <_vfiprintf_r+0x156>
 80117d0:	9207      	str	r2, [sp, #28]
 80117d2:	e014      	b.n	80117fe <_vfiprintf_r+0x156>
 80117d4:	eba0 0308 	sub.w	r3, r0, r8
 80117d8:	fa09 f303 	lsl.w	r3, r9, r3
 80117dc:	4313      	orrs	r3, r2
 80117de:	9304      	str	r3, [sp, #16]
 80117e0:	46a2      	mov	sl, r4
 80117e2:	e7d2      	b.n	801178a <_vfiprintf_r+0xe2>
 80117e4:	9b03      	ldr	r3, [sp, #12]
 80117e6:	1d19      	adds	r1, r3, #4
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	9103      	str	r1, [sp, #12]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	bfbb      	ittet	lt
 80117f0:	425b      	neglt	r3, r3
 80117f2:	f042 0202 	orrlt.w	r2, r2, #2
 80117f6:	9307      	strge	r3, [sp, #28]
 80117f8:	9307      	strlt	r3, [sp, #28]
 80117fa:	bfb8      	it	lt
 80117fc:	9204      	strlt	r2, [sp, #16]
 80117fe:	7823      	ldrb	r3, [r4, #0]
 8011800:	2b2e      	cmp	r3, #46	; 0x2e
 8011802:	d10c      	bne.n	801181e <_vfiprintf_r+0x176>
 8011804:	7863      	ldrb	r3, [r4, #1]
 8011806:	2b2a      	cmp	r3, #42	; 0x2a
 8011808:	d135      	bne.n	8011876 <_vfiprintf_r+0x1ce>
 801180a:	9b03      	ldr	r3, [sp, #12]
 801180c:	1d1a      	adds	r2, r3, #4
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	9203      	str	r2, [sp, #12]
 8011812:	2b00      	cmp	r3, #0
 8011814:	bfb8      	it	lt
 8011816:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801181a:	3402      	adds	r4, #2
 801181c:	9305      	str	r3, [sp, #20]
 801181e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80118f8 <_vfiprintf_r+0x250>
 8011822:	7821      	ldrb	r1, [r4, #0]
 8011824:	2203      	movs	r2, #3
 8011826:	4650      	mov	r0, sl
 8011828:	f7ee fc8a 	bl	8000140 <memchr>
 801182c:	b140      	cbz	r0, 8011840 <_vfiprintf_r+0x198>
 801182e:	2340      	movs	r3, #64	; 0x40
 8011830:	eba0 000a 	sub.w	r0, r0, sl
 8011834:	fa03 f000 	lsl.w	r0, r3, r0
 8011838:	9b04      	ldr	r3, [sp, #16]
 801183a:	4303      	orrs	r3, r0
 801183c:	3401      	adds	r4, #1
 801183e:	9304      	str	r3, [sp, #16]
 8011840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011844:	482d      	ldr	r0, [pc, #180]	; (80118fc <_vfiprintf_r+0x254>)
 8011846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801184a:	2206      	movs	r2, #6
 801184c:	f7ee fc78 	bl	8000140 <memchr>
 8011850:	2800      	cmp	r0, #0
 8011852:	d03f      	beq.n	80118d4 <_vfiprintf_r+0x22c>
 8011854:	4b2a      	ldr	r3, [pc, #168]	; (8011900 <_vfiprintf_r+0x258>)
 8011856:	bb1b      	cbnz	r3, 80118a0 <_vfiprintf_r+0x1f8>
 8011858:	9b03      	ldr	r3, [sp, #12]
 801185a:	3307      	adds	r3, #7
 801185c:	f023 0307 	bic.w	r3, r3, #7
 8011860:	3308      	adds	r3, #8
 8011862:	9303      	str	r3, [sp, #12]
 8011864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011866:	443b      	add	r3, r7
 8011868:	9309      	str	r3, [sp, #36]	; 0x24
 801186a:	e767      	b.n	801173c <_vfiprintf_r+0x94>
 801186c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011870:	460c      	mov	r4, r1
 8011872:	2001      	movs	r0, #1
 8011874:	e7a5      	b.n	80117c2 <_vfiprintf_r+0x11a>
 8011876:	2300      	movs	r3, #0
 8011878:	3401      	adds	r4, #1
 801187a:	9305      	str	r3, [sp, #20]
 801187c:	4619      	mov	r1, r3
 801187e:	f04f 0c0a 	mov.w	ip, #10
 8011882:	4620      	mov	r0, r4
 8011884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011888:	3a30      	subs	r2, #48	; 0x30
 801188a:	2a09      	cmp	r2, #9
 801188c:	d903      	bls.n	8011896 <_vfiprintf_r+0x1ee>
 801188e:	2b00      	cmp	r3, #0
 8011890:	d0c5      	beq.n	801181e <_vfiprintf_r+0x176>
 8011892:	9105      	str	r1, [sp, #20]
 8011894:	e7c3      	b.n	801181e <_vfiprintf_r+0x176>
 8011896:	fb0c 2101 	mla	r1, ip, r1, r2
 801189a:	4604      	mov	r4, r0
 801189c:	2301      	movs	r3, #1
 801189e:	e7f0      	b.n	8011882 <_vfiprintf_r+0x1da>
 80118a0:	ab03      	add	r3, sp, #12
 80118a2:	9300      	str	r3, [sp, #0]
 80118a4:	462a      	mov	r2, r5
 80118a6:	4b17      	ldr	r3, [pc, #92]	; (8011904 <_vfiprintf_r+0x25c>)
 80118a8:	a904      	add	r1, sp, #16
 80118aa:	4630      	mov	r0, r6
 80118ac:	f3af 8000 	nop.w
 80118b0:	4607      	mov	r7, r0
 80118b2:	1c78      	adds	r0, r7, #1
 80118b4:	d1d6      	bne.n	8011864 <_vfiprintf_r+0x1bc>
 80118b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118b8:	07d9      	lsls	r1, r3, #31
 80118ba:	d405      	bmi.n	80118c8 <_vfiprintf_r+0x220>
 80118bc:	89ab      	ldrh	r3, [r5, #12]
 80118be:	059a      	lsls	r2, r3, #22
 80118c0:	d402      	bmi.n	80118c8 <_vfiprintf_r+0x220>
 80118c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118c4:	f000 ff26 	bl	8012714 <__retarget_lock_release_recursive>
 80118c8:	89ab      	ldrh	r3, [r5, #12]
 80118ca:	065b      	lsls	r3, r3, #25
 80118cc:	f53f af12 	bmi.w	80116f4 <_vfiprintf_r+0x4c>
 80118d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118d2:	e711      	b.n	80116f8 <_vfiprintf_r+0x50>
 80118d4:	ab03      	add	r3, sp, #12
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	462a      	mov	r2, r5
 80118da:	4b0a      	ldr	r3, [pc, #40]	; (8011904 <_vfiprintf_r+0x25c>)
 80118dc:	a904      	add	r1, sp, #16
 80118de:	4630      	mov	r0, r6
 80118e0:	f000 f812 	bl	8011908 <_printf_i>
 80118e4:	e7e4      	b.n	80118b0 <_vfiprintf_r+0x208>
 80118e6:	bf00      	nop
 80118e8:	08018a40 	.word	0x08018a40
 80118ec:	08018a60 	.word	0x08018a60
 80118f0:	08018a20 	.word	0x08018a20
 80118f4:	0801ab65 	.word	0x0801ab65
 80118f8:	0801ab6b 	.word	0x0801ab6b
 80118fc:	0801ab6f 	.word	0x0801ab6f
 8011900:	00000000 	.word	0x00000000
 8011904:	08017a35 	.word	0x08017a35

08011908 <_printf_i>:
 8011908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801190c:	7e0f      	ldrb	r7, [r1, #24]
 801190e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011910:	2f78      	cmp	r7, #120	; 0x78
 8011912:	4691      	mov	r9, r2
 8011914:	4680      	mov	r8, r0
 8011916:	460c      	mov	r4, r1
 8011918:	469a      	mov	sl, r3
 801191a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801191e:	d807      	bhi.n	8011930 <_printf_i+0x28>
 8011920:	2f62      	cmp	r7, #98	; 0x62
 8011922:	d80a      	bhi.n	801193a <_printf_i+0x32>
 8011924:	2f00      	cmp	r7, #0
 8011926:	f000 80d8 	beq.w	8011ada <_printf_i+0x1d2>
 801192a:	2f58      	cmp	r7, #88	; 0x58
 801192c:	f000 80a3 	beq.w	8011a76 <_printf_i+0x16e>
 8011930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011938:	e03a      	b.n	80119b0 <_printf_i+0xa8>
 801193a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801193e:	2b15      	cmp	r3, #21
 8011940:	d8f6      	bhi.n	8011930 <_printf_i+0x28>
 8011942:	a101      	add	r1, pc, #4	; (adr r1, 8011948 <_printf_i+0x40>)
 8011944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011948:	080119a1 	.word	0x080119a1
 801194c:	080119b5 	.word	0x080119b5
 8011950:	08011931 	.word	0x08011931
 8011954:	08011931 	.word	0x08011931
 8011958:	08011931 	.word	0x08011931
 801195c:	08011931 	.word	0x08011931
 8011960:	080119b5 	.word	0x080119b5
 8011964:	08011931 	.word	0x08011931
 8011968:	08011931 	.word	0x08011931
 801196c:	08011931 	.word	0x08011931
 8011970:	08011931 	.word	0x08011931
 8011974:	08011ac1 	.word	0x08011ac1
 8011978:	080119e5 	.word	0x080119e5
 801197c:	08011aa3 	.word	0x08011aa3
 8011980:	08011931 	.word	0x08011931
 8011984:	08011931 	.word	0x08011931
 8011988:	08011ae3 	.word	0x08011ae3
 801198c:	08011931 	.word	0x08011931
 8011990:	080119e5 	.word	0x080119e5
 8011994:	08011931 	.word	0x08011931
 8011998:	08011931 	.word	0x08011931
 801199c:	08011aab 	.word	0x08011aab
 80119a0:	682b      	ldr	r3, [r5, #0]
 80119a2:	1d1a      	adds	r2, r3, #4
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	602a      	str	r2, [r5, #0]
 80119a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119b0:	2301      	movs	r3, #1
 80119b2:	e0a3      	b.n	8011afc <_printf_i+0x1f4>
 80119b4:	6820      	ldr	r0, [r4, #0]
 80119b6:	6829      	ldr	r1, [r5, #0]
 80119b8:	0606      	lsls	r6, r0, #24
 80119ba:	f101 0304 	add.w	r3, r1, #4
 80119be:	d50a      	bpl.n	80119d6 <_printf_i+0xce>
 80119c0:	680e      	ldr	r6, [r1, #0]
 80119c2:	602b      	str	r3, [r5, #0]
 80119c4:	2e00      	cmp	r6, #0
 80119c6:	da03      	bge.n	80119d0 <_printf_i+0xc8>
 80119c8:	232d      	movs	r3, #45	; 0x2d
 80119ca:	4276      	negs	r6, r6
 80119cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119d0:	485e      	ldr	r0, [pc, #376]	; (8011b4c <_printf_i+0x244>)
 80119d2:	230a      	movs	r3, #10
 80119d4:	e019      	b.n	8011a0a <_printf_i+0x102>
 80119d6:	680e      	ldr	r6, [r1, #0]
 80119d8:	602b      	str	r3, [r5, #0]
 80119da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80119de:	bf18      	it	ne
 80119e0:	b236      	sxthne	r6, r6
 80119e2:	e7ef      	b.n	80119c4 <_printf_i+0xbc>
 80119e4:	682b      	ldr	r3, [r5, #0]
 80119e6:	6820      	ldr	r0, [r4, #0]
 80119e8:	1d19      	adds	r1, r3, #4
 80119ea:	6029      	str	r1, [r5, #0]
 80119ec:	0601      	lsls	r1, r0, #24
 80119ee:	d501      	bpl.n	80119f4 <_printf_i+0xec>
 80119f0:	681e      	ldr	r6, [r3, #0]
 80119f2:	e002      	b.n	80119fa <_printf_i+0xf2>
 80119f4:	0646      	lsls	r6, r0, #25
 80119f6:	d5fb      	bpl.n	80119f0 <_printf_i+0xe8>
 80119f8:	881e      	ldrh	r6, [r3, #0]
 80119fa:	4854      	ldr	r0, [pc, #336]	; (8011b4c <_printf_i+0x244>)
 80119fc:	2f6f      	cmp	r7, #111	; 0x6f
 80119fe:	bf0c      	ite	eq
 8011a00:	2308      	moveq	r3, #8
 8011a02:	230a      	movne	r3, #10
 8011a04:	2100      	movs	r1, #0
 8011a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a0a:	6865      	ldr	r5, [r4, #4]
 8011a0c:	60a5      	str	r5, [r4, #8]
 8011a0e:	2d00      	cmp	r5, #0
 8011a10:	bfa2      	ittt	ge
 8011a12:	6821      	ldrge	r1, [r4, #0]
 8011a14:	f021 0104 	bicge.w	r1, r1, #4
 8011a18:	6021      	strge	r1, [r4, #0]
 8011a1a:	b90e      	cbnz	r6, 8011a20 <_printf_i+0x118>
 8011a1c:	2d00      	cmp	r5, #0
 8011a1e:	d04d      	beq.n	8011abc <_printf_i+0x1b4>
 8011a20:	4615      	mov	r5, r2
 8011a22:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a26:	fb03 6711 	mls	r7, r3, r1, r6
 8011a2a:	5dc7      	ldrb	r7, [r0, r7]
 8011a2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a30:	4637      	mov	r7, r6
 8011a32:	42bb      	cmp	r3, r7
 8011a34:	460e      	mov	r6, r1
 8011a36:	d9f4      	bls.n	8011a22 <_printf_i+0x11a>
 8011a38:	2b08      	cmp	r3, #8
 8011a3a:	d10b      	bne.n	8011a54 <_printf_i+0x14c>
 8011a3c:	6823      	ldr	r3, [r4, #0]
 8011a3e:	07de      	lsls	r6, r3, #31
 8011a40:	d508      	bpl.n	8011a54 <_printf_i+0x14c>
 8011a42:	6923      	ldr	r3, [r4, #16]
 8011a44:	6861      	ldr	r1, [r4, #4]
 8011a46:	4299      	cmp	r1, r3
 8011a48:	bfde      	ittt	le
 8011a4a:	2330      	movle	r3, #48	; 0x30
 8011a4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011a50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011a54:	1b52      	subs	r2, r2, r5
 8011a56:	6122      	str	r2, [r4, #16]
 8011a58:	f8cd a000 	str.w	sl, [sp]
 8011a5c:	464b      	mov	r3, r9
 8011a5e:	aa03      	add	r2, sp, #12
 8011a60:	4621      	mov	r1, r4
 8011a62:	4640      	mov	r0, r8
 8011a64:	f005 fff8 	bl	8017a58 <_printf_common>
 8011a68:	3001      	adds	r0, #1
 8011a6a:	d14c      	bne.n	8011b06 <_printf_i+0x1fe>
 8011a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a70:	b004      	add	sp, #16
 8011a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a76:	4835      	ldr	r0, [pc, #212]	; (8011b4c <_printf_i+0x244>)
 8011a78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011a7c:	6829      	ldr	r1, [r5, #0]
 8011a7e:	6823      	ldr	r3, [r4, #0]
 8011a80:	f851 6b04 	ldr.w	r6, [r1], #4
 8011a84:	6029      	str	r1, [r5, #0]
 8011a86:	061d      	lsls	r5, r3, #24
 8011a88:	d514      	bpl.n	8011ab4 <_printf_i+0x1ac>
 8011a8a:	07df      	lsls	r7, r3, #31
 8011a8c:	bf44      	itt	mi
 8011a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8011a92:	6023      	strmi	r3, [r4, #0]
 8011a94:	b91e      	cbnz	r6, 8011a9e <_printf_i+0x196>
 8011a96:	6823      	ldr	r3, [r4, #0]
 8011a98:	f023 0320 	bic.w	r3, r3, #32
 8011a9c:	6023      	str	r3, [r4, #0]
 8011a9e:	2310      	movs	r3, #16
 8011aa0:	e7b0      	b.n	8011a04 <_printf_i+0xfc>
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	f043 0320 	orr.w	r3, r3, #32
 8011aa8:	6023      	str	r3, [r4, #0]
 8011aaa:	2378      	movs	r3, #120	; 0x78
 8011aac:	4828      	ldr	r0, [pc, #160]	; (8011b50 <_printf_i+0x248>)
 8011aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ab2:	e7e3      	b.n	8011a7c <_printf_i+0x174>
 8011ab4:	0659      	lsls	r1, r3, #25
 8011ab6:	bf48      	it	mi
 8011ab8:	b2b6      	uxthmi	r6, r6
 8011aba:	e7e6      	b.n	8011a8a <_printf_i+0x182>
 8011abc:	4615      	mov	r5, r2
 8011abe:	e7bb      	b.n	8011a38 <_printf_i+0x130>
 8011ac0:	682b      	ldr	r3, [r5, #0]
 8011ac2:	6826      	ldr	r6, [r4, #0]
 8011ac4:	6961      	ldr	r1, [r4, #20]
 8011ac6:	1d18      	adds	r0, r3, #4
 8011ac8:	6028      	str	r0, [r5, #0]
 8011aca:	0635      	lsls	r5, r6, #24
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	d501      	bpl.n	8011ad4 <_printf_i+0x1cc>
 8011ad0:	6019      	str	r1, [r3, #0]
 8011ad2:	e002      	b.n	8011ada <_printf_i+0x1d2>
 8011ad4:	0670      	lsls	r0, r6, #25
 8011ad6:	d5fb      	bpl.n	8011ad0 <_printf_i+0x1c8>
 8011ad8:	8019      	strh	r1, [r3, #0]
 8011ada:	2300      	movs	r3, #0
 8011adc:	6123      	str	r3, [r4, #16]
 8011ade:	4615      	mov	r5, r2
 8011ae0:	e7ba      	b.n	8011a58 <_printf_i+0x150>
 8011ae2:	682b      	ldr	r3, [r5, #0]
 8011ae4:	1d1a      	adds	r2, r3, #4
 8011ae6:	602a      	str	r2, [r5, #0]
 8011ae8:	681d      	ldr	r5, [r3, #0]
 8011aea:	6862      	ldr	r2, [r4, #4]
 8011aec:	2100      	movs	r1, #0
 8011aee:	4628      	mov	r0, r5
 8011af0:	f7ee fb26 	bl	8000140 <memchr>
 8011af4:	b108      	cbz	r0, 8011afa <_printf_i+0x1f2>
 8011af6:	1b40      	subs	r0, r0, r5
 8011af8:	6060      	str	r0, [r4, #4]
 8011afa:	6863      	ldr	r3, [r4, #4]
 8011afc:	6123      	str	r3, [r4, #16]
 8011afe:	2300      	movs	r3, #0
 8011b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b04:	e7a8      	b.n	8011a58 <_printf_i+0x150>
 8011b06:	6923      	ldr	r3, [r4, #16]
 8011b08:	462a      	mov	r2, r5
 8011b0a:	4649      	mov	r1, r9
 8011b0c:	4640      	mov	r0, r8
 8011b0e:	47d0      	blx	sl
 8011b10:	3001      	adds	r0, #1
 8011b12:	d0ab      	beq.n	8011a6c <_printf_i+0x164>
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	079b      	lsls	r3, r3, #30
 8011b18:	d413      	bmi.n	8011b42 <_printf_i+0x23a>
 8011b1a:	68e0      	ldr	r0, [r4, #12]
 8011b1c:	9b03      	ldr	r3, [sp, #12]
 8011b1e:	4298      	cmp	r0, r3
 8011b20:	bfb8      	it	lt
 8011b22:	4618      	movlt	r0, r3
 8011b24:	e7a4      	b.n	8011a70 <_printf_i+0x168>
 8011b26:	2301      	movs	r3, #1
 8011b28:	4632      	mov	r2, r6
 8011b2a:	4649      	mov	r1, r9
 8011b2c:	4640      	mov	r0, r8
 8011b2e:	47d0      	blx	sl
 8011b30:	3001      	adds	r0, #1
 8011b32:	d09b      	beq.n	8011a6c <_printf_i+0x164>
 8011b34:	3501      	adds	r5, #1
 8011b36:	68e3      	ldr	r3, [r4, #12]
 8011b38:	9903      	ldr	r1, [sp, #12]
 8011b3a:	1a5b      	subs	r3, r3, r1
 8011b3c:	42ab      	cmp	r3, r5
 8011b3e:	dcf2      	bgt.n	8011b26 <_printf_i+0x21e>
 8011b40:	e7eb      	b.n	8011b1a <_printf_i+0x212>
 8011b42:	2500      	movs	r5, #0
 8011b44:	f104 0619 	add.w	r6, r4, #25
 8011b48:	e7f5      	b.n	8011b36 <_printf_i+0x22e>
 8011b4a:	bf00      	nop
 8011b4c:	0801ab76 	.word	0x0801ab76
 8011b50:	0801ab87 	.word	0x0801ab87

08011b54 <_write_r>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	4d07      	ldr	r5, [pc, #28]	; (8011b74 <_write_r+0x20>)
 8011b58:	4604      	mov	r4, r0
 8011b5a:	4608      	mov	r0, r1
 8011b5c:	4611      	mov	r1, r2
 8011b5e:	2200      	movs	r2, #0
 8011b60:	602a      	str	r2, [r5, #0]
 8011b62:	461a      	mov	r2, r3
 8011b64:	f000 fdb3 	bl	80126ce <_write>
 8011b68:	1c43      	adds	r3, r0, #1
 8011b6a:	d102      	bne.n	8011b72 <_write_r+0x1e>
 8011b6c:	682b      	ldr	r3, [r5, #0]
 8011b6e:	b103      	cbz	r3, 8011b72 <_write_r+0x1e>
 8011b70:	6023      	str	r3, [r4, #0]
 8011b72:	bd38      	pop	{r3, r4, r5, pc}
 8011b74:	200022ac 	.word	0x200022ac

08011b78 <_close_r>:
 8011b78:	b538      	push	{r3, r4, r5, lr}
 8011b7a:	4d06      	ldr	r5, [pc, #24]	; (8011b94 <_close_r+0x1c>)
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	4604      	mov	r4, r0
 8011b80:	4608      	mov	r0, r1
 8011b82:	602b      	str	r3, [r5, #0]
 8011b84:	f000 fda7 	bl	80126d6 <_close>
 8011b88:	1c43      	adds	r3, r0, #1
 8011b8a:	d102      	bne.n	8011b92 <_close_r+0x1a>
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	b103      	cbz	r3, 8011b92 <_close_r+0x1a>
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	bd38      	pop	{r3, r4, r5, pc}
 8011b94:	200022ac 	.word	0x200022ac

08011b98 <_fstat_r>:
 8011b98:	b538      	push	{r3, r4, r5, lr}
 8011b9a:	4d07      	ldr	r5, [pc, #28]	; (8011bb8 <_fstat_r+0x20>)
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	4608      	mov	r0, r1
 8011ba2:	4611      	mov	r1, r2
 8011ba4:	602b      	str	r3, [r5, #0]
 8011ba6:	f000 fda0 	bl	80126ea <_fstat>
 8011baa:	1c43      	adds	r3, r0, #1
 8011bac:	d102      	bne.n	8011bb4 <_fstat_r+0x1c>
 8011bae:	682b      	ldr	r3, [r5, #0]
 8011bb0:	b103      	cbz	r3, 8011bb4 <_fstat_r+0x1c>
 8011bb2:	6023      	str	r3, [r4, #0]
 8011bb4:	bd38      	pop	{r3, r4, r5, pc}
 8011bb6:	bf00      	nop
 8011bb8:	200022ac 	.word	0x200022ac

08011bbc <_isatty_r>:
 8011bbc:	b538      	push	{r3, r4, r5, lr}
 8011bbe:	4d06      	ldr	r5, [pc, #24]	; (8011bd8 <_isatty_r+0x1c>)
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	4608      	mov	r0, r1
 8011bc6:	602b      	str	r3, [r5, #0]
 8011bc8:	f000 fd8a 	bl	80126e0 <_isatty>
 8011bcc:	1c43      	adds	r3, r0, #1
 8011bce:	d102      	bne.n	8011bd6 <_isatty_r+0x1a>
 8011bd0:	682b      	ldr	r3, [r5, #0]
 8011bd2:	b103      	cbz	r3, 8011bd6 <_isatty_r+0x1a>
 8011bd4:	6023      	str	r3, [r4, #0]
 8011bd6:	bd38      	pop	{r3, r4, r5, pc}
 8011bd8:	200022ac 	.word	0x200022ac

08011bdc <_lseek_r>:
 8011bdc:	b538      	push	{r3, r4, r5, lr}
 8011bde:	4d07      	ldr	r5, [pc, #28]	; (8011bfc <_lseek_r+0x20>)
 8011be0:	4604      	mov	r4, r0
 8011be2:	4608      	mov	r0, r1
 8011be4:	4611      	mov	r1, r2
 8011be6:	2200      	movs	r2, #0
 8011be8:	602a      	str	r2, [r5, #0]
 8011bea:	461a      	mov	r2, r3
 8011bec:	f000 fd76 	bl	80126dc <_lseek>
 8011bf0:	1c43      	adds	r3, r0, #1
 8011bf2:	d102      	bne.n	8011bfa <_lseek_r+0x1e>
 8011bf4:	682b      	ldr	r3, [r5, #0]
 8011bf6:	b103      	cbz	r3, 8011bfa <_lseek_r+0x1e>
 8011bf8:	6023      	str	r3, [r4, #0]
 8011bfa:	bd38      	pop	{r3, r4, r5, pc}
 8011bfc:	200022ac 	.word	0x200022ac

08011c00 <_read_r>:
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	4d07      	ldr	r5, [pc, #28]	; (8011c20 <_read_r+0x20>)
 8011c04:	4604      	mov	r4, r0
 8011c06:	4608      	mov	r0, r1
 8011c08:	4611      	mov	r1, r2
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	602a      	str	r2, [r5, #0]
 8011c0e:	461a      	mov	r2, r3
 8011c10:	f000 fd59 	bl	80126c6 <_read>
 8011c14:	1c43      	adds	r3, r0, #1
 8011c16:	d102      	bne.n	8011c1e <_read_r+0x1e>
 8011c18:	682b      	ldr	r3, [r5, #0]
 8011c1a:	b103      	cbz	r3, 8011c1e <_read_r+0x1e>
 8011c1c:	6023      	str	r3, [r4, #0]
 8011c1e:	bd38      	pop	{r3, r4, r5, pc}
 8011c20:	200022ac 	.word	0x200022ac

08011c24 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8011c24:	4770      	bx	lr

08011c26 <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
 8011c26:	6883      	ldr	r3, [r0, #8]
 8011c28:	691b      	ldr	r3, [r3, #16]
 8011c2a:	4718      	bx	r3

08011c2c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8011c2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8011c2e:	ab0b      	add	r3, sp, #44	; 0x2c
 8011c30:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8011c32:	9303      	str	r3, [sp, #12]
 8011c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c36:	9302      	str	r3, [sp, #8]
 8011c38:	2300      	movs	r3, #0
 8011c3a:	e9cd 3300 	strd	r3, r3, [sp]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7f2 fd62 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 8011c44:	b007      	add	sp, #28
 8011c46:	f85d fb04 	ldr.w	pc, [sp], #4

08011c4a <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f000 bca6 	b.w	801259c <z_impl_z_log_msg2_static_create>

08011c50 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8011c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8011c52:	ab0b      	add	r3, sp, #44	; 0x2c
 8011c54:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8011c56:	9303      	str	r3, [sp, #12]
 8011c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c5a:	9302      	str	r3, [sp, #8]
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	e9cd 3300 	strd	r3, r3, [sp]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7f2 fd50 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 8011c68:	b007      	add	sp, #28
 8011c6a:	f85d fb04 	ldr.w	pc, [sp], #4

08011c6e <k_msleep.isra.0>:
			return t * ((uint64_t)to_hz / from_hz);
 8011c6e:	210a      	movs	r1, #10
 8011c70:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 8011c74:	f7fe bdb6 	b.w	80107e4 <z_impl_k_sleep>

08011c78 <i2c_write.isra.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
 8011c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
 8011c7a:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8011c7e:	2202      	movs	r2, #2
 8011c80:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8011c84:	6882      	ldr	r2, [r0, #8]
 8011c86:	a901      	add	r1, sp, #4
 8011c88:	6894      	ldr	r4, [r2, #8]
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	47a0      	blx	r4
}
 8011c8e:	b004      	add	sp, #16
 8011c90:	bd10      	pop	{r4, pc}

08011c92 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8011c92:	2300      	movs	r3, #0
 8011c94:	f000 bc82 	b.w	801259c <z_impl_z_log_msg2_static_create>

08011c98 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8011c98:	b510      	push	{r4, lr}
 8011c9a:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8011c9c:	a80b      	add	r0, sp, #44	; 0x2c
 8011c9e:	9005      	str	r0, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8011ca0:	9003      	str	r0, [sp, #12]
 8011ca2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011ca4:	9c08      	ldr	r4, [sp, #32]
 8011ca6:	9002      	str	r0, [sp, #8]
 8011ca8:	2000      	movs	r0, #0
 8011caa:	9001      	str	r0, [sp, #4]
 8011cac:	9400      	str	r4, [sp, #0]
 8011cae:	f7f2 fd2b 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 8011cb2:	b006      	add	sp, #24
 8011cb4:	bd10      	pop	{r4, pc}

08011cb6 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 8011cba:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8011cbc:	7919      	ldrb	r1, [r3, #4]
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	fa03 f101 	lsl.w	r1, r3, r1
 8011cc4:	6903      	ldr	r3, [r0, #16]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8011cca:	bf18      	it	ne
 8011ccc:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8011cd0:	b112      	cbz	r2, 8011cd8 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 8011cd2:	6883      	ldr	r3, [r0, #8]
 8011cd4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8011cd6:	4718      	bx	r3
 8011cd8:	6883      	ldr	r3, [r0, #8]
 8011cda:	691b      	ldr	r3, [r3, #16]
 8011cdc:	e7fb      	b.n	8011cd6 <gpio_pin_set_dt.isra.0+0x20>

08011cde <gpio_pin_configure.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
 8011cde:	b4f0      	push	{r4, r5, r6, r7}
 8011ce0:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8011ce2:	02d4      	lsls	r4, r2, #11
	const struct gpio_driver_api *api =
 8011ce4:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8011ce6:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8011ce8:	d506      	bpl.n	8011cf8 <gpio_pin_configure.isra.0+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8011cea:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 8011cee:	d003      	beq.n	8011cf8 <gpio_pin_configure.isra.0+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8011cf0:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8011cf2:	bf48      	it	mi
 8011cf4:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8011cf8:	6834      	ldr	r4, [r6, #0]
 8011cfa:	2501      	movs	r5, #1
 8011cfc:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8011cfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8011d02:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8011d04:	bf4c      	ite	mi
 8011d06:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8011d08:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
 8011d0e:	bcf0      	pop	{r4, r5, r6, r7}
 8011d10:	4718      	bx	r3

08011d12 <k_msleep.isra.0>:
 8011d12:	210a      	movs	r1, #10
 8011d14:	fb80 0101 	smull	r0, r1, r0, r1
 8011d18:	f7fe bd64 	b.w	80107e4 <z_impl_k_sleep>

08011d1c <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	f000 bc3d 	b.w	801259c <z_impl_z_log_msg2_static_create>

08011d22 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8011d22:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8011d24:	ab0b      	add	r3, sp, #44	; 0x2c
 8011d26:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8011d28:	9303      	str	r3, [sp, #12]
 8011d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d2c:	9302      	str	r3, [sp, #8]
 8011d2e:	2300      	movs	r3, #0
 8011d30:	e9cd 3300 	strd	r3, r3, [sp]
 8011d34:	2203      	movs	r2, #3
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7f2 fce6 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 8011d3c:	b007      	add	sp, #28
 8011d3e:	f85d fb04 	ldr.w	pc, [sp], #4

08011d42 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8011d42:	2301      	movs	r3, #1
 8011d44:	fa03 f101 	lsl.w	r1, r3, r1
 8011d48:	6903      	ldr	r3, [r0, #16]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8011d4e:	bf18      	it	ne
 8011d50:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8011d54:	b112      	cbz	r2, 8011d5c <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8011d56:	6883      	ldr	r3, [r0, #8]
 8011d58:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8011d5a:	4718      	bx	r3
 8011d5c:	6883      	ldr	r3, [r0, #8]
 8011d5e:	691b      	ldr	r3, [r3, #16]
 8011d60:	e7fb      	b.n	8011d5a <gpio_pin_set.isra.0+0x18>

08011d62 <gpio_pin_configure.isra.0>:
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
 8011d62:	b470      	push	{r4, r5, r6}
	struct gpio_driver_data *data =
 8011d64:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
 8011d66:	6886      	ldr	r6, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8011d68:	2301      	movs	r3, #1
 8011d6a:	fa03 f401 	lsl.w	r4, r3, r1
 8011d6e:	682b      	ldr	r3, [r5, #0]
 8011d70:	ea23 0304 	bic.w	r3, r3, r4
 8011d74:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 8011d76:	6833      	ldr	r3, [r6, #0]
}
 8011d78:	bc70      	pop	{r4, r5, r6}
 8011d7a:	4718      	bx	r3

08011d7c <k_usleep.isra.0>:
	return z_impl_k_usleep(us);
 8011d7c:	f005 bb75 	b.w	801746a <z_impl_k_usleep>

08011d80 <k_msleep.isra.0>:
 8011d80:	210a      	movs	r1, #10
 8011d82:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 8011d86:	f7fe bd2d 	b.w	80107e4 <z_impl_k_sleep>

08011d8a <str_out>:
	if (scp->dp < scp->dpe) {
 8011d8a:	e9d1 3200 	ldrd	r3, r2, [r1]
 8011d8e:	4293      	cmp	r3, r2
		*(scp->dp++) = c;
 8011d90:	bf3e      	ittt	cc
 8011d92:	1c5a      	addcc	r2, r3, #1
 8011d94:	600a      	strcc	r2, [r1, #0]
 8011d96:	7018      	strbcc	r0, [r3, #0]
}
 8011d98:	4770      	bx	lr

08011d9a <snprintfcb>:
{
 8011d9a:	b40c      	push	{r2, r3}
 8011d9c:	b507      	push	{r0, r1, r2, lr}
 8011d9e:	ab04      	add	r3, sp, #16
 8011da0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, format);
 8011da4:	9301      	str	r3, [sp, #4]
	rc = vsnprintfcb(str, size, format, ap);
 8011da6:	f7f0 feef 	bl	8002b88 <vsnprintfcb>
}
 8011daa:	b003      	add	sp, #12
 8011dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8011db0:	b002      	add	sp, #8
 8011db2:	4770      	bx	lr

08011db4 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
 8011db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db8:	4607      	mov	r7, r0
 8011dba:	460e      	mov	r6, r1
 8011dbc:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
 8011dbe:	461d      	mov	r5, r3
 8011dc0:	b30b      	cbz	r3, 8011e06 <cbpprintf_external+0x52>
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
	rws_nbr   = buf[3];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 8011dc2:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
 8011dc4:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
 8011dc6:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
 8011dca:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 8011dcc:	441c      	add	r4, r3
 8011dce:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011dd2:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 8011dd4:	f04f 0900 	mov.w	r9, #0
 8011dd8:	45d1      	cmp	r9, sl
 8011dda:	d308      	bcc.n	8011dee <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
 8011ddc:	686a      	ldr	r2, [r5, #4]
 8011dde:	f105 0308 	add.w	r3, r5, #8
 8011de2:	4641      	mov	r1, r8
 8011de4:	4638      	mov	r0, r7
 8011de6:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
 8011de8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 8011dec:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 8011dee:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
 8011df2:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
 8011df6:	4620      	mov	r0, r4
 8011df8:	f7ef fae5 	bl	80013c6 <strlen>
 8011dfc:	3001      	adds	r0, #1
 8011dfe:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 8011e00:	f109 0901 	add.w	r9, r9, #1
 8011e04:	e7e8      	b.n	8011dd8 <cbpprintf_external+0x24>
}
 8011e06:	f06f 0015 	mvn.w	r0, #21
 8011e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011e0e <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
 8011e0e:	440a      	add	r2, r1
 8011e10:	428a      	cmp	r2, r1
 8011e12:	d100      	bne.n	8011e16 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
 8011e14:	4770      	bx	lr
		seed ^= *src++;
 8011e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e1a:	ba40      	rev16	r0, r0
 8011e1c:	b280      	uxth	r0, r0
 8011e1e:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
 8011e20:	f3c0 1303 	ubfx	r3, r0, #4, #4
 8011e24:	4058      	eors	r0, r3
		seed ^= seed << 12U;
 8011e26:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
 8011e2a:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
 8011e2c:	0158      	lsls	r0, r3, #5
 8011e2e:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
 8011e32:	4058      	eors	r0, r3
	for (; len > 0; len--) {
 8011e34:	e7ec      	b.n	8011e10 <crc16_itu_t+0x2>

08011e36 <crc8>:
	return val;
}

uint8_t crc8(const uint8_t *src, size_t len, uint8_t polynomial, uint8_t initial_value,
	  bool reversed)
{
 8011e36:	b570      	push	{r4, r5, r6, lr}
 8011e38:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8011e3c:	4604      	mov	r4, r0
 8011e3e:	4401      	add	r1, r0
	uint8_t crc = initial_value;
 8011e40:	4618      	mov	r0, r3
	size_t i, j;

	for (i = 0; i < len; i++) {
 8011e42:	428c      	cmp	r4, r1
 8011e44:	d100      	bne.n	8011e48 <crc8+0x12>
			}
		}
	}

	return crc;
}
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
		crc ^= src[i];
 8011e48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e4c:	2508      	movs	r5, #8
 8011e4e:	4058      	eors	r0, r3
			if (reversed) {
 8011e50:	b14e      	cbz	r6, 8011e66 <crc8+0x30>
				if (crc & 0x01) {
 8011e52:	f000 0301 	and.w	r3, r0, #1
					crc = (crc >> 1) ^ polynomial;
 8011e56:	0840      	lsrs	r0, r0, #1
				if (crc & 0x01) {
 8011e58:	b113      	cbz	r3, 8011e60 <crc8+0x2a>
					crc = (crc >> 1) ^ polynomial;
 8011e5a:	ea80 0302 	eor.w	r3, r0, r2
 8011e5e:	b2d8      	uxtb	r0, r3
		for (j = 0; j < 8; j++) {
 8011e60:	3d01      	subs	r5, #1
 8011e62:	d1f5      	bne.n	8011e50 <crc8+0x1a>
 8011e64:	e7ed      	b.n	8011e42 <crc8+0xc>
				if (crc & 0x80) {
 8011e66:	f010 0f80 	tst.w	r0, #128	; 0x80
 8011e6a:	ea4f 0040 	mov.w	r0, r0, lsl #1
					crc = (crc << 1) ^ polynomial;
 8011e6e:	bf18      	it	ne
 8011e70:	4050      	eorne	r0, r2
					crc <<= 1;
 8011e72:	b2c0      	uxtb	r0, r0
 8011e74:	e7f4      	b.n	8011e60 <crc8+0x2a>

08011e76 <crc7_be>:

#include <sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
 8011e76:	440a      	add	r2, r1
 8011e78:	4291      	cmp	r1, r2
 8011e7a:	d100      	bne.n	8011e7e <crc7_be+0x8>

		seed = (f << 1) ^ (f << 4);
	}

	return seed;
}
 8011e7c:	4770      	bx	lr
		uint8_t e = seed ^ *src++;
 8011e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e82:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
 8011e84:	09c3      	lsrs	r3, r0, #7
 8011e86:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
		seed = (f << 1) ^ (f << 4);
 8011e8a:	4058      	eors	r0, r3
 8011e8c:	0103      	lsls	r3, r0, #4
 8011e8e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
 8011e92:	b2c0      	uxtb	r0, r0
 8011e94:	e7f0      	b.n	8011e78 <crc7_be+0x2>

08011e96 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 8011e96:	6842      	ldr	r2, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
 8011e98:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 8011e9c:	2a02      	cmp	r2, #2
{
 8011e9e:	b510      	push	{r4, lr}
 8011ea0:	4603      	mov	r3, r0
	notify->result = res;
 8011ea2:	6081      	str	r1, [r0, #8]
	switch (method) {
 8011ea4:	d00a      	beq.n	8011ebc <sys_notify_finalize+0x26>
 8011ea6:	2a03      	cmp	r2, #3
 8011ea8:	d10b      	bne.n	8011ec2 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 8011eaa:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
 8011eac:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 8011eae:	2200      	movs	r2, #0
 8011eb0:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
 8011eb2:	b108      	cbz	r0, 8011eb8 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
 8011eb4:	f7fe ff86 	bl	8010dc4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 8011eb8:	4620      	mov	r0, r4
 8011eba:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
 8011ebc:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
 8011ebe:	2400      	movs	r4, #0
		break;
 8011ec0:	e7f5      	b.n	8011eae <sys_notify_finalize+0x18>
	switch (method) {
 8011ec2:	2400      	movs	r4, #0
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	e7f2      	b.n	8011eae <sys_notify_finalize+0x18>

08011ec8 <arch_printk_char_out>:
}
 8011ec8:	2000      	movs	r0, #0
 8011eca:	4770      	bx	lr

08011ecc <str_out>:
{
 8011ecc:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8011ece:	688a      	ldr	r2, [r1, #8]
 8011ed0:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8011ed2:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8011ed4:	b114      	cbz	r4, 8011edc <str_out+0x10>
 8011ed6:	684b      	ldr	r3, [r1, #4]
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	dc01      	bgt.n	8011ee0 <str_out+0x14>
		ctx->count++;
 8011edc:	608d      	str	r5, [r1, #8]
}
 8011ede:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8011ee4:	bf08      	it	eq
 8011ee6:	2200      	moveq	r2, #0
 8011ee8:	608d      	str	r5, [r1, #8]
 8011eea:	bf0c      	ite	eq
 8011eec:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8011eee:	54a0      	strbne	r0, [r4, r2]
 8011ef0:	e7f5      	b.n	8011ede <str_out+0x12>

08011ef2 <printk>:
{
 8011ef2:	b40f      	push	{r0, r1, r2, r3}
 8011ef4:	b507      	push	{r0, r1, r2, lr}
 8011ef6:	a904      	add	r1, sp, #16
 8011ef8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8011efc:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 8011efe:	f7f1 f89d 	bl	800303c <vprintk>
}
 8011f02:	b003      	add	sp, #12
 8011f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f08:	b004      	add	sp, #16
 8011f0a:	4770      	bx	lr

08011f0c <snprintk>:
{
 8011f0c:	b40c      	push	{r2, r3}
 8011f0e:	b507      	push	{r0, r1, r2, lr}
 8011f10:	ab04      	add	r3, sp, #16
 8011f12:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8011f16:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8011f18:	f7f1 f89e 	bl	8003058 <vsnprintk>
}
 8011f1c:	b003      	add	sp, #12
 8011f1e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f22:	b002      	add	sp, #8
 8011f24:	4770      	bx	lr

08011f26 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8011f26:	4604      	mov	r4, r0
 8011f28:	b508      	push	{r3, lr}
 8011f2a:	4608      	mov	r0, r1
 8011f2c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8011f2e:	461a      	mov	r2, r3
 8011f30:	47a0      	blx	r4
	return z_impl_z_current_get();
 8011f32:	f7fe fc6f 	bl	8010814 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8011f36:	f7f3 f943 	bl	80051c0 <z_impl_k_thread_abort>

08011f3a <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
 8011f3a:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
 8011f3c:	f7f1 f8a0 	bl	8003080 <timeutil_timegm64>
 8011f40:	4605      	mov	r5, r0
 8011f42:	460c      	mov	r4, r1
	time_t rv = (time_t)time;

	errno = 0;
 8011f44:	f000 fbe8 	bl	8012718 <__errno>
 8011f48:	2300      	movs	r3, #0
 8011f4a:	6003      	str	r3, [r0, #0]
		errno = ERANGE;
		rv = -1;
	}

	return rv;
}
 8011f4c:	4621      	mov	r1, r4
 8011f4e:	4628      	mov	r0, r5
 8011f50:	bd38      	pop	{r3, r4, r5, pc}

08011f52 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 8011f52:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011f56:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
 8011f58:	0840      	lsrs	r0, r0, #1
 8011f5a:	4770      	bx	lr

08011f5c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8011f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8011f60:	f7ff fff7 	bl	8011f52 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 8011f64:	fab0 f080 	clz	r0, r0
 8011f68:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 8011f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
 8011f70:	00ca      	lsls	r2, r1, #3
 8011f72:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
 8011f76:	1d17      	adds	r7, r2, #4
{
 8011f78:	460c      	mov	r4, r1
 8011f7a:	3206      	adds	r2, #6
 8011f7c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 8011f7e:	b956      	cbnz	r6, 8011f96 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 8011f80:	2101      	movs	r1, #1
 8011f82:	fa01 f000 	lsl.w	r0, r1, r0
 8011f86:	68d9      	ldr	r1, [r3, #12]
 8011f88:	4301      	orrs	r1, r0
 8011f8a:	60d9      	str	r1, [r3, #12]
		b->next = c;
 8011f8c:	f8cc 4010 	str.w	r4, [ip, #16]
 8011f90:	53dd      	strh	r5, [r3, r7]
 8011f92:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
 8011f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 8011f96:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 8011f98:	3104      	adds	r1, #4
 8011f9a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 8011f9c:	53d8      	strh	r0, [r3, r7]
 8011f9e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011fa2:	529e      	strh	r6, [r3, r2]
 8011fa4:	80c5      	strh	r5, [r0, #6]
 8011fa6:	525d      	strh	r5, [r3, r1]
 8011fa8:	e7f4      	b.n	8011f94 <free_list_add+0x38>

08011faa <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8011faa:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8011fac:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8011fae:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8011fb0:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8011fb4:	f021 0107 	bic.w	r1, r1, #7
{
 8011fb8:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8011fba:	1acd      	subs	r5, r1, r3
 8011fbc:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8011fbe:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
 8011fc0:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8011fc4:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
 8011fc8:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8011fca:	3407      	adds	r4, #7
	h->avail_buckets = 0;
 8011fcc:	2600      	movs	r6, #0
 8011fce:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8011fd0:	f1c0 0020 	rsb	r0, r0, #32
 8011fd4:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
 8011fd8:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
 8011fda:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8011fdc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8011fe0:	4284      	cmp	r4, r0
 8011fe2:	d118      	bne.n	8012016 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8011fe4:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8011fe6:	f040 0001 	orr.w	r0, r0, #1
 8011fea:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
 8011fec:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8011ff0:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8011ff2:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
 8011ff4:	801e      	strh	r6, [r3, #0]
 8011ff6:	8067      	strh	r7, [r4, #2]
 8011ff8:	195c      	adds	r4, r3, r5
 8011ffa:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
 8011ffe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
 8012002:	8066      	strh	r6, [r4, #2]
 8012004:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8012006:	8850      	ldrh	r0, [r2, #2]
 8012008:	f040 0001 	orr.w	r0, r0, #1
 801200c:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 801200e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
 8012010:	4618      	mov	r0, r3
 8012012:	f7ff bfa3 	b.w	8011f5c <free_list_add>
		h->buckets[i].next = 0;
 8012016:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
 801201a:	e7e1      	b.n	8011fe0 <sys_heap_init+0x36>

0801201c <_ldiv5>:
	uint32_t v_lo = *v;
 801201c:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 8012020:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8012022:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8012026:	fba2 2403 	umull	r2, r4, r2, r3
 801202a:	18d5      	adds	r5, r2, r3
 801202c:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 8012030:	fba1 1303 	umull	r1, r3, r1, r3
 8012034:	1852      	adds	r2, r2, r1
 8012036:	eb44 0403 	adc.w	r4, r4, r3
 801203a:	1952      	adds	r2, r2, r5
 801203c:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8012040:	1889      	adds	r1, r1, r2
 8012042:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 8012046:	e9c0 1300 	strd	r1, r3, [r0]
}
 801204a:	bd30      	pop	{r4, r5, pc}

0801204c <_get_digit>:
	if (*digit_count > 0) {
 801204c:	680a      	ldr	r2, [r1, #0]
 801204e:	2a00      	cmp	r2, #0
{
 8012050:	b510      	push	{r4, lr}
 8012052:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 8012054:	dd0f      	ble.n	8012076 <_get_digit+0x2a>
		--*digit_count;
 8012056:	3a01      	subs	r2, #1
 8012058:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	6844      	ldr	r4, [r0, #4]
 801205e:	200a      	movs	r0, #10
 8012060:	fba2 1200 	umull	r1, r2, r2, r0
 8012064:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 8012068:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 801206a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 801206e:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 8012072:	3030      	adds	r0, #48	; 0x30
}
 8012074:	bd10      	pop	{r4, pc}
		rval = '0';
 8012076:	2030      	movs	r0, #48	; 0x30
 8012078:	e7fc      	b.n	8012074 <_get_digit+0x28>

0801207a <outs>:
{
 801207a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801207e:	4607      	mov	r7, r0
 8012080:	4688      	mov	r8, r1
 8012082:	4615      	mov	r5, r2
 8012084:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8012086:	4614      	mov	r4, r2
 8012088:	42b4      	cmp	r4, r6
 801208a:	eba4 0005 	sub.w	r0, r4, r5
 801208e:	d302      	bcc.n	8012096 <outs+0x1c>
 8012090:	b93e      	cbnz	r6, 80120a2 <outs+0x28>
 8012092:	7823      	ldrb	r3, [r4, #0]
 8012094:	b12b      	cbz	r3, 80120a2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8012096:	f814 0b01 	ldrb.w	r0, [r4], #1
 801209a:	4641      	mov	r1, r8
 801209c:	47b8      	blx	r7
		if (rc < 0) {
 801209e:	2800      	cmp	r0, #0
 80120a0:	daf2      	bge.n	8012088 <outs+0xe>
}
 80120a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080120a6 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
 80120a6:	4602      	mov	r2, r0
 80120a8:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 80120aa:	68c0      	ldr	r0, [r0, #12]
 80120ac:	6814      	ldr	r4, [r2, #0]
 80120ae:	42a0      	cmp	r0, r4
 80120b0:	d904      	bls.n	80120bc <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 80120b2:	3801      	subs	r0, #1
 80120b4:	1b00      	subs	r0, r0, r4
 80120b6:	6008      	str	r0, [r1, #0]

		return false;
 80120b8:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
 80120ba:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 80120bc:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
 80120be:	b918      	cbnz	r0, 80120c8 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 80120c0:	3b01      	subs	r3, #1
 80120c2:	1b1b      	subs	r3, r3, r4
 80120c4:	600b      	str	r3, [r1, #0]
		return false;
 80120c6:	e7f8      	b.n	80120ba <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
 80120c8:	1b1b      	subs	r3, r3, r4
 80120ca:	600b      	str	r3, [r1, #0]
	return true;
 80120cc:	2001      	movs	r0, #1
 80120ce:	e7f4      	b.n	80120ba <free_space+0x14>

080120d0 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
 80120d0:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
 80120d2:	a901      	add	r1, sp, #4
{
 80120d4:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 80120d6:	f7ff ffe6 	bl	80120a6 <free_space>
 80120da:	b120      	cbz	r0, 80120e6 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 80120dc:	9b01      	ldr	r3, [sp, #4]
 80120de:	68e2      	ldr	r2, [r4, #12]
 80120e0:	3b01      	subs	r3, #1
 80120e2:	4413      	add	r3, r2
 80120e4:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
 80120e6:	9801      	ldr	r0, [sp, #4]
 80120e8:	6a23      	ldr	r3, [r4, #32]
 80120ea:	43c0      	mvns	r0, r0
}
 80120ec:	4418      	add	r0, r3
 80120ee:	b002      	add	sp, #8
 80120f0:	bd10      	pop	{r4, pc}

080120f2 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
 80120f2:	b510      	push	{r4, lr}
 80120f4:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 80120f6:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 80120f8:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 80120fa:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 80120fc:	07d2      	lsls	r2, r2, #31
 80120fe:	d502      	bpl.n	8012106 <idx_inc+0x14>
		return i & (buffer->size - 1);
 8012100:	3b01      	subs	r3, #1
 8012102:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
 8012104:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 8012106:	4298      	cmp	r0, r3
 8012108:	bf28      	it	cs
 801210a:	1ac0      	subcs	r0, r0, r3
 801210c:	e7fa      	b.n	8012104 <idx_inc+0x12>

0801210e <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 801210e:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8012110:	69c2      	ldr	r2, [r0, #28]
{
 8012112:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
 8012114:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8012116:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 8012118:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801211c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8012120:	462a      	mov	r2, r5
 8012122:	6801      	ldr	r1, [r0, #0]
{
 8012124:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8012126:	f7ff ffe4 	bl	80120f2 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801212a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801212c:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801212e:	462a      	mov	r2, r5
 8012130:	4620      	mov	r0, r4
 8012132:	f7ff ffde 	bl	80120f2 <idx_inc>
 8012136:	6060      	str	r0, [r4, #4]
}
 8012138:	bd38      	pop	{r3, r4, r5, pc}

0801213a <max_utilization_update>:
{
 801213a:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 801213c:	6903      	ldr	r3, [r0, #16]
 801213e:	075b      	lsls	r3, r3, #29
{
 8012140:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 8012142:	d506      	bpl.n	8012152 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8012144:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012146:	f7ff ffc3 	bl	80120d0 <get_usage>
 801214a:	4285      	cmp	r5, r0
 801214c:	d902      	bls.n	8012154 <max_utilization_update+0x1a>
 801214e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012150:	6260      	str	r0, [r4, #36]	; 0x24
}
 8012152:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8012154:	4620      	mov	r0, r4
 8012156:	f7ff ffbb 	bl	80120d0 <get_usage>
 801215a:	e7f9      	b.n	8012150 <max_utilization_update+0x16>

0801215c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 801215c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 8012160:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8012164:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
 8012168:	461f      	mov	r7, r3
	*user_packet = false;
 801216a:	2300      	movs	r3, #0
 801216c:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
 801216e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 8012172:	f003 0303 	and.w	r3, r3, #3
 8012176:	2b02      	cmp	r3, #2
{
 8012178:	4604      	mov	r4, r0
 801217a:	468b      	mov	fp, r1
 801217c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801217e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 8012182:	d103      	bne.n	801218c <drop_item_locked+0x30>
		return item->skip.len;
 8012184:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 8012188:	08ad      	lsrs	r5, r5, #2
 801218a:	d12e      	bne.n	80121ea <drop_item_locked+0x8e>
 801218c:	69a3      	ldr	r3, [r4, #24]
 801218e:	4630      	mov	r0, r6
 8012190:	4798      	blx	r3
 8012192:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
 8012194:	f1b8 0f00 	cmp.w	r8, #0
 8012198:	d036      	beq.n	8012208 <drop_item_locked+0xac>
		if (item->hdr.busy) {
 801219a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 801219e:	079b      	lsls	r3, r3, #30
 80121a0:	d52f      	bpl.n	8012202 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
 80121a2:	f10b 0101 	add.w	r1, fp, #1
 80121a6:	4620      	mov	r0, r4
 80121a8:	f7ff ffb1 	bl	801210e <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 80121ac:	6861      	ldr	r1, [r4, #4]
 80121ae:	462a      	mov	r2, r5
 80121b0:	4620      	mov	r0, r4
 80121b2:	f7ff ff9e 	bl	80120f2 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80121b6:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 80121b8:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80121ba:	462a      	mov	r2, r5
 80121bc:	4620      	mov	r0, r4
 80121be:	f7ff ff98 	bl	80120f2 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80121c2:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80121c4:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80121c6:	68e1      	ldr	r1, [r4, #12]
 80121c8:	4620      	mov	r0, r4
 80121ca:	f7ff ff92 	bl	80120f2 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 80121ce:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
 80121d0:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 80121d4:	f002 0203 	and.w	r2, r2, #3
 80121d8:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 80121da:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 80121de:	d10c      	bne.n	80121fa <drop_item_locked+0x9e>
		return item->skip.len;
 80121e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
 80121e4:	089b      	lsrs	r3, r3, #2
 80121e6:	d008      	beq.n	80121fa <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
 80121e8:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80121ea:	68e1      	ldr	r1, [r4, #12]
 80121ec:	462a      	mov	r2, r5
 80121ee:	4620      	mov	r0, r4
 80121f0:	f7ff ff7f 	bl	80120f2 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 80121f4:	e9c4 0002 	strd	r0, r0, [r4, #8]
 80121f8:	e007      	b.n	801220a <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
 80121fa:	69a3      	ldr	r3, [r4, #24]
 80121fc:	4630      	mov	r0, r6
 80121fe:	4798      	blx	r3
 8012200:	4405      	add	r5, r0
			*user_packet = true;
 8012202:	2301      	movs	r3, #1
 8012204:	703b      	strb	r3, [r7, #0]
 8012206:	e7f0      	b.n	80121ea <drop_item_locked+0x8e>
		item = NULL;
 8012208:	4646      	mov	r6, r8
	}

	return item;
}
 801220a:	4630      	mov	r0, r6
 801220c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012210 <mpsc_pbuf_init>:
{
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	460d      	mov	r5, r1
 8012214:	4604      	mov	r4, r0
 8012216:	221c      	movs	r2, #28
 8012218:	2100      	movs	r1, #0
 801221a:	f005 fb30 	bl	801787e <memset>
	buffer->get_wlen = cfg->get_wlen;
 801221e:	68eb      	ldr	r3, [r5, #12]
 8012220:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
 8012222:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
 8012224:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
 8012226:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
 8012228:	682b      	ldr	r3, [r5, #0]
 801222a:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
 801222c:	2300      	movs	r3, #0
 801222e:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
 8012230:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
 8012232:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 8012234:	b122      	cbz	r2, 8012240 <mpsc_pbuf_init+0x30>
 8012236:	1e51      	subs	r1, r2, #1
 8012238:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 801223a:	bf08      	it	eq
 801223c:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
 8012240:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8012242:	2201      	movs	r2, #1
 8012244:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012248:	2100      	movs	r1, #0
}
 801224a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801224e:	f004 bfe0 	b.w	8017212 <z_impl_k_sem_init>

08012252 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 8012252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012256:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 8012258:	6a03      	ldr	r3, [r0, #32]
 801225a:	3b01      	subs	r3, #1
 801225c:	428b      	cmp	r3, r1
{
 801225e:	b085      	sub	sp, #20
 8012260:	4604      	mov	r4, r0
 8012262:	460f      	mov	r7, r1
 8012264:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
 8012266:	d364      	bcc.n	8012332 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
 8012268:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
 801226a:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
 801226c:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
 8012270:	f04f 0310 	mov.w	r3, #16
 8012274:	f3ef 8611 	mrs	r6, BASEPRI
 8012278:	f383 8812 	msr	BASEPRI_MAX, r3
 801227c:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
 8012280:	a903      	add	r1, sp, #12
 8012282:	4620      	mov	r0, r4
 8012284:	f7ff ff0f 	bl	80120a6 <free_space>
		if (free_wlen >= wlen) {
 8012288:	9903      	ldr	r1, [sp, #12]
 801228a:	42b9      	cmp	r1, r7
 801228c:	d321      	bcc.n	80122d2 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 801228e:	6821      	ldr	r1, [r4, #0]
			item =
 8012290:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
 8012292:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
 8012296:	f022 0203 	bic.w	r2, r2, #3
 801229a:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 801229e:	4620      	mov	r0, r4
 80122a0:	463a      	mov	r2, r7
			item =
 80122a2:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
 80122a6:	f7ff ff24 	bl	80120f2 <idx_inc>
		cont = false;
 80122aa:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
 80122ac:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
 80122ae:	f386 8811 	msr	BASEPRI, r6
 80122b2:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d03d      	beq.n	8012336 <mpsc_pbuf_alloc+0xe4>
 80122ba:	2d00      	cmp	r5, #0
 80122bc:	d0d8      	beq.n	8012270 <mpsc_pbuf_alloc+0x1e>
 80122be:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d0d4      	beq.n	8012270 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 80122c6:	4629      	mov	r1, r5
 80122c8:	6963      	ldr	r3, [r4, #20]
 80122ca:	4620      	mov	r0, r4
 80122cc:	4798      	blx	r3
			dropped_item = NULL;
 80122ce:	2500      	movs	r5, #0
 80122d0:	e7ce      	b.n	8012270 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
 80122d2:	b128      	cbz	r0, 80122e0 <mpsc_pbuf_alloc+0x8e>
 80122d4:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
 80122d6:	4620      	mov	r0, r4
 80122d8:	f7ff ff19 	bl	801210e <add_skip_item>
			cont = true;
 80122dc:	9b01      	ldr	r3, [sp, #4]
 80122de:	e7e6      	b.n	80122ae <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80122e0:	ea58 0309 	orrs.w	r3, r8, r9
 80122e4:	d017      	beq.n	8012316 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
 80122e6:	f004 ff6c 	bl	80171c2 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80122ea:	b9a0      	cbnz	r0, 8012316 <mpsc_pbuf_alloc+0xc4>
 80122ec:	f386 8811 	msr	BASEPRI, r6
 80122f0:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
 80122f4:	4642      	mov	r2, r8
 80122f6:	464b      	mov	r3, r9
 80122f8:	4658      	mov	r0, fp
 80122fa:	f7fd fe59 	bl	800ffb0 <z_impl_k_sem_take>
	__asm__ volatile(
 80122fe:	f04f 0310 	mov.w	r3, #16
 8012302:	f3ef 8611 	mrs	r6, BASEPRI
 8012306:	f383 8812 	msr	BASEPRI_MAX, r3
 801230a:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 801230e:	fab0 f380 	clz	r3, r0
 8012312:	095b      	lsrs	r3, r3, #5
 8012314:	e7cb      	b.n	80122ae <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 8012316:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 8012318:	9903      	ldr	r1, [sp, #12]
 801231a:	f10d 030b 	add.w	r3, sp, #11
 801231e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8012322:	4620      	mov	r0, r4
 8012324:	f7ff ff1a 	bl	801215c <drop_item_locked>
			cont = dropped_item != NULL;
 8012328:	1e03      	subs	r3, r0, #0
 801232a:	4605      	mov	r5, r0
 801232c:	bf18      	it	ne
 801232e:	2301      	movne	r3, #1
 8012330:	e7bd      	b.n	80122ae <mpsc_pbuf_alloc+0x5c>
		return NULL;
 8012332:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 8012336:	4650      	mov	r0, sl
 8012338:	b005      	add	sp, #20
 801233a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801233e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 801233e:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
 8012340:	6983      	ldr	r3, [r0, #24]
{
 8012342:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 8012344:	4608      	mov	r0, r1
{
 8012346:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8012348:	4798      	blx	r3
 801234a:	4602      	mov	r2, r0
 801234c:	f04f 0310 	mov.w	r3, #16
 8012350:	f3ef 8611 	mrs	r6, BASEPRI
 8012354:	f383 8812 	msr	BASEPRI_MAX, r3
 8012358:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 801235c:	782b      	ldrb	r3, [r5, #0]
 801235e:	f043 0301 	orr.w	r3, r3, #1
 8012362:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8012364:	6861      	ldr	r1, [r4, #4]
 8012366:	4620      	mov	r0, r4
 8012368:	f7ff fec3 	bl	80120f2 <idx_inc>
 801236c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 801236e:	4620      	mov	r0, r4
 8012370:	f7ff fee3 	bl	801213a <max_utilization_update>
	__asm__ volatile(
 8012374:	f386 8811 	msr	BASEPRI, r6
 8012378:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 801237c:	bd70      	pop	{r4, r5, r6, pc}

0801237e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 801237e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012382:	4604      	mov	r4, r0
	__asm__ volatile(
 8012384:	f04f 0310 	mov.w	r3, #16
 8012388:	f3ef 8611 	mrs	r6, BASEPRI
 801238c:	f383 8812 	msr	BASEPRI_MAX, r3
 8012390:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 8012394:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012398:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 801239a:	bf88      	it	hi
 801239c:	6a23      	ldrhi	r3, [r4, #32]
 801239e:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
 80123a0:	b1f3      	cbz	r3, 80123e0 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
 80123a2:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
 80123a4:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
 80123a8:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
 80123ac:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
 80123b0:	d016      	beq.n	80123e0 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
 80123b2:	2b02      	cmp	r3, #2
 80123b4:	d103      	bne.n	80123be <mpsc_pbuf_claim+0x40>
		return item->skip.len;
 80123b6:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 80123ba:	08ad      	lsrs	r5, r5, #2
 80123bc:	d115      	bne.n	80123ea <mpsc_pbuf_claim+0x6c>
 80123be:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
 80123c0:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
 80123c2:	d50f      	bpl.n	80123e4 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
 80123c4:	f042 0202 	orr.w	r2, r2, #2
 80123c8:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 80123cc:	4640      	mov	r0, r8
 80123ce:	4798      	blx	r3
 80123d0:	4639      	mov	r1, r7
 80123d2:	4602      	mov	r2, r0
 80123d4:	4620      	mov	r0, r4
 80123d6:	f7ff fe8c 	bl	80120f2 <idx_inc>
		cont = false;
 80123da:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
 80123dc:	60a0      	str	r0, [r4, #8]
 80123de:	e011      	b.n	8012404 <mpsc_pbuf_claim+0x86>
			item = NULL;
 80123e0:	4698      	mov	r8, r3
 80123e2:	e00f      	b.n	8012404 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
 80123e4:	4640      	mov	r0, r8
 80123e6:	4798      	blx	r3
 80123e8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 80123ea:	68a1      	ldr	r1, [r4, #8]
 80123ec:	462a      	mov	r2, r5
 80123ee:	4620      	mov	r0, r4
 80123f0:	f7ff fe7f 	bl	80120f2 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
 80123f4:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
 80123f6:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
 80123f8:	462a      	mov	r2, r5
 80123fa:	4620      	mov	r0, r4
 80123fc:	f7ff fe79 	bl	80120f2 <idx_inc>
				cont = true;
 8012400:	2301      	movs	r3, #1
				buffer->rd_idx =
 8012402:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8012404:	f386 8811 	msr	BASEPRI, r6
 8012408:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1b9      	bne.n	8012384 <mpsc_pbuf_claim+0x6>

	return item;
}
 8012410:	4640      	mov	r0, r8
 8012412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012416 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 8012416:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
 8012418:	6983      	ldr	r3, [r0, #24]
{
 801241a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 801241c:	4608      	mov	r0, r1
{
 801241e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8012420:	4798      	blx	r3
 8012422:	4602      	mov	r2, r0
	__asm__ volatile(
 8012424:	f04f 0310 	mov.w	r3, #16
 8012428:	f3ef 8611 	mrs	r6, BASEPRI
 801242c:	f383 8812 	msr	BASEPRI_MAX, r3
 8012430:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 8012434:	782b      	ldrb	r3, [r5, #0]
 8012436:	f36f 0300 	bfc	r3, #0, #1
 801243a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 801243c:	6923      	ldr	r3, [r4, #16]
 801243e:	079b      	lsls	r3, r3, #30
 8012440:	d505      	bpl.n	801244e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 8012442:	68e1      	ldr	r1, [r4, #12]
 8012444:	69e3      	ldr	r3, [r4, #28]
 8012446:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 801244a:	429d      	cmp	r5, r3
 801244c:	d112      	bne.n	8012474 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
 801244e:	782b      	ldrb	r3, [r5, #0]
 8012450:	f36f 0341 	bfc	r3, #1, #1
 8012454:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 8012456:	68e1      	ldr	r1, [r4, #12]
 8012458:	4620      	mov	r0, r4
 801245a:	f7ff fe4a 	bl	80120f2 <idx_inc>
 801245e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8012460:	f386 8811 	msr	BASEPRI, r6
 8012464:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 8012468:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 801246c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012470:	f7fd bd78 	b.w	800ff64 <z_impl_k_sem_give>
		witem->skip.len = wlen;
 8012474:	682b      	ldr	r3, [r5, #0]
 8012476:	f360 039f 	bfi	r3, r0, #2, #30
 801247a:	602b      	str	r3, [r5, #0]
 801247c:	e7f0      	b.n	8012460 <mpsc_pbuf_free+0x4a>

0801247e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 801247e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8012482:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 8012484:	bf8a      	itet	hi
 8012486:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 8012488:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 801248a:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 801248c:	1e18      	subs	r0, r3, #0
 801248e:	bf18      	it	ne
 8012490:	2001      	movne	r0, #1
 8012492:	4770      	bx	lr

08012494 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8012494:	4770      	bx	lr

08012496 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8012496:	2000      	movs	r0, #0
 8012498:	4770      	bx	lr

0801249a <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 801249a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 801249c:	075b      	lsls	r3, r3, #29
 801249e:	d40b      	bmi.n	80124b8 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 80124a0:	6803      	ldr	r3, [r0, #0]
 80124a2:	8840      	ldrh	r0, [r0, #2]
 80124a4:	f3c3 2349 	ubfx	r3, r3, #9, #10
 80124a8:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 80124ac:	4418      	add	r0, r3
 80124ae:	3013      	adds	r0, #19
 80124b0:	f020 0007 	bic.w	r0, r0, #7
 80124b4:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 80124b6:	4770      	bx	lr
	return 0;
 80124b8:	2000      	movs	r0, #0
}
 80124ba:	4770      	bx	lr

080124bc <default_lf_get_timestamp>:
{
 80124bc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80124be:	f005 f836 	bl	801752e <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80124c2:	220a      	movs	r2, #10
 80124c4:	2300      	movs	r3, #0
 80124c6:	f7ee fd7f 	bl	8000fc8 <__aeabi_uldivmod>
}
 80124ca:	bd08      	pop	{r3, pc}

080124cc <dummy_timestamp>:
 80124cc:	2000      	movs	r0, #0
 80124ce:	4770      	bx	lr

080124d0 <notify_drop>:
	z_log_dropped(true);
 80124d0:	2001      	movs	r0, #1
 80124d2:	f7f1 bda3 	b.w	800401c <z_log_dropped>

080124d6 <get_msg>:
{
 80124d6:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 80124d8:	f7f1 fe14 	bl	8004104 <z_log_msg2_claim>
}
 80124dc:	bd08      	pop	{r3, pc}

080124de <z_log_get_tag>:
}
 80124de:	2000      	movs	r0, #0
 80124e0:	4770      	bx	lr

080124e2 <buffer_write>:
{
 80124e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e4:	4606      	mov	r6, r0
 80124e6:	460d      	mov	r5, r1
 80124e8:	4614      	mov	r4, r2
 80124ea:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 80124ec:	4621      	mov	r1, r4
 80124ee:	4628      	mov	r0, r5
 80124f0:	463a      	mov	r2, r7
 80124f2:	47b0      	blx	r6
	} while (len != 0);
 80124f4:	1a24      	subs	r4, r4, r0
		buf += processed;
 80124f6:	4405      	add	r5, r0
	} while (len != 0);
 80124f8:	d1f8      	bne.n	80124ec <buffer_write+0xa>
}
 80124fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124fc <log_output_flush>:
		     output->control_block->offset,
 80124fc:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 80124fe:	6881      	ldr	r1, [r0, #8]
{
 8012500:	b510      	push	{r4, lr}
 8012502:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 8012504:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012508:	6800      	ldr	r0, [r0, #0]
 801250a:	f7ff ffea 	bl	80124e2 <buffer_write>
	output->control_block->offset = 0;
 801250e:	6863      	ldr	r3, [r4, #4]
 8012510:	2200      	movs	r2, #0
 8012512:	601a      	str	r2, [r3, #0]
}
 8012514:	bd10      	pop	{r4, pc}

08012516 <out_func>:
{
 8012516:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 8012518:	684b      	ldr	r3, [r1, #4]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	68cb      	ldr	r3, [r1, #12]
 801251e:	429a      	cmp	r2, r3
{
 8012520:	4605      	mov	r5, r0
 8012522:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 8012524:	d102      	bne.n	801252c <out_func+0x16>
		log_output_flush(out_ctx);
 8012526:	4608      	mov	r0, r1
 8012528:	f7ff ffe8 	bl	80124fc <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801252c:	6863      	ldr	r3, [r4, #4]
 801252e:	f3bf 8f5b 	dmb	ish
 8012532:	e853 2f00 	ldrex	r2, [r3]
 8012536:	1c51      	adds	r1, r2, #1
 8012538:	e843 1000 	strex	r0, r1, [r3]
 801253c:	2800      	cmp	r0, #0
 801253e:	d1f8      	bne.n	8012532 <out_func+0x1c>
 8012540:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 8012544:	68a3      	ldr	r3, [r4, #8]
 8012546:	549d      	strb	r5, [r3, r2]
}
 8012548:	2000      	movs	r0, #0
 801254a:	bd38      	pop	{r3, r4, r5, pc}

0801254c <cr_out_func>:
{
 801254c:	b538      	push	{r3, r4, r5, lr}
 801254e:	4605      	mov	r5, r0
 8012550:	460c      	mov	r4, r1
	out_func(c, ctx);
 8012552:	f7ff ffe0 	bl	8012516 <out_func>
	if (c == '\n') {
 8012556:	2d0a      	cmp	r5, #10
 8012558:	d103      	bne.n	8012562 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
 801255a:	4621      	mov	r1, r4
 801255c:	200d      	movs	r0, #13
 801255e:	f7ff ffda 	bl	8012516 <out_func>
}
 8012562:	2000      	movs	r0, #0
 8012564:	bd38      	pop	{r3, r4, r5, pc}

08012566 <z_log_msg2_finalize>:
{
 8012566:	b570      	push	{r4, r5, r6, lr}
 8012568:	460e      	mov	r6, r1
 801256a:	4615      	mov	r5, r2
 801256c:	4619      	mov	r1, r3
	if (!msg) {
 801256e:	4604      	mov	r4, r0
 8012570:	b918      	cbnz	r0, 801257a <z_log_msg2_finalize+0x14>
}
 8012572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 8012576:	f7f1 bd51 	b.w	800401c <z_log_dropped>
	if (data) {
 801257a:	b143      	cbz	r3, 801258e <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
 801257c:	f100 030c 	add.w	r3, r0, #12
 8012580:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8012584:	4418      	add	r0, r3
 8012586:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 801258a:	f005 f950 	bl	801782e <memcpy>
	msg->hdr.source = source;
 801258e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
 8012592:	4620      	mov	r0, r4
}
 8012594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
 8012598:	f7f1 be76 	b.w	8004288 <z_log_msg2_commit>

0801259c <z_impl_z_log_msg2_static_create>:
{
 801259c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 80125a0:	f3c1 2949 	ubfx	r9, r1, #9, #10
 80125a4:	f3c1 44cb 	ubfx	r4, r1, #19, #12
 80125a8:	444c      	add	r4, r9
 80125aa:	3413      	adds	r4, #19
 80125ac:	f024 0407 	bic.w	r4, r4, #7
 80125b0:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 80125b2:	08a0      	lsrs	r0, r4, #2
{
 80125b4:	460d      	mov	r5, r1
 80125b6:	4690      	mov	r8, r2
 80125b8:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 80125ba:	f7f1 fd9b 	bl	80040f4 <z_log_msg2_alloc>
	if (msg) {
 80125be:	4604      	mov	r4, r0
 80125c0:	b120      	cbz	r0, 80125cc <z_impl_z_log_msg2_static_create+0x30>
 80125c2:	464a      	mov	r2, r9
 80125c4:	4641      	mov	r1, r8
 80125c6:	300c      	adds	r0, #12
 80125c8:	f005 f931 	bl	801782e <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
 80125cc:	463b      	mov	r3, r7
 80125ce:	462a      	mov	r2, r5
 80125d0:	4631      	mov	r1, r6
 80125d2:	4620      	mov	r0, r4
}
 80125d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
 80125d8:	f7ff bfc5 	b.w	8012566 <z_log_msg2_finalize>

080125dc <disk_access_init>:
{
 80125dc:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 80125de:	f7f2 f931 	bl	8004844 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 80125e2:	b130      	cbz	r0, 80125f2 <disk_access_init+0x16>
 80125e4:	68c3      	ldr	r3, [r0, #12]
 80125e6:	b123      	cbz	r3, 80125f2 <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
 80125e8:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
 80125ea:	b113      	cbz	r3, 80125f2 <disk_access_init+0x16>
}
 80125ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
 80125f0:	4718      	bx	r3
}
 80125f2:	f06f 0015 	mvn.w	r0, #21
 80125f6:	bd10      	pop	{r4, pc}

080125f8 <disk_access_status>:
{
 80125f8:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 80125fa:	f7f2 f923 	bl	8004844 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 80125fe:	b130      	cbz	r0, 801260e <disk_access_status+0x16>
 8012600:	68c3      	ldr	r3, [r0, #12]
 8012602:	b123      	cbz	r3, 801260e <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
 8012604:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8012606:	b113      	cbz	r3, 801260e <disk_access_status+0x16>
}
 8012608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
 801260c:	4718      	bx	r3
}
 801260e:	f06f 0015 	mvn.w	r0, #21
 8012612:	bd10      	pop	{r4, pc}

08012614 <disk_access_read>:
{
 8012614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012618:	460d      	mov	r5, r1
 801261a:	4616      	mov	r6, r2
 801261c:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
 801261e:	f7f2 f911 	bl	8004844 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8012622:	b150      	cbz	r0, 801263a <disk_access_read+0x26>
 8012624:	68c3      	ldr	r3, [r0, #12]
 8012626:	b143      	cbz	r3, 801263a <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
 8012628:	689c      	ldr	r4, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
 801262a:	b134      	cbz	r4, 801263a <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 801262c:	463b      	mov	r3, r7
 801262e:	4632      	mov	r2, r6
 8012630:	4629      	mov	r1, r5
 8012632:	46a4      	mov	ip, r4
}
 8012634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 8012638:	4760      	bx	ip
}
 801263a:	f06f 0015 	mvn.w	r0, #21
 801263e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012642 <disk_access_write>:
{
 8012642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012646:	460d      	mov	r5, r1
 8012648:	4616      	mov	r6, r2
 801264a:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
 801264c:	f7f2 f8fa 	bl	8004844 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8012650:	b150      	cbz	r0, 8012668 <disk_access_write+0x26>
 8012652:	68c3      	ldr	r3, [r0, #12]
 8012654:	b143      	cbz	r3, 8012668 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
 8012656:	68dc      	ldr	r4, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8012658:	b134      	cbz	r4, 8012668 <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 801265a:	463b      	mov	r3, r7
 801265c:	4632      	mov	r2, r6
 801265e:	4629      	mov	r1, r5
 8012660:	46a4      	mov	ip, r4
}
 8012662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 8012666:	4760      	bx	ip
}
 8012668:	f06f 0015 	mvn.w	r0, #21
 801266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012670 <disk_access_ioctl>:
{
 8012670:	b570      	push	{r4, r5, r6, lr}
 8012672:	460c      	mov	r4, r1
 8012674:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
 8012676:	f7f2 f8e5 	bl	8004844 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 801267a:	b140      	cbz	r0, 801268e <disk_access_ioctl+0x1e>
 801267c:	68c3      	ldr	r3, [r0, #12]
 801267e:	b133      	cbz	r3, 801268e <disk_access_ioctl+0x1e>
				(disk->ops->ioctl != NULL)) {
 8012680:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8012682:	b123      	cbz	r3, 801268e <disk_access_ioctl+0x1e>
		rc = disk->ops->ioctl(disk, cmd, buf);
 8012684:	462a      	mov	r2, r5
 8012686:	4621      	mov	r1, r4
}
 8012688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
 801268c:	4718      	bx	r3
}
 801268e:	f06f 0015 	mvn.w	r0, #21
 8012692:	bd70      	pop	{r4, r5, r6, pc}

08012694 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8012694:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8012696:	6800      	ldr	r0, [r0, #0]
 8012698:	f7f2 b94e 	b.w	8004938 <z_arm_fatal_error>

0801269c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 801269c:	2100      	movs	r1, #0
 801269e:	2001      	movs	r0, #1
 80126a0:	f7f2 b94a 	b.w	8004938 <z_arm_fatal_error>

080126a4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 80126a4:	b508      	push	{r3, lr}
	handler();
 80126a6:	f7f2 f9e3 	bl	8004a70 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80126aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80126ae:	f7f2 baa9 	b.w	8004c04 <z_arm_exc_exit>

080126b2 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 80126b2:	2300      	movs	r3, #0
 80126b4:	f7ff bf72 	b.w	801259c <z_impl_z_log_msg2_static_create>

080126b8 <malloc_prepare>:
}
 80126b8:	2000      	movs	r0, #0
 80126ba:	4770      	bx	lr

080126bc <_stdout_hook_default>:
}
 80126bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126c0:	4770      	bx	lr

080126c2 <_stdin_hook_default>:
}
 80126c2:	2000      	movs	r0, #0
 80126c4:	4770      	bx	lr

080126c6 <_read>:
{
 80126c6:	4608      	mov	r0, r1
 80126c8:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 80126ca:	f7f2 be6f 	b.w	80053ac <z_impl_zephyr_read_stdin>

080126ce <_write>:
{
 80126ce:	4608      	mov	r0, r1
 80126d0:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 80126d2:	f7f2 be7f 	b.w	80053d4 <z_impl_zephyr_write_stdout>

080126d6 <_close>:
 80126d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126da:	4770      	bx	lr

080126dc <_lseek>:
}
 80126dc:	2000      	movs	r0, #0
 80126de:	4770      	bx	lr

080126e0 <_isatty>:
}
 80126e0:	2802      	cmp	r0, #2
 80126e2:	bfcc      	ite	gt
 80126e4:	2000      	movgt	r0, #0
 80126e6:	2001      	movle	r0, #1
 80126e8:	4770      	bx	lr

080126ea <_fstat>:
	st->st_mode = S_IFCHR;
 80126ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126ee:	604b      	str	r3, [r1, #4]
}
 80126f0:	2000      	movs	r0, #0
 80126f2:	4770      	bx	lr

080126f4 <__retarget_lock_init_recursive>:
{
 80126f4:	b510      	push	{r4, lr}
 80126f6:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
 80126f8:	2014      	movs	r0, #20
 80126fa:	f7fe fc77 	bl	8010fec <malloc>
 80126fe:	6020      	str	r0, [r4, #0]
}
 8012700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 8012704:	f004 bd7e 	b.w	8017204 <z_impl_k_mutex_init>

08012708 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
 8012708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801270c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012710:	f7fd bb6e 	b.w	800fdf0 <z_impl_k_mutex_lock>

08012714 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 8012714:	f7fd bbe4 	b.w	800fee0 <z_impl_k_mutex_unlock>

08012718 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8012718:	f7fd b924 	b.w	800f964 <z_impl_z_errno>

0801271c <MlmeIndication>:
}
 801271c:	4770      	bx	lr

0801271e <OnMacProcessNotify>:
	LoRaMacProcess();
 801271e:	f7f6 ba1d 	b.w	8008b5c <LoRaMacProcess>

08012722 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8012722:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8012724:	ab0b      	add	r3, sp, #44	; 0x2c
 8012726:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8012728:	9303      	str	r3, [sp, #12]
 801272a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801272c:	9302      	str	r3, [sp, #8]
 801272e:	2300      	movs	r3, #0
 8012730:	e9cd 3300 	strd	r3, r3, [sp]
 8012734:	2201      	movs	r2, #1
 8012736:	4618      	mov	r0, r3
 8012738:	f7f1 ffe6 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 801273c:	b007      	add	sp, #28
 801273e:	f85d fb04 	ldr.w	pc, [sp], #4

08012742 <BoardGetUniqueId>:
}
 8012742:	4770      	bx	lr

08012744 <lorawan_get_payload_sizes>:
{
 8012744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012746:	4605      	mov	r5, r0
 8012748:	460c      	mov	r4, r1
	(void)LoRaMacQueryTxPossible(0, &txInfo);
 801274a:	2000      	movs	r0, #0
 801274c:	a901      	add	r1, sp, #4
 801274e:	f7f7 f895 	bl	800987c <LoRaMacQueryTxPossible>
	*max_next_payload_size = txInfo.MaxPossibleApplicationDataSize;
 8012752:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012756:	702b      	strb	r3, [r5, #0]
	*max_payload_size = txInfo.CurrentPossiblePayloadSize;
 8012758:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801275c:	7023      	strb	r3, [r4, #0]
}
 801275e:	b003      	add	sp, #12
 8012760:	bd30      	pop	{r4, r5, pc}

08012762 <timer_work_handler>:
	TimerIrqHandler();
 8012762:	f7f3 be81 	b.w	8006468 <TimerIrqHandler>

08012766 <k_uptime_get_32>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
 8012766:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8012768:	f004 fee1 	bl	801752e <z_impl_k_uptime_ticks>
 801276c:	220a      	movs	r2, #10
 801276e:	2300      	movs	r3, #0
 8012770:	f7ee fc2a 	bl	8000fc8 <__aeabi_uldivmod>
	return (uint32_t)k_uptime_get();
}
 8012774:	bd08      	pop	{r3, pc}

08012776 <RtcGetCalendarTime>:
{
 8012776:	b570      	push	{r4, r5, r6, lr}
 8012778:	4606      	mov	r6, r0
 801277a:	f004 fed8 	bl	801752e <z_impl_k_uptime_ticks>
 801277e:	220a      	movs	r2, #10
 8012780:	2300      	movs	r3, #0
 8012782:	f7ee fc21 	bl	8000fc8 <__aeabi_uldivmod>
	*milliseconds = now % MSEC_PER_SEC;
 8012786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801278a:	2300      	movs	r3, #0
 801278c:	4605      	mov	r5, r0
 801278e:	460c      	mov	r4, r1
 8012790:	f7ee fbca 	bl	8000f28 <__aeabi_ldivmod>
	return now / MSEC_PER_SEC;
 8012794:	2300      	movs	r3, #0
	*milliseconds = now % MSEC_PER_SEC;
 8012796:	8032      	strh	r2, [r6, #0]
	return now / MSEC_PER_SEC;
 8012798:	4628      	mov	r0, r5
 801279a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801279e:	4621      	mov	r1, r4
 80127a0:	f7ee fbc2 	bl	8000f28 <__aeabi_ldivmod>
}
 80127a4:	bd70      	pop	{r4, r5, r6, pc}

080127a6 <RtcGetTimerValue>:
	return k_uptime_get_32();
 80127a6:	f7ff bfde 	b.w	8012766 <k_uptime_get_32>

080127aa <RtcGetMinimumTimeout>:
}
 80127aa:	2001      	movs	r0, #1
 80127ac:	4770      	bx	lr

080127ae <DelayMsMcu>:
			return t * ((uint64_t)to_hz / from_hz);
 80127ae:	210a      	movs	r1, #10
 80127b0:	fba0 0101 	umull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 80127b4:	f7fe b816 	b.w	80107e4 <z_impl_k_sleep>

080127b8 <RtcMs2Tick>:
}

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 80127b8:	4770      	bx	lr

080127ba <RtcTick2Ms>:
 80127ba:	4770      	bx	lr

080127bc <BoardCriticalSectionBegin>:
	__asm__ volatile(
 80127bc:	f04f 0210 	mov.w	r2, #16
 80127c0:	f3ef 8311 	mrs	r3, BASEPRI
 80127c4:	f382 8812 	msr	BASEPRI_MAX, r2
 80127c8:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 80127cc:	6003      	str	r3, [r0, #0]
}
 80127ce:	4770      	bx	lr

080127d0 <BoardCriticalSectionEnd>:
	__asm__ volatile(
 80127d0:	6803      	ldr	r3, [r0, #0]
 80127d2:	f383 8811 	msr	BASEPRI, r3
 80127d6:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
 80127da:	4770      	bx	lr

080127dc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 80127dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 80127de:	ab0b      	add	r3, sp, #44	; 0x2c
 80127e0:	9305      	str	r3, [sp, #20]
 80127e2:	9303      	str	r3, [sp, #12]
 80127e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127e6:	9302      	str	r3, [sp, #8]
 80127e8:	2300      	movs	r3, #0
 80127ea:	e9cd 3300 	strd	r3, r3, [sp]
 80127ee:	2201      	movs	r2, #1
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7f1 ff89 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 80127f6:	b007      	add	sp, #28
 80127f8:	f85d fb04 	ldr.w	pc, [sp], #4

080127fc <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80127fc:	2301      	movs	r3, #1
 80127fe:	fa03 f101 	lsl.w	r1, r3, r1
 8012802:	6903      	ldr	r3, [r0, #16]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8012808:	bf18      	it	ne
 801280a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 801280e:	b112      	cbz	r2, 8012816 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8012810:	6883      	ldr	r3, [r0, #8]
 8012812:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8012814:	4718      	bx	r3
 8012816:	6883      	ldr	r3, [r0, #8]
 8012818:	691b      	ldr	r3, [r3, #16]
 801281a:	e7fb      	b.n	8012814 <gpio_pin_set.isra.0+0x18>

0801281c <SX126xAntSwOn>:
}
 801281c:	4770      	bx	lr

0801281e <SX126xAntSwOff>:
 801281e:	4770      	bx	lr

08012820 <SX126xGetBoardTcxoWakeupTime>:
}
 8012820:	2005      	movs	r0, #5
 8012822:	4770      	bx	lr

08012824 <SX126xGetDeviceId>:
}
 8012824:	2002      	movs	r0, #2
 8012826:	4770      	bx	lr

08012828 <SX126xIoTcxoInit>:
{
 8012828:	b508      	push	{r3, lr}
	SX126xSetDio3AsTcxoCtrl(TCXO_DIO3_VOLTAGE,
 801282a:	2001      	movs	r0, #1
 801282c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012830:	f000 fb73 	bl	8012f1a <SX126xSetDio3AsTcxoCtrl>
}
 8012834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SX126xCalibrate(cal);
 8012838:	f04f 007f 	mov.w	r0, #127	; 0x7f
 801283c:	f000 bb18 	b.w	8012e70 <SX126xCalibrate>

08012840 <SX126xIoRfSwitchInit>:
	SX126xSetDio2AsRfSwitchCtrl(DIO2_TX_ENABLE);
 8012840:	2000      	movs	r0, #0
 8012842:	f000 bb5e 	b.w	8012f02 <SX126xSetDio2AsRfSwitchCtrl>

08012846 <SX126xSetRfTxPower>:
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 8012846:	2102      	movs	r1, #2
 8012848:	f000 bb7d 	b.w	8012f46 <SX126xSetTxParams>

0801284c <SX126xWriteBuffer>:
{
 801284c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801284e:	460b      	mov	r3, r1
	uint8_t req[] = {
 8012850:	210e      	movs	r1, #14
 8012852:	f88d 100c 	strb.w	r1, [sp, #12]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 8012856:	2100      	movs	r1, #0
	uint8_t req[] = {
 8012858:	f88d 000d 	strb.w	r0, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 801285c:	9201      	str	r2, [sp, #4]
 801285e:	9100      	str	r1, [sp, #0]
 8012860:	2202      	movs	r2, #2
 8012862:	a803      	add	r0, sp, #12
 8012864:	f7f3 fce0 	bl	8006228 <sx126x_spi_transceive.isra.0>
}
 8012868:	b005      	add	sp, #20
 801286a:	f85d fb04 	ldr.w	pc, [sp], #4

0801286e <SX126xReadBuffer>:
{
 801286e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t req[] = {
 8012870:	231e      	movs	r3, #30
 8012872:	f88d 300c 	strb.w	r3, [sp, #12]
 8012876:	2300      	movs	r3, #0
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 8012878:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t req[] = {
 801287c:	f88d 000d 	strb.w	r0, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 8012880:	2203      	movs	r2, #3
 8012882:	4619      	mov	r1, r3
 8012884:	a803      	add	r0, sp, #12
	uint8_t req[] = {
 8012886:	f88d 300e 	strb.w	r3, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 801288a:	f7f3 fccd 	bl	8006228 <sx126x_spi_transceive.isra.0>
}
 801288e:	b005      	add	sp, #20
 8012890:	f85d fb04 	ldr.w	pc, [sp], #4

08012894 <SX126xWriteCommand>:
{
 8012894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012896:	460b      	mov	r3, r1
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 8012898:	2100      	movs	r1, #0
	uint8_t req[] = {
 801289a:	f88d 000c 	strb.w	r0, [sp, #12]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 801289e:	9201      	str	r2, [sp, #4]
 80128a0:	9100      	str	r1, [sp, #0]
 80128a2:	2201      	movs	r2, #1
 80128a4:	a803      	add	r0, sp, #12
 80128a6:	f7f3 fcbf 	bl	8006228 <sx126x_spi_transceive.isra.0>
}
 80128aa:	b005      	add	sp, #20
 80128ac:	f85d fb04 	ldr.w	pc, [sp], #4

080128b0 <SX126xReadCommand>:
{
 80128b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_req[] = {
 80128b2:	2300      	movs	r3, #0
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 80128b4:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t tx_req[] = {
 80128b8:	f88d 0008 	strb.w	r0, [sp, #8]
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 80128bc:	2202      	movs	r2, #2
 80128be:	a802      	add	r0, sp, #8
 80128c0:	a903      	add	r1, sp, #12
	uint8_t tx_req[] = {
 80128c2:	f88d 3009 	strb.w	r3, [sp, #9]
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 80128c6:	f7f3 fcaf 	bl	8006228 <sx126x_spi_transceive.isra.0>
}
 80128ca:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80128ce:	b005      	add	sp, #20
 80128d0:	f85d fb04 	ldr.w	pc, [sp], #4

080128d4 <SX126xWriteRegisters>:
{
 80128d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128d6:	460b      	mov	r3, r1
	uint8_t req[] = {
 80128d8:	210d      	movs	r1, #13
 80128da:	f88d 100c 	strb.w	r1, [sp, #12]
 80128de:	0a01      	lsrs	r1, r0, #8
 80128e0:	f88d 100d 	strb.w	r1, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 80128e4:	2100      	movs	r1, #0
	uint8_t req[] = {
 80128e6:	f88d 000e 	strb.w	r0, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 80128ea:	9201      	str	r2, [sp, #4]
 80128ec:	9100      	str	r1, [sp, #0]
 80128ee:	2203      	movs	r2, #3
 80128f0:	a803      	add	r0, sp, #12
 80128f2:	f7f3 fc99 	bl	8006228 <sx126x_spi_transceive.isra.0>
}
 80128f6:	b005      	add	sp, #20
 80128f8:	f85d fb04 	ldr.w	pc, [sp], #4

080128fc <SX126xWriteRegister>:
{
 80128fc:	b507      	push	{r0, r1, r2, lr}
	SX126xWriteRegisters(address, &value, 1);
 80128fe:	2201      	movs	r2, #1
{
 8012900:	f88d 1007 	strb.w	r1, [sp, #7]
	SX126xWriteRegisters(address, &value, 1);
 8012904:	f10d 0107 	add.w	r1, sp, #7
 8012908:	f7ff ffe4 	bl	80128d4 <SX126xWriteRegisters>
}
 801290c:	b003      	add	sp, #12
 801290e:	f85d fb04 	ldr.w	pc, [sp], #4

08012912 <SX126xReadRegisters>:
{
 8012912:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t req[] = {
 8012914:	231d      	movs	r3, #29
 8012916:	f88d 300c 	strb.w	r3, [sp, #12]
 801291a:	0a03      	lsrs	r3, r0, #8
 801291c:	f88d 300d 	strb.w	r3, [sp, #13]
 8012920:	2300      	movs	r3, #0
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 8012922:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t req[] = {
 8012926:	f88d 000e 	strb.w	r0, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 801292a:	2204      	movs	r2, #4
 801292c:	4619      	mov	r1, r3
 801292e:	a803      	add	r0, sp, #12
	uint8_t req[] = {
 8012930:	f88d 300f 	strb.w	r3, [sp, #15]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 8012934:	f7f3 fc78 	bl	8006228 <sx126x_spi_transceive.isra.0>
}
 8012938:	b005      	add	sp, #20
 801293a:	f85d fb04 	ldr.w	pc, [sp], #4

0801293e <SX126xReadRegister>:
{
 801293e:	b507      	push	{r0, r1, r2, lr}
	SX126xReadRegisters(address, &data, 1);
 8012940:	2201      	movs	r2, #1
 8012942:	f10d 0107 	add.w	r1, sp, #7
 8012946:	f7ff ffe4 	bl	8012912 <SX126xReadRegisters>
}
 801294a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801294e:	b003      	add	sp, #12
 8012950:	f85d fb04 	ldr.w	pc, [sp], #4

08012954 <radio_isr>:
{
 8012954:	b510      	push	{r4, lr}
	struct sx126x_data *dev_data = dev->data;
 8012956:	6904      	ldr	r4, [r0, #16]
	irq_disable(DT_INST_IRQN(0));
 8012958:	2032      	movs	r0, #50	; 0x32
 801295a:	f7f2 f85d 	bl	8004a18 <arch_irq_disable>
	k_work_submit(&dev_data->dio1_irq_work);
 801295e:	f104 000c 	add.w	r0, r4, #12
}
 8012962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&dev_data->dio1_irq_work);
 8012966:	f7fd bc31 	b.w	80101cc <k_work_submit>

0801296a <sx126x_reset>:
{
 801296a:	b510      	push	{r4, lr}
  SET_BIT(RCC->CSR, RCC_CSR_RFRST);
 801296c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8012970:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012978:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801297c:	2100      	movs	r1, #0
 801297e:	20c8      	movs	r0, #200	; 0xc8
 8012980:	f7fd ff30 	bl	80107e4 <z_impl_k_sleep>
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8012984:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8012988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801298c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8012990:	2064      	movs	r0, #100	; 0x64
}
 8012992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012996:	2100      	movs	r1, #0
 8012998:	f7fd bf24 	b.w	80107e4 <z_impl_k_sleep>

0801299c <sx126x_get_dio1_pin_state>:
}
 801299c:	2000      	movs	r0, #0
 801299e:	4770      	bx	lr

080129a0 <sx126x_dio1_irq_disable>:
	irq_disable(DT_INST_IRQN(0));
 80129a0:	2032      	movs	r0, #50	; 0x32
 80129a2:	f7f2 b839 	b.w	8004a18 <arch_irq_disable>

080129a6 <randr>:
{
 80129a6:	b538      	push	{r3, r4, r5, lr}
 80129a8:	4605      	mov	r5, r0
 80129aa:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80129ac:	f7f3 fce4 	bl	8006378 <rand1>
 80129b0:	1b61      	subs	r1, r4, r5
 80129b2:	3101      	adds	r1, #1
 80129b4:	fb90 f3f1 	sdiv	r3, r0, r1
 80129b8:	fb03 0011 	mls	r0, r3, r1, r0
}
 80129bc:	4428      	add	r0, r5
 80129be:	bd38      	pop	{r3, r4, r5, pc}

080129c0 <memcpy1>:
    while( size-- )
 80129c0:	3801      	subs	r0, #1
 80129c2:	440a      	add	r2, r1
 80129c4:	4291      	cmp	r1, r2
 80129c6:	d100      	bne.n	80129ca <memcpy1+0xa>
}
 80129c8:	4770      	bx	lr
        *dst++ = *src++;
 80129ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129ce:	f800 3f01 	strb.w	r3, [r0, #1]!
 80129d2:	e7f7      	b.n	80129c4 <memcpy1+0x4>

080129d4 <memcpyr>:
    while( size-- )
 80129d4:	4410      	add	r0, r2
 80129d6:	440a      	add	r2, r1
 80129d8:	4291      	cmp	r1, r2
 80129da:	d100      	bne.n	80129de <memcpyr+0xa>
}
 80129dc:	4770      	bx	lr
        *dst-- = *src++;
 80129de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129e2:	f800 3d01 	strb.w	r3, [r0, #-1]!
 80129e6:	e7f7      	b.n	80129d8 <memcpyr+0x4>

080129e8 <memset1>:
    while( size-- )
 80129e8:	4402      	add	r2, r0
 80129ea:	4290      	cmp	r0, r2
 80129ec:	d100      	bne.n	80129f0 <memset1+0x8>
}
 80129ee:	4770      	bx	lr
        *dst++ = value;
 80129f0:	f800 1b01 	strb.w	r1, [r0], #1
 80129f4:	e7f9      	b.n	80129ea <memset1+0x2>

080129f6 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80129f6:	b082      	sub	sp, #8
 80129f8:	b082      	sub	sp, #8
 80129fa:	f10d 0c08 	add.w	ip, sp, #8
 80129fe:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012a02:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 8012a06:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 8012a08:	440b      	add	r3, r1
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012a0a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012a0e:	440a      	add	r2, r1
 8012a10:	b291      	uxth	r1, r2
 8012a12:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
 8012a14:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 8012a18:	bfa2      	ittt	ge
 8012a1a:	f5a1 727a 	subge.w	r2, r1, #1000	; 0x3e8
        c.Seconds++;
 8012a1e:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
 8012a20:	b212      	sxthge	r2, r2
    }
    return c;
 8012a22:	6003      	str	r3, [r0, #0]
 8012a24:	8082      	strh	r2, [r0, #4]
}
 8012a26:	b002      	add	sp, #8
 8012a28:	b002      	add	sp, #8
 8012a2a:	4770      	bx	lr

08012a2c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8012a2c:	b082      	sub	sp, #8
 8012a2e:	b082      	sub	sp, #8
 8012a30:	f10d 0c08 	add.w	ip, sp, #8
 8012a34:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012a38:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 8012a3c:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 8012a3e:	1acb      	subs	r3, r1, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012a40:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012a44:	1a52      	subs	r2, r2, r1
 8012a46:	b291      	uxth	r1, r2
 8012a48:	b212      	sxth	r2, r2
    if( c.SubSeconds < 0 )
 8012a4a:	2a00      	cmp	r2, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 8012a4c:	bfbe      	ittt	lt
 8012a4e:	f501 727a 	addlt.w	r2, r1, #1000	; 0x3e8
        c.Seconds--;
 8012a52:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 8012a56:	b212      	sxthlt	r2, r2
    }
    return c;
 8012a58:	6003      	str	r3, [r0, #0]
 8012a5a:	8082      	strh	r2, [r0, #4]
}
 8012a5c:	b002      	add	sp, #8
 8012a5e:	b002      	add	sp, #8
 8012a60:	4770      	bx	lr

08012a62 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8012a62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a64:	466b      	mov	r3, sp
 8012a66:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012a6a:	2300      	movs	r3, #0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012a6c:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012a6e:	9302      	str	r3, [sp, #8]
 8012a70:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012a74:	f7ff fe7f 	bl	8012776 <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 8012a78:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012a7a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012a7e:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 8012a80:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012a82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012a86:	1ac9      	subs	r1, r1, r3
 8012a88:	b28b      	uxth	r3, r1
 8012a8a:	b209      	sxth	r1, r1
    if( c.SubSeconds < 0 )
 8012a8c:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
 8012a8e:	bfbe      	ittt	lt
 8012a90:	f503 717a 	addlt.w	r1, r3, #1000	; 0x3e8
        c.Seconds--;
 8012a94:	f100 30ff 	addlt.w	r0, r0, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 8012a98:	b209      	sxthlt	r1, r1

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
 8012a9a:	f7f2 fff9 	bl	8005a90 <RtcBkupWrite>
}
 8012a9e:	b005      	add	sp, #20
 8012aa0:	f85d fb04 	ldr.w	pc, [sp], #4

08012aa4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012aa6:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012aa8:	2300      	movs	r3, #0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012aaa:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012aac:	9302      	str	r3, [sp, #8]
 8012aae:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012ab2:	f7ff fe60 	bl	8012776 <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
 8012ab6:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012ab8:	9002      	str	r0, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
 8012aba:	4668      	mov	r0, sp
 8012abc:	f7f2 ffee 	bl	8005a9c <RtcBkupRead>
    c.Seconds = a.Seconds + b.Seconds;
 8012ac0:	9b02      	ldr	r3, [sp, #8]
 8012ac2:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012ac4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 8012ac8:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012aca:	9b01      	ldr	r3, [sp, #4]
 8012acc:	440b      	add	r3, r1
 8012ace:	b299      	uxth	r1, r3
 8012ad0:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 8012ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 8012ad6:	bfa2      	ittt	ge
 8012ad8:	f5a1 737a 	subge.w	r3, r1, #1000	; 0x3e8
        c.Seconds++;
 8012adc:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
 8012ade:	b21b      	sxthge	r3, r3
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
 8012ae0:	4620      	mov	r0, r4
    return sysTime;
 8012ae2:	6022      	str	r2, [r4, #0]
 8012ae4:	80a3      	strh	r3, [r4, #4]
}
 8012ae6:	b004      	add	sp, #16
 8012ae8:	bd10      	pop	{r4, pc}

08012aea <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
 8012aea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012aec:	2300      	movs	r3, #0
{
 8012aee:	4604      	mov	r4, r0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012af0:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012af2:	9300      	str	r3, [sp, #0]
 8012af4:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012af8:	f7ff fe3d 	bl	8012776 <RtcGetCalendarTime>
 8012afc:	466d      	mov	r5, sp
 8012afe:	9000      	str	r0, [sp, #0]

    return calendarTime;
 8012b00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012b04:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8012b08:	4620      	mov	r0, r4
 8012b0a:	b003      	add	sp, #12
 8012b0c:	bd30      	pop	{r4, r5, pc}

08012b0e <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8012b0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b10:	466b      	mov	r3, sp
 8012b12:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
 8012b16:	a903      	add	r1, sp, #12
 8012b18:	a802      	add	r0, sp, #8
 8012b1a:	f7f2 ffbf 	bl	8005a9c <RtcBkupRead>
    c.Seconds = a.Seconds - b.Seconds;
 8012b1e:	9802      	ldr	r0, [sp, #8]
 8012b20:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012b22:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c.Seconds = a.Seconds - b.Seconds;
 8012b26:	1a12      	subs	r2, r2, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012b28:	9803      	ldr	r0, [sp, #12]
 8012b2a:	1a1b      	subs	r3, r3, r0
 8012b2c:	b299      	uxth	r1, r3
 8012b2e:	b21b      	sxth	r3, r3
    if( c.SubSeconds < 0 )
 8012b30:	2b00      	cmp	r3, #0
        c.SubSeconds += 1000;
 8012b32:	bfbe      	ittt	lt
 8012b34:	f501 737a 	addlt.w	r3, r1, #1000	; 0x3e8
        c.Seconds--;
 8012b38:	f102 32ff 	addlt.w	r2, r2, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 8012b3c:	b21b      	sxthlt	r3, r3
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}
 8012b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012b42:	fb00 3002 	mla	r0, r0, r2, r3
 8012b46:	b005      	add	sp, #20
 8012b48:	f85d fb04 	ldr.w	pc, [sp], #4

08012b4c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8012b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t seconds = timeMs / 1000;
 8012b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8012b52:	4606      	mov	r6, r0
    uint32_t seconds = timeMs / 1000;
 8012b54:	fbb1 f4f3 	udiv	r4, r1, r3
    uint32_t subSeconds = timeMs - seconds * 1000;
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
 8012b58:	4668      	mov	r0, sp
 8012b5a:	fb03 1514 	mls	r5, r3, r4, r1
 8012b5e:	a901      	add	r1, sp, #4
    uint32_t seconds = timeMs / 1000;
 8012b60:	9400      	str	r4, [sp, #0]
    uint32_t subSeconds = timeMs - seconds * 1000;
 8012b62:	9501      	str	r5, [sp, #4]
    RtcBkupRead( &seconds, &subSeconds );
 8012b64:	f7f2 ff9a 	bl	8005a9c <RtcBkupRead>
    c.Seconds = a.Seconds + b.Seconds;
 8012b68:	9b00      	ldr	r3, [sp, #0]
 8012b6a:	441c      	add	r4, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012b6c:	9b01      	ldr	r3, [sp, #4]
 8012b6e:	442b      	add	r3, r5
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 8012b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 8012b78:	bfa2      	ittt	ge
 8012b7a:	f5a2 737a 	subge.w	r3, r2, #1000	; 0x3e8
        c.Seconds++;
 8012b7e:	3401      	addge	r4, #1
        c.SubSeconds -= 1000;
 8012b80:	b21b      	sxthge	r3, r3

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
 8012b82:	4630      	mov	r0, r6
    return c;
 8012b84:	6034      	str	r4, [r6, #0]
 8012b86:	80b3      	strh	r3, [r6, #4]
}
 8012b88:	b002      	add	sp, #8
 8012b8a:	bd70      	pop	{r4, r5, r6, pc}

08012b8c <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8012b8c:	b570      	push	{r4, r5, r6, lr}
 8012b8e:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 8012b90:	f7ff fe0b 	bl	80127aa <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8012b94:	2301      	movs	r3, #1
 8012b96:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8012b98:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8012b9a:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8012b9c:	f7f2 ff86 	bl	8005aac <RtcGetTimerElapsedTime>
 8012ba0:	4428      	add	r0, r5
 8012ba2:	4286      	cmp	r6, r0
 8012ba4:	d203      	bcs.n	8012bae <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8012ba6:	f7f2 ff81 	bl	8005aac <RtcGetTimerElapsedTime>
 8012baa:	4405      	add	r5, r0
 8012bac:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8012bae:	6820      	ldr	r0, [r4, #0]
}
 8012bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
 8012bb4:	f7f2 bf8a 	b.w	8005acc <RtcSetAlarm>

08012bb8 <TimerInit>:
    obj->Timestamp = 0;
 8012bb8:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
 8012bba:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
 8012bbe:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
 8012bc2:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
 8012bc4:	6143      	str	r3, [r0, #20]
}
 8012bc6:	4770      	bx	lr

08012bc8 <TimerSetValue>:
{
 8012bc8:	b538      	push	{r3, r4, r5, lr}
 8012bca:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
 8012bcc:	4608      	mov	r0, r1
 8012bce:	f7ff fdf3 	bl	80127b8 <RtcMs2Tick>
 8012bd2:	4604      	mov	r4, r0
    TimerStop( obj );
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	f7f3 fc83 	bl	80064e0 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 8012bda:	f7ff fde6 	bl	80127aa <RtcGetMinimumTimeout>
    if( ticks < minValue )
 8012bde:	42a0      	cmp	r0, r4
 8012be0:	bf38      	it	cc
 8012be2:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
 8012be4:	e9c5 0000 	strd	r0, r0, [r5]
}
 8012be8:	bd38      	pop	{r3, r4, r5, pc}

08012bea <TimerGetCurrentTime>:
{
 8012bea:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 8012bec:	f7ff fddb 	bl	80127a6 <RtcGetTimerValue>
}
 8012bf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
 8012bf4:	f7ff bde1 	b.w	80127ba <RtcTick2Ms>

08012bf8 <TimerGetElapsedTime>:
{
 8012bf8:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	b150      	cbz	r0, 8012c14 <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
 8012bfe:	f7ff fdd2 	bl	80127a6 <RtcGetTimerValue>
 8012c02:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 8012c04:	4620      	mov	r0, r4
 8012c06:	f7ff fdd7 	bl	80127b8 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8012c0a:	1a28      	subs	r0, r5, r0
}
 8012c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8012c10:	f7ff bdd3 	b.w	80127ba <RtcTick2Ms>
}
 8012c14:	bd38      	pop	{r3, r4, r5, pc}

08012c16 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
 8012c16:	f7ff bdca 	b.w	80127ae <DelayMsMcu>

08012c1a <SX126xCheckDeviceReady>:
{
 8012c1a:	b508      	push	{r3, lr}
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 8012c1c:	f7f3 fab8 	bl	8006190 <SX126xGetOperatingMode>
 8012c20:	b938      	cbnz	r0, 8012c32 <SX126xCheckDeviceReady+0x18>
        SX126xWakeup( );
 8012c22:	f7f3 fb45 	bl	80062b0 <SX126xWakeup>
        SX126xAntSwOn( );
 8012c26:	f7ff fdf9 	bl	801281c <SX126xAntSwOn>
}
 8012c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xWaitOnBusy( );
 8012c2e:	f7f3 baed 	b.w	800620c <SX126xWaitOnBusy>
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 8012c32:	f7f3 faad 	bl	8006190 <SX126xGetOperatingMode>
 8012c36:	2806      	cmp	r0, #6
 8012c38:	d1f7      	bne.n	8012c2a <SX126xCheckDeviceReady+0x10>
 8012c3a:	e7f2      	b.n	8012c22 <SX126xCheckDeviceReady+0x8>

08012c3c <SX126xSetPayload>:
{
 8012c3c:	460a      	mov	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 8012c3e:	4601      	mov	r1, r0
 8012c40:	2000      	movs	r0, #0
 8012c42:	f7ff be03 	b.w	801284c <SX126xWriteBuffer>

08012c46 <SX126xSetSyncWord>:
{
 8012c46:	b508      	push	{r3, lr}
 8012c48:	4601      	mov	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8012c4a:	2208      	movs	r2, #8
 8012c4c:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8012c50:	f7ff fe40 	bl	80128d4 <SX126xWriteRegisters>
}
 8012c54:	2000      	movs	r0, #0
 8012c56:	bd08      	pop	{r3, pc}

08012c58 <SX126xSetStandby>:
{
 8012c58:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8012c5a:	2201      	movs	r2, #1
{
 8012c5c:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8012c60:	f10d 0107 	add.w	r1, sp, #7
 8012c64:	2080      	movs	r0, #128	; 0x80
 8012c66:	f7ff fe15 	bl	8012894 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 8012c6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c6e:	b92b      	cbnz	r3, 8012c7c <SX126xSetStandby+0x24>
        SX126xSetOperatingMode( MODE_STDBY_RC );
 8012c70:	2001      	movs	r0, #1
        SX126xSetOperatingMode( MODE_STDBY_XOSC );
 8012c72:	f7f3 fa93 	bl	800619c <SX126xSetOperatingMode>
}
 8012c76:	b003      	add	sp, #12
 8012c78:	f85d fb04 	ldr.w	pc, [sp], #4
        SX126xSetOperatingMode( MODE_STDBY_XOSC );
 8012c7c:	2002      	movs	r0, #2
 8012c7e:	e7f8      	b.n	8012c72 <SX126xSetStandby+0x1a>

08012c80 <SX126xSetTx>:
{
 8012c80:	b513      	push	{r0, r1, r4, lr}
 8012c82:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_TX );
 8012c84:	2004      	movs	r0, #4
 8012c86:	f7f3 fa89 	bl	800619c <SX126xSetOperatingMode>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012c8a:	0c23      	lsrs	r3, r4, #16
 8012c8c:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8012c90:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012c92:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8012c94:	a901      	add	r1, sp, #4
 8012c96:	2083      	movs	r0, #131	; 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012c98:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012c9c:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8012ca0:	f7ff fdf8 	bl	8012894 <SX126xWriteCommand>
}
 8012ca4:	b002      	add	sp, #8
 8012ca6:	bd10      	pop	{r4, pc}

08012ca8 <SX126xSendPayload>:
{
 8012ca8:	b510      	push	{r4, lr}
 8012caa:	4614      	mov	r4, r2
    SX126xSetPayload( payload, size );
 8012cac:	f7ff ffc6 	bl	8012c3c <SX126xSetPayload>
    SX126xSetTx( timeout );
 8012cb0:	4620      	mov	r0, r4
}
 8012cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX126xSetTx( timeout );
 8012cb6:	f7ff bfe3 	b.w	8012c80 <SX126xSetTx>

08012cba <SX126xSetRx>:
{
 8012cba:	b513      	push	{r0, r1, r4, lr}
 8012cbc:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 8012cbe:	2005      	movs	r0, #5
 8012cc0:	f7f3 fa6c 	bl	800619c <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 8012cc4:	2194      	movs	r1, #148	; 0x94
 8012cc6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8012cca:	f7ff fe17 	bl	80128fc <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012cce:	0c23      	lsrs	r3, r4, #16
 8012cd0:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8012cd4:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012cd6:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8012cd8:	a901      	add	r1, sp, #4
 8012cda:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012cdc:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012ce0:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8012ce4:	f7ff fdd6 	bl	8012894 <SX126xWriteCommand>
}
 8012ce8:	b002      	add	sp, #8
 8012cea:	bd10      	pop	{r4, pc}

08012cec <SX126xGetRandom>:
{
 8012cec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t number = 0;
 8012cee:	2600      	movs	r6, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8012cf0:	f640 00e2 	movw	r0, #2274	; 0x8e2
    uint32_t number = 0;
 8012cf4:	9601      	str	r6, [sp, #4]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8012cf6:	f7ff fe22 	bl	801293e <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8012cfa:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8012cfe:	4605      	mov	r5, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8012d00:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012d04:	f7ff fdfa 	bl	80128fc <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8012d08:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012d0c:	f7ff fe17 	bl	801293e <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8012d10:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8012d14:	4604      	mov	r4, r0
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8012d16:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012d1a:	f7ff fdef 	bl	80128fc <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8012d1e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012d22:	f7ff ffca 	bl	8012cba <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8012d26:	2204      	movs	r2, #4
 8012d28:	eb0d 0102 	add.w	r1, sp, r2
 8012d2c:	f640 0019 	movw	r0, #2073	; 0x819
 8012d30:	f7ff fdef 	bl	8012912 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 8012d34:	4630      	mov	r0, r6
 8012d36:	f7ff ff8f 	bl	8012c58 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 8012d3a:	4629      	mov	r1, r5
 8012d3c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8012d40:	f7ff fddc 	bl	80128fc <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 8012d44:	4621      	mov	r1, r4
 8012d46:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8012d4a:	f7ff fdd7 	bl	80128fc <SX126xWriteRegister>
}
 8012d4e:	9801      	ldr	r0, [sp, #4]
 8012d50:	b002      	add	sp, #8
 8012d52:	bd70      	pop	{r4, r5, r6, pc}

08012d54 <SX126xSetRxBoosted>:
{
 8012d54:	b513      	push	{r0, r1, r4, lr}
 8012d56:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 8012d58:	2005      	movs	r0, #5
 8012d5a:	f7f3 fa1f 	bl	800619c <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8012d5e:	2196      	movs	r1, #150	; 0x96
 8012d60:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8012d64:	f7ff fdca 	bl	80128fc <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012d68:	0c23      	lsrs	r3, r4, #16
 8012d6a:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8012d6e:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012d70:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8012d72:	a901      	add	r1, sp, #4
 8012d74:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012d76:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012d7a:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8012d7e:	f7ff fd89 	bl	8012894 <SX126xWriteCommand>
}
 8012d82:	b002      	add	sp, #8
 8012d84:	bd10      	pop	{r4, pc}

08012d86 <SX126xSetRxDutyCycle>:
{
 8012d86:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8012d88:	0c03      	lsrs	r3, r0, #16
 8012d8a:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8012d8e:	0a03      	lsrs	r3, r0, #8
 8012d90:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8012d94:	0c0b      	lsrs	r3, r1, #16
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8012d96:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8012d9a:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8012d9e:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8012da2:	0a0b      	lsrs	r3, r1, #8
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8012da4:	2206      	movs	r2, #6
 8012da6:	4669      	mov	r1, sp
 8012da8:	2094      	movs	r0, #148	; 0x94
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8012daa:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8012dae:	f7ff fd71 	bl	8012894 <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_RX_DC );
 8012db2:	2006      	movs	r0, #6
 8012db4:	f7f3 f9f2 	bl	800619c <SX126xSetOperatingMode>
}
 8012db8:	b003      	add	sp, #12
 8012dba:	f85d fb04 	ldr.w	pc, [sp], #4

08012dbe <SX126xSetCad>:
{
 8012dbe:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	20c5      	movs	r0, #197	; 0xc5
 8012dc4:	4611      	mov	r1, r2
 8012dc6:	f7ff fd65 	bl	8012894 <SX126xWriteCommand>
}
 8012dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetOperatingMode( MODE_CAD );
 8012dce:	2007      	movs	r0, #7
 8012dd0:	f7f3 b9e4 	b.w	800619c <SX126xSetOperatingMode>

08012dd4 <SX126xSetTxContinuousWave>:
{
 8012dd4:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	20d1      	movs	r0, #209	; 0xd1
 8012dda:	4611      	mov	r1, r2
 8012ddc:	f7ff fd5a 	bl	8012894 <SX126xWriteCommand>
}
 8012de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetOperatingMode( MODE_TX );
 8012de4:	2004      	movs	r0, #4
 8012de6:	f7f3 b9d9 	b.w	800619c <SX126xSetOperatingMode>

08012dea <SX126xSetStopRxTimerOnPreambleDetect>:
{
 8012dea:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8012dec:	2201      	movs	r2, #1
{
 8012dee:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8012df2:	f10d 0107 	add.w	r1, sp, #7
 8012df6:	209f      	movs	r0, #159	; 0x9f
 8012df8:	f7ff fd4c 	bl	8012894 <SX126xWriteCommand>
}
 8012dfc:	b003      	add	sp, #12
 8012dfe:	f85d fb04 	ldr.w	pc, [sp], #4

08012e02 <SX126xSetLoRaSymbNumTimeout>:
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 8012e02:	28f8      	cmp	r0, #248	; 0xf8
{
 8012e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 8012e06:	4604      	mov	r4, r0
 8012e08:	bf28      	it	cs
 8012e0a:	24f8      	movcs	r4, #248	; 0xf8
                       symbNum ) + 1 ) >> 1;
 8012e0c:	3401      	adds	r4, #1
{
 8012e0e:	4606      	mov	r6, r0
    uint8_t mant = ( ( ( symbNum > SX126X_MAX_LORA_SYMB_NUM_TIMEOUT ) ?
 8012e10:	f3c4 0446 	ubfx	r4, r4, #1, #7
    while( mant > 31 )
 8012e14:	2300      	movs	r3, #0
 8012e16:	2c1f      	cmp	r4, #31
 8012e18:	b2dd      	uxtb	r5, r3
 8012e1a:	f103 0301 	add.w	r3, r3, #1
 8012e1e:	d817      	bhi.n	8012e50 <SX126xSetLoRaSymbNumTimeout+0x4e>
    reg = mant << ( 2 * exp + 1 );
 8012e20:	006b      	lsls	r3, r5, #1
 8012e22:	3301      	adds	r3, #1
 8012e24:	fa04 f303 	lsl.w	r3, r4, r3
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 8012e28:	2201      	movs	r2, #1
 8012e2a:	f10d 0107 	add.w	r1, sp, #7
 8012e2e:	20a0      	movs	r0, #160	; 0xa0
    reg = mant << ( 2 * exp + 1 );
 8012e30:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 8012e34:	f7ff fd2e 	bl	8012894 <SX126xWriteCommand>
    if( symbNum != 0 )
 8012e38:	b146      	cbz	r6, 8012e4c <SX126xSetLoRaSymbNumTimeout+0x4a>
        reg = exp + ( mant << 3 );
 8012e3a:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012e3e:	b2c9      	uxtb	r1, r1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8012e40:	f240 7006 	movw	r0, #1798	; 0x706
        reg = exp + ( mant << 3 );
 8012e44:	f88d 1007 	strb.w	r1, [sp, #7]
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8012e48:	f7ff fd58 	bl	80128fc <SX126xWriteRegister>
}
 8012e4c:	b002      	add	sp, #8
 8012e4e:	bd70      	pop	{r4, r5, r6, pc}
        mant = ( mant + 3 ) >> 2;
 8012e50:	3403      	adds	r4, #3
 8012e52:	f3c4 0487 	ubfx	r4, r4, #2, #8
        exp++;
 8012e56:	e7de      	b.n	8012e16 <SX126xSetLoRaSymbNumTimeout+0x14>

08012e58 <SX126xSetRegulatorMode>:
{
 8012e58:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8012e5a:	2201      	movs	r2, #1
{
 8012e5c:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8012e60:	f10d 0107 	add.w	r1, sp, #7
 8012e64:	2096      	movs	r0, #150	; 0x96
 8012e66:	f7ff fd15 	bl	8012894 <SX126xWriteCommand>
}
 8012e6a:	b003      	add	sp, #12
 8012e6c:	f85d fb04 	ldr.w	pc, [sp], #4

08012e70 <SX126xCalibrate>:
{
 8012e70:	b507      	push	{r0, r1, r2, lr}
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8012e72:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012e76:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 8012e7a:	2201      	movs	r2, #1
 8012e7c:	f10d 0107 	add.w	r1, sp, #7
 8012e80:	2089      	movs	r0, #137	; 0x89
 8012e82:	f7ff fd07 	bl	8012894 <SX126xWriteCommand>
}
 8012e86:	b003      	add	sp, #12
 8012e88:	f85d fb04 	ldr.w	pc, [sp], #4

08012e8c <SX126xSetPaConfig>:
{
 8012e8c:	b507      	push	{r0, r1, r2, lr}
    buf[2] = deviceSel;
 8012e8e:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012e92:	2204      	movs	r2, #4
    buf[0] = paDutyCycle;
 8012e94:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8012e98:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012e9c:	2095      	movs	r0, #149	; 0x95
 8012e9e:	eb0d 0102 	add.w	r1, sp, r2
    buf[3] = paLut;
 8012ea2:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012ea6:	f7ff fcf5 	bl	8012894 <SX126xWriteCommand>
}
 8012eaa:	b003      	add	sp, #12
 8012eac:	f85d fb04 	ldr.w	pc, [sp], #4

08012eb0 <SX126xSetDioIrqParams>:
{
 8012eb0:	b513      	push	{r0, r1, r4, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8012eb2:	0a04      	lsrs	r4, r0, #8
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8012eb4:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8012eb8:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8012ebc:	0a08      	lsrs	r0, r1, #8
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8012ebe:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8012ec2:	0a11      	lsrs	r1, r2, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8012ec4:	0a1a      	lsrs	r2, r3, #8
 8012ec6:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8012eca:	2208      	movs	r2, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8012ecc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8012ed0:	f88d 1004 	strb.w	r1, [sp, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8012ed4:	4610      	mov	r0, r2
 8012ed6:	4669      	mov	r1, sp
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8012ed8:	f88d 4000 	strb.w	r4, [sp]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8012edc:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8012ee0:	f7ff fcd8 	bl	8012894 <SX126xWriteCommand>
}
 8012ee4:	b002      	add	sp, #8
 8012ee6:	bd10      	pop	{r4, pc}

08012ee8 <SX126xGetIrqStatus>:
{
 8012ee8:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8012eea:	2202      	movs	r2, #2
 8012eec:	a901      	add	r1, sp, #4
 8012eee:	2012      	movs	r0, #18
 8012ef0:	f7ff fcde 	bl	80128b0 <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8012ef4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8012ef8:	ba40      	rev16	r0, r0
}
 8012efa:	b280      	uxth	r0, r0
 8012efc:	b003      	add	sp, #12
 8012efe:	f85d fb04 	ldr.w	pc, [sp], #4

08012f02 <SX126xSetDio2AsRfSwitchCtrl>:
{
 8012f02:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8012f04:	2201      	movs	r2, #1
{
 8012f06:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8012f0a:	f10d 0107 	add.w	r1, sp, #7
 8012f0e:	209d      	movs	r0, #157	; 0x9d
 8012f10:	f7ff fcc0 	bl	8012894 <SX126xWriteCommand>
}
 8012f14:	b003      	add	sp, #12
 8012f16:	f85d fb04 	ldr.w	pc, [sp], #4

08012f1a <SX126xSetDio3AsTcxoCtrl>:
{
 8012f1a:	b507      	push	{r0, r1, r2, lr}
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012f1c:	0c0b      	lsrs	r3, r1, #16
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8012f1e:	2204      	movs	r2, #4
    buf[0] = tcxoVoltage & 0x07;
 8012f20:	f000 0007 	and.w	r0, r0, #7
 8012f24:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012f28:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8012f2c:	f88d 1007 	strb.w	r1, [sp, #7]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012f30:	0a0b      	lsrs	r3, r1, #8
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8012f32:	2097      	movs	r0, #151	; 0x97
 8012f34:	eb0d 0102 	add.w	r1, sp, r2
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012f38:	f88d 3006 	strb.w	r3, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8012f3c:	f7ff fcaa 	bl	8012894 <SX126xWriteCommand>
}
 8012f40:	b003      	add	sp, #12
 8012f42:	f85d fb04 	ldr.w	pc, [sp], #4

08012f46 <SX126xSetTxParams>:
{
 8012f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f48:	4604      	mov	r4, r0
 8012f4a:	460d      	mov	r5, r1
    if( SX126xGetDeviceId( ) == SX1261 )
 8012f4c:	f7ff fc6a 	bl	8012824 <SX126xGetDeviceId>
 8012f50:	2801      	cmp	r0, #1
 8012f52:	4603      	mov	r3, r0
 8012f54:	d11b      	bne.n	8012f8e <SX126xSetTxParams+0x48>
        if( power == 15 )
 8012f56:	2c0f      	cmp	r4, #15
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8012f58:	4602      	mov	r2, r0
 8012f5a:	f04f 0100 	mov.w	r1, #0
 8012f5e:	bf0c      	ite	eq
 8012f60:	2006      	moveq	r0, #6
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8012f62:	2004      	movne	r0, #4
 8012f64:	f7ff ff92 	bl	8012e8c <SX126xSetPaConfig>
        if( power >= 14 )
 8012f68:	f06f 0010 	mvn.w	r0, #16
 8012f6c:	4284      	cmp	r4, r0
 8012f6e:	bfb8      	it	lt
 8012f70:	4604      	movlt	r4, r0
 8012f72:	2c0e      	cmp	r4, #14
 8012f74:	bfa8      	it	ge
 8012f76:	240e      	movge	r4, #14
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8012f78:	2202      	movs	r2, #2
 8012f7a:	a901      	add	r1, sp, #4
 8012f7c:	208e      	movs	r0, #142	; 0x8e
    buf[0] = power;
 8012f7e:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 8012f82:	f88d 5005 	strb.w	r5, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8012f86:	f7ff fc85 	bl	8012894 <SX126xWriteCommand>
}
 8012f8a:	b003      	add	sp, #12
 8012f8c:	bd30      	pop	{r4, r5, pc}
        SX126xWriteRegister( REG_TX_CLAMP_CFG, SX126xReadRegister( REG_TX_CLAMP_CFG ) | ( 0x0F << 1 ) );
 8012f8e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012f92:	f7ff fcd4 	bl	801293e <SX126xReadRegister>
 8012f96:	f040 011e 	orr.w	r1, r0, #30
 8012f9a:	b2c9      	uxtb	r1, r1
 8012f9c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012fa0:	f7ff fcac 	bl	80128fc <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8012fa4:	2004      	movs	r0, #4
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	2200      	movs	r2, #0
 8012faa:	2107      	movs	r1, #7
 8012fac:	f7ff ff6e 	bl	8012e8c <SX126xSetPaConfig>
        if( power > 22 )
 8012fb0:	f06f 0008 	mvn.w	r0, #8
 8012fb4:	4284      	cmp	r4, r0
 8012fb6:	bfb8      	it	lt
 8012fb8:	4604      	movlt	r4, r0
 8012fba:	2c16      	cmp	r4, #22
 8012fbc:	bfa8      	it	ge
 8012fbe:	2416      	movge	r4, #22
 8012fc0:	e7da      	b.n	8012f78 <SX126xSetTxParams+0x32>

08012fc2 <SX126xSetBufferBaseAddress>:
{
 8012fc2:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8012fc4:	2202      	movs	r2, #2
    buf[0] = txBaseAddress;
 8012fc6:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8012fca:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8012fce:	208f      	movs	r0, #143	; 0x8f
 8012fd0:	a901      	add	r1, sp, #4
 8012fd2:	f7ff fc5f 	bl	8012894 <SX126xWriteCommand>
}
 8012fd6:	b003      	add	sp, #12
 8012fd8:	f85d fb04 	ldr.w	pc, [sp], #4

08012fdc <SX126xGetRssiInst>:
{
 8012fdc:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8012fde:	2201      	movs	r2, #1
 8012fe0:	a901      	add	r1, sp, #4
 8012fe2:	2015      	movs	r0, #21
 8012fe4:	f7ff fc64 	bl	80128b0 <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 8012fe8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8012fec:	4240      	negs	r0, r0
}
 8012fee:	1040      	asrs	r0, r0, #1
 8012ff0:	b003      	add	sp, #12
 8012ff2:	f85d fb04 	ldr.w	pc, [sp], #4

08012ff6 <SX126xGetPayload>:
{
 8012ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ff8:	460d      	mov	r5, r1
 8012ffa:	4606      	mov	r6, r0
    uint8_t offset = 0;
 8012ffc:	2400      	movs	r4, #0
    SX126xGetRxBufferStatus( size, &offset );
 8012ffe:	f10d 0107 	add.w	r1, sp, #7
 8013002:	4628      	mov	r0, r5
{
 8013004:	4617      	mov	r7, r2
    uint8_t offset = 0;
 8013006:	f88d 4007 	strb.w	r4, [sp, #7]
    SX126xGetRxBufferStatus( size, &offset );
 801300a:	f7f3 fc51 	bl	80068b0 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 801300e:	782a      	ldrb	r2, [r5, #0]
 8013010:	42ba      	cmp	r2, r7
 8013012:	d807      	bhi.n	8013024 <SX126xGetPayload+0x2e>
    SX126xReadBuffer( offset, buffer, *size );
 8013014:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013018:	4631      	mov	r1, r6
 801301a:	f7ff fc28 	bl	801286e <SX126xReadBuffer>
    return 0;
 801301e:	4620      	mov	r0, r4
}
 8013020:	b003      	add	sp, #12
 8013022:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 8013024:	2001      	movs	r0, #1
 8013026:	e7fb      	b.n	8013020 <SX126xGetPayload+0x2a>

08013028 <SX126xClearIrqStatus>:
{
 8013028:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 801302a:	2202      	movs	r2, #2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 801302c:	0a03      	lsrs	r3, r0, #8
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 801302e:	f88d 0005 	strb.w	r0, [sp, #5]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8013032:	a901      	add	r1, sp, #4
 8013034:	4610      	mov	r0, r2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8013036:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 801303a:	f7ff fc2b 	bl	8012894 <SX126xWriteCommand>
}
 801303e:	b003      	add	sp, #12
 8013040:	f85d fb04 	ldr.w	pc, [sp], #4

08013044 <RadioCheckRfFrequency>:
}
 8013044:	2001      	movs	r0, #1
 8013046:	4770      	bx	lr

08013048 <RadioStandby>:
    SX126xSetStandby( STDBY_RC );
 8013048:	2000      	movs	r0, #0
 801304a:	f7ff be05 	b.w	8012c58 <SX126xSetStandby>

0801304e <RadioSetChannel>:
    SX126xSetRfFrequency( freq );
 801304e:	f7f3 bb2b 	b.w	80066a8 <SX126xSetRfFrequency>

08013052 <RadioRead>:
    return SX126xReadRegister( addr );
 8013052:	b280      	uxth	r0, r0
 8013054:	f7ff bc73 	b.w	801293e <SX126xReadRegister>

08013058 <RadioWrite>:
    SX126xWriteRegister( addr, data );
 8013058:	b280      	uxth	r0, r0
 801305a:	f7ff bc4f 	b.w	80128fc <SX126xWriteRegister>

0801305e <RadioSleep>:
{
 801305e:	b508      	push	{r3, lr}
    SX126xSetSleep( params );
 8013060:	f04f 0004 	mov.w	r0, #4
 8013064:	f7f3 faac 	bl	80065c0 <SX126xSetSleep>
}
 8013068:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DelayMs( 2 );
 801306c:	2002      	movs	r0, #2
 801306e:	f7ff bdd2 	b.w	8012c16 <DelayMs>

08013072 <RadioSetRxDutyCycle>:
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 8013072:	f7ff be88 	b.w	8012d86 <SX126xSetRxDutyCycle>

08013076 <RadioReadBuffer>:
    SX126xReadRegisters( addr, buffer, size );
 8013076:	b280      	uxth	r0, r0
 8013078:	f7ff bc4b 	b.w	8012912 <SX126xReadRegisters>

0801307c <RadioWriteBuffer>:
    SX126xWriteRegisters( addr, buffer, size );
 801307c:	b280      	uxth	r0, r0
 801307e:	f7ff bc29 	b.w	80128d4 <SX126xWriteRegisters>

08013082 <RadioStartCad>:
{
 8013082:	b508      	push	{r3, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013084:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8013088:	2300      	movs	r3, #0
 801308a:	461a      	mov	r2, r3
 801308c:	4608      	mov	r0, r1
 801308e:	f7ff ff0f 	bl	8012eb0 <SX126xSetDioIrqParams>
}
 8013092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetCad( );
 8013096:	f7ff be92 	b.w	8012dbe <SX126xSetCad>

0801309a <RadioRssi>:
{
 801309a:	b508      	push	{r3, lr}
    return SX126xGetRssiInst( );
 801309c:	f7ff ff9e 	bl	8012fdc <SX126xGetRssiInst>
}
 80130a0:	b200      	sxth	r0, r0
 80130a2:	bd08      	pop	{r3, pc}

080130a4 <RadioGetWakeupTime>:
{
 80130a4:	b508      	push	{r3, lr}
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 80130a6:	f7ff fbbb 	bl	8012820 <SX126xGetBoardTcxoWakeupTime>
}
 80130aa:	3003      	adds	r0, #3
 80130ac:	bd08      	pop	{r3, pc}

080130ae <RadioIsChannelFree>:
{
 80130ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b2:	4604      	mov	r4, r0
 80130b4:	b08a      	sub	sp, #40	; 0x28
    RadioSetModem( MODEM_FSK );
 80130b6:	2000      	movs	r0, #0
{
 80130b8:	460d      	mov	r5, r1
 80130ba:	4617      	mov	r7, r2
 80130bc:	461e      	mov	r6, r3
    RadioSetModem( MODEM_FSK );
 80130be:	f7f3 fea1 	bl	8006e04 <RadioSetModem>
    SX126xSetRfFrequency( freq );
 80130c2:	4620      	mov	r0, r4
 80130c4:	f7f3 faf0 	bl	80066a8 <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80130c8:	2400      	movs	r4, #0
 80130ca:	f04f 0801 	mov.w	r8, #1
 80130ce:	2303      	movs	r3, #3
 80130d0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80130d4:	4629      	mov	r1, r5
 80130d6:	4620      	mov	r0, r4
 80130d8:	e9cd 4808 	strd	r4, r8, [sp, #32]
 80130dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80130e0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80130e4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80130e8:	e9cd 5300 	strd	r5, r3, [sp]
 80130ec:	4623      	mov	r3, r4
 80130ee:	f7f3 fe99 	bl	8006e24 <RadioSetRxConfig>
    RadioRx( 0 );
 80130f2:	4620      	mov	r0, r4
 80130f4:	f7f3 fcda 	bl	8006aac <RadioRx>
    DelayMs( 1 );
 80130f8:	4640      	mov	r0, r8
 80130fa:	f7ff fd8c 	bl	8012c16 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 80130fe:	f7ff fd74 	bl	8012bea <TimerGetCurrentTime>
 8013102:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8013104:	4620      	mov	r0, r4
 8013106:	f7ff fd77 	bl	8012bf8 <TimerGetElapsedTime>
 801310a:	42b0      	cmp	r0, r6
 801310c:	d306      	bcc.n	801311c <RadioIsChannelFree+0x6e>
    bool     status           = true;
 801310e:	2401      	movs	r4, #1
    RadioSleep( );
 8013110:	f7ff ffa5 	bl	801305e <RadioSleep>
}
 8013114:	4620      	mov	r0, r4
 8013116:	b00a      	add	sp, #40	; 0x28
 8013118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SX126xGetRssiInst( );
 801311c:	f7ff ff5e 	bl	8012fdc <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 8013120:	b200      	sxth	r0, r0
 8013122:	4287      	cmp	r7, r0
 8013124:	daee      	bge.n	8013104 <RadioIsChannelFree+0x56>
            status = false;
 8013126:	2400      	movs	r4, #0
 8013128:	e7f2      	b.n	8013110 <RadioIsChannelFree+0x62>

0801312a <RadioRandom>:
{
 801312a:	b508      	push	{r3, lr}
 801312c:	f7f3 fe58 	bl	8006de0 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013130:	2300      	movs	r3, #0
 8013132:	461a      	mov	r2, r3
 8013134:	4619      	mov	r1, r3
 8013136:	4618      	mov	r0, r3
 8013138:	f7ff feba 	bl	8012eb0 <SX126xSetDioIrqParams>
}
 801313c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rnd = SX126xGetRandom( );
 8013140:	f7ff bdd4 	b.w	8012cec <SX126xGetRandom>

08013144 <RadioAddRegisterToRetentionList>:
{
 8013144:	b530      	push	{r4, r5, lr}
 8013146:	b085      	sub	sp, #20
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8013148:	a901      	add	r1, sp, #4
{
 801314a:	4604      	mov	r4, r0
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 801314c:	2209      	movs	r2, #9
 801314e:	f240 209f 	movw	r0, #671	; 0x29f
 8013152:	f7ff fbde 	bl	8012912 <SX126xReadRegisters>
    const uint8_t nbOfRegisters = buffer[0];
 8013156:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 801315a:	a801      	add	r0, sp, #4
 801315c:	2100      	movs	r1, #0
 801315e:	b2ca      	uxtb	r2, r1
 8013160:	4293      	cmp	r3, r2
 8013162:	d817      	bhi.n	8013194 <RadioAddRegisterToRetentionList+0x50>
    if( nbOfRegisters < MAX_NB_REG_IN_RETENTION )
 8013164:	2b03      	cmp	r3, #3
 8013166:	d820      	bhi.n	80131aa <RadioAddRegisterToRetentionList+0x66>
        buffer[0] += 1;
 8013168:	1c5a      	adds	r2, r3, #1
 801316a:	f88d 2004 	strb.w	r2, [sp, #4]
        registerList[2 * nbOfRegisters]     = ( uint8_t )( registerAddress >> 8 );
 801316e:	a904      	add	r1, sp, #16
 8013170:	2202      	movs	r2, #2
 8013172:	fb03 1102 	mla	r1, r3, r2, r1
 8013176:	0a20      	lsrs	r0, r4, #8
 8013178:	f801 0c0b 	strb.w	r0, [r1, #-11]
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 801317c:	a904      	add	r1, sp, #16
 801317e:	fb02 1303 	mla	r3, r2, r3, r1
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8013182:	f240 209f 	movw	r0, #671	; 0x29f
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 8013186:	f803 4c0a 	strb.w	r4, [r3, #-10]
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 801318a:	2209      	movs	r2, #9
 801318c:	a901      	add	r1, sp, #4
 801318e:	f7ff fba1 	bl	80128d4 <SX126xWriteRegisters>
 8013192:	e00a      	b.n	80131aa <RadioAddRegisterToRetentionList+0x66>
        if( registerAddress == ( ( uint16_t ) registerList[2 * i] << 8 ) + registerList[2 * i + 1] )
 8013194:	4602      	mov	r2, r0
 8013196:	7845      	ldrb	r5, [r0, #1]
 8013198:	7892      	ldrb	r2, [r2, #2]
 801319a:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 801319e:	4294      	cmp	r4, r2
 80131a0:	f101 0101 	add.w	r1, r1, #1
 80131a4:	f100 0002 	add.w	r0, r0, #2
 80131a8:	d1d9      	bne.n	801315e <RadioAddRegisterToRetentionList+0x1a>
}
 80131aa:	b005      	add	sp, #20
 80131ac:	bd30      	pop	{r4, r5, pc}

080131ae <xor_block>:
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80131ae:	780a      	ldrb	r2, [r1, #0]
 80131b0:	7803      	ldrb	r3, [r0, #0]
 80131b2:	4053      	eors	r3, r2
 80131b4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80131b6:	784a      	ldrb	r2, [r1, #1]
 80131b8:	7843      	ldrb	r3, [r0, #1]
 80131ba:	4053      	eors	r3, r2
 80131bc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80131be:	788a      	ldrb	r2, [r1, #2]
 80131c0:	7883      	ldrb	r3, [r0, #2]
 80131c2:	4053      	eors	r3, r2
 80131c4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80131c6:	78ca      	ldrb	r2, [r1, #3]
 80131c8:	78c3      	ldrb	r3, [r0, #3]
 80131ca:	4053      	eors	r3, r2
 80131cc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80131ce:	790a      	ldrb	r2, [r1, #4]
 80131d0:	7903      	ldrb	r3, [r0, #4]
 80131d2:	4053      	eors	r3, r2
 80131d4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80131d6:	794a      	ldrb	r2, [r1, #5]
 80131d8:	7943      	ldrb	r3, [r0, #5]
 80131da:	4053      	eors	r3, r2
 80131dc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80131de:	798a      	ldrb	r2, [r1, #6]
 80131e0:	7983      	ldrb	r3, [r0, #6]
 80131e2:	4053      	eors	r3, r2
 80131e4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80131e6:	79ca      	ldrb	r2, [r1, #7]
 80131e8:	79c3      	ldrb	r3, [r0, #7]
 80131ea:	4053      	eors	r3, r2
 80131ec:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80131ee:	7a0a      	ldrb	r2, [r1, #8]
 80131f0:	7a03      	ldrb	r3, [r0, #8]
 80131f2:	4053      	eors	r3, r2
 80131f4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80131f6:	7a4a      	ldrb	r2, [r1, #9]
 80131f8:	7a43      	ldrb	r3, [r0, #9]
 80131fa:	4053      	eors	r3, r2
 80131fc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80131fe:	7a8a      	ldrb	r2, [r1, #10]
 8013200:	7a83      	ldrb	r3, [r0, #10]
 8013202:	4053      	eors	r3, r2
 8013204:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8013206:	7aca      	ldrb	r2, [r1, #11]
 8013208:	7ac3      	ldrb	r3, [r0, #11]
 801320a:	4053      	eors	r3, r2
 801320c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 801320e:	7b0a      	ldrb	r2, [r1, #12]
 8013210:	7b03      	ldrb	r3, [r0, #12]
 8013212:	4053      	eors	r3, r2
 8013214:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8013216:	7b4a      	ldrb	r2, [r1, #13]
 8013218:	7b43      	ldrb	r3, [r0, #13]
 801321a:	4053      	eors	r3, r2
 801321c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 801321e:	7b8a      	ldrb	r2, [r1, #14]
 8013220:	7b83      	ldrb	r3, [r0, #14]
 8013222:	4053      	eors	r3, r2
 8013224:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8013226:	7bca      	ldrb	r2, [r1, #15]
 8013228:	7bc3      	ldrb	r3, [r0, #15]
 801322a:	4053      	eors	r3, r2
 801322c:	73c3      	strb	r3, [r0, #15]
}
 801322e:	4770      	bx	lr

08013230 <copy_and_key>:
{
 8013230:	b510      	push	{r4, lr}
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8013232:	780b      	ldrb	r3, [r1, #0]
 8013234:	7814      	ldrb	r4, [r2, #0]
 8013236:	4063      	eors	r3, r4
 8013238:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 801323a:	7854      	ldrb	r4, [r2, #1]
 801323c:	784b      	ldrb	r3, [r1, #1]
 801323e:	4063      	eors	r3, r4
 8013240:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8013242:	7894      	ldrb	r4, [r2, #2]
 8013244:	788b      	ldrb	r3, [r1, #2]
 8013246:	4063      	eors	r3, r4
 8013248:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 801324a:	78d4      	ldrb	r4, [r2, #3]
 801324c:	78cb      	ldrb	r3, [r1, #3]
 801324e:	4063      	eors	r3, r4
 8013250:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8013252:	7914      	ldrb	r4, [r2, #4]
 8013254:	790b      	ldrb	r3, [r1, #4]
 8013256:	4063      	eors	r3, r4
 8013258:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 801325a:	7954      	ldrb	r4, [r2, #5]
 801325c:	794b      	ldrb	r3, [r1, #5]
 801325e:	4063      	eors	r3, r4
 8013260:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8013262:	7994      	ldrb	r4, [r2, #6]
 8013264:	798b      	ldrb	r3, [r1, #6]
 8013266:	4063      	eors	r3, r4
 8013268:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 801326a:	79d4      	ldrb	r4, [r2, #7]
 801326c:	79cb      	ldrb	r3, [r1, #7]
 801326e:	4063      	eors	r3, r4
 8013270:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8013272:	7a14      	ldrb	r4, [r2, #8]
 8013274:	7a0b      	ldrb	r3, [r1, #8]
 8013276:	4063      	eors	r3, r4
 8013278:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 801327a:	7a54      	ldrb	r4, [r2, #9]
 801327c:	7a4b      	ldrb	r3, [r1, #9]
 801327e:	4063      	eors	r3, r4
 8013280:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8013282:	7a8b      	ldrb	r3, [r1, #10]
 8013284:	7a94      	ldrb	r4, [r2, #10]
 8013286:	4063      	eors	r3, r4
 8013288:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 801328a:	7ad4      	ldrb	r4, [r2, #11]
 801328c:	7acb      	ldrb	r3, [r1, #11]
 801328e:	4063      	eors	r3, r4
 8013290:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8013292:	7b14      	ldrb	r4, [r2, #12]
 8013294:	7b0b      	ldrb	r3, [r1, #12]
 8013296:	4063      	eors	r3, r4
 8013298:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 801329a:	7b54      	ldrb	r4, [r2, #13]
 801329c:	7b4b      	ldrb	r3, [r1, #13]
 801329e:	4063      	eors	r3, r4
 80132a0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80132a2:	7b94      	ldrb	r4, [r2, #14]
 80132a4:	7b8b      	ldrb	r3, [r1, #14]
 80132a6:	4063      	eors	r3, r4
 80132a8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80132aa:	7bcb      	ldrb	r3, [r1, #15]
 80132ac:	7bd2      	ldrb	r2, [r2, #15]
 80132ae:	4053      	eors	r3, r2
 80132b0:	73c3      	strb	r3, [r0, #15]
}
 80132b2:	bd10      	pop	{r4, pc}

080132b4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80132b4:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
 80132b6:	2210      	movs	r2, #16
{
 80132b8:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80132ba:	2100      	movs	r1, #0
 80132bc:	30f1      	adds	r0, #241	; 0xf1
 80132be:	f7ff fb93 	bl	80129e8 <memset1>
    ctx->M_n = 0;
 80132c2:	2100      	movs	r1, #0
 80132c4:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80132c8:	4620      	mov	r0, r4
 80132ca:	22f0      	movs	r2, #240	; 0xf0
}
 80132cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80132d0:	f7ff bb8a 	b.w	80129e8 <memset1>

080132d4 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80132d4:	4602      	mov	r2, r0
 80132d6:	4608      	mov	r0, r1
    aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80132d8:	2110      	movs	r1, #16
 80132da:	f7f3 bfa1 	b.w	8007220 <aes_set_key>

080132de <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80132de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132e2:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80132e4:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 80132e8:	b085      	sub	sp, #20
 80132ea:	460e      	mov	r6, r1
 80132ec:	4615      	mov	r5, r2
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80132ee:	f204 1701 	addw	r7, r4, #257	; 0x101
    if( ctx->M_n > 0 )
 80132f2:	b388      	cbz	r0, 8013358 <AES_CMAC_Update+0x7a>
        mlen = MIN( 16 - ctx->M_n, len );
 80132f4:	f1c0 0910 	rsb	r9, r0, #16
 80132f8:	4591      	cmp	r9, r2
 80132fa:	46c8      	mov	r8, r9
 80132fc:	bf28      	it	cs
 80132fe:	4690      	movcs	r8, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8013300:	fa1f f288 	uxth.w	r2, r8
 8013304:	4438      	add	r0, r7
 8013306:	f7ff fb5b 	bl	80129c0 <memcpy1>
        ctx->M_n += mlen;
 801330a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 801330e:	4443      	add	r3, r8
        if( ctx->M_n < 16 || len == mlen )
 8013310:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
 8013312:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8013316:	d928      	bls.n	801336a <AES_CMAC_Update+0x8c>
 8013318:	45a9      	cmp	r9, r5
 801331a:	d226      	bcs.n	801336a <AES_CMAC_Update+0x8c>
 801331c:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8013320:	4699      	mov	r9, r3
            return;
        XOR( ctx->M_last, ctx->X );
 8013322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013326:	7bd9      	ldrb	r1, [r3, #15]
 8013328:	42bb      	cmp	r3, r7
 801332a:	ea82 0201 	eor.w	r2, r2, r1
 801332e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013332:	d1f6      	bne.n	8013322 <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013334:	2210      	movs	r2, #16
 8013336:	4649      	mov	r1, r9
 8013338:	4668      	mov	r0, sp
 801333a:	f7ff fb41 	bl	80129c0 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 801333e:	4622      	mov	r2, r4
 8013340:	4669      	mov	r1, sp
 8013342:	4668      	mov	r0, sp
 8013344:	f7f3 ffe8 	bl	8007318 <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8013348:	2210      	movs	r2, #16
 801334a:	4669      	mov	r1, sp
 801334c:	4648      	mov	r0, r9
 801334e:	f7ff fb37 	bl	80129c0 <memcpy1>

        data += mlen;
 8013352:	4446      	add	r6, r8
        len -= mlen;
 8013354:	eba5 0508 	sub.w	r5, r5, r8
    }
    while( len > 16 )
 8013358:	2d10      	cmp	r5, #16
 801335a:	d809      	bhi.n	8013370 <AES_CMAC_Update+0x92>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801335c:	b2aa      	uxth	r2, r5
 801335e:	4631      	mov	r1, r6
 8013360:	4638      	mov	r0, r7
 8013362:	f7ff fb2d 	bl	80129c0 <memcpy1>
    ctx->M_n = len;
 8013366:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 801336a:	b005      	add	sp, #20
 801336c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013370:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8013374:	1e71      	subs	r1, r6, #1
 8013376:	4698      	mov	r8, r3
        XOR( data, ctx->X );
 8013378:	781a      	ldrb	r2, [r3, #0]
 801337a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801337e:	4042      	eors	r2, r0
 8013380:	f803 2b01 	strb.w	r2, [r3], #1
 8013384:	42bb      	cmp	r3, r7
 8013386:	d1f7      	bne.n	8013378 <AES_CMAC_Update+0x9a>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013388:	2210      	movs	r2, #16
 801338a:	4641      	mov	r1, r8
 801338c:	4668      	mov	r0, sp
 801338e:	f7ff fb17 	bl	80129c0 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 8013392:	4622      	mov	r2, r4
 8013394:	4669      	mov	r1, sp
 8013396:	4668      	mov	r0, sp
 8013398:	f7f3 ffbe 	bl	8007318 <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801339c:	2210      	movs	r2, #16
 801339e:	4669      	mov	r1, sp
 80133a0:	4640      	mov	r0, r8
 80133a2:	f7ff fb0d 	bl	80129c0 <memcpy1>
        data += 16;
 80133a6:	3610      	adds	r6, #16
        len -= 16;
 80133a8:	3d10      	subs	r5, #16
 80133aa:	e7d5      	b.n	8013358 <AES_CMAC_Update+0x7a>

080133ac <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80133ac:	b570      	push	{r4, r5, r6, lr}
 80133ae:	b088      	sub	sp, #32
 80133b0:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80133b2:	2210      	movs	r2, #16
 80133b4:	2100      	movs	r1, #0
{
 80133b6:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
 80133b8:	4668      	mov	r0, sp
 80133ba:	f7ff fb15 	bl	80129e8 <memset1>

    aes_encrypt( K, K, &ctx->rijndael );
 80133be:	4622      	mov	r2, r4
 80133c0:	4669      	mov	r1, sp
 80133c2:	4668      	mov	r0, sp
 80133c4:	f7f3 ffa8 	bl	8007318 <aes_encrypt>

    if( K[0] & 0x80 )
 80133c8:	f99d 3000 	ldrsb.w	r3, [sp]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	466a      	mov	r2, sp
    {
        LSHIFT( K, K );
 80133d0:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
 80133d4:	da41      	bge.n	801345a <AES_CMAC_Final+0xae>
        LSHIFT( K, K );
 80133d6:	7813      	ldrb	r3, [r2, #0]
 80133d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80133dc:	3101      	adds	r1, #1
 80133de:	005b      	lsls	r3, r3, #1
 80133e0:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80133e4:	290f      	cmp	r1, #15
 80133e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80133ea:	d1f4      	bne.n	80133d6 <AES_CMAC_Final+0x2a>
 80133ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80133f0:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 80133f2:	f083 0387 	eor.w	r3, r3, #135	; 0x87
    }
    else
        LSHIFT( K, K );
 80133f6:	f88d 300f 	strb.w	r3, [sp, #15]

    if( ctx->M_n == 16 )
 80133fa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80133fe:	2b10      	cmp	r3, #16
 8013400:	d13a      	bne.n	8013478 <AES_CMAC_Final+0xcc>
 8013402:	f204 1301 	addw	r3, r4, #257	; 0x101
 8013406:	4669      	mov	r1, sp
 8013408:	f204 1011 	addw	r0, r4, #273	; 0x111
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 801340c:	781a      	ldrb	r2, [r3, #0]
 801340e:	f811 6b01 	ldrb.w	r6, [r1], #1
 8013412:	4072      	eors	r2, r6
 8013414:	f803 2b01 	strb.w	r2, [r3], #1
 8013418:	4298      	cmp	r0, r3
 801341a:	d1f7      	bne.n	801340c <AES_CMAC_Final+0x60>
 801341c:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8013420:	f204 1001 	addw	r0, r4, #257	; 0x101
 8013424:	4619      	mov	r1, r3
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8013426:	f813 2b01 	ldrb.w	r2, [r3], #1
 801342a:	7bde      	ldrb	r6, [r3, #15]
 801342c:	4298      	cmp	r0, r3
 801342e:	ea82 0206 	eor.w	r2, r2, r6
 8013432:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013436:	d1f6      	bne.n	8013426 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013438:	2210      	movs	r2, #16
 801343a:	eb0d 0002 	add.w	r0, sp, r2
 801343e:	f7ff fabf 	bl	80129c0 <memcpy1>
    aes_encrypt( in, digest, &ctx->rijndael );
 8013442:	4622      	mov	r2, r4
 8013444:	4629      	mov	r1, r5
 8013446:	a804      	add	r0, sp, #16
 8013448:	f7f3 ff66 	bl	8007318 <aes_encrypt>
    memset1( K, 0, sizeof K );
 801344c:	2210      	movs	r2, #16
 801344e:	2100      	movs	r1, #0
 8013450:	4668      	mov	r0, sp
 8013452:	f7ff fac9 	bl	80129e8 <memset1>
}
 8013456:	b008      	add	sp, #32
 8013458:	bd70      	pop	{r4, r5, r6, pc}
        LSHIFT( K, K );
 801345a:	7813      	ldrb	r3, [r2, #0]
 801345c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013460:	3101      	adds	r1, #1
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8013468:	290f      	cmp	r1, #15
 801346a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801346e:	d1f4      	bne.n	801345a <AES_CMAC_Final+0xae>
 8013470:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013474:	005b      	lsls	r3, r3, #1
 8013476:	e7be      	b.n	80133f6 <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
 8013478:	f99d 2000 	ldrsb.w	r2, [sp]
 801347c:	2a00      	cmp	r2, #0
 801347e:	4669      	mov	r1, sp
            LSHIFT( K, K );
 8013480:	f04f 0000 	mov.w	r0, #0
        if( K[0] & 0x80 )
 8013484:	da36      	bge.n	80134f4 <AES_CMAC_Final+0x148>
            LSHIFT( K, K );
 8013486:	780a      	ldrb	r2, [r1, #0]
 8013488:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 801348c:	3001      	adds	r0, #1
 801348e:	0052      	lsls	r2, r2, #1
 8013490:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8013494:	280f      	cmp	r0, #15
 8013496:	f801 2c01 	strb.w	r2, [r1, #-1]
 801349a:	d1f4      	bne.n	8013486 <AES_CMAC_Final+0xda>
 801349c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80134a0:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 80134a2:	f082 0287 	eor.w	r2, r2, #135	; 0x87
            LSHIFT( K, K );
 80134a6:	f88d 200f 	strb.w	r2, [sp, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 80134aa:	18e2      	adds	r2, r4, r3
 80134ac:	2180      	movs	r1, #128	; 0x80
 80134ae:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80134b2:	f46f 7080 	mvn.w	r0, #256	; 0x100
 80134b6:	f503 7281 	add.w	r2, r3, #258	; 0x102
 80134ba:	4422      	add	r2, r4
 80134bc:	1b00      	subs	r0, r0, r4
            ctx->M_last[ctx->M_n] = 0;
 80134be:	2600      	movs	r6, #0
        while( ++ctx->M_n < 16 )
 80134c0:	1881      	adds	r1, r0, r2
 80134c2:	290f      	cmp	r1, #15
 80134c4:	d925      	bls.n	8013512 <AES_CMAC_Final+0x166>
 80134c6:	1c5a      	adds	r2, r3, #1
 80134c8:	2a10      	cmp	r2, #16
 80134ca:	f1c3 030f 	rsb	r3, r3, #15
 80134ce:	bf88      	it	hi
 80134d0:	2300      	movhi	r3, #0
 80134d2:	4413      	add	r3, r2
 80134d4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80134d8:	4669      	mov	r1, sp
 80134da:	f204 1301 	addw	r3, r4, #257	; 0x101
 80134de:	f204 1011 	addw	r0, r4, #273	; 0x111
        XOR( K, ctx->M_last );
 80134e2:	781a      	ldrb	r2, [r3, #0]
 80134e4:	f811 6b01 	ldrb.w	r6, [r1], #1
 80134e8:	4072      	eors	r2, r6
 80134ea:	f803 2b01 	strb.w	r2, [r3], #1
 80134ee:	4298      	cmp	r0, r3
 80134f0:	d1f7      	bne.n	80134e2 <AES_CMAC_Final+0x136>
 80134f2:	e793      	b.n	801341c <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 80134f4:	780a      	ldrb	r2, [r1, #0]
 80134f6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80134fa:	3001      	adds	r0, #1
 80134fc:	0052      	lsls	r2, r2, #1
 80134fe:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8013502:	280f      	cmp	r0, #15
 8013504:	f801 2c01 	strb.w	r2, [r1, #-1]
 8013508:	d1f4      	bne.n	80134f4 <AES_CMAC_Final+0x148>
 801350a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801350e:	0052      	lsls	r2, r2, #1
 8013510:	e7c9      	b.n	80134a6 <AES_CMAC_Final+0xfa>
            ctx->M_last[ctx->M_n] = 0;
 8013512:	f802 6b01 	strb.w	r6, [r2], #1
 8013516:	e7d3      	b.n	80134c0 <AES_CMAC_Final+0x114>

08013518 <SecureElementComputeAesCmac>:
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8013518:	2b7e      	cmp	r3, #126	; 0x7e
{
 801351a:	b410      	push	{r4}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 801351c:	d802      	bhi.n	8013524 <SecureElementComputeAesCmac+0xc>
}
 801351e:	bc10      	pop	{r4}
    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8013520:	f7f4 b850 	b.w	80075c4 <ComputeCmac>
}
 8013524:	2003      	movs	r0, #3
 8013526:	bc10      	pop	{r4}
 8013528:	4770      	bx	lr

0801352a <SecureElementVerifyAesCmac>:
{
 801352a:	b530      	push	{r4, r5, lr}
 801352c:	460d      	mov	r5, r1
 801352e:	b085      	sub	sp, #20
 8013530:	4614      	mov	r4, r2
    if( buffer == NULL )
 8013532:	4601      	mov	r1, r0
 8013534:	b168      	cbz	r0, 8013552 <SecureElementVerifyAesCmac+0x28>
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8013536:	aa03      	add	r2, sp, #12
    uint32_t              compCmac = 0;
 8013538:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801353a:	9200      	str	r2, [sp, #0]
 801353c:	462a      	mov	r2, r5
    uint32_t              compCmac = 0;
 801353e:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8013540:	f7f4 f840 	bl	80075c4 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013544:	b918      	cbnz	r0, 801354e <SecureElementVerifyAesCmac+0x24>
        return SECURE_ELEMENT_ERROR_NPE;
 8013546:	9803      	ldr	r0, [sp, #12]
 8013548:	1b00      	subs	r0, r0, r4
 801354a:	bf18      	it	ne
 801354c:	2001      	movne	r0, #1
}
 801354e:	b005      	add	sp, #20
 8013550:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013552:	2002      	movs	r0, #2
 8013554:	e7fb      	b.n	801354e <SecureElementVerifyAesCmac+0x24>

08013556 <SecureElementSetKey>:
    if( key == NULL )
 8013556:	b109      	cbz	r1, 801355c <SecureElementSetKey+0x6>
 8013558:	f7f4 b94c 	b.w	80077f4 <SecureElementSetKey.part.0>
}
 801355c:	2002      	movs	r0, #2
 801355e:	4770      	bx	lr

08013560 <SecureElementDeriveAndStoreKey>:
{
 8013560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013562:	4614      	mov	r4, r2
    if( input == NULL )
 8013564:	b1a0      	cbz	r0, 8013590 <SecureElementDeriveAndStoreKey+0x30>
    uint8_t               key[16] = { 0 };
 8013566:	2300      	movs	r3, #0
    if( targetKeyID == MC_KE_KEY )
 8013568:	2a7f      	cmp	r2, #127	; 0x7f
    uint8_t               key[16] = { 0 };
 801356a:	e9cd 3300 	strd	r3, r3, [sp]
 801356e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( targetKeyID == MC_KE_KEY )
 8013572:	d101      	bne.n	8013578 <SecureElementDeriveAndStoreKey+0x18>
        if( rootKeyID != MC_ROOT_KEY )
 8013574:	2908      	cmp	r1, #8
 8013576:	d10d      	bne.n	8013594 <SecureElementDeriveAndStoreKey+0x34>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8013578:	460a      	mov	r2, r1
 801357a:	466b      	mov	r3, sp
 801357c:	2110      	movs	r1, #16
 801357e:	f7f4 f8fb 	bl	8007778 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013582:	b918      	cbnz	r0, 801358c <SecureElementDeriveAndStoreKey+0x2c>
    if( key == NULL )
 8013584:	4669      	mov	r1, sp
 8013586:	4620      	mov	r0, r4
 8013588:	f7f4 f934 	bl	80077f4 <SecureElementSetKey.part.0>
}
 801358c:	b004      	add	sp, #16
 801358e:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013590:	2002      	movs	r0, #2
 8013592:	e7fb      	b.n	801358c <SecureElementDeriveAndStoreKey+0x2c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013594:	2003      	movs	r0, #3
 8013596:	e7f9      	b.n	801358c <SecureElementDeriveAndStoreKey+0x2c>

08013598 <SecureElementProcessJoinAccept>:
{
 8013598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 801359c:	461f      	mov	r7, r3
{
 801359e:	e9dd 5809 	ldrd	r5, r8, [sp, #36]	; 0x24
 80135a2:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d038      	beq.n	801361c <SecureElementProcessJoinAccept+0x84>
 80135aa:	b3bd      	cbz	r5, 801361c <SecureElementProcessJoinAccept+0x84>
 80135ac:	f1b8 0f00 	cmp.w	r8, #0
 80135b0:	d034      	beq.n	801361c <SecureElementProcessJoinAccept+0x84>
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80135b2:	2c21      	cmp	r4, #33	; 0x21
 80135b4:	d834      	bhi.n	8013620 <SecureElementProcessJoinAccept+0x88>
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80135b6:	b2a6      	uxth	r6, r4
        encKeyID = J_S_ENC_KEY;
 80135b8:	28ff      	cmp	r0, #255	; 0xff
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80135ba:	4619      	mov	r1, r3
 80135bc:	4632      	mov	r2, r6
 80135be:	4628      	mov	r0, r5
        encKeyID = J_S_ENC_KEY;
 80135c0:	bf0c      	ite	eq
 80135c2:	f04f 0901 	moveq.w	r9, #1
 80135c6:	f04f 0903 	movne.w	r9, #3
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80135ca:	f7ff f9f9 	bl	80129c0 <memcpy1>
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80135ce:	1e71      	subs	r1, r6, #1
 80135d0:	1c6b      	adds	r3, r5, #1
 80135d2:	464a      	mov	r2, r9
 80135d4:	b289      	uxth	r1, r1
 80135d6:	1c78      	adds	r0, r7, #1
 80135d8:	f7f4 f8ce 	bl	8007778 <SecureElementAesEncrypt>
 80135dc:	bb10      	cbnz	r0, 8013624 <SecureElementProcessJoinAccept+0x8c>
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80135de:	7aeb      	ldrb	r3, [r5, #11]
 80135e0:	09db      	lsrs	r3, r3, #7
 80135e2:	f888 3000 	strb.w	r3, [r8]
    if( *versionMinor == 0 )
 80135e6:	b9fb      	cbnz	r3, 8013628 <SecureElementProcessJoinAccept+0x90>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 80135e8:	192b      	adds	r3, r5, r4
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80135ea:	1f31      	subs	r1, r6, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 80135ec:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 80135f0:	f813 2c02 	ldrb.w	r2, [r3, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 80135f4:	0600      	lsls	r0, r0, #24
 80135f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 80135fa:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80135fe:	4310      	orrs	r0, r2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8013600:	f813 2c03 	ldrb.w	r2, [r3, #-3]
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8013604:	b289      	uxth	r1, r1
 8013606:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 801360a:	2301      	movs	r3, #1
 801360c:	4628      	mov	r0, r5
 801360e:	f7ff ff8c 	bl	801352a <SecureElementVerifyAesCmac>
        return SECURE_ELEMENT_ERROR_NPE;
 8013612:	3800      	subs	r0, #0
 8013614:	bf18      	it	ne
 8013616:	2001      	movne	r0, #1
}
 8013618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801361c:	2002      	movs	r0, #2
 801361e:	e7fb      	b.n	8013618 <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8013620:	2005      	movs	r0, #5
 8013622:	e7f9      	b.n	8013618 <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8013624:	2007      	movs	r0, #7
 8013626:	e7f7      	b.n	8013618 <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8013628:	2004      	movs	r0, #4
 801362a:	e7f5      	b.n	8013618 <SecureElementProcessJoinAccept+0x80>

0801362c <SoftSeHalGetUniqueId>:

#include "soft-se-hal.h"

void SoftSeHalGetUniqueId( uint8_t *id )
{
    BoardGetUniqueId( id );
 801362c:	f7ff b889 	b.w	8012742 <BoardGetUniqueId>

08013630 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013630:	4603      	mov	r3, r0
 8013632:	b1d0      	cbz	r0, 801366a <DetermineFrameType+0x3a>
 8013634:	b1c9      	cbz	r1, 801366a <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013636:	7b02      	ldrb	r2, [r0, #12]
 8013638:	f012 020f 	ands.w	r2, r2, #15
 801363c:	d005      	beq.n	801364a <DetermineFrameType+0x1a>
 801363e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8013642:	b110      	cbz	r0, 801364a <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 8013644:	2000      	movs	r0, #0
 8013646:	7008      	strb	r0, [r1, #0]
 8013648:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 801364a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 801364e:	b910      	cbnz	r0, 8013656 <DetermineFrameType+0x26>
        *fType = FRAME_TYPE_B;
 8013650:	2301      	movs	r3, #1
        *fType = FRAME_TYPE_C;
 8013652:	700b      	strb	r3, [r1, #0]
 8013654:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013656:	b952      	cbnz	r2, 801366e <DetermineFrameType+0x3e>
 8013658:	f893 0020 	ldrb.w	r0, [r3, #32]
 801365c:	b908      	cbnz	r0, 8013662 <DetermineFrameType+0x32>
        *fType = FRAME_TYPE_C;
 801365e:	2302      	movs	r3, #2
 8013660:	e7f7      	b.n	8013652 <DetermineFrameType+0x22>
        *fType = FRAME_TYPE_D;
 8013662:	2303      	movs	r3, #3
 8013664:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
 8013666:	4610      	mov	r0, r2
        *fType = FRAME_TYPE_D;
 8013668:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801366a:	2003      	movs	r0, #3
 801366c:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 801366e:	2017      	movs	r0, #23
}
 8013670:	4770      	bx	lr

08013672 <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8013672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013676:	b08b      	sub	sp, #44	; 0x2c
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;

    if( adrNext->AdrEnabled == true )
 8013678:	7847      	ldrb	r7, [r0, #1]
{
 801367a:	9300      	str	r3, [sp, #0]
    *adrAckCounter = adrNext->AdrAckCounter;
 801367c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    int8_t datarate = adrNext->Datarate;
 801367e:	f990 800c 	ldrsb.w	r8, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 8013682:	f990 600d 	ldrsb.w	r6, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 8013686:	f890 900e 	ldrb.w	r9, [r0, #14]
{
 801368a:	468b      	mov	fp, r1
    *adrAckCounter = adrNext->AdrAckCounter;
 801368c:	6841      	ldr	r1, [r0, #4]
 801368e:	6019      	str	r1, [r3, #0]
{
 8013690:	4604      	mov	r4, r0
 8013692:	4692      	mov	sl, r2
    if( adrNext->AdrEnabled == true )
 8013694:	2f00      	cmp	r7, #0
 8013696:	d057      	beq.n	8013748 <LoRaMacAdrCalcNext+0xd6>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013698:	2302      	movs	r3, #2
 801369a:	f88d 3010 	strb.w	r3, [sp, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801369e:	a904      	add	r1, sp, #16
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80136a0:	7bc3      	ldrb	r3, [r0, #15]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80136a2:	7c00      	ldrb	r0, [r0, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80136a4:	f88d 3012 	strb.w	r3, [sp, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80136a8:	f000 faa0 	bl	8013bec <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
        datarate = MAX( datarate, minTxDatarate );

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80136ac:	f8b4 c008 	ldrh.w	ip, [r4, #8]
        {
            adrAckReq = true;
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80136b0:	8961      	ldrh	r1, [r4, #10]
        minTxDatarate = phyParam.Value;
 80136b2:	b243      	sxtb	r3, r0
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80136b4:	6860      	ldr	r0, [r4, #4]
        datarate = MAX( datarate, minTxDatarate );
 80136b6:	4598      	cmp	r8, r3
 80136b8:	4645      	mov	r5, r8
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80136ba:	4461      	add	r1, ip
        datarate = MAX( datarate, minTxDatarate );
 80136bc:	bfb8      	it	lt
 80136be:	461d      	movlt	r5, r3
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80136c0:	4560      	cmp	r0, ip
 80136c2:	bf34      	ite	cc
 80136c4:	2700      	movcc	r7, #0
 80136c6:	2701      	movcs	r7, #1
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80136c8:	4288      	cmp	r0, r1
 80136ca:	d309      	bcc.n	80136e0 <LoRaMacAdrCalcNext+0x6e>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80136cc:	210a      	movs	r1, #10
 80136ce:	f88d 1010 	strb.w	r1, [sp, #16]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80136d2:	7c20      	ldrb	r0, [r4, #16]
 80136d4:	9301      	str	r3, [sp, #4]
 80136d6:	a904      	add	r1, sp, #16
 80136d8:	f000 fa88 	bl	8013bec <RegionGetPhyParam>
            txPower = phyParam.Value;
 80136dc:	9b01      	ldr	r3, [sp, #4]
 80136de:	b246      	sxtb	r6, r0
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80136e0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80136e4:	8960      	ldrh	r0, [r4, #10]
 80136e6:	6861      	ldr	r1, [r4, #4]
 80136e8:	eb0c 0e40 	add.w	lr, ip, r0, lsl #1
 80136ec:	4571      	cmp	r1, lr
 80136ee:	d320      	bcc.n	8013732 <LoRaMacAdrCalcNext+0xc0>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80136f0:	eba1 010c 	sub.w	r1, r1, ip
 80136f4:	fbb1 fcf0 	udiv	ip, r1, r0
 80136f8:	fb00 111c 	mls	r1, r0, ip, r1
 80136fc:	b9c9      	cbnz	r1, 8013732 <LoRaMacAdrCalcNext+0xc0>
            {
                if( datarate == minTxDatarate )
 80136fe:	4598      	cmp	r8, r3
 8013700:	dc0a      	bgt.n	8013718 <LoRaMacAdrCalcNext+0xa6>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8013702:	7823      	ldrb	r3, [r4, #0]
 8013704:	b133      	cbz	r3, 8013714 <LoRaMacAdrCalcNext+0xa2>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013706:	2302      	movs	r3, #2
                        RegionInitDefaults( adrNext->Region, &params );
 8013708:	7c20      	ldrb	r0, [r4, #16]
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801370a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        RegionInitDefaults( adrNext->Region, &params );
 801370e:	a906      	add	r1, sp, #24
 8013710:	f000 fa7c 	bl	8013c0c <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8013714:	f04f 0901 	mov.w	r9, #1
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013718:	2320      	movs	r3, #32
 801371a:	f88d 3010 	strb.w	r3, [sp, #16]
                getPhy.Datarate = datarate;
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801371e:	7c20      	ldrb	r0, [r4, #16]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013720:	7be3      	ldrb	r3, [r4, #15]
                getPhy.Datarate = datarate;
 8013722:	f88d 5011 	strb.w	r5, [sp, #17]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013726:	a904      	add	r1, sp, #16
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013728:	f88d 3012 	strb.w	r3, [sp, #18]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801372c:	f000 fa5e 	bl	8013bec <RegionGetPhyParam>
                datarate = phyParam.Value;
 8013730:	b245      	sxtb	r5, r0
        }
    }

    *drOut = datarate;
    *txPowOut = txPower;
    *nbTransOut = nbTrans;
 8013732:	9b00      	ldr	r3, [sp, #0]
    *drOut = datarate;
 8013734:	f88b 5000 	strb.w	r5, [fp]
    return adrAckReq;
}
 8013738:	4638      	mov	r0, r7
    *txPowOut = txPower;
 801373a:	f88a 6000 	strb.w	r6, [sl]
    *nbTransOut = nbTrans;
 801373e:	f883 9000 	strb.w	r9, [r3]
}
 8013742:	b00b      	add	sp, #44	; 0x2c
 8013744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int8_t datarate = adrNext->Datarate;
 8013748:	4645      	mov	r5, r8
 801374a:	e7f2      	b.n	8013732 <LoRaMacAdrCalcNext+0xc0>

0801374c <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 801374c:	4770      	bx	lr

0801374e <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801374e:	4770      	bx	lr

08013750 <LoRaMacClassBSetPingSlotState>:
 8013750:	4770      	bx	lr

08013752 <LoRaMacClassBSetMulticastSlotState>:
 8013752:	4770      	bx	lr

08013754 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013754:	2000      	movs	r0, #0
 8013756:	4770      	bx	lr

08013758 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013758:	4770      	bx	lr

0801375a <LoRaMacClassBPingSlotTimerEvent>:
 801375a:	4770      	bx	lr

0801375c <LoRaMacClassBMulticastSlotTimerEvent>:
 801375c:	4770      	bx	lr

0801375e <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 801375e:	2000      	movs	r0, #0
 8013760:	4770      	bx	lr

08013762 <LoRaMacClassBIsBeaconExpected>:
 8013762:	2000      	movs	r0, #0
 8013764:	4770      	bx	lr

08013766 <LoRaMacClassBIsPingExpected>:
 8013766:	2000      	movs	r0, #0
 8013768:	4770      	bx	lr

0801376a <LoRaMacClassBIsMulticastExpected>:
 801376a:	2000      	movs	r0, #0
 801376c:	4770      	bx	lr

0801376e <LoRaMacClassBIsBeaconModeActive>:
 801376e:	2000      	movs	r0, #0
 8013770:	4770      	bx	lr

08013772 <LoRaMacClassBSetPingSlotInfo>:
 8013772:	4770      	bx	lr

08013774 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013774:	4770      	bx	lr

08013776 <LoRaMacClassBResumeBeaconing>:
 8013776:	4770      	bx	lr

08013778 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013778:	2002      	movs	r0, #2
 801377a:	4770      	bx	lr

0801377c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 801377c:	2002      	movs	r0, #2
 801377e:	4770      	bx	lr

08013780 <LoRaMacMibClassBSetRequestConfirm>:
 8013780:	2002      	movs	r0, #2
 8013782:	4770      	bx	lr

08013784 <LoRaMacClassBPingSlotInfoAns>:
 8013784:	4770      	bx	lr

08013786 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013786:	2000      	movs	r0, #0
 8013788:	4770      	bx	lr

0801378a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801378a:	4770      	bx	lr

0801378c <LoRaMacClassBDeviceTimeAns>:
 801378c:	4770      	bx	lr

0801378e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 801378e:	2000      	movs	r0, #0
 8013790:	4770      	bx	lr

08013792 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013792:	2000      	movs	r0, #0
 8013794:	4770      	bx	lr

08013796 <LoRaMacClassBStopRxSlots>:
 8013796:	4770      	bx	lr

08013798 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
 8013798:	4770      	bx	lr

0801379a <LoRaMacClassBProcess>:
 801379a:	4770      	bx	lr

0801379c <DeriveSessionKey10x>:
{
 801379c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            compBase[0] = 0x01;
 801379e:	2807      	cmp	r0, #7
    uint8_t compBase[16] = { 0 };
 80137a0:	f04f 0400 	mov.w	r4, #0
 80137a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
            compBase[0] = 0x01;
 80137a8:	bf0c      	ite	eq
 80137aa:	2402      	moveq	r4, #2
 80137ac:	2401      	movne	r4, #1
 80137ae:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80137b2:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80137b6:	0a0c      	lsrs	r4, r1, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80137b8:	0c09      	lsrs	r1, r1, #16
 80137ba:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80137be:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80137c2:	0a11      	lsrs	r1, r2, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80137c4:	0c12      	lsrs	r2, r2, #16
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80137c6:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80137ca:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80137ce:	f88d 3007 	strb.w	r3, [sp, #7]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80137d2:	4602      	mov	r2, r0
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80137d4:	0a1b      	lsrs	r3, r3, #8
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80137d6:	2101      	movs	r1, #1
 80137d8:	4668      	mov	r0, sp
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80137da:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80137de:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80137e2:	f7ff febd 	bl	8013560 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80137e6:	2800      	cmp	r0, #0
}
 80137e8:	bf18      	it	ne
 80137ea:	200e      	movne	r0, #14
 80137ec:	b004      	add	sp, #16
 80137ee:	bd10      	pop	{r4, pc}

080137f0 <PayloadEncrypt>:
{
 80137f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f4:	b088      	sub	sp, #32
 80137f6:	4617      	mov	r7, r2
 80137f8:	460d      	mov	r5, r1
 80137fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 80137fc:	4606      	mov	r6, r0
 80137fe:	2800      	cmp	r0, #0
 8013800:	d053      	beq.n	80138aa <PayloadEncrypt+0xba>
    uint8_t sBlock[16] = { 0 };
 8013802:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
 8013804:	2101      	movs	r1, #1
    uint8_t aBlock[16] = { 0 };
 8013806:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
 801380a:	f88d 1010 	strb.w	r1, [sp, #16]
    aBlock[5] = dir;
 801380e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8013812:	f88d 1015 	strb.w	r1, [sp, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013816:	0a19      	lsrs	r1, r3, #8
    aBlock[6] = address & 0xFF;
 8013818:	f88d 3016 	strb.w	r3, [sp, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801381c:	f88d 1017 	strb.w	r1, [sp, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013820:	0c19      	lsrs	r1, r3, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013822:	0e1b      	lsrs	r3, r3, #24
 8013824:	f88d 3019 	strb.w	r3, [sp, #25]
    uint8_t sBlock[16] = { 0 };
 8013828:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801382c:	0a13      	lsrs	r3, r2, #8
    uint8_t sBlock[16] = { 0 };
 801382e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[10] = frameCounter & 0xFF;
 8013832:	f88d 201a 	strb.w	r2, [sp, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013836:	f88d 301b 	strb.w	r3, [sp, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801383a:	0c13      	lsrs	r3, r2, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801383c:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
 801383e:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013840:	f88d 1018 	strb.w	r1, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013844:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013848:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
 801384c:	b2e3      	uxtb	r3, r4
 801384e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8013852:	2d00      	cmp	r5, #0
 8013854:	fa5f f888 	uxtb.w	r8, r8
 8013858:	dc03      	bgt.n	8013862 <PayloadEncrypt+0x72>
    return LORAMAC_CRYPTO_SUCCESS;
 801385a:	2000      	movs	r0, #0
}
 801385c:	b008      	add	sp, #32
 801385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        aBlock[15] = ctr & 0xFF;
 8013862:	3301      	adds	r3, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013864:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 8013866:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801386a:	463a      	mov	r2, r7
 801386c:	466b      	mov	r3, sp
 801386e:	eb0d 0001 	add.w	r0, sp, r1
 8013872:	f7f3 ff81 	bl	8007778 <SecureElementAesEncrypt>
 8013876:	4603      	mov	r3, r0
 8013878:	b9c8      	cbnz	r0, 80138ae <PayloadEncrypt+0xbe>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801387a:	2d10      	cmp	r5, #16
 801387c:	46ac      	mov	ip, r5
 801387e:	bfa8      	it	ge
 8013880:	f04f 0c10 	movge.w	ip, #16
 8013884:	b2da      	uxtb	r2, r3
 8013886:	4562      	cmp	r2, ip
 8013888:	f103 0301 	add.w	r3, r3, #1
 801388c:	db03      	blt.n	8013896 <PayloadEncrypt+0xa6>
        size -= 16;
 801388e:	3d10      	subs	r5, #16
 8013890:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 8013892:	3401      	adds	r4, #1
 8013894:	e7da      	b.n	801384c <PayloadEncrypt+0x5c>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013896:	a908      	add	r1, sp, #32
 8013898:	eb08 0002 	add.w	r0, r8, r2
 801389c:	440a      	add	r2, r1
 801389e:	5c31      	ldrb	r1, [r6, r0]
 80138a0:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80138a4:	404a      	eors	r2, r1
 80138a6:	5432      	strb	r2, [r6, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80138a8:	e7ec      	b.n	8013884 <PayloadEncrypt+0x94>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80138aa:	2009      	movs	r0, #9
 80138ac:	e7d6      	b.n	801385c <PayloadEncrypt+0x6c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80138ae:	200e      	movs	r0, #14
 80138b0:	e7d4      	b.n	801385c <PayloadEncrypt+0x6c>

080138b2 <LoRaMacCryptoDeriveMcKEKey.part.0>:
LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 80138b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 80138b4:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80138b6:	227f      	movs	r2, #127	; 0x7f
 80138b8:	2108      	movs	r1, #8
 80138ba:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
 80138bc:	e9cd 3300 	strd	r3, r3, [sp]
 80138c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80138c4:	f7ff fe4c 	bl	8013560 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80138c8:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 80138ca:	bf18      	it	ne
 80138cc:	200e      	movne	r0, #14
 80138ce:	b005      	add	sp, #20
 80138d0:	f85d fb04 	ldr.w	pc, [sp], #4

080138d4 <LoRaMacCryptoGetFCntDown>:
{
 80138d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t lastDown = 0;
 80138d6:	2300      	movs	r3, #0
{
 80138d8:	460d      	mov	r5, r1
    uint32_t lastDown = 0;
 80138da:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 80138dc:	4614      	mov	r4, r2
 80138de:	b1d2      	cbz	r2, 8013916 <LoRaMacCryptoGetFCntDown+0x42>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80138e0:	a901      	add	r1, sp, #4
 80138e2:	f7f6 ff45 	bl	800a770 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80138e6:	b918      	cbnz	r0, 80138f0 <LoRaMacCryptoGetFCntDown+0x1c>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80138e8:	9b01      	ldr	r3, [sp, #4]
 80138ea:	1c5a      	adds	r2, r3, #1
 80138ec:	d102      	bne.n	80138f4 <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
 80138ee:	6025      	str	r5, [r4, #0]
}
 80138f0:	b003      	add	sp, #12
 80138f2:	bd30      	pop	{r4, r5, pc}
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80138f4:	b29a      	uxth	r2, r3
 80138f6:	1aaa      	subs	r2, r5, r2
        if( fCntDiff > 0 )
 80138f8:	2a00      	cmp	r2, #0
 80138fa:	dd02      	ble.n	8013902 <LoRaMacCryptoGetFCntDown+0x2e>
            *currentDown = lastDown + fCntDiff;
 80138fc:	4413      	add	r3, r2
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80138fe:	6023      	str	r3, [r4, #0]
 8013900:	e7f6      	b.n	80138f0 <LoRaMacCryptoGetFCntDown+0x1c>
        else if( fCntDiff == 0 )
 8013902:	d102      	bne.n	801390a <LoRaMacCryptoGetFCntDown+0x36>
            *currentDown = lastDown;
 8013904:	6023      	str	r3, [r4, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013906:	2007      	movs	r0, #7
 8013908:	e7f2      	b.n	80138f0 <LoRaMacCryptoGetFCntDown+0x1c>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801390a:	0c1b      	lsrs	r3, r3, #16
 801390c:	041b      	lsls	r3, r3, #16
 801390e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8013912:	442b      	add	r3, r5
 8013914:	e7f3      	b.n	80138fe <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013916:	2009      	movs	r0, #9
 8013918:	e7ea      	b.n	80138f0 <LoRaMacCryptoGetFCntDown+0x1c>

0801391a <LoRaMacCryptoDeriveMcRootKey>:
{
 801391a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
 801391c:	b9b1      	cbnz	r1, 801394c <LoRaMacCryptoDeriveMcRootKey+0x32>
    if( versionMinor == 1 )
 801391e:	2801      	cmp	r0, #1
    uint8_t compBase[16] = { 0 };
 8013920:	e9cd 1100 	strd	r1, r1, [sp]
        compBase[0] = 0x20;
 8013924:	bf08      	it	eq
 8013926:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
 8013928:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801392c:	f04f 0208 	mov.w	r2, #8
 8013930:	f04f 0100 	mov.w	r1, #0
 8013934:	4668      	mov	r0, sp
        compBase[0] = 0x20;
 8013936:	bf08      	it	eq
 8013938:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801393c:	f7ff fe10 	bl	8013560 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013940:	2800      	cmp	r0, #0
 8013942:	bf18      	it	ne
 8013944:	200e      	movne	r0, #14
}
 8013946:	b005      	add	sp, #20
 8013948:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801394c:	200a      	movs	r0, #10
 801394e:	e7fa      	b.n	8013946 <LoRaMacCryptoDeriveMcRootKey+0x2c>

08013950 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013950:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013952:	4604      	mov	r4, r0
 8013954:	2800      	cmp	r0, #0
 8013956:	d045      	beq.n	80139e4 <LoRaMacParserJoinAccept+0x94>
 8013958:	6801      	ldr	r1, [r0, #0]
 801395a:	2900      	cmp	r1, #0
 801395c:	d042      	beq.n	80139e4 <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801395e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013962:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013964:	2203      	movs	r2, #3
 8013966:	3006      	adds	r0, #6
 8013968:	f7ff f82a 	bl	80129c0 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801396c:	4620      	mov	r0, r4
 801396e:	2203      	movs	r2, #3
 8013970:	f850 1b09 	ldr.w	r1, [r0], #9
 8013974:	3104      	adds	r1, #4
 8013976:	f7ff f823 	bl	80129c0 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801397a:	6821      	ldr	r1, [r4, #0]
 801397c:	79cb      	ldrb	r3, [r1, #7]
 801397e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013980:	7a0a      	ldrb	r2, [r1, #8]
 8013982:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013986:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013988:	7a4a      	ldrb	r2, [r1, #9]
 801398a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801398e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013990:	7a8a      	ldrb	r2, [r1, #10]
 8013992:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013996:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013998:	7acb      	ldrb	r3, [r1, #11]
 801399a:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801399c:	7b0b      	ldrb	r3, [r1, #12]
 801399e:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80139a0:	7923      	ldrb	r3, [r4, #4]
 80139a2:	2b21      	cmp	r3, #33	; 0x21
 80139a4:	d11a      	bne.n	80139dc <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80139a6:	2210      	movs	r2, #16
 80139a8:	310d      	adds	r1, #13
 80139aa:	f104 0012 	add.w	r0, r4, #18
 80139ae:	f7ff f807 	bl	80129c0 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80139b2:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80139b4:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80139b6:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80139b8:	5c8b      	ldrb	r3, [r1, r2]
 80139ba:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80139bc:	5c08      	ldrb	r0, [r1, r0]
 80139be:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80139c2:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80139c4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80139c6:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80139c8:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80139ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80139ce:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80139d0:	5c8a      	ldrb	r2, [r1, r2]
 80139d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80139d6:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80139d8:	2000      	movs	r0, #0
}
 80139da:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80139dc:	2b11      	cmp	r3, #17
 80139de:	dc03      	bgt.n	80139e8 <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80139e0:	220d      	movs	r2, #13
 80139e2:	e7e7      	b.n	80139b4 <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 80139e4:	2002      	movs	r0, #2
 80139e6:	e7f8      	b.n	80139da <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 80139e8:	2001      	movs	r0, #1
 80139ea:	e7f6      	b.n	80139da <LoRaMacParserJoinAccept+0x8a>

080139ec <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80139ec:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80139ee:	4604      	mov	r4, r0
 80139f0:	2800      	cmp	r0, #0
 80139f2:	d054      	beq.n	8013a9e <LoRaMacParserData+0xb2>
 80139f4:	6801      	ldr	r1, [r0, #0]
 80139f6:	2900      	cmp	r1, #0
 80139f8:	d051      	beq.n	8013a9e <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80139fa:	780b      	ldrb	r3, [r1, #0]
 80139fc:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80139fe:	784b      	ldrb	r3, [r1, #1]
 8013a00:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013a02:	788a      	ldrb	r2, [r1, #2]
 8013a04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013a08:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013a0a:	78ca      	ldrb	r2, [r1, #3]
 8013a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a10:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013a12:	790a      	ldrb	r2, [r1, #4]
 8013a14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013a18:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013a1a:	794b      	ldrb	r3, [r1, #5]
 8013a1c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013a1e:	798b      	ldrb	r3, [r1, #6]
 8013a20:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013a22:	79ca      	ldrb	r2, [r1, #7]
 8013a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013a28:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013a2a:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013a2c:	f002 020f 	and.w	r2, r2, #15
 8013a30:	3108      	adds	r1, #8
 8013a32:	3010      	adds	r0, #16
 8013a34:	f7fe ffc4 	bl	80129c0 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013a38:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013a3a:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013a3c:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 8013a40:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 8013a44:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013a48:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013a4a:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013a4e:	1a11      	subs	r1, r2, r0
 8013a50:	2904      	cmp	r1, #4
 8013a52:	dd0d      	ble.n	8013a70 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013a54:	6821      	ldr	r1, [r4, #0]
 8013a56:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013a58:	3a04      	subs	r2, #4
 8013a5a:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013a5c:	5c08      	ldrb	r0, [r1, r0]
 8013a5e:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013a62:	b2d2      	uxtb	r2, r2
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013a64:	6a60      	ldr	r0, [r4, #36]	; 0x24
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013a66:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013a6a:	4419      	add	r1, r3
 8013a6c:	f7fe ffa8 	bl	80129c0 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013a70:	7923      	ldrb	r3, [r4, #4]
 8013a72:	6822      	ldr	r2, [r4, #0]
 8013a74:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 8013a76:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013a78:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8013a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013a7e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8013a82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8013a86:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013a88:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8013a8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8013a90:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013a92:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8013a96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013a9a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8013a9c:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 8013a9e:	2002      	movs	r0, #2
 8013aa0:	e7fc      	b.n	8013a9c <LoRaMacParserData+0xb0>

08013aa2 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013aa2:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013aa4:	4604      	mov	r4, r0
 8013aa6:	b360      	cbz	r0, 8013b02 <LoRaMacSerializerJoinRequest+0x60>
 8013aa8:	6803      	ldr	r3, [r0, #0]
 8013aaa:	b353      	cbz	r3, 8013b02 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013aac:	7902      	ldrb	r2, [r0, #4]
 8013aae:	2a16      	cmp	r2, #22
 8013ab0:	d929      	bls.n	8013b06 <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013ab2:	7942      	ldrb	r2, [r0, #5]
 8013ab4:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013ab6:	4601      	mov	r1, r0
 8013ab8:	2208      	movs	r2, #8
 8013aba:	f851 0b06 	ldr.w	r0, [r1], #6
 8013abe:	3001      	adds	r0, #1
 8013ac0:	f7fe ff88 	bl	80129d4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013ac4:	4621      	mov	r1, r4
 8013ac6:	2208      	movs	r2, #8
 8013ac8:	f851 0b0e 	ldr.w	r0, [r1], #14
 8013acc:	3009      	adds	r0, #9
 8013ace:	f7fe ff81 	bl	80129d4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013ad2:	6823      	ldr	r3, [r4, #0]
 8013ad4:	8ae2      	ldrh	r2, [r4, #22]
 8013ad6:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013ad8:	8ae3      	ldrh	r3, [r4, #22]
 8013ada:	6822      	ldr	r2, [r4, #0]
 8013adc:	0a1b      	lsrs	r3, r3, #8
 8013ade:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013ae0:	6823      	ldr	r3, [r4, #0]
 8013ae2:	69a2      	ldr	r2, [r4, #24]
 8013ae4:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013ae6:	69a3      	ldr	r3, [r4, #24]
 8013ae8:	6822      	ldr	r2, [r4, #0]
 8013aea:	0a1b      	lsrs	r3, r3, #8
 8013aec:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013aee:	6823      	ldr	r3, [r4, #0]
 8013af0:	8b62      	ldrh	r2, [r4, #26]
 8013af2:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013af4:	6823      	ldr	r3, [r4, #0]
 8013af6:	7ee2      	ldrb	r2, [r4, #27]
 8013af8:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8013afa:	2317      	movs	r3, #23
 8013afc:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013afe:	2000      	movs	r0, #0
}
 8013b00:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013b02:	2001      	movs	r0, #1
 8013b04:	e7fc      	b.n	8013b00 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013b06:	2002      	movs	r0, #2
 8013b08:	e7fa      	b.n	8013b00 <LoRaMacSerializerJoinRequest+0x5e>

08013b0a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013b0a:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	2800      	cmp	r0, #0
 8013b10:	d063      	beq.n	8013bda <LoRaMacSerializerData+0xd0>
 8013b12:	6801      	ldr	r1, [r0, #0]
 8013b14:	2900      	cmp	r1, #0
 8013b16:	d060      	beq.n	8013bda <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013b18:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013b1a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013b1e:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 8013b22:	2a00      	cmp	r2, #0
 8013b24:	d157      	bne.n	8013bd6 <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013b26:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
 8013b28:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013b2a:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
 8013b2c:	4413      	add	r3, r2
 8013b2e:	4298      	cmp	r0, r3
 8013b30:	d355      	bcc.n	8013bde <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013b32:	7963      	ldrb	r3, [r4, #5]
 8013b34:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013b36:	6823      	ldr	r3, [r4, #0]
 8013b38:	68a2      	ldr	r2, [r4, #8]
 8013b3a:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013b3c:	68a3      	ldr	r3, [r4, #8]
 8013b3e:	6822      	ldr	r2, [r4, #0]
 8013b40:	0a1b      	lsrs	r3, r3, #8
 8013b42:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013b44:	6823      	ldr	r3, [r4, #0]
 8013b46:	8962      	ldrh	r2, [r4, #10]
 8013b48:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013b4a:	6823      	ldr	r3, [r4, #0]
 8013b4c:	7ae2      	ldrb	r2, [r4, #11]
 8013b4e:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013b50:	6823      	ldr	r3, [r4, #0]
 8013b52:	7b22      	ldrb	r2, [r4, #12]
 8013b54:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013b56:	6823      	ldr	r3, [r4, #0]
 8013b58:	89e2      	ldrh	r2, [r4, #14]
 8013b5a:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013b5c:	89e3      	ldrh	r3, [r4, #14]
 8013b5e:	6822      	ldr	r2, [r4, #0]
 8013b60:	0a1b      	lsrs	r3, r3, #8

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013b62:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013b64:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013b66:	7b22      	ldrb	r2, [r4, #12]
 8013b68:	f851 0b10 	ldr.w	r0, [r1], #16
 8013b6c:	f002 020f 	and.w	r2, r2, #15
 8013b70:	3008      	adds	r0, #8
 8013b72:	f7fe ff25 	bl	80129c0 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013b76:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013b78:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013b7c:	f003 030f 	and.w	r3, r3, #15
 8013b80:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 8013b84:	b12a      	cbz	r2, 8013b92 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013b86:	6822      	ldr	r2, [r4, #0]
 8013b88:	f894 1020 	ldrb.w	r1, [r4, #32]
 8013b8c:	5551      	strb	r1, [r2, r5]
 8013b8e:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013b92:	6820      	ldr	r0, [r4, #0]
 8013b94:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8013b98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013b9a:	4428      	add	r0, r5
 8013b9c:	f7fe ff10 	bl	80129c0 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013ba0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013ba4:	6822      	ldr	r2, [r4, #0]
 8013ba6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013ba8:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013baa:	54d1      	strb	r1, [r2, r3]
 8013bac:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013bae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013bb0:	6820      	ldr	r0, [r4, #0]
 8013bb2:	b292      	uxth	r2, r2
 8013bb4:	0a09      	lsrs	r1, r1, #8
 8013bb6:	5481      	strb	r1, [r0, r2]
 8013bb8:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013bba:	6821      	ldr	r1, [r4, #0]
 8013bbc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8013bbe:	b292      	uxth	r2, r2
 8013bc0:	5488      	strb	r0, [r1, r2]
 8013bc2:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013bc4:	6821      	ldr	r1, [r4, #0]
 8013bc6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8013bca:	b292      	uxth	r2, r2
 8013bcc:	3304      	adds	r3, #4
 8013bce:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 8013bd0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013bd2:	2000      	movs	r0, #0
}
 8013bd4:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013bd6:	3309      	adds	r3, #9
 8013bd8:	e7a6      	b.n	8013b28 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013bda:	2001      	movs	r0, #1
 8013bdc:	e7fa      	b.n	8013bd4 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013bde:	2002      	movs	r0, #2
 8013be0:	e7f8      	b.n	8013bd4 <LoRaMacSerializerData+0xca>

08013be2 <RegionIsActive>:
}
 8013be2:	f1a0 0308 	sub.w	r3, r0, #8
 8013be6:	4258      	negs	r0, r3
 8013be8:	4158      	adcs	r0, r3
 8013bea:	4770      	bx	lr

08013bec <RegionGetPhyParam>:
    switch( region )
 8013bec:	2808      	cmp	r0, #8
{
 8013bee:	b082      	sub	sp, #8
    switch( region )
 8013bf0:	d103      	bne.n	8013bfa <RegionGetPhyParam+0xe>
        US915_GET_PHY_PARAM( );
 8013bf2:	4608      	mov	r0, r1
}
 8013bf4:	b002      	add	sp, #8
        US915_GET_PHY_PARAM( );
 8013bf6:	f7f7 b99b 	b.w	800af30 <RegionUS915GetPhyParam>
}
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	b002      	add	sp, #8
 8013bfe:	4770      	bx	lr

08013c00 <RegionSetBandTxDone>:
    switch( region )
 8013c00:	2808      	cmp	r0, #8
 8013c02:	d102      	bne.n	8013c0a <RegionSetBandTxDone+0xa>
        US915_SET_BAND_TX_DONE( );
 8013c04:	4608      	mov	r0, r1
 8013c06:	f7f7 ba2f 	b.w	800b068 <RegionUS915SetBandTxDone>
}
 8013c0a:	4770      	bx	lr

08013c0c <RegionInitDefaults>:
    switch( region )
 8013c0c:	2808      	cmp	r0, #8
 8013c0e:	d102      	bne.n	8013c16 <RegionInitDefaults+0xa>
        US915_INIT_DEFAULTS( );
 8013c10:	4608      	mov	r0, r1
 8013c12:	f7f7 ba45 	b.w	800b0a0 <RegionUS915InitDefaults>
}
 8013c16:	4770      	bx	lr

08013c18 <RegionVerify>:
{
 8013c18:	4603      	mov	r3, r0
    switch( region )
 8013c1a:	2b08      	cmp	r3, #8
{
 8013c1c:	4608      	mov	r0, r1
 8013c1e:	4611      	mov	r1, r2
    switch( region )
 8013c20:	d101      	bne.n	8013c26 <RegionVerify+0xe>
        US915_VERIFY( );
 8013c22:	f000 bacd 	b.w	80141c0 <RegionUS915Verify>
}
 8013c26:	2000      	movs	r0, #0
 8013c28:	4770      	bx	lr

08013c2a <RegionApplyCFList>:
    switch( region )
 8013c2a:	2808      	cmp	r0, #8
 8013c2c:	d102      	bne.n	8013c34 <RegionApplyCFList+0xa>
        US915_APPLY_CF_LIST( );
 8013c2e:	4608      	mov	r0, r1
 8013c30:	f7f7 bac0 	b.w	800b1b4 <RegionUS915ApplyCFList>
}
 8013c34:	4770      	bx	lr

08013c36 <RegionChanMaskSet>:
    switch( region )
 8013c36:	2808      	cmp	r0, #8
 8013c38:	d102      	bne.n	8013c40 <RegionChanMaskSet+0xa>
        US915_CHAN_MASK_SET( );
 8013c3a:	4608      	mov	r0, r1
 8013c3c:	f7f7 bae8 	b.w	800b210 <RegionUS915ChanMaskSet>
}
 8013c40:	2000      	movs	r0, #0
 8013c42:	4770      	bx	lr

08013c44 <RegionComputeRxWindowParameters>:
{
 8013c44:	b410      	push	{r4}
 8013c46:	4604      	mov	r4, r0
    switch( region )
 8013c48:	2c08      	cmp	r4, #8
{
 8013c4a:	4608      	mov	r0, r1
 8013c4c:	4611      	mov	r1, r2
 8013c4e:	461a      	mov	r2, r3
 8013c50:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8013c52:	d102      	bne.n	8013c5a <RegionComputeRxWindowParameters+0x16>
}
 8013c54:	bc10      	pop	{r4}
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013c56:	f7f7 bb17 	b.w	800b288 <RegionUS915ComputeRxWindowParameters>
}
 8013c5a:	bc10      	pop	{r4}
 8013c5c:	4770      	bx	lr

08013c5e <RegionRxConfig>:
{
 8013c5e:	4603      	mov	r3, r0
    switch( region )
 8013c60:	2b08      	cmp	r3, #8
{
 8013c62:	4608      	mov	r0, r1
 8013c64:	4611      	mov	r1, r2
    switch( region )
 8013c66:	d101      	bne.n	8013c6c <RegionRxConfig+0xe>
        US915_RX_CONFIG( );
 8013c68:	f7f7 bb3a 	b.w	800b2e0 <RegionUS915RxConfig>
}
 8013c6c:	2000      	movs	r0, #0
 8013c6e:	4770      	bx	lr

08013c70 <RegionTxConfig>:
{
 8013c70:	b410      	push	{r4}
 8013c72:	4604      	mov	r4, r0
    switch( region )
 8013c74:	2c08      	cmp	r4, #8
{
 8013c76:	4608      	mov	r0, r1
 8013c78:	4611      	mov	r1, r2
 8013c7a:	461a      	mov	r2, r3
    switch( region )
 8013c7c:	d102      	bne.n	8013c84 <RegionTxConfig+0x14>
}
 8013c7e:	bc10      	pop	{r4}
        US915_TX_CONFIG( );
 8013c80:	f7f7 bb7a 	b.w	800b378 <RegionUS915TxConfig>
}
 8013c84:	2000      	movs	r0, #0
 8013c86:	bc10      	pop	{r4}
 8013c88:	4770      	bx	lr

08013c8a <RegionLinkAdrReq>:
{
 8013c8a:	b430      	push	{r4, r5}
 8013c8c:	4605      	mov	r5, r0
    switch( region )
 8013c8e:	2d08      	cmp	r5, #8
{
 8013c90:	4608      	mov	r0, r1
 8013c92:	4611      	mov	r1, r2
 8013c94:	461a      	mov	r2, r3
 8013c96:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
 8013c9a:	d103      	bne.n	8013ca4 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 8013c9c:	9402      	str	r4, [sp, #8]
}
 8013c9e:	bc30      	pop	{r4, r5}
        US915_LINK_ADR_REQ( );
 8013ca0:	f7f7 bbe8 	b.w	800b474 <RegionUS915LinkAdrReq>
}
 8013ca4:	2000      	movs	r0, #0
 8013ca6:	bc30      	pop	{r4, r5}
 8013ca8:	4770      	bx	lr

08013caa <RegionRxParamSetupReq>:
    switch( region )
 8013caa:	2808      	cmp	r0, #8
 8013cac:	d102      	bne.n	8013cb4 <RegionRxParamSetupReq+0xa>
        US915_RX_PARAM_SETUP_REQ( );
 8013cae:	4608      	mov	r0, r1
 8013cb0:	f000 baa9 	b.w	8014206 <RegionUS915RxParamSetupReq>
}
 8013cb4:	2000      	movs	r0, #0
 8013cb6:	4770      	bx	lr

08013cb8 <RegionNewChannelReq>:
    switch( region )
 8013cb8:	2808      	cmp	r0, #8
 8013cba:	d102      	bne.n	8013cc2 <RegionNewChannelReq+0xa>
        US915_NEW_CHANNEL_REQ( );
 8013cbc:	4608      	mov	r0, r1
 8013cbe:	f000 bace 	b.w	801425e <RegionUS915NewChannelReq>
}
 8013cc2:	2000      	movs	r0, #0
 8013cc4:	4770      	bx	lr

08013cc6 <RegionTxParamSetupReq>:
    switch( region )
 8013cc6:	2808      	cmp	r0, #8
 8013cc8:	d102      	bne.n	8013cd0 <RegionTxParamSetupReq+0xa>
        US915_TX_PARAM_SETUP_REQ( );
 8013cca:	4608      	mov	r0, r1
 8013ccc:	f000 baca 	b.w	8014264 <RegionUS915TxParamSetupReq>
}
 8013cd0:	2000      	movs	r0, #0
 8013cd2:	4770      	bx	lr

08013cd4 <RegionDlChannelReq>:
    switch( region )
 8013cd4:	2808      	cmp	r0, #8
 8013cd6:	d102      	bne.n	8013cde <RegionDlChannelReq+0xa>
        US915_DL_CHANNEL_REQ( );
 8013cd8:	4608      	mov	r0, r1
 8013cda:	f000 bac6 	b.w	801426a <RegionUS915DlChannelReq>
}
 8013cde:	2000      	movs	r0, #0
 8013ce0:	4770      	bx	lr

08013ce2 <RegionAlternateDr>:
{
 8013ce2:	4603      	mov	r3, r0
    switch( region )
 8013ce4:	2b08      	cmp	r3, #8
{
 8013ce6:	4608      	mov	r0, r1
 8013ce8:	4611      	mov	r1, r2
    switch( region )
 8013cea:	d101      	bne.n	8013cf0 <RegionAlternateDr+0xe>
        US915_ALTERNATE_DR( );
 8013cec:	f7f7 bcd2 	b.w	800b694 <RegionUS915AlternateDr>
}
 8013cf0:	2000      	movs	r0, #0
 8013cf2:	4770      	bx	lr

08013cf4 <RegionNextChannel>:
{
 8013cf4:	b410      	push	{r4}
 8013cf6:	4604      	mov	r4, r0
    switch( region )
 8013cf8:	2c08      	cmp	r4, #8
{
 8013cfa:	4608      	mov	r0, r1
 8013cfc:	4611      	mov	r1, r2
 8013cfe:	461a      	mov	r2, r3
 8013d00:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8013d02:	d102      	bne.n	8013d0a <RegionNextChannel+0x16>
}
 8013d04:	bc10      	pop	{r4}
        US915_NEXT_CHANNEL( );
 8013d06:	f7f7 bcdb 	b.w	800b6c0 <RegionUS915NextChannel>
}
 8013d0a:	2009      	movs	r0, #9
 8013d0c:	bc10      	pop	{r4}
 8013d0e:	4770      	bx	lr

08013d10 <RegionApplyDrOffset>:
{
 8013d10:	b410      	push	{r4}
 8013d12:	4604      	mov	r4, r0
    switch( region )
 8013d14:	2c08      	cmp	r4, #8
{
 8013d16:	4608      	mov	r0, r1
 8013d18:	4611      	mov	r1, r2
 8013d1a:	461a      	mov	r2, r3
    switch( region )
 8013d1c:	d102      	bne.n	8013d24 <RegionApplyDrOffset+0x14>
}
 8013d1e:	bc10      	pop	{r4}
        US915_APPLY_DR_OFFSET( );
 8013d20:	f7f7 bd6a 	b.w	800b7f8 <RegionUS915ApplyDrOffset>
}
 8013d24:	b2c8      	uxtb	r0, r1
 8013d26:	bc10      	pop	{r4}
 8013d28:	4770      	bx	lr

08013d2a <RegionCommonChanVerifyDr>:
{
 8013d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ( value >= min ) && ( value <= max ) )
 8013d2c:	429a      	cmp	r2, r3
{
 8013d2e:	9e06      	ldr	r6, [sp, #24]
    if( ( value >= min ) && ( value <= max ) )
 8013d30:	db03      	blt.n	8013d3a <RegionCommonChanVerifyDr+0x10>
 8013d32:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	dd25      	ble.n	8013d86 <RegionCommonChanVerifyDr+0x5c>
        return false;
 8013d3a:	2000      	movs	r0, #0
}
 8013d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8013d42:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
 8013d46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013d4a:	2700      	movs	r7, #0
 8013d4c:	fa4e f507 	asr.w	r5, lr, r7
 8013d50:	07ed      	lsls	r5, r5, #31
 8013d52:	d50c      	bpl.n	8013d6e <RegionCommonChanVerifyDr+0x44>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8013d54:	f893 c008 	ldrb.w	ip, [r3, #8]
 8013d58:	f34c 1503 	sbfx	r5, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 8013d5c:	f00c 0c0f 	and.w	ip, ip, #15
 8013d60:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8013d62:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 8013d64:	db03      	blt.n	8013d6e <RegionCommonChanVerifyDr+0x44>
 8013d66:	f005 050f 	and.w	r5, r5, #15
 8013d6a:	42aa      	cmp	r2, r5
 8013d6c:	dd0d      	ble.n	8013d8a <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8013d6e:	3701      	adds	r7, #1
 8013d70:	2f10      	cmp	r7, #16
 8013d72:	f103 030c 	add.w	r3, r3, #12
 8013d76:	d1e9      	bne.n	8013d4c <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013d78:	3401      	adds	r4, #1
 8013d7a:	b2e4      	uxtb	r4, r4
 8013d7c:	0123      	lsls	r3, r4, #4
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	4298      	cmp	r0, r3
 8013d82:	d8dc      	bhi.n	8013d3e <RegionCommonChanVerifyDr+0x14>
 8013d84:	e7d9      	b.n	8013d3a <RegionCommonChanVerifyDr+0x10>
 8013d86:	2400      	movs	r4, #0
 8013d88:	e7f8      	b.n	8013d7c <RegionCommonChanVerifyDr+0x52>
                    return true;
 8013d8a:	2001      	movs	r0, #1
 8013d8c:	e7d6      	b.n	8013d3c <RegionCommonChanVerifyDr+0x12>

08013d8e <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 8013d8e:	4288      	cmp	r0, r1
 8013d90:	db04      	blt.n	8013d9c <RegionCommonValueInRange+0xe>
        return 1;
 8013d92:	4290      	cmp	r0, r2
 8013d94:	bfcc      	ite	gt
 8013d96:	2000      	movgt	r0, #0
 8013d98:	2001      	movle	r0, #1
 8013d9a:	4770      	bx	lr
    return 0;
 8013d9c:	2000      	movs	r0, #0
}
 8013d9e:	4770      	bx	lr

08013da0 <RegionCommonChanDisable>:
{
 8013da0:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013da2:	0914      	lsrs	r4, r2, #4
 8013da4:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
{
 8013da8:	4603      	mov	r3, r0
    uint8_t index = id / 16;
 8013daa:	ea4f 1011 	mov.w	r0, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013dae:	d30e      	bcc.n	8013dce <RegionCommonChanDisable+0x2e>
 8013db0:	4291      	cmp	r1, r2
 8013db2:	d20c      	bcs.n	8013dce <RegionCommonChanDisable+0x2e>
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8013db4:	b202      	sxth	r2, r0
 8013db6:	f001 010f 	and.w	r1, r1, #15
 8013dba:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8013dbe:	2001      	movs	r0, #1
 8013dc0:	fa00 f101 	lsl.w	r1, r0, r1
 8013dc4:	ea24 0101 	bic.w	r1, r4, r1
 8013dc8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8013dcc:	bd10      	pop	{r4, pc}
        return false;
 8013dce:	2000      	movs	r0, #0
 8013dd0:	e7fc      	b.n	8013dcc <RegionCommonChanDisable+0x2c>

08013dd2 <RegionCommonCountChannels>:
{
 8013dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( channelsMask == NULL )
 8013dd4:	b128      	cbz	r0, 8013de2 <RegionCommonCountChannels+0x10>
 8013dd6:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8013dda:	2601      	movs	r6, #1
    uint8_t nbChannels = 0;
 8013ddc:	2000      	movs	r0, #0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013dde:	4291      	cmp	r1, r2
 8013de0:	d300      	bcc.n	8013de4 <RegionCommonCountChannels+0x12>
}
 8013de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013de4:	2400      	movs	r4, #0
 8013de6:	f835 7b02 	ldrh.w	r7, [r5], #2
    uint8_t nbActiveBits = 0;
 8013dea:	4623      	mov	r3, r4
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8013dec:	fa06 fc04 	lsl.w	ip, r6, r4
 8013df0:	ea3c 0c07 	bics.w	ip, ip, r7
            nbActiveBits++;
 8013df4:	bf08      	it	eq
 8013df6:	3301      	addeq	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 8013df8:	f104 0401 	add.w	r4, r4, #1
            nbActiveBits++;
 8013dfc:	bf08      	it	eq
 8013dfe:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8013e00:	2c10      	cmp	r4, #16
 8013e02:	d1f3      	bne.n	8013dec <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013e04:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013e06:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013e08:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013e0a:	b2c9      	uxtb	r1, r1
 8013e0c:	e7e7      	b.n	8013dde <RegionCommonCountChannels+0xc>

08013e0e <RegionCommonChanMaskCopy>:
{
 8013e0e:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8013e10:	b100      	cbz	r0, 8013e14 <RegionCommonChanMaskCopy+0x6>
 8013e12:	b949      	cbnz	r1, 8013e28 <RegionCommonChanMaskCopy+0x1a>
}
 8013e14:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 8013e16:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8013e1a:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8013e1e:	3301      	adds	r3, #1
 8013e20:	b2dc      	uxtb	r4, r3
 8013e22:	42a2      	cmp	r2, r4
 8013e24:	d8f7      	bhi.n	8013e16 <RegionCommonChanMaskCopy+0x8>
 8013e26:	e7f5      	b.n	8013e14 <RegionCommonChanMaskCopy+0x6>
 8013e28:	2300      	movs	r3, #0
 8013e2a:	e7f9      	b.n	8013e20 <RegionCommonChanMaskCopy+0x12>

08013e2c <RegionCommonSetBandTxDone>:
{
 8013e2c:	b082      	sub	sp, #8
 8013e2e:	b530      	push	{r4, r5, lr}
 8013e30:	8804      	ldrh	r4, [r0, #0]
 8013e32:	9304      	str	r3, [sp, #16]
    if( joined == false )
 8013e34:	b96a      	cbnz	r2, 8013e52 <RegionCommonSetBandTxDone+0x26>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8013e36:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8013e3a:	d318      	bcc.n	8013e6e <RegionCommonSetBandTxDone+0x42>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013e3c:	f649 25af 	movw	r5, #39599	; 0x9aaf
 8013e40:	f242 7210 	movw	r2, #10000	; 0x2710
 8013e44:	42ab      	cmp	r3, r5
 8013e46:	bf98      	it	ls
 8013e48:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8013e4c:	4294      	cmp	r4, r2
 8013e4e:	bf38      	it	cc
 8013e50:	4614      	movcc	r4, r2
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8013e52:	2c01      	cmp	r4, #1
 8013e54:	68c3      	ldr	r3, [r0, #12]
 8013e56:	bf38      	it	cc
 8013e58:	2401      	movcc	r4, #1
 8013e5a:	434c      	muls	r4, r1
 8013e5c:	42a3      	cmp	r3, r4
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8013e5e:	bf8c      	ite	hi
 8013e60:	1b1c      	subhi	r4, r3, r4
        band->TimeCredits = 0;
 8013e62:	2400      	movls	r4, #0
 8013e64:	60c4      	str	r4, [r0, #12]
}
 8013e66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e6a:	b002      	add	sp, #8
 8013e6c:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8013e6e:	2264      	movs	r2, #100	; 0x64
 8013e70:	e7ec      	b.n	8013e4c <RegionCommonSetBandTxDone+0x20>

08013e72 <RegionCommonParseLinkAdrReq>:
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8013e72:	7803      	ldrb	r3, [r0, #0]
 8013e74:	2b03      	cmp	r3, #3
 8013e76:	d114      	bne.n	8013ea2 <RegionCommonParseLinkAdrReq+0x30>
        linkAdrParams->Datarate = payload[1];
 8013e78:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013e7a:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013e7e:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8013e80:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8013e82:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8013e84:	7883      	ldrb	r3, [r0, #2]
 8013e86:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013e88:	78c2      	ldrb	r2, [r0, #3]
 8013e8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013e8e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8013e90:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013e92:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 8013e96:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013e9a:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013e9c:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8013e9e:	2005      	movs	r0, #5
 8013ea0:	4770      	bx	lr
    uint8_t retIndex = 0;
 8013ea2:	2000      	movs	r0, #0
}
 8013ea4:	4770      	bx	lr

08013ea6 <RegionCommonLinkAdrReqVerifyParams>:
{
 8013ea6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013eaa:	4698      	mov	r8, r3
    if( verifyParams->AdrEnabled == false )
 8013eac:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 8013eae:	7905      	ldrb	r5, [r0, #4]
    int8_t txPower = verifyParams->TxPower;
 8013eb0:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013eb4:	7a06      	ldrb	r6, [r0, #8]
{
 8013eb6:	4691      	mov	r9, r2
 8013eb8:	4604      	mov	r4, r0
    int8_t datarate = verifyParams->Datarate;
 8013eba:	f990 2006 	ldrsb.w	r2, [r0, #6]
{
 8013ebe:	468a      	mov	sl, r1
    if( verifyParams->AdrEnabled == false )
 8013ec0:	b17b      	cbz	r3, 8013ee2 <RegionCommonLinkAdrReqVerifyParams+0x3c>
    int8_t nbRepetitions = verifyParams->NbRep;
 8013ec2:	b276      	sxtb	r6, r6
    if( status != 0 )
 8013ec4:	b375      	cbz	r5, 8013f24 <RegionCommonLinkAdrReqVerifyParams+0x7e>
        if( datarate == 0x0F )
 8013ec6:	2a0f      	cmp	r2, #15
 8013ec8:	d112      	bne.n	8013ef0 <RegionCommonLinkAdrReqVerifyParams+0x4a>
            datarate =  verifyParams->CurrentDatarate;
 8013eca:	f994 2009 	ldrsb.w	r2, [r4, #9]
        if( txPower == 0x0F )
 8013ece:	2f0f      	cmp	r7, #15
 8013ed0:	d11e      	bne.n	8013f10 <RegionCommonLinkAdrReqVerifyParams+0x6a>
            txPower =  verifyParams->CurrentTxPower;
 8013ed2:	f994 700a 	ldrsb.w	r7, [r4, #10]
    if( status == 0x07 )
 8013ed6:	2d07      	cmp	r5, #7
 8013ed8:	d124      	bne.n	8013f24 <RegionCommonLinkAdrReqVerifyParams+0x7e>
            nbRepetitions = 1;
 8013eda:	2e00      	cmp	r6, #0
 8013edc:	bf08      	it	eq
 8013ede:	2601      	moveq	r6, #1
 8013ee0:	e020      	b.n	8013f24 <RegionCommonLinkAdrReqVerifyParams+0x7e>
        nbRepetitions = verifyParams->CurrentNbRep;
 8013ee2:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8013ee6:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8013eea:	f990 700a 	ldrsb.w	r7, [r0, #10]
 8013eee:	e7e9      	b.n	8013ec4 <RegionCommonLinkAdrReqVerifyParams+0x1e>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013ef0:	69a3      	ldr	r3, [r4, #24]
 8013ef2:	9301      	str	r3, [sp, #4]
 8013ef4:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8013ef8:	9300      	str	r3, [sp, #0]
 8013efa:	6921      	ldr	r1, [r4, #16]
 8013efc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8013f00:	7b20      	ldrb	r0, [r4, #12]
 8013f02:	f7ff ff12 	bl	8013d2a <RegionCommonChanVerifyDr>
 8013f06:	2800      	cmp	r0, #0
 8013f08:	d1e1      	bne.n	8013ece <RegionCommonLinkAdrReqVerifyParams+0x28>
            status &= 0xFD; // Datarate KO
 8013f0a:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8013f0e:	e7de      	b.n	8013ece <RegionCommonLinkAdrReqVerifyParams+0x28>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013f10:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8013f14:	f994 101c 	ldrsb.w	r1, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 8013f18:	42bb      	cmp	r3, r7
 8013f1a:	dc0d      	bgt.n	8013f38 <RegionCommonLinkAdrReqVerifyParams+0x92>
 8013f1c:	42b9      	cmp	r1, r7
 8013f1e:	dada      	bge.n	8013ed6 <RegionCommonLinkAdrReqVerifyParams+0x30>
                status &= 0xFB; // TxPower KO
 8013f20:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
}
 8013f24:	4628      	mov	r0, r5
    *dr = datarate;
 8013f26:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
 8013f2a:	f889 7000 	strb.w	r7, [r9]
    *nbRep = nbRepetitions;
 8013f2e:	f888 6000 	strb.w	r6, [r8]
}
 8013f32:	b002      	add	sp, #8
 8013f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f38:	461f      	mov	r7, r3
 8013f3a:	e7cc      	b.n	8013ed6 <RegionCommonLinkAdrReqVerifyParams+0x30>

08013f3c <RegionCommonComputeRxWindowParameters>:
{
 8013f3c:	b530      	push	{r4, r5, lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8013f3e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8013f42:	1f0c      	subs	r4, r1, #4
 8013f44:	436a      	muls	r2, r5
 8013f46:	fb00 2204 	mla	r2, r0, r4, r2
 8013f4a:	0052      	lsls	r2, r2, #1
 8013f4c:	bf1e      	ittt	ne
 8013f4e:	f100 34ff 	addne.w	r4, r0, #4294967295	; 0xffffffff
 8013f52:	1912      	addne	r2, r2, r4
 8013f54:	fbb2 f2f0 	udivne	r2, r2, r0
 8013f58:	428a      	cmp	r2, r1
 8013f5a:	bf38      	it	cc
 8013f5c:	460a      	movcc	r2, r1
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8013f5e:	0084      	lsls	r4, r0, #2
 8013f60:	4350      	muls	r0, r2
 8013f62:	bf18      	it	ne
 8013f64:	3001      	addne	r0, #1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8013f66:	9903      	ldr	r1, [sp, #12]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8013f68:	bf18      	it	ne
 8013f6a:	0840      	lsrne	r0, r0, #1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8013f6c:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8013f6e:	1a20      	subs	r0, r4, r0
 8013f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f74:	fb02 0013 	mls	r0, r2, r3, r0
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	9b04      	ldr	r3, [sp, #16]
 8013f7c:	bfd2      	itee	le
 8013f7e:	fb90 f0f2 	sdivle	r0, r0, r2
 8013f82:	f200 30e7 	addwgt	r0, r0, #999	; 0x3e7
 8013f86:	fbb0 f0f2 	udivgt	r0, r0, r2
 8013f8a:	6018      	str	r0, [r3, #0]
}
 8013f8c:	bd30      	pop	{r4, r5, pc}

08013f8e <RegionCommonComputeTxPower>:
{
 8013f8e:	b538      	push	{r3, r4, r5, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013f90:	0040      	lsls	r0, r0, #1
{
 8013f92:	4614      	mov	r4, r2
 8013f94:	460d      	mov	r5, r1
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013f96:	f7ec fe1f 	bl	8000bd8 <__aeabi_ui2f>
 8013f9a:	4601      	mov	r1, r0
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	f7ec fd69 	bl	8000a74 <__aeabi_fsub>
 8013fa2:	4621      	mov	r1, r4
 8013fa4:	f7ec fd66 	bl	8000a74 <__aeabi_fsub>
 8013fa8:	f7ec fa7e 	bl	80004a8 <__aeabi_f2d>
 8013fac:	f7ed fb38 	bl	8001620 <floor>
 8013fb0:	f7ec fce4 	bl	800097c <__aeabi_d2iz>
}
 8013fb4:	b240      	sxtb	r0, r0
 8013fb6:	bd38      	pop	{r3, r4, r5, pc}

08013fb8 <RegionCommonCountNbOfEnabledChannels>:
{
 8013fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fbc:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8013fbe:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 8013fc0:	461f      	mov	r7, r3
    uint8_t nbChannelCount = 0;
 8013fc2:	469c      	mov	ip, r3
 8013fc4:	011c      	lsls	r4, r3, #4
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8013fc6:	8a05      	ldrh	r5, [r0, #16]
 8013fc8:	fa5f fe84 	uxtb.w	lr, r4
 8013fcc:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8013fd0:	42a5      	cmp	r5, r4
 8013fd2:	d806      	bhi.n	8013fe2 <RegionCommonCountNbOfEnabledChannels+0x2a>
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8013fd4:	9b01      	ldr	r3, [sp, #4]
    *nbEnabledChannels = nbChannelCount;
 8013fd6:	f882 c000 	strb.w	ip, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8013fda:	701f      	strb	r7, [r3, #0]
}
 8013fdc:	b003      	add	sp, #12
 8013fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe2:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8013fe6:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8013fea:	00ad      	lsls	r5, r5, #2
 8013fec:	2400      	movs	r4, #0
 8013fee:	6846      	ldr	r6, [r0, #4]
 8013ff0:	f836 6009 	ldrh.w	r6, [r6, r9]
 8013ff4:	4126      	asrs	r6, r4
 8013ff6:	07f6      	lsls	r6, r6, #31
 8013ff8:	d527      	bpl.n	801404a <RegionCommonCountNbOfEnabledChannels+0x92>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8013ffa:	6886      	ldr	r6, [r0, #8]
 8013ffc:	eb06 0a05 	add.w	sl, r6, r5
 8014000:	5976      	ldr	r6, [r6, r5]
 8014002:	b316      	cbz	r6, 801404a <RegionCommonCountNbOfEnabledChannels+0x92>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014004:	7806      	ldrb	r6, [r0, #0]
 8014006:	b936      	cbnz	r6, 8014016 <RegionCommonCountNbOfEnabledChannels+0x5e>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014008:	6946      	ldr	r6, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801400a:	b126      	cbz	r6, 8014016 <RegionCommonCountNbOfEnabledChannels+0x5e>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801400c:	f836 6009 	ldrh.w	r6, [r6, r9]
 8014010:	4126      	asrs	r6, r4
 8014012:	07f6      	lsls	r6, r6, #31
 8014014:	d519      	bpl.n	801404a <RegionCommonCountNbOfEnabledChannels+0x92>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014016:	f89a 6008 	ldrb.w	r6, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801401a:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801401e:	f346 0803 	sbfx	r8, r6, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 8014022:	fa4f f888 	sxtb.w	r8, r8
 8014026:	45d8      	cmp	r8, fp
 8014028:	dc0f      	bgt.n	801404a <RegionCommonCountNbOfEnabledChannels+0x92>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801402a:	f346 1603 	sbfx	r6, r6, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 801402e:	b276      	sxtb	r6, r6
 8014030:	455e      	cmp	r6, fp
 8014032:	db0a      	blt.n	801404a <RegionCommonCountNbOfEnabledChannels+0x92>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014034:	f89a 6009 	ldrb.w	r6, [sl, #9]
 8014038:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 801403c:	68c6      	ldr	r6, [r0, #12]
 801403e:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 8014042:	7d36      	ldrb	r6, [r6, #20]
 8014044:	b94e      	cbnz	r6, 801405a <RegionCommonCountNbOfEnabledChannels+0xa2>
                    nbRestrictedChannelsCount++;
 8014046:	3701      	adds	r7, #1
 8014048:	b2ff      	uxtb	r7, r7
        for( uint8_t j = 0; j < 16; j++ )
 801404a:	3401      	adds	r4, #1
 801404c:	2c10      	cmp	r4, #16
 801404e:	f105 050c 	add.w	r5, r5, #12
 8014052:	d1cc      	bne.n	8013fee <RegionCommonCountNbOfEnabledChannels+0x36>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014054:	3301      	adds	r3, #1
 8014056:	b2db      	uxtb	r3, r3
 8014058:	e7b4      	b.n	8013fc4 <RegionCommonCountNbOfEnabledChannels+0xc>
                enabledChannels[nbChannelCount++] = i + j;
 801405a:	f10c 0601 	add.w	r6, ip, #1
 801405e:	eb0e 0804 	add.w	r8, lr, r4
 8014062:	f801 800c 	strb.w	r8, [r1, ip]
 8014066:	fa5f fc86 	uxtb.w	ip, r6
 801406a:	e7ee      	b.n	801404a <RegionCommonCountNbOfEnabledChannels+0x92>

0801406c <RegionCommonIdentifyChannels>:
{
 801406c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014070:	4604      	mov	r4, r0
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014072:	6840      	ldr	r0, [r0, #4]
{
 8014074:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8014078:	461d      	mov	r5, r3
 801407a:	468a      	mov	sl, r1
 801407c:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801407e:	f7fe fdbb 	bl	8012bf8 <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014082:	6823      	ldr	r3, [r4, #0]
 8014084:	1a1b      	subs	r3, r3, r0
 8014086:	603b      	str	r3, [r7, #0]
    *nbEnabledChannels = 0;
 8014088:	f04f 0800 	mov.w	r8, #0
    *nbRestrictedChannels = 1;
 801408c:	2301      	movs	r3, #1
 801408e:	7033      	strb	r3, [r6, #0]
    *nbEnabledChannels = 0;
 8014090:	f885 8000 	strb.w	r8, [r5]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014094:	6863      	ldr	r3, [r4, #4]
 8014096:	b113      	cbz	r3, 801409e <RegionCommonIdentifyChannels+0x32>
 8014098:	6823      	ldr	r3, [r4, #0]
 801409a:	4283      	cmp	r3, r0
 801409c:	d824      	bhi.n	80140e8 <RegionCommonIdentifyChannels+0x7c>
        *aggregatedTimeOff = 0;
 801409e:	f8ca 8000 	str.w	r8, [sl]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80140a2:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 80140a6:	69a3      	ldr	r3, [r4, #24]
 80140a8:	f89c e000 	ldrb.w	lr, [ip]
 80140ac:	9303      	str	r3, [sp, #12]
 80140ae:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80140b2:	ab01      	add	r3, sp, #4
 80140b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80140b8:	7d23      	ldrb	r3, [r4, #20]
 80140ba:	9300      	str	r3, [sp, #0]
 80140bc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80140c0:	7a23      	ldrb	r3, [r4, #8]
 80140c2:	7a62      	ldrb	r2, [r4, #9]
 80140c4:	4670      	mov	r0, lr
 80140c6:	f7f6 fded 	bl	800aca4 <RegionCommonUpdateBandTimeOff>
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80140ca:	4633      	mov	r3, r6
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80140cc:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80140ce:	462a      	mov	r2, r5
 80140d0:	69e0      	ldr	r0, [r4, #28]
 80140d2:	4649      	mov	r1, r9
 80140d4:	f7ff ff70 	bl	8013fb8 <RegionCommonCountNbOfEnabledChannels>
    if( *nbEnabledChannels > 0 )
 80140d8:	782b      	ldrb	r3, [r5, #0]
 80140da:	b12b      	cbz	r3, 80140e8 <RegionCommonIdentifyChannels+0x7c>
        *nextTxDelay = 0;
 80140dc:	f8c7 8000 	str.w	r8, [r7]
        return LORAMAC_STATUS_OK;
 80140e0:	2000      	movs	r0, #0
}
 80140e2:	b004      	add	sp, #16
 80140e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
 80140e8:	7833      	ldrb	r3, [r6, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	bf14      	ite	ne
 80140ee:	200b      	movne	r0, #11
 80140f0:	200c      	moveq	r0, #12
 80140f2:	e7f6      	b.n	80140e2 <RegionCommonIdentifyChannels+0x76>

080140f4 <RegionCommonGetNextLowerTxDr>:
{
 80140f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t drLocal = params->CurrentDr;
 80140f6:	f990 2000 	ldrsb.w	r2, [r0]
    if( params->CurrentDr == params->MinDr )
 80140fa:	f990 5002 	ldrsb.w	r5, [r0, #2]
 80140fe:	4295      	cmp	r5, r2
{
 8014100:	4604      	mov	r4, r0
    if( params->CurrentDr == params->MinDr )
 8014102:	d00f      	beq.n	8014124 <RegionCommonGetNextLowerTxDr+0x30>
            drLocal = ( drLocal - 1 );
 8014104:	3a01      	subs	r2, #1
 8014106:	b252      	sxtb	r2, r2
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014108:	4295      	cmp	r5, r2
 801410a:	d00b      	beq.n	8014124 <RegionCommonGetNextLowerTxDr+0x30>
 801410c:	68a3      	ldr	r3, [r4, #8]
 801410e:	9301      	str	r3, [sp, #4]
 8014110:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8014114:	9300      	str	r3, [sp, #0]
 8014116:	6861      	ldr	r1, [r4, #4]
 8014118:	78e0      	ldrb	r0, [r4, #3]
 801411a:	462b      	mov	r3, r5
 801411c:	f7ff fe05 	bl	8013d2a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8014120:	2800      	cmp	r0, #0
 8014122:	d0ef      	beq.n	8014104 <RegionCommonGetNextLowerTxDr+0x10>
}
 8014124:	4610      	mov	r0, r2
 8014126:	b003      	add	sp, #12
 8014128:	bd30      	pop	{r4, r5, pc}

0801412a <RegionCommonLimitTxPower>:
}
 801412a:	4288      	cmp	r0, r1
 801412c:	bfb8      	it	lt
 801412e:	4608      	movlt	r0, r1
 8014130:	4770      	bx	lr

08014132 <RegionBaseUSComputeNext125kHzJoinChannel>:
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8014132:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8014136:	2300      	movs	r3, #0
 8014138:	e9cd 3300 	strd	r3, r3, [sp]
{
 801413c:	460e      	mov	r6, r1
 801413e:	4690      	mov	r8, r2
    uint8_t availableChannels = 0;
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8014140:	4607      	mov	r7, r0
 8014142:	b918      	cbnz	r0, 801414c <RegionBaseUSComputeNext125kHzJoinChannel+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014144:	2003      	movs	r0, #3
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
}
 8014146:	b002      	add	sp, #8
 8014148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801414c:	2900      	cmp	r1, #0
 801414e:	d0f9      	beq.n	8014144 <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
 8014150:	2a00      	cmp	r2, #0
 8014152:	d0f7      	beq.n	8014144 <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
    startIndex = *groupsCurrentIndex;
 8014154:	780c      	ldrb	r4, [r1, #0]
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8014156:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 8014158:	07e0      	lsls	r0, r4, #31
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801415a:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
{
 801415e:	f04f 0300 	mov.w	r3, #0
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8014162:	bf54      	ite	pl
 8014164:	b2c9      	uxtbpl	r1, r1
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8014166:	0a09      	lsrmi	r1, r1, #8
    *availableChannels = 0;
 8014168:	461d      	mov	r5, r3
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801416a:	fa41 f203 	asr.w	r2, r1, r3
 801416e:	07d2      	lsls	r2, r2, #31
 8014170:	b2d8      	uxtb	r0, r3
 8014172:	d505      	bpl.n	8014180 <RegionBaseUSComputeNext125kHzJoinChannel+0x4e>
            findAvailableChannelsIndex[*availableChannels] = i;
 8014174:	aa02      	add	r2, sp, #8
 8014176:	442a      	add	r2, r5
            ( *availableChannels )++;
 8014178:	3501      	adds	r5, #1
            findAvailableChannelsIndex[*availableChannels] = i;
 801417a:	f802 0c08 	strb.w	r0, [r2, #-8]
            ( *availableChannels )++;
 801417e:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < 8; i++ )
 8014180:	3301      	adds	r3, #1
 8014182:	2b08      	cmp	r3, #8
 8014184:	d1f1      	bne.n	801416a <RegionBaseUSComputeNext125kHzJoinChannel+0x38>
        if ( availableChannels > 0 )
 8014186:	b15d      	cbz	r5, 80141a0 <RegionBaseUSComputeNext125kHzJoinChannel+0x6e>
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8014188:	1e69      	subs	r1, r5, #1
 801418a:	2000      	movs	r0, #0
 801418c:	f7fe fc0b 	bl	80129a6 <randr>
 8014190:	ab02      	add	r3, sp, #8
 8014192:	4418      	add	r0, r3
 8014194:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 8014198:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801419c:	f888 3000 	strb.w	r3, [r8]
        startIndex++;
 80141a0:	3401      	adds	r4, #1
 80141a2:	b2e4      	uxtb	r4, r4
            startIndex = 0;
 80141a4:	2c08      	cmp	r4, #8
 80141a6:	bf28      	it	cs
 80141a8:	2400      	movcs	r4, #0
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80141aa:	b91d      	cbnz	r5, 80141b4 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 80141ac:	7833      	ldrb	r3, [r6, #0]
 80141ae:	42a3      	cmp	r3, r4
 80141b0:	d1d1      	bne.n	8014156 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
 80141b2:	e7c7      	b.n	8014144 <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
        *groupsCurrentIndex = startIndex;
 80141b4:	7034      	strb	r4, [r6, #0]
        return LORAMAC_STATUS_OK;
 80141b6:	2000      	movs	r0, #0
 80141b8:	e7c5      	b.n	8014146 <RegionBaseUSComputeNext125kHzJoinChannel+0x14>

080141ba <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 80141ba:	fb02 1000 	mla	r0, r2, r0, r1
 80141be:	4770      	bx	lr

080141c0 <RegionUS915Verify>:
{
 80141c0:	b508      	push	{r3, lr}
    switch( phyAttribute )
 80141c2:	290a      	cmp	r1, #10
 80141c4:	d81d      	bhi.n	8014202 <RegionUS915Verify+0x42>
 80141c6:	e8df f001 	tbb	[pc, r1]
 80141ca:	1c06      	.short	0x1c06
 80141cc:	0b1c1c1c 	.word	0x0b1c1c1c
 80141d0:	1a1c100e 	.word	0x1a1c100e
 80141d4:	1a          	.byte	0x1a
 80141d5:	00          	.byte	0x00
}
 80141d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return VerifyRfFreq( verify->Frequency );
 80141da:	6800      	ldr	r0, [r0, #0]
 80141dc:	f7f6 be88 	b.w	800aef0 <VerifyRfFreq>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80141e0:	2204      	movs	r2, #4
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80141e2:	2100      	movs	r1, #0
 80141e4:	e003      	b.n	80141ee <RegionUS915Verify+0x2e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80141e6:	2205      	movs	r2, #5
 80141e8:	e7fb      	b.n	80141e2 <RegionUS915Verify+0x22>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80141ea:	220d      	movs	r2, #13
 80141ec:	2108      	movs	r1, #8
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80141ee:	f990 0000 	ldrsb.w	r0, [r0]
 80141f2:	f7ff fdcc 	bl	8013d8e <RegionCommonValueInRange>
 80141f6:	3800      	subs	r0, #0
 80141f8:	bf18      	it	ne
 80141fa:	2001      	movne	r0, #1
}
 80141fc:	bd08      	pop	{r3, pc}
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80141fe:	220e      	movs	r2, #14
 8014200:	e7ef      	b.n	80141e2 <RegionUS915Verify+0x22>
    switch( phyAttribute )
 8014202:	2000      	movs	r0, #0
 8014204:	e7fa      	b.n	80141fc <RegionUS915Verify+0x3c>

08014206 <RegionUS915RxParamSetupReq>:
{
 8014206:	b538      	push	{r3, r4, r5, lr}
 8014208:	4605      	mov	r5, r0
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801420a:	6840      	ldr	r0, [r0, #4]
 801420c:	f7f6 fe70 	bl	800aef0 <VerifyRfFreq>
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8014210:	220d      	movs	r2, #13
        status &= 0xFE; // Channel frequency KO
 8014212:	2800      	cmp	r0, #0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8014214:	f04f 0108 	mov.w	r1, #8
 8014218:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 801421c:	bf14      	ite	ne
 801421e:	2407      	movne	r4, #7
 8014220:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8014222:	f7ff fdb4 	bl	8013d8e <RegionCommonValueInRange>
 8014226:	b908      	cbnz	r0, 801422c <RegionUS915RxParamSetupReq+0x26>
        status &= 0xFD; // Datarate KO
 8014228:	f004 0405 	and.w	r4, r4, #5
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801422c:	f995 0000 	ldrsb.w	r0, [r5]
 8014230:	2207      	movs	r2, #7
 8014232:	2105      	movs	r1, #5
 8014234:	f7ff fdab 	bl	8013d8e <RegionCommonValueInRange>
 8014238:	2801      	cmp	r0, #1
 801423a:	d003      	beq.n	8014244 <RegionUS915RxParamSetupReq+0x3e>
 801423c:	f995 3000 	ldrsb.w	r3, [r5]
 8014240:	2b0d      	cmp	r3, #13
 8014242:	dd01      	ble.n	8014248 <RegionUS915RxParamSetupReq+0x42>
        status &= 0xFD; // Datarate KO
 8014244:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8014248:	f995 0001 	ldrsb.w	r0, [r5, #1]
 801424c:	2203      	movs	r2, #3
 801424e:	2100      	movs	r1, #0
 8014250:	f7ff fd9d 	bl	8013d8e <RegionCommonValueInRange>
 8014254:	b908      	cbnz	r0, 801425a <RegionUS915RxParamSetupReq+0x54>
        status &= 0xFB; // Rx1DrOffset range KO
 8014256:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
}
 801425a:	4620      	mov	r0, r4
 801425c:	bd38      	pop	{r3, r4, r5, pc}

0801425e <RegionUS915NewChannelReq>:
}
 801425e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014262:	4770      	bx	lr

08014264 <RegionUS915TxParamSetupReq>:
 8014264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014268:	4770      	bx	lr

0801426a <RegionUS915DlChannelReq>:
 801426a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801426e:	4770      	bx	lr

08014270 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8014270:	2300      	movs	r3, #0
 8014272:	f7fe b993 	b.w	801259c <z_impl_z_log_msg2_static_create>

08014276 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
 8014276:	6803      	ldr	r3, [r0, #0]
}
 8014278:	6958      	ldr	r0, [r3, #20]
 801427a:	4770      	bx	lr

0801427c <fatfs_mkdir>:
{
 801427c:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
 801427e:	1c48      	adds	r0, r1, #1
 8014280:	f002 fd19 	bl	8016cb6 <f_mkdir>
}
 8014284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 8014288:	f7f7 bde4 	b.w	800be54 <translate_error>

0801428c <fatfs_unlink>:
{
 801428c:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
 801428e:	1c48      	adds	r0, r1, #1
 8014290:	f002 fcc4 	bl	8016c1c <f_unlink>
}
 8014294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 8014298:	f7f7 bddc 	b.w	800be54 <translate_error>

0801429c <fatfs_rename>:
{
 801429c:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
 801429e:	1c54      	adds	r4, r2, #1
{
 80142a0:	b087      	sub	sp, #28
 80142a2:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
 80142a4:	4620      	mov	r0, r4
 80142a6:	4669      	mov	r1, sp
 80142a8:	f002 fbf8 	bl	8016a9c <f_stat>
	if (FR_OK == res) {
 80142ac:	b940      	cbnz	r0, 80142c0 <fatfs_rename+0x24>
		res = f_unlink(&to[1]);
 80142ae:	4620      	mov	r0, r4
 80142b0:	f002 fcb4 	bl	8016c1c <f_unlink>
		if (FR_OK != res)
 80142b4:	b120      	cbz	r0, 80142c0 <fatfs_rename+0x24>
}
 80142b6:	b007      	add	sp, #28
 80142b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	res = translate_error(res);
 80142bc:	f7f7 bdca 	b.w	800be54 <translate_error>
	res = f_rename(&from[1], &to[1]);
 80142c0:	4621      	mov	r1, r4
 80142c2:	1c68      	adds	r0, r5, #1
 80142c4:	f002 fd7c 	bl	8016dc0 <f_rename>
 80142c8:	e7f5      	b.n	80142b6 <fatfs_rename+0x1a>

080142ca <fatfs_unmount>:
{
 80142ca:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
 80142cc:	68c1      	ldr	r1, [r0, #12]
 80142ce:	2200      	movs	r2, #0
 80142d0:	3101      	adds	r1, #1
 80142d2:	4610      	mov	r0, r2
 80142d4:	f7fa fdbe 	bl	800ee54 <f_mount>
}
 80142d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
 80142dc:	f7f7 bdba 	b.w	800be54 <translate_error>

080142e0 <fatfs_sync>:
{
 80142e0:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
 80142e2:	6800      	ldr	r0, [r0, #0]
 80142e4:	f002 fab8 	bl	8016858 <f_sync>
}
 80142e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 80142ec:	f7f7 bdb2 	b.w	800be54 <translate_error>

080142f0 <fatfs_seek>:
	switch (whence) {
 80142f0:	2a01      	cmp	r2, #1
{
 80142f2:	b508      	push	{r3, lr}
	switch (whence) {
 80142f4:	d00e      	beq.n	8014314 <fatfs_seek+0x24>
 80142f6:	2a02      	cmp	r2, #2
 80142f8:	d010      	beq.n	801431c <fatfs_seek+0x2c>
 80142fa:	b992      	cbnz	r2, 8014322 <fatfs_seek+0x32>
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
 80142fc:	2900      	cmp	r1, #0
 80142fe:	db10      	blt.n	8014322 <fatfs_seek+0x32>
 8014300:	6800      	ldr	r0, [r0, #0]
 8014302:	68c3      	ldr	r3, [r0, #12]
 8014304:	428b      	cmp	r3, r1
 8014306:	d30c      	bcc.n	8014322 <fatfs_seek+0x32>
	res = f_lseek(zfp->filep, pos);
 8014308:	f002 fae8 	bl	80168dc <f_lseek>
}
 801430c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
 8014310:	f7f7 bda0 	b.w	800be54 <translate_error>
		pos = f_tell((FIL *)zfp->filep) + offset;
 8014314:	6803      	ldr	r3, [r0, #0]
 8014316:	695b      	ldr	r3, [r3, #20]
		pos = f_size((FIL *)zfp->filep) + offset;
 8014318:	4419      	add	r1, r3
		break;
 801431a:	e7ef      	b.n	80142fc <fatfs_seek+0xc>
		pos = f_size((FIL *)zfp->filep) + offset;
 801431c:	6803      	ldr	r3, [r0, #0]
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	e7fa      	b.n	8014318 <fatfs_seek+0x28>
}
 8014322:	f06f 0015 	mvn.w	r0, #21
 8014326:	bd08      	pop	{r3, pc}

08014328 <fatfs_truncate>:
{
 8014328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801432a:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
 801432c:	6800      	ldr	r0, [r0, #0]
{
 801432e:	460e      	mov	r6, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
 8014330:	68c7      	ldr	r7, [r0, #12]
	res = f_lseek(zfp->filep, length);
 8014332:	f002 fad3 	bl	80168dc <f_lseek>
	if (res != FR_OK) {
 8014336:	b120      	cbz	r0, 8014342 <fatfs_truncate+0x1a>
}
 8014338:	b003      	add	sp, #12
 801433a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	res = translate_error(res);
 801433e:	f7f7 bd89 	b.w	800be54 <translate_error>
	if (length < cur_length) {
 8014342:	42b7      	cmp	r7, r6
		res = f_truncate(zfp->filep);
 8014344:	6820      	ldr	r0, [r4, #0]
	off_t cur_length = f_size((FIL *)zfp->filep);
 8014346:	463d      	mov	r5, r7
	if (length < cur_length) {
 8014348:	dd02      	ble.n	8014350 <fatfs_truncate+0x28>
		res = f_truncate(zfp->filep);
 801434a:	f002 fc2c 	bl	8016ba6 <f_truncate>
 801434e:	e7f3      	b.n	8014338 <fatfs_truncate+0x10>
		res = f_lseek(zfp->filep, cur_length);
 8014350:	4639      	mov	r1, r7
		length = f_tell((FIL *)zfp->filep);
 8014352:	6946      	ldr	r6, [r0, #20]
		res = f_lseek(zfp->filep, cur_length);
 8014354:	f002 fac2 	bl	80168dc <f_lseek>
		if (res != FR_OK) {
 8014358:	2800      	cmp	r0, #0
 801435a:	d1ed      	bne.n	8014338 <fatfs_truncate+0x10>
		uint8_t c = 0U;
 801435c:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
 8014360:	42b5      	cmp	r5, r6
 8014362:	db01      	blt.n	8014368 <fatfs_truncate+0x40>
 8014364:	2000      	movs	r0, #0
 8014366:	e7e7      	b.n	8014338 <fatfs_truncate+0x10>
			res = f_write(zfp->filep, &c, 1, &bw);
 8014368:	6820      	ldr	r0, [r4, #0]
 801436a:	ab01      	add	r3, sp, #4
 801436c:	2201      	movs	r2, #1
 801436e:	f10d 0103 	add.w	r1, sp, #3
 8014372:	f002 f9b1 	bl	80166d8 <f_write>
			if (res != FR_OK) {
 8014376:	2800      	cmp	r0, #0
 8014378:	d1de      	bne.n	8014338 <fatfs_truncate+0x10>
		for (int i = cur_length; i < length; i++) {
 801437a:	3501      	adds	r5, #1
 801437c:	e7f0      	b.n	8014360 <fatfs_truncate+0x38>

0801437e <fatfs_write>:
{
 801437e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (zfp->flags & FS_O_APPEND) {
 8014380:	7a03      	ldrb	r3, [r0, #8]
 8014382:	069b      	lsls	r3, r3, #26
{
 8014384:	4604      	mov	r4, r0
 8014386:	460d      	mov	r5, r1
 8014388:	4616      	mov	r6, r2
	if (zfp->flags & FS_O_APPEND) {
 801438a:	d40b      	bmi.n	80143a4 <fatfs_write+0x26>
		res = f_write(zfp->filep, ptr, size, &bw);
 801438c:	6820      	ldr	r0, [r4, #0]
 801438e:	ab01      	add	r3, sp, #4
 8014390:	4632      	mov	r2, r6
 8014392:	4629      	mov	r1, r5
 8014394:	f002 f9a0 	bl	80166d8 <f_write>
	if (res != FR_OK) {
 8014398:	b158      	cbz	r0, 80143b2 <fatfs_write+0x34>
}
 801439a:	b002      	add	sp, #8
 801439c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = translate_error(res);
 80143a0:	f7f7 bd58 	b.w	800be54 <translate_error>
	off_t pos = f_size((FIL *)zfp->filep);
 80143a4:	6800      	ldr	r0, [r0, #0]
		res = f_lseek(zfp->filep, pos);
 80143a6:	68c1      	ldr	r1, [r0, #12]
 80143a8:	f002 fa98 	bl	80168dc <f_lseek>
	if (res == FR_OK) {
 80143ac:	2800      	cmp	r0, #0
 80143ae:	d0ed      	beq.n	801438c <fatfs_write+0xe>
 80143b0:	e7f3      	b.n	801439a <fatfs_write+0x1c>
}
 80143b2:	9801      	ldr	r0, [sp, #4]
 80143b4:	b002      	add	sp, #8
 80143b6:	bd70      	pop	{r4, r5, r6, pc}

080143b8 <fatfs_read>:
{
 80143b8:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
 80143ba:	6800      	ldr	r0, [r0, #0]
 80143bc:	ab01      	add	r3, sp, #4
 80143be:	f002 f8f5 	bl	80165ac <f_read>
	if (res != FR_OK) {
 80143c2:	b120      	cbz	r0, 80143ce <fatfs_read+0x16>
}
 80143c4:	b003      	add	sp, #12
 80143c6:	f85d eb04 	ldr.w	lr, [sp], #4
		return translate_error(res);
 80143ca:	f7f7 bd43 	b.w	800be54 <translate_error>
}
 80143ce:	9801      	ldr	r0, [sp, #4]
 80143d0:	b003      	add	sp, #12
 80143d2:	f85d fb04 	ldr.w	pc, [sp], #4

080143d6 <fatfs_stat>:
{
 80143d6:	b530      	push	{r4, r5, lr}
 80143d8:	4608      	mov	r0, r1
 80143da:	b087      	sub	sp, #28
	res = f_stat(&path[1], &fno);
 80143dc:	4669      	mov	r1, sp
 80143de:	3001      	adds	r0, #1
{
 80143e0:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
 80143e2:	f002 fb5b 	bl	8016a9c <f_stat>
	if (res == FR_OK) {
 80143e6:	4604      	mov	r4, r0
 80143e8:	b960      	cbnz	r0, 8014404 <fatfs_stat+0x2e>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 80143ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
		entry->type = ((fno.fattrib & AM_DIR) ?
 80143ee:	4628      	mov	r0, r5
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 80143f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
 80143f4:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 80143f8:	f10d 0109 	add.w	r1, sp, #9
 80143fc:	f003 fa54 	bl	80178a8 <strcpy>
		entry->size = fno.fsize;
 8014400:	9b00      	ldr	r3, [sp, #0]
 8014402:	612b      	str	r3, [r5, #16]
	return translate_error(res);
 8014404:	4620      	mov	r0, r4
}
 8014406:	b007      	add	sp, #28
 8014408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 801440c:	f7f7 bd22 	b.w	800be54 <translate_error>

08014410 <fatfs_readdir>:
{
 8014410:	b530      	push	{r4, r5, lr}
 8014412:	b087      	sub	sp, #28
	res = f_readdir(zdp->dirp, &fno);
 8014414:	6800      	ldr	r0, [r0, #0]
{
 8014416:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
 8014418:	4669      	mov	r1, sp
 801441a:	f002 fb1e 	bl	8016a5a <f_readdir>
	if (res == FR_OK) {
 801441e:	4605      	mov	r5, r0
 8014420:	b968      	cbnz	r0, 801443e <fatfs_readdir+0x2e>
 8014422:	f10d 0109 	add.w	r1, sp, #9
 8014426:	1c60      	adds	r0, r4, #1
 8014428:	f003 fa3e 	bl	80178a8 <strcpy>
		if (entry->name[0] != 0) {
 801442c:	7863      	ldrb	r3, [r4, #1]
 801442e:	b133      	cbz	r3, 801443e <fatfs_readdir+0x2e>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 8014430:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014434:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
 8014438:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
 801443a:	9b00      	ldr	r3, [sp, #0]
 801443c:	6123      	str	r3, [r4, #16]
	return translate_error(res);
 801443e:	4628      	mov	r0, r5
}
 8014440:	b007      	add	sp, #28
 8014442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 8014446:	f7f7 bd05 	b.w	800be54 <translate_error>

0801444a <fatfs_statvfs>:
{
 801444a:	b513      	push	{r0, r1, r4, lr}
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 801444c:	68c0      	ldr	r0, [r0, #12]
{
 801444e:	4614      	mov	r4, r2
	DWORD f_bfree = 0;
 8014450:	2300      	movs	r3, #0
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 8014452:	466a      	mov	r2, sp
 8014454:	a901      	add	r1, sp, #4
 8014456:	3001      	adds	r0, #1
	DWORD f_bfree = 0;
 8014458:	9301      	str	r3, [sp, #4]
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 801445a:	f002 fb41 	bl	8016ae0 <f_getfree>
	if (res != FR_OK) {
 801445e:	b968      	cbnz	r0, 801447c <fatfs_statvfs+0x32>
	stat->f_bfree = f_bfree;
 8014460:	9b01      	ldr	r3, [sp, #4]
	stat->f_frsize = fs->csize * stat->f_bsize;
 8014462:	9a00      	ldr	r2, [sp, #0]
	stat->f_bfree = f_bfree;
 8014464:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
 8014466:	f44f 7300 	mov.w	r3, #512	; 0x200
 801446a:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
 801446c:	8953      	ldrh	r3, [r2, #10]
 801446e:	025b      	lsls	r3, r3, #9
 8014470:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
 8014472:	6953      	ldr	r3, [r2, #20]
 8014474:	3b02      	subs	r3, #2
 8014476:	60a3      	str	r3, [r4, #8]
}
 8014478:	b002      	add	sp, #8
 801447a:	bd10      	pop	{r4, pc}
		return -EIO;
 801447c:	f06f 0004 	mvn.w	r0, #4
 8014480:	e7fa      	b.n	8014478 <fatfs_statvfs+0x2e>

08014482 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8014482:	2200      	movs	r2, #0
{
 8014484:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8014486:	4611      	mov	r1, r2
 8014488:	2006      	movs	r0, #6
 801448a:	f7f0 fad9 	bl	8004a40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 801448e:	2200      	movs	r2, #0
 8014490:	4611      	mov	r1, r2
 8014492:	2007      	movs	r0, #7
 8014494:	f7f0 fad4 	bl	8004a40 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8014498:	2200      	movs	r2, #0
 801449a:	4611      	mov	r1, r2
 801449c:	2008      	movs	r0, #8
 801449e:	f7f0 facf 	bl	8004a40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80144a2:	2200      	movs	r2, #0
 80144a4:	4611      	mov	r1, r2
 80144a6:	2009      	movs	r0, #9
 80144a8:	f7f0 faca 	bl	8004a40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80144ac:	2200      	movs	r2, #0
 80144ae:	4611      	mov	r1, r2
 80144b0:	200a      	movs	r0, #10
 80144b2:	f7f0 fac5 	bl	8004a40 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80144b6:	2200      	movs	r2, #0
 80144b8:	4611      	mov	r1, r2
 80144ba:	2016      	movs	r0, #22
 80144bc:	f7f0 fac0 	bl	8004a40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80144c0:	2200      	movs	r2, #0
 80144c2:	4611      	mov	r1, r2
 80144c4:	2029      	movs	r0, #41	; 0x29
 80144c6:	f7f0 fabb 	bl	8004a40 <z_arm_irq_priority_set>
}
 80144ca:	2000      	movs	r0, #0
 80144cc:	bd08      	pop	{r3, pc}

080144ce <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 80144ce:	6902      	ldr	r2, [r0, #16]
 80144d0:	2110      	movs	r1, #16
 80144d2:	200a      	movs	r0, #10
 80144d4:	f7f7 bd82 	b.w	800bfdc <__stm32_exti_isr.isra.0>

080144d8 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 80144d8:	6902      	ldr	r2, [r0, #16]
 80144da:	210a      	movs	r1, #10
 80144dc:	2005      	movs	r0, #5
 80144de:	f7f7 bd7d 	b.w	800bfdc <__stm32_exti_isr.isra.0>

080144e2 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 80144e2:	6902      	ldr	r2, [r0, #16]
 80144e4:	2105      	movs	r1, #5
 80144e6:	2004      	movs	r0, #4
 80144e8:	f7f7 bd78 	b.w	800bfdc <__stm32_exti_isr.isra.0>

080144ec <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 80144ec:	6902      	ldr	r2, [r0, #16]
 80144ee:	2104      	movs	r1, #4
 80144f0:	2003      	movs	r0, #3
 80144f2:	f7f7 bd73 	b.w	800bfdc <__stm32_exti_isr.isra.0>

080144f6 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 80144f6:	6902      	ldr	r2, [r0, #16]
 80144f8:	2103      	movs	r1, #3
 80144fa:	2002      	movs	r0, #2
 80144fc:	f7f7 bd6e 	b.w	800bfdc <__stm32_exti_isr.isra.0>

08014500 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8014500:	6902      	ldr	r2, [r0, #16]
 8014502:	2102      	movs	r1, #2
 8014504:	2001      	movs	r0, #1
 8014506:	f7f7 bd69 	b.w	800bfdc <__stm32_exti_isr.isra.0>

0801450a <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 801450a:	6902      	ldr	r2, [r0, #16]
 801450c:	2101      	movs	r1, #1
 801450e:	2000      	movs	r0, #0
 8014510:	f7f7 bd64 	b.w	800bfdc <__stm32_exti_isr.isra.0>

08014514 <sys_get_be32>:
	return ((uint16_t)src[0] << 8) | src[1];
 8014514:	6800      	ldr	r0, [r0, #0]
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
}
 8014516:	ba00      	rev	r0, r0
 8014518:	4770      	bx	lr

0801451a <sdhc_is_retryable>:
	switch (err) {
 801451a:	f110 0f74 	cmn.w	r0, #116	; 0x74
 801451e:	d007      	beq.n	8014530 <sdhc_is_retryable+0x16>
 8014520:	1d43      	adds	r3, r0, #5
 8014522:	d005      	beq.n	8014530 <sdhc_is_retryable+0x16>
 8014524:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 8014528:	bf14      	ite	ne
 801452a:	2000      	movne	r0, #0
 801452c:	2001      	moveq	r0, #1
 801452e:	4770      	bx	lr
 8014530:	2001      	movs	r0, #1
}
 8014532:	4770      	bx	lr

08014534 <disk_spi_sdhc_access_status>:
	struct sdhc_spi_data *data = dev->data;
 8014534:	6903      	ldr	r3, [r0, #16]
	return data->status;
 8014536:	691b      	ldr	r3, [r3, #16]
}
 8014538:	7c18      	ldrb	r0, [r3, #16]
 801453a:	4770      	bx	lr

0801453c <sdhc_map_flags>:
{
 801453c:	4603      	mov	r3, r0
	if (flags < 0) {
 801453e:	1e08      	subs	r0, r1, #0
 8014540:	da01      	bge.n	8014546 <sdhc_map_flags+0xa>
 8014542:	4770      	bx	lr
	for (; map->mask != 0U; map++) {
 8014544:	3302      	adds	r3, #2
 8014546:	781a      	ldrb	r2, [r3, #0]
 8014548:	b10a      	cbz	r2, 801454e <sdhc_map_flags+0x12>
		if ((flags & map->mask) == map->mask) {
 801454a:	4382      	bics	r2, r0
 801454c:	d1fa      	bne.n	8014544 <sdhc_map_flags+0x8>
	return -map->err;
 801454e:	7858      	ldrb	r0, [r3, #1]
 8014550:	4240      	negs	r0, r0
}
 8014552:	4770      	bx	lr

08014554 <spi_transceive.constprop.0>:
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
 8014554:	b410      	push	{r4}
 8014556:	6884      	ldr	r4, [r0, #8]
 8014558:	6824      	ldr	r4, [r4, #0]
 801455a:	46a4      	mov	ip, r4
}
 801455c:	bc10      	pop	{r4}
 801455e:	4760      	bx	ip

08014560 <sdhc_spi_tx>:
{
 8014560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct spi_buf_set tx = {
 8014562:	2301      	movs	r3, #1
	struct spi_buf spi_bufs[] = {
 8014564:	e9cd 1200 	strd	r1, r2, [sp]
	const struct spi_buf_set tx = {
 8014568:	9303      	str	r3, [sp, #12]
	return spi_transceive(dev, config, tx_bufs, NULL);
 801456a:	e9d0 0100 	ldrd	r0, r1, [r0]
 801456e:	2300      	movs	r3, #0
 8014570:	aa02      	add	r2, sp, #8
 8014572:	f8cd d008 	str.w	sp, [sp, #8]
 8014576:	f7ff ffed 	bl	8014554 <spi_transceive.constprop.0>
}
 801457a:	b005      	add	sp, #20
 801457c:	f85d fb04 	ldr.w	pc, [sp], #4

08014580 <sdhc_spi_tx_cmd>:
{
 8014580:	b513      	push	{r0, r1, r4, lr}
	buf[0] = SDHC_TX | (cmd & ~SDHC_START);
 8014582:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8014586:	f88d 1000 	strb.w	r1, [sp]
	sys_put_be16(val >> 16, dst);
 801458a:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
 801458c:	0e11      	lsrs	r1, r2, #24
{
 801458e:	4604      	mov	r4, r0
 8014590:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[1] = val;
 8014594:	f88d 3002 	strb.w	r3, [sp, #2]
 8014598:	f88d 2004 	strb.w	r2, [sp, #4]
	dst[0] = val >> 8;
 801459c:	f3c2 2307 	ubfx	r3, r2, #8, #8
	buf[SDHC_CMD_BODY_SIZE] = crc7_be(0, buf, SDHC_CMD_BODY_SIZE) | 0x01;
 80145a0:	4669      	mov	r1, sp
 80145a2:	2205      	movs	r2, #5
 80145a4:	2000      	movs	r0, #0
 80145a6:	f88d 3003 	strb.w	r3, [sp, #3]
 80145aa:	f7fd fc64 	bl	8011e76 <crc7_be>
 80145ae:	f040 0001 	orr.w	r0, r0, #1
 80145b2:	f88d 0005 	strb.w	r0, [sp, #5]
	return sdhc_spi_tx(data, buf, sizeof(buf));
 80145b6:	2206      	movs	r2, #6
 80145b8:	4669      	mov	r1, sp
 80145ba:	4620      	mov	r0, r4
 80145bc:	f7ff ffd0 	bl	8014560 <sdhc_spi_tx>
}
 80145c0:	b002      	add	sp, #8
 80145c2:	bd10      	pop	{r4, pc}

080145c4 <sdhc_spi_rx_u8>:
{
 80145c4:	b507      	push	{r0, r1, r2, lr}
	int err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 80145c6:	2201      	movs	r2, #1
 80145c8:	a901      	add	r1, sp, #4
 80145ca:	f7f7 fdc1 	bl	800c150 <sdhc_spi_rx_bytes>
	if (err != 0) {
 80145ce:	b908      	cbnz	r0, 80145d4 <sdhc_spi_rx_u8+0x10>
	return buf[0];
 80145d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80145d4:	b003      	add	sp, #12
 80145d6:	f85d fb04 	ldr.w	pc, [sp], #4

080145da <spi_release.isra.0>:
	return api->release(dev, config);
 80145da:	6883      	ldr	r3, [r0, #8]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	4718      	bx	r3

080145e0 <k_msleep.isra.0>:
 80145e0:	210a      	movs	r1, #10
 80145e2:	fb80 0101 	smull	r0, r1, r0, r1
 80145e6:	f7fc b8fd 	b.w	80107e4 <z_impl_k_sleep>

080145ea <sdhc_retry_ok>:

/* Called at the end of a retry loop.  Returns if the minimum try
 * count and timeout has passed.  Delays/yields on retry.
 */
static inline bool sdhc_retry_ok(struct sdhc_retry *retry)
{
 80145ea:	b538      	push	{r3, r4, r5, lr}
	int32_t remain = retry->end - k_uptime_get_32();
 80145ec:	6805      	ldr	r5, [r0, #0]
{
 80145ee:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 80145f0:	f002 ff9d 	bl	801752e <z_impl_k_uptime_ticks>

	if (retry->tries < SDHC_MIN_TRIES) {
 80145f4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80145f8:	2b13      	cmp	r3, #19
 80145fa:	dc07      	bgt.n	801460c <sdhc_retry_ok+0x22>
		retry->tries++;
		if (retry->sleep != 0U) {
 80145fc:	88e0      	ldrh	r0, [r4, #6]
		retry->tries++;
 80145fe:	3301      	adds	r3, #1
 8014600:	80a3      	strh	r3, [r4, #4]
		if (retry->sleep != 0U) {
 8014602:	b108      	cbz	r0, 8014608 <sdhc_retry_ok+0x1e>
		return true;
	}

	if (remain >= 0) {
		if (retry->sleep > 0) {
			k_msleep(retry->sleep);
 8014604:	f7ff ffec 	bl	80145e0 <k_msleep.isra.0>
		return true;
 8014608:	2001      	movs	r0, #1

		return true;
	}

	return false;
}
 801460a:	bd38      	pop	{r3, r4, r5, pc}
			return t / ((uint64_t)from_hz / to_hz);
 801460c:	220a      	movs	r2, #10
 801460e:	2300      	movs	r3, #0
 8014610:	f7ec fcda 	bl	8000fc8 <__aeabi_uldivmod>
	int32_t remain = retry->end - k_uptime_get_32();
 8014614:	1a2d      	subs	r5, r5, r0
	if (remain >= 0) {
 8014616:	2d00      	cmp	r5, #0
 8014618:	db05      	blt.n	8014626 <sdhc_retry_ok+0x3c>
 801461a:	88e0      	ldrh	r0, [r4, #6]
		if (retry->sleep > 0) {
 801461c:	2800      	cmp	r0, #0
 801461e:	d1f1      	bne.n	8014604 <sdhc_retry_ok+0x1a>
	z_impl_k_yield();
 8014620:	f7fc f858 	bl	80106d4 <z_impl_k_yield>
 8014624:	e7f0      	b.n	8014608 <sdhc_retry_ok+0x1e>
	return false;
 8014626:	2000      	movs	r0, #0
 8014628:	e7ef      	b.n	801460a <sdhc_retry_ok+0x20>

0801462a <sdhc_retry_init>:
{
 801462a:	b570      	push	{r4, r5, r6, lr}
 801462c:	4604      	mov	r4, r0
 801462e:	460d      	mov	r5, r1
 8014630:	4616      	mov	r6, r2
	return z_impl_k_uptime_ticks();
 8014632:	f002 ff7c 	bl	801752e <z_impl_k_uptime_ticks>
 8014636:	2300      	movs	r3, #0
 8014638:	220a      	movs	r2, #10
 801463a:	f7ec fcc5 	bl	8000fc8 <__aeabi_uldivmod>
	retry->tries = 0;
 801463e:	2300      	movs	r3, #0
	retry->end = k_uptime_get_32() + timeout;
 8014640:	4405      	add	r5, r0
 8014642:	6025      	str	r5, [r4, #0]
	retry->tries = 0;
 8014644:	80a3      	strh	r3, [r4, #4]
	retry->sleep = sleep;
 8014646:	80e6      	strh	r6, [r4, #6]
}
 8014648:	bd70      	pop	{r4, r5, r6, pc}

0801464a <sdhc_spi_skip_until_start>:
{
 801464a:	b513      	push	{r0, r1, r4, lr}
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 801464c:	2200      	movs	r2, #0
{
 801464e:	4604      	mov	r4, r0
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 8014650:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8014654:	4668      	mov	r0, sp
 8014656:	f7ff ffe8 	bl	801462a <sdhc_retry_init>
		status = sdhc_spi_rx_u8(data);
 801465a:	4620      	mov	r0, r4
 801465c:	f7ff ffb2 	bl	80145c4 <sdhc_spi_rx_u8>
		if (status < 0) {
 8014660:	2800      	cmp	r0, #0
 8014662:	db08      	blt.n	8014676 <sdhc_spi_skip_until_start+0x2c>
		if ((status & SDHC_START) == 0) {
 8014664:	0603      	lsls	r3, r0, #24
 8014666:	d506      	bpl.n	8014676 <sdhc_spi_skip_until_start+0x2c>
	} while (sdhc_retry_ok(&retry));
 8014668:	4668      	mov	r0, sp
 801466a:	f7ff ffbe 	bl	80145ea <sdhc_retry_ok>
 801466e:	2800      	cmp	r0, #0
 8014670:	d1f3      	bne.n	801465a <sdhc_spi_skip_until_start+0x10>
	return -ETIMEDOUT;
 8014672:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
 8014676:	b002      	add	sp, #8
 8014678:	bd10      	pop	{r4, pc}

0801467a <sdhc_spi_cmd_r37_raw>:
{
 801467a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801467c:	4605      	mov	r5, r0
 801467e:	461f      	mov	r7, r3
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 8014680:	f7ff ff7e 	bl	8014580 <sdhc_spi_tx_cmd>
	if (err != 0) {
 8014684:	4604      	mov	r4, r0
 8014686:	b9a0      	cbnz	r0, 80146b2 <sdhc_spi_cmd_r37_raw+0x38>
	status = sdhc_spi_skip_until_start(data);
 8014688:	4628      	mov	r0, r5
 801468a:	f7ff ffde 	bl	801464a <sdhc_spi_skip_until_start>
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 801468e:	2204      	movs	r2, #4
	status = sdhc_spi_skip_until_start(data);
 8014690:	4604      	mov	r4, r0
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 8014692:	eb0d 0102 	add.w	r1, sp, r2
 8014696:	4628      	mov	r0, r5
 8014698:	f7f7 fd5a 	bl	800c150 <sdhc_spi_rx_bytes>
 801469c:	4606      	mov	r6, r0
	*reply = sys_get_be32(buf);
 801469e:	a801      	add	r0, sp, #4
 80146a0:	f7ff ff38 	bl	8014514 <sys_get_be32>
 80146a4:	6038      	str	r0, [r7, #0]
	sdhc_spi_rx_u8(data);
 80146a6:	4628      	mov	r0, r5
 80146a8:	f7ff ff8c 	bl	80145c4 <sdhc_spi_rx_u8>
	if (err != 0) {
 80146ac:	2e00      	cmp	r6, #0
 80146ae:	bf18      	it	ne
 80146b0:	4634      	movne	r4, r6
}
 80146b2:	4620      	mov	r0, r4
 80146b4:	b003      	add	sp, #12
 80146b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146b8 <sdhc_spi_skip_until_ready>:
{
 80146b8:	b513      	push	{r0, r1, r4, lr}
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 80146ba:	2200      	movs	r2, #0
{
 80146bc:	4604      	mov	r4, r0
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 80146be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80146c2:	4668      	mov	r0, sp
 80146c4:	f7ff ffb1 	bl	801462a <sdhc_retry_init>
		status = sdhc_spi_rx_u8(data);
 80146c8:	4620      	mov	r0, r4
 80146ca:	f7ff ff7b 	bl	80145c4 <sdhc_spi_rx_u8>
		if (status < 0) {
 80146ce:	2800      	cmp	r0, #0
 80146d0:	db07      	blt.n	80146e2 <sdhc_spi_skip_until_ready+0x2a>
		if (status == 0) {
 80146d2:	d108      	bne.n	80146e6 <sdhc_spi_skip_until_ready+0x2e>
	} while (sdhc_retry_ok(&retry));
 80146d4:	4668      	mov	r0, sp
 80146d6:	f7ff ff88 	bl	80145ea <sdhc_retry_ok>
 80146da:	2800      	cmp	r0, #0
 80146dc:	d1f4      	bne.n	80146c8 <sdhc_spi_skip_until_ready+0x10>
	return -ETIMEDOUT;
 80146de:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
 80146e2:	b002      	add	sp, #8
 80146e4:	bd10      	pop	{r4, pc}
		if (status == 0xFF) {
 80146e6:	28ff      	cmp	r0, #255	; 0xff
 80146e8:	d101      	bne.n	80146ee <sdhc_spi_skip_until_ready+0x36>
			return 0;
 80146ea:	2000      	movs	r0, #0
 80146ec:	e7f9      	b.n	80146e2 <sdhc_spi_skip_until_ready+0x2a>
		status = sdhc_spi_rx_u8(data);
 80146ee:	4620      	mov	r0, r4
 80146f0:	f7ff ff68 	bl	80145c4 <sdhc_spi_rx_u8>
		if (status < 0) {
 80146f4:	2800      	cmp	r0, #0
 80146f6:	dbf4      	blt.n	80146e2 <sdhc_spi_skip_until_ready+0x2a>
		if (status == 0xFF) {
 80146f8:	28ff      	cmp	r0, #255	; 0xff
 80146fa:	d0f6      	beq.n	80146ea <sdhc_spi_skip_until_ready+0x32>
		return -EPROTO;
 80146fc:	f06f 0046 	mvn.w	r0, #70	; 0x46
 8014700:	e7ef      	b.n	80146e2 <sdhc_spi_skip_until_ready+0x2a>

08014702 <sdhc_spi_recover.isra.0>:
	return sdhc_spi_cmd_r1(data, SDHC_SEND_STATUS, 0);
 8014702:	2200      	movs	r2, #0
 8014704:	210d      	movs	r1, #13
 8014706:	f7f7 bddb 	b.w	800c2c0 <sdhc_spi_cmd_r1>

0801470a <disk_spi_sdhc_access_read>:
	struct sdhc_spi_data *data = dev->data;
 801470a:	6900      	ldr	r0, [r0, #16]
{
 801470c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sdhc_spi_data *data = dev->data;
 8014710:	6905      	ldr	r5, [r0, #16]
	err = sdhc_spi_read(data, buf, sector, count);
 8014712:	4628      	mov	r0, r5
{
 8014714:	460e      	mov	r6, r1
 8014716:	4617      	mov	r7, r2
 8014718:	4698      	mov	r8, r3
	err = sdhc_spi_read(data, buf, sector, count);
 801471a:	f7f7 ff33 	bl	800c584 <sdhc_spi_read>
	if (err != 0 && sdhc_is_retryable(err)) {
 801471e:	4604      	mov	r4, r0
 8014720:	b168      	cbz	r0, 801473e <disk_spi_sdhc_access_read+0x34>
 8014722:	f7ff fefa 	bl	801451a <sdhc_is_retryable>
 8014726:	b150      	cbz	r0, 801473e <disk_spi_sdhc_access_read+0x34>
		sdhc_spi_recover(data);
 8014728:	4628      	mov	r0, r5
 801472a:	f7ff ffea 	bl	8014702 <sdhc_spi_recover.isra.0>
		err = sdhc_spi_read(data, buf, sector, count);
 801472e:	4643      	mov	r3, r8
 8014730:	463a      	mov	r2, r7
 8014732:	4631      	mov	r1, r6
 8014734:	4628      	mov	r0, r5
}
 8014736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		err = sdhc_spi_read(data, buf, sector, count);
 801473a:	f7f7 bf23 	b.w	800c584 <sdhc_spi_read>
}
 801473e:	4620      	mov	r0, r4
 8014740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014744 <disk_spi_sdhc_access_write>:
	struct sdhc_spi_data *data = dev->data;
 8014744:	6900      	ldr	r0, [r0, #16]
{
 8014746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sdhc_spi_data *data = dev->data;
 801474a:	6905      	ldr	r5, [r0, #16]
	if (count > 2) {
 801474c:	2b02      	cmp	r3, #2
{
 801474e:	460f      	mov	r7, r1
 8014750:	4690      	mov	r8, r2
 8014752:	461e      	mov	r6, r3
		err = sdhc_spi_write_multi(data, buf, sector, count);
 8014754:	4628      	mov	r0, r5
	if (count > 2) {
 8014756:	d916      	bls.n	8014786 <disk_spi_sdhc_access_write+0x42>
		err = sdhc_spi_write_multi(data, buf, sector, count);
 8014758:	f7f7 ffd2 	bl	800c700 <sdhc_spi_write_multi>
		if (err != 0 && sdhc_is_retryable(err)) {
 801475c:	4604      	mov	r4, r0
 801475e:	b918      	cbnz	r0, 8014768 <disk_spi_sdhc_access_write+0x24>
{
 8014760:	2400      	movs	r4, #0
}
 8014762:	4620      	mov	r0, r4
 8014764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (err != 0 && sdhc_is_retryable(err)) {
 8014768:	f7ff fed7 	bl	801451a <sdhc_is_retryable>
 801476c:	2800      	cmp	r0, #0
 801476e:	d0f8      	beq.n	8014762 <disk_spi_sdhc_access_write+0x1e>
			sdhc_spi_recover(data);
 8014770:	4628      	mov	r0, r5
 8014772:	f7ff ffc6 	bl	8014702 <sdhc_spi_recover.isra.0>
			err = sdhc_spi_write_multi(data, buf, sector, count);
 8014776:	4633      	mov	r3, r6
 8014778:	4642      	mov	r2, r8
 801477a:	4639      	mov	r1, r7
 801477c:	4628      	mov	r0, r5
}
 801477e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = sdhc_spi_write_multi(data, buf, sector, count);
 8014782:	f7f7 bfbd 	b.w	800c700 <sdhc_spi_write_multi>
		err = sdhc_spi_write(data, buf, sector, count);
 8014786:	f7f7 ff35 	bl	800c5f4 <sdhc_spi_write>
		if (err != 0 && sdhc_is_retryable(err)) {
 801478a:	4604      	mov	r4, r0
 801478c:	2800      	cmp	r0, #0
 801478e:	d0e7      	beq.n	8014760 <disk_spi_sdhc_access_write+0x1c>
 8014790:	f7ff fec3 	bl	801451a <sdhc_is_retryable>
 8014794:	2800      	cmp	r0, #0
 8014796:	d0e4      	beq.n	8014762 <disk_spi_sdhc_access_write+0x1e>
			sdhc_spi_recover(data);
 8014798:	4628      	mov	r0, r5
 801479a:	f7ff ffb2 	bl	8014702 <sdhc_spi_recover.isra.0>
			err = sdhc_spi_write(data, buf, sector, count);
 801479e:	4633      	mov	r3, r6
 80147a0:	4642      	mov	r2, r8
 80147a2:	4639      	mov	r1, r7
 80147a4:	4628      	mov	r0, r5
}
 80147a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = sdhc_spi_write(data, buf, sector, count);
 80147aa:	f7f7 bf23 	b.w	800c5f4 <sdhc_spi_write>

080147ae <stm32_clock_control_on>:
	switch (pclken->bus) {
 80147ae:	680b      	ldr	r3, [r1, #0]
{
 80147b0:	b088      	sub	sp, #32
	switch (pclken->bus) {
 80147b2:	2b0a      	cmp	r3, #10
 80147b4:	d856      	bhi.n	8014864 <stm32_clock_control_on+0xb6>
 80147b6:	e8df f003 	tbb	[pc, r3]
 80147ba:	1306      	.short	0x1306
 80147bc:	55343f29 	.word	0x55343f29
 80147c0:	5555551e 	.word	0x5555551e
 80147c4:	4a          	.byte	0x4a
 80147c5:	00          	.byte	0x00
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80147c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80147ca:	684b      	ldr	r3, [r1, #4]
 80147cc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80147ce:	4319      	orrs	r1, r3
 80147d0:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80147d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80147d4:	4013      	ands	r3, r2
 80147d6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80147d8:	9b01      	ldr	r3, [sp, #4]
	return 0;
 80147da:	2000      	movs	r0, #0
}
 80147dc:	b008      	add	sp, #32
 80147de:	4770      	bx	lr
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80147e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80147e4:	684b      	ldr	r3, [r1, #4]
 80147e6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80147e8:	4319      	orrs	r1, r3
 80147ea:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80147ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80147ee:	4013      	ands	r3, r2
 80147f0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80147f2:	9b02      	ldr	r3, [sp, #8]
 80147f4:	e7f1      	b.n	80147da <stm32_clock_control_on+0x2c>
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80147f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 80147fa:	684b      	ldr	r3, [r1, #4]
 80147fc:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80147fe:	4319      	orrs	r1, r3
 8014800:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014802:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8014804:	4013      	ands	r3, r2
 8014806:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8014808:	9b03      	ldr	r3, [sp, #12]
 801480a:	e7e6      	b.n	80147da <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 801480c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8014810:	684b      	ldr	r3, [r1, #4]
 8014812:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8014814:	4319      	orrs	r1, r3
 8014816:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8014818:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801481a:	4013      	ands	r3, r2
 801481c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 801481e:	9b04      	ldr	r3, [sp, #16]
 8014820:	e7db      	b.n	80147da <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8014822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8014826:	684b      	ldr	r3, [r1, #4]
 8014828:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 801482a:	4319      	orrs	r1, r3
 801482c:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801482e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8014830:	4013      	ands	r3, r2
 8014832:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8014834:	9b05      	ldr	r3, [sp, #20]
 8014836:	e7d0      	b.n	80147da <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8014838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB2_GRP1_EnableClock(pclken->enr);
 801483c:	684b      	ldr	r3, [r1, #4]
 801483e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8014840:	4319      	orrs	r1, r3
 8014842:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8014844:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8014846:	4013      	ands	r3, r2
 8014848:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 801484a:	9b06      	ldr	r3, [sp, #24]
 801484c:	e7c5      	b.n	80147da <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 801484e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB3_GRP1_EnableClock(pclken->enr);
 8014852:	684b      	ldr	r3, [r1, #4]
 8014854:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8014856:	4319      	orrs	r1, r3
 8014858:	6651      	str	r1, [r2, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 801485a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801485c:	4013      	ands	r3, r2
 801485e:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8014860:	9b07      	ldr	r3, [sp, #28]
 8014862:	e7ba      	b.n	80147da <stm32_clock_control_on+0x2c>
	switch (pclken->bus) {
 8014864:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8014868:	e7b8      	b.n	80147dc <stm32_clock_control_on+0x2e>

0801486a <stm32_clock_control_off>:
	switch (pclken->bus) {
 801486a:	680b      	ldr	r3, [r1, #0]
 801486c:	2b0a      	cmp	r3, #10
 801486e:	d840      	bhi.n	80148f2 <stm32_clock_control_off+0x88>
 8014870:	e8df f003 	tbb	[pc, r3]
 8014874:	2f1f0f06 	.word	0x2f1f0f06
 8014878:	3f173f27 	.word	0x3f173f27
 801487c:	3f3f      	.short	0x3f3f
 801487e:	37          	.byte	0x37
 801487f:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8014880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8014884:	6849      	ldr	r1, [r1, #4]
 8014886:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014888:	ea23 0301 	bic.w	r3, r3, r1
 801488c:	6493      	str	r3, [r2, #72]	; 0x48
	return 0;
 801488e:	2000      	movs	r0, #0
}
 8014890:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8014892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8014896:	6849      	ldr	r1, [r1, #4]
 8014898:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801489a:	ea23 0301 	bic.w	r3, r3, r1
 801489e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80148a0:	e7f5      	b.n	801488e <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80148a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80148a6:	6849      	ldr	r1, [r1, #4]
 80148a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80148aa:	ea23 0301 	bic.w	r3, r3, r1
 80148ae:	6513      	str	r3, [r2, #80]	; 0x50
 80148b0:	e7ed      	b.n	801488e <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80148b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80148b6:	6849      	ldr	r1, [r1, #4]
 80148b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80148ba:	ea23 0301 	bic.w	r3, r3, r1
 80148be:	6593      	str	r3, [r2, #88]	; 0x58
 80148c0:	e7e5      	b.n	801488e <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80148c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80148c6:	6849      	ldr	r1, [r1, #4]
 80148c8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80148ca:	ea23 0301 	bic.w	r3, r3, r1
 80148ce:	65d3      	str	r3, [r2, #92]	; 0x5c
 80148d0:	e7dd      	b.n	801488e <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80148d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80148d6:	6849      	ldr	r1, [r1, #4]
 80148d8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80148da:	ea23 0301 	bic.w	r3, r3, r1
 80148de:	6613      	str	r3, [r2, #96]	; 0x60
 80148e0:	e7d5      	b.n	801488e <stm32_clock_control_off+0x24>
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB3ENR, Periphs);
 80148e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80148e6:	6849      	ldr	r1, [r1, #4]
 80148e8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80148ea:	ea23 0301 	bic.w	r3, r3, r1
 80148ee:	6653      	str	r3, [r2, #100]	; 0x64
 80148f0:	e7cd      	b.n	801488e <stm32_clock_control_off+0x24>
	switch (pclken->bus) {
 80148f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80148f6:	4770      	bx	lr

080148f8 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80148f8:	b510      	push	{r4, lr}
 80148fa:	b088      	sub	sp, #32
	clk_init->CPU2CLKDivider = ahb_prescaler(STM32_CPU2_PRESCALER);
 80148fc:	2300      	movs	r3, #0
	clk_init->CPU1CLKDivider = ahb_prescaler(STM32_CPU1_PRESCALER);
 80148fe:	e9cd 3303 	strd	r3, r3, [sp, #12]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8014902:	e9cd 3305 	strd	r3, r3, [sp, #20]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8014906:	9307      	str	r3, [sp, #28]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8014908:	f000 f841 	bl	801498e <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 801490c:	4668      	mov	r0, sp
 801490e:	f000 f836 	bl	801497e <config_pll_init>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8014912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014916:	681a      	ldr	r2, [r3, #0]
 8014918:	0551      	lsls	r1, r2, #21
 801491a:	d406      	bmi.n	801492a <stm32_clock_control_init+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014922:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8014924:	681a      	ldr	r2, [r3, #0]
 8014926:	0552      	lsls	r2, r2, #21
 8014928:	d5fc      	bpl.n	8014924 <stm32_clock_control_init+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801492a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 801492e:	68a3      	ldr	r3, [r4, #8]
 8014930:	f023 0303 	bic.w	r3, r3, #3
 8014934:	f043 0301 	orr.w	r3, r3, #1
 8014938:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801493a:	68a3      	ldr	r3, [r4, #8]
 801493c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014940:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8014942:	68a3      	ldr	r3, [r4, #8]
 8014944:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8014948:	2b04      	cmp	r3, #4
 801494a:	d1fa      	bne.n	8014942 <stm32_clock_control_init+0x4a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801494c:	6823      	ldr	r3, [r4, #0]
 801494e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014952:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8014954:	68e3      	ldr	r3, [r4, #12]
 8014956:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 801495a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801495e:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8014960:	a903      	add	r1, sp, #12
 8014962:	4668      	mov	r0, sp
 8014964:	f7fa ff74 	bl	800f850 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8014968:	6823      	ldr	r3, [r4, #0]
 801496a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801496e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8014970:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8014972:	2000      	movs	r0, #0
 8014974:	f023 0301 	bic.w	r3, r3, #1
 8014978:	6023      	str	r3, [r4, #0]
 801497a:	b008      	add	sp, #32
 801497c:	bd10      	pop	{r4, pc}

0801497e <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 801497e:	2306      	movs	r3, #6
 8014980:	2200      	movs	r2, #0
 8014982:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 8014986:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801498a:	6083      	str	r3, [r0, #8]
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 801498c:	4770      	bx	lr

0801498e <config_enable_default_clocks>:
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 801498e:	4770      	bx	lr

08014990 <z_impl_counter_get_frequency>:
	return api->get_freq ? api->get_freq(dev) : config->freq;
 8014990:	6882      	ldr	r2, [r0, #8]
 8014992:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8014994:	b102      	cbz	r2, 8014998 <z_impl_counter_get_frequency+0x8>
 8014996:	4710      	bx	r2
 8014998:	6843      	ldr	r3, [r0, #4]
}
 801499a:	6858      	ldr	r0, [r3, #4]
 801499c:	4770      	bx	lr

0801499e <rtc_stm32_stop>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 801499e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
}
 80149a2:	2000      	movs	r0, #0
 80149a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80149a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80149ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80149b0:	4770      	bx	lr

080149b2 <rtc_stm32_get_top_value>:
	return info->max_top_value;
 80149b2:	6843      	ldr	r3, [r0, #4]
}
 80149b4:	6818      	ldr	r0, [r3, #0]
 80149b6:	4770      	bx	lr

080149b8 <rtc_stm32_set_top_value>:
	if ((cfg->ticks != info->max_top_value) ||
 80149b8:	6843      	ldr	r3, [r0, #4]
 80149ba:	680a      	ldr	r2, [r1, #0]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d107      	bne.n	80149d2 <rtc_stm32_set_top_value+0x1a>
		!(cfg->flags & COUNTER_TOP_CFG_DONT_RESET)) {
 80149c2:	68cb      	ldr	r3, [r1, #12]
		return 0;
 80149c4:	f013 0f01 	tst.w	r3, #1
 80149c8:	bf0c      	ite	eq
 80149ca:	f06f 0085 	mvneq.w	r0, #133	; 0x85
 80149ce:	2000      	movne	r0, #0
 80149d0:	4770      	bx	lr
		return -ENOTSUP;
 80149d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80149d6:	4770      	bx	lr

080149d8 <rtc_stm32_get_value>:
{
 80149d8:	b510      	push	{r4, lr}
 80149da:	460c      	mov	r4, r1
	*ticks = rtc_stm32_read(dev);
 80149dc:	f7f7 ff2e 	bl	800c83c <rtc_stm32_read>
 80149e0:	6020      	str	r0, [r4, #0]
}
 80149e2:	2000      	movs	r0, #0
 80149e4:	bd10      	pop	{r4, pc}

080149e6 <rtc_stm32_start>:
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80149e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
}
 80149ea:	2000      	movs	r0, #0
 80149ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80149f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80149f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80149f8:	4770      	bx	lr

080149fa <bin2bcd>:
 *
 * @return BCD 8421 representation of input value.
 */
static inline uint8_t bin2bcd(uint8_t bin)
{
	return (((bin / 10) << 4) | (bin % 10));
 80149fa:	220a      	movs	r2, #10
 80149fc:	fbb0 f3f2 	udiv	r3, r0, r2
 8014a00:	fb02 0013 	mls	r0, r2, r3, r0
 8014a04:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8014a08:	b2c0      	uxtb	r0, r0
 8014a0a:	4770      	bx	lr

08014a0c <gpio_pin_interrupt_configure_dt>:
{
 8014a0c:	b430      	push	{r4, r5}
 8014a0e:	4603      	mov	r3, r0
 8014a10:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
 8014a12:	6800      	ldr	r0, [r0, #0]
 8014a14:	7919      	ldrb	r1, [r3, #4]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8014a16:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
 8014a18:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8014a1a:	d507      	bpl.n	8014a2c <gpio_pin_interrupt_configure_dt+0x20>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8014a1c:	6905      	ldr	r5, [r0, #16]
 8014a1e:	2301      	movs	r3, #1
 8014a20:	682d      	ldr	r5, [r5, #0]
 8014a22:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8014a24:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8014a26:	bf18      	it	ne
 8014a28:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8014a2c:	69a4      	ldr	r4, [r4, #24]
 8014a2e:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
 8014a32:	46a4      	mov	ip, r4
 8014a34:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
 8014a38:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8014a3a:	4760      	bx	ip

08014a3c <counter_alarm_forwarder>:
}
 8014a3c:	4770      	bx	lr

08014a3e <ds3231_counter_start>:
}
 8014a3e:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8014a42:	4770      	bx	lr

08014a44 <ds3231_counter_stop>:
}
 8014a44:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8014a48:	4770      	bx	lr

08014a4a <ds3231_counter_get_top_value>:

static uint32_t ds3231_counter_get_top_value(const struct device *dev)
{
	return UINT32_MAX;
}
 8014a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a4e:	4770      	bx	lr

08014a50 <ds3231_counter_get_pending_int>:

static uint32_t ds3231_counter_get_pending_int(const struct device *dev)
{
	return 0;
}
 8014a50:	2000      	movs	r0, #0
 8014a52:	4770      	bx	lr

08014a54 <ds3231_counter_set_top_value>:

static int ds3231_counter_set_top_value(const struct device *dev,
					const struct counter_top_cfg *cfg)
{
	return -ENOTSUP;
}
 8014a54:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8014a58:	4770      	bx	lr

08014a5a <k_sem_give>:
	z_impl_k_sem_give(sem);
 8014a5a:	f7fb ba83 	b.w	800ff64 <z_impl_k_sem_give>

08014a5e <k_uptime_get_32>:
{
 8014a5e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8014a60:	f002 fd65 	bl	801752e <z_impl_k_uptime_ticks>
 8014a64:	220a      	movs	r2, #10
 8014a66:	2300      	movs	r3, #0
 8014a68:	f7ec faae 	bl	8000fc8 <__aeabi_uldivmod>
}
 8014a6c:	bd08      	pop	{r3, pc}

08014a6e <sqw_worker>:
 8014a6e:	f7ff bff6 	b.w	8014a5e <k_uptime_get_32>

08014a72 <isw_gpio_callback>:
{
 8014a72:	b510      	push	{r4, lr}
 8014a74:	460c      	mov	r4, r1
 8014a76:	f7ff fff2 	bl	8014a5e <k_uptime_get_32>
	if (data->registers.ctrl & MAXIM_DS3231_REG_CTRL_INTCN) {
 8014a7a:	f814 3c86 	ldrb.w	r3, [r4, #-134]
	data->isw_syncclock = maxim_ds3231_read_syncclock(data->ds3231);
 8014a7e:	60e0      	str	r0, [r4, #12]
	if (data->registers.ctrl & MAXIM_DS3231_REG_CTRL_INTCN) {
 8014a80:	075b      	lsls	r3, r3, #29
 8014a82:	d505      	bpl.n	8014a90 <isw_gpio_callback+0x1e>
		k_work_submit(&data->alarm_work);
 8014a84:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
}
 8014a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_submit(&data->sqw_work);
 8014a8c:	f7fb bb9e 	b.w	80101cc <k_work_submit>
	} else if (data->sync_state != SYNCSM_IDLE) {
 8014a90:	f894 307b 	ldrb.w	r3, [r4, #123]	; 0x7b
 8014a94:	b113      	cbz	r3, 8014a9c <isw_gpio_callback+0x2a>
		k_work_submit(&data->sync_work);
 8014a96:	f1a4 0010 	sub.w	r0, r4, #16
 8014a9a:	e7f5      	b.n	8014a88 <isw_gpio_callback+0x16>
		k_work_submit(&data->sqw_work);
 8014a9c:	f1a4 0020 	sub.w	r0, r4, #32
 8014aa0:	e7f2      	b.n	8014a88 <isw_gpio_callback+0x16>

08014aa2 <z_log_msg2_static_create.constprop.0>:
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	f7fd bd7a 	b.w	801259c <z_impl_z_log_msg2_static_create>

08014aa8 <i2c_write_read_dt.constprop.0>:
 * @param read_buf Pointer to storage for read data
 * @param num_read Number of bytes to read
 *
 * @return a value from i2c_write_read()
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
 8014aa8:	b530      	push	{r4, r5, lr}
 8014aaa:	b087      	sub	sp, #28
 8014aac:	4604      	mov	r4, r0
 8014aae:	461d      	mov	r5, r3
	msg[0].buf = (uint8_t *)write_buf;
 8014ab0:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
 8014ab2:	2101      	movs	r1, #1
	msg[1].len = num_read;
 8014ab4:	e9cd 2503 	strd	r2, r5, [sp, #12]
	msg[0].len = num_write;
 8014ab8:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8014aba:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8014abc:	2100      	movs	r1, #0
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
 8014abe:	6800      	ldr	r0, [r0, #0]
 8014ac0:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8014ac2:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8014ac6:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8014aca:	6882      	ldr	r2, [r0, #8]
 8014acc:	4669      	mov	r1, sp
 8014ace:	6894      	ldr	r4, [r2, #8]
 8014ad0:	2202      	movs	r2, #2
 8014ad2:	47a0      	blx	r4
			      write_buf, num_write,
			      read_buf, num_read);
}
 8014ad4:	b007      	add	sp, #28
 8014ad6:	bd30      	pop	{r4, r5, pc}

08014ad8 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
 8014ad8:	f7fb ba6a 	b.w	800ffb0 <z_impl_k_sem_take>

08014adc <i2c_write_dt>:
{
 8014adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014ade:	4603      	mov	r3, r0
	msg.len = num_bytes;
 8014ae0:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8014ae4:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
 8014ae6:	6800      	ldr	r0, [r0, #0]
 8014ae8:	889b      	ldrh	r3, [r3, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8014aea:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8014aee:	6882      	ldr	r2, [r0, #8]
 8014af0:	a901      	add	r1, sp, #4
 8014af2:	6894      	ldr	r4, [r2, #8]
 8014af4:	2201      	movs	r2, #1
 8014af6:	47a0      	blx	r4
}
 8014af8:	b004      	add	sp, #16
 8014afa:	bd10      	pop	{r4, pc}

08014afc <sc_ctrl>:
{
 8014afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ds3231_data *data = dev->data;
 8014afe:	6905      	ldr	r5, [r0, #16]
	uint8_t ctrl = (rp->ctrl & ~clear) | set;
 8014b00:	7cae      	ldrb	r6, [r5, #18]
 8014b02:	ea26 0402 	bic.w	r4, r6, r2
 8014b06:	430c      	orrs	r4, r1
	if (rp->ctrl != ctrl) {
 8014b08:	42a6      	cmp	r6, r4
{
 8014b0a:	4603      	mov	r3, r0
	int rc = ctrl;
 8014b0c:	4620      	mov	r0, r4
	if (rp->ctrl != ctrl) {
 8014b0e:	d00e      	beq.n	8014b2e <sc_ctrl+0x32>
	const struct ds3231_config *cfg = dev->config;
 8014b10:	6858      	ldr	r0, [r3, #4]
		uint8_t buf[2] = {
 8014b12:	f88d 4005 	strb.w	r4, [sp, #5]
 8014b16:	230e      	movs	r3, #14
		rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8014b18:	2202      	movs	r2, #2
 8014b1a:	a901      	add	r1, sp, #4
 8014b1c:	300c      	adds	r0, #12
		uint8_t buf[2] = {
 8014b1e:	f88d 3004 	strb.w	r3, [sp, #4]
		rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8014b22:	f7ff ffdb 	bl	8014adc <i2c_write_dt>
		if (rc >= 0) {
 8014b26:	2800      	cmp	r0, #0
			rp->ctrl = ctrl;
 8014b28:	bfa4      	itt	ge
 8014b2a:	74ac      	strbge	r4, [r5, #18]
			rc = ctrl;
 8014b2c:	4620      	movge	r0, r4
}
 8014b2e:	b002      	add	sp, #8
 8014b30:	bd70      	pop	{r4, r5, r6, pc}

08014b32 <cancel_alarm>:
	data->alarm_handler[id] = NULL;
 8014b32:	6903      	ldr	r3, [r0, #16]
 8014b34:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8014b38:	460a      	mov	r2, r1
	data->alarm_handler[id] = NULL;
 8014b3a:	2100      	movs	r1, #0
 8014b3c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	data->alarm_user_data[id] = NULL;
 8014b40:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	return sc_ctrl(dev, 0, MAXIM_DS3231_ALARM1 << id);
 8014b44:	2301      	movs	r3, #1
 8014b46:	fa03 f202 	lsl.w	r2, r3, r2
 8014b4a:	b2d2      	uxtb	r2, r2
 8014b4c:	f7ff bfd6 	b.w	8014afc <sc_ctrl>

08014b50 <ds3231_counter_cancel_alarm>:
{
 8014b50:	b570      	push	{r4, r5, r6, lr}
	if (id >= cfg->generic.channels) {
 8014b52:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 8014b54:	6905      	ldr	r5, [r0, #16]
	if (id >= cfg->generic.channels) {
 8014b56:	7a5b      	ldrb	r3, [r3, #9]
 8014b58:	428b      	cmp	r3, r1
{
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	460e      	mov	r6, r1
	if (id >= cfg->generic.channels) {
 8014b5e:	d912      	bls.n	8014b86 <ds3231_counter_cancel_alarm+0x36>
	k_sem_take(&data->lock, K_FOREVER);
 8014b60:	3518      	adds	r5, #24
 8014b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	f7ff ffb4 	bl	8014ad8 <k_sem_take.constprop.0.isra.0>
	rv = cancel_alarm(dev, id);
 8014b70:	4631      	mov	r1, r6
 8014b72:	4620      	mov	r0, r4
 8014b74:	f7ff ffdd 	bl	8014b32 <cancel_alarm>
 8014b78:	4604      	mov	r4, r0
	k_sem_give(&data->lock);
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f7ff ff6d 	bl	8014a5a <k_sem_give>
	if (rv >= 0) {
 8014b80:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
 8014b84:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EINVAL;
 8014b86:	f06f 0015 	mvn.w	r0, #21
 8014b8a:	e7fb      	b.n	8014b84 <ds3231_counter_cancel_alarm+0x34>

08014b8c <sync_finish>:
{
 8014b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ds3231_data *data = dev->data;
 8014b90:	6904      	ldr	r4, [r0, #16]
	if (data->sync_signal) {
 8014b92:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
		signal = data->sync.signal;
 8014b96:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
{
 8014b9a:	4606      	mov	r6, r0
 8014b9c:	460d      	mov	r5, r1
 8014b9e:	2300      	movs	r3, #0
	if (data->sync_signal) {
 8014ba0:	b1da      	cbz	r2, 8014bda <sync_finish+0x4e>
		signal = data->sync.signal;
 8014ba2:	46b8      	mov	r8, r7
	struct sys_notify *notify = NULL;
 8014ba4:	461f      	mov	r7, r3
	(void)validate_isw_monitoring(dev);
 8014ba6:	4630      	mov	r0, r6
	data->sync.ptr = NULL;
 8014ba8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	data->sync_signal = false;
 8014bac:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
	data->sync_state = SYNCSM_IDLE;
 8014bb0:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	(void)validate_isw_monitoring(dev);
 8014bb4:	f7f8 f802 	bl	800cbbc <validate_isw_monitoring>
	k_sem_give(&data->lock);
 8014bb8:	f104 0018 	add.w	r0, r4, #24
 8014bbc:	f7ff ff4d 	bl	8014a5a <k_sem_give>
	if (notify != NULL) {
 8014bc0:	b16f      	cbz	r7, 8014bde <sync_finish+0x52>
			(maxim_ds3231_notify_callback)sys_notify_finalize(notify, rc);
 8014bc2:	4629      	mov	r1, r5
 8014bc4:	4638      	mov	r0, r7
 8014bc6:	f7fd f966 	bl	8011e96 <sys_notify_finalize>
		if (cb) {
 8014bca:	4603      	mov	r3, r0
 8014bcc:	b180      	cbz	r0, 8014bf0 <sync_finish+0x64>
			cb(dev, notify, rc);
 8014bce:	462a      	mov	r2, r5
 8014bd0:	4639      	mov	r1, r7
 8014bd2:	4630      	mov	r0, r6
}
 8014bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			cb(dev, notify, rc);
 8014bd8:	4718      	bx	r3
	struct k_poll_signal *signal = NULL;
 8014bda:	4698      	mov	r8, r3
 8014bdc:	e7e3      	b.n	8014ba6 <sync_finish+0x1a>
	} else if (signal != NULL) {
 8014bde:	f1b8 0f00 	cmp.w	r8, #0
 8014be2:	d005      	beq.n	8014bf0 <sync_finish+0x64>
	return z_impl_k_poll_signal_raise(sig, result);
 8014be4:	4629      	mov	r1, r5
 8014be6:	4640      	mov	r0, r8
}
 8014be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bec:	f7fc b8ea 	b.w	8010dc4 <z_impl_k_poll_signal_raise>
 8014bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014bf4 <rsc_stat>:
{
 8014bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct ds3231_config *cfg = dev->config;
 8014bf6:	6846      	ldr	r6, [r0, #4]
	struct ds3231_data *data = dev->data;
 8014bf8:	6905      	ldr	r5, [r0, #16]
	uint8_t addr = offsetof(struct register_map, ctrl_stat);
 8014bfa:	230f      	movs	r3, #15
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &rp->ctrl_stat,
 8014bfc:	360c      	adds	r6, #12
	uint8_t addr = offsetof(struct register_map, ctrl_stat);
 8014bfe:	f88d 3003 	strb.w	r3, [sp, #3]
{
 8014c02:	460f      	mov	r7, r1
 8014c04:	4614      	mov	r4, r2
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &rp->ctrl_stat,
 8014c06:	2301      	movs	r3, #1
 8014c08:	f105 0213 	add.w	r2, r5, #19
 8014c0c:	f10d 0103 	add.w	r1, sp, #3
 8014c10:	4630      	mov	r0, r6
 8014c12:	f7ff ff49 	bl	8014aa8 <i2c_write_read_dt.constprop.0>
	if (rc >= 0) {
 8014c16:	2800      	cmp	r0, #0
 8014c18:	db06      	blt.n	8014c28 <rsc_stat+0x34>
		uint8_t stat = rp->ctrl_stat & ~clear;
 8014c1a:	7ce9      	ldrb	r1, [r5, #19]
 8014c1c:	ea21 0204 	bic.w	r2, r1, r4
		if (rp->ctrl_stat != stat) {
 8014c20:	4291      	cmp	r1, r2
		uint8_t stat = rp->ctrl_stat & ~clear;
 8014c22:	b253      	sxtb	r3, r2
		if (rp->ctrl_stat != stat) {
 8014c24:	d102      	bne.n	8014c2c <rsc_stat+0x38>
			rc = rp->ctrl_stat;
 8014c26:	7ce8      	ldrb	r0, [r5, #19]
}
 8014c28:	b003      	add	sp, #12
 8014c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				stat | (ign & ~(set | clear)),
 8014c2c:	433c      	orrs	r4, r7
 8014c2e:	43e4      	mvns	r4, r4
			uint8_t buf[2] = {
 8014c30:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014c34:	f88d 2004 	strb.w	r2, [sp, #4]
				stat | (ign & ~(set | clear)),
 8014c38:	f024 047c 	bic.w	r4, r4, #124	; 0x7c
 8014c3c:	431c      	orrs	r4, r3
			rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8014c3e:	2202      	movs	r2, #2
 8014c40:	a901      	add	r1, sp, #4
 8014c42:	4630      	mov	r0, r6
			uint8_t buf[2] = {
 8014c44:	f88d 4005 	strb.w	r4, [sp, #5]
			rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8014c48:	f7ff ff48 	bl	8014adc <i2c_write_dt>
		if (rc >= 0) {
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	dbeb      	blt.n	8014c28 <rsc_stat+0x34>
 8014c50:	e7e9      	b.n	8014c26 <rsc_stat+0x32>

08014c52 <check_handled_alarms>:
{
 8014c52:	b510      	push	{r4, lr}
	mask &= rp->ctrl;
 8014c54:	6903      	ldr	r3, [r0, #16]
 8014c56:	7c9c      	ldrb	r4, [r3, #18]
 8014c58:	f004 0403 	and.w	r4, r4, #3
	int rv = rsc_stat(dev, 0U, mask);
 8014c5c:	4622      	mov	r2, r4
 8014c5e:	2100      	movs	r1, #0
 8014c60:	f7ff ffc8 	bl	8014bf4 <rsc_stat>
	if (rv > 0) {
 8014c64:	2800      	cmp	r0, #0
		rv &= mask;
 8014c66:	bfc8      	it	gt
 8014c68:	4020      	andgt	r0, r4
}
 8014c6a:	bd10      	pop	{r4, pc}

08014c6c <set_alarm>:
{
 8014c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c70:	b091      	sub	sp, #68	; 0x44
	const struct ds3231_config *cfg = dev->config;
 8014c72:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 8014c74:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 8014c78:	9301      	str	r3, [sp, #4]
{
 8014c7a:	4607      	mov	r7, r0
 8014c7c:	4615      	mov	r5, r2
	if (id == 0) {
 8014c7e:	460e      	mov	r6, r1
 8014c80:	b1e9      	cbz	r1, 8014cbe <set_alarm+0x52>
	} else if (id < cfg->generic.channels) {
 8014c82:	7a5b      	ldrb	r3, [r3, #9]
 8014c84:	428b      	cmp	r3, r1
 8014c86:	d917      	bls.n	8014cb8 <set_alarm+0x4c>
		len = sizeof(data->registers.alarm2);
 8014c88:	f04f 0a03 	mov.w	sl, #3
		addr = offsetof(struct register_map, alarm2);
 8014c8c:	f04f 090b 	mov.w	r9, #11
	uint8_t buf[5] = { addr };
 8014c90:	2300      	movs	r3, #0
 8014c92:	f8cd 3009 	str.w	r3, [sp, #9]
 8014c96:	e9d5 2300 	ldrd	r2, r3, [r5]
	int rc = encode_alarm(buf + 1, (id == 0), cp->time, cp->flags);
 8014c9a:	7c2c      	ldrb	r4, [r5, #16]
	uint8_t buf[5] = { addr };
 8014c9c:	f88d 9008 	strb.w	r9, [sp, #8]
	(void)gmtime_r(&time, &tm);
 8014ca0:	a907      	add	r1, sp, #28
 8014ca2:	a804      	add	r0, sp, #16
 8014ca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014ca8:	f7fc f8f2 	bl	8010e90 <gmtime_r>
	if (!is_power_of_two(1U + (0x0F & ~flags))) {
 8014cac:	43e3      	mvns	r3, r4
 8014cae:	f003 030f 	and.w	r3, r3, #15
 8014cb2:	1c5a      	adds	r2, r3, #1
 8014cb4:	421a      	tst	r2, r3
 8014cb6:	d007      	beq.n	8014cc8 <set_alarm+0x5c>
		return -EINVAL;
 8014cb8:	f06f 0415 	mvn.w	r4, #21
 8014cbc:	e05c      	b.n	8014d78 <set_alarm+0x10c>
		len = sizeof(data->registers.alarm1);
 8014cbe:	f04f 0a04 	mov.w	sl, #4
		addr = offsetof(struct register_map, alarm1);
 8014cc2:	f04f 0907 	mov.w	r9, #7
 8014cc6:	e7e3      	b.n	8014c90 <set_alarm+0x24>
	if (with_sec) {
 8014cc8:	2e00      	cmp	r6, #0
 8014cca:	d15b      	bne.n	8014d84 <set_alarm+0x118>
		if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNSE) {
 8014ccc:	07e2      	lsls	r2, r4, #31
 8014cce:	d457      	bmi.n	8014d80 <set_alarm+0x114>
			val = bin2bcd(tm.tm_sec);
 8014cd0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014cd4:	f7ff fe91 	bl	80149fa <bin2bcd>
		*ap++ = val;
 8014cd8:	f88d 0009 	strb.w	r0, [sp, #9]
 8014cdc:	f10d 010a 	add.w	r1, sp, #10
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNMN) {
 8014ce0:	07a3      	lsls	r3, r4, #30
 8014ce2:	d452      	bmi.n	8014d8a <set_alarm+0x11e>
		val = bin2bcd(tm.tm_min);
 8014ce4:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8014ce8:	f7ff fe87 	bl	80149fa <bin2bcd>
	*ap++ = val;
 8014cec:	7008      	strb	r0, [r1, #0]
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNHR) {
 8014cee:	0760      	lsls	r0, r4, #29
 8014cf0:	d44d      	bmi.n	8014d8e <set_alarm+0x122>
		val = bin2bcd(tm.tm_hour);
 8014cf2:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8014cf6:	f7ff fe80 	bl	80149fa <bin2bcd>
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNDA) {
 8014cfa:	0722      	lsls	r2, r4, #28
	*ap++ = val;
 8014cfc:	7048      	strb	r0, [r1, #1]
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNDA) {
 8014cfe:	d44d      	bmi.n	8014d9c <set_alarm+0x130>
	} else if (flags & MAXIM_DS3231_ALARM_FLAGS_DOW) {
 8014d00:	06e3      	lsls	r3, r4, #27
 8014d02:	d546      	bpl.n	8014d92 <set_alarm+0x126>
		val = REG_DAYDATE_DOW | (tm.tm_wday + 1);
 8014d04:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014d06:	3001      	adds	r0, #1
 8014d08:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8014d0c:	b2c0      	uxtb	r0, r0
	rc = rsc_stat(dev, 0U, (MAXIM_DS3231_ALARM1 << id));
 8014d0e:	2301      	movs	r3, #1
 8014d10:	40b3      	lsls	r3, r6
 8014d12:	fa5f fb83 	uxtb.w	fp, r3
	*ap++ = val;
 8014d16:	7088      	strb	r0, [r1, #2]
	rc = rsc_stat(dev, 0U, (MAXIM_DS3231_ALARM1 << id));
 8014d18:	465a      	mov	r2, fp
 8014d1a:	2100      	movs	r1, #0
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	f7ff ff69 	bl	8014bf4 <rsc_stat>
	if (rc >= 0) {
 8014d22:	1e04      	subs	r4, r0, #0
 8014d24:	db28      	blt.n	8014d78 <set_alarm+0x10c>
		rc = i2c_write_dt(&cfg->bus, buf, len + 1);
 8014d26:	9801      	ldr	r0, [sp, #4]
 8014d28:	f10a 0201 	add.w	r2, sl, #1
 8014d2c:	a902      	add	r1, sp, #8
 8014d2e:	300c      	adds	r0, #12
 8014d30:	f7ff fed4 	bl	8014adc <i2c_write_dt>
	if ((rc >= 0)
 8014d34:	1e04      	subs	r4, r0, #0
 8014d36:	db1f      	blt.n	8014d78 <set_alarm+0x10c>
	    && (cp->handler != NULL)) {
 8014d38:	68aa      	ldr	r2, [r5, #8]
 8014d3a:	b132      	cbz	r2, 8014d4a <set_alarm+0xde>
		rc = sc_ctrl(dev, MAXIM_DS3231_ALARM1 << id, 0);
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	4659      	mov	r1, fp
 8014d40:	4638      	mov	r0, r7
 8014d42:	f7ff fedb 	bl	8014afc <sc_ctrl>
	if (rc >= 0) {
 8014d46:	1e04      	subs	r4, r0, #0
 8014d48:	db16      	blt.n	8014d78 <set_alarm+0x10c>
		memmove(&data->registers.sec + addr, buf + 1, len);
 8014d4a:	f108 0004 	add.w	r0, r8, #4
__ssp_bos_icheck3(memmove, void *, const void *)
 8014d4e:	4652      	mov	r2, sl
 8014d50:	f10d 0109 	add.w	r1, sp, #9
 8014d54:	4448      	add	r0, r9
 8014d56:	f002 fd78 	bl	801784a <memmove>
		data->alarm_handler[id] = cp->handler;
 8014d5a:	eb08 0386 	add.w	r3, r8, r6, lsl #2
 8014d5e:	68aa      	ldr	r2, [r5, #8]
 8014d60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		data->alarm_user_data[id] = cp->user_data;
 8014d64:	68ea      	ldr	r2, [r5, #12]
 8014d66:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		data->alarm_flags[id] = cp->flags;
 8014d6a:	4446      	add	r6, r8
 8014d6c:	7c2b      	ldrb	r3, [r5, #16]
 8014d6e:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
		validate_isw_monitoring(dev);
 8014d72:	4638      	mov	r0, r7
 8014d74:	f7f7 ff22 	bl	800cbbc <validate_isw_monitoring>
}
 8014d78:	4620      	mov	r0, r4
 8014d7a:	b011      	add	sp, #68	; 0x44
 8014d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			val = REG_ALARM_IGN;
 8014d80:	2080      	movs	r0, #128	; 0x80
 8014d82:	e7a9      	b.n	8014cd8 <set_alarm+0x6c>
 8014d84:	f10d 0109 	add.w	r1, sp, #9
 8014d88:	e7aa      	b.n	8014ce0 <set_alarm+0x74>
		val = REG_ALARM_IGN;
 8014d8a:	2080      	movs	r0, #128	; 0x80
 8014d8c:	e7ae      	b.n	8014cec <set_alarm+0x80>
		val = REG_ALARM_IGN;
 8014d8e:	2080      	movs	r0, #128	; 0x80
 8014d90:	e7b3      	b.n	8014cfa <set_alarm+0x8e>
		val = bin2bcd(tm.tm_mday);
 8014d92:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8014d96:	f7ff fe30 	bl	80149fa <bin2bcd>
 8014d9a:	e7b8      	b.n	8014d0e <set_alarm+0xa2>
		val = REG_ALARM_IGN;
 8014d9c:	2080      	movs	r0, #128	; 0x80
 8014d9e:	e7b6      	b.n	8014d0e <set_alarm+0xa2>

08014da0 <decode_time>:
{
 8014da0:	b510      	push	{r4, lr}
 8014da2:	4603      	mov	r3, r0
	if (with_sec) {
 8014da4:	b152      	cbz	r2, 8014dbc <decode_time+0x1c>
		uint8_t reg = *rp++;
 8014da6:	f811 2b01 	ldrb.w	r2, [r1], #1
	return ((10 * (bcd >> 4)) + (bcd & 0x0F));
 8014daa:	f3c2 1002 	ubfx	r0, r2, #4, #3
 8014dae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014db2:	f002 020f 	and.w	r2, r2, #15
		tp->tm_sec = bcd2bin(reg & 0x7F);
 8014db6:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014dba:	601a      	str	r2, [r3, #0]
	reg = *rp++;
 8014dbc:	4608      	mov	r0, r1
 8014dbe:	f810 2b02 	ldrb.w	r2, [r0], #2
 8014dc2:	f3c2 1402 	ubfx	r4, r2, #4, #3
 8014dc6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014dca:	f002 020f 	and.w	r2, r2, #15
	tp->tm_min = bcd2bin(reg & 0x7F);
 8014dce:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8014dd2:	605a      	str	r2, [r3, #4]
	reg = *rp++;
 8014dd4:	784a      	ldrb	r2, [r1, #1]
	if (REG_HOURS_12H & reg) {
 8014dd6:	0654      	lsls	r4, r2, #25
 8014dd8:	f002 010f 	and.w	r1, r2, #15
 8014ddc:	d504      	bpl.n	8014de8 <decode_time+0x48>
		if (REG_HOURS_10 & reg) {
 8014dde:	0692      	lsls	r2, r2, #26
			tp->tm_hour += 12;
 8014de0:	bf48      	it	mi
 8014de2:	3116      	addmi	r1, #22
 8014de4:	6099      	str	r1, [r3, #8]
}
 8014de6:	bd10      	pop	{r4, pc}
		tp->tm_hour += 10 * ((reg >> 4) & 0x03);
 8014de8:	f3c2 1201 	ubfx	r2, r2, #4, #2
 8014dec:	240a      	movs	r4, #10
 8014dee:	fb14 1202 	smlabb	r2, r4, r2, r1
 8014df2:	609a      	str	r2, [r3, #8]
	return rp;
 8014df4:	e7f7      	b.n	8014de6 <decode_time+0x46>

08014df6 <decode_rtc>:
{
 8014df6:	b510      	push	{r4, lr}
 8014df8:	b08a      	sub	sp, #40	; 0x28
 8014dfa:	4604      	mov	r4, r0
	struct tm tm = { 0 };
 8014dfc:	2224      	movs	r2, #36	; 0x24
 8014dfe:	2100      	movs	r1, #0
 8014e00:	a801      	add	r0, sp, #4
 8014e02:	f002 fd3c 	bl	801787e <memset>
	decode_time(&tm, &rp->sec, true);
 8014e06:	1d21      	adds	r1, r4, #4
 8014e08:	2201      	movs	r2, #1
 8014e0a:	a801      	add	r0, sp, #4
 8014e0c:	f7ff ffc8 	bl	8014da0 <decode_time>
	tm.tm_wday = (rp->dow & 0x07) - 1;
 8014e10:	79e3      	ldrb	r3, [r4, #7]
	tm.tm_mon = 10 * (((0xF0 & ~REG_MONCEN_CENTURY) & rp->moncen) >> 4)
 8014e12:	7a60      	ldrb	r0, [r4, #9]
	tm.tm_wday = (rp->dow & 0x07) - 1;
 8014e14:	f003 0307 	and.w	r3, r3, #7
 8014e18:	3b01      	subs	r3, #1
 8014e1a:	9307      	str	r3, [sp, #28]
	tm.tm_mday = bcd2bin(rp->dom & 0x3F);
 8014e1c:	7a23      	ldrb	r3, [r4, #8]
 8014e1e:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8014e22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8014e26:	f003 030f 	and.w	r3, r3, #15
 8014e2a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014e2e:	9304      	str	r3, [sp, #16]
		    + (rp->moncen & 0x0F) - 1;
 8014e30:	f3c0 1102 	ubfx	r1, r0, #4, #3
 8014e34:	f000 020f 	and.w	r2, r0, #15
 8014e38:	230a      	movs	r3, #10
 8014e3a:	fb13 2301 	smlabb	r3, r3, r1, r2
	tm.tm_year = bcd2bin(rp->year);
 8014e3e:	7aa2      	ldrb	r2, [r4, #10]
		    + (rp->moncen & 0x0F) - 1;
 8014e40:	3b01      	subs	r3, #1
	tm.tm_mon = 10 * (((0xF0 & ~REG_MONCEN_CENTURY) & rp->moncen) >> 4)
 8014e42:	9305      	str	r3, [sp, #20]
 8014e44:	0913      	lsrs	r3, r2, #4
 8014e46:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014e4a:	f002 030f 	and.w	r3, r2, #15
 8014e4e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	tm.tm_year = bcd2bin(rp->year);
 8014e52:	b2db      	uxtb	r3, r3
	if (REG_MONCEN_CENTURY & rp->moncen) {
 8014e54:	0602      	lsls	r2, r0, #24
		tm.tm_year += 100;
 8014e56:	bf48      	it	mi
 8014e58:	3364      	addmi	r3, #100	; 0x64
	data->rtc_registers = timeutil_timegm(&tm);
 8014e5a:	a801      	add	r0, sp, #4
		tm.tm_year += 100;
 8014e5c:	9306      	str	r3, [sp, #24]
	data->rtc_registers = timeutil_timegm(&tm);
 8014e5e:	f7fd f86c 	bl	8011f3a <timeutil_timegm>
 8014e62:	e9c4 0136 	strd	r0, r1, [r4, #216]	; 0xd8
}
 8014e66:	b00a      	add	sp, #40	; 0x28
 8014e68:	bd10      	pop	{r4, pc}

08014e6a <read_time>:
{
 8014e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ds3231_data *data = dev->data;
 8014e6c:	6907      	ldr	r7, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 8014e6e:	6840      	ldr	r0, [r0, #4]
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8014e70:	2307      	movs	r3, #7
{
 8014e72:	460d      	mov	r5, r1
	uint8_t addr = 0;
 8014e74:	2600      	movs	r6, #0
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8014e76:	1d3a      	adds	r2, r7, #4
 8014e78:	eb0d 0103 	add.w	r1, sp, r3
 8014e7c:	300c      	adds	r0, #12
	uint8_t addr = 0;
 8014e7e:	f88d 6007 	strb.w	r6, [sp, #7]
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8014e82:	f7ff fe11 	bl	8014aa8 <i2c_write_read_dt.constprop.0>
	if (rc >= 0) {
 8014e86:	1e04      	subs	r4, r0, #0
 8014e88:	db04      	blt.n	8014e94 <read_time+0x2a>
		*time = decode_rtc(data);
 8014e8a:	4638      	mov	r0, r7
 8014e8c:	f7ff ffb3 	bl	8014df6 <decode_rtc>
 8014e90:	e9c5 0600 	strd	r0, r6, [r5]
}
 8014e94:	4620      	mov	r0, r4
 8014e96:	b003      	add	sp, #12
 8014e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e9a <ds3231_counter_get_value>:
{
 8014e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ds3231_data *data = dev->data;
 8014e9c:	6905      	ldr	r5, [r0, #16]
	time_t time = 0;
 8014e9e:	2200      	movs	r2, #0
	k_sem_take(&data->lock, K_FOREVER);
 8014ea0:	3518      	adds	r5, #24
	time_t time = 0;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	e9cd 2300 	strd	r2, r3, [sp]
{
 8014ea8:	4604      	mov	r4, r0
	k_sem_take(&data->lock, K_FOREVER);
 8014eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014eb2:	4628      	mov	r0, r5
{
 8014eb4:	460e      	mov	r6, r1
	k_sem_take(&data->lock, K_FOREVER);
 8014eb6:	f7ff fe0f 	bl	8014ad8 <k_sem_take.constprop.0.isra.0>
	int rc = read_time(dev, &time);
 8014eba:	4669      	mov	r1, sp
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	f7ff ffd4 	bl	8014e6a <read_time>
 8014ec2:	4604      	mov	r4, r0
	k_sem_give(&data->lock);
 8014ec4:	4628      	mov	r0, r5
 8014ec6:	f7ff fdc8 	bl	8014a5a <k_sem_give>
	if (rc >= 0) {
 8014eca:	2c00      	cmp	r4, #0
		*ticks = time;
 8014ecc:	bfa4      	itt	ge
 8014ece:	9b00      	ldrge	r3, [sp, #0]
 8014ed0:	6033      	strge	r3, [r6, #0]
}
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	b002      	add	sp, #8
 8014ed6:	bd70      	pop	{r4, r5, r6, pc}

08014ed8 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8014ed8:	6843      	ldr	r3, [r0, #4]
 8014eda:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8014edc:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8014ede:	600b      	str	r3, [r1, #0]
}
 8014ee0:	2000      	movs	r0, #0
 8014ee2:	4770      	bx	lr

08014ee4 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8014ee4:	6843      	ldr	r3, [r0, #4]
 8014ee6:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8014ee8:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8014eea:	4042      	eors	r2, r0
 8014eec:	400a      	ands	r2, r1
 8014eee:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8014ef0:	615a      	str	r2, [r3, #20]
}
 8014ef2:	2000      	movs	r0, #0
 8014ef4:	4770      	bx	lr

08014ef6 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8014ef6:	6843      	ldr	r3, [r0, #4]
 8014ef8:	685b      	ldr	r3, [r3, #4]
}
 8014efa:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8014efc:	6199      	str	r1, [r3, #24]
}
 8014efe:	4770      	bx	lr

08014f00 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8014f00:	6843      	ldr	r3, [r0, #4]
 8014f02:	685b      	ldr	r3, [r3, #4]
}
 8014f04:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8014f06:	6299      	str	r1, [r3, #40]	; 0x28
 8014f08:	4770      	bx	lr

08014f0a <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8014f0a:	6843      	ldr	r3, [r0, #4]
 8014f0c:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8014f0e:	6953      	ldr	r3, [r2, #20]
 8014f10:	404b      	eors	r3, r1
 8014f12:	6153      	str	r3, [r2, #20]
}
 8014f14:	2000      	movs	r0, #0
 8014f16:	4770      	bx	lr

08014f18 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 8014f18:	6903      	ldr	r3, [r0, #16]
	return list->head;
 8014f1a:	6898      	ldr	r0, [r3, #8]
{
 8014f1c:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8014f1e:	b158      	cbz	r0, 8014f38 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8014f20:	2400      	movs	r4, #0
 8014f22:	4281      	cmp	r1, r0
 8014f24:	d112      	bne.n	8014f4c <gpio_stm32_manage_callback+0x34>
	return node->next;
 8014f26:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8014f28:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8014f2a:	b954      	cbnz	r4, 8014f42 <gpio_stm32_manage_callback+0x2a>
 8014f2c:	428d      	cmp	r5, r1
	list->head = node;
 8014f2e:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8014f30:	d100      	bne.n	8014f34 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8014f32:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8014f34:	2000      	movs	r0, #0
 8014f36:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8014f38:	b96a      	cbnz	r2, 8014f56 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8014f3a:	2000      	movs	r0, #0
}
 8014f3c:	bd30      	pop	{r4, r5, pc}
 8014f3e:	4628      	mov	r0, r5
 8014f40:	e7ef      	b.n	8014f22 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8014f42:	428d      	cmp	r5, r1
	parent->next = child;
 8014f44:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8014f46:	bf08      	it	eq
 8014f48:	60dc      	streq	r4, [r3, #12]
}
 8014f4a:	e7f3      	b.n	8014f34 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8014f4c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8014f4e:	4604      	mov	r4, r0
 8014f50:	2d00      	cmp	r5, #0
 8014f52:	d1f4      	bne.n	8014f3e <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8014f54:	b13a      	cbz	r2, 8014f66 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8014f56:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8014f58:	689a      	ldr	r2, [r3, #8]
 8014f5a:	600a      	str	r2, [r1, #0]
	list->head = node;
 8014f5c:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	d1eb      	bne.n	8014f3a <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8014f62:	60d9      	str	r1, [r3, #12]
}
 8014f64:	e7ea      	b.n	8014f3c <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8014f66:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8014f6a:	e7e7      	b.n	8014f3c <gpio_stm32_manage_callback+0x24>

08014f6c <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8014f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8014f6e:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8014f70:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8014f72:	6867      	ldr	r7, [r4, #4]
 8014f74:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8014f76:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8014f7a:	ea27 0700 	bic.w	r7, r7, r0
 8014f7e:	408e      	lsls	r6, r1
 8014f80:	433e      	orrs	r6, r7
 8014f82:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014f84:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8014f88:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8014f8c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8014f90:	f04f 0e03 	mov.w	lr, #3
 8014f94:	007f      	lsls	r7, r7, #1
 8014f96:	fa0e f707 	lsl.w	r7, lr, r7
 8014f9a:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014f9e:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8014fa2:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8014fa6:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8014faa:	007f      	lsls	r7, r7, #1
 8014fac:	40be      	lsls	r6, r7
 8014fae:	ea46 060c 	orr.w	r6, r6, ip
 8014fb2:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014fb4:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8014fb8:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8014fbc:	68e7      	ldr	r7, [r4, #12]
 8014fbe:	0076      	lsls	r6, r6, #1
 8014fc0:	fa0e f606 	lsl.w	r6, lr, r6
 8014fc4:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014fc8:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8014fcc:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8014fd0:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8014fd4:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8014fd6:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8014fda:	40b2      	lsls	r2, r6
 8014fdc:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8014fde:	2d20      	cmp	r5, #32
 8014fe0:	60e2      	str	r2, [r4, #12]
 8014fe2:	d115      	bne.n	8015010 <gpio_stm32_configure_raw.isra.0+0xa4>
		if (pin < 8) {
 8014fe4:	2907      	cmp	r1, #7
 8014fe6:	dc2b      	bgt.n	8015040 <gpio_stm32_configure_raw.isra.0+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014fe8:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8014fec:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8014fee:	b32a      	cbz	r2, 801503c <gpio_stm32_configure_raw.isra.0+0xd0>
  return __builtin_clz(value);
 8014ff0:	fab2 f282 	clz	r2, r2
 8014ff4:	0092      	lsls	r2, r2, #2
 8014ff6:	260f      	movs	r6, #15
 8014ff8:	fa06 f202 	lsl.w	r2, r6, r2
 8014ffc:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015000:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8015004:	fab2 f282 	clz	r2, r2
 8015008:	0092      	lsls	r2, r2, #2
 801500a:	4093      	lsls	r3, r2
 801500c:	430b      	orrs	r3, r1
 801500e:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015010:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8015014:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8015018:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801501a:	fa90 f0a0 	rbit	r0, r0
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8015022:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8015026:	092d      	lsrs	r5, r5, #4
 8015028:	fa01 f303 	lsl.w	r3, r1, r3
 801502c:	0040      	lsls	r0, r0, #1
 801502e:	ea22 0303 	bic.w	r3, r2, r3
 8015032:	fa05 f000 	lsl.w	r0, r5, r0
 8015036:	4318      	orrs	r0, r3
 8015038:	6020      	str	r0, [r4, #0]
}
 801503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 801503c:	462a      	mov	r2, r5
 801503e:	e7d9      	b.n	8014ff4 <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8015040:	0a02      	lsrs	r2, r0, #8
 8015042:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015044:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8015048:	b181      	cbz	r1, 801506c <gpio_stm32_configure_raw.isra.0+0x100>
  return __builtin_clz(value);
 801504a:	fab1 f181 	clz	r1, r1
 801504e:	0089      	lsls	r1, r1, #2
 8015050:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015052:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8015056:	fab2 f282 	clz	r2, r2
 801505a:	fa07 f101 	lsl.w	r1, r7, r1
 801505e:	0092      	lsls	r2, r2, #2
 8015060:	ea26 0101 	bic.w	r1, r6, r1
 8015064:	4093      	lsls	r3, r2
 8015066:	430b      	orrs	r3, r1
 8015068:	6263      	str	r3, [r4, #36]	; 0x24
}
 801506a:	e7d1      	b.n	8015010 <gpio_stm32_configure_raw.isra.0+0xa4>
    return 32U;
 801506c:	4629      	mov	r1, r5
 801506e:	e7ee      	b.n	801504e <gpio_stm32_configure_raw.isra.0+0xe2>

08015070 <gpio_stm32_config>:
{
 8015070:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8015072:	039a      	lsls	r2, r3, #14
{
 8015074:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8015076:	d51a      	bpl.n	80150ae <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8015078:	079c      	lsls	r4, r3, #30
 801507a:	d511      	bpl.n	80150a0 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 801507c:	075a      	lsls	r2, r3, #29
 801507e:	d52f      	bpl.n	80150e0 <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8015080:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8015082:	06dc      	lsls	r4, r3, #27
 8015084:	d50e      	bpl.n	80150a4 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8015086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 801508a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 801508e:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8015090:	d11c      	bne.n	80150cc <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8015092:	035b      	lsls	r3, r3, #13
 8015094:	d514      	bpl.n	80150c0 <gpio_stm32_config+0x50>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8015096:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8015098:	2301      	movs	r3, #1
 801509a:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 801509c:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 801509e:	e00f      	b.n	80150c0 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80150a0:	2210      	movs	r2, #16
 80150a2:	e7ee      	b.n	8015082 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80150a4:	069c      	lsls	r4, r3, #26
 80150a6:	d5f0      	bpl.n	801508a <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80150a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 80150ac:	e7ed      	b.n	801508a <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 80150ae:	03dc      	lsls	r4, r3, #15
 80150b0:	d511      	bpl.n	80150d6 <gpio_stm32_config+0x66>
		if ((flags & GPIO_PULL_UP) != 0) {
 80150b2:	06da      	lsls	r2, r3, #27
 80150b4:	d411      	bmi.n	80150da <gpio_stm32_config+0x6a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80150b6:	f013 0220 	ands.w	r2, r3, #32
 80150ba:	bf18      	it	ne
 80150bc:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 80150c0:	6840      	ldr	r0, [r0, #4]
 80150c2:	2300      	movs	r3, #0
 80150c4:	f7ff ff52 	bl	8014f6c <gpio_stm32_configure_raw.isra.0>
	return 0;
 80150c8:	2000      	movs	r0, #0
}
 80150ca:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80150cc:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 80150ce:	2301      	movs	r3, #1
 80150d0:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 80150d2:	61a3      	str	r3, [r4, #24]
	return 0;
 80150d4:	e7f4      	b.n	80150c0 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 80150d6:	2230      	movs	r2, #48	; 0x30
 80150d8:	e7f2      	b.n	80150c0 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80150da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150de:	e7ef      	b.n	80150c0 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 80150e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80150e4:	e7f1      	b.n	80150ca <gpio_stm32_config+0x5a>

080150e6 <gpio_stm32_isr>:
{
 80150e6:	460b      	mov	r3, r1
 80150e8:	6889      	ldr	r1, [r1, #8]
 80150ea:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80150ec:	b169      	cbz	r1, 801510a <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80150ee:	2501      	movs	r5, #1
 80150f0:	685e      	ldr	r6, [r3, #4]
	return node->next;
 80150f2:	680c      	ldr	r4, [r1, #0]
 80150f4:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 80150f6:	688a      	ldr	r2, [r1, #8]
 80150f8:	402a      	ands	r2, r5
 80150fa:	d002      	beq.n	8015102 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 80150fc:	684b      	ldr	r3, [r1, #4]
 80150fe:	4630      	mov	r0, r6
 8015100:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8015102:	b114      	cbz	r4, 801510a <gpio_stm32_isr+0x24>
 8015104:	4621      	mov	r1, r4
 8015106:	6824      	ldr	r4, [r4, #0]
 8015108:	e7f5      	b.n	80150f6 <gpio_stm32_isr+0x10>
}
 801510a:	bd70      	pop	{r4, r5, r6, pc}

0801510c <gpio_stm32_configure>:
{
 801510c:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 801510e:	6840      	ldr	r0, [r0, #4]
 8015110:	f7ff ff2c 	bl	8014f6c <gpio_stm32_configure_raw.isra.0>
}
 8015114:	2000      	movs	r0, #0
 8015116:	bd08      	pop	{r3, pc}

08015118 <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8015118:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 801511a:	681a      	ldr	r2, [r3, #0]
 801511c:	f042 0220 	orr.w	r2, r2, #32
 8015120:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8015122:	681a      	ldr	r2, [r3, #0]
 8015124:	f042 0210 	orr.w	r2, r2, #16
 8015128:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 801512a:	681a      	ldr	r2, [r3, #0]
 801512c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015130:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8015132:	681a      	ldr	r2, [r3, #0]
 8015134:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015138:	601a      	str	r2, [r3, #0]
}
 801513a:	4770      	bx	lr

0801513c <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 801513c:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	f022 0202 	bic.w	r2, r2, #2
 8015144:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	f022 0204 	bic.w	r2, r2, #4
 801514c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	f022 0220 	bic.w	r2, r2, #32
 8015154:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8015156:	681a      	ldr	r2, [r3, #0]
 8015158:	f022 0210 	bic.w	r2, r2, #16
 801515c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015164:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8015166:	681a      	ldr	r2, [r3, #0]
 8015168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801516c:	601a      	str	r2, [r3, #0]
}
 801516e:	4770      	bx	lr

08015170 <stm32_i2c_master_mode_end>:
{
 8015170:	4603      	mov	r3, r0
	const struct i2c_stm32_config *cfg = dev->config;
 8015172:	6840      	ldr	r0, [r0, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 8015174:	68c1      	ldr	r1, [r0, #12]
{
 8015176:	b510      	push	{r4, lr}
	struct i2c_stm32_data *data = dev->data;
 8015178:	691c      	ldr	r4, [r3, #16]
	stm32_i2c_disable_transfer_interrupts(dev);
 801517a:	f7ff ffdf 	bl	801513c <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 801517e:	680b      	ldr	r3, [r1, #0]
 8015180:	f023 0301 	bic.w	r3, r3, #1
 8015184:	600b      	str	r3, [r1, #0]
	z_impl_k_sem_give(sem);
 8015186:	4620      	mov	r0, r4
}
 8015188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801518c:	f7fa beea 	b.w	800ff64 <z_impl_k_sem_give>

08015190 <stm32_i2c_event_isr>:
	struct i2c_stm32_data *data = dev->data;
 8015190:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8015192:	6843      	ldr	r3, [r0, #4]
	if (data->current.len) {
 8015194:	6c8a      	ldr	r2, [r1, #72]	; 0x48
	I2C_TypeDef *i2c = cfg->i2c;
 8015196:	68db      	ldr	r3, [r3, #12]
{
 8015198:	b510      	push	{r4, lr}
	if (data->current.len) {
 801519a:	b182      	cbz	r2, 80151be <stm32_i2c_event_isr+0x2e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 801519c:	699c      	ldr	r4, [r3, #24]
			LL_I2C_TransmitData8(i2c, *data->current.buf);
 801519e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80151a0:	07a4      	lsls	r4, r4, #30
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 80151a2:	bf44      	itt	mi
 80151a4:	7814      	ldrbmi	r4, [r2, #0]
 80151a6:	629c      	strmi	r4, [r3, #40]	; 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80151a8:	699c      	ldr	r4, [r3, #24]
 80151aa:	0764      	lsls	r4, r4, #29
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80151ac:	bf44      	itt	mi
 80151ae:	6a5c      	ldrmi	r4, [r3, #36]	; 0x24
 80151b0:	7014      	strbmi	r4, [r2, #0]
		data->current.buf++;
 80151b2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80151b4:	3201      	adds	r2, #1
 80151b6:	64ca      	str	r2, [r1, #76]	; 0x4c
		data->current.len--;
 80151b8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80151ba:	3a01      	subs	r2, #1
 80151bc:	648a      	str	r2, [r1, #72]	; 0x48
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 80151be:	699a      	ldr	r2, [r3, #24]
 80151c0:	06d2      	lsls	r2, r2, #27
 80151c2:	d414      	bmi.n	80151ee <stm32_i2c_event_isr+0x5e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80151c4:	699a      	ldr	r2, [r3, #24]
 80151c6:	0694      	lsls	r4, r2, #26
 80151c8:	d41c      	bmi.n	8015204 <stm32_i2c_event_isr+0x74>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 80151ca:	699a      	ldr	r2, [r3, #24]
 80151cc:	0652      	lsls	r2, r2, #25
 80151ce:	d402      	bmi.n	80151d6 <stm32_i2c_event_isr+0x46>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 80151d0:	699a      	ldr	r2, [r3, #24]
 80151d2:	0614      	lsls	r4, r2, #24
 80151d4:	d515      	bpl.n	8015202 <stm32_i2c_event_isr+0x72>
		if (data->current.msg->flags & I2C_MSG_STOP) {
 80151d6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 80151d8:	7a12      	ldrb	r2, [r2, #8]
 80151da:	0792      	lsls	r2, r2, #30
 80151dc:	d40d      	bmi.n	80151fa <stm32_i2c_event_isr+0x6a>
			stm32_i2c_disable_transfer_interrupts(dev);
 80151de:	6840      	ldr	r0, [r0, #4]
 80151e0:	f7ff ffac 	bl	801513c <stm32_i2c_disable_transfer_interrupts.isra.0>
}
 80151e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151e8:	4608      	mov	r0, r1
 80151ea:	f7fa bebb 	b.w	800ff64 <z_impl_k_sem_give>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 80151ee:	69da      	ldr	r2, [r3, #28]
 80151f0:	f042 0210 	orr.w	r2, r2, #16
 80151f4:	61da      	str	r2, [r3, #28]
		data->current.is_nack = 1U;
 80151f6:	2201      	movs	r2, #1
 80151f8:	63ca      	str	r2, [r1, #60]	; 0x3c
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 80151fa:	685a      	ldr	r2, [r3, #4]
 80151fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015200:	605a      	str	r2, [r3, #4]
}
 8015202:	bd10      	pop	{r4, pc}
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8015204:	69da      	ldr	r2, [r3, #28]
 8015206:	f042 0220 	orr.w	r2, r2, #32
 801520a:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 801520c:	685a      	ldr	r2, [r3, #4]
 801520e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8015212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015216:	605a      	str	r2, [r3, #4]
	stm32_i2c_master_mode_end(dev);
 8015218:	f7ff bfaa 	b.w	8015170 <stm32_i2c_master_mode_end>

0801521c <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 801521c:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 801521e:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8015220:	68db      	ldr	r3, [r3, #12]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
 8015222:	699a      	ldr	r2, [r3, #24]
 8015224:	0592      	lsls	r2, r2, #22
 8015226:	d507      	bpl.n	8015238 <stm32_i2c_error_isr+0x1c>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 8015228:	69da      	ldr	r2, [r3, #28]
 801522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801522e:	61da      	str	r2, [r3, #28]
		data->current.is_arlo = 1U;
 8015230:	2301      	movs	r3, #1
 8015232:	638b      	str	r3, [r1, #56]	; 0x38
	stm32_i2c_master_mode_end(dev);
 8015234:	f7ff bf9c 	b.w	8015170 <stm32_i2c_master_mode_end>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
 8015238:	699a      	ldr	r2, [r3, #24]
 801523a:	05d2      	lsls	r2, r2, #23
 801523c:	d506      	bpl.n	801524c <stm32_i2c_error_isr+0x30>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 801523e:	69da      	ldr	r2, [r3, #28]
 8015240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015244:	61da      	str	r2, [r3, #28]
		data->current.is_err = 1U;
 8015246:	2301      	movs	r3, #1
 8015248:	640b      	str	r3, [r1, #64]	; 0x40
		goto end;
 801524a:	e7f3      	b.n	8015234 <stm32_i2c_error_isr+0x18>
}
 801524c:	4770      	bx	lr

0801524e <stm32_i2c_msg_write>:
{
 801524e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8015252:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8015254:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8015256:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 801525a:	684f      	ldr	r7, [r1, #4]
 801525c:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 801525e:	680f      	ldr	r7, [r1, #0]
 8015260:	64e7      	str	r7, [r4, #76]	; 0x4c
	data->current.is_nack = 0U;
 8015262:	f04f 0c00 	mov.w	ip, #0
{
 8015266:	4605      	mov	r5, r0
	data->current.is_write = 1U;
 8015268:	2701      	movs	r7, #1
	data->current.is_err = 0U;
 801526a:	e9c4 cc0f 	strd	ip, ip, [r4, #60]	; 0x3c
	data->current.is_write = 1U;
 801526e:	6367      	str	r7, [r4, #52]	; 0x34
	data->current.msg = msg;
 8015270:	6461      	str	r1, [r4, #68]	; 0x44
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 8015272:	f8cd c000 	str.w	ip, [sp]
 8015276:	f7f8 f853 	bl	800d320 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 801527a:	6868      	ldr	r0, [r5, #4]
 801527c:	f7ff ff4c 	bl	8015118 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8015280:	f8d8 3000 	ldr.w	r3, [r8]
 8015284:	f043 0302 	orr.w	r3, r3, #2
 8015288:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_sem_take(sem, timeout);
 801528c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015290:	2300      	movs	r3, #0
 8015292:	4620      	mov	r0, r4
 8015294:	f7fa fe8c 	bl	800ffb0 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8015298:	b150      	cbz	r0, 80152b0 <stm32_i2c_msg_write+0x62>
		stm32_i2c_master_mode_end(dev);
 801529a:	4628      	mov	r0, r5
 801529c:	f7ff ff68 	bl	8015170 <stm32_i2c_master_mode_end>
 80152a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80152a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152a8:	4620      	mov	r0, r4
 80152aa:	f7fa fe81 	bl	800ffb0 <z_impl_k_sem_take>
		is_timeout = true;
 80152ae:	4638      	mov	r0, r7
	if (data->current.is_nack || data->current.is_err ||
 80152b0:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 80152b4:	ea52 0503 	orrs.w	r5, r2, r3
	    data->current.is_arlo || is_timeout) {
 80152b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (data->current.is_nack || data->current.is_err ||
 80152ba:	d104      	bne.n	80152c6 <stm32_i2c_msg_write+0x78>
 80152bc:	b921      	cbnz	r1, 80152c8 <stm32_i2c_msg_write+0x7a>
	    data->current.is_arlo || is_timeout) {
 80152be:	b940      	cbnz	r0, 80152d2 <stm32_i2c_msg_write+0x84>
}
 80152c0:	b002      	add	sp, #8
 80152c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 80152c6:	b109      	cbz	r1, 80152cc <stm32_i2c_msg_write+0x7e>
		data->current.is_arlo = 0U;
 80152c8:	2100      	movs	r1, #0
 80152ca:	63a1      	str	r1, [r4, #56]	; 0x38
	if (data->current.is_nack) {
 80152cc:	b10a      	cbz	r2, 80152d2 <stm32_i2c_msg_write+0x84>
		data->current.is_nack = 0U;
 80152ce:	2200      	movs	r2, #0
 80152d0:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 80152d2:	b10b      	cbz	r3, 80152d8 <stm32_i2c_msg_write+0x8a>
		data->current.is_err = 0U;
 80152d4:	2300      	movs	r3, #0
 80152d6:	6423      	str	r3, [r4, #64]	; 0x40
	return -EIO;
 80152d8:	f06f 0004 	mvn.w	r0, #4
 80152dc:	e7f0      	b.n	80152c0 <stm32_i2c_msg_write+0x72>

080152de <stm32_i2c_msg_read>:
{
 80152de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 80152e2:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 80152e4:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 80152e6:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 80152ea:	684f      	ldr	r7, [r1, #4]
 80152ec:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 80152ee:	680f      	ldr	r7, [r1, #0]
 80152f0:	64e7      	str	r7, [r4, #76]	; 0x4c
{
 80152f2:	4605      	mov	r5, r0
	data->current.is_write = 0U;
 80152f4:	2700      	movs	r7, #0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 80152f6:	f44f 6680 	mov.w	r6, #1024	; 0x400
	data->current.is_arlo = 0U;
 80152fa:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
	data->current.is_nack = 0U;
 80152fe:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
	data->current.msg = msg;
 8015302:	6461      	str	r1, [r4, #68]	; 0x44
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8015304:	9600      	str	r6, [sp, #0]
 8015306:	f7f8 f80b 	bl	800d320 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 801530a:	6868      	ldr	r0, [r5, #4]
 801530c:	f7ff ff04 	bl	8015118 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8015310:	f8d8 3000 	ldr.w	r3, [r8]
 8015314:	f043 0304 	orr.w	r3, r3, #4
 8015318:	f8c8 3000 	str.w	r3, [r8]
 801531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015320:	2300      	movs	r3, #0
 8015322:	4620      	mov	r0, r4
 8015324:	f7fa fe44 	bl	800ffb0 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8015328:	b150      	cbz	r0, 8015340 <stm32_i2c_msg_read+0x62>
		stm32_i2c_master_mode_end(dev);
 801532a:	4628      	mov	r0, r5
 801532c:	f7ff ff20 	bl	8015170 <stm32_i2c_master_mode_end>
 8015330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015338:	4620      	mov	r0, r4
 801533a:	f7fa fe39 	bl	800ffb0 <z_impl_k_sem_take>
		is_timeout = true;
 801533e:	2001      	movs	r0, #1
	if (data->current.is_nack || data->current.is_err ||
 8015340:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8015344:	ea52 0503 	orrs.w	r5, r2, r3
	    data->current.is_arlo || is_timeout) {
 8015348:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (data->current.is_nack || data->current.is_err ||
 801534a:	d104      	bne.n	8015356 <stm32_i2c_msg_read+0x78>
 801534c:	b921      	cbnz	r1, 8015358 <stm32_i2c_msg_read+0x7a>
	    data->current.is_arlo || is_timeout) {
 801534e:	b940      	cbnz	r0, 8015362 <stm32_i2c_msg_read+0x84>
}
 8015350:	b002      	add	sp, #8
 8015352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8015356:	b109      	cbz	r1, 801535c <stm32_i2c_msg_read+0x7e>
		data->current.is_arlo = 0U;
 8015358:	2100      	movs	r1, #0
 801535a:	63a1      	str	r1, [r4, #56]	; 0x38
	if (data->current.is_nack) {
 801535c:	b10a      	cbz	r2, 8015362 <stm32_i2c_msg_read+0x84>
		data->current.is_nack = 0U;
 801535e:	2200      	movs	r2, #0
 8015360:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 8015362:	b10b      	cbz	r3, 8015368 <stm32_i2c_msg_read+0x8a>
		data->current.is_err = 0U;
 8015364:	2300      	movs	r3, #0
 8015366:	6423      	str	r3, [r4, #64]	; 0x40
	return -EIO;
 8015368:	f06f 0004 	mvn.w	r0, #4
 801536c:	e7f0      	b.n	8015350 <stm32_i2c_msg_read+0x72>

0801536e <i2c_stm32_irq_config_func_i2c2>:
#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c2), okay)
STM32_I2C_INIT(i2c2);
 801536e:	b508      	push	{r3, lr}
 8015370:	2200      	movs	r2, #0
 8015372:	4611      	mov	r1, r2
 8015374:	2020      	movs	r0, #32
 8015376:	f7ef fb63 	bl	8004a40 <z_arm_irq_priority_set>
 801537a:	2020      	movs	r0, #32
 801537c:	f7ef fb3c 	bl	80049f8 <arch_irq_enable>
 8015380:	2200      	movs	r2, #0
 8015382:	2021      	movs	r0, #33	; 0x21
 8015384:	4611      	mov	r1, r2
 8015386:	f7ef fb5b 	bl	8004a40 <z_arm_irq_priority_set>
 801538a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801538e:	2021      	movs	r0, #33	; 0x21
 8015390:	f7ef bb32 	b.w	80049f8 <arch_irq_enable>

08015394 <i2c_stm32_irq_config_func_i2c3>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c3), okay)
STM32_I2C_INIT(i2c3);
 8015394:	b508      	push	{r3, lr}
 8015396:	2200      	movs	r2, #0
 8015398:	4611      	mov	r1, r2
 801539a:	2030      	movs	r0, #48	; 0x30
 801539c:	f7ef fb50 	bl	8004a40 <z_arm_irq_priority_set>
 80153a0:	2030      	movs	r0, #48	; 0x30
 80153a2:	f7ef fb29 	bl	80049f8 <arch_irq_enable>
 80153a6:	2200      	movs	r2, #0
 80153a8:	2031      	movs	r0, #49	; 0x31
 80153aa:	4611      	mov	r1, r2
 80153ac:	f7ef fb48 	bl	8004a40 <z_arm_irq_priority_set>
 80153b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80153b4:	2031      	movs	r0, #49	; 0x31
 80153b6:	f7ef bb1f 	b.w	80049f8 <arch_irq_enable>

080153ba <i2c_stm32_transfer>:
{
 80153ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153be:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 80153c0:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = dev->data;
 80153c2:	6906      	ldr	r6, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 80153c4:	f043 0304 	orr.w	r3, r3, #4
{
 80153c8:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 80153ca:	720b      	strb	r3, [r1, #8]
{
 80153cc:	b087      	sub	sp, #28
 80153ce:	4607      	mov	r7, r0
 80153d0:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 80153d2:	460a      	mov	r2, r1
 80153d4:	2301      	movs	r3, #1
 80153d6:	42ab      	cmp	r3, r5
 80153d8:	d90c      	bls.n	80153f4 <i2c_stm32_transfer+0x3a>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 80153da:	f106 0818 	add.w	r8, r6, #24
 80153de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80153e6:	4640      	mov	r0, r8
 80153e8:	f7fa fde2 	bl	800ffb0 <z_impl_k_sem_take>
	while (num_msgs > 0) {
 80153ec:	3414      	adds	r4, #20
 80153ee:	2300      	movs	r3, #0
 80153f0:	ae03      	add	r6, sp, #12
 80153f2:	e054      	b.n	801549e <i2c_stm32_transfer+0xe4>
			if (OPERATION(current) != OPERATION(next)) {
 80153f4:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 80153f6:	d20c      	bcs.n	8015412 <i2c_stm32_transfer+0x58>
			if (OPERATION(current) != OPERATION(next)) {
 80153f8:	7d10      	ldrb	r0, [r2, #20]
 80153fa:	ea80 0c01 	eor.w	ip, r0, r1
 80153fe:	f01c 0f01 	tst.w	ip, #1
 8015402:	d001      	beq.n	8015408 <i2c_stm32_transfer+0x4e>
				if (!(next->flags & I2C_MSG_RESTART)) {
 8015404:	0740      	lsls	r0, r0, #29
 8015406:	d501      	bpl.n	801540c <i2c_stm32_transfer+0x52>
			if (current->flags & I2C_MSG_STOP) {
 8015408:	0789      	lsls	r1, r1, #30
 801540a:	d505      	bpl.n	8015418 <i2c_stm32_transfer+0x5e>
 801540c:	f06f 0315 	mvn.w	r3, #21
 8015410:	e04c      	b.n	80154ac <i2c_stm32_transfer+0xf2>
			current->flags |= I2C_MSG_STOP;
 8015412:	f041 0102 	orr.w	r1, r1, #2
 8015416:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8015418:	3301      	adds	r3, #1
		current++;
 801541a:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 801541c:	b2db      	uxtb	r3, r3
 801541e:	e7da      	b.n	80153d6 <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 8015420:	2d01      	cmp	r5, #1
 8015422:	bf14      	ite	ne
 8015424:	4623      	movne	r3, r4
 8015426:	2300      	moveq	r3, #0
 8015428:	9301      	str	r3, [sp, #4]
		ret = i2c_stm32_transaction(dev, *current, next_msg_flags, slave);
 801542a:	f1a4 0314 	sub.w	r3, r4, #20
 801542e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015432:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const uint8_t saved_flags = msg.flags;
 8015436:	f89d b014 	ldrb.w	fp, [sp, #20]
	uint32_t rest = msg.len;
 801543a:	f8dd a010 	ldr.w	sl, [sp, #16]
		saved_flags & ~(I2C_MSG_STOP | I2C_MSG_RESTART);
 801543e:	f02b 0306 	bic.w	r3, fp, #6
	uint8_t combine_flags =
 8015442:	f88d 300b 	strb.w	r3, [sp, #11]
		if (msg.len > i2c_stm32_maxchunk) {
 8015446:	9b04      	ldr	r3, [sp, #16]
 8015448:	2bff      	cmp	r3, #255	; 0xff
			msg.len = i2c_stm32_maxchunk;
 801544a:	bf83      	ittte	hi
 801544c:	23ff      	movhi	r3, #255	; 0xff
 801544e:	9304      	strhi	r3, [sp, #16]
			msg.flags &= ~I2C_MSG_STOP;
 8015450:	f89d 3014 	ldrbhi.w	r3, [sp, #20]
			msg.flags = saved_flags;
 8015454:	f88d b014 	strbls.w	fp, [sp, #20]
			msg.flags &= ~I2C_MSG_STOP;
 8015458:	bf84      	itt	hi
 801545a:	f023 0302 	bichi.w	r3, r3, #2
 801545e:	f88d 3014 	strbhi.w	r3, [sp, #20]
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8015462:	f89d 3014 	ldrb.w	r3, [sp, #20]
			flagsp = next_msg_flags;
 8015466:	bf94      	ite	ls
 8015468:	9a01      	ldrls	r2, [sp, #4]
			flagsp = &combine_flags;
 801546a:	f10d 020b 	addhi.w	r2, sp, #11
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 801546e:	f013 0f01 	tst.w	r3, #1
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 8015472:	4631      	mov	r1, r6
 8015474:	464b      	mov	r3, r9
 8015476:	4638      	mov	r0, r7
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8015478:	d11c      	bne.n	80154b4 <i2c_stm32_transfer+0xfa>
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 801547a:	f7ff fee8 	bl	801524e <stm32_i2c_msg_write>
		if (ret < 0) {
 801547e:	2800      	cmp	r0, #0
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 8015480:	4603      	mov	r3, r0
		if (ret < 0) {
 8015482:	db0e      	blt.n	80154a2 <i2c_stm32_transfer+0xe8>
		rest -= msg.len;
 8015484:	9904      	ldr	r1, [sp, #16]
		msg.buf += msg.len;
 8015486:	9a03      	ldr	r2, [sp, #12]
		rest -= msg.len;
 8015488:	ebaa 0a01 	sub.w	sl, sl, r1
		msg.buf += msg.len;
 801548c:	440a      	add	r2, r1
		msg.len = rest;
 801548e:	e9cd 2a03 	strd	r2, sl, [sp, #12]
	} while (rest > 0U);
 8015492:	f1ba 0f00 	cmp.w	sl, #0
 8015496:	d1d6      	bne.n	8015446 <i2c_stm32_transfer+0x8c>
		num_msgs--;
 8015498:	3d01      	subs	r5, #1
 801549a:	b2ed      	uxtb	r5, r5
 801549c:	340c      	adds	r4, #12
	while (num_msgs > 0) {
 801549e:	2d00      	cmp	r5, #0
 80154a0:	d1be      	bne.n	8015420 <i2c_stm32_transfer+0x66>
 80154a2:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 80154a4:	4640      	mov	r0, r8
 80154a6:	f7fa fd5d 	bl	800ff64 <z_impl_k_sem_give>
}
 80154aa:	9b01      	ldr	r3, [sp, #4]
}
 80154ac:	4618      	mov	r0, r3
 80154ae:	b007      	add	sp, #28
 80154b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 80154b4:	f7ff ff13 	bl	80152de <stm32_i2c_msg_read>
 80154b8:	e7e1      	b.n	801547e <i2c_stm32_transfer+0xc4>

080154ba <bme280_reg_write.isra.0>:
	return cfg->bus_io->write(&cfg->bus, reg, val);
 80154ba:	6883      	ldr	r3, [r0, #8]
 80154bc:	689b      	ldr	r3, [r3, #8]
 80154be:	4718      	bx	r3

080154c0 <bme280_reg_read.isra.0>:
static inline int bme280_reg_read(const struct device *dev,
 80154c0:	b410      	push	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
 80154c2:	6884      	ldr	r4, [r0, #8]
 80154c4:	6864      	ldr	r4, [r4, #4]
 80154c6:	46a4      	mov	ip, r4
}
 80154c8:	bc10      	pop	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
 80154ca:	4760      	bx	ip

080154cc <bme280_wait_until_ready>:
{
 80154cc:	b513      	push	{r0, r1, r4, lr}
	uint8_t status = 0;
 80154ce:	2300      	movs	r3, #0
{
 80154d0:	4604      	mov	r4, r0
	uint8_t status = 0;
 80154d2:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_sleep(timeout);
 80154d6:	2100      	movs	r1, #0
 80154d8:	201e      	movs	r0, #30
 80154da:	f7fb f983 	bl	80107e4 <z_impl_k_sleep>
		ret = bme280_reg_read(dev, BME280_REG_STATUS, &status, 1);
 80154de:	6860      	ldr	r0, [r4, #4]
 80154e0:	2301      	movs	r3, #1
 80154e2:	f10d 0207 	add.w	r2, sp, #7
 80154e6:	21f3      	movs	r1, #243	; 0xf3
 80154e8:	f7ff ffea 	bl	80154c0 <bme280_reg_read.isra.0>
		if (ret < 0) {
 80154ec:	2800      	cmp	r0, #0
 80154ee:	db04      	blt.n	80154fa <bme280_wait_until_ready+0x2e>
	} while (status & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE));
 80154f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80154f4:	f013 0009 	ands.w	r0, r3, #9
 80154f8:	d1ed      	bne.n	80154d6 <bme280_wait_until_ready+0xa>
}
 80154fa:	b002      	add	sp, #8
 80154fc:	bd10      	pop	{r4, pc}

080154fe <bme280_sample_fetch>:
{
 80154fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bme280_data *data = dev->data;
 8015502:	6905      	ldr	r5, [r0, #16]
{
 8015504:	4604      	mov	r4, r0
	ret = bme280_wait_until_ready(dev);
 8015506:	f7ff ffe1 	bl	80154cc <bme280_wait_until_ready>
	if (ret < 0) {
 801550a:	2800      	cmp	r0, #0
 801550c:	f2c0 8103 	blt.w	8015716 <bme280_sample_fetch+0x218>
	if (data->chip_id == BME280_CHIP_ID) {
 8015510:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
 8015514:	6860      	ldr	r0, [r4, #4]
		size = 8;
 8015516:	2b60      	cmp	r3, #96	; 0x60
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
 8015518:	bf14      	ite	ne
 801551a:	2306      	movne	r3, #6
 801551c:	2308      	moveq	r3, #8
 801551e:	466a      	mov	r2, sp
 8015520:	21f7      	movs	r1, #247	; 0xf7
 8015522:	f7ff ffcd 	bl	80154c0 <bme280_reg_read.isra.0>
	if (ret < 0) {
 8015526:	2800      	cmp	r0, #0
 8015528:	f2c0 80f5 	blt.w	8015716 <bme280_sample_fetch+0x218>
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
 801552c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015530:	f89d 2003 	ldrb.w	r2, [sp, #3]
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 8015534:	f8b5 9006 	ldrh.w	r9, [r5, #6]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 8015538:	f89d c000 	ldrb.w	ip, [sp]
 801553c:	f89d e001 	ldrb.w	lr, [sp, #1]
 8015540:	f89d 1002 	ldrb.w	r1, [sp, #2]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
 8015544:	011b      	lsls	r3, r3, #4
 8015546:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 801554a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801554e:	ea43 1412 	orr.w	r4, r3, r2, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 8015552:	882a      	ldrh	r2, [r5, #0]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 8015554:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 8015558:	0052      	lsls	r2, r2, #1
 801555a:	ebc2 02d4 	rsb	r2, r2, r4, lsr #3
		((int32_t)data->dig_t2)) >> 11;
 801555e:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 8015562:	4362      	muls	r2, r4
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 8015564:	fb03 f403 	mul.w	r4, r3, r3
		((int32_t)data->dig_t3)) >> 14;
 8015568:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
		  ((adc_temp >> 4) - ((int32_t)data->dig_t1))) >> 12) *
 801556c:	1324      	asrs	r4, r4, #12
 801556e:	435c      	muls	r4, r3
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 8015570:	13a4      	asrs	r4, r4, #14
	data->t_fine = var1 + var2;
 8015572:	eb04 24e2 	add.w	r4, r4, r2, asr #11
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
 8015576:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801557a:	3380      	adds	r3, #128	; 0x80
 801557c:	121b      	asrs	r3, r3, #8
 801557e:	f5a4 38fa 	sub.w	r8, r4, #128000	; 0x1f400
 8015582:	626b      	str	r3, [r5, #36]	; 0x24
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 8015584:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
	data->t_fine = var1 + var2;
 8015588:	632c      	str	r4, [r5, #48]	; 0x30
	var2 = var1 * var1 * (int64_t)data->dig_p6;
 801558a:	fb88 6a08 	smull	r6, sl, r8, r8
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 801558e:	17d8      	asrs	r0, r3, #31
 8015590:	fb03 f20a 	mul.w	r2, r3, sl
 8015594:	fb06 2200 	mla	r2, r6, r0, r2
 8015598:	fba3 3006 	umull	r3, r0, r3, r6
 801559c:	0a1f      	lsrs	r7, r3, #8
		((var1 * (int64_t)data->dig_p2) << 12);
 801559e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80155a2:	4410      	add	r0, r2
		((var1 * (int64_t)data->dig_p2) << 12);
 80155a4:	fb83 3208 	smull	r3, r2, r3, r8
 80155a8:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80155aa:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
		((var1 * (int64_t)data->dig_p2) << 12);
 80155ae:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
 80155b2:	031b      	lsls	r3, r3, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80155b4:	18fb      	adds	r3, r7, r3
 80155b6:	eb42 2220 	adc.w	r2, r2, r0, asr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 80155ba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80155be:	fba3 3709 	umull	r3, r7, r3, r9
 80155c2:	fb09 7702 	mla	r7, r9, r2, r7
 80155c6:	17fb      	asrs	r3, r7, #31
 80155c8:	107a      	asrs	r2, r7, #1
	if (var1 == 0) {
 80155ca:	ea53 0767 	orrs.w	r7, r3, r7, asr #1
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 80155ce:	f04f 0000 	mov.w	r0, #0
	if (var1 == 0) {
 80155d2:	d066      	beq.n	80156a2 <bme280_sample_fetch+0x1a4>
	var2 = var1 * var1 * (int64_t)data->dig_p6;
 80155d4:	f9b5 9010 	ldrsh.w	r9, [r5, #16]
 80155d8:	ea4f 7be9 	mov.w	fp, r9, asr #31
 80155dc:	fb09 f70a 	mul.w	r7, r9, sl
 80155e0:	fb06 770b 	mla	r7, r6, fp, r7
 80155e4:	fba9 9606 	umull	r9, r6, r9, r6
 80155e8:	4437      	add	r7, r6
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 80155ea:	f9b5 600e 	ldrsh.w	r6, [r5, #14]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 80155ee:	0909      	lsrs	r1, r1, #4
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 80155f0:	fb86 6808 	smull	r6, r8, r6, r8
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 80155f4:	ea41 110e 	orr.w	r1, r1, lr, lsl #4
 80155f8:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 80155fc:	ea4f 4848 	mov.w	r8, r8, lsl #17
	p = 1048576 - adc_press;
 8015600:	f5c1 1180 	rsb	r1, r1, #1048576	; 0x100000
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8015604:	ea48 38d6 	orr.w	r8, r8, r6, lsr #15
 8015608:	0476      	lsls	r6, r6, #17
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 801560a:	f9b5 e00c 	ldrsh.w	lr, [r5, #12]
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 801560e:	eb16 0609 	adds.w	r6, r6, r9
	p = (((p << 31) - var2) * 3125) / var1;
 8015612:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8015616:	eb47 0708 	adc.w	r7, r7, r8
	p = (((p << 31) - var2) * 3125) / var1;
 801561a:	ea4c 0c51 	orr.w	ip, ip, r1, lsr #1
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 801561e:	1980      	adds	r0, r0, r6
	p = (((p << 31) - var2) * 3125) / var1;
 8015620:	07c9      	lsls	r1, r1, #31
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 8015622:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
 8015626:	1a08      	subs	r0, r1, r0
 8015628:	f640 4635 	movw	r6, #3125	; 0xc35
 801562c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8015630:	fba0 0106 	umull	r0, r1, r0, r6
 8015634:	fb06 110c 	mla	r1, r6, ip, r1
 8015638:	f7eb fc76 	bl	8000f28 <__aeabi_ldivmod>
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
 801563c:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8015640:	134e      	asrs	r6, r1, #13
 8015642:	0b43      	lsrs	r3, r0, #13
 8015644:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 8015648:	fb02 f706 	mul.w	r7, r2, r6
 801564c:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8015650:	fb03 770e 	mla	r7, r3, lr, r7
 8015654:	fba2 2e03 	umull	r2, lr, r2, r3
 8015658:	44be      	add	lr, r7
 801565a:	fb02 f706 	mul.w	r7, r2, r6
 801565e:	fb03 770e 	mla	r7, r3, lr, r7
 8015662:	fba2 2303 	umull	r2, r3, r2, r3
 8015666:	441f      	add	r7, r3
 8015668:	0e53      	lsrs	r3, r2, #25
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
 801566a:	f9b5 6014 	ldrsh.w	r6, [r5, #20]
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
 801566e:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
 8015672:	181b      	adds	r3, r3, r0
 8015674:	eb41 6767 	adc.w	r7, r1, r7, asr #25
	p = (((p << 31) - var2) * 3125) / var1;
 8015678:	4684      	mov	ip, r0
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
 801567a:	17f2      	asrs	r2, r6, #31
 801567c:	4371      	muls	r1, r6
 801567e:	fb02 110c 	mla	r1, r2, ip, r1
 8015682:	fba6 0600 	umull	r0, r6, r6, r0
 8015686:	4431      	add	r1, r6
 8015688:	0cc0      	lsrs	r0, r0, #19
 801568a:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
 801568e:	1818      	adds	r0, r3, r0
 8015690:	eb47 47e1 	adc.w	r7, r7, r1, asr #19
 8015694:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8015698:	0a00      	lsrs	r0, r0, #8
 801569a:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
	data->comp_press = (uint32_t)p;
 801569e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	if (data->chip_id == BME280_CHIP_ID) {
 80156a2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80156a6:	62a8      	str	r0, [r5, #40]	; 0x28
 80156a8:	2b60      	cmp	r3, #96	; 0x60
 80156aa:	d133      	bne.n	8015714 <bme280_sample_fetch+0x216>
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 80156ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80156b0:	ba5b      	rev16	r3, r3
 80156b2:	b29a      	uxth	r2, r3
 80156b4:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
 80156b8:	051b      	lsls	r3, r3, #20
 80156ba:	ebc3 3382 	rsb	r3, r3, r2, lsl #14
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
 80156be:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
	h = (data->t_fine - ((int32_t)76800));
 80156c2:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 80156c6:	fb01 3312 	mls	r3, r1, r2, r3
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
 80156ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80156ce:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 80156d0:	7f2b      	ldrb	r3, [r5, #28]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
 80156d2:	f995 4022 	ldrsb.w	r4, [r5, #34]	; 0x22
 80156d6:	434b      	muls	r3, r1
 80156d8:	434c      	muls	r4, r1
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 80156da:	12db      	asrs	r3, r3, #11
 80156dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
 80156e0:	12a4      	asrs	r4, r4, #10
 80156e2:	4363      	muls	r3, r4
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
 80156e4:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 80156e8:	129b      	asrs	r3, r3, #10
 80156ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
 80156ee:	434b      	muls	r3, r1
 80156f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80156f4:	139b      	asrs	r3, r3, #14
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 80156f6:	4353      	muls	r3, r2
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
 80156f8:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h1)) >> 4));
 80156fa:	7e29      	ldrb	r1, [r5, #24]
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
 80156fc:	4352      	muls	r2, r2
 80156fe:	11d2      	asrs	r2, r2, #7
 8015700:	434a      	muls	r2, r1
 8015702:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	h = (h > 419430400 ? 419430400 : h);
 8015706:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 801570a:	bfa8      	it	ge
 801570c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	data->comp_humidity = (uint32_t)(h >> 12);
 8015710:	131b      	asrs	r3, r3, #12
 8015712:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
 8015714:	2000      	movs	r0, #0
}
 8015716:	b003      	add	sp, #12
 8015718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801571c <bme280_chip_init>:

	return 0;
}

static int bme280_chip_init(const struct device *dev)
{
 801571c:	b570      	push	{r4, r5, r6, lr}
	struct bme280_data *data = dev->data;
 801571e:	6905      	ldr	r5, [r0, #16]
{
 8015720:	4604      	mov	r4, r0
 8015722:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->check(&cfg->bus);
 8015724:	6883      	ldr	r3, [r0, #8]
{
 8015726:	b088      	sub	sp, #32
	return cfg->bus_io->check(&cfg->bus);
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	4798      	blx	r3
	int err;

	err = bme280_bus_check(dev);
	if (err < 0) {
 801572c:	2800      	cmp	r0, #0
 801572e:	f2c0 8087 	blt.w	8015840 <bme280_chip_init+0x124>
		LOG_DBG("bus check failed: %d", err);
		return err;
	}

	err = bme280_reg_read(dev, BME280_REG_ID, &data->chip_id, 1);
 8015732:	6860      	ldr	r0, [r4, #4]
 8015734:	2301      	movs	r3, #1
 8015736:	f105 0234 	add.w	r2, r5, #52	; 0x34
 801573a:	21d0      	movs	r1, #208	; 0xd0
 801573c:	f7ff fec0 	bl	80154c0 <bme280_reg_read.isra.0>
	if (err < 0) {
 8015740:	2800      	cmp	r0, #0
 8015742:	db7d      	blt.n	8015840 <bme280_chip_init+0x124>
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
		LOG_DBG("ID OK");
	} else if (data->chip_id == BMP280_CHIP_ID_MP ||
 8015744:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8015748:	3b56      	subs	r3, #86	; 0x56
 801574a:	b2db      	uxtb	r3, r3
 801574c:	2b0a      	cmp	r3, #10
 801574e:	f200 808e 	bhi.w	801586e <bme280_chip_init+0x152>
 8015752:	f240 4205 	movw	r2, #1029	; 0x405
 8015756:	fa22 f303 	lsr.w	r3, r2, r3
 801575a:	07db      	lsls	r3, r3, #31
 801575c:	f140 8087 	bpl.w	801586e <bme280_chip_init+0x152>
	} else {
		LOG_DBG("bad chip id 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme280_reg_write(dev, BME280_REG_RESET, BME280_CMD_SOFT_RESET);
 8015760:	22b6      	movs	r2, #182	; 0xb6
 8015762:	21e0      	movs	r1, #224	; 0xe0
 8015764:	6860      	ldr	r0, [r4, #4]
 8015766:	f7ff fea8 	bl	80154ba <bme280_reg_write.isra.0>
	if (err < 0) {
		LOG_DBG("Soft-reset failed: %d", err);
	}

	err = bme280_wait_until_ready(dev);
 801576a:	4620      	mov	r0, r4
 801576c:	f7ff feae 	bl	80154cc <bme280_wait_until_ready>
	if (err < 0) {
 8015770:	2800      	cmp	r0, #0
 8015772:	db65      	blt.n	8015840 <bme280_chip_init+0x124>
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
 8015774:	6860      	ldr	r0, [r4, #4]
	struct bme280_data *data = dev->data;
 8015776:	6926      	ldr	r6, [r4, #16]
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
 8015778:	2318      	movs	r3, #24
 801577a:	aa02      	add	r2, sp, #8
 801577c:	2188      	movs	r1, #136	; 0x88
 801577e:	f7ff fe9f 	bl	80154c0 <bme280_reg_read.isra.0>
	if (err < 0) {
 8015782:	2800      	cmp	r0, #0
 8015784:	db5c      	blt.n	8015840 <bme280_chip_init+0x124>
	data->dig_t1 = sys_le16_to_cpu(buf[0]);
 8015786:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801578a:	8033      	strh	r3, [r6, #0]
	data->dig_t2 = sys_le16_to_cpu(buf[1]);
 801578c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015790:	8073      	strh	r3, [r6, #2]
	data->dig_t3 = sys_le16_to_cpu(buf[2]);
 8015792:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015796:	80b3      	strh	r3, [r6, #4]
	data->dig_p1 = sys_le16_to_cpu(buf[3]);
 8015798:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801579c:	80f3      	strh	r3, [r6, #6]
	data->dig_p2 = sys_le16_to_cpu(buf[4]);
 801579e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80157a2:	8133      	strh	r3, [r6, #8]
	data->dig_p3 = sys_le16_to_cpu(buf[5]);
 80157a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80157a8:	8173      	strh	r3, [r6, #10]
	data->dig_p4 = sys_le16_to_cpu(buf[6]);
 80157aa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80157ae:	81b3      	strh	r3, [r6, #12]
	data->dig_p5 = sys_le16_to_cpu(buf[7]);
 80157b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80157b4:	81f3      	strh	r3, [r6, #14]
	data->dig_p6 = sys_le16_to_cpu(buf[8]);
 80157b6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80157ba:	8233      	strh	r3, [r6, #16]
	data->dig_p7 = sys_le16_to_cpu(buf[9]);
 80157bc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80157c0:	8273      	strh	r3, [r6, #18]
	data->dig_p8 = sys_le16_to_cpu(buf[10]);
 80157c2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80157c6:	82b3      	strh	r3, [r6, #20]
	data->dig_p9 = sys_le16_to_cpu(buf[11]);
 80157c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80157cc:	82f3      	strh	r3, [r6, #22]
	if (data->chip_id == BME280_CHIP_ID) {
 80157ce:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80157d2:	2b60      	cmp	r3, #96	; 0x60
 80157d4:	d129      	bne.n	801582a <bme280_chip_init+0x10e>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART1,
 80157d6:	6860      	ldr	r0, [r4, #4]
 80157d8:	2301      	movs	r3, #1
 80157da:	f106 0218 	add.w	r2, r6, #24
 80157de:	21a1      	movs	r1, #161	; 0xa1
 80157e0:	f7ff fe6e 	bl	80154c0 <bme280_reg_read.isra.0>
		if (err < 0) {
 80157e4:	2800      	cmp	r0, #0
 80157e6:	db2b      	blt.n	8015840 <bme280_chip_init+0x124>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART2, hbuf, 7);
 80157e8:	6860      	ldr	r0, [r4, #4]
 80157ea:	2307      	movs	r3, #7
 80157ec:	466a      	mov	r2, sp
 80157ee:	21e1      	movs	r1, #225	; 0xe1
 80157f0:	f7ff fe66 	bl	80154c0 <bme280_reg_read.isra.0>
		if (err < 0) {
 80157f4:	2800      	cmp	r0, #0
 80157f6:	db23      	blt.n	8015840 <bme280_chip_init+0x124>
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
 80157f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80157fc:	8373      	strh	r3, [r6, #26]
		data->dig_h3 = hbuf[2];
 80157fe:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8015802:	7733      	strb	r3, [r6, #28]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
 8015804:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015808:	f89d 1003 	ldrb.w	r1, [sp, #3]
 801580c:	f003 020f 	and.w	r2, r3, #15
 8015810:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8015814:	83f2      	strh	r2, [r6, #30]
		data->dig_h5 = ((hbuf[4] >> 4) & 0x0F) | (hbuf[5] << 4);
 8015816:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801581a:	091b      	lsrs	r3, r3, #4
 801581c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8015820:	8433      	strh	r3, [r6, #32]
		data->dig_h6 = hbuf[6];
 8015822:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015826:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	err = bme280_read_compensation(dev);
	if (err < 0) {
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
 801582a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801582e:	2b60      	cmp	r3, #96	; 0x60
 8015830:	d008      	beq.n	8015844 <bme280_chip_init+0x128>
			LOG_DBG("CTRL_HUM write failed: %d", err);
			return err;
		}
	}

	err = bme280_reg_write(dev, BME280_REG_CTRL_MEAS,
 8015832:	6860      	ldr	r0, [r4, #4]
 8015834:	2257      	movs	r2, #87	; 0x57
 8015836:	21f4      	movs	r1, #244	; 0xf4
 8015838:	f7ff fe3f 	bl	80154ba <bme280_reg_write.isra.0>
			       BME280_CTRL_MEAS_VAL);
	if (err < 0) {
 801583c:	2800      	cmp	r0, #0
 801583e:	da09      	bge.n	8015854 <bme280_chip_init+0x138>
	/* Wait for the sensor to be ready */
	k_sleep(K_MSEC(1));

	LOG_DBG("\"%s\" OK", dev->name);
	return 0;
}
 8015840:	b008      	add	sp, #32
 8015842:	bd70      	pop	{r4, r5, r6, pc}
		err = bme280_reg_write(dev, BME280_REG_CTRL_HUM,
 8015844:	6860      	ldr	r0, [r4, #4]
 8015846:	2205      	movs	r2, #5
 8015848:	21f2      	movs	r1, #242	; 0xf2
 801584a:	f7ff fe36 	bl	80154ba <bme280_reg_write.isra.0>
		if (err < 0) {
 801584e:	2800      	cmp	r0, #0
 8015850:	daef      	bge.n	8015832 <bme280_chip_init+0x116>
 8015852:	e7f5      	b.n	8015840 <bme280_chip_init+0x124>
	err = bme280_reg_write(dev, BME280_REG_CONFIG,
 8015854:	6860      	ldr	r0, [r4, #4]
 8015856:	22a8      	movs	r2, #168	; 0xa8
 8015858:	21f5      	movs	r1, #245	; 0xf5
 801585a:	f7ff fe2e 	bl	80154ba <bme280_reg_write.isra.0>
	if (err < 0) {
 801585e:	2800      	cmp	r0, #0
 8015860:	dbee      	blt.n	8015840 <bme280_chip_init+0x124>
 8015862:	200a      	movs	r0, #10
 8015864:	2100      	movs	r1, #0
 8015866:	f7fa ffbd 	bl	80107e4 <z_impl_k_sleep>
	return 0;
 801586a:	2000      	movs	r0, #0
 801586c:	e7e8      	b.n	8015840 <bme280_chip_init+0x124>
		return -ENOTSUP;
 801586e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8015872:	e7e5      	b.n	8015840 <bme280_chip_init+0x124>

08015874 <bme280_bus_check_i2c>:

#include "bme280.h"

#if BME280_BUS_I2C
static int bme280_bus_check_i2c(const union bme280_bus *bus)
{
 8015874:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
 8015876:	6800      	ldr	r0, [r0, #0]
 8015878:	f001 fc53 	bl	8017122 <z_device_is_ready>
 801587c:	2800      	cmp	r0, #0
}
 801587e:	bf0c      	ite	eq
 8015880:	f06f 0012 	mvneq.w	r0, #18
 8015884:	2000      	movne	r0, #0
 8015886:	bd08      	pop	{r3, pc}

08015888 <bme280_reg_read_i2c>:

static int bme280_reg_read_i2c(const union bme280_bus *bus,
			       uint8_t start, uint8_t *buf, int size)
{
 8015888:	b530      	push	{r4, r5, lr}
 801588a:	b089      	sub	sp, #36	; 0x24
 801588c:	4604      	mov	r4, r0
 801588e:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 8015892:	f10d 0107 	add.w	r1, sp, #7
 8015896:	461d      	mov	r5, r3
 8015898:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 801589a:	2101      	movs	r1, #1
	msg[1].len = num_read;
 801589c:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
 80158a0:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80158a2:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 80158a4:	2100      	movs	r1, #0
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
	return i2c_burst_read(spec->bus, spec->addr,
 80158a6:	6800      	ldr	r0, [r0, #0]
 80158a8:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 80158aa:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80158ae:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80158b2:	6882      	ldr	r2, [r0, #8]
 80158b4:	a902      	add	r1, sp, #8
 80158b6:	6894      	ldr	r4, [r2, #8]
 80158b8:	2202      	movs	r2, #2
 80158ba:	47a0      	blx	r4
	return i2c_burst_read_dt(&bus->i2c, start, buf, size);
}
 80158bc:	b009      	add	sp, #36	; 0x24
 80158be:	bd30      	pop	{r4, r5, pc}

080158c0 <bme280_reg_write_i2c>:

static int bme280_reg_write_i2c(const union bme280_bus *bus,
				uint8_t reg, uint8_t val)
{
 80158c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80158c2:	4603      	mov	r3, r0
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
 80158c4:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
 80158c8:	2202      	movs	r2, #2
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
 80158ca:	6800      	ldr	r0, [r0, #0]
 80158cc:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
 80158ce:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
 80158d2:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 80158d6:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80158d8:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80158dc:	6882      	ldr	r2, [r0, #8]
 80158de:	a901      	add	r1, sp, #4
 80158e0:	6894      	ldr	r4, [r2, #8]
 80158e2:	2201      	movs	r2, #1
 80158e4:	47a0      	blx	r4
	return i2c_reg_write_byte_dt(&bus->i2c, reg, val);
}
 80158e6:	b004      	add	sp, #16
 80158e8:	bd10      	pop	{r4, pc}

080158ea <sht3xd_compute_crc>:
{
 80158ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80158ec:	0a03      	lsrs	r3, r0, #8
 80158ee:	f88d 300c 	strb.w	r3, [sp, #12]
	return crc8(buf, 2, 0x31, 0xFF, false);
 80158f2:	2300      	movs	r3, #0
	dst[1] = val;
 80158f4:	f88d 000d 	strb.w	r0, [sp, #13]
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	2231      	movs	r2, #49	; 0x31
 80158fc:	23ff      	movs	r3, #255	; 0xff
 80158fe:	2102      	movs	r1, #2
 8015900:	a803      	add	r0, sp, #12
 8015902:	f7fc fa98 	bl	8011e36 <crc8>
}
 8015906:	b005      	add	sp, #20
 8015908:	f85d fb04 	ldr.w	pc, [sp], #4

0801590c <sht3xd_sample_fetch>:
{
 801590c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801590e:	b08b      	sub	sp, #44	; 0x2c
	const struct sht3xd_config *config = dev->config;
 8015910:	6843      	ldr	r3, [r0, #4]
	struct sht3xd_data *data = dev->data;
 8015912:	6907      	ldr	r7, [r0, #16]
 8015914:	2400      	movs	r4, #0
	dst[0] = val >> 8;
 8015916:	22e0      	movs	r2, #224	; 0xe0
 8015918:	f88d 2004 	strb.w	r2, [sp, #4]
	msg[1].buf = (uint8_t *)read_buf;
 801591c:	a902      	add	r1, sp, #8
	dst[1] = val;
 801591e:	f88d 4005 	strb.w	r4, [sp, #5]
	return i2c_write_read(spec->bus, spec->addr,
 8015922:	6818      	ldr	r0, [r3, #0]
 8015924:	889b      	ldrh	r3, [r3, #4]
	msg[1].buf = (uint8_t *)read_buf;
 8015926:	9107      	str	r1, [sp, #28]
	msg[0].buf = (uint8_t *)write_buf;
 8015928:	aa01      	add	r2, sp, #4
	msg[1].len = num_read;
 801592a:	2106      	movs	r1, #6
	msg[0].buf = (uint8_t *)write_buf;
 801592c:	9204      	str	r2, [sp, #16]
	msg[1].len = num_read;
 801592e:	9108      	str	r1, [sp, #32]
	msg[0].len = num_write;
 8015930:	2202      	movs	r2, #2
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8015932:	2107      	movs	r1, #7
	msg[0].len = num_write;
 8015934:	9205      	str	r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8015936:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 801593a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 801593e:	6881      	ldr	r1, [r0, #8]
 8015940:	688d      	ldr	r5, [r1, #8]
 8015942:	a904      	add	r1, sp, #16
 8015944:	47a8      	blx	r5
	if (i2c_write_read_dt(&config->bus, tx_buf, sizeof(tx_buf),
 8015946:	42a0      	cmp	r0, r4
 8015948:	da03      	bge.n	8015952 <sht3xd_sample_fetch+0x46>
		return -EIO;
 801594a:	f06f 0004 	mvn.w	r0, #4
}
 801594e:	b00b      	add	sp, #44	; 0x2c
 8015950:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((uint16_t)src[0] << 8) | src[1];
 8015952:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015956:	ba76      	rev16	r6, r6
	if (sht3xd_compute_crc(t_sample) != rx_buf[2]) {
 8015958:	b2b0      	uxth	r0, r6
 801595a:	f7ff ffc6 	bl	80158ea <sht3xd_compute_crc>
 801595e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8015962:	4283      	cmp	r3, r0
 8015964:	d1f1      	bne.n	801594a <sht3xd_sample_fetch+0x3e>
 8015966:	f8bd 500b 	ldrh.w	r5, [sp, #11]
 801596a:	ba6d      	rev16	r5, r5
	if (sht3xd_compute_crc(rh_sample) != rx_buf[5]) {
 801596c:	b2a8      	uxth	r0, r5
 801596e:	f7ff ffbc 	bl	80158ea <sht3xd_compute_crc>
 8015972:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015976:	4283      	cmp	r3, r0
 8015978:	d1e7      	bne.n	801594a <sht3xd_sample_fetch+0x3e>
	data->t_sample = t_sample;
 801597a:	803e      	strh	r6, [r7, #0]
	data->rh_sample = rh_sample;
 801597c:	807d      	strh	r5, [r7, #2]
	return 0;
 801597e:	4620      	mov	r0, r4
 8015980:	e7e5      	b.n	801594e <sht3xd_sample_fetch+0x42>

08015982 <sht3xd_write_command>:
{
 8015982:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct sht3xd_config *config = dev->config;
 8015984:	6843      	ldr	r3, [r0, #4]
	dst[1] = val;
 8015986:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[0] = val >> 8;
 801598a:	0a0a      	lsrs	r2, r1, #8
 801598c:	f88d 2000 	strb.w	r2, [sp]
	msg.len = num_bytes;
 8015990:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
 8015992:	6818      	ldr	r0, [r3, #0]
 8015994:	889b      	ldrh	r3, [r3, #4]
	msg.buf = (uint8_t *)buf;
 8015996:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 801599a:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 801599c:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80159a0:	6882      	ldr	r2, [r0, #8]
 80159a2:	a901      	add	r1, sp, #4
 80159a4:	6894      	ldr	r4, [r2, #8]
 80159a6:	2201      	movs	r2, #1
 80159a8:	47a0      	blx	r4
}
 80159aa:	b004      	add	sp, #16
 80159ac:	bd10      	pop	{r4, pc}

080159ae <spi_context_get_next_buf>:
{
 80159ae:	b570      	push	{r4, r5, r6, lr}
 80159b0:	4605      	mov	r5, r0
	while (*count) {
 80159b2:	6808      	ldr	r0, [r1, #0]
 80159b4:	b908      	cbnz	r0, 80159ba <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 80159b6:	6010      	str	r0, [r2, #0]
	return NULL;
 80159b8:	e007      	b.n	80159ca <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 80159ba:	682c      	ldr	r4, [r5, #0]
 80159bc:	6866      	ldr	r6, [r4, #4]
 80159be:	429e      	cmp	r6, r3
 80159c0:	d304      	bcc.n	80159cc <spi_context_get_next_buf+0x1e>
			return (*current)->buf;
 80159c2:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
 80159c4:	fbb6 f3f3 	udiv	r3, r6, r3
 80159c8:	6013      	str	r3, [r2, #0]
}
 80159ca:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 80159cc:	3408      	adds	r4, #8
		--(*count);
 80159ce:	3801      	subs	r0, #1
		++(*current);
 80159d0:	602c      	str	r4, [r5, #0]
		--(*count);
 80159d2:	6008      	str	r0, [r1, #0]
 80159d4:	e7ed      	b.n	80159b2 <spi_context_get_next_buf+0x4>

080159d6 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 80159d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 80159d8:	ab0b      	add	r3, sp, #44	; 0x2c
 80159da:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 80159dc:	9303      	str	r3, [sp, #12]
 80159de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159e0:	9302      	str	r3, [sp, #8]
 80159e2:	2300      	movs	r3, #0
 80159e4:	e9cd 3300 	strd	r3, r3, [sp]
 80159e8:	2201      	movs	r2, #1
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7ee fe8c 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 80159f0:	b007      	add	sp, #28
 80159f2:	f85d fb04 	ldr.w	pc, [sp], #4

080159f6 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 80159f6:	4603      	mov	r3, r0
 80159f8:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 80159fa:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80159fc:	7919      	ldrb	r1, [r3, #4]
 80159fe:	2301      	movs	r3, #1
 8015a00:	fa03 f101 	lsl.w	r1, r3, r1
 8015a04:	6903      	ldr	r3, [r0, #16]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8015a0a:	bf18      	it	ne
 8015a0c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8015a10:	b112      	cbz	r2, 8015a18 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 8015a12:	6883      	ldr	r3, [r0, #8]
 8015a14:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8015a16:	4718      	bx	r3
 8015a18:	6883      	ldr	r3, [r0, #8]
 8015a1a:	691b      	ldr	r3, [r3, #16]
 8015a1c:	e7fb      	b.n	8015a16 <gpio_pin_set_dt.isra.0+0x20>

08015a1e <_spi_context_cs_control>:
{
 8015a1e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8015a20:	6803      	ldr	r3, [r0, #0]
{
 8015a22:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8015a24:	b1e3      	cbz	r3, 8015a60 <_spi_context_cs_control+0x42>
 8015a26:	6898      	ldr	r0, [r3, #8]
 8015a28:	b1d0      	cbz	r0, 8015a60 <_spi_context_cs_control+0x42>
 8015a2a:	6805      	ldr	r5, [r0, #0]
 8015a2c:	b1c5      	cbz	r5, 8015a60 <_spi_context_cs_control+0x42>
		if (on) {
 8015a2e:	b149      	cbz	r1, 8015a44 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8015a30:	2101      	movs	r1, #1
 8015a32:	f7ff ffe0 	bl	80159f6 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8015a36:	6823      	ldr	r3, [r4, #0]
 8015a38:	689b      	ldr	r3, [r3, #8]
 8015a3a:	6898      	ldr	r0, [r3, #8]
}
 8015a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8015a40:	f7fb b8b4 	b.w	8010bac <z_impl_k_busy_wait>
			if (!force_off &&
 8015a44:	b912      	cbnz	r2, 8015a4c <_spi_context_cs_control+0x2e>
 8015a46:	889b      	ldrh	r3, [r3, #4]
 8015a48:	04db      	lsls	r3, r3, #19
 8015a4a:	d409      	bmi.n	8015a60 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 8015a4c:	6880      	ldr	r0, [r0, #8]
 8015a4e:	f7fb f8ad 	bl	8010bac <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8015a52:	6823      	ldr	r3, [r4, #0]
 8015a54:	2100      	movs	r1, #0
 8015a56:	6898      	ldr	r0, [r3, #8]
}
 8015a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8015a5c:	f7ff bfcb 	b.w	80159f6 <gpio_pin_set_dt.isra.0>
}
 8015a60:	bd38      	pop	{r3, r4, r5, pc}

08015a62 <spi_context_unlock_unconditionally>:
{
 8015a62:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 8015a64:	2201      	movs	r2, #1
 8015a66:	2100      	movs	r1, #0
{
 8015a68:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 8015a6a:	f7ff ffd8 	bl	8015a1e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 8015a6e:	69a3      	ldr	r3, [r4, #24]
 8015a70:	b933      	cbnz	r3, 8015a80 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 8015a72:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8015a74:	f104 0010 	add.w	r0, r4, #16
}
 8015a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a7c:	f7fa ba72 	b.w	800ff64 <z_impl_k_sem_give>
 8015a80:	bd10      	pop	{r4, pc}

08015a82 <spi_stm32_release>:
{
 8015a82:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 8015a84:	6900      	ldr	r0, [r0, #16]
 8015a86:	f7ff ffec 	bl	8015a62 <spi_context_unlock_unconditionally>
}
 8015a8a:	2000      	movs	r0, #0
 8015a8c:	bd08      	pop	{r3, pc}

08015a8e <gpio_pin_configure_dt>:
{
 8015a8e:	b4f0      	push	{r4, r5, r6, r7}
 8015a90:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
 8015a92:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 8015a94:	88d3      	ldrh	r3, [r2, #6]
	return gpio_pin_configure(spec->port,
 8015a96:	7916      	ldrb	r6, [r2, #4]
 8015a98:	430b      	orrs	r3, r1
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8015a9a:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
 8015a9c:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8015a9e:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8015aa0:	d506      	bpl.n	8015ab0 <gpio_pin_configure_dt+0x22>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8015aa2:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8015aa6:	d003      	beq.n	8015ab0 <gpio_pin_configure_dt+0x22>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8015aa8:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8015aaa:	bf48      	it	mi
 8015aac:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8015ab0:	680c      	ldr	r4, [r1, #0]
 8015ab2:	2501      	movs	r5, #1
 8015ab4:	40b5      	lsls	r5, r6
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8015ab6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8015aba:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8015abc:	bf4c      	ite	mi
 8015abe:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8015ac0:	43ac      	bicpl	r4, r5
 8015ac2:	600c      	str	r4, [r1, #0]
	return api->pin_configure(port, pin, flags);
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	4631      	mov	r1, r6
}
 8015ac8:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 8015aca:	4718      	bx	r3

08015acc <gpio_pin_get>:
{
 8015acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
 8015ace:	6905      	ldr	r5, [r0, #16]
{
 8015ad0:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
 8015ad2:	6883      	ldr	r3, [r0, #8]
 8015ad4:	a901      	add	r1, sp, #4
 8015ad6:	685b      	ldr	r3, [r3, #4]
 8015ad8:	4798      	blx	r3
	if (ret == 0) {
 8015ada:	b948      	cbnz	r0, 8015af0 <gpio_pin_get+0x24>
		*value ^= data->invert;
 8015adc:	9b01      	ldr	r3, [sp, #4]
 8015ade:	682a      	ldr	r2, [r5, #0]
 8015ae0:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	fa03 f104 	lsl.w	r1, r3, r4
 8015ae8:	420a      	tst	r2, r1
 8015aea:	bf14      	ite	ne
 8015aec:	4618      	movne	r0, r3
 8015aee:	2000      	moveq	r0, #0
}
 8015af0:	b003      	add	sp, #12
 8015af2:	bd30      	pop	{r4, r5, pc}

08015af4 <spi_context_get_next_buf>:
{
 8015af4:	b570      	push	{r4, r5, r6, lr}
 8015af6:	4605      	mov	r5, r0
	while (*count) {
 8015af8:	6808      	ldr	r0, [r1, #0]
 8015afa:	b908      	cbnz	r0, 8015b00 <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 8015afc:	6010      	str	r0, [r2, #0]
	return NULL;
 8015afe:	e007      	b.n	8015b10 <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 8015b00:	682c      	ldr	r4, [r5, #0]
 8015b02:	6866      	ldr	r6, [r4, #4]
 8015b04:	429e      	cmp	r6, r3
 8015b06:	d304      	bcc.n	8015b12 <spi_context_get_next_buf+0x1e>
			return (*current)->buf;
 8015b08:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
 8015b0a:	fbb6 f3f3 	udiv	r3, r6, r3
 8015b0e:	6013      	str	r3, [r2, #0]
}
 8015b10:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 8015b12:	3408      	adds	r4, #8
		--(*count);
 8015b14:	3801      	subs	r0, #1
		++(*current);
 8015b16:	602c      	str	r4, [r5, #0]
		--(*count);
 8015b18:	6008      	str	r0, [r1, #0]
 8015b1a:	e7ed      	b.n	8015af8 <spi_context_get_next_buf+0x4>

08015b1c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 8015b20:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8015b22:	7919      	ldrb	r1, [r3, #4]
 8015b24:	2301      	movs	r3, #1
 8015b26:	fa03 f101 	lsl.w	r1, r3, r1
 8015b2a:	6903      	ldr	r3, [r0, #16]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	4219      	tst	r1, r3
 8015b30:	d003      	beq.n	8015b3a <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
 8015b32:	b122      	cbz	r2, 8015b3e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
 8015b34:	6883      	ldr	r3, [r0, #8]
 8015b36:	691b      	ldr	r3, [r3, #16]
 8015b38:	e003      	b.n	8015b42 <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
 8015b3a:	2a00      	cmp	r2, #0
 8015b3c:	d0fa      	beq.n	8015b34 <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
 8015b3e:	6883      	ldr	r3, [r0, #8]
 8015b40:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8015b42:	4718      	bx	r3

08015b44 <_spi_context_cs_control>:
{
 8015b44:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8015b46:	6803      	ldr	r3, [r0, #0]
{
 8015b48:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8015b4a:	b1e3      	cbz	r3, 8015b86 <_spi_context_cs_control+0x42>
 8015b4c:	6898      	ldr	r0, [r3, #8]
 8015b4e:	b1d0      	cbz	r0, 8015b86 <_spi_context_cs_control+0x42>
 8015b50:	6805      	ldr	r5, [r0, #0]
 8015b52:	b1c5      	cbz	r5, 8015b86 <_spi_context_cs_control+0x42>
		if (on) {
 8015b54:	b149      	cbz	r1, 8015b6a <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8015b56:	2101      	movs	r1, #1
 8015b58:	f7ff ffe0 	bl	8015b1c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8015b5c:	6823      	ldr	r3, [r4, #0]
 8015b5e:	689b      	ldr	r3, [r3, #8]
 8015b60:	6898      	ldr	r0, [r3, #8]
}
 8015b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8015b66:	f7fb b821 	b.w	8010bac <z_impl_k_busy_wait>
			if (!force_off &&
 8015b6a:	b912      	cbnz	r2, 8015b72 <_spi_context_cs_control+0x2e>
 8015b6c:	889b      	ldrh	r3, [r3, #4]
 8015b6e:	04db      	lsls	r3, r3, #19
 8015b70:	d409      	bmi.n	8015b86 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 8015b72:	6880      	ldr	r0, [r0, #8]
 8015b74:	f7fb f81a 	bl	8010bac <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8015b78:	6823      	ldr	r3, [r4, #0]
 8015b7a:	2100      	movs	r1, #0
 8015b7c:	6898      	ldr	r0, [r3, #8]
}
 8015b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8015b82:	f7ff bfcb 	b.w	8015b1c <gpio_pin_set_dt.isra.0>
}
 8015b86:	bd38      	pop	{r3, r4, r5, pc}

08015b88 <spi_bitbang_release>:
{
 8015b88:	b510      	push	{r4, lr}
	struct spi_bitbang_data *data = dev->data;
 8015b8a:	6904      	ldr	r4, [r0, #16]
	_spi_context_cs_control(ctx, false, true);
 8015b8c:	2201      	movs	r2, #1
 8015b8e:	2100      	movs	r1, #0
 8015b90:	4620      	mov	r0, r4
 8015b92:	f7ff ffd7 	bl	8015b44 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 8015b96:	69a3      	ldr	r3, [r4, #24]
 8015b98:	b923      	cbnz	r3, 8015ba4 <spi_bitbang_release+0x1c>
		ctx->owner = NULL;
 8015b9a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8015b9c:	f104 0010 	add.w	r0, r4, #16
 8015ba0:	f7fa f9e0 	bl	800ff64 <z_impl_k_sem_give>
}
 8015ba4:	2000      	movs	r0, #0
 8015ba6:	bd10      	pop	{r4, pc}

08015ba8 <uart_stm32_err_check>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8015ba8:	6843      	ldr	r3, [r0, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8015bac:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8015bae:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 8015bb0:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8015bb2:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8015bb4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8015bb8:	bf48      	it	mi
 8015bba:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8015bbe:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8015bc0:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8015bc2:	bf48      	it	mi
 8015bc4:	f040 0004 	orrmi.w	r0, r0, #4
 8015bc8:	05d1      	lsls	r1, r2, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8015bca:	bf42      	ittt	mi
 8015bcc:	f44f 7280 	movmi.w	r2, #256	; 0x100
		err |= UART_BREAK;
 8015bd0:	f040 0008 	orrmi.w	r0, r0, #8
 8015bd4:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8015bd6:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8015bd8:	bf44      	itt	mi
 8015bda:	2208      	movmi	r2, #8
 8015bdc:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8015bde:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8015be0:	bf44      	itt	mi
 8015be2:	2201      	movmi	r2, #1
 8015be4:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8015be6:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8015be8:	bf44      	itt	mi
 8015bea:	2202      	movmi	r2, #2
 8015bec:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8015bee:	2204      	movs	r2, #4
 8015bf0:	621a      	str	r2, [r3, #32]
}
 8015bf2:	4770      	bx	lr

08015bf4 <uart_stm32_poll_out>:
{
 8015bf4:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8015bf6:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8015bf8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8015bfa:	69d3      	ldr	r3, [r2, #28]
 8015bfc:	061b      	lsls	r3, r3, #24
 8015bfe:	d5fc      	bpl.n	8015bfa <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 8015c00:	f04f 0210 	mov.w	r2, #16
 8015c04:	f3ef 8311 	mrs	r3, BASEPRI
 8015c08:	f382 8812 	msr	BASEPRI_MAX, r2
 8015c0c:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8015c10:	6802      	ldr	r2, [r0, #0]
 8015c12:	69d4      	ldr	r4, [r2, #28]
 8015c14:	0624      	lsls	r4, r4, #24
 8015c16:	d404      	bmi.n	8015c22 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8015c18:	f383 8811 	msr	BASEPRI, r3
 8015c1c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8015c20:	e7ea      	b.n	8015bf8 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8015c22:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 8015c24:	f383 8811 	msr	BASEPRI, r3
 8015c28:	f3bf 8f6f 	isb	sy
}
 8015c2c:	bd10      	pop	{r4, pc}

08015c2e <uart_stm32_poll_in>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8015c2e:	6843      	ldr	r3, [r0, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8015c32:	69da      	ldr	r2, [r3, #28]
 8015c34:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8015c36:	bf44      	itt	mi
 8015c38:	2208      	movmi	r2, #8
 8015c3a:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8015c3c:	69da      	ldr	r2, [r3, #28]
 8015c3e:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8015c40:	bf43      	ittte	mi
 8015c42:	6a5b      	ldrmi	r3, [r3, #36]	; 0x24
 8015c44:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8015c46:	2000      	movmi	r0, #0
		return -1;
 8015c48:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8015c4c:	4770      	bx	lr

08015c4e <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8015c4e:	6903      	ldr	r3, [r0, #16]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8015c54:	6843      	ldr	r3, [r0, #4]
 8015c56:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8015c58:	6813      	ldr	r3, [r2, #0]
 8015c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8015c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015c62:	d02d      	beq.n	8015cc0 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 8015c64:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8015c68:	4243      	negs	r3, r0
 8015c6a:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8015c6c:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8015c6e:	6853      	ldr	r3, [r2, #4]
 8015c70:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8015c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c78:	d024      	beq.n	8015cc4 <uart_stm32_config_get+0x76>
 8015c7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015c7e:	d023      	beq.n	8015cc8 <uart_stm32_config_get+0x7a>
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	bf14      	ite	ne
 8015c84:	2303      	movne	r3, #3
 8015c86:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8015c88:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8015c8a:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8015c8c:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8015c8e:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 8015c92:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8015c96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015c9a:	d017      	beq.n	8015ccc <uart_stm32_config_get+0x7e>
 8015c9c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8015ca0:	d119      	bne.n	8015cd6 <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	bf0c      	ite	eq
 8015ca6:	2302      	moveq	r3, #2
 8015ca8:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8015caa:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8015cac:	6893      	ldr	r3, [r2, #8]
 8015cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8015cb2:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8015cb6:	4253      	negs	r3, r2
 8015cb8:	4153      	adcs	r3, r2
 8015cba:	71cb      	strb	r3, [r1, #7]
}
 8015cbc:	2000      	movs	r0, #0
 8015cbe:	4770      	bx	lr
	switch (parity) {
 8015cc0:	2302      	movs	r3, #2
 8015cc2:	e7d3      	b.n	8015c6c <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	e7df      	b.n	8015c88 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8015cc8:	2302      	movs	r3, #2
 8015cca:	e7dd      	b.n	8015c88 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	bf14      	ite	ne
 8015cd0:	2303      	movne	r3, #3
 8015cd2:	2304      	moveq	r3, #4
 8015cd4:	e7e9      	b.n	8015caa <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	bf14      	ite	ne
 8015cda:	2302      	movne	r3, #2
 8015cdc:	2303      	moveq	r3, #3
 8015cde:	e7e4      	b.n	8015caa <uart_stm32_config_get+0x5c>

08015ce0 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8015ce0:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8015ce2:	6803      	ldr	r3, [r0, #0]
 8015ce4:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8015ce6:	7903      	ldrb	r3, [r0, #4]
 8015ce8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015cec:	3b01      	subs	r3, #1
 8015cee:	00db      	lsls	r3, r3, #3
 8015cf0:	6805      	ldr	r5, [r0, #0]
 8015cf2:	6814      	ldr	r4, [r2, #0]
 8015cf4:	441d      	add	r5, r3
 8015cf6:	42ac      	cmp	r4, r5
 8015cf8:	d902      	bls.n	8015d00 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 8015cfa:	f06f 0001 	mvn.w	r0, #1
}
 8015cfe:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8015d00:	7965      	ldrb	r5, [r4, #5]
 8015d02:	428d      	cmp	r5, r1
 8015d04:	d002      	beq.n	8015d0c <pinctrl_lookup_state+0x2c>
		(*state)++;
 8015d06:	3408      	adds	r4, #8
 8015d08:	6014      	str	r4, [r2, #0]
 8015d0a:	e7f1      	b.n	8015cf0 <pinctrl_lookup_state+0x10>
			return 0;
 8015d0c:	2000      	movs	r0, #0
 8015d0e:	e7f6      	b.n	8015cfe <pinctrl_lookup_state+0x1e>

08015d10 <ld_dword>:
}
 8015d10:	6800      	ldr	r0, [r0, #0]
 8015d12:	4770      	bx	lr

08015d14 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
 8015d14:	0a0b      	lsrs	r3, r1, #8
 8015d16:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015d18:	7043      	strb	r3, [r0, #1]
 8015d1a:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8015d1c:	0e09      	lsrs	r1, r1, #24
 8015d1e:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8015d20:	70c1      	strb	r1, [r0, #3]
}
 8015d22:	4770      	bx	lr

08015d24 <clst2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8015d24:	6943      	ldr	r3, [r0, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
 8015d26:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8015d28:	3b02      	subs	r3, #2
 8015d2a:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8015d2c:	bf83      	ittte	hi
 8015d2e:	8943      	ldrhhi	r3, [r0, #10]
 8015d30:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
 8015d32:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8015d36:	2000      	movls	r0, #0
}
 8015d38:	4770      	bx	lr

08015d3a <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8015d3a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8015d3e:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8015d40:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8015d42:	7803      	ldrb	r3, [r0, #0]
 8015d44:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015d46:	bf01      	itttt	eq
 8015d48:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8015d4a:	750a      	strbeq	r2, [r1, #20]
 8015d4c:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8015d4e:	754a      	strbeq	r2, [r1, #21]
}
 8015d50:	4770      	bx	lr

08015d52 <validate>:
{
 8015d52:	b538      	push	{r3, r4, r5, lr}
 8015d54:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015d56:	4604      	mov	r4, r0
 8015d58:	b918      	cbnz	r0, 8015d62 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8015d5a:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	602b      	str	r3, [r5, #0]
}
 8015d60:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015d62:	6803      	ldr	r3, [r0, #0]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d0f8      	beq.n	8015d5a <validate+0x8>
 8015d68:	781a      	ldrb	r2, [r3, #0]
 8015d6a:	2a00      	cmp	r2, #0
 8015d6c:	d0f5      	beq.n	8015d5a <validate+0x8>
 8015d6e:	8881      	ldrh	r1, [r0, #4]
 8015d70:	88da      	ldrh	r2, [r3, #6]
 8015d72:	4291      	cmp	r1, r2
 8015d74:	d1f1      	bne.n	8015d5a <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015d76:	7858      	ldrb	r0, [r3, #1]
 8015d78:	f7f9 fc0c 	bl	800f594 <disk_status>
 8015d7c:	f010 0001 	ands.w	r0, r0, #1
 8015d80:	d1eb      	bne.n	8015d5a <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015d82:	6823      	ldr	r3, [r4, #0]
 8015d84:	e7eb      	b.n	8015d5e <validate+0xc>

08015d86 <sync_window>:
{
 8015d86:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8015d88:	78c3      	ldrb	r3, [r0, #3]
{
 8015d8a:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8015d8c:	b913      	cbnz	r3, 8015d94 <sync_window+0xe>
	FRESULT res = FR_OK;
 8015d8e:	2500      	movs	r5, #0
}
 8015d90:	4628      	mov	r0, r5
 8015d92:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8015d94:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8015d98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015d9a:	7840      	ldrb	r0, [r0, #1]
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	4631      	mov	r1, r6
 8015da0:	f7f9 fc1c 	bl	800f5dc <disk_write>
 8015da4:	4605      	mov	r5, r0
 8015da6:	b980      	cbnz	r0, 8015dca <sync_window+0x44>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8015da8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015daa:	6a23      	ldr	r3, [r4, #32]
 8015dac:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
 8015dae:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8015db0:	1acb      	subs	r3, r1, r3
 8015db2:	4293      	cmp	r3, r2
 8015db4:	d2eb      	bcs.n	8015d8e <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8015db6:	78a3      	ldrb	r3, [r4, #2]
 8015db8:	2b02      	cmp	r3, #2
 8015dba:	d1e8      	bne.n	8015d8e <sync_window+0x8>
 8015dbc:	440a      	add	r2, r1
 8015dbe:	7860      	ldrb	r0, [r4, #1]
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	4631      	mov	r1, r6
 8015dc4:	f7f9 fc0a 	bl	800f5dc <disk_write>
 8015dc8:	e7e2      	b.n	8015d90 <sync_window+0xa>
			res = FR_DISK_ERR;
 8015dca:	2501      	movs	r5, #1
 8015dcc:	e7e0      	b.n	8015d90 <sync_window+0xa>

08015dce <move_window>:
{
 8015dce:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8015dd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015dd2:	428b      	cmp	r3, r1
{
 8015dd4:	4605      	mov	r5, r0
 8015dd6:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 8015dd8:	d010      	beq.n	8015dfc <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
 8015dda:	f7ff ffd4 	bl	8015d86 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015dde:	b960      	cbnz	r0, 8015dfa <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8015de0:	4622      	mov	r2, r4
 8015de2:	7868      	ldrb	r0, [r5, #1]
 8015de4:	2301      	movs	r3, #1
 8015de6:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8015dea:	f7f9 fbeb 	bl	800f5c4 <disk_read>
				res = FR_DISK_ERR;
 8015dee:	2800      	cmp	r0, #0
 8015df0:	bf1c      	itt	ne
 8015df2:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8015df6:	2001      	movne	r0, #1
			fs->winsect = sect;
 8015df8:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8015dfa:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8015dfc:	2000      	movs	r0, #0
 8015dfe:	e7fc      	b.n	8015dfa <move_window+0x2c>

08015e00 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015e00:	2901      	cmp	r1, #1
{
 8015e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e06:	4606      	mov	r6, r0
 8015e08:	460c      	mov	r4, r1
 8015e0a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015e0c:	d972      	bls.n	8015ef4 <put_fat+0xf4>
 8015e0e:	6943      	ldr	r3, [r0, #20]
 8015e10:	428b      	cmp	r3, r1
 8015e12:	d96f      	bls.n	8015ef4 <put_fat+0xf4>
		switch (fs->fs_type) {
 8015e14:	7803      	ldrb	r3, [r0, #0]
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d03f      	beq.n	8015e9a <put_fat+0x9a>
 8015e1a:	2b03      	cmp	r3, #3
 8015e1c:	d050      	beq.n	8015ec0 <put_fat+0xc0>
 8015e1e:	2b01      	cmp	r3, #1
 8015e20:	d168      	bne.n	8015ef4 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8015e22:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015e26:	6a01      	ldr	r1, [r0, #32]
 8015e28:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8015e2c:	f7ff ffcf 	bl	8015dce <move_window>
 8015e30:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8015e32:	bb38      	cbnz	r0, 8015e84 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8015e34:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8015e38:	f108 0a01 	add.w	sl, r8, #1
 8015e3c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8015e40:	f014 0401 	ands.w	r4, r4, #1
 8015e44:	bf1f      	itttt	ne
 8015e46:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8015e4a:	f003 020f 	andne.w	r2, r3, #15
 8015e4e:	013b      	lslne	r3, r7, #4
 8015e50:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8015e54:	bf14      	ite	ne
 8015e56:	4313      	orrne	r3, r2
 8015e58:	b2fb      	uxtbeq	r3, r7
 8015e5a:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015e5e:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 8015e60:	2301      	movs	r3, #1
 8015e62:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015e64:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8015e68:	4630      	mov	r0, r6
 8015e6a:	f7ff ffb0 	bl	8015dce <move_window>
			if (res != FR_OK) break;
 8015e6e:	4605      	mov	r5, r0
 8015e70:	b940      	cbnz	r0, 8015e84 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8015e72:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8015e76:	b144      	cbz	r4, 8015e8a <put_fat+0x8a>
 8015e78:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8015e7c:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8015e80:	2301      	movs	r3, #1
 8015e82:	70f3      	strb	r3, [r6, #3]
}
 8015e84:	4628      	mov	r0, r5
 8015e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8015e8a:	f819 300a 	ldrb.w	r3, [r9, sl]
 8015e8e:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8015e92:	f023 030f 	bic.w	r3, r3, #15
 8015e96:	431f      	orrs	r7, r3
 8015e98:	e7f0      	b.n	8015e7c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015e9a:	6a01      	ldr	r1, [r0, #32]
 8015e9c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8015ea0:	f7ff ff95 	bl	8015dce <move_window>
			if (res != FR_OK) break;
 8015ea4:	4605      	mov	r5, r0
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	d1ec      	bne.n	8015e84 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8015eaa:	0064      	lsls	r4, r4, #1
 8015eac:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8015eb0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8015eb4:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8015eb6:	551f      	strb	r7, [r3, r4]
 8015eb8:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8015ebc:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8015ebe:	e7df      	b.n	8015e80 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015ec0:	6a01      	ldr	r1, [r0, #32]
 8015ec2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8015ec6:	f7ff ff82 	bl	8015dce <move_window>
			if (res != FR_OK) break;
 8015eca:	4605      	mov	r5, r0
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d1d9      	bne.n	8015e84 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015ed0:	00a4      	lsls	r4, r4, #2
 8015ed2:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8015ed6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8015eda:	441c      	add	r4, r3
 8015edc:	4620      	mov	r0, r4
 8015ede:	f7ff ff17 	bl	8015d10 <ld_dword>
 8015ee2:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8015ee6:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015eea:	4339      	orrs	r1, r7
 8015eec:	4620      	mov	r0, r4
 8015eee:	f7ff ff11 	bl	8015d14 <st_dword>
 8015ef2:	e7c5      	b.n	8015e80 <put_fat+0x80>
		switch (fs->fs_type) {
 8015ef4:	2502      	movs	r5, #2
 8015ef6:	e7c5      	b.n	8015e84 <put_fat+0x84>

08015ef8 <dir_clear>:
{
 8015ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015efa:	4605      	mov	r5, r0
 8015efc:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015efe:	f7ff ff42 	bl	8015d86 <sync_window>
 8015f02:	4604      	mov	r4, r0
 8015f04:	b9f8      	cbnz	r0, 8015f46 <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8015f06:	4631      	mov	r1, r6
 8015f08:	4628      	mov	r0, r5
 8015f0a:	f7ff ff0b 	bl	8015d24 <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8015f0e:	f105 0730 	add.w	r7, r5, #48	; 0x30
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8015f12:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8015f14:	62e8      	str	r0, [r5, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
 8015f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f1a:	4621      	mov	r1, r4
 8015f1c:	4638      	mov	r0, r7
 8015f1e:	f001 fcae 	bl	801787e <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8015f22:	896b      	ldrh	r3, [r5, #10]
 8015f24:	429c      	cmp	r4, r3
 8015f26:	d304      	bcc.n	8015f32 <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8015f28:	8968      	ldrh	r0, [r5, #10]
 8015f2a:	1b00      	subs	r0, r0, r4
 8015f2c:	bf18      	it	ne
 8015f2e:	2001      	movne	r0, #1
}
 8015f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8015f32:	7868      	ldrb	r0, [r5, #1]
 8015f34:	2301      	movs	r3, #1
 8015f36:	1932      	adds	r2, r6, r4
 8015f38:	4639      	mov	r1, r7
 8015f3a:	f7f9 fb4f 	bl	800f5dc <disk_write>
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	d1f2      	bne.n	8015f28 <dir_clear+0x30>
 8015f42:	3401      	adds	r4, #1
 8015f44:	e7ed      	b.n	8015f22 <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015f46:	2001      	movs	r0, #1
 8015f48:	e7f2      	b.n	8015f30 <dir_clear+0x38>

08015f4a <sync_fs>:
{
 8015f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f4c:	4604      	mov	r4, r0
	res = sync_window(fs);
 8015f4e:	f7ff ff1a 	bl	8015d86 <sync_window>
 8015f52:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8015f54:	2800      	cmp	r0, #0
 8015f56:	d142      	bne.n	8015fde <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8015f58:	7823      	ldrb	r3, [r4, #0]
 8015f5a:	2b03      	cmp	r3, #3
 8015f5c:	d137      	bne.n	8015fce <sync_fs+0x84>
 8015f5e:	7927      	ldrb	r7, [r4, #4]
 8015f60:	2f01      	cmp	r7, #1
 8015f62:	d134      	bne.n	8015fce <sync_fs+0x84>
			memset(fs->win, 0, sizeof fs->win);
 8015f64:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015f68:	4601      	mov	r1, r0
 8015f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f6e:	4630      	mov	r0, r6
 8015f70:	f001 fc85 	bl	801787e <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8015f74:	2355      	movs	r3, #85	; 0x55
 8015f76:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8015f7a:	23aa      	movs	r3, #170	; 0xaa
 8015f7c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8015f80:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8015f82:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8015f84:	2172      	movs	r1, #114	; 0x72
 8015f86:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8015f8a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8015f8e:	2361      	movs	r3, #97	; 0x61
 8015f90:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8015f94:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
 8015f98:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8015f9c:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8015fa0:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 8015fa4:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8015fa8:	6921      	ldr	r1, [r4, #16]
 8015faa:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8015fae:	f7ff feb1 	bl	8015d14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8015fb2:	68e1      	ldr	r1, [r4, #12]
 8015fb4:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8015fb8:	f7ff feac 	bl	8015d14 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8015fbc:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8015fbe:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8015fc0:	3201      	adds	r2, #1
 8015fc2:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8015fc4:	463b      	mov	r3, r7
 8015fc6:	4631      	mov	r1, r6
 8015fc8:	f7f9 fb08 	bl	800f5dc <disk_write>
			fs->fsi_flag = 0;
 8015fcc:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015fce:	2200      	movs	r2, #0
 8015fd0:	7860      	ldrb	r0, [r4, #1]
 8015fd2:	4611      	mov	r1, r2
 8015fd4:	f7f9 fb0e 	bl	800f5f4 <disk_ioctl>
	res = sync_window(fs);
 8015fd8:	3800      	subs	r0, #0
 8015fda:	bf18      	it	ne
 8015fdc:	2001      	movne	r0, #1
}
 8015fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015fe0 <get_fileinfo.part.0.isra.0>:
static void get_fileinfo (
 8015fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	si = di = 0;
 8015fe2:	2300      	movs	r3, #0
static void get_fileinfo (
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	1e45      	subs	r5, r0, #1
	si = di = 0;
 8015fe8:	461c      	mov	r4, r3
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8015fea:	262e      	movs	r6, #46	; 0x2e
		c = (TCHAR)dp->dir[si++];
 8015fec:	f815 0f01 	ldrb.w	r0, [r5, #1]!
		if (c == ' ') continue;		/* Skip padding spaces */
 8015ff0:	2820      	cmp	r0, #32
		c = (TCHAR)dp->dir[si++];
 8015ff2:	f104 0401 	add.w	r4, r4, #1
		if (c == ' ') continue;		/* Skip padding spaces */
 8015ff6:	d00a      	beq.n	801600e <get_fileinfo.part.0.isra.0+0x2e>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8015ff8:	2805      	cmp	r0, #5
 8015ffa:	bf08      	it	eq
 8015ffc:	20e5      	moveq	r0, #229	; 0xe5
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8015ffe:	2c09      	cmp	r4, #9
 8016000:	bf02      	ittt	eq
 8016002:	18cf      	addeq	r7, r1, r3
 8016004:	3301      	addeq	r3, #1
 8016006:	727e      	strbeq	r6, [r7, #9]
		fno->fname[di++] = c;
 8016008:	18cf      	adds	r7, r1, r3
 801600a:	3301      	adds	r3, #1
 801600c:	7278      	strb	r0, [r7, #9]
	while (si < 11) {		/* Copy name body and extension */
 801600e:	2c0b      	cmp	r4, #11
 8016010:	d1ec      	bne.n	8015fec <get_fileinfo.part.0.isra.0+0xc>
	fno->fname[di] = 0;		/* Terminate the SFN */
 8016012:	440b      	add	r3, r1
 8016014:	2000      	movs	r0, #0
 8016016:	7258      	strb	r0, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8016018:	7ad3      	ldrb	r3, [r2, #11]
 801601a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801601e:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8016020:	f102 001c 	add.w	r0, r2, #28
 8016024:	f7ff fe74 	bl	8015d10 <ld_dword>
 8016028:	6008      	str	r0, [r1, #0]
	rv = ptr[1];
 801602a:	8ad3      	ldrh	r3, [r2, #22]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 801602c:	80cb      	strh	r3, [r1, #6]
	rv = ptr[1];
 801602e:	8b13      	ldrh	r3, [r2, #24]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8016030:	808b      	strh	r3, [r1, #4]
}
 8016032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016034 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8016034:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8016036:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016038:	bf04      	itt	eq
 801603a:	8a8a      	ldrheq	r2, [r1, #20]
 801603c:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8016040:	4618      	mov	r0, r3
 8016042:	4770      	bx	lr

08016044 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016044:	2901      	cmp	r1, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8016046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016048:	4606      	mov	r6, r0
 801604a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801604c:	d94e      	bls.n	80160ec <get_fat.isra.0+0xa8>
 801604e:	6943      	ldr	r3, [r0, #20]
 8016050:	4299      	cmp	r1, r3
 8016052:	d24b      	bcs.n	80160ec <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8016054:	7803      	ldrb	r3, [r0, #0]
 8016056:	2b02      	cmp	r3, #2
 8016058:	d029      	beq.n	80160ae <get_fat.isra.0+0x6a>
 801605a:	2b03      	cmp	r3, #3
 801605c:	d034      	beq.n	80160c8 <get_fat.isra.0+0x84>
 801605e:	2b01      	cmp	r3, #1
 8016060:	d144      	bne.n	80160ec <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8016062:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016066:	6a01      	ldr	r1, [r0, #32]
 8016068:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 801606c:	f7ff feaf 	bl	8015dce <move_window>
 8016070:	b110      	cbz	r0, 8016078 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8016076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8016078:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801607a:	6a31      	ldr	r1, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 801607c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8016080:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016082:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8016086:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8016088:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801608c:	f7ff fe9f 	bl	8015dce <move_window>
 8016090:	2800      	cmp	r0, #0
 8016092:	d1ee      	bne.n	8016072 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8016094:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8016098:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 801609a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 801609c:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80160a0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80160a4:	bf4c      	ite	mi
 80160a6:	0900      	lsrmi	r0, r0, #4
 80160a8:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80160ac:	e7e3      	b.n	8016076 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80160ae:	6a01      	ldr	r1, [r0, #32]
 80160b0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80160b4:	f7ff fe8b 	bl	8015dce <move_window>
 80160b8:	2800      	cmp	r0, #0
 80160ba:	d1da      	bne.n	8016072 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80160bc:	0064      	lsls	r4, r4, #1
 80160be:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80160c2:	4426      	add	r6, r4
 80160c4:	8e30      	ldrh	r0, [r6, #48]	; 0x30
			break;
 80160c6:	e7d6      	b.n	8016076 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80160c8:	6a01      	ldr	r1, [r0, #32]
 80160ca:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80160ce:	f7ff fe7e 	bl	8015dce <move_window>
 80160d2:	2800      	cmp	r0, #0
 80160d4:	d1cd      	bne.n	8016072 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80160d6:	00a4      	lsls	r4, r4, #2
 80160d8:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80160dc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80160e0:	4420      	add	r0, r4
 80160e2:	f7ff fe15 	bl	8015d10 <ld_dword>
 80160e6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80160ea:	e7c4      	b.n	8016076 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 80160ec:	2001      	movs	r0, #1
	return val;
 80160ee:	e7c2      	b.n	8016076 <get_fat.isra.0+0x32>

080160f0 <remove_chain.isra.0>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 80160f0:	b570      	push	{r4, r5, r6, lr}
 80160f2:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80160f4:	2c01      	cmp	r4, #1
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 80160f6:	4605      	mov	r5, r0
 80160f8:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80160fa:	d92a      	bls.n	8016152 <remove_chain.isra.0+0x62>
 80160fc:	6943      	ldr	r3, [r0, #20]
 80160fe:	429c      	cmp	r4, r3
 8016100:	d227      	bcs.n	8016152 <remove_chain.isra.0+0x62>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016102:	b122      	cbz	r2, 801610e <remove_chain.isra.0+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016108:	f7ff fe7a 	bl	8015e00 <put_fat>
		if (res != FR_OK) return res;
 801610c:	b938      	cbnz	r0, 801611e <remove_chain.isra.0+0x2e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801610e:	4621      	mov	r1, r4
 8016110:	4628      	mov	r0, r5
 8016112:	f7ff ff97 	bl	8016044 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016116:	4626      	mov	r6, r4
 8016118:	4604      	mov	r4, r0
 801611a:	b908      	cbnz	r0, 8016120 <remove_chain.isra.0+0x30>
	return FR_OK;
 801611c:	2000      	movs	r0, #0
}
 801611e:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016120:	2801      	cmp	r0, #1
 8016122:	d016      	beq.n	8016152 <remove_chain.isra.0+0x62>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016124:	1c43      	adds	r3, r0, #1
 8016126:	d016      	beq.n	8016156 <remove_chain.isra.0+0x66>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016128:	2200      	movs	r2, #0
 801612a:	4631      	mov	r1, r6
 801612c:	4628      	mov	r0, r5
 801612e:	f7ff fe67 	bl	8015e00 <put_fat>
			if (res != FR_OK) return res;
 8016132:	2800      	cmp	r0, #0
 8016134:	d1f3      	bne.n	801611e <remove_chain.isra.0+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016136:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 801613a:	1e91      	subs	r1, r2, #2
 801613c:	428b      	cmp	r3, r1
 801613e:	d205      	bcs.n	801614c <remove_chain.isra.0+0x5c>
			fs->free_clst++;
 8016140:	3301      	adds	r3, #1
 8016142:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8016144:	792b      	ldrb	r3, [r5, #4]
 8016146:	f043 0301 	orr.w	r3, r3, #1
 801614a:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801614c:	4294      	cmp	r4, r2
 801614e:	d3de      	bcc.n	801610e <remove_chain.isra.0+0x1e>
 8016150:	e7e4      	b.n	801611c <remove_chain.isra.0+0x2c>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016152:	2002      	movs	r0, #2
 8016154:	e7e3      	b.n	801611e <remove_chain.isra.0+0x2e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016156:	2001      	movs	r0, #1
 8016158:	e7e1      	b.n	801611e <remove_chain.isra.0+0x2e>

0801615a <create_chain.isra.0>:
static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
 801615a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801615c:	4605      	mov	r5, r0
	if (clst == 0) {	/* Create a new chain */
 801615e:	460f      	mov	r7, r1
 8016160:	b949      	cbnz	r1, 8016176 <create_chain.isra.0+0x1c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8016162:	68c6      	ldr	r6, [r0, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016164:	b1b6      	cbz	r6, 8016194 <create_chain.isra.0+0x3a>
 8016166:	6943      	ldr	r3, [r0, #20]
 8016168:	429e      	cmp	r6, r3
 801616a:	bf28      	it	cs
 801616c:	2601      	movcs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 801616e:	692b      	ldr	r3, [r5, #16]
 8016170:	b993      	cbnz	r3, 8016198 <create_chain.isra.0+0x3e>
 8016172:	2400      	movs	r4, #0
 8016174:	e005      	b.n	8016182 <create_chain.isra.0+0x28>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016176:	f7ff ff65 	bl	8016044 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Test for insanity */
 801617a:	2801      	cmp	r0, #1
 801617c:	4604      	mov	r4, r0
 801617e:	d802      	bhi.n	8016186 <create_chain.isra.0+0x2c>
 8016180:	2401      	movs	r4, #1
}
 8016182:	4620      	mov	r0, r4
 8016184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8016186:	1c42      	adds	r2, r0, #1
 8016188:	d050      	beq.n	801622c <create_chain.isra.0+0xd2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801618a:	696b      	ldr	r3, [r5, #20]
 801618c:	4298      	cmp	r0, r3
 801618e:	d3f8      	bcc.n	8016182 <create_chain.isra.0+0x28>
 8016190:	463e      	mov	r6, r7
 8016192:	e7ec      	b.n	801616e <create_chain.isra.0+0x14>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016194:	2601      	movs	r6, #1
 8016196:	e7ea      	b.n	801616e <create_chain.isra.0+0x14>
		if (scl == clst) {						/* Stretching an existing chain? */
 8016198:	42b7      	cmp	r7, r6
 801619a:	d115      	bne.n	80161c8 <create_chain.isra.0+0x6e>
			if (ncl >= fs->n_fatent) ncl = 2;
 801619c:	696b      	ldr	r3, [r5, #20]
			ncl = scl + 1;						/* Test if next cluster is free */
 801619e:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 80161a0:	429c      	cmp	r4, r3
 80161a2:	bf28      	it	cs
 80161a4:	2402      	movcs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80161a6:	4621      	mov	r1, r4
 80161a8:	4628      	mov	r0, r5
 80161aa:	f7ff ff4b 	bl	8016044 <get_fat.isra.0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80161ae:	2801      	cmp	r0, #1
 80161b0:	d0e6      	beq.n	8016180 <create_chain.isra.0+0x26>
 80161b2:	1c43      	adds	r3, r0, #1
 80161b4:	d03a      	beq.n	801622c <create_chain.isra.0+0xd2>
			if (cs != 0) {						/* Not free? */
 80161b6:	b1d8      	cbz	r0, 80161f0 <create_chain.isra.0+0x96>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80161b8:	68eb      	ldr	r3, [r5, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80161ba:	2b01      	cmp	r3, #1
 80161bc:	d904      	bls.n	80161c8 <create_chain.isra.0+0x6e>
 80161be:	696a      	ldr	r2, [r5, #20]
 80161c0:	4293      	cmp	r3, r2
 80161c2:	bf34      	ite	cc
 80161c4:	461e      	movcc	r6, r3
 80161c6:	463e      	movcs	r6, r7
 80161c8:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80161ca:	696b      	ldr	r3, [r5, #20]
				ncl++;							/* Next cluster */
 80161cc:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80161ce:	429c      	cmp	r4, r3
 80161d0:	d302      	bcc.n	80161d8 <create_chain.isra.0+0x7e>
					if (ncl > scl) return 0;	/* No free cluster found? */
 80161d2:	2e01      	cmp	r6, #1
 80161d4:	d9cd      	bls.n	8016172 <create_chain.isra.0+0x18>
					ncl = 2;
 80161d6:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80161d8:	4621      	mov	r1, r4
 80161da:	4628      	mov	r0, r5
 80161dc:	f7ff ff32 	bl	8016044 <get_fat.isra.0>
				if (cs == 0) break;				/* Found a free cluster? */
 80161e0:	b140      	cbz	r0, 80161f4 <create_chain.isra.0+0x9a>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80161e2:	2801      	cmp	r0, #1
 80161e4:	d0cc      	beq.n	8016180 <create_chain.isra.0+0x26>
 80161e6:	3001      	adds	r0, #1
 80161e8:	d020      	beq.n	801622c <create_chain.isra.0+0xd2>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80161ea:	42a6      	cmp	r6, r4
 80161ec:	d1ed      	bne.n	80161ca <create_chain.isra.0+0x70>
 80161ee:	e7c0      	b.n	8016172 <create_chain.isra.0+0x18>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80161f0:	2c00      	cmp	r4, #0
 80161f2:	d0e9      	beq.n	80161c8 <create_chain.isra.0+0x6e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80161f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80161f8:	4621      	mov	r1, r4
 80161fa:	4628      	mov	r0, r5
 80161fc:	f7ff fe00 	bl	8015e00 <put_fat>
		if (res == FR_OK && clst != 0) {
 8016200:	b990      	cbnz	r0, 8016228 <create_chain.isra.0+0xce>
 8016202:	b957      	cbnz	r7, 801621a <create_chain.isra.0+0xc0>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016204:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8016208:	3a02      	subs	r2, #2
 801620a:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 801620c:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801620e:	d910      	bls.n	8016232 <create_chain.isra.0+0xd8>
		fs->fsi_flag |= 1;
 8016210:	792b      	ldrb	r3, [r5, #4]
 8016212:	f043 0301 	orr.w	r3, r3, #1
 8016216:	712b      	strb	r3, [r5, #4]
 8016218:	e7b3      	b.n	8016182 <create_chain.isra.0+0x28>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 801621a:	4622      	mov	r2, r4
 801621c:	4639      	mov	r1, r7
 801621e:	4628      	mov	r0, r5
 8016220:	f7ff fdee 	bl	8015e00 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016224:	2800      	cmp	r0, #0
 8016226:	d0ed      	beq.n	8016204 <create_chain.isra.0+0xaa>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8016228:	2801      	cmp	r0, #1
 801622a:	d1a9      	bne.n	8016180 <create_chain.isra.0+0x26>
 801622c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016230:	e7a7      	b.n	8016182 <create_chain.isra.0+0x28>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016232:	3b01      	subs	r3, #1
 8016234:	612b      	str	r3, [r5, #16]
 8016236:	e7eb      	b.n	8016210 <create_chain.isra.0+0xb6>

08016238 <dir_sdi.constprop.0>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016238:	6882      	ldr	r2, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 801623a:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 801623c:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 801623e:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8016240:	6103      	str	r3, [r0, #16]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8016242:	4604      	mov	r4, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016244:	b99a      	cbnz	r2, 801626e <dir_sdi.constprop.0+0x36>
 8016246:	782b      	ldrb	r3, [r5, #0]
 8016248:	2b02      	cmp	r3, #2
 801624a:	d901      	bls.n	8016250 <dir_sdi.constprop.0+0x18>
		clst = (DWORD)fs->dirbase;
 801624c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 801624e:	b96b      	cbnz	r3, 801626c <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8016250:	892b      	ldrh	r3, [r5, #8]
 8016252:	b90b      	cbnz	r3, 8016258 <dir_sdi.constprop.0+0x20>
 8016254:	2002      	movs	r0, #2
}
 8016256:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8016258:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801625a:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 801625c:	69a3      	ldr	r3, [r4, #24]
	dp->clust = clst;					/* Current cluster# */
 801625e:	6162      	str	r2, [r4, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8016260:	2b00      	cmp	r3, #0
 8016262:	d0f7      	beq.n	8016254 <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016264:	3530      	adds	r5, #48	; 0x30
 8016266:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 8016268:	2000      	movs	r0, #0
 801626a:	e7f4      	b.n	8016256 <dir_sdi.constprop.0+0x1e>
 801626c:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801626e:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016270:	b963      	cbnz	r3, 801628c <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016272:	4611      	mov	r1, r2
 8016274:	6820      	ldr	r0, [r4, #0]
 8016276:	f7ff fee5 	bl	8016044 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801627a:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801627c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801627e:	d00b      	beq.n	8016298 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016280:	2801      	cmp	r0, #1
 8016282:	d9e7      	bls.n	8016254 <dir_sdi.constprop.0+0x1c>
 8016284:	696b      	ldr	r3, [r5, #20]
 8016286:	4298      	cmp	r0, r3
 8016288:	d3f3      	bcc.n	8016272 <dir_sdi.constprop.0+0x3a>
 801628a:	e7e3      	b.n	8016254 <dir_sdi.constprop.0+0x1c>
		dp->sect = clst2sect(fs, clst);
 801628c:	4611      	mov	r1, r2
 801628e:	4628      	mov	r0, r5
 8016290:	f7ff fd48 	bl	8015d24 <clst2sect>
 8016294:	61a0      	str	r0, [r4, #24]
 8016296:	e7e1      	b.n	801625c <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016298:	2001      	movs	r0, #1
 801629a:	e7dc      	b.n	8016256 <dir_sdi.constprop.0+0x1e>

0801629c <dir_next>:
{
 801629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80162a0:	6907      	ldr	r7, [r0, #16]
	FATFS *fs = dp->obj.fs;
 80162a2:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80162a4:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80162a6:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 80162aa:	bf24      	itt	cs
 80162ac:	2300      	movcs	r3, #0
 80162ae:	6183      	strcs	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80162b0:	6983      	ldr	r3, [r0, #24]
{
 80162b2:	4604      	mov	r4, r0
 80162b4:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80162b6:	b173      	cbz	r3, 80162d6 <dir_next+0x3a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80162b8:	f3c7 0808 	ubfx	r8, r7, #0, #9
 80162bc:	f1b8 0f00 	cmp.w	r8, #0
 80162c0:	d139      	bne.n	8016336 <dir_next+0x9a>
		if (dp->clust == 0) {	/* Static table */
 80162c2:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 80162c4:	3301      	adds	r3, #1
 80162c6:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 80162c8:	b939      	cbnz	r1, 80162da <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80162ca:	8933      	ldrh	r3, [r6, #8]
 80162cc:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80162d0:	d831      	bhi.n	8016336 <dir_next+0x9a>
				dp->sect = 0; return FR_NO_FILE;
 80162d2:	2300      	movs	r3, #0
 80162d4:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80162d6:	2004      	movs	r0, #4
 80162d8:	e00b      	b.n	80162f2 <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80162da:	8973      	ldrh	r3, [r6, #10]
 80162dc:	3b01      	subs	r3, #1
 80162de:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 80162e2:	d128      	bne.n	8016336 <dir_next+0x9a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80162e4:	4630      	mov	r0, r6
 80162e6:	f7ff fead 	bl	8016044 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80162ea:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80162ec:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80162ee:	d802      	bhi.n	80162f6 <dir_next+0x5a>
 80162f0:	2002      	movs	r0, #2
}
 80162f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80162f6:	1c42      	adds	r2, r0, #1
 80162f8:	d101      	bne.n	80162fe <dir_next+0x62>
 80162fa:	2001      	movs	r0, #1
 80162fc:	e7f9      	b.n	80162f2 <dir_next+0x56>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80162fe:	6973      	ldr	r3, [r6, #20]
 8016300:	4283      	cmp	r3, r0
 8016302:	d812      	bhi.n	801632a <dir_next+0x8e>
					if (!stretch) {								/* If no stretch, report EOT */
 8016304:	f1b9 0f00 	cmp.w	r9, #0
 8016308:	d0e3      	beq.n	80162d2 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801630a:	6961      	ldr	r1, [r4, #20]
 801630c:	6820      	ldr	r0, [r4, #0]
 801630e:	f7ff ff24 	bl	801615a <create_chain.isra.0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016312:	4605      	mov	r5, r0
 8016314:	b1a8      	cbz	r0, 8016342 <dir_next+0xa6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016316:	2801      	cmp	r0, #1
 8016318:	d0ea      	beq.n	80162f0 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801631a:	1c43      	adds	r3, r0, #1
 801631c:	d0ed      	beq.n	80162fa <dir_next+0x5e>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 801631e:	4601      	mov	r1, r0
 8016320:	4630      	mov	r0, r6
 8016322:	f7ff fde9 	bl	8015ef8 <dir_clear>
 8016326:	2800      	cmp	r0, #0
 8016328:	d1e7      	bne.n	80162fa <dir_next+0x5e>
				dp->clust = clst;		/* Initialize data for new cluster */
 801632a:	6165      	str	r5, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 801632c:	4629      	mov	r1, r5
 801632e:	4630      	mov	r0, r6
 8016330:	f7ff fcf8 	bl	8015d24 <clst2sect>
 8016334:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016336:	3630      	adds	r6, #48	; 0x30
 8016338:	4446      	add	r6, r8
	dp->dptr = ofs;						/* Current entry */
 801633a:	6127      	str	r7, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801633c:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 801633e:	2000      	movs	r0, #0
 8016340:	e7d7      	b.n	80162f2 <dir_next+0x56>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016342:	2007      	movs	r0, #7
 8016344:	e7d5      	b.n	80162f2 <dir_next+0x56>

08016346 <dir_read.constprop.0>:
static FRESULT dir_read (
 8016346:	b538      	push	{r3, r4, r5, lr}
	FATFS *fs = dp->obj.fs;
 8016348:	6805      	ldr	r5, [r0, #0]
static FRESULT dir_read (
 801634a:	4604      	mov	r4, r0
	FRESULT res = FR_NO_FILE;
 801634c:	2004      	movs	r0, #4
	while (dp->sect) {
 801634e:	69a1      	ldr	r1, [r4, #24]
 8016350:	b909      	cbnz	r1, 8016356 <dir_read.constprop.0+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8016352:	b1a8      	cbz	r0, 8016380 <dir_read.constprop.0+0x3a>
 8016354:	e01c      	b.n	8016390 <dir_read.constprop.0+0x4a>
		res = move_window(fs, dp->sect);
 8016356:	4628      	mov	r0, r5
 8016358:	f7ff fd39 	bl	8015dce <move_window>
		if (res != FR_OK) break;
 801635c:	b9c0      	cbnz	r0, 8016390 <dir_read.constprop.0+0x4a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 801635e:	69e3      	ldr	r3, [r4, #28]
 8016360:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
 8016362:	b1c2      	cbz	r2, 8016396 <dir_read.constprop.0+0x50>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8016364:	7adb      	ldrb	r3, [r3, #11]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8016366:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8016368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801636c:	71a3      	strb	r3, [r4, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801636e:	d009      	beq.n	8016384 <dir_read.constprop.0+0x3e>
 8016370:	2a2e      	cmp	r2, #46	; 0x2e
 8016372:	d007      	beq.n	8016384 <dir_read.constprop.0+0x3e>
 8016374:	2b0f      	cmp	r3, #15
 8016376:	d005      	beq.n	8016384 <dir_read.constprop.0+0x3e>
 8016378:	f023 0320 	bic.w	r3, r3, #32
 801637c:	2b08      	cmp	r3, #8
 801637e:	d001      	beq.n	8016384 <dir_read.constprop.0+0x3e>
		res = move_window(fs, dp->sect);
 8016380:	2000      	movs	r0, #0
}
 8016382:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 8016384:	2100      	movs	r1, #0
 8016386:	4620      	mov	r0, r4
 8016388:	f7ff ff88 	bl	801629c <dir_next>
		if (res != FR_OK) break;
 801638c:	2800      	cmp	r0, #0
 801638e:	d0de      	beq.n	801634e <dir_read.constprop.0+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8016390:	2300      	movs	r3, #0
 8016392:	61a3      	str	r3, [r4, #24]
 8016394:	e7f5      	b.n	8016382 <dir_read.constprop.0+0x3c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8016396:	2004      	movs	r0, #4
 8016398:	e7fa      	b.n	8016390 <dir_read.constprop.0+0x4a>

0801639a <dir_register>:
{
 801639a:	b570      	push	{r4, r5, r6, lr}
	FATFS *fs = dp->obj.fs;
 801639c:	6806      	ldr	r6, [r0, #0]
{
 801639e:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 80163a0:	f7ff ff4a 	bl	8016238 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 80163a4:	4604      	mov	r4, r0
 80163a6:	bb50      	cbnz	r0, 80163fe <dir_register+0x64>
			res = move_window(fs, dp->sect);
 80163a8:	69a9      	ldr	r1, [r5, #24]
 80163aa:	4630      	mov	r0, r6
 80163ac:	f7ff fd0f 	bl	8015dce <move_window>
			if (res != FR_OK) break;
 80163b0:	4604      	mov	r4, r0
 80163b2:	bb20      	cbnz	r0, 80163fe <dir_register+0x64>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 80163b4:	69eb      	ldr	r3, [r5, #28]
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	2be5      	cmp	r3, #229	; 0xe5
 80163ba:	d107      	bne.n	80163cc <dir_register+0x32>
		res = move_window(fs, dp->sect);
 80163bc:	69a9      	ldr	r1, [r5, #24]
 80163be:	4630      	mov	r0, r6
 80163c0:	f7ff fd05 	bl	8015dce <move_window>
		if (res == FR_OK) {
 80163c4:	4604      	mov	r4, r0
 80163c6:	b140      	cbz	r0, 80163da <dir_register+0x40>
}
 80163c8:	4620      	mov	r0, r4
 80163ca:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d0f5      	beq.n	80163bc <dir_register+0x22>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 80163d0:	2101      	movs	r1, #1
 80163d2:	4628      	mov	r0, r5
 80163d4:	f7ff ff62 	bl	801629c <dir_next>
 80163d8:	e7e4      	b.n	80163a4 <dir_register+0xa>
 80163da:	4601      	mov	r1, r0
 80163dc:	2220      	movs	r2, #32
 80163de:	69e8      	ldr	r0, [r5, #28]
 80163e0:	f001 fa4d 	bl	801787e <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80163e4:	3520      	adds	r5, #32
 80163e6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80163ea:	cd03      	ldmia	r5!, {r0, r1}
 80163ec:	6018      	str	r0, [r3, #0]
 80163ee:	6059      	str	r1, [r3, #4]
 80163f0:	8829      	ldrh	r1, [r5, #0]
 80163f2:	78aa      	ldrb	r2, [r5, #2]
 80163f4:	729a      	strb	r2, [r3, #10]
 80163f6:	8119      	strh	r1, [r3, #8]
			fs->wflag = 1;
 80163f8:	2301      	movs	r3, #1
 80163fa:	70f3      	strb	r3, [r6, #3]
 80163fc:	e7e4      	b.n	80163c8 <dir_register+0x2e>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80163fe:	2c04      	cmp	r4, #4
 8016400:	bf08      	it	eq
 8016402:	2407      	moveq	r4, #7
 8016404:	e7e0      	b.n	80163c8 <dir_register+0x2e>

08016406 <f_open>:
{
 8016406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801640a:	b08e      	sub	sp, #56	; 0x38
 801640c:	4617      	mov	r7, r2
 801640e:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8016410:	4605      	mov	r5, r0
 8016412:	2800      	cmp	r0, #0
 8016414:	f000 80c8 	beq.w	80165a8 <f_open+0x1a2>
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8016418:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 801641c:	4632      	mov	r2, r6
 801641e:	a902      	add	r1, sp, #8
 8016420:	a801      	add	r0, sp, #4
 8016422:	f7f8 fb2f 	bl	800ea84 <mount_volume>
	if (res == FR_OK) {
 8016426:	2800      	cmp	r0, #0
 8016428:	f040 80b6 	bne.w	8016598 <f_open+0x192>
		dj.obj.fs = fs;
 801642c:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 801642e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8016430:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8016432:	a803      	add	r0, sp, #12
 8016434:	f7f8 fc48 	bl	800ecc8 <follow_path>
		if (res == FR_OK) {
 8016438:	4604      	mov	r4, r0
 801643a:	b920      	cbnz	r0, 8016446 <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801643c:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
				res = FR_INVALID_NAME;
 8016440:	2b00      	cmp	r3, #0
 8016442:	bfb8      	it	lt
 8016444:	2406      	movlt	r4, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016446:	f017 0f1c 	tst.w	r7, #28
 801644a:	d072      	beq.n	8016532 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 801644c:	2c00      	cmp	r4, #0
 801644e:	d043      	beq.n	80164d8 <f_open+0xd2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016450:	2c04      	cmp	r4, #4
 8016452:	d13e      	bne.n	80164d2 <f_open+0xcc>
					res = dir_register(&dj);
 8016454:	a803      	add	r0, sp, #12
 8016456:	f7ff ffa0 	bl	801639a <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 801645a:	4604      	mov	r4, r0
 801645c:	2800      	cmp	r0, #0
 801645e:	d138      	bne.n	80164d2 <f_open+0xcc>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016460:	f046 0608 	orr.w	r6, r6, #8
					st_dword(dj.dir + DIR_CrtTime, tm);
 8016464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8016466:	f8dd 8008 	ldr.w	r8, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801646a:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val;
 801646c:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 801646e:	2121      	movs	r1, #33	; 0x21
	*ptr++ = (BYTE)val;
 8016470:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8016472:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8016474:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8016476:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
 8016478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val;
 801647a:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 801647c:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 801647e:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8016480:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8016482:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016484:	f898 0000 	ldrb.w	r0, [r8]
 8016488:	f7ff fdd4 	bl	8016034 <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801648c:	2320      	movs	r3, #32
 801648e:	72cb      	strb	r3, [r1, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016490:	4622      	mov	r2, r4
 8016492:	990a      	ldr	r1, [sp, #40]	; 0x28
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8016494:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016496:	4640      	mov	r0, r8
 8016498:	f7ff fc4f 	bl	8015d3a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801649c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 801649e:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80164a0:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80164a2:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 80164a4:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
 80164a6:	9b02      	ldr	r3, [sp, #8]
 80164a8:	2201      	movs	r2, #1
 80164aa:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80164ac:	b1ef      	cbz	r7, 80164ea <f_open+0xe4>
						res = remove_chain(&dj.obj, cl, 0);
 80164ae:	4622      	mov	r2, r4
 80164b0:	9803      	ldr	r0, [sp, #12]
						sc = fs->winsect;
 80164b2:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80164b6:	4639      	mov	r1, r7
 80164b8:	f7ff fe1a 	bl	80160f0 <remove_chain.isra.0>
						if (res == FR_OK) {
 80164bc:	4604      	mov	r4, r0
 80164be:	b940      	cbnz	r0, 80164d2 <f_open+0xcc>
							res = move_window(fs, sc);
 80164c0:	9802      	ldr	r0, [sp, #8]
 80164c2:	4641      	mov	r1, r8
 80164c4:	f7ff fc83 	bl	8015dce <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80164c8:	9b02      	ldr	r3, [sp, #8]
 80164ca:	3f01      	subs	r7, #1
 80164cc:	60df      	str	r7, [r3, #12]
		if (res == FR_OK) {
 80164ce:	4604      	mov	r4, r0
 80164d0:	b158      	cbz	r0, 80164ea <f_open+0xe4>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80164d2:	2300      	movs	r3, #0
 80164d4:	602b      	str	r3, [r5, #0]
 80164d6:	e028      	b.n	801652a <f_open+0x124>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80164d8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80164dc:	f013 0f11 	tst.w	r3, #17
 80164e0:	d131      	bne.n	8016546 <f_open+0x140>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80164e2:	0778      	lsls	r0, r7, #29
 80164e4:	d45a      	bmi.n	801659c <f_open+0x196>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80164e6:	0739      	lsls	r1, r7, #28
 80164e8:	d4bc      	bmi.n	8016464 <f_open+0x5e>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80164ea:	9c02      	ldr	r4, [sp, #8]
			fp->dir_ptr = dj.dir;
 80164ec:	990a      	ldr	r1, [sp, #40]	; 0x28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80164ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80164f0:	622b      	str	r3, [r5, #32]
			fp->dir_ptr = dj.dir;
 80164f2:	6269      	str	r1, [r5, #36]	; 0x24
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80164f4:	0730      	lsls	r0, r6, #28
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80164f6:	7820      	ldrb	r0, [r4, #0]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80164f8:	bf48      	it	mi
 80164fa:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80164fe:	f7ff fd99 	bl	8016034 <ld_clust.isra.0>
 8016502:	60a8      	str	r0, [r5, #8]
 8016504:	4603      	mov	r3, r0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016506:	f101 001c 	add.w	r0, r1, #28
 801650a:	f7ff fc01 	bl	8015d10 <ld_dword>
			fp->obj.id = fs->id;
 801650e:	88e2      	ldrh	r2, [r4, #6]
 8016510:	80aa      	strh	r2, [r5, #4]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016512:	06b1      	lsls	r1, r6, #26
			fp->err = 0;		/* Clear error flag */
 8016514:	f04f 0200 	mov.w	r2, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016518:	4607      	mov	r7, r0
 801651a:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	/* Validate the file object */
 801651c:	602c      	str	r4, [r5, #0]
			fp->flag = mode;	/* Set file access mode */
 801651e:	742e      	strb	r6, [r5, #16]
			fp->err = 0;		/* Clear error flag */
 8016520:	746a      	strb	r2, [r5, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8016522:	61ea      	str	r2, [r5, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8016524:	616a      	str	r2, [r5, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016526:	d410      	bmi.n	801654a <f_open+0x144>
						res = FR_INT_ERR;
 8016528:	2400      	movs	r4, #0
}
 801652a:	4620      	mov	r0, r4
 801652c:	b00e      	add	sp, #56	; 0x38
 801652e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (res == FR_OK) {					/* Is the object exsiting? */
 8016532:	2c00      	cmp	r4, #0
 8016534:	d1cd      	bne.n	80164d2 <f_open+0xcc>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8016536:	f89d 3012 	ldrb.w	r3, [sp, #18]
 801653a:	06da      	lsls	r2, r3, #27
 801653c:	d430      	bmi.n	80165a0 <f_open+0x19a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 801653e:	07bf      	lsls	r7, r7, #30
 8016540:	d5d3      	bpl.n	80164ea <f_open+0xe4>
 8016542:	07dc      	lsls	r4, r3, #31
 8016544:	d5d1      	bpl.n	80164ea <f_open+0xe4>
					res = FR_DENIED;
 8016546:	2407      	movs	r4, #7
 8016548:	e7c3      	b.n	80164d2 <f_open+0xcc>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801654a:	2800      	cmp	r0, #0
 801654c:	d0ec      	beq.n	8016528 <f_open+0x122>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801654e:	8964      	ldrh	r4, [r4, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016550:	6168      	str	r0, [r5, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016552:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016554:	42bc      	cmp	r4, r7
 8016556:	d310      	bcc.n	801657a <f_open+0x174>
 8016558:	2400      	movs	r4, #0
				fp->clust = clst;
 801655a:	61ab      	str	r3, [r5, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801655c:	2c00      	cmp	r4, #0
 801655e:	d1b8      	bne.n	80164d2 <f_open+0xcc>
 8016560:	f3c7 0208 	ubfx	r2, r7, #0, #9
 8016564:	2a00      	cmp	r2, #0
 8016566:	d0df      	beq.n	8016528 <f_open+0x122>
					sc = clst2sect(fs, clst);
 8016568:	9802      	ldr	r0, [sp, #8]
 801656a:	4619      	mov	r1, r3
 801656c:	f7ff fbda 	bl	8015d24 <clst2sect>
					if (sc == 0) {
 8016570:	b1c0      	cbz	r0, 80165a4 <f_open+0x19e>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016572:	eb00 2057 	add.w	r0, r0, r7, lsr #9
 8016576:	61e8      	str	r0, [r5, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016578:	e7d7      	b.n	801652a <f_open+0x124>
					clst = get_fat(&fp->obj, clst);
 801657a:	4619      	mov	r1, r3
 801657c:	6828      	ldr	r0, [r5, #0]
 801657e:	f7ff fd61 	bl	8016044 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8016582:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8016584:	4603      	mov	r3, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016586:	eba7 0704 	sub.w	r7, r7, r4
					if (clst <= 1) res = FR_INT_ERR;
 801658a:	d903      	bls.n	8016594 <f_open+0x18e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801658c:	1c42      	adds	r2, r0, #1
 801658e:	d1e1      	bne.n	8016554 <f_open+0x14e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016590:	2401      	movs	r4, #1
 8016592:	e7e2      	b.n	801655a <f_open+0x154>
					if (clst <= 1) res = FR_INT_ERR;
 8016594:	2402      	movs	r4, #2
 8016596:	e7e0      	b.n	801655a <f_open+0x154>
 8016598:	4604      	mov	r4, r0
 801659a:	e79a      	b.n	80164d2 <f_open+0xcc>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801659c:	2408      	movs	r4, #8
 801659e:	e798      	b.n	80164d2 <f_open+0xcc>
					res = FR_NO_FILE;
 80165a0:	2404      	movs	r4, #4
 80165a2:	e796      	b.n	80164d2 <f_open+0xcc>
						res = FR_INT_ERR;
 80165a4:	2402      	movs	r4, #2
 80165a6:	e794      	b.n	80164d2 <f_open+0xcc>
	if (!fp) return FR_INVALID_OBJECT;
 80165a8:	2409      	movs	r4, #9
 80165aa:	e7be      	b.n	801652a <f_open+0x124>

080165ac <f_read>:
{
 80165ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b0:	4699      	mov	r9, r3
 80165b2:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80165b4:	2300      	movs	r3, #0
{
 80165b6:	4688      	mov	r8, r1
	*br = 0;	/* Clear read byte counter */
 80165b8:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80165bc:	a903      	add	r1, sp, #12
{
 80165be:	4604      	mov	r4, r0
 80165c0:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80165c2:	f7ff fbc6 	bl	8015d52 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80165c6:	4606      	mov	r6, r0
 80165c8:	b9f8      	cbnz	r0, 801660a <f_read+0x5e>
 80165ca:	7c66      	ldrb	r6, [r4, #17]
 80165cc:	b9ee      	cbnz	r6, 801660a <f_read+0x5e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80165ce:	f894 a010 	ldrb.w	sl, [r4, #16]
 80165d2:	f01a 0301 	ands.w	r3, sl, #1
 80165d6:	9300      	str	r3, [sp, #0]
 80165d8:	d07c      	beq.n	80166d4 <f_read+0x128>
	remain = fp->obj.objsize - fp->fptr;
 80165da:	68e7      	ldr	r7, [r4, #12]
 80165dc:	6962      	ldr	r2, [r4, #20]
 80165de:	1abf      	subs	r7, r7, r2
 80165e0:	42af      	cmp	r7, r5
 80165e2:	bf28      	it	cs
 80165e4:	462f      	movcs	r7, r5
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 80165e6:	b187      	cbz	r7, 801660a <f_read+0x5e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80165e8:	6962      	ldr	r2, [r4, #20]
 80165ea:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d157      	bne.n	80166a2 <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80165f2:	9b03      	ldr	r3, [sp, #12]
 80165f4:	895b      	ldrh	r3, [r3, #10]
 80165f6:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80165f8:	ea13 2a52 	ands.w	sl, r3, r2, lsr #9
 80165fc:	d115      	bne.n	801662a <f_read+0x7e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80165fe:	b942      	cbnz	r2, 8016612 <f_read+0x66>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016600:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8016602:	2801      	cmp	r0, #1
 8016604:	d80a      	bhi.n	801661c <f_read+0x70>
 8016606:	2602      	movs	r6, #2
 8016608:	7466      	strb	r6, [r4, #17]
}
 801660a:	4630      	mov	r0, r6
 801660c:	b005      	add	sp, #20
 801660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8016612:	69a1      	ldr	r1, [r4, #24]
 8016614:	6820      	ldr	r0, [r4, #0]
 8016616:	f7ff fd15 	bl	8016044 <get_fat.isra.0>
 801661a:	e7f2      	b.n	8016602 <f_read+0x56>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801661c:	1c43      	adds	r3, r0, #1
 801661e:	d103      	bne.n	8016628 <f_read+0x7c>
 8016620:	2301      	movs	r3, #1
 8016622:	9e00      	ldr	r6, [sp, #0]
 8016624:	7463      	strb	r3, [r4, #17]
 8016626:	e7f0      	b.n	801660a <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 8016628:	61a0      	str	r0, [r4, #24]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 801662a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801662e:	69a1      	ldr	r1, [r4, #24]
 8016630:	4658      	mov	r0, fp
 8016632:	f7ff fb77 	bl	8015d24 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8016636:	2800      	cmp	r0, #0
 8016638:	d0e5      	beq.n	8016606 <f_read+0x5a>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 801663a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 801663e:	eb0a 0200 	add.w	r2, sl, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8016642:	d32d      	bcc.n	80166a0 <f_read+0xf4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016644:	f8bb 100a 	ldrh.w	r1, [fp, #10]
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016648:	9201      	str	r2, [sp, #4]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801664a:	eb0a 2057 	add.w	r0, sl, r7, lsr #9
 801664e:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8016650:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fs->csize - csect;
 8016654:	bf88      	it	hi
 8016656:	eba1 050a 	subhi.w	r5, r1, sl
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801665a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801665e:	462b      	mov	r3, r5
 8016660:	4641      	mov	r1, r8
 8016662:	f7f8 ffaf 	bl	800f5c4 <disk_read>
 8016666:	2800      	cmp	r0, #0
 8016668:	d1da      	bne.n	8016620 <f_read+0x74>
				if (fs->wflag && fs->winsect - sect < cc) {
 801666a:	9903      	ldr	r1, [sp, #12]
 801666c:	78cb      	ldrb	r3, [r1, #3]
 801666e:	b15b      	cbz	r3, 8016688 <f_read+0xdc>
 8016670:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8016672:	9a01      	ldr	r2, [sp, #4]
 8016674:	1a80      	subs	r0, r0, r2
 8016676:	42a8      	cmp	r0, r5
 8016678:	d206      	bcs.n	8016688 <f_read+0xdc>
 801667a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801667e:	3130      	adds	r1, #48	; 0x30
 8016680:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 8016684:	f001 f8d3 	bl	801782e <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8016688:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 801668a:	f8d9 3000 	ldr.w	r3, [r9]
 801668e:	442b      	add	r3, r5
 8016690:	f8c9 3000 	str.w	r3, [r9]
 8016694:	6963      	ldr	r3, [r4, #20]
 8016696:	442b      	add	r3, r5
 8016698:	1b7f      	subs	r7, r7, r5
 801669a:	44a8      	add	r8, r5
 801669c:	6163      	str	r3, [r4, #20]
 801669e:	e7a2      	b.n	80165e6 <f_read+0x3a>
			fp->sect = sect;
 80166a0:	61e2      	str	r2, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80166a2:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80166a4:	69e1      	ldr	r1, [r4, #28]
 80166a6:	9803      	ldr	r0, [sp, #12]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80166a8:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80166ac:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80166b0:	42bd      	cmp	r5, r7
 80166b2:	bf28      	it	cs
 80166b4:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80166b6:	f7ff fb8a 	bl	8015dce <move_window>
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d1b0      	bne.n	8016620 <f_read+0x74>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80166be:	9903      	ldr	r1, [sp, #12]
 80166c0:	6963      	ldr	r3, [r4, #20]
 80166c2:	3130      	adds	r1, #48	; 0x30
 80166c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80166c8:	462a      	mov	r2, r5
 80166ca:	4419      	add	r1, r3
 80166cc:	4640      	mov	r0, r8
 80166ce:	f001 f8ae 	bl	801782e <memcpy>
 80166d2:	e7da      	b.n	801668a <f_read+0xde>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80166d4:	2607      	movs	r6, #7
 80166d6:	e798      	b.n	801660a <f_read+0x5e>

080166d8 <f_write>:
{
 80166d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166dc:	469a      	mov	sl, r3
 80166de:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 80166e0:	2300      	movs	r3, #0
{
 80166e2:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 80166e4:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80166e8:	a903      	add	r1, sp, #12
{
 80166ea:	4604      	mov	r4, r0
 80166ec:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80166ee:	f7ff fb30 	bl	8015d52 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80166f2:	4606      	mov	r6, r0
 80166f4:	bb20      	cbnz	r0, 8016740 <f_write+0x68>
 80166f6:	7c66      	ldrb	r6, [r4, #17]
 80166f8:	bb16      	cbnz	r6, 8016740 <f_write+0x68>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80166fa:	7c23      	ldrb	r3, [r4, #16]
 80166fc:	079a      	lsls	r2, r3, #30
 80166fe:	f140 80a9 	bpl.w	8016854 <f_write+0x17c>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016702:	6963      	ldr	r3, [r4, #20]
 8016704:	42fb      	cmn	r3, r7
 8016706:	d300      	bcc.n	801670a <f_write+0x32>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016708:	43df      	mvns	r7, r3
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 801670a:	b1af      	cbz	r7, 8016738 <f_write+0x60>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801670c:	6963      	ldr	r3, [r4, #20]
 801670e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016712:	2a00      	cmp	r2, #0
 8016714:	f040 8081 	bne.w	801681a <f_write+0x142>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016718:	9a03      	ldr	r2, [sp, #12]
 801671a:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 801671e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8016722:	ea18 2853 	ands.w	r8, r8, r3, lsr #9
 8016726:	d11e      	bne.n	8016766 <f_write+0x8e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016728:	b973      	cbnz	r3, 8016748 <f_write+0x70>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801672a:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 801672c:	b971      	cbnz	r1, 801674c <f_write+0x74>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801672e:	6820      	ldr	r0, [r4, #0]
 8016730:	f7ff fd13 	bl	801615a <create_chain.isra.0>
 8016734:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016736:	b948      	cbnz	r0, 801674c <f_write+0x74>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016738:	7c23      	ldrb	r3, [r4, #16]
 801673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801673e:	7423      	strb	r3, [r4, #16]
}
 8016740:	4630      	mov	r0, r6
 8016742:	b005      	add	sp, #20
 8016744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016748:	69a1      	ldr	r1, [r4, #24]
 801674a:	e7f0      	b.n	801672e <f_write+0x56>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801674c:	2901      	cmp	r1, #1
 801674e:	d102      	bne.n	8016756 <f_write+0x7e>
 8016750:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016752:	7466      	strb	r6, [r4, #17]
 8016754:	e7f4      	b.n	8016740 <f_write+0x68>
 8016756:	1c4b      	adds	r3, r1, #1
 8016758:	d101      	bne.n	801675e <f_write+0x86>
 801675a:	2601      	movs	r6, #1
 801675c:	e7f9      	b.n	8016752 <f_write+0x7a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801675e:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8016760:	61a1      	str	r1, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016762:	b903      	cbnz	r3, 8016766 <f_write+0x8e>
 8016764:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8016766:	9803      	ldr	r0, [sp, #12]
 8016768:	69e3      	ldr	r3, [r4, #28]
 801676a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801676c:	429a      	cmp	r2, r3
 801676e:	d103      	bne.n	8016778 <f_write+0xa0>
 8016770:	f7ff fb09 	bl	8015d86 <sync_window>
 8016774:	2800      	cmp	r0, #0
 8016776:	d1f0      	bne.n	801675a <f_write+0x82>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8016778:	9d03      	ldr	r5, [sp, #12]
 801677a:	69a1      	ldr	r1, [r4, #24]
 801677c:	4628      	mov	r0, r5
 801677e:	f7ff fad1 	bl	8015d24 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8016782:	2800      	cmp	r0, #0
 8016784:	d0e4      	beq.n	8016750 <f_write+0x78>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8016786:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 801678a:	eb08 0b00 	add.w	fp, r8, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 801678e:	d336      	bcc.n	80167fe <f_write+0x126>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016790:	8969      	ldrh	r1, [r5, #10]
 8016792:	eb08 2057 	add.w	r0, r8, r7, lsr #9
 8016796:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016798:	ea4f 2357 	mov.w	r3, r7, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801679c:	7868      	ldrb	r0, [r5, #1]
					cc = fs->csize - csect;
 801679e:	bf88      	it	hi
 80167a0:	eba1 0308 	subhi.w	r3, r1, r8
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80167a4:	465a      	mov	r2, fp
 80167a6:	4649      	mov	r1, r9
 80167a8:	9301      	str	r3, [sp, #4]
 80167aa:	f7f8 ff17 	bl	800f5dc <disk_write>
 80167ae:	4605      	mov	r5, r0
 80167b0:	2800      	cmp	r0, #0
 80167b2:	d1d2      	bne.n	801675a <f_write+0x82>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 80167b4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80167b8:	9b01      	ldr	r3, [sp, #4]
 80167ba:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80167be:	eba1 010b 	sub.w	r1, r1, fp
 80167c2:	4299      	cmp	r1, r3
 80167c4:	d20a      	bcs.n	80167dc <f_write+0x104>
 80167c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80167ca:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80167ce:	f108 0030 	add.w	r0, r8, #48	; 0x30
 80167d2:	f001 f82c 	bl	801782e <memcpy>
					fs->wflag = 0;
 80167d6:	9b01      	ldr	r3, [sp, #4]
 80167d8:	f888 5003 	strb.w	r5, [r8, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80167dc:	025d      	lsls	r5, r3, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80167de:	f8da 3000 	ldr.w	r3, [sl]
 80167e2:	442b      	add	r3, r5
 80167e4:	f8ca 3000 	str.w	r3, [sl]
 80167e8:	6962      	ldr	r2, [r4, #20]
 80167ea:	68e3      	ldr	r3, [r4, #12]
 80167ec:	1b7f      	subs	r7, r7, r5
 80167ee:	44a9      	add	r9, r5
 80167f0:	4415      	add	r5, r2
 80167f2:	6165      	str	r5, [r4, #20]
 80167f4:	42ab      	cmp	r3, r5
 80167f6:	bf2c      	ite	cs
 80167f8:	60e3      	strcs	r3, [r4, #12]
 80167fa:	60e5      	strcc	r5, [r4, #12]
 80167fc:	e785      	b.n	801670a <f_write+0x32>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 80167fe:	6961      	ldr	r1, [r4, #20]
 8016800:	68e3      	ldr	r3, [r4, #12]
 8016802:	4299      	cmp	r1, r3
 8016804:	d307      	bcc.n	8016816 <f_write+0x13e>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 8016806:	4628      	mov	r0, r5
 8016808:	f7ff fabd 	bl	8015d86 <sync_window>
 801680c:	2800      	cmp	r0, #0
 801680e:	d1a4      	bne.n	801675a <f_write+0x82>
				fs->winsect = sect;
 8016810:	9b03      	ldr	r3, [sp, #12]
 8016812:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
			fp->sect = sect;
 8016816:	f8c4 b01c 	str.w	fp, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 801681a:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 801681c:	69e1      	ldr	r1, [r4, #28]
 801681e:	9803      	ldr	r0, [sp, #12]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8016820:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8016824:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016828:	42bd      	cmp	r5, r7
 801682a:	bf28      	it	cs
 801682c:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 801682e:	f7ff face 	bl	8015dce <move_window>
 8016832:	2800      	cmp	r0, #0
 8016834:	d191      	bne.n	801675a <f_write+0x82>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016836:	9803      	ldr	r0, [sp, #12]
 8016838:	6963      	ldr	r3, [r4, #20]
 801683a:	3030      	adds	r0, #48	; 0x30
 801683c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016840:	462a      	mov	r2, r5
 8016842:	4418      	add	r0, r3
 8016844:	4649      	mov	r1, r9
 8016846:	f000 fff2 	bl	801782e <memcpy>
		fs->wflag = 1;
 801684a:	9b03      	ldr	r3, [sp, #12]
 801684c:	f04f 0201 	mov.w	r2, #1
 8016850:	70da      	strb	r2, [r3, #3]
 8016852:	e7c4      	b.n	80167de <f_write+0x106>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016854:	2607      	movs	r6, #7
 8016856:	e773      	b.n	8016740 <f_write+0x68>

08016858 <f_sync>:
{
 8016858:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801685a:	a901      	add	r1, sp, #4
{
 801685c:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801685e:	f7ff fa78 	bl	8015d52 <validate>
	if (res == FR_OK) {
 8016862:	4604      	mov	r4, r0
 8016864:	bb50      	cbnz	r0, 80168bc <f_sync+0x64>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016866:	7c2c      	ldrb	r4, [r5, #16]
 8016868:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 801686c:	d026      	beq.n	80168bc <f_sync+0x64>
				res = move_window(fs, fp->dir_sect);
 801686e:	6a29      	ldr	r1, [r5, #32]
 8016870:	9801      	ldr	r0, [sp, #4]
 8016872:	f7ff faac 	bl	8015dce <move_window>
				if (res == FR_OK) {
 8016876:	4604      	mov	r4, r0
 8016878:	bb00      	cbnz	r0, 80168bc <f_sync+0x64>
					dir = fp->dir_ptr;
 801687a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 801687c:	7af3      	ldrb	r3, [r6, #11]
 801687e:	f043 0320 	orr.w	r3, r3, #32
 8016882:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8016884:	68aa      	ldr	r2, [r5, #8]
 8016886:	6828      	ldr	r0, [r5, #0]
 8016888:	4631      	mov	r1, r6
 801688a:	f7ff fa56 	bl	8015d3a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801688e:	68e9      	ldr	r1, [r5, #12]
 8016890:	f106 001c 	add.w	r0, r6, #28
 8016894:	f7ff fa3e 	bl	8015d14 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8016898:	2321      	movs	r3, #33	; 0x21
 801689a:	7633      	strb	r3, [r6, #24]
					fs->wflag = 1;
 801689c:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801689e:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val;
 80168a0:	2350      	movs	r3, #80	; 0x50
 80168a2:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
 80168a4:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80168a6:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80168a8:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 80168aa:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 80168ac:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80168ae:	f7ff fb4c 	bl	8015f4a <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80168b2:	7c2b      	ldrb	r3, [r5, #16]
 80168b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80168b8:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80168ba:	742b      	strb	r3, [r5, #16]
}
 80168bc:	4620      	mov	r0, r4
 80168be:	b002      	add	sp, #8
 80168c0:	bd70      	pop	{r4, r5, r6, pc}

080168c2 <f_close>:
{
 80168c2:	b513      	push	{r0, r1, r4, lr}
 80168c4:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80168c6:	f7ff ffc7 	bl	8016858 <f_sync>
	if (res == FR_OK)
 80168ca:	b928      	cbnz	r0, 80168d8 <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80168cc:	a901      	add	r1, sp, #4
 80168ce:	4620      	mov	r0, r4
 80168d0:	f7ff fa3f 	bl	8015d52 <validate>
		if (res == FR_OK) {
 80168d4:	b900      	cbnz	r0, 80168d8 <f_close+0x16>
			fp->obj.fs = 0;	/* Invalidate file object */
 80168d6:	6020      	str	r0, [r4, #0]
}
 80168d8:	b002      	add	sp, #8
 80168da:	bd10      	pop	{r4, pc}

080168dc <f_lseek>:
{
 80168dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80168e0:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80168e2:	a901      	add	r1, sp, #4
{
 80168e4:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80168e6:	f7ff fa34 	bl	8015d52 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80168ea:	4606      	mov	r6, r0
 80168ec:	2800      	cmp	r0, #0
 80168ee:	d150      	bne.n	8016992 <f_lseek+0xb6>
 80168f0:	7c66      	ldrb	r6, [r4, #17]
	if (res != FR_OK) LEAVE_FF(fs, res);
 80168f2:	2e00      	cmp	r6, #0
 80168f4:	d14d      	bne.n	8016992 <f_lseek+0xb6>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80168f6:	68e3      	ldr	r3, [r4, #12]
 80168f8:	42ab      	cmp	r3, r5
 80168fa:	d204      	bcs.n	8016906 <f_lseek+0x2a>
 80168fc:	7c22      	ldrb	r2, [r4, #16]
 80168fe:	f012 0f02 	tst.w	r2, #2
 8016902:	bf08      	it	eq
 8016904:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8016906:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8016908:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 801690a:	6162      	str	r2, [r4, #20]
		if (ofs > 0) {
 801690c:	b99d      	cbnz	r5, 8016936 <f_lseek+0x5a>
		fp->fptr = nsect = 0;
 801690e:	2500      	movs	r5, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8016910:	68e2      	ldr	r2, [r4, #12]
 8016912:	6963      	ldr	r3, [r4, #20]
 8016914:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
 8016916:	bf82      	ittt	hi
 8016918:	7c22      	ldrbhi	r2, [r4, #16]
			fp->obj.objsize = fp->fptr;
 801691a:	60e3      	strhi	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 801691c:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8016920:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 8016924:	bf88      	it	hi
 8016926:	7422      	strbhi	r2, [r4, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8016928:	2b00      	cmp	r3, #0
 801692a:	d032      	beq.n	8016992 <f_lseek+0xb6>
 801692c:	69e3      	ldr	r3, [r4, #28]
 801692e:	42ab      	cmp	r3, r5
			fp->sect = nsect;
 8016930:	bf18      	it	ne
 8016932:	61e5      	strne	r5, [r4, #28]
 8016934:	e02d      	b.n	8016992 <f_lseek+0xb6>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8016936:	9a01      	ldr	r2, [sp, #4]
 8016938:	8957      	ldrh	r7, [r2, #10]
 801693a:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 801693c:	b1fb      	cbz	r3, 801697e <f_lseek+0xa2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801693e:	3b01      	subs	r3, #1
 8016940:	1e6a      	subs	r2, r5, #1
 8016942:	fbb3 f1f7 	udiv	r1, r3, r7
 8016946:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 801694a:	428a      	cmp	r2, r1
 801694c:	d317      	bcc.n	801697e <f_lseek+0xa2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801694e:	427a      	negs	r2, r7
 8016950:	4013      	ands	r3, r2
				clst = fp->clust;
 8016952:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8016954:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8016956:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8016958:	2900      	cmp	r1, #0
 801695a:	d0d8      	beq.n	801690e <f_lseek+0x32>
				while (ofs > bcs) {						/* Cluster following loop */
 801695c:	42bd      	cmp	r5, r7
					ofs -= bcs; fp->fptr += bcs;
 801695e:	6963      	ldr	r3, [r4, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 8016960:	d822      	bhi.n	80169a8 <f_lseek+0xcc>
				fp->fptr += ofs;
 8016962:	6963      	ldr	r3, [r4, #20]
 8016964:	442b      	add	r3, r5
 8016966:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8016968:	f3c5 0308 	ubfx	r3, r5, #0, #9
 801696c:	2b00      	cmp	r3, #0
 801696e:	d0ce      	beq.n	801690e <f_lseek+0x32>
					nsect = clst2sect(fs, clst);	/* Current sector */
 8016970:	9801      	ldr	r0, [sp, #4]
 8016972:	f7ff f9d7 	bl	8015d24 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8016976:	b150      	cbz	r0, 801698e <f_lseek+0xb2>
					nsect += (DWORD)(ofs / SS(fs));
 8016978:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 801697c:	e7c8      	b.n	8016910 <f_lseek+0x34>
				clst = fp->obj.sclust;					/* start from the first cluster */
 801697e:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8016980:	b981      	cbnz	r1, 80169a4 <f_lseek+0xc8>
					clst = create_chain(&fp->obj, 0);
 8016982:	6820      	ldr	r0, [r4, #0]
 8016984:	f7ff fbe9 	bl	801615a <create_chain.isra.0>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016988:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 801698a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801698c:	d105      	bne.n	801699a <f_lseek+0xbe>
 801698e:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016990:	7466      	strb	r6, [r4, #17]
}
 8016992:	4630      	mov	r0, r6
 8016994:	b002      	add	sp, #8
 8016996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801699a:	1c48      	adds	r0, r1, #1
 801699c:	d101      	bne.n	80169a2 <f_lseek+0xc6>
 801699e:	2601      	movs	r6, #1
 80169a0:	e7f6      	b.n	8016990 <f_lseek+0xb4>
					fp->obj.sclust = clst;
 80169a2:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 80169a4:	61a1      	str	r1, [r4, #24]
 80169a6:	e7d7      	b.n	8016958 <f_lseek+0x7c>
					ofs -= bcs; fp->fptr += bcs;
 80169a8:	443b      	add	r3, r7
 80169aa:	6163      	str	r3, [r4, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80169ac:	7c23      	ldrb	r3, [r4, #16]
 80169ae:	6820      	ldr	r0, [r4, #0]
 80169b0:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 80169b2:	eba5 0807 	sub.w	r8, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80169b6:	d505      	bpl.n	80169c4 <f_lseek+0xe8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80169b8:	f7ff fbcf 	bl	801615a <create_chain.isra.0>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80169bc:	4605      	mov	r5, r0
 80169be:	b920      	cbnz	r0, 80169ca <f_lseek+0xee>
 80169c0:	4601      	mov	r1, r0
 80169c2:	e7ce      	b.n	8016962 <f_lseek+0x86>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80169c4:	f7ff fb3e 	bl	8016044 <get_fat.isra.0>
 80169c8:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80169ca:	1c6b      	adds	r3, r5, #1
 80169cc:	d0e7      	beq.n	801699e <f_lseek+0xc2>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80169ce:	2d01      	cmp	r5, #1
 80169d0:	d9dd      	bls.n	801698e <f_lseek+0xb2>
 80169d2:	9b01      	ldr	r3, [sp, #4]
 80169d4:	695b      	ldr	r3, [r3, #20]
 80169d6:	42ab      	cmp	r3, r5
 80169d8:	d9d9      	bls.n	801698e <f_lseek+0xb2>
					fp->clust = clst;
 80169da:	61a5      	str	r5, [r4, #24]
 80169dc:	4629      	mov	r1, r5
					ofs -= bcs; fp->fptr += bcs;
 80169de:	4645      	mov	r5, r8
 80169e0:	e7bc      	b.n	801695c <f_lseek+0x80>

080169e2 <f_opendir>:
{
 80169e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!dp) return FR_INVALID_OBJECT;
 80169e4:	4604      	mov	r4, r0
{
 80169e6:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 80169e8:	b348      	cbz	r0, 8016a3e <f_opendir+0x5c>
	res = mount_volume(&path, &fs, 0);
 80169ea:	2200      	movs	r2, #0
 80169ec:	a903      	add	r1, sp, #12
 80169ee:	a801      	add	r0, sp, #4
 80169f0:	f7f8 f848 	bl	800ea84 <mount_volume>
	if (res == FR_OK) {
 80169f4:	b970      	cbnz	r0, 8016a14 <f_opendir+0x32>
		dp->obj.fs = fs;
 80169f6:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80169f8:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
 80169fa:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80169fc:	4620      	mov	r0, r4
 80169fe:	f7f8 f963 	bl	800ecc8 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8016a02:	b9f0      	cbnz	r0, 8016a42 <f_opendir+0x60>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016a04:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	db0c      	blt.n	8016a26 <f_opendir+0x44>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8016a0c:	79a3      	ldrb	r3, [r4, #6]
 8016a0e:	06db      	lsls	r3, r3, #27
 8016a10:	d403      	bmi.n	8016a1a <f_opendir+0x38>
					res = FR_NO_PATH;
 8016a12:	2005      	movs	r0, #5
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8016a14:	2300      	movs	r3, #0
 8016a16:	6023      	str	r3, [r4, #0]
 8016a18:	e00f      	b.n	8016a3a <f_opendir+0x58>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016a1a:	9b03      	ldr	r3, [sp, #12]
 8016a1c:	69e1      	ldr	r1, [r4, #28]
 8016a1e:	7818      	ldrb	r0, [r3, #0]
 8016a20:	f7ff fb08 	bl	8016034 <ld_clust.isra.0>
 8016a24:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 8016a26:	9b03      	ldr	r3, [sp, #12]
 8016a28:	88db      	ldrh	r3, [r3, #6]
 8016a2a:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	f7ff fc03 	bl	8016238 <dir_sdi.constprop.0>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016a32:	2804      	cmp	r0, #4
 8016a34:	d0ed      	beq.n	8016a12 <f_opendir+0x30>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8016a36:	2800      	cmp	r0, #0
 8016a38:	d1ec      	bne.n	8016a14 <f_opendir+0x32>
}
 8016a3a:	b004      	add	sp, #16
 8016a3c:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
 8016a3e:	2009      	movs	r0, #9
 8016a40:	e7fb      	b.n	8016a3a <f_opendir+0x58>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016a42:	2804      	cmp	r0, #4
 8016a44:	d0e5      	beq.n	8016a12 <f_opendir+0x30>
 8016a46:	e7e5      	b.n	8016a14 <f_opendir+0x32>

08016a48 <f_closedir>:
{
 8016a48:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8016a4a:	a901      	add	r1, sp, #4
{
 8016a4c:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8016a4e:	f7ff f980 	bl	8015d52 <validate>
	if (res == FR_OK) {
 8016a52:	b900      	cbnz	r0, 8016a56 <f_closedir+0xe>
		dp->obj.fs = 0;	/* Invalidate directory object */
 8016a54:	6020      	str	r0, [r4, #0]
}
 8016a56:	b002      	add	sp, #8
 8016a58:	bd10      	pop	{r4, pc}

08016a5a <f_readdir>:
{
 8016a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a5c:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8016a5e:	a901      	add	r1, sp, #4
{
 8016a60:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8016a62:	f7ff f976 	bl	8015d52 <validate>
	if (res == FR_OK) {
 8016a66:	b918      	cbnz	r0, 8016a70 <f_readdir+0x16>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8016a68:	4620      	mov	r0, r4
		if (!fno) {
 8016a6a:	b91d      	cbnz	r5, 8016a74 <f_readdir+0x1a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8016a6c:	f7ff fbe4 	bl	8016238 <dir_sdi.constprop.0>
}
 8016a70:	b003      	add	sp, #12
 8016a72:	bd30      	pop	{r4, r5, pc}
			res = DIR_READ_FILE(dp);		/* Read an item */
 8016a74:	f7ff fc67 	bl	8016346 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 8016a78:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
 8016a7c:	d1f8      	bne.n	8016a70 <f_readdir+0x16>
	fno->fname[0] = 0;			/* Invaidate file info */
 8016a7e:	726b      	strb	r3, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8016a80:	69a3      	ldr	r3, [r4, #24]
 8016a82:	b11b      	cbz	r3, 8016a8c <f_readdir+0x32>
 8016a84:	69e0      	ldr	r0, [r4, #28]
 8016a86:	4629      	mov	r1, r5
 8016a88:	f7ff faaa 	bl	8015fe0 <get_fileinfo.part.0.isra.0>
				res = dir_next(dp, 0);		/* Increment index for next */
 8016a8c:	2100      	movs	r1, #0
 8016a8e:	4620      	mov	r0, r4
 8016a90:	f7ff fc04 	bl	801629c <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8016a94:	2804      	cmp	r0, #4
 8016a96:	bf08      	it	eq
 8016a98:	2000      	moveq	r0, #0
 8016a9a:	e7e9      	b.n	8016a70 <f_readdir+0x16>

08016a9c <f_stat>:
{
 8016a9c:	b530      	push	{r4, r5, lr}
 8016a9e:	b08f      	sub	sp, #60	; 0x3c
 8016aa0:	460d      	mov	r5, r1
 8016aa2:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &dj.obj.fs, 0);
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	a903      	add	r1, sp, #12
 8016aa8:	a801      	add	r0, sp, #4
 8016aaa:	f7f7 ffeb 	bl	800ea84 <mount_volume>
	if (res == FR_OK) {
 8016aae:	4604      	mov	r4, r0
 8016ab0:	b988      	cbnz	r0, 8016ad6 <f_stat+0x3a>
		res = follow_path(&dj, path);	/* Follow the file path */
 8016ab2:	9901      	ldr	r1, [sp, #4]
 8016ab4:	a803      	add	r0, sp, #12
 8016ab6:	f7f8 f907 	bl	800ecc8 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8016aba:	4604      	mov	r4, r0
 8016abc:	b958      	cbnz	r0, 8016ad6 <f_stat+0x3a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8016abe:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	db0a      	blt.n	8016adc <f_stat+0x40>
				if (fno) get_fileinfo(&dj, fno);
 8016ac6:	b135      	cbz	r5, 8016ad6 <f_stat+0x3a>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8016ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	fno->fname[0] = 0;			/* Invaidate file info */
 8016aca:	7268      	strb	r0, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8016acc:	b11b      	cbz	r3, 8016ad6 <f_stat+0x3a>
 8016ace:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ad0:	4629      	mov	r1, r5
 8016ad2:	f7ff fa85 	bl	8015fe0 <get_fileinfo.part.0.isra.0>
}
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	b00f      	add	sp, #60	; 0x3c
 8016ada:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8016adc:	2406      	movs	r4, #6
 8016ade:	e7fa      	b.n	8016ad6 <f_stat+0x3a>

08016ae0 <f_getfree>:
{
 8016ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ae4:	b085      	sub	sp, #20
 8016ae6:	460f      	mov	r7, r1
 8016ae8:	9001      	str	r0, [sp, #4]
 8016aea:	4615      	mov	r5, r2
	res = mount_volume(&path, &fs, 0);
 8016aec:	a903      	add	r1, sp, #12
 8016aee:	2200      	movs	r2, #0
 8016af0:	a801      	add	r0, sp, #4
 8016af2:	f7f7 ffc7 	bl	800ea84 <mount_volume>
	if (res == FR_OK) {
 8016af6:	4604      	mov	r4, r0
 8016af8:	b940      	cbnz	r0, 8016b0c <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 8016afa:	9e03      	ldr	r6, [sp, #12]
 8016afc:	602e      	str	r6, [r5, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8016afe:	e9d6 3804 	ldrd	r3, r8, [r6, #16]
 8016b02:	f1a8 0202 	sub.w	r2, r8, #2
 8016b06:	4293      	cmp	r3, r2
 8016b08:	d804      	bhi.n	8016b14 <f_getfree+0x34>
			*nclst = fs->free_clst;
 8016b0a:	603b      	str	r3, [r7, #0]
}
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	b005      	add	sp, #20
 8016b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8016b14:	7833      	ldrb	r3, [r6, #0]
 8016b16:	2b01      	cmp	r3, #1
 8016b18:	d11a      	bne.n	8016b50 <f_getfree+0x70>
				clst = 2; obj.fs = fs;
 8016b1a:	f04f 0802 	mov.w	r8, #2
			nfree = 0;
 8016b1e:	4605      	mov	r5, r0
					stat = get_fat(&obj, clst);
 8016b20:	4641      	mov	r1, r8
 8016b22:	4630      	mov	r0, r6
 8016b24:	f7ff fa8e 	bl	8016044 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8016b28:	1c43      	adds	r3, r0, #1
 8016b2a:	d036      	beq.n	8016b9a <f_getfree+0xba>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8016b2c:	2801      	cmp	r0, #1
 8016b2e:	d036      	beq.n	8016b9e <f_getfree+0xbe>
					if (stat == 0) nfree++;
 8016b30:	b900      	cbnz	r0, 8016b34 <f_getfree+0x54>
 8016b32:	3501      	adds	r5, #1
				} while (++clst < fs->n_fatent);
 8016b34:	9b03      	ldr	r3, [sp, #12]
 8016b36:	695b      	ldr	r3, [r3, #20]
 8016b38:	f108 0801 	add.w	r8, r8, #1
 8016b3c:	4543      	cmp	r3, r8
 8016b3e:	d8ef      	bhi.n	8016b20 <f_getfree+0x40>
				fs->free_clst = nfree;	/* Now free_clst is valid */
 8016b40:	9b03      	ldr	r3, [sp, #12]
				*nclst = nfree;			/* Return the free clusters */
 8016b42:	603d      	str	r5, [r7, #0]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8016b44:	791a      	ldrb	r2, [r3, #4]
				fs->free_clst = nfree;	/* Now free_clst is valid */
 8016b46:	611d      	str	r5, [r3, #16]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8016b48:	f042 0201 	orr.w	r2, r2, #1
 8016b4c:	711a      	strb	r2, [r3, #4]
	LEAVE_FF(fs, res);
 8016b4e:	e7dd      	b.n	8016b0c <f_getfree+0x2c>
					sect = fs->fatbase;		/* Top of the FAT */
 8016b50:	6a31      	ldr	r1, [r6, #32]
			nfree = 0;
 8016b52:	4605      	mov	r5, r0
					i = 0;					/* Offset in the sector */
 8016b54:	4606      	mov	r6, r0
						if (i == 0) {
 8016b56:	b936      	cbnz	r6, 8016b66 <f_getfree+0x86>
							res = move_window(fs, sect++);
 8016b58:	9803      	ldr	r0, [sp, #12]
 8016b5a:	f101 0901 	add.w	r9, r1, #1
 8016b5e:	f7ff f936 	bl	8015dce <move_window>
							if (res != FR_OK) break;
 8016b62:	b9f0      	cbnz	r0, 8016ba2 <f_getfree+0xc2>
							res = move_window(fs, sect++);
 8016b64:	4649      	mov	r1, r9
						if (fs->fs_type == FS_FAT16) {
 8016b66:	9a03      	ldr	r2, [sp, #12]
							if (ld_word(fs->win + i) == 0) nfree++;
 8016b68:	f102 0330 	add.w	r3, r2, #48	; 0x30
						if (fs->fs_type == FS_FAT16) {
 8016b6c:	7812      	ldrb	r2, [r2, #0]
 8016b6e:	2a02      	cmp	r2, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 8016b70:	eb03 0006 	add.w	r0, r3, r6
						if (fs->fs_type == FS_FAT16) {
 8016b74:	d109      	bne.n	8016b8a <f_getfree+0xaa>
							if (ld_word(fs->win + i) == 0) nfree++;
 8016b76:	5b9b      	ldrh	r3, [r3, r6]
 8016b78:	b903      	cbnz	r3, 8016b7c <f_getfree+0x9c>
 8016b7a:	3501      	adds	r5, #1
							i += 2;
 8016b7c:	3602      	adds	r6, #2
					} while (--clst);
 8016b7e:	f1b8 0801 	subs.w	r8, r8, #1
						i %= SS(fs);
 8016b82:	f3c6 0608 	ubfx	r6, r6, #0, #9
					} while (--clst);
 8016b86:	d1e6      	bne.n	8016b56 <f_getfree+0x76>
 8016b88:	e7da      	b.n	8016b40 <f_getfree+0x60>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8016b8a:	f7ff f8c1 	bl	8015d10 <ld_dword>
 8016b8e:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 8016b92:	bf08      	it	eq
 8016b94:	3501      	addeq	r5, #1
							i += 4;
 8016b96:	3604      	adds	r6, #4
 8016b98:	e7f1      	b.n	8016b7e <f_getfree+0x9e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8016b9a:	2401      	movs	r4, #1
 8016b9c:	e7b6      	b.n	8016b0c <f_getfree+0x2c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8016b9e:	2402      	movs	r4, #2
 8016ba0:	e7b4      	b.n	8016b0c <f_getfree+0x2c>
 8016ba2:	4604      	mov	r4, r0
 8016ba4:	e7b2      	b.n	8016b0c <f_getfree+0x2c>

08016ba6 <f_truncate>:
{
 8016ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016ba8:	a901      	add	r1, sp, #4
{
 8016baa:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016bac:	f7ff f8d1 	bl	8015d52 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	b9c0      	cbnz	r0, 8016be6 <f_truncate+0x40>
 8016bb4:	7c6c      	ldrb	r4, [r5, #17]
 8016bb6:	b9b4      	cbnz	r4, 8016be6 <f_truncate+0x40>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016bb8:	7c2b      	ldrb	r3, [r5, #16]
 8016bba:	079a      	lsls	r2, r3, #30
 8016bbc:	d52c      	bpl.n	8016c18 <f_truncate+0x72>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 8016bbe:	696e      	ldr	r6, [r5, #20]
 8016bc0:	68eb      	ldr	r3, [r5, #12]
 8016bc2:	429e      	cmp	r6, r3
 8016bc4:	d20f      	bcs.n	8016be6 <f_truncate+0x40>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8016bc6:	6828      	ldr	r0, [r5, #0]
 8016bc8:	b986      	cbnz	r6, 8016bec <f_truncate+0x46>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8016bca:	4622      	mov	r2, r4
 8016bcc:	68a9      	ldr	r1, [r5, #8]
 8016bce:	f7ff fa8f 	bl	80160f0 <remove_chain.isra.0>
			fp->obj.sclust = 0;
 8016bd2:	60ae      	str	r6, [r5, #8]
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8016bd4:	4604      	mov	r4, r0
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 8016bd6:	696b      	ldr	r3, [r5, #20]
 8016bd8:	60eb      	str	r3, [r5, #12]
		fp->flag |= FA_MODIFIED;
 8016bda:	7c2b      	ldrb	r3, [r5, #16]
 8016bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016be0:	742b      	strb	r3, [r5, #16]
		if (res != FR_OK) ABORT(fs, res);
 8016be2:	b104      	cbz	r4, 8016be6 <f_truncate+0x40>
 8016be4:	746c      	strb	r4, [r5, #17]
}
 8016be6:	4620      	mov	r0, r4
 8016be8:	b002      	add	sp, #8
 8016bea:	bd70      	pop	{r4, r5, r6, pc}
			ncl = get_fat(&fp->obj, fp->clust);
 8016bec:	69a9      	ldr	r1, [r5, #24]
 8016bee:	f7ff fa29 	bl	8016044 <get_fat.isra.0>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016bf2:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
 8016bf4:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016bf6:	d00b      	beq.n	8016c10 <f_truncate+0x6a>
			if (ncl == 1) res = FR_INT_ERR;
 8016bf8:	2801      	cmp	r0, #1
 8016bfa:	d00b      	beq.n	8016c14 <f_truncate+0x6e>
			if (res == FR_OK && ncl < fs->n_fatent) {
 8016bfc:	9b01      	ldr	r3, [sp, #4]
 8016bfe:	695b      	ldr	r3, [r3, #20]
 8016c00:	4283      	cmp	r3, r0
 8016c02:	d9e8      	bls.n	8016bd6 <f_truncate+0x30>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 8016c04:	69aa      	ldr	r2, [r5, #24]
 8016c06:	6828      	ldr	r0, [r5, #0]
 8016c08:	f7ff fa72 	bl	80160f0 <remove_chain.isra.0>
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	e7e2      	b.n	8016bd6 <f_truncate+0x30>
 8016c10:	2401      	movs	r4, #1
 8016c12:	e7e0      	b.n	8016bd6 <f_truncate+0x30>
			if (ncl == 1) res = FR_INT_ERR;
 8016c14:	2402      	movs	r4, #2
 8016c16:	e7de      	b.n	8016bd6 <f_truncate+0x30>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016c18:	2407      	movs	r4, #7
 8016c1a:	e7e4      	b.n	8016be6 <f_truncate+0x40>

08016c1c <f_unlink>:
{
 8016c1c:	b570      	push	{r4, r5, r6, lr}
 8016c1e:	b09a      	sub	sp, #104	; 0x68
	res = mount_volume(&path, &fs, FA_WRITE);
 8016c20:	2202      	movs	r2, #2
{
 8016c22:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
 8016c24:	a903      	add	r1, sp, #12
 8016c26:	a801      	add	r0, sp, #4
 8016c28:	f7f7 ff2c 	bl	800ea84 <mount_volume>
	if (res == FR_OK) {
 8016c2c:	b978      	cbnz	r0, 8016c4e <f_unlink+0x32>
		dj.obj.fs = fs;
 8016c2e:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8016c30:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8016c32:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 8016c34:	a804      	add	r0, sp, #16
 8016c36:	f7f8 f847 	bl	800ecc8 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 8016c3a:	b940      	cbnz	r0, 8016c4e <f_unlink+0x32>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8016c3c:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	db36      	blt.n	8016cb2 <f_unlink+0x96>
				if (dj.obj.attr & AM_RDO) {
 8016c44:	f89d 6016 	ldrb.w	r6, [sp, #22]
 8016c48:	07f2      	lsls	r2, r6, #31
 8016c4a:	d502      	bpl.n	8016c52 <f_unlink+0x36>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8016c4c:	2007      	movs	r0, #7
}
 8016c4e:	b01a      	add	sp, #104	; 0x68
 8016c50:	bd70      	pop	{r4, r5, r6, pc}
					dclst = ld_clust(fs, dj.dir);
 8016c52:	9d03      	ldr	r5, [sp, #12]
 8016c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c56:	7828      	ldrb	r0, [r5, #0]
 8016c58:	f7ff f9ec 	bl	8016034 <ld_clust.isra.0>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8016c5c:	06f3      	lsls	r3, r6, #27
					dclst = ld_clust(fs, dj.dir);
 8016c5e:	4604      	mov	r4, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8016c60:	d410      	bmi.n	8016c84 <f_unlink+0x68>
	FATFS *fs = dp->obj.fs;
 8016c62:	9d04      	ldr	r5, [sp, #16]
	res = move_window(fs, dp->sect);
 8016c64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016c66:	4628      	mov	r0, r5
 8016c68:	f7ff f8b1 	bl	8015dce <move_window>
	if (res == FR_OK) {
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d1ee      	bne.n	8016c4e <f_unlink+0x32>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 8016c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c72:	22e5      	movs	r2, #229	; 0xe5
 8016c74:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8016c76:	2301      	movs	r3, #1
 8016c78:	70eb      	strb	r3, [r5, #3]
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8016c7a:	b994      	cbnz	r4, 8016ca2 <f_unlink+0x86>
				if (res == FR_OK) res = sync_fs(fs);
 8016c7c:	9803      	ldr	r0, [sp, #12]
 8016c7e:	f7ff f964 	bl	8015f4a <sync_fs>
 8016c82:	e7e4      	b.n	8016c4e <f_unlink+0x32>
						sdj.obj.sclust = dclst;
 8016c84:	9011      	str	r0, [sp, #68]	; 0x44
						res = dir_sdi(&sdj, 0);
 8016c86:	a80f      	add	r0, sp, #60	; 0x3c
						sdj.obj.fs = fs;			/* Open the sub-directory */
 8016c88:	950f      	str	r5, [sp, #60]	; 0x3c
						res = dir_sdi(&sdj, 0);
 8016c8a:	f7ff fad5 	bl	8016238 <dir_sdi.constprop.0>
						if (res == FR_OK) {
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d1dd      	bne.n	8016c4e <f_unlink+0x32>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8016c92:	a80f      	add	r0, sp, #60	; 0x3c
 8016c94:	f7ff fb57 	bl	8016346 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8016c98:	2800      	cmp	r0, #0
 8016c9a:	d0d7      	beq.n	8016c4c <f_unlink+0x30>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8016c9c:	2804      	cmp	r0, #4
 8016c9e:	d1d6      	bne.n	8016c4e <f_unlink+0x32>
 8016ca0:	e7df      	b.n	8016c62 <f_unlink+0x46>
					res = remove_chain(&dj.obj, dclst, 0);
 8016ca2:	4602      	mov	r2, r0
 8016ca4:	4621      	mov	r1, r4
 8016ca6:	9804      	ldr	r0, [sp, #16]
 8016ca8:	f7ff fa22 	bl	80160f0 <remove_chain.isra.0>
				if (res == FR_OK) res = sync_fs(fs);
 8016cac:	2800      	cmp	r0, #0
 8016cae:	d1ce      	bne.n	8016c4e <f_unlink+0x32>
 8016cb0:	e7e4      	b.n	8016c7c <f_unlink+0x60>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8016cb2:	2006      	movs	r0, #6
 8016cb4:	e7cb      	b.n	8016c4e <f_unlink+0x32>

08016cb6 <f_mkdir>:
{
 8016cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cb8:	b08f      	sub	sp, #60	; 0x3c
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8016cba:	2202      	movs	r2, #2
{
 8016cbc:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8016cbe:	a902      	add	r1, sp, #8
 8016cc0:	a801      	add	r0, sp, #4
 8016cc2:	f7f7 fedf 	bl	800ea84 <mount_volume>
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d168      	bne.n	8016da0 <f_mkdir+0xea>
		dj.obj.fs = fs;
 8016cce:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);			/* Follow the file path */
 8016cd0:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8016cd2:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 8016cd4:	a803      	add	r0, sp, #12
 8016cd6:	f7f7 fff7 	bl	800ecc8 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8016cda:	4604      	mov	r4, r0
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d06d      	beq.n	8016dbc <f_mkdir+0x106>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 8016ce0:	2804      	cmp	r0, #4
 8016ce2:	d15d      	bne.n	8016da0 <f_mkdir+0xea>
			sobj.fs = fs;						/* New object id to create a new chain */
 8016ce4:	9e02      	ldr	r6, [sp, #8]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 8016ce6:	4629      	mov	r1, r5
 8016ce8:	4630      	mov	r0, r6
 8016cea:	f7ff fa36 	bl	801615a <create_chain.isra.0>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8016cee:	4605      	mov	r5, r0
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	d058      	beq.n	8016da6 <f_mkdir+0xf0>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8016cf4:	2801      	cmp	r0, #1
 8016cf6:	d05d      	beq.n	8016db4 <f_mkdir+0xfe>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8016cf8:	1c43      	adds	r3, r0, #1
 8016cfa:	d05d      	beq.n	8016db8 <f_mkdir+0x102>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 8016cfc:	9802      	ldr	r0, [sp, #8]
 8016cfe:	4629      	mov	r1, r5
 8016d00:	f7ff f8fa 	bl	8015ef8 <dir_clear>
 8016d04:	4603      	mov	r3, r0
 8016d06:	4604      	mov	r4, r0
				if (res == FR_OK) {
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	d14d      	bne.n	8016da8 <f_mkdir+0xf2>
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 8016d0c:	9802      	ldr	r0, [sp, #8]
__ssp_bos_icheck3(memset, void *, int)
 8016d0e:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 8016d12:	6302      	str	r2, [r0, #48]	; 0x30
 8016d14:	6342      	str	r2, [r0, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8016d16:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8016d1a:	f8c0 2037 	str.w	r2, [r0, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8016d1e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
						fs->win[DIR_Name] = '.';
 8016d22:	222e      	movs	r2, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 8016d24:	2321      	movs	r3, #33	; 0x21
						fs->win[DIR_Name] = '.';
 8016d26:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8016d2a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
						fs->win[DIR_Attr] = AM_DIR;
 8016d2e:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val;
 8016d30:	2350      	movs	r3, #80	; 0x50
						fs->win[DIR_Attr] = AM_DIR;
 8016d32:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
	*ptr++ = (BYTE)val;
 8016d36:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
						st_clust(fs, fs->win, dcl);
 8016d3a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8016d3e:	462a      	mov	r2, r5
 8016d40:	f7fe fffb 	bl	8015d3a <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
 8016d44:	9802      	ldr	r0, [sp, #8]
 8016d46:	f100 0350 	add.w	r3, r0, #80	; 0x50
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8016d4a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8016d4e:	461a      	mov	r2, r3
 8016d50:	f851 4b04 	ldr.w	r4, [r1], #4
 8016d54:	f842 4b04 	str.w	r4, [r2], #4
 8016d58:	4299      	cmp	r1, r3
 8016d5a:	d1f9      	bne.n	8016d50 <f_mkdir+0x9a>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016d5c:	232e      	movs	r3, #46	; 0x2e
 8016d5e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
						st_clust(fs, fs->win + SZDIRE, pcl);
 8016d62:	9a05      	ldr	r2, [sp, #20]
 8016d64:	f7fe ffe9 	bl	8015d3a <st_clust>
						fs->wflag = 1;
 8016d68:	9b02      	ldr	r3, [sp, #8]
 8016d6a:	2701      	movs	r7, #1
 8016d6c:	70df      	strb	r7, [r3, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 8016d6e:	a803      	add	r0, sp, #12
 8016d70:	f7ff fb13 	bl	801639a <dir_register>
			if (res == FR_OK) {
 8016d74:	4604      	mov	r4, r0
 8016d76:	b9b8      	cbnz	r0, 8016da8 <f_mkdir+0xf2>
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 8016d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8016d7a:	2221      	movs	r2, #33	; 0x21
 8016d7c:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8016d7e:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 8016d80:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8016d82:	75d8      	strb	r0, [r3, #23]
	*ptr++ = (BYTE)val;
 8016d84:	765a      	strb	r2, [r3, #25]
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 8016d86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d88:	9802      	ldr	r0, [sp, #8]
 8016d8a:	462a      	mov	r2, r5
 8016d8c:	f7fe ffd5 	bl	8015d3a <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8016d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					fs->wflag = 1;
 8016d92:	9802      	ldr	r0, [sp, #8]
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8016d94:	2210      	movs	r2, #16
 8016d96:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
 8016d98:	70c7      	strb	r7, [r0, #3]
					res = sync_fs(fs);
 8016d9a:	f7ff f8d6 	bl	8015f4a <sync_fs>
 8016d9e:	4604      	mov	r4, r0
}
 8016da0:	4620      	mov	r0, r4
 8016da2:	b00f      	add	sp, #60	; 0x3c
 8016da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8016da6:	2407      	movs	r4, #7
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 8016da8:	2200      	movs	r2, #0
 8016daa:	4629      	mov	r1, r5
 8016dac:	4630      	mov	r0, r6
 8016dae:	f7ff f99f 	bl	80160f0 <remove_chain.isra.0>
 8016db2:	e7f5      	b.n	8016da0 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8016db4:	2402      	movs	r4, #2
 8016db6:	e7f7      	b.n	8016da8 <f_mkdir+0xf2>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8016db8:	2401      	movs	r4, #1
 8016dba:	e7f5      	b.n	8016da8 <f_mkdir+0xf2>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8016dbc:	2408      	movs	r4, #8
	LEAVE_FF(fs, res);
 8016dbe:	e7ef      	b.n	8016da0 <f_mkdir+0xea>

08016dc0 <f_rename>:
{
 8016dc0:	b530      	push	{r4, r5, lr}
 8016dc2:	b0a3      	sub	sp, #140	; 0x8c
 8016dc4:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 8016dc8:	4668      	mov	r0, sp
 8016dca:	f7f7 fdc5 	bl	800e958 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8016dce:	2202      	movs	r2, #2
 8016dd0:	a903      	add	r1, sp, #12
 8016dd2:	a801      	add	r0, sp, #4
 8016dd4:	f7f7 fe56 	bl	800ea84 <mount_volume>
	if (res == FR_OK) {
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	f040 8082 	bne.w	8016ee2 <f_rename+0x122>
		djo.obj.fs = fs;
 8016dde:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&djo, path_old);			/* Check old object */
 8016de0:	9901      	ldr	r1, [sp, #4]
		djo.obj.fs = fs;
 8016de2:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&djo, path_old);			/* Check old object */
 8016de4:	a80c      	add	r0, sp, #48	; 0x30
 8016de6:	f7f7 ff6f 	bl	800ecc8 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8016dea:	2800      	cmp	r0, #0
 8016dec:	d179      	bne.n	8016ee2 <f_rename+0x122>
 8016dee:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8016df2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8016df6:	d176      	bne.n	8016ee6 <f_rename+0x126>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 8016df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016dfa:	ac04      	add	r4, sp, #16
 8016dfc:	f103 0520 	add.w	r5, r3, #32
 8016e00:	6818      	ldr	r0, [r3, #0]
 8016e02:	6859      	ldr	r1, [r3, #4]
 8016e04:	4622      	mov	r2, r4
 8016e06:	c203      	stmia	r2!, {r0, r1}
 8016e08:	3308      	adds	r3, #8
 8016e0a:	42ab      	cmp	r3, r5
 8016e0c:	4614      	mov	r4, r2
 8016e0e:	d1f7      	bne.n	8016e00 <f_rename+0x40>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8016e10:	ac0c      	add	r4, sp, #48	; 0x30
 8016e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e14:	ad17      	add	r5, sp, #92	; 0x5c
 8016e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016e1c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8016e20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8016e24:	9900      	ldr	r1, [sp, #0]
 8016e26:	a817      	add	r0, sp, #92	; 0x5c
 8016e28:	f7f7 ff4e 	bl	800ecc8 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8016e2c:	b948      	cbnz	r0, 8016e42 <f_rename+0x82>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8016e2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d103      	bne.n	8016e3e <f_rename+0x7e>
 8016e36:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d003      	beq.n	8016e46 <f_rename+0x86>
 8016e3e:	2008      	movs	r0, #8
 8016e40:	e04f      	b.n	8016ee2 <f_rename+0x122>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8016e42:	2804      	cmp	r0, #4
 8016e44:	d14d      	bne.n	8016ee2 <f_rename+0x122>
					res = dir_register(&djn);			/* Register the new entry */
 8016e46:	a817      	add	r0, sp, #92	; 0x5c
 8016e48:	f7ff faa7 	bl	801639a <dir_register>
					if (res == FR_OK) {
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	d148      	bne.n	8016ee2 <f_rename+0x122>
						dir = djn.dir;					/* Copy directory entry of the object except name */
 8016e50:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016e52:	f10d 031d 	add.w	r3, sp, #29
 8016e56:	f101 020d 	add.w	r2, r1, #13
 8016e5a:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8016e5e:	f853 4b04 	ldr.w	r4, [r3], #4
 8016e62:	f842 4b04 	str.w	r4, [r2], #4
 8016e66:	4283      	cmp	r3, r0
 8016e68:	d1f9      	bne.n	8016e5e <f_rename+0x9e>
 8016e6a:	8818      	ldrh	r0, [r3, #0]
 8016e6c:	8010      	strh	r0, [r2, #0]
 8016e6e:	789b      	ldrb	r3, [r3, #2]
 8016e70:	7093      	strb	r3, [r2, #2]
						dir[DIR_Attr] = buf[DIR_Attr];
 8016e72:	f89d 301b 	ldrb.w	r3, [sp, #27]
						fs->wflag = 1;
 8016e76:	9c03      	ldr	r4, [sp, #12]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 8016e78:	06da      	lsls	r2, r3, #27
 8016e7a:	bf58      	it	pl
 8016e7c:	f043 0320 	orrpl.w	r3, r3, #32
						fs->wflag = 1;
 8016e80:	2501      	movs	r5, #1
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 8016e82:	72cb      	strb	r3, [r1, #11]
						fs->wflag = 1;
 8016e84:	70e5      	strb	r5, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8016e86:	7acb      	ldrb	r3, [r1, #11]
 8016e88:	06db      	lsls	r3, r3, #27
 8016e8a:	d51c      	bpl.n	8016ec6 <f_rename+0x106>
 8016e8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016e90:	429a      	cmp	r2, r3
 8016e92:	d018      	beq.n	8016ec6 <f_rename+0x106>
							sect = clst2sect(fs, ld_clust(fs, dir));
 8016e94:	7820      	ldrb	r0, [r4, #0]
 8016e96:	f7ff f8cd 	bl	8016034 <ld_clust.isra.0>
 8016e9a:	4601      	mov	r1, r0
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f7fe ff41 	bl	8015d24 <clst2sect>
							if (sect == 0) {
 8016ea2:	4601      	mov	r1, r0
 8016ea4:	b308      	cbz	r0, 8016eea <f_rename+0x12a>
								res = move_window(fs, sect);
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f7fe ff91 	bl	8015dce <move_window>
								if (res == FR_OK && dir[1] == '.') {
 8016eac:	b9c8      	cbnz	r0, 8016ee2 <f_rename+0x122>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8016eae:	9803      	ldr	r0, [sp, #12]
								if (res == FR_OK && dir[1] == '.') {
 8016eb0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8016eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8016eb6:	d106      	bne.n	8016ec6 <f_rename+0x106>
									st_clust(fs, dir, djn.obj.sclust);
 8016eb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016eba:	f100 0150 	add.w	r1, r0, #80	; 0x50
 8016ebe:	f7fe ff3c 	bl	8015d3a <st_clust>
									fs->wflag = 1;
 8016ec2:	9b03      	ldr	r3, [sp, #12]
 8016ec4:	70dd      	strb	r5, [r3, #3]
	FATFS *fs = dp->obj.fs;
 8016ec6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	res = move_window(fs, dp->sect);
 8016ec8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016eca:	4620      	mov	r0, r4
 8016ecc:	f7fe ff7f 	bl	8015dce <move_window>
	if (res == FR_OK) {
 8016ed0:	b938      	cbnz	r0, 8016ee2 <f_rename+0x122>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 8016ed2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ed4:	22e5      	movs	r2, #229	; 0xe5
 8016ed6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8016ed8:	2301      	movs	r3, #1
 8016eda:	70e3      	strb	r3, [r4, #3]
					res = sync_fs(fs);
 8016edc:	9803      	ldr	r0, [sp, #12]
 8016ede:	f7ff f834 	bl	8015f4a <sync_fs>
}
 8016ee2:	b023      	add	sp, #140	; 0x8c
 8016ee4:	bd30      	pop	{r4, r5, pc}
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8016ee6:	2006      	movs	r0, #6
 8016ee8:	e7fb      	b.n	8016ee2 <f_rename+0x122>
								res = FR_INT_ERR;
 8016eea:	2002      	movs	r0, #2
 8016eec:	e7f9      	b.n	8016ee2 <f_rename+0x122>

08016eee <LL_RTC_ALMA_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8016eee:	6983      	ldr	r3, [r0, #24]
  assert_param(IS_LL_RTC_ALMA_MASK(RTC_AlarmStruct->AlarmMask));
  assert_param(IS_LL_RTC_ALMA_DATE_WEEKDAY_SEL(RTC_AlarmStruct->AlarmDateWeekDaySel));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8016ef0:	065b      	lsls	r3, r3, #25
{
 8016ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_LL_RTC_HOUR12(RTC_AlarmStruct->AlarmTime.Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_AlarmStruct->AlarmTime.TimeFormat));
    }
    else
    {
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 8016ef4:	bf5c      	itt	pl
 8016ef6:	2300      	movpl	r3, #0
 8016ef8:	6013      	strpl	r3, [r2, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8016efa:	23ca      	movs	r3, #202	; 0xca
 8016efc:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8016efe:	2353      	movs	r3, #83	; 0x53
 8016f00:	6243      	str	r3, [r0, #36]	; 0x24

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);

  /* Select weekday selection */
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 8016f02:	68d3      	ldr	r3, [r2, #12]
  {
    /* Set the date for ALARM */
    LL_RTC_ALMA_DisableWeekday(RTCx);
    if (RTC_Format != LL_RTC_FORMAT_BIN)
    {
      LL_RTC_ALMA_SetDay(RTCx, RTC_AlarmStruct->AlarmDateWeekDay);
 8016f04:	7c14      	ldrb	r4, [r2, #16]
 8016f06:	6817      	ldr	r7, [r2, #0]
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d155      	bne.n	8016fb8 <LL_RTC_ALMA_Init+0xca>
  CLEAR_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8016f0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016f0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016f12:	6403      	str	r3, [r0, #64]	; 0x40
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8016f14:	b1f1      	cbz	r1, 8016f54 <LL_RTC_ALMA_Init+0x66>
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8016f16:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016f18:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 8016f1c:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8016f20:	6401      	str	r1, [r0, #64]	; 0x40
  }

  /* Configure the Alarm register */
  if (RTC_Format != LL_RTC_FORMAT_BIN)
  {
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat, RTC_AlarmStruct->AlarmTime.Hours,
 8016f22:	7993      	ldrb	r3, [r2, #6]
 8016f24:	7914      	ldrb	r4, [r2, #4]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8016f26:	6c01      	ldr	r1, [r0, #64]	; 0x40
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8016f28:	433b      	orrs	r3, r7
 8016f2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016f2e:	7954      	ldrb	r4, [r2, #5]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8016f30:	f021 117f 	bic.w	r1, r1, #8323199	; 0x7f007f
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8016f34:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8016f38:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8016f3c:	430b      	orrs	r3, r1
 8016f3e:	6403      	str	r3, [r0, #64]	; 0x40
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 8016f40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016f42:	6892      	ldr	r2, [r2, #8]
 8016f44:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8016f48:	4313      	orrs	r3, r2
 8016f4a:	6403      	str	r3, [r0, #64]	; 0x40
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8016f4c:	23ff      	movs	r3, #255	; 0xff
 8016f4e:	6243      	str	r3, [r0, #36]	; 0x24

  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);

  return SUCCESS;
}
 8016f50:	2001      	movs	r0, #1
 8016f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8016f54:	6c03      	ldr	r3, [r0, #64]	; 0x40
      LL_RTC_ALMA_SetDay(RTCx, __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmDateWeekDay));
 8016f56:	210a      	movs	r1, #10
 8016f58:	fbb4 f5f1 	udiv	r5, r4, r1
 8016f5c:	fb01 4115 	mls	r1, r1, r5, r4
 8016f60:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8016f64:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8016f68:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8016f6c:	6401      	str	r1, [r0, #64]	; 0x40
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 8016f6e:	7993      	ldrb	r3, [r2, #6]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8016f70:	6c06      	ldr	r6, [r0, #64]	; 0x40
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 8016f72:	7914      	ldrb	r4, [r2, #4]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 8016f74:	7951      	ldrb	r1, [r2, #5]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 8016f76:	250a      	movs	r5, #10
 8016f78:	f026 167f 	bic.w	r6, r6, #8323199	; 0x7f007f
 8016f7c:	fbb3 fcf5 	udiv	ip, r3, r5
 8016f80:	fb05 331c 	mls	r3, r5, ip, r3
 8016f84:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8016f88:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
 8016f8c:	433e      	orrs	r6, r7
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8016f8e:	b2db      	uxtb	r3, r3
 8016f90:	4333      	orrs	r3, r6
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 8016f92:	fbb4 f6f5 	udiv	r6, r4, r5
 8016f96:	fb05 4416 	mls	r4, r5, r6, r4
 8016f9a:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8016f9e:	b2e4      	uxtb	r4, r4
 8016fa0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 8016fa4:	fbb1 f4f5 	udiv	r4, r1, r5
 8016fa8:	fb05 1114 	mls	r1, r5, r4, r1
 8016fac:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8016fb0:	b2c9      	uxtb	r1, r1
 8016fb2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8016fb6:	e7c2      	b.n	8016f3e <LL_RTC_ALMA_Init+0x50>
  SET_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8016fb8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016fbe:	6403      	str	r3, [r0, #64]	; 0x40
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_DU, WeekDay << RTC_ALRMAR_DU_Pos);
 8016fc0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016fc2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8016fc6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8016fca:	6403      	str	r3, [r0, #64]	; 0x40
  if (RTC_Format != LL_RTC_FORMAT_BIN)
 8016fcc:	2900      	cmp	r1, #0
 8016fce:	d0ce      	beq.n	8016f6e <LL_RTC_ALMA_Init+0x80>
 8016fd0:	e7a7      	b.n	8016f22 <LL_RTC_ALMA_Init+0x34>

08016fd2 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8016fd2:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8016fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016fd8:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF)) ? 1U : 0U);
 8016fda:	68c2      	ldr	r2, [r0, #12]
 8016fdc:	0651      	lsls	r1, r2, #25
{
 8016fde:	4603      	mov	r3, r0
 8016fe0:	d41d      	bmi.n	801701e <LL_RTC_EnterInitMode+0x4c>
  SET_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8016fe2:	68c2      	ldr	r2, [r0, #12]
 8016fe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016fe8:	60c2      	str	r2, [r0, #12]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF)) ? 1U : 0U);
 8016fea:	68c2      	ldr	r2, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8016fec:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8016ff0:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8016ff4:	2001      	movs	r0, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8016ff6:	9c01      	ldr	r4, [sp, #4]
 8016ff8:	b104      	cbz	r4, 8016ffc <LL_RTC_EnterInitMode+0x2a>
 8016ffa:	b10a      	cbz	r2, 8017000 <LL_RTC_EnterInitMode+0x2e>
        status = ERROR;
      }
    }
  }
  return status;
}
 8016ffc:	b002      	add	sp, #8
 8016ffe:	bd10      	pop	{r4, pc}
 8017000:	690a      	ldr	r2, [r1, #16]
 8017002:	03d2      	lsls	r2, r2, #15
        timeout --;
 8017004:	bf42      	ittt	mi
 8017006:	9a01      	ldrmi	r2, [sp, #4]
 8017008:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 801700c:	9201      	strmi	r2, [sp, #4]
 801700e:	68da      	ldr	r2, [r3, #12]
      if (timeout == 0U)
 8017010:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8017012:	2c00      	cmp	r4, #0
 8017014:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8017018:	bf08      	it	eq
 801701a:	2000      	moveq	r0, #0
 801701c:	e7eb      	b.n	8016ff6 <LL_RTC_EnterInitMode+0x24>
  ErrorStatus status = SUCCESS;
 801701e:	2001      	movs	r0, #1
 8017020:	e7ec      	b.n	8016ffc <LL_RTC_EnterInitMode+0x2a>

08017022 <LL_RTC_Init>:
{
 8017022:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8017024:	23ca      	movs	r3, #202	; 0xca
 8017026:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8017028:	2353      	movs	r3, #83	; 0x53
 801702a:	6243      	str	r3, [r0, #36]	; 0x24
 801702c:	4604      	mov	r4, r0
 801702e:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8017030:	f7ff ffcf 	bl	8016fd2 <LL_RTC_EnterInitMode>
 8017034:	b1c8      	cbz	r0, 801706a <LL_RTC_Init+0x48>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8017036:	69a3      	ldr	r3, [r4, #24]
 8017038:	682a      	ldr	r2, [r5, #0]
 801703a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801703e:	4313      	orrs	r3, r2
 8017040:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8017042:	6923      	ldr	r3, [r4, #16]
 8017044:	68aa      	ldr	r2, [r5, #8]
 8017046:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801704a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801704e:	4313      	orrs	r3, r2
 8017050:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8017052:	6923      	ldr	r3, [r4, #16]
 8017054:	686a      	ldr	r2, [r5, #4]
 8017056:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 801705a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801705e:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8017060:	68e3      	ldr	r3, [r4, #12]
 8017062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017066:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8017068:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 801706a:	23ff      	movs	r3, #255	; 0xff
 801706c:	6263      	str	r3, [r4, #36]	; 0x24
}
 801706e:	bd38      	pop	{r3, r4, r5, pc}

08017070 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8017070:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8017072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017076:	9201      	str	r2, [sp, #4]
  WRITE_REG(RTCx->ICSR, (~((RTC_ICSR_RSF | RTC_ICSR_INIT) & 0x000000FFU) | (RTCx->ICSR & RTC_ICSR_INIT)));
 8017078:	68c2      	ldr	r2, [r0, #12]
 801707a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801707e:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8017082:	60c2      	str	r2, [r0, #12]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_RSF) == (RTC_ICSR_RSF)) ? 1U : 0U);
 8017084:	68c2      	ldr	r2, [r0, #12]
{
 8017086:	4603      	mov	r3, r0
 8017088:	f3c2 1240 	ubfx	r2, r2, #5, #1
 801708c:	2001      	movs	r0, #1
 801708e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8017092:	9c01      	ldr	r4, [sp, #4]
 8017094:	b96c      	cbnz	r4, 80170b2 <LL_RTC_WaitForSynchro+0x42>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8017096:	b150      	cbz	r0, 80170ae <LL_RTC_WaitForSynchro+0x3e>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8017098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801709c:	9201      	str	r2, [sp, #4]
 801709e:	68da      	ldr	r2, [r3, #12]
 80170a0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 80170a4:	f3c2 1240 	ubfx	r2, r2, #5, #1
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 80170a8:	9c01      	ldr	r4, [sp, #4]
 80170aa:	b104      	cbz	r4, 80170ae <LL_RTC_WaitForSynchro+0x3e>
 80170ac:	b192      	cbz	r2, 80170d4 <LL_RTC_WaitForSynchro+0x64>
      }
    }
  }

  return (status);
}
 80170ae:	b002      	add	sp, #8
 80170b0:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 80170b2:	2a00      	cmp	r2, #0
 80170b4:	d0ef      	beq.n	8017096 <LL_RTC_WaitForSynchro+0x26>
 80170b6:	690a      	ldr	r2, [r1, #16]
 80170b8:	03d4      	lsls	r4, r2, #15
      timeout--;
 80170ba:	bf42      	ittt	mi
 80170bc:	9a01      	ldrmi	r2, [sp, #4]
 80170be:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 80170c2:	9201      	strmi	r2, [sp, #4]
 80170c4:	68da      	ldr	r2, [r3, #12]
    if (timeout == 0U)
 80170c6:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 80170c8:	2c00      	cmp	r4, #0
 80170ca:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80170ce:	bf08      	it	eq
 80170d0:	2000      	moveq	r0, #0
 80170d2:	e7de      	b.n	8017092 <LL_RTC_WaitForSynchro+0x22>
 80170d4:	690a      	ldr	r2, [r1, #16]
 80170d6:	03d2      	lsls	r2, r2, #15
        timeout--;
 80170d8:	bf42      	ittt	mi
 80170da:	9a01      	ldrmi	r2, [sp, #4]
 80170dc:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 80170e0:	9201      	strmi	r2, [sp, #4]
 80170e2:	68da      	ldr	r2, [r3, #12]
      if (timeout == 0U)
 80170e4:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 80170e6:	2c00      	cmp	r4, #0
 80170e8:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80170ec:	bf08      	it	eq
 80170ee:	2000      	moveq	r0, #0
 80170f0:	e7da      	b.n	80170a8 <LL_RTC_WaitForSynchro+0x38>

080170f2 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80170f2:	680a      	ldr	r2, [r1, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80170f4:	684b      	ldr	r3, [r1, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80170f6:	0912      	lsrs	r2, r2, #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80170f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80170fc:	3201      	adds	r2, #1
 80170fe:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8017102:	4358      	muls	r0, r3
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8017104:	688b      	ldr	r3, [r1, #8]
 8017106:	0f5b      	lsrs	r3, r3, #29
 8017108:	3301      	adds	r3, #1
}
 801710a:	fbb0 f0f3 	udiv	r0, r0, r3
 801710e:	4770      	bx	lr

08017110 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8017110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017114:	6818      	ldr	r0, [r3, #0]
 8017116:	f080 7000 	eor.w	r0, r0, #33554432	; 0x2000000
}
 801711a:	f3c0 6040 	ubfx	r0, r0, #25, #1
 801711e:	4770      	bx	lr

08017120 <z_device_state_init>:
}
 8017120:	4770      	bx	lr

08017122 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8017122:	b138      	cbz	r0, 8017134 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8017124:	68c3      	ldr	r3, [r0, #12]
 8017126:	8818      	ldrh	r0, [r3, #0]
 8017128:	f3c0 0008 	ubfx	r0, r0, #0, #9
 801712c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8017130:	4258      	negs	r0, r3
 8017132:	4158      	adcs	r0, r3
}
 8017134:	4770      	bx	lr

08017136 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8017136:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8017138:	ab0b      	add	r3, sp, #44	; 0x2c
 801713a:	9305      	str	r3, [sp, #20]
 801713c:	9303      	str	r3, [sp, #12]
 801713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017140:	9302      	str	r3, [sp, #8]
 8017142:	2300      	movs	r3, #0
 8017144:	e9cd 3300 	strd	r3, r3, [sp]
 8017148:	2201      	movs	r2, #1
 801714a:	4618      	mov	r0, r3
 801714c:	f7ed fadc 	bl	8004708 <z_impl_z_log_msg2_runtime_vcreate>
}
 8017150:	b007      	add	sp, #28
 8017152:	f85d fb04 	ldr.w	pc, [sp], #4

08017156 <arch_system_halt>:
	__asm__ volatile(
 8017156:	f04f 0210 	mov.w	r2, #16
 801715a:	f3ef 8311 	mrs	r3, BASEPRI
 801715e:	f382 8812 	msr	BASEPRI_MAX, r2
 8017162:	f3bf 8f6f 	isb	sy
	for (;;) {
 8017166:	e7fe      	b.n	8017166 <arch_system_halt+0x10>

08017168 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
 8017168:	f000 bb89 	b.w	801787e <memset>

0801716c <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 801716c:	f000 bb5f 	b.w	801782e <memcpy>

08017170 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8017170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017172:	4604      	mov	r4, r0
 8017174:	460d      	mov	r5, r1
 8017176:	f04f 0310 	mov.w	r3, #16
 801717a:	f3ef 8611 	mrs	r6, BASEPRI
 801717e:	f383 8812 	msr	BASEPRI_MAX, r3
 8017182:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8017186:	6947      	ldr	r7, [r0, #20]
 8017188:	b977      	cbnz	r7, 80171a8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 801718a:	f000 f956 	bl	801743a <z_unpend_first_thread>

		if (pending_thread != NULL) {
 801718e:	b158      	cbz	r0, 80171a8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8017190:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8017192:	6142      	str	r2, [r0, #20]
 8017194:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
 8017196:	f000 f8df 	bl	8017358 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 801719a:	4631      	mov	r1, r6
 801719c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 80171a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 80171a4:	f7f9 b88c 	b.w	80102c0 <z_reschedule>
	**(char ***) mem = slab->free_list;
 80171a8:	682b      	ldr	r3, [r5, #0]
 80171aa:	6962      	ldr	r2, [r4, #20]
 80171ac:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 80171ae:	682b      	ldr	r3, [r5, #0]
 80171b0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
 80171b2:	69a3      	ldr	r3, [r4, #24]
 80171b4:	3b01      	subs	r3, #1
 80171b6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 80171b8:	f386 8811 	msr	BASEPRI, r6
 80171bc:	f3bf 8f6f 	isb	sy
}
 80171c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080171c2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80171c2:	f3ef 8005 	mrs	r0, IPSR
}
 80171c6:	3800      	subs	r0, #0
 80171c8:	bf18      	it	ne
 80171ca:	2001      	movne	r0, #1
 80171cc:	4770      	bx	lr

080171ce <z_impl_k_thread_name_set>:
}
 80171ce:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80171d2:	4770      	bx	lr

080171d4 <k_thread_name_get>:
}
 80171d4:	2000      	movs	r0, #0
 80171d6:	4770      	bx	lr

080171d8 <z_impl_k_thread_start>:
	z_sched_start(thread);
 80171d8:	f7f9 b96a 	b.w	80104b0 <z_sched_start>

080171dc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 80171dc:	b508      	push	{r3, lr}
	__asm__ volatile(
 80171de:	f04f 0210 	mov.w	r2, #16
 80171e2:	f3ef 8311 	mrs	r3, BASEPRI
 80171e6:	f382 8812 	msr	BASEPRI_MAX, r2
 80171ea:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80171ee:	f7ed fb95 	bl	800491c <arch_cpu_idle>
 80171f2:	e7f4      	b.n	80171de <idle+0x2>

080171f4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 80171f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80171f8:	428b      	cmp	r3, r1
 80171fa:	d001      	beq.n	8017200 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 80171fc:	f7f9 b9c8 	b.w	8010590 <z_set_prio>
}
 8017200:	2000      	movs	r0, #0
 8017202:	4770      	bx	lr

08017204 <z_impl_k_mutex_init>:
{
 8017204:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8017206:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 8017208:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 801720c:	e9c3 3300 	strd	r3, r3, [r3]
}
 8017210:	4770      	bx	lr

08017212 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8017212:	b15a      	cbz	r2, 801722c <z_impl_k_sem_init+0x1a>
 8017214:	428a      	cmp	r2, r1
 8017216:	d309      	bcc.n	801722c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 8017218:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 801721c:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8017220:	e9c0 0000 	strd	r0, r0, [r0]
 8017224:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 8017228:	2000      	movs	r0, #0
 801722a:	4770      	bx	lr
		return -EINVAL;
 801722c:	f06f 0015 	mvn.w	r0, #21
}
 8017230:	4770      	bx	lr

08017232 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 8017232:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 8017234:	2301      	movs	r3, #1
 8017236:	408b      	lsls	r3, r1
 8017238:	ea22 0303 	bic.w	r3, r2, r3
 801723c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 801723e:	fa22 f001 	lsr.w	r0, r2, r1
}
 8017242:	f000 0001 	and.w	r0, r0, #1
 8017246:	4770      	bx	lr

08017248 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 8017248:	b120      	cbz	r0, 8017254 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 801724a:	2200      	movs	r2, #0
 801724c:	4611      	mov	r1, r2
 801724e:	3088      	adds	r0, #136	; 0x88
 8017250:	f000 b91c 	b.w	801748c <z_sched_wake>
}
 8017254:	4770      	bx	lr

08017256 <k_work_init>:
{
 8017256:	b538      	push	{r3, r4, r5, lr}
 8017258:	4604      	mov	r4, r0
 801725a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 801725c:	2210      	movs	r2, #16
 801725e:	2100      	movs	r1, #0
 8017260:	f000 fb0d 	bl	801787e <memset>
 8017264:	6065      	str	r5, [r4, #4]
}
 8017266:	bd38      	pop	{r3, r4, r5, pc}

08017268 <k_work_submit_to_queue>:
{
 8017268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801726a:	9001      	str	r0, [sp, #4]
 801726c:	4608      	mov	r0, r1
 801726e:	f04f 0310 	mov.w	r3, #16
 8017272:	f3ef 8511 	mrs	r5, BASEPRI
 8017276:	f383 8812 	msr	BASEPRI_MAX, r3
 801727a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 801727e:	a901      	add	r1, sp, #4
 8017280:	f7f8 ff54 	bl	801012c <submit_to_queue_locked>
 8017284:	4604      	mov	r4, r0
	__asm__ volatile(
 8017286:	f385 8811 	msr	BASEPRI, r5
 801728a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 801728e:	2800      	cmp	r0, #0
 8017290:	dd04      	ble.n	801729c <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
 8017292:	f7f9 fac5 	bl	8010820 <z_impl_k_is_preempt_thread>
 8017296:	b108      	cbz	r0, 801729c <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
 8017298:	f7f9 fa1c 	bl	80106d4 <z_impl_k_yield>
}
 801729c:	4620      	mov	r0, r4
 801729e:	b003      	add	sp, #12
 80172a0:	bd30      	pop	{r4, r5, pc}

080172a2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 80172a2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80172a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80172a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80172aa:	2300      	movs	r3, #0
	node->prev = NULL;
 80172ac:	e9c0 3300 	strd	r3, r3, [r0]
}
 80172b0:	4770      	bx	lr

080172b2 <unpend_thread_no_timeout>:
{
 80172b2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 80172b4:	f7ff fff5 	bl	80172a2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80172b8:	7b43      	ldrb	r3, [r0, #13]
 80172ba:	f023 0302 	bic.w	r3, r3, #2
 80172be:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 80172c0:	2300      	movs	r3, #0
 80172c2:	6083      	str	r3, [r0, #8]
}
 80172c4:	bd08      	pop	{r3, pc}

080172c6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 80172c6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80172ca:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 80172ce:	4283      	cmp	r3, r0
		return b2 - b1;
 80172d0:	bf14      	ite	ne
 80172d2:	1ac0      	subne	r0, r0, r3
	return 0;
 80172d4:	2000      	moveq	r0, #0
}
 80172d6:	4770      	bx	lr

080172d8 <z_unpend_thread_no_timeout>:
{
 80172d8:	b508      	push	{r3, lr}
	__asm__ volatile(
 80172da:	f04f 0310 	mov.w	r3, #16
 80172de:	f3ef 8111 	mrs	r1, BASEPRI
 80172e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80172e6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 80172ea:	f7ff ffe2 	bl	80172b2 <unpend_thread_no_timeout>
	__asm__ volatile(
 80172ee:	f381 8811 	msr	BASEPRI, r1
 80172f2:	f3bf 8f6f 	isb	sy
}
 80172f6:	bd08      	pop	{r3, pc}

080172f8 <z_unpend_thread>:
{
 80172f8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80172fa:	f04f 0310 	mov.w	r3, #16
 80172fe:	f3ef 8411 	mrs	r4, BASEPRI
 8017302:	f383 8812 	msr	BASEPRI_MAX, r3
 8017306:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 801730a:	f7ff ffd2 	bl	80172b2 <unpend_thread_no_timeout>
	__asm__ volatile(
 801730e:	f384 8811 	msr	BASEPRI, r4
 8017312:	f3bf 8f6f 	isb	sy
}
 8017316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801731a:	3018      	adds	r0, #24
 801731c:	f000 b8d3 	b.w	80174c6 <z_abort_timeout>

08017320 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8017320:	4603      	mov	r3, r0
 8017322:	b920      	cbnz	r0, 801732e <z_reschedule_irqlock+0xe>
 8017324:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8017328:	b90a      	cbnz	r2, 801732e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 801732a:	f7ed bbbb 	b.w	8004aa4 <arch_swap>
 801732e:	f383 8811 	msr	BASEPRI, r3
 8017332:	f3bf 8f6f 	isb	sy
}
 8017336:	4770      	bx	lr

08017338 <z_reschedule_unlocked>:
	__asm__ volatile(
 8017338:	f04f 0310 	mov.w	r3, #16
 801733c:	f3ef 8011 	mrs	r0, BASEPRI
 8017340:	f383 8812 	msr	BASEPRI_MAX, r3
 8017344:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8017348:	f7ff bfea 	b.w	8017320 <z_reschedule_irqlock>

0801734c <z_priq_dumb_best>:
{
 801734c:	4603      	mov	r3, r0
	return list->head == list;
 801734e:	6800      	ldr	r0, [r0, #0]
}
 8017350:	4283      	cmp	r3, r0
 8017352:	bf08      	it	eq
 8017354:	2000      	moveq	r0, #0
 8017356:	4770      	bx	lr

08017358 <z_ready_thread>:
{
 8017358:	b510      	push	{r4, lr}
 801735a:	f04f 0310 	mov.w	r3, #16
 801735e:	f3ef 8411 	mrs	r4, BASEPRI
 8017362:	f383 8812 	msr	BASEPRI_MAX, r3
 8017366:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 801736a:	f7f9 f86b 	bl	8010444 <ready_thread>
	__asm__ volatile(
 801736e:	f384 8811 	msr	BASEPRI, r4
 8017372:	f3bf 8f6f 	isb	sy
}
 8017376:	bd10      	pop	{r4, pc}

08017378 <z_thread_timeout>:
{
 8017378:	b510      	push	{r4, lr}
 801737a:	4601      	mov	r1, r0
	__asm__ volatile(
 801737c:	f04f 0310 	mov.w	r3, #16
 8017380:	f3ef 8411 	mrs	r4, BASEPRI
 8017384:	f383 8812 	msr	BASEPRI_MAX, r3
 8017388:	f3bf 8f6f 	isb	sy
		if (!killed) {
 801738c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8017390:	f013 0f28 	tst.w	r3, #40	; 0x28
 8017394:	d10d      	bne.n	80173b2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8017396:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 801739a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 801739c:	b10b      	cbz	r3, 80173a2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 801739e:	f7ff ff88 	bl	80172b2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80173a2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80173a6:	f023 0314 	bic.w	r3, r3, #20
 80173aa:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80173ae:	f7f9 f849 	bl	8010444 <ready_thread>
	__asm__ volatile(
 80173b2:	f384 8811 	msr	BASEPRI, r4
 80173b6:	f3bf 8f6f 	isb	sy
}
 80173ba:	bd10      	pop	{r4, pc}

080173bc <add_to_waitq_locked>:
{
 80173bc:	b538      	push	{r3, r4, r5, lr}
 80173be:	4604      	mov	r4, r0
 80173c0:	460d      	mov	r5, r1
	unready_thread(thread);
 80173c2:	f7f9 f893 	bl	80104ec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80173c6:	7b63      	ldrb	r3, [r4, #13]
 80173c8:	f043 0302 	orr.w	r3, r3, #2
 80173cc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80173ce:	b195      	cbz	r5, 80173f6 <add_to_waitq_locked+0x3a>
 80173d0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 80173d2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80173d4:	429d      	cmp	r5, r3
 80173d6:	d015      	beq.n	8017404 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80173d8:	b1a3      	cbz	r3, 8017404 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 80173da:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 80173de:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 80173e2:	4291      	cmp	r1, r2
 80173e4:	d008      	beq.n	80173f8 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 80173e6:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 80173e8:	2a00      	cmp	r2, #0
 80173ea:	dd05      	ble.n	80173f8 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 80173ec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80173ee:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 80173f2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80173f4:	605c      	str	r4, [r3, #4]
}
 80173f6:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 80173f8:	686a      	ldr	r2, [r5, #4]
 80173fa:	4293      	cmp	r3, r2
 80173fc:	d002      	beq.n	8017404 <add_to_waitq_locked+0x48>
 80173fe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8017400:	2b00      	cmp	r3, #0
 8017402:	d1ec      	bne.n	80173de <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 8017404:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8017406:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 801740a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 801740c:	606c      	str	r4, [r5, #4]
}
 801740e:	e7f2      	b.n	80173f6 <add_to_waitq_locked+0x3a>

08017410 <z_unpend1_no_timeout>:
{
 8017410:	b510      	push	{r4, lr}
	__asm__ volatile(
 8017412:	f04f 0310 	mov.w	r3, #16
 8017416:	f3ef 8411 	mrs	r4, BASEPRI
 801741a:	f383 8812 	msr	BASEPRI_MAX, r3
 801741e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8017422:	f7ff ff93 	bl	801734c <z_priq_dumb_best>
		if (thread != NULL) {
 8017426:	4601      	mov	r1, r0
 8017428:	b108      	cbz	r0, 801742e <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 801742a:	f7ff ff42 	bl	80172b2 <unpend_thread_no_timeout>
	__asm__ volatile(
 801742e:	f384 8811 	msr	BASEPRI, r4
 8017432:	f3bf 8f6f 	isb	sy
}
 8017436:	4608      	mov	r0, r1
 8017438:	bd10      	pop	{r4, pc}

0801743a <z_unpend_first_thread>:
{
 801743a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 801743c:	f04f 0310 	mov.w	r3, #16
 8017440:	f3ef 8511 	mrs	r5, BASEPRI
 8017444:	f383 8812 	msr	BASEPRI_MAX, r3
 8017448:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 801744c:	f7ff ff7e 	bl	801734c <z_priq_dumb_best>
		if (thread != NULL) {
 8017450:	4604      	mov	r4, r0
 8017452:	b120      	cbz	r0, 801745e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 8017454:	f7ff ff2d 	bl	80172b2 <unpend_thread_no_timeout>
 8017458:	3018      	adds	r0, #24
 801745a:	f000 f834 	bl	80174c6 <z_abort_timeout>
	__asm__ volatile(
 801745e:	f385 8811 	msr	BASEPRI, r5
 8017462:	f3bf 8f6f 	isb	sy
}
 8017466:	4620      	mov	r0, r4
 8017468:	bd38      	pop	{r3, r4, r5, pc}

0801746a <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 801746a:	17c1      	asrs	r1, r0, #31
		t += off;
 801746c:	3063      	adds	r0, #99	; 0x63
{
 801746e:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 8017470:	f04f 0264 	mov.w	r2, #100	; 0x64
 8017474:	f04f 0300 	mov.w	r3, #0
 8017478:	f141 0100 	adc.w	r1, r1, #0
 801747c:	f7e9 fda4 	bl	8000fc8 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 8017480:	17c1      	asrs	r1, r0, #31
 8017482:	f7f9 f967 	bl	8010754 <z_tick_sleep>
}
 8017486:	2364      	movs	r3, #100	; 0x64
 8017488:	4358      	muls	r0, r3
 801748a:	bd08      	pop	{r3, pc}

0801748c <z_sched_wake>:
{
 801748c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 801748e:	f04f 0310 	mov.w	r3, #16
 8017492:	f3ef 8511 	mrs	r5, BASEPRI
 8017496:	f383 8812 	msr	BASEPRI_MAX, r3
 801749a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 801749e:	f7ff ff55 	bl	801734c <z_priq_dumb_best>
		if (thread != NULL) {
 80174a2:	4604      	mov	r4, r0
 80174a4:	b150      	cbz	r0, 80174bc <z_sched_wake+0x30>
 80174a6:	67c1      	str	r1, [r0, #124]	; 0x7c
 80174a8:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 80174aa:	f7ff ff02 	bl	80172b2 <unpend_thread_no_timeout>
 80174ae:	3018      	adds	r0, #24
 80174b0:	f000 f809 	bl	80174c6 <z_abort_timeout>
			ready_thread(thread);
 80174b4:	4620      	mov	r0, r4
 80174b6:	f7f8 ffc5 	bl	8010444 <ready_thread>
			ret = true;
 80174ba:	2001      	movs	r0, #1
	__asm__ volatile(
 80174bc:	f385 8811 	msr	BASEPRI, r5
 80174c0:	f3bf 8f6f 	isb	sy
}
 80174c4:	bd38      	pop	{r3, r4, r5, pc}

080174c6 <z_abort_timeout>:
{
 80174c6:	b510      	push	{r4, lr}
	__asm__ volatile(
 80174c8:	f04f 0210 	mov.w	r2, #16
 80174cc:	f3ef 8411 	mrs	r4, BASEPRI
 80174d0:	f382 8812 	msr	BASEPRI_MAX, r2
 80174d4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80174d8:	6803      	ldr	r3, [r0, #0]
 80174da:	b13b      	cbz	r3, 80174ec <z_abort_timeout+0x26>
			remove_timeout(to);
 80174dc:	f7f9 fa5e 	bl	801099c <remove_timeout>
			ret = 0;
 80174e0:	2000      	movs	r0, #0
	__asm__ volatile(
 80174e2:	f384 8811 	msr	BASEPRI, r4
 80174e6:	f3bf 8f6f 	isb	sy
}
 80174ea:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80174ec:	f06f 0015 	mvn.w	r0, #21
 80174f0:	e7f7      	b.n	80174e2 <z_abort_timeout+0x1c>

080174f2 <z_set_timeout_expiry>:
{
 80174f2:	b570      	push	{r4, r5, r6, lr}
 80174f4:	4604      	mov	r4, r0
 80174f6:	460d      	mov	r5, r1
	__asm__ volatile(
 80174f8:	f04f 0310 	mov.w	r3, #16
 80174fc:	f3ef 8611 	mrs	r6, BASEPRI
 8017500:	f383 8812 	msr	BASEPRI_MAX, r3
 8017504:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8017508:	f7f9 fa22 	bl	8010950 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 801750c:	2801      	cmp	r0, #1
 801750e:	dd05      	ble.n	801751c <z_set_timeout_expiry+0x2a>
 8017510:	42a0      	cmp	r0, r4
 8017512:	db03      	blt.n	801751c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8017514:	4629      	mov	r1, r5
 8017516:	4620      	mov	r0, r4
 8017518:	f7f7 f93e 	bl	800e798 <sys_clock_set_timeout>
	__asm__ volatile(
 801751c:	f386 8811 	msr	BASEPRI, r6
 8017520:	f3bf 8f6f 	isb	sy
}
 8017524:	bd70      	pop	{r4, r5, r6, pc}

08017526 <sys_clock_tick_get_32>:
{
 8017526:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8017528:	f7f9 fb28 	bl	8010b7c <sys_clock_tick_get>
}
 801752c:	bd08      	pop	{r3, pc}

0801752e <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 801752e:	f7f9 bb25 	b.w	8010b7c <sys_clock_tick_get>

08017532 <k_timer_init>:
	timer->status = 0U;
 8017532:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 8017534:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 8017538:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 801753c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8017540:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 8017544:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 8017546:	6343      	str	r3, [r0, #52]	; 0x34
}
 8017548:	4770      	bx	lr

0801754a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 801754a:	b510      	push	{r4, lr}
 801754c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 801754e:	f7ff ffba 	bl	80174c6 <z_abort_timeout>

	if (inactive) {
 8017552:	b9b0      	cbnz	r0, 8017582 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 8017554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017556:	b10b      	cbz	r3, 801755c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8017558:	4620      	mov	r0, r4
 801755a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 801755c:	f104 0018 	add.w	r0, r4, #24
 8017560:	f7ff ff56 	bl	8017410 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8017564:	b168      	cbz	r0, 8017582 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 8017566:	f7ff fef7 	bl	8017358 <z_ready_thread>
	__asm__ volatile(
 801756a:	f04f 0310 	mov.w	r3, #16
 801756e:	f3ef 8011 	mrs	r0, BASEPRI
 8017572:	f383 8812 	msr	BASEPRI_MAX, r3
 8017576:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 801757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 801757e:	f7ff becf 	b.w	8017320 <z_reschedule_irqlock>
 8017582:	bd10      	pop	{r4, pc}

08017584 <add_event>:
{
 8017584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017586:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8017588:	e9d0 1300 	ldrd	r1, r3, [r0]
 801758c:	4288      	cmp	r0, r1
 801758e:	4604      	mov	r4, r0
 8017590:	d00d      	beq.n	80175ae <add_event+0x2a>
	if ((pending == NULL) ||
 8017592:	b163      	cbz	r3, 80175ae <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8017594:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8017596:	b100      	cbz	r0, 801759a <add_event+0x16>
 8017598:	3860      	subs	r0, #96	; 0x60
 801759a:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 801759e:	4639      	mov	r1, r7
 80175a0:	f7ff fe91 	bl	80172c6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80175a4:	2800      	cmp	r0, #0
 80175a6:	dc02      	bgt.n	80175ae <add_event+0x2a>
	return list->head == list;
 80175a8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80175aa:	42b4      	cmp	r4, r6
 80175ac:	d109      	bne.n	80175c2 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
 80175ae:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 80175b0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 80175b4:	601d      	str	r5, [r3, #0]
	list->tail = node;
 80175b6:	6065      	str	r5, [r4, #4]
}
 80175b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 80175ba:	6863      	ldr	r3, [r4, #4]
 80175bc:	42b3      	cmp	r3, r6
 80175be:	d0f6      	beq.n	80175ae <add_event+0x2a>
 80175c0:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80175c2:	2e00      	cmp	r6, #0
 80175c4:	d0f3      	beq.n	80175ae <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
 80175c6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 80175c8:	b101      	cbz	r1, 80175cc <add_event+0x48>
 80175ca:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 80175cc:	4638      	mov	r0, r7
 80175ce:	f7ff fe7a 	bl	80172c6 <z_sched_prio_cmp>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	ddf1      	ble.n	80175ba <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
 80175d6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 80175d8:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 80175dc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 80175de:	6075      	str	r5, [r6, #4]
			return;
 80175e0:	e7ea      	b.n	80175b8 <add_event+0x34>

080175e2 <register_events>:
{
 80175e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 80175e6:	2500      	movs	r5, #0
{
 80175e8:	468b      	mov	fp, r1
 80175ea:	4614      	mov	r4, r2
 80175ec:	461f      	mov	r7, r3
 80175ee:	4682      	mov	sl, r0
	int events_registered = 0;
 80175f0:	462e      	mov	r6, r5
	event->poller = NULL;
 80175f2:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
 80175f4:	455d      	cmp	r5, fp
 80175f6:	db02      	blt.n	80175fe <register_events+0x1c>
}
 80175f8:	4630      	mov	r0, r6
 80175fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175fe:	f04f 0310 	mov.w	r3, #16
 8017602:	f3ef 8911 	mrs	r9, BASEPRI
 8017606:	f383 8812 	msr	BASEPRI_MAX, r3
 801760a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 801760e:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8017612:	f003 031f 	and.w	r3, r3, #31
 8017616:	3b01      	subs	r3, #1
 8017618:	2b07      	cmp	r3, #7
 801761a:	d80f      	bhi.n	801763c <register_events+0x5a>
 801761c:	e8df f003 	tbb	[pc, r3]
 8017620:	0a0e041e 	.word	0x0a0e041e
 8017624:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
 8017628:	f8da 3010 	ldr.w	r3, [sl, #16]
 801762c:	689b      	ldr	r3, [r3, #8]
 801762e:	b12b      	cbz	r3, 801763c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8017630:	2302      	movs	r3, #2
 8017632:	e020      	b.n	8017676 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 8017634:	f8da 3010 	ldr.w	r3, [sl, #16]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	bb8b      	cbnz	r3, 80176a0 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
 801763c:	bb47      	cbnz	r7, 8017690 <register_events+0xae>
 801763e:	7823      	ldrb	r3, [r4, #0]
 8017640:	b333      	cbz	r3, 8017690 <register_events+0xae>
	switch (event->type) {
 8017642:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8017646:	f003 031f 	and.w	r3, r3, #31
 801764a:	3b01      	subs	r3, #1
 801764c:	2b07      	cmp	r3, #7
 801764e:	d830      	bhi.n	80176b2 <register_events+0xd0>
 8017650:	e8df f003 	tbb	[pc, r3]
 8017654:	282f2833 	.word	0x282f2833
 8017658:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
 801765c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8017660:	689b      	ldr	r3, [r3, #8]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d0ea      	beq.n	801763c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
 8017666:	2301      	movs	r3, #1
 8017668:	e005      	b.n	8017676 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
 801766a:	f8da 3010 	ldr.w	r3, [sl, #16]
 801766e:	6a1b      	ldr	r3, [r3, #32]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d0e3      	beq.n	801763c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 8017674:	2310      	movs	r3, #16
	event->state |= state;
 8017676:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
 801767a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
 801767e:	f3c2 3145 	ubfx	r1, r2, #13, #6
 8017682:	430b      	orrs	r3, r1
 8017684:	f363 3252 	bfi	r2, r3, #13, #6
 8017688:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
 801768c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
 8017690:	f389 8811 	msr	BASEPRI, r9
 8017694:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 8017698:	3501      	adds	r5, #1
 801769a:	f10a 0a14 	add.w	sl, sl, #20
 801769e:	e7a9      	b.n	80175f4 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 80176a0:	2304      	movs	r3, #4
 80176a2:	e7e8      	b.n	8017676 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
 80176a4:	f8da 0010 	ldr.w	r0, [sl, #16]
 80176a8:	4622      	mov	r2, r4
 80176aa:	4651      	mov	r1, sl
 80176ac:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
 80176ae:	f7ff ff69 	bl	8017584 <add_event>
	event->poller = poller;
 80176b2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
 80176b6:	3601      	adds	r6, #1
 80176b8:	e7ea      	b.n	8017690 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
 80176ba:	f8da 0010 	ldr.w	r0, [sl, #16]
 80176be:	4622      	mov	r2, r4
 80176c0:	4651      	mov	r1, sl
 80176c2:	e7f4      	b.n	80176ae <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
 80176c4:	f8da 0010 	ldr.w	r0, [sl, #16]
 80176c8:	4622      	mov	r2, r4
 80176ca:	4651      	mov	r1, sl
 80176cc:	3024      	adds	r0, #36	; 0x24
 80176ce:	e7ee      	b.n	80176ae <register_events+0xcc>

080176d0 <signal_poll_event>:
{
 80176d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
 80176d4:	6884      	ldr	r4, [r0, #8]
{
 80176d6:	4605      	mov	r5, r0
 80176d8:	460e      	mov	r6, r1
	if (poller != NULL) {
 80176da:	b144      	cbz	r4, 80176ee <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 80176dc:	7863      	ldrb	r3, [r4, #1]
 80176de:	2b01      	cmp	r3, #1
 80176e0:	d136      	bne.n	8017750 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
 80176e2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 80176e6:	f013 0302 	ands.w	r3, r3, #2
 80176ea:	d10a      	bne.n	8017702 <signal_poll_event+0x32>
		poller->is_polling = false;
 80176ec:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 80176ee:	68eb      	ldr	r3, [r5, #12]
 80176f0:	f3c3 3145 	ubfx	r1, r3, #13, #6
 80176f4:	430e      	orrs	r6, r1
	event->poller = NULL;
 80176f6:	2000      	movs	r0, #0
	event->state |= state;
 80176f8:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
 80176fc:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 80176fe:	60eb      	str	r3, [r5, #12]
	return retcode;
 8017700:	e00b      	b.n	801771a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
 8017702:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 8017706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801770a:	bf08      	it	eq
 801770c:	f112 0f02 	cmneq.w	r2, #2
 8017710:	d105      	bne.n	801771e <signal_poll_event+0x4e>
		poller->is_polling = false;
 8017712:	2300      	movs	r3, #0
 8017714:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
 8017716:	f06f 000a 	mvn.w	r0, #10
}
 801771a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801771e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
 8017722:	4640      	mov	r0, r8
 8017724:	f7ff fde8 	bl	80172f8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8017728:	2e08      	cmp	r6, #8
 801772a:	bf0c      	ite	eq
 801772c:	f06f 0303 	mvneq.w	r3, #3
 8017730:	2300      	movne	r3, #0
 8017732:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8017734:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 8017738:	06db      	lsls	r3, r3, #27
 801773a:	d102      	bne.n	8017742 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
 801773c:	f854 7c48 	ldr.w	r7, [r4, #-72]
 8017740:	b10f      	cbz	r7, 8017746 <signal_poll_event+0x76>
		poller->is_polling = false;
 8017742:	2300      	movs	r3, #0
 8017744:	e7d2      	b.n	80176ec <signal_poll_event+0x1c>
	z_ready_thread(thread);
 8017746:	4640      	mov	r0, r8
 8017748:	f7ff fe06 	bl	8017358 <z_ready_thread>
		poller->is_polling = false;
 801774c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 801774e:	e7ce      	b.n	80176ee <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 8017750:	2b02      	cmp	r3, #2
 8017752:	d1f6      	bne.n	8017742 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 8017754:	7823      	ldrb	r3, [r4, #0]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d0c9      	beq.n	80176ee <signal_poll_event+0x1e>
 801775a:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801775e:	2f00      	cmp	r7, #0
 8017760:	d0f4      	beq.n	801774c <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
 8017762:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 8017766:	f1a4 0914 	sub.w	r9, r4, #20
 801776a:	f104 0014 	add.w	r0, r4, #20
 801776e:	f7ff feaa 	bl	80174c6 <z_abort_timeout>
		twork->poll_result = 0;
 8017772:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 8017776:	4649      	mov	r1, r9
 8017778:	4638      	mov	r0, r7
 801777a:	f7ff fd75 	bl	8017268 <k_work_submit_to_queue>
		poller->is_polling = false;
 801777e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 8017782:	e7b4      	b.n	80176ee <signal_poll_event+0x1e>

08017784 <clear_event_registrations>:
	while (num_events--) {
 8017784:	2314      	movs	r3, #20
{
 8017786:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017788:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
 801778c:	2400      	movs	r4, #0
 801778e:	2601      	movs	r6, #1
	while (num_events--) {
 8017790:	b901      	cbnz	r1, 8017794 <clear_event_registrations+0x10>
}
 8017792:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
 8017794:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
 8017798:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
 801779c:	f003 031f 	and.w	r3, r3, #31
 80177a0:	2b08      	cmp	r3, #8
 80177a2:	f1a0 0714 	sub.w	r7, r0, #20
 80177a6:	d80d      	bhi.n	80177c4 <clear_event_registrations+0x40>
 80177a8:	fa06 f303 	lsl.w	r3, r6, r3
 80177ac:	f413 7f8b 	tst.w	r3, #278	; 0x116
 80177b0:	d008      	beq.n	80177c4 <clear_event_registrations+0x40>
	return node->next != NULL;
 80177b2:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80177b6:	b12b      	cbz	r3, 80177c4 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
 80177b8:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
 80177bc:	602b      	str	r3, [r5, #0]
	next->prev = prev;
 80177be:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 80177c0:	e940 4405 	strd	r4, r4, [r0, #-20]
 80177c4:	f382 8811 	msr	BASEPRI, r2
 80177c8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80177cc:	f04f 0310 	mov.w	r3, #16
 80177d0:	f3ef 8211 	mrs	r2, BASEPRI
 80177d4:	f383 8812 	msr	BASEPRI_MAX, r3
 80177d8:	f3bf 8f6f 	isb	sy
 80177dc:	3901      	subs	r1, #1
 80177de:	4638      	mov	r0, r7
 80177e0:	e7d6      	b.n	8017790 <clear_event_registrations+0xc>

080177e2 <z_handle_obj_poll_events>:
{
 80177e2:	4603      	mov	r3, r0
	return list->head == list;
 80177e4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 80177e6:	4283      	cmp	r3, r0
 80177e8:	d008      	beq.n	80177fc <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 80177ea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 80177ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80177f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80177f2:	2300      	movs	r3, #0
	node->prev = NULL;
 80177f4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 80177f8:	f7ff bf6a 	b.w	80176d0 <signal_poll_event>
}
 80177fc:	4770      	bx	lr

080177fe <k_heap_init>:
{
 80177fe:	b410      	push	{r4}
 8017800:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8017804:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8017808:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 801780a:	f7fa bbce 	b.w	8011faa <sys_heap_init>

0801780e <memcmp>:
 801780e:	b510      	push	{r4, lr}
 8017810:	3901      	subs	r1, #1
 8017812:	4402      	add	r2, r0
 8017814:	4290      	cmp	r0, r2
 8017816:	d101      	bne.n	801781c <memcmp+0xe>
 8017818:	2000      	movs	r0, #0
 801781a:	e005      	b.n	8017828 <memcmp+0x1a>
 801781c:	7803      	ldrb	r3, [r0, #0]
 801781e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017822:	42a3      	cmp	r3, r4
 8017824:	d001      	beq.n	801782a <memcmp+0x1c>
 8017826:	1b18      	subs	r0, r3, r4
 8017828:	bd10      	pop	{r4, pc}
 801782a:	3001      	adds	r0, #1
 801782c:	e7f2      	b.n	8017814 <memcmp+0x6>

0801782e <memcpy>:
 801782e:	440a      	add	r2, r1
 8017830:	4291      	cmp	r1, r2
 8017832:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017836:	d100      	bne.n	801783a <memcpy+0xc>
 8017838:	4770      	bx	lr
 801783a:	b510      	push	{r4, lr}
 801783c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017840:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017844:	4291      	cmp	r1, r2
 8017846:	d1f9      	bne.n	801783c <memcpy+0xe>
 8017848:	bd10      	pop	{r4, pc}

0801784a <memmove>:
 801784a:	4288      	cmp	r0, r1
 801784c:	b510      	push	{r4, lr}
 801784e:	eb01 0402 	add.w	r4, r1, r2
 8017852:	d902      	bls.n	801785a <memmove+0x10>
 8017854:	4284      	cmp	r4, r0
 8017856:	4623      	mov	r3, r4
 8017858:	d807      	bhi.n	801786a <memmove+0x20>
 801785a:	1e43      	subs	r3, r0, #1
 801785c:	42a1      	cmp	r1, r4
 801785e:	d008      	beq.n	8017872 <memmove+0x28>
 8017860:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017864:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017868:	e7f8      	b.n	801785c <memmove+0x12>
 801786a:	4402      	add	r2, r0
 801786c:	4601      	mov	r1, r0
 801786e:	428a      	cmp	r2, r1
 8017870:	d100      	bne.n	8017874 <memmove+0x2a>
 8017872:	bd10      	pop	{r4, pc}
 8017874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017878:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801787c:	e7f7      	b.n	801786e <memmove+0x24>

0801787e <memset>:
 801787e:	4402      	add	r2, r0
 8017880:	4603      	mov	r3, r0
 8017882:	4293      	cmp	r3, r2
 8017884:	d100      	bne.n	8017888 <memset+0xa>
 8017886:	4770      	bx	lr
 8017888:	f803 1b01 	strb.w	r1, [r3], #1
 801788c:	e7f9      	b.n	8017882 <memset+0x4>

0801788e <strchr>:
 801788e:	b2c9      	uxtb	r1, r1
 8017890:	4603      	mov	r3, r0
 8017892:	4618      	mov	r0, r3
 8017894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017898:	b112      	cbz	r2, 80178a0 <strchr+0x12>
 801789a:	428a      	cmp	r2, r1
 801789c:	d1f9      	bne.n	8017892 <strchr+0x4>
 801789e:	4770      	bx	lr
 80178a0:	2900      	cmp	r1, #0
 80178a2:	bf18      	it	ne
 80178a4:	2000      	movne	r0, #0
 80178a6:	4770      	bx	lr

080178a8 <strcpy>:
 80178a8:	4603      	mov	r3, r0
 80178aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178ae:	f803 2b01 	strb.w	r2, [r3], #1
 80178b2:	2a00      	cmp	r2, #0
 80178b4:	d1f9      	bne.n	80178aa <strcpy+0x2>
 80178b6:	4770      	bx	lr

080178b8 <__strcpy_chk>:
 80178b8:	b570      	push	{r4, r5, r6, lr}
 80178ba:	4605      	mov	r5, r0
 80178bc:	4608      	mov	r0, r1
 80178be:	4616      	mov	r6, r2
 80178c0:	460c      	mov	r4, r1
 80178c2:	f7e9 fd80 	bl	80013c6 <strlen>
 80178c6:	1c42      	adds	r2, r0, #1
 80178c8:	42b2      	cmp	r2, r6
 80178ca:	d901      	bls.n	80178d0 <__strcpy_chk+0x18>
 80178cc:	f7ed fdae 	bl	800542c <__chk_fail>
 80178d0:	42ac      	cmp	r4, r5
 80178d2:	d804      	bhi.n	80178de <__strcpy_chk+0x26>
 80178d4:	18a3      	adds	r3, r4, r2
 80178d6:	429d      	cmp	r5, r3
 80178d8:	d3f8      	bcc.n	80178cc <__strcpy_chk+0x14>
 80178da:	42ac      	cmp	r4, r5
 80178dc:	d102      	bne.n	80178e4 <__strcpy_chk+0x2c>
 80178de:	18ab      	adds	r3, r5, r2
 80178e0:	429c      	cmp	r4, r3
 80178e2:	d3f3      	bcc.n	80178cc <__strcpy_chk+0x14>
 80178e4:	4621      	mov	r1, r4
 80178e6:	4628      	mov	r0, r5
 80178e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178ec:	f7ff bf9f 	b.w	801782e <memcpy>

080178f0 <strncmp>:
 80178f0:	b510      	push	{r4, lr}
 80178f2:	4603      	mov	r3, r0
 80178f4:	b172      	cbz	r2, 8017914 <strncmp+0x24>
 80178f6:	3901      	subs	r1, #1
 80178f8:	1884      	adds	r4, r0, r2
 80178fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80178fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017902:	4290      	cmp	r0, r2
 8017904:	d101      	bne.n	801790a <strncmp+0x1a>
 8017906:	42a3      	cmp	r3, r4
 8017908:	d101      	bne.n	801790e <strncmp+0x1e>
 801790a:	1a80      	subs	r0, r0, r2
 801790c:	bd10      	pop	{r4, pc}
 801790e:	2800      	cmp	r0, #0
 8017910:	d1f3      	bne.n	80178fa <strncmp+0xa>
 8017912:	e7fa      	b.n	801790a <strncmp+0x1a>
 8017914:	4610      	mov	r0, r2
 8017916:	e7f9      	b.n	801790c <strncmp+0x1c>

08017918 <strncpy>:
 8017918:	b510      	push	{r4, lr}
 801791a:	3901      	subs	r1, #1
 801791c:	4603      	mov	r3, r0
 801791e:	b132      	cbz	r2, 801792e <strncpy+0x16>
 8017920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017924:	f803 4b01 	strb.w	r4, [r3], #1
 8017928:	3a01      	subs	r2, #1
 801792a:	2c00      	cmp	r4, #0
 801792c:	d1f7      	bne.n	801791e <strncpy+0x6>
 801792e:	441a      	add	r2, r3
 8017930:	2100      	movs	r1, #0
 8017932:	4293      	cmp	r3, r2
 8017934:	d100      	bne.n	8017938 <strncpy+0x20>
 8017936:	bd10      	pop	{r4, pc}
 8017938:	f803 1b01 	strb.w	r1, [r3], #1
 801793c:	e7f9      	b.n	8017932 <strncpy+0x1a>

0801793e <strnlen>:
 801793e:	b510      	push	{r4, lr}
 8017940:	4602      	mov	r2, r0
 8017942:	4401      	add	r1, r0
 8017944:	428a      	cmp	r2, r1
 8017946:	4613      	mov	r3, r2
 8017948:	d003      	beq.n	8017952 <strnlen+0x14>
 801794a:	781c      	ldrb	r4, [r3, #0]
 801794c:	3201      	adds	r2, #1
 801794e:	2c00      	cmp	r4, #0
 8017950:	d1f8      	bne.n	8017944 <strnlen+0x6>
 8017952:	1a18      	subs	r0, r3, r0
 8017954:	bd10      	pop	{r4, pc}

08017956 <__sfmoreglue>:
 8017956:	b570      	push	{r4, r5, r6, lr}
 8017958:	2268      	movs	r2, #104	; 0x68
 801795a:	1e4d      	subs	r5, r1, #1
 801795c:	4355      	muls	r5, r2
 801795e:	460e      	mov	r6, r1
 8017960:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017964:	f7f9 fb94 	bl	8011090 <_malloc_r>
 8017968:	4604      	mov	r4, r0
 801796a:	b140      	cbz	r0, 801797e <__sfmoreglue+0x28>
 801796c:	2100      	movs	r1, #0
 801796e:	e9c0 1600 	strd	r1, r6, [r0]
 8017972:	300c      	adds	r0, #12
 8017974:	60a0      	str	r0, [r4, #8]
 8017976:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801797a:	f7ff ff80 	bl	801787e <memset>
 801797e:	4620      	mov	r0, r4
 8017980:	bd70      	pop	{r4, r5, r6, pc}

08017982 <_fwalk_reent>:
 8017982:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017986:	4606      	mov	r6, r0
 8017988:	4688      	mov	r8, r1
 801798a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801798e:	2700      	movs	r7, #0
 8017990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017994:	f1b9 0901 	subs.w	r9, r9, #1
 8017998:	d505      	bpl.n	80179a6 <_fwalk_reent+0x24>
 801799a:	6824      	ldr	r4, [r4, #0]
 801799c:	2c00      	cmp	r4, #0
 801799e:	d1f7      	bne.n	8017990 <_fwalk_reent+0xe>
 80179a0:	4638      	mov	r0, r7
 80179a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179a6:	89ab      	ldrh	r3, [r5, #12]
 80179a8:	2b01      	cmp	r3, #1
 80179aa:	d907      	bls.n	80179bc <_fwalk_reent+0x3a>
 80179ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179b0:	3301      	adds	r3, #1
 80179b2:	d003      	beq.n	80179bc <_fwalk_reent+0x3a>
 80179b4:	4629      	mov	r1, r5
 80179b6:	4630      	mov	r0, r6
 80179b8:	47c0      	blx	r8
 80179ba:	4307      	orrs	r7, r0
 80179bc:	3568      	adds	r5, #104	; 0x68
 80179be:	e7e9      	b.n	8017994 <_fwalk_reent+0x12>

080179c0 <__swhatbuf_r>:
 80179c0:	b570      	push	{r4, r5, r6, lr}
 80179c2:	460e      	mov	r6, r1
 80179c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179c8:	2900      	cmp	r1, #0
 80179ca:	b096      	sub	sp, #88	; 0x58
 80179cc:	4614      	mov	r4, r2
 80179ce:	461d      	mov	r5, r3
 80179d0:	da08      	bge.n	80179e4 <__swhatbuf_r+0x24>
 80179d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80179d6:	2200      	movs	r2, #0
 80179d8:	602a      	str	r2, [r5, #0]
 80179da:	061a      	lsls	r2, r3, #24
 80179dc:	d410      	bmi.n	8017a00 <__swhatbuf_r+0x40>
 80179de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80179e2:	e00e      	b.n	8017a02 <__swhatbuf_r+0x42>
 80179e4:	466a      	mov	r2, sp
 80179e6:	f7fa f8d7 	bl	8011b98 <_fstat_r>
 80179ea:	2800      	cmp	r0, #0
 80179ec:	dbf1      	blt.n	80179d2 <__swhatbuf_r+0x12>
 80179ee:	9a01      	ldr	r2, [sp, #4]
 80179f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80179f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80179f8:	425a      	negs	r2, r3
 80179fa:	415a      	adcs	r2, r3
 80179fc:	602a      	str	r2, [r5, #0]
 80179fe:	e7ee      	b.n	80179de <__swhatbuf_r+0x1e>
 8017a00:	2340      	movs	r3, #64	; 0x40
 8017a02:	2000      	movs	r0, #0
 8017a04:	6023      	str	r3, [r4, #0]
 8017a06:	b016      	add	sp, #88	; 0x58
 8017a08:	bd70      	pop	{r4, r5, r6, pc}

08017a0a <__sfputc_r>:
 8017a0a:	6893      	ldr	r3, [r2, #8]
 8017a0c:	3b01      	subs	r3, #1
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	b410      	push	{r4}
 8017a12:	6093      	str	r3, [r2, #8]
 8017a14:	da07      	bge.n	8017a26 <__sfputc_r+0x1c>
 8017a16:	6994      	ldr	r4, [r2, #24]
 8017a18:	42a3      	cmp	r3, r4
 8017a1a:	db01      	blt.n	8017a20 <__sfputc_r+0x16>
 8017a1c:	290a      	cmp	r1, #10
 8017a1e:	d102      	bne.n	8017a26 <__sfputc_r+0x1c>
 8017a20:	bc10      	pop	{r4}
 8017a22:	f7f9 bbb7 	b.w	8011194 <__swbuf_r>
 8017a26:	6813      	ldr	r3, [r2, #0]
 8017a28:	1c58      	adds	r0, r3, #1
 8017a2a:	6010      	str	r0, [r2, #0]
 8017a2c:	7019      	strb	r1, [r3, #0]
 8017a2e:	4608      	mov	r0, r1
 8017a30:	bc10      	pop	{r4}
 8017a32:	4770      	bx	lr

08017a34 <__sfputs_r>:
 8017a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a36:	4606      	mov	r6, r0
 8017a38:	460f      	mov	r7, r1
 8017a3a:	4614      	mov	r4, r2
 8017a3c:	18d5      	adds	r5, r2, r3
 8017a3e:	42ac      	cmp	r4, r5
 8017a40:	d101      	bne.n	8017a46 <__sfputs_r+0x12>
 8017a42:	2000      	movs	r0, #0
 8017a44:	e007      	b.n	8017a56 <__sfputs_r+0x22>
 8017a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a4a:	463a      	mov	r2, r7
 8017a4c:	4630      	mov	r0, r6
 8017a4e:	f7ff ffdc 	bl	8017a0a <__sfputc_r>
 8017a52:	1c43      	adds	r3, r0, #1
 8017a54:	d1f3      	bne.n	8017a3e <__sfputs_r+0xa>
 8017a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017a58 <_printf_common>:
 8017a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a5c:	4616      	mov	r6, r2
 8017a5e:	4699      	mov	r9, r3
 8017a60:	688a      	ldr	r2, [r1, #8]
 8017a62:	690b      	ldr	r3, [r1, #16]
 8017a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a68:	4293      	cmp	r3, r2
 8017a6a:	bfb8      	it	lt
 8017a6c:	4613      	movlt	r3, r2
 8017a6e:	6033      	str	r3, [r6, #0]
 8017a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a74:	4607      	mov	r7, r0
 8017a76:	460c      	mov	r4, r1
 8017a78:	b10a      	cbz	r2, 8017a7e <_printf_common+0x26>
 8017a7a:	3301      	adds	r3, #1
 8017a7c:	6033      	str	r3, [r6, #0]
 8017a7e:	6823      	ldr	r3, [r4, #0]
 8017a80:	0699      	lsls	r1, r3, #26
 8017a82:	bf42      	ittt	mi
 8017a84:	6833      	ldrmi	r3, [r6, #0]
 8017a86:	3302      	addmi	r3, #2
 8017a88:	6033      	strmi	r3, [r6, #0]
 8017a8a:	6825      	ldr	r5, [r4, #0]
 8017a8c:	f015 0506 	ands.w	r5, r5, #6
 8017a90:	d106      	bne.n	8017aa0 <_printf_common+0x48>
 8017a92:	f104 0a19 	add.w	sl, r4, #25
 8017a96:	68e3      	ldr	r3, [r4, #12]
 8017a98:	6832      	ldr	r2, [r6, #0]
 8017a9a:	1a9b      	subs	r3, r3, r2
 8017a9c:	42ab      	cmp	r3, r5
 8017a9e:	dc26      	bgt.n	8017aee <_printf_common+0x96>
 8017aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017aa4:	1e13      	subs	r3, r2, #0
 8017aa6:	6822      	ldr	r2, [r4, #0]
 8017aa8:	bf18      	it	ne
 8017aaa:	2301      	movne	r3, #1
 8017aac:	0692      	lsls	r2, r2, #26
 8017aae:	d42b      	bmi.n	8017b08 <_printf_common+0xb0>
 8017ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ab4:	4649      	mov	r1, r9
 8017ab6:	4638      	mov	r0, r7
 8017ab8:	47c0      	blx	r8
 8017aba:	3001      	adds	r0, #1
 8017abc:	d01e      	beq.n	8017afc <_printf_common+0xa4>
 8017abe:	6823      	ldr	r3, [r4, #0]
 8017ac0:	68e5      	ldr	r5, [r4, #12]
 8017ac2:	6832      	ldr	r2, [r6, #0]
 8017ac4:	f003 0306 	and.w	r3, r3, #6
 8017ac8:	2b04      	cmp	r3, #4
 8017aca:	bf08      	it	eq
 8017acc:	1aad      	subeq	r5, r5, r2
 8017ace:	68a3      	ldr	r3, [r4, #8]
 8017ad0:	6922      	ldr	r2, [r4, #16]
 8017ad2:	bf0c      	ite	eq
 8017ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ad8:	2500      	movne	r5, #0
 8017ada:	4293      	cmp	r3, r2
 8017adc:	bfc4      	itt	gt
 8017ade:	1a9b      	subgt	r3, r3, r2
 8017ae0:	18ed      	addgt	r5, r5, r3
 8017ae2:	2600      	movs	r6, #0
 8017ae4:	341a      	adds	r4, #26
 8017ae6:	42b5      	cmp	r5, r6
 8017ae8:	d11a      	bne.n	8017b20 <_printf_common+0xc8>
 8017aea:	2000      	movs	r0, #0
 8017aec:	e008      	b.n	8017b00 <_printf_common+0xa8>
 8017aee:	2301      	movs	r3, #1
 8017af0:	4652      	mov	r2, sl
 8017af2:	4649      	mov	r1, r9
 8017af4:	4638      	mov	r0, r7
 8017af6:	47c0      	blx	r8
 8017af8:	3001      	adds	r0, #1
 8017afa:	d103      	bne.n	8017b04 <_printf_common+0xac>
 8017afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b04:	3501      	adds	r5, #1
 8017b06:	e7c6      	b.n	8017a96 <_printf_common+0x3e>
 8017b08:	18e1      	adds	r1, r4, r3
 8017b0a:	1c5a      	adds	r2, r3, #1
 8017b0c:	2030      	movs	r0, #48	; 0x30
 8017b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b12:	4422      	add	r2, r4
 8017b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b1c:	3302      	adds	r3, #2
 8017b1e:	e7c7      	b.n	8017ab0 <_printf_common+0x58>
 8017b20:	2301      	movs	r3, #1
 8017b22:	4622      	mov	r2, r4
 8017b24:	4649      	mov	r1, r9
 8017b26:	4638      	mov	r0, r7
 8017b28:	47c0      	blx	r8
 8017b2a:	3001      	adds	r0, #1
 8017b2c:	d0e6      	beq.n	8017afc <_printf_common+0xa4>
 8017b2e:	3601      	adds	r6, #1
 8017b30:	e7d9      	b.n	8017ae6 <_printf_common+0x8e>

08017b32 <__sread>:
 8017b32:	b510      	push	{r4, lr}
 8017b34:	460c      	mov	r4, r1
 8017b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b3a:	f7fa f861 	bl	8011c00 <_read_r>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	bfab      	itete	ge
 8017b42:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017b44:	89a3      	ldrhlt	r3, [r4, #12]
 8017b46:	181b      	addge	r3, r3, r0
 8017b48:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017b4c:	bfac      	ite	ge
 8017b4e:	6563      	strge	r3, [r4, #84]	; 0x54
 8017b50:	81a3      	strhlt	r3, [r4, #12]
 8017b52:	bd10      	pop	{r4, pc}

08017b54 <__swrite>:
 8017b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b58:	461f      	mov	r7, r3
 8017b5a:	898b      	ldrh	r3, [r1, #12]
 8017b5c:	05db      	lsls	r3, r3, #23
 8017b5e:	4605      	mov	r5, r0
 8017b60:	460c      	mov	r4, r1
 8017b62:	4616      	mov	r6, r2
 8017b64:	d505      	bpl.n	8017b72 <__swrite+0x1e>
 8017b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b6a:	2302      	movs	r3, #2
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	f7fa f835 	bl	8011bdc <_lseek_r>
 8017b72:	89a3      	ldrh	r3, [r4, #12]
 8017b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017b7c:	81a3      	strh	r3, [r4, #12]
 8017b7e:	4632      	mov	r2, r6
 8017b80:	463b      	mov	r3, r7
 8017b82:	4628      	mov	r0, r5
 8017b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b88:	f7f9 bfe4 	b.w	8011b54 <_write_r>

08017b8c <__sseek>:
 8017b8c:	b510      	push	{r4, lr}
 8017b8e:	460c      	mov	r4, r1
 8017b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b94:	f7fa f822 	bl	8011bdc <_lseek_r>
 8017b98:	1c43      	adds	r3, r0, #1
 8017b9a:	89a3      	ldrh	r3, [r4, #12]
 8017b9c:	bf15      	itete	ne
 8017b9e:	6560      	strne	r0, [r4, #84]	; 0x54
 8017ba0:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017ba4:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017ba8:	81a3      	strheq	r3, [r4, #12]
 8017baa:	bf18      	it	ne
 8017bac:	81a3      	strhne	r3, [r4, #12]
 8017bae:	bd10      	pop	{r4, pc}

08017bb0 <__sclose>:
 8017bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bb4:	f7f9 bfe0 	b.w	8011b78 <_close_r>
