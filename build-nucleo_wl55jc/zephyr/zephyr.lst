
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	20 92 00 20 e9 53 00 08 db 42 01 08 bd 53 00 08      .. .S...B...S..
 8000010:	bd 53 00 08 bd 53 00 08 bd 53 00 08 00 00 00 00     .S...S...S......
	...
 800002c:	81 4d 00 08 bd 53 00 08 00 00 00 00 2d 4d 00 08     .M...S......-M..
 800003c:	a9 e9 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000050:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000060:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000070:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000080:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000090:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 80000a0:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 80000b0:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 80000c0:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 80000d0:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 80000e0:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 80000f0:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000100:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000110:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000120:	31 4e 00 08 31 4e 00 08 31 4e 00 08 31 4e 00 08     1N..1N..1N..1N..
 8000130:	31 4e 00 08 31 4e 00 08                             1N..1N..

Disassembly of section text:

08000140 <memchr>:
 8000140:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000144:	2a10      	cmp	r2, #16
 8000146:	db2b      	blt.n	80001a0 <memchr+0x60>
 8000148:	f010 0f07 	tst.w	r0, #7
 800014c:	d008      	beq.n	8000160 <memchr+0x20>
 800014e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000152:	3a01      	subs	r2, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d02d      	beq.n	80001b4 <memchr+0x74>
 8000158:	f010 0f07 	tst.w	r0, #7
 800015c:	b342      	cbz	r2, 80001b0 <memchr+0x70>
 800015e:	d1f6      	bne.n	800014e <memchr+0xe>
 8000160:	b4f0      	push	{r4, r5, r6, r7}
 8000162:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000166:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800016a:	f022 0407 	bic.w	r4, r2, #7
 800016e:	f07f 0700 	mvns.w	r7, #0
 8000172:	2300      	movs	r3, #0
 8000174:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000178:	3c08      	subs	r4, #8
 800017a:	ea85 0501 	eor.w	r5, r5, r1
 800017e:	ea86 0601 	eor.w	r6, r6, r1
 8000182:	fa85 f547 	uadd8	r5, r5, r7
 8000186:	faa3 f587 	sel	r5, r3, r7
 800018a:	fa86 f647 	uadd8	r6, r6, r7
 800018e:	faa5 f687 	sel	r6, r5, r7
 8000192:	b98e      	cbnz	r6, 80001b8 <memchr+0x78>
 8000194:	d1ee      	bne.n	8000174 <memchr+0x34>
 8000196:	bcf0      	pop	{r4, r5, r6, r7}
 8000198:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800019c:	f002 0207 	and.w	r2, r2, #7
 80001a0:	b132      	cbz	r2, 80001b0 <memchr+0x70>
 80001a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a6:	3a01      	subs	r2, #1
 80001a8:	ea83 0301 	eor.w	r3, r3, r1
 80001ac:	b113      	cbz	r3, 80001b4 <memchr+0x74>
 80001ae:	d1f8      	bne.n	80001a2 <memchr+0x62>
 80001b0:	2000      	movs	r0, #0
 80001b2:	4770      	bx	lr
 80001b4:	3801      	subs	r0, #1
 80001b6:	4770      	bx	lr
 80001b8:	2d00      	cmp	r5, #0
 80001ba:	bf06      	itte	eq
 80001bc:	4635      	moveq	r5, r6
 80001be:	3803      	subeq	r0, #3
 80001c0:	3807      	subne	r0, #7
 80001c2:	f015 0f01 	tst.w	r5, #1
 80001c6:	d107      	bne.n	80001d8 <memchr+0x98>
 80001c8:	3001      	adds	r0, #1
 80001ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80001ce:	bf02      	ittt	eq
 80001d0:	3001      	addeq	r0, #1
 80001d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80001d6:	3001      	addeq	r0, #1
 80001d8:	bcf0      	pop	{r4, r5, r6, r7}
 80001da:	3801      	subs	r0, #1
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_frsub>:
 8000a6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	e002      	b.n	8000a78 <__addsf3>
 8000a72:	bf00      	nop

08000a74 <__aeabi_fsub>:
 8000a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a78 <__addsf3>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	bf1f      	itttt	ne
 8000a7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a80:	ea92 0f03 	teqne	r2, r3
 8000a84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8c:	d06a      	beq.n	8000b64 <__addsf3+0xec>
 8000a8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a96:	bfc1      	itttt	gt
 8000a98:	18d2      	addgt	r2, r2, r3
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	4048      	eorgt	r0, r1
 8000a9e:	4041      	eorgt	r1, r0
 8000aa0:	bfb8      	it	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	2b19      	cmp	r3, #25
 8000aa6:	bf88      	it	hi
 8000aa8:	4770      	bxhi	lr
 8000aaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ac2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4249      	negne	r1, r1
 8000aca:	ea92 0f03 	teq	r2, r3
 8000ace:	d03f      	beq.n	8000b50 <__addsf3+0xd8>
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad8:	eb10 000c 	adds.w	r0, r0, ip
 8000adc:	f1c3 0320 	rsb	r3, r3, #32
 8000ae0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__addsf3+0x78>
 8000aea:	4249      	negs	r1, r1
 8000aec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af4:	d313      	bcc.n	8000b1e <__addsf3+0xa6>
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d306      	bcc.n	8000b0a <__addsf3+0x92>
 8000afc:	0840      	lsrs	r0, r0, #1
 8000afe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b02:	f102 0201 	add.w	r2, r2, #1
 8000b06:	2afe      	cmp	r2, #254	; 0xfe
 8000b08:	d251      	bcs.n	8000bae <__addsf3+0x136>
 8000b0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b12:	bf08      	it	eq
 8000b14:	f020 0001 	biceq.w	r0, r0, #1
 8000b18:	ea40 0003 	orr.w	r0, r0, r3
 8000b1c:	4770      	bx	lr
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	eb40 0000 	adc.w	r0, r0, r0
 8000b24:	3a01      	subs	r2, #1
 8000b26:	bf28      	it	cs
 8000b28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b2c:	d2ed      	bcs.n	8000b0a <__addsf3+0x92>
 8000b2e:	fab0 fc80 	clz	ip, r0
 8000b32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b36:	ebb2 020c 	subs.w	r2, r2, ip
 8000b3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3e:	bfaa      	itet	ge
 8000b40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b44:	4252      	neglt	r2, r2
 8000b46:	4318      	orrge	r0, r3
 8000b48:	bfbc      	itt	lt
 8000b4a:	40d0      	lsrlt	r0, r2
 8000b4c:	4318      	orrlt	r0, r3
 8000b4e:	4770      	bx	lr
 8000b50:	f092 0f00 	teq	r2, #0
 8000b54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b58:	bf06      	itte	eq
 8000b5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5e:	3201      	addeq	r2, #1
 8000b60:	3b01      	subne	r3, #1
 8000b62:	e7b5      	b.n	8000ad0 <__addsf3+0x58>
 8000b64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b6c:	bf18      	it	ne
 8000b6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b72:	d021      	beq.n	8000bb8 <__addsf3+0x140>
 8000b74:	ea92 0f03 	teq	r2, r3
 8000b78:	d004      	beq.n	8000b84 <__addsf3+0x10c>
 8000b7a:	f092 0f00 	teq	r2, #0
 8000b7e:	bf08      	it	eq
 8000b80:	4608      	moveq	r0, r1
 8000b82:	4770      	bx	lr
 8000b84:	ea90 0f01 	teq	r0, r1
 8000b88:	bf1c      	itt	ne
 8000b8a:	2000      	movne	r0, #0
 8000b8c:	4770      	bxne	lr
 8000b8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b92:	d104      	bne.n	8000b9e <__addsf3+0x126>
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	bf28      	it	cs
 8000b98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ba2:	bf3c      	itt	cc
 8000ba4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bxcc	lr
 8000baa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bbc:	bf16      	itet	ne
 8000bbe:	4608      	movne	r0, r1
 8000bc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc4:	4601      	movne	r1, r0
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	bf06      	itte	eq
 8000bca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bce:	ea90 0f01 	teqeq	r0, r1
 8000bd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_ui2f>:
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e004      	b.n	8000be8 <__aeabi_i2f+0x8>
 8000bde:	bf00      	nop

08000be0 <__aeabi_i2f>:
 8000be0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	bf48      	it	mi
 8000be6:	4240      	negmi	r0, r0
 8000be8:	ea5f 0c00 	movs.w	ip, r0
 8000bec:	bf08      	it	eq
 8000bee:	4770      	bxeq	lr
 8000bf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	e01c      	b.n	8000c36 <__aeabi_l2f+0x2a>

08000bfc <__aeabi_ul2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e00a      	b.n	8000c20 <__aeabi_l2f+0x14>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_l2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__aeabi_l2f+0x14>
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	ea5f 0c01 	movs.w	ip, r1
 8000c24:	bf02      	ittt	eq
 8000c26:	4684      	moveq	ip, r0
 8000c28:	4601      	moveq	r1, r0
 8000c2a:	2000      	moveq	r0, #0
 8000c2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c30:	bf08      	it	eq
 8000c32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c3a:	fabc f28c 	clz	r2, ip
 8000c3e:	3a08      	subs	r2, #8
 8000c40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c44:	db10      	blt.n	8000c68 <__aeabi_l2f+0x5c>
 8000c46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c58:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f102 0220 	add.w	r2, r2, #32
 8000c6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c78:	fa21 f202 	lsr.w	r2, r1, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_fmul>:
 8000c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c90:	bf1e      	ittt	ne
 8000c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c96:	ea92 0f0c 	teqne	r2, ip
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d06f      	beq.n	8000d80 <__aeabi_fmul+0xf8>
 8000ca0:	441a      	add	r2, r3
 8000ca2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca6:	0240      	lsls	r0, r0, #9
 8000ca8:	bf18      	it	ne
 8000caa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cae:	d01e      	beq.n	8000cee <__aeabi_fmul+0x66>
 8000cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc8:	bf3e      	ittt	cc
 8000cca:	0049      	lslcc	r1, r1, #1
 8000ccc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cd0:	005b      	lslcc	r3, r3, #1
 8000cd2:	ea40 0001 	orr.w	r0, r0, r1
 8000cd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cda:	2afd      	cmp	r2, #253	; 0xfd
 8000cdc:	d81d      	bhi.n	8000d1a <__aeabi_fmul+0x92>
 8000cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf6:	bf08      	it	eq
 8000cf8:	0249      	lsleq	r1, r1, #9
 8000cfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d02:	3a7f      	subs	r2, #127	; 0x7f
 8000d04:	bfc2      	ittt	gt
 8000d06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0e:	4770      	bxgt	lr
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	dc5d      	bgt.n	8000dd8 <__aeabi_fmul+0x150>
 8000d1c:	f112 0f19 	cmn.w	r2, #25
 8000d20:	bfdc      	itt	le
 8000d22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d26:	4770      	bxle	lr
 8000d28:	f1c2 0200 	rsb	r2, r2, #0
 8000d2c:	0041      	lsls	r1, r0, #1
 8000d2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d32:	f1c2 0220 	rsb	r2, r2, #32
 8000d36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3e:	f140 0000 	adc.w	r0, r0, #0
 8000d42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d46:	bf08      	it	eq
 8000d48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4c:	4770      	bx	lr
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d56:	bf02      	ittt	eq
 8000d58:	0040      	lsleq	r0, r0, #1
 8000d5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5e:	3a01      	subeq	r2, #1
 8000d60:	d0f9      	beq.n	8000d56 <__aeabi_fmul+0xce>
 8000d62:	ea40 000c 	orr.w	r0, r0, ip
 8000d66:	f093 0f00 	teq	r3, #0
 8000d6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0049      	lsleq	r1, r1, #1
 8000d72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d76:	3b01      	subeq	r3, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xe6>
 8000d7a:	ea41 010c 	orr.w	r1, r1, ip
 8000d7e:	e78f      	b.n	8000ca0 <__aeabi_fmul+0x18>
 8000d80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	bf18      	it	ne
 8000d8a:	ea93 0f0c 	teqne	r3, ip
 8000d8e:	d00a      	beq.n	8000da6 <__aeabi_fmul+0x11e>
 8000d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d94:	bf18      	it	ne
 8000d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	d1d8      	bne.n	8000d4e <__aeabi_fmul+0xc6>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	bf17      	itett	ne
 8000dac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000db0:	4608      	moveq	r0, r1
 8000db2:	f091 0f00 	teqne	r1, #0
 8000db6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dba:	d014      	beq.n	8000de6 <__aeabi_fmul+0x15e>
 8000dbc:	ea92 0f0c 	teq	r2, ip
 8000dc0:	d101      	bne.n	8000dc6 <__aeabi_fmul+0x13e>
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	d10f      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dc6:	ea93 0f0c 	teq	r3, ip
 8000dca:	d103      	bne.n	8000dd4 <__aeabi_fmul+0x14c>
 8000dcc:	024b      	lsls	r3, r1, #9
 8000dce:	bf18      	it	ne
 8000dd0:	4608      	movne	r0, r1
 8000dd2:	d108      	bne.n	8000de6 <__aeabi_fmul+0x15e>
 8000dd4:	ea80 0001 	eor.w	r0, r0, r1
 8000dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ddc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bx	lr
 8000de6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_fdiv>:
 8000df0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df8:	bf1e      	ittt	ne
 8000dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfe:	ea92 0f0c 	teqne	r2, ip
 8000e02:	ea93 0f0c 	teqne	r3, ip
 8000e06:	d069      	beq.n	8000edc <__aeabi_fdiv+0xec>
 8000e08:	eba2 0203 	sub.w	r2, r2, r3
 8000e0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e10:	0249      	lsls	r1, r1, #9
 8000e12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e16:	d037      	beq.n	8000e88 <__aeabi_fdiv+0x98>
 8000e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	bf38      	it	cc
 8000e2c:	005b      	lslcc	r3, r3, #1
 8000e2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e36:	428b      	cmp	r3, r1
 8000e38:	bf24      	itt	cs
 8000e3a:	1a5b      	subcs	r3, r3, r1
 8000e3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e44:	bf24      	itt	cs
 8000e46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e52:	bf24      	itt	cs
 8000e54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	bf18      	it	ne
 8000e6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e72:	d1e0      	bne.n	8000e36 <__aeabi_fdiv+0x46>
 8000e74:	2afd      	cmp	r2, #253	; 0xfd
 8000e76:	f63f af50 	bhi.w	8000d1a <__aeabi_fmul+0x92>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e80:	bf08      	it	eq
 8000e82:	f020 0001 	biceq.w	r0, r0, #1
 8000e86:	4770      	bx	lr
 8000e88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e90:	327f      	adds	r2, #127	; 0x7f
 8000e92:	bfc2      	ittt	gt
 8000e94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9c:	4770      	bxgt	lr
 8000e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	3a01      	subs	r2, #1
 8000ea8:	e737      	b.n	8000d1a <__aeabi_fmul+0x92>
 8000eaa:	f092 0f00 	teq	r2, #0
 8000eae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0040      	lsleq	r0, r0, #1
 8000eb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eba:	3a01      	subeq	r2, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fdiv+0xc2>
 8000ebe:	ea40 000c 	orr.w	r0, r0, ip
 8000ec2:	f093 0f00 	teq	r3, #0
 8000ec6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0049      	lsleq	r1, r1, #1
 8000ece:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed2:	3b01      	subeq	r3, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xda>
 8000ed6:	ea41 010c 	orr.w	r1, r1, ip
 8000eda:	e795      	b.n	8000e08 <__aeabi_fdiv+0x18>
 8000edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	d108      	bne.n	8000ef8 <__aeabi_fdiv+0x108>
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	f47f af7d 	bne.w	8000de6 <__aeabi_fmul+0x15e>
 8000eec:	ea93 0f0c 	teq	r3, ip
 8000ef0:	f47f af70 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e776      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	d104      	bne.n	8000f08 <__aeabi_fdiv+0x118>
 8000efe:	024b      	lsls	r3, r1, #9
 8000f00:	f43f af4c 	beq.w	8000d9c <__aeabi_fmul+0x114>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e76e      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f0c:	bf18      	it	ne
 8000f0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	d1ca      	bne.n	8000eaa <__aeabi_fdiv+0xba>
 8000f14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f18:	f47f af5c 	bne.w	8000dd4 <__aeabi_fmul+0x14c>
 8000f1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f20:	f47f af3c 	bne.w	8000d9c <__aeabi_fmul+0x114>
 8000f24:	e75f      	b.n	8000de6 <__aeabi_fmul+0x15e>
 8000f26:	bf00      	nop

08000f28 <__aeabi_ldivmod>:
 8000f28:	b97b      	cbnz	r3, 8000f4a <__aeabi_ldivmod+0x22>
 8000f2a:	b972      	cbnz	r2, 8000f4a <__aeabi_ldivmod+0x22>
 8000f2c:	2900      	cmp	r1, #0
 8000f2e:	bfbe      	ittt	lt
 8000f30:	2000      	movlt	r0, #0
 8000f32:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f36:	e006      	blt.n	8000f46 <__aeabi_ldivmod+0x1e>
 8000f38:	bf08      	it	eq
 8000f3a:	2800      	cmpeq	r0, #0
 8000f3c:	bf1c      	itt	ne
 8000f3e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f42:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f46:	f000 b857 	b.w	8000ff8 <__aeabi_idiv0>
 8000f4a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f52:	2900      	cmp	r1, #0
 8000f54:	db09      	blt.n	8000f6a <__aeabi_ldivmod+0x42>
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db1a      	blt.n	8000f90 <__aeabi_ldivmod+0x68>
 8000f5a:	f000 f8d7 	bl	800110c <__udivmoddi4>
 8000f5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f66:	b004      	add	sp, #16
 8000f68:	4770      	bx	lr
 8000f6a:	4240      	negs	r0, r0
 8000f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db1b      	blt.n	8000fac <__aeabi_ldivmod+0x84>
 8000f74:	f000 f8ca 	bl	800110c <__udivmoddi4>
 8000f78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f80:	b004      	add	sp, #16
 8000f82:	4240      	negs	r0, r0
 8000f84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f88:	4252      	negs	r2, r2
 8000f8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8e:	4770      	bx	lr
 8000f90:	4252      	negs	r2, r2
 8000f92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f96:	f000 f8b9 	bl	800110c <__udivmoddi4>
 8000f9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa2:	b004      	add	sp, #16
 8000fa4:	4240      	negs	r0, r0
 8000fa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000faa:	4770      	bx	lr
 8000fac:	4252      	negs	r2, r2
 8000fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fb2:	f000 f8ab 	bl	800110c <__udivmoddi4>
 8000fb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fbe:	b004      	add	sp, #16
 8000fc0:	4252      	negs	r2, r2
 8000fc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc6:	4770      	bx	lr

08000fc8 <__aeabi_uldivmod>:
 8000fc8:	b953      	cbnz	r3, 8000fe0 <__aeabi_uldivmod+0x18>
 8000fca:	b94a      	cbnz	r2, 8000fe0 <__aeabi_uldivmod+0x18>
 8000fcc:	2900      	cmp	r1, #0
 8000fce:	bf08      	it	eq
 8000fd0:	2800      	cmpeq	r0, #0
 8000fd2:	bf1c      	itt	ne
 8000fd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000fd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f000 b80c 	b.w	8000ff8 <__aeabi_idiv0>
 8000fe0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe8:	f000 f890 	bl	800110c <__udivmoddi4>
 8000fec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff4:	b004      	add	sp, #16
 8000ff6:	4770      	bx	lr

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <__gedf2>:
 8000ffc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001000:	e006      	b.n	8001010 <__cmpdf2+0x4>
 8001002:	bf00      	nop

08001004 <__ledf2>:
 8001004:	f04f 0c01 	mov.w	ip, #1
 8001008:	e002      	b.n	8001010 <__cmpdf2+0x4>
 800100a:	bf00      	nop

0800100c <__cmpdf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800101c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001020:	bf18      	it	ne
 8001022:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001026:	d01b      	beq.n	8001060 <__cmpdf2+0x54>
 8001028:	b001      	add	sp, #4
 800102a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800102e:	bf0c      	ite	eq
 8001030:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001034:	ea91 0f03 	teqne	r1, r3
 8001038:	bf02      	ittt	eq
 800103a:	ea90 0f02 	teqeq	r0, r2
 800103e:	2000      	moveq	r0, #0
 8001040:	4770      	bxeq	lr
 8001042:	f110 0f00 	cmn.w	r0, #0
 8001046:	ea91 0f03 	teq	r1, r3
 800104a:	bf58      	it	pl
 800104c:	4299      	cmppl	r1, r3
 800104e:	bf08      	it	eq
 8001050:	4290      	cmpeq	r0, r2
 8001052:	bf2c      	ite	cs
 8001054:	17d8      	asrcs	r0, r3, #31
 8001056:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800105a:	f040 0001 	orr.w	r0, r0, #1
 800105e:	4770      	bx	lr
 8001060:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001064:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001068:	d102      	bne.n	8001070 <__cmpdf2+0x64>
 800106a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800106e:	d107      	bne.n	8001080 <__cmpdf2+0x74>
 8001070:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001074:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001078:	d1d6      	bne.n	8001028 <__cmpdf2+0x1c>
 800107a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800107e:	d0d3      	beq.n	8001028 <__cmpdf2+0x1c>
 8001080:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <__aeabi_cdrcmple>:
 8001088:	4684      	mov	ip, r0
 800108a:	4610      	mov	r0, r2
 800108c:	4662      	mov	r2, ip
 800108e:	468c      	mov	ip, r1
 8001090:	4619      	mov	r1, r3
 8001092:	4663      	mov	r3, ip
 8001094:	e000      	b.n	8001098 <__aeabi_cdcmpeq>
 8001096:	bf00      	nop

08001098 <__aeabi_cdcmpeq>:
 8001098:	b501      	push	{r0, lr}
 800109a:	f7ff ffb7 	bl	800100c <__cmpdf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd01      	pop	{r0, pc}

080010a8 <__aeabi_dcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cdcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_dcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cdcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_dcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cdcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_dcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffce 	bl	8001088 <__aeabi_cdrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_dcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc4 	bl	8001088 <__aeabi_cdrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__udivmoddi4>:
 800110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001110:	4607      	mov	r7, r0
 8001112:	468c      	mov	ip, r1
 8001114:	4608      	mov	r0, r1
 8001116:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001118:	4615      	mov	r5, r2
 800111a:	463c      	mov	r4, r7
 800111c:	4619      	mov	r1, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 80c6 	bne.w	80012b0 <__udivmoddi4+0x1a4>
 8001124:	4282      	cmp	r2, r0
 8001126:	fab2 f782 	clz	r7, r2
 800112a:	d946      	bls.n	80011ba <__udivmoddi4+0xae>
 800112c:	b14f      	cbz	r7, 8001142 <__udivmoddi4+0x36>
 800112e:	f1c7 0e20 	rsb	lr, r7, #32
 8001132:	fa24 fe0e 	lsr.w	lr, r4, lr
 8001136:	fa00 f307 	lsl.w	r3, r0, r7
 800113a:	40bd      	lsls	r5, r7
 800113c:	ea4e 0c03 	orr.w	ip, lr, r3
 8001140:	40bc      	lsls	r4, r7
 8001142:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001146:	fa1f fe85 	uxth.w	lr, r5
 800114a:	fbbc f9f8 	udiv	r9, ip, r8
 800114e:	0c22      	lsrs	r2, r4, #16
 8001150:	fb08 c319 	mls	r3, r8, r9, ip
 8001154:	fb09 fa0e 	mul.w	sl, r9, lr
 8001158:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800115c:	459a      	cmp	sl, r3
 800115e:	d928      	bls.n	80011b2 <__udivmoddi4+0xa6>
 8001160:	18eb      	adds	r3, r5, r3
 8001162:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001166:	d204      	bcs.n	8001172 <__udivmoddi4+0x66>
 8001168:	459a      	cmp	sl, r3
 800116a:	d902      	bls.n	8001172 <__udivmoddi4+0x66>
 800116c:	f1a9 0002 	sub.w	r0, r9, #2
 8001170:	442b      	add	r3, r5
 8001172:	eba3 030a 	sub.w	r3, r3, sl
 8001176:	b2a4      	uxth	r4, r4
 8001178:	fbb3 f2f8 	udiv	r2, r3, r8
 800117c:	fb08 3312 	mls	r3, r8, r2, r3
 8001180:	fb02 fe0e 	mul.w	lr, r2, lr
 8001184:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001188:	45a6      	cmp	lr, r4
 800118a:	d914      	bls.n	80011b6 <__udivmoddi4+0xaa>
 800118c:	192c      	adds	r4, r5, r4
 800118e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8001192:	d203      	bcs.n	800119c <__udivmoddi4+0x90>
 8001194:	45a6      	cmp	lr, r4
 8001196:	d901      	bls.n	800119c <__udivmoddi4+0x90>
 8001198:	1e93      	subs	r3, r2, #2
 800119a:	442c      	add	r4, r5
 800119c:	eba4 040e 	sub.w	r4, r4, lr
 80011a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011a4:	b11e      	cbz	r6, 80011ae <__udivmoddi4+0xa2>
 80011a6:	40fc      	lsrs	r4, r7
 80011a8:	2300      	movs	r3, #0
 80011aa:	6034      	str	r4, [r6, #0]
 80011ac:	6073      	str	r3, [r6, #4]
 80011ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011b2:	4648      	mov	r0, r9
 80011b4:	e7dd      	b.n	8001172 <__udivmoddi4+0x66>
 80011b6:	4613      	mov	r3, r2
 80011b8:	e7f0      	b.n	800119c <__udivmoddi4+0x90>
 80011ba:	b902      	cbnz	r2, 80011be <__udivmoddi4+0xb2>
 80011bc:	deff      	udf	#255	; 0xff
 80011be:	bb87      	cbnz	r7, 8001222 <__udivmoddi4+0x116>
 80011c0:	1a83      	subs	r3, r0, r2
 80011c2:	2101      	movs	r1, #1
 80011c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011c8:	b2aa      	uxth	r2, r5
 80011ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80011ce:	0c20      	lsrs	r0, r4, #16
 80011d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80011d4:	fb0c f802 	mul.w	r8, ip, r2
 80011d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011dc:	4598      	cmp	r8, r3
 80011de:	d963      	bls.n	80012a8 <__udivmoddi4+0x19c>
 80011e0:	18eb      	adds	r3, r5, r3
 80011e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80011e6:	d204      	bcs.n	80011f2 <__udivmoddi4+0xe6>
 80011e8:	4598      	cmp	r8, r3
 80011ea:	d902      	bls.n	80011f2 <__udivmoddi4+0xe6>
 80011ec:	f1ac 0002 	sub.w	r0, ip, #2
 80011f0:	442b      	add	r3, r5
 80011f2:	eba3 0308 	sub.w	r3, r3, r8
 80011f6:	b2a4      	uxth	r4, r4
 80011f8:	fbb3 fcfe 	udiv	ip, r3, lr
 80011fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8001200:	fb0c f202 	mul.w	r2, ip, r2
 8001204:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001208:	42a2      	cmp	r2, r4
 800120a:	d94f      	bls.n	80012ac <__udivmoddi4+0x1a0>
 800120c:	192c      	adds	r4, r5, r4
 800120e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8001212:	d204      	bcs.n	800121e <__udivmoddi4+0x112>
 8001214:	42a2      	cmp	r2, r4
 8001216:	d902      	bls.n	800121e <__udivmoddi4+0x112>
 8001218:	f1ac 0302 	sub.w	r3, ip, #2
 800121c:	442c      	add	r4, r5
 800121e:	1aa4      	subs	r4, r4, r2
 8001220:	e7be      	b.n	80011a0 <__udivmoddi4+0x94>
 8001222:	f1c7 0c20 	rsb	ip, r7, #32
 8001226:	fa20 f80c 	lsr.w	r8, r0, ip
 800122a:	fa00 f307 	lsl.w	r3, r0, r7
 800122e:	fa24 fc0c 	lsr.w	ip, r4, ip
 8001232:	40bd      	lsls	r5, r7
 8001234:	ea4c 0203 	orr.w	r2, ip, r3
 8001238:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800123c:	b2ab      	uxth	r3, r5
 800123e:	fbb8 fcfe 	udiv	ip, r8, lr
 8001242:	0c11      	lsrs	r1, r2, #16
 8001244:	fb0e 801c 	mls	r0, lr, ip, r8
 8001248:	fb0c f903 	mul.w	r9, ip, r3
 800124c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8001250:	4581      	cmp	r9, r0
 8001252:	fa04 f407 	lsl.w	r4, r4, r7
 8001256:	d923      	bls.n	80012a0 <__udivmoddi4+0x194>
 8001258:	1828      	adds	r0, r5, r0
 800125a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800125e:	d204      	bcs.n	800126a <__udivmoddi4+0x15e>
 8001260:	4581      	cmp	r9, r0
 8001262:	d902      	bls.n	800126a <__udivmoddi4+0x15e>
 8001264:	f1ac 0102 	sub.w	r1, ip, #2
 8001268:	4428      	add	r0, r5
 800126a:	eba0 0009 	sub.w	r0, r0, r9
 800126e:	b292      	uxth	r2, r2
 8001270:	fbb0 fcfe 	udiv	ip, r0, lr
 8001274:	fb0e 001c 	mls	r0, lr, ip, r0
 8001278:	fb0c f803 	mul.w	r8, ip, r3
 800127c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8001280:	4598      	cmp	r8, r3
 8001282:	d90f      	bls.n	80012a4 <__udivmoddi4+0x198>
 8001284:	18eb      	adds	r3, r5, r3
 8001286:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800128a:	d204      	bcs.n	8001296 <__udivmoddi4+0x18a>
 800128c:	4598      	cmp	r8, r3
 800128e:	d902      	bls.n	8001296 <__udivmoddi4+0x18a>
 8001290:	f1ac 0202 	sub.w	r2, ip, #2
 8001294:	442b      	add	r3, r5
 8001296:	eba3 0308 	sub.w	r3, r3, r8
 800129a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800129e:	e791      	b.n	80011c4 <__udivmoddi4+0xb8>
 80012a0:	4661      	mov	r1, ip
 80012a2:	e7e2      	b.n	800126a <__udivmoddi4+0x15e>
 80012a4:	4662      	mov	r2, ip
 80012a6:	e7f6      	b.n	8001296 <__udivmoddi4+0x18a>
 80012a8:	4660      	mov	r0, ip
 80012aa:	e7a2      	b.n	80011f2 <__udivmoddi4+0xe6>
 80012ac:	4663      	mov	r3, ip
 80012ae:	e7b6      	b.n	800121e <__udivmoddi4+0x112>
 80012b0:	4283      	cmp	r3, r0
 80012b2:	d905      	bls.n	80012c0 <__udivmoddi4+0x1b4>
 80012b4:	b10e      	cbz	r6, 80012ba <__udivmoddi4+0x1ae>
 80012b6:	e9c6 7000 	strd	r7, r0, [r6]
 80012ba:	2100      	movs	r1, #0
 80012bc:	4608      	mov	r0, r1
 80012be:	e776      	b.n	80011ae <__udivmoddi4+0xa2>
 80012c0:	fab3 f183 	clz	r1, r3
 80012c4:	b981      	cbnz	r1, 80012e8 <__udivmoddi4+0x1dc>
 80012c6:	4283      	cmp	r3, r0
 80012c8:	d301      	bcc.n	80012ce <__udivmoddi4+0x1c2>
 80012ca:	42ba      	cmp	r2, r7
 80012cc:	d80a      	bhi.n	80012e4 <__udivmoddi4+0x1d8>
 80012ce:	1abc      	subs	r4, r7, r2
 80012d0:	eb60 0303 	sbc.w	r3, r0, r3
 80012d4:	2001      	movs	r0, #1
 80012d6:	469c      	mov	ip, r3
 80012d8:	2e00      	cmp	r6, #0
 80012da:	d068      	beq.n	80013ae <__udivmoddi4+0x2a2>
 80012dc:	e9c6 4c00 	strd	r4, ip, [r6]
 80012e0:	2100      	movs	r1, #0
 80012e2:	e764      	b.n	80011ae <__udivmoddi4+0xa2>
 80012e4:	4608      	mov	r0, r1
 80012e6:	e7f7      	b.n	80012d8 <__udivmoddi4+0x1cc>
 80012e8:	f1c1 0c20 	rsb	ip, r1, #32
 80012ec:	408b      	lsls	r3, r1
 80012ee:	fa22 f40c 	lsr.w	r4, r2, ip
 80012f2:	431c      	orrs	r4, r3
 80012f4:	fa02 f501 	lsl.w	r5, r2, r1
 80012f8:	fa00 f301 	lsl.w	r3, r0, r1
 80012fc:	fa27 f20c 	lsr.w	r2, r7, ip
 8001300:	fa20 fb0c 	lsr.w	fp, r0, ip
 8001304:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8001308:	4313      	orrs	r3, r2
 800130a:	fbbb f8f9 	udiv	r8, fp, r9
 800130e:	fa1f fe84 	uxth.w	lr, r4
 8001312:	fb09 bb18 	mls	fp, r9, r8, fp
 8001316:	0c1a      	lsrs	r2, r3, #16
 8001318:	fb08 fa0e 	mul.w	sl, r8, lr
 800131c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8001320:	4592      	cmp	sl, r2
 8001322:	fa07 f701 	lsl.w	r7, r7, r1
 8001326:	d93e      	bls.n	80013a6 <__udivmoddi4+0x29a>
 8001328:	18a2      	adds	r2, r4, r2
 800132a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800132e:	d204      	bcs.n	800133a <__udivmoddi4+0x22e>
 8001330:	4592      	cmp	sl, r2
 8001332:	d902      	bls.n	800133a <__udivmoddi4+0x22e>
 8001334:	f1a8 0002 	sub.w	r0, r8, #2
 8001338:	4422      	add	r2, r4
 800133a:	eba2 020a 	sub.w	r2, r2, sl
 800133e:	b29b      	uxth	r3, r3
 8001340:	fbb2 f8f9 	udiv	r8, r2, r9
 8001344:	fb09 2218 	mls	r2, r9, r8, r2
 8001348:	fb08 fe0e 	mul.w	lr, r8, lr
 800134c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8001350:	4596      	cmp	lr, r2
 8001352:	d92a      	bls.n	80013aa <__udivmoddi4+0x29e>
 8001354:	18a2      	adds	r2, r4, r2
 8001356:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800135a:	d204      	bcs.n	8001366 <__udivmoddi4+0x25a>
 800135c:	4596      	cmp	lr, r2
 800135e:	d902      	bls.n	8001366 <__udivmoddi4+0x25a>
 8001360:	f1a8 0302 	sub.w	r3, r8, #2
 8001364:	4422      	add	r2, r4
 8001366:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800136a:	fba0 9305 	umull	r9, r3, r0, r5
 800136e:	eba2 020e 	sub.w	r2, r2, lr
 8001372:	429a      	cmp	r2, r3
 8001374:	46ce      	mov	lr, r9
 8001376:	4698      	mov	r8, r3
 8001378:	d302      	bcc.n	8001380 <__udivmoddi4+0x274>
 800137a:	d106      	bne.n	800138a <__udivmoddi4+0x27e>
 800137c:	454f      	cmp	r7, r9
 800137e:	d204      	bcs.n	800138a <__udivmoddi4+0x27e>
 8001380:	ebb9 0e05 	subs.w	lr, r9, r5
 8001384:	eb63 0804 	sbc.w	r8, r3, r4
 8001388:	3801      	subs	r0, #1
 800138a:	b186      	cbz	r6, 80013ae <__udivmoddi4+0x2a2>
 800138c:	ebb7 030e 	subs.w	r3, r7, lr
 8001390:	eb62 0708 	sbc.w	r7, r2, r8
 8001394:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001398:	40cb      	lsrs	r3, r1
 800139a:	ea4c 0303 	orr.w	r3, ip, r3
 800139e:	40cf      	lsrs	r7, r1
 80013a0:	e9c6 3700 	strd	r3, r7, [r6]
 80013a4:	e79c      	b.n	80012e0 <__udivmoddi4+0x1d4>
 80013a6:	4640      	mov	r0, r8
 80013a8:	e7c7      	b.n	800133a <__udivmoddi4+0x22e>
 80013aa:	4643      	mov	r3, r8
 80013ac:	e7db      	b.n	8001366 <__udivmoddi4+0x25a>
 80013ae:	4631      	mov	r1, r6
 80013b0:	e6fd      	b.n	80011ae <__udivmoddi4+0xa2>

080013b2 <strcmp>:
 80013b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013ba:	2a01      	cmp	r2, #1
 80013bc:	bf28      	it	cs
 80013be:	429a      	cmpcs	r2, r3
 80013c0:	d0f7      	beq.n	80013b2 <strcmp>
 80013c2:	1ad0      	subs	r0, r2, r3
 80013c4:	4770      	bx	lr

080013c6 <strlen>:
 80013c6:	4603      	mov	r3, r0
 80013c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d1fb      	bne.n	80013c8 <strlen+0x2>
 80013d0:	1a18      	subs	r0, r3, r0
 80013d2:	3801      	subs	r0, #1
 80013d4:	4770      	bx	lr
	...

080013d8 <ambient_sensors_read>:
    LOG_INF("Found device \"%s\", getting sensor data", dev->name);
    return dev;
}


void ambient_sensors_read(uint8_t samples, float *ambientsensor) {
 80013d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013dc:	b089      	sub	sp, #36	; 0x24
 80013de:	af00      	add	r7, sp, #0
    
    struct sensor_value temp, hum, press;
    
    float sum[3];

    for(int i=0; i<samples; i++) {
 80013e0:	2300      	movs	r3, #0
            printf("SHT3XD: failed: %d\n", rc);
            return;
        }
         */
        k_msleep(20);
        rc = sensor_sample_fetch(dev_bme280);
 80013e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8001608 <ambient_sensors_read+0x230>
void ambient_sensors_read(uint8_t samples, float *ambientsensor) {
 80013e6:	6038      	str	r0, [r7, #0]
 80013e8:	460c      	mov	r4, r1
    for(int i=0; i<samples; i++) {
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	e9d7 3200 	ldrd	r3, r2, [r7]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	dc68      	bgt.n	80014c6 <ambient_sensors_read+0xee>
        sum[1] = sum[1] + sensor_value_to_double(&temp);
        sum[2] = sum[2] + sensor_value_to_double(&press);

    }
    
    double div = samples;
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f835 	bl	8000464 <__aeabi_ui2d>
 80013fa:	4680      	mov	r8, r0
 80013fc:	4689      	mov	r9, r1
    ambientsensor[0] = sum[0]/div;
 80013fe:	4628      	mov	r0, r5
 8001400:	f7ff f852 	bl	80004a8 <__aeabi_f2d>
 8001404:	4642      	mov	r2, r8
 8001406:	464b      	mov	r3, r9
 8001408:	f7ff f9d0 	bl	80007ac <__aeabi_ddiv>
 800140c:	f7ff fade 	bl	80009cc <__aeabi_d2f>
 8001410:	4683      	mov	fp, r0
 8001412:	6020      	str	r0, [r4, #0]
    ambientsensor[1] = sum[1]/div;
 8001414:	4630      	mov	r0, r6
 8001416:	f7ff f847 	bl	80004a8 <__aeabi_f2d>
 800141a:	4642      	mov	r2, r8
 800141c:	464b      	mov	r3, r9
 800141e:	f7ff f9c5 	bl	80007ac <__aeabi_ddiv>
 8001422:	f7ff fad3 	bl	80009cc <__aeabi_d2f>
 8001426:	6060      	str	r0, [r4, #4]
    ambientsensor[2] = sum[2]/div;
 8001428:	4650      	mov	r0, sl
 800142a:	f7ff f83d 	bl	80004a8 <__aeabi_f2d>
 800142e:	4642      	mov	r2, r8
 8001430:	464b      	mov	r3, r9
 8001432:	f7ff f9bb 	bl	80007ac <__aeabi_ddiv>
 8001436:	f7ff fac9 	bl	80009cc <__aeabi_d2f>
    LOG_INF("Humidity:\t %0.2f",ambientsensor[0]);
 800143a:	46e8      	mov	r8, sp
 800143c:	b088      	sub	sp, #32
 800143e:	466d      	mov	r5, sp
 8001440:	4b72      	ldr	r3, [pc, #456]	; (800160c <ambient_sensors_read+0x234>)
    ambientsensor[2] = sum[2]/div;
 8001442:	60a0      	str	r0, [r4, #8]
    LOG_INF("Humidity:\t %0.2f",ambientsensor[0]);
 8001444:	612b      	str	r3, [r5, #16]
 8001446:	2100      	movs	r1, #0
 8001448:	4658      	mov	r0, fp
 800144a:	f7ff fb15 	bl	8000a78 <__addsf3>
 800144e:	f7ff f82b 	bl	80004a8 <__aeabi_f2d>
 8001452:	462e      	mov	r6, r5
 8001454:	f04f 0905 	mov.w	r9, #5
 8001458:	e9c5 0106 	strd	r0, r1, [r5, #24]
 800145c:	f846 9f0c 	str.w	r9, [r6, #12]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8001460:	486b      	ldr	r0, [pc, #428]	; (8001610 <ambient_sensors_read+0x238>)
 8001462:	4632      	mov	r2, r6
 8001464:	2300      	movs	r3, #0
 8001466:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 800146a:	f012 feb2 	bl	80141d2 <z_impl_z_log_msg2_static_create>
    LOG_INF("Temperature:\t %0.2f",ambientsensor[1]);
 800146e:	4b69      	ldr	r3, [pc, #420]	; (8001614 <ambient_sensors_read+0x23c>)
 8001470:	612b      	str	r3, [r5, #16]
 8001472:	46c5      	mov	sp, r8
 8001474:	6860      	ldr	r0, [r4, #4]
 8001476:	46ad      	mov	sp, r5
 8001478:	2100      	movs	r1, #0
 800147a:	f7ff fafd 	bl	8000a78 <__addsf3>
 800147e:	f7ff f813 	bl	80004a8 <__aeabi_f2d>
 8001482:	f8c5 900c 	str.w	r9, [r5, #12]
 8001486:	e9c5 0106 	strd	r0, r1, [r5, #24]
 800148a:	4861      	ldr	r0, [pc, #388]	; (8001610 <ambient_sensors_read+0x238>)
 800148c:	4632      	mov	r2, r6
 800148e:	2300      	movs	r3, #0
 8001490:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 8001494:	f012 fe9d 	bl	80141d2 <z_impl_z_log_msg2_static_create>
    LOG_INF("Pressure:\t %0.2f",ambientsensor[2]);
 8001498:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <ambient_sensors_read+0x240>)
 800149a:	612b      	str	r3, [r5, #16]
 800149c:	46c5      	mov	sp, r8
 800149e:	68a0      	ldr	r0, [r4, #8]
 80014a0:	46ad      	mov	sp, r5
 80014a2:	2100      	movs	r1, #0
 80014a4:	f7ff fae8 	bl	8000a78 <__addsf3>
 80014a8:	f7fe fffe 	bl	80004a8 <__aeabi_f2d>
 80014ac:	f8c5 900c 	str.w	r9, [r5, #12]
 80014b0:	e9c5 0106 	strd	r0, r1, [r5, #24]
 80014b4:	4856      	ldr	r0, [pc, #344]	; (8001610 <ambient_sensors_read+0x238>)
 80014b6:	2300      	movs	r3, #0
 80014b8:	4632      	mov	r2, r6
 80014ba:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 80014be:	f012 fe88 	bl	80141d2 <z_impl_z_log_msg2_static_create>
 80014c2:	46c5      	mov	sp, r8
 80014c4:	e030      	b.n	8001528 <ambient_sensors_read+0x150>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80014c6:	2100      	movs	r1, #0
 80014c8:	20c8      	movs	r0, #200	; 0xc8
 80014ca:	f00f fab5 	bl	8010a38 <z_impl_k_sleep>
        rc = sensor_sample_fetch(dev_bme280);
 80014ce:	f8db 0000 	ldr.w	r0, [fp]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
 80014d2:	6883      	ldr	r3, [r0, #8]
 80014d4:	2139      	movs	r1, #57	; 0x39
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4798      	blx	r3
 80014da:	4680      	mov	r8, r0
 80014dc:	20c8      	movs	r0, #200	; 0xc8
 80014de:	2100      	movs	r1, #0
 80014e0:	f00f faaa 	bl	8010a38 <z_impl_k_sleep>
        if (rc == 0) {
 80014e4:	f1b8 0f00 	cmp.w	r8, #0
 80014e8:	d11a      	bne.n	8001520 <ambient_sensors_read+0x148>
            rc = sensor_channel_get(dev_bme280, SENSOR_CHAN_PRESS, &press);
 80014ea:	f8db 0000 	ldr.w	r0, [fp]
 80014ee:	f107 0218 	add.w	r2, r7, #24
 80014f2:	210e      	movs	r1, #14
 80014f4:	f012 f9a3 	bl	801383e <sensor_channel_get>
        if (rc == 0) {
 80014f8:	4680      	mov	r8, r0
 80014fa:	b988      	cbnz	r0, 8001520 <ambient_sensors_read+0x148>
            rc = sensor_channel_get(dev_bme280, SENSOR_CHAN_AMBIENT_TEMP, &temp);
 80014fc:	f8db 0000 	ldr.w	r0, [fp]
 8001500:	f107 0208 	add.w	r2, r7, #8
 8001504:	210d      	movs	r1, #13
 8001506:	f012 f99a 	bl	801383e <sensor_channel_get>
        if (rc == 0) {
 800150a:	4680      	mov	r8, r0
 800150c:	b940      	cbnz	r0, 8001520 <ambient_sensors_read+0x148>
            rc = sensor_channel_get(dev_bme280, SENSOR_CHAN_HUMIDITY, &hum);
 800150e:	f8db 0000 	ldr.w	r0, [fp]
 8001512:	f107 0210 	add.w	r2, r7, #16
 8001516:	2110      	movs	r1, #16
 8001518:	f012 f991 	bl	801383e <sensor_channel_get>
        if (rc != 0) {
 800151c:	4680      	mov	r8, r0
 800151e:	b138      	cbz	r0, 8001530 <ambient_sensors_read+0x158>
            printf("BME280: failed: %d\n", rc);
 8001520:	483e      	ldr	r0, [pc, #248]	; (800161c <ambient_sensors_read+0x244>)
 8001522:	4641      	mov	r1, r8
 8001524:	f00f ff40 	bl	80113a8 <iprintf>
    
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7fe ffa7 	bl	8000484 <__aeabi_i2d>
 8001536:	a332      	add	r3, pc, #200	; (adr r3, 8001600 <ambient_sensors_read+0x228>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f936 	bl	80007ac <__aeabi_ddiv>
 8001540:	4680      	mov	r8, r0
 8001542:	6938      	ldr	r0, [r7, #16]
 8001544:	4689      	mov	r9, r1
 8001546:	f7fe ff9d 	bl	8000484 <__aeabi_i2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4640      	mov	r0, r8
 8001550:	4649      	mov	r1, r9
 8001552:	f7fe fe4b 	bl	80001ec <__adddf3>
 8001556:	4680      	mov	r8, r0
        sum[0] = sum[0] + sensor_value_to_double(&hum);
 8001558:	4628      	mov	r0, r5
 800155a:	4689      	mov	r9, r1
 800155c:	f7fe ffa4 	bl	80004a8 <__aeabi_f2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4640      	mov	r0, r8
 8001566:	4649      	mov	r1, r9
 8001568:	f7fe fe40 	bl	80001ec <__adddf3>
 800156c:	f7ff fa2e 	bl	80009cc <__aeabi_d2f>
 8001570:	4605      	mov	r5, r0
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7fe ff86 	bl	8000484 <__aeabi_i2d>
 8001578:	a321      	add	r3, pc, #132	; (adr r3, 8001600 <ambient_sensors_read+0x228>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f915 	bl	80007ac <__aeabi_ddiv>
 8001582:	4680      	mov	r8, r0
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	4689      	mov	r9, r1
 8001588:	f7fe ff7c 	bl	8000484 <__aeabi_i2d>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4640      	mov	r0, r8
 8001592:	4649      	mov	r1, r9
 8001594:	f7fe fe2a 	bl	80001ec <__adddf3>
 8001598:	4680      	mov	r8, r0
        sum[1] = sum[1] + sensor_value_to_double(&temp);
 800159a:	4630      	mov	r0, r6
 800159c:	4689      	mov	r9, r1
 800159e:	f7fe ff83 	bl	80004a8 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4640      	mov	r0, r8
 80015a8:	4649      	mov	r1, r9
 80015aa:	f7fe fe1f 	bl	80001ec <__adddf3>
 80015ae:	f7ff fa0d 	bl	80009cc <__aeabi_d2f>
 80015b2:	4606      	mov	r6, r0
 80015b4:	69f8      	ldr	r0, [r7, #28]
 80015b6:	f7fe ff65 	bl	8000484 <__aeabi_i2d>
 80015ba:	a311      	add	r3, pc, #68	; (adr r3, 8001600 <ambient_sensors_read+0x228>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f8f4 	bl	80007ac <__aeabi_ddiv>
 80015c4:	4680      	mov	r8, r0
 80015c6:	69b8      	ldr	r0, [r7, #24]
 80015c8:	4689      	mov	r9, r1
 80015ca:	f7fe ff5b 	bl	8000484 <__aeabi_i2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4640      	mov	r0, r8
 80015d4:	4649      	mov	r1, r9
 80015d6:	f7fe fe09 	bl	80001ec <__adddf3>
 80015da:	4680      	mov	r8, r0
        sum[2] = sum[2] + sensor_value_to_double(&press);
 80015dc:	4650      	mov	r0, sl
 80015de:	4689      	mov	r9, r1
 80015e0:	f7fe ff62 	bl	80004a8 <__aeabi_f2d>
 80015e4:	460b      	mov	r3, r1
 80015e6:	4602      	mov	r2, r0
 80015e8:	4649      	mov	r1, r9
 80015ea:	4640      	mov	r0, r8
 80015ec:	f7fe fdfe 	bl	80001ec <__adddf3>
 80015f0:	f7ff f9ec 	bl	80009cc <__aeabi_d2f>
    for(int i=0; i<samples; i++) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
        sum[2] = sum[2] + sensor_value_to_double(&press);
 80015f8:	4682      	mov	sl, r0
    for(int i=0; i<samples; i++) {
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	e6f6      	b.n	80013ec <ambient_sensors_read+0x14>
 80015fe:	bf00      	nop
 8001600:	00000000 	.word	0x00000000
 8001604:	412e8480 	.word	0x412e8480
 8001608:	20000d68 	.word	0x20000d68
 800160c:	0801abf9 	.word	0x0801abf9
 8001610:	08019f90 	.word	0x08019f90
 8001614:	0801ac0a 	.word	0x0801ac0a
 8001618:	0801ac1e 	.word	0x0801ac1e
 800161c:	0801abe5 	.word	0x0801abe5

08001620 <floor>:
 8001620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001624:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8001628:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800162c:	2e13      	cmp	r6, #19
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4607      	mov	r7, r0
 8001634:	460c      	mov	r4, r1
 8001636:	4605      	mov	r5, r0
 8001638:	dc33      	bgt.n	80016a2 <floor+0x82>
 800163a:	2e00      	cmp	r6, #0
 800163c:	da14      	bge.n	8001668 <floor+0x48>
 800163e:	a334      	add	r3, pc, #208	; (adr r3, 8001710 <floor+0xf0>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe fdd2 	bl	80001ec <__adddf3>
 8001648:	2200      	movs	r2, #0
 800164a:	2300      	movs	r3, #0
 800164c:	f7ff fd54 	bl	80010f8 <__aeabi_dcmpgt>
 8001650:	b138      	cbz	r0, 8001662 <floor+0x42>
 8001652:	2c00      	cmp	r4, #0
 8001654:	da58      	bge.n	8001708 <floor+0xe8>
 8001656:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800165a:	431d      	orrs	r5, r3
 800165c:	d001      	beq.n	8001662 <floor+0x42>
 800165e:	4c2e      	ldr	r4, [pc, #184]	; (8001718 <floor+0xf8>)
 8001660:	2500      	movs	r5, #0
 8001662:	4623      	mov	r3, r4
 8001664:	462f      	mov	r7, r5
 8001666:	e025      	b.n	80016b4 <floor+0x94>
 8001668:	4a2c      	ldr	r2, [pc, #176]	; (800171c <floor+0xfc>)
 800166a:	fa42 f806 	asr.w	r8, r2, r6
 800166e:	ea01 0208 	and.w	r2, r1, r8
 8001672:	4302      	orrs	r2, r0
 8001674:	d01e      	beq.n	80016b4 <floor+0x94>
 8001676:	a326      	add	r3, pc, #152	; (adr r3, 8001710 <floor+0xf0>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe fdb6 	bl	80001ec <__adddf3>
 8001680:	2200      	movs	r2, #0
 8001682:	2300      	movs	r3, #0
 8001684:	f7ff fd38 	bl	80010f8 <__aeabi_dcmpgt>
 8001688:	2800      	cmp	r0, #0
 800168a:	d0ea      	beq.n	8001662 <floor+0x42>
 800168c:	2c00      	cmp	r4, #0
 800168e:	bfbe      	ittt	lt
 8001690:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8001694:	fa43 f606 	asrlt.w	r6, r3, r6
 8001698:	19a4      	addlt	r4, r4, r6
 800169a:	ea24 0408 	bic.w	r4, r4, r8
 800169e:	2500      	movs	r5, #0
 80016a0:	e7df      	b.n	8001662 <floor+0x42>
 80016a2:	2e33      	cmp	r6, #51	; 0x33
 80016a4:	dd0a      	ble.n	80016bc <floor+0x9c>
 80016a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80016aa:	d103      	bne.n	80016b4 <floor+0x94>
 80016ac:	f7fe fd9e 	bl	80001ec <__adddf3>
 80016b0:	4607      	mov	r7, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4638      	mov	r0, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016bc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c4:	fa22 f808 	lsr.w	r8, r2, r8
 80016c8:	ea18 0f00 	tst.w	r8, r0
 80016cc:	d0f2      	beq.n	80016b4 <floor+0x94>
 80016ce:	a310      	add	r3, pc, #64	; (adr r3, 8001710 <floor+0xf0>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe fd8a 	bl	80001ec <__adddf3>
 80016d8:	2200      	movs	r2, #0
 80016da:	2300      	movs	r3, #0
 80016dc:	f7ff fd0c 	bl	80010f8 <__aeabi_dcmpgt>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d0be      	beq.n	8001662 <floor+0x42>
 80016e4:	2c00      	cmp	r4, #0
 80016e6:	da02      	bge.n	80016ee <floor+0xce>
 80016e8:	2e14      	cmp	r6, #20
 80016ea:	d103      	bne.n	80016f4 <floor+0xd4>
 80016ec:	3401      	adds	r4, #1
 80016ee:	ea25 0508 	bic.w	r5, r5, r8
 80016f2:	e7b6      	b.n	8001662 <floor+0x42>
 80016f4:	2301      	movs	r3, #1
 80016f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80016fa:	fa03 f606 	lsl.w	r6, r3, r6
 80016fe:	4435      	add	r5, r6
 8001700:	42bd      	cmp	r5, r7
 8001702:	bf38      	it	cc
 8001704:	18e4      	addcc	r4, r4, r3
 8001706:	e7f2      	b.n	80016ee <floor+0xce>
 8001708:	2500      	movs	r5, #0
 800170a:	462c      	mov	r4, r5
 800170c:	e7a9      	b.n	8001662 <floor+0x42>
 800170e:	bf00      	nop
 8001710:	8800759c 	.word	0x8800759c
 8001714:	7e37e43c 	.word	0x7e37e43c
 8001718:	bff00000 	.word	0xbff00000
 800171c:	000fffff 	.word	0x000fffff

08001720 <get_bme280_device>:
const struct device *get_bme280_device(void) {
 8001720:	b530      	push	{r4, r5, lr}
 8001722:	b08b      	sub	sp, #44	; 0x2c
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <get_bme280_device+0x64>)
 8001726:	f00e fa1d 	bl	800fb64 <z_impl_device_get_binding>
    if (dev == NULL) {
 800172a:	4604      	mov	r4, r0
 800172c:	b968      	cbnz	r0, 800174a <get_bme280_device+0x2a>
        LOG_ERR("\nError: no device BME280 found.\n");
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <get_bme280_device+0x68>)
 8001730:	9308      	str	r3, [sp, #32]
 8001732:	2302      	movs	r3, #2
 8001734:	9307      	str	r3, [sp, #28]
 8001736:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800173a:	4603      	mov	r3, r0
 800173c:	aa07      	add	r2, sp, #28
 800173e:	4813      	ldr	r0, [pc, #76]	; (800178c <get_bme280_device+0x6c>)
 8001740:	f012 fd47 	bl	80141d2 <z_impl_z_log_msg2_static_create>
}
 8001744:	4620      	mov	r0, r4
 8001746:	b00b      	add	sp, #44	; 0x2c
 8001748:	bd30      	pop	{r4, r5, pc}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 800174a:	f017 fb0d 	bl	8018d68 <z_device_is_ready>
 800174e:	6823      	ldr	r3, [r4, #0]
        LOG_ERR("\nError: Device \"%s\" is not ready; "
 8001750:	9303      	str	r3, [sp, #12]
    if (!device_is_ready(dev)) {
 8001752:	4605      	mov	r5, r0
 8001754:	b950      	cbnz	r0, 800176c <get_bme280_device+0x4c>
        LOG_ERR("\nError: Device \"%s\" is not ready; "
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <get_bme280_device+0x70>)
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <get_bme280_device+0x6c>)
 800175a:	9000      	str	r0, [sp, #0]
 800175c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	4603      	mov	r3, r0
 8001764:	f012 f86e 	bl	8013844 <z_log_msg2_runtime_create.constprop.0>
        return NULL;
 8001768:	462c      	mov	r4, r5
 800176a:	e7eb      	b.n	8001744 <get_bme280_device+0x24>
    LOG_INF("Found device \"%s\", getting sensor data", dev->name);
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <get_bme280_device+0x74>)
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	2300      	movs	r3, #0
 8001772:	e9cd 3300 	strd	r3, r3, [sp]
 8001776:	4905      	ldr	r1, [pc, #20]	; (800178c <get_bme280_device+0x6c>)
 8001778:	2203      	movs	r2, #3
 800177a:	4618      	mov	r0, r3
 800177c:	f012 f862 	bl	8013844 <z_log_msg2_runtime_create.constprop.0>
    return dev;
 8001780:	e7e0      	b.n	8001744 <get_bme280_device+0x24>
 8001782:	bf00      	nop
 8001784:	0801ab42 	.word	0x0801ab42
 8001788:	0801ab49 	.word	0x0801ab49
 800178c:	08019f90 	.word	0x08019f90
 8001790:	0801ab6a 	.word	0x0801ab6a
 8001794:	0801abbe 	.word	0x0801abbe

08001798 <save_data>:
                    
          
}

/* * * * * * * * Save data to SD CARD * * * * * * * * * */
 void save_data(char* data, char* type) {
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	b098      	sub	sp, #96	; 0x60
     
    LOG_INF("Saving data...");
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <save_data+0xc8>)
 800179e:	9312      	str	r3, [sp, #72]	; 0x48
 80017a0:	aa11      	add	r2, sp, #68	; 0x44
 80017a2:	2302      	movs	r3, #2
 void save_data(char* data, char* type) {
 80017a4:	460e      	mov	r6, r1
 80017a6:	4604      	mov	r4, r0
    LOG_INF("Saving data...");
 80017a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80017ac:	482d      	ldr	r0, [pc, #180]	; (8001864 <save_data+0xcc>)
 80017ae:	9311      	str	r3, [sp, #68]	; 0x44
 80017b0:	f012 f857 	bl	8013862 <z_log_msg2_static_create.constprop.0>

    
    
    char fname[40];
    
    snprintfcb(fname, 40, "/SD:/%s.%s", get_date(), type);
 80017b4:	f001 fadc 	bl	8002d70 <get_date>
    LOG_INF("Saving data...");
 80017b8:	ad0e      	add	r5, sp, #56	; 0x38
    snprintfcb(fname, 40, "/SD:/%s.%s", get_date(), type);
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <save_data+0xd0>)
 80017be:	9600      	str	r6, [sp, #0]
 80017c0:	2128      	movs	r1, #40	; 0x28
 80017c2:	4628      	mov	r0, r5
 80017c4:	f012 f904 	bl	80139d0 <snprintfcb>
 

        struct fs_file_t file;
        fs_file_t_init(&file);
        LOG_INF("Attemting to write to file: %s",fname);
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <save_data+0xd4>)
 80017ca:	4926      	ldr	r1, [pc, #152]	; (8001864 <save_data+0xcc>)
 80017cc:	9503      	str	r5, [sp, #12]
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
 80017ce:	2300      	movs	r3, #0
 80017d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2203      	movs	r2, #3
 80017da:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80017de:	9307      	str	r3, [sp, #28]
 80017e0:	f012 f842 	bl	8013868 <z_log_msg2_runtime_create.constprop.0>
        int rc = fs_open(&file, fname, FS_O_CREATE | FS_O_APPEND | FS_O_RDWR);
 80017e4:	2233      	movs	r2, #51	; 0x33
 80017e6:	4629      	mov	r1, r5
 80017e8:	a805      	add	r0, sp, #20
 80017ea:	f00a f9c3 	bl	800bb74 <fs_open>
        if (rc < 0) {
 80017ee:	2800      	cmp	r0, #0
 80017f0:	da0a      	bge.n	8001808 <save_data+0x70>
                LOG_ERR("FAIL: open file to write: %d", rc);
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <save_data+0xd8>)
 80017f4:	aa0b      	add	r2, sp, #44	; 0x2c
 80017f6:	e9cd 300c 	strd	r3, r0, [sp, #48]	; 0x30
 80017fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80017fe:	2303      	movs	r3, #3
 8001800:	4818      	ldr	r0, [pc, #96]	; (8001864 <save_data+0xcc>)
 8001802:	930b      	str	r3, [sp, #44]	; 0x2c
 8001804:	f012 f82d 	bl	8013862 <z_log_msg2_static_create.constprop.0>
        }
        rc = fs_write(&file, data, strlen(data));
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff fddc 	bl	80013c6 <strlen>
 800180e:	4621      	mov	r1, r4
 8001810:	4602      	mov	r2, r0
 8001812:	a805      	add	r0, sp, #20
 8001814:	f00a fa36 	bl	800bc84 <fs_write>

        if (rc < 0) {
 8001818:	2800      	cmp	r0, #0
 800181a:	f04f 0303 	mov.w	r3, #3
 800181e:	da13      	bge.n	8001848 <save_data+0xb0>
                LOG_ERR("FAIL: cannot write: %d\n", rc);
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <save_data+0xdc>)
 8001822:	930b      	str	r3, [sp, #44]	; 0x2c
 8001824:	e9cd 200c 	strd	r2, r0, [sp, #48]	; 0x30
 8001828:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <save_data+0xcc>)
 800182e:	aa0b      	add	r2, sp, #44	; 0x2c
 8001830:	f012 f817 	bl	8013862 <z_log_msg2_static_create.constprop.0>
 8001834:	f241 3088 	movw	r0, #5000	; 0x1388
 8001838:	2100      	movs	r1, #0
 800183a:	f00f f8fd 	bl	8010a38 <z_impl_k_sleep>
        } else {

            LOG_INF(" **** fs_write wrote %d bytes ****",rc);

        }
        fs_close(&file);
 800183e:	a805      	add	r0, sp, #20
 8001840:	f00a f9fc 	bl	800bc3c <fs_close>

 
 }
 8001844:	b018      	add	sp, #96	; 0x60
 8001846:	bd70      	pop	{r4, r5, r6, pc}
            LOG_INF(" **** fs_write wrote %d bytes ****",rc);
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <save_data+0xe0>)
 800184a:	930b      	str	r3, [sp, #44]	; 0x2c
 800184c:	e9cd 200c 	strd	r2, r0, [sp, #48]	; 0x30
 8001850:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <save_data+0xcc>)
 8001856:	aa0b      	add	r2, sp, #44	; 0x2c
 8001858:	f012 f803 	bl	8013862 <z_log_msg2_static_create.constprop.0>
 800185c:	e7ef      	b.n	800183e <save_data+0xa6>
 800185e:	bf00      	nop
 8001860:	0801ac3f 	.word	0x0801ac3f
 8001864:	08019fa8 	.word	0x08019fa8
 8001868:	0801ac4e 	.word	0x0801ac4e
 800186c:	0801ac59 	.word	0x0801ac59
 8001870:	0801ac78 	.word	0x0801ac78
 8001874:	0801ac95 	.word	0x0801ac95
 8001878:	0801acad 	.word	0x0801acad

0800187c <lsdir>:

/* * * * * * * * List Dir Contents * * * * * * * * * */

 int lsdir(const char *path)
{
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
	static struct fs_dirent entry;

	fs_dir_t_init(&dirp);

	/* Verify fs_opendir() */
	res = fs_opendir(&dirp, path);
 8001880:	4601      	mov	r1, r0
{
 8001882:	4605      	mov	r5, r0
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
 8001884:	2600      	movs	r6, #0
	res = fs_opendir(&dirp, path);
 8001886:	a806      	add	r0, sp, #24
 8001888:	e9cd 6606 	strd	r6, r6, [sp, #24]
 800188c:	f00a fa1c 	bl	800bcc8 <fs_opendir>
	if (res) {
 8001890:	4604      	mov	r4, r0
 8001892:	b170      	cbz	r0, 80018b2 <lsdir+0x36>
		LOG_ERR("Error opening dir %s [%d]", path, res);
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <lsdir+0x9c>)
 8001896:	4921      	ldr	r1, [pc, #132]	; (800191c <lsdir+0xa0>)
 8001898:	9600      	str	r6, [sp, #0]
 800189a:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800189e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	4633      	mov	r3, r6
 80018a6:	4630      	mov	r0, r6
 80018a8:	f011 ffde 	bl	8013868 <z_log_msg2_runtime_create.constprop.0>

	/* Verify fs_closedir() */
	fs_closedir(&dirp);

	return res;
 80018ac:	4620      	mov	r0, r4
 80018ae:	b009      	add	sp, #36	; 0x24
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("\nListing dir %s ...", path);
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <lsdir+0xa4>)
 80018b4:	9503      	str	r5, [sp, #12]
 80018b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80018ba:	4918      	ldr	r1, [pc, #96]	; (800191c <lsdir+0xa0>)
 80018bc:	9000      	str	r0, [sp, #0]
 80018be:	4603      	mov	r3, r0
 80018c0:	2203      	movs	r2, #3
		res = fs_readdir(&dirp, &entry);
 80018c2:	4d18      	ldr	r5, [pc, #96]	; (8001924 <lsdir+0xa8>)
			LOG_INF("[FILE] %s (size = %zu)",
 80018c4:	4f18      	ldr	r7, [pc, #96]	; (8001928 <lsdir+0xac>)
	LOG_INF("\nListing dir %s ...", path);
 80018c6:	f011 ffcf 	bl	8013868 <z_log_msg2_runtime_create.constprop.0>
 80018ca:	1c6e      	adds	r6, r5, #1
		res = fs_readdir(&dirp, &entry);
 80018cc:	4915      	ldr	r1, [pc, #84]	; (8001924 <lsdir+0xa8>)
 80018ce:	a806      	add	r0, sp, #24
 80018d0:	f00a fa6c 	bl	800bdac <fs_readdir>
		if (res || entry.name[0] == 0) {
 80018d4:	4604      	mov	r4, r0
 80018d6:	b9d8      	cbnz	r0, 8001910 <lsdir+0x94>
 80018d8:	786b      	ldrb	r3, [r5, #1]
 80018da:	b1cb      	cbz	r3, 8001910 <lsdir+0x94>
		if (entry.type == FS_DIR_ENTRY_DIR) {
 80018dc:	782b      	ldrb	r3, [r5, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10a      	bne.n	80018f8 <lsdir+0x7c>
			LOG_INF("[DIR ] %s", entry.name);
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <lsdir+0xb0>)
 80018e4:	490d      	ldr	r1, [pc, #52]	; (800191c <lsdir+0xa0>)
 80018e6:	9603      	str	r6, [sp, #12]
 80018e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80018ec:	9000      	str	r0, [sp, #0]
 80018ee:	4603      	mov	r3, r0
 80018f0:	2203      	movs	r2, #3
 80018f2:	f011 ffb9 	bl	8013868 <z_log_msg2_runtime_create.constprop.0>
 80018f6:	e7e9      	b.n	80018cc <lsdir+0x50>
			LOG_INF("[FILE] %s (size = %zu)",
 80018f8:	692b      	ldr	r3, [r5, #16]
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <lsdir+0xa0>)
 80018fc:	9000      	str	r0, [sp, #0]
 80018fe:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8001902:	e9cd 0701 	strd	r0, r7, [sp, #4]
 8001906:	4603      	mov	r3, r0
 8001908:	2203      	movs	r2, #3
 800190a:	f011 ffad 	bl	8013868 <z_log_msg2_runtime_create.constprop.0>
 800190e:	e7dd      	b.n	80018cc <lsdir+0x50>
	fs_closedir(&dirp);
 8001910:	a806      	add	r0, sp, #24
 8001912:	f00a facd 	bl	800beb0 <fs_closedir>
	return res;
 8001916:	e7c9      	b.n	80018ac <lsdir+0x30>
 8001918:	0801acd0 	.word	0x0801acd0
 800191c:	08019fa8 	.word	0x08019fa8
 8001920:	0801acea 	.word	0x0801acea
 8001924:	20000d6c 	.word	0x20000d6c
 8001928:	0801ad08 	.word	0x0801ad08
 800192c:	0801acfe 	.word	0x0801acfe

08001930 <init_and_mount_sdcard>:
 void init_and_mount_sdcard() {
 8001930:	b530      	push	{r4, r5, lr}
	mp.type = FS_FATFS;
 8001932:	4c36      	ldr	r4, [pc, #216]	; (8001a0c <init_and_mount_sdcard+0xdc>)
            if (disk_access_init(disk_pdrv) != 0) {
 8001934:	4836      	ldr	r0, [pc, #216]	; (8001a10 <init_and_mount_sdcard+0xe0>)
	mp.type = FS_FATFS;
 8001936:	2300      	movs	r3, #0
 void init_and_mount_sdcard() {
 8001938:	b089      	sub	sp, #36	; 0x24
	mp.type = FS_FATFS;
 800193a:	60a3      	str	r3, [r4, #8]
	mp.fs_data = &fat_fs;
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <init_and_mount_sdcard+0xe4>)
 800193e:	6123      	str	r3, [r4, #16]
            if (disk_access_init(disk_pdrv) != 0) {
 8001940:	f012 fc67 	bl	8014212 <disk_access_init>
 8001944:	b300      	cbz	r0, 8001988 <init_and_mount_sdcard+0x58>
                    LOG_ERR("Storage init ERROR!");
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <init_and_mount_sdcard+0xe8>)
                    LOG_ERR("Unable to get sector size");
 8001948:	9306      	str	r3, [sp, #24]
 800194a:	2302      	movs	r3, #2
 800194c:	9305      	str	r3, [sp, #20]
 800194e:	aa05      	add	r2, sp, #20
 8001950:	f44f 5182 	mov.w	r1, #4160	; 0x1040
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 8001954:	4831      	ldr	r0, [pc, #196]	; (8001a1c <init_and_mount_sdcard+0xec>)
    mp.mnt_point = disk_mount_pt;
 8001956:	4d32      	ldr	r5, [pc, #200]	; (8001a20 <init_and_mount_sdcard+0xf0>)
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 8001958:	f011 ff83 	bl	8013862 <z_log_msg2_static_create.constprop.0>
    int res = fs_mount(&mp);
 800195c:	482b      	ldr	r0, [pc, #172]	; (8001a0c <init_and_mount_sdcard+0xdc>)
    mp.mnt_point = disk_mount_pt;
 800195e:	60e5      	str	r5, [r4, #12]
    int res = fs_mount(&mp);
 8001960:	f00a facc 	bl	800befc <fs_mount>
    if (res == FR_OK) {
 8001964:	2302      	movs	r3, #2
 8001966:	2800      	cmp	r0, #0
 8001968:	d144      	bne.n	80019f4 <init_and_mount_sdcard+0xc4>
            LOG_INF("Disk mounted.");
 800196a:	4a2e      	ldr	r2, [pc, #184]	; (8001a24 <init_and_mount_sdcard+0xf4>)
 800196c:	482b      	ldr	r0, [pc, #172]	; (8001a1c <init_and_mount_sdcard+0xec>)
 800196e:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8001972:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001976:	aa05      	add	r2, sp, #20
 8001978:	f011 ff73 	bl	8013862 <z_log_msg2_static_create.constprop.0>
            lsdir(disk_mount_pt);
 800197c:	4628      	mov	r0, r5
}
 800197e:	b009      	add	sp, #36	; 0x24
 8001980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lsdir(disk_mount_pt);
 8001984:	f7ff bf7a 	b.w	800187c <lsdir>
            if (disk_access_ioctl(disk_pdrv,
 8001988:	4821      	ldr	r0, [pc, #132]	; (8001a10 <init_and_mount_sdcard+0xe0>)
 800198a:	466a      	mov	r2, sp
 800198c:	2101      	movs	r1, #1
 800198e:	f012 fc8a 	bl	80142a6 <disk_access_ioctl>
 8001992:	b108      	cbz	r0, 8001998 <init_and_mount_sdcard+0x68>
                    LOG_ERR("Unable to get sector count");
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <init_and_mount_sdcard+0xf8>)
 8001996:	e7d7      	b.n	8001948 <init_and_mount_sdcard+0x18>
            LOG_INF("Block count %u", block_count);
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <init_and_mount_sdcard+0xfc>)
 800199a:	4820      	ldr	r0, [pc, #128]	; (8001a1c <init_and_mount_sdcard+0xec>)
 800199c:	9306      	str	r3, [sp, #24]
 800199e:	aa05      	add	r2, sp, #20
 80019a0:	9b00      	ldr	r3, [sp, #0]
 80019a2:	9307      	str	r3, [sp, #28]
 80019a4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80019a8:	2503      	movs	r5, #3
 80019aa:	9505      	str	r5, [sp, #20]
 80019ac:	f011 ff59 	bl	8013862 <z_log_msg2_static_create.constprop.0>
            if (disk_access_ioctl(disk_pdrv,
 80019b0:	4817      	ldr	r0, [pc, #92]	; (8001a10 <init_and_mount_sdcard+0xe0>)
 80019b2:	aa01      	add	r2, sp, #4
 80019b4:	2102      	movs	r1, #2
 80019b6:	f012 fc76 	bl	80142a6 <disk_access_ioctl>
 80019ba:	b108      	cbz	r0, 80019c0 <init_and_mount_sdcard+0x90>
                    LOG_ERR("Unable to get sector size");
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <init_and_mount_sdcard+0x100>)
 80019be:	e7c3      	b.n	8001948 <init_and_mount_sdcard+0x18>
            LOG_INF("Sector size %u", block_size);
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <init_and_mount_sdcard+0x104>)
 80019c2:	9306      	str	r3, [sp, #24]
 80019c4:	aa05      	add	r2, sp, #20
 80019c6:	9b01      	ldr	r3, [sp, #4]
 80019c8:	4814      	ldr	r0, [pc, #80]	; (8001a1c <init_and_mount_sdcard+0xec>)
 80019ca:	9307      	str	r3, [sp, #28]
 80019cc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80019d0:	9505      	str	r5, [sp, #20]
 80019d2:	f011 ff46 	bl	8013862 <z_log_msg2_static_create.constprop.0>
            memory_size_mb = (uint64_t)block_count * block_size;
 80019d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80019da:	fba3 3202 	umull	r3, r2, r3, r2
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 80019de:	0d1b      	lsrs	r3, r3, #20
 80019e0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <init_and_mount_sdcard+0x108>)
 80019e6:	9505      	str	r5, [sp, #20]
 80019e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80019ec:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80019f0:	aa05      	add	r2, sp, #20
 80019f2:	e7af      	b.n	8001954 <init_and_mount_sdcard+0x24>
            LOG_ERR("Error mounting disk.");
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <init_and_mount_sdcard+0x10c>)
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <init_and_mount_sdcard+0xec>)
 80019f8:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80019fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001a00:	aa05      	add	r2, sp, #20
 8001a02:	f011 ff2e 	bl	8013862 <z_log_msg2_static_create.constprop.0>
}
 8001a06:	b009      	add	sp, #36	; 0x24
 8001a08:	bd30      	pop	{r4, r5, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000058 	.word	0x20000058
 8001a10:	0801ad1f 	.word	0x0801ad1f
 8001a14:	20000d80 	.word	0x20000d80
 8001a18:	0801ad22 	.word	0x0801ad22
 8001a1c:	08019fa8 	.word	0x08019fa8
 8001a20:	0801ad9c 	.word	0x0801ad9c
 8001a24:	0801ada1 	.word	0x0801ada1
 8001a28:	0801ad36 	.word	0x0801ad36
 8001a2c:	0801ad51 	.word	0x0801ad51
 8001a30:	0801ad60 	.word	0x0801ad60
 8001a34:	0801ad7a 	.word	0x0801ad7a
 8001a38:	0801ad89 	.word	0x0801ad89
 8001a3c:	0801adaf 	.word	0x0801adaf

08001a40 <gas_sensors_init>:
const struct device *i2c3_dev;




void gas_sensors_init() {
 8001a40:	b510      	push	{r4, lr}
 8001a42:	b086      	sub	sp, #24
     
    /* * * * * * * * * * * * * i2c3 Device * * * * * * * * * * * * * */
    uint32_t i2c3_cfg = I2C_SPEED_SET(I2C_SPEED_FAST) | I2C_MODE_MASTER;

    LOG_INF("Initializing I2C 3...");
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <gas_sensors_init+0x60>)
 8001a46:	9304      	str	r3, [sp, #16]
 8001a48:	2402      	movs	r4, #2
 8001a4a:	9403      	str	r4, [sp, #12]
 8001a4c:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <gas_sensors_init+0x64>)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	aa03      	add	r2, sp, #12
 8001a52:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001a56:	f012 fbbc 	bl	80141d2 <z_impl_z_log_msg2_static_create>
 8001a5a:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <gas_sensors_init+0x68>)
 8001a5c:	f00e f882 	bl	800fb64 <z_impl_device_get_binding>
    i2c3_dev = device_get_binding("I2C_3");
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <gas_sensors_init+0x6c>)
 8001a62:	4603      	mov	r3, r0
 8001a64:	6010      	str	r0, [r2, #0]
    if (!i2c3_dev) {
 8001a66:	b930      	cbnz	r0, 8001a76 <gas_sensors_init+0x36>
        LOG_INF("I2C3: Device driver not found.");
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <gas_sensors_init+0x70>)
    }

    if (i2c_configure(i2c3_dev, i2c3_cfg)) {
        LOG_ERR("I2C3 config failed");
    } else {
        LOG_INF("i2c3 configured...");
 8001a6a:	e9cd 4203 	strd	r4, r2, [sp, #12]
 8001a6e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001a72:	aa03      	add	r2, sp, #12
 8001a74:	e00c      	b.n	8001a90 <gas_sensors_init+0x50>
				       uint32_t dev_config)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	return api->configure(dev, dev_config);
 8001a76:	6883      	ldr	r3, [r0, #8]
 8001a78:	2114      	movs	r1, #20
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4798      	blx	r3
    if (i2c_configure(i2c3_dev, i2c3_cfg)) {
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b158      	cbz	r0, 8001a9a <gas_sensors_init+0x5a>
        LOG_ERR("I2C3 config failed");
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <gas_sensors_init+0x74>)
 8001a84:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	aa03      	add	r2, sp, #12
 8001a8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <gas_sensors_init+0x64>)
 8001a92:	f012 fb9e 	bl	80141d2 <z_impl_z_log_msg2_static_create>
    }

}
 8001a96:	b006      	add	sp, #24
 8001a98:	bd10      	pop	{r4, pc}
        LOG_INF("i2c3 configured...");
 8001a9a:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <gas_sensors_init+0x78>)
 8001a9c:	e7e5      	b.n	8001a6a <gas_sensors_init+0x2a>
 8001a9e:	bf00      	nop
 8001aa0:	0801add0 	.word	0x0801add0
 8001aa4:	08019fb8 	.word	0x08019fb8
 8001aa8:	0801ade6 	.word	0x0801ade6
 8001aac:	20000fb0 	.word	0x20000fb0
 8001ab0:	0801adec 	.word	0x0801adec
 8001ab4:	0801ae0b 	.word	0x0801ae0b
 8001ab8:	0801ae1e 	.word	0x0801ae1e

08001abc <gas_sensors_read>:




void gas_sensors_read(uint16_t *result, int samples) {
 8001abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac0:	b08b      	sub	sp, #44	; 0x2c
 8001ac2:	af00      	add	r7, sp, #0
                    cmd[1] = 0xF1;
                    break;
            }

            cmd[2] = 0x83;
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001ac4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8001ce8 <gas_sensors_read+0x22c>
void gas_sensors_read(uint16_t *result, int samples) {
 8001ac8:	6079      	str	r1, [r7, #4]
 8001aca:	4604      	mov	r4, r0
    for (int s=0; s < samples; s++) {
 8001acc:	f04f 0900 	mov.w	r9, #0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	454b      	cmp	r3, r9
 8001ad4:	dc62      	bgt.n	8001b9c <gas_sensors_read+0xe0>
 8001ad6:	1ea3      	subs	r3, r4, #2
 8001ad8:	f104 010e 	add.w	r1, r4, #14
        }
        k_msleep(1000);
    }
    
    for (int i=0; i< 8; i++) {
        result[i] = result[i]/samples;
 8001adc:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	fb92 f2f0 	sdiv	r2, r2, r0
    for (int i=0; i< 8; i++) {
 8001ae6:	4299      	cmp	r1, r3
        result[i] = result[i]/samples;
 8001ae8:	801a      	strh	r2, [r3, #0]
    for (int i=0; i< 8; i++) {
 8001aea:	d1f7      	bne.n	8001adc <gas_sensors_read+0x20>
    }
    
            LOG_INF("Gas Sensors:");
 8001aec:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <gas_sensors_read+0x230>)
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	2302      	movs	r3, #2
 8001af2:	46e9      	mov	r9, sp
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	487e      	ldr	r0, [pc, #504]	; (8001cf0 <gas_sensors_read+0x234>)
 8001af8:	f107 021c 	add.w	r2, r7, #28
 8001afc:	2300      	movs	r3, #0
 8001afe:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001b02:	f012 fb66 	bl	80141d2 <z_impl_z_log_msg2_static_create>
            LOG_INF("SO2   we: %d   ae: %d", result[0], result[1]);
 8001b06:	b088      	sub	sp, #32
 8001b08:	466d      	mov	r5, sp
 8001b0a:	8822      	ldrh	r2, [r4, #0]
 8001b0c:	4979      	ldr	r1, [pc, #484]	; (8001cf4 <gas_sensors_read+0x238>)
 8001b0e:	8863      	ldrh	r3, [r4, #2]
 8001b10:	61ab      	str	r3, [r5, #24]
 8001b12:	462e      	mov	r6, r5
 8001b14:	f04f 0804 	mov.w	r8, #4
 8001b18:	e9c5 1204 	strd	r1, r2, [r5, #16]
 8001b1c:	f846 8f0c 	str.w	r8, [r6, #12]!
 8001b20:	4873      	ldr	r0, [pc, #460]	; (8001cf0 <gas_sensors_read+0x234>)
 8001b22:	4632      	mov	r2, r6
 8001b24:	2300      	movs	r3, #0
 8001b26:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b2a:	f012 fb52 	bl	80141d2 <z_impl_z_log_msg2_static_create>
            LOG_INF("O3N2  we: %d   ae: %d", result[2], result[3]);
 8001b2e:	4972      	ldr	r1, [pc, #456]	; (8001cf8 <gas_sensors_read+0x23c>)
 8001b30:	88a2      	ldrh	r2, [r4, #4]
 8001b32:	88e3      	ldrh	r3, [r4, #6]
 8001b34:	61ab      	str	r3, [r5, #24]
 8001b36:	46cd      	mov	sp, r9
 8001b38:	e9c5 1204 	strd	r1, r2, [r5, #16]
 8001b3c:	46ad      	mov	sp, r5
 8001b3e:	f8c5 800c 	str.w	r8, [r5, #12]
 8001b42:	486b      	ldr	r0, [pc, #428]	; (8001cf0 <gas_sensors_read+0x234>)
 8001b44:	4632      	mov	r2, r6
 8001b46:	2300      	movs	r3, #0
 8001b48:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b4c:	f012 fb41 	bl	80141d2 <z_impl_z_log_msg2_static_create>
            LOG_INF("NO2   we: %d   ae: %d", result[4], result[5]);
 8001b50:	496a      	ldr	r1, [pc, #424]	; (8001cfc <gas_sensors_read+0x240>)
 8001b52:	8922      	ldrh	r2, [r4, #8]
 8001b54:	8963      	ldrh	r3, [r4, #10]
 8001b56:	61ab      	str	r3, [r5, #24]
 8001b58:	46cd      	mov	sp, r9
 8001b5a:	e9c5 1204 	strd	r1, r2, [r5, #16]
 8001b5e:	46ad      	mov	sp, r5
 8001b60:	f8c5 800c 	str.w	r8, [r5, #12]
 8001b64:	4862      	ldr	r0, [pc, #392]	; (8001cf0 <gas_sensors_read+0x234>)
 8001b66:	4632      	mov	r2, r6
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b6e:	f012 fb30 	bl	80141d2 <z_impl_z_log_msg2_static_create>
            LOG_INF("CO    we: %d   ae: %d", result[6], result[7]); 
 8001b72:	4963      	ldr	r1, [pc, #396]	; (8001d00 <gas_sensors_read+0x244>)
 8001b74:	89a2      	ldrh	r2, [r4, #12]
 8001b76:	89e3      	ldrh	r3, [r4, #14]
 8001b78:	61ab      	str	r3, [r5, #24]
 8001b7a:	46cd      	mov	sp, r9
 8001b7c:	e9c5 1204 	strd	r1, r2, [r5, #16]
 8001b80:	46ad      	mov	sp, r5
 8001b82:	f8c5 800c 	str.w	r8, [r5, #12]
 8001b86:	485a      	ldr	r0, [pc, #360]	; (8001cf0 <gas_sensors_read+0x234>)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	4632      	mov	r2, r6
 8001b8c:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b90:	f012 fb1f 	bl	80141d2 <z_impl_z_log_msg2_static_create>

 8001b94:	372c      	adds	r7, #44	; 0x2c
 8001b96:	46bd      	mov	sp, r7
 8001b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i = 0; i < 4; i++) {
 8001b9c:	2600      	movs	r6, #0
            cmd[0] = 0x01;
 8001b9e:	f04f 0301 	mov.w	r3, #1
            switch (i) {
 8001ba2:	2e02      	cmp	r6, #2
            cmd[0] = 0x01;
 8001ba4:	733b      	strb	r3, [r7, #12]
            switch (i) {
 8001ba6:	f000 8097 	beq.w	8001cd8 <gas_sensors_read+0x21c>
 8001baa:	2e03      	cmp	r6, #3
 8001bac:	f000 8096 	beq.w	8001cdc <gas_sensors_read+0x220>
 8001bb0:	2e01      	cmp	r6, #1
                    cmd[1] = 0xC1;
 8001bb2:	bf14      	ite	ne
 8001bb4:	23c1      	movne	r3, #193	; 0xc1
                    cmd[1] = 0xD1;
 8001bb6:	23d1      	moveq	r3, #209	; 0xd1
                    cmd[1] = 0xF1;
 8001bb8:	737b      	strb	r3, [r7, #13]
            cmd[2] = 0x83;
 8001bba:	2383      	movs	r3, #131	; 0x83
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001bbc:	f107 010c 	add.w	r1, r7, #12
 8001bc0:	f8d8 0000 	ldr.w	r0, [r8]
            cmd[2] = 0x83;
 8001bc4:	73bb      	strb	r3, [r7, #14]
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	2348      	movs	r3, #72	; 0x48
 8001bca:	f011 fe61 	bl	8013890 <i2c_write.isra.0>
            k_msleep(10);
 8001bce:	200a      	movs	r0, #10
 8001bd0:	f011 fe59 	bl	8013886 <k_msleep.isra.0>
            cmd[0] = 0x00;
 8001bd4:	2500      	movs	r5, #0
            ret = i2c_write(i2c3_dev, cmd, 1, addr);
 8001bd6:	f8d8 0000 	ldr.w	r0, [r8]
            cmd[0] = 0x00;
 8001bda:	733d      	strb	r5, [r7, #12]
            ret = i2c_write(i2c3_dev, cmd, 1, addr);
 8001bdc:	2348      	movs	r3, #72	; 0x48
 8001bde:	2201      	movs	r2, #1
 8001be0:	f107 010c 	add.w	r1, r7, #12
 8001be4:	f011 fe54 	bl	8013890 <i2c_write.isra.0>
            k_msleep(10);
 8001be8:	200a      	movs	r0, #10
 8001bea:	f011 fe4c 	bl	8013886 <k_msleep.isra.0>
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	613b      	str	r3, [r7, #16]
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
 8001bf4:	f04f 0a03 	mov.w	sl, #3
	msg.len = num_bytes;
 8001bf8:	2302      	movs	r3, #2
            ret = i2c_read(i2c3_dev, readbuf, 2, addr);
 8001bfa:	f8d8 0000 	ldr.w	r0, [r8]
 8001bfe:	617b      	str	r3, [r7, #20]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
 8001c00:	f887 a018 	strb.w	sl, [r7, #24]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8001c04:	6883      	ldr	r3, [r0, #8]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8001c0c:	f107 0110 	add.w	r1, r7, #16
 8001c10:	2348      	movs	r3, #72	; 0x48
 8001c12:	47d8      	blx	fp
            k_msleep(20);
 8001c14:	2014      	movs	r0, #20
 8001c16:	f011 fe36 	bl	8013886 <k_msleep.isra.0>
            reading = (readbuf[0] << 8 | readbuf[1]);
 8001c1a:	893b      	ldrh	r3, [r7, #8]
 8001c1c:	ba5b      	rev16	r3, r3
 8001c1e:	b29b      	uxth	r3, r3
                reading=0;
 8001c20:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c24:	4293      	cmp	r3, r2
 8001c26:	bf88      	it	hi
 8001c28:	462b      	movhi	r3, r5
            result[i] = reading;
 8001c2a:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
        for (int i = 0; i < 4; i++) {
 8001c2e:	3601      	adds	r6, #1
 8001c30:	2e04      	cmp	r6, #4
 8001c32:	d1b4      	bne.n	8001b9e <gas_sensors_read+0xe2>
        k_msleep(10);
 8001c34:	200a      	movs	r0, #10
 8001c36:	f011 fe26 	bl	8013886 <k_msleep.isra.0>
        for (int i = 0; i < 4; i++) {
 8001c3a:	1da6      	adds	r6, r4, #6
            cmd[0] = 0x01;
 8001c3c:	f04f 0301 	mov.w	r3, #1
            switch (i) {
 8001c40:	2d02      	cmp	r5, #2
            cmd[0] = 0x01;
 8001c42:	733b      	strb	r3, [r7, #12]
            switch (i) {
 8001c44:	d04c      	beq.n	8001ce0 <gas_sensors_read+0x224>
 8001c46:	2d03      	cmp	r5, #3
 8001c48:	d04c      	beq.n	8001ce4 <gas_sensors_read+0x228>
 8001c4a:	2d01      	cmp	r5, #1
                    cmd[1] = 0xC1;
 8001c4c:	bf14      	ite	ne
 8001c4e:	23c1      	movne	r3, #193	; 0xc1
                    cmd[1] = 0xD1;
 8001c50:	23d1      	moveq	r3, #209	; 0xd1
                    cmd[1] = 0xF1;
 8001c52:	737b      	strb	r3, [r7, #13]
            cmd[2] = 0x83;
 8001c54:	2383      	movs	r3, #131	; 0x83
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001c56:	f107 010c 	add.w	r1, r7, #12
 8001c5a:	f8d8 0000 	ldr.w	r0, [r8]
            cmd[2] = 0x83;
 8001c5e:	73bb      	strb	r3, [r7, #14]
            ret = i2c_write(i2c3_dev, cmd, 3, addr);
 8001c60:	2203      	movs	r2, #3
 8001c62:	2349      	movs	r3, #73	; 0x49
 8001c64:	f011 fe14 	bl	8013890 <i2c_write.isra.0>
            k_msleep(10);
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f011 fe0c 	bl	8013886 <k_msleep.isra.0>
            cmd[0] = 0x00;
 8001c6e:	2300      	movs	r3, #0
            ret = i2c_write(i2c3_dev, cmd, 1, addr);
 8001c70:	f8d8 0000 	ldr.w	r0, [r8]
            cmd[0] = 0x00;
 8001c74:	733b      	strb	r3, [r7, #12]
            ret = i2c_write(i2c3_dev, cmd, 1, addr);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2349      	movs	r3, #73	; 0x49
 8001c7a:	f107 010c 	add.w	r1, r7, #12
 8001c7e:	f011 fe07 	bl	8013890 <i2c_write.isra.0>
            k_msleep(10);
 8001c82:	200a      	movs	r0, #10
 8001c84:	f011 fdff 	bl	8013886 <k_msleep.isra.0>
	msg.buf = buf;
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	613b      	str	r3, [r7, #16]
	msg.len = num_bytes;
 8001c8e:	2302      	movs	r3, #2
            ret = i2c_read(i2c3_dev, readbuf, 2, addr);
 8001c90:	f8d8 0000 	ldr.w	r0, [r8]
 8001c94:	617b      	str	r3, [r7, #20]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
 8001c96:	f887 a018 	strb.w	sl, [r7, #24]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8001c9a:	6883      	ldr	r3, [r0, #8]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8001ca2:	f107 0110 	add.w	r1, r7, #16
 8001ca6:	2349      	movs	r3, #73	; 0x49
 8001ca8:	47d8      	blx	fp
            k_msleep(20);
 8001caa:	2014      	movs	r0, #20
 8001cac:	f011 fdeb 	bl	8013886 <k_msleep.isra.0>
            reading = (readbuf[0] << 8 | readbuf[1]);
 8001cb0:	893b      	ldrh	r3, [r7, #8]
 8001cb2:	ba5b      	rev16	r3, r3
 8001cb4:	b29b      	uxth	r3, r3
                reading=0;
 8001cb6:	f242 7210 	movw	r2, #10000	; 0x2710
        for (int i = 0; i < 4; i++) {
 8001cba:	3501      	adds	r5, #1
                reading=0;
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	bf88      	it	hi
 8001cc0:	2300      	movhi	r3, #0
        for (int i = 0; i < 4; i++) {
 8001cc2:	2d04      	cmp	r5, #4
            result[i + 4] = reading;
 8001cc4:	f826 3f02 	strh.w	r3, [r6, #2]!
        for (int i = 0; i < 4; i++) {
 8001cc8:	d1b8      	bne.n	8001c3c <gas_sensors_read+0x180>
        k_msleep(1000);
 8001cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cce:	f011 fdda 	bl	8013886 <k_msleep.isra.0>
    for (int s=0; s < samples; s++) {
 8001cd2:	f109 0901 	add.w	r9, r9, #1
 8001cd6:	e6fb      	b.n	8001ad0 <gas_sensors_read+0x14>
                    cmd[1] = 0xE1;
 8001cd8:	23e1      	movs	r3, #225	; 0xe1
 8001cda:	e76d      	b.n	8001bb8 <gas_sensors_read+0xfc>
                    cmd[1] = 0xF1;
 8001cdc:	23f1      	movs	r3, #241	; 0xf1
 8001cde:	e76b      	b.n	8001bb8 <gas_sensors_read+0xfc>
                    cmd[1] = 0xE1;
 8001ce0:	23e1      	movs	r3, #225	; 0xe1
 8001ce2:	e7b6      	b.n	8001c52 <gas_sensors_read+0x196>
                    cmd[1] = 0xF1;
 8001ce4:	23f1      	movs	r3, #241	; 0xf1
 8001ce6:	e7b4      	b.n	8001c52 <gas_sensors_read+0x196>
 8001ce8:	20000fb0 	.word	0x20000fb0
 8001cec:	0801ae31 	.word	0x0801ae31
 8001cf0:	08019fb8 	.word	0x08019fb8
 8001cf4:	0801ae3e 	.word	0x0801ae3e
 8001cf8:	0801ae54 	.word	0x0801ae54
 8001cfc:	0801ae6a 	.word	0x0801ae6a
 8001d00:	0801ae80 	.word	0x0801ae80

08001d04 <lorwan_datarate_changed>:
        LOG_INF("IT CONTAINS DATA !!!!!!!!!!!!!!!");
        LOG_HEXDUMP_INF(data, len, "Payload: ");
    }
}

static void lorwan_datarate_changed(enum lorawan_datarate dr) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4604      	mov	r4, r0
    uint8_t unused, max_size;

    lorawan_get_payload_sizes(&unused, &max_size);
 8001d0c:	1df9      	adds	r1, r7, #7
 8001d0e:	1db8      	adds	r0, r7, #6
 8001d10:	f012 fb3b 	bl	801438a <lorawan_get_payload_sizes>
    LOG_INF("New Datarate: DR_%d, Max Payload %d", dr, max_size);
 8001d14:	b088      	sub	sp, #32
 8001d16:	466a      	mov	r2, sp
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	4907      	ldr	r1, [pc, #28]	; (8001d38 <lorwan_datarate_changed+0x34>)
 8001d1c:	6193      	str	r3, [r2, #24]
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e9c2 1404 	strd	r1, r4, [r2, #16]
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <lorwan_datarate_changed+0x38>)
 8001d26:	f842 3f0c 	str.w	r3, [r2, #12]!
 8001d2a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001d2e:	f011 fdbc 	bl	80138aa <z_log_msg2_static_create.constprop.0>
}
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd90      	pop	{r4, r7, pc}
 8001d38:	0801aea2 	.word	0x0801aea2
 8001d3c:	08019ff0 	.word	0x08019ff0

08001d40 <dl_callback>:
        uint8_t len, const uint8_t *data) {
 8001d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
    LOG_INF("Downlink Callback: Port %d, Pending %d, RSSI %ddB, SNR %ddBm", port, data_pending, rssi, snr);
 8001d44:	466e      	mov	r6, sp
        uint8_t len, const uint8_t *data) {
 8001d46:	af04      	add	r7, sp, #16
    LOG_INF("Downlink Callback: Port %d, Pending %d, RSSI %ddB, SNR %ddBm", port, data_pending, rssi, snr);
 8001d48:	b08a      	sub	sp, #40	; 0x28
 8001d4a:	ac04      	add	r4, sp, #16
 8001d4c:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8001d50:	f8df c058 	ldr.w	ip, [pc, #88]	; 8001dac <dl_callback+0x6c>
 8001d54:	930c      	str	r3, [sp, #48]	; 0x30
 8001d56:	4622      	mov	r2, r4
 8001d58:	2306      	movs	r3, #6
        uint8_t len, const uint8_t *data) {
 8001d5a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    LOG_INF("Downlink Callback: Port %d, Pending %d, RSSI %ddB, SNR %ddBm", port, data_pending, rssi, snr);
 8001d5c:	e9cd c008 	strd	ip, r0, [sp, #32]
 8001d60:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001d64:	f842 3f0c 	str.w	r3, [r2, #12]!
 8001d68:	4811      	ldr	r0, [pc, #68]	; (8001db0 <dl_callback+0x70>)
 8001d6a:	f011 fd9e 	bl	80138aa <z_log_msg2_static_create.constprop.0>
 8001d6e:	46b5      	mov	sp, r6
    if (data) {
 8001d70:	b1c5      	cbz	r5, 8001da4 <dl_callback+0x64>
        LOG_INF("IT CONTAINS DATA !!!!!!!!!!!!!!!");
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <dl_callback+0x74>)
 8001d74:	480e      	ldr	r0, [pc, #56]	; (8001db0 <dl_callback+0x70>)
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	f107 020c 	add.w	r2, r7, #12
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	f011 fd91 	bl	80138aa <z_log_msg2_static_create.constprop.0>
        LOG_HEXDUMP_INF(data, len, "Payload: ");
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <dl_callback+0x78>)
 8001d8a:	9303      	str	r3, [sp, #12]
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <dl_callback+0x7c>)
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	9001      	str	r0, [sp, #4]
 8001d94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4905      	ldr	r1, [pc, #20]	; (8001db0 <dl_callback+0x70>)
 8001d9c:	462b      	mov	r3, r5
 8001d9e:	2203      	movs	r2, #3
 8001da0:	f011 fd86 	bl	80138b0 <z_log_msg2_runtime_create.constprop.0>
}
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	0801aec6 	.word	0x0801aec6
 8001db0:	08019ff0 	.word	0x08019ff0
 8001db4:	0801af03 	.word	0x0801af03
 8001db8:	0801af24 	.word	0x0801af24
 8001dbc:	0801ba80 	.word	0x0801ba80

08001dc0 <read_gas_and_ambient_sensors>:

/* * * * * * * * THREAD: Read Gas & Ambient Sensors * * * * * * * */

K_THREAD_STACK_DEFINE(read_gas_and_ambient_sensors_stack_area, STACKSIZE);
struct k_thread read_gas_and_ambient_sensors_thread_data;
extern void read_gas_and_ambient_sensors() {
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	b0c8      	sub	sp, #288	; 0x120
    
    LOG_INF("Read Gas Sensors Thread Spawn!");
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <read_gas_and_ambient_sensors+0xcc>)
 8001dc6:	4832      	ldr	r0, [pc, #200]	; (8001e90 <read_gas_and_ambient_sensors+0xd0>)
 8001dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8001dca:	2402      	movs	r4, #2
 8001dcc:	aa19      	add	r2, sp, #100	; 0x64
 8001dce:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001dd2:	9419      	str	r4, [sp, #100]	; 0x64
 8001dd4:	f011 fd69 	bl	80138aa <z_log_msg2_static_create.constprop.0>
    LOG_INF("Warming up!");
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <read_gas_and_ambient_sensors+0xd4>)
 8001dda:	482d      	ldr	r0, [pc, #180]	; (8001e90 <read_gas_and_ambient_sensors+0xd0>)
    while(1) {
        //LOG_INF("Reading gas sensors...");
        //verificar con el otro sensor el lapso!!!!!!!!!!!
        gas_sensors_read(gs,5);
        ambient_sensors_read(1, amb_sensors);
        snprintfcb(text_data, 200, "%s|%d|%d|%d|"
 8001ddc:	4e2e      	ldr	r6, [pc, #184]	; (8001e98 <read_gas_and_ambient_sensors+0xd8>)
                gs[6],
                gs[7],
                amb_sensors[0],
                amb_sensors[1],
                amb_sensors[2]);                
        save_data(text_data, "gas");
 8001dde:	4d2f      	ldr	r5, [pc, #188]	; (8001e9c <read_gas_and_ambient_sensors+0xdc>)
    LOG_INF("Warming up!");
 8001de0:	aa19      	add	r2, sp, #100	; 0x64
 8001de2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001de6:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
 8001dea:	f011 fd5e 	bl	80138aa <z_log_msg2_static_create.constprop.0>
    k_msleep(10000);
 8001dee:	f242 7010 	movw	r0, #10000	; 0x2710
 8001df2:	f011 fd9a 	bl	801392a <k_msleep.isra.0>
    amb_sensors[0] = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	930f      	str	r3, [sp, #60]	; 0x3c
    amb_sensors[1] = 0;
 8001dfa:	9310      	str	r3, [sp, #64]	; 0x40
    amb_sensors[2] = 0;
 8001dfc:	9311      	str	r3, [sp, #68]	; 0x44
        gas_sensors_read(gs,5);
 8001dfe:	a812      	add	r0, sp, #72	; 0x48
 8001e00:	2105      	movs	r1, #5
 8001e02:	f7ff fe5b 	bl	8001abc <gas_sensors_read>
        ambient_sensors_read(1, amb_sensors);
 8001e06:	a90f      	add	r1, sp, #60	; 0x3c
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff fae5 	bl	80013d8 <ambient_sensors_read>
        snprintfcb(text_data, 200, "%s|%d|%d|%d|"
 8001e0e:	f000 ff63 	bl	8002cd8 <get_formatted_time>
 8001e12:	4604      	mov	r4, r0
 8001e14:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001e16:	f7fe fb47 	bl	80004a8 <__aeabi_f2d>
 8001e1a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001e1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001e20:	f7fe fb42 	bl	80004a8 <__aeabi_f2d>
 8001e24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001e28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001e2a:	f7fe fb3d 	bl	80004a8 <__aeabi_f2d>
 8001e2e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8001e32:	9307      	str	r3, [sp, #28]
 8001e34:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8001e38:	9306      	str	r3, [sp, #24]
 8001e3a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8001e3e:	9305      	str	r3, [sp, #20]
 8001e40:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8001e44:	9304      	str	r3, [sp, #16]
 8001e46:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8001e4a:	9303      	str	r3, [sp, #12]
 8001e4c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8001e50:	9302      	str	r3, [sp, #8]
 8001e52:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001e62:	4623      	mov	r3, r4
 8001e64:	4632      	mov	r2, r6
 8001e66:	21c8      	movs	r1, #200	; 0xc8
 8001e68:	a816      	add	r0, sp, #88	; 0x58
 8001e6a:	f011 fdb1 	bl	80139d0 <snprintfcb>
        save_data(text_data, "gas");
 8001e6e:	4629      	mov	r1, r5
 8001e70:	a816      	add	r0, sp, #88	; 0x58
 8001e72:	f7ff fc91 	bl	8001798 <save_data>
        strcpy(gas_msg, text_data);
 8001e76:	22c8      	movs	r2, #200	; 0xc8
 8001e78:	a916      	add	r1, sp, #88	; 0x58
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <read_gas_and_ambient_sensors+0xe0>)
 8001e7c:	f017 fb3f 	bl	80194fe <__strcpy_chk>
        k_msleep(30000);
 8001e80:	f247 5030 	movw	r0, #30000	; 0x7530
 8001e84:	f011 fd51 	bl	801392a <k_msleep.isra.0>
    while(1) {
 8001e88:	e7b9      	b.n	8001dfe <read_gas_and_ambient_sensors+0x3e>
 8001e8a:	bf00      	nop
 8001e8c:	0801af2e 	.word	0x0801af2e
 8001e90:	08019ff0 	.word	0x08019ff0
 8001e94:	0801af4d 	.word	0x0801af4d
 8001e98:	0801af59 	.word	0x0801af59
 8001e9c:	0801af87 	.word	0x0801af87
 8001ea0:	2000235e 	.word	0x2000235e

08001ea4 <count_particles>:
extern void count_particles() {
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	b0f8      	sub	sp, #480	; 0x1e0
    LOG_INF("Count Particles Thread Spawn!");
 8001ea8:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <count_particles+0xe4>)
 8001eaa:	934a      	str	r3, [sp, #296]	; 0x128
 8001eac:	4837      	ldr	r0, [pc, #220]	; (8001f8c <count_particles+0xe8>)
        LOG_INF("Counting Particles...");
 8001eae:	4e38      	ldr	r6, [pc, #224]	; (8001f90 <count_particles+0xec>)
        gpio_pin_set_dt(&led_red,1);
 8001eb0:	4d38      	ldr	r5, [pc, #224]	; (8001f94 <count_particles+0xf0>)
    LOG_INF("Count Particles Thread Spawn!");
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	aa49      	add	r2, sp, #292	; 0x124
 8001eb6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001eba:	9349      	str	r3, [sp, #292]	; 0x124
 8001ebc:	f011 fcf5 	bl	80138aa <z_log_msg2_static_create.constprop.0>
    amb_sensors[0] = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9311      	str	r3, [sp, #68]	; 0x44
    amb_sensors[1] = 0;
 8001ec4:	9312      	str	r3, [sp, #72]	; 0x48
    amb_sensors[2] = 0;
 8001ec6:	9313      	str	r3, [sp, #76]	; 0x4c
        LOG_INF("Counting Particles...");
 8001ec8:	2302      	movs	r3, #2
 8001eca:	aa17      	add	r2, sp, #92	; 0x5c
 8001ecc:	482f      	ldr	r0, [pc, #188]	; (8001f8c <count_particles+0xe8>)
 8001ece:	9317      	str	r3, [sp, #92]	; 0x5c
 8001ed0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001ed4:	9618      	str	r6, [sp, #96]	; 0x60
 8001ed6:	f011 fce8 	bl	80138aa <z_log_msg2_static_create.constprop.0>
        gpio_pin_set_dt(&led_red,1);
 8001eda:	4628      	mov	r0, r5
 8001edc:	2101      	movs	r1, #1
 8001ede:	f011 fcf6 	bl	80138ce <gpio_pin_set_dt.isra.0>
        opc_init();    
 8001ee2:	f000 fadb 	bl	800249c <opc_init>
        opc_start();
 8001ee6:	f000 fb47 	bl	8002578 <opc_start>
        data = opc_read_histogram(7);
 8001eea:	a81a      	add	r0, sp, #104	; 0x68
 8001eec:	2107      	movs	r1, #7
 8001eee:	f000 fcb1 	bl	8002854 <opc_read_histogram>
        opc_stop();
 8001ef2:	f000 fbff 	bl	80026f4 <opc_stop>
        opc_release();
 8001ef6:	f000 fa87 	bl	8002408 <opc_release>
        gpio_pin_set_dt(&led_red,0);
 8001efa:	4628      	mov	r0, r5
 8001efc:	2100      	movs	r1, #0
 8001efe:	f011 fce6 	bl	80138ce <gpio_pin_set_dt.isra.0>
        ambient_sensors_read(1, amb_sensors);
 8001f02:	a911      	add	r1, sp, #68	; 0x44
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7ff fa67 	bl	80013d8 <ambient_sensors_read>
        snprintfcb(text_data, 200, "%s|%0.2f|%0.2f|%0.2f|%0.2f|"
 8001f0a:	f000 fee5 	bl	8002cd8 <get_formatted_time>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001f12:	f7fe fac9 	bl	80004a8 <__aeabi_f2d>
 8001f16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001f1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001f1c:	f7fe fac4 	bl	80004a8 <__aeabi_f2d>
 8001f20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001f24:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f26:	f7fe fabf 	bl	80004a8 <__aeabi_f2d>
 8001f2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001f2e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001f30:	f7fe faba 	bl	80004a8 <__aeabi_f2d>
 8001f34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001f38:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8001f3a:	f7fe fab5 	bl	80004a8 <__aeabi_f2d>
 8001f3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001f42:	9842      	ldr	r0, [sp, #264]	; 0x108
 8001f44:	f7fe fab0 	bl	80004a8 <__aeabi_f2d>
 8001f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f4c:	983e      	ldr	r0, [sp, #248]	; 0xf8
 8001f4e:	f7fe faab 	bl	80004a8 <__aeabi_f2d>
 8001f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f56:	9840      	ldr	r0, [sp, #256]	; 0x100
 8001f58:	f7fe faa6 	bl	80004a8 <__aeabi_f2d>
 8001f5c:	4623      	mov	r3, r4
 8001f5e:	e9cd 0100 	strd	r0, r1, [sp]
 8001f62:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <count_particles+0xf4>)
 8001f64:	21c8      	movs	r1, #200	; 0xc8
 8001f66:	a846      	add	r0, sp, #280	; 0x118
 8001f68:	f011 fd32 	bl	80139d0 <snprintfcb>
        strcpy(opc_msg, text_data);
 8001f6c:	22c8      	movs	r2, #200	; 0xc8
 8001f6e:	a946      	add	r1, sp, #280	; 0x118
 8001f70:	480a      	ldr	r0, [pc, #40]	; (8001f9c <count_particles+0xf8>)
 8001f72:	f017 fac4 	bl	80194fe <__strcpy_chk>
        save_data(text_data, "opc");
 8001f76:	a846      	add	r0, sp, #280	; 0x118
 8001f78:	4909      	ldr	r1, [pc, #36]	; (8001fa0 <count_particles+0xfc>)
 8001f7a:	f7ff fc0d 	bl	8001798 <save_data>
        k_msleep(120000);
 8001f7e:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <count_particles+0x100>)
 8001f80:	f011 fcd3 	bl	801392a <k_msleep.isra.0>
    while(1) {
 8001f84:	e7a0      	b.n	8001ec8 <count_particles+0x24>
 8001f86:	bf00      	nop
 8001f88:	0801af8b 	.word	0x0801af8b
 8001f8c:	08019ff0 	.word	0x08019ff0
 8001f90:	0801afa9 	.word	0x0801afa9
 8001f94:	0801a188 	.word	0x0801a188
 8001f98:	0801afbf 	.word	0x0801afbf
 8001f9c:	20002426 	.word	0x20002426
 8001fa0:	0801aff3 	.word	0x0801aff3
 8001fa4:	0001d4c0 	.word	0x0001d4c0

08001fa8 <send_data>:

/* * * * * * * * THREAD: Send Data * * * * * * * */

K_THREAD_STACK_DEFINE(send_data_stack_area, STACKSIZE);
struct k_thread send_data_thread_data;
extern void send_data() {
 8001fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fac:	b09c      	sub	sp, #112	; 0x70
    

    LOG_INF("LoRaWAN Update Results Thread Spawn!");
 8001fae:	4b9b      	ldr	r3, [pc, #620]	; (800221c <send_data+0x274>)
 8001fb0:	489b      	ldr	r0, [pc, #620]	; (8002220 <send_data+0x278>)
 8001fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8001fb4:	aa19      	add	r2, sp, #100	; 0x64
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001fbc:	9319      	str	r3, [sp, #100]	; 0x64
 8001fbe:	f011 fc74 	bl	80138aa <z_log_msg2_static_create.constprop.0>
    int ret;
    /* * * * * * * * * * * * * LORA * * * * * * * * * * * * * */
    const struct device *lora_dev;
    struct lorawan_join_config join_cfg;
    uint8_t dev_eui[] = LORAWAN_DEV_EUI;
 8001fc2:	4a98      	ldr	r2, [pc, #608]	; (8002224 <send_data+0x27c>)
 8001fc4:	6810      	ldr	r0, [r2, #0]
 8001fc6:	6851      	ldr	r1, [r2, #4]
    uint8_t join_eui[] = LORAWAN_JOIN_EUI;
 8001fc8:	4a97      	ldr	r2, [pc, #604]	; (8002228 <send_data+0x280>)
    uint8_t dev_eui[] = LORAWAN_DEV_EUI;
 8001fca:	ab05      	add	r3, sp, #20
 8001fcc:	c303      	stmia	r3!, {r0, r1}
    uint8_t join_eui[] = LORAWAN_JOIN_EUI;
 8001fce:	6810      	ldr	r0, [r2, #0]
 8001fd0:	6851      	ldr	r1, [r2, #4]
 8001fd2:	c303      	stmia	r3!, {r0, r1}
    uint8_t app_key[] = LORAWAN_APP_KEY;
 8001fd4:	4b95      	ldr	r3, [pc, #596]	; (800222c <send_data+0x284>)
 8001fd6:	aa0c      	add	r2, sp, #48	; 0x30
 8001fd8:	f103 0610 	add.w	r6, r3, #16
 8001fdc:	4615      	mov	r5, r2
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	c403      	stmia	r4!, {r0, r1}
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	42b3      	cmp	r3, r6
 8001fea:	4622      	mov	r2, r4
 8001fec:	d1f7      	bne.n	8001fde <send_data+0x36>


    struct lorawan_downlink_cb downlink_cb = {
 8001fee:	2600      	movs	r6, #0
 8001ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff4:	9609      	str	r6, [sp, #36]	; 0x24
 8001ff6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8001ffa:	4b8d      	ldr	r3, [pc, #564]	; (8002230 <send_data+0x288>)
 8001ffc:	960b      	str	r6, [sp, #44]	; 0x2c
 8001ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8002000:	4c8c      	ldr	r4, [pc, #560]	; (8002234 <send_data+0x28c>)
 8002002:	4620      	mov	r0, r4
 8002004:	f00d fdae 	bl	800fb64 <z_impl_device_get_binding>
 8002008:	4603      	mov	r3, r0
        .port = LW_RECV_PORT_ANY,
        .cb = dl_callback
    };

    lora_dev = device_get_binding(DEFAULT_RADIO);
    if (!lora_dev) {
 800200a:	b958      	cbnz	r0, 8002024 <send_data+0x7c>
        LOG_ERR("%s Device not found", DEFAULT_RADIO);
 800200c:	4a8a      	ldr	r2, [pc, #552]	; (8002238 <send_data+0x290>)
 800200e:	4984      	ldr	r1, [pc, #528]	; (8002220 <send_data+0x278>)
 8002010:	9403      	str	r4, [sp, #12]
 8002012:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8002016:	9000      	str	r0, [sp, #0]
 8002018:	2201      	movs	r2, #1
 800201a:	f011 fc49 	bl	80138b0 <z_log_msg2_runtime_create.constprop.0>
        }
     

        k_msleep(10000);
    }
}
 800201e:	b01c      	add	sp, #112	; 0x70
 8002020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LOG_INF("LoRaWAN Device Found...");
 8002024:	4b85      	ldr	r3, [pc, #532]	; (800223c <send_data+0x294>)
 8002026:	487e      	ldr	r0, [pc, #504]	; (8002220 <send_data+0x278>)
 8002028:	931a      	str	r3, [sp, #104]	; 0x68
 800202a:	aa19      	add	r2, sp, #100	; 0x64
 800202c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002030:	2402      	movs	r4, #2
 8002032:	9419      	str	r4, [sp, #100]	; 0x64
 8002034:	f011 fc39 	bl	80138aa <z_log_msg2_static_create.constprop.0>
    ret = lorawan_start();
 8002038:	f003 fddc 	bl	8005bf4 <lorawan_start>
    if (ret < 0) {
 800203c:	2800      	cmp	r0, #0
 800203e:	da0b      	bge.n	8002058 <send_data+0xb0>
        LOG_ERR("lorawan_start failed: %d", ret);
 8002040:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <send_data+0x298>)
 8002042:	aa19      	add	r2, sp, #100	; 0x64
 8002044:	e9cd 301a 	strd	r3, r0, [sp, #104]	; 0x68
 8002048:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800204c:	2303      	movs	r3, #3
 800204e:	4874      	ldr	r0, [pc, #464]	; (8002220 <send_data+0x278>)
 8002050:	9319      	str	r3, [sp, #100]	; 0x64
 8002052:	f011 fc2a 	bl	80138aa <z_log_msg2_static_create.constprop.0>
        return;
 8002056:	e7e2      	b.n	800201e <send_data+0x76>
        LOG_INF("LoRaWAN Started...");
 8002058:	4b7a      	ldr	r3, [pc, #488]	; (8002244 <send_data+0x29c>)
 800205a:	4871      	ldr	r0, [pc, #452]	; (8002220 <send_data+0x278>)
            LOG_INF("Connected to network over OTAA!");
 800205c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002248 <send_data+0x2a0>
            gpio_pin_set_dt(&led_green,1);
 8002060:	4f7a      	ldr	r7, [pc, #488]	; (800224c <send_data+0x2a4>)
        LOG_INF("LoRaWAN Started...");
 8002062:	aa19      	add	r2, sp, #100	; 0x64
 8002064:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002068:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
 800206c:	f011 fc1d 	bl	80138aa <z_log_msg2_static_create.constprop.0>
    lorawan_register_downlink_callback(&downlink_cb);
 8002070:	a809      	add	r0, sp, #36	; 0x24
 8002072:	f003 fda9 	bl	8005bc8 <lorawan_register_downlink_callback>
    lorawan_register_dr_changed_callback(lorwan_datarate_changed);
 8002076:	4876      	ldr	r0, [pc, #472]	; (8002250 <send_data+0x2a8>)
 8002078:	f003 fdb6 	bl	8005be8 <lorawan_register_dr_changed_callback>
    join_cfg.dev_eui = dev_eui;
 800207c:	ab05      	add	r3, sp, #20
 800207e:	931a      	str	r3, [sp, #104]	; 0x68
    join_cfg.otaa.join_eui = join_eui;
 8002080:	ab07      	add	r3, sp, #28
    join_cfg.otaa.nwk_key = app_key;
 8002082:	e9cd 5517 	strd	r5, r5, [sp, #92]	; 0x5c
    join_cfg.otaa.join_eui = join_eui;
 8002086:	9316      	str	r3, [sp, #88]	; 0x58
            LOG_INF("Connected to network over OTAA!");
 8002088:	4d65      	ldr	r5, [pc, #404]	; (8002220 <send_data+0x278>)
    LOG_INF("Joining network over OTAA");
 800208a:	4b72      	ldr	r3, [pc, #456]	; (8002254 <send_data+0x2ac>)
 800208c:	4864      	ldr	r0, [pc, #400]	; (8002220 <send_data+0x278>)
    join_cfg.mode = LORAWAN_ACT_OTAA;
 800208e:	f88d 606c 	strb.w	r6, [sp, #108]	; 0x6c
    LOG_INF("Joining network over OTAA");
 8002092:	aa13      	add	r2, sp, #76	; 0x4c
 8002094:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002098:	e9cd 4313 	strd	r4, r3, [sp, #76]	; 0x4c
 800209c:	f011 fc05 	bl	80138aa <z_log_msg2_static_create.constprop.0>
        ret = lorawan_join(&join_cfg);
 80020a0:	a816      	add	r0, sp, #88	; 0x58
 80020a2:	f003 fc27 	bl	80058f4 <lorawan_join>
        if (ret < 0) {
 80020a6:	1e04      	subs	r4, r0, #0
 80020a8:	da1d      	bge.n	80020e6 <send_data+0x13e>
            gpio_pin_set_dt(&led_red,1);
 80020aa:	486b      	ldr	r0, [pc, #428]	; (8002258 <send_data+0x2b0>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	f011 fc0e 	bl	80138ce <gpio_pin_set_dt.isra.0>
            LOG_ERR("lorawan_join_network failed: %d", ret);
 80020b2:	4b6a      	ldr	r3, [pc, #424]	; (800225c <send_data+0x2b4>)
 80020b4:	aa13      	add	r2, sp, #76	; 0x4c
 80020b6:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 80020ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80020be:	2303      	movs	r3, #3
 80020c0:	4628      	mov	r0, r5
 80020c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80020c4:	f011 fbf1 	bl	80138aa <z_log_msg2_static_create.constprop.0>
 80020c8:	2100      	movs	r1, #0
 80020ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80020ce:	f00e fcb3 	bl	8010a38 <z_impl_k_sleep>
            gpio_pin_set_dt(&led_red,0);
 80020d2:	4861      	ldr	r0, [pc, #388]	; (8002258 <send_data+0x2b0>)
 80020d4:	2100      	movs	r1, #0
 80020d6:	f011 fbfa 	bl	80138ce <gpio_pin_set_dt.isra.0>
 80020da:	2100      	movs	r1, #0
 80020dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80020e0:	f00e fcaa 	bl	8010a38 <z_impl_k_sleep>
    while (ret < 0) {
 80020e4:	e7dc      	b.n	80020a0 <send_data+0xf8>
            ret = lorawan_set_datarate(LORAWAN_DR_2);
 80020e6:	2002      	movs	r0, #2
 80020e8:	f003 fcd4 	bl	8005a94 <lorawan_set_datarate>
            if (ret < 0) {
 80020ec:	1e04      	subs	r4, r0, #0
 80020ee:	da09      	bge.n	8002104 <send_data+0x15c>
                LOG_ERR("Could not set datarate!");
 80020f0:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <send_data+0x2b8>)
 80020f2:	9314      	str	r3, [sp, #80]	; 0x50
 80020f4:	aa13      	add	r2, sp, #76	; 0x4c
 80020f6:	2302      	movs	r3, #2
 80020f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80020fc:	4628      	mov	r0, r5
 80020fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8002100:	f011 fbd3 	bl	80138aa <z_log_msg2_static_create.constprop.0>
            LOG_INF("Connected to network over OTAA!");
 8002104:	aa13      	add	r2, sp, #76	; 0x4c
 8002106:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800210a:	4628      	mov	r0, r5
 800210c:	2602      	movs	r6, #2
 800210e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8002112:	9613      	str	r6, [sp, #76]	; 0x4c
 8002114:	f011 fbc9 	bl	80138aa <z_log_msg2_static_create.constprop.0>
            gpio_pin_set_dt(&led_green,1);
 8002118:	2101      	movs	r1, #1
 800211a:	4638      	mov	r0, r7
 800211c:	f011 fbd7 	bl	80138ce <gpio_pin_set_dt.isra.0>
    while (ret < 0) {
 8002120:	2c00      	cmp	r4, #0
 8002122:	dbbd      	blt.n	80020a0 <send_data+0xf8>
    LOG_INF("Entering Loop...");
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <send_data+0x2bc>)
        ret = lorawan_send(1, gas_msg, strlen(gas_msg), LORAWAN_MSG_CONFIRMED);
 8002126:	4d50      	ldr	r5, [pc, #320]	; (8002268 <send_data+0x2c0>)
    LOG_INF("Entering Loop...");
 8002128:	483d      	ldr	r0, [pc, #244]	; (8002220 <send_data+0x278>)
 800212a:	e9cd 6313 	strd	r6, r3, [sp, #76]	; 0x4c
        ret = lorawan_send(2, opc_msg, strlen(opc_msg), LORAWAN_MSG_CONFIRMED);
 800212e:	4e4f      	ldr	r6, [pc, #316]	; (800226c <send_data+0x2c4>)
    LOG_INF("Entering Loop...");
 8002130:	aa13      	add	r2, sp, #76	; 0x4c
 8002132:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002136:	f011 fbb8 	bl	80138aa <z_log_msg2_static_create.constprop.0>
        ret = lorawan_send(1, gas_msg, strlen(gas_msg), LORAWAN_MSG_CONFIRMED);
 800213a:	4628      	mov	r0, r5
 800213c:	f7ff f943 	bl	80013c6 <strlen>
 8002140:	2301      	movs	r3, #1
 8002142:	b2c2      	uxtb	r2, r0
 8002144:	4629      	mov	r1, r5
 8002146:	4618      	mov	r0, r3
 8002148:	f003 fcc4 	bl	8005ad4 <lorawan_send>
        if (ret == -EAGAIN) {
 800214c:	f110 0f0b 	cmn.w	r0, #11
 8002150:	d124      	bne.n	800219c <send_data+0x1f4>
            k_msleep(2000);
 8002152:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002156:	f011 fbe8 	bl	801392a <k_msleep.isra.0>
            k_msleep(2000);
 800215a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800215e:	f011 fbe4 	bl	801392a <k_msleep.isra.0>
        k_msleep(10000);
 8002162:	f242 7010 	movw	r0, #10000	; 0x2710
 8002166:	f011 fbe0 	bl	801392a <k_msleep.isra.0>
        ret = lorawan_send(2, opc_msg, strlen(opc_msg), LORAWAN_MSG_CONFIRMED);
 800216a:	4630      	mov	r0, r6
 800216c:	f7ff f92b 	bl	80013c6 <strlen>
 8002170:	2301      	movs	r3, #1
 8002172:	b2c2      	uxtb	r2, r0
 8002174:	4631      	mov	r1, r6
 8002176:	2002      	movs	r0, #2
 8002178:	f003 fcac 	bl	8005ad4 <lorawan_send>
        if (ret == -EAGAIN) {
 800217c:	f110 0f0b 	cmn.w	r0, #11
 8002180:	d12c      	bne.n	80021dc <send_data+0x234>
            k_msleep(2000);
 8002182:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002186:	f011 fbd0 	bl	801392a <k_msleep.isra.0>
            k_msleep(2000);
 800218a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800218e:	f011 fbcc 	bl	801392a <k_msleep.isra.0>
        k_msleep(10000);
 8002192:	f242 7010 	movw	r0, #10000	; 0x2710
 8002196:	f011 fbc8 	bl	801392a <k_msleep.isra.0>
        ret = lorawan_send(1, gas_msg, strlen(gas_msg), LORAWAN_MSG_CONFIRMED);
 800219a:	e7ce      	b.n	800213a <send_data+0x192>
        if (ret < 0) {
 800219c:	2800      	cmp	r0, #0
 800219e:	dbdc      	blt.n	800215a <send_data+0x1b2>
        if (ret == 0) {
 80021a0:	d1df      	bne.n	8002162 <send_data+0x1ba>
            LOG_INF("* - * - * - * - * Sensor Data sent! * - * - * - * - * ");
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <send_data+0x2c8>)
                gpio_pin_set_dt(&led_green,1);
 80021a4:	4f29      	ldr	r7, [pc, #164]	; (800224c <send_data+0x2a4>)
            LOG_INF("* - * - * - * - * Sensor Data sent! * - * - * - * - * ");
 80021a6:	9314      	str	r3, [sp, #80]	; 0x50
 80021a8:	481d      	ldr	r0, [pc, #116]	; (8002220 <send_data+0x278>)
 80021aa:	2302      	movs	r3, #2
 80021ac:	aa13      	add	r2, sp, #76	; 0x4c
 80021ae:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80021b2:	2414      	movs	r4, #20
 80021b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80021b6:	f011 fb78 	bl	80138aa <z_log_msg2_static_create.constprop.0>
                gpio_pin_set_dt(&led_green,1);
 80021ba:	2101      	movs	r1, #1
 80021bc:	4638      	mov	r0, r7
 80021be:	f011 fb86 	bl	80138ce <gpio_pin_set_dt.isra.0>
                k_msleep(50);
 80021c2:	2032      	movs	r0, #50	; 0x32
 80021c4:	f011 fbb1 	bl	801392a <k_msleep.isra.0>
                gpio_pin_set_dt(&led_green,0);
 80021c8:	2100      	movs	r1, #0
 80021ca:	4638      	mov	r0, r7
 80021cc:	f011 fb7f 	bl	80138ce <gpio_pin_set_dt.isra.0>
                k_msleep(50);
 80021d0:	2032      	movs	r0, #50	; 0x32
 80021d2:	f011 fbaa 	bl	801392a <k_msleep.isra.0>
            for (int i=0; i<20; i++) {
 80021d6:	3c01      	subs	r4, #1
 80021d8:	d1ef      	bne.n	80021ba <send_data+0x212>
 80021da:	e7c2      	b.n	8002162 <send_data+0x1ba>
        if (ret < 0) {
 80021dc:	2800      	cmp	r0, #0
 80021de:	dbd4      	blt.n	800218a <send_data+0x1e2>
            LOG_INF("* - * - * - * - * Sensor Data sent! * - * - * - * - * ");
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <send_data+0x2c8>)
                gpio_pin_set_dt(&led_green,1);
 80021e2:	4f1a      	ldr	r7, [pc, #104]	; (800224c <send_data+0x2a4>)
            LOG_INF("* - * - * - * - * Sensor Data sent! * - * - * - * - * ");
 80021e4:	9314      	str	r3, [sp, #80]	; 0x50
 80021e6:	480e      	ldr	r0, [pc, #56]	; (8002220 <send_data+0x278>)
 80021e8:	2302      	movs	r3, #2
 80021ea:	aa13      	add	r2, sp, #76	; 0x4c
 80021ec:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80021f0:	2414      	movs	r4, #20
 80021f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80021f4:	f011 fb59 	bl	80138aa <z_log_msg2_static_create.constprop.0>
                gpio_pin_set_dt(&led_green,1);
 80021f8:	2101      	movs	r1, #1
 80021fa:	4638      	mov	r0, r7
 80021fc:	f011 fb67 	bl	80138ce <gpio_pin_set_dt.isra.0>
                k_msleep(50);
 8002200:	2032      	movs	r0, #50	; 0x32
 8002202:	f011 fb92 	bl	801392a <k_msleep.isra.0>
                gpio_pin_set_dt(&led_green,0);
 8002206:	2100      	movs	r1, #0
 8002208:	4638      	mov	r0, r7
 800220a:	f011 fb60 	bl	80138ce <gpio_pin_set_dt.isra.0>
                k_msleep(50);
 800220e:	2032      	movs	r0, #50	; 0x32
 8002210:	f011 fb8b 	bl	801392a <k_msleep.isra.0>
            for (int i=0; i<20; i++) {
 8002214:	3c01      	subs	r4, #1
 8002216:	d1ef      	bne.n	80021f8 <send_data+0x250>
 8002218:	e7bb      	b.n	8002192 <send_data+0x1ea>
 800221a:	bf00      	nop
 800221c:	0801aff7 	.word	0x0801aff7
 8002220:	08019ff0 	.word	0x08019ff0
 8002224:	0801a15c 	.word	0x0801a15c
 8002228:	0801b13b 	.word	0x0801b13b
 800222c:	0801b144 	.word	0x0801b144
 8002230:	08001d41 	.word	0x08001d41
 8002234:	0801b01c 	.word	0x0801b01c
 8002238:	0801b029 	.word	0x0801b029
 800223c:	0801b03d 	.word	0x0801b03d
 8002240:	0801b055 	.word	0x0801b055
 8002244:	0801b06e 	.word	0x0801b06e
 8002248:	0801b0d3 	.word	0x0801b0d3
 800224c:	0801a180 	.word	0x0801a180
 8002250:	08001d05 	.word	0x08001d05
 8002254:	0801b081 	.word	0x0801b081
 8002258:	0801a188 	.word	0x0801a188
 800225c:	0801b09b 	.word	0x0801b09b
 8002260:	0801b0bb 	.word	0x0801b0bb
 8002264:	0801b0f3 	.word	0x0801b0f3
 8002268:	2000235e 	.word	0x2000235e
 800226c:	20002426 	.word	0x20002426
 8002270:	0801b104 	.word	0x0801b104

08002274 <main>:



/* * * * * * * * * * * * * * * * * main * * * * * * * * * *  * * * * * * * */

void main(void) {
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	b08f      	sub	sp, #60	; 0x3c
    
    LOG_INF("* * * * * * LoRaWAN Air Lab * * * * * * ");
 8002278:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <main+0x12c>)
 800227a:	484a      	ldr	r0, [pc, #296]	; (80023a4 <main+0x130>)
 800227c:	930c      	str	r3, [sp, #48]	; 0x30
 800227e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002280:	2302      	movs	r3, #2
 8002282:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002286:	930b      	str	r3, [sp, #44]	; 0x2c
 8002288:	f011 fb0f 	bl	80138aa <z_log_msg2_static_create.constprop.0>
    int ret;
    
    // System Initialitations
    
    
    init_time_system();
 800228c:	f000 fc96 	bl	8002bbc <init_time_system>
    init_and_mount_sdcard();
 8002290:	f7ff fb4e 	bl	8001930 <init_and_mount_sdcard>
    if (dev_sht3xd == NULL) {
        return;
    }
     */
    
    dev_bme280 = get_bme280_device();
 8002294:	f7ff fa44 	bl	8001720 <get_bme280_device>
 8002298:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <main+0x134>)
 800229a:	6018      	str	r0, [r3, #0]
    if (dev_bme280 == NULL) {
 800229c:	2800      	cmp	r0, #0
 800229e:	d07c      	beq.n	800239a <main+0x126>
        return;
    }
     
    
    gas_sensors_init();
 80022a0:	f7ff fbce 	bl	8001a40 <gas_sensors_init>
 
            
    LOG_INF("Date: %s",get_formatted_time());
 80022a4:	f000 fd18 	bl	8002cd8 <get_formatted_time>
 80022a8:	2400      	movs	r4, #0
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <main+0x138>)
 80022ac:	9003      	str	r0, [sp, #12]
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	e9cd 4400 	strd	r4, r4, [sp]
 80022b4:	493b      	ldr	r1, [pc, #236]	; (80023a4 <main+0x130>)
 80022b6:	4623      	mov	r3, r4
 80022b8:	2203      	movs	r2, #3
 80022ba:	4620      	mov	r0, r4
 80022bc:	f011 faf8 	bl	80138b0 <z_log_msg2_runtime_create.constprop.0>
 80022c0:	483b      	ldr	r0, [pc, #236]	; (80023b0 <main+0x13c>)

    
    gpioa = device_get_binding("GPIOA");
 80022c2:	4d3c      	ldr	r5, [pc, #240]	; (80023b4 <main+0x140>)
 80022c4:	f00d fc4e 	bl	800fb64 <z_impl_device_get_binding>
 80022c8:	6028      	str	r0, [r5, #0]
 80022ca:	483b      	ldr	r0, [pc, #236]	; (80023b8 <main+0x144>)
    gpiob = device_get_binding("GPIOB");
 80022cc:	4e3b      	ldr	r6, [pc, #236]	; (80023bc <main+0x148>)
 80022ce:	f00d fc49 	bl	800fb64 <z_impl_device_get_binding>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 80022d2:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80022d6:	6030      	str	r0, [r6, #0]
 80022d8:	2109      	movs	r1, #9
 80022da:	4839      	ldr	r0, [pc, #228]	; (80023c0 <main+0x14c>)
 80022dc:	f011 fb0b 	bl	80138f6 <gpio_pin_configure.isra.0>
 80022e0:	4837      	ldr	r0, [pc, #220]	; (80023c0 <main+0x14c>)
 80022e2:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80022e6:	210b      	movs	r1, #11
 80022e8:	f011 fb05 	bl	80138f6 <gpio_pin_configure.isra.0>
    
    ret = gpio_pin_configure_dt(&led_green, GPIO_OUTPUT_INACTIVE);
    ret = gpio_pin_configure_dt(&led_red, GPIO_OUTPUT_INACTIVE);
    
    ret = gpio_pin_configure(gpiob, 3, GPIO_OUTPUT_INACTIVE);
 80022ec:	6830      	ldr	r0, [r6, #0]
 80022ee:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80022f2:	2103      	movs	r1, #3
 80022f4:	f011 faff 	bl	80138f6 <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_INACTIVE);
 80022f8:	6828      	ldr	r0, [r5, #0]
 80022fa:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80022fe:	2104      	movs	r1, #4
 8002300:	f011 faf9 	bl	80138f6 <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 5, GPIO_OUTPUT_LOW);
 8002304:	6828      	ldr	r0, [r5, #0]
 8002306:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800230a:	2105      	movs	r1, #5
 800230c:	f011 faf3 	bl	80138f6 <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 7, GPIO_OUTPUT_LOW);
 8002310:	6828      	ldr	r0, [r5, #0]
 8002312:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002316:	2107      	movs	r1, #7
 8002318:	f011 faed 	bl	80138f6 <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 6, GPIO_INPUT);
 800231c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002320:	6828      	ldr	r0, [r5, #0]
 8002322:	2106      	movs	r1, #6
 8002324:	f011 fae7 	bl	80138f6 <gpio_pin_configure.isra.0>
    
    gpio_pin_set_dt(&led_green,0);
 8002328:	4621      	mov	r1, r4
 800232a:	4826      	ldr	r0, [pc, #152]	; (80023c4 <main+0x150>)
 800232c:	f011 facf 	bl	80138ce <gpio_pin_set_dt.isra.0>
    gpio_pin_set_dt(&led_red,0);
 8002330:	4825      	ldr	r0, [pc, #148]	; (80023c8 <main+0x154>)
 8002332:	4621      	mov	r1, r4
 8002334:	f011 facb 	bl	80138ce <gpio_pin_set_dt.isra.0>
    
    /* Thread Create: Read Ambient Sensors*/
    k_thread_create(&send_data_thread_data, send_data_stack_area,
 8002338:	2600      	movs	r6, #0
 800233a:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800233c:	2505      	movs	r5, #5
 800233e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002342:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002346:	e9cd 4400 	strd	r4, r4, [sp]
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <main+0x158>)
 800234c:	4920      	ldr	r1, [pc, #128]	; (80023d0 <main+0x15c>)
 800234e:	9404      	str	r4, [sp, #16]
 8002350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002354:	481f      	ldr	r0, [pc, #124]	; (80023d4 <main+0x160>)
 8002356:	f00d fdfd 	bl	800ff54 <z_impl_k_thread_create>
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <main+0x164>)
 800235c:	491f      	ldr	r1, [pc, #124]	; (80023dc <main+0x168>)
 800235e:	9400      	str	r4, [sp, #0]
 8002360:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002364:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8002368:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800236c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002370:	481b      	ldr	r0, [pc, #108]	; (80023e0 <main+0x16c>)
 8002372:	f00d fdef 	bl	800ff54 <z_impl_k_thread_create>
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <main+0x170>)
 8002378:	491b      	ldr	r1, [pc, #108]	; (80023e8 <main+0x174>)
 800237a:	481c      	ldr	r0, [pc, #112]	; (80023ec <main+0x178>)
 800237c:	9400      	str	r4, [sp, #0]
 800237e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002382:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8002386:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800238a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800238e:	f00d fde1 	bl	800ff54 <z_impl_k_thread_create>
                                 NULL, NULL, NULL,
                                 5, 0, K_NO_WAIT);    
    
     
    while (1) {
        k_msleep(5);
 8002392:	2005      	movs	r0, #5
 8002394:	f011 fac9 	bl	801392a <k_msleep.isra.0>
    while (1) {
 8002398:	e7fb      	b.n	8002392 <main+0x11e>
    }
    
    
    
    
 800239a:	b00f      	add	sp, #60	; 0x3c
 800239c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239e:	bf00      	nop
 80023a0:	0801b155 	.word	0x0801b155
 80023a4:	08019ff0 	.word	0x08019ff0
 80023a8:	20000d68 	.word	0x20000d68
 80023ac:	0801b17e 	.word	0x0801b17e
 80023b0:	0801b187 	.word	0x0801b187
 80023b4:	20000fb4 	.word	0x20000fb4
 80023b8:	0801b18d 	.word	0x0801b18d
 80023bc:	20000fb8 	.word	0x20000fb8
 80023c0:	08019c38 	.word	0x08019c38
 80023c4:	0801a180 	.word	0x0801a180
 80023c8:	0801a188 	.word	0x0801a188
 80023cc:	08001fa9 	.word	0x08001fa9
 80023d0:	200076e0 	.word	0x200076e0
 80023d4:	20000570 	.word	0x20000570
 80023d8:	08001dc1 	.word	0x08001dc1
 80023dc:	200066c0 	.word	0x200066c0
 80023e0:	200004f0 	.word	0x200004f0
 80023e4:	08001ea5 	.word	0x08001ea5
 80023e8:	200026a0 	.word	0x200026a0
 80023ec:	20000470 	.word	0x20000470

080023f0 <spi_transceive.constprop.0.isra.0>:
#endif

extern int z_impl_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);

__pinned_func
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
 80023f0:	b410      	push	{r4}
 80023f2:	4613      	mov	r3, r2
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80023f4:	6882      	ldr	r2, [r0, #8]
 80023f6:	6814      	ldr	r4, [r2, #0]
 80023f8:	460a      	mov	r2, r1
 80023fa:	46a4      	mov	ip, r4
 80023fc:	4901      	ldr	r1, [pc, #4]	; (8002404 <spi_transceive.constprop.0.isra.0+0x14>)
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
}
 80023fe:	bc10      	pop	{r4}
 8002400:	4760      	bx	ip
 8002402:	bf00      	nop
 8002404:	20000fc0 	.word	0x20000fc0

08002408 <opc_release>:


struct spi_cs_control *ctrl;
struct spi_config spi_cfg;
    
void opc_release() {
 8002408:	b510      	push	{r4, lr}
    uint8_t r;
    r = spi_release(spi, NULL);
 800240a:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <opc_release+0x80>)
void opc_release() {
 800240c:	b086      	sub	sp, #24
    r = spi_release(spi, NULL);
 800240e:	6818      	ldr	r0, [r3, #0]
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
 8002410:	6883      	ldr	r3, [r0, #8]
 8002412:	2100      	movs	r1, #0
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4798      	blx	r3
    if (r == 0) {
 8002418:	b2c0      	uxtb	r0, r0
 800241a:	b948      	cbnz	r0, 8002430 <opc_release+0x28>
        LOG_INF("SPI Released!");
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <opc_release+0x84>)
 800241e:	9304      	str	r3, [sp, #16]
 8002420:	481b      	ldr	r0, [pc, #108]	; (8002490 <opc_release+0x88>)
 8002422:	2302      	movs	r3, #2
 8002424:	aa03      	add	r2, sp, #12
 8002426:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800242a:	9303      	str	r3, [sp, #12]
 800242c:	f011 fa82 	bl	8013934 <z_log_msg2_static_create.constprop.0>
    }
    r = gpio_pin_configure(gpioa, 7, GPIO_OUTPUT_LOW);
 8002430:	4c18      	ldr	r4, [pc, #96]	; (8002494 <opc_release+0x8c>)
 8002432:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	2107      	movs	r1, #7
 800243a:	f011 fa9e 	bl	801397a <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 5, GPIO_OUTPUT_LOW);
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002444:	2105      	movs	r1, #5
 8002446:	f011 fa98 	bl	801397a <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 6, GPIO_INPUT);
 800244a:	6820      	ldr	r0, [r4, #0]
 800244c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002450:	2106      	movs	r1, #6
 8002452:	f011 fa92 	bl	801397a <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_LOW);
 8002456:	6820      	ldr	r0, [r4, #0]
    
    
    
    gpio_pin_set(gpiob,4,0);
 8002458:	4c0f      	ldr	r4, [pc, #60]	; (8002498 <opc_release+0x90>)
    r = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_LOW);
 800245a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800245e:	2104      	movs	r1, #4
 8002460:	f011 fa8b 	bl	801397a <gpio_pin_configure.isra.0>
    gpio_pin_set(gpiob,4,0);
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	2104      	movs	r1, #4
 800246a:	f011 fa76 	bl	801395a <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,7,0);
 800246e:	6820      	ldr	r0, [r4, #0]
 8002470:	2200      	movs	r2, #0
 8002472:	2107      	movs	r1, #7
 8002474:	f011 fa71 	bl	801395a <gpio_pin_set.isra.0>
    //gpio_pin_set(gpiob,6,0);     // MISO (input line)
    gpio_pin_set(gpiob,5,0);
 8002478:	6820      	ldr	r0, [r4, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	2105      	movs	r1, #5
}    
 800247e:	b006      	add	sp, #24
 8002480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_pin_set(gpiob,5,0);
 8002484:	f011 ba69 	b.w	801395a <gpio_pin_set.isra.0>
 8002488:	20000fbc 	.word	0x20000fbc
 800248c:	0801b198 	.word	0x0801b198
 8002490:	0801a000 	.word	0x0801a000
 8002494:	20000fb4 	.word	0x20000fb4
 8002498:	20000fb8 	.word	0x20000fb8

0800249c <opc_init>:
void opc_init() {
 800249c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                        .gpio_dt_flags = GPIO_ACTIVE_LOW
    };
    */ 

    
    spi_cfg.frequency = 500000U;
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <opc_init+0x34>)
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <opc_init+0x38>)
 80024a2:	601a      	str	r2, [r3, #0]
    spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB | 
 80024a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024a8:	809a      	strh	r2, [r3, #4]
 80024aa:	480b      	ldr	r0, [pc, #44]	; (80024d8 <opc_init+0x3c>)
 80024ac:	f00d fb5a 	bl	800fb64 <z_impl_device_get_binding>
            SPI_OP_MODE_MASTER | SPI_MODE_CPHA;

    
    spi = device_get_binding("OPC");
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <opc_init+0x40>)
 80024b2:	6018      	str	r0, [r3, #0]

    if (spi == NULL) {
 80024b4:	b948      	cbnz	r0, 80024ca <opc_init+0x2e>
        /* No such node, or the node does not have status "okay". */
        LOG_ERR("Error: no device SPI found.");
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <opc_init+0x44>)
 80024b8:	9304      	str	r3, [sp, #16]
 80024ba:	480a      	ldr	r0, [pc, #40]	; (80024e4 <opc_init+0x48>)
 80024bc:	2302      	movs	r3, #2
 80024be:	aa03      	add	r2, sp, #12
 80024c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80024c4:	9303      	str	r3, [sp, #12]
 80024c6:	f011 fa35 	bl	8013934 <z_log_msg2_static_create.constprop.0>

    }
    
}
 80024ca:	b007      	add	sp, #28
 80024cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d0:	20000fc0 	.word	0x20000fc0
 80024d4:	0007a120 	.word	0x0007a120
 80024d8:	0801b1a6 	.word	0x0801b1a6
 80024dc:	20000fbc 	.word	0x20000fbc
 80024e0:	0801b1aa 	.word	0x0801b1aa
 80024e4:	0801a000 	.word	0x0801a000

080024e8 <opc_send_command>:
{
  // Return a 32-bit unsigned int from 4 bytes
  return ((val3 << 24) | (val2 << 16) | (val1 << 8) | val0);
}

uint8_t opc_send_command(uint8_t cmd) {
 80024e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ea:	b08b      	sub	sp, #44	; 0x2c
 80024ec:	af00      	add	r7, sp, #0
    
 
    
    uint8_t tx_buf[1];
    uint8_t rx_buf[1];
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80024ee:	2401      	movs	r4, #1
    struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
    
    tx_buf[0] = cmd;
    
    gpio_pin_set(gpioa,4,0);
 80024f0:	4e1d      	ldr	r6, [pc, #116]	; (8002568 <opc_send_command+0x80>)
    tx_buf[0] = cmd;
 80024f2:	7038      	strb	r0, [r7, #0]
    struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	e9c7 3406 	strd	r3, r4, [r7, #24]
uint8_t opc_send_command(uint8_t cmd) {
 8002502:	4605      	mov	r5, r0
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 8002504:	f107 0310 	add.w	r3, r7, #16
    gpio_pin_set(gpioa,4,0);
 8002508:	6830      	ldr	r0, [r6, #0]
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 800250a:	60fc      	str	r4, [r7, #12]
    gpio_pin_set(gpioa,4,0);
 800250c:	2200      	movs	r2, #0
 800250e:	2104      	movs	r1, #4
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 8002510:	e9c7 3408 	strd	r3, r4, [r7, #32]
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 8002514:	60bf      	str	r7, [r7, #8]
    gpio_pin_set(gpioa,4,0);
 8002516:	f011 fa20 	bl	801395a <gpio_pin_set.isra.0>
    k_usleep(4);
 800251a:	2004      	movs	r0, #4
 800251c:	f011 fa3a 	bl	8013994 <k_usleep.isra.0>
    spi_transceive(spi, &spi_cfg, &tx, &rx);
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <opc_send_command+0x84>)
 8002522:	f107 0220 	add.w	r2, r7, #32
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	f107 0118 	add.w	r1, r7, #24
 800252c:	f7ff ff60 	bl	80023f0 <spi_transceive.constprop.0.isra.0>
    k_usleep(4);
 8002530:	2004      	movs	r0, #4
 8002532:	f011 fa2f 	bl	8013994 <k_usleep.isra.0>
    gpio_pin_set(gpioa,4,1);                
 8002536:	6830      	ldr	r0, [r6, #0]
 8002538:	4622      	mov	r2, r4
 800253a:	2104      	movs	r1, #4
 800253c:	f011 fa0d 	bl	801395a <gpio_pin_set.isra.0>
    LOG_INF("Sent %d, received: %d",cmd,rx_buf[0]);
 8002540:	b088      	sub	sp, #32
 8002542:	466a      	mov	r2, sp
 8002544:	793b      	ldrb	r3, [r7, #4]
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <opc_send_command+0x88>)
 8002548:	6193      	str	r3, [r2, #24]
 800254a:	2304      	movs	r3, #4
 800254c:	e9c2 1504 	strd	r1, r5, [r2, #16]
 8002550:	4808      	ldr	r0, [pc, #32]	; (8002574 <opc_send_command+0x8c>)
 8002552:	f842 3f0c 	str.w	r3, [r2, #12]!
 8002556:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 800255a:	f011 f9eb 	bl	8013934 <z_log_msg2_static_create.constprop.0>
    return rx_buf[0];
}
 800255e:	7938      	ldrb	r0, [r7, #4]
 8002560:	372c      	adds	r7, #44	; 0x2c
 8002562:	46bd      	mov	sp, r7
 8002564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002566:	bf00      	nop
 8002568:	20000fb4 	.word	0x20000fb4
 800256c:	20000fbc 	.word	0x20000fbc
 8002570:	0801b1c6 	.word	0x0801b1c6
 8002574:	0801a000 	.word	0x0801a000

08002578 <opc_start>:


/* * * * * * * * * Start OPC * * * * * * * * * */

void opc_start() {
 8002578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800257c:	b087      	sub	sp, #28
    LOG_INF("*** STARTING OPC ***");
 800257e:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <opc_start+0x158>)
    // Switch on the relay
    for (int t=3; t>0; t--) {
        LOG_INF("Switching the relay ON in %d",t);
 8002580:	4f54      	ldr	r7, [pc, #336]	; (80026d4 <opc_start+0x15c>)
 8002582:	4d55      	ldr	r5, [pc, #340]	; (80026d8 <opc_start+0x160>)
    LOG_INF("*** STARTING OPC ***");
 8002584:	9304      	str	r3, [sp, #16]
    for (int t=3; t>0; t--) {
 8002586:	2403      	movs	r4, #3
    LOG_INF("*** STARTING OPC ***");
 8002588:	2302      	movs	r3, #2
 800258a:	4853      	ldr	r0, [pc, #332]	; (80026d8 <opc_start+0x160>)
 800258c:	9303      	str	r3, [sp, #12]
 800258e:	aa03      	add	r2, sp, #12
 8002590:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_INF("Switching the relay ON in %d",t);
 8002594:	4626      	mov	r6, r4
    LOG_INF("*** STARTING OPC ***");
 8002596:	f011 f9cd 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        LOG_INF("Switching the relay ON in %d",t);
 800259a:	aa03      	add	r2, sp, #12
 800259c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80025a0:	4628      	mov	r0, r5
 80025a2:	e9cd 7404 	strd	r7, r4, [sp, #16]
 80025a6:	9603      	str	r6, [sp, #12]
 80025a8:	f011 f9c4 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 80025ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b0:	f011 f9f2 	bl	8013998 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 80025b4:	3c01      	subs	r4, #1
 80025b6:	d1f0      	bne.n	800259a <opc_start+0x22>
    }    
    gpio_pin_set(gpiob,3,1);
 80025b8:	4d48      	ldr	r5, [pc, #288]	; (80026dc <opc_start+0x164>)
    uint8_t r2 = 0;
    
    uint8_t c = 0; 

    for (int t=3; t>0; t--) {
        LOG_INF("Sending ON Sequence in %d:",t);
 80025ba:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80026e0 <opc_start+0x168>
    gpio_pin_set(gpiob,3,1);
 80025be:	6828      	ldr	r0, [r5, #0]
        LOG_INF("Sending ON Sequence in %d:",t);
 80025c0:	4e45      	ldr	r6, [pc, #276]	; (80026d8 <opc_start+0x160>)
    gpio_pin_set(gpiob,3,1);
 80025c2:	2201      	movs	r2, #1
 80025c4:	2103      	movs	r1, #3
 80025c6:	f011 f9c8 	bl	801395a <gpio_pin_set.isra.0>
    for (int t=3; t>0; t--) {
 80025ca:	2403      	movs	r4, #3
        LOG_INF("Sending ON Sequence in %d:",t);
 80025cc:	4627      	mov	r7, r4
 80025ce:	aa03      	add	r2, sp, #12
 80025d0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80025d4:	4630      	mov	r0, r6
 80025d6:	e9cd 8404 	strd	r8, r4, [sp, #16]
 80025da:	9703      	str	r7, [sp, #12]
 80025dc:	f011 f9aa 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 80025e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025e4:	f011 f9d8 	bl	8013998 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 80025e8:	3c01      	subs	r4, #1
 80025ea:	d1f0      	bne.n	80025ce <opc_start+0x56>
        if (r1 == 243 && r2 == 3) {
                LOG_INF("**** Received 0xF3 and 0x03 :: OPC Unit is ready for start sequence...");
                break;
        }
        if (r1 == 49) {
                LOG_INF("Received busy status from OP");
 80025ec:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80026e4 <opc_start+0x16c>
 80025f0:	4f39      	ldr	r7, [pc, #228]	; (80026d8 <opc_start+0x160>)
        if (c == 10) {
                LOG_INF("Waiting 5s for OPC's buffer to reset");
                k_msleep(5000);	
        }
        if (c > 20) {
                LOG_INF("power cycle...");
 80025f2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80026e8 <opc_start+0x170>
        r1 = opc_send_command(0x03);
 80025f6:	2003      	movs	r0, #3
 80025f8:	f7ff ff76 	bl	80024e8 <opc_send_command>
 80025fc:	4606      	mov	r6, r0
        k_msleep(10);
 80025fe:	200a      	movs	r0, #10
 8002600:	f011 f9ca 	bl	8013998 <k_msleep.isra.0>
        r2 = opc_send_command(0x00);
 8002604:	2000      	movs	r0, #0
 8002606:	f7ff ff6f 	bl	80024e8 <opc_send_command>
        if (r1 == 243 && r2 == 3) {
 800260a:	2ef3      	cmp	r6, #243	; 0xf3
 800260c:	d112      	bne.n	8002634 <opc_start+0xbc>
 800260e:	2803      	cmp	r0, #3
 8002610:	d11c      	bne.n	800264c <opc_start+0xd4>
                LOG_INF("**** Received 0xF3 and 0x03 :: OPC Unit is ready for start sequence...");
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <opc_start+0x174>)
 8002614:	9304      	str	r3, [sp, #16]
 8002616:	4830      	ldr	r0, [pc, #192]	; (80026d8 <opc_start+0x160>)
 8002618:	2302      	movs	r3, #2
 800261a:	aa03      	add	r2, sp, #12
 800261c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002620:	9303      	str	r3, [sp, #12]
 8002622:	f011 f987 	bl	8013934 <z_log_msg2_static_create.constprop.0>
                c=0;
        }				
        c++;
    }

    k_msleep(5000);    
 8002626:	f241 3088 	movw	r0, #5000	; 0x1388
}
 800262a:	b007      	add	sp, #28
 800262c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    k_msleep(5000);    
 8002630:	f011 b9b2 	b.w	8013998 <k_msleep.isra.0>
        if (r1 == 49) {
 8002634:	2e31      	cmp	r6, #49	; 0x31
 8002636:	d109      	bne.n	800264c <opc_start+0xd4>
                LOG_INF("Received busy status from OP");
 8002638:	2302      	movs	r3, #2
 800263a:	aa03      	add	r2, sp, #12
 800263c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002640:	4638      	mov	r0, r7
 8002642:	f8cd 8010 	str.w	r8, [sp, #16]
 8002646:	9303      	str	r3, [sp, #12]
 8002648:	f011 f974 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 800264c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002650:	f011 f9a2 	bl	8013998 <k_msleep.isra.0>
        if (c == 10) {
 8002654:	2c0a      	cmp	r4, #10
 8002656:	d110      	bne.n	800267a <opc_start+0x102>
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <opc_start+0x178>)
 800265a:	9304      	str	r3, [sp, #16]
 800265c:	4638      	mov	r0, r7
 800265e:	2302      	movs	r3, #2
 8002660:	aa03      	add	r2, sp, #12
 8002662:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002666:	9303      	str	r3, [sp, #12]
 8002668:	f011 f964 	bl	8013934 <z_log_msg2_static_create.constprop.0>
                k_msleep(5000);	
 800266c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002670:	f011 f992 	bl	8013998 <k_msleep.isra.0>
        c++;
 8002674:	3401      	adds	r4, #1
 8002676:	b2e4      	uxtb	r4, r4
        r1 = opc_send_command(0x03);
 8002678:	e7bd      	b.n	80025f6 <opc_start+0x7e>
        if (c > 20) {
 800267a:	2c14      	cmp	r4, #20
 800267c:	d9fa      	bls.n	8002674 <opc_start+0xfc>
                LOG_INF("power cycle...");
 800267e:	2302      	movs	r3, #2
 8002680:	aa03      	add	r2, sp, #12
 8002682:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002686:	4638      	mov	r0, r7
 8002688:	9303      	str	r3, [sp, #12]
 800268a:	f8cd 9010 	str.w	r9, [sp, #16]
 800268e:	f011 f951 	bl	8013934 <z_log_msg2_static_create.constprop.0>
                gpio_pin_set(gpiob,3,0);
 8002692:	2200      	movs	r2, #0
 8002694:	6828      	ldr	r0, [r5, #0]
 8002696:	2103      	movs	r1, #3
 8002698:	f011 f95f 	bl	801395a <gpio_pin_set.isra.0>
                gpio_pin_set(gpiob,4,0);
 800269c:	6828      	ldr	r0, [r5, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	2104      	movs	r1, #4
 80026a2:	f011 f95a 	bl	801395a <gpio_pin_set.isra.0>
                gpio_pin_set(gpiob,7,0);
 80026a6:	6828      	ldr	r0, [r5, #0]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2107      	movs	r1, #7
 80026ac:	f011 f955 	bl	801395a <gpio_pin_set.isra.0>
                gpio_pin_set(gpiob,5,0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2105      	movs	r1, #5
 80026b4:	6828      	ldr	r0, [r5, #0]
 80026b6:	f011 f950 	bl	801395a <gpio_pin_set.isra.0>
                k_msleep(8000);
 80026ba:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80026be:	f011 f96b 	bl	8013998 <k_msleep.isra.0>
                gpio_pin_set(gpiob,3,1);
 80026c2:	6828      	ldr	r0, [r5, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	2103      	movs	r1, #3
 80026c8:	f011 f947 	bl	801395a <gpio_pin_set.isra.0>
                c=0;
 80026cc:	2400      	movs	r4, #0
 80026ce:	e7d1      	b.n	8002674 <opc_start+0xfc>
 80026d0:	0801b1dc 	.word	0x0801b1dc
 80026d4:	0801b1f1 	.word	0x0801b1f1
 80026d8:	0801a000 	.word	0x0801a000
 80026dc:	20000fb8 	.word	0x20000fb8
 80026e0:	0801b20e 	.word	0x0801b20e
 80026e4:	0801b270 	.word	0x0801b270
 80026e8:	0801b2b2 	.word	0x0801b2b2
 80026ec:	0801b229 	.word	0x0801b229
 80026f0:	0801b28d 	.word	0x0801b28d

080026f4 <opc_stop>:

void opc_stop() {
 80026f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026f8:	b087      	sub	sp, #28
    LOG_INF("*** SHUTTING DOWN OPC ***");
 80026fa:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <opc_stop+0x13c>)
    // Switch on the relay
    for (int t=3; t>0; t--) {
        LOG_INF("Switching the relay OFF in %d",t);
 80026fc:	4f4d      	ldr	r7, [pc, #308]	; (8002834 <opc_stop+0x140>)
 80026fe:	4d4e      	ldr	r5, [pc, #312]	; (8002838 <opc_stop+0x144>)
    LOG_INF("*** SHUTTING DOWN OPC ***");
 8002700:	9304      	str	r3, [sp, #16]
    for (int t=3; t>0; t--) {
 8002702:	2403      	movs	r4, #3
    LOG_INF("*** SHUTTING DOWN OPC ***");
 8002704:	2302      	movs	r3, #2
 8002706:	484c      	ldr	r0, [pc, #304]	; (8002838 <opc_stop+0x144>)
 8002708:	9303      	str	r3, [sp, #12]
 800270a:	aa03      	add	r2, sp, #12
 800270c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_INF("Switching the relay OFF in %d",t);
 8002710:	4626      	mov	r6, r4
    LOG_INF("*** SHUTTING DOWN OPC ***");
 8002712:	f011 f90f 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        LOG_INF("Switching the relay OFF in %d",t);
 8002716:	aa03      	add	r2, sp, #12
 8002718:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800271c:	4628      	mov	r0, r5
 800271e:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8002722:	9603      	str	r6, [sp, #12]
 8002724:	f011 f906 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 8002728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800272c:	f011 f934 	bl	8013998 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 8002730:	3c01      	subs	r4, #1
 8002732:	d1f0      	bne.n	8002716 <opc_stop+0x22>
    }    
    gpio_pin_set(gpiob,3,1);
 8002734:	4d41      	ldr	r5, [pc, #260]	; (800283c <opc_stop+0x148>)
    uint8_t r2 = 0;
    
    uint8_t c = 0; 

    for (int t=3; t>0; t--) {
        LOG_INF("Sending OFF Sequence in %d:",t);
 8002736:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8002840 <opc_stop+0x14c>
    gpio_pin_set(gpiob,3,1);
 800273a:	6828      	ldr	r0, [r5, #0]
        LOG_INF("Sending OFF Sequence in %d:",t);
 800273c:	4e3e      	ldr	r6, [pc, #248]	; (8002838 <opc_stop+0x144>)
    gpio_pin_set(gpiob,3,1);
 800273e:	2201      	movs	r2, #1
 8002740:	2103      	movs	r1, #3
 8002742:	f011 f90a 	bl	801395a <gpio_pin_set.isra.0>
    for (int t=3; t>0; t--) {
 8002746:	2403      	movs	r4, #3
        LOG_INF("Sending OFF Sequence in %d:",t);
 8002748:	4627      	mov	r7, r4
 800274a:	aa03      	add	r2, sp, #12
 800274c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8002750:	4630      	mov	r0, r6
 8002752:	e9cd 8404 	strd	r8, r4, [sp, #16]
 8002756:	9703      	str	r7, [sp, #12]
 8002758:	f011 f8ec 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 800275c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002760:	f011 f91a 	bl	8013998 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 8002764:	3c01      	subs	r4, #1
 8002766:	d1f0      	bne.n	800274a <opc_stop+0x56>
                LOG_INF("**** Received 0xF3 and 0x03 :: "
                        "OPC Unit is ready for shutdown sequence...");
                break;
        }
        if (r1 == 49) {
                LOG_INF("Received busy status from OP");
 8002768:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002844 <opc_stop+0x150>
 800276c:	4f32      	ldr	r7, [pc, #200]	; (8002838 <opc_stop+0x144>)

        }		
        k_msleep(600);

        if (c == 10) {
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 800276e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8002848 <opc_stop+0x154>
        r1 = opc_send_command(0x03);
 8002772:	2003      	movs	r0, #3
 8002774:	f7ff feb8 	bl	80024e8 <opc_send_command>
 8002778:	4606      	mov	r6, r0
        k_msleep(10);
 800277a:	200a      	movs	r0, #10
 800277c:	f011 f90c 	bl	8013998 <k_msleep.isra.0>
        r2 = opc_send_command(0x01);
 8002780:	2001      	movs	r0, #1
 8002782:	f7ff feb1 	bl	80024e8 <opc_send_command>
        if (r1 == 243 && r2 == 3) {
 8002786:	2ef3      	cmp	r6, #243	; 0xf3
 8002788:	d12b      	bne.n	80027e2 <opc_stop+0xee>
 800278a:	2803      	cmp	r0, #3
 800278c:	d135      	bne.n	80027fa <opc_stop+0x106>
                LOG_INF("**** Received 0xF3 and 0x03 :: "
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <opc_stop+0x158>)
                k_msleep(5000);	
        }
        if (c > 20) {
            LOG_INF("Couldn't confirm off command status");
 8002790:	9304      	str	r3, [sp, #16]
 8002792:	aa03      	add	r2, sp, #12
 8002794:	2302      	movs	r3, #2
 8002796:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800279a:	4827      	ldr	r0, [pc, #156]	; (8002838 <opc_stop+0x144>)
 800279c:	9303      	str	r3, [sp, #12]
 800279e:	f011 f8c9 	bl	8013934 <z_log_msg2_static_create.constprop.0>
            break;
        }				
        c++;
    }
    k_msleep(2000);
 80027a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027a6:	f011 f8f7 	bl	8013998 <k_msleep.isra.0>
    gpio_pin_set(gpiob,3,0);
 80027aa:	6828      	ldr	r0, [r5, #0]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2103      	movs	r1, #3
 80027b0:	f011 f8d3 	bl	801395a <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,4,0);
 80027b4:	6828      	ldr	r0, [r5, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2104      	movs	r1, #4
 80027ba:	f011 f8ce 	bl	801395a <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,7,0);
 80027be:	6828      	ldr	r0, [r5, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2107      	movs	r1, #7
 80027c4:	f011 f8c9 	bl	801395a <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,6,0);    
 80027c8:	6828      	ldr	r0, [r5, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	2106      	movs	r1, #6
 80027ce:	f011 f8c4 	bl	801395a <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,5,0);
 80027d2:	6828      	ldr	r0, [r5, #0]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2105      	movs	r1, #5
}
 80027d8:	b007      	add	sp, #28
 80027da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    gpio_pin_set(gpiob,5,0);
 80027de:	f011 b8bc 	b.w	801395a <gpio_pin_set.isra.0>
        if (r1 == 49) {
 80027e2:	2e31      	cmp	r6, #49	; 0x31
 80027e4:	d109      	bne.n	80027fa <opc_stop+0x106>
                LOG_INF("Received busy status from OP");
 80027e6:	2302      	movs	r3, #2
 80027e8:	aa03      	add	r2, sp, #12
 80027ea:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80027ee:	4638      	mov	r0, r7
 80027f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80027f4:	9303      	str	r3, [sp, #12]
 80027f6:	f011 f89d 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        k_msleep(600);
 80027fa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80027fe:	f011 f8cb 	bl	8013998 <k_msleep.isra.0>
        if (c == 10) {
 8002802:	2c0a      	cmp	r4, #10
 8002804:	b2e3      	uxtb	r3, r4
 8002806:	d10f      	bne.n	8002828 <opc_stop+0x134>
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 8002808:	2302      	movs	r3, #2
 800280a:	4638      	mov	r0, r7
 800280c:	aa03      	add	r2, sp, #12
 800280e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002812:	f8cd 9010 	str.w	r9, [sp, #16]
 8002816:	9303      	str	r3, [sp, #12]
 8002818:	f011 f88c 	bl	8013934 <z_log_msg2_static_create.constprop.0>
                k_msleep(5000);	
 800281c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002820:	f011 f8ba 	bl	8013998 <k_msleep.isra.0>
    while(1) {
 8002824:	3401      	adds	r4, #1
        r1 = opc_send_command(0x03);
 8002826:	e7a4      	b.n	8002772 <opc_stop+0x7e>
        if (c > 20) {
 8002828:	2b15      	cmp	r3, #21
 800282a:	d1fb      	bne.n	8002824 <opc_stop+0x130>
            LOG_INF("Couldn't confirm off command status");
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <opc_stop+0x15c>)
 800282e:	e7af      	b.n	8002790 <opc_stop+0x9c>
 8002830:	0801b2c1 	.word	0x0801b2c1
 8002834:	0801b2db 	.word	0x0801b2db
 8002838:	0801a000 	.word	0x0801a000
 800283c:	20000fb8 	.word	0x20000fb8
 8002840:	0801b2f9 	.word	0x0801b2f9
 8002844:	0801b270 	.word	0x0801b270
 8002848:	0801b28d 	.word	0x0801b28d
 800284c:	0801b315 	.word	0x0801b315
 8002850:	0801b35f 	.word	0x0801b35f

08002854 <opc_read_histogram>:



/* * * * * * * * * Read Histogram * * * * * * * * * */

struct histogram opc_read_histogram(uint8_t samples) {
 8002854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002858:	b0db      	sub	sp, #364	; 0x16c
    data.period = 0;
    data.temp_pressure = 0;
    
    result.pm1  = 0;
    result.pm25 = 0;
    result.pm10 = 0;
 800285a:	f04f 0900 	mov.w	r9, #0
    result.sfr = 0;
    result.period = 0;
    result.temp_pressure = 0;

    for (uint8_t s=0; s<samples; s++) {
 800285e:	2300      	movs	r3, #0
        LOG_INF("READING SAMPLE %d",s);
 8002860:	4c24      	ldr	r4, [pc, #144]	; (80028f4 <opc_read_histogram+0xa0>)
struct histogram opc_read_histogram(uint8_t samples) {
 8002862:	9005      	str	r0, [sp, #20]
 8002864:	910b      	str	r1, [sp, #44]	; 0x2c
    for (uint8_t s=0; s<samples; s++) {
 8002866:	9306      	str	r3, [sp, #24]
    result.pm25 = 0;
 8002868:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    result.pm1  = 0;
 800286c:	f8cd 901c 	str.w	r9, [sp, #28]
    result.period = 0;
 8002870:	f8cd 9020 	str.w	r9, [sp, #32]
    result.sfr = 0;
 8002874:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    for (uint8_t s=0; s<samples; s++) {
 8002878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800287a:	9a06      	ldr	r2, [sp, #24]
 800287c:	4293      	cmp	r3, r2
 800287e:	d13d      	bne.n	80028fc <opc_read_histogram+0xa8>
        k_msleep(5000);
    }
    
    //LOG_INF("Calculating OPC data average");
    // Calculate Average
    float div = samples-SKIP;
 8002880:	1e98      	subs	r0, r3, #2
 8002882:	f7fe f9ad 	bl	8000be0 <__aeabi_i2f>
 8002886:	4604      	mov	r4, r0
    //LOG_INF("Dividing %0.2f over %d",result.pm10, samples-SKIP);
    result.pm1 = result.pm1 / div;
 8002888:	4601      	mov	r1, r0
 800288a:	9807      	ldr	r0, [sp, #28]
 800288c:	f7fe fab0 	bl	8000df0 <__aeabi_fdiv>
    result.pm25 = result.pm25 / div;
 8002890:	4621      	mov	r1, r4
    result.pm1 = result.pm1 / div;
 8002892:	4607      	mov	r7, r0
    result.pm25 = result.pm25 / div;
 8002894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002896:	f7fe faab 	bl	8000df0 <__aeabi_fdiv>
    result.pm10 = result.pm10 / div;
 800289a:	4621      	mov	r1, r4
    result.pm25 = result.pm25 / div;
 800289c:	4606      	mov	r6, r0
    result.pm10 = result.pm10 / div;
 800289e:	4648      	mov	r0, r9
 80028a0:	f7fe faa6 	bl	8000df0 <__aeabi_fdiv>
    result.period = result.period / div;
 80028a4:	4621      	mov	r1, r4
    result.pm10 = result.pm10 / div;
 80028a6:	4605      	mov	r5, r0
    result.period = result.period / div;
 80028a8:	9808      	ldr	r0, [sp, #32]
 80028aa:	f7fe faa1 	bl	8000df0 <__aeabi_fdiv>
    result.sfr = result.sfr / div;
 80028ae:	4621      	mov	r1, r4
    result.period = result.period / div;
 80028b0:	4680      	mov	r8, r0
    result.sfr = result.sfr / div;
 80028b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80028b4:	f7fe fa9c 	bl	8000df0 <__aeabi_fdiv>
    LOG_INF("Returning OPC read result...");
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <opc_read_histogram+0xa4>)
 80028ba:	934e      	str	r3, [sp, #312]	; 0x138
    result.sfr = result.sfr / div;
 80028bc:	4604      	mov	r4, r0
    LOG_INF("Returning OPC read result...");
 80028be:	2302      	movs	r3, #2
 80028c0:	aa4d      	add	r2, sp, #308	; 0x134
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <opc_read_histogram+0xa0>)
 80028c4:	934d      	str	r3, [sp, #308]	; 0x134
 80028c6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80028ca:	f011 f833 	bl	8013934 <z_log_msg2_static_create.constprop.0>
    
    return result;
 80028ce:	9a05      	ldr	r2, [sp, #20]
 80028d0:	9b05      	ldr	r3, [sp, #20]
 80028d2:	f8c2 8098 	str.w	r8, [r2, #152]	; 0x98
 80028d6:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
}
 80028da:	4610      	mov	r0, r2
    return result;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80028e2:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
 80028e6:	f8c2 60a4 	str.w	r6, [r2, #164]	; 0xa4
 80028ea:	f8c2 50a8 	str.w	r5, [r2, #168]	; 0xa8
}
 80028ee:	b05b      	add	sp, #364	; 0x16c
 80028f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f4:	0801a000 	.word	0x0801a000
 80028f8:	0801b3f3 	.word	0x0801b3f3
        LOG_INF("READING SAMPLE %d",s);
 80028fc:	4ba4      	ldr	r3, [pc, #656]	; (8002b90 <opc_read_histogram+0x33c>)
 80028fe:	48a5      	ldr	r0, [pc, #660]	; (8002b94 <opc_read_histogram+0x340>)
 8002900:	934e      	str	r3, [sp, #312]	; 0x138
 8002902:	aa4d      	add	r2, sp, #308	; 0x134
 8002904:	9b06      	ldr	r3, [sp, #24]
 8002906:	934f      	str	r3, [sp, #316]	; 0x13c
 8002908:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800290c:	f04f 0a03 	mov.w	sl, #3
 8002910:	f8cd a134 	str.w	sl, [sp, #308]	; 0x134
 8002914:	f011 f80e 	bl	8013934 <z_log_msg2_static_create.constprop.0>
        r = opc_send_command(0x30);
 8002918:	2030      	movs	r0, #48	; 0x30
 800291a:	f7ff fde5 	bl	80024e8 <opc_send_command>
 800291e:	900c      	str	r0, [sp, #48]	; 0x30
        k_msleep(12);
 8002920:	200c      	movs	r0, #12
 8002922:	f011 f839 	bl	8013998 <k_msleep.isra.0>
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 8002926:	ab0e      	add	r3, sp, #56	; 0x38
 8002928:	a910      	add	r1, sp, #64	; 0x40
 800292a:	9310      	str	r3, [sp, #64]	; 0x40
        struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 800292c:	aa12      	add	r2, sp, #72	; 0x48
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 800292e:	2301      	movs	r3, #1
        struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 8002930:	a80f      	add	r0, sp, #60	; 0x3c
 8002932:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
        struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
 8002936:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
        struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 800293a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 800293e:	9311      	str	r3, [sp, #68]	; 0x44
        if (r == 243) {
 8002940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002942:	2bf3      	cmp	r3, #243	; 0xf3
 8002944:	d138      	bne.n	80029b8 <opc_read_histogram+0x164>
            LOG_INF("Histogram %d is READY!!!!",s);
 8002946:	4b94      	ldr	r3, [pc, #592]	; (8002b98 <opc_read_histogram+0x344>)
 8002948:	934e      	str	r3, [sp, #312]	; 0x138
 800294a:	aa4d      	add	r2, sp, #308	; 0x134
 800294c:	9b06      	ldr	r3, [sp, #24]
 800294e:	934f      	str	r3, [sp, #316]	; 0x13c
 8002950:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8002954:	4620      	mov	r0, r4
 8002956:	f8cd a134 	str.w	sl, [sp, #308]	; 0x134
 800295a:	f010 ffeb 	bl	8013934 <z_log_msg2_static_create.constprop.0>
            gpio_pin_set(gpioa,4,0);
 800295e:	4b8f      	ldr	r3, [pc, #572]	; (8002b9c <opc_read_histogram+0x348>)
 8002960:	2200      	movs	r2, #0
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	2104      	movs	r1, #4
 8002966:	f010 fff8 	bl	801395a <gpio_pin_set.isra.0>
            k_usleep(6);
 800296a:	2006      	movs	r0, #6
 800296c:	f011 f812 	bl	8013994 <k_usleep.isra.0>
                tx_buf[0] = 0xC0;
 8002970:	aa0e      	add	r2, sp, #56	; 0x38
 8002972:	920c      	str	r2, [sp, #48]	; 0x30
 8002974:	ab4a      	add	r3, sp, #296	; 0x128
            for (int i=0; i<62; i++) {
 8002976:	f04f 0a00 	mov.w	sl, #0
                spi_transceive(spi, &spi_cfg, &tx, &rx);
 800297a:	aa16      	add	r2, sp, #88	; 0x58
 800297c:	930d      	str	r3, [sp, #52]	; 0x34
                tx_buf[0] = 0xC0;
 800297e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002980:	f06f 013f 	mvn.w	r1, #63	; 0x3f
 8002984:	7019      	strb	r1, [r3, #0]
                spi_transceive(spi, &spi_cfg, &tx, &rx);
 8002986:	4b86      	ldr	r3, [pc, #536]	; (8002ba0 <opc_read_histogram+0x34c>)
 8002988:	a914      	add	r1, sp, #80	; 0x50
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	f7ff fd30 	bl	80023f0 <spi_transceive.constprop.0.isra.0>
            for (int i=0; i<62; i++) {
 8002990:	f10a 0a01 	add.w	sl, sl, #1
                vals[i] = rx_buf[0];
 8002994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002996:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800299a:	f803 1b01 	strb.w	r1, [r3], #1
            for (int i=0; i<62; i++) {
 800299e:	f1ba 0f3e 	cmp.w	sl, #62	; 0x3e
 80029a2:	aa16      	add	r2, sp, #88	; 0x58
 80029a4:	d1ea      	bne.n	800297c <opc_read_histogram+0x128>
            k_usleep(6);
 80029a6:	2006      	movs	r0, #6
 80029a8:	f010 fff4 	bl	8013994 <k_usleep.isra.0>
            gpio_pin_set(gpioa,4,1);
 80029ac:	4b7b      	ldr	r3, [pc, #492]	; (8002b9c <opc_read_histogram+0x348>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	2104      	movs	r1, #4
 80029b4:	f010 ffd1 	bl	801395a <gpio_pin_set.isra.0>
  u.b[0] = val0;
 80029b8:	f89d 0154 	ldrb.w	r0, [sp, #340]	; 0x154
        data.period = calculate_float(vals[44], vals[45], vals[46], vals[47]);
 80029bc:	f89d 1155 	ldrb.w	r1, [sp, #341]	; 0x155
 80029c0:	f89d 2156 	ldrb.w	r2, [sp, #342]	; 0x156
 80029c4:	f89d 3157 	ldrb.w	r3, [sp, #343]	; 0x157
  u.b[0] = val0;
 80029c8:	f360 0707 	bfi	r7, r0, #0, #8
 80029cc:	f89d 014c 	ldrb.w	r0, [sp, #332]	; 0x14c
  u.b[1] = val1;
 80029d0:	f361 270f 	bfi	r7, r1, #8, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 80029d4:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
  u.b[2] = val2;
 80029d8:	f362 4717 	bfi	r7, r2, #16, #8
  u.b[0] = val0;
 80029dc:	f360 0807 	bfi	r8, r0, #0, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 80029e0:	f89d 214e 	ldrb.w	r2, [sp, #334]	; 0x14e
  u.b[0] = val0;
 80029e4:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
  u.b[3] = val3;
 80029e8:	f363 671f 	bfi	r7, r3, #24, #8
  u.b[1] = val1;
 80029ec:	f361 280f 	bfi	r8, r1, #8, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 80029f0:	f89d 314f 	ldrb.w	r3, [sp, #335]	; 0x14f
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 80029f4:	f89d 115b 	ldrb.w	r1, [sp, #347]	; 0x15b
  u.b[2] = val2;
 80029f8:	f362 4817 	bfi	r8, r2, #16, #8
  u.b[0] = val0;
 80029fc:	f360 0b07 	bfi	fp, r0, #0, #8
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 8002a00:	f89d 215c 	ldrb.w	r2, [sp, #348]	; 0x15c
  u.b[0] = val0;
 8002a04:	f89d 015e 	ldrb.w	r0, [sp, #350]	; 0x15e
  u.b[3] = val3;
 8002a08:	f363 681f 	bfi	r8, r3, #24, #8
  u.b[1] = val1;
 8002a0c:	f361 2b0f 	bfi	fp, r1, #8, #8
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 8002a10:	f89d 315d 	ldrb.w	r3, [sp, #349]	; 0x15d
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 8002a14:	f89d 115f 	ldrb.w	r1, [sp, #351]	; 0x15f
  u.b[2] = val2;
 8002a18:	f362 4b17 	bfi	fp, r2, #16, #8
  u.b[0] = val0;
 8002a1c:	f360 0507 	bfi	r5, r0, #0, #8
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 8002a20:	f89d 2160 	ldrb.w	r2, [sp, #352]	; 0x160
  u.b[0] = val0;
 8002a24:	f89d 0162 	ldrb.w	r0, [sp, #354]	; 0x162
  u.b[3] = val3;
 8002a28:	f363 6b1f 	bfi	fp, r3, #24, #8
  u.b[1] = val1;
 8002a2c:	f361 250f 	bfi	r5, r1, #8, #8
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 8002a30:	f89d 3161 	ldrb.w	r3, [sp, #353]	; 0x161
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8002a34:	f89d 1163 	ldrb.w	r1, [sp, #355]	; 0x163
  u.b[2] = val2;
 8002a38:	f362 4517 	bfi	r5, r2, #16, #8
  u.b[0] = val0;
 8002a3c:	f360 0607 	bfi	r6, r0, #0, #8
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8002a40:	f89d 2164 	ldrb.w	r2, [sp, #356]	; 0x164
  u.b[3] = val3;
 8002a44:	f363 651f 	bfi	r5, r3, #24, #8
  u.b[1] = val1;
 8002a48:	f361 260f 	bfi	r6, r1, #8, #8
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8002a4c:	f89d 3165 	ldrb.w	r3, [sp, #357]	; 0x165
  u.b[2] = val2;
 8002a50:	f362 4617 	bfi	r6, r2, #16, #8
  u.b[3] = val3;
 8002a54:	f363 661f 	bfi	r6, r3, #24, #8
        snprintfcb(fperiod, 40, "%0.2f", data.period);
 8002a58:	4638      	mov	r0, r7
  return u.val;
 8002a5a:	960c      	str	r6, [sp, #48]	; 0x30
        snprintfcb(fperiod, 40, "%0.2f", data.period);
 8002a5c:	f7fd fd24 	bl	80004a8 <__aeabi_f2d>
 8002a60:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8002a64:	e9cd 0100 	strd	r0, r1, [sp]
 8002a68:	4a4e      	ldr	r2, [pc, #312]	; (8002ba4 <opc_read_histogram+0x350>)
 8002a6a:	2128      	movs	r1, #40	; 0x28
 8002a6c:	4650      	mov	r0, sl
 8002a6e:	f010 ffaf 	bl	80139d0 <snprintfcb>
        snprintfcb(fpm1, 40, "%0.2f", data.pm1);
 8002a72:	4658      	mov	r0, fp
 8002a74:	f7fd fd18 	bl	80004a8 <__aeabi_f2d>
 8002a78:	4a4a      	ldr	r2, [pc, #296]	; (8002ba4 <opc_read_histogram+0x350>)
 8002a7a:	e9cd 0100 	strd	r0, r1, [sp]
 8002a7e:	2128      	movs	r1, #40	; 0x28
 8002a80:	a822      	add	r0, sp, #136	; 0x88
 8002a82:	f010 ffa5 	bl	80139d0 <snprintfcb>
        snprintfcb(fpm25, 40, "%0.2f", data.pm25);
 8002a86:	4628      	mov	r0, r5
 8002a88:	f7fd fd0e 	bl	80004a8 <__aeabi_f2d>
 8002a8c:	4a45      	ldr	r2, [pc, #276]	; (8002ba4 <opc_read_histogram+0x350>)
 8002a8e:	e9cd 0100 	strd	r0, r1, [sp]
 8002a92:	2128      	movs	r1, #40	; 0x28
 8002a94:	a82c      	add	r0, sp, #176	; 0xb0
 8002a96:	f010 ff9b 	bl	80139d0 <snprintfcb>
        snprintfcb(fpm10, 40, "%0.2f", data.pm10);
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	f7fd fd04 	bl	80004a8 <__aeabi_f2d>
 8002aa0:	4a40      	ldr	r2, [pc, #256]	; (8002ba4 <opc_read_histogram+0x350>)
 8002aa2:	e9cd 0100 	strd	r0, r1, [sp]
 8002aa6:	2128      	movs	r1, #40	; 0x28
 8002aa8:	a836      	add	r0, sp, #216	; 0xd8
 8002aaa:	f010 ff91 	bl	80139d0 <snprintfcb>
        snprintfcb(fflowrate, 40, "%0.2f", data.sfr);
 8002aae:	4640      	mov	r0, r8
 8002ab0:	f7fd fcfa 	bl	80004a8 <__aeabi_f2d>
 8002ab4:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <opc_read_histogram+0x350>)
 8002ab6:	e9cd 0100 	strd	r0, r1, [sp]
 8002aba:	2128      	movs	r1, #40	; 0x28
 8002abc:	a840      	add	r0, sp, #256	; 0x100
 8002abe:	f010 ff87 	bl	80139d0 <snprintfcb>
        LOG_INF("Sampling Period: %s", fperiod);
 8002ac2:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <opc_read_histogram+0x354>)
 8002ac4:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ac8:	f04f 0a00 	mov.w	sl, #0
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	4653      	mov	r3, sl
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	4650      	mov	r0, sl
 8002ad6:	e9cd aa00 	strd	sl, sl, [sp]
 8002ada:	f010 ff2e 	bl	801393a <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("Sample Flow Rate: %s",fflowrate);
 8002ade:	ab40      	add	r3, sp, #256	; 0x100
 8002ae0:	9303      	str	r3, [sp, #12]
 8002ae2:	4b32      	ldr	r3, [pc, #200]	; (8002bac <opc_read_histogram+0x358>)
 8002ae4:	f8cd a000 	str.w	sl, [sp]
 8002ae8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	4653      	mov	r3, sl
 8002af0:	4621      	mov	r1, r4
 8002af2:	4650      	mov	r0, sl
 8002af4:	f010 ff21 	bl	801393a <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM1: %s", fpm1);
 8002af8:	ab22      	add	r3, sp, #136	; 0x88
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <opc_read_histogram+0x35c>)
 8002afe:	f8cd a000 	str.w	sl, [sp]
 8002b02:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002b06:	2203      	movs	r2, #3
 8002b08:	4653      	mov	r3, sl
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	4650      	mov	r0, sl
 8002b0e:	f010 ff14 	bl	801393a <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM2.5: %s", fpm25);
 8002b12:	ab2c      	add	r3, sp, #176	; 0xb0
 8002b14:	9303      	str	r3, [sp, #12]
 8002b16:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <opc_read_histogram+0x360>)
 8002b18:	f8cd a000 	str.w	sl, [sp]
 8002b1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002b20:	2203      	movs	r2, #3
 8002b22:	4653      	mov	r3, sl
 8002b24:	4621      	mov	r1, r4
 8002b26:	4650      	mov	r0, sl
 8002b28:	f010 ff07 	bl	801393a <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM10: %s", fpm10);
 8002b2c:	ab36      	add	r3, sp, #216	; 0xd8
 8002b2e:	9303      	str	r3, [sp, #12]
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <opc_read_histogram+0x364>)
 8002b32:	f8cd a000 	str.w	sl, [sp]
 8002b36:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	4653      	mov	r3, sl
 8002b3e:	4621      	mov	r1, r4
 8002b40:	4650      	mov	r0, sl
 8002b42:	f010 fefa 	bl	801393a <z_log_msg2_runtime_create.constprop.0>
        if (s > (SKIP-1)) {
 8002b46:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d918      	bls.n	8002b80 <opc_read_histogram+0x32c>
            result.pm1  = result.pm1 + data.pm1;
 8002b4e:	9807      	ldr	r0, [sp, #28]
 8002b50:	4659      	mov	r1, fp
 8002b52:	f7fd ff91 	bl	8000a78 <__addsf3>
            result.pm10 = result.pm10 + data.pm10;
 8002b56:	4631      	mov	r1, r6
            result.pm1  = result.pm1 + data.pm1;
 8002b58:	9007      	str	r0, [sp, #28]
            result.pm10 = result.pm10 + data.pm10;
 8002b5a:	4648      	mov	r0, r9
 8002b5c:	f7fd ff8c 	bl	8000a78 <__addsf3>
            result.pm25 = result.pm25 + data.pm25;
 8002b60:	4629      	mov	r1, r5
            result.pm10 = result.pm10 + data.pm10;
 8002b62:	4681      	mov	r9, r0
            result.pm25 = result.pm25 + data.pm25;
 8002b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b66:	f7fd ff87 	bl	8000a78 <__addsf3>
            result.period = result.period + data.period;
 8002b6a:	4639      	mov	r1, r7
            result.pm25 = result.pm25 + data.pm25;
 8002b6c:	9009      	str	r0, [sp, #36]	; 0x24
            result.period = result.period + data.period;
 8002b6e:	9808      	ldr	r0, [sp, #32]
 8002b70:	f7fd ff82 	bl	8000a78 <__addsf3>
            result.sfr = result.sfr + data.sfr;
 8002b74:	4641      	mov	r1, r8
            result.period = result.period + data.period;
 8002b76:	9008      	str	r0, [sp, #32]
            result.sfr = result.sfr + data.sfr;
 8002b78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b7a:	f7fd ff7d 	bl	8000a78 <__addsf3>
 8002b7e:	900a      	str	r0, [sp, #40]	; 0x28
        k_msleep(5000);
 8002b80:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b84:	f010 ff08 	bl	8013998 <k_msleep.isra.0>
    for (uint8_t s=0; s<samples; s++) {
 8002b88:	9b06      	ldr	r3, [sp, #24]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	9306      	str	r3, [sp, #24]
 8002b8e:	e673      	b.n	8002878 <opc_read_histogram+0x24>
 8002b90:	0801b383 	.word	0x0801b383
 8002b94:	0801a000 	.word	0x0801a000
 8002b98:	0801b395 	.word	0x0801b395
 8002b9c:	20000fb4 	.word	0x20000fb4
 8002ba0:	20000fbc 	.word	0x20000fbc
 8002ba4:	0801ac29 	.word	0x0801ac29
 8002ba8:	0801b3af 	.word	0x0801b3af
 8002bac:	0801b3c3 	.word	0x0801b3c3
 8002bb0:	0801b3d8 	.word	0x0801b3d8
 8002bb4:	0801b3e0 	.word	0x0801b3e0
 8002bb8:	0801b3ea 	.word	0x0801b3ea

08002bbc <init_time_system>:

    LOG_INF("Found device \"%s\", getting sensor data", dev->name);
    return dev;
}        

void init_time_system() {
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	482e      	ldr	r0, [pc, #184]	; (8002c7c <init_time_system+0xc0>)
 8002bc2:	4e2f      	ldr	r6, [pc, #188]	; (8002c80 <init_time_system+0xc4>)
 8002bc4:	f00c ffce 	bl	800fb64 <z_impl_device_get_binding>
    if (dev == NULL) {
 8002bc8:	4604      	mov	r4, r0
 8002bca:	b968      	cbnz	r0, 8002be8 <init_time_system+0x2c>
        LOG_ERR("\nError: no device DS3231 found.\n");
 8002bcc:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <init_time_system+0xc8>)
 8002bce:	9308      	str	r3, [sp, #32]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	9307      	str	r3, [sp, #28]
 8002bd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002bd8:	4603      	mov	r3, r0
 8002bda:	aa07      	add	r2, sp, #28
 8002bdc:	482a      	ldr	r0, [pc, #168]	; (8002c88 <init_time_system+0xcc>)
 8002bde:	f011 faf8 	bl	80141d2 <z_impl_z_log_msg2_static_create>
    
    dev_ds3231 = get_ds3231_device();
 8002be2:	6034      	str	r4, [r6, #0]
        LOG_ERR("I2C2 config failed");
    } else {
        LOG_INF("i2c2 configured...");
    }    
    
}
 8002be4:	b00a      	add	sp, #40	; 0x28
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f016 f8be 	bl	8018d68 <z_device_is_ready>
 8002bec:	6823      	ldr	r3, [r4, #0]
        LOG_ERR("\nError: Device \"%s\" is not ready; "
 8002bee:	9303      	str	r3, [sp, #12]
    if (!device_is_ready(dev)) {
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	b950      	cbnz	r0, 8002c0a <init_time_system+0x4e>
        LOG_ERR("\nError: Device \"%s\" is not ready; "
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <init_time_system+0xd0>)
 8002bf6:	4924      	ldr	r1, [pc, #144]	; (8002c88 <init_time_system+0xcc>)
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4603      	mov	r3, r0
 8002c02:	f010 fece 	bl	80139a2 <z_log_msg2_runtime_create.constprop.0>
    dev_ds3231 = get_ds3231_device();
 8002c06:	6035      	str	r5, [r6, #0]
    if (dev_ds3231 == NULL) {
 8002c08:	e7ec      	b.n	8002be4 <init_time_system+0x28>
    LOG_INF("Found device \"%s\", getting sensor data", dev->name);
 8002c0a:	2500      	movs	r5, #0
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <init_time_system+0xd4>)
 8002c0e:	9302      	str	r3, [sp, #8]
 8002c10:	e9cd 5500 	strd	r5, r5, [sp]
 8002c14:	462b      	mov	r3, r5
 8002c16:	491c      	ldr	r1, [pc, #112]	; (8002c88 <init_time_system+0xcc>)
 8002c18:	2203      	movs	r2, #3
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f010 fec1 	bl	80139a2 <z_log_msg2_runtime_create.constprop.0>
    LOG_INF("Initializing I2C 2...");
 8002c20:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <init_time_system+0xd8>)
    dev_ds3231 = get_ds3231_device();
 8002c22:	6034      	str	r4, [r6, #0]
    LOG_INF("Initializing I2C 2...");
 8002c24:	2402      	movs	r4, #2
 8002c26:	9308      	str	r3, [sp, #32]
 8002c28:	9407      	str	r4, [sp, #28]
 8002c2a:	4817      	ldr	r0, [pc, #92]	; (8002c88 <init_time_system+0xcc>)
 8002c2c:	462b      	mov	r3, r5
 8002c2e:	aa07      	add	r2, sp, #28
 8002c30:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002c34:	f011 facd 	bl	80141d2 <z_impl_z_log_msg2_static_create>
 8002c38:	4817      	ldr	r0, [pc, #92]	; (8002c98 <init_time_system+0xdc>)
 8002c3a:	f00c ff93 	bl	800fb64 <z_impl_device_get_binding>
    i2c2_dev = device_get_binding("I2C_2");
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <init_time_system+0xe0>)
 8002c40:	4603      	mov	r3, r0
 8002c42:	6010      	str	r0, [r2, #0]
    if (!i2c2_dev) {
 8002c44:	b930      	cbnz	r0, 8002c54 <init_time_system+0x98>
        LOG_INF("I2C2: Device driver not found.");
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <init_time_system+0xe4>)
        LOG_INF("i2c2 configured...");
 8002c48:	e9cd 4207 	strd	r4, r2, [sp, #28]
 8002c4c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8002c50:	aa07      	add	r2, sp, #28
 8002c52:	e00c      	b.n	8002c6e <init_time_system+0xb2>
	return api->configure(dev, dev_config);
 8002c54:	6883      	ldr	r3, [r0, #8]
 8002c56:	2114      	movs	r1, #20
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4798      	blx	r3
    if (i2c_configure(i2c2_dev, i2c2_cfg)) {
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	b150      	cbz	r0, 8002c76 <init_time_system+0xba>
        LOG_ERR("I2C2 config failed");
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <init_time_system+0xe8>)
 8002c62:	e9cd 4307 	strd	r4, r3, [sp, #28]
 8002c66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002c6a:	462b      	mov	r3, r5
 8002c6c:	aa07      	add	r2, sp, #28
 8002c6e:	4806      	ldr	r0, [pc, #24]	; (8002c88 <init_time_system+0xcc>)
 8002c70:	f011 faaf 	bl	80141d2 <z_impl_z_log_msg2_static_create>
        LOG_INF("i2c2 configured...");
 8002c74:	e7b6      	b.n	8002be4 <init_time_system+0x28>
 8002c76:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <init_time_system+0xec>)
 8002c78:	e7e6      	b.n	8002c48 <init_time_system+0x8c>
 8002c7a:	bf00      	nop
 8002c7c:	0801b410 	.word	0x0801b410
 8002c80:	20000fcc 	.word	0x20000fcc
 8002c84:	0801b417 	.word	0x0801b417
 8002c88:	0801a038 	.word	0x0801a038
 8002c8c:	0801ab6a 	.word	0x0801ab6a
 8002c90:	0801abbe 	.word	0x0801abbe
 8002c94:	0801b438 	.word	0x0801b438
 8002c98:	0801b44e 	.word	0x0801b44e
 8002c9c:	20000fd0 	.word	0x20000fd0
 8002ca0:	0801b454 	.word	0x0801b454
 8002ca4:	0801b473 	.word	0x0801b473
 8002ca8:	0801b486 	.word	0x0801b486

08002cac <format_time>:
        .syncclock = syncclock,
    };
    //LOG_INF("Counter returns: %d, %d, %d",sp.rtc.tv_sec, sp.rtc.tv_nsec, syncclock);
    return format_time(sp.rtc.tv_sec, sp.rtc.tv_nsec);
}
char *format_time(time_t time, long nsec) {
 8002cac:	b510      	push	{r4, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	e9cd 0100 	strd	r0, r1, [sp]
    static char buf[64];
    char *bp = buf;
    char *const bpe = bp + sizeof (buf);
    struct tm tv;
    struct tm *tp = gmtime_r(&time, &tv);
 8002cb4:	a903      	add	r1, sp, #12
 8002cb6:	4668      	mov	r0, sp
 8002cb8:	f00e fa14 	bl	80110e4 <gmtime_r>

    bp += strftime(bp, bpe - bp, "%Y-%m-%d %H:%M:%S", tp);
 8002cbc:	4c04      	ldr	r4, [pc, #16]	; (8002cd0 <format_time+0x24>)
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <format_time+0x28>)
    struct tm *tp = gmtime_r(&time, &tv);
 8002cc0:	4603      	mov	r3, r0
    bp += strftime(bp, bpe - bp, "%Y-%m-%d %H:%M:%S", tp);
 8002cc2:	2140      	movs	r1, #64	; 0x40
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f016 fc36 	bl	8019536 <strftime>
        bp += snprintf(bp, bpe - bp, ".%09lu", nsec);
    }
    bp += strftime(bp, bpe - bp, " %a %j", tp);
    */
    return buf;
}
 8002cca:	4620      	mov	r0, r4
 8002ccc:	b00c      	add	sp, #48	; 0x30
 8002cce:	bd10      	pop	{r4, pc}
 8002cd0:	2000252e 	.word	0x2000252e
 8002cd4:	0801b499 	.word	0x0801b499

08002cd8 <get_formatted_time>:
char* get_formatted_time() {
 8002cd8:	b530      	push	{r4, r5, lr}
 8002cda:	b089      	sub	sp, #36	; 0x24
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 8002cdc:	f016 fa4a 	bl	8019174 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8002ce0:	220a      	movs	r2, #10
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f7fe f970 	bl	8000fc8 <__aeabi_uldivmod>
    int rc = counter_get_value(dev_ds3231, &now);
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <get_formatted_time+0x5c>)
    uint32_t now = 0;
 8002cea:	2500      	movs	r5, #0
 8002cec:	4604      	mov	r4, r0
 8002cee:	9501      	str	r5, [sp, #4]
    int rc = counter_get_value(dev_ds3231, &now);
 8002cf0:	6818      	ldr	r0, [r3, #0]
					   uint32_t *ticks)
{
	const struct counter_driver_api *api =
				(struct counter_driver_api *)dev->api;

	return api->get_value(dev, ticks);
 8002cf2:	6883      	ldr	r3, [r0, #8]
 8002cf4:	a901      	add	r1, sp, #4
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4798      	blx	r3
    if (rc < 0) {
 8002cfa:	42a8      	cmp	r0, r5
 8002cfc:	da0a      	bge.n	8002d14 <get_formatted_time+0x3c>
        LOG_ERR("Can't get the counter value");
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <get_formatted_time+0x60>)
 8002d00:	9306      	str	r3, [sp, #24]
 8002d02:	2302      	movs	r3, #2
 8002d04:	9305      	str	r3, [sp, #20]
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <get_formatted_time+0x64>)
 8002d08:	462b      	mov	r3, r5
 8002d0a:	aa05      	add	r2, sp, #20
 8002d0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002d10:	f011 fa5f 	bl	80141d2 <z_impl_z_log_msg2_static_create>
            .tv_nsec = (uint64_t) NSEC_PER_SEC * syncclock / syncclock_Hz,
 8002d14:	480a      	ldr	r0, [pc, #40]	; (8002d40 <get_formatted_time+0x68>)
 8002d16:	2300      	movs	r3, #0
 8002d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d1c:	fba4 0100 	umull	r0, r1, r4, r0
 8002d20:	f7fe f952 	bl	8000fc8 <__aeabi_uldivmod>
    return format_time(sp.rtc.tv_sec, sp.rtc.tv_nsec);
 8002d24:	2100      	movs	r1, #0
            .tv_nsec = (uint64_t) NSEC_PER_SEC * syncclock / syncclock_Hz,
 8002d26:	4602      	mov	r2, r0
    return format_time(sp.rtc.tv_sec, sp.rtc.tv_nsec);
 8002d28:	9801      	ldr	r0, [sp, #4]
 8002d2a:	f7ff ffbf 	bl	8002cac <format_time>
}
 8002d2e:	b009      	add	sp, #36	; 0x24
 8002d30:	bd30      	pop	{r4, r5, pc}
 8002d32:	bf00      	nop
 8002d34:	20000fcc 	.word	0x20000fcc
 8002d38:	0801b4ab 	.word	0x0801b4ab
 8002d3c:	0801a038 	.word	0x0801a038
 8002d40:	3b9aca00 	.word	0x3b9aca00

08002d44 <format_date>:

char *format_date(time_t time, long nsec) {
 8002d44:	b510      	push	{r4, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	e9cd 0100 	strd	r0, r1, [sp]
    static char buf[64];
    char *bp = buf;
    char *const bpe = bp + sizeof (buf);
    struct tm tv;
    struct tm *tp = gmtime_r(&time, &tv);
 8002d4c:	a903      	add	r1, sp, #12
 8002d4e:	4668      	mov	r0, sp
 8002d50:	f00e f9c8 	bl	80110e4 <gmtime_r>
    bp += strftime(bp, bpe - bp, "%Y%m%d", tp);
 8002d54:	4c04      	ldr	r4, [pc, #16]	; (8002d68 <format_date+0x24>)
 8002d56:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <format_date+0x28>)
    struct tm *tp = gmtime_r(&time, &tv);
 8002d58:	4603      	mov	r3, r0
    bp += strftime(bp, bpe - bp, "%Y%m%d", tp);
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f016 fbea 	bl	8019536 <strftime>
    return buf;
}
 8002d62:	4620      	mov	r0, r4
 8002d64:	b00c      	add	sp, #48	; 0x30
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	200024ee 	.word	0x200024ee
 8002d6c:	0801b4c7 	.word	0x0801b4c7

08002d70 <get_date>:

char *get_date() {
 8002d70:	b530      	push	{r4, r5, lr}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	f016 f9fe 	bl	8019174 <z_impl_k_uptime_ticks>
 8002d78:	220a      	movs	r2, #10
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f7fe f924 	bl	8000fc8 <__aeabi_uldivmod>
    // get time
    uint32_t syncclock_Hz = maxim_ds3231_syncclock_frequency(dev_ds3231);
    uint32_t syncclock = maxim_ds3231_read_syncclock(dev_ds3231);
    uint32_t now = 0;
    int rc = counter_get_value(dev_ds3231, &now);
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <get_date+0x5c>)
    uint32_t now = 0;
 8002d82:	2500      	movs	r5, #0
 8002d84:	4604      	mov	r4, r0
 8002d86:	9501      	str	r5, [sp, #4]
    int rc = counter_get_value(dev_ds3231, &now);
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	6883      	ldr	r3, [r0, #8]
 8002d8c:	a901      	add	r1, sp, #4
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4798      	blx	r3
    if (rc < 0) {
 8002d92:	42a8      	cmp	r0, r5
 8002d94:	da0a      	bge.n	8002dac <get_date+0x3c>
        LOG_ERR("Can't get the counter value");
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <get_date+0x60>)
 8002d98:	9306      	str	r3, [sp, #24]
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	9305      	str	r3, [sp, #20]
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <get_date+0x64>)
 8002da0:	462b      	mov	r3, r5
 8002da2:	aa05      	add	r2, sp, #20
 8002da4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002da8:	f011 fa13 	bl	80141d2 <z_impl_z_log_msg2_static_create>
    }
    struct maxim_ds3231_syncpoint sp = {
        .rtc =
        {
            .tv_sec = now,
            .tv_nsec = (uint64_t) NSEC_PER_SEC * syncclock / syncclock_Hz,
 8002dac:	480a      	ldr	r0, [pc, #40]	; (8002dd8 <get_date+0x68>)
 8002dae:	2300      	movs	r3, #0
 8002db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002db4:	fba4 0100 	umull	r0, r1, r4, r0
 8002db8:	f7fe f906 	bl	8000fc8 <__aeabi_uldivmod>
        },
        .syncclock = syncclock,
    };
    return format_date(sp.rtc.tv_sec, sp.rtc.tv_nsec);
 8002dbc:	2100      	movs	r1, #0
            .tv_nsec = (uint64_t) NSEC_PER_SEC * syncclock / syncclock_Hz,
 8002dbe:	4602      	mov	r2, r0
    return format_date(sp.rtc.tv_sec, sp.rtc.tv_nsec);
 8002dc0:	9801      	ldr	r0, [sp, #4]
 8002dc2:	f7ff ffbf 	bl	8002d44 <format_date>
 8002dc6:	b009      	add	sp, #36	; 0x24
 8002dc8:	bd30      	pop	{r4, r5, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000fcc 	.word	0x20000fcc
 8002dd0:	0801b4ab 	.word	0x0801b4ab
 8002dd4:	0801a038 	.word	0x0801a038
 8002dd8:	3b9aca00 	.word	0x3b9aca00

08002ddc <vsnprintfcb>:

	return rc;
}

int vsnprintfcb(char *str, size_t size, const char *format, va_list ap)
{
 8002ddc:	b507      	push	{r0, r1, r2, lr}
	struct str_ctx ctx = {
 8002dde:	9000      	str	r0, [sp, #0]
		.dp = str,
		.dpe = str + size,
 8002de0:	4408      	add	r0, r1
	struct str_ctx ctx = {
 8002de2:	9001      	str	r0, [sp, #4]
	};
	int rv = cbvprintf(str_out, &ctx, format, ap);
 8002de4:	4669      	mov	r1, sp
 8002de6:	4807      	ldr	r0, [pc, #28]	; (8002e04 <vsnprintfcb+0x28>)
 8002de8:	f000 fb50 	bl	800348c <cbvprintf>

	if (ctx.dp < ctx.dpe) {
 8002dec:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	f04f 0200 	mov.w	r2, #0
		ctx.dp[0] = 0;
 8002df6:	bf34      	ite	cc
 8002df8:	701a      	strbcc	r2, [r3, #0]
	} else {
		ctx.dp[-1] = 0;
 8002dfa:	f803 2c01 	strbcs.w	r2, [r3, #-1]
	}

	return rv;
}
 8002dfe:	b003      	add	sp, #12
 8002e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e04:	080139c1 	.word	0x080139c1

08002e08 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 8002e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0c:	b08d      	sub	sp, #52	; 0x34
 8002e0e:	461f      	mov	r7, r3
 8002e10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002e12:	9202      	str	r2, [sp, #8]
 8002e14:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 8002e16:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8002e1a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 8002e1e:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8002e20:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8002e22:	0782      	lsls	r2, r0, #30
{
 8002e24:	4605      	mov	r5, r0
 8002e26:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8002e28:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
 8002e2a:	f040 821c 	bne.w	8003266 <cbvprintf_package+0x45e>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 8002e2e:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8002e30:	2800      	cmp	r0, #0
 8002e32:	f040 821b 	bne.w	800326c <cbvprintf_package+0x464>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 8002e36:	f001 0607 	and.w	r6, r1, #7
 8002e3a:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 8002e3c:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8002e40:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
 8002e44:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
 8002e48:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8002e4a:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 8002e4e:	4652      	mov	r2, sl
	bool parsing = false;
 8002e50:	4651      	mov	r1, sl
	size = sizeof(char *);
 8002e52:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 8002e54:	b105      	cbz	r5, 8002e58 <cbvprintf_package+0x50>
				*(const char **)buf = s;
 8002e56:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8002e58:	9804      	ldr	r0, [sp, #16]
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	dc07      	bgt.n	8002e6e <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8002e5e:	48c8      	ldr	r0, [pc, #800]	; (8003180 <cbvprintf_package+0x378>)
 8002e60:	4287      	cmp	r7, r0
 8002e62:	f0c0 8139 	bcc.w	80030d8 <cbvprintf_package+0x2d0>
 8002e66:	48c7      	ldr	r0, [pc, #796]	; (8003184 <cbvprintf_package+0x37c>)
 8002e68:	4287      	cmp	r7, r0
 8002e6a:	f080 8135 	bcs.w	80030d8 <cbvprintf_package+0x2d0>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
 8002e6e:	9802      	ldr	r0, [sp, #8]
 8002e70:	f010 0e02 	ands.w	lr, r0, #2
 8002e74:	f000 8149 	beq.w	800310a <cbvprintf_package+0x302>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8002e78:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8002e7c:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 8002e7e:	f1be 0f00 	cmp.w	lr, #0
 8002e82:	f000 812f 	beq.w	80030e4 <cbvprintf_package+0x2dc>
 8002e86:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002e8a:	f0c0 812b 	bcc.w	80030e4 <cbvprintf_package+0x2dc>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
 8002e8e:	f06f 0015 	mvn.w	r0, #21
 8002e92:	e0f9      	b.n	8003088 <cbvprintf_package+0x280>
		if (!parsing) {
 8002e94:	b939      	cbnz	r1, 8002ea6 <cbvprintf_package+0x9e>
			if (*fmt == '%') {
 8002e96:	2825      	cmp	r0, #37	; 0x25
 8002e98:	f040 813b 	bne.w	8003112 <cbvprintf_package+0x30a>
				parsing = true;
 8002e9c:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
 8002e9e:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
 8002ea2:	46c1      	mov	r9, r8
 8002ea4:	e135      	b.n	8003112 <cbvprintf_package+0x30a>
		switch (*fmt) {
 8002ea6:	282b      	cmp	r0, #43	; 0x2b
 8002ea8:	d824      	bhi.n	8002ef4 <cbvprintf_package+0xec>
 8002eaa:	281f      	cmp	r0, #31
 8002eac:	d801      	bhi.n	8002eb2 <cbvprintf_package+0xaa>
			parsing = false;
 8002eae:	2100      	movs	r1, #0
 8002eb0:	e12f      	b.n	8003112 <cbvprintf_package+0x30a>
		switch (*fmt) {
 8002eb2:	f1a0 0c20 	sub.w	ip, r0, #32
 8002eb6:	f1bc 0f0b 	cmp.w	ip, #11
 8002eba:	d8f8      	bhi.n	8002eae <cbvprintf_package+0xa6>
 8002ebc:	f20f 0e04 	addw	lr, pc, #4
 8002ec0:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
 8002ec4:	08003113 	.word	0x08003113
 8002ec8:	08002eaf 	.word	0x08002eaf
 8002ecc:	08002eaf 	.word	0x08002eaf
 8002ed0:	08003113 	.word	0x08003113
 8002ed4:	08002eaf 	.word	0x08002eaf
 8002ed8:	08002eaf 	.word	0x08002eaf
 8002edc:	08002eaf 	.word	0x08002eaf
 8002ee0:	08002eaf 	.word	0x08002eaf
 8002ee4:	08002eaf 	.word	0x08002eaf
 8002ee8:	08002eaf 	.word	0x08002eaf
 8002eec:	080030a3 	.word	0x080030a3
 8002ef0:	08003113 	.word	0x08003113
 8002ef4:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
 8002ef8:	fa5f fe8c 	uxtb.w	lr, ip
 8002efc:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
 8002f00:	d8d5      	bhi.n	8002eae <cbvprintf_package+0xa6>
 8002f02:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
 8002f06:	d8d2      	bhi.n	8002eae <cbvprintf_package+0xa6>
 8002f08:	f20f 0e04 	addw	lr, pc, #4
 8002f0c:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
 8002f10:	08003113 	.word	0x08003113
 8002f14:	08003113 	.word	0x08003113
 8002f18:	08002eaf 	.word	0x08002eaf
 8002f1c:	08003113 	.word	0x08003113
 8002f20:	08003113 	.word	0x08003113
 8002f24:	08003113 	.word	0x08003113
 8002f28:	08003113 	.word	0x08003113
 8002f2c:	08003113 	.word	0x08003113
 8002f30:	08003113 	.word	0x08003113
 8002f34:	08003113 	.word	0x08003113
 8002f38:	08003113 	.word	0x08003113
 8002f3c:	08003113 	.word	0x08003113
 8002f40:	08003113 	.word	0x08003113
 8002f44:	08002eaf 	.word	0x08002eaf
 8002f48:	08002eaf 	.word	0x08002eaf
 8002f4c:	08002eaf 	.word	0x08002eaf
 8002f50:	08002eaf 	.word	0x08002eaf
 8002f54:	08002eaf 	.word	0x08002eaf
 8002f58:	08002eaf 	.word	0x08002eaf
 8002f5c:	08002eaf 	.word	0x08002eaf
 8002f60:	08003065 	.word	0x08003065
 8002f64:	08002eaf 	.word	0x08002eaf
 8002f68:	08002eaf 	.word	0x08002eaf
 8002f6c:	08002eaf 	.word	0x08002eaf
 8002f70:	08003065 	.word	0x08003065
 8002f74:	08003065 	.word	0x08003065
 8002f78:	08003065 	.word	0x08003065
 8002f7c:	08002eaf 	.word	0x08002eaf
 8002f80:	08002eaf 	.word	0x08002eaf
 8002f84:	08002eaf 	.word	0x08002eaf
 8002f88:	08002eaf 	.word	0x08002eaf
 8002f8c:	08003113 	.word	0x08003113
 8002f90:	08002eaf 	.word	0x08002eaf
 8002f94:	08002eaf 	.word	0x08002eaf
 8002f98:	08002eaf 	.word	0x08002eaf
 8002f9c:	08002eaf 	.word	0x08002eaf
 8002fa0:	08002eaf 	.word	0x08002eaf
 8002fa4:	08002eaf 	.word	0x08002eaf
 8002fa8:	08002eaf 	.word	0x08002eaf
 8002fac:	08002eaf 	.word	0x08002eaf
 8002fb0:	08002eaf 	.word	0x08002eaf
 8002fb4:	08002eaf 	.word	0x08002eaf
 8002fb8:	08002eaf 	.word	0x08002eaf
 8002fbc:	08003049 	.word	0x08003049
 8002fc0:	08002eaf 	.word	0x08002eaf
 8002fc4:	08002eaf 	.word	0x08002eaf
 8002fc8:	08002eaf 	.word	0x08002eaf
 8002fcc:	08002eaf 	.word	0x08002eaf
 8002fd0:	08002eaf 	.word	0x08002eaf
 8002fd4:	08002eaf 	.word	0x08002eaf
 8002fd8:	08002eaf 	.word	0x08002eaf
 8002fdc:	08002eaf 	.word	0x08002eaf
 8002fe0:	08003065 	.word	0x08003065
 8002fe4:	08002eaf 	.word	0x08002eaf
 8002fe8:	08003049 	.word	0x08003049
 8002fec:	08003049 	.word	0x08003049
 8002ff0:	08003065 	.word	0x08003065
 8002ff4:	08003065 	.word	0x08003065
 8002ff8:	08003065 	.word	0x08003065
 8002ffc:	08003113 	.word	0x08003113
 8003000:	08003049 	.word	0x08003049
 8003004:	08003097 	.word	0x08003097
 8003008:	08002eaf 	.word	0x08002eaf
 800300c:	08003113 	.word	0x08003113
 8003010:	08002eaf 	.word	0x08002eaf
 8003014:	0800309d 	.word	0x0800309d
 8003018:	08003049 	.word	0x08003049
 800301c:	0800309d 	.word	0x0800309d
 8003020:	08002eaf 	.word	0x08002eaf
 8003024:	08002eaf 	.word	0x08002eaf
 8003028:	0800309d 	.word	0x0800309d
 800302c:	08002e9f 	.word	0x08002e9f
 8003030:	08003049 	.word	0x08003049
 8003034:	08002eaf 	.word	0x08002eaf
 8003038:	08002eaf 	.word	0x08002eaf
 800303c:	08003049 	.word	0x08003049
 8003040:	08002eaf 	.word	0x08002eaf
 8003044:	08002e9f 	.word	0x08002e9f
			if (fmt[-1] == 'l') {
 8003048:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800304c:	296c      	cmp	r1, #108	; 0x6c
 800304e:	d127      	bne.n	80030a0 <cbvprintf_package+0x298>
				if (fmt[-2] == 'l') {
 8003050:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8003054:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
 8003056:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
 800305a:	d03a      	beq.n	80030d2 <cbvprintf_package+0x2ca>
			align = VA_STACK_ALIGN(void *);
 800305c:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
 8003060:	46c1      	mov	r9, r8
 8003062:	e01e      	b.n	80030a2 <cbvprintf_package+0x29a>
				v.ld = va_arg(ap, long double);
 8003064:	9800      	ldr	r0, [sp, #0]
 8003066:	f100 0b07 	add.w	fp, r0, #7
 800306a:	f02b 0007 	bic.w	r0, fp, #7
 800306e:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
 8003072:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
 8003074:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
 8003076:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
 800307a:	b155      	cbz	r5, 8003092 <cbvprintf_package+0x28a>
				if (BUF_OFFSET + size > len) {
 800307c:	9805      	ldr	r0, [sp, #20]
 800307e:	4420      	add	r0, r4
 8003080:	42b0      	cmp	r0, r6
 8003082:	d904      	bls.n	800308e <cbvprintf_package+0x286>
					return -ENOSPC;
 8003084:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8003088:	b00d      	add	sp, #52	; 0x34
 800308a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
 800308e:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
 8003092:	3408      	adds	r4, #8
			parsing = false;
 8003094:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
 8003096:	f04f 0808 	mov.w	r8, #8
 800309a:	e702      	b.n	8002ea2 <cbvprintf_package+0x9a>
			parsing = false;
 800309c:	2100      	movs	r1, #0
 800309e:	e7dd      	b.n	800305c <cbvprintf_package+0x254>
			parsing = false;
 80030a0:	2100      	movs	r1, #0
		buf = (void *) ROUND_UP(buf, align);
 80030a2:	3c01      	subs	r4, #1
 80030a4:	4444      	add	r4, r8
 80030a6:	f1c8 0c00 	rsb	ip, r8, #0
 80030aa:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 80030ae:	b125      	cbz	r5, 80030ba <cbvprintf_package+0x2b2>
 80030b0:	eba9 0c05 	sub.w	ip, r9, r5
 80030b4:	44a4      	add	ip, r4
 80030b6:	4566      	cmp	r6, ip
 80030b8:	d3e4      	bcc.n	8003084 <cbvprintf_package+0x27c>
		if (*fmt == 's') {
 80030ba:	2873      	cmp	r0, #115	; 0x73
 80030bc:	d152      	bne.n	8003164 <cbvprintf_package+0x35c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80030be:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
 80030c0:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80030c4:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
 80030c6:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80030ca:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
 80030cc:	f8cd b000 	str.w	fp, [sp]
 80030d0:	e6c0      	b.n	8002e54 <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
 80030d2:	f04f 0808 	mov.w	r8, #8
 80030d6:	e7c3      	b.n	8003060 <cbvprintf_package+0x258>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
 80030d8:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80030da:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
 80030de:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
 80030e2:	e6cb      	b.n	8002e7c <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 80030e4:	2a0f      	cmp	r2, #15
 80030e6:	f63f aed2 	bhi.w	8002e8e <cbvprintf_package+0x86>
				if (buf0 != NULL) {
 80030ea:	b345      	cbz	r5, 800313e <cbvprintf_package+0x336>
					str_ptr_pos[s_idx] = s_ptr_idx;
 80030ec:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 80030f0:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
 80030f4:	4496      	add	lr, r2
 80030f6:	f1bc 0f00 	cmp.w	ip, #0
 80030fa:	d01a      	beq.n	8003132 <cbvprintf_package+0x32a>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 80030fc:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003100:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
 8003104:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
 8003108:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
 800310a:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
 800310e:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
 8003110:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
 8003112:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003116:	2800      	cmp	r0, #0
 8003118:	f47f aebc 	bne.w	8002e94 <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
 800311c:	1b61      	subs	r1, r4, r5
 800311e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003122:	f4bf aeb4 	bcs.w	8002e8e <cbvprintf_package+0x86>
	if (buf0 == NULL) {
 8003126:	2d00      	cmp	r5, #0
 8003128:	d141      	bne.n	80031ae <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 800312a:	f1a6 0408 	sub.w	r4, r6, #8
 800312e:	1860      	adds	r0, r4, r1
 8003130:	e7aa      	b.n	8003088 <cbvprintf_package+0x280>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8003132:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
 8003136:	9803      	ldr	r0, [sp, #12]
 8003138:	3001      	adds	r0, #1
 800313a:	9003      	str	r0, [sp, #12]
 800313c:	e7e4      	b.n	8003108 <cbvprintf_package+0x300>
				} else if (is_ro || rws_pos_en) {
 800313e:	f1bc 0f00 	cmp.w	ip, #0
 8003142:	d101      	bne.n	8003148 <cbvprintf_package+0x340>
 8003144:	9801      	ldr	r0, [sp, #4]
 8003146:	b108      	cbz	r0, 800314c <cbvprintf_package+0x344>
					len += 1;
 8003148:	3601      	adds	r6, #1
 800314a:	e7dd      	b.n	8003108 <cbvprintf_package+0x300>
					len += strlen(s) + 1 + 1;
 800314c:	4638      	mov	r0, r7
 800314e:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8003152:	9305      	str	r3, [sp, #20]
 8003154:	f7fe f937 	bl	80013c6 <strlen>
 8003158:	3602      	adds	r6, #2
 800315a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 800315e:	9b05      	ldr	r3, [sp, #20]
 8003160:	4406      	add	r6, r0
 8003162:	e7d1      	b.n	8003108 <cbvprintf_package+0x300>
		} else if (size == sizeof(int)) {
 8003164:	f1b9 0f04 	cmp.w	r9, #4
 8003168:	d10e      	bne.n	8003188 <cbvprintf_package+0x380>
			int v = va_arg(ap, int);
 800316a:	9800      	ldr	r0, [sp, #0]
 800316c:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
 8003170:	b10d      	cbz	r5, 8003176 <cbvprintf_package+0x36e>
			int v = va_arg(ap, int);
 8003172:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
 8003174:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
 8003176:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
 8003178:	f8cd c000 	str.w	ip, [sp]
 800317c:	e7c9      	b.n	8003112 <cbvprintf_package+0x30a>
 800317e:	bf00      	nop
 8003180:	08019ae0 	.word	0x08019ae0
 8003184:	0801ce90 	.word	0x0801ce90
		} else if (size == sizeof(long long)) {
 8003188:	f1b9 0f08 	cmp.w	r9, #8
 800318c:	f47f ae7f 	bne.w	8002e8e <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
 8003190:	9800      	ldr	r0, [sp, #0]
 8003192:	3007      	adds	r0, #7
 8003194:	f020 0007 	bic.w	r0, r0, #7
 8003198:	f100 0c08 	add.w	ip, r0, #8
 800319c:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
 80031a0:	b11d      	cbz	r5, 80031aa <cbvprintf_package+0x3a2>
			long long v = va_arg(ap, long long);
 80031a2:	e9d0 bc00 	ldrd	fp, ip, [r0]
 80031a6:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
 80031aa:	3408      	adds	r4, #8
 80031ac:	e7b1      	b.n	8003112 <cbvprintf_package+0x30a>
	if (rws_pos_en) {
 80031ae:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
 80031b0:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
 80031b2:	0889      	lsrs	r1, r1, #2
 80031b4:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
 80031b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
 80031ba:	b1a3      	cbz	r3, 80031e6 <cbvprintf_package+0x3de>
		buf0[1] = 0;
 80031bc:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
 80031be:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
 80031c0:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
 80031c4:	f1ba 0f00 	cmp.w	sl, #0
 80031c8:	d006      	beq.n	80031d8 <cbvprintf_package+0x3d0>
 80031ca:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
 80031cc:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
 80031d0:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
 80031d4:	4562      	cmp	r2, ip
 80031d6:	d10a      	bne.n	80031ee <cbvprintf_package+0x3e6>
 80031d8:	f10d 0820 	add.w	r8, sp, #32
 80031dc:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
 80031e0:	f1c5 0b01 	rsb	fp, r5, #1
 80031e4:	e039      	b.n	800325a <cbvprintf_package+0x452>
		buf0[3] = 0;
 80031e6:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
 80031e8:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
 80031ea:	70eb      	strb	r3, [r5, #3]
 80031ec:	e7e8      	b.n	80031c0 <cbvprintf_package+0x3b8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 80031ee:	f810 1b01 	ldrb.w	r1, [r0], #1
 80031f2:	060b      	lsls	r3, r1, #24
 80031f4:	d508      	bpl.n	8003208 <cbvprintf_package+0x400>
			if (BUF_OFFSET + 1 > len) {
 80031f6:	eb04 080e 	add.w	r8, r4, lr
 80031fa:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 80031fc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
 8003200:	f4ff af40 	bcc.w	8003084 <cbvprintf_package+0x27c>
			*buf++ = pos;
 8003204:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
 8003208:	f10c 0c01 	add.w	ip, ip, #1
 800320c:	e7e2      	b.n	80031d4 <cbvprintf_package+0x3cc>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 800320e:	f1ba 0f00 	cmp.w	sl, #0
 8003212:	d003      	beq.n	800321c <cbvprintf_package+0x414>
 8003214:	f998 2000 	ldrsb.w	r2, [r8]
 8003218:	2a00      	cmp	r2, #0
 800321a:	db1c      	blt.n	8003256 <cbvprintf_package+0x44e>
		if (rws_pos_en) {
 800321c:	9b01      	ldr	r3, [sp, #4]
 800321e:	bb03      	cbnz	r3, 8003262 <cbvprintf_package+0x45a>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8003220:	f898 2000 	ldrb.w	r2, [r8]
 8003224:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8003228:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
 800322c:	4638      	mov	r0, r7
 800322e:	f7fe f8ca 	bl	80013c6 <strlen>
 8003232:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
 8003234:	eb04 010b 	add.w	r1, r4, fp
 8003238:	4411      	add	r1, r2
 800323a:	428e      	cmp	r6, r1
 800323c:	f4ff af22 	bcc.w	8003084 <cbvprintf_package+0x27c>
		*buf++ = str_ptr_pos[i];
 8003240:	f898 1000 	ldrb.w	r1, [r8]
 8003244:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8003248:	4639      	mov	r1, r7
 800324a:	4620      	mov	r0, r4
 800324c:	9200      	str	r2, [sp, #0]
 800324e:	f016 f911 	bl	8019474 <memcpy>
		buf += size;
 8003252:	9a00      	ldr	r2, [sp, #0]
 8003254:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
 8003256:	f108 0801 	add.w	r8, r8, #1
 800325a:	45c1      	cmp	r9, r8
 800325c:	d1d7      	bne.n	800320e <cbvprintf_package+0x406>
	return BUF_OFFSET;
 800325e:	1b60      	subs	r0, r4, r5
 8003260:	e712      	b.n	8003088 <cbvprintf_package+0x280>
			size = 0;
 8003262:	2200      	movs	r2, #0
 8003264:	e7e6      	b.n	8003234 <cbvprintf_package+0x42c>
		return -EFAULT;
 8003266:	f06f 000d 	mvn.w	r0, #13
 800326a:	e70d      	b.n	8003088 <cbvprintf_package+0x280>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 800326c:	2907      	cmp	r1, #7
 800326e:	f63f ade7 	bhi.w	8002e40 <cbvprintf_package+0x38>
 8003272:	e707      	b.n	8003084 <cbvprintf_package+0x27c>

08003274 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8003274:	680b      	ldr	r3, [r1, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800327a:	4b01      	ldr	r3, [pc, #4]	; (8003280 <char_out+0xc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4718      	bx	r3
 8003280:	2000007c 	.word	0x2000007c

08003284 <__printk_hook_install>:
	_char_out = fn;
 8003284:	4b01      	ldr	r3, [pc, #4]	; (800328c <__printk_hook_install+0x8>)
 8003286:	6018      	str	r0, [r3, #0]
}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000007c 	.word	0x2000007c

08003290 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8003290:	b507      	push	{r0, r1, r2, lr}
 8003292:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8003294:	2100      	movs	r1, #0
{
 8003296:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
 8003298:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 800329a:	4803      	ldr	r0, [pc, #12]	; (80032a8 <vprintk+0x18>)
 800329c:	a901      	add	r1, sp, #4
 800329e:	f000 f8f5 	bl	800348c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80032a2:	b003      	add	sp, #12
 80032a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032a8:	08003275 	.word	0x08003275

080032ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80032ac:	b530      	push	{r4, r5, lr}
 80032ae:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 80032b0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 80032b4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 80032b6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 80032b8:	a901      	add	r1, sp, #4
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 80032bc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 80032be:	f000 f8e5 	bl	800348c <cbvprintf>

	if (ctx.count < ctx.max) {
 80032c2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 80032c6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 80032c8:	bfb8      	it	lt
 80032ca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 80032cc:	b005      	add	sp, #20
 80032ce:	bd30      	pop	{r4, r5, pc}
 80032d0:	08013b03 	.word	0x08013b03

080032d4 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
 80032d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
 80032d8:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
 80032da:	6944      	ldr	r4, [r0, #20]
	unsigned int m = tm->tm_mon + 1;
 80032dc:	6905      	ldr	r5, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
 80032de:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
 80032e0:	f240 736c 	movw	r3, #1900	; 0x76c
 80032e4:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
 80032e6:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
 80032e8:	18e4      	adds	r4, r4, r3
 80032ea:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
 80032ee:	2d02      	cmp	r5, #2
 80032f0:	bf8c      	ite	hi
 80032f2:	2300      	movhi	r3, #0
 80032f4:	2301      	movls	r3, #1
 80032f6:	1ae4      	subs	r4, r4, r3
 80032f8:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 80032fc:	2900      	cmp	r1, #0
{
 80032fe:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 8003300:	da56      	bge.n	80033b0 <timeutil_timegm64+0xdc>
 8003302:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
 8003306:	1820      	adds	r0, r4, r0
 8003308:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	f161 0100 	sbc.w	r1, r1, #0
 8003314:	f7fd fe08 	bl	8000f28 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <timeutil_timegm64+0xe8>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 800331a:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
 800331c:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 8003320:	e9d8 9000 	ldrd	r9, r0, [r8]
 8003324:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8003328:	233c      	movs	r3, #60	; 0x3c
 800332a:	17c6      	asrs	r6, r0, #31
 800332c:	fbc8 0603 	smlal	r0, r6, r8, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8003330:	2d02      	cmp	r5, #2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 8003332:	46b4      	mov	ip, r6
 8003334:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8003338:	bf8c      	ite	hi
 800333a:	f06f 0e02 	mvnhi.w	lr, #2
 800333e:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 8003342:	fb03 660c 	mla	r6, r3, ip, r6
 8003346:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 800334a:	ea4f 0394 	mov.w	r3, r4, lsr #2
 800334e:	f240 106d 	movw	r0, #365	; 0x16d
 8003352:	fb00 3304 	mla	r3, r0, r4, r3
 8003356:	443b      	add	r3, r7
 8003358:	f04f 0064 	mov.w	r0, #100	; 0x64
 800335c:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8003360:	eb05 000e 	add.w	r0, r5, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 8003364:	eba3 0304 	sub.w	r3, r3, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8003368:	f04f 0599 	mov.w	r5, #153	; 0x99
	return era * 146097 + (time_t)doe - 719468;
 800336c:	4c14      	ldr	r4, [pc, #80]	; (80033c0 <timeutil_timegm64+0xec>)
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 800336e:	fb05 f000 	mul.w	r0, r5, r0
 8003372:	f100 0002 	add.w	r0, r0, #2
 8003376:	f04f 0505 	mov.w	r5, #5
 800337a:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 800337e:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
 8003380:	fba2 0204 	umull	r0, r2, r2, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 8003384:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
 8003388:	181b      	adds	r3, r3, r0
 800338a:	480e      	ldr	r0, [pc, #56]	; (80033c4 <timeutil_timegm64+0xf0>)
 800338c:	fb04 2101 	mla	r1, r4, r1, r2
	time += 86400LL * ndays;
 8003390:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <timeutil_timegm64+0xf4>)
	return era * 146097 + (time_t)doe - 719468;
 8003392:	f141 0100 	adc.w	r1, r1, #0
 8003396:	1818      	adds	r0, r3, r0
	time += 86400LL * ndays;
 8003398:	fba0 0302 	umull	r0, r3, r0, r2
	return era * 146097 + (time_t)doe - 719468;
 800339c:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
 80033a0:	fb02 3101 	mla	r1, r2, r1, r3
 80033a4:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
 80033a8:	eb41 0106 	adc.w	r1, r1, r6
 80033ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 80033b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80033b4:	2300      	movs	r3, #0
 80033b6:	4620      	mov	r0, r4
 80033b8:	e7ac      	b.n	8003314 <timeutil_timegm64+0x40>
 80033ba:	bf00      	nop
 80033bc:	fffffe70 	.word	0xfffffe70
 80033c0:	00023ab1 	.word	0x00023ab1
 80033c4:	fff50594 	.word	0xfff50594
 80033c8:	00015180 	.word	0x00015180

080033cc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 80033cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 80033ce:	4e08      	ldr	r6, [pc, #32]	; (80033f0 <extract_decimal+0x24>)
 80033d0:	6802      	ldr	r2, [r0, #0]
{
 80033d2:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
 80033d4:	270a      	movs	r7, #10
	size_t val = 0;
 80033d6:	2000      	movs	r0, #0
 80033d8:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
 80033da:	3201      	adds	r2, #1
 80033dc:	780c      	ldrb	r4, [r1, #0]
 80033de:	5da5      	ldrb	r5, [r4, r6]
 80033e0:	076d      	lsls	r5, r5, #29
 80033e2:	d401      	bmi.n	80033e8 <extract_decimal+0x1c>
	}
	*str = sp;
 80033e4:	6019      	str	r1, [r3, #0]
	return val;
}
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 80033e8:	fb07 4000 	mla	r0, r7, r0, r4
 80033ec:	3830      	subs	r0, #48	; 0x30
 80033ee:	e7f3      	b.n	80033d8 <extract_decimal+0xc>
 80033f0:	0801cb91 	.word	0x0801cb91

080033f4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 80033f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f8:	4615      	mov	r5, r2
 80033fa:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80033fc:	78d3      	ldrb	r3, [r2, #3]
 80033fe:	4a22      	ldr	r2, [pc, #136]	; (8003488 <encode_uint+0x94>)
 8003400:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 8003404:	2b6f      	cmp	r3, #111	; 0x6f
{
 8003406:	4680      	mov	r8, r0
 8003408:	460f      	mov	r7, r1
 800340a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 800340e:	d029      	beq.n	8003464 <encode_uint+0x70>
 8003410:	d824      	bhi.n	800345c <encode_uint+0x68>
		return 16;
 8003412:	2b58      	cmp	r3, #88	; 0x58
 8003414:	bf14      	ite	ne
 8003416:	260a      	movne	r6, #10
 8003418:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 800341a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 800341e:	4632      	mov	r2, r6
 8003420:	2300      	movs	r3, #0
 8003422:	4640      	mov	r0, r8
 8003424:	4639      	mov	r1, r7
 8003426:	f7fd fdcf 	bl	8000fc8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 800342a:	2a09      	cmp	r2, #9
 800342c:	b2d4      	uxtb	r4, r2
 800342e:	d81e      	bhi.n	800346e <encode_uint+0x7a>
 8003430:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 8003432:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003434:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8003436:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800343a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 800343e:	d301      	bcc.n	8003444 <encode_uint+0x50>
 8003440:	45d1      	cmp	r9, sl
 8003442:	d811      	bhi.n	8003468 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8003444:	782b      	ldrb	r3, [r5, #0]
 8003446:	069b      	lsls	r3, r3, #26
 8003448:	d505      	bpl.n	8003456 <encode_uint+0x62>
		if (radix == 8) {
 800344a:	2e08      	cmp	r6, #8
 800344c:	d115      	bne.n	800347a <encode_uint+0x86>
			conv->altform_0 = true;
 800344e:	78ab      	ldrb	r3, [r5, #2]
 8003450:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 8003454:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 8003456:	4648      	mov	r0, r9
 8003458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 800345c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8003460:	2b70      	cmp	r3, #112	; 0x70
 8003462:	e7d7      	b.n	8003414 <encode_uint+0x20>
	switch (specifier) {
 8003464:	2608      	movs	r6, #8
 8003466:	e7d8      	b.n	800341a <encode_uint+0x26>
		value /= radix;
 8003468:	4680      	mov	r8, r0
 800346a:	460f      	mov	r7, r1
 800346c:	e7d7      	b.n	800341e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800346e:	f1bb 0f01 	cmp.w	fp, #1
 8003472:	bf0c      	ite	eq
 8003474:	3437      	addeq	r4, #55	; 0x37
 8003476:	3457      	addne	r4, #87	; 0x57
 8003478:	e7db      	b.n	8003432 <encode_uint+0x3e>
		} else if (radix == 16) {
 800347a:	2e10      	cmp	r6, #16
 800347c:	d1eb      	bne.n	8003456 <encode_uint+0x62>
			conv->altform_0c = true;
 800347e:	78ab      	ldrb	r3, [r5, #2]
 8003480:	f043 0310 	orr.w	r3, r3, #16
 8003484:	e7e6      	b.n	8003454 <encode_uint+0x60>
 8003486:	bf00      	nop
 8003488:	0801cb91 	.word	0x0801cb91

0800348c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 800348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003490:	4681      	mov	r9, r0
 8003492:	b09b      	sub	sp, #108	; 0x6c
 8003494:	468a      	mov	sl, r1
 8003496:	4615      	mov	r5, r2
 8003498:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800349a:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 800349c:	7828      	ldrb	r0, [r5, #0]
 800349e:	b910      	cbnz	r0, 80034a6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80034a0:	4630      	mov	r0, r6
 80034a2:	f000 bdc5 	b.w	8004030 <cbvprintf+0xba4>
			OUTC(*fp++);
 80034a6:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 80034a8:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80034aa:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 80034ac:	d006      	beq.n	80034bc <cbvprintf+0x30>
			OUTC(*fp++);
 80034ae:	4651      	mov	r1, sl
			OUTC('%');
 80034b0:	47c8      	blx	r9
 80034b2:	2800      	cmp	r0, #0
 80034b4:	f2c0 85bc 	blt.w	8004030 <cbvprintf+0xba4>
 80034b8:	3601      	adds	r6, #1
		if (bps == NULL) {
 80034ba:	e226      	b.n	800390a <cbvprintf+0x47e>
		} state = {
 80034bc:	2218      	movs	r2, #24
 80034be:	2100      	movs	r1, #0
 80034c0:	a80c      	add	r0, sp, #48	; 0x30
 80034c2:	f015 ffff 	bl	80194c4 <memset>
	if (*sp == '%') {
 80034c6:	786b      	ldrb	r3, [r5, #1]
 80034c8:	2b25      	cmp	r3, #37	; 0x25
 80034ca:	d059      	beq.n	8003580 <cbvprintf+0xf4>
 80034cc:	1c6a      	adds	r2, r5, #1
 80034ce:	4617      	mov	r7, r2
		switch (*sp) {
 80034d0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80034d4:	2b2b      	cmp	r3, #43	; 0x2b
 80034d6:	f000 808b 	beq.w	80035f0 <cbvprintf+0x164>
 80034da:	d879      	bhi.n	80035d0 <cbvprintf+0x144>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	f000 808c 	beq.w	80035fa <cbvprintf+0x16e>
 80034e2:	2b23      	cmp	r3, #35	; 0x23
 80034e4:	f000 808e 	beq.w	8003604 <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
 80034e8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80034ec:	f003 0244 	and.w	r2, r3, #68	; 0x44
 80034f0:	2a44      	cmp	r2, #68	; 0x44
 80034f2:	d103      	bne.n	80034fc <cbvprintf+0x70>
		conv->flag_zero = false;
 80034f4:	f36f 1386 	bfc	r3, #6, #1
 80034f8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 80034fc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003500:	970a      	str	r7, [sp, #40]	; 0x28
 8003502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003506:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 800350a:	783b      	ldrb	r3, [r7, #0]
 800350c:	2b2a      	cmp	r3, #42	; 0x2a
 800350e:	d17e      	bne.n	800360e <cbvprintf+0x182>
		conv->width_star = true;
 8003510:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 800351c:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 800351e:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	2a2e      	cmp	r2, #46	; 0x2e
 8003524:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8003528:	bf0c      	ite	eq
 800352a:	2101      	moveq	r1, #1
 800352c:	2100      	movne	r1, #0
 800352e:	f361 0241 	bfi	r2, r1, #1, #1
 8003532:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 8003536:	d10b      	bne.n	8003550 <cbvprintf+0xc4>
	++sp;
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 800353c:	785a      	ldrb	r2, [r3, #1]
 800353e:	2a2a      	cmp	r2, #42	; 0x2a
 8003540:	d17b      	bne.n	800363a <cbvprintf+0x1ae>
		conv->prec_star = true;
 8003542:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8003546:	f042 0204 	orr.w	r2, r2, #4
 800354a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 800354e:	3302      	adds	r3, #2
	switch (*sp) {
 8003550:	461a      	mov	r2, r3
 8003552:	f812 0b01 	ldrb.w	r0, [r2], #1
 8003556:	286c      	cmp	r0, #108	; 0x6c
 8003558:	f000 80cf 	beq.w	80036fa <cbvprintf+0x26e>
 800355c:	d87d      	bhi.n	800365a <cbvprintf+0x1ce>
 800355e:	2868      	cmp	r0, #104	; 0x68
 8003560:	f000 8084 	beq.w	800366c <cbvprintf+0x1e0>
 8003564:	286a      	cmp	r0, #106	; 0x6a
 8003566:	f000 80d2 	beq.w	800370e <cbvprintf+0x282>
 800356a:	284c      	cmp	r0, #76	; 0x4c
 800356c:	f000 80d6 	beq.w	800371c <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
 8003570:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8003574:	f36f 02c6 	bfc	r2, #3, #4
 8003578:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 800357c:	461a      	mov	r2, r3
 800357e:	e080      	b.n	8003682 <cbvprintf+0x1f6>
		conv->specifier = *sp++;
 8003580:	1caa      	adds	r2, r5, #2
 8003582:	9202      	str	r2, [sp, #8]
 8003584:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 8003588:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800358c:	07df      	lsls	r7, r3, #31
 800358e:	f140 8170 	bpl.w	8003872 <cbvprintf+0x3e6>
			width = va_arg(ap, int);
 8003592:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 8003596:	f1bb 0f00 	cmp.w	fp, #0
 800359a:	da07      	bge.n	80035ac <cbvprintf+0x120>
				conv->flag_dash = true;
 800359c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80035a0:	f042 0204 	orr.w	r2, r2, #4
 80035a4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 80035a8:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
 80035ac:	0758      	lsls	r0, r3, #29
 80035ae:	f140 8169 	bpl.w	8003884 <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
 80035b2:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 80035b6:	f1b8 0f00 	cmp.w	r8, #0
 80035ba:	f280 8168 	bge.w	800388e <cbvprintf+0x402>
				conv->prec_present = false;
 80035be:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80035c2:	f36f 0341 	bfc	r3, #1, #1
 80035c6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 80035ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80035ce:	e15e      	b.n	800388e <cbvprintf+0x402>
		switch (*sp) {
 80035d0:	2b2d      	cmp	r3, #45	; 0x2d
 80035d2:	d006      	beq.n	80035e2 <cbvprintf+0x156>
 80035d4:	2b30      	cmp	r3, #48	; 0x30
 80035d6:	d187      	bne.n	80034e8 <cbvprintf+0x5c>
			conv->flag_zero = true;
 80035d8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80035dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e0:	e003      	b.n	80035ea <cbvprintf+0x15e>
			conv->flag_dash = true;
 80035e2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80035e6:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 80035ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 80035ee:	e76e      	b.n	80034ce <cbvprintf+0x42>
			conv->flag_plus = true;
 80035f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80035f4:	f043 0308 	orr.w	r3, r3, #8
 80035f8:	e7f7      	b.n	80035ea <cbvprintf+0x15e>
			conv->flag_space = true;
 80035fa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80035fe:	f043 0310 	orr.w	r3, r3, #16
 8003602:	e7f2      	b.n	80035ea <cbvprintf+0x15e>
			conv->flag_hash = true;
 8003604:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003608:	f043 0320 	orr.w	r3, r3, #32
 800360c:	e7ed      	b.n	80035ea <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
 800360e:	a80a      	add	r0, sp, #40	; 0x28
 8003610:	f7ff fedc 	bl	80033cc <extract_decimal>
	if (sp != wp) {
 8003614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003616:	42bb      	cmp	r3, r7
 8003618:	d081      	beq.n	800351e <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
 800361a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
 800361e:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8003620:	f3c1 0240 	ubfx	r2, r1, #1, #1
 8003624:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8003628:	0052      	lsls	r2, r2, #1
 800362a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800362e:	f001 017d 	and.w	r1, r1, #125	; 0x7d
 8003632:	430a      	orrs	r2, r1
 8003634:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8003638:	e771      	b.n	800351e <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
 800363a:	a80a      	add	r0, sp, #40	; 0x28
 800363c:	f7ff fec6 	bl	80033cc <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8003640:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 8003644:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 8003646:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800364a:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 800364e:	f360 0341 	bfi	r3, r0, #1, #1
 8003652:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 8003656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003658:	e77a      	b.n	8003550 <cbvprintf+0xc4>
	switch (*sp) {
 800365a:	2874      	cmp	r0, #116	; 0x74
 800365c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 8003660:	d059      	beq.n	8003716 <cbvprintf+0x28a>
 8003662:	287a      	cmp	r0, #122	; 0x7a
 8003664:	d184      	bne.n	8003570 <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
 8003666:	460b      	mov	r3, r1
 8003668:	2106      	movs	r1, #6
 800366a:	e041      	b.n	80036f0 <cbvprintf+0x264>
		if (*++sp == 'h') {
 800366c:	7859      	ldrb	r1, [r3, #1]
 800366e:	2968      	cmp	r1, #104	; 0x68
 8003670:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 8003674:	d13a      	bne.n	80036ec <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
 8003676:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
 8003678:	f362 01c6 	bfi	r1, r2, #3, #4
 800367c:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
 8003680:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
 8003682:	4613      	mov	r3, r2
 8003684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003688:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 800368a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 800368c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 8003690:	f200 80c5 	bhi.w	800381e <cbvprintf+0x392>
 8003694:	2a57      	cmp	r2, #87	; 0x57
 8003696:	d84e      	bhi.n	8003736 <cbvprintf+0x2aa>
 8003698:	2a41      	cmp	r2, #65	; 0x41
 800369a:	d004      	beq.n	80036a6 <cbvprintf+0x21a>
 800369c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	f200 80bc 	bhi.w	800381e <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
 80036a6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 80036aa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 80036ae:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 80036b0:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 80036b4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 80036b8:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
 80036bc:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
 80036c0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 80036c4:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
 80036c8:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 80036cc:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 80036ce:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
 80036d2:	b2cb      	uxtb	r3, r1
 80036d4:	f100 80cb 	bmi.w	800386e <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
 80036d8:	f003 0278 	and.w	r2, r3, #120	; 0x78
 80036dc:	2a18      	cmp	r2, #24
 80036de:	f040 809b 	bne.w	8003818 <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
 80036e2:	f36f 03c6 	bfc	r3, #3, #4
 80036e6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80036ea:	e082      	b.n	80037f2 <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
 80036ec:	460b      	mov	r3, r1
 80036ee:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
 80036f0:	f361 03c6 	bfi	r3, r1, #3, #4
 80036f4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80036f8:	e7c3      	b.n	8003682 <cbvprintf+0x1f6>
		if (*++sp == 'l') {
 80036fa:	7859      	ldrb	r1, [r3, #1]
 80036fc:	296c      	cmp	r1, #108	; 0x6c
 80036fe:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 8003702:	d101      	bne.n	8003708 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
 8003704:	2204      	movs	r2, #4
 8003706:	e7b7      	b.n	8003678 <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
 8003708:	460b      	mov	r3, r1
 800370a:	2103      	movs	r1, #3
 800370c:	e7f0      	b.n	80036f0 <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
 800370e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8003712:	2105      	movs	r1, #5
 8003714:	e7ec      	b.n	80036f0 <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
 8003716:	460b      	mov	r3, r1
 8003718:	2107      	movs	r1, #7
 800371a:	e7e9      	b.n	80036f0 <cbvprintf+0x264>
		conv->unsupported = true;
 800371c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8003720:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8003724:	f023 0302 	bic.w	r3, r3, #2
 8003728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 8003734:	e7a5      	b.n	8003682 <cbvprintf+0x1f6>
	switch (conv->specifier) {
 8003736:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800373a:	2b20      	cmp	r3, #32
 800373c:	d86f      	bhi.n	800381e <cbvprintf+0x392>
 800373e:	a101      	add	r1, pc, #4	; (adr r1, 8003744 <cbvprintf+0x2b8>)
 8003740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003744:	080037f7 	.word	0x080037f7
 8003748:	0800381f 	.word	0x0800381f
 800374c:	0800381f 	.word	0x0800381f
 8003750:	0800381f 	.word	0x0800381f
 8003754:	0800381f 	.word	0x0800381f
 8003758:	0800381f 	.word	0x0800381f
 800375c:	0800381f 	.word	0x0800381f
 8003760:	0800381f 	.word	0x0800381f
 8003764:	0800381f 	.word	0x0800381f
 8003768:	080036a7 	.word	0x080036a7
 800376c:	0800381f 	.word	0x0800381f
 8003770:	080037f7 	.word	0x080037f7
 8003774:	080037c9 	.word	0x080037c9
 8003778:	080036a7 	.word	0x080036a7
 800377c:	080036a7 	.word	0x080036a7
 8003780:	080036a7 	.word	0x080036a7
 8003784:	0800381f 	.word	0x0800381f
 8003788:	080037c9 	.word	0x080037c9
 800378c:	0800381f 	.word	0x0800381f
 8003790:	0800381f 	.word	0x0800381f
 8003794:	0800381f 	.word	0x0800381f
 8003798:	0800381f 	.word	0x0800381f
 800379c:	0800382d 	.word	0x0800382d
 80037a0:	080037f7 	.word	0x080037f7
 80037a4:	08003851 	.word	0x08003851
 80037a8:	0800381f 	.word	0x0800381f
 80037ac:	0800381f 	.word	0x0800381f
 80037b0:	08003851 	.word	0x08003851
 80037b4:	0800381f 	.word	0x0800381f
 80037b8:	080037f7 	.word	0x080037f7
 80037bc:	0800381f 	.word	0x0800381f
 80037c0:	0800381f 	.word	0x0800381f
 80037c4:	080037f7 	.word	0x080037f7
		conv->specifier_cat = SPECIFIER_SINT;
 80037c8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80037cc:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 80037ce:	f361 0302 	bfi	r3, r1, #0, #3
 80037d2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 80037d6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80037da:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80037de:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 80037e0:	bf02      	ittt	eq
 80037e2:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 80037e6:	f041 0101 	orreq.w	r1, r1, #1
 80037ea:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 80037ee:	2a63      	cmp	r2, #99	; 0x63
 80037f0:	d005      	beq.n	80037fe <cbvprintf+0x372>
	bool unsupported = false;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e006      	b.n	8003804 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
 80037f6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80037fa:	2102      	movs	r1, #2
 80037fc:	e7e7      	b.n	80037ce <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80037fe:	3b00      	subs	r3, #0
 8003800:	bf18      	it	ne
 8003802:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 8003804:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8003808:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800380c:	430b      	orrs	r3, r1
 800380e:	f363 0241 	bfi	r2, r3, #1, #1
 8003812:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 8003816:	e6b7      	b.n	8003588 <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
 8003818:	f013 0f38 	tst.w	r3, #56	; 0x38
 800381c:	d0e9      	beq.n	80037f2 <cbvprintf+0x366>
			conv->invalid = true;
 800381e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800382a:	e7e2      	b.n	80037f2 <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
 800382c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8003830:	2203      	movs	r2, #3
 8003832:	f362 0302 	bfi	r3, r2, #0, #3
 8003836:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 800383a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800383e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003842:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 8003846:	f1dc 0300 	rsbs	r3, ip, #0
 800384a:	eb43 030c 	adc.w	r3, r3, ip
 800384e:	e7d9      	b.n	8003804 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 8003850:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8003854:	2203      	movs	r2, #3
 8003856:	f362 0302 	bfi	r3, r2, #0, #3
 800385a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 800385e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8003862:	f013 0f78 	tst.w	r3, #120	; 0x78
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	e7ca      	b.n	8003804 <cbvprintf+0x378>
			unsupported = true;
 800386e:	2301      	movs	r3, #1
 8003870:	e7c8      	b.n	8003804 <cbvprintf+0x378>
		} else if (conv->width_present) {
 8003872:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 8003876:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8003878:	bfb4      	ite	lt
 800387a:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 800387e:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
 8003882:	e693      	b.n	80035ac <cbvprintf+0x120>
		} else if (conv->prec_present) {
 8003884:	0799      	lsls	r1, r3, #30
 8003886:	f57f aea0 	bpl.w	80035ca <cbvprintf+0x13e>
			precision = conv->prec_value;
 800388a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 800388e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 8003892:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8003894:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8003898:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 800389c:	f003 0207 	and.w	r2, r3, #7
 80038a0:	2a04      	cmp	r2, #4
 80038a2:	d109      	bne.n	80038b8 <cbvprintf+0x42c>
		    && !conv->prec_present) {
 80038a4:	078a      	lsls	r2, r1, #30
 80038a6:	d407      	bmi.n	80038b8 <cbvprintf+0x42c>
			if (conv->specifier_a) {
 80038a8:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 80038ac:	2a00      	cmp	r2, #0
 80038ae:	bfb4      	ite	lt
 80038b0:	f04f 080d 	movlt.w	r8, #13
 80038b4:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 80038b8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80038bc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80038be:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80038c2:	d137      	bne.n	8003934 <cbvprintf+0x4a8>
			switch (length_mod) {
 80038c4:	1ecb      	subs	r3, r1, #3
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d821      	bhi.n	800390e <cbvprintf+0x482>
 80038ca:	e8df f003 	tbb	[pc, r3]
 80038ce:	0903      	.short	0x0903
 80038d0:	2009      	.short	0x2009
 80038d2:	20          	.byte	0x20
 80038d3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 80038d4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 80038d8:	17da      	asrs	r2, r3, #31
 80038da:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 80038de:	e006      	b.n	80038ee <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
 80038e0:	3407      	adds	r4, #7
 80038e2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 80038e6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80038ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 80038ee:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80038f2:	07bb      	lsls	r3, r7, #30
 80038f4:	d056      	beq.n	80039a4 <cbvprintf+0x518>
			OUTS(sp, fp);
 80038f6:	9b02      	ldr	r3, [sp, #8]
 80038f8:	462a      	mov	r2, r5
 80038fa:	4651      	mov	r1, sl
 80038fc:	4648      	mov	r0, r9
 80038fe:	f010 f9d7 	bl	8013cb0 <outs>
 8003902:	2800      	cmp	r0, #0
 8003904:	f2c0 8394 	blt.w	8004030 <cbvprintf+0xba4>
 8003908:	4406      	add	r6, r0
			while (pad_len-- > 0) {
 800390a:	9d02      	ldr	r5, [sp, #8]
 800390c:	e5c6      	b.n	800349c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 800390e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8003912:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8003914:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8003918:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 800391c:	d105      	bne.n	800392a <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
 800391e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 8003922:	930c      	str	r3, [sp, #48]	; 0x30
 8003924:	2300      	movs	r3, #0
 8003926:	930d      	str	r3, [sp, #52]	; 0x34
 8003928:	e7e1      	b.n	80038ee <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
 800392a:	2902      	cmp	r1, #2
 800392c:	d1df      	bne.n	80038ee <cbvprintf+0x462>
				value->sint = (short)value->sint;
 800392e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8003932:	e7d1      	b.n	80038d8 <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8003934:	2b02      	cmp	r3, #2
 8003936:	d123      	bne.n	8003980 <cbvprintf+0x4f4>
			switch (length_mod) {
 8003938:	1ecb      	subs	r3, r1, #3
 800393a:	2b04      	cmp	r3, #4
 800393c:	d813      	bhi.n	8003966 <cbvprintf+0x4da>
 800393e:	e8df f003 	tbb	[pc, r3]
 8003942:	0a03      	.short	0x0a03
 8003944:	120a      	.short	0x120a
 8003946:	12          	.byte	0x12
 8003947:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	920c      	str	r2, [sp, #48]	; 0x30
 800394c:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 800394e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8003950:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 8003952:	4604      	mov	r4, r0
 8003954:	e7cb      	b.n	80038ee <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
 8003956:	1de0      	adds	r0, r4, #7
 8003958:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 800395c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8003960:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
 8003964:	e7f5      	b.n	8003952 <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
 8003966:	f854 3b04 	ldr.w	r3, [r4], #4
 800396a:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 800396c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 8003974:	d0d3      	beq.n	800391e <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
 8003976:	2902      	cmp	r1, #2
 8003978:	d1b9      	bne.n	80038ee <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
 800397a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800397e:	e7d0      	b.n	8003922 <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
 8003980:	2b04      	cmp	r3, #4
 8003982:	d109      	bne.n	8003998 <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
 8003984:	1de3      	adds	r3, r4, #7
 8003986:	f023 0307 	bic.w	r3, r3, #7
 800398a:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003996:	e7aa      	b.n	80038ee <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8003998:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 800399a:	bf04      	itt	eq
 800399c:	f854 3b04 	ldreq.w	r3, [r4], #4
 80039a0:	930c      	streq	r3, [sp, #48]	; 0x30
 80039a2:	e7a4      	b.n	80038ee <cbvprintf+0x462>
		switch (conv->specifier) {
 80039a4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80039a8:	2a78      	cmp	r2, #120	; 0x78
 80039aa:	d8ae      	bhi.n	800390a <cbvprintf+0x47e>
 80039ac:	2a57      	cmp	r2, #87	; 0x57
 80039ae:	f200 808c 	bhi.w	8003aca <cbvprintf+0x63e>
 80039b2:	2a25      	cmp	r2, #37	; 0x25
 80039b4:	f000 80d4 	beq.w	8003b60 <cbvprintf+0x6d4>
 80039b8:	2a24      	cmp	r2, #36	; 0x24
 80039ba:	d9a6      	bls.n	800390a <cbvprintf+0x47e>
 80039bc:	2a41      	cmp	r2, #65	; 0x41
 80039be:	d003      	beq.n	80039c8 <cbvprintf+0x53c>
 80039c0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d8a0      	bhi.n	800390a <cbvprintf+0x47e>
	} u = {
 80039c8:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f2c0 81b7 	blt.w	8003d40 <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
 80039d2:	0738      	lsls	r0, r7, #28
 80039d4:	f100 81b6 	bmi.w	8003d44 <cbvprintf+0x8b8>
		*sign = ' ';
 80039d8:	f017 0710 	ands.w	r7, r7, #16
 80039dc:	bf18      	it	ne
 80039de:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 80039e0:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 80039e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e8:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 80039ec:	2d00      	cmp	r5, #0
 80039ee:	f040 81ab 	bne.w	8003d48 <cbvprintf+0x8bc>
 80039f2:	ea51 0003 	orrs.w	r0, r1, r3
 80039f6:	bf14      	ite	ne
 80039f8:	2001      	movne	r0, #1
 80039fa:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 80039fc:	02db      	lsls	r3, r3, #11
 80039fe:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8003a02:	02c9      	lsls	r1, r1, #11
		c = 'f';
 8003a04:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
 8003a06:	ea45 0e01 	orr.w	lr, r5, r1
 8003a0a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
 8003a0e:	bf08      	it	eq
 8003a10:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
 8003a12:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 8003a16:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 8003a1a:	f000 8203 	beq.w	8003e24 <cbvprintf+0x998>
		if (is_subnormal) {
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	f040 81cb 	bne.w	8003dba <cbvprintf+0x92e>
		fract |= BIT_63;
 8003a24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003a28:	f04f 0c00 	mov.w	ip, #0
 8003a2c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8003a30:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
 8003a34:	9109      	str	r1, [sp, #36]	; 0x24
 8003a36:	4663      	mov	r3, ip
		fract *= 5U;
 8003a38:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
 8003a3c:	f115 0f02 	cmn.w	r5, #2
 8003a40:	f2c0 81c2 	blt.w	8003dc8 <cbvprintf+0x93c>
 8003a44:	f1bc 0f00 	cmp.w	ip, #0
 8003a48:	d001      	beq.n	8003a4e <cbvprintf+0x5c2>
 8003a4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 8003a4e:	2d00      	cmp	r5, #0
		fract += 2;
 8003a50:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
 8003a54:	f300 81cd 	bgt.w	8003df2 <cbvprintf+0x966>
	fract >>= (4 - expo);
 8003a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a5a:	9908      	ldr	r1, [sp, #32]
 8003a5c:	f1c5 0c04 	rsb	ip, r5, #4
 8003a60:	351c      	adds	r5, #28
 8003a62:	fa00 f505 	lsl.w	r5, r0, r5
 8003a66:	f1ac 0e20 	sub.w	lr, ip, #32
 8003a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8003a6e:	fa20 fe0e 	lsr.w	lr, r0, lr
 8003a72:	4329      	orrs	r1, r5
 8003a74:	ea41 010e 	orr.w	r1, r1, lr
 8003a78:	fa20 f00c 	lsr.w	r0, r0, ip
 8003a7c:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 8003a80:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8003a84:	2947      	cmp	r1, #71	; 0x47
 8003a86:	f040 81d4 	bne.w	8003e32 <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
 8003a8a:	1cdd      	adds	r5, r3, #3
 8003a8c:	db02      	blt.n	8003a94 <cbvprintf+0x608>
 8003a8e:	4598      	cmp	r8, r3
 8003a90:	f280 81cb 	bge.w	8003e2a <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
 8003a94:	3a02      	subs	r2, #2
			if (precision > 0) {
 8003a96:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 8003a9a:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 8003a9c:	dd01      	ble.n	8003aa2 <cbvprintf+0x616>
				precision--;
 8003a9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 8003aa2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8003aa6:	0688      	lsls	r0, r1, #26
 8003aa8:	f100 81c3 	bmi.w	8003e32 <cbvprintf+0x9a6>
 8003aac:	f1b8 0f00 	cmp.w	r8, #0
 8003ab0:	bfd4      	ite	le
 8003ab2:	2100      	movle	r1, #0
 8003ab4:	2101      	movgt	r1, #1
	if (c == 'f') {
 8003ab6:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 8003ab8:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 8003aba:	f040 81bc 	bne.w	8003e36 <cbvprintf+0x9aa>
		if (decimals < 0) {
 8003abe:	eb13 0508 	adds.w	r5, r3, r8
 8003ac2:	f140 81ba 	bpl.w	8003e3a <cbvprintf+0x9ae>
			decimals = 0;
 8003ac6:	2500      	movs	r5, #0
 8003ac8:	e1ba      	b.n	8003e40 <cbvprintf+0x9b4>
		switch (conv->specifier) {
 8003aca:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	f63f af1b 	bhi.w	800390a <cbvprintf+0x47e>
 8003ad4:	a001      	add	r0, pc, #4	; (adr r0, 8003adc <cbvprintf+0x650>)
 8003ad6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003ce3 	.word	0x08003ce3
 8003ae0:	0800390b 	.word	0x0800390b
 8003ae4:	0800390b 	.word	0x0800390b
 8003ae8:	0800390b 	.word	0x0800390b
 8003aec:	0800390b 	.word	0x0800390b
 8003af0:	0800390b 	.word	0x0800390b
 8003af4:	0800390b 	.word	0x0800390b
 8003af8:	0800390b 	.word	0x0800390b
 8003afc:	0800390b 	.word	0x0800390b
 8003b00:	080039c9 	.word	0x080039c9
 8003b04:	0800390b 	.word	0x0800390b
 8003b08:	08003b8d 	.word	0x08003b8d
 8003b0c:	08003c83 	.word	0x08003c83
 8003b10:	080039c9 	.word	0x080039c9
 8003b14:	080039c9 	.word	0x080039c9
 8003b18:	080039c9 	.word	0x080039c9
 8003b1c:	0800390b 	.word	0x0800390b
 8003b20:	08003c83 	.word	0x08003c83
 8003b24:	0800390b 	.word	0x0800390b
 8003b28:	0800390b 	.word	0x0800390b
 8003b2c:	0800390b 	.word	0x0800390b
 8003b30:	0800390b 	.word	0x0800390b
 8003b34:	08003d19 	.word	0x08003d19
 8003b38:	08003ce3 	.word	0x08003ce3
 8003b3c:	08003ce7 	.word	0x08003ce7
 8003b40:	0800390b 	.word	0x0800390b
 8003b44:	0800390b 	.word	0x0800390b
 8003b48:	08003b67 	.word	0x08003b67
 8003b4c:	0800390b 	.word	0x0800390b
 8003b50:	08003ce3 	.word	0x08003ce3
 8003b54:	0800390b 	.word	0x0800390b
 8003b58:	0800390b 	.word	0x0800390b
 8003b5c:	08003ce3 	.word	0x08003ce3
			OUTC('%');
 8003b60:	4651      	mov	r1, sl
 8003b62:	4610      	mov	r0, r2
 8003b64:	e4a4      	b.n	80034b0 <cbvprintf+0x24>
			if (precision >= 0) {
 8003b66:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8003b6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 8003b6c:	db09      	blt.n	8003b82 <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
 8003b6e:	4641      	mov	r1, r8
 8003b70:	4610      	mov	r0, r2
 8003b72:	9203      	str	r2, [sp, #12]
 8003b74:	f015 fd08 	bl	8019588 <strnlen>
				len = strlen(bps);
 8003b78:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 8003b7a:	2700      	movs	r7, #0
			bpe = bps + len;
 8003b7c:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 8003b7e:	b962      	cbnz	r2, 8003b9a <cbvprintf+0x70e>
 8003b80:	e6c3      	b.n	800390a <cbvprintf+0x47e>
				len = strlen(bps);
 8003b82:	4610      	mov	r0, r2
 8003b84:	9203      	str	r2, [sp, #12]
 8003b86:	f7fd fc1e 	bl	80013c6 <strlen>
 8003b8a:	e7f5      	b.n	8003b78 <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8003b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b8e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
 8003b92:	2700      	movs	r7, #0
			bpe = buf + 1;
 8003b94:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
 8003b98:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 8003b9a:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 8003b9c:	b107      	cbz	r7, 8003ba0 <cbvprintf+0x714>
			nj_len += 1U;
 8003b9e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8003ba0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 8003ba4:	06c1      	lsls	r1, r0, #27
 8003ba6:	f140 8237 	bpl.w	8004018 <cbvprintf+0xb8c>
			nj_len += 2U;
 8003baa:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 8003bac:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 8003bae:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 8003bb0:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8003bb2:	bf44      	itt	mi
 8003bb4:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 8003bb6:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 8003bb8:	f1bb 0f00 	cmp.w	fp, #0
 8003bbc:	dd23      	ble.n	8003c06 <cbvprintf+0x77a>
			width -= (int)nj_len;
 8003bbe:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 8003bc2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003bc6:	0759      	lsls	r1, r3, #29
 8003bc8:	f3c3 0880 	ubfx	r8, r3, #2, #1
 8003bcc:	d41b      	bmi.n	8003c06 <cbvprintf+0x77a>
				if (conv->flag_zero) {
 8003bce:	0658      	lsls	r0, r3, #25
 8003bd0:	f140 8236 	bpl.w	8004040 <cbvprintf+0xbb4>
					if (sign != 0) {
 8003bd4:	2f00      	cmp	r7, #0
 8003bd6:	f000 8236 	beq.w	8004046 <cbvprintf+0xbba>
						OUTC(sign);
 8003bda:	4651      	mov	r1, sl
 8003bdc:	4638      	mov	r0, r7
 8003bde:	9203      	str	r2, [sp, #12]
 8003be0:	47c8      	blx	r9
 8003be2:	2800      	cmp	r0, #0
 8003be4:	f2c0 8224 	blt.w	8004030 <cbvprintf+0xba4>
 8003be8:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
 8003bea:	4647      	mov	r7, r8
						OUTC(sign);
 8003bec:	3601      	adds	r6, #1
					pad = '0';
 8003bee:	f04f 0830 	mov.w	r8, #48	; 0x30
 8003bf2:	445e      	add	r6, fp
 8003bf4:	465b      	mov	r3, fp
				while (width-- > 0) {
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	eba6 000b 	sub.w	r0, r6, fp
 8003bfc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003c00:	f300 820e 	bgt.w	8004020 <cbvprintf+0xb94>
 8003c04:	4606      	mov	r6, r0
		if (sign != 0) {
 8003c06:	b147      	cbz	r7, 8003c1a <cbvprintf+0x78e>
			OUTC(sign);
 8003c08:	4651      	mov	r1, sl
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	9203      	str	r2, [sp, #12]
 8003c0e:	47c8      	blx	r9
 8003c10:	2800      	cmp	r0, #0
 8003c12:	f2c0 820d 	blt.w	8004030 <cbvprintf+0xba4>
 8003c16:	9a03      	ldr	r2, [sp, #12]
 8003c18:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 8003c1a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8003c1e:	0659      	lsls	r1, r3, #25
 8003c20:	f140 8265 	bpl.w	80040ee <cbvprintf+0xc62>
			if (conv->specifier_a) {
 8003c24:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	eba6 0602 	sub.w	r6, r6, r2
 8003c2e:	f280 8219 	bge.w	8004064 <cbvprintf+0xbd8>
 8003c32:	4617      	mov	r7, r2
 8003c34:	46b8      	mov	r8, r7
 8003c36:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 8003c38:	f817 0b01 	ldrb.w	r0, [r7], #1
 8003c3c:	2870      	cmp	r0, #112	; 0x70
 8003c3e:	f040 8205 	bne.w	800404c <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
 8003c42:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003c44:	461e      	mov	r6, r3
 8003c46:	441f      	add	r7, r3
 8003c48:	1bbb      	subs	r3, r7, r6
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f300 8248 	bgt.w	80040e0 <cbvprintf+0xc54>
			OUTS(cp, bpe);
 8003c50:	462b      	mov	r3, r5
 8003c52:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 8003c54:	4651      	mov	r1, sl
 8003c56:	4648      	mov	r0, r9
 8003c58:	f010 f82a 	bl	8013cb0 <outs>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	f2c0 81e7 	blt.w	8004030 <cbvprintf+0xba4>
 8003c62:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 8003c64:	4606      	mov	r6, r0
 8003c66:	4483      	add	fp, r0
		while (width > 0) {
 8003c68:	ebab 0306 	sub.w	r3, fp, r6
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f77f ae4c 	ble.w	800390a <cbvprintf+0x47e>
			OUTC(' ');
 8003c72:	4651      	mov	r1, sl
 8003c74:	2020      	movs	r0, #32
 8003c76:	47c8      	blx	r9
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	f2c0 81d9 	blt.w	8004030 <cbvprintf+0xba4>
 8003c7e:	3601      	adds	r6, #1
			--width;
 8003c80:	e7f2      	b.n	8003c68 <cbvprintf+0x7dc>
			if (conv->flag_plus) {
 8003c82:	073d      	lsls	r5, r7, #28
 8003c84:	d42b      	bmi.n	8003cde <cbvprintf+0x852>
				sign = ' ';
 8003c86:	f017 0710 	ands.w	r7, r7, #16
 8003c8a:	bf18      	it	ne
 8003c8c:	2720      	movne	r7, #32
			sint = value->sint;
 8003c8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da05      	bge.n	8003ca2 <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
 8003c96:	4252      	negs	r2, r2
 8003c98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003c9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 8003ca0:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8003ca2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	aa0e      	add	r2, sp, #56	; 0x38
 8003caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cae:	ab13      	add	r3, sp, #76	; 0x4c
 8003cb0:	f7ff fba0 	bl	80033f4 <encode_uint>
 8003cb4:	4602      	mov	r2, r0
			if (precision >= 0) {
 8003cb6:	f1b8 0f00 	cmp.w	r8, #0
 8003cba:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 8003cbe:	f6ff af5e 	blt.w	8003b7e <cbvprintf+0x6f2>
				conv->flag_zero = false;
 8003cc2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8003cc6:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 8003cc8:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 8003ccc:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8003cce:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8003cd2:	f67f af54 	bls.w	8003b7e <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
 8003cd6:	eba8 0303 	sub.w	r3, r8, r3
 8003cda:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cdc:	e74f      	b.n	8003b7e <cbvprintf+0x6f2>
				sign = '+';
 8003cde:	272b      	movs	r7, #43	; 0x2b
 8003ce0:	e7d5      	b.n	8003c8e <cbvprintf+0x802>
		switch (conv->specifier) {
 8003ce2:	2700      	movs	r7, #0
 8003ce4:	e7dd      	b.n	8003ca2 <cbvprintf+0x816>
			if (value->ptr != NULL) {
 8003ce6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	f000 8191 	beq.w	8004010 <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003cee:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	aa0e      	add	r2, sp, #56	; 0x38
 8003cf6:	ab13      	add	r3, sp, #76	; 0x4c
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f7ff fb7b 	bl	80033f4 <encode_uint>
				conv->altform_0c = true;
 8003cfe:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8003d02:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003d06:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8003d0a:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003d0e:	4602      	mov	r2, r0
				conv->altform_0c = true;
 8003d10:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8003d14:	2700      	movs	r7, #0
				goto prec_int_pad0;
 8003d16:	e7ce      	b.n	8003cb6 <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
 8003d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 8003d1a:	2907      	cmp	r1, #7
 8003d1c:	f63f adf5 	bhi.w	800390a <cbvprintf+0x47e>
 8003d20:	e8df f001 	tbb	[pc, r1]
 8003d24:	0c06040c 	.word	0x0c06040c
 8003d28:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8003d2c:	701e      	strb	r6, [r3, #0]
		break;
 8003d2e:	e5ec      	b.n	800390a <cbvprintf+0x47e>
		*(short *)dp = (short)count;
 8003d30:	801e      	strh	r6, [r3, #0]
		break;
 8003d32:	e5ea      	b.n	800390a <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
 8003d34:	17f2      	asrs	r2, r6, #31
 8003d36:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 8003d3a:	e5e6      	b.n	800390a <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8003d3c:	601e      	str	r6, [r3, #0]
		break;
 8003d3e:	e5e4      	b.n	800390a <cbvprintf+0x47e>
		*sign = '-';
 8003d40:	272d      	movs	r7, #45	; 0x2d
 8003d42:	e64d      	b.n	80039e0 <cbvprintf+0x554>
		*sign = '+';
 8003d44:	272b      	movs	r7, #43	; 0x2b
 8003d46:	e64b      	b.n	80039e0 <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8003d48:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8003d4c:	4285      	cmp	r5, r0
 8003d4e:	d131      	bne.n	8003db4 <cbvprintf+0x928>
			if (isupper((int)c)) {
 8003d50:	3201      	adds	r2, #1
 8003d52:	48b9      	ldr	r0, [pc, #740]	; (8004038 <cbvprintf+0xbac>)
 8003d54:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
 8003d56:	430b      	orrs	r3, r1
 8003d58:	5c12      	ldrb	r2, [r2, r0]
 8003d5a:	f002 0203 	and.w	r2, r2, #3
 8003d5e:	d11b      	bne.n	8003d98 <cbvprintf+0x90c>
			if (isupper((int)c)) {
 8003d60:	2a01      	cmp	r2, #1
 8003d62:	d111      	bne.n	8003d88 <cbvprintf+0x8fc>
				*buf++ = 'I';
 8003d64:	2349      	movs	r3, #73	; 0x49
 8003d66:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 8003d6a:	234e      	movs	r3, #78	; 0x4e
 8003d6c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 8003d70:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 8003d72:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
 8003d76:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003d7a:	f36f 1386 	bfc	r3, #6, #1
 8003d7e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
 8003d82:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
 8003d86:	e707      	b.n	8003b98 <cbvprintf+0x70c>
				*buf++ = 'i';
 8003d88:	2369      	movs	r3, #105	; 0x69
 8003d8a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8003d8e:	236e      	movs	r3, #110	; 0x6e
 8003d90:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 8003d94:	2366      	movs	r3, #102	; 0x66
 8003d96:	e7ec      	b.n	8003d72 <cbvprintf+0x8e6>
			if (isupper((int)c)) {
 8003d98:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 8003d9a:	bf07      	ittee	eq
 8003d9c:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 8003d9e:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 8003da0:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 8003da2:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 8003da4:	bf0c      	ite	eq
 8003da6:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8003daa:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 8003dae:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 8003db2:	e7de      	b.n	8003d72 <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8003db4:	2000      	movs	r0, #0
 8003db6:	e621      	b.n	80039fc <cbvprintf+0x570>
				expo--;
 8003db8:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8003dba:	1849      	adds	r1, r1, r1
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	dafa      	bge.n	8003db8 <cbvprintf+0x92c>
 8003dc2:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8003dc6:	e62d      	b.n	8003a24 <cbvprintf+0x598>
			fract >>= 1;
 8003dc8:	0840      	lsrs	r0, r0, #1
 8003dca:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8003dce:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8003dd0:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 8003dd4:	46ac      	mov	ip, r5
			expo++;
 8003dd6:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8003dda:	d2f5      	bcs.n	8003dc8 <cbvprintf+0x93c>
		fract *= 5U;
 8003ddc:	fb0e f501 	mul.w	r5, lr, r1
 8003de0:	fba0 010e 	umull	r0, r1, r0, lr
 8003de4:	4429      	add	r1, r5
		decexp--;
 8003de6:	3b01      	subs	r3, #1
		expo++;
 8003de8:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 8003dec:	f04f 0c01 	mov.w	ip, #1
 8003df0:	e624      	b.n	8003a3c <cbvprintf+0x5b0>
		fract += 2;
 8003df2:	3102      	adds	r1, #2
 8003df4:	f140 0000 	adc.w	r0, r0, #0
 8003df8:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
 8003dfc:	a808      	add	r0, sp, #32
 8003dfe:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8003e02:	f00f ff26 	bl	8013c52 <_ldiv5>
		decexp++;
 8003e06:	9b04      	ldr	r3, [sp, #16]
 8003e08:	9a03      	ldr	r2, [sp, #12]
 8003e0a:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
 8003e0e:	3d01      	subs	r5, #1
		decexp++;
 8003e10:	3301      	adds	r3, #1
			fract <<= 1;
 8003e12:	1849      	adds	r1, r1, r1
 8003e14:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 8003e16:	2800      	cmp	r0, #0
			expo--;
 8003e18:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 8003e1c:	daf9      	bge.n	8003e12 <cbvprintf+0x986>
 8003e1e:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8003e22:	e614      	b.n	8003a4e <cbvprintf+0x5c2>
 8003e24:	2300      	movs	r3, #0
 8003e26:	461d      	mov	r5, r3
 8003e28:	e616      	b.n	8003a58 <cbvprintf+0x5cc>
			precision -= decexp;
 8003e2a:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 8003e2e:	2266      	movs	r2, #102	; 0x66
 8003e30:	e637      	b.n	8003aa2 <cbvprintf+0x616>
	bool prune_zero = false;
 8003e32:	2100      	movs	r1, #0
 8003e34:	e63f      	b.n	8003ab6 <cbvprintf+0x62a>
		decimals = precision + 1;
 8003e36:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
 8003e3a:	2d10      	cmp	r5, #16
 8003e3c:	bfa8      	it	ge
 8003e3e:	2510      	movge	r5, #16
 8003e40:	2110      	movs	r1, #16
 8003e42:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
 8003e44:	2000      	movs	r0, #0
 8003e46:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003e4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
 8003e4e:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
 8003e52:	b9a5      	cbnz	r5, 8003e7e <cbvprintf+0x9f2>
	fract += round;
 8003e54:	9d08      	ldr	r5, [sp, #32]
 8003e56:	1949      	adds	r1, r1, r5
 8003e58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003e5a:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
 8003e5e:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8003e62:	d21b      	bcs.n	8003e9c <cbvprintf+0xa10>
	fract += round;
 8003e64:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
 8003e68:	2a66      	cmp	r2, #102	; 0x66
 8003e6a:	f040 8099 	bne.w	8003fa0 <cbvprintf+0xb14>
		if (decexp > 0) {
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	dc23      	bgt.n	8003eba <cbvprintf+0xa2e>
			*buf++ = '0';
 8003e72:	2130      	movs	r1, #48	; 0x30
 8003e74:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 8003e78:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8003e7c:	e02f      	b.n	8003ede <cbvprintf+0xa52>
	*v >>= 1;
 8003e7e:	0849      	lsrs	r1, r1, #1
 8003e80:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8003e84:	0840      	lsrs	r0, r0, #1
 8003e86:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
 8003e8a:	a80a      	add	r0, sp, #40	; 0x28
 8003e8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e90:	3d01      	subs	r5, #1
 8003e92:	f00f fede 	bl	8013c52 <_ldiv5>
 8003e96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 8003e9a:	e7d8      	b.n	8003e4e <cbvprintf+0x9c2>
	*v >>= 1;
 8003e9c:	0849      	lsrs	r1, r1, #1
 8003e9e:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
 8003ea2:	a808      	add	r0, sp, #32
	*v >>= 1;
 8003ea4:	086d      	lsrs	r5, r5, #1
 8003ea6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003eaa:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
 8003eae:	f00f fed0 	bl	8013c52 <_ldiv5>
		decexp++;
 8003eb2:	9b05      	ldr	r3, [sp, #20]
 8003eb4:	9a04      	ldr	r2, [sp, #16]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	e7d6      	b.n	8003e68 <cbvprintf+0x9dc>
	char *buf = bps;
 8003eba:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 8003ebc:	9907      	ldr	r1, [sp, #28]
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	dd0b      	ble.n	8003eda <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
 8003ec2:	a907      	add	r1, sp, #28
 8003ec4:	a808      	add	r0, sp, #32
 8003ec6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003eca:	f00f feda 	bl	8013c82 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8003ece:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
 8003ed0:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	9a04      	ldr	r2, [sp, #16]
 8003ed8:	d1f0      	bne.n	8003ebc <cbvprintf+0xa30>
			conv->pad0_value = decexp;
 8003eda:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 8003edc:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 8003ede:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8003ee2:	0689      	lsls	r1, r1, #26
 8003ee4:	d402      	bmi.n	8003eec <cbvprintf+0xa60>
 8003ee6:	f1b8 0f00 	cmp.w	r8, #0
 8003eea:	dd1d      	ble.n	8003f28 <cbvprintf+0xa9c>
			*buf++ = '.';
 8003eec:	212e      	movs	r1, #46	; 0x2e
 8003eee:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 8003ef2:	b19b      	cbz	r3, 8003f1c <cbvprintf+0xa90>
 8003ef4:	f1b8 0f00 	cmp.w	r8, #0
 8003ef8:	dd16      	ble.n	8003f28 <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
 8003efa:	4259      	negs	r1, r3
 8003efc:	4541      	cmp	r1, r8
 8003efe:	bfa8      	it	ge
 8003f00:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 8003f02:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 8003f06:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 8003f08:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 8003f0a:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
 8003f0e:	bfd4      	ite	le
 8003f10:	2100      	movle	r1, #0
 8003f12:	2101      	movgt	r1, #1
 8003f14:	f361 1045 	bfi	r0, r1, #5, #1
 8003f18:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 8003f1c:	f1b8 0f00 	cmp.w	r8, #0
 8003f20:	dd02      	ble.n	8003f28 <cbvprintf+0xa9c>
 8003f22:	9907      	ldr	r1, [sp, #28]
 8003f24:	2900      	cmp	r1, #0
 8003f26:	dc56      	bgt.n	8003fd6 <cbvprintf+0xb4a>
	if (prune_zero) {
 8003f28:	9903      	ldr	r1, [sp, #12]
 8003f2a:	2900      	cmp	r1, #0
 8003f2c:	d163      	bne.n	8003ff6 <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
 8003f2e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 8003f32:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8003f36:	2945      	cmp	r1, #69	; 0x45
 8003f38:	d121      	bne.n	8003f7e <cbvprintf+0xaf2>
		if (decexp < 0) {
 8003f3a:	2b00      	cmp	r3, #0
		*buf++ = c;
 8003f3c:	4629      	mov	r1, r5
			decexp = -decexp;
 8003f3e:	bfb8      	it	lt
 8003f40:	425b      	neglt	r3, r3
		*buf++ = c;
 8003f42:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 8003f46:	bfb4      	ite	lt
 8003f48:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 8003f4a:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 8003f4c:	2b63      	cmp	r3, #99	; 0x63
 8003f4e:	706a      	strb	r2, [r5, #1]
 8003f50:	dd09      	ble.n	8003f66 <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
 8003f52:	2064      	movs	r0, #100	; 0x64
 8003f54:	fbb3 f2f0 	udiv	r2, r3, r0
 8003f58:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8003f5c:	1ce9      	adds	r1, r5, #3
 8003f5e:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
 8003f62:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8003f66:	200a      	movs	r0, #10
 8003f68:	460d      	mov	r5, r1
 8003f6a:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 8003f6e:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8003f72:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8003f76:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8003f78:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 8003f7c:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 8003f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	dc43      	bgt.n	800400c <cbvprintf+0xb80>
 8003f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bfd4      	ite	le
 8003f8a:	2300      	movle	r3, #0
 8003f8c:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8003f8e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8003f92:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8003f96:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 8003f98:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 8003f9c:	702b      	strb	r3, [r5, #0]
	return bps;
 8003f9e:	e5fb      	b.n	8003b98 <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
 8003fa0:	a907      	add	r1, sp, #28
 8003fa2:	a808      	add	r0, sp, #32
 8003fa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fa8:	f00f fe6b 	bl	8013c82 <_get_digit>
		if (*buf++ != '0') {
 8003fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
 8003fb0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
 8003fb4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 8003fb8:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8003fba:	bf18      	it	ne
 8003fbc:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 8003fc0:	0688      	lsls	r0, r1, #26
 8003fc2:	d402      	bmi.n	8003fca <cbvprintf+0xb3e>
 8003fc4:	f1b8 0f00 	cmp.w	r8, #0
 8003fc8:	dd12      	ble.n	8003ff0 <cbvprintf+0xb64>
			*buf++ = '.';
 8003fca:	212e      	movs	r1, #46	; 0x2e
 8003fcc:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 8003fd0:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 8003fd4:	e7a2      	b.n	8003f1c <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
 8003fd6:	a907      	add	r1, sp, #28
 8003fd8:	a808      	add	r0, sp, #32
 8003fda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fde:	f00f fe50 	bl	8013c82 <_get_digit>
		precision--;
 8003fe2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003fe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 8003fea:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 8003fee:	e795      	b.n	8003f1c <cbvprintf+0xa90>
		if (*buf++ != '0') {
 8003ff0:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8003ff4:	e798      	b.n	8003f28 <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004000:	2930      	cmp	r1, #48	; 0x30
 8004002:	d0fa      	beq.n	8003ffa <cbvprintf+0xb6e>
		if (*buf != '.') {
 8004004:	292e      	cmp	r1, #46	; 0x2e
 8004006:	bf18      	it	ne
 8004008:	4605      	movne	r5, r0
 800400a:	e792      	b.n	8003f32 <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
 800400c:	2301      	movs	r3, #1
 800400e:	e7be      	b.n	8003f8e <cbvprintf+0xb02>
			bpe = bps + 5;
 8004010:	4d0a      	ldr	r5, [pc, #40]	; (800403c <cbvprintf+0xbb0>)
		char sign = 0;
 8004012:	4607      	mov	r7, r0
			bps = "(nil)";
 8004014:	1f6a      	subs	r2, r5, #5
 8004016:	e5c0      	b.n	8003b9a <cbvprintf+0x70e>
		} else if (conv->altform_0) {
 8004018:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 800401a:	bf48      	it	mi
 800401c:	3301      	addmi	r3, #1
 800401e:	e5c5      	b.n	8003bac <cbvprintf+0x720>
					OUTC(pad);
 8004020:	4651      	mov	r1, sl
 8004022:	4640      	mov	r0, r8
 8004024:	9203      	str	r2, [sp, #12]
 8004026:	47c8      	blx	r9
 8004028:	2800      	cmp	r0, #0
 800402a:	9a03      	ldr	r2, [sp, #12]
 800402c:	f6bf ade2 	bge.w	8003bf4 <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
 8004030:	b01b      	add	sp, #108	; 0x6c
 8004032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004036:	bf00      	nop
 8004038:	0801cb90 	.word	0x0801cb90
 800403c:	0801b4df 	.word	0x0801b4df
				char pad = ' ';
 8004040:	f04f 0820 	mov.w	r8, #32
 8004044:	e5d5      	b.n	8003bf2 <cbvprintf+0x766>
					pad = '0';
 8004046:	f04f 0830 	mov.w	r8, #48	; 0x30
 800404a:	e5d2      	b.n	8003bf2 <cbvprintf+0x766>
					OUTC(*cp++);
 800404c:	4651      	mov	r1, sl
 800404e:	47c8      	blx	r9
 8004050:	2800      	cmp	r0, #0
 8004052:	f6bf adef 	bge.w	8003c34 <cbvprintf+0x7a8>
 8004056:	e7eb      	b.n	8004030 <cbvprintf+0xba4>
					OUTC(*cp++);
 8004058:	4651      	mov	r1, sl
 800405a:	9203      	str	r2, [sp, #12]
 800405c:	47c8      	blx	r9
 800405e:	2800      	cmp	r0, #0
 8004060:	9a03      	ldr	r2, [sp, #12]
 8004062:	dbe5      	blt.n	8004030 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
 8004064:	7810      	ldrb	r0, [r2, #0]
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <cbvprintf+0xcb8>)
 8004068:	5cc3      	ldrb	r3, [r0, r3]
 800406a:	075b      	lsls	r3, r3, #29
 800406c:	4617      	mov	r7, r2
 800406e:	eb06 0802 	add.w	r8, r6, r2
 8004072:	f102 0201 	add.w	r2, r2, #1
 8004076:	d4ef      	bmi.n	8004058 <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
 8004078:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 800407c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 800407e:	0699      	lsls	r1, r3, #26
 8004080:	d407      	bmi.n	8004092 <cbvprintf+0xc06>
 8004082:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 8004084:	2e00      	cmp	r6, #0
 8004086:	eba8 0206 	sub.w	r2, r8, r6
 800408a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800408e:	dc0f      	bgt.n	80040b0 <cbvprintf+0xc24>
 8004090:	4690      	mov	r8, r2
				if (*cp == '.') {
 8004092:	7838      	ldrb	r0, [r7, #0]
 8004094:	282e      	cmp	r0, #46	; 0x2e
 8004096:	d108      	bne.n	80040aa <cbvprintf+0xc1e>
					OUTC(*cp++);
 8004098:	4651      	mov	r1, sl
 800409a:	47c8      	blx	r9
						OUTC('0');
 800409c:	2800      	cmp	r0, #0
 800409e:	dbc7      	blt.n	8004030 <cbvprintf+0xba4>
					while (pad_len-- > 0) {
 80040a0:	2e00      	cmp	r6, #0
						OUTC('0');
 80040a2:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 80040a6:	dc09      	bgt.n	80040bc <cbvprintf+0xc30>
					OUTC(*cp++);
 80040a8:	3701      	adds	r7, #1
 80040aa:	eba8 0607 	sub.w	r6, r8, r7
 80040ae:	e00e      	b.n	80040ce <cbvprintf+0xc42>
						OUTC('0');
 80040b0:	4651      	mov	r1, sl
 80040b2:	2030      	movs	r0, #48	; 0x30
 80040b4:	47c8      	blx	r9
 80040b6:	2800      	cmp	r0, #0
 80040b8:	dae4      	bge.n	8004084 <cbvprintf+0xbf8>
 80040ba:	e7b9      	b.n	8004030 <cbvprintf+0xba4>
						OUTC('0');
 80040bc:	4651      	mov	r1, sl
 80040be:	2030      	movs	r0, #48	; 0x30
 80040c0:	47c8      	blx	r9
 80040c2:	3e01      	subs	r6, #1
 80040c4:	e7ea      	b.n	800409c <cbvprintf+0xc10>
					OUTC(*cp++);
 80040c6:	4651      	mov	r1, sl
 80040c8:	47c8      	blx	r9
 80040ca:	2800      	cmp	r0, #0
 80040cc:	dbb0      	blt.n	8004030 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
 80040ce:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <cbvprintf+0xcb8>)
 80040d0:	46b8      	mov	r8, r7
 80040d2:	19f3      	adds	r3, r6, r7
 80040d4:	f817 0b01 	ldrb.w	r0, [r7], #1
 80040d8:	5c12      	ldrb	r2, [r2, r0]
 80040da:	0752      	lsls	r2, r2, #29
 80040dc:	d4f3      	bmi.n	80040c6 <cbvprintf+0xc3a>
 80040de:	e5b0      	b.n	8003c42 <cbvprintf+0x7b6>
				OUTC('0');
 80040e0:	4651      	mov	r1, sl
 80040e2:	2030      	movs	r0, #48	; 0x30
 80040e4:	47c8      	blx	r9
 80040e6:	2800      	cmp	r0, #0
 80040e8:	dba2      	blt.n	8004030 <cbvprintf+0xba4>
 80040ea:	3601      	adds	r6, #1
 80040ec:	e5ac      	b.n	8003c48 <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
 80040ee:	06d8      	lsls	r0, r3, #27
 80040f0:	d401      	bmi.n	80040f6 <cbvprintf+0xc6a>
 80040f2:	0719      	lsls	r1, r3, #28
 80040f4:	d507      	bpl.n	8004106 <cbvprintf+0xc7a>
				OUTC('0');
 80040f6:	4651      	mov	r1, sl
 80040f8:	2030      	movs	r0, #48	; 0x30
 80040fa:	9203      	str	r2, [sp, #12]
 80040fc:	47c8      	blx	r9
 80040fe:	2800      	cmp	r0, #0
 8004100:	db96      	blt.n	8004030 <cbvprintf+0xba4>
 8004102:	9a03      	ldr	r2, [sp, #12]
 8004104:	3601      	adds	r6, #1
			if (conv->altform_0c) {
 8004106:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800410a:	06db      	lsls	r3, r3, #27
 800410c:	d508      	bpl.n	8004120 <cbvprintf+0xc94>
				OUTC(conv->specifier);
 800410e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8004112:	9203      	str	r2, [sp, #12]
 8004114:	4651      	mov	r1, sl
 8004116:	47c8      	blx	r9
 8004118:	2800      	cmp	r0, #0
 800411a:	db89      	blt.n	8004030 <cbvprintf+0xba4>
 800411c:	9a03      	ldr	r2, [sp, #12]
 800411e:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
 8004120:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8004122:	4437      	add	r7, r6
 8004124:	1bbb      	subs	r3, r7, r6
 8004126:	2b00      	cmp	r3, #0
 8004128:	dc01      	bgt.n	800412e <cbvprintf+0xca2>
			OUTS(bps, bpe);
 800412a:	462b      	mov	r3, r5
 800412c:	e592      	b.n	8003c54 <cbvprintf+0x7c8>
				OUTC('0');
 800412e:	4651      	mov	r1, sl
 8004130:	2030      	movs	r0, #48	; 0x30
 8004132:	9203      	str	r2, [sp, #12]
 8004134:	47c8      	blx	r9
 8004136:	2800      	cmp	r0, #0
 8004138:	f6ff af7a 	blt.w	8004030 <cbvprintf+0xba4>
 800413c:	9a03      	ldr	r2, [sp, #12]
 800413e:	3601      	adds	r6, #1
 8004140:	e7f0      	b.n	8004124 <cbvprintf+0xc98>
 8004142:	bf00      	nop
 8004144:	0801cb91 	.word	0x0801cb91

08004148 <stm32wl_init>:
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
#if defined(CORE_CM0PLUS)
  SET_BIT(FLASH->C2ACR, FLASH_C2ACR_ICEN);
#else
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <stm32wl_init+0x34>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004150:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004158:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 800415a:	f04f 0210 	mov.w	r2, #16
 800415e:	f3ef 8311 	mrs	r3, BASEPRI
 8004162:	f382 8812 	msr	BASEPRI_MAX, r2
 8004166:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8004172:	4b03      	ldr	r3, [pc, #12]	; (8004180 <stm32wl_init+0x38>)
 8004174:	4a03      	ldr	r2, [pc, #12]	; (8004184 <stm32wl_init+0x3c>)
 8004176:	601a      	str	r2, [r3, #0]

	return 0;
}
 8004178:	2000      	movs	r0, #0
 800417a:	4770      	bx	lr
 800417c:	58004000 	.word	0x58004000
 8004180:	2000022c 	.word	0x2000022c
 8004184:	003d0900 	.word	0x003d0900

08004188 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8004188:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 800418a:	4910      	ldr	r1, [pc, #64]	; (80041cc <enable_logger+0x44>)
 800418c:	4810      	ldr	r0, [pc, #64]	; (80041d0 <enable_logger+0x48>)
{
 800418e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8004190:	2200      	movs	r2, #0
 8004192:	f014 fff1 	bl	8019178 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8004196:	4d0f      	ldr	r5, [pc, #60]	; (80041d4 <enable_logger+0x4c>)
 8004198:	490f      	ldr	r1, [pc, #60]	; (80041d8 <enable_logger+0x50>)
 800419a:	2200      	movs	r2, #0
 800419c:	2300      	movs	r3, #0
 800419e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041a2:	2400      	movs	r4, #0
 80041a4:	230e      	movs	r3, #14
 80041a6:	e9cd 3403 	strd	r3, r4, [sp, #12]
 80041aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <enable_logger+0x54>)
 80041b0:	9400      	str	r4, [sp, #0]
 80041b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80041b6:	4628      	mov	r0, r5
 80041b8:	f00b fecc 	bl	800ff54 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 80041bc:	4908      	ldr	r1, [pc, #32]	; (80041e0 <enable_logger+0x58>)
 80041be:	4628      	mov	r0, r5
 80041c0:	f014 fe28 	bl	8018e14 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 80041c4:	4620      	mov	r0, r4
 80041c6:	b009      	add	sp, #36	; 0x24
 80041c8:	bd30      	pop	{r4, r5, pc}
 80041ca:	bf00      	nop
 80041cc:	080041e5 	.word	0x080041e5
 80041d0:	200009f0 	.word	0x200009f0
 80041d4:	20000a28 	.word	0x20000a28
 80041d8:	20008700 	.word	0x20008700
 80041dc:	08004409 	.word	0x08004409
 80041e0:	0801b4e0 	.word	0x0801b4e0

080041e4 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80041e4:	4801      	ldr	r0, [pc, #4]	; (80041ec <log_process_thread_timer_expiry_fn+0x8>)
 80041e6:	f00b bfe7 	b.w	80101b8 <z_impl_k_sem_give>
 80041ea:	bf00      	nop
 80041ec:	20000424 	.word	0x20000424

080041f0 <log_format_func_t_get>:
}
 80041f0:	4b01      	ldr	r3, [pc, #4]	; (80041f8 <log_format_func_t_get+0x8>)
 80041f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80041f6:	4770      	bx	lr
 80041f8:	0801a190 	.word	0x0801a190

080041fc <log_init>:
{
 80041fc:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <log_init+0x4c>)
 8004200:	f3bf 8f5b 	dmb	ish
 8004204:	e853 5f00 	ldrex	r5, [r3]
 8004208:	1c6a      	adds	r2, r5, #1
 800420a:	e843 2100 	strex	r1, r2, [r3]
 800420e:	2900      	cmp	r1, #0
 8004210:	d1f8      	bne.n	8004204 <log_init+0x8>
 8004212:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8004216:	b92d      	cbnz	r5, 8004224 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8004218:	4c0c      	ldr	r4, [pc, #48]	; (800424c <log_init+0x50>)
 800421a:	4e0d      	ldr	r6, [pc, #52]	; (8004250 <log_init+0x54>)
 800421c:	1b36      	subs	r6, r6, r4
 800421e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8004220:	42b5      	cmp	r5, r6
 8004222:	db00      	blt.n	8004226 <log_init+0x2a>
}
 8004224:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8004226:	7b23      	ldrb	r3, [r4, #12]
 8004228:	b153      	cbz	r3, 8004240 <log_init+0x44>
			if (backend->api->init != NULL) {
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	b10b      	cbz	r3, 8004234 <log_init+0x38>
				backend->api->init(backend);
 8004230:	4620      	mov	r0, r4
 8004232:	4798      	blx	r3
			log_backend_enable(backend,
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	2204      	movs	r2, #4
 8004238:	6819      	ldr	r1, [r3, #0]
 800423a:	4620      	mov	r0, r4
 800423c:	f000 f992 	bl	8004564 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8004240:	3501      	adds	r5, #1
 8004242:	3410      	adds	r4, #16
 8004244:	e7ec      	b.n	8004220 <log_init+0x24>
 8004246:	bf00      	nop
 8004248:	20000fdc 	.word	0x20000fdc
 800424c:	0801a048 	.word	0x0801a048
 8004250:	0801a058 	.word	0x0801a058

08004254 <z_log_notify_backend_enabled>:
{
 8004254:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8004256:	4c04      	ldr	r4, [pc, #16]	; (8004268 <z_log_notify_backend_enabled+0x14>)
 8004258:	7823      	ldrb	r3, [r4, #0]
 800425a:	b913      	cbnz	r3, 8004262 <z_log_notify_backend_enabled+0xe>
 800425c:	4803      	ldr	r0, [pc, #12]	; (800426c <z_log_notify_backend_enabled+0x18>)
 800425e:	f00b ffab 	bl	80101b8 <z_impl_k_sem_give>
	backend_attached = true;
 8004262:	2301      	movs	r3, #1
 8004264:	7023      	strb	r3, [r4, #0]
}
 8004266:	bd10      	pop	{r4, pc}
 8004268:	2000256e 	.word	0x2000256e
 800426c:	20000424 	.word	0x20000424

08004270 <z_log_dropped>:
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <z_log_dropped+0x34>)
 8004272:	f3bf 8f5b 	dmb	ish
 8004276:	e853 2f00 	ldrex	r2, [r3]
 800427a:	3201      	adds	r2, #1
 800427c:	e843 2100 	strex	r1, r2, [r3]
 8004280:	2900      	cmp	r1, #0
 8004282:	d1f8      	bne.n	8004276 <z_log_dropped+0x6>
 8004284:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 8004288:	b158      	cbz	r0, 80042a2 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800428a:	f3bf 8f5b 	dmb	ish
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <z_log_dropped+0x38>)
 8004290:	e853 2f00 	ldrex	r2, [r3]
 8004294:	3a01      	subs	r2, #1
 8004296:	e843 2100 	strex	r1, r2, [r3]
 800429a:	2900      	cmp	r1, #0
 800429c:	d1f8      	bne.n	8004290 <z_log_dropped+0x20>
 800429e:	f3bf 8f5b 	dmb	ish
}
 80042a2:	4770      	bx	lr
 80042a4:	20000fd8 	.word	0x20000fd8
 80042a8:	20000fd4 	.word	0x20000fd4

080042ac <z_log_dropped_read_and_clear>:
}
 80042ac:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <z_log_dropped_read_and_clear+0x1c>)
 80042b0:	f3bf 8f5b 	dmb	ish
 80042b4:	4602      	mov	r2, r0
 80042b6:	e853 0f00 	ldrex	r0, [r3]
 80042ba:	e843 2100 	strex	r1, r2, [r3]
 80042be:	2900      	cmp	r1, #0
 80042c0:	d1f9      	bne.n	80042b6 <z_log_dropped_read_and_clear+0xa>
 80042c2:	f3bf 8f5b 	dmb	ish
 80042c6:	4770      	bx	lr
 80042c8:	20000fd8 	.word	0x20000fd8

080042cc <dropped_notify>:
{
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80042ce:	f7ff ffed 	bl	80042ac <z_log_dropped_read_and_clear>
 80042d2:	4c0a      	ldr	r4, [pc, #40]	; (80042fc <dropped_notify+0x30>)
 80042d4:	4d0a      	ldr	r5, [pc, #40]	; (8004300 <dropped_notify+0x34>)
 80042d6:	1b2d      	subs	r5, r5, r4
 80042d8:	4607      	mov	r7, r0
 80042da:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80042dc:	2600      	movs	r6, #0
 80042de:	42ae      	cmp	r6, r5
 80042e0:	db00      	blt.n	80042e4 <dropped_notify+0x18>
}
 80042e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 80042e4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80042e6:	795b      	ldrb	r3, [r3, #5]
 80042e8:	b12b      	cbz	r3, 80042f6 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	b113      	cbz	r3, 80042f6 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 80042f0:	4639      	mov	r1, r7
 80042f2:	4620      	mov	r0, r4
 80042f4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80042f6:	3601      	adds	r6, #1
 80042f8:	3410      	adds	r4, #16
 80042fa:	e7f0      	b.n	80042de <dropped_notify+0x12>
 80042fc:	0801a048 	.word	0x0801a048
 8004300:	0801a058 	.word	0x0801a058

08004304 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8004304:	4901      	ldr	r1, [pc, #4]	; (800430c <z_log_msg2_init+0x8>)
 8004306:	4802      	ldr	r0, [pc, #8]	; (8004310 <z_log_msg2_init+0xc>)
 8004308:	f00f bd9d 	b.w	8013e46 <mpsc_pbuf_init>
 800430c:	0801a19c 	.word	0x0801a19c
 8004310:	20000fe0 	.word	0x20000fe0

08004314 <log_core_init>:
	panic_mode = false;
 8004314:	4a08      	ldr	r2, [pc, #32]	; (8004338 <log_core_init+0x24>)
{
 8004316:	b508      	push	{r3, lr}
	panic_mode = false;
 8004318:	2300      	movs	r3, #0
 800431a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 800431c:	4a07      	ldr	r2, [pc, #28]	; (800433c <log_core_init+0x28>)
 800431e:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <log_core_init+0x2c>)
 8004322:	4a08      	ldr	r2, [pc, #32]	; (8004344 <log_core_init+0x30>)
 8004324:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8004326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800432a:	f000 faff 	bl	800492c <log_output_timestamp_freq_set>
}
 800432e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
 8004332:	f7ff bfe7 	b.w	8004304 <z_log_msg2_init>
 8004336:	bf00      	nop
 8004338:	2000256f 	.word	0x2000256f
 800433c:	20000fd8 	.word	0x20000fd8
 8004340:	20000080 	.word	0x20000080
 8004344:	080140f3 	.word	0x080140f3

08004348 <z_log_msg2_alloc>:
{
 8004348:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 800434a:	2200      	movs	r2, #0
 800434c:	4801      	ldr	r0, [pc, #4]	; (8004354 <z_log_msg2_alloc+0xc>)
 800434e:	2300      	movs	r3, #0
 8004350:	f00f bd9a 	b.w	8013e88 <mpsc_pbuf_alloc>
 8004354:	20000fe0 	.word	0x20000fe0

08004358 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 8004358:	4801      	ldr	r0, [pc, #4]	; (8004360 <z_log_msg2_claim+0x8>)
 800435a:	f00f be2b 	b.w	8013fb4 <mpsc_pbuf_claim>
 800435e:	bf00      	nop
 8004360:	20000fe0 	.word	0x20000fe0

08004364 <z_log_msg2_free>:
{
 8004364:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8004366:	4801      	ldr	r0, [pc, #4]	; (800436c <z_log_msg2_free+0x8>)
 8004368:	f00f be70 	b.w	801404c <mpsc_pbuf_free>
 800436c:	20000fe0 	.word	0x20000fe0

08004370 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <z_log_msg2_pending+0x8>)
 8004372:	f00f be9f 	b.w	80140b4 <mpsc_pbuf_is_pending>
 8004376:	bf00      	nop
 8004378:	20000fe0 	.word	0x20000fe0

0800437c <z_impl_log_process>:
	if (!backend_attached && !bypass) {
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <z_impl_log_process+0x78>)
 800437e:	781b      	ldrb	r3, [r3, #0]
{
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
 8004386:	b903      	cbnz	r3, 800438a <z_impl_log_process+0xe>
 8004388:	b388      	cbz	r0, 80043ee <z_impl_log_process+0x72>
	msg = get_msg();
 800438a:	f00f febf 	bl	801410c <get_msg>
	if (msg.msg) {
 800438e:	4606      	mov	r6, r0
 8004390:	b118      	cbz	r0, 800439a <z_impl_log_process+0x1e>
		if (!bypass) {
 8004392:	b16d      	cbz	r5, 80043b0 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
 8004394:	4630      	mov	r0, r6
 8004396:	f7ff ffe5 	bl	8004364 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
 800439a:	b92d      	cbnz	r5, 80043a8 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
 800439c:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	dd01      	ble.n	80043a8 <z_impl_log_process+0x2c>
		dropped_notify();
 80043a4:	f7ff ff92 	bl	80042cc <dropped_notify>
}
 80043a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
 80043ac:	f7ff bfe0 	b.w	8004370 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <z_impl_log_process+0x80>)
 80043b2:	f3bf 8f5b 	dmb	ish
 80043b6:	e853 2f00 	ldrex	r2, [r3]
 80043ba:	3a01      	subs	r2, #1
 80043bc:	e843 2100 	strex	r1, r2, [r3]
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d1f8      	bne.n	80043b6 <z_impl_log_process+0x3a>
 80043c4:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
 80043c8:	4c0d      	ldr	r4, [pc, #52]	; (8004400 <z_impl_log_process+0x84>)
 80043ca:	4f0e      	ldr	r7, [pc, #56]	; (8004404 <z_impl_log_process+0x88>)
 80043cc:	1b3f      	subs	r7, r7, r4
 80043ce:	113f      	asrs	r7, r7, #4
 80043d0:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
 80043d2:	45b8      	cmp	r8, r7
 80043d4:	dade      	bge.n	8004394 <z_impl_log_process+0x18>
	return backend->cb->active;
 80043d6:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
 80043d8:	795b      	ldrb	r3, [r3, #5]
 80043da:	b123      	cbz	r3, 80043e6 <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	4631      	mov	r1, r6
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4620      	mov	r0, r4
 80043e4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 80043e6:	f108 0801 	add.w	r8, r8, #1
 80043ea:	3410      	adds	r4, #16
 80043ec:	e7f1      	b.n	80043d2 <z_impl_log_process+0x56>
}
 80043ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043f2:	bf00      	nop
 80043f4:	2000256e 	.word	0x2000256e
 80043f8:	20000fd8 	.word	0x20000fd8
 80043fc:	20000fd4 	.word	0x20000fd4
 8004400:	0801a048 	.word	0x0801a048
 8004404:	0801a058 	.word	0x0801a058

08004408 <log_process_thread_func>:
{
 8004408:	b510      	push	{r4, lr}
	log_init();
 800440a:	f7ff fef7 	bl	80041fc <log_init>
	return z_impl_z_current_get();
 800440e:	f00c fb2b 	bl	8010a68 <z_impl_z_current_get>
	proc_tid = process_tid;
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <log_process_thread_func+0x3c>)
 8004414:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8004416:	b130      	cbz	r0, 8004426 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <log_process_thread_func+0x40>)
	    process_tid &&
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b09      	cmp	r3, #9
 800441e:	dd02      	ble.n	8004426 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 8004420:	480a      	ldr	r0, [pc, #40]	; (800444c <log_process_thread_func+0x44>)
 8004422:	f00b fec9 	bl	80101b8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 8004426:	4c09      	ldr	r4, [pc, #36]	; (800444c <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8004428:	2000      	movs	r0, #0
 800442a:	f7ff ffa7 	bl	800437c <z_impl_log_process>
		if (log_process(false) == false) {
 800442e:	2800      	cmp	r0, #0
 8004430:	d1fa      	bne.n	8004428 <log_process_thread_func+0x20>
 8004432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800443a:	4620      	mov	r0, r4
 800443c:	f00b fee2 	bl	8010204 <z_impl_k_sem_take>
 8004440:	e7f2      	b.n	8004428 <log_process_thread_func+0x20>
 8004442:	bf00      	nop
 8004444:	20001020 	.word	0x20001020
 8004448:	20000fd4 	.word	0x20000fd4
 800444c:	20000424 	.word	0x20000424

08004450 <z_log_msg_post_finalize>:
{
 8004450:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <z_log_msg_post_finalize+0x78>)
 8004454:	f3bf 8f5b 	dmb	ish
 8004458:	e853 2f00 	ldrex	r2, [r3]
 800445c:	1c51      	adds	r1, r2, #1
 800445e:	e843 1000 	strex	r0, r1, [r3]
 8004462:	2800      	cmp	r0, #0
 8004464:	d1f8      	bne.n	8004458 <z_log_msg_post_finalize+0x8>
 8004466:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 800446a:	4b18      	ldr	r3, [pc, #96]	; (80044cc <z_log_msg_post_finalize+0x7c>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b183      	cbz	r3, 8004492 <z_log_msg_post_finalize+0x42>
	__asm__ volatile(
 8004470:	f04f 0310 	mov.w	r3, #16
 8004474:	f3ef 8411 	mrs	r4, BASEPRI
 8004478:	f383 8812 	msr	BASEPRI_MAX, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	2000      	movs	r0, #0
 8004482:	f7ff ff7b 	bl	800437c <z_impl_log_process>
	__asm__ volatile(
 8004486:	f384 8811 	msr	BASEPRI, r4
 800448a:	f3bf 8f6f 	isb	sy
}
 800448e:	b002      	add	sp, #8
 8004490:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <z_log_msg_post_finalize+0x80>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f9      	beq.n	800448e <z_log_msg_post_finalize+0x3e>
 800449a:	b952      	cbnz	r2, 80044b2 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
 800449c:	2200      	movs	r2, #0
 800449e:	2300      	movs	r3, #0
 80044a0:	e9cd 2300 	strd	r2, r3, [sp]
 80044a4:	480b      	ldr	r0, [pc, #44]	; (80044d4 <z_log_msg_post_finalize+0x84>)
 80044a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80044aa:	2300      	movs	r3, #0
 80044ac:	f00c fd06 	bl	8010ebc <z_impl_k_timer_start>
 80044b0:	e7ed      	b.n	800448e <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80044b2:	2a0a      	cmp	r2, #10
 80044b4:	d1eb      	bne.n	800448e <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
 80044b6:	4807      	ldr	r0, [pc, #28]	; (80044d4 <z_log_msg_post_finalize+0x84>)
 80044b8:	f014 fe6a 	bl	8019190 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80044bc:	4806      	ldr	r0, [pc, #24]	; (80044d8 <z_log_msg_post_finalize+0x88>)
}
 80044be:	b002      	add	sp, #8
 80044c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c4:	f00b be78 	b.w	80101b8 <z_impl_k_sem_give>
 80044c8:	20000fd4 	.word	0x20000fd4
 80044cc:	2000256f 	.word	0x2000256f
 80044d0:	20001020 	.word	0x20001020
 80044d4:	200009f0 	.word	0x200009f0
 80044d8:	20000424 	.word	0x20000424

080044dc <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <z_log_msg2_commit+0x1c>)
{
 80044de:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
 80044e0:	681b      	ldr	r3, [r3, #0]
{
 80044e2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 80044e4:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80044e6:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 80044e8:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80044ea:	4804      	ldr	r0, [pc, #16]	; (80044fc <z_log_msg2_commit+0x20>)
 80044ec:	f00f fd42 	bl	8013f74 <mpsc_pbuf_commit>
}
 80044f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 80044f4:	f7ff bfac 	b.w	8004450 <z_log_msg_post_finalize>
 80044f8:	20000080 	.word	0x20000080
 80044fc:	20000fe0 	.word	0x20000fe0

08004500 <z_impl_log_panic>:
{
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8004502:	4f0e      	ldr	r7, [pc, #56]	; (800453c <z_impl_log_panic+0x3c>)
 8004504:	783d      	ldrb	r5, [r7, #0]
 8004506:	b975      	cbnz	r5, 8004526 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 8004508:	4c0d      	ldr	r4, [pc, #52]	; (8004540 <z_impl_log_panic+0x40>)
 800450a:	4e0e      	ldr	r6, [pc, #56]	; (8004544 <z_impl_log_panic+0x44>)
	log_init();
 800450c:	f7ff fe76 	bl	80041fc <log_init>
 8004510:	1b36      	subs	r6, r6, r4
 8004512:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8004514:	42b5      	cmp	r5, r6
 8004516:	db07      	blt.n	8004528 <z_impl_log_panic+0x28>
 8004518:	2000      	movs	r0, #0
 800451a:	f7ff ff2f 	bl	800437c <z_impl_log_process>
		while (log_process(false) == true) {
 800451e:	2800      	cmp	r0, #0
 8004520:	d1fa      	bne.n	8004518 <z_impl_log_panic+0x18>
	panic_mode = true;
 8004522:	2301      	movs	r3, #1
 8004524:	703b      	strb	r3, [r7, #0]
}
 8004526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8004528:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 800452a:	795b      	ldrb	r3, [r3, #5]
 800452c:	b11b      	cbz	r3, 8004536 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	4620      	mov	r0, r4
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8004536:	3501      	adds	r5, #1
 8004538:	3410      	adds	r4, #16
 800453a:	e7eb      	b.n	8004514 <z_impl_log_panic+0x14>
 800453c:	2000256f 	.word	0x2000256f
 8004540:	0801a048 	.word	0x0801a048
 8004544:	0801a058 	.word	0x0801a058

08004548 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <log_source_name_get+0x14>)
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <log_source_name_get+0x18>)
 800454c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 800454e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8004552:	bf34      	ite	cc
 8004554:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8004558:	2000      	movcs	r0, #0
}
 800455a:	4770      	bx	lr
 800455c:	08019f78 	.word	0x08019f78
 8004560:	0801a048 	.word	0x0801a048

08004564 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8004564:	4a05      	ldr	r2, [pc, #20]	; (800457c <log_backend_enable+0x18>)
	backend->cb->id = id;
 8004566:	6843      	ldr	r3, [r0, #4]
 8004568:	1a80      	subs	r0, r0, r2
 800456a:	1100      	asrs	r0, r0, #4
 800456c:	3001      	adds	r0, #1
	backend->cb->active = true;
 800456e:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
 8004570:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
 8004572:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8004574:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 8004576:	f7ff be6d 	b.w	8004254 <z_log_notify_backend_enabled>
 800457a:	bf00      	nop
 800457c:	0801a048 	.word	0x0801a048

08004580 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8004580:	b40e      	push	{r1, r2, r3}
 8004582:	b503      	push	{r0, r1, lr}
 8004584:	ab03      	add	r3, sp, #12
 8004586:	4601      	mov	r1, r0
 8004588:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 800458c:	4804      	ldr	r0, [pc, #16]	; (80045a0 <print_formatted+0x20>)
	va_start(args, fmt);
 800458e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8004590:	f7fe ff7c 	bl	800348c <cbvprintf>
	va_end(args);

	return length;
}
 8004594:	b002      	add	sp, #8
 8004596:	f85d eb04 	ldr.w	lr, [sp], #4
 800459a:	b003      	add	sp, #12
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	0801414d 	.word	0x0801414d

080045a4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80045a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a8:	461d      	mov	r5, r3
 80045aa:	9b08      	ldr	r3, [sp, #32]
 80045ac:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80045ae:	06da      	lsls	r2, r3, #27
{
 80045b0:	4604      	mov	r4, r0
 80045b2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80045b4:	d405      	bmi.n	80045c2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80045b6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 80045b8:	bf4c      	ite	mi
 80045ba:	492b      	ldrmi	r1, [pc, #172]	; (8004668 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 80045bc:	492b      	ldrpl	r1, [pc, #172]	; (800466c <hexdump_line_print+0xc8>)
 80045be:	f7ff ffdf 	bl	8004580 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 80045c2:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8004670 <hexdump_line_print+0xcc>
{
 80045c6:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 80045ca:	45a8      	cmp	r8, r5
 80045cc:	db2d      	blt.n	800462a <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 80045ce:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004674 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
 80045d2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004678 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
 80045d6:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004670 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80045da:	2500      	movs	r5, #0
		if (i < length) {
 80045dc:	42bd      	cmp	r5, r7
 80045de:	d232      	bcs.n	8004646 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 80045e0:	5d72      	ldrb	r2, [r6, r5]
 80045e2:	4649      	mov	r1, r9
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff ffcb 	bl	8004580 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80045ea:	3501      	adds	r5, #1
 80045ec:	2d10      	cmp	r5, #16
 80045ee:	d123      	bne.n	8004638 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
 80045f0:	4922      	ldr	r1, [pc, #136]	; (800467c <hexdump_line_print+0xd8>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 80045f2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8004670 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
 80045f6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004680 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
 80045fa:	f8df a088 	ldr.w	sl, [pc, #136]	; 8004684 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 80045fe:	4620      	mov	r0, r4
 8004600:	f7ff ffbe 	bl	8004580 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004604:	2500      	movs	r5, #0
		if (i < length) {
 8004606:	42af      	cmp	r7, r5
 8004608:	d929      	bls.n	800465e <hexdump_line_print+0xba>
			char c = (char)data[i];
 800460a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 800460c:	f812 3009 	ldrb.w	r3, [r2, r9]
 8004610:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004614:	bf08      	it	eq
 8004616:	222e      	moveq	r2, #46	; 0x2e
 8004618:	4651      	mov	r1, sl
 800461a:	4620      	mov	r0, r4
 800461c:	f7ff ffb0 	bl	8004580 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004620:	3501      	adds	r5, #1
 8004622:	2d10      	cmp	r5, #16
 8004624:	d114      	bne.n	8004650 <hexdump_line_print+0xac>
		}
	}
}
 8004626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 800462a:	4649      	mov	r1, r9
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff ffa7 	bl	8004580 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8004632:	f108 0801 	add.w	r8, r8, #1
 8004636:	e7c8      	b.n	80045ca <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 8004638:	076a      	lsls	r2, r5, #29
 800463a:	d1cf      	bne.n	80045dc <hexdump_line_print+0x38>
			print_formatted(output, " ");
 800463c:	4651      	mov	r1, sl
 800463e:	4620      	mov	r0, r4
 8004640:	f7ff ff9e 	bl	8004580 <print_formatted>
 8004644:	e7ca      	b.n	80045dc <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 8004646:	4641      	mov	r1, r8
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff ff99 	bl	8004580 <print_formatted>
 800464e:	e7cc      	b.n	80045ea <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 8004650:	076b      	lsls	r3, r5, #29
 8004652:	d1d8      	bne.n	8004606 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8004654:	4641      	mov	r1, r8
 8004656:	4620      	mov	r0, r4
 8004658:	f7ff ff92 	bl	8004580 <print_formatted>
 800465c:	e7d3      	b.n	8004606 <hexdump_line_print+0x62>
			print_formatted(output, " ");
 800465e:	4641      	mov	r1, r8
 8004660:	4620      	mov	r0, r4
 8004662:	f7ff ff8d 	bl	8004580 <print_formatted>
 8004666:	e7db      	b.n	8004620 <hexdump_line_print+0x7c>
 8004668:	0801b4ed 	.word	0x0801b4ed
 800466c:	0801b4ec 	.word	0x0801b4ec
 8004670:	0801c9e2 	.word	0x0801c9e2
 8004674:	0801c9e0 	.word	0x0801c9e0
 8004678:	0801b4ef 	.word	0x0801b4ef
 800467c:	0801b4f5 	.word	0x0801b4f5
 8004680:	0801cb91 	.word	0x0801cb91
 8004684:	0801b4f7 	.word	0x0801b4f7

08004688 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	b087      	sub	sp, #28
 800468e:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8004690:	f001 0301 	and.w	r3, r1, #1
{
 8004694:	9205      	str	r2, [sp, #20]
 8004696:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 800469a:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800469e:	9304      	str	r3, [sp, #16]
{
 80046a0:	4607      	mov	r7, r0
 80046a2:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 80046a4:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80046a8:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
 80046ac:	f00f fd32 	bl	8014114 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 80046b0:	4602      	mov	r2, r0
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d044      	beq.n	8004740 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
 80046b6:	493a      	ldr	r1, [pc, #232]	; (80047a0 <prefix_print+0x118>)
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff ff61 	bl	8004580 <print_formatted>
 80046be:	4605      	mov	r5, r0
	}

	if (stamp) {
 80046c0:	f1bb 0f00 	cmp.w	fp, #0
 80046c4:	d008      	beq.n	80046d8 <prefix_print+0x50>
	if (!format) {
 80046c6:	f018 0f44 	tst.w	r8, #68	; 0x44
 80046ca:	d13b      	bne.n	8004744 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
 80046cc:	4935      	ldr	r1, [pc, #212]	; (80047a4 <prefix_print+0x11c>)
 80046ce:	4622      	mov	r2, r4
 80046d0:	4638      	mov	r0, r7
 80046d2:	f7ff ff55 	bl	8004580 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 80046d6:	4405      	add	r5, r0
	if (color) {
 80046d8:	9b04      	ldr	r3, [sp, #16]
 80046da:	b153      	cbz	r3, 80046f2 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
 80046dc:	4b32      	ldr	r3, [pc, #200]	; (80047a8 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
 80046de:	4933      	ldr	r1, [pc, #204]	; (80047ac <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
 80046e0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
 80046e4:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <prefix_print+0x128>)
 80046e6:	4638      	mov	r0, r7
 80046e8:	2a00      	cmp	r2, #0
 80046ea:	bf08      	it	eq
 80046ec:	461a      	moveq	r2, r3
 80046ee:	f7ff ff47 	bl	8004580 <print_formatted>
	if (level_on) {
 80046f2:	b13e      	cbz	r6, 8004704 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80046f4:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <prefix_print+0x12c>)
 80046f6:	4930      	ldr	r1, [pc, #192]	; (80047b8 <prefix_print+0x130>)
 80046f8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80046fc:	4638      	mov	r0, r7
 80046fe:	f7ff ff3f 	bl	8004580 <print_formatted>
 8004702:	4606      	mov	r6, r0
	if (source_id >= 0) {
 8004704:	f1ba 0f00 	cmp.w	sl, #0
 8004708:	db16      	blt.n	8004738 <prefix_print+0xb0>
		total += print_formatted(output,
 800470a:	9b05      	ldr	r3, [sp, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d045      	beq.n	800479c <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8004710:	2301      	movs	r3, #1
 8004712:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
 8004716:	4b29      	ldr	r3, [pc, #164]	; (80047bc <prefix_print+0x134>)
 8004718:	4c29      	ldr	r4, [pc, #164]	; (80047c0 <prefix_print+0x138>)
 800471a:	f019 0f10 	tst.w	r9, #16
 800471e:	bf18      	it	ne
 8004720:	461c      	movne	r4, r3
 8004722:	4651      	mov	r1, sl
 8004724:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8004728:	f7ff ff0e 	bl	8004548 <log_source_name_get>
 800472c:	4621      	mov	r1, r4
 800472e:	4602      	mov	r2, r0
 8004730:	4638      	mov	r0, r7
 8004732:	f7ff ff25 	bl	8004580 <print_formatted>
 8004736:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 8004738:	1970      	adds	r0, r6, r5
 800473a:	b007      	add	sp, #28
 800473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 8004740:	4605      	mov	r5, r0
 8004742:	e7bd      	b.n	80046c0 <prefix_print+0x38>
	} else if (freq != 0U) {
 8004744:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <prefix_print+0x13c>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	2800      	cmp	r0, #0
 800474a:	d0c4      	beq.n	80046d6 <prefix_print+0x4e>
		timestamp /= timestamp_div;
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
 800474e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
 8004758:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800475c:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
 8004760:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
 8004764:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
 8004768:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800476c:	fbb3 f2f1 	udiv	r2, r3, r1
 8004770:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8004774:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
 8004778:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800477c:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
 8004780:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8004784:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
 8004788:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800478a:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
 800478e:	490f      	ldr	r1, [pc, #60]	; (80047cc <prefix_print+0x144>)
 8004790:	e9cd e001 	strd	lr, r0, [sp, #4]
 8004794:	4638      	mov	r0, r7
 8004796:	f7ff fef3 	bl	8004580 <print_formatted>
 800479a:	e79c      	b.n	80046d6 <prefix_print+0x4e>
		total += print_formatted(output,
 800479c:	4c08      	ldr	r4, [pc, #32]	; (80047c0 <prefix_print+0x138>)
 800479e:	e7c0      	b.n	8004722 <prefix_print+0x9a>
 80047a0:	0801b508 	.word	0x0801b508
 80047a4:	0801b50c 	.word	0x0801b50c
 80047a8:	0801a1b0 	.word	0x0801a1b0
 80047ac:	0801ba80 	.word	0x0801ba80
 80047b0:	0801b4fa 	.word	0x0801b4fa
 80047b4:	0801a1c4 	.word	0x0801a1c4
 80047b8:	0801b531 	.word	0x0801b531
 80047bc:	0801b504 	.word	0x0801b504
 80047c0:	0801b4ff 	.word	0x0801b4ff
 80047c4:	20001024 	.word	0x20001024
 80047c8:	20001028 	.word	0x20001028
 80047cc:	0801b515 	.word	0x0801b515

080047d0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	460c      	mov	r4, r1
	if (color) {
 80047d4:	07e1      	lsls	r1, r4, #31
{
 80047d6:	4605      	mov	r5, r0
	if (color) {
 80047d8:	d503      	bpl.n	80047e2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <postfix_print+0x2c>)
 80047dc:	4908      	ldr	r1, [pc, #32]	; (8004800 <postfix_print+0x30>)
 80047de:	f7ff fecf 	bl	8004580 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80047e2:	06e2      	lsls	r2, r4, #27
 80047e4:	d408      	bmi.n	80047f8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80047e6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 80047e8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 80047ea:	bf4c      	ite	mi
 80047ec:	4905      	ldrmi	r1, [pc, #20]	; (8004804 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 80047ee:	4906      	ldrpl	r1, [pc, #24]	; (8004808 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 80047f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 80047f4:	f7ff bec4 	b.w	8004580 <print_formatted>
}
 80047f8:	bd38      	pop	{r3, r4, r5, pc}
 80047fa:	bf00      	nop
 80047fc:	0801b4fa 	.word	0x0801b4fa
 8004800:	0801ba80 	.word	0x0801ba80
 8004804:	0801b4ed 	.word	0x0801b4ed
 8004808:	0801b4ec 	.word	0x0801b4ec

0800480c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 800480c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
 8004810:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
 8004812:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
 8004816:	4606      	mov	r6, r0
 8004818:	460c      	mov	r4, r1
 800481a:	4690      	mov	r8, r2
 800481c:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
 8004820:	d04d      	beq.n	80048be <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
 8004822:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
 8004824:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
 8004826:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <log_output_msg2_process+0xac>
 800482e:	4925      	ldr	r1, [pc, #148]	; (80048c4 <log_output_msg2_process+0xb8>)
 8004830:	1a5b      	subs	r3, r3, r1
 8004832:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 8004836:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800483a:	f8cd 9000 	str.w	r9, [sp]
 800483e:	68a3      	ldr	r3, [r4, #8]
 8004840:	2200      	movs	r2, #0
 8004842:	4641      	mov	r1, r8
 8004844:	4630      	mov	r0, r6
 8004846:	f7ff ff1f 	bl	8004688 <prefix_print>
 800484a:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
 800484c:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
 800484e:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 8004852:	f3c3 2349 	ubfx	r3, r3, #9, #10
 8004856:	b153      	cbz	r3, 800486e <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8004858:	4f1b      	ldr	r7, [pc, #108]	; (80048c8 <log_output_msg2_process+0xbc>)
 800485a:	481c      	ldr	r0, [pc, #112]	; (80048cc <log_output_msg2_process+0xc0>)
 800485c:	491c      	ldr	r1, [pc, #112]	; (80048d0 <log_output_msg2_process+0xc4>)
 800485e:	462b      	mov	r3, r5
 8004860:	4632      	mov	r2, r6
 8004862:	f1b9 0f00 	cmp.w	r9, #0
 8004866:	bf08      	it	eq
 8004868:	4638      	moveq	r0, r7
 800486a:	f00f f8be 	bl	80139ea <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 800486e:	8867      	ldrh	r7, [r4, #2]
 8004870:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 8004874:	b197      	cbz	r7, 800489c <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	f3c3 2349 	ubfx	r3, r3, #9, #10
 800487c:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800487e:	2f10      	cmp	r7, #16
 8004880:	463c      	mov	r4, r7
 8004882:	bf28      	it	cs
 8004884:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 8004886:	4629      	mov	r1, r5
 8004888:	f8cd 8000 	str.w	r8, [sp]
 800488c:	4653      	mov	r3, sl
 800488e:	4622      	mov	r2, r4
 8004890:	4630      	mov	r0, r6
 8004892:	f7ff fe87 	bl	80045a4 <hexdump_line_print>
	} while (len);
 8004896:	1b3f      	subs	r7, r7, r4
		data += length;
 8004898:	4425      	add	r5, r4
	} while (len);
 800489a:	d1f0      	bne.n	800487e <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 800489c:	f1b9 0f00 	cmp.w	r9, #0
 80048a0:	d004      	beq.n	80048ac <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
 80048a2:	464a      	mov	r2, r9
 80048a4:	4641      	mov	r1, r8
 80048a6:	4630      	mov	r0, r6
 80048a8:	f7ff ff92 	bl	80047d0 <postfix_print>
	}

	log_output_flush(output);
 80048ac:	4630      	mov	r0, r6
}
 80048ae:	b004      	add	sp, #16
 80048b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 80048b4:	f00f bc3d 	b.w	8014132 <log_output_flush>
		int16_t source_id = source ?
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048bc:	e7bb      	b.n	8004836 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
 80048be:	46ca      	mov	sl, r9
 80048c0:	e7c4      	b.n	800484c <log_output_msg2_process+0x40>
 80048c2:	bf00      	nop
 80048c4:	08019f78 	.word	0x08019f78
 80048c8:	08014183 	.word	0x08014183
 80048cc:	0801414d 	.word	0x0801414d
 80048d0:	0800348d 	.word	0x0800348d

080048d4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 80048d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80048d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80048da:	428b      	cmp	r3, r1
 80048dc:	bf28      	it	cs
 80048de:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 80048e0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80048e2:	4a0f      	ldr	r2, [pc, #60]	; (8004920 <log_output_dropped_process+0x4c>)
{
 80048e4:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80048e6:	2105      	movs	r1, #5
 80048e8:	4668      	mov	r0, sp
 80048ea:	f00f f92a 	bl	8013b42 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	490c      	ldr	r1, [pc, #48]	; (8004924 <log_output_dropped_process+0x50>)
 80048f2:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80048f4:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80048f6:	220b      	movs	r2, #11
 80048f8:	4628      	mov	r0, r5
 80048fa:	f00f fc0d 	bl	8014118 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	4632      	mov	r2, r6
 8004902:	4669      	mov	r1, sp
 8004904:	4628      	mov	r0, r5
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f00f fc06 	bl	8014118 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 800490c:	6863      	ldr	r3, [r4, #4]
 800490e:	4906      	ldr	r1, [pc, #24]	; (8004928 <log_output_dropped_process+0x54>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	221b      	movs	r2, #27
 8004914:	4628      	mov	r0, r5
 8004916:	f00f fbff 	bl	8014118 <buffer_write>
		     output->control_block->ctx);
}
 800491a:	b002      	add	sp, #8
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	bf00      	nop
 8004920:	0801be0f 	.word	0x0801be0f
 8004924:	0801b573 	.word	0x0801b573
 8004928:	0801b557 	.word	0x0801b557

0800492c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 800492c:	4a08      	ldr	r2, [pc, #32]	; (8004950 <log_output_timestamp_freq_set+0x24>)
{
 800492e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 8004930:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8004932:	4c08      	ldr	r4, [pc, #32]	; (8004954 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 8004934:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8004936:	2100      	movs	r1, #0
 8004938:	42a0      	cmp	r0, r4
 800493a:	d804      	bhi.n	8004946 <log_output_timestamp_freq_set+0x1a>
 800493c:	b101      	cbz	r1, 8004940 <log_output_timestamp_freq_set+0x14>
 800493e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <log_output_timestamp_freq_set+0x2c>)
 8004942:	6018      	str	r0, [r3, #0]
}
 8004944:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 8004946:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2101      	movs	r1, #1
 800494c:	e7f4      	b.n	8004938 <log_output_timestamp_freq_set+0xc>
 800494e:	bf00      	nop
 8004950:	20001028 	.word	0x20001028
 8004954:	000f4240 	.word	0x000f4240
 8004958:	20001024 	.word	0x20001024

0800495c <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
 800495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004960:	b087      	sub	sp, #28
 8004962:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
 8004966:	469a      	mov	sl, r3
 8004968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800496a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800496e:	9303      	str	r3, [sp, #12]
 8004970:	4604      	mov	r4, r0
 8004972:	4689      	mov	r9, r1
 8004974:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
 8004976:	b3cf      	cbz	r7, 80049ec <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 8004978:	f8cd b000 	str.w	fp, [sp]
 800497c:	463b      	mov	r3, r7
 800497e:	462a      	mov	r2, r5
 8004980:	210c      	movs	r1, #12
 8004982:	2000      	movs	r0, #0
		va_copy(ap2, ap);
 8004984:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 8004988:	f7fe fa3e 	bl	8002e08 <cbvprintf_package>
 800498c:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
 800498e:	9a03      	ldr	r2, [sp, #12]
 8004990:	f008 0307 	and.w	r3, r8, #7
 8004994:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 8004998:	f102 0013 	add.w	r0, r2, #19
	struct log_msg2_desc desc =
 800499c:	4c14      	ldr	r4, [pc, #80]	; (80049f0 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
 800499e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80049a2:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 80049a6:	4430      	add	r0, r6
	struct log_msg2_desc desc =
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
 80049aa:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 80049ae:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
 80049b2:	ea48 0804 	orr.w	r8, r8, r4
 80049b6:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
 80049ba:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
 80049bc:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
 80049c0:	f7ff fcc2 	bl	8004348 <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
 80049c4:	4604      	mov	r4, r0
 80049c6:	b140      	cbz	r0, 80049da <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
 80049c8:	b13f      	cbz	r7, 80049da <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
 80049ca:	f8cd b000 	str.w	fp, [sp]
 80049ce:	463b      	mov	r3, r7
 80049d0:	462a      	mov	r2, r5
 80049d2:	4631      	mov	r1, r6
 80049d4:	300c      	adds	r0, #12
 80049d6:	f7fe fa17 	bl	8002e08 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
 80049da:	4653      	mov	r3, sl
 80049dc:	4642      	mov	r2, r8
 80049de:	4649      	mov	r1, r9
 80049e0:	4620      	mov	r0, r4
	}
}
 80049e2:	b007      	add	sp, #28
 80049e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
 80049e8:	f00f bbd8 	b.w	801419c <z_log_msg2_finalize>
		plen = 0;
 80049ec:	463e      	mov	r6, r7
 80049ee:	e7ce      	b.n	800498e <z_impl_z_log_msg2_runtime_vcreate+0x32>
 80049f0:	0007fe00 	.word	0x0007fe00
 80049f4:	7ff80000 	.word	0x7ff80000

080049f8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
 80049fa:	4f07      	ldr	r7, [pc, #28]	; (8004a18 <char_out+0x20>)
{
 80049fc:	460d      	mov	r5, r1
 80049fe:	4604      	mov	r4, r0
 8004a00:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
 8004a02:	42b4      	cmp	r4, r6
 8004a04:	d101      	bne.n	8004a0a <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 8004a06:	4628      	mov	r0, r5
 8004a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 8004a0a:	6838      	ldr	r0, [r7, #0]
 8004a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8004a10:	6883      	ldr	r3, [r0, #8]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8004a16:	e7f4      	b.n	8004a02 <char_out+0xa>
 8004a18:	20001044 	.word	0x20001044

08004a1c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 8004a1c:	4b01      	ldr	r3, [pc, #4]	; (8004a24 <format_set+0x8>)
	return 0;
}
 8004a1e:	2000      	movs	r0, #0
	log_format_current = log_type;
 8004a20:	6019      	str	r1, [r3, #0]
}
 8004a22:	4770      	bx	lr
 8004a24:	20001034 	.word	0x20001034

08004a28 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8004a28:	4b01      	ldr	r3, [pc, #4]	; (8004a30 <log_backend_uart_init+0x8>)
 8004a2a:	4a02      	ldr	r2, [pc, #8]	; (8004a34 <log_backend_uart_init+0xc>)
 8004a2c:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 8004a2e:	4770      	bx	lr
 8004a30:	20001044 	.word	0x20001044
 8004a34:	08019c68 	.word	0x08019c68

08004a38 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
 8004a38:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8004a3a:	4803      	ldr	r0, [pc, #12]	; (8004a48 <panic+0x10>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	f00f bb77 	b.w	8014132 <log_output_flush>
 8004a44:	20002570 	.word	0x20002570
 8004a48:	0801a1f8 	.word	0x0801a1f8

08004a4c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <dropped+0x8>)
 8004a4e:	f7ff bf41 	b.w	80048d4 <log_output_dropped_process>
 8004a52:	bf00      	nop
 8004a54:	0801a1f8 	.word	0x0801a1f8

08004a58 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <process+0x1c>)
{
 8004a5a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8004a5c:	6818      	ldr	r0, [r3, #0]
{
 8004a5e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8004a60:	f7ff fbc6 	bl	80041f0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 8004a64:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8004a66:	4603      	mov	r3, r0
}
 8004a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <process+0x20>)
 8004a6e:	220f      	movs	r2, #15
 8004a70:	4718      	bx	r3
 8004a72:	bf00      	nop
 8004a74:	20001034 	.word	0x20001034
 8004a78:	0801a1f8 	.word	0x0801a1f8

08004a7c <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
 8004a7c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 8004a7e:	4804      	ldr	r0, [pc, #16]	; (8004a90 <disk_init+0x14>)
 8004a80:	f014 f9e3 	bl	8018e4a <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
 8004a86:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8004a88:	e9c3 3300 	strd	r3, r3, [r3]
 8004a8c:	bd08      	pop	{r3, pc}
 8004a8e:	bf00      	nop
 8004a90:	20001050 	.word	0x20001050
 8004a94:	20001048 	.word	0x20001048

08004a98 <disk_access_get_di>:
{
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
 8004a9c:	f7fc fc93 	bl	80013c6 <strlen>
 8004aa0:	4605      	mov	r5, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8004aa2:	4f12      	ldr	r7, [pc, #72]	; (8004aec <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
 8004aa4:	4812      	ldr	r0, [pc, #72]	; (8004af0 <disk_access_get_di+0x58>)
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aae:	f00b fac9 	bl	8010044 <z_impl_k_mutex_lock>
 8004ab2:	683c      	ldr	r4, [r7, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004ab4:	42bc      	cmp	r4, r7
 8004ab6:	d10e      	bne.n	8004ad6 <disk_access_get_di+0x3e>
	struct disk_info *disk = NULL, *itr;
 8004ab8:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 8004aba:	480d      	ldr	r0, [pc, #52]	; (8004af0 <disk_access_get_di+0x58>)
 8004abc:	f00b fb3a 	bl	8010134 <z_impl_k_mutex_unlock>
}
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strlen(itr->name) != name_len) {
 8004ac4:	68a0      	ldr	r0, [r4, #8]
 8004ac6:	f7fc fc7e 	bl	80013c6 <strlen>
 8004aca:	42a8      	cmp	r0, r5
 8004acc:	d006      	beq.n	8004adc <disk_access_get_di+0x44>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	d0f1      	beq.n	8004ab8 <disk_access_get_di+0x20>
 8004ad4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
 8004ad6:	2c00      	cmp	r4, #0
 8004ad8:	d1f4      	bne.n	8004ac4 <disk_access_get_di+0x2c>
 8004ada:	e7ed      	b.n	8004ab8 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
 8004adc:	68a1      	ldr	r1, [r4, #8]
 8004ade:	462a      	mov	r2, r5
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f014 fd2a 	bl	801953a <strncmp>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d1f1      	bne.n	8004ace <disk_access_get_di+0x36>
 8004aea:	e7e6      	b.n	8004aba <disk_access_get_di+0x22>
 8004aec:	20001048 	.word	0x20001048
 8004af0:	20001050 	.word	0x20001050

08004af4 <disk_access_register>:
{
 8004af4:	b530      	push	{r4, r5, lr}
 8004af6:	4605      	mov	r5, r0
 8004af8:	b087      	sub	sp, #28
	return z_impl_k_mutex_lock(mutex, timeout);
 8004afa:	4815      	ldr	r0, [pc, #84]	; (8004b50 <disk_access_register+0x5c>)
 8004afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b04:	f00b fa9e 	bl	8010044 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
 8004b08:	b10d      	cbz	r5, 8004b0e <disk_access_register+0x1a>
 8004b0a:	68a8      	ldr	r0, [r5, #8]
 8004b0c:	b990      	cbnz	r0, 8004b34 <disk_access_register+0x40>
		LOG_ERR("invalid disk interface!!");
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <disk_access_register+0x60>)
		LOG_ERR("disk interface already registered!!");
 8004b10:	9304      	str	r3, [sp, #16]
 8004b12:	2302      	movs	r3, #2
 8004b14:	9303      	str	r3, [sp, #12]
 8004b16:	4810      	ldr	r0, [pc, #64]	; (8004b58 <disk_access_register+0x64>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	aa03      	add	r2, sp, #12
 8004b1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		rc = -EINVAL;
 8004b20:	f06f 0415 	mvn.w	r4, #21
 8004b24:	f00f fb55 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	return z_impl_k_mutex_unlock(mutex);
 8004b28:	4809      	ldr	r0, [pc, #36]	; (8004b50 <disk_access_register+0x5c>)
 8004b2a:	f00b fb03 	bl	8010134 <z_impl_k_mutex_unlock>
}
 8004b2e:	4620      	mov	r0, r4
 8004b30:	b007      	add	sp, #28
 8004b32:	bd30      	pop	{r4, r5, pc}
	if (disk_access_get_di(disk->name) != NULL) {
 8004b34:	f7ff ffb0 	bl	8004a98 <disk_access_get_di>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	b108      	cbz	r0, 8004b40 <disk_access_register+0x4c>
		LOG_ERR("disk interface already registered!!");
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <disk_access_register+0x68>)
 8004b3e:	e7e7      	b.n	8004b10 <disk_access_register+0x1c>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <disk_access_register+0x6c>)
 8004b42:	685a      	ldr	r2, [r3, #4]

	node->next = list;
	node->prev = tail;
 8004b44:	e9c5 3200 	strd	r3, r2, [r5]

	tail->next = node;
 8004b48:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8004b4a:	605d      	str	r5, [r3, #4]
	LOG_DBG("disk interface(%s) registred", disk->name);
 8004b4c:	e7ec      	b.n	8004b28 <disk_access_register+0x34>
 8004b4e:	bf00      	nop
 8004b50:	20001050 	.word	0x20001050
 8004b54:	0801b599 	.word	0x0801b599
 8004b58:	08019fa0 	.word	0x08019fa0
 8004b5c:	0801b5b2 	.word	0x0801b5b2
 8004b60:	20001048 	.word	0x20001048

08004b64 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8004b64:	4901      	ldr	r1, [pc, #4]	; (8004b6c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8004b66:	2210      	movs	r2, #16
	str	r2, [r1]
 8004b68:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8004b6a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8004b6c:	e000ed10 	.word	0xe000ed10

08004b70 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8004b70:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8004b72:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8004b74:	f380 8811 	msr	BASEPRI, r0
	isb
 8004b78:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8004b7c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8004b80:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8004b82:	b662      	cpsie	i
	isb
 8004b84:	f3bf 8f6f 	isb	sy

	bx	lr
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop

08004b8c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8004b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	4680      	mov	r8, r0
 8004b94:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 8004b96:	460c      	mov	r4, r1
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	d045      	beq.n	8004c28 <z_arm_fatal_error+0x9c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004b9c:	46e9      	mov	r9, sp
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	466d      	mov	r5, sp
 8004ba2:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004ba6:	68a3      	ldr	r3, [r4, #8]
 8004ba8:	4823      	ldr	r0, [pc, #140]	; (8004c38 <z_arm_fatal_error+0xac>)
 8004baa:	462e      	mov	r6, r5
 8004bac:	f04f 0a05 	mov.w	sl, #5
 8004bb0:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8004bb4:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8004bb8:	f846 af0c 	str.w	sl, [r6, #12]!
 8004bbc:	481f      	ldr	r0, [pc, #124]	; (8004c3c <z_arm_fatal_error+0xb0>)
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8004bc6:	f00f fb04 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8004bca:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8004bce:	6963      	ldr	r3, [r4, #20]
 8004bd0:	481b      	ldr	r0, [pc, #108]	; (8004c40 <z_arm_fatal_error+0xb4>)
 8004bd2:	f8c5 a00c 	str.w	sl, [r5, #12]
 8004bd6:	46cd      	mov	sp, r9
 8004bd8:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8004bdc:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8004be0:	46ad      	mov	sp, r5
 8004be2:	4816      	ldr	r0, [pc, #88]	; (8004c3c <z_arm_fatal_error+0xb0>)
 8004be4:	4632      	mov	r2, r6
 8004be6:	2300      	movs	r3, #0
 8004be8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8004bec:	f00f faf1 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8004bf0:	4a14      	ldr	r2, [pc, #80]	; (8004c44 <z_arm_fatal_error+0xb8>)
 8004bf2:	69e3      	ldr	r3, [r4, #28]
 8004bf4:	2503      	movs	r5, #3
 8004bf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004bfa:	46cd      	mov	sp, r9
 8004bfc:	60fd      	str	r5, [r7, #12]
 8004bfe:	480f      	ldr	r0, [pc, #60]	; (8004c3c <z_arm_fatal_error+0xb0>)
 8004c00:	f107 020c 	add.w	r2, r7, #12
 8004c04:	2300      	movs	r3, #0
 8004c06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004c0a:	f00f fae2 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <z_arm_fatal_error+0xbc>)
 8004c10:	69a3      	ldr	r3, [r4, #24]
 8004c12:	60fd      	str	r5, [r7, #12]
 8004c14:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004c18:	4808      	ldr	r0, [pc, #32]	; (8004c3c <z_arm_fatal_error+0xb0>)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f107 020c 	add.w	r2, r7, #12
 8004c20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004c24:	f00f fad5 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8004c28:	4621      	mov	r1, r4
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	f00a ffe2 	bl	800fbf4 <z_fatal_error>
}
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c38:	0801b5db 	.word	0x0801b5db
 8004c3c:	0801a008 	.word	0x0801a008
 8004c40:	0801b60a 	.word	0x0801b60a
 8004c44:	0801b639 	.word	0x0801b639
 8004c48:	0801b648 	.word	0x0801b648

08004c4c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8004c4c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	db08      	blt.n	8004c64 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c52:	2201      	movs	r2, #1
 8004c54:	f000 001f 	and.w	r0, r0, #31
 8004c58:	fa02 f000 	lsl.w	r0, r2, r0
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	4a02      	ldr	r2, [pc, #8]	; (8004c68 <arch_irq_enable+0x1c>)
 8004c60:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	e000e100 	.word	0xe000e100

08004c6c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8004c6c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	db0d      	blt.n	8004c8e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c72:	2201      	movs	r2, #1
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f000 001f 	and.w	r0, r0, #31
 8004c7a:	fa02 f000 	lsl.w	r0, r2, r0
 8004c7e:	3320      	adds	r3, #32
 8004c80:	4a03      	ldr	r2, [pc, #12]	; (8004c90 <arch_irq_disable+0x24>)
 8004c82:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c8a:	f3bf 8f6f 	isb	sy
}
 8004c8e:	4770      	bx	lr
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8004c94:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004c96:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c98:	bfa8      	it	ge
 8004c9a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8004c9e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca2:	bfb8      	it	lt
 8004ca4:	4b06      	ldrlt	r3, [pc, #24]	; (8004cc0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca6:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8004caa:	bfac      	ite	ge
 8004cac:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb6:	bfb4      	ite	lt
 8004cb8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cba:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8004cbe:	4770      	bx	lr
 8004cc0:	e000ed14 	.word	0xe000ed14

08004cc4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004cc4:	bf30      	wfi
    b z_SysNmiOnReset
 8004cc6:	f7ff bffd 	b.w	8004cc4 <z_SysNmiOnReset>
 8004cca:	bf00      	nop

08004ccc <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8004ccc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004cce:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <z_arm_prep_c+0x24>)
 8004cd0:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <z_arm_prep_c+0x28>)
 8004cd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cd6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004cdc:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8004ce0:	f00b f806 	bl	800fcf0 <z_bss_zero>
	z_data_copy();
 8004ce4:	f00b ff3a 	bl	8010b5c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8004ce8:	f000 fb72 	bl	80053d0 <z_arm_interrupt_init>
	z_cstart();
 8004cec:	f00b f844 	bl	800fd78 <z_cstart>
 8004cf0:	08000000 	.word	0x08000000
 8004cf4:	e000ed00 	.word	0xe000ed00

08004cf8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8004cfa:	490a      	ldr	r1, [pc, #40]	; (8004d24 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8004cfc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8004cfe:	6809      	ldr	r1, [r1, #0]
 8004d00:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004d02:	4909      	ldr	r1, [pc, #36]	; (8004d28 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8004d04:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004d06:	684b      	ldr	r3, [r1, #4]
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	604b      	str	r3, [r1, #4]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8004d18:	6893      	ldr	r3, [r2, #8]
}
 8004d1a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20002300 	.word	0x20002300
 8004d24:	0801a930 	.word	0x0801a930
 8004d28:	e000ed00 	.word	0xe000ed00

08004d2c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8004d2c:	4912      	ldr	r1, [pc, #72]	; (8004d78 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8004d2e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8004d30:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8004d34:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8004d36:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8004d3a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004d3e:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8004d40:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8004d44:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8004d48:	4f0c      	ldr	r7, [pc, #48]	; (8004d7c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8004d4a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8004d4e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8004d50:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8004d52:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8004d54:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8004d56:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8004d58:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8004d5a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8004d5e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8004d60:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8004d62:	f000 fb75 	bl	8005450 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8004d66:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8004d6a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8004d6e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8004d72:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8004d76:	4770      	bx	lr
    ldr r1, =_kernel
 8004d78:	20002300 	.word	0x20002300
    ldr v4, =_SCS_ICSR
 8004d7c:	e000ed04 	.word	0xe000ed04

08004d80 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8004d80:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004d84:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004d86:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004d8a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8004d8e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8004d90:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004d94:	2902      	cmp	r1, #2
    beq _oops
 8004d96:	d0ff      	beq.n	8004d98 <_oops>

08004d98 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004d98:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8004d9a:	f00f fa96 	bl	80142ca <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8004d9e:	bd01      	pop	{r0, pc}

08004da0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8004da0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004da4:	9b00      	ldr	r3, [sp, #0]
 8004da6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8004daa:	490a      	ldr	r1, [pc, #40]	; (8004dd4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8004db2:	9b02      	ldr	r3, [sp, #8]
 8004db4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8004db8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dc0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8004dc4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8004dc8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8004dca:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8004dcc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8004dce:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	08013b5d 	.word	0x08013b5d

08004dd8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <z_check_thread_stack_fail+0x28>)
{
 8004dda:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8004ddc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8004dde:	b170      	cbz	r0, 8004dfe <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8004de0:	f113 0f16 	cmn.w	r3, #22
 8004de4:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8004de6:	d005      	beq.n	8004df4 <z_check_thread_stack_fail+0x1c>
 8004de8:	f1a0 0220 	sub.w	r2, r0, #32
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d805      	bhi.n	8004dfc <z_check_thread_stack_fail+0x24>
 8004df0:	4283      	cmp	r3, r0
 8004df2:	d203      	bcs.n	8004dfc <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8004df4:	4281      	cmp	r1, r0
 8004df6:	bf28      	it	cs
 8004df8:	2000      	movcs	r0, #0
 8004dfa:	4770      	bx	lr
 8004dfc:	2000      	movs	r0, #0
}
 8004dfe:	4770      	bx	lr
 8004e00:	20002300 	.word	0x20002300

08004e04 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8004e04:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <arch_switch_to_main_thread+0x28>)
 8004e08:	6098      	str	r0, [r3, #8]
{
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8004e0e:	f000 fb1f 	bl	8005450 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8004e12:	4620      	mov	r0, r4
 8004e14:	f385 8809 	msr	PSP, r5
 8004e18:	2100      	movs	r1, #0
 8004e1a:	b663      	cpsie	if
 8004e1c:	f381 8811 	msr	BASEPRI, r1
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	2200      	movs	r2, #0
 8004e26:	2300      	movs	r3, #0
 8004e28:	f00e fe98 	bl	8013b5c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8004e2c:	20002300 	.word	0x20002300

08004e30 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8004e30:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8004e32:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8004e36:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8004e3a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8004e3e:	4904      	ldr	r1, [pc, #16]	; (8004e50 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8004e40:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8004e42:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8004e44:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8004e46:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8004e4a:	4902      	ldr	r1, [pc, #8]	; (8004e54 <_isr_wrapper+0x24>)
	bx r1
 8004e4c:	4708      	bx	r1
 8004e4e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8004e50:	08019d88 	.word	0x08019d88
	ldr r1, =z_arm_int_exit
 8004e54:	08004e59 	.word	0x08004e59

08004e58 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8004e5a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004e5c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8004e5e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8004e60:	d003      	beq.n	8004e6a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8004e62:	4903      	ldr	r1, [pc, #12]	; (8004e70 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8004e68:	600a      	str	r2, [r1, #0]

08004e6a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8004e6a:	4770      	bx	lr
	ldr r3, =_kernel
 8004e6c:	20002300 	.word	0x20002300
	ldr r1, =_SCS_ICSR
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 8004e78:	4b36      	ldr	r3, [pc, #216]	; (8004f54 <bus_fault.constprop.0+0xe0>)
 8004e7a:	9304      	str	r3, [sp, #16]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8004e80:	4835      	ldr	r0, [pc, #212]	; (8004f58 <bus_fault.constprop.0+0xe4>)
 8004e82:	2402      	movs	r4, #2
 8004e84:	aa03      	add	r2, sp, #12
 8004e86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004e8a:	9403      	str	r4, [sp, #12]
 8004e8c:	f00f fa2c 	bl	80142e8 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004e90:	4b32      	ldr	r3, [pc, #200]	; (8004f5c <bus_fault.constprop.0+0xe8>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	04db      	lsls	r3, r3, #19
 8004e96:	d508      	bpl.n	8004eaa <bus_fault.constprop.0+0x36>
		PR_FAULT_INFO("  Stacking error");
 8004e98:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <bus_fault.constprop.0+0xec>)
 8004e9a:	482f      	ldr	r0, [pc, #188]	; (8004f58 <bus_fault.constprop.0+0xe4>)
 8004e9c:	aa03      	add	r2, sp, #12
 8004e9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ea2:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8004ea6:	f00f fa1f 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <bus_fault.constprop.0+0xe8>)
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	051c      	lsls	r4, r3, #20
 8004eb0:	d509      	bpl.n	8004ec6 <bus_fault.constprop.0+0x52>
		PR_FAULT_INFO("  Unstacking error");
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <bus_fault.constprop.0+0xf0>)
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	4828      	ldr	r0, [pc, #160]	; (8004f58 <bus_fault.constprop.0+0xe4>)
 8004eb8:	2302      	movs	r3, #2
 8004eba:	aa03      	add	r2, sp, #12
 8004ebc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ec0:	9303      	str	r3, [sp, #12]
 8004ec2:	f00f fa11 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004ec6:	4c25      	ldr	r4, [pc, #148]	; (8004f5c <bus_fault.constprop.0+0xe8>)
 8004ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eca:	0598      	lsls	r0, r3, #22
 8004ecc:	d51d      	bpl.n	8004f0a <bus_fault.constprop.0+0x96>
		PR_FAULT_INFO("  Precise data bus error");
 8004ece:	4b26      	ldr	r3, [pc, #152]	; (8004f68 <bus_fault.constprop.0+0xf4>)
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	aa03      	add	r2, sp, #12
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004eda:	481f      	ldr	r0, [pc, #124]	; (8004f58 <bus_fault.constprop.0+0xe4>)
 8004edc:	9303      	str	r3, [sp, #12]
 8004ede:	f00f fa03 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8004ee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004ee4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ee6:	0411      	lsls	r1, r2, #16
 8004ee8:	d50f      	bpl.n	8004f0a <bus_fault.constprop.0+0x96>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8004eea:	4a20      	ldr	r2, [pc, #128]	; (8004f6c <bus_fault.constprop.0+0xf8>)
 8004eec:	481a      	ldr	r0, [pc, #104]	; (8004f58 <bus_fault.constprop.0+0xe4>)
 8004eee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ef2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	aa03      	add	r2, sp, #12
 8004efa:	9303      	str	r3, [sp, #12]
 8004efc:	f00f f9f4 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
 8004f00:	b11e      	cbz	r6, 8004f0a <bus_fault.constprop.0+0x96>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004f02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f08:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8004f0a:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <bus_fault.constprop.0+0xe8>)
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	055a      	lsls	r2, r3, #21
 8004f10:	d509      	bpl.n	8004f26 <bus_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004f12:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <bus_fault.constprop.0+0xfc>)
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	4810      	ldr	r0, [pc, #64]	; (8004f58 <bus_fault.constprop.0+0xe4>)
 8004f18:	2302      	movs	r3, #2
 8004f1a:	aa03      	add	r2, sp, #12
 8004f1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f20:	9303      	str	r3, [sp, #12]
 8004f22:	f00f f9e1 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <bus_fault.constprop.0+0xe8>)
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	05db      	lsls	r3, r3, #23
 8004f2c:	d509      	bpl.n	8004f42 <bus_fault.constprop.0+0xce>
		PR_FAULT_INFO("  Instruction bus error");
 8004f2e:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <bus_fault.constprop.0+0x100>)
 8004f30:	9304      	str	r3, [sp, #16]
 8004f32:	4809      	ldr	r0, [pc, #36]	; (8004f58 <bus_fault.constprop.0+0xe4>)
 8004f34:	2302      	movs	r3, #2
 8004f36:	aa03      	add	r2, sp, #12
 8004f38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f3c:	9303      	str	r3, [sp, #12]
 8004f3e:	f00f f9d3 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004f42:	4a06      	ldr	r2, [pc, #24]	; (8004f5c <bus_fault.constprop.0+0xe8>)
 8004f44:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8004f46:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004f48:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8004f4c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004f4e:	7028      	strb	r0, [r5, #0]

	return reason;
}
 8004f50:	b006      	add	sp, #24
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	0801b676 	.word	0x0801b676
 8004f58:	0801a008 	.word	0x0801a008
 8004f5c:	e000ed00 	.word	0xe000ed00
 8004f60:	0801b68c 	.word	0x0801b68c
 8004f64:	0801b69d 	.word	0x0801b69d
 8004f68:	0801b6b0 	.word	0x0801b6b0
 8004f6c:	0801b6c9 	.word	0x0801b6c9
 8004f70:	0801b6de 	.word	0x0801b6de
 8004f74:	0801b6f9 	.word	0x0801b6f9

08004f78 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8004f7c:	4b33      	ldr	r3, [pc, #204]	; (800504c <usage_fault.constprop.0+0xd4>)
 8004f7e:	4834      	ldr	r0, [pc, #208]	; (8005050 <usage_fault.constprop.0+0xd8>)
 8004f80:	9304      	str	r3, [sp, #16]
 8004f82:	2402      	movs	r4, #2
 8004f84:	aa03      	add	r2, sp, #12
 8004f86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f8a:	9403      	str	r4, [sp, #12]
 8004f8c:	f00f f9ac 	bl	80142e8 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004f90:	4b30      	ldr	r3, [pc, #192]	; (8005054 <usage_fault.constprop.0+0xdc>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	019b      	lsls	r3, r3, #6
 8004f96:	d508      	bpl.n	8004faa <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
 8004f98:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <usage_fault.constprop.0+0xe0>)
 8004f9a:	482d      	ldr	r0, [pc, #180]	; (8005050 <usage_fault.constprop.0+0xd8>)
 8004f9c:	aa03      	add	r2, sp, #12
 8004f9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004fa2:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8004fa6:	f00f f99f 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004faa:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <usage_fault.constprop.0+0xdc>)
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	01dc      	lsls	r4, r3, #7
 8004fb0:	d509      	bpl.n	8004fc6 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	; (800505c <usage_fault.constprop.0+0xe4>)
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	4826      	ldr	r0, [pc, #152]	; (8005050 <usage_fault.constprop.0+0xd8>)
 8004fb8:	2302      	movs	r3, #2
 8004fba:	aa03      	add	r2, sp, #12
 8004fbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004fc0:	9303      	str	r3, [sp, #12]
 8004fc2:	f00f f991 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8004fc6:	4b23      	ldr	r3, [pc, #140]	; (8005054 <usage_fault.constprop.0+0xdc>)
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	0318      	lsls	r0, r3, #12
 8004fcc:	d509      	bpl.n	8004fe2 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <usage_fault.constprop.0+0xe8>)
 8004fd0:	9304      	str	r3, [sp, #16]
 8004fd2:	481f      	ldr	r0, [pc, #124]	; (8005050 <usage_fault.constprop.0+0xd8>)
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	aa03      	add	r2, sp, #12
 8004fd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004fdc:	9303      	str	r3, [sp, #12]
 8004fde:	f00f f983 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <usage_fault.constprop.0+0xdc>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	0359      	lsls	r1, r3, #13
 8004fe8:	d509      	bpl.n	8004ffe <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8004fea:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <usage_fault.constprop.0+0xec>)
 8004fec:	9304      	str	r3, [sp, #16]
 8004fee:	4818      	ldr	r0, [pc, #96]	; (8005050 <usage_fault.constprop.0+0xd8>)
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	aa03      	add	r2, sp, #12
 8004ff4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004ff8:	9303      	str	r3, [sp, #12]
 8004ffa:	f00f f975 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <usage_fault.constprop.0+0xdc>)
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	039a      	lsls	r2, r3, #14
 8005004:	d509      	bpl.n	800501a <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <usage_fault.constprop.0+0xf0>)
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	4811      	ldr	r0, [pc, #68]	; (8005050 <usage_fault.constprop.0+0xd8>)
 800500c:	2302      	movs	r3, #2
 800500e:	aa03      	add	r2, sp, #12
 8005010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005014:	9303      	str	r3, [sp, #12]
 8005016:	f00f f967 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800501a:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <usage_fault.constprop.0+0xdc>)
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	03db      	lsls	r3, r3, #15
 8005020:	d509      	bpl.n	8005036 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <usage_fault.constprop.0+0xf4>)
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	480a      	ldr	r0, [pc, #40]	; (8005050 <usage_fault.constprop.0+0xd8>)
 8005028:	2302      	movs	r3, #2
 800502a:	aa03      	add	r2, sp, #12
 800502c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005030:	9303      	str	r3, [sp, #12]
 8005032:	f00f f959 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8005036:	4a07      	ldr	r2, [pc, #28]	; (8005054 <usage_fault.constprop.0+0xdc>)
 8005038:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800503a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800503e:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
 8005042:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8005044:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005046:	b006      	add	sp, #24
 8005048:	bd10      	pop	{r4, pc}
 800504a:	bf00      	nop
 800504c:	0801b711 	.word	0x0801b711
 8005050:	0801a008 	.word	0x0801a008
 8005054:	e000ed00 	.word	0xe000ed00
 8005058:	0801b729 	.word	0x0801b729
 800505c:	0801b73c 	.word	0x0801b73c
 8005060:	0801b756 	.word	0x0801b756
 8005064:	0801b774 	.word	0x0801b774
 8005068:	0801b799 	.word	0x0801b799
 800506c:	0801b7b3 	.word	0x0801b7b3

08005070 <mem_manage_fault>:
{
 8005070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005074:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** MPU FAULT *****");
 8005076:	4b3e      	ldr	r3, [pc, #248]	; (8005170 <mem_manage_fault+0x100>)
 8005078:	9304      	str	r3, [sp, #16]
{
 800507a:	4607      	mov	r7, r0
 800507c:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 800507e:	483d      	ldr	r0, [pc, #244]	; (8005174 <mem_manage_fault+0x104>)
{
 8005080:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8005082:	2402      	movs	r4, #2
 8005084:	aa03      	add	r2, sp, #12
 8005086:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800508a:	9403      	str	r4, [sp, #12]
 800508c:	f00f f92c 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <mem_manage_fault+0x108>)
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	06d8      	lsls	r0, r3, #27
 8005096:	d508      	bpl.n	80050aa <mem_manage_fault+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8005098:	4b38      	ldr	r3, [pc, #224]	; (800517c <mem_manage_fault+0x10c>)
 800509a:	4836      	ldr	r0, [pc, #216]	; (8005174 <mem_manage_fault+0x104>)
 800509c:	aa03      	add	r2, sp, #12
 800509e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80050a2:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80050a6:	f00f f91f 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80050aa:	4b33      	ldr	r3, [pc, #204]	; (8005178 <mem_manage_fault+0x108>)
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	0719      	lsls	r1, r3, #28
 80050b0:	d509      	bpl.n	80050c6 <mem_manage_fault+0x56>
		PR_FAULT_INFO("  Unstacking error");
 80050b2:	4b33      	ldr	r3, [pc, #204]	; (8005180 <mem_manage_fault+0x110>)
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	482f      	ldr	r0, [pc, #188]	; (8005174 <mem_manage_fault+0x104>)
 80050b8:	2302      	movs	r3, #2
 80050ba:	aa03      	add	r2, sp, #12
 80050bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80050c0:	9303      	str	r3, [sp, #12]
 80050c2:	f00f f911 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80050c6:	4c2c      	ldr	r4, [pc, #176]	; (8005178 <mem_manage_fault+0x108>)
 80050c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050ca:	079a      	lsls	r2, r3, #30
 80050cc:	d421      	bmi.n	8005112 <mem_manage_fault+0xa2>
	uint32_t mmfar = -EINVAL;
 80050ce:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <mem_manage_fault+0x108>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	07d8      	lsls	r0, r3, #31
 80050d8:	d509      	bpl.n	80050ee <mem_manage_fault+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
 80050da:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <mem_manage_fault+0x114>)
 80050dc:	9304      	str	r3, [sp, #16]
 80050de:	4825      	ldr	r0, [pc, #148]	; (8005174 <mem_manage_fault+0x104>)
 80050e0:	2302      	movs	r3, #2
 80050e2:	aa03      	add	r2, sp, #12
 80050e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80050e8:	9303      	str	r3, [sp, #12]
 80050ea:	f00f f8fd 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80050ee:	4b22      	ldr	r3, [pc, #136]	; (8005178 <mem_manage_fault+0x108>)
 80050f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f2:	06d1      	lsls	r1, r2, #27
 80050f4:	d42e      	bmi.n	8005154 <mem_manage_fault+0xe4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80050f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80050f8:	0792      	lsls	r2, r2, #30
 80050fa:	d42b      	bmi.n	8005154 <mem_manage_fault+0xe4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80050fc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80050fe:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <mem_manage_fault+0x108>)
 8005100:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005102:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8005106:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8005108:	2300      	movs	r3, #0
 800510a:	702b      	strb	r3, [r5, #0]
}
 800510c:	b006      	add	sp, #24
 800510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
 8005112:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <mem_manage_fault+0x118>)
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	4817      	ldr	r0, [pc, #92]	; (8005174 <mem_manage_fault+0x104>)
 8005118:	2302      	movs	r3, #2
 800511a:	aa03      	add	r2, sp, #12
 800511c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005120:	9303      	str	r3, [sp, #12]
 8005122:	f00f f8e1 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 8005126:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8005128:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800512a:	061b      	lsls	r3, r3, #24
 800512c:	d5cf      	bpl.n	80050ce <mem_manage_fault+0x5e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <mem_manage_fault+0x11c>)
 8005130:	4810      	ldr	r0, [pc, #64]	; (8005174 <mem_manage_fault+0x104>)
 8005132:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8005136:	aa03      	add	r2, sp, #12
 8005138:	2303      	movs	r3, #3
 800513a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800513e:	9303      	str	r3, [sp, #12]
 8005140:	f00f f8d2 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
 8005144:	f1b8 0f00 	cmp.w	r8, #0
 8005148:	d0c3      	beq.n	80050d2 <mem_manage_fault+0x62>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800514a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800514c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005150:	62a3      	str	r3, [r4, #40]	; 0x28
 8005152:	e7be      	b.n	80050d2 <mem_manage_fault+0x62>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	051b      	lsls	r3, r3, #20
 8005158:	d5d0      	bpl.n	80050fc <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800515a:	4639      	mov	r1, r7
 800515c:	4630      	mov	r0, r6
 800515e:	f7ff fe3b 	bl	8004dd8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8005162:	2800      	cmp	r0, #0
 8005164:	d0ca      	beq.n	80050fc <mem_manage_fault+0x8c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005166:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800516a:	2002      	movs	r0, #2
 800516c:	e7c7      	b.n	80050fe <mem_manage_fault+0x8e>
 800516e:	bf00      	nop
 8005170:	0801b7de 	.word	0x0801b7de
 8005174:	0801a008 	.word	0x0801a008
 8005178:	e000ed00 	.word	0xe000ed00
 800517c:	0801b7f4 	.word	0x0801b7f4
 8005180:	0801b69d 	.word	0x0801b69d
 8005184:	0801b855 	.word	0x0801b855
 8005188:	0801b827 	.word	0x0801b827
 800518c:	0801b83f 	.word	0x0801b83f

08005190 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8005190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8005192:	ab0b      	add	r3, sp, #44	; 0x2c
 8005194:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8005196:	9303      	str	r3, [sp, #12]
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800519a:	9302      	str	r3, [sp, #8]
 800519c:	2300      	movs	r3, #0
 800519e:	e9cd 3300 	strd	r3, r3, [sp]
 80051a2:	2201      	movs	r2, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fbd9 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 80051aa:	b007      	add	sp, #28
 80051ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80051b0:	0801b874 	.word	0x0801b874

080051b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80051b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80051b8:	4b70      	ldr	r3, [pc, #448]	; (800537c <z_arm_fault+0x1c8>)
 80051ba:	685e      	ldr	r6, [r3, #4]
{
 80051bc:	b091      	sub	sp, #68	; 0x44
 80051be:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80051c0:	f3c6 0408 	ubfx	r4, r6, #0, #9
 80051c4:	2700      	movs	r7, #0
 80051c6:	f387 8811 	msr	BASEPRI, r7
 80051ca:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80051ce:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80051d2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80051d6:	d10d      	bne.n	80051f4 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80051d8:	f002 030c 	and.w	r3, r2, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d10b      	bne.n	80051f8 <z_arm_fault+0x44>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80051e0:	4b67      	ldr	r3, [pc, #412]	; (8005380 <z_arm_fault+0x1cc>)
 80051e2:	930c      	str	r3, [sp, #48]	; 0x30
 80051e4:	4867      	ldr	r0, [pc, #412]	; (8005384 <z_arm_fault+0x1d0>)
 80051e6:	2302      	movs	r3, #2
 80051e8:	aa0b      	add	r2, sp, #44	; 0x2c
 80051ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80051ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f0:	f00f f87a 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
		return NULL;
 80051f4:	463d      	mov	r5, r7
 80051f6:	e003      	b.n	8005200 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80051f8:	0712      	lsls	r2, r2, #28
 80051fa:	d401      	bmi.n	8005200 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
 80051fc:	4605      	mov	r5, r0
			*nested_exc = true;
 80051fe:	2701      	movs	r7, #1
	*recoverable = false;
 8005200:	2300      	movs	r3, #0
 8005202:	f88d 301f 	strb.w	r3, [sp, #31]
	switch (fault) {
 8005206:	1ee3      	subs	r3, r4, #3
 8005208:	2b09      	cmp	r3, #9
 800520a:	f200 809c 	bhi.w	8005346 <z_arm_fault+0x192>
 800520e:	e8df f003 	tbb	[pc, r3]
 8005212:	8d05      	.short	0x8d05
 8005214:	9a9a8a91 	.word	0x9a9a8a91
 8005218:	959a9a9a 	.word	0x959a9a9a
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800521c:	4e57      	ldr	r6, [pc, #348]	; (800537c <z_arm_fault+0x1c8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
 800521e:	4b5a      	ldr	r3, [pc, #360]	; (8005388 <z_arm_fault+0x1d4>)
 8005220:	4858      	ldr	r0, [pc, #352]	; (8005384 <z_arm_fault+0x1d0>)
 8005222:	930c      	str	r3, [sp, #48]	; 0x30
 8005224:	f04f 0802 	mov.w	r8, #2
 8005228:	aa0b      	add	r2, sp, #44	; 0x2c
 800522a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800522e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8005232:	f00f f859 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8005236:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
 8005238:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800523c:	ea14 0408 	ands.w	r4, r4, r8
	*recoverable = false;
 8005240:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8005244:	d00a      	beq.n	800525c <z_arm_fault+0xa8>
		PR_EXC("  Bus fault on vector table read");
 8005246:	4b51      	ldr	r3, [pc, #324]	; (800538c <z_arm_fault+0x1d8>)
 8005248:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
	PR_FAULT_INFO(
 800524c:	484d      	ldr	r0, [pc, #308]	; (8005384 <z_arm_fault+0x1d0>)
 800524e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005250:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8005254:	f00f f848 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005258:	2400      	movs	r4, #0
}
 800525a:	e00b      	b.n	8005274 <z_arm_fault+0xc0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800525c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800525e:	2b00      	cmp	r3, #0
 8005260:	da28      	bge.n	80052b4 <z_arm_fault+0x100>
		PR_EXC("  Debug event");
 8005262:	4b4b      	ldr	r3, [pc, #300]	; (8005390 <z_arm_fault+0x1dc>)
 8005264:	4847      	ldr	r0, [pc, #284]	; (8005384 <z_arm_fault+0x1d0>)
 8005266:	aa0b      	add	r2, sp, #44	; 0x2c
 8005268:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800526c:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
 8005270:	f00f f83a 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8005274:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005278:	b9cb      	cbnz	r3, 80052ae <z_arm_fault+0xfa>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800527a:	aa08      	add	r2, sp, #32
 800527c:	f105 0620 	add.w	r6, r5, #32
 8005280:	6828      	ldr	r0, [r5, #0]
 8005282:	6869      	ldr	r1, [r5, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	c303      	stmia	r3!, {r0, r1}
 8005288:	3508      	adds	r5, #8
 800528a:	42b5      	cmp	r5, r6
 800528c:	461a      	mov	r2, r3
 800528e:	d1f7      	bne.n	8005280 <z_arm_fault+0xcc>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8005290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005292:	2f00      	cmp	r7, #0
 8005294:	d06c      	beq.n	8005370 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8005296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800529a:	b922      	cbnz	r2, 80052a6 <z_arm_fault+0xf2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800529c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80052a0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80052a4:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
 80052a6:	a908      	add	r1, sp, #32
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7ff fc6f 	bl	8004b8c <z_arm_fatal_error>
}
 80052ae:	b011      	add	sp, #68	; 0x44
 80052b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80052b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	d5dc      	bpl.n	8005274 <z_arm_fault+0xc0>
		PR_EXC("  Fault escalation (see below)");
 80052ba:	4b36      	ldr	r3, [pc, #216]	; (8005394 <z_arm_fault+0x1e0>)
 80052bc:	4831      	ldr	r0, [pc, #196]	; (8005384 <z_arm_fault+0x1d0>)
 80052be:	aa0b      	add	r2, sp, #44	; 0x2c
 80052c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80052c4:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
 80052c8:	f00f f80e 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
 80052cc:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80052ce:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80052d2:	f64d 7302 	movw	r3, #57090	; 0xdf02
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d00a      	beq.n	80052f0 <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
 80052da:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80052de:	b1ab      	cbz	r3, 800530c <z_arm_fault+0x158>
			reason = mem_manage_fault(esf, 1, recoverable);
 80052e0:	f10d 021f 	add.w	r2, sp, #31
 80052e4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80052e6:	4628      	mov	r0, r5
 80052e8:	f7ff fec2 	bl	8005070 <mem_manage_fault>
 80052ec:	4604      	mov	r4, r0
		break;
 80052ee:	e7c1      	b.n	8005274 <z_arm_fault+0xc0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	4a29      	ldr	r2, [pc, #164]	; (8005398 <z_arm_fault+0x1e4>)
 80052f4:	4823      	ldr	r0, [pc, #140]	; (8005384 <z_arm_fault+0x1d0>)
 80052f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80052fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80052fe:	2303      	movs	r3, #3
 8005300:	aa0b      	add	r2, sp, #44	; 0x2c
 8005302:	930b      	str	r3, [sp, #44]	; 0x2c
 8005304:	f00e fff0 	bl	80142e8 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
 8005308:	682c      	ldr	r4, [r5, #0]
 800530a:	e7b3      	b.n	8005274 <z_arm_fault+0xc0>
		} else if (SCB_BFSR != 0) {
 800530c:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8005310:	b12b      	cbz	r3, 800531e <z_arm_fault+0x16a>
			reason = bus_fault(esf, 1, recoverable);
 8005312:	f10d 011f 	add.w	r1, sp, #31
 8005316:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8005318:	f7ff fdac 	bl	8004e74 <bus_fault.constprop.0>
 800531c:	e7e6      	b.n	80052ec <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
 800531e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0a6      	beq.n	8005274 <z_arm_fault+0xc0>
		reason = usage_fault(esf);
 8005326:	f7ff fe27 	bl	8004f78 <usage_fault.constprop.0>
 800532a:	e7df      	b.n	80052ec <z_arm_fault+0x138>
		reason = mem_manage_fault(esf, 0, recoverable);
 800532c:	f10d 021f 	add.w	r2, sp, #31
 8005330:	2100      	movs	r1, #0
 8005332:	e7d8      	b.n	80052e6 <z_arm_fault+0x132>
		reason = bus_fault(esf, 0, recoverable);
 8005334:	f10d 011f 	add.w	r1, sp, #31
 8005338:	2000      	movs	r0, #0
 800533a:	e7ed      	b.n	8005318 <z_arm_fault+0x164>
	PR_FAULT_INFO(
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <z_arm_fault+0x1e8>)
 800533e:	930c      	str	r3, [sp, #48]	; 0x30
 8005340:	2302      	movs	r3, #2
 8005342:	930b      	str	r3, [sp, #44]	; 0x2c
 8005344:	e782      	b.n	800524c <z_arm_fault+0x98>
	PR_FAULT_INFO("***** %s %d) *****",
 8005346:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <z_arm_fault+0x1ec>)
 8005348:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <z_arm_fault+0x1f0>)
 800534a:	490e      	ldr	r1, [pc, #56]	; (8005384 <z_arm_fault+0x1d0>)
 800534c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 8005350:	bf18      	it	ne
 8005352:	4613      	movne	r3, r2
 8005354:	3c10      	subs	r4, #16
 8005356:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800535a:	2400      	movs	r4, #0
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <z_arm_fault+0x1f4>)
 800535e:	9302      	str	r3, [sp, #8]
 8005360:	e9cd 4400 	strd	r4, r4, [sp]
 8005364:	4623      	mov	r3, r4
 8005366:	2201      	movs	r2, #1
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff ff11 	bl	8005190 <z_log_msg2_runtime_create.constprop.0>
}
 800536e:	e781      	b.n	8005274 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8005370:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	e794      	b.n	80052a4 <z_arm_fault+0xf0>
 800537a:	bf00      	nop
 800537c:	e000ed00 	.word	0xe000ed00
 8005380:	0801b8b5 	.word	0x0801b8b5
 8005384:	0801a008 	.word	0x0801a008
 8005388:	0801b8e0 	.word	0x0801b8e0
 800538c:	0801b8f7 	.word	0x0801b8f7
 8005390:	0801b918 	.word	0x0801b918
 8005394:	0801b926 	.word	0x0801b926
 8005398:	0801b945 	.word	0x0801b945
 800539c:	0801b961 	.word	0x0801b961
 80053a0:	0801b89c 	.word	0x0801b89c
 80053a4:	0801b887 	.word	0x0801b887
 80053a8:	0801b874 	.word	0x0801b874

080053ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80053ac:	4a02      	ldr	r2, [pc, #8]	; (80053b8 <z_arm_fault_init+0xc>)
 80053ae:	6953      	ldr	r3, [r2, #20]
 80053b0:	f043 0310 	orr.w	r3, r3, #16
 80053b4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80053b6:	4770      	bx	lr
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80053bc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80053c0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80053c4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80053c6:	4672      	mov	r2, lr
	bl z_arm_fault
 80053c8:	f7ff fef4 	bl	80051b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80053cc:	bd01      	pop	{r0, pc}
 80053ce:	bf00      	nop

080053d0 <z_arm_interrupt_init>:
 80053d0:	4804      	ldr	r0, [pc, #16]	; (80053e4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	2110      	movs	r1, #16
 80053d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80053d8:	3301      	adds	r3, #1
 80053da:	2b3e      	cmp	r3, #62	; 0x3e
 80053dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80053e0:	d1f9      	bne.n	80053d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80053e2:	4770      	bx	lr
 80053e4:	e000e100 	.word	0xe000e100

080053e8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80053e8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80053ea:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80053ee:	4808      	ldr	r0, [pc, #32]	; (8005410 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80053f0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80053f4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80053f6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80053fa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80053fe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8005400:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8005402:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8005406:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800540a:	f7ff fc5f 	bl	8004ccc <z_arm_prep_c>
 800540e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8005410:	20009360 	.word	0x20009360

08005414 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8005414:	4b06      	ldr	r3, [pc, #24]	; (8005430 <z_impl_k_thread_abort+0x1c>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4283      	cmp	r3, r0
 800541a:	d107      	bne.n	800542c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8005420:	b123      	cbz	r3, 800542c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005422:	4a04      	ldr	r2, [pc, #16]	; (8005434 <z_impl_k_thread_abort+0x20>)
 8005424:	6853      	ldr	r3, [r2, #4]
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 800542c:	f00b bb32 	b.w	8010a94 <z_thread_abort>
 8005430:	20002300 	.word	0x20002300
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <z_arm_configure_static_mpu_regions+0xc>)
 800543a:	4a03      	ldr	r2, [pc, #12]	; (8005448 <z_arm_configure_static_mpu_regions+0x10>)
 800543c:	4803      	ldr	r0, [pc, #12]	; (800544c <z_arm_configure_static_mpu_regions+0x14>)
 800543e:	2101      	movs	r1, #1
 8005440:	f000 b886 	b.w	8005550 <arm_core_mpu_configure_static_mpu_regions>
 8005444:	20010000 	.word	0x20010000
 8005448:	20000000 	.word	0x20000000
 800544c:	0801a208 	.word	0x0801a208

08005450 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8005450:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8005454:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 8005456:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8005458:	4a04      	ldr	r2, [pc, #16]	; (800546c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800545a:	2120      	movs	r1, #32
 800545c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8005460:	4618      	mov	r0, r3
 8005462:	2101      	movs	r1, #1
 8005464:	f000 b87e 	b.w	8005564 <arm_core_mpu_configure_dynamic_mpu_regions>
 8005468:	20001064 	.word	0x20001064
 800546c:	150b0000 	.word	0x150b0000

08005470 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8005470:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8005472:	4f28      	ldr	r7, [pc, #160]	; (8005514 <mpu_configure_regions+0xa4>)
 8005474:	b087      	sub	sp, #28
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8005476:	2600      	movs	r6, #0
 8005478:	428e      	cmp	r6, r1
 800547a:	da16      	bge.n	80054aa <mpu_configure_regions+0x3a>
		if (regions[i].size == 0U) {
 800547c:	6844      	ldr	r4, [r0, #4]
 800547e:	2c00      	cmp	r4, #0
 8005480:	d045      	beq.n	800550e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8005482:	b1db      	cbz	r3, 80054bc <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8005484:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8005488:	ea14 0f0c 	tst.w	r4, ip
 800548c:	d010      	beq.n	80054b0 <mpu_configure_regions+0x40>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 800548e:	4b22      	ldr	r3, [pc, #136]	; (8005518 <mpu_configure_regions+0xa8>)
 8005490:	e9cd 3604 	strd	r3, r6, [sp, #16]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8005494:	2303      	movs	r3, #3
 8005496:	9303      	str	r3, [sp, #12]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8005498:	4820      	ldr	r0, [pc, #128]	; (800551c <mpu_configure_regions+0xac>)
 800549a:	aa03      	add	r2, sp, #12
 800549c:	2300      	movs	r3, #0
 800549e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80054a2:	f00e fe96 	bl	80141d2 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80054a6:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80054aa:	4610      	mov	r0, r2
 80054ac:	b007      	add	sp, #28
 80054ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
 80054b0:	2c1f      	cmp	r4, #31
 80054b2:	d9ec      	bls.n	800548e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
 80054b4:	6805      	ldr	r5, [r0, #0]
		&&
 80054b6:	ea1c 0f05 	tst.w	ip, r5
 80054ba:	d1e8      	bne.n	800548e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80054bc:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80054be:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80054c0:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80054c4:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 80054c6:	d910      	bls.n	80054ea <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
 80054c8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80054cc:	d80f      	bhi.n	80054ee <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80054ce:	3c01      	subs	r4, #1
 80054d0:	fab4 f484 	clz	r4, r4
 80054d4:	f1c4 041f 	rsb	r4, r4, #31
 80054d8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80054da:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80054dc:	ea4c 0404 	orr.w	r4, ip, r4
 80054e0:	d907      	bls.n	80054f2 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <mpu_configure_regions+0xb0>)
 80054e4:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80054e8:	e7d4      	b.n	8005494 <mpu_configure_regions+0x24>
		return REGION_32B;
 80054ea:	2408      	movs	r4, #8
 80054ec:	e7f5      	b.n	80054da <mpu_configure_regions+0x6a>
		return REGION_4G;
 80054ee:	243e      	movs	r4, #62	; 0x3e
 80054f0:	e7f3      	b.n	80054da <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80054f2:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 80054f6:	4315      	orrs	r5, r2
 80054f8:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80054fc:	f044 0401 	orr.w	r4, r4, #1
 8005500:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005504:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8005508:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800550a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 800550e:	3601      	adds	r6, #1
 8005510:	300c      	adds	r0, #12
 8005512:	e7b1      	b.n	8005478 <mpu_configure_regions+0x8>
 8005514:	e000ed00 	.word	0xe000ed00
 8005518:	0801b989 	.word	0x0801b989
 800551c:	08019ff8 	.word	0x08019ff8
 8005520:	0801b9ac 	.word	0x0801b9ac

08005524 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8005524:	4b04      	ldr	r3, [pc, #16]	; (8005538 <arm_core_mpu_enable+0x14>)
 8005526:	2205      	movs	r2, #5
 8005528:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 800552c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005530:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	e000ed00 	.word	0xe000ed00

0800553c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800553c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8005540:	4b02      	ldr	r3, [pc, #8]	; (800554c <arm_core_mpu_disable+0x10>)
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	e000ed00 	.word	0xe000ed00

08005550 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8005550:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8005552:	4c03      	ldr	r4, [pc, #12]	; (8005560 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8005554:	2301      	movs	r3, #1
 8005556:	7822      	ldrb	r2, [r4, #0]
 8005558:	f7ff ff8a 	bl	8005470 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800555c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 800555e:	bd10      	pop	{r4, pc}
 8005560:	20002572 	.word	0x20002572

08005564 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8005564:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8005566:	4a09      	ldr	r2, [pc, #36]	; (800558c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8005568:	2300      	movs	r3, #0
 800556a:	7812      	ldrb	r2, [r2, #0]
 800556c:	f7ff ff80 	bl	8005470 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8005570:	f110 0f16 	cmn.w	r0, #22
 8005574:	d003      	beq.n	800557e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8005578:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800557a:	2807      	cmp	r0, #7
 800557c:	dd00      	ble.n	8005580 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 800557e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8005580:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 8005584:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005588:	3001      	adds	r0, #1
 800558a:	e7f6      	b.n	800557a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 800558c:	20002572 	.word	0x20002572
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8005594:	4914      	ldr	r1, [pc, #80]	; (80055e8 <z_arm_mpu_init+0x54>)
 8005596:	6808      	ldr	r0, [r1, #0]
 8005598:	2808      	cmp	r0, #8
{
 800559a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 800559c:	d821      	bhi.n	80055e2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800559e:	f7ff ffcd 	bl	800553c <arm_core_mpu_disable>
 80055a2:	4c12      	ldr	r4, [pc, #72]	; (80055ec <z_arm_mpu_init+0x58>)
 80055a4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80055a6:	2200      	movs	r2, #0
 80055a8:	4290      	cmp	r0, r2
 80055aa:	f101 010c 	add.w	r1, r1, #12
 80055ae:	d105      	bne.n	80055bc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <z_arm_mpu_init+0x5c>)
 80055b2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80055b4:	f7ff ffb6 	bl	8005524 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80055b8:	2000      	movs	r0, #0
}
 80055ba:	bd10      	pop	{r4, pc}
 80055bc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80055c0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80055c4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80055ce:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80055d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80055de:	3201      	adds	r2, #1
 80055e0:	e7e2      	b.n	80055a8 <z_arm_mpu_init+0x14>
		return -1;
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e6:	e7e8      	b.n	80055ba <z_arm_mpu_init+0x26>
 80055e8:	0801a214 	.word	0x0801a214
 80055ec:	e000ed00 	.word	0xe000ed00
 80055f0:	20002572 	.word	0x20002572

080055f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80055f4:	4b01      	ldr	r3, [pc, #4]	; (80055fc <__stdout_hook_install+0x8>)
 80055f6:	6018      	str	r0, [r3, #0]
}
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000088 	.word	0x20000088

08005600 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 8005602:	4f08      	ldr	r7, [pc, #32]	; (8005624 <z_impl_zephyr_read_stdin+0x24>)
{
 8005604:	4606      	mov	r6, r0
 8005606:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 8005608:	2400      	movs	r4, #0
 800560a:	42ac      	cmp	r4, r5
 800560c:	da08      	bge.n	8005620 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8005612:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 8005614:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
 8005616:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800561a:	d001      	beq.n	8005620 <z_impl_zephyr_read_stdin+0x20>
 800561c:	280d      	cmp	r0, #13
 800561e:	d1f4      	bne.n	800560a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 8005620:	4620      	mov	r0, r4
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005624:	20000084 	.word	0x20000084

08005628 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	4f0a      	ldr	r7, [pc, #40]	; (8005654 <z_impl_zephyr_write_stdout+0x2c>)
 800562c:	460d      	mov	r5, r1
 800562e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8005630:	f1c0 0401 	rsb	r4, r0, #1
 8005634:	19a3      	adds	r3, r4, r6
 8005636:	429d      	cmp	r5, r3
 8005638:	dc01      	bgt.n	800563e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 800563a:	4628      	mov	r0, r5
 800563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 800563e:	7873      	ldrb	r3, [r6, #1]
 8005640:	2b0a      	cmp	r3, #10
 8005642:	d102      	bne.n	800564a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	200d      	movs	r0, #13
 8005648:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8005650:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8005652:	e7ef      	b.n	8005634 <z_impl_zephyr_write_stdout+0xc>
 8005654:	20000088 	.word	0x20000088

08005658 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8005658:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 800565a:	4c07      	ldr	r4, [pc, #28]	; (8005678 <_sbrk+0x20>)
 800565c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 800565e:	18c2      	adds	r2, r0, r3
 8005660:	4806      	ldr	r0, [pc, #24]	; (800567c <_sbrk+0x24>)
 8005662:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 8005666:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800566a:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 800566c:	bf3a      	itte	cc
 800566e:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 8005670:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8005672:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8005676:	bd10      	pop	{r4, pc}
 8005678:	20001070 	.word	0x20001070
 800567c:	2000c4f0 	.word	0x2000c4f0

08005680 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 8005680:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8005682:	211d      	movs	r1, #29
 8005684:	4804      	ldr	r0, [pc, #16]	; (8005698 <__chk_fail+0x18>)
 8005686:	f7ff ffcf 	bl	8005628 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
 800568a:	4040      	eors	r0, r0
 800568c:	f380 8811 	msr	BASEPRI, r0
 8005690:	f04f 0003 	mov.w	r0, #3
 8005694:	df02      	svc	2
	CODE_UNREACHABLE;
 8005696:	bf00      	nop
 8005698:	0801b9d2 	.word	0x0801b9d2

0800569c <getBatteryLevelLocal>:
	/* Do not change the default value */
}

static uint8_t getBatteryLevelLocal(void)
{
	if (getBatteryLevelUser != NULL) {
 800569c:	4b02      	ldr	r3, [pc, #8]	; (80056a8 <getBatteryLevelLocal+0xc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	b103      	cbz	r3, 80056a4 <getBatteryLevelLocal+0x8>
		return getBatteryLevelUser();
 80056a2:	4718      	bx	r3
	}

	return 255;
}
 80056a4:	20ff      	movs	r0, #255	; 0xff
 80056a6:	4770      	bx	lr
 80056a8:	20001080 	.word	0x20001080

080056ac <lorawan_init>:

	return 0;
}

static int lorawan_init(const struct device *dev)
{
 80056ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
 80056ae:	4b14      	ldr	r3, [pc, #80]	; (8005700 <lorawan_init+0x54>)
	LoRaMacStatus_t status;

	sys_slist_init(&dl_callbacks);

	macPrimitives.MacMcpsConfirm = McpsConfirm;
 80056b0:	4814      	ldr	r0, [pc, #80]	; (8005704 <lorawan_init+0x58>)
	macPrimitives.MacMcpsIndication = McpsIndication;
	macPrimitives.MacMlmeConfirm = MlmeConfirm;
	macPrimitives.MacMlmeIndication = MlmeIndication;
	macCallbacks.GetBatteryLevel = getBatteryLevelLocal;
 80056b2:	4915      	ldr	r1, [pc, #84]	; (8005708 <lorawan_init+0x5c>)
 80056b4:	2400      	movs	r4, #0
	list->tail = NULL;
 80056b6:	e9c3 4400 	strd	r4, r4, [r3]
	macPrimitives.MacMcpsConfirm = McpsConfirm;
 80056ba:	4b14      	ldr	r3, [pc, #80]	; (800570c <lorawan_init+0x60>)
 80056bc:	6003      	str	r3, [r0, #0]
	macPrimitives.MacMcpsIndication = McpsIndication;
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <lorawan_init+0x64>)
 80056c0:	6043      	str	r3, [r0, #4]
	macPrimitives.MacMlmeConfirm = MlmeConfirm;
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <lorawan_init+0x68>)
 80056c4:	6083      	str	r3, [r0, #8]
	macPrimitives.MacMlmeIndication = MlmeIndication;
 80056c6:	4b14      	ldr	r3, [pc, #80]	; (8005718 <lorawan_init+0x6c>)
 80056c8:	60c3      	str	r3, [r0, #12]
	macCallbacks.GetBatteryLevel = getBatteryLevelLocal;
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <lorawan_init+0x70>)
	macCallbacks.GetTemperatureLevel = NULL;
	macCallbacks.NvmDataChange = NULL;
 80056cc:	608c      	str	r4, [r1, #8]
	macCallbacks.GetTemperatureLevel = NULL;
 80056ce:	e9c1 3400 	strd	r3, r4, [r1]
	macCallbacks.MacProcessNotify = OnMacProcessNotify;

	status = LoRaMacInitialization(&macPrimitives, &macCallbacks,
 80056d2:	2208      	movs	r2, #8
	macCallbacks.MacProcessNotify = OnMacProcessNotify;
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <lorawan_init+0x74>)
 80056d6:	60cb      	str	r3, [r1, #12]
	status = LoRaMacInitialization(&macPrimitives, &macCallbacks,
 80056d8:	f004 f848 	bl	800976c <LoRaMacInitialization>
				       LORAWAN_REGION);
	if (status != LORAMAC_STATUS_OK) {
 80056dc:	b170      	cbz	r0, 80056fc <lorawan_init+0x50>
		LOG_ERR("LoRaMacInitialization failed: %s",
 80056de:	f000 fabf 	bl	8005c60 <lorawan_status2str>
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <lorawan_init+0x78>)
 80056e4:	9003      	str	r0, [sp, #12]
 80056e6:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80056ea:	4620      	mov	r0, r4
 80056ec:	490e      	ldr	r1, [pc, #56]	; (8005728 <lorawan_init+0x7c>)
 80056ee:	9400      	str	r4, [sp, #0]
 80056f0:	4623      	mov	r3, r4
 80056f2:	2201      	movs	r2, #1
 80056f4:	f00e fe38 	bl	8014368 <z_log_msg2_runtime_create.constprop.0>
			lorawan_status2str(status));
		return -EINVAL;
 80056f8:	f06f 0015 	mvn.w	r0, #21
	}

	LOG_DBG("LoRaMAC Initialized");

	return 0;
}
 80056fc:	b004      	add	sp, #16
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	20001074 	.word	0x20001074
 8005704:	20001094 	.word	0x20001094
 8005708:	20001084 	.word	0x20001084
 800570c:	0800580d 	.word	0x0800580d
 8005710:	08005789 	.word	0x08005789
 8005714:	08005861 	.word	0x08005861
 8005718:	08014363 	.word	0x08014363
 800571c:	0800569d 	.word	0x0800569d
 8005720:	08014365 	.word	0x08014365
 8005724:	0801b9ff 	.word	0x0801b9ff
 8005728:	08019fe8 	.word	0x08019fe8

0800572c <datarate_observe>:
{
 800572c:	b530      	push	{r4, r5, lr}
	if ((mibGet.Param.ChannelsDatarate != current_datarate) ||
 800572e:	4c12      	ldr	r4, [pc, #72]	; (8005778 <datarate_observe+0x4c>)
{
 8005730:	b091      	sub	sp, #68	; 0x44
	mibGet.Type = MIB_CHANNELS_DATARATE;
 8005732:	232d      	movs	r3, #45	; 0x2d
{
 8005734:	4605      	mov	r5, r0
	LoRaMacMibGetRequestConfirm(&mibGet);
 8005736:	a807      	add	r0, sp, #28
	mibGet.Type = MIB_CHANNELS_DATARATE;
 8005738:	f88d 301c 	strb.w	r3, [sp, #28]
	LoRaMacMibGetRequestConfirm(&mibGet);
 800573c:	f004 fa28 	bl	8009b90 <LoRaMacMibGetRequestConfirm>
	if ((mibGet.Param.ChannelsDatarate != current_datarate) ||
 8005740:	f99d 3020 	ldrsb.w	r3, [sp, #32]
 8005744:	7822      	ldrb	r2, [r4, #0]
 8005746:	4293      	cmp	r3, r2
 8005748:	d100      	bne.n	800574c <datarate_observe+0x20>
 800574a:	b195      	cbz	r5, 8005772 <datarate_observe+0x46>
		current_datarate = mibGet.Param.ChannelsDatarate;
 800574c:	b2d8      	uxtb	r0, r3
		if (dr_change_cb) {
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <datarate_observe+0x50>)
		current_datarate = mibGet.Param.ChannelsDatarate;
 8005750:	7020      	strb	r0, [r4, #0]
		if (dr_change_cb) {
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	b103      	cbz	r3, 8005758 <datarate_observe+0x2c>
			dr_change_cb(current_datarate);
 8005756:	4798      	blx	r3
		LOG_INF("Datarate changed: DR_%d", current_datarate);
 8005758:	7823      	ldrb	r3, [r4, #0]
 800575a:	4a09      	ldr	r2, [pc, #36]	; (8005780 <datarate_observe+0x54>)
 800575c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005760:	2303      	movs	r3, #3
 8005762:	9303      	str	r3, [sp, #12]
 8005764:	4807      	ldr	r0, [pc, #28]	; (8005784 <datarate_observe+0x58>)
 8005766:	2300      	movs	r3, #0
 8005768:	aa03      	add	r2, sp, #12
 800576a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800576e:	f00e fd30 	bl	80141d2 <z_impl_z_log_msg2_static_create>
}
 8005772:	b011      	add	sp, #68	; 0x44
 8005774:	bd30      	pop	{r4, r5, pc}
 8005776:	bf00      	nop
 8005778:	20002573 	.word	0x20002573
 800577c:	2000107c 	.word	0x2000107c
 8005780:	0801ba20 	.word	0x0801ba20
 8005784:	08019fe8 	.word	0x08019fe8

08005788 <McpsIndication>:
{
 8005788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800578a:	4605      	mov	r5, r0
	if (mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 800578c:	7840      	ldrb	r0, [r0, #1]
{
 800578e:	b085      	sub	sp, #20
	if (mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8005790:	b170      	cbz	r0, 80057b0 <McpsIndication+0x28>
		LOG_ERR("McpsIndication failed : %s",
 8005792:	f000 fa71 	bl	8005c78 <lorawan_eventinfo2str>
 8005796:	4b19      	ldr	r3, [pc, #100]	; (80057fc <McpsIndication+0x74>)
 8005798:	9302      	str	r3, [sp, #8]
 800579a:	2300      	movs	r3, #0
 800579c:	9003      	str	r0, [sp, #12]
 800579e:	e9cd 3300 	strd	r3, r3, [sp]
 80057a2:	4917      	ldr	r1, [pc, #92]	; (8005800 <McpsIndication+0x78>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	4618      	mov	r0, r3
 80057a8:	f00e fdde 	bl	8014368 <z_log_msg2_runtime_create.constprop.0>
}
 80057ac:	b005      	add	sp, #20
 80057ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (lorawan_adr_enable) {
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <McpsIndication+0x7c>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	b10b      	cbz	r3, 80057ba <McpsIndication+0x32>
		datarate_observe(false);
 80057b6:	f7ff ffb9 	bl	800572c <datarate_observe>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <McpsIndication+0x80>)
 80057bc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
 80057be:	2c00      	cmp	r4, #0
 80057c0:	d0f4      	beq.n	80057ac <McpsIndication+0x24>
 80057c2:	3c08      	subs	r4, #8
		if ((cb->port == LW_RECV_PORT_ANY) ||
 80057c4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80057c8:	8823      	ldrh	r3, [r4, #0]
		    (cb->port == mcpsIndication->Port)) {
 80057ca:	78e8      	ldrb	r0, [r5, #3]
		if ((cb->port == LW_RECV_PORT_ANY) ||
 80057cc:	42bb      	cmp	r3, r7
 80057ce:	d001      	beq.n	80057d4 <McpsIndication+0x4c>
 80057d0:	4283      	cmp	r3, r0
 80057d2:	d10d      	bne.n	80057f0 <McpsIndication+0x68>
			cb->cb(mcpsIndication->Port,
 80057d4:	68ab      	ldr	r3, [r5, #8]
 80057d6:	7969      	ldrb	r1, [r5, #5]
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	7b2b      	ldrb	r3, [r5, #12]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	3900      	subs	r1, #0
 80057e0:	6866      	ldr	r6, [r4, #4]
 80057e2:	f995 3010 	ldrsb.w	r3, [r5, #16]
 80057e6:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 80057ea:	bf18      	it	ne
 80057ec:	2101      	movne	r1, #1
 80057ee:	47b0      	blx	r6
	return node->next;
 80057f0:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
 80057f2:	2c00      	cmp	r4, #0
 80057f4:	d0da      	beq.n	80057ac <McpsIndication+0x24>
 80057f6:	3c08      	subs	r4, #8
 80057f8:	e7e6      	b.n	80057c8 <McpsIndication+0x40>
 80057fa:	bf00      	nop
 80057fc:	0801ba38 	.word	0x0801ba38
 8005800:	08019fe8 	.word	0x08019fe8
 8005804:	20002577 	.word	0x20002577
 8005808:	20001074 	.word	0x20001074

0800580c <McpsConfirm>:
{
 800580c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800580e:	4604      	mov	r4, r0
	if (mcpsConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8005810:	7840      	ldrb	r0, [r0, #1]
 8005812:	b160      	cbz	r0, 800582e <McpsConfirm+0x22>
		LOG_ERR("McpsRequest failed : %s",
 8005814:	f000 fa30 	bl	8005c78 <lorawan_eventinfo2str>
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <McpsConfirm+0x40>)
 800581a:	9302      	str	r3, [sp, #8]
 800581c:	2300      	movs	r3, #0
 800581e:	9003      	str	r0, [sp, #12]
 8005820:	e9cd 3300 	strd	r3, r3, [sp]
 8005824:	490a      	ldr	r1, [pc, #40]	; (8005850 <McpsConfirm+0x44>)
 8005826:	2201      	movs	r2, #1
 8005828:	4618      	mov	r0, r3
 800582a:	f00e fd9d 	bl	8014368 <z_log_msg2_runtime_create.constprop.0>
	if (lorawan_adr_enable) {
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <McpsConfirm+0x48>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b113      	cbz	r3, 800583a <McpsConfirm+0x2e>
		datarate_observe(false);
 8005834:	2000      	movs	r0, #0
 8005836:	f7ff ff79 	bl	800572c <datarate_observe>
	last_mcps_confirm_status = mcpsConfirm->Status;
 800583a:	4b07      	ldr	r3, [pc, #28]	; (8005858 <McpsConfirm+0x4c>)
 800583c:	7862      	ldrb	r2, [r4, #1]
 800583e:	701a      	strb	r2, [r3, #0]
	z_impl_k_sem_give(sem);
 8005840:	4806      	ldr	r0, [pc, #24]	; (800585c <McpsConfirm+0x50>)
}
 8005842:	b004      	add	sp, #16
 8005844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005848:	f00a bcb6 	b.w	80101b8 <z_impl_k_sem_give>
 800584c:	0801ba53 	.word	0x0801ba53
 8005850:	08019fe8 	.word	0x08019fe8
 8005854:	20002577 	.word	0x20002577
 8005858:	20002575 	.word	0x20002575
 800585c:	2000043c 	.word	0x2000043c

08005860 <MlmeConfirm>:
{
 8005860:	b530      	push	{r4, r5, lr}
	if (mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8005862:	7845      	ldrb	r5, [r0, #1]
{
 8005864:	b095      	sub	sp, #84	; 0x54
 8005866:	4604      	mov	r4, r0
	if (mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8005868:	b1ad      	cbz	r5, 8005896 <MlmeConfirm+0x36>
		LOG_ERR("MlmeConfirm failed : %s",
 800586a:	4628      	mov	r0, r5
 800586c:	f000 fa04 	bl	8005c78 <lorawan_eventinfo2str>
 8005870:	4b1a      	ldr	r3, [pc, #104]	; (80058dc <MlmeConfirm+0x7c>)
 8005872:	9302      	str	r3, [sp, #8]
 8005874:	2300      	movs	r3, #0
 8005876:	9003      	str	r0, [sp, #12]
 8005878:	e9cd 3300 	strd	r3, r3, [sp]
 800587c:	4918      	ldr	r1, [pc, #96]	; (80058e0 <MlmeConfirm+0x80>)
 800587e:	2201      	movs	r2, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f00e fd71 	bl	8014368 <z_log_msg2_runtime_create.constprop.0>
	last_mlme_confirm_status = mlmeConfirm->Status;
 8005886:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <MlmeConfirm+0x84>)
 8005888:	7862      	ldrb	r2, [r4, #1]
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	4816      	ldr	r0, [pc, #88]	; (80058e8 <MlmeConfirm+0x88>)
 800588e:	f00a fc93 	bl	80101b8 <z_impl_k_sem_give>
}
 8005892:	b015      	add	sp, #84	; 0x54
 8005894:	bd30      	pop	{r4, r5, pc}
	switch (mlmeConfirm->MlmeRequest) {
 8005896:	7803      	ldrb	r3, [r0, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d00a      	beq.n	80058b2 <MlmeConfirm+0x52>
 800589c:	2b04      	cmp	r3, #4
 800589e:	d1f2      	bne.n	8005886 <MlmeConfirm+0x26>
		LOG_INF("Link check not implemented yet!");
 80058a0:	4b12      	ldr	r3, [pc, #72]	; (80058ec <MlmeConfirm+0x8c>)
 80058a2:	930e      	str	r3, [sp, #56]	; 0x38
 80058a4:	2302      	movs	r3, #2
 80058a6:	930d      	str	r3, [sp, #52]	; 0x34
 80058a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80058ac:	462b      	mov	r3, r5
 80058ae:	aa0d      	add	r2, sp, #52	; 0x34
 80058b0:	e00f      	b.n	80058d2 <MlmeConfirm+0x72>
		mibGet.Type = MIB_DEV_ADDR;
 80058b2:	2307      	movs	r3, #7
		LoRaMacMibGetRequestConfirm(&mibGet);
 80058b4:	a80a      	add	r0, sp, #40	; 0x28
		mibGet.Type = MIB_DEV_ADDR;
 80058b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		LoRaMacMibGetRequestConfirm(&mibGet);
 80058ba:	f004 f969 	bl	8009b90 <LoRaMacMibGetRequestConfirm>
		LOG_INF("Joined network! DevAddr: %08x", mibGet.Param.DevAddr);
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <MlmeConfirm+0x90>)
 80058c0:	9308      	str	r3, [sp, #32]
 80058c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058c4:	9309      	str	r3, [sp, #36]	; 0x24
 80058c6:	2303      	movs	r3, #3
 80058c8:	9307      	str	r3, [sp, #28]
 80058ca:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80058ce:	462b      	mov	r3, r5
 80058d0:	aa07      	add	r2, sp, #28
 80058d2:	4803      	ldr	r0, [pc, #12]	; (80058e0 <MlmeConfirm+0x80>)
 80058d4:	f00e fc7d 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		break;
 80058d8:	e7d5      	b.n	8005886 <MlmeConfirm+0x26>
 80058da:	bf00      	nop
 80058dc:	0801ba6b 	.word	0x0801ba6b
 80058e0:	08019fe8 	.word	0x08019fe8
 80058e4:	20002576 	.word	0x20002576
 80058e8:	20000454 	.word	0x20000454
 80058ec:	0801baa1 	.word	0x0801baa1
 80058f0:	0801ba83 	.word	0x0801ba83

080058f4 <lorawan_join>:
{
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4604      	mov	r4, r0
 80058f8:	b09c      	sub	sp, #112	; 0x70
	return z_impl_k_mutex_lock(mutex, timeout);
 80058fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005902:	485c      	ldr	r0, [pc, #368]	; (8005a74 <lorawan_join+0x180>)
 8005904:	f00a fb9e 	bl	8010044 <z_impl_k_mutex_lock>
	mib_req.Param.EnablePublicNetwork = true;
 8005908:	2601      	movs	r6, #1
	mib_req.Type = MIB_PUBLIC_NETWORK;
 800590a:	231d      	movs	r3, #29
	LoRaMacMibSetRequestConfirm(&mib_req);
 800590c:	a80a      	add	r0, sp, #40	; 0x28
	mib_req.Type = MIB_PUBLIC_NETWORK;
 800590e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	mib_req.Param.EnablePublicNetwork = true;
 8005912:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005916:	f004 fa11 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	if (join_cfg->mode == LORAWAN_ACT_OTAA) {
 800591a:	7d25      	ldrb	r5, [r4, #20]
 800591c:	2d00      	cmp	r5, #0
 800591e:	d153      	bne.n	80059c8 <lorawan_join+0xd4>
	mlme_req.Req.Join.Datarate = default_datarate;
 8005920:	4b55      	ldr	r3, [pc, #340]	; (8005a78 <lorawan_join+0x184>)
	mlme_req.Type = MLME_JOIN;
 8005922:	f88d 6014 	strb.w	r6, [sp, #20]
	mlme_req.Req.Join.Datarate = default_datarate;
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f88d 3019 	strb.w	r3, [sp, #25]
	mlme_req.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800592c:	2302      	movs	r3, #2
 800592e:	f88d 3018 	strb.w	r3, [sp, #24]
	mib_req.Type = MIB_DEV_EUI;
 8005932:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005936:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.DevEui = join_cfg->dev_eui;
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 800593c:	f004 f9fe 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_JOIN_EUI;
 8005940:	2303      	movs	r3, #3
 8005942:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005946:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.JoinEui = join_cfg->otaa.join_eui;
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 800594c:	f004 f9f6 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_KEY;
 8005950:	2309      	movs	r3, #9
 8005952:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005956:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.NwkKey = join_cfg->otaa.nwk_key;
 8005958:	6863      	ldr	r3, [r4, #4]
 800595a:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 800595c:	f004 f9ee 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_APP_KEY;
 8005960:	2308      	movs	r3, #8
 8005962:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005966:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.AppKey = join_cfg->otaa.app_key;
 8005968:	68a3      	ldr	r3, [r4, #8]
 800596a:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 800596c:	f004 f9e6 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	return LoRaMacMlmeRequest(&mlme_req);
 8005970:	a805      	add	r0, sp, #20
 8005972:	f004 fc8d 	bl	800a290 <LoRaMacMlmeRequest>
		if (status != LORAMAC_STATUS_OK) {
 8005976:	4604      	mov	r4, r0
 8005978:	b1c0      	cbz	r0, 80059ac <lorawan_join+0xb8>
			LOG_ERR("OTAA join failed: %s",
 800597a:	f000 f971 	bl	8005c60 <lorawan_status2str>
 800597e:	4b3f      	ldr	r3, [pc, #252]	; (8005a7c <lorawan_join+0x188>)
 8005980:	9003      	str	r0, [sp, #12]
 8005982:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8005986:	4628      	mov	r0, r5
 8005988:	493d      	ldr	r1, [pc, #244]	; (8005a80 <lorawan_join+0x18c>)
 800598a:	9500      	str	r5, [sp, #0]
 800598c:	462b      	mov	r3, r5
 800598e:	4632      	mov	r2, r6
 8005990:	f00e fcea 	bl	8014368 <z_log_msg2_runtime_create.constprop.0>
			ret = lorawan_status2errno(status);
 8005994:	4620      	mov	r0, r4
 8005996:	f000 f97b 	bl	8005c90 <lorawan_status2errno>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
 800599a:	4604      	mov	r4, r0
	if (ret == 0) {
 800599c:	2800      	cmp	r0, #0
 800599e:	d054      	beq.n	8005a4a <lorawan_join+0x156>
	return z_impl_k_mutex_unlock(mutex);
 80059a0:	4834      	ldr	r0, [pc, #208]	; (8005a74 <lorawan_join+0x180>)
 80059a2:	f00a fbc7 	bl	8010134 <z_impl_k_mutex_unlock>
}
 80059a6:	4620      	mov	r0, r4
 80059a8:	b01c      	add	sp, #112	; 0x70
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059b0:	4834      	ldr	r0, [pc, #208]	; (8005a84 <lorawan_join+0x190>)
 80059b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059b6:	f00a fc25 	bl	8010204 <z_impl_k_sem_take>
		if (last_mlme_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
 80059ba:	4b33      	ldr	r3, [pc, #204]	; (8005a88 <lorawan_join+0x194>)
 80059bc:	7818      	ldrb	r0, [r3, #0]
 80059be:	2800      	cmp	r0, #0
 80059c0:	d043      	beq.n	8005a4a <lorawan_join+0x156>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
 80059c2:	f000 f977 	bl	8005cb4 <lorawan_eventinfo2errno>
 80059c6:	e7e8      	b.n	800599a <lorawan_join+0xa6>
	} else if (join_cfg->mode == LORAWAN_ACT_ABP) {
 80059c8:	2d01      	cmp	r5, #1
 80059ca:	d150      	bne.n	8005a6e <lorawan_join+0x17a>
	mib_req.Type = MIB_ABP_LORAWAN_VERSION;
 80059cc:	2335      	movs	r3, #53	; 0x35
 80059ce:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80059d2:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.AbpLrWanVersion.Value = LORAWAN_ABP_VERSION;
 80059d4:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <lorawan_join+0x198>)
 80059d6:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80059d8:	f004 f9b0 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NET_ID;
 80059dc:	2306      	movs	r3, #6
 80059de:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80059e2:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.NetID = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80059e8:	f004 f9a8 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_DEV_ADDR;
 80059ec:	2307      	movs	r3, #7
 80059ee:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 80059f2:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.DevAddr = join_cfg->abp.dev_addr;
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 80059f8:	f004 f9a0 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_F_NWK_S_INT_KEY;
 80059fc:	230c      	movs	r3, #12
 80059fe:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a02:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.FNwkSIntKey = join_cfg->abp.nwk_skey;
 8005a04:	68a3      	ldr	r3, [r4, #8]
 8005a06:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a08:	f004 f998 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_S_NWK_S_INT_KEY;
 8005a0c:	230d      	movs	r3, #13
 8005a0e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a12:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.SNwkSIntKey = join_cfg->abp.nwk_skey;
 8005a14:	68a3      	ldr	r3, [r4, #8]
 8005a16:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a18:	f004 f990 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_S_ENC_KEY;
 8005a1c:	230e      	movs	r3, #14
 8005a1e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a22:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.NwkSEncKey = join_cfg->abp.nwk_skey;
 8005a24:	68a3      	ldr	r3, [r4, #8]
 8005a26:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a28:	f004 f988 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_APP_S_KEY;
 8005a2c:	230f      	movs	r3, #15
 8005a2e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a32:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Param.AppSKey = join_cfg->abp.app_skey;
 8005a34:	6863      	ldr	r3, [r4, #4]
 8005a36:	9314      	str	r3, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a38:	f004 f980 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a3c:	a813      	add	r0, sp, #76	; 0x4c
	mib_req.Type = MIB_NETWORK_ACTIVATION;
 8005a3e:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
	mib_req.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8005a42:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005a46:	f004 f979 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
		if (!lorawan_adr_enable) {
 8005a4a:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <lorawan_join+0x19c>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b94b      	cbnz	r3, 8005a64 <lorawan_join+0x170>
			mib_req.Type = MIB_CHANNELS_DATARATE;
 8005a50:	232d      	movs	r3, #45	; 0x2d
 8005a52:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
			mib_req.Param.ChannelsDatarate = default_datarate;
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <lorawan_join+0x184>)
			LoRaMacMibSetRequestConfirm(&mib_req);
 8005a58:	a813      	add	r0, sp, #76	; 0x4c
			mib_req.Param.ChannelsDatarate = default_datarate;
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
			LoRaMacMibSetRequestConfirm(&mib_req);
 8005a60:	f004 f96c 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
		datarate_observe(true);
 8005a64:	2001      	movs	r0, #1
 8005a66:	f7ff fe61 	bl	800572c <datarate_observe>
 8005a6a:	2400      	movs	r4, #0
 8005a6c:	e798      	b.n	80059a0 <lorawan_join+0xac>
		ret = -EINVAL;
 8005a6e:	f06f 0415 	mvn.w	r4, #21
 8005a72:	e795      	b.n	80059a0 <lorawan_join+0xac>
 8005a74:	200003e4 	.word	0x200003e4
 8005a78:	20002574 	.word	0x20002574
 8005a7c:	0801bac1 	.word	0x0801bac1
 8005a80:	08019fe8 	.word	0x08019fe8
 8005a84:	20000454 	.word	0x20000454
 8005a88:	20002576 	.word	0x20002576
 8005a8c:	01000300 	.word	0x01000300
 8005a90:	20002577 	.word	0x20002577

08005a94 <lorawan_set_datarate>:
{
 8005a94:	b510      	push	{r4, lr}
	if (lorawan_adr_enable) {
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <lorawan_set_datarate+0x34>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
{
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	4604      	mov	r4, r0
	if (lorawan_adr_enable) {
 8005a9e:	b11b      	cbz	r3, 8005aa8 <lorawan_set_datarate+0x14>
		return -EINVAL;
 8005aa0:	f06f 0015 	mvn.w	r0, #21
}
 8005aa4:	b00a      	add	sp, #40	; 0x28
 8005aa6:	bd10      	pop	{r4, pc}
	mib_req.Type = MIB_CHANNELS_DATARATE;
 8005aa8:	232d      	movs	r3, #45	; 0x2d
	mib_req.Param.ChannelsDatarate = dr;
 8005aaa:	f88d 0008 	strb.w	r0, [sp, #8]
	if (LoRaMacMibSetRequestConfirm(&mib_req) != LORAMAC_STATUS_OK) {
 8005aae:	a801      	add	r0, sp, #4
	mib_req.Type = MIB_CHANNELS_DATARATE;
 8005ab0:	f88d 3004 	strb.w	r3, [sp, #4]
	if (LoRaMacMibSetRequestConfirm(&mib_req) != LORAMAC_STATUS_OK) {
 8005ab4:	f004 f942 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d1f1      	bne.n	8005aa0 <lorawan_set_datarate+0xc>
	default_datarate = dr;
 8005abc:	4b03      	ldr	r3, [pc, #12]	; (8005acc <lorawan_set_datarate+0x38>)
 8005abe:	701c      	strb	r4, [r3, #0]
	current_datarate = dr;
 8005ac0:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <lorawan_set_datarate+0x3c>)
 8005ac2:	701c      	strb	r4, [r3, #0]
	return 0;
 8005ac4:	e7ee      	b.n	8005aa4 <lorawan_set_datarate+0x10>
 8005ac6:	bf00      	nop
 8005ac8:	20002577 	.word	0x20002577
 8005acc:	20002574 	.word	0x20002574
 8005ad0:	20002573 	.word	0x20002573

08005ad4 <lorawan_send>:
{
 8005ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad6:	4607      	mov	r7, r0
 8005ad8:	b08b      	sub	sp, #44	; 0x2c
 8005ada:	4615      	mov	r5, r2
 8005adc:	461c      	mov	r4, r3
	if (data == NULL) {
 8005ade:	460e      	mov	r6, r1
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	d060      	beq.n	8005ba6 <lorawan_send+0xd2>
	return z_impl_k_mutex_lock(mutex, timeout);
 8005ae4:	4831      	ldr	r0, [pc, #196]	; (8005bac <lorawan_send+0xd8>)
 8005ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aee:	f00a faa9 	bl	8010044 <z_impl_k_mutex_lock>
	status = LoRaMacQueryTxPossible(len, &txInfo);
 8005af2:	a904      	add	r1, sp, #16
 8005af4:	4628      	mov	r0, r5
 8005af6:	f003 ffeb 	bl	8009ad0 <LoRaMacQueryTxPossible>
	if (status != LORAMAC_STATUS_OK) {
 8005afa:	b388      	cbz	r0, 8005b60 <lorawan_send+0x8c>
		LOG_ERR("LoRaWAN Query Tx Possible Failed: %s",
 8005afc:	f000 f8b0 	bl	8005c60 <lorawan_status2str>
 8005b00:	2400      	movs	r4, #0
 8005b02:	4b2b      	ldr	r3, [pc, #172]	; (8005bb0 <lorawan_send+0xdc>)
 8005b04:	9003      	str	r0, [sp, #12]
 8005b06:	9302      	str	r3, [sp, #8]
 8005b08:	e9cd 4400 	strd	r4, r4, [sp]
 8005b0c:	4929      	ldr	r1, [pc, #164]	; (8005bb4 <lorawan_send+0xe0>)
 8005b0e:	4623      	mov	r3, r4
 8005b10:	2201      	movs	r2, #1
 8005b12:	4620      	mov	r0, r4
 8005b14:	f00e fc28 	bl	8014368 <z_log_msg2_runtime_create.constprop.0>
		empty_frame = true;
 8005b18:	2501      	movs	r5, #1
		mcpsReq.Type = MCPS_UNCONFIRMED;
 8005b1a:	f88d 4014 	strb.w	r4, [sp, #20]
		mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8005b1e:	9407      	str	r4, [sp, #28]
		mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8005b20:	f8ad 4020 	strh.w	r4, [sp, #32]
		mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8005b24:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
	status = LoRaMacMcpsRequest(&mcpsReq);
 8005b28:	a805      	add	r0, sp, #20
 8005b2a:	f004 fc91 	bl	800a450 <LoRaMacMcpsRequest>
	if (status != LORAMAC_STATUS_OK) {
 8005b2e:	4604      	mov	r4, r0
 8005b30:	b338      	cbz	r0, 8005b82 <lorawan_send+0xae>
		LOG_ERR("LoRaWAN Send failed: %s", lorawan_status2str(status));
 8005b32:	f000 f895 	bl	8005c60 <lorawan_status2str>
 8005b36:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <lorawan_send+0xe4>)
 8005b38:	9302      	str	r3, [sp, #8]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e9cd 3300 	strd	r3, r3, [sp]
 8005b40:	491c      	ldr	r1, [pc, #112]	; (8005bb4 <lorawan_send+0xe0>)
 8005b42:	9003      	str	r0, [sp, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f00e fc0e 	bl	8014368 <z_log_msg2_runtime_create.constprop.0>
		ret = lorawan_status2errno(status);
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f000 f89f 	bl	8005c90 <lorawan_status2errno>
 8005b52:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
 8005b54:	4815      	ldr	r0, [pc, #84]	; (8005bac <lorawan_send+0xd8>)
 8005b56:	f00a faed 	bl	8010134 <z_impl_k_mutex_unlock>
}
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	b00b      	add	sp, #44	; 0x2c
 8005b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (type) {
 8005b60:	b164      	cbz	r4, 8005b7c <lorawan_send+0xa8>
 8005b62:	2c01      	cmp	r4, #1
 8005b64:	d00a      	beq.n	8005b7c <lorawan_send+0xa8>
		mcpsReq.Req.Unconfirmed.Datarate = current_datarate;
 8005b66:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <lorawan_send+0xe8>)
		mcpsReq.Req.Unconfirmed.fBufferSize = len;
 8005b68:	f8ad 5020 	strh.w	r5, [sp, #32]
		mcpsReq.Req.Unconfirmed.Datarate = current_datarate;
 8005b6c:	781b      	ldrb	r3, [r3, #0]
		mcpsReq.Req.Unconfirmed.fPort = port;
 8005b6e:	f88d 7018 	strb.w	r7, [sp, #24]
		mcpsReq.Req.Unconfirmed.fBuffer = data;
 8005b72:	9607      	str	r6, [sp, #28]
		mcpsReq.Req.Unconfirmed.Datarate = current_datarate;
 8005b74:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	bool empty_frame = false;
 8005b78:	2500      	movs	r5, #0
 8005b7a:	e7d5      	b.n	8005b28 <lorawan_send+0x54>
			mcpsReq.Type = MCPS_CONFIRMED;
 8005b7c:	f88d 4014 	strb.w	r4, [sp, #20]
			break;
 8005b80:	e7f1      	b.n	8005b66 <lorawan_send+0x92>
	return z_impl_k_sem_take(sem, timeout);
 8005b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b86:	480e      	ldr	r0, [pc, #56]	; (8005bc0 <lorawan_send+0xec>)
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b8c:	f00a fb3a 	bl	8010204 <z_impl_k_sem_take>
	if (last_mcps_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8005b90:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <lorawan_send+0xf0>)
 8005b92:	7818      	ldrb	r0, [r3, #0]
 8005b94:	b108      	cbz	r0, 8005b9a <lorawan_send+0xc6>
		ret = lorawan_eventinfo2errno(last_mcps_confirm_status);
 8005b96:	f000 f88d 	bl	8005cb4 <lorawan_eventinfo2errno>
		ret = -EAGAIN;
 8005b9a:	2d00      	cmp	r5, #0
	int ret = 0;
 8005b9c:	4604      	mov	r4, r0
		ret = -EAGAIN;
 8005b9e:	bf18      	it	ne
 8005ba0:	f06f 040a 	mvnne.w	r4, #10
 8005ba4:	e7d6      	b.n	8005b54 <lorawan_send+0x80>
		return -EINVAL;
 8005ba6:	f06f 0415 	mvn.w	r4, #21
 8005baa:	e7d6      	b.n	8005b5a <lorawan_send+0x86>
 8005bac:	200003f8 	.word	0x200003f8
 8005bb0:	0801bad6 	.word	0x0801bad6
 8005bb4:	08019fe8 	.word	0x08019fe8
 8005bb8:	0801bafb 	.word	0x0801bafb
 8005bbc:	20002573 	.word	0x20002573
 8005bc0:	2000043c 	.word	0x2000043c
 8005bc4:	20002575 	.word	0x20002575

08005bc8 <lorawan_register_downlink_callback>:
	parent->next = child;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6083      	str	r3, [r0, #8]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <lorawan_register_downlink_callback+0x1c>)
 8005bce:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&dl_callbacks, &cb->node);
 8005bd0:	f100 0208 	add.w	r2, r0, #8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8005bd4:	b911      	cbnz	r1, 8005bdc <lorawan_register_downlink_callback+0x14>
	list->head = node;
 8005bd6:	e9c3 2200 	strd	r2, r2, [r3]
}
 8005bda:	4770      	bx	lr
	parent->next = child;
 8005bdc:	600a      	str	r2, [r1, #0]
	list->tail = node;
 8005bde:	605a      	str	r2, [r3, #4]
}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20001074 	.word	0x20001074

08005be8 <lorawan_register_dr_changed_callback>:
	dr_change_cb = cb;
 8005be8:	4b01      	ldr	r3, [pc, #4]	; (8005bf0 <lorawan_register_dr_changed_callback+0x8>)
 8005bea:	6018      	str	r0, [r3, #0]
}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	2000107c 	.word	0x2000107c

08005bf4 <lorawan_start>:
{
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	b090      	sub	sp, #64	; 0x40
	status = LoRaMacStart();
 8005bf8:	f003 ff62 	bl	8009ac0 <LoRaMacStart>
	if (status != LORAMAC_STATUS_OK) {
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	b180      	cbz	r0, 8005c22 <lorawan_start+0x2e>
		LOG_ERR("Failed to start the LoRaMAC stack: %s",
 8005c00:	f000 f82e 	bl	8005c60 <lorawan_status2str>
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <lorawan_start+0x5c>)
 8005c06:	9302      	str	r3, [sp, #8]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9003      	str	r0, [sp, #12]
 8005c0c:	e9cd 3300 	strd	r3, r3, [sp]
 8005c10:	4618      	mov	r0, r3
 8005c12:	4910      	ldr	r1, [pc, #64]	; (8005c54 <lorawan_start+0x60>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	f00e fba7 	bl	8014368 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
 8005c1a:	f06f 0015 	mvn.w	r0, #21
}
 8005c1e:	b010      	add	sp, #64	; 0x40
 8005c20:	bd10      	pop	{r4, pc}
	phy_params.Attribute = PHY_DEF_TX_DR;
 8005c22:	2306      	movs	r3, #6
	phy_param = RegionGetPhyParam(LORAWAN_REGION, &phy_params);
 8005c24:	a905      	add	r1, sp, #20
 8005c26:	2008      	movs	r0, #8
	phy_params.Attribute = PHY_DEF_TX_DR;
 8005c28:	f88d 3014 	strb.w	r3, [sp, #20]
	phy_param = RegionGetPhyParam(LORAWAN_REGION, &phy_params);
 8005c2c:	f00f fe01 	bl	8015832 <RegionGetPhyParam>
	default_datarate = phy_param.Value;
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <lorawan_start+0x64>)
 8005c32:	b2c0      	uxtb	r0, r0
 8005c34:	7018      	strb	r0, [r3, #0]
	current_datarate = default_datarate;
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <lorawan_start+0x68>)
 8005c38:	7018      	strb	r0, [r3, #0]
	mib_req.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8005c3a:	2330      	movs	r3, #48	; 0x30
 8005c3c:	f88d 301c 	strb.w	r3, [sp, #28]
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005c40:	a807      	add	r0, sp, #28
	mib_req.Param.SystemMaxRxError = CONFIG_LORAWAN_SYSTEM_MAX_RX_ERROR;
 8005c42:	2314      	movs	r3, #20
 8005c44:	9308      	str	r3, [sp, #32]
	LoRaMacMibSetRequestConfirm(&mib_req);
 8005c46:	f004 f879 	bl	8009d3c <LoRaMacMibSetRequestConfirm>
	return 0;
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	e7e7      	b.n	8005c1e <lorawan_start+0x2a>
 8005c4e:	bf00      	nop
 8005c50:	0801bb13 	.word	0x0801bb13
 8005c54:	08019fe8 	.word	0x08019fe8
 8005c58:	20002574 	.word	0x20002574
 8005c5c:	20002573 	.word	0x20002573

08005c60 <lorawan_status2str>:
	[LORAMAC_STATUS_ERROR] = "Unknown error",
};

const char *lorawan_status2str(unsigned int status)
{
	if (status < ARRAY_SIZE(status2str)) {
 8005c60:	2817      	cmp	r0, #23
		return status2str[status];
 8005c62:	bf9a      	itte	ls
 8005c64:	4b02      	ldrls	r3, [pc, #8]	; (8005c70 <lorawan_status2str+0x10>)
 8005c66:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown status!";
 8005c6a:	4802      	ldrhi	r0, [pc, #8]	; (8005c74 <lorawan_status2str+0x14>)
	}
}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	0801a310 	.word	0x0801a310
 8005c74:	0801bb41 	.word	0x0801bb41

08005c78 <lorawan_eventinfo2str>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = "Beacon not found",
};

const char *lorawan_eventinfo2str(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2str)) {
 8005c78:	280f      	cmp	r0, #15
		return eventinfo2str[status];
 8005c7a:	bf9a      	itte	ls
 8005c7c:	4b02      	ldrls	r3, [pc, #8]	; (8005c88 <lorawan_eventinfo2str+0x10>)
 8005c7e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown event!";
 8005c82:	4802      	ldrhi	r0, [pc, #8]	; (8005c8c <lorawan_eventinfo2str+0x14>)
	}
}
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	0801a274 	.word	0x0801a274
 8005c8c:	0801bb51 	.word	0x0801bb51

08005c90 <lorawan_status2errno>:
	[LORAMAC_STATUS_MC_GROUP_UNDEFINED] = -EINVAL,
};

const int lorawan_status2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
 8005c90:	2816      	cmp	r0, #22
{
 8005c92:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
 8005c94:	d808      	bhi.n	8005ca8 <lorawan_status2errno+0x18>
 8005c96:	4a06      	ldr	r2, [pc, #24]	; (8005cb0 <lorawan_status2errno+0x20>)
 8005c98:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005c9c:	b930      	cbnz	r0, 8005cac <lorawan_status2errno+0x1c>
		return status2errno[status];
	} else {
		return status == LORAMAC_STATUS_OK ? 0 : -EINVAL;
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bf18      	it	ne
 8005ca2:	f06f 0015 	mvnne.w	r0, #21
 8005ca6:	4770      	bx	lr
 8005ca8:	f06f 0015 	mvn.w	r0, #21
	}
}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	0801a2b4 	.word	0x0801a2b4

08005cb4 <lorawan_eventinfo2errno>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = -EINVAL,
};

const int lorawan_eventinfo2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2errno) &&
 8005cb4:	280f      	cmp	r0, #15
{
 8005cb6:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(eventinfo2errno) &&
 8005cb8:	d808      	bhi.n	8005ccc <lorawan_eventinfo2errno+0x18>
	    eventinfo2errno[status] != 0) {
 8005cba:	4a06      	ldr	r2, [pc, #24]	; (8005cd4 <lorawan_eventinfo2errno+0x20>)
 8005cbc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
	if (status < ARRAY_SIZE(eventinfo2errno) &&
 8005cc0:	b930      	cbnz	r0, 8005cd0 <lorawan_eventinfo2errno+0x1c>
		return eventinfo2errno[status];
	} else {
		return status == LORAMAC_EVENT_INFO_STATUS_OK ? 0 : -EINVAL;
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf18      	it	ne
 8005cc6:	f06f 0015 	mvnne.w	r0, #21
 8005cca:	4770      	bx	lr
 8005ccc:	f06f 0015 	mvn.w	r0, #21
	}
}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	0801a234 	.word	0x0801a234

08005cd8 <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8005cd8:	4801      	ldr	r0, [pc, #4]	; (8005ce0 <timer_callback+0x8>)
 8005cda:	f00a bba1 	b.w	8010420 <k_work_submit>
 8005cde:	bf00      	nop
 8005ce0:	2000008c 	.word	0x2000008c

08005ce4 <RtcBkupWrite>:

K_TIMER_DEFINE(lora_timer, timer_callback, NULL);

void RtcBkupWrite(uint32_t data0, uint32_t data1)
{
	backup_reg[0] = data0;
 8005ce4:	4b01      	ldr	r3, [pc, #4]	; (8005cec <RtcBkupWrite+0x8>)
 8005ce6:	6018      	str	r0, [r3, #0]
	backup_reg[1] = data1;
 8005ce8:	6059      	str	r1, [r3, #4]
}
 8005cea:	4770      	bx	lr
 8005cec:	200010a4 	.word	0x200010a4

08005cf0 <RtcBkupRead>:

void RtcBkupRead(uint32_t *data0, uint32_t *data1)
{
	*data0 = backup_reg[0];
 8005cf0:	4b02      	ldr	r3, [pc, #8]	; (8005cfc <RtcBkupRead+0xc>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
	*data1 = backup_reg[1];
 8005cf4:	685b      	ldr	r3, [r3, #4]
	*data0 = backup_reg[0];
 8005cf6:	6002      	str	r2, [r0, #0]
	*data1 = backup_reg[1];
 8005cf8:	600b      	str	r3, [r1, #0]
}
 8005cfa:	4770      	bx	lr
 8005cfc:	200010a4 	.word	0x200010a4

08005d00 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8005d00:	b508      	push	{r3, lr}
	return (k_uptime_get_32() - saved_time);
 8005d02:	f00e fb53 	bl	80143ac <k_uptime_get_32>
 8005d06:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <RtcGetTimerElapsedTime+0x10>)
 8005d08:	681b      	ldr	r3, [r3, #0]
}
 8005d0a:	1ac0      	subs	r0, r0, r3
 8005d0c:	bd08      	pop	{r3, pc}
 8005d0e:	bf00      	nop
 8005d10:	200010ac 	.word	0x200010ac

08005d14 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
 8005d14:	4801      	ldr	r0, [pc, #4]	; (8005d1c <RtcStopAlarm+0x8>)
 8005d16:	f013 ba3b 	b.w	8019190 <z_impl_k_timer_stop>
 8005d1a:	bf00      	nop
 8005d1c:	20000310 	.word	0x20000310

08005d20 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
 8005d20:	b507      	push	{r0, r1, r2, lr}
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8005d22:	220a      	movs	r2, #10
 8005d24:	fba0 2302 	umull	r2, r3, r0, r2
	z_impl_k_timer_start(timer, duration, period);
 8005d28:	2100      	movs	r1, #0
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e9cd 0100 	strd	r0, r1, [sp]
 8005d30:	4802      	ldr	r0, [pc, #8]	; (8005d3c <RtcSetAlarm+0x1c>)
 8005d32:	f00b f8c3 	bl	8010ebc <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8005d36:	b003      	add	sp, #12
 8005d38:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d3c:	20000310 	.word	0x20000310

08005d40 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8005d40:	b508      	push	{r3, lr}
	saved_time = k_uptime_get_32();
 8005d42:	f00e fb33 	bl	80143ac <k_uptime_get_32>
 8005d46:	4b01      	ldr	r3, [pc, #4]	; (8005d4c <RtcSetTimerContext+0xc>)
 8005d48:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8005d4a:	bd08      	pop	{r3, pc}
 8005d4c:	200010ac 	.word	0x200010ac

08005d50 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8005d50:	4b01      	ldr	r3, [pc, #4]	; (8005d58 <RtcGetTimerContext+0x8>)
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	200010ac 	.word	0x200010ac

08005d5c <sx12xx_ev_rx_done>:
	return true;
}

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 8005d5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal *sig = dev_data.operation_done;

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
 8005d60:	4c28      	ldr	r4, [pc, #160]	; (8005e04 <sx12xx_ev_rx_done+0xa8>)
{
 8005d62:	469a      	mov	sl, r3
	if (dev_data.async_rx_cb) {
 8005d64:	68a3      	ldr	r3, [r4, #8]
{
 8005d66:	4607      	mov	r7, r0
 8005d68:	460d      	mov	r5, r1
 8005d6a:	4616      	mov	r6, r2
	if (dev_data.async_rx_cb) {
 8005d6c:	b17b      	cbz	r3, 8005d8e <sx12xx_ev_rx_done+0x32>
		/* Start receiving again */
		Radio.Rx(0);
 8005d6e:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <sx12xx_ev_rx_done+0xac>)
 8005d70:	2000      	movs	r0, #0
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 8005d76:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005d7a:	6820      	ldr	r0, [r4, #0]
 8005d7c:	f8cd a000 	str.w	sl, [sp]
 8005d80:	4633      	mov	r3, r6
 8005d82:	462a      	mov	r2, r5
 8005d84:	4639      	mov	r1, r7
 8005d86:	47c0      	blx	r8
	/* Completely release modem */
	dev_data.operation_done = NULL;
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 8005d88:	b002      	add	sp, #8
 8005d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005d8e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8005d92:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 8005d94:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8005d98:	f3bf 8f5b 	dmb	ish
 8005d9c:	e852 1f00 	ldrex	r1, [r2]
 8005da0:	2901      	cmp	r1, #1
 8005da2:	d103      	bne.n	8005dac <sx12xx_ev_rx_done+0x50>
 8005da4:	e842 3000 	strex	r0, r3, [r2]
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d1f7      	bne.n	8005d9c <sx12xx_ev_rx_done+0x40>
 8005dac:	f3bf 8f5b 	dmb	ish
 8005db0:	4690      	mov	r8, r2
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005db2:	d1e9      	bne.n	8005d88 <sx12xx_ev_rx_done+0x2c>
	if (size < *dev_data.rx_params.size) {
 8005db4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	42aa      	cmp	r2, r5
		*dev_data.rx_params.size = size;
 8005dba:	bf88      	it	hi
 8005dbc:	701d      	strbhi	r5, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 8005dbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005dc0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	f013 fb55 	bl	8019474 <memcpy>
	if (dev_data.rx_params.rssi) {
 8005dca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005dcc:	b103      	cbz	r3, 8005dd0 <sx12xx_ev_rx_done+0x74>
		*dev_data.rx_params.rssi = rssi;
 8005dce:	801e      	strh	r6, [r3, #0]
	if (dev_data.rx_params.snr) {
 8005dd0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005dd2:	b10b      	cbz	r3, 8005dd8 <sx12xx_ev_rx_done+0x7c>
		*dev_data.rx_params.snr = snr;
 8005dd4:	f883 a000 	strb.w	sl, [r3]
	Radio.Sleep();
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <sx12xx_ev_rx_done+0xac>)
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	4798      	blx	r3
	dev_data.operation_done = NULL;
 8005dde:	2100      	movs	r1, #0
 8005de0:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005de2:	f3bf 8f5b 	dmb	ish
 8005de6:	e858 3f00 	ldrex	r3, [r8]
 8005dea:	e848 1200 	strex	r2, r1, [r8]
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	d1f9      	bne.n	8005de6 <sx12xx_ev_rx_done+0x8a>
 8005df2:	f3bf 8f5b 	dmb	ish
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8005df6:	4648      	mov	r0, r9
}
 8005df8:	b002      	add	sp, #8
 8005dfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfe:	f00b b90b 	b.w	8011018 <z_impl_k_poll_signal_raise>
 8005e02:	bf00      	nop
 8005e04:	200010b0 	.word	0x200010b0
 8005e08:	0801a484 	.word	0x0801a484

08005e0c <modem_release.constprop.0>:
static bool modem_release(struct sx12xx_data *data)
 8005e0c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005e0e:	4e13      	ldr	r6, [pc, #76]	; (8005e5c <modem_release.constprop.0+0x50>)
 8005e10:	f3bf 8f5b 	dmb	ish
 8005e14:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e854 2f00 	ldrex	r2, [r4]
 8005e1e:	2a01      	cmp	r2, #1
 8005e20:	d103      	bne.n	8005e2a <modem_release.constprop.0+0x1e>
 8005e22:	e844 3100 	strex	r1, r3, [r4]
 8005e26:	2900      	cmp	r1, #0
 8005e28:	d1f7      	bne.n	8005e1a <modem_release.constprop.0+0xe>
 8005e2a:	f3bf 8f5b 	dmb	ish
 8005e2e:	bf0c      	ite	eq
 8005e30:	2001      	moveq	r0, #1
 8005e32:	2000      	movne	r0, #0
 8005e34:	f04f 0500 	mov.w	r5, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005e38:	d10e      	bne.n	8005e58 <modem_release.constprop.0+0x4c>
	Radio.Sleep();
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <modem_release.constprop.0+0x54>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	4798      	blx	r3
	data->operation_done = NULL;
 8005e40:	6075      	str	r5, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005e42:	f3bf 8f5b 	dmb	ish
 8005e46:	e854 3f00 	ldrex	r3, [r4]
 8005e4a:	e844 5200 	strex	r2, r5, [r4]
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	d1f9      	bne.n	8005e46 <modem_release.constprop.0+0x3a>
 8005e52:	f3bf 8f5b 	dmb	ish
	return true;
 8005e56:	2001      	movs	r0, #1
}
 8005e58:	bd70      	pop	{r4, r5, r6, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200010b0 	.word	0x200010b0
 8005e60:	0801a484 	.word	0x0801a484

08005e64 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
	struct k_poll_signal *sig = dev_data.operation_done;
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <sx12xx_ev_tx_done+0x1c>)
{
 8005e66:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8005e68:	685c      	ldr	r4, [r3, #4]

	if (modem_release(&dev_data)) {
 8005e6a:	f7ff ffcf 	bl	8005e0c <modem_release.constprop.0>
 8005e6e:	b130      	cbz	r0, 8005e7e <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
 8005e70:	b12c      	cbz	r4, 8005e7e <sx12xx_ev_tx_done+0x1a>
 8005e72:	2100      	movs	r1, #0
 8005e74:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8005e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7a:	f00b b8cd 	b.w	8011018 <z_impl_k_poll_signal_raise>
 8005e7e:	bd10      	pop	{r4, pc}
 8005e80:	200010b0 	.word	0x200010b0

08005e84 <__sx12xx_configure_pin>:
{
 8005e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e86:	4604      	mov	r4, r0
 8005e88:	b087      	sub	sp, #28
	if (!device_is_ready(gpio->port)) {
 8005e8a:	6800      	ldr	r0, [r0, #0]
{
 8005e8c:	460e      	mov	r6, r1
 8005e8e:	f012 ff6b 	bl	8018d68 <z_device_is_ready>
 8005e92:	6825      	ldr	r5, [r4, #0]
	if (!device_is_ready(gpio->port)) {
 8005e94:	4603      	mov	r3, r0
 8005e96:	b970      	cbnz	r0, 8005eb6 <__sx12xx_configure_pin+0x32>
		LOG_ERR("GPIO device not ready %s", gpio->port->name);
 8005e98:	682a      	ldr	r2, [r5, #0]
 8005e9a:	9203      	str	r2, [sp, #12]
 8005e9c:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <__sx12xx_configure_pin+0x94>)
 8005e9e:	491f      	ldr	r1, [pc, #124]	; (8005f1c <__sx12xx_configure_pin+0x98>)
 8005ea0:	9000      	str	r0, [sp, #0]
 8005ea2:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f00e fabb 	bl	8014422 <z_log_msg2_runtime_create.constprop.0>
		return -ENODEV;
 8005eac:	f06f 0512 	mvn.w	r5, #18
}
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	b007      	add	sp, #28
 8005eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				  spec->pin,
				  spec->dt_flags | extra_flags);
 8005eb6:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
 8005eb8:	7921      	ldrb	r1, [r4, #4]
 8005eba:	4333      	orrs	r3, r6
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005ebc:	02d8      	lsls	r0, r3, #11
	const struct gpio_driver_api *api =
 8005ebe:	f8d5 c008 	ldr.w	ip, [r5, #8]
	struct gpio_driver_data *data =
 8005ec2:	692f      	ldr	r7, [r5, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005ec4:	d506      	bpl.n	8005ed4 <__sx12xx_configure_pin+0x50>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8005ec6:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8005eca:	d003      	beq.n	8005ed4 <__sx12xx_configure_pin+0x50>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8005ecc:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005ece:	bf48      	it	mi
 8005ed0:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005ed4:	6838      	ldr	r0, [r7, #0]
 8005ed6:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005ed8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005edc:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8005ede:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005ee0:	bf4c      	ite	mi
 8005ee2:	4330      	orrmi	r0, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8005ee4:	43b0      	bicpl	r0, r6
 8005ee6:	6038      	str	r0, [r7, #0]
	return api->pin_configure(port, pin, flags);
 8005ee8:	f8dc 3000 	ldr.w	r3, [ip]
 8005eec:	4628      	mov	r0, r5
 8005eee:	4798      	blx	r3
	if (err) {
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d0dc      	beq.n	8005eb0 <__sx12xx_configure_pin+0x2c>
		LOG_ERR("Cannot configure gpio %s %d: %d", gpio->port->name,
 8005ef6:	7923      	ldrb	r3, [r4, #4]
 8005ef8:	9304      	str	r3, [sp, #16]
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	9005      	str	r0, [sp, #20]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	9303      	str	r3, [sp, #12]
 8005f02:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <__sx12xx_configure_pin+0x9c>)
 8005f04:	9302      	str	r3, [sp, #8]
 8005f06:	2300      	movs	r3, #0
 8005f08:	e9cd 3300 	strd	r3, r3, [sp]
 8005f0c:	4903      	ldr	r1, [pc, #12]	; (8005f1c <__sx12xx_configure_pin+0x98>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4618      	mov	r0, r3
 8005f12:	f00e fa86 	bl	8014422 <z_log_msg2_runtime_create.constprop.0>
		return err;
 8005f16:	e7cb      	b.n	8005eb0 <__sx12xx_configure_pin+0x2c>
 8005f18:	0801bdd9 	.word	0x0801bdd9
 8005f1c:	0801a030 	.word	0x0801a030
 8005f20:	0801bdf2 	.word	0x0801bdf2

08005f24 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005f28:	4910      	ldr	r1, [pc, #64]	; (8005f6c <sx12xx_lora_send_async+0x48>)
 8005f2a:	f3bf 8f5b 	dmb	ish
 8005f2e:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 8005f32:	2001      	movs	r0, #1
 8005f34:	e854 6f00 	ldrex	r6, [r4]
 8005f38:	2e00      	cmp	r6, #0
 8005f3a:	d104      	bne.n	8005f46 <sx12xx_lora_send_async+0x22>
 8005f3c:	e844 0c00 	strex	ip, r0, [r4]
 8005f40:	f1bc 0f00 	cmp.w	ip, #0
 8005f44:	d1f6      	bne.n	8005f34 <sx12xx_lora_send_async+0x10>
 8005f46:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005f4a:	d10b      	bne.n	8005f64 <sx12xx_lora_send_async+0x40>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005f4c:	4e08      	ldr	r6, [pc, #32]	; (8005f70 <sx12xx_lora_send_async+0x4c>)
	dev_data.operation_done = async;
 8005f4e:	604b      	str	r3, [r1, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005f50:	b2d4      	uxtb	r4, r2
 8005f52:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8005f54:	4621      	mov	r1, r4
 8005f56:	4798      	blx	r3

	Radio.Send(data, data_len);
 8005f58:	4628      	mov	r0, r5
 8005f5a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	4798      	blx	r3

	return 0;
 8005f60:	2000      	movs	r0, #0
}
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005f64:	f06f 000f 	mvn.w	r0, #15
 8005f68:	e7fb      	b.n	8005f62 <sx12xx_lora_send_async+0x3e>
 8005f6a:	bf00      	nop
 8005f6c:	200010b0 	.word	0x200010b0
 8005f70:	0801a484 	.word	0x0801a484

08005f74 <sx12xx_lora_send>:
{
 8005f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005f78:	2600      	movs	r6, #0
{
 8005f7a:	b095      	sub	sp, #84	; 0x54
	if (!dev_data.tx_cfg.frequency) {
 8005f7c:	4f2a      	ldr	r7, [pc, #168]	; (8006028 <sx12xx_lora_send+0xb4>)
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005f7e:	ab05      	add	r3, sp, #20
{
 8005f80:	4680      	mov	r8, r0
 8005f82:	4689      	mov	r9, r1
 8005f84:	4614      	mov	r4, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005f86:	4631      	mov	r1, r6
 8005f88:	2210      	movs	r2, #16
 8005f8a:	a809      	add	r0, sp, #36	; 0x24
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005f8c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005f90:	e9cd 6607 	strd	r6, r6, [sp, #28]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005f94:	f013 fa96 	bl	80194c4 <memset>
	if (!dev_data.tx_cfg.frequency) {
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005f9a:	2501      	movs	r5, #1
 8005f9c:	ab05      	add	r3, sp, #20
 8005f9e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8005fa2:	930d      	str	r3, [sp, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d03c      	beq.n	8006022 <sx12xx_lora_send+0xae>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4649      	mov	r1, r9
 8005fac:	4640      	mov	r0, r8
 8005fae:	f7ff ffb9 	bl	8005f24 <sx12xx_lora_send_async>
	if (ret < 0) {
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	db1a      	blt.n	8005fec <sx12xx_lora_send+0x78>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8005fb6:	b2e4      	uxtb	r4, r4
 8005fb8:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8005fbc:	4c1b      	ldr	r4, [pc, #108]	; (800602c <sx12xx_lora_send+0xb8>)
 8005fbe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fc0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8005fca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005fce:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8005fd0:	9503      	str	r5, [sp, #12]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47a0      	blx	r4
 8005fd6:	220a      	movs	r2, #10
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8005fd8:	40a8      	lsls	r0, r5
 8005fda:	fba0 2302 	umull	r2, r3, r0, r2
	return z_impl_k_poll(events, num_events, timeout);
 8005fde:	4629      	mov	r1, r5
 8005fe0:	a809      	add	r0, sp, #36	; 0x24
 8005fe2:	f00a ffbd 	bl	8010f60 <z_impl_k_poll>
	if (ret < 0) {
 8005fe6:	42b0      	cmp	r0, r6
 8005fe8:	db03      	blt.n	8005ff2 <sx12xx_lora_send+0x7e>
	return 0;
 8005fea:	2000      	movs	r0, #0
}
 8005fec:	b015      	add	sp, #84	; 0x54
 8005fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Packet transmission failed!");
 8005ff2:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <sx12xx_lora_send+0xbc>)
 8005ff4:	9312      	str	r3, [sp, #72]	; 0x48
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	9311      	str	r3, [sp, #68]	; 0x44
 8005ffa:	480e      	ldr	r0, [pc, #56]	; (8006034 <sx12xx_lora_send+0xc0>)
 8005ffc:	4633      	mov	r3, r6
 8005ffe:	aa11      	add	r2, sp, #68	; 0x44
 8006000:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006004:	f00e f8e5 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 8006008:	f7ff ff00 	bl	8005e0c <modem_release.constprop.0>
 800600c:	2800      	cmp	r0, #0
 800600e:	d1ec      	bne.n	8005fea <sx12xx_lora_send+0x76>
 8006010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006018:	4629      	mov	r1, r5
 800601a:	a809      	add	r0, sp, #36	; 0x24
 800601c:	f00a ffa0 	bl	8010f60 <z_impl_k_poll>
 8006020:	e7e3      	b.n	8005fea <sx12xx_lora_send+0x76>
		return -EINVAL;
 8006022:	f06f 0015 	mvn.w	r0, #21
 8006026:	e7e1      	b.n	8005fec <sx12xx_lora_send+0x78>
 8006028:	200010b0 	.word	0x200010b0
 800602c:	0801a484 	.word	0x0801a484
 8006030:	0801be12 	.word	0x0801be12
 8006034:	0801a030 	.word	0x0801a030

08006038 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603a:	b093      	sub	sp, #76	; 0x4c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800603c:	2500      	movs	r5, #0
{
 800603e:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8006042:	ac03      	add	r4, sp, #12
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8006044:	2210      	movs	r2, #16
{
 8006046:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8006048:	a807      	add	r0, sp, #28
 800604a:	4629      	mov	r1, r5
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800604c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006050:	e9cd 5505 	strd	r5, r5, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8006054:	f013 fa36 	bl	80194c4 <memset>
 8006058:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <sx12xx_lora_recv+0xbc>)
 800605a:	940b      	str	r4, [sp, #44]	; 0x2c
 800605c:	2601      	movs	r6, #1
 800605e:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8006062:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006066:	f3bf 8f5b 	dmb	ish
 800606a:	e852 1f00 	ldrex	r1, [r2]
 800606e:	42a9      	cmp	r1, r5
 8006070:	d103      	bne.n	800607a <sx12xx_lora_recv+0x42>
 8006072:	e842 6000 	strex	r0, r6, [r2]
 8006076:	2800      	cmp	r0, #0
 8006078:	d1f7      	bne.n	800606a <sx12xx_lora_recv+0x32>
 800607a:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 800607e:	d135      	bne.n	80060ec <sx12xx_lora_recv+0xb4>
	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
 8006080:	f10d 0207 	add.w	r2, sp, #7
	dev_data.operation_done = &done;
 8006084:	e9c3 4501 	strd	r4, r5, [r3, #4]
	dev_data.rx_params.size = &size;
 8006088:	645a      	str	r2, [r3, #68]	; 0x44
	dev_data.rx_params.rssi = rssi;
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 800608a:	4c1b      	ldr	r4, [pc, #108]	; (80060f8 <sx12xx_lora_recv+0xc0>)
	dev_data.rx_params.rssi = rssi;
 800608c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800608e:	649a      	str	r2, [r3, #72]	; 0x48
	dev_data.rx_params.snr = snr;
 8006090:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006092:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.buf = data;
 8006094:	641f      	str	r7, [r3, #64]	; 0x40
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8006096:	21ff      	movs	r1, #255	; 0xff
 8006098:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800609a:	4630      	mov	r0, r6
 800609c:	4798      	blx	r3
	Radio.Rx(0);
 800609e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060a0:	4628      	mov	r0, r5
 80060a2:	4798      	blx	r3
 80060a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80060a8:	4631      	mov	r1, r6
 80060aa:	a807      	add	r0, sp, #28
 80060ac:	f00a ff58 	bl	8010f60 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 80060b0:	1e04      	subs	r4, r0, #0
 80060b2:	da0a      	bge.n	80060ca <sx12xx_lora_recv+0x92>
		if (!modem_release(&dev_data)) {
 80060b4:	f7ff feaa 	bl	8005e0c <modem_release.constprop.0>
 80060b8:	b950      	cbnz	r0, 80060d0 <sx12xx_lora_recv+0x98>
 80060ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060c2:	4631      	mov	r1, r6
 80060c4:	a807      	add	r0, sp, #28
 80060c6:	f00a ff4b 	bl	8010f60 <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 80060ca:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80060ce:	e00a      	b.n	80060e6 <sx12xx_lora_recv+0xae>
		LOG_INF("Receive timeout");
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <sx12xx_lora_recv+0xc4>)
 80060d2:	9310      	str	r3, [sp, #64]	; 0x40
 80060d4:	2302      	movs	r3, #2
 80060d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060d8:	4809      	ldr	r0, [pc, #36]	; (8006100 <sx12xx_lora_recv+0xc8>)
 80060da:	462b      	mov	r3, r5
 80060dc:	aa0f      	add	r2, sp, #60	; 0x3c
 80060de:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80060e2:	f00e f876 	bl	80141d2 <z_impl_z_log_msg2_static_create>
}
 80060e6:	4620      	mov	r0, r4
 80060e8:	b013      	add	sp, #76	; 0x4c
 80060ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
 80060ec:	f06f 040f 	mvn.w	r4, #15
 80060f0:	e7f9      	b.n	80060e6 <sx12xx_lora_recv+0xae>
 80060f2:	bf00      	nop
 80060f4:	200010b0 	.word	0x200010b0
 80060f8:	0801a484 	.word	0x0801a484
 80060fc:	0801be2e 	.word	0x0801be2e
 8006100:	0801a030 	.word	0x0801a030

08006104 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
 8006104:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
 8006106:	b939      	cbnz	r1, 8006118 <sx12xx_lora_recv_async+0x14>
		if (!modem_release(&dev_data)) {
 8006108:	f7ff fe80 	bl	8005e0c <modem_release.constprop.0>
			/* Not receiving or already being stopped */
			return -EINVAL;
		}
		return 0;
 800610c:	2800      	cmp	r0, #0
 800610e:	bf0c      	ite	eq
 8006110:	f06f 0015 	mvneq.w	r0, #21
 8006114:	2000      	movne	r0, #0
	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
	Radio.Rx(0);

	return 0;
}
 8006116:	bd10      	pop	{r4, pc}
 8006118:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <sx12xx_lora_recv_async+0x54>)
 800611a:	f3bf 8f5b 	dmb	ish
 800611e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006122:	2001      	movs	r0, #1
 8006124:	e852 4f00 	ldrex	r4, [r2]
 8006128:	2c00      	cmp	r4, #0
 800612a:	d104      	bne.n	8006136 <sx12xx_lora_recv_async+0x32>
 800612c:	e842 0c00 	strex	ip, r0, [r2]
 8006130:	f1bc 0f00 	cmp.w	ip, #0
 8006134:	d1f6      	bne.n	8006124 <sx12xx_lora_recv_async+0x20>
 8006136:	f3bf 8f5b 	dmb	ish
	if (!modem_acquire(&dev_data)) {
 800613a:	d109      	bne.n	8006150 <sx12xx_lora_recv_async+0x4c>
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 800613c:	4c07      	ldr	r4, [pc, #28]	; (800615c <sx12xx_lora_recv_async+0x58>)
	dev_data.async_rx_cb = cb;
 800613e:	6099      	str	r1, [r3, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8006140:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006142:	21ff      	movs	r1, #255	; 0xff
 8006144:	4798      	blx	r3
	Radio.Rx(0);
 8006146:	2000      	movs	r0, #0
 8006148:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800614a:	4798      	blx	r3
	return 0;
 800614c:	2000      	movs	r0, #0
 800614e:	e7e2      	b.n	8006116 <sx12xx_lora_recv_async+0x12>
		return -EBUSY;
 8006150:	f06f 000f 	mvn.w	r0, #15
 8006154:	e7df      	b.n	8006116 <sx12xx_lora_recv_async+0x12>
 8006156:	bf00      	nop
 8006158:	200010b0 	.word	0x200010b0
 800615c:	0801a484 	.word	0x0801a484

08006160 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8006160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006162:	4d27      	ldr	r5, [pc, #156]	; (8006200 <sx12xx_lora_config+0xa0>)
 8006164:	f3bf 8f5b 	dmb	ish
 8006168:	b08b      	sub	sp, #44	; 0x2c
 800616a:	460c      	mov	r4, r1
 800616c:	2601      	movs	r6, #1
 800616e:	e855 3f00 	ldrex	r3, [r5]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d103      	bne.n	800617e <sx12xx_lora_config+0x1e>
 8006176:	e845 6200 	strex	r2, r6, [r5]
 800617a:	2a00      	cmp	r2, #0
 800617c:	d1f7      	bne.n	800616e <sx12xx_lora_config+0xe>
 800617e:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8006182:	d139      	bne.n	80061f8 <sx12xx_lora_config+0x98>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8006184:	4f1f      	ldr	r7, [pc, #124]	; (8006204 <sx12xx_lora_config+0xa4>)
 8006186:	6820      	ldr	r0, [r4, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4798      	blx	r3

	if (config->tx) {
 800618c:	7ae3      	ldrb	r3, [r4, #11]
 800618e:	b303      	cbz	r3, 80061d2 <sx12xx_lora_config+0x72>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	6861      	ldr	r1, [r4, #4]
 8006194:	f1a5 030c 	sub.w	r3, r5, #12
 8006198:	c303      	stmia	r3!, {r0, r1}
 800619a:	68a0      	ldr	r0, [r4, #8]
 800619c:	6018      	str	r0, [r3, #0]
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 800619e:	2200      	movs	r2, #0
 80061a0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80061a4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80061a8:	8923      	ldrh	r3, [r4, #8]
 80061aa:	9302      	str	r3, [sp, #8]
 80061ac:	79a3      	ldrb	r3, [r4, #6]
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	7963      	ldrb	r3, [r4, #5]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	e9cd 2205 	strd	r2, r2, [sp, #20]
 80061b8:	e9cd 2603 	strd	r2, r6, [sp, #12]
 80061bc:	69fd      	ldr	r5, [r7, #28]
 80061be:	7923      	ldrb	r3, [r4, #4]
 80061c0:	f994 100a 	ldrsb.w	r1, [r4, #10]
 80061c4:	4630      	mov	r0, r6
 80061c6:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 80061c8:	f7ff fe20 	bl	8005e0c <modem_release.constprop.0>
	return 0;
 80061cc:	2000      	movs	r0, #0
}
 80061ce:	b00b      	add	sp, #44	; 0x2c
 80061d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 80061d2:	220a      	movs	r2, #10
 80061d4:	9202      	str	r2, [sp, #8]
 80061d6:	8922      	ldrh	r2, [r4, #8]
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	e9cd 3200 	strd	r3, r2, [sp]
 80061de:	e9cd 3608 	strd	r3, r6, [sp, #32]
 80061e2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80061e6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80061ea:	69bd      	ldr	r5, [r7, #24]
 80061ec:	79a3      	ldrb	r3, [r4, #6]
 80061ee:	7962      	ldrb	r2, [r4, #5]
 80061f0:	7921      	ldrb	r1, [r4, #4]
 80061f2:	4630      	mov	r0, r6
 80061f4:	47a8      	blx	r5
 80061f6:	e7e7      	b.n	80061c8 <sx12xx_lora_config+0x68>
		return -EBUSY;
 80061f8:	f06f 000f 	mvn.w	r0, #15
 80061fc:	e7e7      	b.n	80061ce <sx12xx_lora_config+0x6e>
 80061fe:	bf00      	nop
 8006200:	200010ec 	.word	0x200010ec
 8006204:	0801a484 	.word	0x0801a484

08006208 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	461a      	mov	r2, r3
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <sx12xx_lora_test_cw+0x38>)
 8006212:	f3bf 8f5b 	dmb	ish
 8006216:	2401      	movs	r4, #1
 8006218:	e853 5f00 	ldrex	r5, [r3]
 800621c:	2d00      	cmp	r5, #0
 800621e:	d104      	bne.n	800622a <sx12xx_lora_test_cw+0x22>
 8006220:	e843 4c00 	strex	ip, r4, [r3]
 8006224:	f1bc 0f00 	cmp.w	ip, #0
 8006228:	d1f6      	bne.n	8006218 <sx12xx_lora_test_cw+0x10>
 800622a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 800622e:	d104      	bne.n	800623a <sx12xx_lora_test_cw+0x32>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <sx12xx_lora_test_cw+0x3c>)
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	4798      	blx	r3
	return 0;
 8006236:	2000      	movs	r0, #0
}
 8006238:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
 800623a:	f06f 000f 	mvn.w	r0, #15
 800623e:	e7fb      	b.n	8006238 <sx12xx_lora_test_cw+0x30>
 8006240:	200010ec 	.word	0x200010ec
 8006244:	0801a484 	.word	0x0801a484

08006248 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8006248:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <sx12xx_init+0x3c>)
 800624c:	f3bf 8f5b 	dmb	ish
 8006250:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006254:	2400      	movs	r4, #0
 8006256:	e852 1f00 	ldrex	r1, [r2]
 800625a:	e842 4500 	strex	r5, r4, [r2]
 800625e:	2d00      	cmp	r5, #0
 8006260:	d1f9      	bne.n	8006256 <sx12xx_init+0xe>
 8006262:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
 8006266:	4d08      	ldr	r5, [pc, #32]	; (8006288 <sx12xx_init+0x40>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8006268:	4a08      	ldr	r2, [pc, #32]	; (800628c <sx12xx_init+0x44>)
 800626a:	60da      	str	r2, [r3, #12]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 800626c:	4a08      	ldr	r2, [pc, #32]	; (8006290 <sx12xx_init+0x48>)
	dev_data.dev = dev;
 800626e:	6018      	str	r0, [r3, #0]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8006270:	615a      	str	r2, [r3, #20]
	Radio.Init(&dev_data.events);
 8006272:	f103 000c 	add.w	r0, r3, #12
 8006276:	682a      	ldr	r2, [r5, #0]
 8006278:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 800627a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800627c:	4798      	blx	r3

	return 0;
}
 800627e:	4620      	mov	r0, r4
 8006280:	bd38      	pop	{r3, r4, r5, pc}
 8006282:	bf00      	nop
 8006284:	200010b0 	.word	0x200010b0
 8006288:	0801a484 	.word	0x0801a484
 800628c:	08005e65 	.word	0x08005e65
 8006290:	08005d5d 	.word	0x08005d5d

08006294 <sx126x_set_rx_enable>:
	gpio_pin_set_dt(&dev_config.tx_enable, value);
#endif
}

static void sx126x_set_rx_enable(int value)
{
 8006294:	4602      	mov	r2, r0
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8006296:	2105      	movs	r1, #5
 8006298:	4801      	ldr	r0, [pc, #4]	; (80062a0 <sx126x_set_rx_enable+0xc>)
 800629a:	f00e b8d2 	b.w	8014442 <gpio_pin_set.isra.0>
 800629e:	bf00      	nop
 80062a0:	08019c20 	.word	0x08019c20

080062a4 <sx126x_set_tx_enable>:
{
 80062a4:	4602      	mov	r2, r0
 80062a6:	2104      	movs	r1, #4
 80062a8:	4801      	ldr	r0, [pc, #4]	; (80062b0 <sx126x_set_tx_enable+0xc>)
 80062aa:	f00e b8ca 	b.w	8014442 <gpio_pin_set.isra.0>
 80062ae:	bf00      	nop
 80062b0:	08019c20 	.word	0x08019c20

080062b4 <sx126x_dio1_irq_work_handler.part.0>:
uint32_t SX126xGetDio1PinState(void)
{
	return sx126x_get_dio1_pin_state(&dev_data);
}

static void sx126x_dio1_irq_work_handler(struct k_work *work)
 80062b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	LOG_DBG("Processing DIO1 interrupt");
	if (!dev_data.radio_dio_irq) {
		LOG_WRN("DIO1 interrupt without valid HAL IRQ callback.");
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <sx126x_dio1_irq_work_handler.part.0+0x20>)
 80062b8:	9304      	str	r3, [sp, #16]
 80062ba:	2302      	movs	r3, #2
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	4806      	ldr	r0, [pc, #24]	; (80062d8 <sx126x_dio1_irq_work_handler.part.0+0x24>)
 80062c0:	2300      	movs	r3, #0
 80062c2:	aa03      	add	r2, sp, #12
 80062c4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80062c8:	f00d ff83 	bl	80141d2 <z_impl_z_log_msg2_static_create>

	/* Re-enable the interrupt if we are not in sleep mode */
	if (dev_data.mode != MODE_SLEEP) {
		sx126x_dio1_irq_enable(&dev_data);
	}
}
 80062cc:	b007      	add	sp, #28
 80062ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80062d2:	bf00      	nop
 80062d4:	0801be4c 	.word	0x0801be4c
 80062d8:	0801a028 	.word	0x0801a028

080062dc <sx126x_dio1_irq_work_handler>:
{
 80062dc:	b510      	push	{r4, lr}
	if (!dev_data.radio_dio_irq) {
 80062de:	4c0b      	ldr	r4, [pc, #44]	; (800630c <sx126x_dio1_irq_work_handler+0x30>)
 80062e0:	69e3      	ldr	r3, [r4, #28]
 80062e2:	b91b      	cbnz	r3, 80062ec <sx126x_dio1_irq_work_handler+0x10>
}
 80062e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e8:	f7ff bfe4 	b.w	80062b4 <sx126x_dio1_irq_work_handler.part.0>
	dev_data.radio_dio_irq(NULL);
 80062ec:	2000      	movs	r0, #0
 80062ee:	4798      	blx	r3
	if (Radio.IrqProcess) {
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <sx126x_dio1_irq_work_handler+0x34>)
 80062f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f4:	b103      	cbz	r3, 80062f8 <sx126x_dio1_irq_work_handler+0x1c>
		Radio.IrqProcess();
 80062f6:	4798      	blx	r3
	if (dev_data.mode != MODE_SLEEP) {
 80062f8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80062fc:	b123      	cbz	r3, 8006308 <sx126x_dio1_irq_work_handler+0x2c>
}
 80062fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sx126x_dio1_irq_enable(&dev_data);
 8006302:	4802      	ldr	r0, [pc, #8]	; (800630c <sx126x_dio1_irq_work_handler+0x30>)
 8006304:	f000 b944 	b.w	8006590 <sx126x_dio1_irq_enable>
}
 8006308:	bd10      	pop	{r4, pc}
 800630a:	bf00      	nop
 800630c:	20001100 	.word	0x20001100
 8006310:	0801a484 	.word	0x0801a484

08006314 <sx126x_lora_init>:

static int sx126x_lora_init(const struct device *dev)
{
 8006314:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret;

	LOG_DBG("Initializing %s", DT_INST_LABEL(0));

	if (sx12xx_configure_pin(antenna_enable, GPIO_OUTPUT_INACTIVE) ||
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 8006316:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
	const struct sx126x_config *config = dev->config;
 800631a:	6847      	ldr	r7, [r0, #4]
{
 800631c:	b087      	sub	sp, #28
 800631e:	4605      	mov	r5, r0
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 8006320:	4828      	ldr	r0, [pc, #160]	; (80063c4 <sx126x_lora_init+0xb0>)
 8006322:	f7ff fdaf 	bl	8005e84 <__sx12xx_configure_pin>
	if (sx12xx_configure_pin(antenna_enable, GPIO_OUTPUT_INACTIVE) ||
 8006326:	b120      	cbz	r0, 8006332 <sx126x_lora_init+0x1e>
	    sx12xx_configure_pin(tx_enable, GPIO_OUTPUT_INACTIVE)) {
		return -EIO;
 8006328:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 800632c:	4620      	mov	r0, r4
 800632e:	b007      	add	sp, #28
 8006330:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    sx12xx_configure_pin(tx_enable, GPIO_OUTPUT_INACTIVE)) {
 8006332:	4825      	ldr	r0, [pc, #148]	; (80063c8 <sx126x_lora_init+0xb4>)
 8006334:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8006338:	f7ff fda4 	bl	8005e84 <__sx12xx_configure_pin>
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 800633c:	4606      	mov	r6, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	d1f2      	bne.n	8006328 <sx126x_lora_init+0x14>
	k_work_init(&dev_data.dio1_irq_work, sx126x_dio1_irq_work_handler);
 8006342:	4922      	ldr	r1, [pc, #136]	; (80063cc <sx126x_lora_init+0xb8>)
 8006344:	4822      	ldr	r0, [pc, #136]	; (80063d0 <sx126x_lora_init+0xbc>)
 8006346:	f012 fda9 	bl	8018e9c <k_work_init>
	ret = sx126x_variant_init(dev);
 800634a:	4628      	mov	r0, r5
 800634c:	f000 f92a 	bl	80065a4 <sx126x_variant_init>
	if (ret) {
 8006350:	4604      	mov	r4, r0
 8006352:	b158      	cbz	r0, 800636c <sx126x_lora_init+0x58>
		LOG_ERR("Variant initialization failed");
 8006354:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <sx126x_lora_init+0xc0>)
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	2302      	movs	r3, #2
 800635a:	9303      	str	r3, [sp, #12]
 800635c:	481e      	ldr	r0, [pc, #120]	; (80063d8 <sx126x_lora_init+0xc4>)
 800635e:	4633      	mov	r3, r6
 8006360:	aa03      	add	r2, sp, #12
 8006362:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006366:	f00d ff34 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		return ret;
 800636a:	e7df      	b.n	800632c <sx126x_lora_init+0x18>
	if (!device_is_ready(spec->bus)) {
 800636c:	6838      	ldr	r0, [r7, #0]
 800636e:	f012 fcfb 	bl	8018d68 <z_device_is_ready>
 8006372:	b968      	cbnz	r0, 8006390 <sx126x_lora_init+0x7c>
		LOG_ERR("SPI device not ready");
 8006374:	4b19      	ldr	r3, [pc, #100]	; (80063dc <sx126x_lora_init+0xc8>)
 8006376:	9304      	str	r3, [sp, #16]
 8006378:	2302      	movs	r3, #2
 800637a:	9303      	str	r3, [sp, #12]
 800637c:	4816      	ldr	r0, [pc, #88]	; (80063d8 <sx126x_lora_init+0xc4>)
 800637e:	2300      	movs	r3, #0
 8006380:	aa03      	add	r2, sp, #12
 8006382:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006386:	f00d ff24 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		return -ENODEV;
 800638a:	f06f 0412 	mvn.w	r4, #18
 800638e:	e7cd      	b.n	800632c <sx126x_lora_init+0x18>
	if (spec->config.cs &&
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	b123      	cbz	r3, 800639e <sx126x_lora_init+0x8a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	f012 fce7 	bl	8018d68 <z_device_is_ready>
	if (spec->config.cs &&
 800639a:	2800      	cmp	r0, #0
 800639c:	d0ea      	beq.n	8006374 <sx126x_lora_init+0x60>
	ret = sx12xx_init(dev);
 800639e:	4628      	mov	r0, r5
 80063a0:	f7ff ff52 	bl	8006248 <sx12xx_init>
	if (ret < 0) {
 80063a4:	1e05      	subs	r5, r0, #0
 80063a6:	dac1      	bge.n	800632c <sx126x_lora_init+0x18>
		LOG_ERR("Failed to initialize SX12xx common");
 80063a8:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <sx126x_lora_init+0xcc>)
 80063aa:	9304      	str	r3, [sp, #16]
 80063ac:	2302      	movs	r3, #2
 80063ae:	9303      	str	r3, [sp, #12]
 80063b0:	4809      	ldr	r0, [pc, #36]	; (80063d8 <sx126x_lora_init+0xc4>)
 80063b2:	2300      	movs	r3, #0
 80063b4:	aa03      	add	r2, sp, #12
 80063b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80063ba:	f00d ff0a 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		return ret;
 80063be:	462c      	mov	r4, r5
 80063c0:	e7b4      	b.n	800632c <sx126x_lora_init+0x18>
 80063c2:	bf00      	nop
 80063c4:	0801a388 	.word	0x0801a388
 80063c8:	0801a380 	.word	0x0801a380
 80063cc:	080062dd 	.word	0x080062dd
 80063d0:	2000110c 	.word	0x2000110c
 80063d4:	0801be7b 	.word	0x0801be7b
 80063d8:	0801a028 	.word	0x0801a028
 80063dc:	0801be99 	.word	0x0801be99
 80063e0:	0801beae 	.word	0x0801beae

080063e4 <SX126xGetOperatingMode>:
}
 80063e4:	4b01      	ldr	r3, [pc, #4]	; (80063ec <SX126xGetOperatingMode+0x8>)
 80063e6:	f893 0020 	ldrb.w	r0, [r3, #32]
 80063ea:	4770      	bx	lr
 80063ec:	20001100 	.word	0x20001100

080063f0 <SX126xSetOperatingMode>:
{
 80063f0:	b508      	push	{r3, lr}
 80063f2:	4603      	mov	r3, r0
	dev_data.mode = mode;
 80063f4:	4810      	ldr	r0, [pc, #64]	; (8006438 <SX126xSetOperatingMode+0x48>)
	switch (mode) {
 80063f6:	2b04      	cmp	r3, #4
	dev_data.mode = mode;
 80063f8:	f880 3020 	strb.w	r3, [r0, #32]
	switch (mode) {
 80063fc:	d011      	beq.n	8006422 <SX126xSetOperatingMode+0x32>
 80063fe:	d805      	bhi.n	800640c <SX126xSetOperatingMode+0x1c>
 8006400:	b1bb      	cbz	r3, 8006432 <SX126xSetOperatingMode+0x42>
		sx126x_set_rx_enable(0);
 8006402:	2000      	movs	r0, #0
 8006404:	f7ff ff46 	bl	8006294 <sx126x_set_rx_enable>
		sx126x_set_tx_enable(0);
 8006408:	2000      	movs	r0, #0
 800640a:	e00e      	b.n	800642a <SX126xSetOperatingMode+0x3a>
	switch (mode) {
 800640c:	3b05      	subs	r3, #5
 800640e:	2b02      	cmp	r3, #2
 8006410:	d8f7      	bhi.n	8006402 <SX126xSetOperatingMode+0x12>
		sx126x_set_tx_enable(0);
 8006412:	2000      	movs	r0, #0
 8006414:	f7ff ff46 	bl	80062a4 <sx126x_set_tx_enable>
}
 8006418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sx126x_set_rx_enable(1);
 800641c:	2001      	movs	r0, #1
 800641e:	f7ff bf39 	b.w	8006294 <sx126x_set_rx_enable>
		sx126x_set_rx_enable(0);
 8006422:	2000      	movs	r0, #0
 8006424:	f7ff ff36 	bl	8006294 <sx126x_set_rx_enable>
		sx126x_set_tx_enable(1);
 8006428:	2001      	movs	r0, #1
}
 800642a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sx126x_set_tx_enable(0);
 800642e:	f7ff bf39 	b.w	80062a4 <sx126x_set_tx_enable>
		sx126x_dio1_irq_disable(&dev_data);
 8006432:	f00e f8d8 	bl	80145e6 <sx126x_dio1_irq_disable>
 8006436:	e7e4      	b.n	8006402 <SX126xSetOperatingMode+0x12>
 8006438:	20001100 	.word	0x20001100

0800643c <SX126xIoIrqInit>:
	dev_data.radio_dio_irq = dioIrq;
 800643c:	4b01      	ldr	r3, [pc, #4]	; (8006444 <SX126xIoIrqInit+0x8>)
 800643e:	61d8      	str	r0, [r3, #28]
}
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	20001100 	.word	0x20001100

08006448 <SX126xReset>:
{
 8006448:	b510      	push	{r4, lr}
	sx126x_reset(&dev_data);
 800644a:	4c04      	ldr	r4, [pc, #16]	; (800645c <SX126xReset+0x14>)
 800644c:	4620      	mov	r0, r4
 800644e:	f00e f8af 	bl	80145b0 <sx126x_reset>
	dev_data.mode = MODE_STDBY_RC;
 8006452:	2301      	movs	r3, #1
 8006454:	f884 3020 	strb.w	r3, [r4, #32]
}
 8006458:	bd10      	pop	{r4, pc}
 800645a:	bf00      	nop
 800645c:	20001100 	.word	0x20001100

08006460 <SX126xWaitOnBusy>:
{
 8006460:	b510      	push	{r4, lr}
	while (sx126x_is_busy(&dev_data)) {
 8006462:	4c05      	ldr	r4, [pc, #20]	; (8006478 <SX126xWaitOnBusy+0x18>)
 8006464:	4620      	mov	r0, r4
 8006466:	f000 f88b 	bl	8006580 <sx126x_is_busy>
 800646a:	b900      	cbnz	r0, 800646e <SX126xWaitOnBusy+0xe>
}
 800646c:	bd10      	pop	{r4, pc}
	return z_impl_k_sleep(timeout);
 800646e:	2100      	movs	r1, #0
 8006470:	200a      	movs	r0, #10
 8006472:	f00a fae1 	bl	8010a38 <z_impl_k_sleep>
 8006476:	e7f5      	b.n	8006464 <SX126xWaitOnBusy+0x4>
 8006478:	20001100 	.word	0x20001100

0800647c <sx126x_spi_transceive.isra.0>:
static int sx126x_spi_transceive(uint8_t *req_tx, uint8_t *req_rx,
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	b092      	sub	sp, #72	; 0x48
 8006480:	460d      	mov	r5, r1
 8006482:	e9dd 6116 	ldrd	r6, r1, [sp, #88]	; 0x58
	const struct spi_buf tx_buf[] = {
 8006486:	e9cd 3106 	strd	r3, r1, [sp, #24]
	const struct spi_buf_set tx = {
 800648a:	ab04      	add	r3, sp, #16
	const struct spi_buf tx_buf[] = {
 800648c:	e9cd 0204 	strd	r0, r2, [sp, #16]
	const struct spi_buf rx_buf[] = {
 8006490:	e9cd 5208 	strd	r5, r2, [sp, #32]
	const struct spi_buf_set tx = {
 8006494:	9300      	str	r3, [sp, #0]
	const struct spi_buf_set rx = {
 8006496:	aa08      	add	r2, sp, #32
	const struct spi_buf_set tx = {
 8006498:	2302      	movs	r3, #2
static int sx126x_spi_transceive(uint8_t *req_tx, uint8_t *req_rx,
 800649a:	4604      	mov	r4, r0
	const struct spi_buf rx_buf[] = {
 800649c:	e9cd 610a 	strd	r6, r1, [sp, #40]	; 0x28
	const struct spi_buf_set rx = {
 80064a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	const struct spi_buf_set tx = {
 80064a4:	9301      	str	r3, [sp, #4]
	SX126xCheckDeviceReady();
 80064a6:	f00e f9db 	bl	8014860 <SX126xCheckDeviceReady>
	if (!req_rx && !data_rx) {
 80064aa:	4812      	ldr	r0, [pc, #72]	; (80064f4 <sx126x_spi_transceive.isra.0+0x78>)
 80064ac:	b9dd      	cbnz	r5, 80064e6 <sx126x_spi_transceive.isra.0+0x6a>
 80064ae:	b9d6      	cbnz	r6, 80064e6 <sx126x_spi_transceive.isra.0+0x6a>
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80064b0:	6883      	ldr	r3, [r0, #8]
 80064b2:	4911      	ldr	r1, [pc, #68]	; (80064f8 <sx126x_spi_transceive.isra.0+0x7c>)
 80064b4:	681d      	ldr	r5, [r3, #0]
 80064b6:	466a      	mov	r2, sp
 80064b8:	4633      	mov	r3, r6
 80064ba:	47a8      	blx	r5
	if (ret < 0) {
 80064bc:	2800      	cmp	r0, #0
 80064be:	da0b      	bge.n	80064d8 <sx126x_spi_transceive.isra.0+0x5c>
		LOG_ERR("SPI transaction failed: %i", ret);
 80064c0:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <sx126x_spi_transceive.isra.0+0x80>)
 80064c2:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
 80064c6:	2303      	movs	r3, #3
 80064c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80064ca:	480d      	ldr	r0, [pc, #52]	; (8006500 <sx126x_spi_transceive.isra.0+0x84>)
 80064cc:	2300      	movs	r3, #0
 80064ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80064d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80064d4:	f00d fe7d 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	if (req_len >= 1 && req_tx[0] != RADIO_SET_SLEEP) {
 80064d8:	7823      	ldrb	r3, [r4, #0]
 80064da:	2b84      	cmp	r3, #132	; 0x84
 80064dc:	d001      	beq.n	80064e2 <sx126x_spi_transceive.isra.0+0x66>
		SX126xWaitOnBusy();
 80064de:	f7ff ffbf 	bl	8006460 <SX126xWaitOnBusy>
}
 80064e2:	b012      	add	sp, #72	; 0x48
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
 80064e6:	6883      	ldr	r3, [r0, #8]
 80064e8:	4903      	ldr	r1, [pc, #12]	; (80064f8 <sx126x_spi_transceive.isra.0+0x7c>)
 80064ea:	681d      	ldr	r5, [r3, #0]
 80064ec:	4801      	ldr	r0, [pc, #4]	; (80064f4 <sx126x_spi_transceive.isra.0+0x78>)
 80064ee:	ab02      	add	r3, sp, #8
 80064f0:	466a      	mov	r2, sp
 80064f2:	e7e2      	b.n	80064ba <sx126x_spi_transceive.isra.0+0x3e>
 80064f4:	08019ce0 	.word	0x08019ce0
 80064f8:	0801a374 	.word	0x0801a374
 80064fc:	0801bed1 	.word	0x0801bed1
 8006500:	0801a028 	.word	0x0801a028

08006504 <SX126xWakeup>:
{
 8006504:	b570      	push	{r4, r5, r6, lr}
	sx126x_dio1_irq_enable(&dev_data);
 8006506:	4c16      	ldr	r4, [pc, #88]	; (8006560 <SX126xWakeup+0x5c>)
{
 8006508:	b08c      	sub	sp, #48	; 0x30
	sx126x_dio1_irq_enable(&dev_data);
 800650a:	4620      	mov	r0, r4
 800650c:	f000 f840 	bl	8006590 <sx126x_dio1_irq_enable>
	uint8_t req[] = { RADIO_GET_STATUS, 0 };
 8006510:	23c0      	movs	r3, #192	; 0xc0
 8006512:	f8ad 3004 	strh.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
 8006516:	ab01      	add	r3, sp, #4
 8006518:	9302      	str	r3, [sp, #8]
 800651a:	2302      	movs	r3, #2
 800651c:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set tx = {
 800651e:	2501      	movs	r5, #1
 8006520:	ab02      	add	r3, sp, #8
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	9505      	str	r5, [sp, #20]
 8006526:	480f      	ldr	r0, [pc, #60]	; (8006564 <SX126xWakeup+0x60>)
 8006528:	490f      	ldr	r1, [pc, #60]	; (8006568 <SX126xWakeup+0x64>)
 800652a:	6883      	ldr	r3, [r0, #8]
 800652c:	aa04      	add	r2, sp, #16
 800652e:	681e      	ldr	r6, [r3, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	47b0      	blx	r6
	if (ret < 0) {
 8006534:	2800      	cmp	r0, #0
 8006536:	da0d      	bge.n	8006554 <SX126xWakeup+0x50>
		LOG_ERR("SPI transaction failed: %i", ret);
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <SX126xWakeup+0x68>)
 800653a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800653e:	2303      	movs	r3, #3
 8006540:	9309      	str	r3, [sp, #36]	; 0x24
 8006542:	480b      	ldr	r0, [pc, #44]	; (8006570 <SX126xWakeup+0x6c>)
 8006544:	2300      	movs	r3, #0
 8006546:	aa09      	add	r2, sp, #36	; 0x24
 8006548:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800654c:	f00d fe41 	bl	80141d2 <z_impl_z_log_msg2_static_create>
}
 8006550:	b00c      	add	sp, #48	; 0x30
 8006552:	bd70      	pop	{r4, r5, r6, pc}
	SX126xWaitOnBusy();
 8006554:	f7ff ff84 	bl	8006460 <SX126xWaitOnBusy>
	dev_data.mode = MODE_STDBY_RC;
 8006558:	f884 5020 	strb.w	r5, [r4, #32]
 800655c:	e7f8      	b.n	8006550 <SX126xWakeup+0x4c>
 800655e:	bf00      	nop
 8006560:	20001100 	.word	0x20001100
 8006564:	08019ce0 	.word	0x08019ce0
 8006568:	0801a374 	.word	0x0801a374
 800656c:	0801bed1 	.word	0x0801bed1
 8006570:	0801a028 	.word	0x0801a028

08006574 <SX126xGetDio1PinState>:
	return sx126x_get_dio1_pin_state(&dev_data);
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <SX126xGetDio1PinState+0x8>)
 8006576:	f00e b834 	b.w	80145e2 <sx126x_get_dio1_pin_state>
 800657a:	bf00      	nop
 800657c:	20001100 	.word	0x20001100

08006580 <sx126x_is_busy>:
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <sx126x_is_busy+0xc>)
 8006582:	6958      	ldr	r0, [r3, #20]
}

bool sx126x_is_busy(struct sx126x_data *dev_data)
{
	return LL_PWR_IsActiveFlag_RFBUSYS();
}
 8006584:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	58000400 	.word	0x58000400

08006590 <sx126x_dio1_irq_enable>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <sx126x_dio1_irq_enable+0x10>)
 8006592:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006596:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}

void sx126x_dio1_irq_enable(struct sx126x_data *dev_data)
{
	NVIC_ClearPendingIRQ(DT_INST_IRQN(0));
	irq_enable(DT_INST_IRQN(0));
 800659a:	2032      	movs	r0, #50	; 0x32
 800659c:	f7fe bb56 	b.w	8004c4c <arch_irq_enable>
 80065a0:	e000e100 	.word	0xe000e100

080065a4 <sx126x_variant_init>:
	k_work_submit(&dev_data->dio1_irq_work);
}

int sx126x_variant_init(const struct device *dev)
{
	IRQ_CONNECT(DT_INST_IRQN(0),
 80065a4:	2200      	movs	r2, #0
{
 80065a6:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQN(0),
 80065a8:	4611      	mov	r1, r2
 80065aa:	2032      	movs	r0, #50	; 0x32
 80065ac:	f7fe fb72 	bl	8004c94 <z_arm_irq_priority_set>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80065b0:	4a05      	ldr	r2, [pc, #20]	; (80065c8 <sx126x_variant_init+0x24>)
 80065b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80065b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		    DT_INST_IRQ(0, priority),
		    radio_isr, DEVICE_DT_INST_GET(0), 0);
	LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
	irq_enable(DT_INST_IRQN(0));
 80065be:	2032      	movs	r0, #50	; 0x32
 80065c0:	f7fe fb44 	bl	8004c4c <arch_irq_enable>

	return 0;
}
 80065c4:	2000      	movs	r0, #0
 80065c6:	bd08      	pop	{r3, pc}
 80065c8:	58000800 	.word	0x58000800

080065cc <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80065cc:	4b07      	ldr	r3, [pc, #28]	; (80065ec <rand1+0x20>)
 80065ce:	4908      	ldr	r1, [pc, #32]	; (80065f0 <rand1+0x24>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	f243 0039 	movw	r0, #12345	; 0x3039
 80065d6:	fb01 0002 	mla	r0, r1, r2, r0
 80065da:	6018      	str	r0, [r3, #0]
 80065dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80065e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80065e4:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 80065e8:	1ac0      	subs	r0, r0, r3
 80065ea:	4770      	bx	lr
 80065ec:	2000009c 	.word	0x2000009c
 80065f0:	41c64e6d 	.word	0x41c64e6d

080065f4 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80065f4:	4b01      	ldr	r3, [pc, #4]	; (80065fc <srand1+0x8>)
 80065f6:	6018      	str	r0, [r3, #0]
}
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	2000009c 	.word	0x2000009c

08006600 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8006600:	b530      	push	{r4, r5, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8006602:	b130      	cbz	r0, 8006612 <Crc32+0x12>
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8006604:	4d0a      	ldr	r5, [pc, #40]	; (8006630 <Crc32+0x30>)
 8006606:	4401      	add	r1, r0
    uint32_t crc = 0xFFFFFFFF;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    for( uint16_t i = 0; i < length; ++i )
 800660c:	4281      	cmp	r1, r0
 800660e:	d101      	bne.n	8006614 <Crc32+0x14>
        }
    }

    return ~crc;
 8006610:	43d8      	mvns	r0, r3
}
 8006612:	bd30      	pop	{r4, r5, pc}
        crc ^= ( uint32_t )buffer[i];
 8006614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006618:	4053      	eors	r3, r2
 800661a:	2208      	movs	r2, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800661c:	f343 0400 	sbfx	r4, r3, #0, #1
        for( uint16_t i = 0; i < 8; i++ )
 8006620:	3a01      	subs	r2, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8006622:	402c      	ands	r4, r5
        for( uint16_t i = 0; i < 8; i++ )
 8006624:	b292      	uxth	r2, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8006626:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800662a:	2a00      	cmp	r2, #0
 800662c:	d1f6      	bne.n	800661c <Crc32+0x1c>
 800662e:	e7ed      	b.n	800660c <Crc32+0xc>
 8006630:	edb88320 	.word	0xedb88320

08006634 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8006634:	4a04      	ldr	r2, [pc, #16]	; (8006648 <TimerInsertNewHeadTimer+0x14>)
 8006636:	6813      	ldr	r3, [r2, #0]

    if( cur != NULL )
 8006638:	b10b      	cbz	r3, 800663e <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
 800663a:	2100      	movs	r1, #0
 800663c:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
 800663e:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8006640:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8006642:	f00e b8c6 	b.w	80147d2 <TimerSetTimeout>
 8006646:	bf00      	nop
 8006648:	20001124 	.word	0x20001124

0800664c <TimerStart>:
{
 800664c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800664e:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8006650:	a801      	add	r0, sp, #4
 8006652:	f00d fed6 	bl	8014402 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006656:	b16c      	cbz	r4, 8006674 <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8006658:	4d17      	ldr	r5, [pc, #92]	; (80066b8 <TimerStart+0x6c>)
 800665a:	682a      	ldr	r2, [r5, #0]
 800665c:	4613      	mov	r3, r2

    while( cur != NULL )
 800665e:	b973      	cbnz	r3, 800667e <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
 8006660:	6863      	ldr	r3, [r4, #4]
 8006662:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8006664:	2301      	movs	r3, #1
 8006666:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 8006668:	b96a      	cbnz	r2, 8006686 <TimerStart+0x3a>
        RtcSetTimerContext( );
 800666a:	f7ff fb69 	bl	8005d40 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff ffe0 	bl	8006634 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
 8006674:	a801      	add	r0, sp, #4
 8006676:	f00d fece 	bl	8014416 <BoardCriticalSectionEnd>
}
 800667a:	b003      	add	sp, #12
 800667c:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
 800667e:	429c      	cmp	r4, r3
 8006680:	d0f8      	beq.n	8006674 <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	e7eb      	b.n	800665e <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
 8006686:	f7ff fb3b 	bl	8005d00 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
 800668e:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
 8006690:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	4290      	cmp	r0, r2
 8006696:	d3ea      	bcc.n	800666e <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
 8006698:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 800669a:	6959      	ldr	r1, [r3, #20]
 800669c:	b911      	cbnz	r1, 80066a4 <TimerStart+0x58>
    cur->Next = obj;
 800669e:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
 80066a0:	6161      	str	r1, [r4, #20]
 80066a2:	e7e7      	b.n	8006674 <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
 80066a4:	6811      	ldr	r1, [r2, #0]
 80066a6:	4288      	cmp	r0, r1
 80066a8:	d902      	bls.n	80066b0 <TimerStart+0x64>
            next = next->Next;
 80066aa:	4613      	mov	r3, r2
 80066ac:	6952      	ldr	r2, [r2, #20]
 80066ae:	e7f4      	b.n	800669a <TimerStart+0x4e>
            cur->Next = obj;
 80066b0:	615c      	str	r4, [r3, #20]
            obj->Next = next;
 80066b2:	6162      	str	r2, [r4, #20]
            return;
 80066b4:	e7de      	b.n	8006674 <TimerStart+0x28>
 80066b6:	bf00      	nop
 80066b8:	20001124 	.word	0x20001124

080066bc <TimerIrqHandler>:
{
 80066bc:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 80066be:	f7ff fb47 	bl	8005d50 <RtcGetTimerContext>
    if( TimerListHead != NULL )
 80066c2:	4c1b      	ldr	r4, [pc, #108]	; (8006730 <TimerIrqHandler+0x74>)
    uint32_t old =  RtcGetTimerContext( );
 80066c4:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 80066c6:	f7ff fb3b 	bl	8005d40 <RtcSetTimerContext>
    if( TimerListHead != NULL )
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	b19a      	cbz	r2, 80066f6 <TimerIrqHandler+0x3a>
    uint32_t deltaContext = now - old; // intentional wrap around
 80066ce:	1b46      	subs	r6, r0, r5
 80066d0:	4611      	mov	r1, r2
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80066d2:	6949      	ldr	r1, [r1, #20]
 80066d4:	b929      	cbnz	r1, 80066e2 <TimerIrqHandler+0x26>
        TimerListHead = TimerListHead->Next;
 80066d6:	6953      	ldr	r3, [r2, #20]
 80066d8:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 80066da:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
 80066dc:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80066de:	b943      	cbnz	r3, 80066f2 <TimerIrqHandler+0x36>
 80066e0:	e7fe      	b.n	80066e0 <TimerIrqHandler+0x24>
            if( next->Timestamp > deltaContext )
 80066e2:	680b      	ldr	r3, [r1, #0]
 80066e4:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
 80066e6:	bf86      	itte	hi
 80066e8:	195b      	addhi	r3, r3, r5
 80066ea:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
 80066ec:	2300      	movls	r3, #0
 80066ee:	600b      	str	r3, [r1, #0]
 80066f0:	e7ef      	b.n	80066d2 <TimerIrqHandler+0x16>
        ExecuteCallBack( cur->Callback, cur->Context );
 80066f2:	6910      	ldr	r0, [r2, #16]
 80066f4:	4798      	blx	r3
        cur->IsStarted = false;
 80066f6:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	b92b      	cbnz	r3, 8006708 <TimerIrqHandler+0x4c>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	b980      	cbnz	r0, 8006722 <TimerIrqHandler+0x66>
}
 8006700:	bd70      	pop	{r4, r5, r6, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
 8006702:	6918      	ldr	r0, [r3, #16]
 8006704:	4790      	blx	r2
 8006706:	e7f7      	b.n	80066f8 <TimerIrqHandler+0x3c>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8006708:	681d      	ldr	r5, [r3, #0]
 800670a:	f7ff faf9 	bl	8005d00 <RtcGetTimerElapsedTime>
 800670e:	4285      	cmp	r5, r0
 8006710:	d2f4      	bcs.n	80066fc <TimerIrqHandler+0x40>
        cur = TimerListHead;
 8006712:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
 8006714:	695a      	ldr	r2, [r3, #20]
 8006716:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006718:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
 800671a:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800671c:	2a00      	cmp	r2, #0
 800671e:	d1f0      	bne.n	8006702 <TimerIrqHandler+0x46>
 8006720:	e7fe      	b.n	8006720 <TimerIrqHandler+0x64>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8006722:	7a43      	ldrb	r3, [r0, #9]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1eb      	bne.n	8006700 <TimerIrqHandler+0x44>
}
 8006728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
 800672c:	f00e b851 	b.w	80147d2 <TimerSetTimeout>
 8006730:	20001124 	.word	0x20001124

08006734 <TimerStop>:
{
 8006734:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
 8006736:	4d14      	ldr	r5, [pc, #80]	; (8006788 <TimerStop+0x54>)
{
 8006738:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800673a:	a801      	add	r0, sp, #4
 800673c:	f00d fe61 	bl	8014402 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8006740:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006742:	b103      	cbz	r3, 8006746 <TimerStop+0x12>
 8006744:	b924      	cbnz	r4, 8006750 <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
 8006746:	a801      	add	r0, sp, #4
 8006748:	f00d fe65 	bl	8014416 <BoardCriticalSectionEnd>
}
 800674c:	b003      	add	sp, #12
 800674e:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
 8006750:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
 8006752:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
 8006754:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8006756:	d10d      	bne.n	8006774 <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8006758:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
 800675a:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800675c:	b141      	cbz	r1, 8006770 <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
 800675e:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8006760:	b124      	cbz	r4, 800676c <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
 8006762:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
 8006764:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
 8006766:	f00e f834 	bl	80147d2 <TimerSetTimeout>
 800676a:	e7ec      	b.n	8006746 <TimerStop+0x12>
                RtcStopAlarm( );
 800676c:	f7ff fad2 	bl	8005d14 <RtcStopAlarm>
                TimerListHead = NULL;
 8006770:	602c      	str	r4, [r5, #0]
 8006772:	e7e8      	b.n	8006746 <TimerStop+0x12>
                cur = cur->Next;
 8006774:	461a      	mov	r2, r3
 8006776:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0e4      	beq.n	8006746 <TimerStop+0x12>
            if( cur == obj )
 800677c:	429c      	cmp	r4, r3
 800677e:	d1f9      	bne.n	8006774 <TimerStop+0x40>
                if( cur->Next != NULL )
 8006780:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
 8006782:	6153      	str	r3, [r2, #20]
 8006784:	e7df      	b.n	8006746 <TimerStop+0x12>
 8006786:	bf00      	nop
 8006788:	20001124 	.word	0x20001124

0800678c <SX126xSetCrcSeed>:
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SX126xSetCrcSeed( uint16_t seed )
{
 800678c:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800678e:	0a03      	lsrs	r3, r0, #8
 8006790:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <SX126xSetCrcSeed+0x24>)
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006796:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SX126xGetPacketType( ) )
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	b92b      	cbnz	r3, 80067aa <SX126xSetCrcSeed+0x1e>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800679e:	2202      	movs	r2, #2
 80067a0:	a901      	add	r1, sp, #4
 80067a2:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80067a6:	f00d feb8 	bl	801451a <SX126xWriteRegisters>
}
 80067aa:	b003      	add	sp, #12
 80067ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80067b0:	2000257a 	.word	0x2000257a

080067b4 <SX126xSetCrcPolynomial>:
{
 80067b4:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80067b6:	0a03      	lsrs	r3, r0, #8
 80067b8:	f88d 3004 	strb.w	r3, [sp, #4]
    return PacketType;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <SX126xSetCrcPolynomial+0x24>)
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80067be:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SX126xGetPacketType( ) )
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b92b      	cbnz	r3, 80067d2 <SX126xSetCrcPolynomial+0x1e>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80067c6:	2202      	movs	r2, #2
 80067c8:	a901      	add	r1, sp, #4
 80067ca:	f240 60be 	movw	r0, #1726	; 0x6be
 80067ce:	f00d fea4 	bl	801451a <SX126xWriteRegisters>
}
 80067d2:	b003      	add	sp, #12
 80067d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80067d8:	2000257a 	.word	0x2000257a

080067dc <SX126xSetWhiteningSeed>:
{
 80067dc:	b510      	push	{r4, lr}
    return PacketType;
 80067de:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <SX126xSetWhiteningSeed+0x34>)
    switch( SX126xGetPacketType( ) )
 80067e0:	781b      	ldrb	r3, [r3, #0]
{
 80067e2:	4604      	mov	r4, r0
    switch( SX126xGetPacketType( ) )
 80067e4:	b99b      	cbnz	r3, 800680e <SX126xSetWhiteningSeed+0x32>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80067e6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80067ea:	f00d fecb 	bl	8014584 <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80067ee:	f3c4 2100 	ubfx	r1, r4, #8, #1
 80067f2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80067f6:	4301      	orrs	r1, r0
 80067f8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80067fc:	f00d fea1 	bl	8014542 <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 8006800:	b2e1      	uxtb	r1, r4
 8006802:	f240 60b9 	movw	r0, #1721	; 0x6b9
}
 8006806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 800680a:	f00d be9a 	b.w	8014542 <SX126xWriteRegister>
}
 800680e:	bd10      	pop	{r4, pc}
 8006810:	2000257a 	.word	0x2000257a

08006814 <SX126xSetSleep>:
{
 8006814:	b513      	push	{r0, r1, r4, lr}
 8006816:	4604      	mov	r4, r0
    SX126xAntSwOff( );
 8006818:	f00d fe24 	bl	8014464 <SX126xAntSwOff>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800681c:	f004 0307 	and.w	r3, r4, #7
    if( sleepConfig.Fields.WarmStart == 0 )
 8006820:	f014 0404 	ands.w	r4, r4, #4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006824:	f88d 3007 	strb.w	r3, [sp, #7]
        ImageCalibrated = false;
 8006828:	bf08      	it	eq
 800682a:	4b08      	ldreq	r3, [pc, #32]	; (800684c <SX126xSetSleep+0x38>)
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800682c:	f04f 0201 	mov.w	r2, #1
 8006830:	f10d 0107 	add.w	r1, sp, #7
 8006834:	f04f 0084 	mov.w	r0, #132	; 0x84
        ImageCalibrated = false;
 8006838:	bf08      	it	eq
 800683a:	701c      	strbeq	r4, [r3, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800683c:	f00d fe4d 	bl	80144da <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_SLEEP );
 8006840:	2000      	movs	r0, #0
 8006842:	f7ff fdd5 	bl	80063f0 <SX126xSetOperatingMode>
}
 8006846:	b002      	add	sp, #8
 8006848:	bd10      	pop	{r4, pc}
 800684a:	bf00      	nop
 800684c:	20002578 	.word	0x20002578

08006850 <SX126xInit>:
{
 8006850:	b510      	push	{r4, lr}
 8006852:	4604      	mov	r4, r0
    SX126xReset( );
 8006854:	f7ff fdf8 	bl	8006448 <SX126xReset>
    SX126xIoIrqInit( dioIrq );
 8006858:	4620      	mov	r0, r4
 800685a:	f7ff fdef 	bl	800643c <SX126xIoIrqInit>
    SX126xWakeup( );
 800685e:	f7ff fe51 	bl	8006504 <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 8006862:	2000      	movs	r0, #0
 8006864:	f00e f81b 	bl	801489e <SX126xSetStandby>
    SX126xIoTcxoInit( );
 8006868:	f00d fe01 	bl	801446e <SX126xIoTcxoInit>
    SX126xIoRfSwitchInit( );
 800686c:	f00d fe0b 	bl	8014486 <SX126xIoRfSwitchInit>
    ImageCalibrated = false;
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <SX126xInit+0x30>)
 8006872:	2200      	movs	r2, #0
}
 8006874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX126xSetOperatingMode( MODE_STDBY_RC );
 8006878:	2001      	movs	r0, #1
    ImageCalibrated = false;
 800687a:	701a      	strb	r2, [r3, #0]
    SX126xSetOperatingMode( MODE_STDBY_RC );
 800687c:	f7ff bdb8 	b.w	80063f0 <SX126xSetOperatingMode>
 8006880:	20002578 	.word	0x20002578

08006884 <SX126xCalibrateImage>:
    if( freq > 900000000 )
 8006884:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <SX126xCalibrateImage+0x64>)
 8006886:	4298      	cmp	r0, r3
{
 8006888:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 800688a:	d90d      	bls.n	80068a8 <SX126xCalibrateImage+0x24>
        calFreq[0] = 0xE1;
 800688c:	23e1      	movs	r3, #225	; 0xe1
 800688e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8006892:	23e9      	movs	r3, #233	; 0xe9
        calFreq[1] = 0x6F;
 8006894:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8006898:	2202      	movs	r2, #2
 800689a:	a901      	add	r1, sp, #4
 800689c:	2098      	movs	r0, #152	; 0x98
 800689e:	f00d fe1c 	bl	80144da <SX126xWriteCommand>
}
 80068a2:	b003      	add	sp, #12
 80068a4:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80068a8:	4b10      	ldr	r3, [pc, #64]	; (80068ec <SX126xCalibrateImage+0x68>)
 80068aa:	4298      	cmp	r0, r3
 80068ac:	d904      	bls.n	80068b8 <SX126xCalibrateImage+0x34>
        calFreq[0] = 0xD7;
 80068ae:	23d7      	movs	r3, #215	; 0xd7
 80068b0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80068b4:	23db      	movs	r3, #219	; 0xdb
 80068b6:	e7ed      	b.n	8006894 <SX126xCalibrateImage+0x10>
    else if( freq > 770000000 )
 80068b8:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <SX126xCalibrateImage+0x6c>)
 80068ba:	4298      	cmp	r0, r3
 80068bc:	d904      	bls.n	80068c8 <SX126xCalibrateImage+0x44>
        calFreq[0] = 0xC1;
 80068be:	23c1      	movs	r3, #193	; 0xc1
 80068c0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80068c4:	23c5      	movs	r3, #197	; 0xc5
 80068c6:	e7e5      	b.n	8006894 <SX126xCalibrateImage+0x10>
    else if( freq > 460000000 )
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <SX126xCalibrateImage+0x70>)
 80068ca:	4298      	cmp	r0, r3
 80068cc:	d904      	bls.n	80068d8 <SX126xCalibrateImage+0x54>
        calFreq[0] = 0x75;
 80068ce:	2375      	movs	r3, #117	; 0x75
 80068d0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80068d4:	2381      	movs	r3, #129	; 0x81
 80068d6:	e7dd      	b.n	8006894 <SX126xCalibrateImage+0x10>
    else if( freq > 425000000 )
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <SX126xCalibrateImage+0x74>)
 80068da:	4298      	cmp	r0, r3
 80068dc:	d9dc      	bls.n	8006898 <SX126xCalibrateImage+0x14>
        calFreq[0] = 0x6B;
 80068de:	236b      	movs	r3, #107	; 0x6b
 80068e0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80068e4:	236f      	movs	r3, #111	; 0x6f
 80068e6:	e7d5      	b.n	8006894 <SX126xCalibrateImage+0x10>
 80068e8:	35a4e900 	.word	0x35a4e900
 80068ec:	32a9f880 	.word	0x32a9f880
 80068f0:	2de54480 	.word	0x2de54480
 80068f4:	1b6b0b00 	.word	0x1b6b0b00
 80068f8:	1954fc40 	.word	0x1954fc40

080068fc <SX126xSetRfFrequency>:
{
 80068fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 80068fe:	4d14      	ldr	r5, [pc, #80]	; (8006950 <SX126xSetRfFrequency+0x54>)
 8006900:	782b      	ldrb	r3, [r5, #0]
{
 8006902:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8006904:	b91b      	cbnz	r3, 800690e <SX126xSetRfFrequency+0x12>
        SX126xCalibrateImage( frequency );
 8006906:	f7ff ffbd 	bl	8006884 <SX126xCalibrateImage>
        ImageCalibrated = true;
 800690a:	2301      	movs	r3, #1
 800690c:	702b      	strb	r3, [r5, #0]
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
    stepsFrac = freqInHz - ( stepsInt * SX126X_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800690e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8006912:	f641 6384 	movw	r3, #7812	; 0x1e84
 8006916:	fbb4 f1f2 	udiv	r1, r4, r2
 800691a:	fb02 4411 	mls	r4, r2, r1, r4
 800691e:	eb03 3384 	add.w	r3, r3, r4, lsl #14
 8006922:	fbb3 f3f2 	udiv	r3, r3, r2
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 8006926:	eb03 3381 	add.w	r3, r3, r1, lsl #14
    buf[0] = ( uint8_t )( ( freqInPllSteps >> 24 ) & 0xFF );
 800692a:	0e1a      	lsrs	r2, r3, #24
 800692c:	f88d 2004 	strb.w	r2, [sp, #4]
    buf[1] = ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF );
 8006930:	0c1a      	lsrs	r2, r3, #16
 8006932:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[2] = ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF );
 8006936:	0a1a      	lsrs	r2, r3, #8
 8006938:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800693c:	2204      	movs	r2, #4
 800693e:	eb0d 0102 	add.w	r1, sp, r2
 8006942:	2086      	movs	r0, #134	; 0x86
    buf[3] = ( uint8_t )( freqInPllSteps & 0xFF );
 8006944:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8006948:	f00d fdc7 	bl	80144da <SX126xWriteCommand>
}
 800694c:	b003      	add	sp, #12
 800694e:	bd30      	pop	{r4, r5, pc}
 8006950:	20002578 	.word	0x20002578

08006954 <SX126xSetPacketType>:
{
 8006954:	b507      	push	{r0, r1, r2, lr}
    PacketType = packetType;
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <SX126xSetPacketType+0x1c>)
{
 8006958:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800695c:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800695e:	2201      	movs	r2, #1
 8006960:	f10d 0107 	add.w	r1, sp, #7
 8006964:	208a      	movs	r0, #138	; 0x8a
 8006966:	f00d fdb8 	bl	80144da <SX126xWriteCommand>
}
 800696a:	b003      	add	sp, #12
 800696c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006970:	2000257a 	.word	0x2000257a

08006974 <SX126xGetPacketType>:
}
 8006974:	4b01      	ldr	r3, [pc, #4]	; (800697c <SX126xGetPacketType+0x8>)
 8006976:	7818      	ldrb	r0, [r3, #0]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	2000257a 	.word	0x2000257a

08006980 <SX126xSetModulationParams>:
{
 8006980:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006982:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <SX126xSetModulationParams+0xa4>)
{
 8006984:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006986:	6851      	ldr	r1, [r2, #4]
 8006988:	6810      	ldr	r0, [r2, #0]
 800698a:	466b      	mov	r3, sp
 800698c:	c303      	stmia	r3!, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800698e:	4b26      	ldr	r3, [pc, #152]	; (8006a28 <SX126xSetModulationParams+0xa8>)
 8006990:	7820      	ldrb	r0, [r4, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4283      	cmp	r3, r0
 8006996:	d001      	beq.n	800699c <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 8006998:	f7ff ffdc 	bl	8006954 <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 800699c:	7823      	ldrb	r3, [r4, #0]
 800699e:	b11b      	cbz	r3, 80069a8 <SX126xSetModulationParams+0x28>
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d030      	beq.n	8006a06 <SX126xSetModulationParams+0x86>
}
 80069a4:	b002      	add	sp, #8
 80069a6:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t )( 32 * SX126X_XTAL_FREQ / modulationParams->Params.Gfsk.BitRate );
 80069a8:	6862      	ldr	r2, [r4, #4]
 80069aa:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <SX126xSetModulationParams+0xac>)
 80069ac:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80069b0:	0c1a      	lsrs	r2, r3, #16
 80069b2:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80069b6:	0a1a      	lsrs	r2, r3, #8
 80069b8:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80069bc:	f88d 3002 	strb.w	r3, [sp, #2]
        tempVal = SX126xConvertFreqInHzToPllStep( modulationParams->Params.Gfsk.Fdev );
 80069c0:	68a2      	ldr	r2, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80069c2:	7b23      	ldrb	r3, [r4, #12]
 80069c4:	f88d 3003 	strb.w	r3, [sp, #3]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80069c8:	f643 5109 	movw	r1, #15625	; 0x3d09
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80069cc:	7b63      	ldrb	r3, [r4, #13]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80069ce:	fbb2 f0f1 	udiv	r0, r2, r1
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80069d2:	f88d 3004 	strb.w	r3, [sp, #4]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80069d6:	fb01 2210 	mls	r2, r1, r0, r2
 80069da:	f641 6384 	movw	r3, #7812	; 0x1e84
 80069de:	eb03 3382 	add.w	r3, r3, r2, lsl #14
 80069e2:	fbb3 f3f1 	udiv	r3, r3, r1
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 80069e6:	eb03 3380 	add.w	r3, r3, r0, lsl #14
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80069ea:	0c1a      	lsrs	r2, r3, #16
 80069ec:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80069f0:	0a1a      	lsrs	r2, r3, #8
 80069f2:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80069f6:	f88d 3007 	strb.w	r3, [sp, #7]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80069fa:	2208      	movs	r2, #8
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80069fc:	4669      	mov	r1, sp
 80069fe:	208b      	movs	r0, #139	; 0x8b
 8006a00:	f00d fd6b 	bl	80144da <SX126xWriteCommand>
        break;
 8006a04:	e7ce      	b.n	80069a4 <SX126xSetModulationParams+0x24>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8006a06:	7c23      	ldrb	r3, [r4, #16]
 8006a08:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8006a0c:	7c63      	ldrb	r3, [r4, #17]
 8006a0e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8006a12:	7ca3      	ldrb	r3, [r4, #18]
 8006a14:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8006a18:	7ce3      	ldrb	r3, [r4, #19]
 8006a1a:	f88d 3003 	strb.w	r3, [sp, #3]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006a1e:	2204      	movs	r2, #4
 8006a20:	e7ec      	b.n	80069fc <SX126xSetModulationParams+0x7c>
 8006a22:	bf00      	nop
 8006a24:	0801a164 	.word	0x0801a164
 8006a28:	2000257a 	.word	0x2000257a
 8006a2c:	3d090000 	.word	0x3d090000

08006a30 <SX126xSetPacketParams>:
{
 8006a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006a32:	4a31      	ldr	r2, [pc, #196]	; (8006af8 <SX126xSetPacketParams+0xc8>)
{
 8006a34:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006a36:	68d1      	ldr	r1, [r2, #12]
 8006a38:	6890      	ldr	r0, [r2, #8]
 8006a3a:	7c12      	ldrb	r2, [r2, #16]
 8006a3c:	ab01      	add	r3, sp, #4
 8006a3e:	c303      	stmia	r3!, {r0, r1}
 8006a40:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8006a42:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <SX126xSetPacketParams+0xcc>)
 8006a44:	7820      	ldrb	r0, [r4, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	4283      	cmp	r3, r0
 8006a4a:	d001      	beq.n	8006a50 <SX126xSetPacketParams+0x20>
        SX126xSetPacketType( packetParams->PacketType );
 8006a4c:	f7ff ff82 	bl	8006954 <SX126xSetPacketType>
    switch( packetParams->PacketType )
 8006a50:	7823      	ldrb	r3, [r4, #0]
 8006a52:	b11b      	cbz	r3, 8006a5c <SX126xSetPacketParams+0x2c>
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d039      	beq.n	8006acc <SX126xSetPacketParams+0x9c>
}
 8006a58:	b004      	add	sp, #16
 8006a5a:	bd10      	pop	{r4, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006a5c:	7a63      	ldrb	r3, [r4, #9]
 8006a5e:	2bf1      	cmp	r3, #241	; 0xf1
 8006a60:	d128      	bne.n	8006ab4 <SX126xSetPacketParams+0x84>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 8006a62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006a66:	f7ff fe91 	bl	800678c <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006a6a:	f248 0005 	movw	r0, #32773	; 0x8005
 8006a6e:	f7ff fea1 	bl	80067b4 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8006a72:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006a74:	8862      	ldrh	r2, [r4, #2]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8006a76:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006a7a:	0a11      	lsrs	r1, r2, #8
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8006a7c:	7922      	ldrb	r2, [r4, #4]
 8006a7e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8006a82:	7962      	ldrb	r2, [r4, #5]
 8006a84:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8006a88:	79a2      	ldrb	r2, [r4, #6]
 8006a8a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8006a8e:	79e2      	ldrb	r2, [r4, #7]
 8006a90:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[7] = crcVal;
 8006a94:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006a98:	7a22      	ldrb	r2, [r4, #8]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006a9a:	7aa3      	ldrb	r3, [r4, #10]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8006a9c:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8006aa0:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8006aa4:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8006aa8:	2209      	movs	r2, #9
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8006aaa:	a901      	add	r1, sp, #4
 8006aac:	208c      	movs	r0, #140	; 0x8c
 8006aae:	f00d fd14 	bl	80144da <SX126xWriteCommand>
 8006ab2:	e7d1      	b.n	8006a58 <SX126xSetPacketParams+0x28>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006ab4:	2bf2      	cmp	r3, #242	; 0xf2
 8006ab6:	d1dd      	bne.n	8006a74 <SX126xSetPacketParams+0x44>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 8006ab8:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8006abc:	f7ff fe66 	bl	800678c <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8006ac0:	f241 0021 	movw	r0, #4129	; 0x1021
 8006ac4:	f7ff fe76 	bl	80067b4 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8006ac8:	2306      	movs	r3, #6
 8006aca:	e7d3      	b.n	8006a74 <SX126xSetPacketParams+0x44>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006acc:	89a3      	ldrh	r3, [r4, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006ace:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006ad2:	0a1a      	lsrs	r2, r3, #8
 8006ad4:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8006ad8:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <SX126xSetPacketParams+0xd0>)
 8006ada:	7ba3      	ldrb	r3, [r4, #14]
 8006adc:	7013      	strb	r3, [r2, #0]
 8006ade:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8006ae2:	7be3      	ldrb	r3, [r4, #15]
 8006ae4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006ae8:	7c23      	ldrb	r3, [r4, #16]
 8006aea:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8006aee:	7c63      	ldrb	r3, [r4, #17]
 8006af0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8006af4:	2206      	movs	r2, #6
        break;
 8006af6:	e7d8      	b.n	8006aaa <SX126xSetPacketParams+0x7a>
 8006af8:	0801a164 	.word	0x0801a164
 8006afc:	2000257a 	.word	0x2000257a
 8006b00:	20002579 	.word	0x20002579

08006b04 <SX126xGetRxBufferStatus>:
{
 8006b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b06:	4604      	mov	r4, r0
 8006b08:	460d      	mov	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	a901      	add	r1, sp, #4
 8006b0e:	2013      	movs	r0, #19
 8006b10:	f00d fcf1 	bl	80144f6 <SX126xReadCommand>
    return PacketType;
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <SX126xGetRxBufferStatus+0x3c>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10d      	bne.n	8006b38 <SX126xGetRxBufferStatus+0x34>
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <SX126xGetRxBufferStatus+0x40>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d109      	bne.n	8006b38 <SX126xGetRxBufferStatus+0x34>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 8006b24:	f240 7002 	movw	r0, #1794	; 0x702
 8006b28:	f00d fd2c 	bl	8014584 <SX126xReadRegister>
 8006b2c:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 8006b2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006b32:	702b      	strb	r3, [r5, #0]
}
 8006b34:	b003      	add	sp, #12
 8006b36:	bd30      	pop	{r4, r5, pc}
        *payloadLength = status[0];
 8006b38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b3c:	7023      	strb	r3, [r4, #0]
 8006b3e:	e7f6      	b.n	8006b2e <SX126xGetRxBufferStatus+0x2a>
 8006b40:	2000257a 	.word	0x2000257a
 8006b44:	20002579 	.word	0x20002579

08006b48 <SX126xGetPacketStatus>:
{
 8006b48:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006b4a:	2203      	movs	r2, #3
{
 8006b4c:	4604      	mov	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006b4e:	a901      	add	r1, sp, #4
 8006b50:	2014      	movs	r0, #20
 8006b52:	f00d fcd0 	bl	80144f6 <SX126xReadCommand>
    return PacketType;
 8006b56:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <SX126xGetPacketStatus+0x70>)
 8006b58:	781a      	ldrb	r2, [r3, #0]
    pktStatus->packetType = SX126xGetPacketType( );
 8006b5a:	7022      	strb	r2, [r4, #0]
    switch( pktStatus->packetType )
 8006b5c:	b14a      	cbz	r2, 8006b72 <SX126xGetPacketStatus+0x2a>
 8006b5e:	2a01      	cmp	r2, #1
 8006b60:	d017      	beq.n	8006b92 <SX126xGetPacketStatus+0x4a>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8006b62:	2214      	movs	r2, #20
 8006b64:	2100      	movs	r1, #0
 8006b66:	4620      	mov	r0, r4
 8006b68:	f012 fcac 	bl	80194c4 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8006b6c:	230f      	movs	r3, #15
 8006b6e:	7023      	strb	r3, [r4, #0]
}
 8006b70:	e00d      	b.n	8006b8e <SX126xGetPacketStatus+0x46>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8006b72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b76:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006b78:	f89d 3005 	ldrb.w	r3, [sp, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8006b7c:	60a2      	str	r2, [r4, #8]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006b7e:	425b      	negs	r3, r3
 8006b80:	105b      	asrs	r3, r3, #1
 8006b82:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8006b84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006b88:	425b      	negs	r3, r3
 8006b8a:	105b      	asrs	r3, r3, #1
 8006b8c:	7163      	strb	r3, [r4, #5]
}
 8006b8e:	b002      	add	sp, #8
 8006b90:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8006b92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b96:	425b      	negs	r3, r3
 8006b98:	105b      	asrs	r3, r3, #1
 8006b9a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8006b9c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	109b      	asrs	r3, r3, #2
 8006ba4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8006ba6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006baa:	425b      	negs	r3, r3
 8006bac:	105b      	asrs	r3, r3, #1
 8006bae:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8006bb0:	4b02      	ldr	r3, [pc, #8]	; (8006bbc <SX126xGetPacketStatus+0x74>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6123      	str	r3, [r4, #16]
            break;
 8006bb6:	e7ea      	b.n	8006b8e <SX126xGetPacketStatus+0x46>
 8006bb8:	2000257a 	.word	0x2000257a
 8006bbc:	20001128 	.word	0x20001128

08006bc0 <RadioOnTxTimeoutIrq>:
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006bc0:	4b03      	ldr	r3, [pc, #12]	; (8006bd0 <RadioOnTxTimeoutIrq+0x10>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	b113      	cbz	r3, 8006bcc <RadioOnTxTimeoutIrq+0xc>
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	b103      	cbz	r3, 8006bcc <RadioOnTxTimeoutIrq+0xc>
    {
        RadioEvents->TxTimeout( );
 8006bca:	4718      	bx	r3
    }
}
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	2000112c 	.word	0x2000112c

08006bd4 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006bd4:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <RadioOnRxTimeoutIrq+0x10>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	b113      	cbz	r3, 8006be0 <RadioOnRxTimeoutIrq+0xc>
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	b103      	cbz	r3, 8006be0 <RadioOnRxTimeoutIrq+0xc>
    {
        RadioEvents->RxTimeout( );
 8006bde:	4718      	bx	r3
    }
}
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	2000112c 	.word	0x2000112c

08006be8 <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
    IrqFired = true;
 8006be8:	4b01      	ldr	r3, [pc, #4]	; (8006bf0 <RadioOnDioIrq+0x8>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	701a      	strb	r2, [r3, #0]
}
 8006bee:	4770      	bx	lr
 8006bf0:	2000257b 	.word	0x2000257b

08006bf4 <RadioGetStatus>:
{
 8006bf4:	b508      	push	{r3, lr}
    switch( SX126xGetOperatingMode( ) )
 8006bf6:	f7ff fbf5 	bl	80063e4 <SX126xGetOperatingMode>
 8006bfa:	3804      	subs	r0, #4
 8006bfc:	b2c0      	uxtb	r0, r0
 8006bfe:	2803      	cmp	r0, #3
 8006c00:	bf96      	itet	ls
 8006c02:	4b02      	ldrls	r3, [pc, #8]	; (8006c0c <RadioGetStatus+0x18>)
 8006c04:	2000      	movhi	r0, #0
 8006c06:	5c18      	ldrbls	r0, [r3, r0]
}
 8006c08:	bd08      	pop	{r3, pc}
 8006c0a:	bf00      	nop
 8006c0c:	0801bef6 	.word	0x0801bef6

08006c10 <RadioSend>:
{
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	460c      	mov	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8006c14:	2300      	movs	r3, #0
 8006c16:	f240 2101 	movw	r1, #513	; 0x201
 8006c1a:	461a      	mov	r2, r3
{
 8006c1c:	4605      	mov	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8006c1e:	4608      	mov	r0, r1
 8006c20:	f00d ff69 	bl	8014af6 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 8006c24:	f7ff fea6 	bl	8006974 <SX126xGetPacketType>
 8006c28:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <RadioSend+0x4c>)
 8006c2a:	2801      	cmp	r0, #1
    SX126xSetPacketParams( &SX126x.PacketParams );
 8006c2c:	480c      	ldr	r0, [pc, #48]	; (8006c60 <RadioSend+0x50>)
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8006c2e:	bf0c      	ite	eq
 8006c30:	f883 40c7 	strbeq.w	r4, [r3, #199]	; 0xc7
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 8006c34:	f883 40c0 	strbne.w	r4, [r3, #192]	; 0xc0
    SX126xSetPacketParams( &SX126x.PacketParams );
 8006c38:	f7ff fefa 	bl	8006a30 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	2200      	movs	r2, #0
 8006c42:	f00d fe54 	bl	80148ee <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <RadioSend+0x54>)
 8006c48:	4807      	ldr	r0, [pc, #28]	; (8006c68 <RadioSend+0x58>)
 8006c4a:	6819      	ldr	r1, [r3, #0]
 8006c4c:	f00d fddf 	bl	801480e <TimerSetValue>
}
 8006c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TimerStart( &TxTimeoutTimer );
 8006c54:	4804      	ldr	r0, [pc, #16]	; (8006c68 <RadioSend+0x58>)
 8006c56:	f7ff bcf9 	b.w	800664c <TimerStart>
 8006c5a:	bf00      	nop
 8006c5c:	20001160 	.word	0x20001160
 8006c60:	20001218 	.word	0x20001218
 8006c64:	20001254 	.word	0x20001254
 8006c68:	20001258 	.word	0x20001258

08006c6c <RadioSetTxContinuousWave>:
{
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	460d      	mov	r5, r1
 8006c70:	4614      	mov	r4, r2
    SX126xSetRfFrequency( freq );
 8006c72:	f7ff fe43 	bl	80068fc <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 8006c76:	4628      	mov	r0, r5
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006c78:	4d07      	ldr	r5, [pc, #28]	; (8006c98 <RadioSetTxContinuousWave+0x2c>)
    SX126xSetRfTxPower( power );
 8006c7a:	f00d fc07 	bl	801448c <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 8006c7e:	f00d fecc 	bl	8014a1a <SX126xSetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006c82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c86:	4628      	mov	r0, r5
 8006c88:	4361      	muls	r1, r4
 8006c8a:	f00d fdc0 	bl	801480e <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 8006c8e:	4628      	mov	r0, r5
}
 8006c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TimerStart( &TxTimeoutTimer );
 8006c94:	f7ff bcda 	b.w	800664c <TimerStart>
 8006c98:	20001258 	.word	0x20001258

08006c9c <RadioGetFskBandwidthRegValue>:
{
 8006c9c:	b510      	push	{r4, lr}
    if( bandwidth == 0 )
 8006c9e:	b190      	cbz	r0, 8006cc6 <RadioGetFskBandwidthRegValue+0x2a>
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <RadioGetFskBandwidthRegValue+0x30>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	4619      	mov	r1, r3
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8006ca6:	681c      	ldr	r4, [r3, #0]
 8006ca8:	42a0      	cmp	r0, r4
 8006caa:	d306      	bcc.n	8006cba <RadioGetFskBandwidthRegValue+0x1e>
 8006cac:	689c      	ldr	r4, [r3, #8]
 8006cae:	42a0      	cmp	r0, r4
 8006cb0:	d203      	bcs.n	8006cba <RadioGetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i+1].RegValue;
 8006cb2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006cb6:	7910      	ldrb	r0, [r2, #4]
}
 8006cb8:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006cba:	3201      	adds	r2, #1
 8006cbc:	2a16      	cmp	r2, #22
 8006cbe:	f103 0308 	add.w	r3, r3, #8
 8006cc2:	d1f0      	bne.n	8006ca6 <RadioGetFskBandwidthRegValue+0xa>
    while( 1 );
 8006cc4:	e7fe      	b.n	8006cc4 <RadioGetFskBandwidthRegValue+0x28>
        return( 0x1F );
 8006cc6:	201f      	movs	r0, #31
 8006cc8:	e7f6      	b.n	8006cb8 <RadioGetFskBandwidthRegValue+0x1c>
 8006cca:	bf00      	nop
 8006ccc:	0801a3d4 	.word	0x0801a3d4

08006cd0 <RadioSetMaxPayloadLength>:
    if( modem == MODEM_LORA )
 8006cd0:	2801      	cmp	r0, #1
 8006cd2:	4809      	ldr	r0, [pc, #36]	; (8006cf8 <RadioSetMaxPayloadLength+0x28>)
 8006cd4:	d106      	bne.n	8006ce4 <RadioSetMaxPayloadLength+0x14>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006cd6:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <RadioSetMaxPayloadLength+0x2c>)
 8006cd8:	f880 10c7 	strb.w	r1, [r0, #199]	; 0xc7
 8006cdc:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 8006cde:	30b8      	adds	r0, #184	; 0xb8
 8006ce0:	f7ff bea6 	b.w	8006a30 <SX126xSetPacketParams>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8006ce4:	f890 30bf 	ldrb.w	r3, [r0, #191]	; 0xbf
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d104      	bne.n	8006cf6 <RadioSetMaxPayloadLength+0x26>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006cec:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <RadioSetMaxPayloadLength+0x2c>)
 8006cee:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
 8006cf2:	7019      	strb	r1, [r3, #0]
 8006cf4:	e7f3      	b.n	8006cde <RadioSetMaxPayloadLength+0xe>
}
 8006cf6:	4770      	bx	lr
 8006cf8:	20001160 	.word	0x20001160
 8006cfc:	200002b0 	.word	0x200002b0

08006d00 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006d00:	2300      	movs	r3, #0
 8006d02:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
 8006d06:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006d08:	461a      	mov	r2, r3
{
 8006d0a:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	f00d fef2 	bl	8014af6 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8006d12:	b134      	cbz	r4, 8006d22 <RadioRx+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006d14:	4809      	ldr	r0, [pc, #36]	; (8006d3c <RadioRx+0x3c>)
 8006d16:	4621      	mov	r1, r4
 8006d18:	f00d fd79 	bl	801480e <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006d1c:	4807      	ldr	r0, [pc, #28]	; (8006d3c <RadioRx+0x3c>)
 8006d1e:	f7ff fc95 	bl	800664c <TimerStart>
    if( RxContinuous == true )
 8006d22:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <RadioRx+0x40>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	b12b      	cbz	r3, 8006d34 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8006d28:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
}
 8006d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRx( RxTimeout << 6 );
 8006d30:	f00d bde6 	b.w	8014900 <SX126xSetRx>
 8006d34:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <RadioRx+0x44>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	0180      	lsls	r0, r0, #6
 8006d3a:	e7f7      	b.n	8006d2c <RadioRx+0x2c>
 8006d3c:	20001148 	.word	0x20001148
 8006d40:	2000267d 	.word	0x2000267d
 8006d44:	20001144 	.word	0x20001144

08006d48 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
 8006d4e:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006d50:	461a      	mov	r2, r3
{
 8006d52:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8006d54:	4608      	mov	r0, r1
 8006d56:	f00d fece 	bl	8014af6 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 8006d5a:	b134      	cbz	r4, 8006d6a <RadioRxBoosted+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006d5c:	4809      	ldr	r0, [pc, #36]	; (8006d84 <RadioRxBoosted+0x3c>)
 8006d5e:	4621      	mov	r1, r4
 8006d60:	f00d fd55 	bl	801480e <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006d64:	4807      	ldr	r0, [pc, #28]	; (8006d84 <RadioRxBoosted+0x3c>)
 8006d66:	f7ff fc71 	bl	800664c <TimerStart>
    if( RxContinuous == true )
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <RadioRxBoosted+0x40>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b12b      	cbz	r3, 8006d7c <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006d70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
}
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRxBoosted( RxTimeout << 6 );
 8006d78:	f00d be0f 	b.w	801499a <SX126xSetRxBoosted>
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <RadioRxBoosted+0x44>)
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	0180      	lsls	r0, r0, #6
 8006d82:	e7f7      	b.n	8006d74 <RadioRxBoosted+0x2c>
 8006d84:	20001148 	.word	0x20001148
 8006d88:	2000267d 	.word	0x2000267d
 8006d8c:	20001144 	.word	0x20001144

08006d90 <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 8006d90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    CRITICAL_SECTION_BEGIN( );
    // Clear IRQ flag
    const bool isIrqFired = IrqFired;
 8006d92:	4d57      	ldr	r5, [pc, #348]	; (8006ef0 <RadioIrqProcess+0x160>)
    CRITICAL_SECTION_BEGIN( );
 8006d94:	a802      	add	r0, sp, #8
 8006d96:	f00d fb34 	bl	8014402 <BoardCriticalSectionBegin>
    const bool isIrqFired = IrqFired;
 8006d9a:	782c      	ldrb	r4, [r5, #0]
    IrqFired = false;
 8006d9c:	2300      	movs	r3, #0
    CRITICAL_SECTION_END( );
 8006d9e:	a802      	add	r0, sp, #8
    IrqFired = false;
 8006da0:	702b      	strb	r3, [r5, #0]
    CRITICAL_SECTION_END( );
 8006da2:	f00d fb38 	bl	8014416 <BoardCriticalSectionEnd>

    if( isIrqFired == true )
 8006da6:	2c00      	cmp	r4, #0
 8006da8:	d061      	beq.n	8006e6e <RadioIrqProcess+0xde>
    {
        uint16_t irqRegs = SX126xGetIrqStatus( );
 8006daa:	f00d fec0 	bl	8014b2e <SX126xGetIrqStatus>
 8006dae:	4604      	mov	r4, r0
        SX126xClearIrqStatus( irqRegs );
 8006db0:	f00d ff5d 	bl	8014c6e <SX126xClearIrqStatus>

        // Check if DIO1 pin is High. If it is the case revert IrqFired to true
        CRITICAL_SECTION_BEGIN( );
 8006db4:	a803      	add	r0, sp, #12
 8006db6:	f00d fb24 	bl	8014402 <BoardCriticalSectionBegin>
        if( SX126xGetDio1PinState( ) == 1 )
 8006dba:	f7ff fbdb 	bl	8006574 <SX126xGetDio1PinState>
 8006dbe:	2801      	cmp	r0, #1
        {
            IrqFired = true;
 8006dc0:	bf08      	it	eq
 8006dc2:	7028      	strbeq	r0, [r5, #0]
        }
        CRITICAL_SECTION_END( );
 8006dc4:	a803      	add	r0, sp, #12
 8006dc6:	f00d fb26 	bl	8014416 <BoardCriticalSectionEnd>

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8006dca:	07e5      	lsls	r5, r4, #31
 8006dcc:	d50b      	bpl.n	8006de6 <RadioIrqProcess+0x56>
        {
            TimerStop( &TxTimeoutTimer );
 8006dce:	4849      	ldr	r0, [pc, #292]	; (8006ef4 <RadioIrqProcess+0x164>)
 8006dd0:	f7ff fcb0 	bl	8006734 <TimerStop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	f7ff fb0b 	bl	80063f0 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006dda:	4b47      	ldr	r3, [pc, #284]	; (8006ef8 <RadioIrqProcess+0x168>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	b113      	cbz	r3, 8006de6 <RadioIrqProcess+0x56>
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <RadioIrqProcess+0x56>
            {
                RadioEvents->TxDone( );
 8006de4:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8006de6:	07a0      	lsls	r0, r4, #30
 8006de8:	d511      	bpl.n	8006e0e <RadioIrqProcess+0x7e>
        {
            TimerStop( &RxTimeoutTimer );
 8006dea:	4844      	ldr	r0, [pc, #272]	; (8006efc <RadioIrqProcess+0x16c>)
 8006dec:	4e42      	ldr	r6, [pc, #264]	; (8006ef8 <RadioIrqProcess+0x168>)
 8006dee:	f7ff fca1 	bl	8006734 <TimerStop>

            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8006df2:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006df6:	4b42      	ldr	r3, [pc, #264]	; (8006f00 <RadioIrqProcess+0x170>)
 8006df8:	d03b      	beq.n	8006e72 <RadioIrqProcess+0xe2>
            {
                if( RxContinuous == false )
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b913      	cbnz	r3, 8006e04 <RadioIrqProcess+0x74>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8006dfe:	2001      	movs	r0, #1
 8006e00:	f7ff faf6 	bl	80063f0 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8006e04:	6833      	ldr	r3, [r6, #0]
 8006e06:	b113      	cbz	r3, 8006e0e <RadioIrqProcess+0x7e>
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	b103      	cbz	r3, 8006e0e <RadioIrqProcess+0x7e>
                {
                    RadioEvents->RxError( );
 8006e0c:	4798      	blx	r3
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8006e0e:	0621      	lsls	r1, r4, #24
 8006e10:	d50a      	bpl.n	8006e28 <RadioIrqProcess+0x98>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8006e12:	2001      	movs	r0, #1
 8006e14:	f7ff faec 	bl	80063f0 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006e18:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <RadioIrqProcess+0x168>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	b123      	cbz	r3, 8006e28 <RadioIrqProcess+0x98>
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	b113      	cbz	r3, 8006e28 <RadioIrqProcess+0x98>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 8006e22:	f3c4 2000 	ubfx	r0, r4, #8, #1
 8006e26:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8006e28:	05a2      	lsls	r2, r4, #22
 8006e2a:	d50f      	bpl.n	8006e4c <RadioIrqProcess+0xbc>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 8006e2c:	f7ff fada 	bl	80063e4 <SX126xGetOperatingMode>
 8006e30:	2804      	cmp	r0, #4
 8006e32:	d14c      	bne.n	8006ece <RadioIrqProcess+0x13e>
            {
                TimerStop( &TxTimeoutTimer );
 8006e34:	482f      	ldr	r0, [pc, #188]	; (8006ef4 <RadioIrqProcess+0x164>)
 8006e36:	f7ff fc7d 	bl	8006734 <TimerStop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	f7ff fad8 	bl	80063f0 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006e40:	4b2d      	ldr	r3, [pc, #180]	; (8006ef8 <RadioIrqProcess+0x168>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	b113      	cbz	r3, 8006e4c <RadioIrqProcess+0xbc>
 8006e46:	685b      	ldr	r3, [r3, #4]
            else if( SX126xGetOperatingMode( ) == MODE_RX )
            {
                TimerStop( &RxTimeoutTimer );
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006e48:	b103      	cbz	r3, 8006e4c <RadioIrqProcess+0xbc>
                {
                    RadioEvents->RxTimeout( );
 8006e4a:	4798      	blx	r3
        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8006e4c:	06a3      	lsls	r3, r4, #26
 8006e4e:	d50e      	bpl.n	8006e6e <RadioIrqProcess+0xde>
        {
            TimerStop( &RxTimeoutTimer );
 8006e50:	482a      	ldr	r0, [pc, #168]	; (8006efc <RadioIrqProcess+0x16c>)
 8006e52:	f7ff fc6f 	bl	8006734 <TimerStop>
            if( RxContinuous == false )
 8006e56:	4b2a      	ldr	r3, [pc, #168]	; (8006f00 <RadioIrqProcess+0x170>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b913      	cbnz	r3, 8006e62 <RadioIrqProcess+0xd2>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	f7ff fac7 	bl	80063f0 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006e62:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <RadioIrqProcess+0x168>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	b113      	cbz	r3, 8006e6e <RadioIrqProcess+0xde>
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	b103      	cbz	r3, 8006e6e <RadioIrqProcess+0xde>
            {
                RadioEvents->RxTimeout( );
 8006e6c:	4798      	blx	r3
            }
        }
    }
}
 8006e6e:	b004      	add	sp, #16
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
                if( RxContinuous == false )
 8006e72:	781d      	ldrb	r5, [r3, #0]
 8006e74:	b995      	cbnz	r5, 8006e9c <RadioIrqProcess+0x10c>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8006e76:	2001      	movs	r0, #1
 8006e78:	f7ff faba 	bl	80063f0 <SX126xSetOperatingMode>
                    SX126xWriteRegister( REG_RTC_CTRL, 0x00 );
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	f640 1002 	movw	r0, #2306	; 0x902
 8006e82:	f00d fb5e 	bl	8014542 <SX126xWriteRegister>
                    SX126xWriteRegister( REG_EVT_CLR, SX126xReadRegister( REG_EVT_CLR ) | ( 1 << 1 ) );
 8006e86:	f640 1044 	movw	r0, #2372	; 0x944
 8006e8a:	f00d fb7b 	bl	8014584 <SX126xReadRegister>
 8006e8e:	f040 0102 	orr.w	r1, r0, #2
 8006e92:	b2c9      	uxtb	r1, r1
 8006e94:	f640 1044 	movw	r0, #2372	; 0x944
 8006e98:	f00d fb53 	bl	8014542 <SX126xWriteRegister>
                SX126xGetPacketStatus( &RadioPktStatus );
 8006e9c:	4d19      	ldr	r5, [pc, #100]	; (8006f04 <RadioIrqProcess+0x174>)
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 8006e9e:	481a      	ldr	r0, [pc, #104]	; (8006f08 <RadioIrqProcess+0x178>)
 8006ea0:	22ff      	movs	r2, #255	; 0xff
 8006ea2:	f10d 0107 	add.w	r1, sp, #7
 8006ea6:	f00d fec9 	bl	8014c3c <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f7ff fe4c 	bl	8006b48 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006eb0:	6833      	ldr	r3, [r6, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0ab      	beq.n	8006e0e <RadioIrqProcess+0x7e>
 8006eb6:	689e      	ldr	r6, [r3, #8]
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	d0a8      	beq.n	8006e0e <RadioIrqProcess+0x7e>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 8006ebc:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8006ec0:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8006ec4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006ec8:	480f      	ldr	r0, [pc, #60]	; (8006f08 <RadioIrqProcess+0x178>)
 8006eca:	47b0      	blx	r6
 8006ecc:	e79f      	b.n	8006e0e <RadioIrqProcess+0x7e>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8006ece:	f7ff fa89 	bl	80063e4 <SX126xGetOperatingMode>
 8006ed2:	2805      	cmp	r0, #5
 8006ed4:	d1ba      	bne.n	8006e4c <RadioIrqProcess+0xbc>
                TimerStop( &RxTimeoutTimer );
 8006ed6:	4809      	ldr	r0, [pc, #36]	; (8006efc <RadioIrqProcess+0x16c>)
 8006ed8:	f7ff fc2c 	bl	8006734 <TimerStop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8006edc:	2001      	movs	r0, #1
 8006ede:	f7ff fa87 	bl	80063f0 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <RadioIrqProcess+0x168>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0b0      	beq.n	8006e4c <RadioIrqProcess+0xbc>
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	e7ac      	b.n	8006e48 <RadioIrqProcess+0xb8>
 8006eee:	bf00      	nop
 8006ef0:	2000257b 	.word	0x2000257b
 8006ef4:	20001258 	.word	0x20001258
 8006ef8:	2000112c 	.word	0x2000112c
 8006efc:	20001148 	.word	0x20001148
 8006f00:	2000267d 	.word	0x2000267d
 8006f04:	20001130 	.word	0x20001130
 8006f08:	2000257e 	.word	0x2000257e

08006f0c <RadioTimeOnAir>:
{
 8006f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8006f12:	f89d c018 	ldrb.w	ip, [sp, #24]
 8006f16:	f89d 701c 	ldrb.w	r7, [sp, #28]
 8006f1a:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
 8006f1e:	b140      	cbz	r0, 8006f32 <RadioTimeOnAir+0x26>
 8006f20:	2801      	cmp	r0, #1
 8006f22:	d019      	beq.n	8006f58 <RadioTimeOnAir+0x4c>
 8006f24:	2201      	movs	r2, #1
 8006f26:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 8006f28:	18a0      	adds	r0, r4, r2
 8006f2a:	3801      	subs	r0, #1
 8006f2c:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8006f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006f32:	f1bc 0f00 	cmp.w	ip, #0
 8006f36:	bf0c      	ite	eq
 8006f38:	2308      	moveq	r3, #8
 8006f3a:	2300      	movne	r3, #0
               ( ( crcOn == true ) ? 2 : 0 ) 
 8006f3c:	2d00      	cmp	r5, #0
    return ( preambleLen << 3 ) +
 8006f3e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
               ( ( crcOn == true ) ? 2 : 0 ) 
 8006f42:	bf14      	ite	ne
 8006f44:	2002      	movne	r0, #2
 8006f46:	2000      	moveq	r0, #0
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006f48:	3418      	adds	r4, #24
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8006f4a:	4438      	add	r0, r7
             ( syncWordLength << 3 ) +
 8006f4c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8006f50:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006f54:	4344      	muls	r4, r0
        break;
 8006f56:	e7e7      	b.n	8006f28 <RadioTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006f58:	1f50      	subs	r0, r2, #5
 8006f5a:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 8006f5c:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006f60:	d802      	bhi.n	8006f68 <RadioTimeOnAir+0x5c>
        if( preambleLen < 12 )
 8006f62:	2c0c      	cmp	r4, #12
 8006f64:	bf38      	it	cc
 8006f66:	240c      	movcc	r4, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	d137      	bne.n	8006fdc <RadioTimeOnAir+0xd0>
 8006f6c:	f1a2 060b 	sub.w	r6, r2, #11
 8006f70:	2e01      	cmp	r6, #1
 8006f72:	bf8c      	ite	hi
 8006f74:	2600      	movhi	r6, #0
 8006f76:	2601      	movls	r6, #1
                            ( crcOn ? 16 : 0 ) -
 8006f78:	2d00      	cmp	r5, #0
 8006f7a:	bf14      	ite	ne
 8006f7c:	2010      	movne	r0, #16
 8006f7e:	2000      	moveq	r0, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006f80:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
                            ( fixLen ? 0 : 20 );
 8006f84:	f1bc 0f00 	cmp.w	ip, #0
 8006f88:	bf14      	ite	ne
 8006f8a:	2700      	movne	r7, #0
 8006f8c:	2714      	moveq	r7, #20
                            ( crcOn ? 16 : 0 ) -
 8006f8e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
 8006f92:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
 8006f94:	4438      	add	r0, r7
 8006f96:	ea4f 0582 	mov.w	r5, r2, lsl #2
            ceilDenominator = 4 * ( datarate - 2 );
 8006f9a:	f1a2 0702 	sub.w	r7, r2, #2
    if( datarate <= 6 )
 8006f9e:	d902      	bls.n	8006fa6 <RadioTimeOnAir+0x9a>
        ceilNumerator += 8;
 8006fa0:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 8006fa2:	b106      	cbz	r6, 8006fa6 <RadioTimeOnAir+0x9a>
            ceilDenominator = 4 * ( datarate - 2 );
 8006fa4:	00bd      	lsls	r5, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	bfac      	ite	ge
 8006faa:	182e      	addge	r6, r5, r0
 8006fac:	1c2e      	addlt	r6, r5, #0
 8006fae:	1e70      	subs	r0, r6, #1
 8006fb0:	fb90 f5f5 	sdiv	r5, r0, r5
 8006fb4:	fb03 4405 	mla	r4, r3, r5, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <RadioTimeOnAir+0xe4>)
 8006fba:	5c5b      	ldrb	r3, [r3, r1]
    if( datarate <= 6 )
 8006fbc:	2a06      	cmp	r2, #6
    int32_t intermediate =
 8006fbe:	bf8c      	ite	hi
 8006fc0:	340c      	addhi	r4, #12
        intermediate += 2;
 8006fc2:	340e      	addls	r4, #14
    switch( bw )
 8006fc4:	2b0a      	cmp	r3, #10
 8006fc6:	d812      	bhi.n	8006fee <RadioTimeOnAir+0xe2>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006fc8:	00a4      	lsls	r4, r4, #2
 8006fca:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <RadioTimeOnAir+0xe8>)
 8006fcc:	3401      	adds	r4, #1
 8006fce:	40bc      	lsls	r4, r7
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006fd8:	4344      	muls	r4, r0
 8006fda:	e7a5      	b.n	8006f28 <RadioTimeOnAir+0x1c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006fdc:	2901      	cmp	r1, #1
 8006fde:	d104      	bne.n	8006fea <RadioTimeOnAir+0xde>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006fe0:	2a0c      	cmp	r2, #12
 8006fe2:	bf14      	ite	ne
 8006fe4:	2600      	movne	r6, #0
 8006fe6:	2601      	moveq	r6, #1
 8006fe8:	e7c6      	b.n	8006f78 <RadioTimeOnAir+0x6c>
    bool    lowDatareOptimize = false;
 8006fea:	2600      	movs	r6, #0
 8006fec:	e7c4      	b.n	8006f78 <RadioTimeOnAir+0x6c>
    return ( numerator + denominator - 1 ) / denominator;
 8006fee:	deff      	udf	#255	; 0xff
 8006ff0:	0801bef3 	.word	0x0801bef3
 8006ff4:	0801a3a8 	.word	0x0801a3a8

08006ff8 <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <RadioSetPublicNetwork+0x38>)
{
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	4604      	mov	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8006ffe:	7018      	strb	r0, [r3, #0]
 8007000:	7058      	strb	r0, [r3, #1]
    switch( modem )
 8007002:	f000 f817 	bl	8007034 <RadioSetModem.part.0>
    if( enable == true )
 8007006:	b15c      	cbz	r4, 8007020 <RadioSetPublicNetwork+0x28>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007008:	2134      	movs	r1, #52	; 0x34
 800700a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800700e:	f00d fa98 	bl	8014542 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8007012:	2144      	movs	r1, #68	; 0x44
}
 8007014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007018:	f240 7041 	movw	r0, #1857	; 0x741
 800701c:	f00d ba91 	b.w	8014542 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8007020:	2114      	movs	r1, #20
 8007022:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007026:	f00d fa8c 	bl	8014542 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800702a:	2124      	movs	r1, #36	; 0x24
 800702c:	e7f2      	b.n	8007014 <RadioSetPublicNetwork+0x1c>
 800702e:	bf00      	nop
 8007030:	2000257c 	.word	0x2000257c

08007034 <RadioSetModem.part.0>:
void RadioSetModem( RadioModems_t modem )
 8007034:	b508      	push	{r3, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 8007036:	2001      	movs	r0, #1
 8007038:	f7ff fc8c 	bl	8006954 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <RadioSetModem.part.0+0x20>)
 800703e:	7818      	ldrb	r0, [r3, #0]
 8007040:	785a      	ldrb	r2, [r3, #1]
 8007042:	4282      	cmp	r2, r0
 8007044:	d004      	beq.n	8007050 <RadioSetModem.part.0+0x1c>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8007046:	7058      	strb	r0, [r3, #1]
}
 8007048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800704c:	f7ff bfd4 	b.w	8006ff8 <RadioSetPublicNetwork>
}
 8007050:	bd08      	pop	{r3, pc}
 8007052:	bf00      	nop
 8007054:	2000257c 	.word	0x2000257c

08007058 <RadioSetModem>:
    switch( modem )
 8007058:	2801      	cmp	r0, #1
{
 800705a:	b508      	push	{r3, lr}
    switch( modem )
 800705c:	d006      	beq.n	800706c <RadioSetModem+0x14>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 800705e:	2000      	movs	r0, #0
 8007060:	f7ff fc78 	bl	8006954 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 8007064:	4b03      	ldr	r3, [pc, #12]	; (8007074 <RadioSetModem+0x1c>)
 8007066:	2200      	movs	r2, #0
 8007068:	705a      	strb	r2, [r3, #1]
}
 800706a:	bd08      	pop	{r3, pc}
 800706c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007070:	f7ff bfe0 	b.w	8007034 <RadioSetModem.part.0>
 8007074:	2000257c 	.word	0x2000257c

08007078 <RadioSetRxConfig>:
{
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	b085      	sub	sp, #20
 800707e:	460e      	mov	r6, r1
 8007080:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8007084:	9100      	str	r1, [sp, #0]
 8007086:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 800708a:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800708e:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
    RxContinuous = rxContinuous;
 8007092:	4c6a      	ldr	r4, [pc, #424]	; (800723c <RadioSetRxConfig+0x1c4>)
 8007094:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8007240 <RadioSetRxConfig+0x1c8>
{
 8007098:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
    RxContinuous = rxContinuous;
 800709c:	7021      	strb	r1, [r4, #0]
        symbTimeout = 0;
 800709e:	2900      	cmp	r1, #0
 80070a0:	bf18      	it	ne
 80070a2:	2700      	movne	r7, #0
        MaxPayloadLength = 0xFF;
 80070a4:	f1b9 0f00 	cmp.w	r9, #0
{
 80070a8:	4615      	mov	r5, r2
 80070aa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
        MaxPayloadLength = 0xFF;
 80070ae:	bf08      	it	eq
 80070b0:	22ff      	moveq	r2, #255	; 0xff
 80070b2:	f88b 2000 	strb.w	r2, [fp]
    switch( modem )
 80070b6:	4680      	mov	r8, r0
 80070b8:	b120      	cbz	r0, 80070c4 <RadioSetRxConfig+0x4c>
 80070ba:	2801      	cmp	r0, #1
 80070bc:	d054      	beq.n	8007168 <RadioSetRxConfig+0xf0>
}
 80070be:	b005      	add	sp, #20
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80070c4:	4c5f      	ldr	r4, [pc, #380]	; (8007244 <RadioSetRxConfig+0x1cc>)
            SX126xSetStopRxTimerOnPreambleDetect( false );
 80070c6:	f00d fcb3 	bl	8014a30 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80070ca:	230b      	movs	r3, #11
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 80070cc:	0070      	lsls	r0, r6, #1
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 80070ce:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80070d2:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80070d6:	f884 80e0 	strb.w	r8, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 80070da:	f7ff fddf 	bl	8006c9c <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80070de:	f641 0304 	movw	r3, #6148	; 0x1804
 80070e2:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80070e6:	f89b 3000 	ldrb.w	r3, [fp]
 80070ea:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80070ee:	9b00      	ldr	r3, [sp, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 80070f0:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	bf14      	ite	ne
 80070f8:	23f2      	movne	r3, #242	; 0xf2
 80070fa:	2301      	moveq	r3, #1
 80070fc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007100:	ea4f 0aca 	mov.w	sl, sl, lsl #3
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007104:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007106:	f089 0901 	eor.w	r9, r9, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800710a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800710e:	f884 80b8 	strb.w	r8, [r4, #184]	; 0xb8
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007112:	f8a4 a0ba 	strh.w	sl, [r4, #186]	; 0xba
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007116:	f884 80be 	strb.w	r8, [r4, #190]	; 0xbe
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800711a:	f884 90bf 	strb.w	r9, [r4, #191]	; 0xbf
            RadioStandby( );
 800711e:	f00d fdb6 	bl	8014c8e <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8007122:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 8007126:	3800      	subs	r0, #0
 8007128:	bf18      	it	ne
 800712a:	2001      	movne	r0, #1
 800712c:	f7ff ff94 	bl	8007058 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8007130:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8007134:	f7ff fc24 	bl	8006980 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8007138:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800713c:	f7ff fc78 	bl	8006a30 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007140:	4a41      	ldr	r2, [pc, #260]	; (8007248 <RadioSetRxConfig+0x1d0>)
 8007142:	6810      	ldr	r0, [r2, #0]
 8007144:	6851      	ldr	r1, [r2, #4]
 8007146:	ab02      	add	r3, sp, #8
 8007148:	c303      	stmia	r3!, {r0, r1}
 800714a:	a802      	add	r0, sp, #8
 800714c:	f00d fb9e 	bl	801488c <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8007150:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007154:	f7ff fb42 	bl	80067dc <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8007158:	4b3c      	ldr	r3, [pc, #240]	; (800724c <RadioSetRxConfig+0x1d4>)
 800715a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800715e:	4357      	muls	r7, r2
 8007160:	fbb7 f5f5 	udiv	r5, r7, r5
 8007164:	601d      	str	r5, [r3, #0]
            break;
 8007166:	e7aa      	b.n	80070be <RadioSetRxConfig+0x46>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8007168:	2000      	movs	r0, #0
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	f00d fc60 	bl	8014a30 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007170:	4937      	ldr	r1, [pc, #220]	; (8007250 <RadioSetRxConfig+0x1d8>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007172:	4c34      	ldr	r4, [pc, #208]	; (8007244 <RadioSetRxConfig+0x1cc>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007174:	5d89      	ldrb	r1, [r1, r6]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007176:	9b01      	ldr	r3, [sp, #4]
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007178:	f884 80e0 	strb.w	r8, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800717c:	b2ea      	uxtb	r2, r5
 800717e:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007182:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007186:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800718a:	2e00      	cmp	r6, #0
 800718c:	d144      	bne.n	8007218 <RadioSetRxConfig+0x1a0>
 800718e:	3d0b      	subs	r5, #11
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007190:	2d01      	cmp	r5, #1
 8007192:	bf8c      	ite	hi
 8007194:	2500      	movhi	r5, #0
 8007196:	2501      	movls	r5, #1
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007198:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800719a:	3a05      	subs	r2, #5
 800719c:	429a      	cmp	r2, r3
 800719e:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 80071a2:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80071a6:	d840      	bhi.n	800722a <RadioSetRxConfig+0x1b2>
                if( preambleLen < 12 )
 80071a8:	f1ba 0f0b 	cmp.w	sl, #11
 80071ac:	d83d      	bhi.n	800722a <RadioSetRxConfig+0x1b2>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 80071ae:	230c      	movs	r3, #12
 80071b0:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80071b4:	f89b 3000 	ldrb.w	r3, [fp]
 80071b8:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80071c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80071c6:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80071ca:	f884 90c6 	strb.w	r9, [r4, #198]	; 0xc6
            RadioStandby( );
 80071ce:	f00d fd5e 	bl	8014c8e <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80071d2:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 80071d6:	3800      	subs	r0, #0
 80071d8:	bf18      	it	ne
 80071da:	2001      	movne	r0, #1
 80071dc:	f7ff ff3c 	bl	8007058 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80071e0:	481c      	ldr	r0, [pc, #112]	; (8007254 <RadioSetRxConfig+0x1dc>)
 80071e2:	f7ff fbcd 	bl	8006980 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80071e6:	481c      	ldr	r0, [pc, #112]	; (8007258 <RadioSetRxConfig+0x1e0>)
 80071e8:	f7ff fc22 	bl	8006a30 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 80071ec:	b2f8      	uxtb	r0, r7
 80071ee:	f00d fc2b 	bl	8014a48 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80071f2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
 80071f6:	2b01      	cmp	r3, #1
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 80071f8:	f240 7036 	movw	r0, #1846	; 0x736
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80071fc:	d118      	bne.n	8007230 <RadioSetRxConfig+0x1b8>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 80071fe:	f00d f9c1 	bl	8014584 <SX126xReadRegister>
 8007202:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 8007206:	f240 7036 	movw	r0, #1846	; 0x736
 800720a:	f00d f99a 	bl	8014542 <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <RadioSetRxConfig+0x1d4>)
 8007210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007214:	601a      	str	r2, [r3, #0]
}
 8007216:	e752      	b.n	80070be <RadioSetRxConfig+0x46>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007218:	2e01      	cmp	r6, #1
 800721a:	d104      	bne.n	8007226 <RadioSetRxConfig+0x1ae>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800721c:	f1a5 030c 	sub.w	r3, r5, #12
 8007220:	425d      	negs	r5, r3
 8007222:	415d      	adcs	r5, r3
 8007224:	e7b8      	b.n	8007198 <RadioSetRxConfig+0x120>
 8007226:	2500      	movs	r5, #0
 8007228:	e7b6      	b.n	8007198 <RadioSetRxConfig+0x120>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800722a:	f8a4 a0c4 	strh.w	sl, [r4, #196]	; 0xc4
 800722e:	e7c1      	b.n	80071b4 <RadioSetRxConfig+0x13c>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 8007230:	f00d f9a8 	bl	8014584 <SX126xReadRegister>
 8007234:	f040 0104 	orr.w	r1, r0, #4
 8007238:	b2c9      	uxtb	r1, r1
 800723a:	e7e4      	b.n	8007206 <RadioSetRxConfig+0x18e>
 800723c:	2000267d 	.word	0x2000267d
 8007240:	200002b0 	.word	0x200002b0
 8007244:	20001160 	.word	0x20001160
 8007248:	0801a175 	.word	0x0801a175
 800724c:	20001144 	.word	0x20001144
 8007250:	0801bef3 	.word	0x0801bef3
 8007254:	20001240 	.word	0x20001240
 8007258:	20001218 	.word	0x20001218

0800725c <RadioSetTxConfig>:
{
 800725c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007262:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8007266:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 800726a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 800726e:	460f      	mov	r7, r1
 8007270:	4693      	mov	fp, r2
    switch( modem )
 8007272:	4606      	mov	r6, r0
 8007274:	b148      	cbz	r0, 800728a <RadioSetTxConfig+0x2e>
 8007276:	2801      	cmp	r0, #1
 8007278:	d04e      	beq.n	8007318 <RadioSetTxConfig+0xbc>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 800727a:	f640 0089 	movw	r0, #2185	; 0x889
 800727e:	f00d f981 	bl	8014584 <SX126xReadRegister>
 8007282:	f040 0104 	orr.w	r1, r0, #4
 8007286:	b2c9      	uxtb	r1, r1
 8007288:	e08f      	b.n	80073aa <RadioSetTxConfig+0x14e>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800728a:	4c54      	ldr	r4, [pc, #336]	; (80073dc <RadioSetTxConfig+0x180>)
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800728c:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800728e:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8007292:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007294:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007298:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800729c:	f7ff fcfe 	bl	8006c9c <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80072a0:	f641 0304 	movw	r3, #6148	; 0x1804
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80072a4:	f1ba 0f00 	cmp.w	sl, #0
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80072a8:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80072ac:	bf14      	ite	ne
 80072ae:	23f2      	movne	r3, #242	; 0xf2
 80072b0:	2301      	moveq	r3, #1
 80072b2:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80072b6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80072ba:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80072bc:	f089 0901 	eor.w	r9, r9, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80072c0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 80072c4:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 80072c8:	f8c4 b0e8 	str.w	fp, [r4, #232]	; 0xe8
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80072cc:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80072d0:	f8a4 80ba 	strh.w	r8, [r4, #186]	; 0xba
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80072d4:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80072d8:	f884 90bf 	strb.w	r9, [r4, #191]	; 0xbf
            RadioStandby( );
 80072dc:	f00d fcd7 	bl	8014c8e <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80072e0:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 80072e4:	3800      	subs	r0, #0
 80072e6:	bf18      	it	ne
 80072e8:	2001      	movne	r0, #1
 80072ea:	f7ff feb5 	bl	8007058 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 80072ee:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80072f2:	f7ff fb45 	bl	8006980 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 80072f6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80072fa:	f7ff fb99 	bl	8006a30 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80072fe:	4a38      	ldr	r2, [pc, #224]	; (80073e0 <RadioSetTxConfig+0x184>)
 8007300:	6810      	ldr	r0, [r2, #0]
 8007302:	6851      	ldr	r1, [r2, #4]
 8007304:	466b      	mov	r3, sp
 8007306:	c303      	stmia	r3!, {r0, r1}
 8007308:	4668      	mov	r0, sp
 800730a:	f00d fabf 	bl	801488c <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 800730e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007312:	f7ff fa63 	bl	80067dc <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007316:	e7b0      	b.n	800727a <RadioSetTxConfig+0x1e>
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007318:	4932      	ldr	r1, [pc, #200]	; (80073e4 <RadioSetTxConfig+0x188>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800731a:	4c30      	ldr	r4, [pc, #192]	; (80073dc <RadioSetTxConfig+0x180>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800731c:	5cc9      	ldrb	r1, [r1, r3]
 800731e:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007322:	b2ea      	uxtb	r2, r5
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007324:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007328:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800732c:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007330:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007334:	2b00      	cmp	r3, #0
 8007336:	d145      	bne.n	80073c4 <RadioSetTxConfig+0x168>
 8007338:	3d0b      	subs	r5, #11
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800733a:	2d01      	cmp	r5, #1
 800733c:	bf8c      	ite	hi
 800733e:	2500      	movhi	r5, #0
 8007340:	2501      	movls	r5, #1
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007342:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007344:	3a05      	subs	r2, #5
 8007346:	429a      	cmp	r2, r3
 8007348:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800734c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007350:	d841      	bhi.n	80073d6 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8007352:	f1b8 0f0b 	cmp.w	r8, #11
 8007356:	d83e      	bhi.n	80073d6 <RadioSetTxConfig+0x17a>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8007358:	230c      	movs	r3, #12
 800735a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800735e:	4b22      	ldr	r3, [pc, #136]	; (80073e8 <RadioSetTxConfig+0x18c>)
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007360:	f884 90c6 	strb.w	r9, [r4, #198]	; 0xc6
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800736a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800736e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007372:	f884 a0c8 	strb.w	sl, [r4, #200]	; 0xc8
            RadioStandby( );
 8007376:	f00d fc8a 	bl	8014c8e <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800737a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 800737e:	3800      	subs	r0, #0
 8007380:	bf18      	it	ne
 8007382:	2001      	movne	r0, #1
 8007384:	f7ff fe68 	bl	8007058 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8007388:	4818      	ldr	r0, [pc, #96]	; (80073ec <RadioSetTxConfig+0x190>)
 800738a:	f7ff faf9 	bl	8006980 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800738e:	4818      	ldr	r0, [pc, #96]	; (80073f0 <RadioSetTxConfig+0x194>)
 8007390:	f7ff fb4e 	bl	8006a30 <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007394:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
 8007398:	2b06      	cmp	r3, #6
 800739a:	f47f af6e 	bne.w	800727a <RadioSetTxConfig+0x1e>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) & ~( 1 << 2 ) );
 800739e:	f640 0089 	movw	r0, #2185	; 0x889
 80073a2:	f00d f8ef 	bl	8014584 <SX126xReadRegister>
 80073a6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 80073aa:	f640 0089 	movw	r0, #2185	; 0x889
 80073ae:	f00d f8c8 	bl	8014542 <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 80073b2:	4638      	mov	r0, r7
 80073b4:	f00d f86a 	bl	801448c <SX126xSetRfTxPower>
    TxTimeout = timeout;
 80073b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073ba:	4b0e      	ldr	r3, [pc, #56]	; (80073f4 <RadioSetTxConfig+0x198>)
 80073bc:	601a      	str	r2, [r3, #0]
}
 80073be:	b003      	add	sp, #12
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d104      	bne.n	80073d2 <RadioSetTxConfig+0x176>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80073c8:	f1a5 030c 	sub.w	r3, r5, #12
 80073cc:	425d      	negs	r5, r3
 80073ce:	415d      	adcs	r5, r3
 80073d0:	e7b7      	b.n	8007342 <RadioSetTxConfig+0xe6>
 80073d2:	2500      	movs	r5, #0
 80073d4:	e7b5      	b.n	8007342 <RadioSetTxConfig+0xe6>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80073d6:	f8a4 80c4 	strh.w	r8, [r4, #196]	; 0xc4
 80073da:	e7c0      	b.n	800735e <RadioSetTxConfig+0x102>
 80073dc:	20001160 	.word	0x20001160
 80073e0:	0801a175 	.word	0x0801a175
 80073e4:	0801bef3 	.word	0x0801bef3
 80073e8:	200002b0 	.word	0x200002b0
 80073ec:	20001240 	.word	0x20001240
 80073f0:	20001218 	.word	0x20001218
 80073f4:	20001254 	.word	0x20001254

080073f8 <RadioInit>:
{
 80073f8:	b508      	push	{r3, lr}
    RadioEvents = events;
 80073fa:	4b17      	ldr	r3, [pc, #92]	; (8007458 <RadioInit+0x60>)
 80073fc:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 80073fe:	4817      	ldr	r0, [pc, #92]	; (800745c <RadioInit+0x64>)
 8007400:	f7ff fa26 	bl	8006850 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 8007404:	2000      	movs	r0, #0
 8007406:	f00d fa4a 	bl	801489e <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 800740a:	2001      	movs	r0, #1
 800740c:	f00d fb47 	bl	8014a9e <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 8007410:	2100      	movs	r1, #0
 8007412:	4608      	mov	r0, r1
 8007414:	f00d fbf8 	bl	8014c08 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 8007418:	2104      	movs	r1, #4
 800741a:	2000      	movs	r0, #0
 800741c:	f00d fbb6 	bl	8014b8c <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007420:	2300      	movs	r3, #0
 8007422:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007426:	461a      	mov	r2, r3
 8007428:	4608      	mov	r0, r1
 800742a:	f00d fb64 	bl	8014af6 <SX126xSetDioIrqParams>
    RadioAddRegisterToRetentionList( REG_RX_GAIN );
 800742e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8007432:	f00d fcaa 	bl	8014d8a <RadioAddRegisterToRetentionList>
    RadioAddRegisterToRetentionList( REG_TX_MODULATION );
 8007436:	f640 0089 	movw	r0, #2185	; 0x889
 800743a:	f00d fca6 	bl	8014d8a <RadioAddRegisterToRetentionList>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800743e:	4908      	ldr	r1, [pc, #32]	; (8007460 <RadioInit+0x68>)
 8007440:	4808      	ldr	r0, [pc, #32]	; (8007464 <RadioInit+0x6c>)
 8007442:	f00d f9dc 	bl	80147fe <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007446:	4908      	ldr	r1, [pc, #32]	; (8007468 <RadioInit+0x70>)
 8007448:	4808      	ldr	r0, [pc, #32]	; (800746c <RadioInit+0x74>)
 800744a:	f00d f9d8 	bl	80147fe <TimerInit>
    IrqFired = false;
 800744e:	4b08      	ldr	r3, [pc, #32]	; (8007470 <RadioInit+0x78>)
 8007450:	2200      	movs	r2, #0
 8007452:	701a      	strb	r2, [r3, #0]
}
 8007454:	bd08      	pop	{r3, pc}
 8007456:	bf00      	nop
 8007458:	2000112c 	.word	0x2000112c
 800745c:	08006be9 	.word	0x08006be9
 8007460:	08006bc1 	.word	0x08006bc1
 8007464:	20001258 	.word	0x20001258
 8007468:	08006bd5 	.word	0x08006bd5
 800746c:	20001148 	.word	0x20001148
 8007470:	2000257b 	.word	0x2000257b

08007474 <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8007474:	f1a1 0310 	sub.w	r3, r1, #16
{
 8007478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	b2dc      	uxtb	r4, r3
 800747e:	2c10      	cmp	r4, #16
 8007480:	d806      	bhi.n	8007490 <aes_set_key+0x1c>
 8007482:	2301      	movs	r3, #1
 8007484:	40a3      	lsls	r3, r4
 8007486:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800748a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800748e:	b92b      	cbnz	r3, 800749c <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 8007496:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while( nn-- )
 800749c:	1e53      	subs	r3, r2, #1
 800749e:	1844      	adds	r4, r0, r1
 80074a0:	42a0      	cmp	r0, r4
 80074a2:	d152      	bne.n	800754a <aes_set_key+0xd6>
    hi = (keylen + 28) << 2;
 80074a4:	f101 031c 	add.w	r3, r1, #28
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	fa5f f883 	uxtb.w	r8, r3
    ctx->rnd = (hi >> 4) - 1;
 80074ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80074b2:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 80074b4:	4c2c      	ldr	r4, [pc, #176]	; (8007568 <aes_set_key+0xf4>)
    ctx->rnd = (hi >> 4) - 1;
 80074b6:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80074ba:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 80074be:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 80074c0:	eb02 0c03 	add.w	ip, r2, r3
        if( cc % keylen == 0 )
 80074c4:	fbb3 f0f1 	udiv	r0, r3, r1
 80074c8:	fb01 3010 	mls	r0, r1, r0, r3
 80074cc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 80074d0:	f81c ac04 	ldrb.w	sl, [ip, #-4]
        t1 = ctx->ksch[cc - 3];
 80074d4:	f81c 7c03 	ldrb.w	r7, [ip, #-3]
        t2 = ctx->ksch[cc - 2];
 80074d8:	f81c 6c02 	ldrb.w	r6, [ip, #-2]
        t3 = ctx->ksch[cc - 1];
 80074dc:	f81c 5c01 	ldrb.w	r5, [ip, #-1]
        if( cc % keylen == 0 )
 80074e0:	d138      	bne.n	8007554 <aes_set_key+0xe0>
            rc = f2(rc);
 80074e2:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 80074e6:	f814 e007 	ldrb.w	lr, [r4, r7]
            t1 = s_box(t2);
 80074ea:	5da7      	ldrb	r7, [r4, r6]
            t2 = s_box(t3);
 80074ec:	5d66      	ldrb	r6, [r4, r5]
            t3 = s_box(tt);
 80074ee:	f814 500a 	ldrb.w	r5, [r4, sl]
            rc = f2(rc);
 80074f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80074f6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 80074fa:	ea89 0e0e 	eor.w	lr, r9, lr
            rc = f2(rc);
 80074fe:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 8007502:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 8007506:	46f2      	mov	sl, lr
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007508:	1a58      	subs	r0, r3, r1
 800750a:	b2c0      	uxtb	r0, r0
 800750c:	f812 e000 	ldrb.w	lr, [r2, r0]
 8007510:	ea8a 0a0e 	eor.w	sl, sl, lr
 8007514:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007518:	4410      	add	r0, r2
 800751a:	f103 0e01 	add.w	lr, r3, #1
 800751e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8007522:	fa5f fe8e 	uxtb.w	lr, lr
 8007526:	ea87 070a 	eor.w	r7, r7, sl
 800752a:	f802 700e 	strb.w	r7, [r2, lr]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800752e:	7887      	ldrb	r7, [r0, #2]
 8007530:	407e      	eors	r6, r7
 8007532:	f88c 6002 	strb.w	r6, [ip, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007536:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007538:	3304      	adds	r3, #4
 800753a:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800753c:	4045      	eors	r5, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800753e:	4598      	cmp	r8, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007540:	f88c 5003 	strb.w	r5, [ip, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007544:	d8bc      	bhi.n	80074c0 <aes_set_key+0x4c>
    return 0;
 8007546:	2000      	movs	r0, #0
 8007548:	e7a6      	b.n	8007498 <aes_set_key+0x24>
        *d++ = *s++;
 800754a:	f810 5b01 	ldrb.w	r5, [r0], #1
 800754e:	f803 5f01 	strb.w	r5, [r3, #1]!
 8007552:	e7a5      	b.n	80074a0 <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8007554:	2918      	cmp	r1, #24
 8007556:	d9d7      	bls.n	8007508 <aes_set_key+0x94>
 8007558:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 800755a:	bf01      	itttt	eq
 800755c:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 8007560:	5de7      	ldrbeq	r7, [r4, r7]
            t2 = s_box(t2);
 8007562:	5da6      	ldrbeq	r6, [r4, r6]
            t3 = s_box(t3);
 8007564:	5d65      	ldrbeq	r5, [r4, r5]
 8007566:	e7cf      	b.n	8007508 <aes_set_key+0x94>
 8007568:	0801c0fa 	.word	0x0801c0fa

0800756c <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	b093      	sub	sp, #76	; 0x4c
    if( ctx->rnd )
 8007572:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 8007576:	910d      	str	r1, [sp, #52]	; 0x34
 8007578:	920b      	str	r2, [sp, #44]	; 0x2c
    if( ctx->rnd )
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8144 	beq.w	8007808 <aes_encrypt+0x29c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8007580:	4601      	mov	r1, r0
 8007582:	a80e      	add	r0, sp, #56	; 0x38
 8007584:	f00d fc77 	bl	8014e76 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8007588:	4ca0      	ldr	r4, [pc, #640]	; (800780c <aes_encrypt+0x2a0>)
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800758a:	4da1      	ldr	r5, [pc, #644]	; (8007810 <aes_encrypt+0x2a4>)
 800758c:	4ea1      	ldr	r6, [pc, #644]	; (8007814 <aes_encrypt+0x2a8>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 800758e:	2301      	movs	r3, #1
 8007590:	9301      	str	r3, [sp, #4]
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8007592:	9a01      	ldr	r2, [sp, #4]
 8007594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007596:	f8dd 9004 	ldr.w	r9, [sp, #4]
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800759a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800759e:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80075a2:	f89d c03d 	ldrb.w	ip, [sp, #61]	; 0x3d
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80075a6:	f89d 7041 	ldrb.w	r7, [sp, #65]	; 0x41
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80075aa:	f89d 0042 	ldrb.w	r0, [sp, #66]	; 0x42
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80075ae:	f89d 1046 	ldrb.w	r1, [sp, #70]	; 0x46
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80075b2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80075b6:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80075b8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80075bc:	9302      	str	r3, [sp, #8]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80075be:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80075c2:	9303      	str	r3, [sp, #12]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80075c4:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 80075c8:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80075ca:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 80075ce:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80075d0:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 80075d4:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80075d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80075da:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80075dc:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80075e0:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80075e2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80075e6:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80075e8:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80075ec:	930a      	str	r3, [sp, #40]	; 0x28
        for( r = 1 ; r < ctx->rnd ; ++r )
 80075ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80075f0:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
        for( r = 1 ; r < ctx->rnd ; ++r )
 80075f4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80075f8:	454b      	cmp	r3, r9
 80075fa:	d844      	bhi.n	8007686 <aes_encrypt+0x11a>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80075fc:	f814 3008 	ldrb.w	r3, [r4, r8]
 8007600:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8007604:	f814 300e 	ldrb.w	r3, [r4, lr]
 8007608:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800760c:	9b07      	ldr	r3, [sp, #28]
 800760e:	5ce3      	ldrb	r3, [r4, r3]
 8007610:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8007614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007616:	5ce3      	ldrb	r3, [r4, r3]
 8007618:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800761c:	f814 300c 	ldrb.w	r3, [r4, ip]
 8007620:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8007624:	5de3      	ldrb	r3, [r4, r7]
 8007626:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800762a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762c:	5ce3      	ldrb	r3, [r4, r3]
 800762e:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 8007632:	9b02      	ldr	r3, [sp, #8]
 8007634:	5ce3      	ldrb	r3, [r4, r3]
 8007636:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800763a:	5c23      	ldrb	r3, [r4, r0]
 800763c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	5ce3      	ldrb	r3, [r4, r3]
 8007644:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007648:	5c63      	ldrb	r3, [r4, r1]
 800764a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 800764e:	9b05      	ldr	r3, [sp, #20]
 8007650:	5ce3      	ldrb	r3, [r4, r3]
 8007652:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007656:	9b08      	ldr	r3, [sp, #32]
 8007658:	5ce3      	ldrb	r3, [r4, r3]
 800765a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 800765e:	9b06      	ldr	r3, [sp, #24]
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007660:	980d      	ldr	r0, [sp, #52]	; 0x34
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007662:	5ce3      	ldrb	r3, [r4, r3]
 8007664:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007668:	9b04      	ldr	r3, [sp, #16]
 800766a:	5ce3      	ldrb	r3, [r4, r3]
 800766c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007670:	a90e      	add	r1, sp, #56	; 0x38
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007672:	5ca3      	ldrb	r3, [r4, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007676:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800767a:	f00d fbfc 	bl	8014e76 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800767e:	2000      	movs	r0, #0
}
 8007680:	b013      	add	sp, #76	; 0x4c
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007686:	f816 b00c 	ldrb.w	fp, [r6, ip]
 800768a:	f815 9008 	ldrb.w	r9, [r5, r8]
 800768e:	f814 a000 	ldrb.w	sl, [r4, r0]
 8007692:	5ca3      	ldrb	r3, [r4, r2]
 8007694:	ea89 090b 	eor.w	r9, r9, fp
 8007698:	ea8a 0909 	eor.w	r9, sl, r9
 800769c:	ea83 0909 	eor.w	r9, r3, r9
 80076a0:	f88d 9038 	strb.w	r9, [sp, #56]	; 0x38
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80076a4:	f814 9008 	ldrb.w	r9, [r4, r8]
 80076a8:	f815 b00c 	ldrb.w	fp, [r5, ip]
 80076ac:	ea83 0309 	eor.w	r3, r3, r9
 80076b0:	ea8b 0303 	eor.w	r3, fp, r3
 80076b4:	f816 b000 	ldrb.w	fp, [r6, r0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076b8:	5c28      	ldrb	r0, [r5, r0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80076ba:	ea83 030b 	eor.w	r3, r3, fp
 80076be:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076c2:	f814 300c 	ldrb.w	r3, [r4, ip]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80076c6:	f816 c007 	ldrb.w	ip, [r6, r7]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076ca:	ea89 0903 	eor.w	r9, r9, r3
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80076ce:	ea8a 0303 	eor.w	r3, sl, r3
 80076d2:	f816 a008 	ldrb.w	sl, [r6, r8]
 80076d6:	ea8a 0a03 	eor.w	sl, sl, r3
 80076da:	5cab      	ldrb	r3, [r5, r2]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076dc:	ea89 0900 	eor.w	r9, r9, r0
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80076e0:	ea8a 0303 	eor.w	r3, sl, r3
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076e4:	5cb0      	ldrb	r0, [r6, r2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80076e6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80076ea:	f815 200e 	ldrb.w	r2, [r5, lr]
 80076ee:	9b04      	ldr	r3, [sp, #16]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076f0:	ea89 0900 	eor.w	r9, r9, r0
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80076f4:	5c60      	ldrb	r0, [r4, r1]
 80076f6:	5ce3      	ldrb	r3, [r4, r3]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076f8:	f88d 903a 	strb.w	r9, [sp, #58]	; 0x3a
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80076fc:	ea82 020c 	eor.w	r2, r2, ip
 8007700:	4042      	eors	r2, r0
 8007702:	405a      	eors	r2, r3
 8007704:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007708:	f814 200e 	ldrb.w	r2, [r4, lr]
 800770c:	f815 c007 	ldrb.w	ip, [r5, r7]
 8007710:	4053      	eors	r3, r2
 8007712:	ea8c 0303 	eor.w	r3, ip, r3
 8007716:	f816 c001 	ldrb.w	ip, [r6, r1]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800771a:	5c69      	ldrb	r1, [r5, r1]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800771c:	ea83 030c 	eor.w	r3, r3, ip
 8007720:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007724:	5de3      	ldrb	r3, [r4, r7]
 8007726:	405a      	eors	r2, r3
 8007728:	404a      	eors	r2, r1
 800772a:	9904      	ldr	r1, [sp, #16]
 800772c:	5c71      	ldrb	r1, [r6, r1]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800772e:	4043      	eors	r3, r0
 8007730:	f816 000e 	ldrb.w	r0, [r6, lr]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007734:	404a      	eors	r2, r1
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007736:	4058      	eors	r0, r3
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007738:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800773c:	9b04      	ldr	r3, [sp, #16]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800773e:	9a07      	ldr	r2, [sp, #28]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007740:	5ceb      	ldrb	r3, [r5, r3]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007742:	5caa      	ldrb	r2, [r5, r2]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007744:	4043      	eors	r3, r0
 8007746:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800774a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800774c:	9b03      	ldr	r3, [sp, #12]
 800774e:	5c30      	ldrb	r0, [r6, r0]
 8007750:	5ce1      	ldrb	r1, [r4, r3]
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	4042      	eors	r2, r0
 8007756:	5ce3      	ldrb	r3, [r4, r3]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007758:	980a      	ldr	r0, [sp, #40]	; 0x28
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800775a:	404a      	eors	r2, r1
 800775c:	405a      	eors	r2, r3
 800775e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007762:	9a07      	ldr	r2, [sp, #28]
 8007764:	5c28      	ldrb	r0, [r5, r0]
 8007766:	5ca2      	ldrb	r2, [r4, r2]
 8007768:	4053      	eors	r3, r2
 800776a:	4043      	eors	r3, r0
 800776c:	9803      	ldr	r0, [sp, #12]
 800776e:	5c30      	ldrb	r0, [r6, r0]
 8007770:	4043      	eors	r3, r0
 8007772:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	9803      	ldr	r0, [sp, #12]
 800777a:	5ce3      	ldrb	r3, [r4, r3]
 800777c:	5c28      	ldrb	r0, [r5, r0]
 800777e:	405a      	eors	r2, r3
 8007780:	4042      	eors	r2, r0
 8007782:	9806      	ldr	r0, [sp, #24]
 8007784:	5c30      	ldrb	r0, [r6, r0]
 8007786:	4042      	eors	r2, r0
 8007788:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800778c:	9a07      	ldr	r2, [sp, #28]
 800778e:	404b      	eors	r3, r1
 8007790:	5cb1      	ldrb	r1, [r6, r2]
 8007792:	9a06      	ldr	r2, [sp, #24]
 8007794:	404b      	eors	r3, r1
 8007796:	5ca9      	ldrb	r1, [r5, r2]
 8007798:	404b      	eors	r3, r1
 800779a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800779e:	9b05      	ldr	r3, [sp, #20]
 80077a0:	5ce3      	ldrb	r3, [r4, r3]
 80077a2:	9a08      	ldr	r2, [sp, #32]
 80077a4:	9802      	ldr	r0, [sp, #8]
 80077a6:	5ca1      	ldrb	r1, [r4, r2]
 80077a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077aa:	5c30      	ldrb	r0, [r6, r0]
 80077ac:	5caa      	ldrb	r2, [r5, r2]
 80077ae:	4042      	eors	r2, r0
 80077b0:	405a      	eors	r2, r3
 80077b2:	404a      	eors	r2, r1
 80077b4:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80077b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ba:	9802      	ldr	r0, [sp, #8]
 80077bc:	5ca2      	ldrb	r2, [r4, r2]
 80077be:	5c28      	ldrb	r0, [r5, r0]
 80077c0:	4051      	eors	r1, r2
 80077c2:	4041      	eors	r1, r0
 80077c4:	9805      	ldr	r0, [sp, #20]
 80077c6:	5c30      	ldrb	r0, [r6, r0]
 80077c8:	4041      	eors	r1, r0
 80077ca:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80077ce:	9902      	ldr	r1, [sp, #8]
 80077d0:	9805      	ldr	r0, [sp, #20]
 80077d2:	5c61      	ldrb	r1, [r4, r1]
 80077d4:	5c28      	ldrb	r0, [r5, r0]
 80077d6:	404a      	eors	r2, r1
 80077d8:	4042      	eors	r2, r0
 80077da:	9808      	ldr	r0, [sp, #32]
 80077dc:	5c30      	ldrb	r0, [r6, r0]
 80077de:	4042      	eors	r2, r0
 80077e0:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80077e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e6:	5cb2      	ldrb	r2, [r6, r2]
 80077e8:	404b      	eors	r3, r1
 80077ea:	4053      	eors	r3, r2
 80077ec:	9a08      	ldr	r2, [sp, #32]
    xor_block(d, k);
 80077ee:	990c      	ldr	r1, [sp, #48]	; 0x30
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80077f0:	5caa      	ldrb	r2, [r5, r2]
    xor_block(d, k);
 80077f2:	a80e      	add	r0, sp, #56	; 0x38
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80077f4:	4053      	eors	r3, r2
 80077f6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    xor_block(d, k);
 80077fa:	f00d fafb 	bl	8014df4 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80077fe:	9b01      	ldr	r3, [sp, #4]
 8007800:	3301      	adds	r3, #1
 8007802:	b2db      	uxtb	r3, r3
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	e6c4      	b.n	8007592 <aes_encrypt+0x26>
        return ( uint8_t )-1;
 8007808:	20ff      	movs	r0, #255	; 0xff
 800780a:	e739      	b.n	8007680 <aes_encrypt+0x114>
 800780c:	0801c0fa 	.word	0x0801c0fa
 8007810:	0801befa 	.word	0x0801befa
 8007814:	0801bffa 	.word	0x0801bffa

08007818 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8007818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800781c:	b0cb      	sub	sp, #300	; 0x12c
 800781e:	4606      	mov	r6, r0
 8007820:	f8dd 9148 	ldr.w	r9, [sp, #328]	; 0x148
 8007824:	4617      	mov	r7, r2
 8007826:	4698      	mov	r8, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8007828:	460d      	mov	r5, r1
 800782a:	b389      	cbz	r1, 8007890 <ComputeCmac+0x78>
 800782c:	f1b9 0f00 	cmp.w	r9, #0
 8007830:	d02e      	beq.n	8007890 <ComputeCmac+0x78>
    }

    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8007832:	a804      	add	r0, sp, #16
 8007834:	f00d fb61 	bl	8014efa <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007838:	4b16      	ldr	r3, [pc, #88]	; (8007894 <ComputeCmac+0x7c>)
 800783a:	6819      	ldr	r1, [r3, #0]
 800783c:	2400      	movs	r4, #0
 800783e:	f101 0314 	add.w	r3, r1, #20
 8007842:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8007846:	5c1a      	ldrb	r2, [r3, r0]
 8007848:	4542      	cmp	r2, r8
 800784a:	d113      	bne.n	8007874 <ComputeCmac+0x5c>
    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800784c:	3015      	adds	r0, #21
 800784e:	4401      	add	r1, r0
 8007850:	a804      	add	r0, sp, #16
 8007852:	f00d fb62 	bl	8014f1a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8007856:	b9a6      	cbnz	r6, 8007882 <ComputeCmac+0x6a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8007858:	463a      	mov	r2, r7
 800785a:	4629      	mov	r1, r5
 800785c:	a804      	add	r0, sp, #16
 800785e:	f00d fb61 	bl	8014f24 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8007862:	4668      	mov	r0, sp
 8007864:	a904      	add	r1, sp, #16
 8007866:	f00d fbc4 	bl	8014ff2 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	f8c9 3000 	str.w	r3, [r9]
 8007870:	2000      	movs	r0, #0
 8007872:	e003      	b.n	800787c <ComputeCmac+0x64>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007874:	3401      	adds	r4, #1
 8007876:	2c17      	cmp	r4, #23
 8007878:	d1e3      	bne.n	8007842 <ComputeCmac+0x2a>
 800787a:	2003      	movs	r0, #3
                              ( uint32_t ) Cmac[0] );
    }

    return retval;
}
 800787c:	b04b      	add	sp, #300	; 0x12c
 800787e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8007882:	2210      	movs	r2, #16
 8007884:	4631      	mov	r1, r6
 8007886:	eb0d 0002 	add.w	r0, sp, r2
 800788a:	f00d fb4b 	bl	8014f24 <AES_CMAC_Update>
 800788e:	e7e3      	b.n	8007858 <ComputeCmac+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
 8007890:	2002      	movs	r0, #2
 8007892:	e7f3      	b.n	800787c <ComputeCmac+0x64>
 8007894:	20001270 	.word	0x20001270

08007898 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	b0e8      	sub	sp, #416	; 0x1a0
    SecureElementNvmData_t seNvmInit =
 800789c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80078a0:	2100      	movs	r1, #0
{
 80078a2:	4604      	mov	r4, r0
    SecureElementNvmData_t seNvmInit =
 80078a4:	4668      	mov	r0, sp
 80078a6:	f011 fe0d 	bl	80194c4 <memset>
 80078aa:	4a46      	ldr	r2, [pc, #280]	; (80079c4 <SecureElementInit+0x12c>)
 80078ac:	f10d 0115 	add.w	r1, sp, #21
 80078b0:	f102 0310 	add.w	r3, r2, #16
 80078b4:	f852 0b04 	ldr.w	r0, [r2], #4
 80078b8:	f841 0b04 	str.w	r0, [r1], #4
 80078bc:	429a      	cmp	r2, r3
 80078be:	d1f9      	bne.n	80078b4 <SecureElementInit+0x1c>
 80078c0:	2201      	movs	r2, #1
 80078c2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80078c6:	4a3f      	ldr	r2, [pc, #252]	; (80079c4 <SecureElementInit+0x12c>)
 80078c8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 80078cc:	f852 0b04 	ldr.w	r0, [r2], #4
 80078d0:	f841 0b04 	str.w	r0, [r1], #4
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d1f9      	bne.n	80078cc <SecureElementInit+0x34>
 80078d8:	2202      	movs	r2, #2
 80078da:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80078de:	2203      	movs	r2, #3
 80078e0:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 80078e4:	2204      	movs	r2, #4
 80078e6:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
 80078ea:	4a36      	ldr	r2, [pc, #216]	; (80079c4 <SecureElementInit+0x12c>)
 80078ec:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 80078f0:	f852 0b04 	ldr.w	r0, [r2], #4
 80078f4:	f841 0b04 	str.w	r0, [r1], #4
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d1f9      	bne.n	80078f0 <SecureElementInit+0x58>
 80078fc:	2205      	movs	r2, #5
 80078fe:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8007902:	4a30      	ldr	r2, [pc, #192]	; (80079c4 <SecureElementInit+0x12c>)
 8007904:	f10d 016a 	add.w	r1, sp, #106	; 0x6a
 8007908:	f852 0b04 	ldr.w	r0, [r2], #4
 800790c:	f841 0b04 	str.w	r0, [r1], #4
 8007910:	429a      	cmp	r2, r3
 8007912:	d1f9      	bne.n	8007908 <SecureElementInit+0x70>
 8007914:	2206      	movs	r2, #6
 8007916:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800791a:	4a2a      	ldr	r2, [pc, #168]	; (80079c4 <SecureElementInit+0x12c>)
 800791c:	f10d 017b 	add.w	r1, sp, #123	; 0x7b
 8007920:	f852 0b04 	ldr.w	r0, [r2], #4
 8007924:	f841 0b04 	str.w	r0, [r1], #4
 8007928:	429a      	cmp	r2, r3
 800792a:	d1f9      	bne.n	8007920 <SecureElementInit+0x88>
 800792c:	2207      	movs	r2, #7
 800792e:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8007932:	4a24      	ldr	r2, [pc, #144]	; (80079c4 <SecureElementInit+0x12c>)
 8007934:	ae23      	add	r6, sp, #140	; 0x8c
 8007936:	6810      	ldr	r0, [r2, #0]
 8007938:	6851      	ldr	r1, [r2, #4]
 800793a:	4635      	mov	r5, r6
 800793c:	c503      	stmia	r5!, {r0, r1}
 800793e:	3208      	adds	r2, #8
 8007940:	429a      	cmp	r2, r3
 8007942:	462e      	mov	r6, r5
 8007944:	d1f7      	bne.n	8007936 <SecureElementInit+0x9e>
 8007946:	2308      	movs	r3, #8
 8007948:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 800794c:	237f      	movs	r3, #127	; 0x7f
 800794e:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
 8007952:	2380      	movs	r3, #128	; 0x80
 8007954:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
 8007958:	2381      	movs	r3, #129	; 0x81
 800795a:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
 800795e:	2382      	movs	r3, #130	; 0x82
 8007960:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
 8007964:	2383      	movs	r3, #131	; 0x83
 8007966:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800796a:	2384      	movs	r3, #132	; 0x84
 800796c:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 8007970:	2385      	movs	r3, #133	; 0x85
 8007972:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
 8007976:	2386      	movs	r3, #134	; 0x86
 8007978:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 800797c:	2387      	movs	r3, #135	; 0x87
 800797e:	f88d 3135 	strb.w	r3, [sp, #309]	; 0x135
 8007982:	2388      	movs	r3, #136	; 0x88
 8007984:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
 8007988:	2389      	movs	r3, #137	; 0x89
 800798a:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
 800798e:	238a      	movs	r3, #138	; 0x8a
 8007990:	f88d 3168 	strb.w	r3, [sp, #360]	; 0x168
 8007994:	238b      	movs	r3, #139	; 0x8b
 8007996:	f88d 3179 	strb.w	r3, [sp, #377]	; 0x179
 800799a:	238c      	movs	r3, #140	; 0x8c
 800799c:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 80079a0:	b16c      	cbz	r4, 80079be <SecureElementInit+0x126>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 80079a2:	4d09      	ldr	r5, [pc, #36]	; (80079c8 <SecureElementInit+0x130>)

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 80079a4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80079a8:	4669      	mov	r1, sp
 80079aa:	4620      	mov	r0, r4
    SeNvm = nvm;
 80079ac:	602c      	str	r4, [r5, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 80079ae:	f00c fe2a 	bl	8014606 <memcpy1>

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    // Get a DevEUI from MCU unique ID
    SoftSeHalGetUniqueId( SeNvm->DevEui );
 80079b2:	6828      	ldr	r0, [r5, #0]
 80079b4:	f00d fc5d 	bl	8015272 <SoftSeHalGetUniqueId>
#endif
#endif
    return SECURE_ELEMENT_SUCCESS;
 80079b8:	2000      	movs	r0, #0
}
 80079ba:	b068      	add	sp, #416	; 0x1a0
 80079bc:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80079be:	2002      	movs	r0, #2
 80079c0:	e7fb      	b.n	80079ba <SecureElementInit+0x122>
 80079c2:	bf00      	nop
 80079c4:	0801b144 	.word	0x0801b144
 80079c8:	20001270 	.word	0x20001270

080079cc <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 80079cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d0:	460d      	mov	r5, r1
 80079d2:	b0be      	sub	sp, #248	; 0xf8
 80079d4:	4616      	mov	r6, r2
 80079d6:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
 80079d8:	4607      	mov	r7, r0
 80079da:	b370      	cbz	r0, 8007a3a <SecureElementAesEncrypt+0x6e>
 80079dc:	b36b      	cbz	r3, 8007a3a <SecureElementAesEncrypt+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80079de:	f011 040f 	ands.w	r4, r1, #15
 80079e2:	d12c      	bne.n	8007a3e <SecureElementAesEncrypt+0x72>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80079e4:	22f0      	movs	r2, #240	; 0xf0
 80079e6:	4621      	mov	r1, r4
 80079e8:	a801      	add	r0, sp, #4
 80079ea:	f00c fe20 	bl	801462e <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <SecureElementAesEncrypt+0x78>)
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	4621      	mov	r1, r4
 80079f4:	f100 0214 	add.w	r2, r0, #20
 80079f8:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 80079fc:	5cd4      	ldrb	r4, [r2, r3]
 80079fe:	42b4      	cmp	r4, r6
 8007a00:	d10b      	bne.n	8007a1a <SecureElementAesEncrypt+0x4e>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        aes_set_key( pItem->KeyValue, 16, &aesContext );
 8007a02:	3315      	adds	r3, #21
 8007a04:	aa01      	add	r2, sp, #4
 8007a06:	2110      	movs	r1, #16
 8007a08:	4418      	add	r0, r3
 8007a0a:	f7ff fd33 	bl	8007474 <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 8007a0e:	462c      	mov	r4, r5
 8007a10:	1b2e      	subs	r6, r5, r4
 8007a12:	b2f6      	uxtb	r6, r6
 8007a14:	b944      	cbnz	r4, 8007a28 <SecureElementAesEncrypt+0x5c>
 8007a16:	4620      	mov	r0, r4
 8007a18:	e003      	b.n	8007a22 <SecureElementAesEncrypt+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007a1a:	3101      	adds	r1, #1
 8007a1c:	2917      	cmp	r1, #23
 8007a1e:	d1eb      	bne.n	80079f8 <SecureElementAesEncrypt+0x2c>
 8007a20:	2003      	movs	r0, #3
            block = block + 16;
            size  = size - 16;
        }
    }
    return retval;
}
 8007a22:	b03e      	add	sp, #248	; 0xf8
 8007a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8007a28:	aa01      	add	r2, sp, #4
 8007a2a:	eb08 0106 	add.w	r1, r8, r6
 8007a2e:	19b8      	adds	r0, r7, r6
            size  = size - 16;
 8007a30:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8007a32:	f7ff fd9b 	bl	800756c <aes_encrypt>
            size  = size - 16;
 8007a36:	b2a4      	uxth	r4, r4
 8007a38:	e7ea      	b.n	8007a10 <SecureElementAesEncrypt+0x44>
        return SECURE_ELEMENT_ERROR_NPE;
 8007a3a:	2002      	movs	r0, #2
 8007a3c:	e7f1      	b.n	8007a22 <SecureElementAesEncrypt+0x56>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007a3e:	2005      	movs	r0, #5
 8007a40:	e7ef      	b.n	8007a22 <SecureElementAesEncrypt+0x56>
 8007a42:	bf00      	nop
 8007a44:	20001270 	.word	0x20001270

08007a48 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8007a48:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007a4a:	4d1c      	ldr	r5, [pc, #112]	; (8007abc <SecureElementSetKey.part.0+0x74>)
 8007a4c:	682c      	ldr	r4, [r5, #0]
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8007a4e:	4603      	mov	r3, r0
 8007a50:	b085      	sub	sp, #20
 8007a52:	4608      	mov	r0, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007a54:	2200      	movs	r2, #0
 8007a56:	f104 0114 	add.w	r1, r4, #20
 8007a5a:	eb02 1602 	add.w	r6, r2, r2, lsl #4
 8007a5e:	5d8f      	ldrb	r7, [r1, r6]
 8007a60:	429f      	cmp	r7, r3
 8007a62:	d126      	bne.n	8007ab2 <SecureElementSetKey.part.0+0x6a>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8007a64:	f083 0280 	eor.w	r2, r3, #128	; 0x80
 8007a68:	2a09      	cmp	r2, #9
 8007a6a:	f106 0615 	add.w	r6, r6, #21
 8007a6e:	d819      	bhi.n	8007aa4 <SecureElementSetKey.part.0+0x5c>
 8007a70:	f240 2349 	movw	r3, #585	; 0x249
 8007a74:	40d3      	lsrs	r3, r2
 8007a76:	43db      	mvns	r3, r3
 8007a78:	f013 0301 	ands.w	r3, r3, #1
 8007a7c:	d112      	bne.n	8007aa4 <SecureElementSetKey.part.0+0x5c>
                uint8_t               decryptedKey[16] = { 0 };
 8007a7e:	e9cd 3300 	strd	r3, r3, [sp]
 8007a82:	e9cd 3302 	strd	r3, r3, [sp, #8]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8007a86:	227f      	movs	r2, #127	; 0x7f
 8007a88:	2110      	movs	r1, #16
 8007a8a:	466b      	mov	r3, sp
 8007a8c:	f7ff ff9e 	bl	80079cc <SecureElementAesEncrypt>
 8007a90:	4604      	mov	r4, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8007a92:	6828      	ldr	r0, [r5, #0]
 8007a94:	2210      	movs	r2, #16
 8007a96:	4669      	mov	r1, sp
 8007a98:	4430      	add	r0, r6
 8007a9a:	f00c fdb4 	bl	8014606 <memcpy1>
}
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	b005      	add	sp, #20
 8007aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	2210      	movs	r2, #16
 8007aa8:	19a0      	adds	r0, r4, r6
 8007aaa:	f00c fdac 	bl	8014606 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8007aae:	2400      	movs	r4, #0
 8007ab0:	e7f5      	b.n	8007a9e <SecureElementSetKey.part.0+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007ab2:	3201      	adds	r2, #1
 8007ab4:	2a17      	cmp	r2, #23
 8007ab6:	d1d0      	bne.n	8007a5a <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007ab8:	2403      	movs	r4, #3
 8007aba:	e7f0      	b.n	8007a9e <SecureElementSetKey.part.0+0x56>
 8007abc:	20001270 	.word	0x20001270

08007ac0 <SecureElementSetDevEui>:

    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8007ac0:	b508      	push	{r3, lr}
    if( devEui == NULL )
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	b130      	cbz	r0, 8007ad4 <SecureElementSetDevEui+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8007ac6:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <SecureElementSetDevEui+0x18>)
 8007ac8:	2208      	movs	r2, #8
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	f00c fd9b 	bl	8014606 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8007ad0:	2000      	movs	r0, #0
}
 8007ad2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8007ad4:	2002      	movs	r0, #2
 8007ad6:	e7fc      	b.n	8007ad2 <SecureElementSetDevEui+0x12>
 8007ad8:	20001270 	.word	0x20001270

08007adc <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8007adc:	4b01      	ldr	r3, [pc, #4]	; (8007ae4 <SecureElementGetDevEui+0x8>)
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20001270 	.word	0x20001270

08007ae8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8007ae8:	b508      	push	{r3, lr}
    if( joinEui == NULL )
 8007aea:	4601      	mov	r1, r0
 8007aec:	b138      	cbz	r0, 8007afe <SecureElementSetJoinEui+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <SecureElementSetJoinEui+0x1c>)
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	2208      	movs	r2, #8
 8007af4:	4410      	add	r0, r2
 8007af6:	f00c fd86 	bl	8014606 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8007afa:	2000      	movs	r0, #0
}
 8007afc:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8007afe:	2002      	movs	r0, #2
 8007b00:	e7fc      	b.n	8007afc <SecureElementSetJoinEui+0x14>
 8007b02:	bf00      	nop
 8007b04:	20001270 	.word	0x20001270

08007b08 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8007b08:	4b01      	ldr	r3, [pc, #4]	; (8007b10 <SecureElementGetJoinEui+0x8>)
 8007b0a:	6818      	ldr	r0, [r3, #0]
}
 8007b0c:	3008      	adds	r0, #8
 8007b0e:	4770      	bx	lr
 8007b10:	20001270 	.word	0x20001270

08007b14 <SecureElementSetPin>:

SecureElementStatus_t SecureElementSetPin( uint8_t* pin )
{
 8007b14:	b508      	push	{r3, lr}
    if( pin == NULL )
 8007b16:	4601      	mov	r1, r0
 8007b18:	b138      	cbz	r0, 8007b2a <SecureElementSetPin+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <SecureElementSetPin+0x1c>)
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	2204      	movs	r2, #4
 8007b20:	3010      	adds	r0, #16
 8007b22:	f00c fd70 	bl	8014606 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8007b26:	2000      	movs	r0, #0
}
 8007b28:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8007b2a:	2002      	movs	r0, #2
 8007b2c:	e7fc      	b.n	8007b28 <SecureElementSetPin+0x14>
 8007b2e:	bf00      	nop
 8007b30:	20001270 	.word	0x20001270

08007b34 <SecureElementGetPin>:

uint8_t* SecureElementGetPin( void )
{
    return SeNvm->Pin;
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <SecureElementGetPin+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
}
 8007b38:	3010      	adds	r0, #16
 8007b3a:	4770      	bx	lr
 8007b3c:	20001270 	.word	0x20001270

08007b40 <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007b40:	4a06      	ldr	r2, [pc, #24]	; (8007b5c <OnRadioTxTimeout+0x1c>)
 8007b42:	7813      	ldrb	r3, [r2, #0]
 8007b44:	f043 0308 	orr.w	r3, r3, #8
 8007b48:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b4a:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <OnRadioTxTimeout+0x20>)
 8007b4c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007b50:	b113      	cbz	r3, 8007b58 <OnRadioTxTimeout+0x18>
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	b103      	cbz	r3, 8007b58 <OnRadioTxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007b56:	4718      	bx	r3
    }
}
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20001274 	.word	0x20001274
 8007b60:	20001278 	.word	0x20001278

08007b64 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8007b64:	4a06      	ldr	r2, [pc, #24]	; (8007b80 <OnRadioRxError+0x1c>)
 8007b66:	7813      	ldrb	r3, [r2, #0]
 8007b68:	f043 0304 	orr.w	r3, r3, #4
 8007b6c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <OnRadioRxError+0x20>)
 8007b70:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007b74:	b113      	cbz	r3, 8007b7c <OnRadioRxError+0x18>
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	b103      	cbz	r3, 8007b7c <OnRadioRxError+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007b7a:	4718      	bx	r3
    }
}
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	20001274 	.word	0x20001274
 8007b84:	20001278 	.word	0x20001278

08007b88 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8007b88:	4a06      	ldr	r2, [pc, #24]	; (8007ba4 <OnRadioRxTimeout+0x1c>)
 8007b8a:	7813      	ldrb	r3, [r2, #0]
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b92:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <OnRadioRxTimeout+0x20>)
 8007b94:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007b98:	b113      	cbz	r3, 8007ba0 <OnRadioRxTimeout+0x18>
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	b103      	cbz	r3, 8007ba0 <OnRadioRxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007b9e:	4718      	bx	r3
    }
}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20001274 	.word	0x20001274
 8007ba8:	20001278 	.word	0x20001278

08007bac <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007bac:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <UpdateRxSlotIdleState+0x14>)
 8007bae:	4a05      	ldr	r2, [pc, #20]	; (8007bc4 <UpdateRxSlotIdleState+0x18>)
 8007bb0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	bf18      	it	ne
 8007bb8:	2306      	movne	r3, #6
 8007bba:	f882 348c 	strb.w	r3, [r2, #1164]	; 0x48c
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8007bbe:	4770      	bx	lr
 8007bc0:	20001790 	.word	0x20001790
 8007bc4:	20001278 	.word	0x20001278

08007bc8 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8007bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <GetMaxAppPayloadWithoutFOptsLength+0x28>)
    getPhy.Datarate = datarate;
 8007bcc:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007bd0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8007bd4:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007bd8:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007bdc:	220d      	movs	r2, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007bde:	a902      	add	r1, sp, #8
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007be0:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007be4:	f00d fe25 	bl	8015832 <RegionGetPhyParam>

    return phyParam.Value;
}
 8007be8:	b2c0      	uxtb	r0, r0
 8007bea:	b005      	add	sp, #20
 8007bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bf0:	20001790 	.word	0x20001790

08007bf4 <OnRetransmitTimeoutTimerEvent>:
{
 8007bf4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8007bf6:	4c0a      	ldr	r4, [pc, #40]	; (8007c20 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8007bf8:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8007bfc:	f7fe fd9a 	bl	8006734 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8007c00:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8007c04:	b113      	cbz	r3, 8007c0c <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007c0c:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8007c10:	b123      	cbz	r3, 8007c1c <OnRetransmitTimeoutTimerEvent+0x28>
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	b113      	cbz	r3, 8007c1c <OnRetransmitTimeoutTimerEvent+0x28>
}
 8007c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007c1a:	4718      	bx	r3
}
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	20001278 	.word	0x20001278

08007c24 <PrepareRxDoneAbort>:
{
 8007c24:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007c26:	4c0c      	ldr	r4, [pc, #48]	; (8007c58 <PrepareRxDoneAbort+0x34>)
 8007c28:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c30:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8007c34:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8007c38:	b113      	cbz	r3, 8007c40 <PrepareRxDoneAbort+0x1c>
        OnRetransmitTimeoutTimerEvent( NULL );
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	f7ff ffda 	bl	8007bf4 <OnRetransmitTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8007c40:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007c44:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007c48:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 8007c4c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
}
 8007c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 8007c54:	f7ff bfaa 	b.w	8007bac <UpdateRxSlotIdleState>
 8007c58:	20001278 	.word	0x20001278

08007c5c <HandleRadioRxErrorTimeout>:
{
 8007c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007c60:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007d10 <HandleRadioRxErrorTimeout+0xb4>
 8007c64:	f898 3184 	ldrb.w	r3, [r8, #388]	; 0x184
 8007c68:	2b02      	cmp	r3, #2
{
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	460d      	mov	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007c6e:	d002      	beq.n	8007c76 <HandleRadioRxErrorTimeout+0x1a>
        Radio.Sleep( );
 8007c70:	4b28      	ldr	r3, [pc, #160]	; (8007d14 <HandleRadioRxErrorTimeout+0xb8>)
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007c76:	f00d fb97 	bl	80153a8 <LoRaMacClassBIsBeaconExpected>
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	b128      	cbz	r0, 8007c8a <HandleRadioRxErrorTimeout+0x2e>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8007c7e:	2002      	movs	r0, #2
 8007c80:	f00d fb88 	bl	8015394 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8007c84:	2000      	movs	r0, #0
 8007c86:	f00d fb8a 	bl	801539e <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007c8a:	f898 3184 	ldrb.w	r3, [r8, #388]	; 0x184
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d117      	bne.n	8007cc2 <HandleRadioRxErrorTimeout+0x66>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007c92:	f00d fb8b 	bl	80153ac <LoRaMacClassBIsPingExpected>
 8007c96:	4607      	mov	r7, r0
 8007c98:	b130      	cbz	r0, 8007ca8 <HandleRadioRxErrorTimeout+0x4c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f00d fb7b 	bl	8015396 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	f00d fb7d 	bl	80153a0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007ca6:	463c      	mov	r4, r7
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007ca8:	f00d fb82 	bl	80153b0 <LoRaMacClassBIsMulticastExpected>
 8007cac:	b148      	cbz	r0, 8007cc2 <HandleRadioRxErrorTimeout+0x66>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f00d fb72 	bl	8015398 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f00d fb74 	bl	80153a2 <LoRaMacClassBMulticastSlotTimerEvent>
}
 8007cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8007cbe:	f7ff bf75 	b.w	8007bac <UpdateRxSlotIdleState>
    if( classBRx == false )
 8007cc2:	2c00      	cmp	r4, #0
 8007cc4:	d1f9      	bne.n	8007cba <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 8007cc6:	4c14      	ldr	r4, [pc, #80]	; (8007d18 <HandleRadioRxErrorTimeout+0xbc>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007cc8:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
            if( MacCtx.NodeAckRequested == true )
 8007ccc:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007cd0:	b9ba      	cbnz	r2, 8007d02 <HandleRadioRxErrorTimeout+0xa6>
            if( MacCtx.NodeAckRequested == true )
 8007cd2:	b10b      	cbz	r3, 8007cd8 <HandleRadioRxErrorTimeout+0x7c>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007cd4:	f884 6445 	strb.w	r6, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f002 fe13 	bl	800a904 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8007cde:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8007ce2:	f00c fdac 	bl	801483e <TimerGetElapsedTime>
 8007ce6:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8007cea:	4298      	cmp	r0, r3
 8007cec:	d3e5      	bcc.n	8007cba <HandleRadioRxErrorTimeout+0x5e>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8007cee:	480b      	ldr	r0, [pc, #44]	; (8007d1c <HandleRadioRxErrorTimeout+0xc0>)
 8007cf0:	f7fe fd20 	bl	8006734 <TimerStop>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8007cf4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007cf8:	f043 0320 	orr.w	r3, r3, #32
 8007cfc:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
 8007d00:	e7db      	b.n	8007cba <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 8007d02:	b10b      	cbz	r3, 8007d08 <HandleRadioRxErrorTimeout+0xac>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8007d04:	f884 5445 	strb.w	r5, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f002 fdfb 	bl	800a904 <LoRaMacConfirmQueueSetStatusCmn>
 8007d0e:	e7f1      	b.n	8007cf4 <HandleRadioRxErrorTimeout+0x98>
 8007d10:	20001790 	.word	0x20001790
 8007d14:	0801a484 	.word	0x0801a484
 8007d18:	20001278 	.word	0x20001278
 8007d1c:	20001618 	.word	0x20001618

08007d20 <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 8007d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007d22:	4c15      	ldr	r4, [pc, #84]	; (8007d78 <OpenContinuousRxCWindow+0x58>)
 8007d24:	4d15      	ldr	r5, [pc, #84]	; (8007d7c <OpenContinuousRxCWindow+0x5c>)
 8007d26:	f504 767a 	add.w	r6, r4, #1000	; 0x3e8
 8007d2a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007d2c:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
 8007d30:	f995 107c 	ldrsb.w	r1, [r5, #124]	; 0x7c
 8007d34:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 8007d38:	9600      	str	r6, [sp, #0]
 8007d3a:	f00d fda6 	bl	801588a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	f884 33fa 	strb.w	r3, [r4, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007d44:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
 8007d48:	f884 33fb 	strb.w	r3, [r4, #1019]	; 0x3fb
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007d4c:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007d50:	2301      	movs	r3, #1
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007d52:	f204 4224 	addw	r2, r4, #1060	; 0x424
 8007d56:	4631      	mov	r1, r6
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007d58:	f884 33f9 	strb.w	r3, [r4, #1017]	; 0x3f9
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007d5c:	f00d fda2 	bl	80158a4 <RegionRxConfig>
 8007d60:	b138      	cbz	r0, 8007d72 <OpenContinuousRxCWindow+0x52>
    {
        Radio.Rx( 0 ); // Continuous mode
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <OpenContinuousRxCWindow+0x60>)
 8007d64:	2000      	movs	r0, #0
 8007d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d68:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8007d6a:	f894 33fa 	ldrb.w	r3, [r4, #1018]	; 0x3fa
 8007d6e:	f884 348c 	strb.w	r3, [r4, #1164]	; 0x48c
    }
}
 8007d72:	b002      	add	sp, #8
 8007d74:	bd70      	pop	{r4, r5, r6, pc}
 8007d76:	bf00      	nop
 8007d78:	20001278 	.word	0x20001278
 8007d7c:	20001790 	.word	0x20001790
 8007d80:	0801a484 	.word	0x0801a484

08007d84 <SwitchClass>:
{
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 8007d86:	4d33      	ldr	r5, [pc, #204]	; (8007e54 <SwitchClass+0xd0>)
 8007d88:	f895 4184 	ldrb.w	r4, [r5, #388]	; 0x184
 8007d8c:	2c01      	cmp	r4, #1
{
 8007d8e:	4606      	mov	r6, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8007d90:	d04f      	beq.n	8007e32 <SwitchClass+0xae>
 8007d92:	2c02      	cmp	r4, #2
 8007d94:	d055      	beq.n	8007e42 <SwitchClass+0xbe>
 8007d96:	b934      	cbnz	r4, 8007da6 <SwitchClass+0x22>
            if( deviceClass == CLASS_A )
 8007d98:	b938      	cbnz	r0, 8007daa <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8007d9a:	e9d5 011c 	ldrd	r0, r1, [r5, #112]	; 0x70
 8007d9e:	f105 0378 	add.w	r3, r5, #120	; 0x78
 8007da2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007da6:	2403      	movs	r4, #3
 8007da8:	e03b      	b.n	8007e22 <SwitchClass+0x9e>
            if( deviceClass == CLASS_B )
 8007daa:	2801      	cmp	r0, #1
 8007dac:	d041      	beq.n	8007e32 <SwitchClass+0xae>
            if( deviceClass == CLASS_C )
 8007dae:	2802      	cmp	r0, #2
 8007db0:	d1f9      	bne.n	8007da6 <SwitchClass+0x22>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007db2:	4f29      	ldr	r7, [pc, #164]	; (8007e58 <SwitchClass+0xd4>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007db4:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007db8:	f507 7e75 	add.w	lr, r7, #980	; 0x3d4
 8007dbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007dc0:	f507 7c7a 	add.w	ip, r7, #1000	; 0x3e8
 8007dc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007dc8:	f8de 3000 	ldr.w	r3, [lr]
 8007dcc:	f8cc 3000 	str.w	r3, [ip]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	f887 63fa 	strb.w	r6, [r7, #1018]	; 0x3fa
 8007dd6:	4623      	mov	r3, r4
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8007dd8:	f892 10d6 	ldrb.w	r1, [r2, #214]	; 0xd6
 8007ddc:	b319      	cbz	r1, 8007e26 <SwitchClass+0xa2>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007dde:	222c      	movs	r2, #44	; 0x2c
 8007de0:	fb02 5303 	mla	r3, r2, r3, r5
 8007de4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007de8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007dec:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007df0:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8007df4:	f887 33e8 	strb.w	r3, [r7, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007df8:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
 8007dfc:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007e00:	2303      	movs	r3, #3
 8007e02:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007e06:	2301      	movs	r3, #1
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007e08:	67aa      	str	r2, [r5, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8007e0a:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007e0e:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
                MacCtx.NodeAckRequested = false;
 8007e12:	2300      	movs	r3, #0
 8007e14:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
                Radio.Sleep( );
 8007e18:	4b10      	ldr	r3, [pc, #64]	; (8007e5c <SwitchClass+0xd8>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8007e1e:	f7ff ff7f 	bl	8007d20 <OpenContinuousRxCWindow>
}
 8007e22:	4620      	mov	r0, r4
 8007e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007e26:	3301      	adds	r3, #1
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8007e2e:	d1d3      	bne.n	8007dd8 <SwitchClass+0x54>
 8007e30:	e7ef      	b.n	8007e12 <SwitchClass+0x8e>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8007e32:	f00d fac4 	bl	80153be <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8007e36:	4604      	mov	r4, r0
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d1f2      	bne.n	8007e22 <SwitchClass+0x9e>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007e3c:	f885 6184 	strb.w	r6, [r5, #388]	; 0x184
 8007e40:	e7ef      	b.n	8007e22 <SwitchClass+0x9e>
            if( deviceClass == CLASS_A )
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d1af      	bne.n	8007da6 <SwitchClass+0x22>
                Radio.Sleep( );
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <SwitchClass+0xd8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8007e48:	f885 0184 	strb.w	r0, [r5, #388]	; 0x184
                Radio.Sleep( );
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8007e50:	4634      	mov	r4, r6
 8007e52:	e7e6      	b.n	8007e22 <SwitchClass+0x9e>
 8007e54:	20001790 	.word	0x20001790
 8007e58:	20001278 	.word	0x20001278
 8007e5c:	0801a484 	.word	0x0801a484

08007e60 <OnRadioRxDone>:
{
 8007e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e64:	4616      	mov	r6, r2
 8007e66:	461d      	mov	r5, r3
 8007e68:	4680      	mov	r8, r0
 8007e6a:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007e6c:	f00c fce0 	bl	8014830 <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8007e70:	4a0b      	ldr	r2, [pc, #44]	; (8007ea0 <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007e72:	4c0c      	ldr	r4, [pc, #48]	; (8007ea4 <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8007e74:	7813      	ldrb	r3, [r2, #0]
    RxDoneParams.Size = size;
 8007e76:	8127      	strh	r7, [r4, #8]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8007e78:	f023 0311 	bic.w	r3, r3, #17
 8007e7c:	f043 0311 	orr.w	r3, r3, #17
 8007e80:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <OnRadioRxDone+0x48>)
    RxDoneParams.Rssi = rssi;
 8007e84:	8166      	strh	r6, [r4, #10]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007e86:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
    RxDoneParams.Snr = snr;
 8007e8a:	7325      	strb	r5, [r4, #12]
    RxDoneParams.Payload = payload;
 8007e8c:	e9c4 0800 	strd	r0, r8, [r4]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007e90:	b123      	cbz	r3, 8007e9c <OnRadioRxDone+0x3c>
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	b113      	cbz	r3, 8007e9c <OnRadioRxDone+0x3c>
}
 8007e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007e9a:	4718      	bx	r3
}
 8007e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea0:	20001274 	.word	0x20001274
 8007ea4:	20001e94 	.word	0x20001e94
 8007ea8:	20001278 	.word	0x20001278

08007eac <OnRadioTxDone>:
{
 8007eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007eae:	f00c fcbf 	bl	8014830 <TimerGetCurrentTime>
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <OnRadioTxDone+0x40>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007eb4:	4d0e      	ldr	r5, [pc, #56]	; (8007ef0 <OnRadioTxDone+0x44>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007eb6:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007eb8:	466c      	mov	r4, sp
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f00c fc15 	bl	80146ea <SysTimeGet>
 8007ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8007ec4:	4a0b      	ldr	r2, [pc, #44]	; (8007ef4 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007ec6:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8007eca:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8007ece:	7813      	ldrb	r3, [r2, #0]
 8007ed0:	f043 0320 	orr.w	r3, r3, #32
 8007ed4:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007ed6:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8007eda:	b12b      	cbz	r3, 8007ee8 <OnRadioTxDone+0x3c>
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	b11b      	cbz	r3, 8007ee8 <OnRadioTxDone+0x3c>
}
 8007ee0:	b003      	add	sp, #12
 8007ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007ee6:	4718      	bx	r3
}
 8007ee8:	b003      	add	sp, #12
 8007eea:	bd30      	pop	{r4, r5, pc}
 8007eec:	20001ea4 	.word	0x20001ea4
 8007ef0:	20001278 	.word	0x20001278
 8007ef4:	20001274 	.word	0x20001274

08007ef8 <ResetMacParameters>:
{
 8007ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007efc:	4c46      	ldr	r4, [pc, #280]	; (8008018 <ResetMacParameters+0x120>)
    MacCtx.ResponseTimeoutStartTime = 0;
 8007efe:	4d47      	ldr	r5, [pc, #284]	; (800801c <ResetMacParameters+0x124>)
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007f00:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8007f04:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007f08:	e9d4 012b 	ldrd	r0, r1, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007f0c:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8007f10:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007f14:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8007f18:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007f1c:	e9d4 012d 	ldrd	r0, r1, [r4, #180]	; 0xb4
 8007f20:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8007f24:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8007f28:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
 8007f2c:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007f30:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8007f34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
{
 8007f38:	b090      	sub	sp, #64	; 0x40
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007f3a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8007f3e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007f42:	f504 7351 	add.w	r3, r4, #836	; 0x344
 8007f46:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007f48:	f504 7356 	add.w	r3, r4, #856	; 0x358
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007f4c:	2600      	movs	r6, #0
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007f4e:	f04f 0801 	mov.w	r8, #1
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007f52:	9304      	str	r3, [sp, #16]
    params.Bands = &RegionBands;
 8007f54:	4b32      	ldr	r3, [pc, #200]	; (8008020 <ResetMacParameters+0x128>)
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007f56:	f884 619c 	strb.w	r6, [r4, #412]	; 0x19c
    Nvm.MacGroup1.AdrAckCounter = 0;
 8007f5a:	6366      	str	r6, [r4, #52]	; 0x34
    Nvm.MacGroup2.MaxDCycle = 0;
 8007f5c:	f884 6187 	strb.w	r6, [r4, #391]	; 0x187
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007f60:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
    Nvm.MacGroup1.SrvAckRequested = false;
 8007f64:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8007f68:	f884 6189 	strb.w	r6, [r4, #393]	; 0x189
    Nvm.MacGroup2.DownlinkReceived = false;
 8007f6c:	f884 618a 	strb.w	r6, [r4, #394]	; 0x18a
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007f70:	a903      	add	r1, sp, #12
    MacCtx.ResponseTimeoutStartTime = 0;
 8007f72:	f8c5 6494 	str.w	r6, [r5, #1172]	; 0x494
    MacCtx.ChannelsNbTransCounter = 0;
 8007f76:	f8a5 6418 	strh.w	r6, [r5, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8007f7a:	f885 641a 	strb.w	r6, [r5, #1050]	; 0x41a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007f7e:	f88d 8018 	strb.w	r8, [sp, #24]
    params.Bands = &RegionBands;
 8007f82:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007f84:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8007f88:	f00d fc63 	bl	8015852 <RegionInitDefaults>
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007f8c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007f8e:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007f92:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8007f96:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007f9a:	f885 63d4 	strb.w	r6, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007f9e:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
 8007fa2:	f885 33e7 	strb.w	r3, [r5, #999]	; 0x3e7
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007fa6:	f505 7775 	add.w	r7, r5, #980	; 0x3d4
 8007faa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007fac:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 8007fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007fb2:	f885 63e5 	strb.w	r6, [r5, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8007fb6:	f885 83e6 	strb.w	r8, [r5, #998]	; 0x3e6
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( MacCtx.MacCallbacks != NULL )
 8007fc4:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
    MacCtx.Channel = 0;
 8007fc8:	f885 641b 	strb.w	r6, [r5, #1051]	; 0x41b
    classBCallbacks.MacProcessNotify = NULL;
 8007fcc:	e9cd 6601 	strd	r6, r6, [sp, #4]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007fd0:	f885 83f9 	strb.w	r8, [r5, #1017]	; 0x3f9
    if( MacCtx.MacCallbacks != NULL )
 8007fd4:	b11b      	cbz	r3, 8007fde <ResetMacParameters+0xe6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007fd6:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007fd8:	68db      	ldr	r3, [r3, #12]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007fda:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007fdc:	9302      	str	r3, [sp, #8]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <ResetMacParameters+0x12c>)
 8007fe0:	9307      	str	r3, [sp, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007fe2:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
 8007fe6:	9208      	str	r2, [sp, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007fe8:	f1a3 0214 	sub.w	r2, r3, #20
 8007fec:	9209      	str	r2, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8007fee:	4a0e      	ldr	r2, [pc, #56]	; (8008028 <ResetMacParameters+0x130>)
 8007ff0:	920b      	str	r2, [sp, #44]	; 0x2c
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8007ff2:	3321      	adds	r3, #33	; 0x21
 8007ff4:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8007ff6:	f1a2 0384 	sub.w	r3, r2, #132	; 0x84
 8007ffa:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8007ffc:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8008000:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008002:	a901      	add	r1, sp, #4
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8008004:	1d13      	adds	r3, r2, #4
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008006:	a807      	add	r0, sp, #28
 8008008:	f202 6204 	addw	r2, r2, #1540	; 0x604
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800800c:	930e      	str	r3, [sp, #56]	; 0x38
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800800e:	f00d f9c0 	bl	8015392 <LoRaMacClassBInit>
}
 8008012:	b010      	add	sp, #64	; 0x40
 8008014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008018:	20001790 	.word	0x20001790
 800801c:	20001278 	.word	0x20001278
 8008020:	20001e7c 	.word	0x20001e7c
 8008024:	200016e4 	.word	0x200016e4
 8008028:	20001860 	.word	0x20001860

0800802c <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Radio.Standby( );
 800802e:	4f0b      	ldr	r7, [pc, #44]	; (800805c <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008030:	4d0b      	ldr	r5, [pc, #44]	; (8008060 <RxWindowSetup.constprop.0+0x34>)
 8008032:	4e0c      	ldr	r6, [pc, #48]	; (8008064 <RxWindowSetup.constprop.0+0x38>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8008034:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8008036:	f7fe fb7d 	bl	8006734 <TimerStop>
    Radio.Standby( );
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800803e:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
 8008042:	f205 4224 	addw	r2, r5, #1060	; 0x424
 8008046:	4621      	mov	r1, r4
 8008048:	f00d fc2c 	bl	80158a4 <RegionRxConfig>
 800804c:	b128      	cbz	r0, 800805a <RxWindowSetup.constprop.0+0x2e>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800804e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008050:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8008052:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8008054:	7ca3      	ldrb	r3, [r4, #18]
 8008056:	f885 348c 	strb.w	r3, [r5, #1164]	; 0x48c
}
 800805a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805c:	0801a484 	.word	0x0801a484
 8008060:	20001278 	.word	0x20001278
 8008064:	20001790 	.word	0x20001790

08008068 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8008068:	480e      	ldr	r0, [pc, #56]	; (80080a4 <OnRxWindow1TimerEvent+0x3c>)
 800806a:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800806e:	f880 33c0 	strb.w	r3, [r0, #960]	; 0x3c0
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8008072:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <OnRxWindow1TimerEvent+0x40>)
 8008074:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 8008078:	f880 23c3 	strb.w	r2, [r0, #963]	; 0x3c3
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800807c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8008080:	f880 23d0 	strb.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8008084:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8008088:	f880 33d3 	strb.w	r3, [r0, #979]	; 0x3d3
    MacCtx.RxWindow1Config.RxContinuous = false;
 800808c:	2200      	movs	r2, #0
 800808e:	f880 23d1 	strb.w	r2, [r0, #977]	; 0x3d1
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8008092:	f880 23d2 	strb.w	r2, [r0, #978]	; 0x3d2
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008096:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 800809a:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800809e:	f7ff bfc5 	b.w	800802c <RxWindowSetup.constprop.0>
 80080a2:	bf00      	nop
 80080a4:	20001278 	.word	0x20001278
 80080a8:	20001790 	.word	0x20001790

080080ac <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80080ac:	4810      	ldr	r0, [pc, #64]	; (80080f0 <OnRxWindow2TimerEvent+0x44>)
 80080ae:	f890 348c 	ldrb.w	r3, [r0, #1164]	; 0x48c
 80080b2:	b1db      	cbz	r3, 80080ec <OnRxWindow2TimerEvent+0x40>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80080b4:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 80080b8:	f880 33d4 	strb.w	r3, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80080bc:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <OnRxWindow2TimerEvent+0x48>)
 80080be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080c0:	f8c0 23d8 	str.w	r2, [r0, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80080c4:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80080c8:	f880 23e4 	strb.w	r2, [r0, #996]	; 0x3e4
    MacCtx.RxWindow2Config.RxContinuous = false;
 80080cc:	2200      	movs	r2, #0
 80080ce:	f880 23e5 	strb.w	r2, [r0, #997]	; 0x3e5
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80080d2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80080d6:	f880 33e7 	strb.w	r3, [r0, #999]	; 0x3e7
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80080da:	2201      	movs	r2, #1
 80080dc:	f880 23e6 	strb.w	r2, [r0, #998]	; 0x3e6
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80080e0:	f500 7175 	add.w	r1, r0, #980	; 0x3d4
 80080e4:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 80080e8:	f7ff bfa0 	b.w	800802c <RxWindowSetup.constprop.0>
}
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20001278 	.word	0x20001278
 80080f4:	20001790 	.word	0x20001790

080080f8 <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 80080fe:	f04f 0800 	mov.w	r8, #0
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8008102:	2b01      	cmp	r3, #1
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8008104:	4605      	mov	r5, r0
 8008106:	460f      	mov	r7, r1
 8008108:	9202      	str	r2, [sp, #8]
    uint8_t status = 0;
 800810a:	f88d 8015 	strb.w	r8, [sp, #21]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800810e:	f8ad 8018 	strh.w	r8, [sp, #24]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8008112:	d803      	bhi.n	800811c <ProcessMacCommands.constprop.0+0x24>
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008114:	4ec3      	ldr	r6, [pc, #780]	; (8008424 <ProcessMacCommands.constprop.0+0x32c>)
 8008116:	46c1      	mov	r9, r8
    while( macIndex < commandsSize )
 8008118:	45b9      	cmp	r9, r7
 800811a:	d302      	bcc.n	8008122 <ProcessMacCommands.constprop.0+0x2a>
}
 800811c:	b011      	add	sp, #68	; 0x44
 800811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8008122:	f815 0009 	ldrb.w	r0, [r5, r9]
 8008126:	f002 fb5b 	bl	800a7e0 <LoRaMacCommandsGetCmdSize>
 800812a:	4448      	add	r0, r9
 800812c:	42b8      	cmp	r0, r7
 800812e:	dcf5      	bgt.n	800811c <ProcessMacCommands.constprop.0+0x24>
        switch( payload[macIndex++] )
 8008130:	f815 3009 	ldrb.w	r3, [r5, r9]
 8008134:	f109 0401 	add.w	r4, r9, #1
 8008138:	3b02      	subs	r3, #2
 800813a:	b2e4      	uxtb	r4, r4
 800813c:	2b11      	cmp	r3, #17
 800813e:	d8ed      	bhi.n	800811c <ProcessMacCommands.constprop.0+0x24>
 8008140:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <ProcessMacCommands.constprop.0+0x50>)
 8008142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008146:	bf00      	nop
 8008148:	08008191 	.word	0x08008191
 800814c:	080081c3 	.word	0x080081c3
 8008150:	080082c7 	.word	0x080082c7
 8008154:	080082ef 	.word	0x080082ef
 8008158:	08008385 	.word	0x08008385
 800815c:	080083b1 	.word	0x080083b1
 8008160:	0800842d 	.word	0x0800842d
 8008164:	08008469 	.word	0x08008469
 8008168:	080084f5 	.word	0x080084f5
 800816c:	0800811d 	.word	0x0800811d
 8008170:	0800811d 	.word	0x0800811d
 8008174:	08008553 	.word	0x08008553
 8008178:	0800811d 	.word	0x0800811d
 800817c:	0800811d 	.word	0x0800811d
 8008180:	08008611 	.word	0x08008611
 8008184:	08008639 	.word	0x08008639
 8008188:	0800867d 	.word	0x0800867d
 800818c:	080086bb 	.word	0x080086bb
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008190:	2004      	movs	r0, #4
 8008192:	f002 fbd1 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 8008196:	b190      	cbz	r0, 80081be <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008198:	2104      	movs	r1, #4
 800819a:	2000      	movs	r0, #0
 800819c:	f002 fb90 	bl	800a8c0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80081a0:	5d2a      	ldrb	r2, [r5, r4]
 80081a2:	4ba1      	ldr	r3, [pc, #644]	; (8008428 <ProcessMacCommands.constprop.0+0x330>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80081a4:	f109 0403 	add.w	r4, r9, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80081a8:	f109 0902 	add.w	r9, r9, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80081ac:	fa5f f989 	uxtb.w	r9, r9
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80081b0:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80081b4:	f815 2009 	ldrb.w	r2, [r5, r9]
 80081b8:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 80081bc:	b2e4      	uxtb	r4, r4
                uint8_t eirpDwellTime = payload[macIndex++];
 80081be:	46a1      	mov	r9, r4
 80081c0:	e7aa      	b.n	8008118 <ProcessMacCommands.constprop.0+0x20>
                int8_t linkAdrDatarate = DR_0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 80081c8:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 80081cc:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 80081d0:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 80081d4:	f1b8 0f00 	cmp.w	r8, #0
 80081d8:	d170      	bne.n	80082bc <ProcessMacCommands.constprop.0+0x1c4>
                            linkAdrReq.PayloadSize = 5;
 80081da:	f04f 0805 	mov.w	r8, #5
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80081de:	f896 2080 	ldrb.w	r2, [r6, #128]	; 0x80
 80081e2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80081e6:	1e63      	subs	r3, r4, #1
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80081e8:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
 80081ec:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80081f0:	442b      	add	r3, r5
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80081f2:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80081f6:	930d      	str	r3, [sp, #52]	; 0x34
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80081f8:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80081fc:	f896 3186 	ldrb.w	r3, [r6, #390]	; 0x186
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008200:	f896 206c 	ldrb.w	r2, [r6, #108]	; 0x6c
 8008204:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008208:	f8d6 2198 	ldr.w	r2, [r6, #408]	; 0x198
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800820c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008210:	920c      	str	r2, [sp, #48]	; 0x30
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008212:	b373      	cbz	r3, 8008272 <ProcessMacCommands.constprop.0+0x17a>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008214:	1c7b      	adds	r3, r7, #1
 8008216:	1b1b      	subs	r3, r3, r4
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800821e:	ab08      	add	r3, sp, #32
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	ab07      	add	r3, sp, #28
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
 800822a:	f10d 0317 	add.w	r3, sp, #23
 800822e:	f10d 0216 	add.w	r2, sp, #22
 8008232:	a90c      	add	r1, sp, #48	; 0x30
 8008234:	f00d fb4c 	bl	80158d0 <RegionLinkAdrReq>
 8008238:	f88d 0015 	strb.w	r0, [sp, #21]
                        if( ( status & 0x07 ) == 0x07 )
 800823c:	f000 0007 	and.w	r0, r0, #7
 8008240:	2807      	cmp	r0, #7
 8008242:	d113      	bne.n	800826c <ProcessMacCommands.constprop.0+0x174>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8008244:	f996 2045 	ldrsb.w	r2, [r6, #69]	; 0x45
 8008248:	f99d 3016 	ldrsb.w	r3, [sp, #22]
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800824c:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8008250:	429a      	cmp	r2, r3
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8008252:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008256:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800825a:	bfb8      	it	lt
 800825c:	2201      	movlt	r2, #1
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800825e:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8008262:	bfb8      	it	lt
 8008264:	f886 2189 	strblt.w	r2, [r6, #393]	; 0x189
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008268:	f886 306c 	strb.w	r3, [r6, #108]	; 0x6c
                            linkAdrReq.PayloadSize = 5;
 800826c:	f04f 0900 	mov.w	r9, #0
 8008270:	e009      	b.n	8008286 <ProcessMacCommands.constprop.0+0x18e>
 8008272:	2305      	movs	r3, #5
 8008274:	e7d1      	b.n	800821a <ProcessMacCommands.constprop.0+0x122>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008276:	2201      	movs	r2, #1
 8008278:	f10d 0115 	add.w	r1, sp, #21
 800827c:	2003      	movs	r0, #3
 800827e:	f002 f9b9 	bl	800a5f4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008282:	f109 0901 	add.w	r9, r9, #1
 8008286:	fa5f f289 	uxtb.w	r2, r9
 800828a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800828e:	fbb3 f1f8 	udiv	r1, r3, r8
 8008292:	4291      	cmp	r1, r2
 8008294:	d8ef      	bhi.n	8008276 <ProcessMacCommands.constprop.0+0x17e>
                        macIndex += linkAdrNbBytesParsed - 1;
 8008296:	441c      	add	r4, r3
 8008298:	b2e4      	uxtb	r4, r4
 800829a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800829e:	fa5f f989 	uxtb.w	r9, r9
                        if( macIndex >= commandsSize )
 80082a2:	454f      	cmp	r7, r9
 80082a4:	d906      	bls.n	80082b4 <ProcessMacCommands.constprop.0+0x1bc>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80082a6:	f815 3009 	ldrb.w	r3, [r5, r9]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d097      	beq.n	80081de <ProcessMacCommands.constprop.0+0xe6>
                    if( macIndex < commandsSize )
 80082ae:	42a7      	cmp	r7, r4
 80082b0:	bf98      	it	ls
 80082b2:	46a1      	movls	r9, r4
                break;
 80082b4:	464c      	mov	r4, r9
 80082b6:	f04f 0801 	mov.w	r8, #1
 80082ba:	e780      	b.n	80081be <ProcessMacCommands.constprop.0+0xc6>
                    macIndex += 4;
 80082bc:	f109 0905 	add.w	r9, r9, #5
 80082c0:	fa5f f989 	uxtb.w	r9, r9
 80082c4:	e7f6      	b.n	80082b4 <ProcessMacCommands.constprop.0+0x1bc>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80082c6:	5d2b      	ldrb	r3, [r5, r4]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80082c8:	2201      	movs	r2, #1
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	f109 0902 	add.w	r9, r9, #2
 80082d2:	f886 3187 	strb.w	r3, [r6, #391]	; 0x187
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80082da:	fa5f f989 	uxtb.w	r9, r9
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80082de:	f8a6 318c 	strh.w	r3, [r6, #396]	; 0x18c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80082e2:	2200      	movs	r2, #0
 80082e4:	a906      	add	r1, sp, #24
 80082e6:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80082e8:	f002 f984 	bl	800a5f4 <LoRaMacCommandsAddCmd>
                break;
 80082ec:	e0ba      	b.n	8008464 <ProcessMacCommands.constprop.0+0x36c>
                status = 0x07;
 80082ee:	2307      	movs	r3, #7
 80082f0:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80082f4:	5d2b      	ldrb	r3, [r5, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80082f6:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80082fa:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80082fe:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008302:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008306:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800830a:	f109 0204 	add.w	r2, r9, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800830e:	f109 0303 	add.w	r3, r9, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008312:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008314:	b2d2      	uxtb	r2, r2
 8008316:	f109 0405 	add.w	r4, r9, #5
                macIndex++;
 800831a:	f109 0902 	add.w	r9, r9, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800831e:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008320:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008322:	fa5f f989 	uxtb.w	r9, r9
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008326:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008328:	f815 2009 	ldrb.w	r2, [r5, r9]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800832c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008330:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8008332:	2264      	movs	r2, #100	; 0x64
 8008334:	4353      	muls	r3, r2
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008336:	a90c      	add	r1, sp, #48	; 0x30
                rxParamSetupReq.Frequency *= 100;
 8008338:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800833a:	f00d fad9 	bl	80158f0 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 800833e:	f000 0307 	and.w	r3, r0, #7
 8008342:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008344:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008346:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 800834a:	d10c      	bne.n	8008366 <ProcessMacCommands.constprop.0+0x26e>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800834c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8008350:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008354:	f886 307c 	strb.w	r3, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835a:	6733      	str	r3, [r6, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800835c:	67b3      	str	r3, [r6, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800835e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8008362:	f886 306d 	strb.w	r3, [r6, #109]	; 0x6d
                macCmdPayload[0] = status;
 8008366:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800836a:	2201      	movs	r2, #1
 800836c:	a906      	add	r1, sp, #24
 800836e:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008370:	f002 f940 	bl	800a5f4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008374:	4a2c      	ldr	r2, [pc, #176]	; (8008428 <ProcessMacCommands.constprop.0+0x330>)
 8008376:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 800837a:	f043 0310 	orr.w	r3, r3, #16
 800837e:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
}
 8008382:	e71c      	b.n	80081be <ProcessMacCommands.constprop.0+0xc6>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008384:	4b28      	ldr	r3, [pc, #160]	; (8008428 <ProcessMacCommands.constprop.0+0x330>)
 8008386:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800838a:	b17b      	cbz	r3, 80083ac <ProcessMacCommands.constprop.0+0x2b4>
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	b16b      	cbz	r3, 80083ac <ProcessMacCommands.constprop.0+0x2b4>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008390:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008392:	9b02      	ldr	r3, [sp, #8]
                macCmdPayload[0] = batteryLevel;
 8008394:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800839c:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80083a0:	2202      	movs	r2, #2
 80083a2:	a906      	add	r1, sp, #24
 80083a4:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80083a6:	f002 f925 	bl	800a5f4 <LoRaMacCommandsAddCmd>
                break;
 80083aa:	e708      	b.n	80081be <ProcessMacCommands.constprop.0+0xc6>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80083ac:	20ff      	movs	r0, #255	; 0xff
 80083ae:	e7f0      	b.n	8008392 <ProcessMacCommands.constprop.0+0x29a>
                status = 0x03;
 80083b0:	2303      	movs	r3, #3
 80083b2:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 80083b6:	5d2b      	ldrb	r3, [r5, r4]
 80083b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 80083bc:	ab0c      	add	r3, sp, #48	; 0x30
 80083be:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083c0:	f109 0204 	add.w	r2, r9, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80083c4:	f109 0303 	add.w	r3, r9, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083c8:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083ca:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80083cc:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083ce:	5cab      	ldrb	r3, [r5, r2]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80083d0:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                newChannelReq.ChannelId = payload[macIndex++];
 80083d4:	f109 0202 	add.w	r2, r9, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80083d8:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083da:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80083dc:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80083e2:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 80083e4:	f109 0406 	add.w	r4, r9, #6
                chParam.Frequency *= 100;
 80083e8:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80083ea:	f109 0905 	add.w	r9, r9, #5
                chParam.Frequency *= 100;
 80083ee:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 80083f0:	fa5f f989 	uxtb.w	r9, r9
                chParam.Frequency *= 100;
 80083f4:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	930d      	str	r3, [sp, #52]	; 0x34
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80083fa:	a908      	add	r1, sp, #32
                chParam.DrRange.Value = payload[macIndex++];
 80083fc:	f815 3009 	ldrb.w	r3, [r5, r9]
 8008400:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008404:	f00d fa7b 	bl	80158fe <RegionNewChannelReq>
 8008408:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 800840a:	2800      	cmp	r0, #0
                chParam.DrRange.Value = payload[macIndex++];
 800840c:	b2e4      	uxtb	r4, r4
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800840e:	f88d 3015 	strb.w	r3, [sp, #21]
                if( ( int8_t )status >= 0 )
 8008412:	f6ff aed4 	blt.w	80081be <ProcessMacCommands.constprop.0+0xc6>
                    macCmdPayload[0] = status;
 8008416:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800841a:	2201      	movs	r2, #1
 800841c:	a906      	add	r1, sp, #24
 800841e:	2007      	movs	r0, #7
 8008420:	e7c1      	b.n	80083a6 <ProcessMacCommands.constprop.0+0x2ae>
 8008422:	bf00      	nop
 8008424:	20001790 	.word	0x20001790
 8008428:	20001278 	.word	0x20001278
                uint8_t delay = payload[macIndex++] & 0x0F;
 800842c:	5d2b      	ldrb	r3, [r5, r4]
 800842e:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008432:	2b01      	cmp	r3, #1
 8008434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008438:	bf38      	it	cc
 800843a:	2301      	movcc	r3, #1
 800843c:	4353      	muls	r3, r2
 800843e:	65f3      	str	r3, [r6, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008440:	a906      	add	r1, sp, #24
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008442:	4413      	add	r3, r2
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008444:	2008      	movs	r0, #8
 8008446:	2200      	movs	r2, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008448:	6633      	str	r3, [r6, #96]	; 0x60
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800844a:	f002 f8d3 	bl	800a5f4 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800844e:	4aa9      	ldr	r2, [pc, #676]	; (80086f4 <ProcessMacCommands.constprop.0+0x5fc>)
 8008450:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008454:	f109 0902 	add.w	r9, r9, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008458:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 800845c:	fa5f f989 	uxtb.w	r9, r9
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008460:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008464:	464c      	mov	r4, r9
}
 8008466:	e6aa      	b.n	80081be <ProcessMacCommands.constprop.0+0xc6>
                uint8_t eirpDwellTime = payload[macIndex++];
 8008468:	5d2b      	ldrb	r3, [r5, r4]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800846a:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                txParamSetupReq.UplinkDwellTime = 0;
 800846e:	2200      	movs	r2, #0
 8008470:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008474:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 8008478:	bf18      	it	ne
 800847a:	2201      	movne	r2, #1
 800847c:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008480:	06da      	lsls	r2, r3, #27
                    txParamSetupReq.UplinkDwellTime = 1;
 8008482:	bf48      	it	mi
 8008484:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008486:	f003 030f 	and.w	r3, r3, #15
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800848a:	a907      	add	r1, sp, #28
                    txParamSetupReq.UplinkDwellTime = 1;
 800848c:	bf48      	it	mi
 800848e:	f88d 201c 	strbmi.w	r2, [sp, #28]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008492:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008496:	f00d fa39 	bl	801590c <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 800849a:	f109 0902 	add.w	r9, r9, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800849e:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 80084a0:	fa5f f989 	uxtb.w	r9, r9
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80084a4:	d0de      	beq.n	8008464 <ProcessMacCommands.constprop.0+0x36c>
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80084a6:	f89d 301d 	ldrb.w	r3, [sp, #29]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80084aa:	4a93      	ldr	r2, [pc, #588]	; (80086f8 <ProcessMacCommands.constprop.0+0x600>)
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80084ac:	f886 3081 	strb.w	r3, [r6, #129]	; 0x81
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80084b0:	f89d 301e 	ldrb.w	r3, [sp, #30]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80084b4:	f89d 401c 	ldrb.w	r4, [sp, #28]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80084b8:	5cd0      	ldrb	r0, [r2, r3]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80084ba:	f886 4080 	strb.w	r4, [r6, #128]	; 0x80
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80084be:	f7f8 fb8b 	bl	8000bd8 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80084c2:	2302      	movs	r3, #2
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80084c4:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80084c8:	a90c      	add	r1, sp, #48	; 0x30
 80084ca:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80084ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80084d2:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80084d6:	f00d f9ac 	bl	8015832 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80084da:	f996 3045 	ldrsb.w	r3, [r6, #69]	; 0x45
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80084de:	9008      	str	r0, [sp, #32]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80084e0:	b240      	sxtb	r0, r0
 80084e2:	4298      	cmp	r0, r3
 80084e4:	bfb8      	it	lt
 80084e6:	4618      	movlt	r0, r3
 80084e8:	f886 0045 	strb.w	r0, [r6, #69]	; 0x45
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80084ec:	2200      	movs	r2, #0
 80084ee:	a906      	add	r1, sp, #24
 80084f0:	2009      	movs	r0, #9
 80084f2:	e6f9      	b.n	80082e8 <ProcessMacCommands.constprop.0+0x1f0>
                status = 0x03;
 80084f4:	2303      	movs	r3, #3
 80084f6:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 80084fa:	5d2b      	ldrb	r3, [r5, r4]
 80084fc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008500:	f109 0204 	add.w	r2, r9, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008504:	f109 0303 	add.w	r3, r9, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008508:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	f109 0405 	add.w	r4, r9, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8008510:	f109 0902 	add.w	r9, r9, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008514:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008516:	5cab      	ldrb	r3, [r5, r2]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008518:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800851c:	fa5f f989 	uxtb.w	r9, r9
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008520:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008522:	f815 2009 	ldrb.w	r2, [r5, r9]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008526:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800852a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 800852c:	2264      	movs	r2, #100	; 0x64
 800852e:	4353      	muls	r3, r2
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008530:	a90c      	add	r1, sp, #48	; 0x30
                dlChannelReq.Rx1Frequency *= 100;
 8008532:	930d      	str	r3, [sp, #52]	; 0x34
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008534:	f00d f9f1 	bl	801591a <RegionDlChannelReq>
 8008538:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 800853a:	2800      	cmp	r0, #0
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800853c:	b2e4      	uxtb	r4, r4
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800853e:	f88d 3015 	strb.w	r3, [sp, #21]
                if( ( int8_t )status >= 0 )
 8008542:	f6ff ae3c 	blt.w	80081be <ProcessMacCommands.constprop.0+0xc6>
                    macCmdPayload[0] = status;
 8008546:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800854a:	2201      	movs	r2, #1
 800854c:	a906      	add	r1, sp, #24
 800854e:	200a      	movs	r0, #10
 8008550:	e70e      	b.n	8008370 <ProcessMacCommands.constprop.0+0x278>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008552:	2009      	movs	r0, #9
 8008554:	f002 f9f0 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 8008558:	f8df a198 	ldr.w	sl, [pc, #408]	; 80086f4 <ProcessMacCommands.constprop.0+0x5fc>
 800855c:	2800      	cmp	r0, #0
 800855e:	d054      	beq.n	800860a <ProcessMacCommands.constprop.0+0x512>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008560:	2109      	movs	r1, #9
 8008562:	2000      	movs	r0, #0
 8008564:	f002 f9ac 	bl	800a8c0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8008568:	2300      	movs	r3, #0
 800856a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800856e:	f109 0203 	add.w	r2, r9, #3
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008572:	f109 0302 	add.w	r3, r9, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008576:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008578:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800857a:	5ce9      	ldrb	r1, [r5, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800857c:	5cab      	ldrb	r3, [r5, r2]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800857e:	5d2a      	ldrb	r2, [r5, r4]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008586:	4313      	orrs	r3, r2
 8008588:	f109 0204 	add.w	r2, r9, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800858c:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800858e:	f109 0406 	add.w	r4, r9, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008592:	f109 0905 	add.w	r9, r9, #5
 8008596:	5caa      	ldrb	r2, [r5, r2]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008598:	fa5f f989 	uxtb.w	r9, r9
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800859c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80085a0:	f815 2009 	ldrb.w	r2, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80085a4:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80085a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80085aa:	434a      	muls	r2, r1
                    sysTimeCurrent = SysTimeGet( );
 80085ac:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80085b0:	1212      	asrs	r2, r2, #8
                    sysTimeCurrent = SysTimeGet( );
 80085b2:	4658      	mov	r0, fp
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80085b4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                    sysTimeCurrent = SysTimeGet( );
 80085b8:	f00c f897 	bl	80146ea <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 80085c2:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 80085c6:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80085ca:	9308      	str	r3, [sp, #32]
 80085cc:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	f10d 0920 	add.w	r9, sp, #32
 80085d6:	e899 0006 	ldmia.w	r9, {r1, r2}
 80085da:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 80085de:	a80a      	add	r0, sp, #40	; 0x28
 80085e0:	f00c f847 	bl	8014672 <SysTimeSub>
 80085e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80085ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ee:	4648      	mov	r0, r9
 80085f0:	f00c f824 	bl	801463c <SysTimeAdd>
                    SysTimeSet( sysTime );
 80085f4:	e899 0003 	ldmia.w	r9, {r0, r1}
 80085f8:	f00c f856 	bl	80146a8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80085fc:	f00c fee9 	bl	80153d2 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008600:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008602:	b2e4      	uxtb	r4, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008604:	f88a 343c 	strb.w	r3, [sl, #1084]	; 0x43c
 8008608:	e5d9      	b.n	80081be <ProcessMacCommands.constprop.0+0xc6>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800860a:	f88a 043c 	strb.w	r0, [sl, #1084]	; 0x43c
 800860e:	e5d6      	b.n	80081be <ProcessMacCommands.constprop.0+0xc6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008610:	200c      	movs	r0, #12
 8008612:	f002 f991 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 8008616:	2800      	cmp	r0, #0
 8008618:	f43f add1 	beq.w	80081be <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800861c:	210c      	movs	r1, #12
 800861e:	2000      	movs	r0, #0
 8008620:	f002 f94e 	bl	800a8c0 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008624:	4b33      	ldr	r3, [pc, #204]	; (80086f4 <ProcessMacCommands.constprop.0+0x5fc>)
 8008626:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
 800862a:	3b04      	subs	r3, #4
 800862c:	2b01      	cmp	r3, #1
 800862e:	f67f adc6 	bls.w	80081be <ProcessMacCommands.constprop.0+0xc6>
                        LoRaMacClassBPingSlotInfoAns( );
 8008632:	f00c feca 	bl	80153ca <LoRaMacClassBPingSlotInfoAns>
 8008636:	e5c2      	b.n	80081be <ProcessMacCommands.constprop.0+0xc6>
                frequency = ( uint32_t )payload[macIndex++];
 8008638:	f109 0202 	add.w	r2, r9, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800863c:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 800863e:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008640:	5ca8      	ldrb	r0, [r5, r2]
 8008642:	f109 0203 	add.w	r2, r9, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008646:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 8008648:	f109 0405 	add.w	r4, r9, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800864c:	5cab      	ldrb	r3, [r5, r2]
 800864e:	f109 0904 	add.w	r9, r9, #4
                datarate = payload[macIndex++] & 0x0F;
 8008652:	fa5f f989 	uxtb.w	r9, r9
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 800865c:	f815 0009 	ldrb.w	r0, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008660:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008662:	2164      	movs	r1, #100	; 0x64
 8008664:	4359      	muls	r1, r3
 8008666:	f000 000f 	and.w	r0, r0, #15
 800866a:	f00c feaf 	bl	80153cc <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
 800866e:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 8008670:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008674:	2201      	movs	r2, #1
 8008676:	a906      	add	r1, sp, #24
 8008678:	2011      	movs	r0, #17
 800867a:	e679      	b.n	8008370 <ProcessMacCommands.constprop.0+0x278>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800867c:	200d      	movs	r0, #13
 800867e:	f002 f95b 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 8008682:	2800      	cmp	r0, #0
 8008684:	f43f ad9b 	beq.w	80081be <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008688:	210d      	movs	r1, #13
 800868a:	2000      	movs	r0, #0
 800868c:	f002 f918 	bl	800a8c0 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008690:	f109 0302 	add.w	r3, r9, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008694:	b2db      	uxtb	r3, r3
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008696:	4a19      	ldr	r2, [pc, #100]	; (80086fc <ProcessMacCommands.constprop.0+0x604>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008698:	5ce8      	ldrb	r0, [r5, r3]
 800869a:	5d2b      	ldrb	r3, [r5, r4]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800869c:	6812      	ldr	r2, [r2, #0]
                    beaconTimingChannel = payload[macIndex++];
 800869e:	f109 0404 	add.w	r4, r9, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80086a2:	f109 0903 	add.w	r9, r9, #3
                    beaconTimingChannel = payload[macIndex++];
 80086a6:	fa5f f989 	uxtb.w	r9, r9
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80086aa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80086ae:	f815 1009 	ldrb.w	r1, [r5, r9]
                    beaconTimingChannel = payload[macIndex++];
 80086b2:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80086b4:	f00c fe8c 	bl	80153d0 <LoRaMacClassBBeaconTimingAns>
 80086b8:	e581      	b.n	80081be <ProcessMacCommands.constprop.0+0xc6>
                    frequency = ( uint32_t )payload[macIndex++];
 80086ba:	5d28      	ldrb	r0, [r5, r4]
 80086bc:	f109 0302 	add.w	r3, r9, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80086c0:	f109 0404 	add.w	r4, r9, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80086c4:	f109 0903 	add.w	r9, r9, #3
 80086c8:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80086ca:	fa5f f989 	uxtb.w	r9, r9
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80086ce:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80086d0:	f815 3009 	ldrb.w	r3, [r5, r9]
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80086da:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80086dc:	2064      	movs	r0, #100	; 0x64
 80086de:	4358      	muls	r0, r3
 80086e0:	f00c fe78 	bl	80153d4 <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80086e4:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80086e6:	f88d 0018 	strb.w	r0, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80086ea:	2201      	movs	r2, #1
 80086ec:	a906      	add	r1, sp, #24
 80086ee:	2013      	movs	r0, #19
 80086f0:	e659      	b.n	80083a6 <ProcessMacCommands.constprop.0+0x2ae>
 80086f2:	bf00      	nop
 80086f4:	20001278 	.word	0x20001278
 80086f8:	0801c1fa 	.word	0x0801c1fa
 80086fc:	20001e94 	.word	0x20001e94

08008700 <StopRetransmission.isra.0>:
    return counter;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008700:	4b0e      	ldr	r3, [pc, #56]	; (800873c <StopRetransmission.isra.0+0x3c>)
 8008702:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 8008706:	0792      	lsls	r2, r2, #30
 8008708:	d503      	bpl.n	8008712 <StopRetransmission.isra.0+0x12>
 800870a:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 800870e:	2a01      	cmp	r2, #1
 8008710:	d908      	bls.n	8008724 <StopRetransmission.isra.0+0x24>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008712:	490b      	ldr	r1, [pc, #44]	; (8008740 <StopRetransmission.isra.0+0x40>)
 8008714:	f891 2186 	ldrb.w	r2, [r1, #390]	; 0x186
 8008718:	b122      	cbz	r2, 8008724 <StopRetransmission.isra.0+0x24>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800871a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if( counter < ADR_ACK_COUNTER_MAX )
 800871c:	1c50      	adds	r0, r2, #1
        counter++;
 800871e:	bf18      	it	ne
 8008720:	3201      	addne	r2, #1
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8008722:	634a      	str	r2, [r1, #52]	; 0x34
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008724:	2200      	movs	r2, #0
 8008726:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 800872a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800872e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008732:	f022 0202 	bic.w	r2, r2, #2
 8008736:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800873a:	4770      	bx	lr
 800873c:	20001278 	.word	0x20001278
 8008740:	20001790 	.word	0x20001790

08008744 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8008744:	4b07      	ldr	r3, [pc, #28]	; (8008764 <LoRaMacIsBusy+0x20>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	07db      	lsls	r3, r3, #31
 800874a:	d409      	bmi.n	8008760 <LoRaMacIsBusy+0x1c>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <LoRaMacIsBusy+0x24>)
 800874e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008752:	b92a      	cbnz	r2, 8008760 <LoRaMacIsBusy+0x1c>
 8008754:	f893 048e 	ldrb.w	r0, [r3, #1166]	; 0x48e
 8008758:	3801      	subs	r0, #1
 800875a:	bf18      	it	ne
 800875c:	2001      	movne	r0, #1
 800875e:	4770      	bx	lr
        return true;
 8008760:	2001      	movs	r0, #1
}
 8008762:	4770      	bx	lr
 8008764:	20001274 	.word	0x20001274
 8008768:	20001278 	.word	0x20001278

0800876c <PrepareFrame>:
{
 800876c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    MacCtx.PktBufferLen = 0;
 8008770:	4c50      	ldr	r4, [pc, #320]	; (80088b4 <PrepareFrame+0x148>)
{
 8008772:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
        fBufferSize = 0;
 8008776:	1e1e      	subs	r6, r3, #0
    MacCtx.PktBufferLen = 0;
 8008778:	f04f 0500 	mov.w	r5, #0
        fBufferSize = 0;
 800877c:	bf08      	it	eq
 800877e:	46aa      	moveq	sl, r5
{
 8008780:	4680      	mov	r8, r0
 8008782:	460f      	mov	r7, r1
 8008784:	4691      	mov	r9, r2
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008786:	4631      	mov	r1, r6
 8008788:	4652      	mov	r2, sl
 800878a:	f504 709c 	add.w	r0, r4, #312	; 0x138
    size_t macCmdsSize = 0;
 800878e:	e9cd 5500 	strd	r5, r5, [sp]
    MacCtx.PktBufferLen = 0;
 8008792:	8025      	strh	r5, [r4, #0]
    MacCtx.NodeAckRequested = false;
 8008794:	f884 541a 	strb.w	r5, [r4, #1050]	; 0x41a
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008798:	f00b ff35 	bl	8014606 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800879c:	fa5f f28a 	uxtb.w	r2, sl
 80087a0:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80087a4:	f898 3000 	ldrb.w	r3, [r8]
 80087a8:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 80087aa:	f898 3000 	ldrb.w	r3, [r8]
 80087ae:	095b      	lsrs	r3, r3, #5
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d007      	beq.n	80087c4 <PrepareFrame+0x58>
 80087b4:	2b07      	cmp	r3, #7
 80087b6:	d06e      	beq.n	8008896 <PrepareFrame+0x12a>
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d006      	beq.n	80087ca <PrepareFrame+0x5e>
 80087bc:	2002      	movs	r0, #2
}
 80087be:	b002      	add	sp, #8
 80087c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            MacCtx.NodeAckRequested = true;
 80087c4:	2301      	movs	r3, #1
 80087c6:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80087ca:	2304      	movs	r3, #4
 80087cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80087d0:	4d39      	ldr	r5, [pc, #228]	; (80088b8 <PrepareFrame+0x14c>)
 80087d2:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80087d6:	23ff      	movs	r3, #255	; 0xff
 80087d8:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80087dc:	4e37      	ldr	r6, [pc, #220]	; (80088bc <PrepareFrame+0x150>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80087de:	f898 3000 	ldrb.w	r3, [r8]
 80087e2:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80087e6:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80087ea:	f884 9128 	strb.w	r9, [r4, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80087ee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80087f2:	783b      	ldrb	r3, [r7, #0]
 80087f4:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80087f8:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80087fa:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80087fe:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8008802:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008806:	f002 f999 	bl	800ab3c <LoRaMacCryptoGetFCntUp>
 800880a:	2800      	cmp	r0, #0
 800880c:	d150      	bne.n	80088b0 <PrepareFrame+0x144>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800880e:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.AckReceived = false;
 8008810:	f8a4 0448 	strh.w	r0, [r4, #1096]	; 0x448
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008814:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8008816:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800881a:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800881e:	f001 ff8d 	bl	800a73c <LoRaMacCommandsGetSizeSerializedCmds>
 8008822:	b108      	cbz	r0, 8008828 <PrepareFrame+0xbc>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008824:	2013      	movs	r0, #19
 8008826:	e7ca      	b.n	80087be <PrepareFrame+0x52>
            if( macCmdsSize > 0 )
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	b90b      	cbnz	r3, 8008830 <PrepareFrame+0xc4>
    return LORAMAC_STATUS_OK;
 800882c:	2000      	movs	r0, #0
 800882e:	e7c6      	b.n	80087be <PrepareFrame+0x52>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8008830:	f996 0045 	ldrsb.w	r0, [r6, #69]	; 0x45
 8008834:	f7ff f9c8 	bl	8007bc8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8008838:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800883c:	b1db      	cbz	r3, 8008876 <PrepareFrame+0x10a>
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	2b0f      	cmp	r3, #15
 8008842:	d80f      	bhi.n	8008864 <PrepareFrame+0xf8>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8008844:	f505 728b 	add.w	r2, r5, #278	; 0x116
 8008848:	a901      	add	r1, sp, #4
 800884a:	200f      	movs	r0, #15
 800884c:	f001 ff82 	bl	800a754 <LoRaMacCommandsSerializeCmds>
 8008850:	2800      	cmp	r0, #0
 8008852:	d1e7      	bne.n	8008824 <PrepareFrame+0xb8>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8008854:	783b      	ldrb	r3, [r7, #0]
 8008856:	9a01      	ldr	r2, [sp, #4]
 8008858:	f362 0303 	bfi	r3, r2, #0, #4
 800885c:	703b      	strb	r3, [r7, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800885e:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 8008862:	e7ac      	b.n	80087be <PrepareFrame+0x52>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008864:	f205 4296 	addw	r2, r5, #1174	; 0x496
 8008868:	a901      	add	r1, sp, #4
 800886a:	f001 ff73 	bl	800a754 <LoRaMacCommandsSerializeCmds>
 800886e:	2800      	cmp	r0, #0
 8008870:	d1d8      	bne.n	8008824 <PrepareFrame+0xb8>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8008872:	200a      	movs	r0, #10
 8008874:	e7a3      	b.n	80087be <PrepareFrame+0x52>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008876:	f205 4596 	addw	r5, r5, #1174	; 0x496
 800887a:	462a      	mov	r2, r5
 800887c:	a901      	add	r1, sp, #4
 800887e:	f001 ff69 	bl	800a754 <LoRaMacCommandsSerializeCmds>
 8008882:	2800      	cmp	r0, #0
 8008884:	d1ce      	bne.n	8008824 <PrepareFrame+0xb8>
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008886:	9b01      	ldr	r3, [sp, #4]
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008888:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800888c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008890:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
 8008894:	e793      	b.n	80087be <PrepareFrame+0x52>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8008896:	2e00      	cmp	r6, #0
 8008898:	d0c8      	beq.n	800882c <PrepareFrame+0xc0>
 800889a:	2a00      	cmp	r2, #0
 800889c:	d0c6      	beq.n	800882c <PrepareFrame+0xc0>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800889e:	4631      	mov	r1, r6
 80088a0:	1ce0      	adds	r0, r4, #3
 80088a2:	f00b feb0 	bl	8014606 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80088a6:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 80088aa:	3301      	adds	r3, #1
 80088ac:	8023      	strh	r3, [r4, #0]
 80088ae:	e7bd      	b.n	800882c <PrepareFrame+0xc0>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80088b0:	2012      	movs	r0, #18
 80088b2:	e784      	b.n	80087be <PrepareFrame+0x52>
 80088b4:	20001278 	.word	0x20001278
 80088b8:	2000127a 	.word	0x2000127a
 80088bc:	20001790 	.word	0x20001790

080088c0 <SendFrameOnChannel>:
{
 80088c0:	b570      	push	{r4, r5, r6, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80088c2:	4d45      	ldr	r5, [pc, #276]	; (80089d8 <SendFrameOnChannel+0x118>)
    txConfig.PktLen = MacCtx.PktBufferLen;
 80088c4:	4c45      	ldr	r4, [pc, #276]	; (80089dc <SendFrameOnChannel+0x11c>)
{
 80088c6:	b086      	sub	sp, #24
    int8_t txPower = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	f88d 3003 	strb.w	r3, [sp, #3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80088ce:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80088d2:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80088d6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80088da:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80088de:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80088e2:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80088e4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80088e8:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80088ea:	8823      	ldrh	r3, [r4, #0]
    txConfig.Channel = channel;
 80088ec:	f88d 0008 	strb.w	r0, [sp, #8]
{
 80088f0:	4606      	mov	r6, r0
    txConfig.PktLen = MacCtx.PktBufferLen;
 80088f2:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80088f6:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 80088fa:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 80088fe:	f10d 0203 	add.w	r2, sp, #3
 8008902:	a902      	add	r1, sp, #8
 8008904:	f00c ffd7 	bl	80158b6 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800890e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8008912:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8008916:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800891a:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800891e:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 8008922:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008926:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800892a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800892e:	f00c fd41 	bl	80153b4 <LoRaMacClassBIsBeaconModeActive>
 8008932:	b9a8      	cbnz	r0, 8008960 <SendFrameOnChannel+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008934:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8008938:	2b01      	cmp	r3, #1
 800893a:	d101      	bne.n	8008940 <SendFrameOnChannel+0x80>
        LoRaMacClassBStopRxSlots( );
 800893c:	f00c fd4e 	bl	80153dc <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 8008940:	f00c fd3b 	bl	80153ba <LoRaMacClassBHaltBeaconing>
    uint32_t fCntUp = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8008948:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800894c:	f995 5045 	ldrsb.w	r5, [r5, #69]	; 0x45
 8008950:	f894 641b 	ldrb.w	r6, [r4, #1051]	; 0x41b
    switch( MacCtx.TxMsg.Type )
 8008954:	b163      	cbz	r3, 8008970 <SendFrameOnChannel+0xb0>
 8008956:	2b04      	cmp	r3, #4
 8008958:	d029      	beq.n	80089ae <SendFrameOnChannel+0xee>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800895a:	2003      	movs	r0, #3
}
 800895c:	b006      	add	sp, #24
 800895e:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008960:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8008964:	f00c fd38 	bl	80153d8 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8008968:	2800      	cmp	r0, #0
 800896a:	d0e3      	beq.n	8008934 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800896c:	2010      	movs	r0, #16
 800896e:	e7f5      	b.n	800895c <SendFrameOnChannel+0x9c>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008970:	481b      	ldr	r0, [pc, #108]	; (80089e0 <SendFrameOnChannel+0x120>)
 8008972:	f002 f905 	bl	800ab80 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008976:	bb58      	cbnz	r0, 80089d0 <SendFrameOnChannel+0x110>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008978:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 800897c:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800897e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008982:	4818      	ldr	r0, [pc, #96]	; (80089e4 <SendFrameOnChannel+0x124>)
 8008984:	7821      	ldrb	r1, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008986:	f043 0302 	orr.w	r3, r3, #2
 800898a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800898e:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8008992:	3301      	adds	r3, #1
 8008994:	b2db      	uxtb	r3, r3
 8008996:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800899a:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800899e:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <SendFrameOnChannel+0x128>)
    MacCtx.ResponseTimeoutStartTime = 0;
 80089a0:	2500      	movs	r5, #0
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80089a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    MacCtx.ResponseTimeoutStartTime = 0;
 80089a4:	f8c4 5494 	str.w	r5, [r4, #1172]	; 0x494
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80089a8:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 80089aa:	4628      	mov	r0, r5
 80089ac:	e7d6      	b.n	800895c <SendFrameOnChannel+0x9c>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80089ae:	a801      	add	r0, sp, #4
 80089b0:	f002 f8c4 	bl	800ab3c <LoRaMacCryptoGetFCntUp>
 80089b4:	b970      	cbnz	r0, 80089d4 <SendFrameOnChannel+0x114>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80089b6:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80089ba:	b113      	cbz	r3, 80089c2 <SendFrameOnChannel+0x102>
                fCntUp -= 1;
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	3b01      	subs	r3, #1
 80089c0:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80089c2:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <SendFrameOnChannel+0x120>)
 80089c4:	9801      	ldr	r0, [sp, #4]
 80089c6:	4632      	mov	r2, r6
 80089c8:	b2e9      	uxtb	r1, r5
 80089ca:	f002 f8fd 	bl	800abc8 <LoRaMacCryptoSecureMessage>
 80089ce:	e7d2      	b.n	8008976 <SendFrameOnChannel+0xb6>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80089d0:	2011      	movs	r0, #17
 80089d2:	e7c3      	b.n	800895c <SendFrameOnChannel+0x9c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80089d4:	2012      	movs	r0, #18
 80089d6:	e7c1      	b.n	800895c <SendFrameOnChannel+0x9c>
 80089d8:	20001790 	.word	0x20001790
 80089dc:	20001278 	.word	0x20001278
 80089e0:	20001380 	.word	0x20001380
 80089e4:	2000127a 	.word	0x2000127a
 80089e8:	0801a484 	.word	0x0801a484

080089ec <ScheduleTx>:
{
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	b08e      	sub	sp, #56	; 0x38
 80089f2:	4606      	mov	r6, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80089f4:	f00c fcd8 	bl	80153a8 <LoRaMacClassBIsBeaconExpected>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	f040 80d3 	bne.w	8008ba4 <ScheduleTx+0x1b8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80089fe:	4c6a      	ldr	r4, [pc, #424]	; (8008ba8 <ScheduleTx+0x1bc>)
 8008a00:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d009      	beq.n	8008a1c <ScheduleTx+0x30>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008a08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a0a:	4d68      	ldr	r5, [pc, #416]	; (8008bac <ScheduleTx+0x1c0>)
 8008a0c:	b193      	cbz	r3, 8008a34 <ScheduleTx+0x48>
    switch( MacCtx.TxMsg.Type )
 8008a0e:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 8008a12:	b1bb      	cbz	r3, 8008a44 <ScheduleTx+0x58>
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	d01b      	beq.n	8008a50 <ScheduleTx+0x64>
 8008a18:	2003      	movs	r0, #3
 8008a1a:	e003      	b.n	8008a24 <ScheduleTx+0x38>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008a1c:	f00c fcc6 	bl	80153ac <LoRaMacClassBIsPingExpected>
 8008a20:	b118      	cbz	r0, 8008a2a <ScheduleTx+0x3e>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008a22:	200f      	movs	r0, #15
}
 8008a24:	b00e      	add	sp, #56	; 0x38
 8008a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008a2a:	f00c fcc1 	bl	80153b0 <LoRaMacClassBIsMulticastExpected>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0ea      	beq.n	8008a08 <ScheduleTx+0x1c>
 8008a32:	e7f6      	b.n	8008a22 <ScheduleTx+0x36>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008a34:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
 8008a38:	f8d5 241c 	ldr.w	r2, [r5, #1052]	; 0x41c
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	4353      	muls	r3, r2
 8008a40:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008a42:	e7e4      	b.n	8008a0e <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008a44:	485a      	ldr	r0, [pc, #360]	; (8008bb0 <ScheduleTx+0x1c4>)
 8008a46:	f00c fe4f 	bl	80156e8 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008a4a:	b128      	cbz	r0, 8008a58 <ScheduleTx+0x6c>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008a4c:	2011      	movs	r0, #17
 8008a4e:	e7e9      	b.n	8008a24 <ScheduleTx+0x38>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008a50:	4857      	ldr	r0, [pc, #348]	; (8008bb0 <ScheduleTx+0x1c4>)
 8008a52:	f00c fe7d 	bl	8015750 <LoRaMacSerializerData>
 8008a56:	e7f8      	b.n	8008a4a <ScheduleTx+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008a58:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
 8008a5c:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8008a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a60:	9308      	str	r3, [sp, #32]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008a62:	f10d 0818 	add.w	r8, sp, #24
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008a66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a6a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008a6e:	4640      	mov	r0, r8
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8008a70:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
 8008a74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008a78:	f00b fe5a 	bl	8014730 <SysTimeGetMcuTime>
 8008a7c:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	af02      	add	r7, sp, #8
 8008a84:	e898 0006 	ldmia.w	r8, {r1, r2}
 8008a88:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f00b fdf0 	bl	8014672 <SysTimeSub>
 8008a92:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008a96:	ab0b      	add	r3, sp, #44	; 0x2c
 8008a98:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8008a9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a9e:	9309      	str	r3, [sp, #36]	; 0x24
    nextChan.LastTxIsJoinRequest = false;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    nextChan.PktLen = MacCtx.PktBufferLen;
 8008aa6:	882b      	ldrh	r3, [r5, #0]
 8008aa8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008aac:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    nextChan.Joined = true;
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008ab6:	b91b      	cbnz	r3, 8008ac0 <ScheduleTx+0xd4>
        nextChan.LastTxIsJoinRequest = true;
 8008ab8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
        nextChan.Joined = false;
 8008abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8008ac0:	4b3c      	ldr	r3, [pc, #240]	; (8008bb4 <ScheduleTx+0x1c8>)
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	4b3c      	ldr	r3, [pc, #240]	; (8008bb8 <ScheduleTx+0x1cc>)
 8008ac6:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8008aca:	f1a3 0275 	sub.w	r2, r3, #117	; 0x75
 8008ace:	a908      	add	r1, sp, #32
 8008ad0:	f00c ff33 	bl	801593a <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8008ad4:	b1a0      	cbz	r0, 8008b00 <ScheduleTx+0x114>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008ad6:	280b      	cmp	r0, #11
 8008ad8:	d1a4      	bne.n	8008a24 <ScheduleTx+0x38>
 8008ada:	2e00      	cmp	r6, #0
 8008adc:	d0a2      	beq.n	8008a24 <ScheduleTx+0x38>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8008ade:	f8d5 1490 	ldr.w	r1, [r5, #1168]	; 0x490
 8008ae2:	b159      	cbz	r1, 8008afc <ScheduleTx+0x110>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008ae4:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8008ae8:	4834      	ldr	r0, [pc, #208]	; (8008bbc <ScheduleTx+0x1d0>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008aea:	f043 0320 	orr.w	r3, r3, #32
 8008aee:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8008af2:	f00b fe8c 	bl	801480e <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008af6:	4831      	ldr	r0, [pc, #196]	; (8008bbc <ScheduleTx+0x1d0>)
 8008af8:	f7fd fda8 	bl	800664c <TimerStart>
            return LORAMAC_STATUS_OK;
 8008afc:	2000      	movs	r0, #0
 8008afe:	e791      	b.n	8008a24 <ScheduleTx+0x38>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008b00:	f894 704c 	ldrb.w	r7, [r4, #76]	; 0x4c
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8008b04:	f994 306d 	ldrsb.w	r3, [r4, #109]	; 0x6d
 8008b08:	f994 2045 	ldrsb.w	r2, [r4, #69]	; 0x45
 8008b0c:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008b10:	4e2b      	ldr	r6, [pc, #172]	; (8008bc0 <ScheduleTx+0x1d4>)
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8008b12:	4638      	mov	r0, r7
 8008b14:	f00c ff1f 	bl	8015956 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008b18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008b1a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8008b1e:	9600      	str	r6, [sp, #0]
 8008b20:	b241      	sxtb	r1, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008b22:	3614      	adds	r6, #20
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008b24:	4638      	mov	r0, r7
 8008b26:	f00c feb0 	bl	801588a <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008b2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008b2c:	f994 1074 	ldrsb.w	r1, [r4, #116]	; 0x74
 8008b30:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8008b34:	9600      	str	r6, [sp, #0]
 8008b36:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8008b3a:	f00c fea6 	bl	801588a <RegionComputeRxWindowParameters>
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008b3e:	f8d5 03e0 	ldr.w	r0, [r5, #992]	; 0x3e0
 8008b42:	6e21      	ldr	r1, [r4, #96]	; 0x60
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008b44:	f8d5 63cc 	ldr.w	r6, [r5, #972]	; 0x3cc
 8008b48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008b4a:	4401      	add	r1, r0
 8008b4c:	f8c5 13bc 	str.w	r1, [r5, #956]	; 0x3bc
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008b50:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008b54:	4433      	add	r3, r6
 8008b56:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008b5a:	b939      	cbnz	r1, 8008b6c <ScheduleTx+0x180>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008b5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008b5e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008b60:	4432      	add	r2, r6
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008b62:	4403      	add	r3, r0
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008b64:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008b68:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    size_t macCmdsSize = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9305      	str	r3, [sp, #20]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008b70:	b179      	cbz	r1, 8008b92 <ScheduleTx+0x1a6>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008b72:	a805      	add	r0, sp, #20
 8008b74:	f001 fde2 	bl	800a73c <LoRaMacCommandsGetSizeSerializedCmds>
 8008b78:	b990      	cbnz	r0, 8008ba0 <ScheduleTx+0x1b4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008b7a:	f994 0045 	ldrsb.w	r0, [r4, #69]	; 0x45
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8008b7e:	f895 6237 	ldrb.w	r6, [r5, #567]	; 0x237
 8008b82:	f89d 7014 	ldrb.w	r7, [sp, #20]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008b86:	f7ff f81f 	bl	8007bc8 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008b8a:	443e      	add	r6, r7
 8008b8c:	b280      	uxth	r0, r0
 8008b8e:	42b0      	cmp	r0, r6
 8008b90:	d304      	bcc.n	8008b9c <ScheduleTx+0x1b0>
    return SendFrameOnChannel( MacCtx.Channel );
 8008b92:	f895 041b 	ldrb.w	r0, [r5, #1051]	; 0x41b
 8008b96:	f7ff fe93 	bl	80088c0 <SendFrameOnChannel>
 8008b9a:	e743      	b.n	8008a24 <ScheduleTx+0x38>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008b9c:	2008      	movs	r0, #8
 8008b9e:	e741      	b.n	8008a24 <ScheduleTx+0x38>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008ba0:	2013      	movs	r0, #19
 8008ba2:	e73f      	b.n	8008a24 <ScheduleTx+0x38>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008ba4:	200e      	movs	r0, #14
 8008ba6:	e73d      	b.n	8008a24 <ScheduleTx+0x38>
 8008ba8:	20001790 	.word	0x20001790
 8008bac:	20001278 	.word	0x20001278
 8008bb0:	20001380 	.word	0x20001380
 8008bb4:	200017cc 	.word	0x200017cc
 8008bb8:	20001708 	.word	0x20001708
 8008bbc:	200015e8 	.word	0x200015e8
 8008bc0:	20001638 	.word	0x20001638

08008bc4 <OnTxDelayedTimerEvent>:
{
 8008bc4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8008bc6:	4c18      	ldr	r4, [pc, #96]	; (8008c28 <OnTxDelayedTimerEvent+0x64>)
 8008bc8:	f504 705c 	add.w	r0, r4, #880	; 0x370
 8008bcc:	f7fd fdb2 	bl	8006734 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008bd0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8008bd4:	f8d4 0494 	ldr.w	r0, [r4, #1172]	; 0x494
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008bd8:	f023 0320 	bic.w	r3, r3, #32
 8008bdc:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( startTimeInMs != 0 )
 8008be0:	b148      	cbz	r0, 8008bf6 <OnTxDelayedTimerEvent+0x32>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8008be2:	f00b fe2c 	bl	801483e <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8008be6:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8008bea:	d904      	bls.n	8008bf6 <OnTxDelayedTimerEvent+0x32>
            Nvm.MacGroup1.SrvAckRequested = false;
 8008bec:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <OnTxDelayedTimerEvent+0x68>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 8008bf4:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	f7ff fef8 	bl	80089ec <ScheduleTx>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d0f9      	beq.n	8008bf4 <OnTxDelayedTimerEvent+0x30>
 8008c00:	280b      	cmp	r0, #11
 8008c02:	d0f7      	beq.n	8008bf4 <OnTxDelayedTimerEvent+0x30>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008c04:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <OnTxDelayedTimerEvent+0x68>)
 8008c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c0a:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008c0e:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8008c10:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8008c14:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008c18:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8008c1c:	f001 fe72 	bl	800a904 <LoRaMacConfirmQueueSetStatusCmn>
}
 8008c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8008c24:	f7ff bd6c 	b.w	8008700 <StopRetransmission.isra.0>
 8008c28:	20001278 	.word	0x20001278
 8008c2c:	20001790 	.word	0x20001790

08008c30 <Send>:
{
 8008c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c34:	4c3b      	ldr	r4, [pc, #236]	; (8008d24 <Send+0xf4>)
 8008c36:	b08b      	sub	sp, #44	; 0x2c
 8008c38:	4617      	mov	r7, r2
 8008c3a:	4699      	mov	r9, r3
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008c3c:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
 8008c40:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8008c44:	f8b4 8044 	ldrh.w	r8, [r4, #68]	; 0x44
{
 8008c48:	460e      	mov	r6, r1
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c4c:	9104      	str	r1, [sp, #16]
{
 8008c4e:	4605      	mov	r5, r0
 8008c50:	ba5b      	rev16	r3, r3
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	d064      	beq.n	8008d20 <Send+0xf0>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8008c56:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
 8008c5a:	b902      	cbnz	r2, 8008c5e <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8008c5c:	63e2      	str	r2, [r4, #60]	; 0x3c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8008c5e:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
 8008c62:	f04f 0200 	mov.w	r2, #0
 8008c66:	f360 12c7 	bfi	r2, r0, #7, #1
 8008c6a:	f88d 200c 	strb.w	r2, [sp, #12]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008c6e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
 8008c72:	2a01      	cmp	r2, #1
        fCtrl.Bits.FPending      = 1;
 8008c74:	bf02      	ittt	eq
 8008c76:	f89d 200c 	ldrbeq.w	r2, [sp, #12]
 8008c7a:	f042 0210 	orreq.w	r2, r2, #16
 8008c7e:	f88d 200c 	strbeq.w	r2, [sp, #12]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8008c82:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8008c86:	b12a      	cbz	r2, 8008c94 <Send+0x64>
        fCtrl.Bits.Ack = 1;
 8008c88:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008c8c:	f042 0220 	orr.w	r2, r2, #32
 8008c90:	f88d 200c 	strb.w	r2, [sp, #12]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008c94:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008c98:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8008c9c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    adrNext.UpdateChanMask = true;
 8008ca0:	2201      	movs	r2, #1
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008ca2:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    adrNext.UpdateChanMask = true;
 8008ca6:	f88d 2014 	strb.w	r2, [sp, #20]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008caa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008cae:	4a1e      	ldr	r2, [pc, #120]	; (8008d28 <Send+0xf8>)
    adrNext.Region = Nvm.MacGroup2.Region;
 8008cb0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8008cb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008cb8:	ab04      	add	r3, sp, #16
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008cba:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	4b1a      	ldr	r3, [pc, #104]	; (8008d2c <Send+0xfc>)
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8008cc2:	f88d 0015 	strb.w	r0, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8008cc6:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008cc8:	9207      	str	r2, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008cca:	f1a3 0127 	sub.w	r1, r3, #39	; 0x27
 8008cce:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8008cd2:	a805      	add	r0, sp, #20
 8008cd4:	f00c faf0 	bl	80152b8 <LoRaMacAdrCalcNext>
 8008cd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008cdc:	f8cd 9000 	str.w	r9, [sp]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8008ce0:	f360 1386 	bfi	r3, r0, #6, #1
 8008ce4:	f88d 300c 	strb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008ce8:	4632      	mov	r2, r6
 8008cea:	463b      	mov	r3, r7
 8008cec:	a903      	add	r1, sp, #12
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f7ff fd3c 	bl	800876c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8008cf4:	b108      	cbz	r0, 8008cfa <Send+0xca>
 8008cf6:	280a      	cmp	r0, #10
 8008cf8:	d103      	bne.n	8008d02 <Send+0xd2>
        status = ScheduleTx( false );
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	f7ff fe76 	bl	80089ec <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
 8008d00:	b120      	cbz	r0, 8008d0c <Send+0xdc>
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8008d02:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
}
 8008d06:	b00b      	add	sp, #44	; 0x2c
 8008d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8008d0c:	9b04      	ldr	r3, [sp, #16]
        Nvm.MacGroup1.SrvAckRequested = false;
 8008d0e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8008d12:	6363      	str	r3, [r4, #52]	; 0x34
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8008d14:	f001 fcec 	bl	800a6f0 <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	bf18      	it	ne
 8008d1c:	2013      	movne	r0, #19
 8008d1e:	e7f2      	b.n	8008d06 <Send+0xd6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8008d20:	2007      	movs	r0, #7
 8008d22:	e7f0      	b.n	8008d06 <Send+0xd6>
 8008d24:	20001790 	.word	0x20001790
 8008d28:	20001278 	.word	0x20001278
 8008d2c:	200017fc 	.word	0x200017fc

08008d30 <SendReJoinReq>:
    switch( joinReqType )
 8008d30:	28ff      	cmp	r0, #255	; 0xff
{
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	4606      	mov	r6, r0
    switch( joinReqType )
 8008d36:	d120      	bne.n	8008d7a <SendReJoinReq+0x4a>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008d38:	4c11      	ldr	r4, [pc, #68]	; (8008d80 <SendReJoinReq+0x50>)
            SwitchClass( CLASS_A );
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f7ff f822 	bl	8007d84 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008d40:	2500      	movs	r5, #0
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008d42:	1ca3      	adds	r3, r4, #2
 8008d44:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008d48:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008d4c:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8008d50:	f7fe feda 	bl	8007b08 <SecureElementGetJoinEui>
 8008d54:	2208      	movs	r2, #8
 8008d56:	4601      	mov	r1, r0
 8008d58:	f504 7087 	add.w	r0, r4, #270	; 0x10e
 8008d5c:	f00b fc53 	bl	8014606 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8008d60:	f7fe febc 	bl	8007adc <SecureElementGetDevEui>
 8008d64:	2208      	movs	r2, #8
 8008d66:	4601      	mov	r1, r0
 8008d68:	f504 708b 	add.w	r0, r4, #278	; 0x116
 8008d6c:	f00b fc4b 	bl	8014606 <memcpy1>
            allowDelayedTx = false;
 8008d70:	4628      	mov	r0, r5
}
 8008d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = ScheduleTx( allowDelayedTx );
 8008d76:	f7ff be39 	b.w	80089ec <ScheduleTx>
    bool allowDelayedTx = true;
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	e7f9      	b.n	8008d72 <SendReJoinReq+0x42>
 8008d7e:	bf00      	nop
 8008d80:	20001278 	.word	0x20001278

08008d84 <SetTxContinuousWave>:
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008d84:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <SetTxContinuousWave+0x24>)
{
 8008d86:	b510      	push	{r4, lr}
 8008d88:	4604      	mov	r4, r0
 8008d8a:	4608      	mov	r0, r1
 8008d8c:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d90:	4622      	mov	r2, r4
 8008d92:	b249      	sxtb	r1, r1
 8008d94:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008d96:	4a05      	ldr	r2, [pc, #20]	; (8008dac <SetTxContinuousWave+0x28>)
 8008d98:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008d9c:	f043 0302 	orr.w	r3, r3, #2
 8008da0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8008da4:	2000      	movs	r0, #0
 8008da6:	bd10      	pop	{r4, pc}
 8008da8:	0801a484 	.word	0x0801a484
 8008dac:	20001278 	.word	0x20001278

08008db0 <LoRaMacProcess>:
{
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    events = LoRaMacRadioEvents;
 8008db4:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 8009098 <LoRaMacProcess+0x2e8>
 8008db8:	4cb8      	ldr	r4, [pc, #736]	; (800909c <LoRaMacProcess+0x2ec>)
{
 8008dba:	b0a9      	sub	sp, #164	; 0xa4
    CRITICAL_SECTION_BEGIN( );
 8008dbc:	a808      	add	r0, sp, #32
 8008dbe:	f00b fb20 	bl	8014402 <BoardCriticalSectionBegin>
    events = LoRaMacRadioEvents;
 8008dc2:	f8da 5000 	ldr.w	r5, [sl]
    LoRaMacRadioEvents.Value = 0;
 8008dc6:	2300      	movs	r3, #0
    CRITICAL_SECTION_END( );
 8008dc8:	a808      	add	r0, sp, #32
    LoRaMacRadioEvents.Value = 0;
 8008dca:	f8ca 3000 	str.w	r3, [sl]
    CRITICAL_SECTION_END( );
 8008dce:	f00b fb22 	bl	8014416 <BoardCriticalSectionEnd>
    if( events.Value != 0 )
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	f000 80d9 	beq.w	8008f8a <LoRaMacProcess+0x1da>
        if( events.Events.TxDone == 1 )
 8008dd8:	b2eb      	uxtb	r3, r5
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	06ab      	lsls	r3, r5, #26
 8008dde:	d559      	bpl.n	8008e94 <LoRaMacProcess+0xe4>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008de0:	4daf      	ldr	r5, [pc, #700]	; (80090a0 <LoRaMacProcess+0x2f0>)
 8008de2:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d002      	beq.n	8008df0 <LoRaMacProcess+0x40>
        Radio.Sleep( );
 8008dea:	4bae      	ldr	r3, [pc, #696]	; (80090a4 <LoRaMacProcess+0x2f4>)
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8008df0:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 8008df4:	48ac      	ldr	r0, [pc, #688]	; (80090a8 <LoRaMacProcess+0x2f8>)
 8008df6:	f00b fd0a 	bl	801480e <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008dfa:	48ab      	ldr	r0, [pc, #684]	; (80090a8 <LoRaMacProcess+0x2f8>)
 8008dfc:	f7fd fc26 	bl	800664c <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8008e00:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
 8008e04:	48a9      	ldr	r0, [pc, #676]	; (80090ac <LoRaMacProcess+0x2fc>)
 8008e06:	f00b fd02 	bl	801480e <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008e0a:	48a8      	ldr	r0, [pc, #672]	; (80090ac <LoRaMacProcess+0x2fc>)
 8008e0c:	f7fd fc1e 	bl	800664c <TimerStart>
    if( MacCtx.NodeAckRequested == true )
 8008e10:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 81f4 	beq.w	8009202 <LoRaMacProcess+0x452>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008e1a:	2314      	movs	r3, #20
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008e1c:	a912      	add	r1, sp, #72	; 0x48
 8008e1e:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008e22:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008e26:	f00c fd04 	bl	8015832 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008e2a:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008e2e:	900f      	str	r0, [sp, #60]	; 0x3c
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008e30:	4401      	add	r1, r0
 8008e32:	489f      	ldr	r0, [pc, #636]	; (80090b0 <LoRaMacProcess+0x300>)
 8008e34:	f00b fceb 	bl	801480e <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8008e38:	489d      	ldr	r0, [pc, #628]	; (80090b0 <LoRaMacProcess+0x300>)
 8008e3a:	f7fd fc07 	bl	800664c <TimerStart>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008e3e:	4b9d      	ldr	r3, [pc, #628]	; (80090b4 <LoRaMacProcess+0x304>)
    txDone.Channel = MacCtx.Channel;
 8008e40:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	63ab      	str	r3, [r5, #56]	; 0x38
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008e48:	af0d      	add	r7, sp, #52	; 0x34
 8008e4a:	4638      	mov	r0, r7
    txDone.Channel = MacCtx.Channel;
 8008e4c:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008e50:	931d      	str	r3, [sp, #116]	; 0x74
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008e52:	f00b fc6d 	bl	8014730 <SysTimeGetMcuTime>
 8008e56:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	ae06      	add	r6, sp, #24
 8008e5e:	e897 0006 	ldmia.w	r7, {r1, r2}
 8008e62:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
 8008e66:	4630      	mov	r0, r6
 8008e68:	f00b fc03 	bl	8014672 <SysTimeSub>
 8008e6c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008e70:	ab1f      	add	r3, sp, #124	; 0x7c
 8008e72:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008e76:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8008e7a:	931e      	str	r3, [sp, #120]	; 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008e7c:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008e80:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
        txDone.Joined  = false;
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bf18      	it	ne
 8008e88:	2301      	movne	r3, #1
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008e8a:	a91c      	add	r1, sp, #112	; 0x70
        txDone.Joined  = false;
 8008e8c:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008e90:	f00c fcd9 	bl	8015846 <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	06df      	lsls	r7, r3, #27
 8008e98:	d54b      	bpl.n	8008f32 <LoRaMacProcess+0x182>
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008e9a:	4d81      	ldr	r5, [pc, #516]	; (80090a0 <LoRaMacProcess+0x2f0>)
    uint8_t *payload = RxDoneParams.Payload;
 8008e9c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80090b8 <LoRaMacProcess+0x308>
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008ea0:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
    int16_t rssi = RxDoneParams.Rssi;
 8008ea4:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008ea8:	9205      	str	r2, [sp, #20]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008eaa:	f89a 2000 	ldrb.w	r2, [sl]
    int16_t rssi = RxDoneParams.Rssi;
 8008eae:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 8008eb0:	2300      	movs	r3, #0
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008eb2:	f363 0200 	bfi	r2, r3, #0, #1
    uint32_t downLinkCounter = 0;
 8008eb6:	930a      	str	r3, [sp, #40]	; 0x28
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008eb8:	f88a 2000 	strb.w	r2, [sl]
    MacCtx.McpsConfirm.AckReceived = false;
 8008ebc:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.McpsIndication.Rssi = rssi;
 8008ec0:	9a04      	ldr	r2, [sp, #16]
    MacCtx.McpsIndication.Multicast = 0;
 8008ec2:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 8008ec6:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8008eca:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8008ece:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.AckReceived = false;
 8008ed2:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008ed6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008eda:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8008ede:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008ee2:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008ee6:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 8008eea:	4b6e      	ldr	r3, [pc, #440]	; (80090a4 <LoRaMacProcess+0x2f4>)
    int8_t snr = RxDoneParams.Snr;
 8008eec:	f999 800c 	ldrsb.w	r8, [r9, #12]
    MacCtx.McpsIndication.Rssi = rssi;
 8008ef0:	f8a4 242e 	strh.w	r2, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8008ef4:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
    Radio.Sleep( );
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    MacCtx.McpsIndication.Snr = snr;
 8008efa:	f884 8430 	strb.w	r8, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8008efe:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint8_t *payload = RxDoneParams.Payload;
 8008f02:	f8d9 7004 	ldr.w	r7, [r9, #4]
    uint16_t size = RxDoneParams.Size;
 8008f06:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    Radio.Sleep( );
 8008f0a:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8008f0c:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8008f10:	b913      	cbnz	r3, 8008f18 <LoRaMacProcess+0x168>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008f12:	4866      	ldr	r0, [pc, #408]	; (80090ac <LoRaMacProcess+0x2fc>)
 8008f14:	f7fd fc0e 	bl	8006734 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	f00c fa42 	bl	80153a4 <LoRaMacClassBRxBeacon>
 8008f20:	4683      	mov	fp, r0
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f000 8170 	beq.w	8009208 <LoRaMacProcess+0x458>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	f8a4 347e 	strh.w	r3, [r4, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008f2e:	f884 8480 	strb.w	r8, [r4, #1152]	; 0x480
        if( events.Events.TxTimeout == 1 )
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	0718      	lsls	r0, r3, #28
 8008f36:	d51a      	bpl.n	8008f6e <LoRaMacProcess+0x1be>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008f38:	4b59      	ldr	r3, [pc, #356]	; (80090a0 <LoRaMacProcess+0x2f0>)
 8008f3a:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d002      	beq.n	8008f48 <LoRaMacProcess+0x198>
        Radio.Sleep( );
 8008f42:	4b58      	ldr	r3, [pc, #352]	; (80090a4 <LoRaMacProcess+0x2f4>)
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008f48:	2002      	movs	r0, #2
    UpdateRxSlotIdleState( );
 8008f4a:	f7fe fe2f 	bl	8007bac <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008f4e:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008f52:	f001 fcd7 	bl	800a904 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008f56:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8008f5a:	b113      	cbz	r3, 8008f62 <LoRaMacProcess+0x1b2>
        MacCtx.RetransmitTimeoutRetry = true;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008f62:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008f66:	f043 0320 	orr.w	r3, r3, #32
 8008f6a:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( events.Events.RxError == 1 )
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	0759      	lsls	r1, r3, #29
 8008f72:	d503      	bpl.n	8008f7c <LoRaMacProcess+0x1cc>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008f74:	2106      	movs	r1, #6
 8008f76:	2005      	movs	r0, #5
 8008f78:	f7fe fe70 	bl	8007c5c <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	079a      	lsls	r2, r3, #30
 8008f80:	d503      	bpl.n	8008f8a <LoRaMacProcess+0x1da>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008f82:	2104      	movs	r1, #4
 8008f84:	2003      	movs	r0, #3
 8008f86:	f7fe fe69 	bl	8007c5c <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8008f8a:	f00c fa29 	bl	80153e0 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8008f8e:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
 8008f92:	0693      	lsls	r3, r2, #26
 8008f94:	d571      	bpl.n	800907a <LoRaMacProcess+0x2ca>
    MacCtx.AllowRequests = requestState;
 8008f96:	2300      	movs	r3, #0
 8008f98:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008f9c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008fa0:	061f      	lsls	r7, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008fa2:	bf44      	itt	mi
 8008fa4:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 8008fa8:	f8c4 3340 	strmi.w	r3, [r4, #832]	; 0x340
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
    }
}
static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008fac:	f012 0f05 	tst.w	r2, #5
 8008fb0:	f000 8378 	beq.w	80096a4 <LoRaMacProcess+0x8f4>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008fb4:	200b      	movs	r0, #11
 8008fb6:	f001 fcbf 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f000 8372 	beq.w	80096a4 <LoRaMacProcess+0x8f4>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008fc0:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008fc4:	07de      	lsls	r6, r3, #31
 8008fc6:	f100 836d 	bmi.w	80096a4 <LoRaMacProcess+0x8f4>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008fca:	075d      	lsls	r5, r3, #29
 8008fcc:	f140 8384 	bpl.w	80096d8 <LoRaMacProcess+0x928>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008fd0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8008fd4:	f023 0302 	bic.w	r3, r3, #2
 8008fd8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008fdc:	f8d4 2340 	ldr.w	r2, [r4, #832]	; 0x340
 8008fe0:	2a00      	cmp	r2, #0
 8008fe2:	d141      	bne.n	8009068 <LoRaMacProcess+0x2b8>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008fe4:	f894 548d 	ldrb.w	r5, [r4, #1165]	; 0x48d
 8008fe8:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8008fec:	bf1e      	ittt	ne
 8008fee:	462b      	movne	r3, r5
 8008ff0:	f362 0300 	bfine	r3, r2, #0, #1
 8008ff4:	f884 348d 	strbne.w	r3, [r4, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008ff8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8008ffc:	075f      	lsls	r7, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8008ffe:	bf44      	itt	mi
 8009000:	f36f 0382 	bfcmi	r3, #2, #1
 8009004:	f884 348d 	strbmi.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 8009008:	2301      	movs	r3, #1
 800900a:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        if( reqEvents.Bits.McpsReq == 1 )
 800900e:	b121      	cbz	r1, 800901a <LoRaMacProcess+0x26a>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009010:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8009014:	4829      	ldr	r0, [pc, #164]	; (80090bc <LoRaMacProcess+0x30c>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800901a:	076e      	lsls	r6, r5, #29
 800901c:	d50b      	bpl.n	8009036 <LoRaMacProcess+0x286>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800901e:	4828      	ldr	r0, [pc, #160]	; (80090c0 <LoRaMacProcess+0x310>)
 8009020:	f001 fc96 	bl	800a950 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009024:	f001 fcbe 	bl	800a9a4 <LoRaMacConfirmQueueGetCnt>
 8009028:	b128      	cbz	r0, 8009036 <LoRaMacProcess+0x286>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800902a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800902e:	f043 0304 	orr.w	r3, r3, #4
 8009032:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        LoRaMacClassBResumeBeaconing( );
 8009036:	f00c f9c1 	bl	80153bc <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800903a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800903e:	f36f 1345 	bfc	r3, #5, #1
 8009042:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009046:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800904a:	b96b      	cbnz	r3, 8009068 <LoRaMacProcess+0x2b8>
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800904c:	a81c      	add	r0, sp, #112	; 0x70
        bool isStickyMacCommandPending = false;
 800904e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009052:	f001 fbb1 	bl	800a7b8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8009056:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800905a:	b12b      	cbz	r3, 8009068 <LoRaMacProcess+0x2b8>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800905c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8009060:	f043 0310 	orr.w	r3, r3, #16
 8009064:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 8009068:	2301      	movs	r3, #1
 800906a:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800906e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8009072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009076:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800907a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800907e:	071d      	lsls	r5, r3, #28
 8009080:	d522      	bpl.n	80090c8 <LoRaMacProcess+0x318>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009082:	f36f 03c3 	bfc	r3, #3, #1
 8009086:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800908a:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 800908e:	480d      	ldr	r0, [pc, #52]	; (80090c4 <LoRaMacProcess+0x314>)
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	4798      	blx	r3
 8009094:	e018      	b.n	80090c8 <LoRaMacProcess+0x318>
 8009096:	bf00      	nop
 8009098:	20001274 	.word	0x20001274
 800909c:	20001278 	.word	0x20001278
 80090a0:	20001790 	.word	0x20001790
 80090a4:	0801a484 	.word	0x0801a484
 80090a8:	20001600 	.word	0x20001600
 80090ac:	20001618 	.word	0x20001618
 80090b0:	20001678 	.word	0x20001678
 80090b4:	20001ea4 	.word	0x20001ea4
 80090b8:	20001e94 	.word	0x20001e94
 80090bc:	200016bc 	.word	0x200016bc
 80090c0:	200016d0 	.word	0x200016d0
 80090c4:	200016e4 	.word	0x200016e4
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 80090c8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80090cc:	06d8      	lsls	r0, r3, #27
 80090ce:	d50d      	bpl.n	80090ec <LoRaMacProcess+0x33c>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 80090d0:	2306      	movs	r3, #6
 80090d2:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 80090d6:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 80090da:	a81c      	add	r0, sp, #112	; 0x70
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 80090e0:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80090e4:	f36f 1304 	bfc	r3, #4, #1
 80090e8:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80090ec:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80090f0:	0799      	lsls	r1, r3, #30
 80090f2:	d508      	bpl.n	8009106 <LoRaMacProcess+0x356>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80090f4:	f36f 0341 	bfc	r3, #1, #1
 80090f8:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80090fc:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8009100:	4893      	ldr	r0, [pc, #588]	; (8009350 <LoRaMacProcess+0x5a0>)
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009106:	f894 348c 	ldrb.w	r3, [r4, #1164]	; 0x48c
 800910a:	2b02      	cmp	r3, #2
 800910c:	d101      	bne.n	8009112 <LoRaMacProcess+0x362>
        OpenContinuousRxCWindow( );
 800910e:	f7fe fe07 	bl	8007d20 <OpenContinuousRxCWindow>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8009112:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8009116:	065a      	lsls	r2, r3, #25
 8009118:	f140 8321 	bpl.w	800975e <LoRaMacProcess+0x9ae>
    if( MacCtx.MacState != LORAMAC_IDLE )
 800911c:	f8d4 5340 	ldr.w	r5, [r4, #832]	; 0x340
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8009120:	f36f 1386 	bfc	r3, #6, #1
 8009124:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009128:	2d00      	cmp	r5, #0
 800912a:	f040 8318 	bne.w	800975e <LoRaMacProcess+0x9ae>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800912e:	4e89      	ldr	r6, [pc, #548]	; (8009354 <LoRaMacProcess+0x5a4>)
 8009130:	2130      	movs	r1, #48	; 0x30
 8009132:	4630      	mov	r0, r6
 8009134:	f7fd fa64 	bl	8006600 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009138:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800913a:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
 800913c:	bf18      	it	ne
 800913e:	6330      	strne	r0, [r6, #48]	; 0x30
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009140:	f04f 0114 	mov.w	r1, #20
 8009144:	4884      	ldr	r0, [pc, #528]	; (8009358 <LoRaMacProcess+0x5a8>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009146:	bf18      	it	ne
 8009148:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800914a:	f7fd fa59 	bl	8006600 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800914e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8009150:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
 8009152:	bf18      	it	ne
 8009154:	64b0      	strne	r0, [r6, #72]	; 0x48
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009156:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800915a:	4880      	ldr	r0, [pc, #512]	; (800935c <LoRaMacProcess+0x5ac>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800915c:	bf18      	it	ne
 800915e:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009162:	f7fd fa4d 	bl	8006600 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009166:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 800916a:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
 800916c:	bf18      	it	ne
 800916e:	f8c6 01a0 	strne.w	r0, [r6, #416]	; 0x1a0
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009172:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8009176:	487a      	ldr	r0, [pc, #488]	; (8009360 <LoRaMacProcess+0x5b0>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009178:	bf18      	it	ne
 800917a:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800917e:	f7fd fa3f 	bl	8006600 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009182:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8009186:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
 8009188:	bf18      	it	ne
 800918a:	f8c6 0340 	strne.w	r0, [r6, #832]	; 0x340
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800918e:	f04f 0110 	mov.w	r1, #16
 8009192:	4874      	ldr	r0, [pc, #464]	; (8009364 <LoRaMacProcess+0x5b4>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009194:	bf18      	it	ne
 8009196:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800919a:	f7fd fa31 	bl	8006600 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800919e:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
 80091a2:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
 80091a4:	bf18      	it	ne
 80091a6:	f8c6 0354 	strne.w	r0, [r6, #852]	; 0x354
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80091aa:	f44f 715e 	mov.w	r1, #888	; 0x378
 80091ae:	486e      	ldr	r0, [pc, #440]	; (8009368 <LoRaMacProcess+0x5b8>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80091b0:	bf18      	it	ne
 80091b2:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80091b6:	f7fd fa23 	bl	8006600 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80091ba:	f8d6 36d0 	ldr.w	r3, [r6, #1744]	; 0x6d0
 80091be:	4298      	cmp	r0, r3
        nvmData->RegionGroup2.Crc32 = crc;
 80091c0:	bf18      	it	ne
 80091c2:	f8c6 06d0 	strne.w	r0, [r6, #1744]	; 0x6d0
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80091c6:	f04f 0114 	mov.w	r1, #20
 80091ca:	4868      	ldr	r0, [pc, #416]	; (800936c <LoRaMacProcess+0x5bc>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80091cc:	bf18      	it	ne
 80091ce:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80091d2:	f7fd fa15 	bl	8006600 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80091d6:	f8d6 36e8 	ldr.w	r3, [r6, #1768]	; 0x6e8
 80091da:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80091dc:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        nvmData->ClassB.Crc32 = crc;
 80091e0:	bf1c      	itt	ne
 80091e2:	f8c6 06e8 	strne.w	r0, [r6, #1768]	; 0x6e8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80091e6:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 82b7 	beq.w	800975e <LoRaMacProcess+0x9ae>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80091f0:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 82b3 	beq.w	800975e <LoRaMacProcess+0x9ae>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80091f8:	4628      	mov	r0, r5
}
 80091fa:	b029      	add	sp, #164	; 0xa4
 80091fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8009200:	4718      	bx	r3
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009202:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
 8009206:	e61a      	b.n	8008e3e <LoRaMacProcess+0x8e>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009208:	f895 2184 	ldrb.w	r2, [r5, #388]	; 0x184
 800920c:	2a01      	cmp	r2, #1
 800920e:	d10c      	bne.n	800922a <LoRaMacProcess+0x47a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009210:	f00c f8cc 	bl	80153ac <LoRaMacClassBIsPingExpected>
 8009214:	4682      	mov	sl, r0
 8009216:	b1c0      	cbz	r0, 800924a <LoRaMacProcess+0x49a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009218:	4658      	mov	r0, fp
 800921a:	f00c f8bc 	bl	8015396 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800921e:	4658      	mov	r0, fp
 8009220:	f00c f8be 	bl	80153a0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009224:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009226:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 800922a:	783b      	ldrb	r3, [r7, #0]
 800922c:	9304      	str	r3, [sp, #16]
    switch( macHdr.Bits.MType )
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	3b01      	subs	r3, #1
 8009232:	2b06      	cmp	r3, #6
 8009234:	f200 821d 	bhi.w	8009672 <LoRaMacProcess+0x8c2>
 8009238:	e8df f013 	tbh	[pc, r3, lsl #1]
 800923c:	021b0013 	.word	0x021b0013
 8009240:	021b009d 	.word	0x021b009d
 8009244:	021b009a 	.word	0x021b009a
 8009248:	020c      	.short	0x020c
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800924a:	f00c f8b1 	bl	80153b0 <LoRaMacClassBIsMulticastExpected>
 800924e:	2800      	cmp	r0, #0
 8009250:	d0eb      	beq.n	800922a <LoRaMacProcess+0x47a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009252:	4650      	mov	r0, sl
 8009254:	f00c f8a0 	bl	8015398 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009258:	4650      	mov	r0, sl
 800925a:	f00c f8a2 	bl	80153a2 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800925e:	2305      	movs	r3, #5
 8009260:	e7e1      	b.n	8009226 <LoRaMacProcess+0x476>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8009262:	2e10      	cmp	r6, #16
 8009264:	d803      	bhi.n	800926e <LoRaMacProcess+0x4be>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 800926c:	e12e      	b.n	80094cc <LoRaMacProcess+0x71c>
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800926e:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
            macMsgJoinAccept.Buffer = payload;
 8009272:	9712      	str	r7, [sp, #72]	; 0x48
            macMsgJoinAccept.BufSize = size;
 8009274:	b2f6      	uxtb	r6, r6
 8009276:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1f3      	bne.n	8009266 <LoRaMacProcess+0x4b6>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800927e:	f7fe fc43 	bl	8007b08 <SecureElementGetJoinEui>
 8009282:	aa12      	add	r2, sp, #72	; 0x48
 8009284:	4601      	mov	r1, r0
 8009286:	20ff      	movs	r0, #255	; 0xff
 8009288:	f001 fdb2 	bl	800adf0 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800928c:	2800      	cmp	r0, #0
 800928e:	d157      	bne.n	8009340 <LoRaMacProcess+0x590>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009290:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009294:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009298:	041b      	lsls	r3, r3, #16
 800929a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800929e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80092a2:	4313      	orrs	r3, r2
 80092a4:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80092a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092aa:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80092ae:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80092b2:	f3c3 1202 	ubfx	r2, r3, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80092b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80092ba:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80092be:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80092c2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80092c6:	f885 206d 	strb.w	r2, [r5, #109]	; 0x6d
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80092ca:	b3bb      	cbz	r3, 800933c <LoRaMacProcess+0x58c>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80092cc:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80092ce:	6deb      	ldr	r3, [r5, #92]	; 0x5c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80092d0:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80092d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092d8:	4353      	muls	r3, r2
 80092da:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80092dc:	4413      	add	r3, r2
 80092de:	662b      	str	r3, [r5, #96]	; 0x60
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80092e0:	f10d 035a 	add.w	r3, sp, #90	; 0x5a
 80092e4:	9310      	str	r3, [sp, #64]	; 0x40
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80092e6:	2700      	movs	r7, #0
                applyCFList.JoinChannel = MacCtx.Channel;
 80092e8:	f894 341b 	ldrb.w	r3, [r4, #1051]	; 0x41b
 80092ec:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
                applyCFList.Size = size - 17;
 80092f0:	3e11      	subs	r6, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80092f2:	a90f      	add	r1, sp, #60	; 0x3c
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80092f4:	f885 719a 	strb.w	r7, [r5, #410]	; 0x19a
                applyCFList.Size = size - 17;
 80092f8:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80092fc:	f00c fab8 	bl	8015870 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009300:	2302      	movs	r3, #2
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009302:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009304:	f885 319c 	strb.w	r3, [r5, #412]	; 0x19c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009308:	f001 fb16 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 800930c:	b118      	cbz	r0, 8009316 <LoRaMacProcess+0x566>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800930e:	2101      	movs	r1, #1
 8009310:	4638      	mov	r0, r7
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009312:	f001 fad5 	bl	800a8c0 <LoRaMacConfirmQueueSetStatus>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8009316:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 800931a:	2b01      	cmp	r3, #1
 800931c:	f200 81b7 	bhi.w	800968e <LoRaMacProcess+0x8de>
        if( MacCtx.NodeAckRequested == true )
 8009320:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8009324:	2b00      	cmp	r3, #0
 8009326:	f040 81aa 	bne.w	800967e <LoRaMacProcess+0x8ce>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800932a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800932e:	f043 0320 	orr.w	r3, r3, #32
 8009332:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
 8009336:	f7fe fc39 	bl	8007bac <UpdateRxSlotIdleState>
 800933a:	e5fa      	b.n	8008f32 <LoRaMacProcess+0x182>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800933c:	2301      	movs	r3, #1
 800933e:	e7c5      	b.n	80092cc <LoRaMacProcess+0x51c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009340:	2001      	movs	r0, #1
 8009342:	f001 faf9 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 8009346:	2800      	cmp	r0, #0
 8009348:	d0e5      	beq.n	8009316 <LoRaMacProcess+0x566>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800934a:	2101      	movs	r1, #1
 800934c:	2007      	movs	r0, #7
 800934e:	e7e0      	b.n	8009312 <LoRaMacProcess+0x562>
 8009350:	20001698 	.word	0x20001698
 8009354:	20001790 	.word	0x20001790
 8009358:	200017c4 	.word	0x200017c4
 800935c:	200017dc 	.word	0x200017dc
 8009360:	20001934 	.word	0x20001934
 8009364:	20001ad4 	.word	0x20001ad4
 8009368:	20001ae8 	.word	0x20001ae8
 800936c:	20001e64 	.word	0x20001e64
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009370:	2301      	movs	r3, #1
 8009372:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009376:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
 800937a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800937e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
 8009382:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009386:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800938a:	230d      	movs	r3, #13
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800938c:	a90b      	add	r1, sp, #44	; 0x2c
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800938e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009392:	f00c fa4e 	bl	8015832 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009396:	f1a6 030d 	sub.w	r3, r6, #13
 800939a:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800939c:	9009      	str	r0, [sp, #36]	; 0x24
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800939e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093a2:	b200      	sxth	r0, r0
 80093a4:	4283      	cmp	r3, r0
 80093a6:	f73f af5e 	bgt.w	8009266 <LoRaMacProcess+0x4b6>
 80093aa:	2e0b      	cmp	r6, #11
 80093ac:	f67f af5b 	bls.w	8009266 <LoRaMacProcess+0x4b6>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80093b0:	4bba      	ldr	r3, [pc, #744]	; (800969c <LoRaMacProcess+0x8ec>)
 80093b2:	9325      	str	r3, [sp, #148]	; 0x94
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80093b4:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80093b8:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80093ba:	4658      	mov	r0, fp
            macMsgData.Buffer = payload;
 80093bc:	971c      	str	r7, [sp, #112]	; 0x70
            macMsgData.BufSize = size;
 80093be:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80093c2:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80093c6:	f00c f934 	bl	8015632 <LoRaMacParserData>
 80093ca:	4607      	mov	r7, r0
 80093cc:	2800      	cmp	r0, #0
 80093ce:	f47f af4a 	bne.w	8009266 <LoRaMacProcess+0x4b6>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80093d2:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d114      	bne.n	8009404 <LoRaMacProcess+0x654>
                if( LoRaMacClassBIsPingExpected( ) == true )
 80093da:	f00b ffe7 	bl	80153ac <LoRaMacClassBIsPingExpected>
 80093de:	4606      	mov	r6, r0
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d043      	beq.n	800946c <LoRaMacProcess+0x6bc>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80093e4:	4638      	mov	r0, r7
 80093e6:	f00b ffd6 	bl	8015396 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80093ea:	4638      	mov	r0, r7
 80093ec:	f00b ffd8 	bl	80153a0 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80093f0:	2304      	movs	r3, #4
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80093f2:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80093f6:	981e      	ldr	r0, [sp, #120]	; 0x78
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80093f8:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80093fc:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009400:	f00b ffed 	bl	80153de <LoRaMacClassBSetFPendingBit>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009404:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009406:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800940a:	a90f      	add	r1, sp, #60	; 0x3c
 800940c:	4658      	mov	r0, fp
 800940e:	f00b ff32 	bl	8015276 <DetermineFrameType>
 8009412:	4607      	mov	r7, r0
 8009414:	2800      	cmp	r0, #0
 8009416:	f47f af26 	bne.w	8009266 <LoRaMacProcess+0x4b6>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800941a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800941c:	4ba0      	ldr	r3, [pc, #640]	; (80096a0 <LoRaMacProcess+0x8f0>)
            downLinkCounter = 0;
 800941e:	900a      	str	r0, [sp, #40]	; 0x28
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009420:	4682      	mov	sl, r0
 8009422:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8009426:	428a      	cmp	r2, r1
 8009428:	d12c      	bne.n	8009484 <LoRaMacProcess+0x6d4>
 800942a:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
 800942e:	b348      	cbz	r0, 8009484 <LoRaMacProcess+0x6d4>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009430:	232c      	movs	r3, #44	; 0x2c
 8009432:	fb03 530a 	mla	r3, r3, sl, r5
 8009436:	f893 a0d7 	ldrb.w	sl, [r3, #215]	; 0xd7
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800943a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	930a      	str	r3, [sp, #40]	; 0x28
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009442:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8009446:	2b02      	cmp	r3, #2
 8009448:	d102      	bne.n	8009450 <LoRaMacProcess+0x6a0>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800944a:	2303      	movs	r3, #3
 800944c:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009450:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8009454:	2b03      	cmp	r3, #3
 8009456:	f47f af06 	bne.w	8009266 <LoRaMacProcess+0x4b6>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800945a:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 800945e:	f013 0f60 	tst.w	r3, #96	; 0x60
 8009462:	f47f af00 	bne.w	8009266 <LoRaMacProcess+0x4b6>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009466:	9205      	str	r2, [sp, #20]
 8009468:	2701      	movs	r7, #1
 800946a:	e012      	b.n	8009492 <LoRaMacProcess+0x6e2>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800946c:	f00b ffa0 	bl	80153b0 <LoRaMacClassBIsMulticastExpected>
 8009470:	2800      	cmp	r0, #0
 8009472:	d0c7      	beq.n	8009404 <LoRaMacProcess+0x654>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009474:	4630      	mov	r0, r6
 8009476:	f00b ff8f 	bl	8015398 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800947a:	4630      	mov	r0, r6
 800947c:	f00b ff91 	bl	80153a2 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009480:	2305      	movs	r3, #5
 8009482:	e7b6      	b.n	80093f2 <LoRaMacProcess+0x642>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009484:	f10a 0a01 	add.w	sl, sl, #1
 8009488:	f1ba 0f04 	cmp.w	sl, #4
 800948c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8009490:	d1c7      	bne.n	8009422 <LoRaMacProcess+0x672>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8009492:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8009496:	f895 619a 	ldrb.w	r6, [r5, #410]	; 0x19a
    switch( addrID )
 800949a:	f1ba 0f04 	cmp.w	sl, #4
 800949e:	d829      	bhi.n	80094f4 <LoRaMacProcess+0x744>
 80094a0:	e8df f00a 	tbb	[pc, sl]
 80094a4:	201e0322 	.word	0x201e0322
 80094a8:	17          	.byte	0x17
 80094a9:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_1;
 80094aa:	2605      	movs	r6, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80094ac:	f8bd 107e 	ldrh.w	r1, [sp, #126]	; 0x7e
 80094b0:	aa0a      	add	r2, sp, #40	; 0x28
 80094b2:	4630      	mov	r0, r6
 80094b4:	f00c f831 	bl	801551a <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80094b8:	b1f0      	cbz	r0, 80094f8 <LoRaMacProcess+0x748>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80094ba:	2807      	cmp	r0, #7
 80094bc:	bf0c      	ite	eq
 80094be:	2308      	moveq	r3, #8
 80094c0:	2301      	movne	r3, #1
 80094c2:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80094c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c8:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 80094cc:	f7fe fbaa 	bl	8007c24 <PrepareRxDoneAbort>
                return;
 80094d0:	e52f      	b.n	8008f32 <LoRaMacProcess+0x182>
            if( lrWanVersion.Fields.Minor == 1 )
 80094d2:	2e01      	cmp	r6, #1
 80094d4:	d10a      	bne.n	80094ec <LoRaMacProcess+0x73c>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80094d6:	b15b      	cbz	r3, 80094f0 <LoRaMacProcess+0x740>
                    *fCntID = A_FCNT_DOWN;
 80094d8:	2b03      	cmp	r3, #3
 80094da:	bf08      	it	eq
 80094dc:	2602      	moveq	r6, #2
 80094de:	e7e5      	b.n	80094ac <LoRaMacProcess+0x6fc>
            *fCntID = MC_FCNT_DOWN_2;
 80094e0:	2606      	movs	r6, #6
            break;
 80094e2:	e7e3      	b.n	80094ac <LoRaMacProcess+0x6fc>
            *fCntID = MC_FCNT_DOWN_3;
 80094e4:	2607      	movs	r6, #7
            break;
 80094e6:	e7e1      	b.n	80094ac <LoRaMacProcess+0x6fc>
    switch( addrID )
 80094e8:	2604      	movs	r6, #4
 80094ea:	e7df      	b.n	80094ac <LoRaMacProcess+0x6fc>
                *fCntID = FCNT_DOWN;
 80094ec:	2603      	movs	r6, #3
 80094ee:	e7dd      	b.n	80094ac <LoRaMacProcess+0x6fc>
                    *fCntID = A_FCNT_DOWN;
 80094f0:	2602      	movs	r6, #2
 80094f2:	e7db      	b.n	80094ac <LoRaMacProcess+0x6fc>
    switch( addrID )
 80094f4:	2301      	movs	r3, #1
 80094f6:	e7e4      	b.n	80094c2 <LoRaMacProcess+0x712>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80094f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fa:	9905      	ldr	r1, [sp, #20]
 80094fc:	f8cd b000 	str.w	fp, [sp]
 8009500:	4632      	mov	r2, r6
 8009502:	4650      	mov	r0, sl
 8009504:	f001 fbd2 	bl	800acac <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009508:	b120      	cbz	r0, 8009514 <LoRaMacProcess+0x764>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800950a:	2802      	cmp	r0, #2
 800950c:	bf0c      	ite	eq
 800950e:	230a      	moveq	r3, #10
 8009510:	230b      	movne	r3, #11
 8009512:	e6a9      	b.n	8009268 <LoRaMacProcess+0x4b8>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009514:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009518:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800951c:	f3c3 1200 	ubfx	r2, r3, #4, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009520:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009524:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009528:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800952c:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8009530:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8009534:	2b01      	cmp	r3, #1
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009538:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
                Nvm.MacGroup2.DownlinkReceived = true;
 800953c:	bf9e      	ittt	ls
 800953e:	2201      	movls	r2, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009540:	6368      	strls	r0, [r5, #52]	; 0x34
                Nvm.MacGroup2.DownlinkReceived = true;
 8009542:	f885 218a 	strbls.w	r2, [r5, #394]	; 0x18a
            if( multicast == 1 )
 8009546:	2f01      	cmp	r7, #1
            MacCtx.McpsIndication.Multicast = multicast;
 8009548:	f884 7422 	strb.w	r7, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800954c:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8009550:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009554:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            if( multicast == 1 )
 8009558:	d103      	bne.n	8009562 <LoRaMacProcess+0x7b2>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800955a:	2202      	movs	r2, #2
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800955c:	f884 2420 	strb.w	r2, [r4, #1056]	; 0x420
 8009560:	e018      	b.n	8009594 <LoRaMacProcess+0x7e4>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009562:	9a04      	ldr	r2, [sp, #16]
 8009564:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 8009568:	2aa0      	cmp	r2, #160	; 0xa0
 800956a:	d127      	bne.n	80095bc <LoRaMacProcess+0x80c>
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800956c:	f895 119a 	ldrb.w	r1, [r5, #410]	; 0x19a
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009570:	2201      	movs	r2, #1
 8009572:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009576:	b909      	cbnz	r1, 800957c <LoRaMacProcess+0x7cc>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009578:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800957a:	6429      	str	r1, [r5, #64]	; 0x40
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800957c:	2b01      	cmp	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800957e:	f884 2420 	strb.w	r2, [r4, #1056]	; 0x420
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8009582:	d907      	bls.n	8009594 <LoRaMacProcess+0x7e4>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
 8009584:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009588:	f8c4 2440 	str.w	r2, [r4, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800958c:	f8d9 2000 	ldr.w	r2, [r9]
 8009590:	f8c4 2494 	str.w	r2, [r4, #1172]	; 0x494
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009594:	2b01      	cmp	r3, #1
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009596:	f894 1444 	ldrb.w	r1, [r4, #1092]	; 0x444
 800959a:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800959e:	d805      	bhi.n	80095ac <LoRaMacProcess+0x7fc>
        if( request == MCPS_CONFIRMED )
 80095a0:	2901      	cmp	r1, #1
 80095a2:	d101      	bne.n	80095a8 <LoRaMacProcess+0x7f8>
            if( fCtrl.Bits.Ack == 1 )
 80095a4:	0696      	lsls	r6, r2, #26
 80095a6:	d501      	bpl.n	80095ac <LoRaMacProcess+0x7fc>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80095a8:	f001 f8b0 	bl	800a70c <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 80095ac:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d849      	bhi.n	8009648 <LoRaMacProcess+0x898>
 80095b4:	e8df f003 	tbb	[pc, r3]
 80095b8:	10411f06 	.word	0x10411f06
                    Nvm.MacGroup1.SrvAckRequested = false;
 80095bc:	2200      	movs	r2, #0
 80095be:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
 80095c2:	e7cb      	b.n	800955c <LoRaMacProcess+0x7ac>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80095c4:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80095c8:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80095cc:	4642      	mov	r2, r8
 80095ce:	f001 010f 	and.w	r1, r1, #15
 80095d2:	a820      	add	r0, sp, #128	; 0x80
 80095d4:	f7fe fd90 	bl	80080f8 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80095d8:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 80095dc:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80095e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80095e2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80095e6:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 80095ea:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80095ee:	2301      	movs	r3, #1
 80095f0:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
                    break;
 80095f4:	e00d      	b.n	8009612 <LoRaMacProcess+0x862>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80095f6:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80095fa:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80095fe:	4642      	mov	r2, r8
 8009600:	f001 010f 	and.w	r1, r1, #15
 8009604:	a820      	add	r0, sp, #128	; 0x80
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8009606:	f7fe fd77 	bl	80080f8 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800960a:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 800960e:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009612:	f89d 2090 	ldrb.w	r2, [sp, #144]	; 0x90
 8009616:	2ae0      	cmp	r2, #224	; 0xe0
 8009618:	d108      	bne.n	800962c <LoRaMacProcess+0x87c>
 800961a:	f895 318b 	ldrb.w	r3, [r5, #395]	; 0x18b
 800961e:	b92b      	cbnz	r3, 800962c <LoRaMacProcess+0x87c>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009620:	f884 2423 	strb.w	r2, [r4, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8009624:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8009628:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800962c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8009630:	f043 0302 	orr.w	r3, r3, #2
 8009634:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            break;
 8009638:	e66d      	b.n	8009316 <LoRaMacProcess+0x566>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800963a:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 800963e:	f89d 1098 	ldrb.w	r1, [sp, #152]	; 0x98
 8009642:	9825      	ldr	r0, [sp, #148]	; 0x94
 8009644:	4642      	mov	r2, r8
 8009646:	e7de      	b.n	8009606 <LoRaMacProcess+0x856>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800964e:	f7fe fae9 	bl	8007c24 <PrepareRxDoneAbort>
                    break;
 8009652:	e7de      	b.n	8009612 <LoRaMacProcess+0x862>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009654:	4d11      	ldr	r5, [pc, #68]	; (800969c <LoRaMacProcess+0x8ec>)
 8009656:	3e01      	subs	r6, #1
 8009658:	b2b2      	uxth	r2, r6
 800965a:	1c79      	adds	r1, r7, #1
 800965c:	4628      	mov	r0, r5
 800965e:	f00a ffd2 	bl	8014606 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009662:	2303      	movs	r3, #3
 8009664:	f8a4 3420 	strh.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009668:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800966c:	f884 642c 	strb.w	r6, [r4, #1068]	; 0x42c
 8009670:	e7dc      	b.n	800962c <LoRaMacProcess+0x87c>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8009678:	f7fe fad4 	bl	8007c24 <PrepareRxDoneAbort>
            break;
 800967c:	e64b      	b.n	8009316 <LoRaMacProcess+0x566>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800967e:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 8009682:	2b00      	cmp	r3, #0
 8009684:	f43f ae51 	beq.w	800932a <LoRaMacProcess+0x57a>
                OnRetransmitTimeoutTimerEvent( NULL );
 8009688:	2000      	movs	r0, #0
 800968a:	f7fe fab3 	bl	8007bf4 <OnRetransmitTimeoutTimerEvent>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 800968e:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8009692:	2b02      	cmp	r3, #2
 8009694:	f43f ae4f 	beq.w	8009336 <LoRaMacProcess+0x586>
 8009698:	e647      	b.n	800932a <LoRaMacProcess+0x57a>
 800969a:	bf00      	nop
 800969c:	200014b0 	.word	0x200014b0
 80096a0:	20001790 	.word	0x20001790
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80096a4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80096a8:	0758      	lsls	r0, r3, #29
 80096aa:	d515      	bpl.n	80096d8 <LoRaMacProcess+0x928>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80096ac:	2001      	movs	r0, #1
 80096ae:	f001 f943 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 80096b2:	b160      	cbz	r0, 80096ce <LoRaMacProcess+0x91e>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80096b4:	2001      	movs	r0, #1
 80096b6:	f001 f915 	bl	800a8e4 <LoRaMacConfirmQueueGetStatus>
 80096ba:	b908      	cbnz	r0, 80096c0 <LoRaMacProcess+0x910>
                MacCtx.ChannelsNbTransCounter = 0;
 80096bc:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80096c0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80096c4:	f023 0302 	bic.w	r3, r3, #2
 80096c8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
 80096cc:	e004      	b.n	80096d8 <LoRaMacProcess+0x928>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 80096ce:	2005      	movs	r0, #5
 80096d0:	f001 f932 	bl	800a938 <LoRaMacConfirmQueueIsCmdActive>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1f3      	bne.n	80096c0 <LoRaMacProcess+0x910>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80096d8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80096dc:	07d9      	lsls	r1, r3, #31
 80096de:	f57f ac7d 	bpl.w	8008fdc <LoRaMacProcess+0x22c>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80096e2:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
 80096e6:	b10a      	cbz	r2, 80096ec <LoRaMacProcess+0x93c>
 80096e8:	2a03      	cmp	r2, #3
 80096ea:	d118      	bne.n	800971e <LoRaMacProcess+0x96e>
    if( counter >= limit )
 80096ec:	4a1d      	ldr	r2, [pc, #116]	; (8009764 <LoRaMacProcess+0x9b4>)
 80096ee:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
 80096f2:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 80096f6:	4291      	cmp	r1, r2
 80096f8:	d205      	bcs.n	8009706 <LoRaMacProcess+0x956>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80096fa:	079a      	lsls	r2, r3, #30
 80096fc:	d523      	bpl.n	8009746 <LoRaMacProcess+0x996>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 80096fe:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8009702:	2b01      	cmp	r3, #1
 8009704:	d81f      	bhi.n	8009746 <LoRaMacProcess+0x996>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009706:	4818      	ldr	r0, [pc, #96]	; (8009768 <LoRaMacProcess+0x9b8>)
 8009708:	f7fd f814 	bl	8006734 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800970c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009710:	f023 0320 	bic.w	r3, r3, #32
 8009714:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 8009718:	f7fe fff2 	bl	8008700 <StopRetransmission.isra.0>
 800971c:	e45e      	b.n	8008fdc <LoRaMacProcess+0x22c>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800971e:	2a01      	cmp	r2, #1
 8009720:	d111      	bne.n	8009746 <LoRaMacProcess+0x996>
            if( MacCtx.RetransmitTimeoutRetry == true )
 8009722:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 8009726:	2a00      	cmp	r2, #0
 8009728:	f43f ac58 	beq.w	8008fdc <LoRaMacProcess+0x22c>
    if( counter >= limit )
 800972c:	4a0d      	ldr	r2, [pc, #52]	; (8009764 <LoRaMacProcess+0x9b4>)
 800972e:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
 8009732:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8009736:	4291      	cmp	r1, r2
 8009738:	d2e5      	bcs.n	8009706 <LoRaMacProcess+0x956>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800973a:	079b      	lsls	r3, r3, #30
 800973c:	d503      	bpl.n	8009746 <LoRaMacProcess+0x996>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800973e:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1df      	bne.n	8009706 <LoRaMacProcess+0x956>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009746:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 800974a:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 800974c:	f36f 1345 	bfc	r3, #5, #1
 8009750:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 8009754:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8009758:	f7ff fa34 	bl	8008bc4 <OnTxDelayedTimerEvent>
 800975c:	e43e      	b.n	8008fdc <LoRaMacProcess+0x22c>
}
 800975e:	b029      	add	sp, #164	; 0xa4
 8009760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	20001790 	.word	0x20001790
 8009768:	200015e8 	.word	0x200015e8

0800976c <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	4689      	mov	r9, r1
 8009772:	b08b      	sub	sp, #44	; 0x2c
 8009774:	4690      	mov	r8, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8009776:	4606      	mov	r6, r0
 8009778:	2800      	cmp	r0, #0
 800977a:	f000 817b 	beq.w	8009a74 <LoRaMacInitialization+0x308>
 800977e:	2900      	cmp	r1, #0
 8009780:	f000 8178 	beq.w	8009a74 <LoRaMacInitialization+0x308>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009784:	6803      	ldr	r3, [r0, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8174 	beq.w	8009a74 <LoRaMacInitialization+0x308>
 800978c:	6843      	ldr	r3, [r0, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 8170 	beq.w	8009a74 <LoRaMacInitialization+0x308>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009794:	6883      	ldr	r3, [r0, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 816c 	beq.w	8009a74 <LoRaMacInitialization+0x308>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800979c:	68c3      	ldr	r3, [r0, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 8168 	beq.w	8009a74 <LoRaMacInitialization+0x308>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80097a4:	4610      	mov	r0, r2
 80097a6:	f00c f83f 	bl	8015828 <RegionIsActive>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	f000 8164 	beq.w	8009a78 <LoRaMacInitialization+0x30c>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80097b0:	4cb3      	ldr	r4, [pc, #716]	; (8009a80 <LoRaMacInitialization+0x314>)
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80097b2:	4db4      	ldr	r5, [pc, #720]	; (8009a84 <LoRaMacInitialization+0x318>)
    LoRaMacConfirmQueueInit( primitives );
 80097b4:	4630      	mov	r0, r6
 80097b6:	f001 f839 	bl	800a82c <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80097ba:	f240 62ec 	movw	r2, #1772	; 0x6ec
 80097be:	2100      	movs	r1, #0
 80097c0:	4620      	mov	r0, r4
 80097c2:	f00a ff34 	bl	801462e <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80097c6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 80097ca:	2100      	movs	r1, #0
 80097cc:	4628      	mov	r0, r5
 80097ce:	f00a ff2e 	bl	801462e <memset1>
    // Set non zero variables to its default value
    Nvm.MacGroup2.Region = region;
    Nvm.MacGroup2.DeviceClass = CLASS_A;

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80097d2:	4bad      	ldr	r3, [pc, #692]	; (8009a88 <LoRaMacInitialization+0x31c>)
 80097d4:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80097d8:	f504 7351 	add.w	r3, r4, #836	; 0x344
 80097dc:	9306      	str	r3, [sp, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80097de:	f504 7356 	add.w	r3, r4, #856	; 0x358
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80097e2:	2700      	movs	r7, #0
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80097e4:	4640      	mov	r0, r8
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80097e6:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80097e8:	a906      	add	r1, sp, #24
    params.Bands = &RegionBands;
 80097ea:	4ba8      	ldr	r3, [pc, #672]	; (8009a8c <LoRaMacInitialization+0x320>)
    Nvm.MacGroup2.Region = region;
 80097ec:	f884 804c 	strb.w	r8, [r4, #76]	; 0x4c
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80097f0:	f884 7184 	strb.w	r7, [r4, #388]	; 0x184
    params.Type = INIT_TYPE_DEFAULTS;
 80097f4:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    params.Bands = &RegionBands;
 80097f8:	9308      	str	r3, [sp, #32]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80097fa:	f00c f82a 	bl	8015852 <RegionInitDefaults>

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80097fe:	230e      	movs	r3, #14
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009800:	a904      	add	r1, sp, #16
 8009802:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009806:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800980a:	f00c f812 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800980e:	1bc0      	subs	r0, r0, r7
 8009810:	bf18      	it	ne
 8009812:	2001      	movne	r0, #1

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009814:	f04f 0b0a 	mov.w	fp, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009818:	f884 0188 	strb.w	r0, [r4, #392]	; 0x188
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800981c:	a904      	add	r1, sp, #16
 800981e:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009822:	f88d b010 	strb.w	fp, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009826:	f00c f804 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 800982a:	f04f 0a06 	mov.w	sl, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800982e:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009832:	a904      	add	r1, sp, #16
 8009834:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_TX_DR;
 8009838:	f88d a010 	strb.w	sl, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800983c:	f00b fff9 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009840:	230f      	movs	r3, #15
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009842:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009846:	a904      	add	r1, sp, #16
 8009848:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800984c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009850:	f00b ffef 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009854:	2310      	movs	r3, #16
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009856:	eb0d 0103 	add.w	r1, sp, r3
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800985a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800985e:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009862:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009866:	f00b ffe4 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800986a:	2311      	movs	r3, #17
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800986c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009870:	a904      	add	r1, sp, #16
 8009872:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009876:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800987a:	f00b ffda 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800987e:	2312      	movs	r3, #18
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009880:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009884:	a904      	add	r1, sp, #16
 8009886:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800988a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800988e:	f00b ffd0 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009892:	2313      	movs	r3, #19
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009894:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009898:	a904      	add	r1, sp, #16
 800989a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800989e:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098a2:	f00b ffc6 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80098a6:	2315      	movs	r3, #21
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80098a8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80098b2:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098b6:	f00b ffbc 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80098ba:	2316      	movs	r3, #22
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80098bc:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098c0:	a904      	add	r1, sp, #16
 80098c2:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80098c6:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098ca:	f00b ffb2 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80098ce:	2317      	movs	r3, #23
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80098d0:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80098d4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098d8:	a904      	add	r1, sp, #16
 80098da:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_RX2_DR;
 80098de:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098e2:	f00b ffa6 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80098e6:	b2c0      	uxtb	r0, r0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80098e8:	231c      	movs	r3, #28
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80098ea:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80098ee:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098f2:	a904      	add	r1, sp, #16
 80098f4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80098f8:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098fc:	f00b ff99 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009900:	231d      	movs	r3, #29
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009902:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009906:	a904      	add	r1, sp, #16
 8009908:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800990c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009910:	f00b ff8f 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009914:	231e      	movs	r3, #30
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009916:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800991a:	a904      	add	r1, sp, #16
 800991c:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009920:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009924:	f00b ff85 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009928:	231f      	movs	r3, #31
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800992a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800992e:	a904      	add	r1, sp, #16
 8009930:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009934:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009938:	f00b ff7b 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800993c:	230b      	movs	r3, #11
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800993e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009942:	a904      	add	r1, sp, #16
 8009944:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009948:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800994c:	f00b ff71 	bl	8015832 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009950:	230c      	movs	r3, #12
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009952:	a904      	add	r1, sp, #16
    MacCtx.AdrAckLimit = phyParam.Value;
 8009954:	f8a5 03fc 	strh.w	r0, [r5, #1020]	; 0x3fc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009958:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800995c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009960:	f00b ff67 	bl	8015832 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009964:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009968:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800996a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800996e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8009970:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009974:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8009976:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800997a:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800997c:	f04f 0801 	mov.w	r8, #1
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8009980:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8009984:	66a3      	str	r3, [r4, #104]	; 0x68
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009986:	9003      	str	r0, [sp, #12]
    MacCtx.AdrAckDelay = phyParam.Value;
 8009988:	f8a5 03fe 	strh.w	r0, [r5, #1022]	; 0x3fe
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800998c:	f884 80a8 	strb.w	r8, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009990:	f8c4 b08c 	str.w	fp, [r4, #140]	; 0x8c
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8009994:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8009998:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800999c:	f884 a054 	strb.w	sl, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80099a0:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c

    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80099a4:	f884 818b 	strb.w	r8, [r4, #395]	; 0x18b

    ResetMacParameters( );
 80099a8:	f7fe faa6 	bl	8007ef8 <ResetMacParameters>
    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80099ac:	4938      	ldr	r1, [pc, #224]	; (8009a90 <LoRaMacInitialization+0x324>)
    MacCtx.MacFlags.Value = 0;
 80099ae:	f885 748d 	strb.w	r7, [r5, #1165]	; 0x48d
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80099b2:	f505 705c 	add.w	r0, r5, #880	; 0x370
    MacCtx.MacCallbacks = callbacks;
 80099b6:	e9c5 69d1 	strd	r6, r9, [r5, #836]	; 0x344
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80099ba:	e9c4 770e 	strd	r7, r7, [r4, #56]	; 0x38
    Nvm.MacGroup2.PublicNetwork = true;
 80099be:	f884 8185 	strb.w	r8, [r4, #389]	; 0x185
    MacCtx.MacState = LORAMAC_STOPPED;
 80099c2:	f8c5 8340 	str.w	r8, [r5, #832]	; 0x340
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80099c6:	f00a ff1a 	bl	80147fe <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80099ca:	4932      	ldr	r1, [pc, #200]	; (8009a94 <LoRaMacInitialization+0x328>)
 80099cc:	f505 7062 	add.w	r0, r5, #904	; 0x388
 80099d0:	f00a ff15 	bl	80147fe <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80099d4:	4930      	ldr	r1, [pc, #192]	; (8009a98 <LoRaMacInitialization+0x32c>)
 80099d6:	f505 7068 	add.w	r0, r5, #928	; 0x3a0
 80099da:	f00a ff10 	bl	80147fe <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80099de:	466e      	mov	r6, sp
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80099e0:	492e      	ldr	r1, [pc, #184]	; (8009a9c <LoRaMacInitialization+0x330>)
 80099e2:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80099e6:	f00a ff0a 	bl	80147fe <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80099ea:	4630      	mov	r0, r6
 80099ec:	f00a fea0 	bl	8014730 <SysTimeGetMcuTime>
 80099f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80099f4:	f504 73c8 	add.w	r3, r4, #400	; 0x190
 80099f8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80099fc:	4b28      	ldr	r3, [pc, #160]	; (8009aa0 <LoRaMacInitialization+0x334>)
 80099fe:	601f      	str	r7, [r3, #0]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <LoRaMacInitialization+0x338>)
 8009a02:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8009a06:	4b28      	ldr	r3, [pc, #160]	; (8009aa8 <LoRaMacInitialization+0x33c>)
 8009a08:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009a0c:	4b27      	ldr	r3, [pc, #156]	; (8009aac <LoRaMacInitialization+0x340>)
 8009a0e:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 8009a12:	4f27      	ldr	r7, [pc, #156]	; (8009ab0 <LoRaMacInitialization+0x344>)
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009a14:	4b27      	ldr	r3, [pc, #156]	; (8009ab4 <LoRaMacInitialization+0x348>)
 8009a16:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009a1a:	4b27      	ldr	r3, [pc, #156]	; (8009ab8 <LoRaMacInitialization+0x34c>)
 8009a1c:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8009a20:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8009a28:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 8009a2c:	f7fd ff34 	bl	8007898 <SecureElementInit>
 8009a30:	b120      	cbz	r0, 8009a3c <LoRaMacInitialization+0x2d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a32:	2611      	movs	r6, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8009a34:	4630      	mov	r0, r6
 8009a36:	b00b      	add	sp, #44	; 0x2c
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f001 f857 	bl	800aaf0 <LoRaMacCryptoInit>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d1f5      	bne.n	8009a32 <LoRaMacInitialization+0x2c6>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8009a46:	f000 fdc7 	bl	800a5d8 <LoRaMacCommandsInit>
 8009a4a:	b9b8      	cbnz	r0, 8009a7c <LoRaMacInitialization+0x310>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8009a4c:	481b      	ldr	r0, [pc, #108]	; (8009abc <LoRaMacInitialization+0x350>)
 8009a4e:	f001 f881 	bl	800ab54 <LoRaMacCryptoSetMulticastReference>
 8009a52:	4606      	mov	r6, r0
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d1ec      	bne.n	8009a32 <LoRaMacInitialization+0x2c6>
    srand1( Radio.Random( ) );
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	4798      	blx	r3
 8009a5c:	f7fc fdca 	bl	80065f4 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a62:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
 8009a66:	4798      	blx	r3
    Radio.Sleep( );
 8009a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6a:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f885 348e 	strb.w	r3, [r5, #1166]	; 0x48e
    return LORAMAC_STATUS_OK;
 8009a72:	e7df      	b.n	8009a34 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009a74:	2603      	movs	r6, #3
 8009a76:	e7dd      	b.n	8009a34 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009a78:	2609      	movs	r6, #9
 8009a7a:	e7db      	b.n	8009a34 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009a7c:	2613      	movs	r6, #19
 8009a7e:	e7d9      	b.n	8009a34 <LoRaMacInitialization+0x2c8>
 8009a80:	20001790 	.word	0x20001790
 8009a84:	20001278 	.word	0x20001278
 8009a88:	01000400 	.word	0x01000400
 8009a8c:	20001e7c 	.word	0x20001e7c
 8009a90:	08008bc5 	.word	0x08008bc5
 8009a94:	08008069 	.word	0x08008069
 8009a98:	080080ad 	.word	0x080080ad
 8009a9c:	08007bf5 	.word	0x08007bf5
 8009aa0:	20001274 	.word	0x20001274
 8009aa4:	08007ead 	.word	0x08007ead
 8009aa8:	08007e61 	.word	0x08007e61
 8009aac:	08007b65 	.word	0x08007b65
 8009ab0:	0801a484 	.word	0x0801a484
 8009ab4:	08007b41 	.word	0x08007b41
 8009ab8:	08007b89 	.word	0x08007b89
 8009abc:	20001864 	.word	0x20001864

08009ac0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8009ac0:	4b02      	ldr	r3, [pc, #8]	; (8009acc <LoRaMacStart+0xc>)
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20001278 	.word	0x20001278

08009ad0 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8009ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009ad2:	4b2d      	ldr	r3, [pc, #180]	; (8009b88 <LoRaMacQueryTxPossible+0xb8>)
{
 8009ad4:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009ad6:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 8009ada:	f88d 2009 	strb.w	r2, [sp, #9]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009ade:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 8009ae2:	f88d 200a 	strb.w	r2, [sp, #10]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8009ae6:	4a29      	ldr	r2, [pc, #164]	; (8009b8c <LoRaMacQueryTxPossible+0xbc>)
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009ae8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009aea:	9603      	str	r6, [sp, #12]
{
 8009aec:	4605      	mov	r5, r0
    size_t macCmdsSize = 0;
 8009aee:	2700      	movs	r7, #0
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8009af0:	f892 0418 	ldrb.w	r0, [r2, #1048]	; 0x418
 8009af4:	f88d 000b 	strb.w	r0, [sp, #11]
    size_t macCmdsSize = 0;
 8009af8:	9704      	str	r7, [sp, #16]

    if( txInfo == NULL )
 8009afa:	460c      	mov	r4, r1
 8009afc:	2900      	cmp	r1, #0
 8009afe:	d03e      	beq.n	8009b7e <LoRaMacQueryTxPossible+0xae>

    // Setup ADR request
    adrNext.UpdateChanMask = false;
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009b00:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
 8009b04:	9207      	str	r2, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b06:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009b0a:	f893 1186 	ldrb.w	r1, [r3, #390]	; 0x186
 8009b0e:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b12:	ba52      	rev16	r2, r2
 8009b14:	f8ad 2020 	strh.w	r2, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009b18:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
    adrNext.Region = Nvm.MacGroup2.Region;
 8009b1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009b20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8009b24:	ab03      	add	r3, sp, #12
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8009b26:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009b2a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	f10d 020a 	add.w	r2, sp, #10
 8009b34:	f10d 030b 	add.w	r3, sp, #11
 8009b38:	f10d 0109 	add.w	r1, sp, #9
 8009b3c:	a805      	add	r0, sp, #20
    adrNext.UpdateChanMask = false;
 8009b3e:	f88d 7014 	strb.w	r7, [sp, #20]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009b42:	9606      	str	r6, [sp, #24]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8009b44:	f00b fbb8 	bl	80152b8 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009b48:	f99d 0009 	ldrsb.w	r0, [sp, #9]
 8009b4c:	f7fe f83c 	bl	8007bc8 <GetMaxAppPayloadWithoutFOptsLength>
 8009b50:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009b52:	a804      	add	r0, sp, #16
 8009b54:	f000 fdf2 	bl	800a73c <LoRaMacCommandsGetSizeSerializedCmds>
 8009b58:	b998      	cbnz	r0, 8009b82 <LoRaMacQueryTxPossible+0xb2>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8009b5a:	9b04      	ldr	r3, [sp, #16]
 8009b5c:	2b0f      	cmp	r3, #15
 8009b5e:	d80a      	bhi.n	8009b76 <LoRaMacQueryTxPossible+0xa6>
 8009b60:	7862      	ldrb	r2, [r4, #1]
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d807      	bhi.n	8009b76 <LoRaMacQueryTxPossible+0xa6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009b66:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8009b68:	442b      	add	r3, r5
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009b6a:	7021      	strb	r1, [r4, #0]
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	bf38      	it	cc
 8009b70:	2008      	movcc	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8009b72:	b00b      	add	sp, #44	; 0x2c
 8009b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8009b7a:	2008      	movs	r0, #8
 8009b7c:	e7f9      	b.n	8009b72 <LoRaMacQueryTxPossible+0xa2>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009b7e:	2003      	movs	r0, #3
 8009b80:	e7f7      	b.n	8009b72 <LoRaMacQueryTxPossible+0xa2>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b82:	2013      	movs	r0, #19
 8009b84:	e7f5      	b.n	8009b72 <LoRaMacQueryTxPossible+0xa2>
 8009b86:	bf00      	nop
 8009b88:	20001790 	.word	0x20001790
 8009b8c:	20001278 	.word	0x20001278

08009b90 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8009b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8009b92:	4604      	mov	r4, r0
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f000 80c4 	beq.w	8009d22 <LoRaMacMibGetRequestConfirm+0x192>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 8009b9a:	7800      	ldrb	r0, [r0, #0]
 8009b9c:	2844      	cmp	r0, #68	; 0x44
 8009b9e:	f200 80ba 	bhi.w	8009d16 <LoRaMacMibGetRequestConfirm+0x186>
 8009ba2:	e8df f000 	tbb	[pc, r0]
 8009ba6:	2923      	.short	0x2923
 8009ba8:	3936332e 	.word	0x3936332e
 8009bac:	b8b8423d 	.word	0xb8b8423d
 8009bb0:	b8b8b8b8 	.word	0xb8b8b8b8
 8009bb4:	b8b8b8b8 	.word	0xb8b8b8b8
 8009bb8:	b8b8b8b8 	.word	0xb8b8b8b8
 8009bbc:	b8b8b8b8 	.word	0xb8b8b8b8
 8009bc0:	46b8b8b8 	.word	0x46b8b8b8
 8009bc4:	5e5b544a 	.word	0x5e5b544a
 8009bc8:	68646661 	.word	0x68646661
 8009bcc:	75726f6c 	.word	0x75726f6c
 8009bd0:	8e8a7b78 	.word	0x8e8a7b78
 8009bd4:	9d9a9296 	.word	0x9d9a9296
 8009bd8:	b8a6a8a1 	.word	0xb8a6a8a1
 8009bdc:	b8b8b8ac 	.word	0xb8b8b8ac
 8009be0:	b8b8b8b8 	.word	0xb8b8b8b8
 8009be4:	b8b8b8b8 	.word	0xb8b8b8b8
 8009be8:	b8b8      	.short	0xb8b8
 8009bea:	b4          	.byte	0xb4
 8009beb:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8009bec:	4b4e      	ldr	r3, [pc, #312]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009bee:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8009bf2:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8009bf4:	b004      	add	sp, #16
 8009bf6:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009bf8:	4b4b      	ldr	r3, [pc, #300]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009bfa:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8009bfe:	7123      	strb	r3, [r4, #4]
            break;
 8009c00:	e002      	b.n	8009c08 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8009c02:	f7fd ff6b 	bl	8007adc <SecureElementGetDevEui>
 8009c06:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009c08:	2000      	movs	r0, #0
            break;
 8009c0a:	e7f3      	b.n	8009bf4 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8009c0c:	f7fd ff7c 	bl	8007b08 <SecureElementGetJoinEui>
 8009c10:	e7f9      	b.n	8009c06 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.SePin = SecureElementGetPin( );
 8009c12:	f7fd ff8f 	bl	8007b34 <SecureElementGetPin>
 8009c16:	e7f6      	b.n	8009c06 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8009c18:	4b43      	ldr	r3, [pc, #268]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c1a:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 8009c1e:	e7ee      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8009c20:	4b41      	ldr	r3, [pc, #260]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c22:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009c26:	6063      	str	r3, [r4, #4]
            break;
 8009c28:	e7ee      	b.n	8009c08 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009c2a:	4b3f      	ldr	r3, [pc, #252]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c2c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009c30:	e7f9      	b.n	8009c26 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8009c32:	4b3d      	ldr	r3, [pc, #244]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c34:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8009c38:	e7e1      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            getPhy.Attribute = PHY_CHANNELS;
 8009c3a:	231b      	movs	r3, #27
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8009c3c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009c40:	4b39      	ldr	r3, [pc, #228]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c42:	a902      	add	r1, sp, #8
 8009c44:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 8009c48:	f00b fdf3 	bl	8015832 <RegionGetPhyParam>
 8009c4c:	e7db      	b.n	8009c06 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009c4e:	4b37      	ldr	r3, [pc, #220]	; (8009d2c <LoRaMacMibGetRequestConfirm+0x19c>)
 8009c50:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009c52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c56:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
 8009c5a:	e7d5      	b.n	8009c08 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009c5c:	4b34      	ldr	r3, [pc, #208]	; (8009d30 <LoRaMacMibGetRequestConfirm+0x1a0>)
 8009c5e:	3404      	adds	r4, #4
 8009c60:	e7f7      	b.n	8009c52 <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8009c62:	4b34      	ldr	r3, [pc, #208]	; (8009d34 <LoRaMacMibGetRequestConfirm+0x1a4>)
 8009c64:	3404      	adds	r4, #4
 8009c66:	e7f4      	b.n	8009c52 <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009c68:	4b33      	ldr	r3, [pc, #204]	; (8009d38 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8009c6a:	3404      	adds	r4, #4
 8009c6c:	e7f1      	b.n	8009c52 <LoRaMacMibGetRequestConfirm+0xc2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8009c6e:	2319      	movs	r3, #25
 8009c70:	e7e4      	b.n	8009c3c <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8009c72:	2318      	movs	r3, #24
 8009c74:	e7e2      	b.n	8009c3c <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009c76:	4b2c      	ldr	r3, [pc, #176]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c78:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009c7c:	e7bf      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8009c7e:	4b2a      	ldr	r3, [pc, #168]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c82:	e7d0      	b.n	8009c26 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8009c84:	4b28      	ldr	r3, [pc, #160]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c88:	e7cd      	b.n	8009c26 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8009c8a:	4b27      	ldr	r3, [pc, #156]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c8e:	e7ca      	b.n	8009c26 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8009c90:	4b25      	ldr	r3, [pc, #148]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c94:	e7c7      	b.n	8009c26 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8009c96:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c9a:	e7c4      	b.n	8009c26 <LoRaMacMibGetRequestConfirm+0x96>
            getPhy.Attribute = PHY_MIN_TX_DR;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009ca2:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009ca4:	a902      	add	r1, sp, #8
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009ca6:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009caa:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009cae:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009cb2:	f00b fdbe 	bl	8015832 <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8009cb6:	7120      	strb	r0, [r4, #4]
            break;
 8009cb8:	e7a6      	b.n	8009c08 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009cba:	4b1b      	ldr	r3, [pc, #108]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009cbc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009cc0:	e79d      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009cc2:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cc8:	e799      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009cca:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009ccc:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009cd0:	e795      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009cd2:	4b15      	ldr	r3, [pc, #84]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cd8:	e791      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cde:	e7a2      	b.n	8009c26 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009ce2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009ce6:	e78a      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009cee:	6063      	str	r3, [r4, #4]
            break;
 8009cf0:	e78a      	b.n	8009c08 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Contexts = GetNvmData( );
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009cf4:	e797      	b.n	8009c26 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009cf6:	4b0c      	ldr	r3, [pc, #48]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009cf8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009cfc:	e7f7      	b.n	8009cee <LoRaMacMibGetRequestConfirm+0x15e>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009d00:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009d04:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8009d06:	f001 f8f3 	bl	800aef0 <RegionGetVersion>
 8009d0a:	60a0      	str	r0, [r4, #8]
            break;
 8009d0c:	e77c      	b.n	8009c08 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8009d0e:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <LoRaMacMibGetRequestConfirm+0x198>)
 8009d10:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8009d14:	e773      	b.n	8009bfe <LoRaMacMibGetRequestConfirm+0x6e>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009d16:	4620      	mov	r0, r4
}
 8009d18:	b004      	add	sp, #16
 8009d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009d1e:	f00b bb50 	b.w	80153c2 <LoRaMacClassBMibGetRequestConfirm>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009d22:	2003      	movs	r0, #3
 8009d24:	e766      	b.n	8009bf4 <LoRaMacMibGetRequestConfirm+0x64>
 8009d26:	bf00      	nop
 8009d28:	20001790 	.word	0x20001790
 8009d2c:	20001800 	.word	0x20001800
 8009d30:	2000183c 	.word	0x2000183c
 8009d34:	20001808 	.word	0x20001808
 8009d38:	20001844 	.word	0x20001844

08009d3c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8009d3e:	4604      	mov	r4, r0
{
 8009d40:	b085      	sub	sp, #20
    if( mibSet == NULL )
 8009d42:	b910      	cbnz	r0, 8009d4a <LoRaMacMibSetRequestConfirm+0xe>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009d44:	2003      	movs	r0, #3
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
    return status;
}
 8009d46:	b005      	add	sp, #20
 8009d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009d4a:	4d9b      	ldr	r5, [pc, #620]	; (8009fb8 <LoRaMacMibSetRequestConfirm+0x27c>)
 8009d4c:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
 8009d50:	079a      	lsls	r2, r3, #30
 8009d52:	f100 828e 	bmi.w	800a272 <LoRaMacMibSetRequestConfirm+0x536>
    switch( mibSet->Type )
 8009d56:	7802      	ldrb	r2, [r0, #0]
 8009d58:	2a44      	cmp	r2, #68	; 0x44
 8009d5a:	f200 8287 	bhi.w	800a26c <LoRaMacMibSetRequestConfirm+0x530>
 8009d5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009d62:	0045      	.short	0x0045
 8009d64:	0059004b 	.word	0x0059004b
 8009d68:	0063005f 	.word	0x0063005f
 8009d6c:	006c0067 	.word	0x006c0067
 8009d70:	00760071 	.word	0x00760071
 8009d74:	00870081 	.word	0x00870081
 8009d78:	0093008d 	.word	0x0093008d
 8009d7c:	009f0099 	.word	0x009f0099
 8009d80:	00ab00a5 	.word	0x00ab00a5
 8009d84:	00b700b1 	.word	0x00b700b1
 8009d88:	00c300bd 	.word	0x00c300bd
 8009d8c:	00cf00c9 	.word	0x00cf00c9
 8009d90:	00db00d5 	.word	0x00db00d5
 8009d94:	00e700e1 	.word	0x00e700e1
 8009d98:	00f300ed 	.word	0x00f300ed
 8009d9c:	028500f9 	.word	0x028500f9
 8009da0:	01180101 	.word	0x01180101
 8009da4:	01580131 	.word	0x01580131
 8009da8:	016b017a 	.word	0x016b017a
 8009dac:	0187017e 	.word	0x0187017e
 8009db0:	018f018b 	.word	0x018f018b
 8009db4:	01970193 	.word	0x01970193
 8009db8:	019b0285 	.word	0x019b0285
 8009dbc:	01d501ad 	.word	0x01d501ad
 8009dc0:	01e701c3 	.word	0x01e701c3
 8009dc4:	01f401ed 	.word	0x01f401ed
 8009dc8:	01fe01f9 	.word	0x01fe01f9
 8009dcc:	02850274 	.word	0x02850274
 8009dd0:	02850285 	.word	0x02850285
 8009dd4:	02850285 	.word	0x02850285
 8009dd8:	02850285 	.word	0x02850285
 8009ddc:	02850285 	.word	0x02850285
 8009de0:	02850285 	.word	0x02850285
 8009de4:	02850285 	.word	0x02850285
 8009de8:	02800285 	.word	0x02800285
            status = SwitchClass( mibSet->Param.Class );
 8009dec:	7900      	ldrb	r0, [r0, #4]
 8009dee:	f7fd ffc9 	bl	8007d84 <SwitchClass>
    if( status == LORAMAC_STATUS_OK )
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d1a7      	bne.n	8009d46 <LoRaMacMibSetRequestConfirm+0xa>
 8009df6:	e005      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8009df8:	7903      	ldrb	r3, [r0, #4]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d0a2      	beq.n	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8009dfe:	4a6f      	ldr	r2, [pc, #444]	; (8009fbc <LoRaMacMibSetRequestConfirm+0x280>)
 8009e00:	f882 319c 	strb.w	r3, [r2, #412]	; 0x19c
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8009e04:	f895 348d 	ldrb.w	r3, [r5, #1165]	; 0x48d
 8009e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e0c:	f885 348d 	strb.w	r3, [r5, #1165]	; 0x48d
 8009e10:	2000      	movs	r0, #0
 8009e12:	e798      	b.n	8009d46 <LoRaMacMibSetRequestConfirm+0xa>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8009e14:	6840      	ldr	r0, [r0, #4]
 8009e16:	f7fd fe53 	bl	8007ac0 <SecureElementSetDevEui>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d0f2      	beq.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
 8009e1e:	e791      	b.n	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8009e20:	6840      	ldr	r0, [r0, #4]
 8009e22:	f7fd fe61 	bl	8007ae8 <SecureElementSetJoinEui>
 8009e26:	e7f8      	b.n	8009e1a <LoRaMacMibSetRequestConfirm+0xde>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 8009e28:	6840      	ldr	r0, [r0, #4]
 8009e2a:	f7fd fe73 	bl	8007b14 <SecureElementSetPin>
 8009e2e:	e7f4      	b.n	8009e1a <LoRaMacMibSetRequestConfirm+0xde>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8009e30:	4b62      	ldr	r3, [pc, #392]	; (8009fbc <LoRaMacMibSetRequestConfirm+0x280>)
 8009e32:	7902      	ldrb	r2, [r0, #4]
 8009e34:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    if( status == LORAMAC_STATUS_OK )
 8009e38:	e7e4      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8009e3a:	4b60      	ldr	r3, [pc, #384]	; (8009fbc <LoRaMacMibSetRequestConfirm+0x280>)
 8009e3c:	6842      	ldr	r2, [r0, #4]
 8009e3e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    if( status == LORAMAC_STATUS_OK )
 8009e42:	e7df      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8009e44:	4b5d      	ldr	r3, [pc, #372]	; (8009fbc <LoRaMacMibSetRequestConfirm+0x280>)
 8009e46:	6842      	ldr	r2, [r0, #4]
 8009e48:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    if( status == LORAMAC_STATUS_OK )
 8009e4c:	e7da      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            if( mibSet->Param.AppKey != NULL )
 8009e4e:	6841      	ldr	r1, [r0, #4]
 8009e50:	2900      	cmp	r1, #0
 8009e52:	f43f af77 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8009e56:	2000      	movs	r0, #0
 8009e58:	f000 ffb4 	bl	800adc4 <LoRaMacCryptoSetKey>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d0d1      	beq.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009e60:	2011      	movs	r0, #17
 8009e62:	e770      	b.n	8009d46 <LoRaMacMibSetRequestConfirm+0xa>
            if( mibSet->Param.NwkKey != NULL )
 8009e64:	6841      	ldr	r1, [r0, #4]
 8009e66:	2900      	cmp	r1, #0
 8009e68:	f43f af6c 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	e7f3      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.JSIntKey != NULL )
 8009e70:	6841      	ldr	r1, [r0, #4]
 8009e72:	2900      	cmp	r1, #0
 8009e74:	f43f af66 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8009e78:	2002      	movs	r0, #2
 8009e7a:	e7ed      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.JSEncKey != NULL )
 8009e7c:	6841      	ldr	r1, [r0, #4]
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	f43f af60 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 8009e84:	2003      	movs	r0, #3
 8009e86:	e7e7      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8009e88:	6841      	ldr	r1, [r0, #4]
 8009e8a:	2900      	cmp	r1, #0
 8009e8c:	f43f af5a 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8009e90:	2004      	movs	r0, #4
 8009e92:	e7e1      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.SNwkSIntKey != NULL )
 8009e94:	6841      	ldr	r1, [r0, #4]
 8009e96:	2900      	cmp	r1, #0
 8009e98:	f43f af54 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8009e9c:	2005      	movs	r0, #5
 8009e9e:	e7db      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.NwkSEncKey != NULL )
 8009ea0:	6841      	ldr	r1, [r0, #4]
 8009ea2:	2900      	cmp	r1, #0
 8009ea4:	f43f af4e 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8009ea8:	2006      	movs	r0, #6
 8009eaa:	e7d5      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.AppSKey != NULL )
 8009eac:	6841      	ldr	r1, [r0, #4]
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	f43f af48 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8009eb4:	2007      	movs	r0, #7
 8009eb6:	e7cf      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKEKey != NULL )
 8009eb8:	6841      	ldr	r1, [r0, #4]
 8009eba:	2900      	cmp	r1, #0
 8009ebc:	f43f af42 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8009ec0:	207f      	movs	r0, #127	; 0x7f
 8009ec2:	e7c9      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKey0 != NULL )
 8009ec4:	6841      	ldr	r1, [r0, #4]
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	f43f af3c 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8009ecc:	2080      	movs	r0, #128	; 0x80
 8009ece:	e7c3      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McAppSKey0 != NULL )
 8009ed0:	6841      	ldr	r1, [r0, #4]
 8009ed2:	2900      	cmp	r1, #0
 8009ed4:	f43f af36 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009ed8:	2081      	movs	r0, #129	; 0x81
 8009eda:	e7bd      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009edc:	6841      	ldr	r1, [r0, #4]
 8009ede:	2900      	cmp	r1, #0
 8009ee0:	f43f af30 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009ee4:	2082      	movs	r0, #130	; 0x82
 8009ee6:	e7b7      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKey1 != NULL )
 8009ee8:	6841      	ldr	r1, [r0, #4]
 8009eea:	2900      	cmp	r1, #0
 8009eec:	f43f af2a 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8009ef0:	2083      	movs	r0, #131	; 0x83
 8009ef2:	e7b1      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McAppSKey1 != NULL )
 8009ef4:	6841      	ldr	r1, [r0, #4]
 8009ef6:	2900      	cmp	r1, #0
 8009ef8:	f43f af24 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 8009efc:	2084      	movs	r0, #132	; 0x84
 8009efe:	e7ab      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8009f00:	6841      	ldr	r1, [r0, #4]
 8009f02:	2900      	cmp	r1, #0
 8009f04:	f43f af1e 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8009f08:	2085      	movs	r0, #133	; 0x85
 8009f0a:	e7a5      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKey2 != NULL )
 8009f0c:	6841      	ldr	r1, [r0, #4]
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	f43f af18 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8009f14:	2086      	movs	r0, #134	; 0x86
 8009f16:	e79f      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McAppSKey2 != NULL )
 8009f18:	6841      	ldr	r1, [r0, #4]
 8009f1a:	2900      	cmp	r1, #0
 8009f1c:	f43f af12 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 8009f20:	2087      	movs	r0, #135	; 0x87
 8009f22:	e799      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8009f24:	6841      	ldr	r1, [r0, #4]
 8009f26:	2900      	cmp	r1, #0
 8009f28:	f43f af0c 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8009f2c:	2088      	movs	r0, #136	; 0x88
 8009f2e:	e793      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McKey3 != NULL )
 8009f30:	6841      	ldr	r1, [r0, #4]
 8009f32:	2900      	cmp	r1, #0
 8009f34:	f43f af06 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8009f38:	2089      	movs	r0, #137	; 0x89
 8009f3a:	e78d      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McAppSKey3 != NULL )
 8009f3c:	6841      	ldr	r1, [r0, #4]
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	f43f af00 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 8009f44:	208a      	movs	r0, #138	; 0x8a
 8009f46:	e787      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            if( mibSet->Param.McNwkSKey3 != NULL )
 8009f48:	6841      	ldr	r1, [r0, #4]
 8009f4a:	2900      	cmp	r1, #0
 8009f4c:	f43f aefa 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 8009f50:	208b      	movs	r0, #139	; 0x8b
 8009f52:	e781      	b.n	8009e58 <LoRaMacMibSetRequestConfirm+0x11c>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009f54:	4b19      	ldr	r3, [pc, #100]	; (8009fbc <LoRaMacMibSetRequestConfirm+0x280>)
 8009f56:	7900      	ldrb	r0, [r0, #4]
 8009f58:	f883 0185 	strb.w	r0, [r3, #389]	; 0x185
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009f5c:	4b18      	ldr	r3, [pc, #96]	; (8009fc0 <LoRaMacMibSetRequestConfirm+0x284>)
 8009f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f60:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
 8009f62:	e74f      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009f64:	4e15      	ldr	r6, [pc, #84]	; (8009fbc <LoRaMacMibSetRequestConfirm+0x280>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009f66:	7a03      	ldrb	r3, [r0, #8]
 8009f68:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009f6c:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009f70:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 8009f74:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009f78:	2207      	movs	r2, #7
 8009f7a:	a901      	add	r1, sp, #4
 8009f7c:	f00b fc6f 	bl	801585e <RegionVerify>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	f43f aedf 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009f86:	3670      	adds	r6, #112	; 0x70
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009f88:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8009f8c:	e886 0003 	stmia.w	r6, {r0, r1}
    if( status == LORAMAC_STATUS_OK )
 8009f90:	e738      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009f92:	4e0a      	ldr	r6, [pc, #40]	; (8009fbc <LoRaMacMibSetRequestConfirm+0x280>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009f94:	7a03      	ldrb	r3, [r0, #8]
 8009f96:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009f9a:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009f9e:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 8009fa2:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009fa6:	2207      	movs	r2, #7
 8009fa8:	a901      	add	r1, sp, #4
 8009faa:	f00b fc58 	bl	801585e <RegionVerify>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f43f aec8 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009fb4:	36ac      	adds	r6, #172	; 0xac
 8009fb6:	e7e7      	b.n	8009f88 <LoRaMacMibSetRequestConfirm+0x24c>
 8009fb8:	20001278 	.word	0x20001278
 8009fbc:	20001790 	.word	0x20001790
 8009fc0:	0801a484 	.word	0x0801a484
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009fc4:	4eac      	ldr	r6, [pc, #688]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009fc6:	7a03      	ldrb	r3, [r0, #8]
 8009fc8:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009fcc:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009fd0:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 8009fd4:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009fd8:	2207      	movs	r2, #7
 8009fda:	a901      	add	r1, sp, #4
 8009fdc:	f00b fc3f 	bl	801585e <RegionVerify>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	f43f aeaf 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8009fe6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8009fea:	f106 0378 	add.w	r3, r6, #120	; 0x78
 8009fee:	e883 0003 	stmia.w	r3, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009ff2:	f896 3184 	ldrb.w	r3, [r6, #388]	; 0x184
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	f47f af04 	bne.w	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
 8009ffc:	f896 319c 	ldrb.w	r3, [r6, #412]	; 0x19c
 800a000:	2b00      	cmp	r3, #0
 800a002:	f43f aeff 	beq.w	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
                    Radio.Sleep( );
 800a006:	4b9d      	ldr	r3, [pc, #628]	; (800a27c <LoRaMacMibSetRequestConfirm+0x540>)
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800a00c:	f7fd fe88 	bl	8007d20 <OpenContinuousRxCWindow>
    if( status == LORAMAC_STATUS_OK )
 800a010:	e6f8      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a012:	4e99      	ldr	r6, [pc, #612]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a014:	7a03      	ldrb	r3, [r0, #8]
 800a016:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a01a:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a01e:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 800a022:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a026:	2207      	movs	r2, #7
 800a028:	a901      	add	r1, sp, #4
 800a02a:	f00b fc18 	bl	801585e <RegionVerify>
 800a02e:	2800      	cmp	r0, #0
 800a030:	f43f ae88 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800a034:	36b4      	adds	r6, #180	; 0xb4
 800a036:	e7a7      	b.n	8009f88 <LoRaMacMibSetRequestConfirm+0x24c>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800a038:	6843      	ldr	r3, [r0, #4]
 800a03a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800a03c:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a03e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a042:	4b8d      	ldr	r3, [pc, #564]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a044:	a902      	add	r1, sp, #8
 800a046:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 800a04a:	f00b fc17 	bl	801587c <RegionChanMaskSet>
 800a04e:	2800      	cmp	r0, #0
 800a050:	f47f aed8 	bne.w	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
 800a054:	e676      	b.n	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800a056:	6843      	ldr	r3, [r0, #4]
 800a058:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	e7ef      	b.n	800a03e <LoRaMacMibSetRequestConfirm+0x302>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800a05e:	7903      	ldrb	r3, [r0, #4]
 800a060:	1e5a      	subs	r2, r3, #1
 800a062:	2a0e      	cmp	r2, #14
 800a064:	f63f ae6e 	bhi.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800a068:	4a83      	ldr	r2, [pc, #524]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a06a:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
    if( status == LORAMAC_STATUS_OK )
 800a06e:	e6c9      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800a070:	4b81      	ldr	r3, [pc, #516]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a072:	6842      	ldr	r2, [r0, #4]
 800a074:	659a      	str	r2, [r3, #88]	; 0x58
    if( status == LORAMAC_STATUS_OK )
 800a076:	e6c5      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800a078:	4b7f      	ldr	r3, [pc, #508]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a07a:	6842      	ldr	r2, [r0, #4]
 800a07c:	65da      	str	r2, [r3, #92]	; 0x5c
    if( status == LORAMAC_STATUS_OK )
 800a07e:	e6c1      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800a080:	4b7d      	ldr	r3, [pc, #500]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a082:	6842      	ldr	r2, [r0, #4]
 800a084:	661a      	str	r2, [r3, #96]	; 0x60
    if( status == LORAMAC_STATUS_OK )
 800a086:	e6bd      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800a088:	4b7b      	ldr	r3, [pc, #492]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a08a:	6842      	ldr	r2, [r0, #4]
 800a08c:	665a      	str	r2, [r3, #100]	; 0x64
    if( status == LORAMAC_STATUS_OK )
 800a08e:	e6b9      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800a090:	4b79      	ldr	r3, [pc, #484]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a092:	6842      	ldr	r2, [r0, #4]
 800a094:	669a      	str	r2, [r3, #104]	; 0x68
    if( status == LORAMAC_STATUS_OK )
 800a096:	e6b5      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800a098:	4c77      	ldr	r4, [pc, #476]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a09a:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800a09c:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a0a0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800a0a4:	2206      	movs	r2, #6
 800a0a6:	a901      	add	r1, sp, #4
 800a0a8:	f00b fbd9 	bl	801585e <RegionVerify>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	f43f ae49 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800a0b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a0b6:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if( status == LORAMAC_STATUS_OK )
 800a0ba:	e6a3      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0bc:	4c6e      	ldr	r4, [pc, #440]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a0be:	7903      	ldrb	r3, [r0, #4]
 800a0c0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a0c4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0c8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800a0cc:	f88d 3006 	strb.w	r3, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a0d0:	2205      	movs	r2, #5
 800a0d2:	a901      	add	r1, sp, #4
 800a0d4:	f00b fbc3 	bl	801585e <RegionVerify>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f43f ae33 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a0de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a0e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    if( status == LORAMAC_STATUS_OK )
 800a0e6:	e68d      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a0e8:	4c63      	ldr	r4, [pc, #396]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a0ea:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a0ec:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a0f0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	a901      	add	r1, sp, #4
 800a0f8:	f00b fbb1 	bl	801585e <RegionVerify>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f43f ae21 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800a102:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a106:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if( status == LORAMAC_STATUS_OK )
 800a10a:	e67b      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800a10c:	4c5a      	ldr	r4, [pc, #360]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a10e:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800a110:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a114:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800a118:	2209      	movs	r2, #9
 800a11a:	a901      	add	r1, sp, #4
 800a11c:	f00b fb9f 	bl	801585e <RegionVerify>
 800a120:	2800      	cmp	r0, #0
 800a122:	f43f ae0f 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800a126:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a12a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if( status == LORAMAC_STATUS_OK )
 800a12e:	e669      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800a130:	4b51      	ldr	r3, [pc, #324]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a132:	6842      	ldr	r2, [r0, #4]
 800a134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800a138:	651a      	str	r2, [r3, #80]	; 0x50
    if( status == LORAMAC_STATUS_OK )
 800a13a:	e663      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800a13c:	4b4e      	ldr	r3, [pc, #312]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a13e:	7902      	ldrb	r2, [r0, #4]
 800a140:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800a144:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if( status == LORAMAC_STATUS_OK )
 800a148:	e65c      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800a14a:	4b4b      	ldr	r3, [pc, #300]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a14c:	6842      	ldr	r2, [r0, #4]
 800a14e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if( status == LORAMAC_STATUS_OK )
 800a152:	e657      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800a154:	4b48      	ldr	r3, [pc, #288]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a156:	6842      	ldr	r2, [r0, #4]
 800a158:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    if( status == LORAMAC_STATUS_OK )
 800a15c:	e652      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            if( mibSet->Param.Contexts != 0 )
 800a15e:	6844      	ldr	r4, [r0, #4]
 800a160:	2c00      	cmp	r4, #0
 800a162:	f43f adef 	beq.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800a166:	2b01      	cmp	r3, #1
 800a168:	f040 8083 	bne.w	800a272 <LoRaMacMibSetRequestConfirm+0x536>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800a16c:	2130      	movs	r1, #48	; 0x30
 800a16e:	4620      	mov	r0, r4
 800a170:	f7fc fa46 	bl	8006600 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 800a174:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a176:	4298      	cmp	r0, r3
 800a178:	d104      	bne.n	800a184 <LoRaMacMibSetRequestConfirm+0x448>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800a17a:	483f      	ldr	r0, [pc, #252]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a17c:	2234      	movs	r2, #52	; 0x34
 800a17e:	4621      	mov	r1, r4
 800a180:	f00a fa41 	bl	8014606 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800a184:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800a188:	2114      	movs	r1, #20
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7fc fa38 	bl	8006600 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 800a190:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a192:	4298      	cmp	r0, r3
 800a194:	d104      	bne.n	800a1a0 <LoRaMacMibSetRequestConfirm+0x464>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800a196:	483a      	ldr	r0, [pc, #232]	; (800a280 <LoRaMacMibSetRequestConfirm+0x544>)
 800a198:	2218      	movs	r2, #24
 800a19a:	4631      	mov	r1, r6
 800a19c:	f00a fa33 	bl	8014606 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800a1a0:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800a1a4:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	f7fc fa29 	bl	8006600 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 800a1ae:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a1b2:	4298      	cmp	r0, r3
 800a1b4:	d118      	bne.n	800a1e8 <LoRaMacMibSetRequestConfirm+0x4ac>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800a1b6:	4e30      	ldr	r6, [pc, #192]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a1b8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a1bc:	4639      	mov	r1, r7
 800a1be:	f106 004c 	add.w	r0, r6, #76	; 0x4c
 800a1c2:	f00a fa20 	bl	8014606 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a1c6:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
 800a1ca:	f885 33e8 	strb.w	r3, [r5, #1000]	; 0x3e8
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a1ce:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 800a1d0:	f8c5 33ec 	str.w	r3, [r5, #1004]	; 0x3ec
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a1d4:	f896 3081 	ldrb.w	r3, [r6, #129]	; 0x81
 800a1d8:	f885 33f8 	strb.w	r3, [r5, #1016]	; 0x3f8
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	f885 33f9 	strb.w	r3, [r5, #1017]	; 0x3f9
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800a1e8:	f504 76d2 	add.w	r6, r4, #420	; 0x1a4
 800a1ec:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f7fc fa05 	bl	8006600 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 800a1f6:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a1fa:	4298      	cmp	r0, r3
 800a1fc:	d105      	bne.n	800a20a <LoRaMacMibSetRequestConfirm+0x4ce>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800a1fe:	4821      	ldr	r0, [pc, #132]	; (800a284 <LoRaMacMibSetRequestConfirm+0x548>)
 800a200:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800a204:	4631      	mov	r1, r6
 800a206:	f00a f9fe 	bl	8014606 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800a20a:	f504 7651 	add.w	r6, r4, #836	; 0x344
 800a20e:	2110      	movs	r1, #16
 800a210:	4630      	mov	r0, r6
 800a212:	f7fc f9f5 	bl	8006600 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 800a216:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 800a21a:	4298      	cmp	r0, r3
 800a21c:	d104      	bne.n	800a228 <LoRaMacMibSetRequestConfirm+0x4ec>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800a21e:	481a      	ldr	r0, [pc, #104]	; (800a288 <LoRaMacMibSetRequestConfirm+0x54c>)
 800a220:	2214      	movs	r2, #20
 800a222:	4631      	mov	r1, r6
 800a224:	f00a f9ef 	bl	8014606 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800a228:	f204 66d4 	addw	r6, r4, #1748	; 0x6d4
 800a22c:	2114      	movs	r1, #20
 800a22e:	4630      	mov	r0, r6
 800a230:	f7fc f9e6 	bl	8006600 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 800a234:	f8d4 36e8 	ldr.w	r3, [r4, #1768]	; 0x6e8
 800a238:	4298      	cmp	r0, r3
 800a23a:	f47f ade3 	bne.w	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800a23e:	4813      	ldr	r0, [pc, #76]	; (800a28c <LoRaMacMibSetRequestConfirm+0x550>)
 800a240:	2218      	movs	r2, #24
 800a242:	4631      	mov	r1, r6
 800a244:	f00a f9df 	bl	8014606 <memcpy1>
    if( status == LORAMAC_STATUS_OK )
 800a248:	e5dc      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800a24a:	7983      	ldrb	r3, [r0, #6]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	f63f ad79 	bhi.w	8009d44 <LoRaMacMibSetRequestConfirm+0x8>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a254:	6842      	ldr	r2, [r0, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a256:	6840      	ldr	r0, [r0, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800a258:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a25c:	f000 fc66 	bl	800ab2c <LoRaMacCryptoSetLrWanVersion>
 800a260:	e5fc      	b.n	8009e5c <LoRaMacMibSetRequestConfirm+0x120>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800a262:	4b05      	ldr	r3, [pc, #20]	; (800a278 <LoRaMacMibSetRequestConfirm+0x53c>)
 800a264:	7902      	ldrb	r2, [r0, #4]
 800a266:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
    if( status == LORAMAC_STATUS_OK )
 800a26a:	e5cb      	b.n	8009e04 <LoRaMacMibSetRequestConfirm+0xc8>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800a26c:	f00b f8ab 	bl	80153c6 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800a270:	e5bf      	b.n	8009df2 <LoRaMacMibSetRequestConfirm+0xb6>
        return LORAMAC_STATUS_BUSY;
 800a272:	2001      	movs	r0, #1
 800a274:	e567      	b.n	8009d46 <LoRaMacMibSetRequestConfirm+0xa>
 800a276:	bf00      	nop
 800a278:	20001790 	.word	0x20001790
 800a27c:	0801a484 	.word	0x0801a484
 800a280:	200017c4 	.word	0x200017c4
 800a284:	20001934 	.word	0x20001934
 800a288:	20001ad4 	.word	0x20001ad4
 800a28c:	20001e64 	.word	0x20001e64

0800a290 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800a290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a294:	b087      	sub	sp, #28
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a296:	2300      	movs	r3, #0
 800a298:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800a29c:	4605      	mov	r5, r0
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f000 80ce 	beq.w	800a440 <LoRaMacMlmeRequest+0x1b0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800a2a4:	6103      	str	r3, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800a2a6:	f7fe fa4d 	bl	8008744 <LoRaMacIsBusy>
 800a2aa:	b120      	cbz	r0, 800a2b6 <LoRaMacMlmeRequest+0x26>
    {
        return LORAMAC_STATUS_BUSY;
 800a2ac:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	b007      	add	sp, #28
 800a2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800a2b6:	f000 fb7b 	bl	800a9b0 <LoRaMacConfirmQueueIsFull>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d1f6      	bne.n	800a2ac <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a2be:	f000 fb71 	bl	800a9a4 <LoRaMacConfirmQueueGetCnt>
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	b918      	cbnz	r0, 800a2ce <LoRaMacMlmeRequest+0x3e>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800a2c6:	485f      	ldr	r0, [pc, #380]	; (800a444 <LoRaMacMlmeRequest+0x1b4>)
 800a2c8:	2214      	movs	r2, #20
 800a2ca:	f00a f9b0 	bl	801462e <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2ce:	4e5e      	ldr	r6, [pc, #376]	; (800a448 <LoRaMacMlmeRequest+0x1b8>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a2d0:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2d4:	2201      	movs	r2, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a2d6:	f043 0304 	orr.w	r3, r3, #4
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2da:	f886 2459 	strb.w	r2, [r6, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a2de:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
    queueElement.Request = mlmeRequest->Type;
 800a2e2:	782b      	ldrb	r3, [r5, #0]
 800a2e4:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.RestrictCommonReadyToHandle = false;
 800a2e8:	2100      	movs	r1, #0
    switch( mlmeRequest->Type )
 800a2ea:	3b01      	subs	r3, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2ec:	f88d 2005 	strb.w	r2, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800a2f0:	f88d 1007 	strb.w	r1, [sp, #7]
    queueElement.ReadyToHandle = false;
 800a2f4:	f88d 1006 	strb.w	r1, [sp, #6]
    switch( mlmeRequest->Type )
 800a2f8:	2b0c      	cmp	r3, #12
 800a2fa:	f200 8099 	bhi.w	800a430 <LoRaMacMlmeRequest+0x1a0>
 800a2fe:	e8df f003 	tbb	[pc, r3]
 800a302:	9707      	.short	0x9707
 800a304:	976d6497 	.word	0x976d6497
 800a308:	97749797 	.word	0x97749797
 800a30c:	788b      	.short	0x788b
 800a30e:	87          	.byte	0x87
 800a30f:	00          	.byte	0x00
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800a310:	f8d6 4340 	ldr.w	r4, [r6, #832]	; 0x340
 800a314:	f014 0720 	ands.w	r7, r4, #32
 800a318:	d1c8      	bne.n	800a2ac <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800a31a:	f895 8004 	ldrb.w	r8, [r5, #4]
 800a31e:	f1b8 0f02 	cmp.w	r8, #2
 800a322:	d12f      	bne.n	800a384 <LoRaMacMlmeRequest+0xf4>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a324:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800a44c <LoRaMacMlmeRequest+0x1bc>
                ResetMacParameters( );
 800a328:	f7fd fde6 	bl	8007ef8 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a32c:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800a330:	f898 004c 	ldrb.w	r0, [r8, #76]	; 0x4c
 800a334:	463a      	mov	r2, r7
 800a336:	f00b faf7 	bl	8015928 <RegionAlternateDr>
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a33a:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a33c:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
                status = SendReJoinReq( JOIN_REQ );
 800a340:	20ff      	movs	r0, #255	; 0xff
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a342:	f88d 3005 	strb.w	r3, [sp, #5]
                status = SendReJoinReq( JOIN_REQ );
 800a346:	f7fe fcf3 	bl	8008d30 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800a34a:	4604      	mov	r4, r0
 800a34c:	b140      	cbz	r0, 800a360 <LoRaMacMlmeRequest+0xd0>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800a34e:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800a352:	f898 004c 	ldrb.w	r0, [r8, #76]	; 0x4c
 800a356:	2201      	movs	r2, #1
 800a358:	f00b fae6 	bl	8015928 <RegionAlternateDr>
 800a35c:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a360:	f8d6 3490 	ldr.w	r3, [r6, #1168]	; 0x490
 800a364:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800a366:	2c00      	cmp	r4, #0
 800a368:	d066      	beq.n	800a438 <LoRaMacMlmeRequest+0x1a8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a36a:	f000 fb1b 	bl	800a9a4 <LoRaMacConfirmQueueGetCnt>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d19d      	bne.n	800a2ae <LoRaMacMlmeRequest+0x1e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a372:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
            MacCtx.NodeAckRequested = false;
 800a376:	f886 041a 	strb.w	r0, [r6, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a37a:	f360 0382 	bfi	r3, r0, #2, #1
 800a37e:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
 800a382:	e794      	b.n	800a2ae <LoRaMacMlmeRequest+0x1e>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800a384:	f1b8 0f01 	cmp.w	r8, #1
 800a388:	f04f 0402 	mov.w	r4, #2
 800a38c:	d1e8      	bne.n	800a360 <LoRaMacMlmeRequest+0xd0>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800a38e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800a44c <LoRaMacMlmeRequest+0x1bc>
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a392:	f88d 4014 	strb.w	r4, [sp, #20]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a396:	f899 004c 	ldrb.w	r0, [r9, #76]	; 0x4c
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800a39a:	f889 7189 	strb.w	r7, [r9, #393]	; 0x189
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a39e:	a902      	add	r1, sp, #8
 800a3a0:	f00b fa57 	bl	8015852 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800a3a4:	792b      	ldrb	r3, [r5, #4]
 800a3a6:	f889 319c 	strb.w	r3, [r9, #412]	; 0x19c
                MacCtx.MacCallbacks->MacProcessNotify( );
 800a3aa:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a3ae:	f88d 7005 	strb.w	r7, [sp, #5]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800a3b2:	68db      	ldr	r3, [r3, #12]
                queueElement.ReadyToHandle = true;
 800a3b4:	f88d 8006 	strb.w	r8, [sp, #6]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800a3b8:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a3ba:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
 800a3be:	f043 0320 	orr.w	r3, r3, #32
 800a3c2:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
            status = LORAMAC_STATUS_OK;
 800a3c6:	2400      	movs	r4, #0
 800a3c8:	e7ca      	b.n	800a360 <LoRaMacMlmeRequest+0xd0>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4669      	mov	r1, sp
 800a3ce:	2002      	movs	r0, #2
 800a3d0:	f000 f910 	bl	800a5f4 <LoRaMacCommandsAddCmd>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d0f6      	beq.n	800a3c6 <LoRaMacMlmeRequest+0x136>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a3d8:	2413      	movs	r4, #19
 800a3da:	e7c1      	b.n	800a360 <LoRaMacMlmeRequest+0xd0>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a3dc:	7b2a      	ldrb	r2, [r5, #12]
 800a3de:	68a9      	ldr	r1, [r5, #8]
 800a3e0:	88a8      	ldrh	r0, [r5, #4]
 800a3e2:	f7fe fccf 	bl	8008d84 <SetTxContinuousWave>
 800a3e6:	4604      	mov	r4, r0
            break;
 800a3e8:	e7ba      	b.n	800a360 <LoRaMacMlmeRequest+0xd0>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	4669      	mov	r1, sp
 800a3ee:	200d      	movs	r0, #13
 800a3f0:	e7ee      	b.n	800a3d0 <LoRaMacMlmeRequest+0x140>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800a3f2:	4b16      	ldr	r3, [pc, #88]	; (800a44c <LoRaMacMlmeRequest+0x1bc>)
 800a3f4:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a3f8:	b9d3      	cbnz	r3, 800a430 <LoRaMacMlmeRequest+0x1a0>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800a3fa:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800a3fc:	f004 0007 	and.w	r0, r4, #7
 800a400:	f00a ffda 	bl	80153b8 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800a404:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800a408:	2201      	movs	r2, #1
 800a40a:	4669      	mov	r1, sp
 800a40c:	2010      	movs	r0, #16
 800a40e:	e7df      	b.n	800a3d0 <LoRaMacMlmeRequest+0x140>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a410:	2200      	movs	r2, #0
 800a412:	4669      	mov	r1, sp
 800a414:	2012      	movs	r0, #18
 800a416:	e7db      	b.n	800a3d0 <LoRaMacMlmeRequest+0x140>
            queueElement.RestrictCommonReadyToHandle = true;
 800a418:	f88d 2007 	strb.w	r2, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800a41c:	f00a ffbd 	bl	801539a <LoRaMacClassBIsAcquisitionInProgress>
 800a420:	4604      	mov	r4, r0
 800a422:	b938      	cbnz	r0, 800a434 <LoRaMacMlmeRequest+0x1a4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800a424:	f00a ffb6 	bl	8015394 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800a428:	4620      	mov	r0, r4
 800a42a:	f00a ffb8 	bl	801539e <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800a42e:	e797      	b.n	800a360 <LoRaMacMlmeRequest+0xd0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a430:	2402      	movs	r4, #2
 800a432:	e795      	b.n	800a360 <LoRaMacMlmeRequest+0xd0>
                status = LORAMAC_STATUS_BUSY;
 800a434:	2401      	movs	r4, #1
 800a436:	e793      	b.n	800a360 <LoRaMacMlmeRequest+0xd0>
        LoRaMacConfirmQueueAdd( &queueElement );
 800a438:	a801      	add	r0, sp, #4
 800a43a:	f000 fa0b 	bl	800a854 <LoRaMacConfirmQueueAdd>
 800a43e:	e736      	b.n	800a2ae <LoRaMacMlmeRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a440:	2403      	movs	r4, #3
 800a442:	e734      	b.n	800a2ae <LoRaMacMlmeRequest+0x1e>
 800a444:	200016d0 	.word	0x200016d0
 800a448:	20001278 	.word	0x20001278
 800a44c:	20001790 	.word	0x20001790

0800a450 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800a454:	4606      	mov	r6, r0
{
 800a456:	b08d      	sub	sp, #52	; 0x34
    if( mcpsRequest == NULL )
 800a458:	b918      	cbnz	r0, 800a462 <LoRaMacMcpsRequest+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a45a:	2003      	movs	r0, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800a45c:	b00d      	add	sp, #52	; 0x34
 800a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	6103      	str	r3, [r0, #16]
    if( LoRaMacIsBusy( ) == true )
 800a466:	f7fe f96d 	bl	8008744 <LoRaMacIsBusy>
 800a46a:	4605      	mov	r5, r0
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d173      	bne.n	800a558 <LoRaMacMcpsRequest+0x108>
    McpsReq_t request = *mcpsRequest;
 800a470:	4637      	mov	r7, r6
 800a472:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a474:	4f56      	ldr	r7, [pc, #344]	; (800a5d0 <LoRaMacMcpsRequest+0x180>)
    McpsReq_t request = *mcpsRequest;
 800a476:	f896 8000 	ldrb.w	r8, [r6]
 800a47a:	f996 b00e 	ldrsb.w	fp, [r6, #14]
    macHdr.Value = 0;
 800a47e:	f88d 5008 	strb.w	r5, [sp, #8]
    McpsReq_t request = *mcpsRequest;
 800a482:	ac07      	add	r4, sp, #28
 800a484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a486:	89b3      	ldrh	r3, [r6, #12]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800a488:	4c52      	ldr	r4, [pc, #328]	; (800a5d4 <LoRaMacMcpsRequest+0x184>)
    McpsReq_t request = *mcpsRequest;
 800a48a:	9301      	str	r3, [sp, #4]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a48c:	2214      	movs	r2, #20
 800a48e:	4629      	mov	r1, r5
 800a490:	f207 4044 	addw	r0, r7, #1092	; 0x444
 800a494:	f00a f8cb 	bl	801462e <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a498:	2201      	movs	r2, #1
 800a49a:	f887 2445 	strb.w	r2, [r7, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800a49e:	f894 219c 	ldrb.w	r2, [r4, #412]	; 0x19c
 800a4a2:	2a02      	cmp	r2, #2
 800a4a4:	d10b      	bne.n	800a4be <LoRaMacMcpsRequest+0x6e>
 800a4a6:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
 800a4aa:	2a02      	cmp	r2, #2
 800a4ac:	d107      	bne.n	800a4be <LoRaMacMcpsRequest+0x6e>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800a4ae:	f894 218a 	ldrb.w	r2, [r4, #394]	; 0x18a
 800a4b2:	b922      	cbnz	r2, 800a4be <LoRaMacMcpsRequest+0x6e>
 800a4b4:	f1b8 0f01 	cmp.w	r8, #1
 800a4b8:	bf38      	it	cc
 800a4ba:	f04f 0801 	movcc.w	r8, #1
    switch( request.Type )
 800a4be:	f1b8 0f01 	cmp.w	r8, #1
 800a4c2:	d02c      	beq.n	800a51e <LoRaMacMcpsRequest+0xce>
 800a4c4:	f1b8 0f03 	cmp.w	r8, #3
 800a4c8:	d02d      	beq.n	800a526 <LoRaMacMcpsRequest+0xd6>
 800a4ca:	f1b8 0f00 	cmp.w	r8, #0
 800a4ce:	d13b      	bne.n	800a548 <LoRaMacMcpsRequest+0xf8>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a4d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a4d4:	2102      	movs	r1, #2
 800a4d6:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = request.Req.Unconfirmed.fPort;
 800a4da:	f89d 9020 	ldrb.w	r9, [sp, #32]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800a4de:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a4e2:	f88d 2008 	strb.w	r2, [sp, #8]
            readyToSend = true;
 800a4e6:	2501      	movs	r5, #1
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a4e8:	f894 1080 	ldrb.w	r1, [r4, #128]	; 0x80
 800a4ec:	f88d 1016 	strb.w	r1, [sp, #22]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a4f0:	2202      	movs	r2, #2
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4f2:	a905      	add	r1, sp, #20
 800a4f4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a4f8:	f88d 2014 	strb.w	r2, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a4fc:	f00b f999 	bl	8015832 <RegionGetPhyParam>
    if( ( adr == true ) &&
 800a500:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a504:	b240      	sxtb	r0, r0
    if( ( adr == true ) &&
 800a506:	2202      	movs	r2, #2
 800a508:	b359      	cbz	r1, 800a562 <LoRaMacMcpsRequest+0x112>
 800a50a:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800a50e:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
    if( ( adr == true ) &&
 800a512:	2901      	cmp	r1, #1
 800a514:	d122      	bne.n	800a55c <LoRaMacMcpsRequest+0x10c>
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800a516:	bb0b      	cbnz	r3, 800a55c <LoRaMacMcpsRequest+0x10c>
    if( readyToSend == true )
 800a518:	bb45      	cbnz	r5, 800a56c <LoRaMacMcpsRequest+0x11c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a51a:	4610      	mov	r0, r2
 800a51c:	e054      	b.n	800a5c8 <LoRaMacMcpsRequest+0x178>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a51e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a522:	2104      	movs	r1, #4
 800a524:	e7d7      	b.n	800a4d6 <LoRaMacMcpsRequest+0x86>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a526:	f89d 3008 	ldrb.w	r3, [sp, #8]
            fBuffer = request.Req.Proprietary.fBuffer;
 800a52a:	f8dd a020 	ldr.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800a52e:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a532:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800a536:	f88d 3008 	strb.w	r3, [sp, #8]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800a53a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800a53e:	9301      	str	r3, [sp, #4]
            readyToSend = true;
 800a540:	2501      	movs	r5, #1
    uint8_t fPort = 0;
 800a542:	f04f 0900 	mov.w	r9, #0
            break;
 800a546:	e7cf      	b.n	800a4e8 <LoRaMacMcpsRequest+0x98>
    switch( request.Type )
 800a548:	f04f 0b00 	mov.w	fp, #0
 800a54c:	46d9      	mov	r9, fp
 800a54e:	e7cb      	b.n	800a4e8 <LoRaMacMcpsRequest+0x98>
            MacCtx.NodeAckRequested = false;
 800a550:	2300      	movs	r3, #0
 800a552:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
 800a556:	e037      	b.n	800a5c8 <LoRaMacMcpsRequest+0x178>
        return LORAMAC_STATUS_BUSY;
 800a558:	2001      	movs	r0, #1
 800a55a:	e77f      	b.n	800a45c <LoRaMacMcpsRequest+0xc>
    if( readyToSend == true )
 800a55c:	b9cd      	cbnz	r5, 800a592 <LoRaMacMcpsRequest+0x142>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a55e:	2002      	movs	r0, #2
 800a560:	e032      	b.n	800a5c8 <LoRaMacMcpsRequest+0x178>
    if( readyToSend == true )
 800a562:	2d00      	cmp	r5, #0
 800a564:	d0d9      	beq.n	800a51a <LoRaMacMcpsRequest+0xca>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a566:	4558      	cmp	r0, fp
 800a568:	bfb8      	it	lt
 800a56a:	4658      	movlt	r0, fp
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a56c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
            verify.DatarateParams.Datarate = datarate;
 800a570:	f88d 0010 	strb.w	r0, [sp, #16]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a574:	2205      	movs	r2, #5
 800a576:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a57a:	f88d 3012 	strb.w	r3, [sp, #18]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a57e:	a904      	add	r1, sp, #16
 800a580:	f00b f96d 	bl	801585e <RegionVerify>
 800a584:	2800      	cmp	r0, #0
 800a586:	f43f af68 	beq.w	800a45a <LoRaMacMcpsRequest+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a58a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a58e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 800a592:	f8d7 0494 	ldr.w	r0, [r7, #1172]	; 0x494
    if( startTimeInMs != 0 )
 800a596:	b138      	cbz	r0, 800a5a8 <LoRaMacMcpsRequest+0x158>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800a598:	f00a f951 	bl	801483e <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800a59c:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
            Nvm.MacGroup1.SrvAckRequested = false;
 800a5a0:	bf84      	itt	hi
 800a5a2:	2300      	movhi	r3, #0
 800a5a4:	f884 3046 	strbhi.w	r3, [r4, #70]	; 0x46
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	4652      	mov	r2, sl
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	a802      	add	r0, sp, #8
 800a5b0:	f7fe fb3e 	bl	8008c30 <Send>
        if( status == LORAMAC_STATUS_OK )
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d1cb      	bne.n	800a550 <LoRaMacMcpsRequest+0x100>
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a5b8:	f897 348d 	ldrb.w	r3, [r7, #1165]	; 0x48d
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800a5bc:	f887 8444 	strb.w	r8, [r7, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a5c0:	f043 0301 	orr.w	r3, r3, #1
 800a5c4:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a5c8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800a5cc:	6133      	str	r3, [r6, #16]
    return status;
 800a5ce:	e745      	b.n	800a45c <LoRaMacMcpsRequest+0xc>
 800a5d0:	20001278 	.word	0x20001278
 800a5d4:	20001790 	.word	0x20001790

0800a5d8 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a5d8:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a5da:	4c05      	ldr	r4, [pc, #20]	; (800a5f0 <LoRaMacCommandsInit+0x18>)
 800a5dc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	f00a f823 	bl	801462e <memset1>
    list->First = NULL;
 800a5e8:	2000      	movs	r0, #0
    list->Last = NULL;
 800a5ea:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a5ee:	bd10      	pop	{r4, pc}
 800a5f0:	20001ea8 	.word	0x20001ea8

0800a5f4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	4616      	mov	r6, r2
    if( payload == NULL )
 800a5fc:	2900      	cmp	r1, #0
 800a5fe:	d040      	beq.n	800a682 <LoRaMacCommandsAddCmd+0x8e>
 800a600:	4b23      	ldr	r3, [pc, #140]	; (800a690 <LoRaMacCommandsAddCmd+0x9c>)
 800a602:	2400      	movs	r4, #0
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a604:	f103 0c01 	add.w	ip, r3, #1
 800a608:	4618      	mov	r0, r3
 800a60a:	0122      	lsls	r2, r4, #4
 800a60c:	3310      	adds	r3, #16
        if( mem[size] != 0x00 )
 800a60e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800a612:	bbc7      	cbnz	r7, 800a686 <LoRaMacCommandsAddCmd+0x92>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a614:	4298      	cmp	r0, r3
 800a616:	d1fa      	bne.n	800a60e <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800a618:	4d1e      	ldr	r5, [pc, #120]	; (800a694 <LoRaMacCommandsAddCmd+0xa0>)
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	b90b      	cbnz	r3, 800a622 <LoRaMacCommandsAddCmd+0x2e>
        list->First = element;
 800a61e:	f8c5 c000 	str.w	ip, [r5]
    if( list->Last )
 800a622:	686b      	ldr	r3, [r5, #4]
 800a624:	b10b      	cbz	r3, 800a62a <LoRaMacCommandsAddCmd+0x36>
        list->Last->Next = element;
 800a626:	f8c3 c000 	str.w	ip, [r3]
    element->Next = NULL;
 800a62a:	18ab      	adds	r3, r5, r2
 800a62c:	f04f 0900 	mov.w	r9, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 800a630:	3401      	adds	r4, #1
    element->Next = NULL;
 800a632:	f8c3 9008 	str.w	r9, [r3, #8]
    newCmd->CID = cid;
 800a636:	f883 800c 	strb.w	r8, [r3, #12]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a63a:	f102 000d 	add.w	r0, r2, #13
    newCmd->PayloadSize = payloadSize;
 800a63e:	0123      	lsls	r3, r4, #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a640:	b2b2      	uxth	r2, r6
 800a642:	4428      	add	r0, r5
    newCmd->PayloadSize = payloadSize;
 800a644:	50ee      	str	r6, [r5, r3]
    list->Last = element;
 800a646:	f8c5 c004 	str.w	ip, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a64a:	f009 ffdc 	bl	8014606 <memcpy1>
    switch( cid )
 800a64e:	f1b8 0f11 	cmp.w	r8, #17
 800a652:	d814      	bhi.n	800a67e <LoRaMacCommandsAddCmd+0x8a>
 800a654:	4b10      	ldr	r3, [pc, #64]	; (800a698 <LoRaMacCommandsAddCmd+0xa4>)
 800a656:	2001      	movs	r0, #1
 800a658:	fa00 f808 	lsl.w	r8, r0, r8
 800a65c:	ea18 0f03 	tst.w	r8, r3
 800a660:	bf14      	ite	ne
 800a662:	4603      	movne	r3, r0
 800a664:	464b      	moveq	r3, r9
    newCmd->IsSticky = IsSticky( cid );
 800a666:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 800a66a:	7123      	strb	r3, [r4, #4]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a66c:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800a670:	3301      	adds	r3, #1
 800a672:	441e      	add	r6, r3
 800a674:	f8c5 6208 	str.w	r6, [r5, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a678:	4638      	mov	r0, r7
 800a67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a67e:	464b      	mov	r3, r9
 800a680:	e7f1      	b.n	800a666 <LoRaMacCommandsAddCmd+0x72>
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a682:	2701      	movs	r7, #1
 800a684:	e7f8      	b.n	800a678 <LoRaMacCommandsAddCmd+0x84>
        if( itr == NUM_OF_MAC_COMMANDS )
 800a686:	3401      	adds	r4, #1
 800a688:	2c20      	cmp	r4, #32
 800a68a:	d1bb      	bne.n	800a604 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a68c:	2702      	movs	r7, #2
 800a68e:	e7f3      	b.n	800a678 <LoRaMacCommandsAddCmd+0x84>
 800a690:	20001eaf 	.word	0x20001eaf
 800a694:	20001ea8 	.word	0x20001ea8
 800a698:	00020720 	.word	0x00020720

0800a69c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800a69c:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 800a69e:	b310      	cbz	r0, 800a6e6 <LoRaMacCommandsRemoveCmd+0x4a>
    curElement = list->First;
 800a6a0:	4a12      	ldr	r2, [pc, #72]	; (800a6ec <LoRaMacCommandsRemoveCmd+0x50>)
 800a6a2:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 800a6a4:	4298      	cmp	r0, r3
 800a6a6:	d104      	bne.n	800a6b2 <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 800a6a8:	6803      	ldr	r3, [r0, #0]
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	e004      	b.n	800a6ba <LoRaMacCommandsRemoveCmd+0x1e>
 800a6b0:	460b      	mov	r3, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a6b2:	b113      	cbz	r3, 800a6ba <LoRaMacCommandsRemoveCmd+0x1e>
 800a6b4:	6819      	ldr	r1, [r3, #0]
 800a6b6:	4288      	cmp	r0, r1
 800a6b8:	d1fa      	bne.n	800a6b0 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 800a6ba:	6851      	ldr	r1, [r2, #4]
 800a6bc:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 800a6be:	bf08      	it	eq
 800a6c0:	6053      	streq	r3, [r2, #4]
    if( PrevElement != NULL )
 800a6c2:	b10b      	cbz	r3, 800a6c8 <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 800a6c4:	6801      	ldr	r1, [r0, #0]
 800a6c6:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a6c8:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800a6cc:	6881      	ldr	r1, [r0, #8]
 800a6ce:	3b01      	subs	r3, #1
    element->Next = NULL;
 800a6d0:	2400      	movs	r4, #0
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a6d2:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 800a6d4:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a6d6:	4621      	mov	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a6d8:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a6dc:	2210      	movs	r2, #16
 800a6de:	f009 ffa6 	bl	801462e <memset1>
    return true;
 800a6e2:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a6e4:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	e7fc      	b.n	800a6e4 <LoRaMacCommandsRemoveCmd+0x48>
 800a6ea:	bf00      	nop
 800a6ec:	20001ea8 	.word	0x20001ea8

0800a6f0 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800a6f0:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>)
 800a6f4:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a6f6:	b900      	cbnz	r0, 800a6fa <LoRaMacCommandsRemoveNoneStickyCmds+0xa>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a6f8:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 800a6fa:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 800a6fc:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 800a6fe:	b90b      	cbnz	r3, 800a704 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            LoRaMacCommandsRemoveCmd( curElement );
 800a700:	f7ff ffcc 	bl	800a69c <LoRaMacCommandsRemoveCmd>
{
 800a704:	4620      	mov	r0, r4
 800a706:	e7f6      	b.n	800a6f6 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800a708:	20001ea8 	.word	0x20001ea8

0800a70c <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a70c:	4b09      	ldr	r3, [pc, #36]	; (800a734 <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
{
 800a70e:	b570      	push	{r4, r5, r6, lr}
    curElement = CommandsCtx.MacCommandList.First;
 800a710:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a712:	4d09      	ldr	r5, [pc, #36]	; (800a738 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
 800a714:	2401      	movs	r4, #1
 800a716:	b900      	cbnz	r0, 800a71a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a718:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800a71a:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 800a71c:	6806      	ldr	r6, [r0, #0]
    switch( cid )
 800a71e:	2b11      	cmp	r3, #17
 800a720:	d805      	bhi.n	800a72e <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
 800a722:	fa04 f303 	lsl.w	r3, r4, r3
 800a726:	422b      	tst	r3, r5
 800a728:	d001      	beq.n	800a72e <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
            LoRaMacCommandsRemoveCmd( curElement );
 800a72a:	f7ff ffb7 	bl	800a69c <LoRaMacCommandsRemoveCmd>
{
 800a72e:	4630      	mov	r0, r6
 800a730:	e7f1      	b.n	800a716 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
 800a732:	bf00      	nop
 800a734:	20001ea8 	.word	0x20001ea8
 800a738:	00020720 	.word	0x00020720

0800a73c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800a73c:	b128      	cbz	r0, 800a74a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800a73e:	4b04      	ldr	r3, [pc, #16]	; (800a750 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a740:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a744:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800a746:	2000      	movs	r0, #0
 800a748:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a74a:	2001      	movs	r0, #1
}
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	20001ea8 	.word	0x20001ea8

0800a754 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a758:	4607      	mov	r7, r0
 800a75a:	460e      	mov	r6, r1
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a75c:	4615      	mov	r5, r2
 800a75e:	b332      	cbz	r2, 800a7ae <LoRaMacCommandsSerializeCmds+0x5a>
 800a760:	b329      	cbz	r1, 800a7ae <LoRaMacCommandsSerializeCmds+0x5a>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a762:	4b14      	ldr	r3, [pc, #80]	; (800a7b4 <LoRaMacCommandsSerializeCmds+0x60>)
 800a764:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800a766:	2300      	movs	r3, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a768:	b92c      	cbnz	r4, 800a776 <LoRaMacCommandsSerializeCmds+0x22>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a76a:	4630      	mov	r0, r6
 800a76c:	f7ff ffe6 	bl	800a73c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a770:	2000      	movs	r0, #0
}
 800a772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a776:	68a2      	ldr	r2, [r4, #8]
 800a778:	1af9      	subs	r1, r7, r3
 800a77a:	3201      	adds	r2, #1
 800a77c:	4291      	cmp	r1, r2
 800a77e:	d30f      	bcc.n	800a7a0 <LoRaMacCommandsSerializeCmds+0x4c>
            buffer[itr++] = curElement->CID;
 800a780:	7922      	ldrb	r2, [r4, #4]
 800a782:	54ea      	strb	r2, [r5, r3]
 800a784:	1c58      	adds	r0, r3, #1
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a786:	8922      	ldrh	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
 800a788:	fa5f f880 	uxtb.w	r8, r0
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a78c:	1d61      	adds	r1, r4, #5
 800a78e:	fa55 f080 	uxtab	r0, r5, r0
 800a792:	f009 ff38 	bl	8014606 <memcpy1>
            itr += curElement->PayloadSize;
 800a796:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800a798:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800a79a:	4443      	add	r3, r8
 800a79c:	b2db      	uxtb	r3, r3
        curElement = curElement->Next;
 800a79e:	e7e3      	b.n	800a768 <LoRaMacCommandsSerializeCmds+0x14>
        nextElement = curElement->Next;
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a7a4:	f7ff ff7a 	bl	800a69c <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800a7a8:	2c00      	cmp	r4, #0
 800a7aa:	d1f9      	bne.n	800a7a0 <LoRaMacCommandsSerializeCmds+0x4c>
 800a7ac:	e7dd      	b.n	800a76a <LoRaMacCommandsSerializeCmds+0x16>
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	e7df      	b.n	800a772 <LoRaMacCommandsSerializeCmds+0x1e>
 800a7b2:	bf00      	nop
 800a7b4:	20001ea8 	.word	0x20001ea8

0800a7b8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	b168      	cbz	r0, 800a7d8 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800a7bc:	4a07      	ldr	r2, [pc, #28]	; (800a7dc <LoRaMacCommandsStickyCmdsPending+0x24>)
 800a7be:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a7c4:	b900      	cbnz	r0, 800a7c8 <LoRaMacCommandsStickyCmdsPending+0x10>
 800a7c6:	4770      	bx	lr
    {
        if( curElement->IsSticky == true )
 800a7c8:	7b02      	ldrb	r2, [r0, #12]
 800a7ca:	b11a      	cbz	r2, 800a7d4 <LoRaMacCommandsStickyCmdsPending+0x1c>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	4770      	bx	lr
        }
        curElement = curElement->Next;
 800a7d4:	6800      	ldr	r0, [r0, #0]
 800a7d6:	e7f5      	b.n	800a7c4 <LoRaMacCommandsStickyCmdsPending+0xc>
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a7d8:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a7da:	4770      	bx	lr
 800a7dc:	20001ea8 	.word	0x20001ea8

0800a7e0 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a7e0:	3802      	subs	r0, #2
 800a7e2:	b2c0      	uxtb	r0, r0
 800a7e4:	2811      	cmp	r0, #17
 800a7e6:	bf9a      	itte	ls
 800a7e8:	4b01      	ldrls	r3, [pc, #4]	; (800a7f0 <LoRaMacCommandsGetCmdSize+0x10>)
 800a7ea:	5c18      	ldrbls	r0, [r3, r0]
{
 800a7ec:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a7ee:	4770      	bx	lr
 800a7f0:	0801c20a 	.word	0x0801c20a

0800a7f4 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a7f4:	b530      	push	{r4, r5, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <GetElement.constprop.0+0x30>)
 800a7f8:	f893 2020 	ldrb.w	r2, [r3, #32]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	4608      	mov	r0, r1
    if( count == 0 )
 800a800:	b172      	cbz	r2, 800a820 <GetElement.constprop.0+0x2c>
 800a802:	2100      	movs	r1, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a804:	331c      	adds	r3, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800a806:	7805      	ldrb	r5, [r0, #0]
 800a808:	42a5      	cmp	r5, r4
 800a80a:	d008      	beq.n	800a81e <GetElement.constprop.0+0x2a>
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a80c:	3101      	adds	r1, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a80e:	4298      	cmp	r0, r3
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a810:	b2cd      	uxtb	r5, r1
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a812:	bf0c      	ite	eq
 800a814:	4804      	ldreq	r0, [pc, #16]	; (800a828 <GetElement.constprop.0+0x34>)
        bufferPointer++;
 800a816:	3004      	addne	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a818:	42aa      	cmp	r2, r5
 800a81a:	d8f4      	bhi.n	800a806 <GetElement.constprop.0+0x12>
        return NULL;
 800a81c:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800a81e:	bd30      	pop	{r4, r5, pc}
        return NULL;
 800a820:	4610      	mov	r0, r2
 800a822:	e7fc      	b.n	800a81e <GetElement.constprop.0+0x2a>
 800a824:	200020b4 	.word	0x200020b4
 800a828:	200020c0 	.word	0x200020c0

0800a82c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a82c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a82e:	4c08      	ldr	r4, [pc, #32]	; (800a850 <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a830:	2300      	movs	r3, #0
    ConfirmQueueCtx.Primitives = primitives;
 800a832:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a834:	2214      	movs	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a836:	f104 000c 	add.w	r0, r4, #12
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a83a:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a83c:	f884 3020 	strb.w	r3, [r4, #32]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a840:	e9c4 0001 	strd	r0, r0, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a844:	f009 fef3 	bl	801462e <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800a84e:	bd10      	pop	{r4, pc}
 800a850:	200020b4 	.word	0x200020b4

0800a854 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a854:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a856:	4a0e      	ldr	r2, [pc, #56]	; (800a890 <LoRaMacConfirmQueueAdd+0x3c>)
 800a858:	f892 1020 	ldrb.w	r1, [r2, #32]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a85c:	2904      	cmp	r1, #4
 800a85e:	d815      	bhi.n	800a88c <LoRaMacConfirmQueueAdd+0x38>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a860:	6893      	ldr	r3, [r2, #8]
 800a862:	7804      	ldrb	r4, [r0, #0]
 800a864:	701c      	strb	r4, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a866:	7844      	ldrb	r4, [r0, #1]
 800a868:	705c      	strb	r4, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a86a:	78c4      	ldrb	r4, [r0, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800a86c:	7880      	ldrb	r0, [r0, #2]
 800a86e:	7098      	strb	r0, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a870:	3101      	adds	r1, #1
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a872:	70dc      	strb	r4, [r3, #3]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a874:	f882 1020 	strb.w	r1, [r2, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a878:	f102 011c 	add.w	r1, r2, #28
 800a87c:	428b      	cmp	r3, r1
        bufferPointer++;
 800a87e:	bf14      	ite	ne
 800a880:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a882:	f102 030c 	addeq.w	r3, r2, #12
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a886:	6093      	str	r3, [r2, #8]

    return true;
 800a888:	2001      	movs	r0, #1
}
 800a88a:	bd10      	pop	{r4, pc}
        return false;
 800a88c:	2000      	movs	r0, #0
 800a88e:	e7fc      	b.n	800a88a <LoRaMacConfirmQueueAdd+0x36>
 800a890:	200020b4 	.word	0x200020b4

0800a894 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a894:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a896:	f893 0020 	ldrb.w	r0, [r3, #32]
    if( count == 0 )
 800a89a:	b168      	cbz	r0, 800a8b8 <LoRaMacConfirmQueueRemoveFirst+0x24>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a89c:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a89e:	f103 011c 	add.w	r1, r3, #28
 800a8a2:	428a      	cmp	r2, r1
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a8a4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
        bufferPointer++;
 800a8a8:	bf14      	ite	ne
 800a8aa:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a8ac:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a8b0:	f883 0020 	strb.w	r0, [r3, #32]
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a8b4:	605a      	str	r2, [r3, #4]

    return true;
 800a8b6:	2001      	movs	r0, #1
}
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	200020b4 	.word	0x200020b4

0800a8c0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a8c0:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a8c2:	4b07      	ldr	r3, [pc, #28]	; (800a8e0 <LoRaMacConfirmQueueSetStatus+0x20>)
    if( count == 0 )
 800a8c4:	f893 2020 	ldrb.w	r2, [r3, #32]
{
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	4608      	mov	r0, r1
    if( count == 0 )
 800a8cc:	b132      	cbz	r2, 800a8dc <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a8ce:	6859      	ldr	r1, [r3, #4]
 800a8d0:	f7ff ff90 	bl	800a7f4 <GetElement.constprop.0>
        if( element != NULL )
 800a8d4:	b110      	cbz	r0, 800a8dc <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800a8d6:	2301      	movs	r3, #1
            element->Status = status;
 800a8d8:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800a8da:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800a8dc:	bd10      	pop	{r4, pc}
 800a8de:	bf00      	nop
 800a8e0:	200020b4 	.word	0x200020b4

0800a8e4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a8e4:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a8e6:	4b06      	ldr	r3, [pc, #24]	; (800a900 <LoRaMacConfirmQueueGetStatus+0x1c>)
    if( count == 0 )
 800a8e8:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a8ec:	b12a      	cbz	r2, 800a8fa <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a8ee:	6859      	ldr	r1, [r3, #4]
 800a8f0:	f7ff ff80 	bl	800a7f4 <GetElement.constprop.0>
        if( element != NULL )
 800a8f4:	b108      	cbz	r0, 800a8fa <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
 800a8f6:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
 800a8f8:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	e7fc      	b.n	800a8f8 <LoRaMacConfirmQueueGetStatus+0x14>
 800a8fe:	bf00      	nop
 800a900:	200020b4 	.word	0x200020b4

0800a904 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a904:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a906:	4a0a      	ldr	r2, [pc, #40]	; (800a930 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)
    if( count == 0 )
 800a908:	f892 1020 	ldrb.w	r1, [r2, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a90c:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a90e:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
    if( count == 0 )
 800a912:	b161      	cbz	r1, 800a92e <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a914:	6891      	ldr	r1, [r2, #8]
                element->ReadyToHandle = true;
 800a916:	2401      	movs	r4, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a918:	321c      	adds	r2, #28
            if( element->RestrictCommonReadyToHandle == false )
 800a91a:	78dd      	ldrb	r5, [r3, #3]
            element->Status = status;
 800a91c:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a91e:	b905      	cbnz	r5, 800a922 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 800a920:	709c      	strb	r4, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a922:	4293      	cmp	r3, r2
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a924:	bf0c      	ite	eq
 800a926:	4b03      	ldreq	r3, [pc, #12]	; (800a934 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
        bufferPointer++;
 800a928:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a92a:	4299      	cmp	r1, r3
 800a92c:	d1f5      	bne.n	800a91a <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 800a92e:	bd30      	pop	{r4, r5, pc}
 800a930:	200020b4 	.word	0x200020b4
 800a934:	200020c0 	.word	0x200020c0

0800a938 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800a938:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a93a:	4b04      	ldr	r3, [pc, #16]	; (800a94c <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800a93c:	6859      	ldr	r1, [r3, #4]
 800a93e:	f7ff ff59 	bl	800a7f4 <GetElement.constprop.0>
    {
        return true;
    }
    return false;
}
 800a942:	3800      	subs	r0, #0
 800a944:	bf18      	it	ne
 800a946:	2001      	movne	r0, #1
 800a948:	bd08      	pop	{r3, pc}
 800a94a:	bf00      	nop
 800a94c:	200020b4 	.word	0x200020b4

0800a950 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a954:	4e12      	ldr	r6, [pc, #72]	; (800a9a0 <LoRaMacConfirmQueueHandleCb+0x50>)
 800a956:	f896 8020 	ldrb.w	r8, [r6, #32]
{
 800a95a:	4604      	mov	r4, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a95c:	2500      	movs	r5, #0
 800a95e:	b2eb      	uxtb	r3, r5
 800a960:	4598      	cmp	r8, r3
 800a962:	d802      	bhi.n	800a96a <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800a964:	b002      	add	sp, #8
 800a966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a96a:	6873      	ldr	r3, [r6, #4]
 800a96c:	7819      	ldrb	r1, [r3, #0]
 800a96e:	7021      	strb	r1, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a970:	785a      	ldrb	r2, [r3, #1]
 800a972:	7062      	strb	r2, [r4, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a974:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800a976:	b15f      	cbz	r7, 800a990 <LoRaMacConfirmQueueHandleCb+0x40>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a978:	6833      	ldr	r3, [r6, #0]
 800a97a:	4620      	mov	r0, r4
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800a980:	f7ff ff88 	bl	800a894 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800a984:	b917      	cbnz	r7, 800a98c <LoRaMacConfirmQueueHandleCb+0x3c>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a986:	a801      	add	r0, sp, #4
 800a988:	f7ff ff64 	bl	800a854 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a98c:	3501      	adds	r5, #1
 800a98e:	e7e6      	b.n	800a95e <LoRaMacConfirmQueueHandleCb+0xe>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a990:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a992:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a996:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a99a:	f88d 3007 	strb.w	r3, [sp, #7]
 800a99e:	e7ef      	b.n	800a980 <LoRaMacConfirmQueueHandleCb+0x30>
 800a9a0:	200020b4 	.word	0x200020b4

0800a9a4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800a9a4:	4b01      	ldr	r3, [pc, #4]	; (800a9ac <LoRaMacConfirmQueueGetCnt+0x8>)
 800a9a6:	f893 0020 	ldrb.w	r0, [r3, #32]
 800a9aa:	4770      	bx	lr
 800a9ac:	200020b4 	.word	0x200020b4

0800a9b0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a9b0:	4b03      	ldr	r3, [pc, #12]	; (800a9c0 <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a9b2:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
 800a9b6:	2804      	cmp	r0, #4
 800a9b8:	bf94      	ite	ls
 800a9ba:	2000      	movls	r0, #0
 800a9bc:	2001      	movhi	r0, #1
 800a9be:	4770      	bx	lr
 800a9c0:	200020b4 	.word	0x200020b4

0800a9c4 <GetLastFcntDown.constprop.0>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800a9c4:	3801      	subs	r0, #1
 800a9c6:	2806      	cmp	r0, #6
 800a9c8:	d82a      	bhi.n	800aa20 <GetLastFcntDown.constprop.0+0x5c>
 800a9ca:	e8df f000 	tbb	[pc, r0]
 800a9ce:	0c04      	.short	0x0c04
 800a9d0:	211d1812 	.word	0x211d1812
 800a9d4:	25          	.byte	0x25
 800a9d5:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a9d6:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <GetLastFcntDown.constprop.0+0x60>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	691a      	ldr	r2, [r3, #16]
 800a9dc:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800a9de:	691a      	ldr	r2, [r3, #16]
            break;
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a9e0:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
#endif
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800a9e2:	2000      	movs	r0, #0
            break;
 800a9e4:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <GetLastFcntDown.constprop.0+0x60>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	695a      	ldr	r2, [r3, #20]
 800a9ec:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	e7f6      	b.n	800a9e0 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a9f2:	4b0c      	ldr	r3, [pc, #48]	; (800aa24 <GetLastFcntDown.constprop.0+0x60>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	699a      	ldr	r2, [r3, #24]
 800a9f8:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a9fa:	699a      	ldr	r2, [r3, #24]
 800a9fc:	e7f0      	b.n	800a9e0 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <GetLastFcntDown.constprop.0+0x60>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 800aa04:	600b      	str	r3, [r1, #0]
            break;
 800aa06:	e7ec      	b.n	800a9e2 <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
 800aa08:	4b06      	ldr	r3, [pc, #24]	; (800aa24 <GetLastFcntDown.constprop.0+0x60>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	e7f9      	b.n	800aa04 <GetLastFcntDown.constprop.0+0x40>
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
 800aa10:	4b04      	ldr	r3, [pc, #16]	; (800aa24 <GetLastFcntDown.constprop.0+0x60>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	e7f5      	b.n	800aa04 <GetLastFcntDown.constprop.0+0x40>
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 800aa18:	4b02      	ldr	r3, [pc, #8]	; (800aa24 <GetLastFcntDown.constprop.0+0x60>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1e:	e7f1      	b.n	800aa04 <GetLastFcntDown.constprop.0+0x40>
    switch( fCntID )
 800aa20:	2005      	movs	r0, #5
}
 800aa22:	4770      	bx	lr
 800aa24:	200020d8 	.word	0x200020d8

0800aa28 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800aa28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa2c:	b0c5      	sub	sp, #276	; 0x114
 800aa2e:	e9dd 654c 	ldrd	r6, r5, [sp, #304]	; 0x130
 800aa32:	460c      	mov	r4, r1
 800aa34:	4690      	mov	r8, r2
 800aa36:	461f      	mov	r7, r3
    if( msg == 0 )
 800aa38:	4681      	mov	r9, r0
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d051      	beq.n	800aae2 <VerifyCmacB0.constprop.0+0xba>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800aa3e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800aa42:	d850      	bhi.n	800aae6 <VerifyCmacB0.constprop.0+0xbe>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800aa44:	f44f 7288 	mov.w	r2, #272	; 0x110
 800aa48:	2100      	movs	r1, #0
 800aa4a:	4668      	mov	r0, sp
 800aa4c:	f009 fdef 	bl	801462e <memset1>
    b0[0] = 0x49;
 800aa50:	2349      	movs	r3, #73	; 0x49
 800aa52:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 800aa56:	2f00      	cmp	r7, #0
 800aa58:	d03e      	beq.n	800aad8 <VerifyCmacB0.constprop.0+0xb0>
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
 800aa5a:	4b24      	ldr	r3, [pc, #144]	; (800aaec <VerifyCmacB0.constprop.0+0xc4>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 800aa60:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800aa64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800aa68:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[5] = dir;
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800aa72:	0a32      	lsrs	r2, r6, #8
 800aa74:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800aa78:	0c32      	lsrs	r2, r6, #16
 800aa7a:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800aa7e:	0a2a      	lsrs	r2, r5, #8
 800aa80:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800aa84:	0c2a      	lsrs	r2, r5, #16
    b0[3] = 0x00;
 800aa86:	2300      	movs	r3, #0
    b0[6] = devAddr & 0xFF;
 800aa88:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[10] = fCnt & 0xFF;
 800aa8c:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800aa90:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800aa94:	4649      	mov	r1, r9
 800aa96:	4622      	mov	r2, r4
 800aa98:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800aa9a:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aa9c:	0e2d      	lsrs	r5, r5, #24
    b0[3] = 0x00;
 800aa9e:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 800aaa2:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[14] = 0x00;
 800aaa6:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800aaaa:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aaae:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[15] = msgLen & 0xFF;
 800aab2:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800aab6:	f009 fda6 	bl	8014606 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800aaba:	f104 0110 	add.w	r1, r4, #16
 800aabe:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800aac0:	4643      	mov	r3, r8
 800aac2:	b289      	uxth	r1, r1
 800aac4:	4668      	mov	r0, sp
 800aac6:	f00a fb53 	bl	8015170 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800aaca:	b110      	cbz	r0, 800aad2 <VerifyCmacB0.constprop.0+0xaa>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aacc:	2801      	cmp	r0, #1
 800aace:	bf18      	it	ne
 800aad0:	200e      	movne	r0, #14
}
 800aad2:	b045      	add	sp, #276	; 0x114
 800aad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        b0[1] = 0x00;
 800aad8:	f88d 7001 	strb.w	r7, [sp, #1]
        b0[2] = 0x00;
 800aadc:	f88d 7002 	strb.w	r7, [sp, #2]
 800aae0:	e7c4      	b.n	800aa6c <VerifyCmacB0.constprop.0+0x44>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aae2:	2009      	movs	r0, #9
 800aae4:	e7f5      	b.n	800aad2 <VerifyCmacB0.constprop.0+0xaa>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800aae6:	200d      	movs	r0, #13
 800aae8:	e7f3      	b.n	800aad2 <VerifyCmacB0.constprop.0+0xaa>
 800aaea:	bf00      	nop
 800aaec:	200020d8 	.word	0x200020d8

0800aaf0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 800aaf0:	b510      	push	{r4, lr}
    if( nvm == NULL )
 800aaf2:	b1a8      	cbz	r0, 800ab20 <LoRaMacCryptoInit+0x30>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800aaf4:	4c0b      	ldr	r4, [pc, #44]	; (800ab24 <LoRaMacCryptoInit+0x34>)

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800aaf6:	2234      	movs	r2, #52	; 0x34
 800aaf8:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 800aafa:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800aafc:	f009 fd97 	bl	801462e <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800ab00:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800ab02:	4a09      	ldr	r2, [pc, #36]	; (800ab28 <LoRaMacCryptoInit+0x38>)
 800ab04:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ab06:	2000      	movs	r0, #0
 800ab08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab0c:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ab10:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800ab14:	e9c3 2207 	strd	r2, r2, [r3, #28]
 800ab18:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800ab1c:	62da      	str	r2, [r3, #44]	; 0x2c

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ab1e:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800ab20:	2008      	movs	r0, #8
 800ab22:	e7fc      	b.n	800ab1e <LoRaMacCryptoInit+0x2e>
 800ab24:	200020d8 	.word	0x200020d8
 800ab28:	01010100 	.word	0x01010100

0800ab2c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800ab2c:	4b02      	ldr	r3, [pc, #8]	; (800ab38 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800ab32:	2000      	movs	r0, #0
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	200020d8 	.word	0x200020d8

0800ab3c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800ab3c:	b130      	cbz	r0, 800ab4c <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800ab3e:	4b04      	ldr	r3, [pc, #16]	; (800ab50 <LoRaMacCryptoGetFCntUp+0x14>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	3301      	adds	r3, #1
 800ab46:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800ab48:	2000      	movs	r0, #0
 800ab4a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab4c:	2009      	movs	r0, #9
}
 800ab4e:	4770      	bx	lr
 800ab50:	200020d8 	.word	0x200020d8

0800ab54 <LoRaMacCryptoSetMulticastReference>:
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800ab54:	b178      	cbz	r0, 800ab76 <LoRaMacCryptoSetMulticastReference+0x22>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800ab56:	4b09      	ldr	r3, [pc, #36]	; (800ab7c <LoRaMacCryptoSetMulticastReference+0x28>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f103 021c 	add.w	r2, r3, #28
 800ab5e:	6202      	str	r2, [r0, #32]
 800ab60:	f103 0220 	add.w	r2, r3, #32
 800ab64:	64c2      	str	r2, [r0, #76]	; 0x4c
 800ab66:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ab6a:	3328      	adds	r3, #40	; 0x28
 800ab6c:	6782      	str	r2, [r0, #120]	; 0x78
 800ab6e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ab72:	2000      	movs	r0, #0
 800ab74:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab76:	2009      	movs	r0, #9
}
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	200020d8 	.word	0x200020d8

0800ab80 <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800ab80:	b513      	push	{r0, r1, r4, lr}
    if( macMsg == 0 )
 800ab82:	4604      	mov	r4, r0
 800ab84:	b1c8      	cbz	r0, 800abba <LoRaMacCryptoPrepareJoinRequest+0x3a>
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800ab86:	4b0f      	ldr	r3, [pc, #60]	; (800abc4 <LoRaMacCryptoPrepareJoinRequest+0x44>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	8893      	ldrh	r3, [r2, #4]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	8093      	strh	r3, [r2, #4]
#endif
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800ab92:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab94:	f00a fda8 	bl	80156e8 <LoRaMacSerializerJoinRequest>
 800ab98:	b960      	cbnz	r0, 800abb4 <LoRaMacCryptoPrepareJoinRequest+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800ab9a:	f104 0318 	add.w	r3, r4, #24
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	6821      	ldr	r1, [r4, #0]
 800aba2:	2301      	movs	r3, #1
 800aba4:	2213      	movs	r2, #19
 800aba6:	f00a fada 	bl	801515e <SecureElementComputeAesCmac>
 800abaa:	b940      	cbnz	r0, 800abbe <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800abac:	4620      	mov	r0, r4
 800abae:	f00a fd9b 	bl	80156e8 <LoRaMacSerializerJoinRequest>
 800abb2:	b100      	cbz	r0, 800abb6 <LoRaMacCryptoPrepareJoinRequest+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800abb4:	2010      	movs	r0, #16
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800abb6:	b002      	add	sp, #8
 800abb8:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800abba:	2009      	movs	r0, #9
 800abbc:	e7fb      	b.n	800abb6 <LoRaMacCryptoPrepareJoinRequest+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800abbe:	200e      	movs	r0, #14
 800abc0:	e7f9      	b.n	800abb6 <LoRaMacCryptoPrepareJoinRequest+0x36>
 800abc2:	bf00      	nop
 800abc4:	200020d8 	.word	0x200020d8

0800abc8 <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 800abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abca:	4605      	mov	r5, r0
 800abcc:	b087      	sub	sp, #28
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800abce:	461c      	mov	r4, r3
 800abd0:	b323      	cbz	r3, 800ac1c <LoRaMacCryptoSecureMessage+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800abd2:	4e35      	ldr	r6, [pc, #212]	; (800aca8 <LoRaMacCryptoSecureMessage+0xe0>)
 800abd4:	6833      	ldr	r3, [r6, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	4283      	cmp	r3, r0
 800abda:	d863      	bhi.n	800aca4 <LoRaMacCryptoSecureMessage+0xdc>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800abdc:	f894 2020 	ldrb.w	r2, [r4, #32]
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800abe0:	2a00      	cmp	r2, #0
 800abe2:	bf14      	ite	ne
 800abe4:	2207      	movne	r2, #7
 800abe6:	2206      	moveq	r2, #6
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800abe8:	4283      	cmp	r3, r0
 800abea:	d305      	bcc.n	800abf8 <LoRaMacCryptoSecureMessage+0x30>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800abec:	4620      	mov	r0, r4
 800abee:	f00a fdaf 	bl	8015750 <LoRaMacSerializerData>
 800abf2:	b170      	cbz	r0, 800ac12 <LoRaMacCryptoSecureMessage+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800abf4:	2010      	movs	r0, #16
 800abf6:	e00a      	b.n	800ac0e <LoRaMacCryptoSecureMessage+0x46>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800abf8:	2300      	movs	r3, #0
 800abfa:	9001      	str	r0, [sp, #4]
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	68a3      	ldr	r3, [r4, #8]
 800ac00:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800ac04:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac06:	f00a fc16 	bl	8015436 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d0ee      	beq.n	800abec <LoRaMacCryptoSecureMessage+0x24>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ac0e:	b007      	add	sp, #28
 800ac10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac12:	7927      	ldrb	r7, [r4, #4]
 800ac14:	6821      	ldr	r1, [r4, #0]
 800ac16:	3f04      	subs	r7, #4
 800ac18:	b2ba      	uxth	r2, r7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ac1a:	b909      	cbnz	r1, 800ac20 <LoRaMacCryptoSecureMessage+0x58>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac1c:	2009      	movs	r0, #9
 800ac1e:	e7f6      	b.n	800ac0e <LoRaMacCryptoSecureMessage+0x46>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ac20:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ac24:	d83c      	bhi.n	800aca0 <LoRaMacCryptoSecureMessage+0xd8>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac26:	68a3      	ldr	r3, [r4, #8]
    b0[6] = devAddr & 0xFF;
 800ac28:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[0] = 0x49;
 800ac2c:	f04f 0c49 	mov.w	ip, #73	; 0x49
 800ac30:	f88d c008 	strb.w	ip, [sp, #8]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800ac34:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800ac38:	f88d c00f 	strb.w	ip, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ac3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800ac40:	0e1b      	lsrs	r3, r3, #24
 800ac42:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800ac46:	0a2b      	lsrs	r3, r5, #8
 800ac48:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800ac4c:	0c2b      	lsrs	r3, r5, #16
 800ac4e:	f88d 3014 	strb.w	r3, [sp, #20]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800ac52:	0e2b      	lsrs	r3, r5, #24
 800ac54:	f88d 3015 	strb.w	r3, [sp, #21]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac58:	f104 032c 	add.w	r3, r4, #44	; 0x2c
        b0[1] = 0x00;
 800ac5c:	f88d 0009 	strb.w	r0, [sp, #9]
        b0[2] = 0x00;
 800ac60:	f88d 000a 	strb.w	r0, [sp, #10]
    b0[3] = 0x00;
 800ac64:	f88d 000b 	strb.w	r0, [sp, #11]
    b0[4] = 0x00;
 800ac68:	f88d 000c 	strb.w	r0, [sp, #12]
    b0[5] = dir;
 800ac6c:	f88d 000d 	strb.w	r0, [sp, #13]
    b0[14] = 0x00;
 800ac70:	f88d 0016 	strb.w	r0, [sp, #22]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	a802      	add	r0, sp, #8
 800ac78:	2306      	movs	r3, #6
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ac7a:	f88d c010 	strb.w	ip, [sp, #16]
    b0[10] = fCnt & 0xFF;
 800ac7e:	f88d 5012 	strb.w	r5, [sp, #18]
    b0[15] = msgLen & 0xFF;
 800ac82:	f88d 7017 	strb.w	r7, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ac86:	f00a fa6a 	bl	801515e <SecureElementComputeAesCmac>
 800ac8a:	b108      	cbz	r0, 800ac90 <LoRaMacCryptoSecureMessage+0xc8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac8c:	200e      	movs	r0, #14
 800ac8e:	e7be      	b.n	800ac0e <LoRaMacCryptoSecureMessage+0x46>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac90:	4620      	mov	r0, r4
 800ac92:	f00a fd5d 	bl	8015750 <LoRaMacSerializerData>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d1ac      	bne.n	800abf4 <LoRaMacCryptoSecureMessage+0x2c>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ac9a:	6833      	ldr	r3, [r6, #0]
 800ac9c:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 800ac9e:	e7b6      	b.n	800ac0e <LoRaMacCryptoSecureMessage+0x46>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800aca0:	200d      	movs	r0, #13
 800aca2:	e7b4      	b.n	800ac0e <LoRaMacCryptoSecureMessage+0x46>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800aca4:	2006      	movs	r0, #6
 800aca6:	e7b2      	b.n	800ac0e <LoRaMacCryptoSecureMessage+0x46>
 800aca8:	200020d8 	.word	0x200020d8

0800acac <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800acac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb0:	b086      	sub	sp, #24
 800acb2:	4681      	mov	r9, r0
 800acb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800acb6:	4688      	mov	r8, r1
 800acb8:	4617      	mov	r7, r2
 800acba:	461c      	mov	r4, r3
    if( macMsg == 0 )
 800acbc:	2d00      	cmp	r5, #0
 800acbe:	d079      	beq.n	800adb4 <LoRaMacCryptoUnsecureMessage+0x108>
    uint32_t lastDown = 0;
 800acc0:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800acc2:	a905      	add	r1, sp, #20
 800acc4:	4610      	mov	r0, r2
    uint32_t lastDown = 0;
 800acc6:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800acc8:	f7ff fe7c 	bl	800a9c4 <GetLastFcntDown.constprop.0>
 800accc:	b118      	cbz	r0, 800acd6 <LoRaMacCryptoUnsecureMessage+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800acce:	2006      	movs	r0, #6
#endif

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
 800acd0:	b006      	add	sp, #24
 800acd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( currentDown > lastDown ) ||
 800acd6:	9b05      	ldr	r3, [sp, #20]
 800acd8:	429c      	cmp	r4, r3
 800acda:	d801      	bhi.n	800ace0 <LoRaMacCryptoUnsecureMessage+0x34>
 800acdc:	3301      	adds	r3, #1
 800acde:	d1f6      	bne.n	800acce <LoRaMacCryptoUnsecureMessage+0x22>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ace0:	4628      	mov	r0, r5
 800ace2:	f00a fca6 	bl	8015632 <LoRaMacParserData>
 800ace6:	4606      	mov	r6, r0
 800ace8:	2800      	cmp	r0, #0
 800acea:	d165      	bne.n	800adb8 <LoRaMacCryptoUnsecureMessage+0x10c>
        if( KeyAddrList[i].AddrID == addrID )
 800acec:	4833      	ldr	r0, [pc, #204]	; (800adbc <LoRaMacCryptoUnsecureMessage+0x110>)
 800acee:	f810 3026 	ldrb.w	r3, [r0, r6, lsl #2]
 800acf2:	454b      	cmp	r3, r9
 800acf4:	d104      	bne.n	800ad00 <LoRaMacCryptoUnsecureMessage+0x54>
    if( address != macMsg->FHDR.DevAddr )
 800acf6:	68ab      	ldr	r3, [r5, #8]
 800acf8:	4543      	cmp	r3, r8
 800acfa:	d006      	beq.n	800ad0a <LoRaMacCryptoUnsecureMessage+0x5e>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800acfc:	2002      	movs	r0, #2
 800acfe:	e7e7      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800ad00:	3601      	adds	r6, #1
 800ad02:	2e05      	cmp	r6, #5
 800ad04:	d1f3      	bne.n	800acee <LoRaMacCryptoUnsecureMessage+0x42>
 800ad06:	200b      	movs	r0, #11
 800ad08:	e7e2      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ad0a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800adc0 <LoRaMacCryptoUnsecureMessage+0x114>
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ad0e:	7b2b      	ldrb	r3, [r5, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ad10:	f8d9 2000 	ldr.w	r2, [r9]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ad14:	7929      	ldrb	r1, [r5, #4]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ad16:	7892      	ldrb	r2, [r2, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800ad18:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        isAck = false;
 800ad1c:	2a00      	cmp	r2, #0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ad1e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800ad20:	f896 a001 	ldrb.w	sl, [r6, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ad24:	f8cd 8000 	str.w	r8, [sp]
 800ad28:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800ad2c:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ad30:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ad34:	78b2      	ldrb	r2, [r6, #2]
 800ad36:	6828      	ldr	r0, [r5, #0]
 800ad38:	bf08      	it	eq
 800ad3a:	2300      	moveq	r3, #0
 800ad3c:	b289      	uxth	r1, r1
 800ad3e:	f7ff fe73 	bl	800aa28 <VerifyCmacB0.constprop.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d1c4      	bne.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
    if( macMsg->FPort == 0 )
 800ad46:	f895 3020 	ldrb.w	r3, [r5, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ad4a:	9401      	str	r4, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800ad4c:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ad4e:	f04f 0301 	mov.w	r3, #1
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	bf14      	ite	ne
 800ad56:	4652      	movne	r2, sl
 800ad58:	2206      	moveq	r2, #6
 800ad5a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ad5e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ad60:	4643      	mov	r3, r8
 800ad62:	f00a fb68 	bl	8015436 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d1b2      	bne.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
    switch( fCntID )
 800ad6a:	3f01      	subs	r7, #1
 800ad6c:	2f06      	cmp	r7, #6
 800ad6e:	d8af      	bhi.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
 800ad70:	e8df f007 	tbb	[pc, r7]
 800ad74:	100c0804 	.word	0x100c0804
 800ad78:	1814      	.short	0x1814
 800ad7a:	1c          	.byte	0x1c
 800ad7b:	00          	.byte	0x00
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800ad7c:	f8d9 3000 	ldr.w	r3, [r9]
 800ad80:	611c      	str	r4, [r3, #16]
            break;
 800ad82:	e7a5      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800ad84:	f8d9 3000 	ldr.w	r3, [r9]
 800ad88:	615c      	str	r4, [r3, #20]
            break;
 800ad8a:	e7a1      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800ad8c:	f8d9 3000 	ldr.w	r3, [r9]
 800ad90:	619c      	str	r4, [r3, #24]
            break;
 800ad92:	e79d      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800ad94:	f8d9 3000 	ldr.w	r3, [r9]
 800ad98:	61dc      	str	r4, [r3, #28]
            break;
 800ad9a:	e799      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
 800ad9c:	f8d9 3000 	ldr.w	r3, [r9]
 800ada0:	621c      	str	r4, [r3, #32]
            break;
 800ada2:	e795      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
 800ada4:	f8d9 3000 	ldr.w	r3, [r9]
 800ada8:	625c      	str	r4, [r3, #36]	; 0x24
            break;
 800adaa:	e791      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 800adac:	f8d9 3000 	ldr.w	r3, [r9]
 800adb0:	629c      	str	r4, [r3, #40]	; 0x28
            break;
 800adb2:	e78d      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800adb4:	2009      	movs	r0, #9
 800adb6:	e78b      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800adb8:	200f      	movs	r0, #15
 800adba:	e789      	b.n	800acd0 <LoRaMacCryptoUnsecureMessage+0x24>
 800adbc:	200002b1 	.word	0x200002b1
 800adc0:	200020d8 	.word	0x200020d8

0800adc4 <LoRaMacCryptoSetKey>:
{
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800adc8:	f00a f9e8 	bl	801519c <SecureElementSetKey>
 800adcc:	4604      	mov	r4, r0
 800adce:	b950      	cbnz	r0, 800ade6 <LoRaMacCryptoSetKey+0x22>
    if( keyID == APP_KEY )
 800add0:	b955      	cbnz	r5, 800ade8 <LoRaMacCryptoSetKey+0x24>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800add2:	4b06      	ldr	r3, [pc, #24]	; (800adec <LoRaMacCryptoSetKey+0x28>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4601      	mov	r1, r0
 800add8:	7898      	ldrb	r0, [r3, #2]
 800adda:	f00a fbc1 	bl	8015560 <LoRaMacCryptoDeriveMcRootKey>
 800adde:	b910      	cbnz	r0, 800ade6 <LoRaMacCryptoSetKey+0x22>
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800ade0:	f00a fb8a 	bl	80154f8 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ade4:	b100      	cbz	r0, 800ade8 <LoRaMacCryptoSetKey+0x24>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ade6:	240e      	movs	r4, #14
}
 800ade8:	4620      	mov	r0, r4
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	200020d8 	.word	0x200020d8

0800adf0 <LoRaMacCryptoHandleJoinAccept>:
{
 800adf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adf4:	4680      	mov	r8, r0
 800adf6:	b08f      	sub	sp, #60	; 0x3c
 800adf8:	460c      	mov	r4, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800adfa:	4617      	mov	r7, r2
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	d06d      	beq.n	800aedc <LoRaMacCryptoHandleJoinAccept+0xec>
 800ae00:	2900      	cmp	r1, #0
 800ae02:	d06b      	beq.n	800aedc <LoRaMacCryptoHandleJoinAccept+0xec>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800ae04:	2500      	movs	r5, #0
 800ae06:	4629      	mov	r1, r5
 800ae08:	221d      	movs	r2, #29
 800ae0a:	a806      	add	r0, sp, #24
 800ae0c:	9505      	str	r5, [sp, #20]
 800ae0e:	f00e fb59 	bl	80194c4 <memset>
    uint8_t versionMinor         = 0;
 800ae12:	f88d 5013 	strb.w	r5, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ae16:	4d35      	ldr	r5, [pc, #212]	; (800aeec <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800ae18:	682b      	ldr	r3, [r5, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ae1a:	f10d 0914 	add.w	r9, sp, #20
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ae1e:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ae20:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae24:	f10d 0313 	add.w	r3, sp, #19
 800ae28:	9302      	str	r3, [sp, #8]
 800ae2a:	793b      	ldrb	r3, [r7, #4]
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	4632      	mov	r2, r6
 800ae32:	4621      	mov	r1, r4
 800ae34:	4640      	mov	r0, r8
 800ae36:	f00a f9d2 	bl	80151de <SecureElementProcessJoinAccept>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d150      	bne.n	800aee0 <LoRaMacCryptoHandleJoinAccept+0xf0>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800ae3e:	4649      	mov	r1, r9
 800ae40:	793a      	ldrb	r2, [r7, #4]
 800ae42:	6838      	ldr	r0, [r7, #0]
 800ae44:	f009 fbdf 	bl	8014606 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f00a fba4 	bl	8015596 <LoRaMacParserJoinAccept>
 800ae4e:	4601      	mov	r1, r0
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d147      	bne.n	800aee4 <LoRaMacCryptoHandleJoinAccept+0xf4>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ae54:	7a3c      	ldrb	r4, [r7, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ae56:	79fa      	ldrb	r2, [r7, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ae58:	79bb      	ldrb	r3, [r7, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800ae5a:	0424      	lsls	r4, r4, #16
 800ae5c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800ae60:	431c      	orrs	r4, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	689a      	ldr	r2, [r3, #8]
 800ae66:	42a2      	cmp	r2, r4
 800ae68:	d03e      	beq.n	800aee8 <LoRaMacCryptoHandleJoinAccept+0xf8>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ae6a:	f89d 0013 	ldrb.w	r0, [sp, #19]
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ae6e:	609c      	str	r4, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ae70:	f00a fb76 	bl	8015560 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae74:	bb78      	cbnz	r0, 800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
    if( keyID != MC_ROOT_KEY )
 800ae76:	f00a fb3f 	bl	80154f8 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae7a:	bb60      	cbnz	r0, 800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
        netID = ( uint32_t )macMsg->NetID[0];
 800ae7c:	7a7a      	ldrb	r2, [r7, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ae7e:	7abb      	ldrb	r3, [r7, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ae80:	7aff      	ldrb	r7, [r7, #11]
 800ae82:	043f      	lsls	r7, r7, #16
 800ae84:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800ae88:	4317      	orrs	r7, r2
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ae8a:	4633      	mov	r3, r6
 800ae8c:	463a      	mov	r2, r7
 800ae8e:	4621      	mov	r1, r4
 800ae90:	2007      	movs	r0, #7
 800ae92:	f00a faa6 	bl	80153e2 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae96:	b9f0      	cbnz	r0, 800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
 800ae98:	4633      	mov	r3, r6
 800ae9a:	463a      	mov	r2, r7
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	2006      	movs	r0, #6
 800aea0:	f00a fa9f 	bl	80153e2 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aea4:	b9b8      	cbnz	r0, 800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 800aea6:	4633      	mov	r3, r6
 800aea8:	463a      	mov	r2, r7
 800aeaa:	4621      	mov	r1, r4
 800aeac:	2004      	movs	r0, #4
 800aeae:	f00a fa98 	bl	80153e2 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aeb2:	b980      	cbnz	r0, 800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 800aeb4:	4633      	mov	r3, r6
 800aeb6:	463a      	mov	r2, r7
 800aeb8:	4621      	mov	r1, r4
 800aeba:	2005      	movs	r0, #5
 800aebc:	f00a fa91 	bl	80153e2 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aec0:	b948      	cbnz	r0, 800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800aec8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aeca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aece:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntUp = 0;
 800aed2:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aed4:	619a      	str	r2, [r3, #24]
}
 800aed6:	b00f      	add	sp, #60	; 0x3c
 800aed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aedc:	2009      	movs	r0, #9
 800aede:	e7fa      	b.n	800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aee0:	200e      	movs	r0, #14
 800aee2:	e7f8      	b.n	800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800aee4:	200f      	movs	r0, #15
 800aee6:	e7f6      	b.n	800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800aee8:	2003      	movs	r0, #3
 800aeea:	e7f4      	b.n	800aed6 <LoRaMacCryptoHandleJoinAccept+0xe6>
 800aeec:	200020d8 	.word	0x200020d8

0800aef0 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800aef0:	4800      	ldr	r0, [pc, #0]	; (800aef4 <RegionGetVersion+0x4>)
 800aef2:	4770      	bx	lr
 800aef4:	02010001 	.word	0x02010001

0800aef8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	b091      	sub	sp, #68	; 0x44
 800aefe:	4615      	mov	r5, r2
 800af00:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800af04:	9304      	str	r3, [sp, #16]
 800af06:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800af0a:	9309      	str	r3, [sp, #36]	; 0x24
 800af0c:	460c      	mov	r4, r1
 800af0e:	4606      	mov	r6, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800af10:	f009 fc8e 	bl	8014830 <TimerGetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800af14:	4a68      	ldr	r2, [pc, #416]	; (800b0b8 <RegionCommonUpdateBandTimeOff+0x1c0>)
 800af16:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 800b0bc <RegionCommonUpdateBandTimeOff+0x1c4>
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800af1a:	9005      	str	r0, [sp, #20]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800af1c:	f5a8 33f6 	sub.w	r3, r8, #125952	; 0x1ec00
 800af20:	3b30      	subs	r3, #48	; 0x30
 800af22:	fbb3 f3f2 	udiv	r3, r3, r2
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800af26:	4353      	muls	r3, r2
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800af28:	f503 32f6 	add.w	r2, r3, #125952	; 0x1ec00
 800af2c:	3230      	adds	r2, #48	; 0x30
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800af2e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800af32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800af36:	9206      	str	r2, [sp, #24]
 800af38:	2218      	movs	r2, #24
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800af3a:	9303      	str	r3, [sp, #12]
 800af3c:	fb12 4305 	smlabb	r3, r2, r5, r4
 800af40:	9308      	str	r3, [sp, #32]
    uint8_t validBands = 0;
 800af42:	2500      	movs	r5, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800af44:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    for( uint8_t i = 0; i < nbBands; i++ )
 800af48:	9b08      	ldr	r3, [sp, #32]
 800af4a:	42a3      	cmp	r3, r4
 800af4c:	d107      	bne.n	800af5e <RegionCommonUpdateBandTimeOff+0x66>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800af4e:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
 800af50:	bf14      	ite	ne
 800af52:	4650      	movne	r0, sl
 800af54:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 800af58:	b011      	add	sp, #68	; 0x44
 800af5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800af5e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800af62:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800af66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af68:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 800af6c:	4640      	mov	r0, r8
 800af6e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800af72:	f009 fbef 	bl	8014754 <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800af76:	f8b4 9000 	ldrh.w	r9, [r4]
    if( joined == false )
 800af7a:	b96e      	cbnz	r6, 800af98 <RegionCommonUpdateBandTimeOff+0xa0>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800af7c:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
 800af80:	d35b      	bcc.n	800b03a <RegionCommonUpdateBandTimeOff+0x142>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800af82:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800af86:	f242 7310 	movw	r3, #10000	; 0x2710
 800af8a:	4590      	cmp	r8, r2
 800af8c:	bf98      	it	ls
 800af8e:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800af92:	4599      	cmp	r9, r3
 800af94:	bf38      	it	cc
 800af96:	4699      	movcc	r9, r3
    if( dutyCycle == 0 )
 800af98:	464b      	mov	r3, r9
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	bf38      	it	cc
 800af9e:	2301      	movcc	r3, #1
 800afa0:	9307      	str	r3, [sp, #28]
    if( joined == false )
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d152      	bne.n	800b04c <RegionCommonUpdateBandTimeOff+0x154>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800afa6:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 800afaa:	d148      	bne.n	800b03e <RegionCommonUpdateBandTimeOff+0x146>
            band->LastMaxCreditAssignTime = elapsedTime;
 800afac:	60a0      	str	r0, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800afae:	465f      	mov	r7, fp
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800afb0:	68a1      	ldr	r1, [r4, #8]
 800afb2:	a80e      	add	r0, sp, #56	; 0x38
 800afb4:	f009 fbed 	bl	8014792 <SysTimeFromMs>
 800afb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800afc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afc2:	a80c      	add	r0, sp, #48	; 0x30
 800afc4:	f009 fb55 	bl	8014672 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	b90b      	cbnz	r3, 800afd0 <RegionCommonUpdateBandTimeOff+0xd8>
 800afcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afce:	b133      	cbz	r3, 800afde <RegionCommonUpdateBandTimeOff+0xe6>
 800afd0:	6923      	ldr	r3, [r4, #16]
 800afd2:	42bb      	cmp	r3, r7
 800afd4:	d103      	bne.n	800afde <RegionCommonUpdateBandTimeOff+0xe6>
            ( band->MaxTimeCredits != maxCredits ) ||
 800afd6:	4b3a      	ldr	r3, [pc, #232]	; (800b0c0 <RegionCommonUpdateBandTimeOff+0x1c8>)
 800afd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afda:	429a      	cmp	r2, r3
 800afdc:	d90d      	bls.n	800affa <RegionCommonUpdateBandTimeOff+0x102>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800afde:	4b39      	ldr	r3, [pc, #228]	; (800b0c4 <RegionCommonUpdateBandTimeOff+0x1cc>)
            band->TimeCredits = maxCredits;
 800afe0:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800afe2:	4598      	cmp	r8, r3
 800afe4:	d909      	bls.n	800affa <RegionCommonUpdateBandTimeOff+0x102>
                timeDiff.SubSeconds = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800afec:	9b06      	ldr	r3, [sp, #24]
 800afee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aff0:	930c      	str	r3, [sp, #48]	; 0x30
 800aff2:	4618      	mov	r0, r3
 800aff4:	f009 fbae 	bl	8014754 <SysTimeToMs>
 800aff8:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800affa:	6860      	ldr	r0, [r4, #4]
 800affc:	b900      	cbnz	r0, 800b000 <RegionCommonUpdateBandTimeOff+0x108>
        band->TimeCredits = maxCredits;
 800affe:	60e7      	str	r7, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800b000:	6127      	str	r7, [r4, #16]
    if( joined == true )
 800b002:	b126      	cbz	r6, 800b00e <RegionCommonUpdateBandTimeOff+0x116>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800b004:	f009 fc1b 	bl	801483e <TimerGetElapsedTime>
 800b008:	68e3      	ldr	r3, [r4, #12]
 800b00a:	4403      	add	r3, r0
 800b00c:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800b00e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800b012:	4293      	cmp	r3, r2
    band->LastBandUpdateTime = currentTime;
 800b014:	9b05      	ldr	r3, [sp, #20]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b016:	991d      	ldr	r1, [sp, #116]	; 0x74
    band->LastBandUpdateTime = currentTime;
 800b018:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b01a:	9b07      	ldr	r3, [sp, #28]
        band->TimeCredits = band->MaxTimeCredits;
 800b01c:	bf88      	it	hi
 800b01e:	60e2      	strhi	r2, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b020:	434b      	muls	r3, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b022:	68e1      	ldr	r1, [r4, #12]
 800b024:	4299      	cmp	r1, r3
 800b026:	d802      	bhi.n	800b02e <RegionCommonUpdateBandTimeOff+0x136>
 800b028:	9804      	ldr	r0, [sp, #16]
 800b02a:	b9a8      	cbnz	r0, 800b058 <RegionCommonUpdateBandTimeOff+0x160>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b02c:	b1a6      	cbz	r6, 800b058 <RegionCommonUpdateBandTimeOff+0x160>
            bands[i].ReadyForTransmission = true;
 800b02e:	2301      	movs	r3, #1
            validBands++;
 800b030:	441d      	add	r5, r3
            bands[i].ReadyForTransmission = true;
 800b032:	7523      	strb	r3, [r4, #20]
            validBands++;
 800b034:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
 800b036:	3418      	adds	r4, #24
 800b038:	e786      	b.n	800af48 <RegionCommonUpdateBandTimeOff+0x50>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b03a:	2364      	movs	r3, #100	; 0x64
 800b03c:	e7a9      	b.n	800af92 <RegionCommonUpdateBandTimeOff+0x9a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b03e:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800b042:	bf0a      	itet	eq
 800b044:	4f20      	ldreq	r7, [pc, #128]	; (800b0c8 <RegionCommonUpdateBandTimeOff+0x1d0>)
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800b046:	4f21      	ldrne	r7, [pc, #132]	; (800b0cc <RegionCommonUpdateBandTimeOff+0x1d4>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800b048:	60a0      	streq	r0, [r4, #8]
 800b04a:	e7b1      	b.n	800afb0 <RegionCommonUpdateBandTimeOff+0xb8>
        if( dutyCycleEnabled == false )
 800b04c:	9b04      	ldr	r3, [sp, #16]
 800b04e:	b90b      	cbnz	r3, 800b054 <RegionCommonUpdateBandTimeOff+0x15c>
            band->TimeCredits = maxCredits;
 800b050:	f8c4 b00c 	str.w	fp, [r4, #12]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b054:	465f      	mov	r7, fp
 800b056:	e7d0      	b.n	800affa <RegionCommonUpdateBandTimeOff+0x102>
            bands[i].ReadyForTransmission = false;
 800b058:	2000      	movs	r0, #0
            if( bands[i].MaxTimeCredits > creditCosts )
 800b05a:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
 800b05c:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800b05e:	d206      	bcs.n	800b06e <RegionCommonUpdateBandTimeOff+0x176>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b060:	1a5b      	subs	r3, r3, r1
 800b062:	459a      	cmp	sl, r3
                validBands++;
 800b064:	f105 0501 	add.w	r5, r5, #1
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b068:	bf28      	it	cs
 800b06a:	469a      	movcs	sl, r3
                validBands++;
 800b06c:	b2ed      	uxtb	r5, r5
            if( joined == false )
 800b06e:	2e00      	cmp	r6, #0
 800b070:	d1e1      	bne.n	800b036 <RegionCommonUpdateBandTimeOff+0x13e>
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b072:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 800b076:	4a16      	ldr	r2, [pc, #88]	; (800b0d0 <RegionCommonUpdateBandTimeOff+0x1d8>)
                SysTime_t backoffTimeRange = {
 800b078:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b07c:	d019      	beq.n	800b0b2 <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b07e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800b082:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 800b086:	bf18      	it	ne
 800b088:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b08a:	4590      	cmp	r8, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b08c:	bf84      	itt	hi
 800b08e:	9a03      	ldrhi	r2, [sp, #12]
 800b090:	189b      	addhi	r3, r3, r2
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b092:	930c      	str	r3, [sp, #48]	; 0x30
 800b094:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	af0c      	add	r7, sp, #48	; 0x30
 800b09a:	e897 0006 	ldmia.w	r7, {r1, r2}
 800b09e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f009 fae6 	bl	8014672 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b0a6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b0aa:	f009 fb53 	bl	8014754 <SysTimeToMs>
 800b0ae:	4682      	mov	sl, r0
 800b0b0:	e7c1      	b.n	800b036 <RegionCommonUpdateBandTimeOff+0x13e>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b0b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b0b6:	e7e8      	b.n	800b08a <RegionCommonUpdateBandTimeOff+0x192>
 800b0b8:	00015180 	.word	0x00015180
 800b0bc:	001b7740 	.word	0x001b7740
 800b0c0:	0001517f 	.word	0x0001517f
 800b0c4:	0001ec2f 	.word	0x0001ec2f
 800b0c8:	0112a880 	.word	0x0112a880
 800b0cc:	02932e00 	.word	0x02932e00
 800b0d0:	0001ec30 	.word	0x0001ec30

0800b0d4 <RegionCommonComputeSymbolTimeLoRa>:
    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b0d4:	4b02      	ldr	r3, [pc, #8]	; (800b0e0 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800b0d6:	fa03 f000 	lsl.w	r0, r3, r0
}
 800b0da:	fbb0 f0f1 	udiv	r0, r0, r1
 800b0de:	4770      	bx	lr
 800b0e0:	000f4240 	.word	0x000f4240

0800b0e4 <RegionCommonGetBandwidth>:
    return MAX( txPower, maxBandTxPower );
}

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800b0e4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b0e8:	4b05      	ldr	r3, [pc, #20]	; (800b100 <RegionCommonGetBandwidth+0x1c>)
 800b0ea:	4298      	cmp	r0, r3
 800b0ec:	d005      	beq.n	800b0fa <RegionCommonGetBandwidth+0x16>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800b0ee:	4b05      	ldr	r3, [pc, #20]	; (800b104 <RegionCommonGetBandwidth+0x20>)
 800b0f0:	4298      	cmp	r0, r3
 800b0f2:	bf0c      	ite	eq
 800b0f4:	2002      	moveq	r0, #2
 800b0f6:	2000      	movne	r0, #0
 800b0f8:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800b0fa:	2001      	movs	r0, #1
    }
}
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	0003d090 	.word	0x0003d090
 800b104:	0007a120 	.word	0x0007a120

0800b108 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800b108:	b530      	push	{r4, r5, lr}
    int8_t phyDr = DataratesUS915[datarate];
 800b10a:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <GetTimeOnAir+0x30>)
{
 800b10c:	b085      	sub	sp, #20
 800b10e:	460c      	mov	r4, r1
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800b110:	490a      	ldr	r1, [pc, #40]	; (800b13c <GetTimeOnAir+0x34>)
    int8_t phyDr = DataratesUS915[datarate];
 800b112:	561d      	ldrsb	r5, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800b114:	f7ff ffe6 	bl	800b0e4 <RegionCommonGetBandwidth>

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b118:	2208      	movs	r2, #8
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800b11a:	4601      	mov	r1, r0
    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b11c:	2000      	movs	r0, #0
 800b11e:	e9cd 2000 	strd	r2, r0, [sp]
 800b122:	4a07      	ldr	r2, [pc, #28]	; (800b140 <GetTimeOnAir+0x38>)
 800b124:	2301      	movs	r3, #1
 800b126:	b2e4      	uxtb	r4, r4
 800b128:	9402      	str	r4, [sp, #8]
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	6a54      	ldr	r4, [r2, #36]	; 0x24
 800b12e:	4618      	mov	r0, r3
 800b130:	462a      	mov	r2, r5
 800b132:	47a0      	blx	r4
}
 800b134:	b005      	add	sp, #20
 800b136:	bd30      	pop	{r4, r5, pc}
 800b138:	0801c230 	.word	0x0801c230
 800b13c:	0801a4f0 	.word	0x0801a4f0
 800b140:	0801a484 	.word	0x0801a484

0800b144 <VerifyRfFreq>:
    if( Radio.CheckRfFrequency( freq ) == false )
 800b144:	4b0b      	ldr	r3, [pc, #44]	; (800b174 <VerifyRfFreq+0x30>)
{
 800b146:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800b148:	6a1b      	ldr	r3, [r3, #32]
{
 800b14a:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800b14c:	4798      	blx	r3
 800b14e:	b168      	cbz	r0, 800b16c <VerifyRfFreq+0x28>
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800b150:	4b09      	ldr	r3, [pc, #36]	; (800b178 <VerifyRfFreq+0x34>)
 800b152:	4a0a      	ldr	r2, [pc, #40]	; (800b17c <VerifyRfFreq+0x38>)
 800b154:	4423      	add	r3, r4
 800b156:	4293      	cmp	r3, r2
 800b158:	d809      	bhi.n	800b16e <VerifyRfFreq+0x2a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800b15a:	4a09      	ldr	r2, [pc, #36]	; (800b180 <VerifyRfFreq+0x3c>)
 800b15c:	4353      	muls	r3, r2
 800b15e:	f641 32f6 	movw	r2, #7158	; 0x1bf6
 800b162:	ebb2 1fb3 	cmp.w	r2, r3, ror #6
 800b166:	bf2c      	ite	cs
 800b168:	2001      	movcs	r0, #1
 800b16a:	2000      	movcc	r0, #0
}
 800b16c:	bd10      	pop	{r4, pc}
        return false;
 800b16e:	2000      	movs	r0, #0
 800b170:	e7fc      	b.n	800b16c <VerifyRfFreq+0x28>
 800b172:	bf00      	nop
 800b174:	0801a484 	.word	0x0801a484
 800b178:	c8f78f60 	.word	0xc8f78f60
 800b17c:	00401640 	.word	0x00401640
 800b180:	5943f75f 	.word	0x5943f75f

0800b184 <RegionUS915GetPhyParam>:

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800b184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800b186:	2300      	movs	r3, #0
 800b188:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 800b18a:	7803      	ldrb	r3, [r0, #0]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	2b36      	cmp	r3, #54	; 0x36
 800b190:	d81f      	bhi.n	800b1d2 <RegionUS915GetPhyParam+0x4e>
 800b192:	e8df f003 	tbb	[pc, r3]
 800b196:	1e1c      	.short	0x1e1c
 800b198:	1e1e1e1e 	.word	0x1e1e1e1e
 800b19c:	1e1e1e1e 	.word	0x1e1e1e1e
 800b1a0:	1e3b3937 	.word	0x1e3b3937
 800b1a4:	49464340 	.word	0x49464340
 800b1a8:	571e4f4c 	.word	0x571e4f4c
 800b1ac:	635e591c 	.word	0x635e591c
 800b1b0:	681e1e65 	.word	0x681e1e65
 800b1b4:	1e1e221e 	.word	0x1e1e221e
 800b1b8:	1e1e1e1e 	.word	0x1e1e1e1e
 800b1bc:	1e1e1e1e 	.word	0x1e1e1e1e
 800b1c0:	6b1e1e1e 	.word	0x6b1e1e1e
 800b1c4:	1e1c1c71 	.word	0x1e1c1c71
 800b1c8:	791c1c6b 	.word	0x791c1c6b
 800b1cc:	7d          	.byte	0x7d
 800b1cd:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800b1ce:	2308      	movs	r3, #8
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
            break;
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800b1d0:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800b1d2:	9800      	ldr	r0, [sp, #0]
 800b1d4:	b005      	add	sp, #20
 800b1d6:	f85d fb04 	ldr.w	pc, [sp], #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b1da:	7843      	ldrb	r3, [r0, #1]
 800b1dc:	f88d 3004 	strb.w	r3, [sp, #4]
 800b1e0:	2304      	movs	r3, #4
 800b1e2:	f88d 3005 	strb.w	r3, [sp, #5]
 800b1e6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800b1ea:	f8ad 3006 	strh.w	r3, [sp, #6]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800b1ee:	4b2b      	ldr	r3, [pc, #172]	; (800b29c <RegionUS915GetPhyParam+0x118>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800b1f2:	a801      	add	r0, sp, #4
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800b1f4:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800b1f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800b1fc:	f00a fd9d 	bl	8015d3a <RegionCommonGetNextLowerTxDr>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800b200:	9000      	str	r0, [sp, #0]
            break;
 800b202:	e7e6      	b.n	800b1d2 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800b204:	2340      	movs	r3, #64	; 0x40
 800b206:	e7e3      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800b208:	2320      	movs	r3, #32
 800b20a:	e7e1      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800b20c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b210:	4a23      	ldr	r2, [pc, #140]	; (800b2a0 <RegionUS915GetPhyParam+0x11c>)
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800b212:	5cd3      	ldrb	r3, [r2, r3]
 800b214:	e7dc      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800b216:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b21a:	e7d9      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800b21c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b220:	e7d6      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800b222:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b226:	e7d3      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800b228:	f241 3388 	movw	r3, #5000	; 0x1388
 800b22c:	e7d0      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800b22e:	f241 7370 	movw	r3, #6000	; 0x1770
 800b232:	e7cd      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800b234:	481b      	ldr	r0, [pc, #108]	; (800b2a4 <RegionUS915GetPhyParam+0x120>)
 800b236:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b23a:	f009 f9d7 	bl	80145ec <randr>
 800b23e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800b242:	e7dd      	b.n	800b200 <RegionUS915GetPhyParam+0x7c>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800b244:	4b18      	ldr	r3, [pc, #96]	; (800b2a8 <RegionUS915GetPhyParam+0x124>)
 800b246:	e7c3      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800b248:	4b14      	ldr	r3, [pc, #80]	; (800b29c <RegionUS915GetPhyParam+0x118>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800b250:	e7be      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800b252:	4b12      	ldr	r3, [pc, #72]	; (800b29c <RegionUS915GetPhyParam+0x118>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800b25a:	e7b9      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800b25c:	2348      	movs	r3, #72	; 0x48
 800b25e:	e7b7      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800b260:	4b0e      	ldr	r3, [pc, #56]	; (800b29c <RegionUS915GetPhyParam+0x118>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	e7b4      	b.n	800b1d0 <RegionUS915GetPhyParam+0x4c>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800b266:	4b11      	ldr	r3, [pc, #68]	; (800b2ac <RegionUS915GetPhyParam+0x128>)
 800b268:	9300      	str	r3, [sp, #0]
            break;
 800b26a:	e7b2      	b.n	800b1d2 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800b26c:	4a10      	ldr	r2, [pc, #64]	; (800b2b0 <RegionUS915GetPhyParam+0x12c>)
 800b26e:	490e      	ldr	r1, [pc, #56]	; (800b2a8 <RegionUS915GetPhyParam+0x124>)
 800b270:	7900      	ldrb	r0, [r0, #4]
 800b272:	f00a fdc5 	bl	8015e00 <RegionBaseUSCalcDownlinkFrequency>
 800b276:	e7c3      	b.n	800b200 <RegionUS915GetPhyParam+0x7c>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800b278:	f240 4317 	movw	r3, #1047	; 0x417
 800b27c:	f8ad 3000 	strh.w	r3, [sp]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800b280:	2303      	movs	r3, #3
 800b282:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 800b286:	e7a4      	b.n	800b1d2 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800b288:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b28c:	4a09      	ldr	r2, [pc, #36]	; (800b2b4 <RegionUS915GetPhyParam+0x130>)
 800b28e:	e7c0      	b.n	800b212 <RegionUS915GetPhyParam+0x8e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800b290:	4909      	ldr	r1, [pc, #36]	; (800b2b8 <RegionUS915GetPhyParam+0x134>)
 800b292:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800b296:	f7ff ff25 	bl	800b0e4 <RegionCommonGetBandwidth>
 800b29a:	e7b1      	b.n	800b200 <RegionUS915GetPhyParam+0x7c>
 800b29c:	200020e4 	.word	0x200020e4
 800b2a0:	0801c240 	.word	0x0801c240
 800b2a4:	fffffc18 	.word	0xfffffc18
 800b2a8:	370870a0 	.word	0x370870a0
 800b2ac:	4200999a 	.word	0x4200999a
 800b2b0:	000927c0 	.word	0x000927c0
 800b2b4:	0801c230 	.word	0x0801c230
 800b2b8:	0801a4f0 	.word	0x0801a4f0

0800b2bc <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800b2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800b2be:	4b0b      	ldr	r3, [pc, #44]	; (800b2ec <RegionUS915SetBandTxDone+0x30>)
 800b2c0:	7802      	ldrb	r2, [r0, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	210c      	movs	r1, #12
 800b2c6:	fb01 3302 	mla	r3, r1, r2, r3
 800b2ca:	7a5b      	ldrb	r3, [r3, #9]
 800b2cc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800b2d0:	4b07      	ldr	r3, [pc, #28]	; (800b2f0 <RegionUS915SetBandTxDone+0x34>)
 800b2d2:	681d      	ldr	r5, [r3, #0]
 800b2d4:	6903      	ldr	r3, [r0, #16]
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	68c3      	ldr	r3, [r0, #12]
 800b2da:	7842      	ldrb	r2, [r0, #1]
 800b2dc:	6881      	ldr	r1, [r0, #8]
 800b2de:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 800b2e2:	f00a fbc6 	bl	8015a72 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800b2e6:	b003      	add	sp, #12
 800b2e8:	bd30      	pop	{r4, r5, pc}
 800b2ea:	bf00      	nop
 800b2ec:	200020e4 	.word	0x200020e4
 800b2f0:	200020dc 	.word	0x200020dc

0800b2f4 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800b2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f6:	b087      	sub	sp, #28
    Band_t bands[US915_MAX_NB_BANDS] =
 800b2f8:	2301      	movs	r3, #1
    {
       US915_BAND0
    };

    switch( params->Type )
 800b2fa:	7b04      	ldrb	r4, [r0, #12]
    Band_t bands[US915_MAX_NB_BANDS] =
 800b2fc:	f8ad 3000 	strh.w	r3, [sp]
 800b300:	2300      	movs	r3, #0
 800b302:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800b306:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b30a:	f88d 3002 	strb.w	r3, [sp, #2]
 800b30e:	f88d 3014 	strb.w	r3, [sp, #20]
    switch( params->Type )
 800b312:	b124      	cbz	r4, 800b31e <RegionUS915InitDefaults+0x2a>
 800b314:	3c01      	subs	r4, #1
 800b316:	2c01      	cmp	r4, #1
 800b318:	d94e      	bls.n	800b3b8 <RegionUS915InitDefaults+0xc4>
        default:
        {
            break;
        }
    }
}
 800b31a:	b007      	add	sp, #28
 800b31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800b31e:	6803      	ldr	r3, [r0, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0fa      	beq.n	800b31a <RegionUS915InitDefaults+0x26>
 800b324:	6842      	ldr	r2, [r0, #4]
 800b326:	2a00      	cmp	r2, #0
 800b328:	d0f7      	beq.n	800b31a <RegionUS915InitDefaults+0x26>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800b32a:	4e30      	ldr	r6, [pc, #192]	; (800b3ec <RegionUS915InitDefaults+0xf8>)
            RegionBands = (Band_t*) params->Bands;
 800b32c:	6880      	ldr	r0, [r0, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800b32e:	6032      	str	r2, [r6, #0]
            RegionBands = (Band_t*) params->Bands;
 800b330:	4a2f      	ldr	r2, [pc, #188]	; (800b3f0 <RegionUS915InitDefaults+0xfc>)
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b332:	4d30      	ldr	r5, [pc, #192]	; (800b3f4 <RegionUS915InitDefaults+0x100>)
            RegionBands = (Band_t*) params->Bands;
 800b334:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800b336:	819c      	strh	r4, [r3, #12]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800b338:	2218      	movs	r2, #24
 800b33a:	4669      	mov	r1, sp
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800b33c:	602b      	str	r3, [r5, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800b33e:	f009 f962 	bl	8014606 <memcpy1>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800b342:	6830      	ldr	r0, [r6, #0]
 800b344:	4b2c      	ldr	r3, [pc, #176]	; (800b3f8 <RegionUS915InitDefaults+0x104>)
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800b346:	4f2d      	ldr	r7, [pc, #180]	; (800b3fc <RegionUS915InitDefaults+0x108>)
 800b348:	4602      	mov	r2, r0
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800b34a:	4601      	mov	r1, r0
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800b34c:	f04f 0c30 	mov.w	ip, #48	; 0x30
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800b350:	600b      	str	r3, [r1, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800b352:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 800b356:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b35a:	42bb      	cmp	r3, r7
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800b35c:	f881 c008 	strb.w	ip, [r1, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800b360:	724c      	strb	r4, [r1, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800b362:	f101 010c 	add.w	r1, r1, #12
 800b366:	d1f3      	bne.n	800b350 <RegionUS915InitDefaults+0x5c>
 800b368:	4b25      	ldr	r3, [pc, #148]	; (800b400 <RegionUS915InitDefaults+0x10c>)
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800b36a:	4926      	ldr	r1, [pc, #152]	; (800b404 <RegionUS915InitDefaults+0x110>)
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800b36c:	2744      	movs	r7, #68	; 0x44
                RegionNvmGroup2->Channels[i].Band = 0;
 800b36e:	2400      	movs	r4, #0
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800b370:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800b374:	f503 13c3 	add.w	r3, r3, #1597440	; 0x186000
 800b378:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800b37c:	428b      	cmp	r3, r1
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800b37e:	f882 7308 	strb.w	r7, [r2, #776]	; 0x308
                RegionNvmGroup2->Channels[i].Band = 0;
 800b382:	f882 4309 	strb.w	r4, [r2, #777]	; 0x309
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800b386:	f102 020c 	add.w	r2, r2, #12
 800b38a:	d1f1      	bne.n	800b370 <RegionUS915InitDefaults+0x7c>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800b38c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800b390:	e9c0 33db 	strd	r3, r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800b394:	23ff      	movs	r3, #255	; 0xff
 800b396:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b39a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800b39e:	2206      	movs	r2, #6
 800b3a0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800b3a4:	f00a fb56 	bl	8015a54 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b3a8:	6831      	ldr	r1, [r6, #0]
 800b3aa:	6828      	ldr	r0, [r5, #0]
 800b3ac:	2206      	movs	r2, #6
 800b3ae:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800b3b2:	f00a fb4f 	bl	8015a54 <RegionCommonChanMaskCopy>
            break;
 800b3b6:	e7b0      	b.n	800b31a <RegionUS915InitDefaults+0x26>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800b3b8:	4c0c      	ldr	r4, [pc, #48]	; (800b3ec <RegionUS915InitDefaults+0xf8>)
 800b3ba:	6820      	ldr	r0, [r4, #0]
 800b3bc:	2206      	movs	r2, #6
 800b3be:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800b3c2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800b3c6:	f00a fb45 	bl	8015a54 <RegionCommonChanMaskCopy>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <RegionUS915InitDefaults+0x100>)
 800b3cc:	6821      	ldr	r1, [r4, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800b3d4:	1e9a      	subs	r2, r3, #2
 800b3d6:	330a      	adds	r3, #10
 800b3d8:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 800b3dc:	f831 0b02 	ldrh.w	r0, [r1], #2
            for( uint8_t i = 0; i < 6; i++ )
 800b3e0:	429a      	cmp	r2, r3
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b3e2:	ea00 0004 	and.w	r0, r0, r4
 800b3e6:	8010      	strh	r0, [r2, #0]
            for( uint8_t i = 0; i < 6; i++ )
 800b3e8:	d1f6      	bne.n	800b3d8 <RegionUS915InitDefaults+0xe4>
 800b3ea:	e796      	b.n	800b31a <RegionUS915InitDefaults+0x26>
 800b3ec:	200020e4 	.word	0x200020e4
 800b3f0:	200020dc 	.word	0x200020dc
 800b3f4:	200020e0 	.word	0x200020e0
 800b3f8:	35c80160 	.word	0x35c80160
 800b3fc:	368b5160 	.word	0x368b5160
 800b400:	35d2afc0 	.word	0x35d2afc0
 800b404:	3695ffc0 	.word	0x3695ffc0

0800b408 <RegionUS915ApplyCFList>:
            return false;
    }
}

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 800b408:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800b40a:	7a03      	ldrb	r3, [r0, #8]
 800b40c:	2b10      	cmp	r3, #16
 800b40e:	d123      	bne.n	800b458 <RegionUS915ApplyCFList+0x50>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800b410:	6844      	ldr	r4, [r0, #4]
 800b412:	7be3      	ldrb	r3, [r4, #15]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d11f      	bne.n	800b458 <RegionUS915ApplyCFList+0x50>
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800b418:	4b10      	ldr	r3, [pc, #64]	; (800b45c <RegionUS915ApplyCFList+0x54>)
 800b41a:	681d      	ldr	r5, [r3, #0]
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b41c:	4b10      	ldr	r3, [pc, #64]	; (800b460 <RegionUS915ApplyCFList+0x58>)
 800b41e:	6819      	ldr	r1, [r3, #0]
 800b420:	f505 7058 	add.w	r0, r5, #864	; 0x360
 800b424:	3902      	subs	r1, #2
 800b426:	2200      	movs	r2, #0
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800b428:	1c67      	adds	r7, r4, #1
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800b42a:	f814 3012 	ldrb.w	r3, [r4, r2, lsl #1]
 800b42e:	8003      	strh	r3, [r0, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800b430:	f817 6012 	ldrb.w	r6, [r7, r2, lsl #1]
        if( chMaskItr == 4 )
 800b434:	2a04      	cmp	r2, #4
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800b436:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800b43a:	f820 3b02 	strh.w	r3, [r0], #2
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800b43e:	bf04      	itt	eq
 800b440:	b2db      	uxtbeq	r3, r3
 800b442:	f8a5 3368 	strheq.w	r3, [r5, #872]	; 0x368
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b446:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800b44a:	f830 6c02 	ldrh.w	r6, [r0, #-2]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b44e:	3201      	adds	r2, #1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b450:	4033      	ands	r3, r6
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b452:	2a05      	cmp	r2, #5
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800b454:	800b      	strh	r3, [r1, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800b456:	d1e8      	bne.n	800b42a <RegionUS915ApplyCFList+0x22>
    }
}
 800b458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b45a:	bf00      	nop
 800b45c:	200020e4 	.word	0x200020e4
 800b460:	200020e0 	.word	0x200020e0

0800b464 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800b464:	b570      	push	{r4, r5, r6, lr}
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800b466:	2204      	movs	r2, #4
{
 800b468:	4605      	mov	r5, r0
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800b46a:	2100      	movs	r1, #0
 800b46c:	6800      	ldr	r0, [r0, #0]
 800b46e:	f00a fad3 	bl	8015a18 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800b472:	2801      	cmp	r0, #1
 800b474:	d003      	beq.n	800b47e <RegionUS915ChanMaskSet+0x1a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800b476:	792c      	ldrb	r4, [r5, #4]
 800b478:	b11c      	cbz	r4, 800b482 <RegionUS915ChanMaskSet+0x1e>
 800b47a:	2c01      	cmp	r4, #1
 800b47c:	d021      	beq.n	800b4c2 <RegionUS915ChanMaskSet+0x5e>
        return false;
 800b47e:	2000      	movs	r0, #0
 800b480:	e01e      	b.n	800b4c0 <RegionUS915ChanMaskSet+0x5c>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800b482:	4e14      	ldr	r6, [pc, #80]	; (800b4d4 <RegionUS915ChanMaskSet+0x70>)
 800b484:	6829      	ldr	r1, [r5, #0]
 800b486:	6830      	ldr	r0, [r6, #0]
 800b488:	2206      	movs	r2, #6
 800b48a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800b48e:	f00a fae1 	bl	8015a54 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800b492:	6833      	ldr	r3, [r6, #0]
 800b494:	f893 2374 	ldrb.w	r2, [r3, #884]	; 0x374
 800b498:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b49c:	4a0e      	ldr	r2, [pc, #56]	; (800b4d8 <RegionUS915ChanMaskSet+0x74>)
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800b49e:	f8a3 4376 	strh.w	r4, [r3, #886]	; 0x376
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b4a2:	6812      	ldr	r2, [r2, #0]
 800b4a4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800b4a8:	1e91      	subs	r1, r2, #2
 800b4aa:	320a      	adds	r2, #10
 800b4ac:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 800b4b0:	f833 0b02 	ldrh.w	r0, [r3], #2
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b4b4:	4291      	cmp	r1, r2
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800b4b6:	ea00 0004 	and.w	r0, r0, r4
 800b4ba:	8008      	strh	r0, [r1, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800b4bc:	d1f6      	bne.n	800b4ac <RegionUS915ChanMaskSet+0x48>
            break;
        }
        default:
            return false;
    }
    return true;
 800b4be:	2001      	movs	r0, #1
}
 800b4c0:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800b4c2:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <RegionUS915ChanMaskSet+0x70>)
 800b4c4:	6829      	ldr	r1, [r5, #0]
 800b4c6:	6818      	ldr	r0, [r3, #0]
 800b4c8:	2206      	movs	r2, #6
 800b4ca:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800b4ce:	f00a fac1 	bl	8015a54 <RegionCommonChanMaskCopy>
            break;
 800b4d2:	e7f4      	b.n	800b4be <RegionUS915ChanMaskSet+0x5a>
 800b4d4:	200020e4 	.word	0x200020e4
 800b4d8:	200020e0 	.word	0x200020e0

0800b4dc <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800b4de:	280d      	cmp	r0, #13
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800b4e0:	4d11      	ldr	r5, [pc, #68]	; (800b528 <RegionUS915ComputeRxWindowParameters+0x4c>)
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800b4e2:	bfa8      	it	ge
 800b4e4:	200d      	movge	r0, #13
{
 800b4e6:	461c      	mov	r4, r3
 800b4e8:	460e      	mov	r6, r1
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800b4ea:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800b4ec:	4629      	mov	r1, r5
{
 800b4ee:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800b4f0:	f7ff fdf8 	bl	800b0e4 <RegionCommonGetBandwidth>

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800b4f4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800b4f8:	4a0c      	ldr	r2, [pc, #48]	; (800b52c <RegionUS915ComputeRxWindowParameters+0x50>)
 800b4fa:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800b4fe:	70a0      	strb	r0, [r4, #2]
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800b500:	5cd0      	ldrb	r0, [r2, r3]
 800b502:	f7ff fde7 	bl	800b0d4 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b506:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <RegionUS915ComputeRxWindowParameters+0x54>)
 800b508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800b50a:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b50c:	4798      	blx	r3
 800b50e:	f104 020c 	add.w	r2, r4, #12
 800b512:	3408      	adds	r4, #8
 800b514:	4603      	mov	r3, r0
 800b516:	9201      	str	r2, [sp, #4]
 800b518:	9400      	str	r4, [sp, #0]
 800b51a:	463a      	mov	r2, r7
 800b51c:	4631      	mov	r1, r6
 800b51e:	4628      	mov	r0, r5
 800b520:	f00a fb2f 	bl	8015b82 <RegionCommonComputeRxWindowParameters>
}
 800b524:	b003      	add	sp, #12
 800b526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b528:	0801a4f0 	.word	0x0801a4f0
 800b52c:	0801c230 	.word	0x0801c230
 800b530:	0801a484 	.word	0x0801a484

0800b534 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int8_t dr = rxConfig->Datarate;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800b538:	4e1f      	ldr	r6, [pc, #124]	; (800b5b8 <RegionUS915RxConfig+0x84>)
    int8_t dr = rxConfig->Datarate;
 800b53a:	f990 9001 	ldrsb.w	r9, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 800b53e:	6873      	ldr	r3, [r6, #4]
    uint32_t frequency = rxConfig->Frequency;
 800b540:	6845      	ldr	r5, [r0, #4]
{
 800b542:	b08a      	sub	sp, #40	; 0x28
 800b544:	4604      	mov	r4, r0
 800b546:	4688      	mov	r8, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 800b548:	4798      	blx	r3
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d131      	bne.n	800b5b2 <RegionUS915RxConfig+0x7e>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800b54e:	7ca3      	ldrb	r3, [r4, #18]
 800b550:	b933      	cbnz	r3, 800b560 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800b552:	7825      	ldrb	r5, [r4, #0]
 800b554:	4a19      	ldr	r2, [pc, #100]	; (800b5bc <RegionUS915RxConfig+0x88>)
 800b556:	f005 0307 	and.w	r3, r5, #7
 800b55a:	4d19      	ldr	r5, [pc, #100]	; (800b5c0 <RegionUS915RxConfig+0x8c>)
 800b55c:	fb02 5503 	mla	r5, r2, r3, r5
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800b560:	4b18      	ldr	r3, [pc, #96]	; (800b5c4 <RegionUS915RxConfig+0x90>)

    Radio.SetChannel( frequency );
 800b562:	4628      	mov	r0, r5
    phyDr = DataratesUS915[dr];
 800b564:	f913 a009 	ldrsb.w	sl, [r3, r9]
    Radio.SetChannel( frequency );
 800b568:	68f3      	ldr	r3, [r6, #12]
 800b56a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b56c:	7c63      	ldrb	r3, [r4, #17]
 800b56e:	8922      	ldrh	r2, [r4, #8]
 800b570:	9309      	str	r3, [sp, #36]	; 0x24
 800b572:	2501      	movs	r5, #1
 800b574:	2300      	movs	r3, #0
 800b576:	9202      	str	r2, [sp, #8]
 800b578:	2208      	movs	r2, #8
 800b57a:	e9cd 3200 	strd	r3, r2, [sp]
 800b57e:	e9cd 3507 	strd	r3, r5, [sp, #28]
 800b582:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b586:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b58a:	78a1      	ldrb	r1, [r4, #2]
 800b58c:	69b7      	ldr	r7, [r6, #24]
 800b58e:	462b      	mov	r3, r5
 800b590:	4652      	mov	r2, sl
 800b592:	4628      	mov	r0, r5
 800b594:	47b8      	blx	r7

    Radio.SetMaxPayloadLength( MODEM_LORA, MaxPayloadOfDatarateUS915[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800b596:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <RegionUS915RxConfig+0x94>)
 800b598:	f813 1009 	ldrb.w	r1, [r3, r9]
 800b59c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800b59e:	310d      	adds	r1, #13
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	b2c9      	uxtb	r1, r1
 800b5a4:	4798      	blx	r3

    *datarate = (uint8_t) dr;
 800b5a6:	f888 9000 	strb.w	r9, [r8]
    return true;
 800b5aa:	4628      	mov	r0, r5
}
 800b5ac:	b00a      	add	sp, #40	; 0x28
 800b5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return false;
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e7fa      	b.n	800b5ac <RegionUS915RxConfig+0x78>
 800b5b6:	bf00      	nop
 800b5b8:	0801a484 	.word	0x0801a484
 800b5bc:	000927c0 	.word	0x000927c0
 800b5c0:	370870a0 	.word	0x370870a0
 800b5c4:	0801c230 	.word	0x0801c230
 800b5c8:	0801c240 	.word	0x0801c240

0800b5cc <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800b5d0:	4b37      	ldr	r3, [pc, #220]	; (800b6b0 <RegionUS915TxConfig+0xe4>)
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800b5d2:	4e38      	ldr	r6, [pc, #224]	; (800b6b4 <RegionUS915TxConfig+0xe8>)
 800b5d4:	f990 a002 	ldrsb.w	sl, [r0, #2]
 800b5d8:	f8d6 b000 	ldr.w	fp, [r6]
{
 800b5dc:	4691      	mov	r9, r2
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800b5de:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800b5e2:	569f      	ldrsb	r7, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800b5e4:	7803      	ldrb	r3, [r0, #0]
{
 800b5e6:	4688      	mov	r8, r1
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800b5e8:	210c      	movs	r1, #12
 800b5ea:	fb01 b303 	mla	r3, r1, r3, fp
 800b5ee:	4932      	ldr	r1, [pc, #200]	; (800b6b8 <RegionUS915TxConfig+0xec>)
 800b5f0:	7a5b      	ldrb	r3, [r3, #9]
 800b5f2:	6809      	ldr	r1, [r1, #0]
 800b5f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b5f8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
{
 800b5fc:	b08d      	sub	sp, #52	; 0x34
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800b5fe:	f993 1002 	ldrsb.w	r1, [r3, #2]
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800b602:	920b      	str	r2, [sp, #44]	; 0x2c
{
 800b604:	4604      	mov	r4, r0
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800b606:	4650      	mov	r0, sl
 800b608:	f00a fbb2 	bl	8015d70 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800b60c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b60e:	2a04      	cmp	r2, #4
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800b610:	4605      	mov	r5, r0
    if( datarate == DR_4 )
 800b612:	d13f      	bne.n	800b694 <RegionUS915TxConfig+0xc8>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800b614:	4655      	mov	r5, sl
 800b616:	2d02      	cmp	r5, #2
 800b618:	bfb8      	it	lt
 800b61a:	2502      	movlt	r5, #2
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800b61c:	4927      	ldr	r1, [pc, #156]	; (800b6bc <RegionUS915TxConfig+0xf0>)
 800b61e:	f994 0001 	ldrsb.w	r0, [r4, #1]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b622:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800b6c0 <RegionUS915TxConfig+0xf4>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800b626:	f7ff fd5d 	bl	800b0e4 <RegionCommonGetBandwidth>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800b62a:	4926      	ldr	r1, [pc, #152]	; (800b6c4 <RegionUS915TxConfig+0xf8>)
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800b62c:	4683      	mov	fp, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800b62e:	2200      	movs	r2, #0
 800b630:	4628      	mov	r0, r5
 800b632:	f00a facf 	bl	8015bd4 <RegionCommonComputeTxPower>
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b636:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800b638:	900b      	str	r0, [sp, #44]	; 0x2c
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800b63a:	230c      	movs	r3, #12
 800b63c:	435a      	muls	r2, r3
 800b63e:	6830      	ldr	r0, [r6, #0]
 800b640:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b644:	5880      	ldr	r0, [r0, r2]
 800b646:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800b648:	2200      	movs	r2, #0
 800b64a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b64e:	2601      	movs	r6, #1
 800b650:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800b654:	2308      	movs	r3, #8
 800b656:	e9cd 2205 	strd	r2, r2, [sp, #20]
 800b65a:	e9cd 2603 	strd	r2, r6, [sp, #12]
 800b65e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800b662:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b664:	9700      	str	r7, [sp, #0]
 800b666:	465b      	mov	r3, fp
 800b668:	4630      	mov	r0, r6
 800b66a:	f8da 701c 	ldr.w	r7, [sl, #28]
 800b66e:	47b8      	blx	r7

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800b670:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800b674:	7b21      	ldrb	r1, [r4, #12]
 800b676:	4630      	mov	r0, r6
 800b678:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800b67a:	89a1      	ldrh	r1, [r4, #12]
 800b67c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800b680:	f7ff fd42 	bl	800b108 <GetTimeOnAir>
 800b684:	f8c9 0000 	str.w	r0, [r9]

    *txPower = txPowerLimited;
    return true;
}
 800b688:	4630      	mov	r0, r6
    *txPower = txPowerLimited;
 800b68a:	f888 5000 	strb.w	r5, [r8]
}
 800b68e:	b00d      	add	sp, #52	; 0x34
 800b690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800b694:	2204      	movs	r2, #4
 800b696:	2100      	movs	r1, #0
 800b698:	f50b 7058 	add.w	r0, fp, #864	; 0x360
 800b69c:	f00a f9bc 	bl	8015a18 <RegionCommonCountChannels>
 800b6a0:	2831      	cmp	r0, #49	; 0x31
 800b6a2:	d8bb      	bhi.n	800b61c <RegionUS915TxConfig+0x50>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800b6a4:	4655      	mov	r5, sl
 800b6a6:	2d05      	cmp	r5, #5
 800b6a8:	bfb8      	it	lt
 800b6aa:	2505      	movlt	r5, #5
 800b6ac:	e7b6      	b.n	800b61c <RegionUS915TxConfig+0x50>
 800b6ae:	bf00      	nop
 800b6b0:	0801c230 	.word	0x0801c230
 800b6b4:	200020e4 	.word	0x200020e4
 800b6b8:	200020dc 	.word	0x200020dc
 800b6bc:	0801a4f0 	.word	0x0801a4f0
 800b6c0:	0801a484 	.word	0x0801a484
 800b6c4:	41f00000 	.word	0x41f00000

0800b6c8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b6cc:	4f84      	ldr	r7, [pc, #528]	; (800b8e0 <RegionUS915LinkAdrReq+0x218>)
{
 800b6ce:	b093      	sub	sp, #76	; 0x4c
 800b6d0:	e9cd 1201 	strd	r1, r2, [sp, #4]
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b6d4:	6839      	ldr	r1, [r7, #0]
{
 800b6d6:	9303      	str	r3, [sp, #12]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800b6d8:	ae07      	add	r6, sp, #28
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b6da:	2400      	movs	r4, #0
{
 800b6dc:	4605      	mov	r5, r0
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b6de:	2206      	movs	r2, #6
 800b6e0:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800b6e4:	4630      	mov	r0, r6
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800b6e6:	e9c6 4401 	strd	r4, r4, [r6, #4]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800b6ea:	9405      	str	r4, [sp, #20]
 800b6ec:	f8ad 4018 	strh.w	r4, [sp, #24]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800b6f0:	9407      	str	r4, [sp, #28]
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800b6f2:	f00a f9af 	bl	8015a54 <RegionCommonChanMaskCopy>
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 800b6f6:	46a0      	mov	r8, r4
            channelsMask[0] = 0xFFFF;
 800b6f8:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800b6fc:	7a2b      	ldrb	r3, [r5, #8]
 800b6fe:	42a3      	cmp	r3, r4
 800b700:	d906      	bls.n	800b710 <RegionUS915LinkAdrReq+0x48>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800b702:	6868      	ldr	r0, [r5, #4]
 800b704:	a905      	add	r1, sp, #20
 800b706:	4420      	add	r0, r4
 800b708:	f00a f9d6 	bl	8015ab8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d176      	bne.n	800b7fe <RegionUS915LinkAdrReq+0x136>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800b710:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 800b714:	2b03      	cmp	r3, #3
 800b716:	dc07      	bgt.n	800b728 <RegionUS915LinkAdrReq+0x60>
 800b718:	2204      	movs	r2, #4
 800b71a:	2100      	movs	r1, #0
 800b71c:	a807      	add	r0, sp, #28
 800b71e:	f00a f97b 	bl	8015a18 <RegionCommonCountChannels>
 800b722:	2801      	cmp	r0, #1
 800b724:	f240 80da 	bls.w	800b8dc <RegionUS915LinkAdrReq+0x214>
    uint8_t bytesProcessed = 0;
 800b728:	2307      	movs	r3, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionUS915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800b72a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800b72e:	7aab      	ldrb	r3, [r5, #10]
 800b730:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b734:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800b738:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800b73c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b740:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800b744:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b748:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800b74c:	7aeb      	ldrb	r3, [r5, #11]
 800b74e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800b752:	7b2b      	ldrb	r3, [r5, #12]
 800b754:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800b758:	7b6b      	ldrb	r3, [r5, #13]
 800b75a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800b75e:	2348      	movs	r3, #72	; 0x48
 800b760:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800b764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b768:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	9310      	str	r3, [sp, #64]	; 0x40
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800b770:	230e      	movs	r3, #14
 800b772:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	930a      	str	r3, [sp, #40]	; 0x28

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b77a:	f10d 0216 	add.w	r2, sp, #22
 800b77e:	ab05      	add	r3, sp, #20
 800b780:	f10d 0115 	add.w	r1, sp, #21
 800b784:	a80a      	add	r0, sp, #40	; 0x28
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800b786:	960e      	str	r6, [sp, #56]	; 0x38
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b788:	f00a f9b0 	bl	8015aec <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800b78c:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b78e:	4605      	mov	r5, r0
    if( status == 0x07 )
 800b790:	d123      	bne.n	800b7da <RegionUS915LinkAdrReq+0x112>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800b792:	6838      	ldr	r0, [r7, #0]
 800b794:	2206      	movs	r2, #6
 800b796:	4631      	mov	r1, r6
 800b798:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800b79c:	f00a f95a 	bl	8015a54 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800b7a0:	4b50      	ldr	r3, [pc, #320]	; (800b8e4 <RegionUS915LinkAdrReq+0x21c>)
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f8b2 0360 	ldrh.w	r0, [r2, #864]	; 0x360
 800b7aa:	8819      	ldrh	r1, [r3, #0]
 800b7ac:	4001      	ands	r1, r0
 800b7ae:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800b7b0:	f8b2 0362 	ldrh.w	r0, [r2, #866]	; 0x362
 800b7b4:	8859      	ldrh	r1, [r3, #2]
 800b7b6:	4001      	ands	r1, r0
 800b7b8:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800b7ba:	f8b2 0364 	ldrh.w	r0, [r2, #868]	; 0x364
 800b7be:	8899      	ldrh	r1, [r3, #4]
 800b7c0:	4001      	ands	r1, r0
 800b7c2:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800b7c4:	f8b2 0366 	ldrh.w	r0, [r2, #870]	; 0x366
 800b7c8:	88d9      	ldrh	r1, [r3, #6]
 800b7ca:	4001      	ands	r1, r0
 800b7cc:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800b7ce:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800b7d2:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800b7d6:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800b7d8:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800b7da:	9a01      	ldr	r2, [sp, #4]
 800b7dc:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800b7e0:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800b7e2:	9a02      	ldr	r2, [sp, #8]
 800b7e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b7e8:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800b7ea:	9a03      	ldr	r2, [sp, #12]
 800b7ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b7f0:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800b7f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    return status;
}
 800b7f4:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 800b7f6:	701c      	strb	r4, [r3, #0]
}
 800b7f8:	b013      	add	sp, #76	; 0x4c
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( linkAdrParams.ChMaskCtrl == 6 )
 800b7fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800b802:	f8bd 2018 	ldrh.w	r2, [sp, #24]
        bytesProcessed += nextIndex;
 800b806:	4404      	add	r4, r0
        if( linkAdrParams.ChMaskCtrl == 6 )
 800b808:	2b06      	cmp	r3, #6
        bytesProcessed += nextIndex;
 800b80a:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800b80c:	d10b      	bne.n	800b826 <RegionUS915LinkAdrReq+0x15e>
            channelsMask[0] = 0xFFFF;
 800b80e:	f8ad 901c 	strh.w	r9, [sp, #28]
            channelsMask[1] = 0xFFFF;
 800b812:	f8ad 901e 	strh.w	r9, [sp, #30]
            channelsMask[2] = 0xFFFF;
 800b816:	f8ad 9020 	strh.w	r9, [sp, #32]
            channelsMask[3] = 0xFFFF;
 800b81a:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800b824:	e76a      	b.n	800b6fc <RegionUS915LinkAdrReq+0x34>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800b826:	2b07      	cmp	r3, #7
 800b828:	d108      	bne.n	800b83c <RegionUS915LinkAdrReq+0x174>
            channelsMask[0] = 0x0000;
 800b82a:	f8ad 801c 	strh.w	r8, [sp, #28]
            channelsMask[1] = 0x0000;
 800b82e:	f8ad 801e 	strh.w	r8, [sp, #30]
            channelsMask[2] = 0x0000;
 800b832:	f8ad 8020 	strh.w	r8, [sp, #32]
            channelsMask[3] = 0x0000;
 800b836:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800b83a:	e7f0      	b.n	800b81e <RegionUS915LinkAdrReq+0x156>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800b83c:	2b05      	cmp	r3, #5
 800b83e:	d147      	bne.n	800b8d0 <RegionUS915LinkAdrReq+0x208>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b840:	f04f 0c00 	mov.w	ip, #0
 800b844:	b2d2      	uxtb	r2, r2
            uint8_t cntChannelMask = 0;
 800b846:	4661      	mov	r1, ip
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b848:	2301      	movs	r3, #1
 800b84a:	fa03 fa0c 	lsl.w	sl, r3, ip
                    if( ( i % 2 ) == 0 )
 800b84e:	ea0c 0b03 	and.w	fp, ip, r3
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b852:	ab12      	add	r3, sp, #72	; 0x48
 800b854:	eb03 0e41 	add.w	lr, r3, r1, lsl #1
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b858:	ea12 0f0a 	tst.w	r2, sl
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b85c:	f83e 3c2c 	ldrh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 800b860:	fa0f f08a 	sxth.w	r0, sl
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800b864:	d01d      	beq.n	800b8a2 <RegionUS915LinkAdrReq+0x1da>
                    if( ( i % 2 ) == 0 )
 800b866:	f1bb 0f00 	cmp.w	fp, #0
 800b86a:	d10e      	bne.n	800b88a <RegionUS915LinkAdrReq+0x1c2>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800b86c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800b870:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 800b874:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b878:	4303      	orrs	r3, r0
 800b87a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            for( uint8_t i = 0; i <= 7; i++ )
 800b87e:	f10c 0c01 	add.w	ip, ip, #1
 800b882:	f1bc 0f08 	cmp.w	ip, #8
 800b886:	d1df      	bne.n	800b848 <RegionUS915LinkAdrReq+0x180>
 800b888:	e738      	b.n	800b6fc <RegionUS915LinkAdrReq+0x34>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800b88a:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800b88e:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 800b892:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b896:	4303      	orrs	r3, r0
 800b898:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                        cntChannelMask++;
 800b89c:	3101      	adds	r1, #1
 800b89e:	b2c9      	uxtb	r1, r1
 800b8a0:	e7ed      	b.n	800b87e <RegionUS915LinkAdrReq+0x1b6>
                        channelsMask[4] &= ~( bitMask << i );
 800b8a2:	43c0      	mvns	r0, r0
                    if( ( i % 2 ) == 0 )
 800b8a4:	f1bb 0f00 	cmp.w	fp, #0
 800b8a8:	d109      	bne.n	800b8be <RegionUS915LinkAdrReq+0x1f6>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800b8aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b8ae:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 800b8b2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b8b6:	4018      	ands	r0, r3
 800b8b8:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800b8bc:	e7df      	b.n	800b87e <RegionUS915LinkAdrReq+0x1b6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 800b8c4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b8c8:	4018      	ands	r0, r3
 800b8ca:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800b8ce:	e7e5      	b.n	800b89c <RegionUS915LinkAdrReq+0x1d4>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800b8d0:	a912      	add	r1, sp, #72	; 0x48
 800b8d2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b8d6:	f823 2c2c 	strh.w	r2, [r3, #-44]
 800b8da:	e70f      	b.n	800b6fc <RegionUS915LinkAdrReq+0x34>
        status &= 0xFE; // Channel mask KO
 800b8dc:	2306      	movs	r3, #6
 800b8de:	e724      	b.n	800b72a <RegionUS915LinkAdrReq+0x62>
 800b8e0:	200020e4 	.word	0x200020e4
 800b8e4:	200020e0 	.word	0x200020e0

0800b8e8 <RegionUS915AlternateDr>:
{
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800b8e8:	4b09      	ldr	r3, [pc, #36]	; (800b910 <RegionUS915AlternateDr+0x28>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	7b53      	ldrb	r3, [r2, #13]
    if( type == ALTERNATE_DR )
 800b8ee:	b961      	cbnz	r1, 800b90a <RegionUS915AlternateDr+0x22>
        RegionNvmGroup1->JoinTrialsCounter++;
 800b8f0:	3301      	adds	r3, #1
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 800b8f2:	7353      	strb	r3, [r2, #13]
 800b8f4:	7b53      	ldrb	r3, [r2, #13]
 800b8f6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800b8fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800b8fe:	b2db      	uxtb	r3, r3
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800b900:	2b1d      	cmp	r3, #29
    }
    return currentDr;
}
 800b902:	bf34      	ite	cc
 800b904:	2004      	movcc	r0, #4
 800b906:	2000      	movcs	r0, #0
 800b908:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800b90a:	3b01      	subs	r3, #1
 800b90c:	e7f1      	b.n	800b8f2 <RegionUS915AlternateDr+0xa>
 800b90e:	bf00      	nop
 800b910:	200020e0 	.word	0x200020e0

0800b914 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t nbEnabledChannels = 0;
 800b918:	2500      	movs	r5, #0
{
 800b91a:	b0a4      	sub	sp, #144	; 0x90
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800b91c:	4e48      	ldr	r6, [pc, #288]	; (800ba40 <RegionUS915NextChannel+0x12c>)
    uint8_t nbEnabledChannels = 0;
 800b91e:	f88d 500e 	strb.w	r5, [sp, #14]
{
 800b922:	4604      	mov	r4, r0
 800b924:	460f      	mov	r7, r1
 800b926:	4691      	mov	r9, r2
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800b928:	4629      	mov	r1, r5
 800b92a:	2244      	movs	r2, #68	; 0x44
 800b92c:	a813      	add	r0, sp, #76	; 0x4c
{
 800b92e:	4698      	mov	r8, r3
    uint8_t nbRestrictedChannels = 0;
 800b930:	f88d 500f 	strb.w	r5, [sp, #15]
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800b934:	9512      	str	r5, [sp, #72]	; 0x48
 800b936:	f00d fdc5 	bl	80194c4 <memset>
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800b93a:	4629      	mov	r1, r5
 800b93c:	6830      	ldr	r0, [r6, #0]
 800b93e:	f8df a104 	ldr.w	sl, [pc, #260]	; 800ba44 <RegionUS915NextChannel+0x130>
 800b942:	2204      	movs	r2, #4
 800b944:	f00a f868 	bl	8015a18 <RegionCommonCountChannels>
 800b948:	4605      	mov	r5, r0
 800b94a:	b948      	cbnz	r0, 800b960 <RegionUS915NextChannel+0x4c>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800b94c:	f8da 1000 	ldr.w	r1, [sl]
 800b950:	6830      	ldr	r0, [r6, #0]
 800b952:	2204      	movs	r2, #4
 800b954:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800b958:	f00a f87c 	bl	8015a54 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800b95c:	6833      	ldr	r3, [r6, #0]
 800b95e:	731d      	strb	r5, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800b960:	f994 3008 	ldrsb.w	r3, [r4, #8]
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800b964:	6832      	ldr	r2, [r6, #0]
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800b966:	f8da 1000 	ldr.w	r1, [sl]
    if( nextChanParams->Datarate >= DR_4 )
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	dd04      	ble.n	800b978 <RegionUS915NextChannel+0x64>
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800b96e:	7a10      	ldrb	r0, [r2, #8]
 800b970:	b910      	cbnz	r0, 800b978 <RegionUS915NextChannel+0x64>
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800b972:	f8b1 0368 	ldrh.w	r0, [r1, #872]	; 0x368
 800b976:	8110      	strh	r0, [r2, #8]

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800b978:	e9cd 2105 	strd	r2, r1, [sp, #20]
    countChannelsParams.Bands = RegionBands;
 800b97c:	4a32      	ldr	r2, [pc, #200]	; (800ba48 <RegionUS915NextChannel+0x134>)
    countChannelsParams.Joined = nextChanParams->Joined;
 800b97e:	7a60      	ldrb	r0, [r4, #9]
    countChannelsParams.Bands = RegionBands;
 800b980:	6812      	ldr	r2, [r2, #0]
 800b982:	9207      	str	r2, [sp, #28]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800b984:	2248      	movs	r2, #72	; 0x48
 800b986:	f8ad 2020 	strh.w	r2, [sp, #32]
    countChannelsParams.JoinChannels = NULL;
 800b98a:	2200      	movs	r2, #0
 800b98c:	9209      	str	r2, [sp, #36]	; 0x24

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800b98e:	6822      	ldr	r2, [r4, #0]
 800b990:	920a      	str	r2, [sp, #40]	; 0x28
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800b992:	6862      	ldr	r2, [r4, #4]
 800b994:	920b      	str	r2, [sp, #44]	; 0x2c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800b996:	7aa2      	ldrb	r2, [r4, #10]
    countChannelsParams.Joined = nextChanParams->Joined;
 800b998:	f88d 0010 	strb.w	r0, [sp, #16]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800b99c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800b9a0:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800b9aa:	aa04      	add	r2, sp, #16
 800b9ac:	9211      	str	r2, [sp, #68]	; 0x44
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800b9ae:	aa0d      	add	r2, sp, #52	; 0x34
 800b9b0:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800b9b4:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b9b6:	8ae1      	ldrh	r1, [r4, #22]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800b9b8:	f88d 3011 	strb.w	r3, [sp, #17]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b9bc:	4618      	mov	r0, r3
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800b9be:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b9c2:	f7ff fba1 	bl	800b108 <GetTimeOnAir>

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800b9c6:	f10d 030f 	add.w	r3, sp, #15
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800b9ca:	9010      	str	r0, [sp, #64]	; 0x40
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	f8cd 9004 	str.w	r9, [sp, #4]
 800b9d2:	f10d 030e 	add.w	r3, sp, #14
 800b9d6:	aa12      	add	r2, sp, #72	; 0x48
 800b9d8:	4641      	mov	r1, r8
 800b9da:	a80a      	add	r0, sp, #40	; 0x28
 800b9dc:	f00a f969 	bl	8015cb2 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	b980      	cbnz	r0, 800ba06 <RegionUS915NextChannel+0xf2>
    {
        if( nextChanParams->Joined == true )
 800b9e4:	7a63      	ldrb	r3, [r4, #9]
 800b9e6:	b193      	cbz	r3, 800ba0e <RegionUS915NextChannel+0xfa>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800b9e8:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800b9ec:	3901      	subs	r1, #1
 800b9ee:	f008 fdfd 	bl	80145ec <randr>
 800b9f2:	ab24      	add	r3, sp, #144	; 0x90
 800b9f4:	4418      	add	r0, r3
 800b9f6:	f810 3c48 	ldrb.w	r3, [r0, #-72]
                uint8_t i = 0;
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
                }
                *channel = 64 + i;
 800b9fa:	703b      	strb	r3, [r7, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800b9fc:	7839      	ldrb	r1, [r7, #0]
 800b9fe:	6830      	ldr	r0, [r6, #0]
 800ba00:	2248      	movs	r2, #72	; 0x48
 800ba02:	f009 fff0 	bl	80159e6 <RegionCommonChanDisable>
    }
    return status;
}
 800ba06:	4628      	mov	r0, r5
 800ba08:	b024      	add	sp, #144	; 0x90
 800ba0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( nextChanParams->Datarate == DR_0 )
 800ba0e:	f994 3008 	ldrsb.w	r3, [r4, #8]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800ba12:	6830      	ldr	r0, [r6, #0]
            if( nextChanParams->Datarate == DR_0 )
 800ba14:	b153      	cbz	r3, 800ba2c <RegionUS915NextChannel+0x118>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800ba16:	7a00      	ldrb	r0, [r0, #8]
 800ba18:	462a      	mov	r2, r5
 800ba1a:	b2d3      	uxtb	r3, r2
 800ba1c:	fa40 f103 	asr.w	r1, r0, r3
 800ba20:	07c9      	lsls	r1, r1, #31
 800ba22:	f102 0201 	add.w	r2, r2, #1
 800ba26:	d5f8      	bpl.n	800ba1a <RegionUS915NextChannel+0x106>
                *channel = 64 + i;
 800ba28:	3340      	adds	r3, #64	; 0x40
 800ba2a:	e7e6      	b.n	800b9fa <RegionUS915NextChannel+0xe6>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800ba2c:	463a      	mov	r2, r7
 800ba2e:	f100 010c 	add.w	r1, r0, #12
 800ba32:	f00a f9a1 	bl	8015d78 <RegionBaseUSComputeNext125kHzJoinChannel>
 800ba36:	2803      	cmp	r0, #3
 800ba38:	d1e0      	bne.n	800b9fc <RegionUS915NextChannel+0xe8>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800ba3a:	4605      	mov	r5, r0
 800ba3c:	e7e3      	b.n	800ba06 <RegionUS915NextChannel+0xf2>
 800ba3e:	bf00      	nop
 800ba40:	200020e0 	.word	0x200020e0
 800ba44:	200020e4 	.word	0x200020e4
 800ba48:	200020dc 	.word	0x200020dc

0800ba4c <RegionUS915ApplyDrOffset>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800ba4c:	4b03      	ldr	r3, [pc, #12]	; (800ba5c <RegionUS915ApplyDrOffset+0x10>)
 800ba4e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ba52:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800ba54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 800ba58:	b2c0      	uxtb	r0, r0
 800ba5a:	4770      	bx	lr
 800ba5c:	0801c21c 	.word	0x0801c21c

0800ba60 <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
 800ba60:	4b08      	ldr	r3, [pc, #32]	; (800ba84 <registry_find+0x24>)
 800ba62:	6859      	ldr	r1, [r3, #4]
{
 800ba64:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
 800ba66:	b111      	cbz	r1, 800ba6e <registry_find+0xe>
 800ba68:	6819      	ldr	r1, [r3, #0]
 800ba6a:	4288      	cmp	r0, r1
 800ba6c:	d007      	beq.n	800ba7e <registry_find+0x1e>
 800ba6e:	68d8      	ldr	r0, [r3, #12]
 800ba70:	b130      	cbz	r0, 800ba80 <registry_find+0x20>
 800ba72:	689b      	ldr	r3, [r3, #8]
		struct registry_entry *ep = &registry[i];
 800ba74:	4804      	ldr	r0, [pc, #16]	; (800ba88 <registry_find+0x28>)
 800ba76:	429a      	cmp	r2, r3
 800ba78:	bf18      	it	ne
 800ba7a:	2000      	movne	r0, #0
 800ba7c:	4770      	bx	lr
 800ba7e:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	20002104 	.word	0x20002104
 800ba88:	2000210c 	.word	0x2000210c

0800ba8c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800ba8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800ba8e:	ab0b      	add	r3, sp, #44	; 0x2c
 800ba90:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	4b05      	ldr	r3, [pc, #20]	; (800baac <z_log_msg2_runtime_create.constprop.0+0x20>)
 800ba96:	9302      	str	r3, [sp, #8]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e9cd 3300 	strd	r3, r3, [sp]
 800ba9e:	2202      	movs	r2, #2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7f8 ff5b 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 800baa6:	b007      	add	sp, #28
 800baa8:	f85d fb04 	ldr.w	pc, [sp], #4
 800baac:	0801c250 	.word	0x0801c250

0800bab0 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
 800bab0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 800bab2:	4804      	ldr	r0, [pc, #16]	; (800bac4 <fs_init+0x14>)
 800bab4:	f00d f9c9 	bl	8018e4a <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
 800bab8:	4b03      	ldr	r3, [pc, #12]	; (800bac8 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
 800baba:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 800babc:	e9c3 3300 	strd	r3, r3, [r3]
 800bac0:	bd08      	pop	{r3, pc}
 800bac2:	bf00      	nop
 800bac4:	200020f0 	.word	0x200020f0
 800bac8:	200020e8 	.word	0x200020e8

0800bacc <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800bad0:	4801      	ldr	r0, [pc, #4]	; (800bad8 <k_mutex_lock.constprop.0.isra.0+0xc>)
 800bad2:	f004 bab7 	b.w	8010044 <z_impl_k_mutex_lock>
 800bad6:	bf00      	nop
 800bad8:	200020f0 	.word	0x200020f0

0800badc <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 800badc:	4801      	ldr	r0, [pc, #4]	; (800bae4 <k_mutex_unlock.constprop.0.isra.0+0x8>)
 800bade:	f004 bb29 	b.w	8010134 <z_impl_k_mutex_unlock>
 800bae2:	bf00      	nop
 800bae4:	200020f0 	.word	0x200020f0

0800bae8 <fs_get_mnt_point>:
{
 800bae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
 800baee:	4608      	mov	r0, r1
{
 800baf0:	4688      	mov	r8, r1
 800baf2:	4615      	mov	r5, r2
	size_t len, name_len = strlen(name);
 800baf4:	f7f5 fc67 	bl	80013c6 <strlen>
	k_mutex_lock(&mutex, K_FOREVER);
 800baf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	size_t len, name_len = strlen(name);
 800bafc:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
 800bafe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb02:	f7ff ffe3 	bl	800bacc <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
 800bb06:	4b1a      	ldr	r3, [pc, #104]	; (800bb70 <fs_get_mnt_point+0x88>)
 800bb08:	681c      	ldr	r4, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
 800bb0a:	f04f 0900 	mov.w	r9, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bb0e:	429c      	cmp	r4, r3
 800bb10:	bf08      	it	eq
 800bb12:	2400      	moveq	r4, #0
	return (node == list->tail) ? NULL : node->next;
 800bb14:	464f      	mov	r7, r9
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 800bb16:	b954      	cbnz	r4, 800bb2e <fs_get_mnt_point+0x46>
	k_mutex_unlock(&mutex);
 800bb18:	f7ff ffe0 	bl	800badc <k_mutex_unlock.constprop.0.isra.0>
	if (mnt_p == NULL) {
 800bb1c:	b317      	cbz	r7, 800bb64 <fs_get_mnt_point+0x7c>
	*mnt_pntp = mnt_p;
 800bb1e:	f8ca 7000 	str.w	r7, [sl]
	if (match_len)
 800bb22:	b315      	cbz	r5, 800bb6a <fs_get_mnt_point+0x82>
		*match_len = mnt_p->mountp_len;
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	602b      	str	r3, [r5, #0]
	return 0;
 800bb28:	2000      	movs	r0, #0
}
 800bb2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
 800bb2e:	69a6      	ldr	r6, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
 800bb30:	45b1      	cmp	r9, r6
 800bb32:	d812      	bhi.n	800bb5a <fs_get_mnt_point+0x72>
 800bb34:	45b3      	cmp	fp, r6
 800bb36:	d310      	bcc.n	800bb5a <fs_get_mnt_point+0x72>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
 800bb38:	2e01      	cmp	r6, #1
 800bb3a:	d904      	bls.n	800bb46 <fs_get_mnt_point+0x5e>
 800bb3c:	f818 2006 	ldrb.w	r2, [r8, r6]
 800bb40:	2a2f      	cmp	r2, #47	; 0x2f
 800bb42:	d000      	beq.n	800bb46 <fs_get_mnt_point+0x5e>
 800bb44:	b94a      	cbnz	r2, 800bb5a <fs_get_mnt_point+0x72>
		if (strncmp(name, itr->mnt_point, len) == 0) {
 800bb46:	68e1      	ldr	r1, [r4, #12]
 800bb48:	4632      	mov	r2, r6
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	f00d fcf5 	bl	801953a <strncmp>
 800bb50:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <fs_get_mnt_point+0x88>)
 800bb52:	2800      	cmp	r0, #0
 800bb54:	bf04      	itt	eq
 800bb56:	46b1      	moveq	r9, r6
 800bb58:	4627      	moveq	r7, r4
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	4294      	cmp	r4, r2
 800bb5e:	d0db      	beq.n	800bb18 <fs_get_mnt_point+0x30>
 800bb60:	6824      	ldr	r4, [r4, #0]
 800bb62:	e7d8      	b.n	800bb16 <fs_get_mnt_point+0x2e>
		return -ENOENT;
 800bb64:	f06f 0001 	mvn.w	r0, #1
 800bb68:	e7df      	b.n	800bb2a <fs_get_mnt_point+0x42>
	return 0;
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	e7dd      	b.n	800bb2a <fs_get_mnt_point+0x42>
 800bb6e:	bf00      	nop
 800bb70:	200020e8 	.word	0x200020e8

0800bb74 <fs_open>:
{
 800bb74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb76:	4605      	mov	r5, r0
 800bb78:	b089      	sub	sp, #36	; 0x24
 800bb7a:	4617      	mov	r7, r2
	if ((file_name == NULL) ||
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	b971      	cbnz	r1, 800bb9e <fs_open+0x2a>
		LOG_ERR("invalid file name!!");
 800bb80:	4b2a      	ldr	r3, [pc, #168]	; (800bc2c <fs_open+0xb8>)
 800bb82:	9306      	str	r3, [sp, #24]
 800bb84:	482a      	ldr	r0, [pc, #168]	; (800bc30 <fs_open+0xbc>)
 800bb86:	2302      	movs	r3, #2
 800bb88:	aa05      	add	r2, sp, #20
 800bb8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 800bb8e:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("invalid file name!!");
 800bb92:	9305      	str	r3, [sp, #20]
 800bb94:	f00a f98f 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
}
 800bb98:	4620      	mov	r0, r4
 800bb9a:	b009      	add	sp, #36	; 0x24
 800bb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
 800bb9e:	4608      	mov	r0, r1
 800bba0:	f7f5 fc11 	bl	80013c6 <strlen>
	if ((file_name == NULL) ||
 800bba4:	2801      	cmp	r0, #1
 800bba6:	d9eb      	bls.n	800bb80 <fs_open+0xc>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
 800bba8:	7833      	ldrb	r3, [r6, #0]
 800bbaa:	2b2f      	cmp	r3, #47	; 0x2f
 800bbac:	d1e8      	bne.n	800bb80 <fs_open+0xc>
	if (zfp->mp != NULL) {
 800bbae:	686a      	ldr	r2, [r5, #4]
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	d132      	bne.n	800bc1a <fs_open+0xa6>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	a801      	add	r0, sp, #4
 800bbb8:	f7ff ff96 	bl	800bae8 <fs_get_mnt_point>
	if (rc < 0) {
 800bbbc:	1e04      	subs	r4, r0, #0
 800bbbe:	da0a      	bge.n	800bbd6 <fs_open+0x62>
		LOG_ERR("mount point not found!!");
 800bbc0:	4b1c      	ldr	r3, [pc, #112]	; (800bc34 <fs_open+0xc0>)
 800bbc2:	9306      	str	r3, [sp, #24]
 800bbc4:	481a      	ldr	r0, [pc, #104]	; (800bc30 <fs_open+0xbc>)
 800bbc6:	2302      	movs	r3, #2
 800bbc8:	aa05      	add	r2, sp, #20
 800bbca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800bbce:	9305      	str	r3, [sp, #20]
 800bbd0:	f00a f971 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
		return rc;
 800bbd4:	e7e0      	b.n	800bb98 <fs_open+0x24>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
 800bbd6:	9b01      	ldr	r3, [sp, #4]
 800bbd8:	f893 2020 	ldrb.w	r2, [r3, #32]
 800bbdc:	0792      	lsls	r2, r2, #30
 800bbde:	d502      	bpl.n	800bbe6 <fs_open+0x72>
 800bbe0:	f017 0f12 	tst.w	r7, #18
 800bbe4:	d11c      	bne.n	800bc20 <fs_open+0xac>
	CHECKIF(mp->fs->open == NULL) {
 800bbe6:	69da      	ldr	r2, [r3, #28]
 800bbe8:	6814      	ldr	r4, [r2, #0]
 800bbea:	b1e4      	cbz	r4, 800bc26 <fs_open+0xb2>
	zfp->mp = mp;
 800bbec:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
 800bbee:	463a      	mov	r2, r7
 800bbf0:	4631      	mov	r1, r6
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	47a0      	blx	r4
	if (rc < 0) {
 800bbf6:	1e04      	subs	r4, r0, #0
 800bbf8:	da0d      	bge.n	800bc16 <fs_open+0xa2>
		LOG_ERR("file open error (%d)", rc);
 800bbfa:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <fs_open+0xc4>)
 800bbfc:	480c      	ldr	r0, [pc, #48]	; (800bc30 <fs_open+0xbc>)
 800bbfe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bc02:	aa05      	add	r2, sp, #20
 800bc04:	2303      	movs	r3, #3
 800bc06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bc0a:	9305      	str	r3, [sp, #20]
 800bc0c:	f00a f953 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
		zfp->mp = NULL;
 800bc10:	2300      	movs	r3, #0
 800bc12:	606b      	str	r3, [r5, #4]
		return rc;
 800bc14:	e7c0      	b.n	800bb98 <fs_open+0x24>
	zfp->flags = flags;
 800bc16:	722f      	strb	r7, [r5, #8]
	return rc;
 800bc18:	e7be      	b.n	800bb98 <fs_open+0x24>
		return -EBUSY;
 800bc1a:	f06f 040f 	mvn.w	r4, #15
 800bc1e:	e7bb      	b.n	800bb98 <fs_open+0x24>
		return -EROFS;
 800bc20:	f06f 041d 	mvn.w	r4, #29
 800bc24:	e7b8      	b.n	800bb98 <fs_open+0x24>
		return -ENOTSUP;
 800bc26:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800bc2a:	e7b5      	b.n	800bb98 <fs_open+0x24>
 800bc2c:	0801c271 	.word	0x0801c271
 800bc30:	08019fb0 	.word	0x08019fb0
 800bc34:	0801c285 	.word	0x0801c285
 800bc38:	0801c29d 	.word	0x0801c29d

0800bc3c <fs_close>:
{
 800bc3c:	b530      	push	{r4, r5, lr}
	if (zfp->mp == NULL) {
 800bc3e:	6844      	ldr	r4, [r0, #4]
{
 800bc40:	b087      	sub	sp, #28
 800bc42:	4605      	mov	r5, r0
	if (zfp->mp == NULL) {
 800bc44:	b184      	cbz	r4, 800bc68 <fs_close+0x2c>
	CHECKIF(zfp->mp->fs->close == NULL) {
 800bc46:	69e3      	ldr	r3, [r4, #28]
 800bc48:	69db      	ldr	r3, [r3, #28]
 800bc4a:	b19b      	cbz	r3, 800bc74 <fs_close+0x38>
	rc = zfp->mp->fs->close(zfp);
 800bc4c:	4798      	blx	r3
	if (rc < 0) {
 800bc4e:	1e04      	subs	r4, r0, #0
 800bc50:	da0d      	bge.n	800bc6e <fs_close+0x32>
		LOG_ERR("file close error (%d)", rc);
 800bc52:	4b0a      	ldr	r3, [pc, #40]	; (800bc7c <fs_close+0x40>)
 800bc54:	480a      	ldr	r0, [pc, #40]	; (800bc80 <fs_close+0x44>)
 800bc56:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bc5a:	aa03      	add	r2, sp, #12
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bc62:	9303      	str	r3, [sp, #12]
 800bc64:	f00a f927 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
}
 800bc68:	4620      	mov	r0, r4
 800bc6a:	b007      	add	sp, #28
 800bc6c:	bd30      	pop	{r4, r5, pc}
	zfp->mp = NULL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	606b      	str	r3, [r5, #4]
	return rc;
 800bc72:	e7f9      	b.n	800bc68 <fs_close+0x2c>
		return -ENOTSUP;
 800bc74:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800bc78:	e7f6      	b.n	800bc68 <fs_close+0x2c>
 800bc7a:	bf00      	nop
 800bc7c:	0801c2b2 	.word	0x0801c2b2
 800bc80:	08019fb0 	.word	0x08019fb0

0800bc84 <fs_write>:
{
 800bc84:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
 800bc86:	6843      	ldr	r3, [r0, #4]
{
 800bc88:	b086      	sub	sp, #24
	if (zfp->mp == NULL) {
 800bc8a:	b19b      	cbz	r3, 800bcb4 <fs_write+0x30>
	CHECKIF(zfp->mp->fs->write == NULL) {
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	b19b      	cbz	r3, 800bcba <fs_write+0x36>
	rc = zfp->mp->fs->write(zfp, ptr, size);
 800bc92:	4798      	blx	r3
	if (rc < 0) {
 800bc94:	1e04      	subs	r4, r0, #0
 800bc96:	da0a      	bge.n	800bcae <fs_write+0x2a>
		LOG_ERR("file write error (%d)", rc);
 800bc98:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <fs_write+0x3c>)
 800bc9a:	480a      	ldr	r0, [pc, #40]	; (800bcc4 <fs_write+0x40>)
 800bc9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bca0:	aa03      	add	r2, sp, #12
 800bca2:	2303      	movs	r3, #3
 800bca4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bca8:	9303      	str	r3, [sp, #12]
 800bcaa:	f00a f904 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
}
 800bcae:	4620      	mov	r0, r4
 800bcb0:	b006      	add	sp, #24
 800bcb2:	bd10      	pop	{r4, pc}
		return -EBADF;
 800bcb4:	f06f 0408 	mvn.w	r4, #8
 800bcb8:	e7f9      	b.n	800bcae <fs_write+0x2a>
		return -ENOTSUP;
 800bcba:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800bcbe:	e7f6      	b.n	800bcae <fs_write+0x2a>
 800bcc0:	0801c2c8 	.word	0x0801c2c8
 800bcc4:	08019fb0 	.word	0x08019fb0

0800bcc8 <fs_opendir>:
{
 800bcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcca:	4606      	mov	r6, r0
 800bccc:	b089      	sub	sp, #36	; 0x24
	if ((abs_path == NULL) ||
 800bcce:	460d      	mov	r5, r1
 800bcd0:	b971      	cbnz	r1, 800bcf0 <fs_opendir+0x28>
		LOG_ERR("invalid directory name!!");
 800bcd2:	4b30      	ldr	r3, [pc, #192]	; (800bd94 <fs_opendir+0xcc>)
 800bcd4:	9306      	str	r3, [sp, #24]
 800bcd6:	4830      	ldr	r0, [pc, #192]	; (800bd98 <fs_opendir+0xd0>)
 800bcd8:	2302      	movs	r3, #2
 800bcda:	aa05      	add	r2, sp, #20
 800bcdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 800bce0:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("invalid directory name!!");
 800bce4:	9305      	str	r3, [sp, #20]
 800bce6:	f00a f8e6 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
}
 800bcea:	4620      	mov	r0, r4
 800bcec:	b009      	add	sp, #36	; 0x24
 800bcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	f7f5 fb68 	bl	80013c6 <strlen>
	if ((abs_path == NULL) ||
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d0eb      	beq.n	800bcd2 <fs_opendir+0xa>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 800bcfa:	782b      	ldrb	r3, [r5, #0]
 800bcfc:	2b2f      	cmp	r3, #47	; 0x2f
 800bcfe:	d1e8      	bne.n	800bcd2 <fs_opendir+0xa>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
 800bd00:	6873      	ldr	r3, [r6, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d140      	bne.n	800bd88 <fs_opendir+0xc0>
 800bd06:	6837      	ldr	r7, [r6, #0]
 800bd08:	2f00      	cmp	r7, #0
 800bd0a:	d13d      	bne.n	800bd88 <fs_opendir+0xc0>
	if (strcmp(abs_path, "/") == 0) {
 800bd0c:	4923      	ldr	r1, [pc, #140]	; (800bd9c <fs_opendir+0xd4>)
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7f5 fb4f 	bl	80013b2 <strcmp>
 800bd14:	4604      	mov	r4, r0
 800bd16:	b980      	cbnz	r0, 800bd3a <fs_opendir+0x72>
		k_mutex_lock(&mutex, K_FOREVER);
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bd20:	f7ff fed4 	bl	800bacc <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
 800bd24:	4a1e      	ldr	r2, [pc, #120]	; (800bda0 <fs_opendir+0xd8>)
		zdp->mp = NULL;
 800bd26:	6074      	str	r4, [r6, #4]
 800bd28:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	bf14      	ite	ne
 800bd2e:	461f      	movne	r7, r3
 800bd30:	4627      	moveq	r7, r4
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
 800bd32:	6037      	str	r7, [r6, #0]
		k_mutex_unlock(&mutex);
 800bd34:	f7ff fed2 	bl	800badc <k_mutex_unlock.constprop.0.isra.0>
		return 0;
 800bd38:	e7d7      	b.n	800bcea <fs_opendir+0x22>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 800bd3a:	463a      	mov	r2, r7
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	a801      	add	r0, sp, #4
 800bd40:	f7ff fed2 	bl	800bae8 <fs_get_mnt_point>
	if (rc < 0) {
 800bd44:	1e04      	subs	r4, r0, #0
 800bd46:	da0a      	bge.n	800bd5e <fs_opendir+0x96>
		LOG_ERR("mount point not found!!");
 800bd48:	4b16      	ldr	r3, [pc, #88]	; (800bda4 <fs_opendir+0xdc>)
 800bd4a:	9306      	str	r3, [sp, #24]
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	9305      	str	r3, [sp, #20]
 800bd50:	aa05      	add	r2, sp, #20
 800bd52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		LOG_ERR("directory open error (%d)", rc);
 800bd56:	4810      	ldr	r0, [pc, #64]	; (800bd98 <fs_opendir+0xd0>)
 800bd58:	f00a f8ad 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
 800bd5c:	e7c5      	b.n	800bcea <fs_opendir+0x22>
	CHECKIF(mp->fs->opendir == NULL) {
 800bd5e:	9901      	ldr	r1, [sp, #4]
 800bd60:	69cb      	ldr	r3, [r1, #28]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	b19b      	cbz	r3, 800bd8e <fs_opendir+0xc6>
	zdp->mp = mp;
 800bd66:	6071      	str	r1, [r6, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	4798      	blx	r3
	if (rc < 0) {
 800bd6e:	1e04      	subs	r4, r0, #0
 800bd70:	dabb      	bge.n	800bcea <fs_opendir+0x22>
		LOG_ERR("directory open error (%d)", rc);
 800bd72:	4b0d      	ldr	r3, [pc, #52]	; (800bda8 <fs_opendir+0xe0>)
 800bd74:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bd78:	2303      	movs	r3, #3
		zdp->dirp = NULL;
 800bd7a:	e9c6 7700 	strd	r7, r7, [r6]
		LOG_ERR("directory open error (%d)", rc);
 800bd7e:	9305      	str	r3, [sp, #20]
 800bd80:	aa05      	add	r2, sp, #20
 800bd82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bd86:	e7e6      	b.n	800bd56 <fs_opendir+0x8e>
		return -EBUSY;
 800bd88:	f06f 040f 	mvn.w	r4, #15
 800bd8c:	e7ad      	b.n	800bcea <fs_opendir+0x22>
		return -ENOTSUP;
 800bd8e:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800bd92:	e7aa      	b.n	800bcea <fs_opendir+0x22>
 800bd94:	0801c2de 	.word	0x0801c2de
 800bd98:	08019fb0 	.word	0x08019fb0
 800bd9c:	0801c2f7 	.word	0x0801c2f7
 800bda0:	200020e8 	.word	0x200020e8
 800bda4:	0801c285 	.word	0x0801c285
 800bda8:	0801c2f9 	.word	0x0801c2f9

0800bdac <fs_readdir>:
{
 800bdac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (zdp->mp) {
 800bdb0:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 800bdb4:	b087      	sub	sp, #28
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	460f      	mov	r7, r1
	if (zdp->mp) {
 800bdba:	f1b8 0f00 	cmp.w	r8, #0
 800bdbe:	d024      	beq.n	800be0a <fs_readdir+0x5e>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
 800bdc0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800bdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d056      	beq.n	800be78 <fs_readdir+0xcc>
			if ((strcmp(entry->name, ".") != 0)
 800bdca:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be9c <fs_readdir+0xf0>
 800bdce:	1c4d      	adds	r5, r1, #1
			rc = zdp->mp->fs->readdir(zdp, entry);
 800bdd0:	6873      	ldr	r3, [r6, #4]
 800bdd2:	69db      	ldr	r3, [r3, #28]
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	4630      	mov	r0, r6
 800bdda:	4798      	blx	r3
			if (rc < 0) {
 800bddc:	1e04      	subs	r4, r0, #0
 800bdde:	db51      	blt.n	800be84 <fs_readdir+0xd8>
			if (entry->name[0] == 0) {
 800bde0:	787b      	ldrb	r3, [r7, #1]
 800bde2:	b173      	cbz	r3, 800be02 <fs_readdir+0x56>
			if (entry->type != FS_DIR_ENTRY_DIR) {
 800bde4:	783b      	ldrb	r3, [r7, #0]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d10b      	bne.n	800be02 <fs_readdir+0x56>
			if ((strcmp(entry->name, ".") != 0)
 800bdea:	4641      	mov	r1, r8
 800bdec:	4628      	mov	r0, r5
 800bdee:	f7f5 fae0 	bl	80013b2 <strcmp>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d0ec      	beq.n	800bdd0 <fs_readdir+0x24>
			    && (strcmp(entry->name, "..") != 0)) {
 800bdf6:	492a      	ldr	r1, [pc, #168]	; (800bea0 <fs_readdir+0xf4>)
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f7f5 fada 	bl	80013b2 <strcmp>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d0e6      	beq.n	800bdd0 <fs_readdir+0x24>
}
 800be02:	4620      	mov	r0, r4
 800be04:	b007      	add	sp, #28
 800be06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (zdp->dirp == NULL) {
 800be0a:	6804      	ldr	r4, [r0, #0]
 800be0c:	b90c      	cbnz	r4, 800be12 <fs_readdir+0x66>
		entry->name[0] = 0;
 800be0e:	704c      	strb	r4, [r1, #1]
		return 0;
 800be10:	e7f7      	b.n	800be02 <fs_readdir+0x56>
	return list->head == list;
 800be12:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800bea4 <fs_readdir+0xf8>
	k_mutex_lock(&mutex, K_FOREVER);
 800be16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800be1e:	f7ff fe55 	bl	800bacc <k_mutex_lock.constprop.0.isra.0>
 800be22:	f8d9 5000 	ldr.w	r5, [r9]
	return (node == list->tail) ? NULL : node->next;
 800be26:	f8d9 3004 	ldr.w	r3, [r9, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800be2a:	454d      	cmp	r5, r9
 800be2c:	bf08      	it	eq
 800be2e:	2500      	moveq	r5, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 800be30:	b915      	cbnz	r5, 800be38 <fs_readdir+0x8c>
	sys_dnode_t *node, *next = NULL;
 800be32:	46a8      	mov	r8, r5
	bool found = false;
 800be34:	2400      	movs	r4, #0
 800be36:	e014      	b.n	800be62 <fs_readdir+0xb6>
		if (node == zdp->dirp) {
 800be38:	6832      	ldr	r2, [r6, #0]
 800be3a:	4295      	cmp	r5, r2
 800be3c:	d118      	bne.n	800be70 <fs_readdir+0xc4>
			entry->type = FS_DIR_ENTRY_DIR;
 800be3e:	4638      	mov	r0, r7
 800be40:	2401      	movs	r4, #1
 800be42:	f800 4b01 	strb.w	r4, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
 800be46:	68e9      	ldr	r1, [r5, #12]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 800be48:	220c      	movs	r2, #12
 800be4a:	4421      	add	r1, r4
 800be4c:	f00d fb89 	bl	8019562 <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
 800be50:	2300      	movs	r3, #0
 800be52:	737b      	strb	r3, [r7, #13]
			entry->size = 0;
 800be54:	613b      	str	r3, [r7, #16]
	return (node == list->tail) ? NULL : node->next;
 800be56:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800be5a:	429d      	cmp	r5, r3
 800be5c:	d001      	beq.n	800be62 <fs_readdir+0xb6>
 800be5e:	f8d5 8000 	ldr.w	r8, [r5]
	k_mutex_unlock(&mutex);
 800be62:	f7ff fe3b 	bl	800badc <k_mutex_unlock.constprop.0.isra.0>
	if (!found) {
 800be66:	b154      	cbz	r4, 800be7e <fs_readdir+0xd2>
	zdp->dirp = next;
 800be68:	f8c6 8000 	str.w	r8, [r6]
	return 0;
 800be6c:	2400      	movs	r4, #0
 800be6e:	e7c8      	b.n	800be02 <fs_readdir+0x56>
 800be70:	429d      	cmp	r5, r3
 800be72:	d0df      	beq.n	800be34 <fs_readdir+0x88>
 800be74:	682d      	ldr	r5, [r5, #0]
 800be76:	e7db      	b.n	800be30 <fs_readdir+0x84>
			return  -ENOTSUP;
 800be78:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800be7c:	e7c1      	b.n	800be02 <fs_readdir+0x56>
		return -ENOENT;
 800be7e:	f06f 0401 	mvn.w	r4, #1
 800be82:	e7be      	b.n	800be02 <fs_readdir+0x56>
			LOG_ERR("directory read error (%d)", rc);
 800be84:	4b08      	ldr	r3, [pc, #32]	; (800bea8 <fs_readdir+0xfc>)
 800be86:	4809      	ldr	r0, [pc, #36]	; (800beac <fs_readdir+0x100>)
 800be88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be8c:	aa03      	add	r2, sp, #12
 800be8e:	2303      	movs	r3, #3
 800be90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	f00a f80e 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
 800be9a:	e7b2      	b.n	800be02 <fs_readdir+0x56>
 800be9c:	0801c98b 	.word	0x0801c98b
 800bea0:	0801acfb 	.word	0x0801acfb
 800bea4:	200020e8 	.word	0x200020e8
 800bea8:	0801c313 	.word	0x0801c313
 800beac:	08019fb0 	.word	0x08019fb0

0800beb0 <fs_closedir>:
{
 800beb0:	b530      	push	{r4, r5, lr}
	if (zdp->mp == NULL) {
 800beb2:	6844      	ldr	r4, [r0, #4]
{
 800beb4:	b087      	sub	sp, #28
 800beb6:	4605      	mov	r5, r0
	if (zdp->mp == NULL) {
 800beb8:	b91c      	cbnz	r4, 800bec2 <fs_closedir+0x12>
		zdp->dirp = NULL;
 800beba:	6004      	str	r4, [r0, #0]
}
 800bebc:	4620      	mov	r0, r4
 800bebe:	b007      	add	sp, #28
 800bec0:	bd30      	pop	{r4, r5, pc}
	CHECKIF(zdp->mp->fs->closedir == NULL) {
 800bec2:	69e3      	ldr	r3, [r4, #28]
 800bec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec6:	b193      	cbz	r3, 800beee <fs_closedir+0x3e>
	rc = zdp->mp->fs->closedir(zdp);
 800bec8:	4798      	blx	r3
	if (rc < 0) {
 800beca:	1e04      	subs	r4, r0, #0
 800becc:	da0b      	bge.n	800bee6 <fs_closedir+0x36>
		LOG_ERR("directory close error (%d)", rc);
 800bece:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <fs_closedir+0x44>)
 800bed0:	4809      	ldr	r0, [pc, #36]	; (800bef8 <fs_closedir+0x48>)
 800bed2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bed6:	aa03      	add	r2, sp, #12
 800bed8:	2303      	movs	r3, #3
 800beda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bede:	9303      	str	r3, [sp, #12]
 800bee0:	f009 ffe9 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
		return rc;
 800bee4:	e7ea      	b.n	800bebc <fs_closedir+0xc>
	zdp->mp = NULL;
 800bee6:	2300      	movs	r3, #0
	zdp->dirp = NULL;
 800bee8:	e9c5 3300 	strd	r3, r3, [r5]
	return rc;
 800beec:	e7e6      	b.n	800bebc <fs_closedir+0xc>
		return -ENOTSUP;
 800beee:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800bef2:	e7e3      	b.n	800bebc <fs_closedir+0xc>
 800bef4:	0801c32d 	.word	0x0801c32d
 800bef8:	08019fb0 	.word	0x08019fb0

0800befc <fs_mount>:
{
 800befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
 800bf00:	4604      	mov	r4, r0
{
 800bf02:	b08a      	sub	sp, #40	; 0x28
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
 800bf04:	b108      	cbz	r0, 800bf0a <fs_mount+0xe>
 800bf06:	68c0      	ldr	r0, [r0, #12]
 800bf08:	b978      	cbnz	r0, 800bf2a <fs_mount+0x2e>
		LOG_ERR("mount point not initialized!!");
 800bf0a:	4b4a      	ldr	r3, [pc, #296]	; (800c034 <fs_mount+0x138>)
		LOG_ERR("invalid mount point!!");
 800bf0c:	9308      	str	r3, [sp, #32]
 800bf0e:	484a      	ldr	r0, [pc, #296]	; (800c038 <fs_mount+0x13c>)
 800bf10:	2302      	movs	r3, #2
 800bf12:	aa07      	add	r2, sp, #28
 800bf14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 800bf18:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("invalid mount point!!");
 800bf1c:	9307      	str	r3, [sp, #28]
 800bf1e:	f009 ffca 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
}
 800bf22:	4628      	mov	r0, r5
 800bf24:	b00a      	add	sp, #40	; 0x28
 800bf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = strlen(mp->mnt_point);
 800bf2a:	f7f5 fa4c 	bl	80013c6 <strlen>
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 800bf2e:	2801      	cmp	r0, #1
	len = strlen(mp->mnt_point);
 800bf30:	4607      	mov	r7, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 800bf32:	d903      	bls.n	800bf3c <fs_mount+0x40>
 800bf34:	68e3      	ldr	r3, [r4, #12]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b2f      	cmp	r3, #47	; 0x2f
 800bf3a:	d001      	beq.n	800bf40 <fs_mount+0x44>
		LOG_ERR("invalid mount point!!");
 800bf3c:	4b3f      	ldr	r3, [pc, #252]	; (800c03c <fs_mount+0x140>)
 800bf3e:	e7e5      	b.n	800bf0c <fs_mount+0x10>
	return list->head == list;
 800bf40:	4e3f      	ldr	r6, [pc, #252]	; (800c040 <fs_mount+0x144>)
	k_mutex_lock(&mutex, K_FOREVER);
 800bf42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bf4a:	f7ff fdbf 	bl	800bacc <k_mutex_lock.constprop.0.isra.0>
 800bf4e:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bf50:	42b5      	cmp	r5, r6
 800bf52:	d115      	bne.n	800bf80 <fs_mount+0x84>
	fs = fs_type_get(mp->type);
 800bf54:	68a5      	ldr	r5, [r4, #8]
	struct registry_entry *ep = registry_find(type);
 800bf56:	4628      	mov	r0, r5
 800bf58:	f7ff fd82 	bl	800ba60 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 800bf5c:	bb58      	cbnz	r0, 800bfb6 <fs_mount+0xba>
		LOG_ERR("requested file system type not registered!!");
 800bf5e:	4b39      	ldr	r3, [pc, #228]	; (800c044 <fs_mount+0x148>)
 800bf60:	9308      	str	r3, [sp, #32]
 800bf62:	4835      	ldr	r0, [pc, #212]	; (800c038 <fs_mount+0x13c>)
 800bf64:	2302      	movs	r3, #2
 800bf66:	aa07      	add	r2, sp, #28
 800bf68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800bf6c:	9307      	str	r3, [sp, #28]
		rc = -ENOENT;
 800bf6e:	f06f 0501 	mvn.w	r5, #1
		LOG_ERR("requested file system type not registered!!");
 800bf72:	f009 ffa0 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 800bf76:	e01b      	b.n	800bfb0 <fs_mount+0xb4>
	return (node == list->tail) ? NULL : node->next;
 800bf78:	6873      	ldr	r3, [r6, #4]
 800bf7a:	429d      	cmp	r5, r3
 800bf7c:	d0ea      	beq.n	800bf54 <fs_mount+0x58>
 800bf7e:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 800bf80:	2d00      	cmp	r5, #0
 800bf82:	d0e7      	beq.n	800bf54 <fs_mount+0x58>
		if (len != itr->mountp_len) {
 800bf84:	69ab      	ldr	r3, [r5, #24]
 800bf86:	42bb      	cmp	r3, r7
 800bf88:	d1f6      	bne.n	800bf78 <fs_mount+0x7c>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
 800bf8a:	68e9      	ldr	r1, [r5, #12]
 800bf8c:	68e0      	ldr	r0, [r4, #12]
 800bf8e:	463a      	mov	r2, r7
 800bf90:	f00d fad3 	bl	801953a <strncmp>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d1ef      	bne.n	800bf78 <fs_mount+0x7c>
			LOG_ERR("mount point already exists!!");
 800bf98:	4b2b      	ldr	r3, [pc, #172]	; (800c048 <fs_mount+0x14c>)
 800bf9a:	9308      	str	r3, [sp, #32]
 800bf9c:	4826      	ldr	r0, [pc, #152]	; (800c038 <fs_mount+0x13c>)
 800bf9e:	2302      	movs	r3, #2
 800bfa0:	aa07      	add	r2, sp, #28
 800bfa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			rc = -EBUSY;
 800bfa6:	f06f 050f 	mvn.w	r5, #15
			LOG_ERR("mount point already exists!!");
 800bfaa:	9307      	str	r3, [sp, #28]
 800bfac:	f009 ff83 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&mutex);
 800bfb0:	f7ff fd94 	bl	800badc <k_mutex_unlock.constprop.0.isra.0>
	return rc;
 800bfb4:	e7b5      	b.n	800bf22 <fs_mount+0x26>
	return (ep != NULL) ? ep->fstp : NULL;
 800bfb6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (fs == NULL) {
 800bfba:	f1b8 0f00 	cmp.w	r8, #0
 800bfbe:	d0ce      	beq.n	800bf5e <fs_mount+0x62>
	CHECKIF(fs->mount == NULL) {
 800bfc0:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800bfc4:	b96b      	cbnz	r3, 800bfe2 <fs_mount+0xe6>
		LOG_ERR("fs type %d does not support mounting", mp->type);
 800bfc6:	4b21      	ldr	r3, [pc, #132]	; (800c04c <fs_mount+0x150>)
 800bfc8:	481b      	ldr	r0, [pc, #108]	; (800c038 <fs_mount+0x13c>)
 800bfca:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800bfce:	aa07      	add	r2, sp, #28
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bfd6:	9307      	str	r3, [sp, #28]
		rc = -ENOTSUP;
 800bfd8:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("fs type %d does not support mounting", mp->type);
 800bfdc:	f009 ff6b 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 800bfe0:	e7e6      	b.n	800bfb0 <fs_mount+0xb4>
	if (fs->unmount == NULL) {
 800bfe2:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800bfe6:	b953      	cbnz	r3, 800bffe <fs_mount+0x102>
		LOG_WRN("mount path %s is not unmountable",
 800bfe8:	68e2      	ldr	r2, [r4, #12]
 800bfea:	9203      	str	r2, [sp, #12]
 800bfec:	4a18      	ldr	r2, [pc, #96]	; (800c050 <fs_mount+0x154>)
 800bfee:	4912      	ldr	r1, [pc, #72]	; (800c038 <fs_mount+0x13c>)
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bff6:	4618      	mov	r0, r3
 800bff8:	2202      	movs	r2, #2
 800bffa:	f7ff fd47 	bl	800ba8c <z_log_msg2_runtime_create.constprop.0>
	rc = fs->mount(mp);
 800bffe:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800c002:	4620      	mov	r0, r4
 800c004:	4798      	blx	r3
	if (rc < 0) {
 800c006:	1e05      	subs	r5, r0, #0
 800c008:	da0b      	bge.n	800c022 <fs_mount+0x126>
		LOG_ERR("fs mount error (%d)", rc);
 800c00a:	4b12      	ldr	r3, [pc, #72]	; (800c054 <fs_mount+0x158>)
 800c00c:	480a      	ldr	r0, [pc, #40]	; (800c038 <fs_mount+0x13c>)
 800c00e:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800c012:	aa07      	add	r2, sp, #28
 800c014:	2303      	movs	r3, #3
 800c016:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800c01a:	9307      	str	r3, [sp, #28]
 800c01c:	f009 ff4b 	bl	8015eb6 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 800c020:	e7c6      	b.n	800bfb0 <fs_mount+0xb4>
	sys_dnode_t *const tail = list->tail;
 800c022:	6873      	ldr	r3, [r6, #4]
	mp->fs = fs;
 800c024:	e9c4 7806 	strd	r7, r8, [r4, #24]
	node->prev = tail;
 800c028:	e9c4 6300 	strd	r6, r3, [r4]
	tail->next = node;
 800c02c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c02e:	6074      	str	r4, [r6, #4]
	LOG_DBG("fs mounted at %s", log_strdup(mp->mnt_point));
 800c030:	e7be      	b.n	800bfb0 <fs_mount+0xb4>
 800c032:	bf00      	nop
 800c034:	0801c348 	.word	0x0801c348
 800c038:	08019fb0 	.word	0x08019fb0
 800c03c:	0801c366 	.word	0x0801c366
 800c040:	200020e8 	.word	0x200020e8
 800c044:	0801c399 	.word	0x0801c399
 800c048:	0801c37c 	.word	0x0801c37c
 800c04c:	0801c3c5 	.word	0x0801c3c5
 800c050:	0801c250 	.word	0x0801c250
 800c054:	0801c3ea 	.word	0x0801c3ea

0800c058 <fs_register>:
{
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	4604      	mov	r4, r0
 800c05c:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
 800c05e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c062:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c066:	f7ff fd31 	bl	800bacc <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
 800c06a:	4620      	mov	r0, r4
 800c06c:	f7ff fcf8 	bl	800ba60 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 800c070:	b108      	cbz	r0, 800c076 <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
 800c072:	6843      	ldr	r3, [r0, #4]
 800c074:	b97b      	cbnz	r3, 800c096 <fs_register+0x3e>
		if (ep->fstp == NULL) {
 800c076:	4b0b      	ldr	r3, [pc, #44]	; (800c0a4 <fs_register+0x4c>)
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	b112      	cbz	r2, 800c082 <fs_register+0x2a>
 800c07c:	68da      	ldr	r2, [r3, #12]
 800c07e:	b96a      	cbnz	r2, 800c09c <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
 800c080:	2201      	movs	r2, #1
			ep->type = type;
 800c082:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			ep->fstp = fstp;
 800c086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			rv = 0;
 800c08a:	2400      	movs	r4, #0
			ep->fstp = fstp;
 800c08c:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
 800c08e:	f7ff fd25 	bl	800badc <k_mutex_unlock.constprop.0.isra.0>
}
 800c092:	4620      	mov	r0, r4
 800c094:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
 800c096:	f06f 0477 	mvn.w	r4, #119	; 0x77
 800c09a:	e7f8      	b.n	800c08e <fs_register+0x36>
	int rv = -ENOSPC;
 800c09c:	f06f 041b 	mvn.w	r4, #27
 800c0a0:	e7f5      	b.n	800c08e <fs_register+0x36>
 800c0a2:	bf00      	nop
 800c0a4:	20002104 	.word	0x20002104

0800c0a8 <translate_error>:
K_MEM_SLAB_DEFINE(fatfs_filep_pool, sizeof(FIL),
			CONFIG_FS_FATFS_NUM_FILES, 4);

static int translate_error(int error)
{
	switch (error) {
 800c0a8:	2813      	cmp	r0, #19
 800c0aa:	bf9a      	itte	ls
 800c0ac:	4b02      	ldrls	r3, [pc, #8]	; (800c0b8 <translate_error+0x10>)
 800c0ae:	5618      	ldrsbls	r0, [r3, r0]
{
 800c0b0:	f06f 0004 	mvnhi.w	r0, #4
	case FR_NOT_READY:
		return -EIO;
	}

	return -EIO;
}
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	0801c401 	.word	0x0801c401

0800c0bc <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
 800c0bc:	4901      	ldr	r1, [pc, #4]	; (800c0c4 <fatfs_init+0x8>)
 800c0be:	2000      	movs	r0, #0
 800c0c0:	f7ff bfca 	b.w	800c058 <fs_register>
 800c0c4:	0801a530 	.word	0x0801a530

0800c0c8 <fatfs_mount>:
{
 800c0c8:	b530      	push	{r4, r5, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 800c0ca:	68c1      	ldr	r1, [r0, #12]
 800c0cc:	2201      	movs	r2, #1
{
 800c0ce:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800c0d2:	4604      	mov	r4, r0
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 800c0d4:	4411      	add	r1, r2
 800c0d6:	6900      	ldr	r0, [r0, #16]
 800c0d8:	f002 ffe6 	bl	800f0a8 <f_mount>
	if (res == FR_NO_FILESYSTEM &&
 800c0dc:	280d      	cmp	r0, #13
 800c0de:	d119      	bne.n	800c114 <fatfs_mount+0x4c>
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
 800c0e0:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
 800c0e4:	079a      	lsls	r2, r3, #30
 800c0e6:	d422      	bmi.n	800c12e <fatfs_mount+0x66>
	if (res == FR_NO_FILESYSTEM &&
 800c0e8:	07db      	lsls	r3, r3, #31
 800c0ea:	d41a      	bmi.n	800c122 <fatfs_mount+0x5a>
		MKFS_PARM mkfs_opt = {
 800c0ec:	4b12      	ldr	r3, [pc, #72]	; (800c138 <fatfs_mount+0x70>)
 800c0ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c0f0:	466d      	mov	r5, sp
 800c0f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(&mountp->mnt_point[1], &mkfs_opt, work, sizeof(work));
 800c0f6:	68e0      	ldr	r0, [r4, #12]
 800c0f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0fc:	aa04      	add	r2, sp, #16
 800c0fe:	4629      	mov	r1, r5
 800c100:	3001      	adds	r0, #1
 800c102:	f002 fff5 	bl	800f0f0 <f_mkfs>
		if (res == FR_OK) {
 800c106:	b960      	cbnz	r0, 800c122 <fatfs_mount+0x5a>
					&mountp->mnt_point[1], 1);
 800c108:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
 800c10a:	6920      	ldr	r0, [r4, #16]
 800c10c:	2201      	movs	r2, #1
 800c10e:	4411      	add	r1, r2
 800c110:	f002 ffca 	bl	800f0a8 <f_mount>
	if (res == FR_OK) {
 800c114:	b928      	cbnz	r0, 800c122 <fatfs_mount+0x5a>
		mountp->flags |= FS_MOUNT_FLAG_USE_DISK_ACCESS;
 800c116:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c11a:	f043 0308 	orr.w	r3, r3, #8
 800c11e:	f884 3020 	strb.w	r3, [r4, #32]
}
 800c122:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800c126:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 800c12a:	f7ff bfbd 	b.w	800c0a8 <translate_error>
}
 800c12e:	f06f 001d 	mvn.w	r0, #29
 800c132:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800c136:	bd30      	pop	{r4, r5, pc}
 800c138:	0801a114 	.word	0x0801a114

0800c13c <fatfs_closedir>:
{
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4604      	mov	r4, r0
	res = f_closedir(zdp->dirp);
 800c140:	6800      	ldr	r0, [r0, #0]
 800c142:	f00c faa4 	bl	801868e <f_closedir>
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 800c146:	4621      	mov	r1, r4
	res = f_closedir(zdp->dirp);
 800c148:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 800c14a:	4804      	ldr	r0, [pc, #16]	; (800c15c <fatfs_closedir+0x20>)
 800c14c:	f00c fe33 	bl	8018db6 <k_mem_slab_free>
	return translate_error(res);
 800c150:	4628      	mov	r0, r5
}
 800c152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
 800c156:	f7ff bfa7 	b.w	800c0a8 <translate_error>
 800c15a:	bf00      	nop
 800c15c:	20000348 	.word	0x20000348

0800c160 <fatfs_close>:
{
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
 800c164:	6800      	ldr	r0, [r0, #0]
 800c166:	f00c f9cf 	bl	8018508 <f_close>
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 800c16a:	4621      	mov	r1, r4
	res = f_close(zfp->filep);
 800c16c:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 800c16e:	4805      	ldr	r0, [pc, #20]	; (800c184 <fatfs_close+0x24>)
 800c170:	f00c fe21 	bl	8018db6 <k_mem_slab_free>
	zfp->filep = NULL;
 800c174:	2300      	movs	r3, #0
 800c176:	6023      	str	r3, [r4, #0]
	return translate_error(res);
 800c178:	4628      	mov	r0, r5
}
 800c17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
 800c17e:	f7ff bf93 	b.w	800c0a8 <translate_error>
 800c182:	bf00      	nop
 800c184:	20000364 	.word	0x20000364

0800c188 <fatfs_opendir>:
{
 800c188:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 800c18a:	2200      	movs	r2, #0
{
 800c18c:	4606      	mov	r6, r0
 800c18e:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 800c190:	4810      	ldr	r0, [pc, #64]	; (800c1d4 <fatfs_opendir+0x4c>)
 800c192:	2300      	movs	r3, #0
 800c194:	a901      	add	r1, sp, #4
 800c196:	f003 fe7d 	bl	800fe94 <k_mem_slab_alloc>
 800c19a:	4604      	mov	r4, r0
 800c19c:	b9b0      	cbnz	r0, 800c1cc <fatfs_opendir+0x44>
__ssp_bos_icheck3(memset, void *, int)
 800c19e:	4601      	mov	r1, r0
 800c1a0:	222c      	movs	r2, #44	; 0x2c
 800c1a2:	9801      	ldr	r0, [sp, #4]
 800c1a4:	f00d f98e 	bl	80194c4 <memset>
		zdp->dirp = ptr;
 800c1a8:	9801      	ldr	r0, [sp, #4]
 800c1aa:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
 800c1ac:	1c69      	adds	r1, r5, #1
 800c1ae:	f00c fa3b 	bl	8018628 <f_opendir>
	if (res != FR_OK) {
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	b120      	cbz	r0, 800c1c0 <fatfs_opendir+0x38>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
 800c1b6:	4807      	ldr	r0, [pc, #28]	; (800c1d4 <fatfs_opendir+0x4c>)
 800c1b8:	a901      	add	r1, sp, #4
 800c1ba:	f00c fdfc 	bl	8018db6 <k_mem_slab_free>
		zdp->dirp = NULL;
 800c1be:	6034      	str	r4, [r6, #0]
	return translate_error(res);
 800c1c0:	4628      	mov	r0, r5
}
 800c1c2:	b002      	add	sp, #8
 800c1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return translate_error(res);
 800c1c8:	f7ff bf6e 	b.w	800c0a8 <translate_error>
}
 800c1cc:	f06f 000b 	mvn.w	r0, #11
 800c1d0:	b002      	add	sp, #8
 800c1d2:	bd70      	pop	{r4, r5, r6, pc}
 800c1d4:	20000348 	.word	0x20000348

0800c1d8 <fatfs_open>:
{
 800c1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 800c1da:	2300      	movs	r3, #0
{
 800c1dc:	4606      	mov	r6, r0
 800c1de:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 800c1e0:	4812      	ldr	r0, [pc, #72]	; (800c22c <fatfs_open+0x54>)
{
 800c1e2:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 800c1e4:	a901      	add	r1, sp, #4
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f003 fe54 	bl	800fe94 <k_mem_slab_alloc>
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	b9c0      	cbnz	r0, 800c222 <fatfs_open+0x4a>
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	2228      	movs	r2, #40	; 0x28
 800c1f4:	9801      	ldr	r0, [sp, #4]
 800c1f6:	f00d f965 	bl	80194c4 <memset>
		zfp->filep = ptr;
 800c1fa:	9801      	ldr	r0, [sp, #4]
 800c1fc:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
 800c1fe:	1c69      	adds	r1, r5, #1
 800c200:	f007 0213 	and.w	r2, r7, #19
 800c204:	f00b ff22 	bl	801804c <f_open>
	if (res != FR_OK) {
 800c208:	4605      	mov	r5, r0
 800c20a:	b120      	cbz	r0, 800c216 <fatfs_open+0x3e>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
 800c20c:	4807      	ldr	r0, [pc, #28]	; (800c22c <fatfs_open+0x54>)
 800c20e:	a901      	add	r1, sp, #4
 800c210:	f00c fdd1 	bl	8018db6 <k_mem_slab_free>
		zfp->filep = NULL;
 800c214:	6034      	str	r4, [r6, #0]
	return translate_error(res);
 800c216:	4628      	mov	r0, r5
}
 800c218:	b003      	add	sp, #12
 800c21a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return translate_error(res);
 800c21e:	f7ff bf43 	b.w	800c0a8 <translate_error>
}
 800c222:	f06f 000b 	mvn.w	r0, #11
 800c226:	b003      	add	sp, #12
 800c228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000364 	.word	0x20000364

0800c230 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 800c230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  *         @arg @ref LL_EXTI_LINE_22
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800c234:	4f0d      	ldr	r7, [pc, #52]	; (800c26c <__stm32_exti_isr.isra.0+0x3c>)
 800c236:	4604      	mov	r4, r0
 800c238:	460e      	mov	r6, r1
 800c23a:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800c23c:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800c240:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 800c244:	42b4      	cmp	r4, r6
 800c246:	db01      	blt.n	800c24c <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 800c248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24c:	68fa      	ldr	r2, [r7, #12]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800c24e:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800c252:	ea33 0202 	bics.w	r2, r3, r2
 800c256:	d107      	bne.n	800c268 <__stm32_exti_isr.isra.0+0x38>
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800c258:	60fb      	str	r3, [r7, #12]
			if (!data->cb[line].cb) {
 800c25a:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800c25e:	b11b      	cbz	r3, 800c268 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800c260:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 800c264:	4620      	mov	r0, r4
 800c266:	4798      	blx	r3
	for (line = min; line < max; line++) {
 800c268:	3401      	adds	r4, #1
 800c26a:	e7eb      	b.n	800c244 <__stm32_exti_isr.isra.0+0x14>
 800c26c:	58000800 	.word	0x58000800

0800c270 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 800c270:	4a05      	ldr	r2, [pc, #20]	; (800c288 <stm32_exti_enable+0x18>)
	LL_EXTI_EnableIT_0_31(1 << line);
 800c272:	2301      	movs	r3, #1
 800c274:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 800c278:	4083      	lsls	r3, r0
 800c27a:	430b      	orrs	r3, r1
 800c27c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	irq_enable(irqnum);
 800c280:	4b02      	ldr	r3, [pc, #8]	; (800c28c <stm32_exti_enable+0x1c>)
 800c282:	5618      	ldrsb	r0, [r3, r0]
 800c284:	f7f8 bce2 	b.w	8004c4c <arch_irq_enable>
 800c288:	58000800 	.word	0x58000800
 800c28c:	0801c433 	.word	0x0801c433

0800c290 <stm32_exti_disable>:
	if (line < 32) {
 800c290:	281f      	cmp	r0, #31
 800c292:	dc09      	bgt.n	800c2a8 <stm32_exti_disable+0x18>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800c294:	4905      	ldr	r1, [pc, #20]	; (800c2ac <stm32_exti_disable+0x1c>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800c296:	2201      	movs	r2, #1
 800c298:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800c29c:	fa02 f000 	lsl.w	r0, r2, r0
 800c2a0:	ea23 0000 	bic.w	r0, r3, r0
 800c2a4:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
}
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	58000800 	.word	0x58000800

0800c2b0 <stm32_exti_trigger>:
	switch (trigger) {
 800c2b0:	2903      	cmp	r1, #3
 800c2b2:	d80f      	bhi.n	800c2d4 <stm32_exti_trigger+0x24>
 800c2b4:	e8df f001 	tbb	[pc, r1]
 800c2b8:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c2bc:	4b15      	ldr	r3, [pc, #84]	; (800c314 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800c2be:	2201      	movs	r2, #1
 800c2c0:	6819      	ldr	r1, [r3, #0]
 800c2c2:	fa02 f000 	lsl.w	r0, r2, r0
 800c2c6:	ea21 0100 	bic.w	r1, r1, r0
 800c2ca:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c2d2:	6058      	str	r0, [r3, #4]
}
 800c2d4:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c2dc:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <stm32_exti_trigger+0x64>)
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	4302      	orrs	r2, r0
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	e7f2      	b.n	800c2cc <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c2ec:	4b09      	ldr	r3, [pc, #36]	; (800c314 <stm32_exti_trigger+0x64>)
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	4302      	orrs	r2, r0
 800c2f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	ea22 0000 	bic.w	r0, r2, r0
 800c2fa:	6018      	str	r0, [r3, #0]
}
 800c2fc:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800c2fe:	2301      	movs	r3, #1
 800c300:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c304:	4b03      	ldr	r3, [pc, #12]	; (800c314 <stm32_exti_trigger+0x64>)
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	4302      	orrs	r2, r0
 800c30a:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	4310      	orrs	r0, r2
 800c310:	e7df      	b.n	800c2d2 <stm32_exti_trigger+0x22>
 800c312:	bf00      	nop
 800c314:	58000800 	.word	0x58000800

0800c318 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 800c318:	4b07      	ldr	r3, [pc, #28]	; (800c338 <stm32_exti_set_callback+0x20>)
{
 800c31a:	b510      	push	{r4, lr}
 800c31c:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 800c31e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 800c322:	b928      	cbnz	r0, 800c330 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800c324:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 800c328:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c32c:	605a      	str	r2, [r3, #4]

	return 0;
}
 800c32e:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800c330:	f06f 000f 	mvn.w	r0, #15
 800c334:	e7fb      	b.n	800c32e <stm32_exti_set_callback+0x16>
 800c336:	bf00      	nop
 800c338:	20002114 	.word	0x20002114

0800c33c <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 800c33c:	4b03      	ldr	r3, [pc, #12]	; (800c34c <stm32_exti_unset_callback+0x10>)
 800c33e:	2200      	movs	r2, #0
 800c340:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800c344:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800c348:	605a      	str	r2, [r3, #4]
}
 800c34a:	4770      	bx	lr
 800c34c:	20002114 	.word	0x20002114

0800c350 <disk_spi_sdhc_access_ioctl>:
	return err;
}

static int disk_spi_sdhc_access_ioctl(struct disk_info *disk,
	uint8_t cmd, void *buf)
{
 800c350:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = disk->dev;
	struct sdhc_spi_data *data = dev->data;
 800c352:	6903      	ldr	r3, [r0, #16]
}

/* Converts disk status into an error code */
static inline int sdhc_map_disk_status(int status)
{
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 800c354:	480c      	ldr	r0, [pc, #48]	; (800c388 <disk_spi_sdhc_access_ioctl+0x38>)
 800c356:	691e      	ldr	r6, [r3, #16]
{
 800c358:	460c      	mov	r4, r1
 800c35a:	7c31      	ldrb	r1, [r6, #16]
 800c35c:	4615      	mov	r5, r2
 800c35e:	f009 ff10 	bl	8016182 <sdhc_map_flags>
	int err;

	err = sdhc_map_disk_status(data->status);
	if (err != 0) {
 800c362:	b948      	cbnz	r0, 800c378 <disk_spi_sdhc_access_ioctl+0x28>
		return err;
	}

	switch (cmd) {
 800c364:	1e61      	subs	r1, r4, #1
 800c366:	2904      	cmp	r1, #4
 800c368:	d80a      	bhi.n	800c380 <disk_spi_sdhc_access_ioctl+0x30>
 800c36a:	e8df f001 	tbb	[pc, r1]
 800c36e:	0603      	.short	0x0603
 800c370:	0609      	.short	0x0609
 800c372:	05          	.byte	0x05
 800c373:	00          	.byte	0x00
	case DISK_IOCTL_CTRL_SYNC:
		break;
	case DISK_IOCTL_GET_SECTOR_COUNT:
		*(uint32_t *)buf = data->sector_count;
 800c374:	68f3      	ldr	r3, [r6, #12]
		break;
	case DISK_IOCTL_GET_SECTOR_SIZE:
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
 800c376:	602b      	str	r3, [r5, #0]
	default:
		return -EINVAL;
	}

	return 0;
}
 800c378:	bd70      	pop	{r4, r5, r6, pc}
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
 800c37a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c37e:	e7fa      	b.n	800c376 <disk_spi_sdhc_access_ioctl+0x26>
		return -EINVAL;
 800c380:	f06f 0015 	mvn.w	r0, #21
 800c384:	e7f8      	b.n	800c378 <disk_spi_sdhc_access_ioctl+0x28>
 800c386:	bf00      	nop
 800c388:	0801c4e4 	.word	0x0801c4e4

0800c38c <sdhc_map_r1_idle_status>:
}

/* Converts an early stage idle mode R1 code into an error code */
static inline int sdhc_map_r1_idle_status(int status)
{
	if (status < 0) {
 800c38c:	2800      	cmp	r0, #0
 800c38e:	db06      	blt.n	800c39e <sdhc_map_r1_idle_status+0x12>
		return status;
	}

	if (status == SDHC_R1_IDLE) {
 800c390:	2801      	cmp	r0, #1
 800c392:	d003      	beq.n	800c39c <sdhc_map_r1_idle_status+0x10>
	return sdhc_map_flags(sdhc_r1_flags, status);
 800c394:	4601      	mov	r1, r0
 800c396:	4802      	ldr	r0, [pc, #8]	; (800c3a0 <sdhc_map_r1_idle_status+0x14>)
 800c398:	f009 bef3 	b.w	8016182 <sdhc_map_flags>
		return 0;
 800c39c:	2000      	movs	r0, #0
	}

	return sdhc_map_r1_status(status);
}
 800c39e:	4770      	bx	lr
 800c3a0:	0801c52c 	.word	0x0801c52c

0800c3a4 <sdhc_spi_rx_bytes>:
{
 800c3a4:	b500      	push	{lr}
	struct spi_buf tx_bufs[] = {
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <sdhc_spi_rx_bytes+0x30>)
{
 800c3a8:	b089      	sub	sp, #36	; 0x24
	struct spi_buf tx_bufs[] = {
 800c3aa:	e9cd 3200 	strd	r3, r2, [sp]
	struct spi_buf rx_bufs[] = {
 800c3ae:	9205      	str	r2, [sp, #20]
	const struct spi_buf_set tx = {
 800c3b0:	2301      	movs	r3, #1
	const struct spi_buf_set rx = {
 800c3b2:	aa04      	add	r2, sp, #16
	struct spi_buf rx_bufs[] = {
 800c3b4:	e9cd 3103 	strd	r3, r1, [sp, #12]
	const struct spi_buf_set rx = {
 800c3b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
	return sdhc_spi_trace(data, -1,
 800c3bc:	e9d0 0100 	ldrd	r0, r1, [r0]
 800c3c0:	ab06      	add	r3, sp, #24
 800c3c2:	aa02      	add	r2, sp, #8
	const struct spi_buf_set tx = {
 800c3c4:	f8cd d008 	str.w	sp, [sp, #8]
	return sdhc_spi_trace(data, -1,
 800c3c8:	f009 fee7 	bl	801619a <spi_transceive.constprop.0>
}
 800c3cc:	b009      	add	sp, #36	; 0x24
 800c3ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3d2:	bf00      	nop
 800c3d4:	0801c4ec 	.word	0x0801c4ec

0800c3d8 <sdhc_spi_init>:
{
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4604      	mov	r4, r0
	struct sdhc_spi_data *data = dev->data;
 800c3dc:	6905      	ldr	r5, [r0, #16]
 800c3de:	4807      	ldr	r0, [pc, #28]	; (800c3fc <sdhc_spi_init+0x24>)
 800c3e0:	f003 fbc0 	bl	800fb64 <z_impl_device_get_binding>
	struct sdhc_spi_data *data = dev->data;
 800c3e4:	6923      	ldr	r3, [r4, #16]
	data->spi = device_get_binding(DT_BUS_LABEL(SPI_SDHC_NODE));
 800c3e6:	6028      	str	r0, [r5, #0]
	const struct sdhc_spi_config *cfg = dev->config;
 800c3e8:	6862      	ldr	r2, [r4, #4]

static int disk_spi_sdhc_init(const struct device *dev)
{
	sdhc_spi_set_status(dev, DISK_STATUS_UNINIT);

	spi_sdhc_disk.dev = dev;
 800c3ea:	4805      	ldr	r0, [pc, #20]	; (800c400 <sdhc_spi_init+0x28>)
		data->spi_cfg = &cfg->init_cfg;
 800c3ec:	605a      	str	r2, [r3, #4]
	data->status = status;
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	7419      	strb	r1, [r3, #16]
	spi_sdhc_disk.dev = dev;
 800c3f2:	6104      	str	r4, [r0, #16]

	return disk_access_register(&spi_sdhc_disk);
 800c3f4:	f7f8 fb7e 	bl	8004af4 <disk_access_register>
}
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	0801c443 	.word	0x0801c443
 800c400:	200000a0 	.word	0x200000a0

0800c404 <sdhc_spi_cmd_r1_raw>:
{
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	4605      	mov	r5, r0
 800c408:	460e      	mov	r6, r1
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 800c40a:	f009 fedc 	bl	80161c6 <sdhc_spi_tx_cmd>
	if (err != 0) {
 800c40e:	4604      	mov	r4, r0
 800c410:	b968      	cbnz	r0, 800c42e <sdhc_spi_cmd_r1_raw+0x2a>
	err = sdhc_spi_skip_until_start(data);
 800c412:	4628      	mov	r0, r5
 800c414:	f009 ff3c 	bl	8016290 <sdhc_spi_skip_until_start>
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
 800c418:	2e19      	cmp	r6, #25
	err = sdhc_spi_skip_until_start(data);
 800c41a:	4604      	mov	r4, r0
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
 800c41c:	d804      	bhi.n	800c428 <sdhc_spi_cmd_r1_raw+0x24>
 800c41e:	4905      	ldr	r1, [pc, #20]	; (800c434 <sdhc_spi_cmd_r1_raw+0x30>)
 800c420:	fa21 f606 	lsr.w	r6, r1, r6
 800c424:	07f3      	lsls	r3, r6, #31
 800c426:	d402      	bmi.n	800c42e <sdhc_spi_cmd_r1_raw+0x2a>
		sdhc_spi_rx_u8(data);
 800c428:	4628      	mov	r0, r5
 800c42a:	f009 feee 	bl	801620a <sdhc_spi_rx_u8>
}
 800c42e:	4620      	mov	r0, r4
 800c430:	bd70      	pop	{r4, r5, r6, pc}
 800c432:	bf00      	nop
 800c434:	03060600 	.word	0x03060600

0800c438 <sdhc_spi_rx_block>:
{
 800c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43c:	b08d      	sub	sp, #52	; 0x34
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 800c43e:	f10d 0910 	add.w	r9, sp, #16
{
 800c442:	4605      	mov	r5, r0
 800c444:	4688      	mov	r8, r1
 800c446:	4616      	mov	r6, r2
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 800c448:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c44c:	2200      	movs	r2, #0
 800c44e:	4648      	mov	r0, r9
 800c450:	f009 ff0e 	bl	8016270 <sdhc_retry_init>
		err = sdhc_spi_rx_u8(data);
 800c454:	4628      	mov	r0, r5
 800c456:	f009 fed8 	bl	801620a <sdhc_spi_rx_u8>
		if (err != discard) {
 800c45a:	28ff      	cmp	r0, #255	; 0xff
		err = sdhc_spi_rx_u8(data);
 800c45c:	4604      	mov	r4, r0
		if (err != discard) {
 800c45e:	d116      	bne.n	800c48e <sdhc_spi_rx_block+0x56>
	} while (sdhc_retry_ok(&retry));
 800c460:	4648      	mov	r0, r9
 800c462:	f009 fee5 	bl	8016230 <sdhc_retry_ok>
 800c466:	4603      	mov	r3, r0
 800c468:	2800      	cmp	r0, #0
 800c46a:	d1f3      	bne.n	800c454 <sdhc_spi_rx_block+0x1c>
	LOG_WRN("Timeout while waiting for !%d", discard);
 800c46c:	4a26      	ldr	r2, [pc, #152]	; (800c508 <sdhc_spi_rx_block+0xd0>)
 800c46e:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 800c472:	2203      	movs	r2, #3
 800c474:	9209      	str	r2, [sp, #36]	; 0x24
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800c476:	4825      	ldr	r0, [pc, #148]	; (800c50c <sdhc_spi_rx_block+0xd4>)
 800c478:	aa09      	add	r2, sp, #36	; 0x24
 800c47a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
	return -ETIMEDOUT;
 800c47e:	f06f 0473 	mvn.w	r4, #115	; 0x73
 800c482:	f007 fea6 	bl	80141d2 <z_impl_z_log_msg2_static_create>
}
 800c486:	4620      	mov	r0, r4
 800c488:	b00d      	add	sp, #52	; 0x34
 800c48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (token < 0) {
 800c48e:	2800      	cmp	r0, #0
 800c490:	dbf9      	blt.n	800c486 <sdhc_spi_rx_block+0x4e>
	if (token != SDHC_TOKEN_SINGLE) {
 800c492:	28fe      	cmp	r0, #254	; 0xfe
 800c494:	d135      	bne.n	800c502 <sdhc_spi_rx_block+0xca>
		struct spi_buf tx_bufs[] = {
 800c496:	f8df b078 	ldr.w	fp, [pc, #120]	; 800c510 <sdhc_spi_rx_block+0xd8>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
 800c49a:	2700      	movs	r7, #0
		const struct spi_buf_set tx = {
 800c49c:	f04f 0a01 	mov.w	sl, #1
		int remain = MIN(sizeof(sdhc_ones), len - i);
 800c4a0:	1bf3      	subs	r3, r6, r7
 800c4a2:	2b40      	cmp	r3, #64	; 0x40
 800c4a4:	bf28      	it	cs
 800c4a6:	2340      	movcs	r3, #64	; 0x40
		struct spi_buf rx_bufs[] = {
 800c4a8:	eb08 0207 	add.w	r2, r8, r7
 800c4ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
		struct spi_buf tx_bufs[] = {
 800c4b0:	e9cd b300 	strd	fp, r3, [sp]
		err = sdhc_spi_trace(data, -1,
 800c4b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c4b8:	ab06      	add	r3, sp, #24
 800c4ba:	aa02      	add	r2, sp, #8
		const struct spi_buf_set rx = {
 800c4bc:	e9cd 9a06 	strd	r9, sl, [sp, #24]
		const struct spi_buf_set tx = {
 800c4c0:	f8cd d008 	str.w	sp, [sp, #8]
 800c4c4:	f8cd a00c 	str.w	sl, [sp, #12]
		err = sdhc_spi_trace(data, -1,
 800c4c8:	f009 fe67 	bl	801619a <spi_transceive.constprop.0>
		if (err != 0) {
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d1d9      	bne.n	800c486 <sdhc_spi_rx_block+0x4e>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
 800c4d2:	3740      	adds	r7, #64	; 0x40
 800c4d4:	42be      	cmp	r6, r7
 800c4d6:	dce3      	bgt.n	800c4a0 <sdhc_spi_rx_block+0x68>
	err = sdhc_spi_rx_bytes(data, crc, sizeof(crc));
 800c4d8:	2203      	movs	r2, #3
 800c4da:	a906      	add	r1, sp, #24
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f7ff ff61 	bl	800c3a4 <sdhc_spi_rx_bytes>
	if (err != 0) {
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d1ce      	bne.n	800c486 <sdhc_spi_rx_block+0x4e>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
	return ((uint16_t)src[0] << 8) | src[1];
 800c4e8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (sys_get_be16(crc) != crc16_itu_t(0, buf, len)) {
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	4641      	mov	r1, r8
 800c4f0:	f007 faa8 	bl	8013a44 <crc16_itu_t>
 800c4f4:	ba6d      	rev16	r5, r5
 800c4f6:	b2ad      	uxth	r5, r5
		return -EILSEQ;
 800c4f8:	42a8      	cmp	r0, r5
 800c4fa:	bf18      	it	ne
 800c4fc:	f06f 0489 	mvnne.w	r4, #137	; 0x89
 800c500:	e7c1      	b.n	800c486 <sdhc_spi_rx_block+0x4e>
		return -EIO;
 800c502:	f06f 0404 	mvn.w	r4, #4
 800c506:	e7be      	b.n	800c486 <sdhc_spi_rx_block+0x4e>
 800c508:	0801c449 	.word	0x0801c449
 800c50c:	0801a010 	.word	0x0801a010
 800c510:	0801c4ec 	.word	0x0801c4ec

0800c514 <sdhc_spi_cmd_r1>:
{
 800c514:	b508      	push	{r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800c516:	f7ff ff75 	bl	800c404 <sdhc_spi_cmd_r1_raw>
}
 800c51a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800c51e:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
 800c520:	4801      	ldr	r0, [pc, #4]	; (800c528 <sdhc_spi_cmd_r1+0x14>)
 800c522:	f009 be2e 	b.w	8016182 <sdhc_map_flags>
 800c526:	bf00      	nop
 800c528:	0801c52c 	.word	0x0801c52c

0800c52c <disk_spi_sdhc_access_init>:
{
 800c52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c530:	b093      	sub	sp, #76	; 0x4c
	const struct device *dev = disk->dev;
 800c532:	f8d0 8010 	ldr.w	r8, [r0, #16]
	sdhc_spi_tx(data, sdhc_ones, 10);
 800c536:	4da3      	ldr	r5, [pc, #652]	; (800c7c4 <disk_spi_sdhc_access_init+0x298>)
	struct sdhc_spi_data *data = dev->data;
 800c538:	f8d8 4010 	ldr.w	r4, [r8, #16]
	const struct sdhc_spi_config *cfg = dev->config;
 800c53c:	f8d8 3004 	ldr.w	r3, [r8, #4]
		data->spi_cfg = &cfg->init_cfg;
 800c540:	6063      	str	r3, [r4, #4]
{
 800c542:	af00      	add	r7, sp, #0
	data->status = status;
 800c544:	2201      	movs	r2, #1
 800c546:	7422      	strb	r2, [r4, #16]
	sdhc_retry_init(&retry, SDHC_INIT_TIMEOUT, SDHC_RETRY_DELAY);
 800c548:	f241 3188 	movw	r1, #5000	; 0x1388
 800c54c:	2214      	movs	r2, #20
 800c54e:	f107 0018 	add.w	r0, r7, #24
 800c552:	f009 fe8d 	bl	8016270 <sdhc_retry_init>
	sdhc_spi_tx(data, sdhc_ones, 10);
 800c556:	220a      	movs	r2, #10
 800c558:	4629      	mov	r1, r5
 800c55a:	4620      	mov	r0, r4
 800c55c:	f009 fe23 	bl	80161a6 <sdhc_spi_tx>
	spi_release(data->spi, data->spi_cfg);
 800c560:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c564:	f009 fe5c 	bl	8016220 <spi_release.isra.0>
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800c568:	2200      	movs	r2, #0
 800c56a:	4611      	mov	r1, r2
 800c56c:	4620      	mov	r0, r4
 800c56e:	f7ff ff49 	bl	800c404 <sdhc_spi_cmd_r1_raw>
 800c572:	f7ff ff0b 	bl	800c38c <sdhc_map_r1_idle_status>
		if (err == 0) {
 800c576:	bb58      	cbnz	r0, 800c5d0 <disk_spi_sdhc_access_init+0xa4>
	return sdhc_map_r1_idle_status(
 800c578:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c57c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c580:	2108      	movs	r1, #8
 800c582:	4620      	mov	r0, r4
 800c584:	f009 fe9c 	bl	80162c0 <sdhc_spi_cmd_r37_raw>
 800c588:	f7ff ff00 	bl	800c38c <sdhc_map_r1_idle_status>
	if (err != 0) {
 800c58c:	4605      	mov	r5, r0
 800c58e:	b950      	cbnz	r0, 800c5a6 <disk_spi_sdhc_access_init+0x7a>
	if ((cond & 0xFF) != SDHC_CHECK) {
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	b2da      	uxtb	r2, r3
 800c594:	2aaa      	cmp	r2, #170	; 0xaa
 800c596:	d118      	bne.n	800c5ca <disk_spi_sdhc_access_init+0x9e>
	if ((cond & SDHC_VHS_MASK) != SDHC_VHS_3V3) {
 800c598:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
		return -ENOTSUP;
 800c59c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5a0:	bf18      	it	ne
 800c5a2:	f06f 0585 	mvnne.w	r5, #133	; 0x85
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	213b      	movs	r1, #59	; 0x3b
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f7ff ff2a 	bl	800c404 <sdhc_spi_cmd_r1_raw>
 800c5b0:	f7ff feec 	bl	800c38c <sdhc_map_r1_idle_status>
	if (err != 0) {
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	b1a0      	cbz	r0, 800c5e2 <disk_spi_sdhc_access_init+0xb6>
	spi_release(data->spi, data->spi_cfg);
 800c5b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c5bc:	f009 fe30 	bl	8016220 <spi_release.isra.0>
}
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	374c      	adds	r7, #76	; 0x4c
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
 800c5ca:	f06f 0501 	mvn.w	r5, #1
 800c5ce:	e7ea      	b.n	800c5a6 <disk_spi_sdhc_access_init+0x7a>
		if (!sdhc_retry_ok(&retry)) {
 800c5d0:	f107 0018 	add.w	r0, r7, #24
 800c5d4:	f009 fe2c 	bl	8016230 <sdhc_retry_ok>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d1bc      	bne.n	800c556 <disk_spi_sdhc_access_init+0x2a>
			return -ENOENT;
 800c5dc:	f06f 0601 	mvn.w	r6, #1
 800c5e0:	e7ea      	b.n	800c5b8 <disk_spi_sdhc_access_init+0x8c>
 800c5e2:	2d00      	cmp	r5, #0
 800c5e4:	bf0c      	ite	eq
 800c5e6:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 800c5ea:	2600      	movne	r6, #0
		sdhc_spi_cmd_r1_raw(data, SDHC_APP_CMD, 0);
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2137      	movs	r1, #55	; 0x37
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f7ff ff07 	bl	800c404 <sdhc_spi_cmd_r1_raw>
		err = sdhc_spi_cmd_r1(data, SDHC_SEND_OP_COND, is_v2 ? SDHC_HCS : 0);
 800c5f6:	4632      	mov	r2, r6
 800c5f8:	2129      	movs	r1, #41	; 0x29
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7ff ff8a 	bl	800c514 <sdhc_spi_cmd_r1>
		if (err == 0) {
 800c600:	2800      	cmp	r0, #0
 800c602:	f000 80d8 	beq.w	800c7b6 <disk_spi_sdhc_access_init+0x28a>
	} while (sdhc_retry_ok(&retry));
 800c606:	f107 0018 	add.w	r0, r7, #24
 800c60a:	f009 fe11 	bl	8016230 <sdhc_retry_ok>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d1ec      	bne.n	800c5ec <disk_spi_sdhc_access_init+0xc0>
		return -ETIMEDOUT;
 800c612:	f06f 0673 	mvn.w	r6, #115	; 0x73
 800c616:	e7cf      	b.n	800c5b8 <disk_spi_sdhc_access_init+0x8c>
		} while (sdhc_retry_ok(&retry));
 800c618:	f107 0018 	add.w	r0, r7, #24
 800c61c:	f009 fe08 	bl	8016230 <sdhc_retry_ok>
 800c620:	b180      	cbz	r0, 800c644 <disk_spi_sdhc_access_init+0x118>
	return sdhc_map_r1_status(
 800c622:	f107 0314 	add.w	r3, r7, #20
 800c626:	2200      	movs	r2, #0
 800c628:	213a      	movs	r1, #58	; 0x3a
 800c62a:	4620      	mov	r0, r4
 800c62c:	f009 fe48 	bl	80162c0 <sdhc_spi_cmd_r37_raw>
 800c630:	4601      	mov	r1, r0
 800c632:	4628      	mov	r0, r5
 800c634:	f009 fda5 	bl	8016182 <sdhc_map_flags>
			if (err != 0) {
 800c638:	4606      	mov	r6, r0
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d1bc      	bne.n	800c5b8 <disk_spi_sdhc_access_init+0x8c>
			if ((ocr & SDHC_BUSY) != 0U) {
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	2b00      	cmp	r3, #0
 800c642:	dae9      	bge.n	800c618 <disk_spi_sdhc_access_init+0xec>
	if ((ocr & SDHC_CCS) != 0U) {
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	d40a      	bmi.n	800c660 <disk_spi_sdhc_access_init+0x134>
		data->high_capacity = false;
 800c64a:	2300      	movs	r3, #0
 800c64c:	7223      	strb	r3, [r4, #8]
		err = sdhc_spi_cmd_r1(data, SDHC_SET_BLOCK_SIZE, SDMMC_DEFAULT_BLOCK_SIZE);
 800c64e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c652:	2110      	movs	r1, #16
 800c654:	4620      	mov	r0, r4
 800c656:	f7ff ff5d 	bl	800c514 <sdhc_spi_cmd_r1>
		if (err != 0) {
 800c65a:	4606      	mov	r6, r0
 800c65c:	b110      	cbz	r0, 800c664 <disk_spi_sdhc_access_init+0x138>
 800c65e:	e7ab      	b.n	800c5b8 <disk_spi_sdhc_access_init+0x8c>
		data->high_capacity = true;
 800c660:	2301      	movs	r3, #1
 800c662:	7223      	strb	r3, [r4, #8]
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CSD, 0);
 800c664:	2200      	movs	r2, #0
 800c666:	2109      	movs	r1, #9
 800c668:	4620      	mov	r0, r4
 800c66a:	f7ff ff53 	bl	800c514 <sdhc_spi_cmd_r1>
	if (err != 0) {
 800c66e:	4606      	mov	r6, r0
 800c670:	2800      	cmp	r0, #0
 800c672:	d1a1      	bne.n	800c5b8 <disk_spi_sdhc_access_init+0x8c>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
 800c674:	2210      	movs	r2, #16
 800c676:	f107 0120 	add.w	r1, r7, #32
 800c67a:	4620      	mov	r0, r4
 800c67c:	f7ff fedc 	bl	800c438 <sdhc_spi_rx_block>
	if (err != 0) {
 800c680:	4606      	mov	r6, r0
 800c682:	2800      	cmp	r0, #0
 800c684:	d198      	bne.n	800c5b8 <disk_spi_sdhc_access_init+0x8c>
	structure = (buf[0] >> 6);
 800c686:	f897 3020 	ldrb.w	r3, [r7, #32]
	switch (structure) {
 800c68a:	099b      	lsrs	r3, r3, #6
 800c68c:	d005      	beq.n	800c69a <disk_spi_sdhc_access_init+0x16e>
 800c68e:	2b01      	cmp	r3, #1
 800c690:	f000 8082 	beq.w	800c798 <disk_spi_sdhc_access_init+0x26c>
			return -ENOTSUP;
 800c694:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800c698:	e78e      	b.n	800c5b8 <disk_spi_sdhc_access_init+0x8c>
		readbllen = buf[5] & ((1 << 4) - 1);
 800c69a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c69e:	f003 030f 	and.w	r3, r3, #15
		if ((readbllen < 9) || (readbllen > 11)) {
 800c6a2:	f1a3 0209 	sub.w	r2, r3, #9
 800c6a6:	2a02      	cmp	r2, #2
 800c6a8:	d8f4      	bhi.n	800c694 <disk_spi_sdhc_access_init+0x168>
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
 800c6aa:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800c6ae:	f009 fd54 	bl	801615a <sys_get_be32>
		csizemult = (uint8_t) ((sys_get_be16(&buf[9]) >> 7) & ((1 << 3) - 1));
 800c6b2:	f8b7 2029 	ldrh.w	r2, [r7, #41]	; 0x29
 800c6b6:	ba52      	rev16	r2, r2
 800c6b8:	f3c2 12c2 	ubfx	r2, r2, #7, #3
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
 800c6bc:	f3c0 308b 	ubfx	r0, r0, #14, #12
		data->sector_count = ((csize + 1) << (csizemult + 2 + readbllen - 9));
 800c6c0:	4413      	add	r3, r2
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	3b07      	subs	r3, #7
 800c6c6:	fa00 f303 	lsl.w	r3, r0, r3
 800c6ca:	60e3      	str	r3, [r4, #12]
	LOG_INF("Found a ~%u MiB SDHC card.",
 800c6cc:	68e3      	ldr	r3, [r4, #12]
 800c6ce:	4a3e      	ldr	r2, [pc, #248]	; (800c7c8 <disk_spi_sdhc_access_init+0x29c>)
 800c6d0:	0adb      	lsrs	r3, r3, #11
 800c6d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800c6d6:	2303      	movs	r3, #3
 800c6d8:	46e9      	mov	r9, sp
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6dc:	483b      	ldr	r0, [pc, #236]	; (800c7cc <disk_spi_sdhc_access_init+0x2a0>)
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c6e4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800c6e8:	f007 fd73 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CID, 0);
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	210a      	movs	r1, #10
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f7ff ff0f 	bl	800c514 <sdhc_spi_cmd_r1>
	if (err != 0) {
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f47f af5d 	bne.w	800c5b8 <disk_spi_sdhc_access_init+0x8c>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
 800c6fe:	2210      	movs	r2, #16
 800c700:	f107 0120 	add.w	r1, r7, #32
 800c704:	4620      	mov	r0, r4
 800c706:	f7ff fe97 	bl	800c438 <sdhc_spi_rx_block>
	if (err != 0) {
 800c70a:	4606      	mov	r6, r0
 800c70c:	2800      	cmp	r0, #0
 800c70e:	f47f af53 	bne.w	800c5b8 <disk_spi_sdhc_access_init+0x8c>
	LOG_INF("Manufacturer ID=%d OEM='%c%c' Name='%c%c%c%c%c' "
 800c712:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c71c:	60bb      	str	r3, [r7, #8]
 800c71e:	f107 0029 	add.w	r0, r7, #41	; 0x29
 800c722:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c726:	607b      	str	r3, [r7, #4]
 800c728:	f897 b020 	ldrb.w	fp, [r7, #32]
 800c72c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c730:	f897 5026 	ldrb.w	r5, [r7, #38]	; 0x26
 800c734:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c738:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800c73c:	f897 a021 	ldrb.w	sl, [r7, #33]	; 0x21
 800c740:	f009 fd0b 	bl	801615a <sys_get_be32>
 800c744:	f8df e088 	ldr.w	lr, [pc, #136]	; 800c7d0 <disk_spi_sdhc_access_init+0x2a4>
 800c748:	b090      	sub	sp, #64	; 0x40
 800c74a:	46ec      	mov	ip, sp
 800c74c:	e9cc eb04 	strd	lr, fp, [ip, #16]
 800c750:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800c754:	f8cc e01c 	str.w	lr, [ip, #28]
 800c758:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800c75c:	f8cc a018 	str.w	sl, [ip, #24]
 800c760:	e9cc e208 	strd	lr, r2, [ip, #32]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
 800c76a:	e9cc 250a 	strd	r2, r5, [ip, #40]	; 0x28
 800c76e:	4662      	mov	r2, ip
 800c770:	e9cc 130c 	strd	r1, r3, [ip, #48]	; 0x30
 800c774:	230c      	movs	r3, #12
 800c776:	f842 3f0c 	str.w	r3, [r2, #12]!
 800c77a:	4814      	ldr	r0, [pc, #80]	; (800c7cc <disk_spi_sdhc_access_init+0x2a0>)
 800c77c:	4633      	mov	r3, r6
 800c77e:	f246 01c0 	movw	r1, #24768	; 0x60c0
 800c782:	f007 fd26 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	const struct sdhc_spi_config *cfg = dev->config;
 800c786:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct sdhc_spi_data *data = dev->data;
 800c78a:	f8d8 2010 	ldr.w	r2, [r8, #16]
		data->spi_cfg = &cfg->oper_cfg;
 800c78e:	330c      	adds	r3, #12
 800c790:	46cd      	mov	sp, r9
	data->status = status;
 800c792:	7416      	strb	r6, [r2, #16]
		data->spi_cfg = &cfg->oper_cfg;
 800c794:	6053      	str	r3, [r2, #4]
	return 0;
 800c796:	e70f      	b.n	800c5b8 <disk_spi_sdhc_access_init+0x8c>
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
 800c798:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800c79c:	f009 fcdd 	bl	801615a <sys_get_be32>
		if (csize < 4112) {
 800c7a0:	f241 030f 	movw	r3, #4111	; 0x100f
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
 800c7a4:	f3c0 0015 	ubfx	r0, r0, #0, #22
		if (csize < 4112) {
 800c7a8:	4298      	cmp	r0, r3
 800c7aa:	f67f af73 	bls.w	800c694 <disk_spi_sdhc_access_init+0x168>
		data->sector_count = (csize + 1) *
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	0280      	lsls	r0, r0, #10
 800c7b2:	60e0      	str	r0, [r4, #12]
		break;
 800c7b4:	e78a      	b.n	800c6cc <disk_spi_sdhc_access_init+0x1a0>
	ocr = 0;
 800c7b6:	6178      	str	r0, [r7, #20]
	if (is_v2) {
 800c7b8:	2d00      	cmp	r5, #0
 800c7ba:	f47f af46 	bne.w	800c64a <disk_spi_sdhc_access_init+0x11e>
 800c7be:	4d05      	ldr	r5, [pc, #20]	; (800c7d4 <disk_spi_sdhc_access_init+0x2a8>)
 800c7c0:	e72f      	b.n	800c622 <disk_spi_sdhc_access_init+0xf6>
 800c7c2:	bf00      	nop
 800c7c4:	0801c4ec 	.word	0x0801c4ec
 800c7c8:	0801c467 	.word	0x0801c467
 800c7cc:	0801a010 	.word	0x0801a010
 800c7d0:	0801c482 	.word	0x0801c482
 800c7d4:	0801c52c 	.word	0x0801c52c

0800c7d8 <sdhc_spi_read>:
{
 800c7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7dc:	4605      	mov	r5, r0
 800c7de:	460f      	mov	r7, r1
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 800c7e0:	7c01      	ldrb	r1, [r0, #16]
 800c7e2:	4818      	ldr	r0, [pc, #96]	; (800c844 <sdhc_spi_read+0x6c>)
 800c7e4:	4690      	mov	r8, r2
 800c7e6:	461e      	mov	r6, r3
 800c7e8:	f009 fccb 	bl	8016182 <sdhc_map_flags>
	if (err != 0) {
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	b970      	cbnz	r0, 800c80e <sdhc_spi_read+0x36>
	if (data->high_capacity) {
 800c7f0:	7a2b      	ldrb	r3, [r5, #8]
 800c7f2:	b90b      	cbnz	r3, 800c7f8 <sdhc_spi_read+0x20>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800c7f4:	ea4f 2848 	mov.w	r8, r8, lsl #9
	err = sdhc_spi_cmd_r1(data, SDHC_READ_MULTIPLE_BLOCK, addr);
 800c7f8:	4642      	mov	r2, r8
 800c7fa:	2112      	movs	r1, #18
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f7ff fe89 	bl	800c514 <sdhc_spi_cmd_r1>
	if (err != 0) {
 800c802:	4604      	mov	r4, r0
 800c804:	b190      	cbz	r0, 800c82c <sdhc_spi_read+0x54>
	spi_release(data->spi, data->spi_cfg);
 800c806:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c80a:	f009 fd09 	bl	8016220 <spi_release.isra.0>
}
 800c80e:	4620      	mov	r0, r4
 800c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sdhc_spi_rx_block(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
 800c814:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c818:	4639      	mov	r1, r7
 800c81a:	4628      	mov	r0, r5
 800c81c:	f7ff fe0c 	bl	800c438 <sdhc_spi_rx_block>
		if (err != 0) {
 800c820:	4604      	mov	r4, r0
 800c822:	2800      	cmp	r0, #0
 800c824:	d1ef      	bne.n	800c806 <sdhc_spi_read+0x2e>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800c826:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
 800c82a:	3e01      	subs	r6, #1
 800c82c:	2e00      	cmp	r6, #0
 800c82e:	d1f1      	bne.n	800c814 <sdhc_spi_read+0x3c>
	sdhc_spi_cmd_r1(data, SDHC_STOP_TRANSMISSION, 0);
 800c830:	4632      	mov	r2, r6
 800c832:	210c      	movs	r1, #12
 800c834:	4628      	mov	r0, r5
 800c836:	f7ff fe6d 	bl	800c514 <sdhc_spi_cmd_r1>
	err = sdhc_spi_skip_until_ready(data);
 800c83a:	4628      	mov	r0, r5
 800c83c:	f009 fd5f 	bl	80162fe <sdhc_spi_skip_until_ready>
 800c840:	4604      	mov	r4, r0
 800c842:	e7e0      	b.n	800c806 <sdhc_spi_read+0x2e>
 800c844:	0801c4e4 	.word	0x0801c4e4

0800c848 <sdhc_spi_write>:
{
 800c848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	4605      	mov	r5, r0
 800c84e:	460f      	mov	r7, r1
 800c850:	7c01      	ldrb	r1, [r0, #16]
 800c852:	483d      	ldr	r0, [pc, #244]	; (800c948 <sdhc_spi_write+0x100>)
 800c854:	4616      	mov	r6, r2
 800c856:	4698      	mov	r8, r3
 800c858:	f009 fc93 	bl	8016182 <sdhc_map_flags>
	if (err != 0) {
 800c85c:	b960      	cbnz	r0, 800c878 <sdhc_spi_write+0x30>

/* Converts the data block response flags into an error code */
static inline int sdhc_map_data_status(int status)
{
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800c85e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800c94c <sdhc_spi_write+0x104>
	return sdhc_map_flags(sdhc_r1_flags, status);
 800c862:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800c950 <sdhc_spi_write+0x108>
 800c866:	44b0      	add	r8, r6
	for (; count != 0U; count--) {
 800c868:	4546      	cmp	r6, r8
 800c86a:	d108      	bne.n	800c87e <sdhc_spi_write+0x36>
	err = 0;
 800c86c:	2400      	movs	r4, #0
	spi_release(data->spi, data->spi_cfg);
 800c86e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c872:	f009 fcd5 	bl	8016220 <spi_release.isra.0>
 800c876:	4620      	mov	r0, r4
}
 800c878:	b003      	add	sp, #12
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (data->high_capacity) {
 800c87e:	7a2b      	ldrb	r3, [r5, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d15c      	bne.n	800c93e <sdhc_spi_write+0xf6>
			addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800c884:	0272      	lsls	r2, r6, #9
		err = sdhc_spi_cmd_r1(data, SDHC_WRITE_BLOCK, addr);
 800c886:	2118      	movs	r1, #24
 800c888:	4628      	mov	r0, r5
 800c88a:	f7ff fe43 	bl	800c514 <sdhc_spi_cmd_r1>
		if (err < 0) {
 800c88e:	1e04      	subs	r4, r0, #0
 800c890:	dbed      	blt.n	800c86e <sdhc_spi_write+0x26>
	buf[0] = SDHC_TOKEN_SINGLE;
 800c892:	23fe      	movs	r3, #254	; 0xfe
	err = sdhc_spi_tx(data, buf, 1);
 800c894:	2201      	movs	r2, #1
 800c896:	a901      	add	r1, sp, #4
 800c898:	4628      	mov	r0, r5
	buf[0] = SDHC_TOKEN_SINGLE;
 800c89a:	f88d 3004 	strb.w	r3, [sp, #4]
	err = sdhc_spi_tx(data, buf, 1);
 800c89e:	f009 fc82 	bl	80161a6 <sdhc_spi_tx>
	if (err != 0) {
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d1e2      	bne.n	800c86e <sdhc_spi_write+0x26>
	err = sdhc_spi_tx(data, send, len);
 800c8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	f009 fc79 	bl	80161a6 <sdhc_spi_tx>
	if (err != 0) {
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d1d9      	bne.n	800c86e <sdhc_spi_write+0x26>
	sys_put_be16(crc16_itu_t(0, send, len), buf);
 800c8ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f007 f8c0 	bl	8013a44 <crc16_itu_t>
	err = sdhc_spi_tx(data, buf, sizeof(buf));
 800c8c4:	2202      	movs	r2, #2
	dst[0] = val >> 8;
 800c8c6:	0a03      	lsrs	r3, r0, #8
	dst[1] = val;
 800c8c8:	f88d 0005 	strb.w	r0, [sp, #5]
 800c8cc:	a901      	add	r1, sp, #4
 800c8ce:	4628      	mov	r0, r5
	dst[0] = val >> 8;
 800c8d0:	f88d 3004 	strb.w	r3, [sp, #4]
 800c8d4:	f009 fc67 	bl	80161a6 <sdhc_spi_tx>
	if (err != 0) {
 800c8d8:	4604      	mov	r4, r0
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d1c7      	bne.n	800c86e <sdhc_spi_write+0x26>
	return sdhc_map_data_status(sdhc_spi_rx_u8(data));
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f009 fc93 	bl	801620a <sdhc_spi_rx_u8>
 800c8e4:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800c8e6:	4648      	mov	r0, r9
 800c8e8:	f009 fc4b 	bl	8016182 <sdhc_map_flags>
		if (err != 0) {
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d1bd      	bne.n	800c86e <sdhc_spi_write+0x26>
		err = sdhc_spi_skip_until_ready(data);
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f009 fd03 	bl	80162fe <sdhc_spi_skip_until_ready>
		if (err != 0) {
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d1b7      	bne.n	800c86e <sdhc_spi_write+0x26>
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 800c8fe:	4602      	mov	r2, r0
 800c900:	210d      	movs	r1, #13
 800c902:	4628      	mov	r0, r5
 800c904:	f009 fc5f 	bl	80161c6 <sdhc_spi_tx_cmd>
	if (err != 0) {
 800c908:	4604      	mov	r4, r0
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d1af      	bne.n	800c86e <sdhc_spi_write+0x26>
	r1 = sdhc_map_r1_status(sdhc_spi_skip_until_start(data));
 800c90e:	4628      	mov	r0, r5
 800c910:	f009 fcbe 	bl	8016290 <sdhc_spi_skip_until_start>
 800c914:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
 800c916:	4650      	mov	r0, sl
 800c918:	f009 fc33 	bl	8016182 <sdhc_map_flags>
 800c91c:	4683      	mov	fp, r0
	r2 = sdhc_spi_rx_u8(data);
 800c91e:	4628      	mov	r0, r5
 800c920:	f009 fc73 	bl	801620a <sdhc_spi_rx_u8>
 800c924:	4604      	mov	r4, r0
	sdhc_spi_rx_u8(data);
 800c926:	4628      	mov	r0, r5
 800c928:	f009 fc6f 	bl	801620a <sdhc_spi_rx_u8>
	if (r1 < 0) {
 800c92c:	f1bb 0f00 	cmp.w	fp, #0
 800c930:	db07      	blt.n	800c942 <sdhc_spi_write+0xfa>
		if (err != 0) {
 800c932:	2c00      	cmp	r4, #0
 800c934:	d19b      	bne.n	800c86e <sdhc_spi_write+0x26>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800c936:	f507 7700 	add.w	r7, r7, #512	; 0x200
		sector++;
 800c93a:	3601      	adds	r6, #1
	for (; count != 0U; count--) {
 800c93c:	e794      	b.n	800c868 <sdhc_spi_write+0x20>
 800c93e:	4632      	mov	r2, r6
 800c940:	e7a1      	b.n	800c886 <sdhc_spi_write+0x3e>
 800c942:	465c      	mov	r4, fp
 800c944:	e793      	b.n	800c86e <sdhc_spi_write+0x26>
 800c946:	bf00      	nop
 800c948:	0801c4e4 	.word	0x0801c4e4
 800c94c:	0801c4dc 	.word	0x0801c4dc
 800c950:	0801c52c 	.word	0x0801c52c

0800c954 <sdhc_spi_write_multi>:
{
 800c954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c958:	4605      	mov	r5, r0
 800c95a:	460f      	mov	r7, r1
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 800c95c:	7c01      	ldrb	r1, [r0, #16]
 800c95e:	4830      	ldr	r0, [pc, #192]	; (800ca20 <sdhc_spi_write_multi+0xcc>)
 800c960:	4690      	mov	r8, r2
 800c962:	461e      	mov	r6, r3
 800c964:	f009 fc0d 	bl	8016182 <sdhc_map_flags>
	if (err != 0) {
 800c968:	4604      	mov	r4, r0
 800c96a:	b9e0      	cbnz	r0, 800c9a6 <sdhc_spi_write_multi+0x52>
	if (data->high_capacity) {
 800c96c:	7a2b      	ldrb	r3, [r5, #8]
 800c96e:	b90b      	cbnz	r3, 800c974 <sdhc_spi_write_multi+0x20>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800c970:	ea4f 2848 	mov.w	r8, r8, lsl #9
	err = sdhc_spi_cmd_r1(data, SDHC_WRITE_MULTIPLE_BLOCK, addr);
 800c974:	4642      	mov	r2, r8
 800c976:	2119      	movs	r1, #25
 800c978:	4628      	mov	r0, r5
 800c97a:	f7ff fdcb 	bl	800c514 <sdhc_spi_cmd_r1>
	if (err < 0) {
 800c97e:	1e04      	subs	r4, r0, #0
 800c980:	db0d      	blt.n	800c99e <sdhc_spi_write_multi+0x4a>
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800c982:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800ca24 <sdhc_spi_write_multi+0xd0>
		block[0] = SDHC_TOKEN_MULTI_WRITE;
 800c986:	f04f 08fc 	mov.w	r8, #252	; 0xfc
	for (; count != 0U; count--) {
 800c98a:	b986      	cbnz	r6, 800c9ae <sdhc_spi_write_multi+0x5a>
	sdhc_spi_tx_cmd(data, SDHC_STOP_TRANSMISSION, 0);
 800c98c:	4632      	mov	r2, r6
 800c98e:	210c      	movs	r1, #12
 800c990:	4628      	mov	r0, r5
 800c992:	f009 fc18 	bl	80161c6 <sdhc_spi_tx_cmd>
	err = sdhc_spi_skip_until_ready(data);
 800c996:	4628      	mov	r0, r5
 800c998:	f009 fcb1 	bl	80162fe <sdhc_spi_skip_until_ready>
 800c99c:	4604      	mov	r4, r0
	spi_release(data->spi, data->spi_cfg);
 800c99e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c9a2:	f009 fc3d 	bl	8016220 <spi_release.isra.0>
}
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	b003      	add	sp, #12
 800c9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sdhc_spi_tx(data, block, 1);
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	a901      	add	r1, sp, #4
 800c9b2:	4628      	mov	r0, r5
		block[0] = SDHC_TOKEN_MULTI_WRITE;
 800c9b4:	f88d 8004 	strb.w	r8, [sp, #4]
		err = sdhc_spi_tx(data, block, 1);
 800c9b8:	f009 fbf5 	bl	80161a6 <sdhc_spi_tx>
		if (err != 0) {
 800c9bc:	4604      	mov	r4, r0
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d1ed      	bne.n	800c99e <sdhc_spi_write_multi+0x4a>
		err = sdhc_spi_tx(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
 800c9c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f009 fbec 	bl	80161a6 <sdhc_spi_tx>
		if (err != 0) {
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d1e4      	bne.n	800c99e <sdhc_spi_write_multi+0x4a>
		sys_put_be16(crc16_itu_t(0, buf, SDMMC_DEFAULT_BLOCK_SIZE),
 800c9d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9d8:	4639      	mov	r1, r7
 800c9da:	f007 f833 	bl	8013a44 <crc16_itu_t>
		err = sdhc_spi_tx(data, block, sizeof(block));
 800c9de:	2202      	movs	r2, #2
 800c9e0:	0a03      	lsrs	r3, r0, #8
	dst[1] = val;
 800c9e2:	f88d 0005 	strb.w	r0, [sp, #5]
 800c9e6:	a901      	add	r1, sp, #4
 800c9e8:	4628      	mov	r0, r5
	dst[0] = val >> 8;
 800c9ea:	f88d 3004 	strb.w	r3, [sp, #4]
 800c9ee:	f009 fbda 	bl	80161a6 <sdhc_spi_tx>
		if (err != 0) {
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d1d2      	bne.n	800c99e <sdhc_spi_write_multi+0x4a>
		err = sdhc_map_data_status(sdhc_spi_rx_u8(data));
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	f009 fc06 	bl	801620a <sdhc_spi_rx_u8>
 800c9fe:	4601      	mov	r1, r0
 800ca00:	4648      	mov	r0, r9
 800ca02:	f009 fbbe 	bl	8016182 <sdhc_map_flags>
		if (err != 0) {
 800ca06:	4604      	mov	r4, r0
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d1c8      	bne.n	800c99e <sdhc_spi_write_multi+0x4a>
		err = sdhc_spi_skip_until_ready(data);
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	f009 fc76 	bl	80162fe <sdhc_spi_skip_until_ready>
		if (err != 0) {
 800ca12:	4604      	mov	r4, r0
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d1c2      	bne.n	800c99e <sdhc_spi_write_multi+0x4a>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800ca18:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
 800ca1c:	3e01      	subs	r6, #1
 800ca1e:	e7b4      	b.n	800c98a <sdhc_spi_write_multi+0x36>
 800ca20:	0801c4e4 	.word	0x0801c4e4
 800ca24:	0801c4dc 	.word	0x0801c4dc

0800ca28 <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800ca28:	6809      	ldr	r1, [r1, #0]
 800ca2a:	290a      	cmp	r1, #10
 800ca2c:	d80a      	bhi.n	800ca44 <stm32_clock_control_get_subsys_rate+0x1c>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	408b      	lsls	r3, r1
 800ca32:	f240 415f 	movw	r1, #1119	; 0x45f
 800ca36:	420b      	tst	r3, r1
 800ca38:	d004      	beq.n	800ca44 <stm32_clock_control_get_subsys_rate+0x1c>
	uint32_t ahb_clock = SystemCoreClock;
 800ca3a:	4b04      	ldr	r3, [pc, #16]	; (800ca4c <stm32_clock_control_get_subsys_rate+0x24>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
#endif
#if defined(CONFIG_SOC_SERIES_STM32WLX)
	case STM32_CLOCK_BUS_AHB3:
	case STM32_CLOCK_BUS_APB3:
		/* AHB3 and APB3 share the same clock and prescaler. */
		*rate = ahb3_clock;
 800ca3e:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800ca40:	2000      	movs	r0, #0
		break;
 800ca42:	4770      	bx	lr
	switch (pclken->bus) {
 800ca44:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	2000022c 	.word	0x2000022c

0800ca50 <rtc_stm32_cancel_alarm>:
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800ca50:	4b0a      	ldr	r3, [pc, #40]	; (800ca7c <rtc_stm32_cancel_alarm+0x2c>)
}


static int rtc_stm32_cancel_alarm(const struct device *dev, uint8_t chan_id)
{
	struct rtc_stm32_data *data = dev->data;
 800ca52:	6901      	ldr	r1, [r0, #16]
 800ca54:	22ca      	movs	r2, #202	; 0xca
 800ca56:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800ca58:	2253      	movs	r2, #83	; 0x53
 800ca5a:	625a      	str	r2, [r3, #36]	; 0x24
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALRA(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	65da      	str	r2, [r3, #92]	; 0x5c
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableIT_ALRA(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800ca60:	699a      	ldr	r2, [r3, #24]
 800ca62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca66:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800ca68:	699a      	ldr	r2, [r3, #24]
 800ca6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca6e:	619a      	str	r2, [r3, #24]
	LL_RTC_ClearFlag_ALRA(RTC);
	LL_RTC_DisableIT_ALRA(RTC);
	LL_RTC_ALMA_Disable(RTC);
	LL_RTC_EnableWriteProtection(RTC);

	data->callback = NULL;
 800ca70:	2000      	movs	r0, #0
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800ca72:	22ff      	movs	r2, #255	; 0xff
 800ca74:	625a      	str	r2, [r3, #36]	; 0x24
 800ca76:	6008      	str	r0, [r1, #0]

	return 0;
}
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	40002800 	.word	0x40002800

0800ca80 <rtc_stm32_get_pending_int>:
  return ((READ_BIT(RTCx->SR, RTC_SR_ALRAF) == (RTC_SR_ALRAF)) ? 1U : 0U);
 800ca80:	4b02      	ldr	r3, [pc, #8]	; (800ca8c <rtc_stm32_get_pending_int+0xc>)
 800ca82:	6d18      	ldr	r0, [r3, #80]	; 0x50


static uint32_t rtc_stm32_get_pending_int(const struct device *dev)
{
	return LL_RTC_IsActiveFlag_ALRA(RTC) != 0;
}
 800ca84:	f000 0001 	and.w	r0, r0, #1
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	40002800 	.word	0x40002800

0800ca90 <rtc_stm32_read>:
{
 800ca90:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct tm now = { 0 };
 800ca92:	2500      	movs	r5, #0
{
 800ca94:	b08b      	sub	sp, #44	; 0x2c
	struct tm now = { 0 };
 800ca96:	e9cd 5507 	strd	r5, r5, [sp, #28]
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800ca9a:	4b31      	ldr	r3, [pc, #196]	; (800cb60 <rtc_stm32_read+0xd0>)
 800ca9c:	9509      	str	r5, [sp, #36]	; 0x24
 800ca9e:	6819      	ldr	r1, [r3, #0]
  temp = READ_BIT(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU));
 800caa0:	685b      	ldr	r3, [r3, #4]
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800caa2:	4a30      	ldr	r2, [pc, #192]	; (800cb64 <rtc_stm32_read+0xd4>)
                    ((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos)));
 800caa4:	f3c3 5403 	ubfx	r4, r3, #20, #4
{
 800caa8:	4606      	mov	r6, r0
			__LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_YEAR(rtc_date));
 800caaa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800caae:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800cab2:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800cab6:	b2c0      	uxtb	r0, r0
	now.tm_year = 100 +
 800cab8:	3064      	adds	r0, #100	; 0x64
 800caba:	9006      	str	r0, [sp, #24]
	now.tm_mon = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MONTH(rtc_date)) - 1;
 800cabc:	f3c3 3000 	ubfx	r0, r3, #12, #1
 800cac0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800cac4:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800cac8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800cacc:	3801      	subs	r0, #1
 800cace:	9005      	str	r0, [sp, #20]
	now.tm_mday = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_DAY(rtc_date));
 800cad0:	f3c3 1001 	ubfx	r0, r3, #4, #2
 800cad4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cad8:	f003 030f 	and.w	r3, r3, #15
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800cadc:	400a      	ands	r2, r1
 800cade:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800cae2:	9304      	str	r3, [sp, #16]
	now.tm_hour = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_HOUR(rtc_time));
 800cae4:	0d13      	lsrs	r3, r2, #20
 800cae6:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800caea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800caee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800caf2:	9303      	str	r3, [sp, #12]
	now.tm_min = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MINUTE(rtc_time));
 800caf4:	f3c2 3302 	ubfx	r3, r2, #12, #3
 800caf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cafc:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800cb00:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 800cb04:	f3c1 1302 	ubfx	r3, r1, #4, #3
 800cb08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cb0c:	f001 010f 	and.w	r1, r1, #15
 800cb10:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	ts = timeutil_timegm(&now);
 800cb14:	a801      	add	r0, sp, #4
	now.tm_min = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MINUTE(rtc_time));
 800cb16:	9202      	str	r2, [sp, #8]
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 800cb18:	9101      	str	r1, [sp, #4]
	ts = timeutil_timegm(&now);
 800cb1a:	f007 f829 	bl	8013b70 <timeutil_timegm>
 800cb1e:	4604      	mov	r4, r0
 800cb20:	460f      	mov	r7, r1
	uint64_t ticks = (us * z_impl_counter_get_frequency(dev)) / USEC_PER_SEC;
 800cb22:	4630      	mov	r0, r6
 800cb24:	f009 fd57 	bl	80165d6 <z_impl_counter_get_frequency>
	ts -= T_TIME_OFFSET;
 800cb28:	490f      	ldr	r1, [pc, #60]	; (800cb68 <rtc_stm32_read+0xd8>)
	ticks = counter_us_to_ticks(dev, ts * USEC_PER_SEC);
 800cb2a:	4b10      	ldr	r3, [pc, #64]	; (800cb6c <rtc_stm32_read+0xdc>)
 800cb2c:	4a0f      	ldr	r2, [pc, #60]	; (800cb6c <rtc_stm32_read+0xdc>)
	ts -= T_TIME_OFFSET;
 800cb2e:	1864      	adds	r4, r4, r1
 800cb30:	f167 0700 	sbc.w	r7, r7, #0
	ticks = counter_us_to_ticks(dev, ts * USEC_PER_SEC);
 800cb34:	fba4 4103 	umull	r4, r1, r4, r3
 800cb38:	4606      	mov	r6, r0
 800cb3a:	fb03 1107 	mla	r1, r3, r7, r1
 800cb3e:	fba4 0400 	umull	r0, r4, r4, r0
 800cb42:	2300      	movs	r3, #0
 800cb44:	fb06 4101 	mla	r1, r6, r1, r4
 800cb48:	f7f4 fa3e 	bl	8000fc8 <__aeabi_uldivmod>
	return (ticks > (uint64_t)UINT32_MAX) ? UINT32_MAX : ticks;
 800cb4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb50:	4282      	cmp	r2, r0
 800cb52:	eb75 0301 	sbcs.w	r3, r5, r1
 800cb56:	bf38      	it	cc
 800cb58:	4610      	movcc	r0, r2
}
 800cb5a:	b00b      	add	sp, #44	; 0x2c
 800cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	40002800 	.word	0x40002800
 800cb64:	003f7f7f 	.word	0x003f7f7f
 800cb68:	c792bc80 	.word	0xc792bc80
 800cb6c:	000f4240 	.word	0x000f4240

0800cb70 <rtc_stm32_isr>:


}

void rtc_stm32_isr(const struct device *dev)
{
 800cb70:	b570      	push	{r4, r5, r6, lr}
	struct rtc_stm32_data *data = dev->data;
 800cb72:	6905      	ldr	r5, [r0, #16]
{
 800cb74:	4604      	mov	r4, r0
	counter_alarm_callback_t alarm_callback = data->callback;
 800cb76:	682e      	ldr	r6, [r5, #0]

	uint32_t now = rtc_stm32_read(dev);
 800cb78:	f7ff ff8a 	bl	800ca90 <rtc_stm32_read>
  return ((READ_BIT(RTCx->SR, RTC_SR_ALRAF) == (RTC_SR_ALRAF)) ? 1U : 0U);
 800cb7c:	4b0f      	ldr	r3, [pc, #60]	; (800cbbc <rtc_stm32_isr+0x4c>)
 800cb7e:	6d19      	ldr	r1, [r3, #80]	; 0x50

	if (LL_RTC_IsActiveFlag_ALRA(RTC) != 0) {
 800cb80:	07c9      	lsls	r1, r1, #31
	uint32_t now = rtc_stm32_read(dev);
 800cb82:	4602      	mov	r2, r0
	if (LL_RTC_IsActiveFlag_ALRA(RTC) != 0) {
 800cb84:	d515      	bpl.n	800cbb2 <rtc_stm32_isr+0x42>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800cb86:	21ca      	movs	r1, #202	; 0xca
 800cb88:	6259      	str	r1, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800cb8a:	2153      	movs	r1, #83	; 0x53
 800cb8c:	6259      	str	r1, [r3, #36]	; 0x24
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800cb8e:	2101      	movs	r1, #1
 800cb90:	65d9      	str	r1, [r3, #92]	; 0x5c
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800cb92:	6999      	ldr	r1, [r3, #24]
 800cb94:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800cb98:	6199      	str	r1, [r3, #24]
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800cb9a:	6999      	ldr	r1, [r3, #24]
 800cb9c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800cba0:	6199      	str	r1, [r3, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800cba2:	21ff      	movs	r1, #255	; 0xff
 800cba4:	6259      	str	r1, [r3, #36]	; 0x24
		LL_RTC_ClearFlag_ALRA(RTC);
		LL_RTC_DisableIT_ALRA(RTC);
		LL_RTC_ALMA_Disable(RTC);
		LL_RTC_EnableWriteProtection(RTC);

		if (alarm_callback != NULL) {
 800cba6:	b126      	cbz	r6, 800cbb2 <rtc_stm32_isr+0x42>
			data->callback = NULL;
 800cba8:	2100      	movs	r1, #0
			alarm_callback(dev, 0, now, data->user_data);
 800cbaa:	68ab      	ldr	r3, [r5, #8]
			data->callback = NULL;
 800cbac:	6029      	str	r1, [r5, #0]
			alarm_callback(dev, 0, now, data->user_data);
 800cbae:	4620      	mov	r0, r4
 800cbb0:	47b0      	blx	r6
  WRITE_REG(EXTI->PR1, ExtiLine);
 800cbb2:	4b03      	ldr	r3, [pc, #12]	; (800cbc0 <rtc_stm32_isr+0x50>)
 800cbb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cbb8:	60da      	str	r2, [r3, #12]
#elif defined(CONFIG_SOC_SERIES_STM32G0X)
	LL_EXTI_ClearRisingFlag_0_31(RTC_EXTI_LINE);
#else
	LL_EXTI_ClearFlag_0_31(RTC_EXTI_LINE);
#endif
}
 800cbba:	bd70      	pop	{r4, r5, r6, pc}
 800cbbc:	40002800 	.word	0x40002800
 800cbc0:	58000800 	.word	0x58000800

0800cbc4 <rtc_stm32_init>:


static int rtc_stm32_init(const struct device *dev)
{
 800cbc4:	b570      	push	{r4, r5, r6, lr}
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct rtc_stm32_config *cfg = dev->config;
	struct rtc_stm32_data *data = dev->data;

	data->callback = NULL;
 800cbc6:	6903      	ldr	r3, [r0, #16]
	const struct rtc_stm32_config *cfg = dev->config;
 800cbc8:	6846      	ldr	r6, [r0, #4]
	data->callback = NULL;
 800cbca:	2200      	movs	r2, #0
{
 800cbcc:	b086      	sub	sp, #24
	data->callback = NULL;
 800cbce:	601a      	str	r2, [r3, #0]

	if (clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken) != 0) {
 800cbd0:	f106 050c 	add.w	r5, r6, #12
 800cbd4:	4c39      	ldr	r4, [pc, #228]	; (800ccbc <rtc_stm32_init+0xf8>)
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f00c f8c6 	bl	8018d68 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 800cbdc:	b978      	cbnz	r0, 800cbfe <rtc_stm32_init+0x3a>
		LOG_ERR("clock op failed\n");
 800cbde:	4b38      	ldr	r3, [pc, #224]	; (800ccc0 <rtc_stm32_init+0xfc>)
 800cbe0:	9304      	str	r3, [sp, #16]
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	9303      	str	r3, [sp, #12]
 800cbe6:	4837      	ldr	r0, [pc, #220]	; (800ccc4 <rtc_stm32_init+0x100>)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	aa03      	add	r2, sp, #12
 800cbec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800cbf0:	f007 faef 	bl	80141d2 <z_impl_z_log_msg2_static_create>

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#if !defined(CONFIG_COUNTER_RTC_STM32_SAVE_VALUE_BETWEEN_RESETS)
	if (LL_RTC_DeInit(RTC) != SUCCESS) {
		return -EIO;
 800cbf4:	f06f 0504 	mvn.w	r5, #4
	LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE);

	rtc_stm32_irq_config(dev);

	return 0;
}
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	b006      	add	sp, #24
 800cbfc:	bd70      	pop	{r4, r5, r6, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800cbfe:	68a3      	ldr	r3, [r4, #8]
 800cc00:	4629      	mov	r1, r5
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4620      	mov	r0, r4
 800cc06:	4798      	blx	r3
	if (clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken) != 0) {
 800cc08:	4605      	mov	r5, r0
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d1e7      	bne.n	800cbde <rtc_stm32_init+0x1a>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc0e:	4a2e      	ldr	r2, [pc, #184]	; (800ccc8 <rtc_stm32_init+0x104>)
 800cc10:	6813      	ldr	r3, [r2, #0]
 800cc12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc16:	6013      	str	r3, [r2, #0]
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cc18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800cc20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cc24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cc28:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800cc2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cc30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800cc34:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cc38:	f042 0201 	orr.w	r2, r2, #1
 800cc3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800cc40:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cc44:	0792      	lsls	r2, r2, #30
 800cc46:	d5fb      	bpl.n	800cc40 <rtc_stm32_init+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800cc48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	if (LL_RTC_DeInit(RTC) != SUCCESS) {
 800cc4c:	4c1f      	ldr	r4, [pc, #124]	; (800cccc <rtc_stm32_init+0x108>)
 800cc4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800cc52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800cc5a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800cc5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800cc66:	4620      	mov	r0, r4
 800cc68:	f002 fe1c 	bl	800f8a4 <LL_RTC_DeInit>
 800cc6c:	2801      	cmp	r0, #1
 800cc6e:	d1c1      	bne.n	800cbf4 <rtc_stm32_init+0x30>
	if (LL_RTC_Init(RTC, ((LL_RTC_InitTypeDef *)
 800cc70:	f106 0114 	add.w	r1, r6, #20
 800cc74:	4620      	mov	r0, r4
 800cc76:	f00b fff7 	bl	8018c68 <LL_RTC_Init>
 800cc7a:	2801      	cmp	r0, #1
 800cc7c:	d1ba      	bne.n	800cbf4 <rtc_stm32_init+0x30>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800cc7e:	23ca      	movs	r3, #202	; 0xca
 800cc80:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800cc82:	2353      	movs	r3, #83	; 0x53
 800cc84:	6263      	str	r3, [r4, #36]	; 0x24
  SET_BIT(RTCx->CR, RTC_CR_BYPSHAD);
 800cc86:	69a3      	ldr	r3, [r4, #24]
 800cc88:	f043 0320 	orr.w	r3, r3, #32
 800cc8c:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800cc8e:	23ff      	movs	r3, #255	; 0xff
 800cc90:	6263      	str	r3, [r4, #36]	; 0x24
  SET_BIT(EXTI->IMR1, ExtiLine);
 800cc92:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <rtc_stm32_init+0x10c>)
 800cc94:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800cc98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cc9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cca6:	601a      	str	r2, [r3, #0]
		    &rtc_data, &rtc_config, PRE_KERNEL_1,
		    CONFIG_COUNTER_INIT_PRIORITY, &rtc_stm32_driver_api);

static void rtc_stm32_irq_config(const struct device *dev)
{
	IRQ_CONNECT(DT_INST_IRQN(0),
 800cca8:	2200      	movs	r2, #0
 800ccaa:	4611      	mov	r1, r2
 800ccac:	202a      	movs	r0, #42	; 0x2a
 800ccae:	f7f7 fff1 	bl	8004c94 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    rtc_stm32_isr, DEVICE_DT_INST_GET(0), 0);
	irq_enable(DT_INST_IRQN(0));
 800ccb2:	202a      	movs	r0, #42	; 0x2a
 800ccb4:	f7f7 ffca 	bl	8004c4c <arch_irq_enable>
}
 800ccb8:	e79e      	b.n	800cbf8 <rtc_stm32_init+0x34>
 800ccba:	bf00      	nop
 800ccbc:	08019bd8 	.word	0x08019bd8
 800ccc0:	0801c54a 	.word	0x0801c54a
 800ccc4:	08019f98 	.word	0x08019f98
 800ccc8:	58000400 	.word	0x58000400
 800cccc:	40002800 	.word	0x40002800
 800ccd0:	58000800 	.word	0x58000800

0800ccd4 <rtc_stm32_set_alarm>:
{
 800ccd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct rtc_stm32_data *data = dev->data;
 800ccd8:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 800ccdc:	b091      	sub	sp, #68	; 0x44
 800ccde:	4616      	mov	r6, r2
 800cce0:	4607      	mov	r7, r0
	uint32_t now = rtc_stm32_read(dev);
 800cce2:	f7ff fed5 	bl	800ca90 <rtc_stm32_read>
	if (data->callback != NULL) {
 800cce6:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t ticks = alarm_cfg->ticks;
 800ccea:	6875      	ldr	r5, [r6, #4]
	uint32_t now = rtc_stm32_read(dev);
 800ccec:	4604      	mov	r4, r0
	if (data->callback != NULL) {
 800ccee:	f1b9 0f00 	cmp.w	r9, #0
 800ccf2:	d168      	bne.n	800cdc6 <rtc_stm32_set_alarm+0xf2>
	data->callback = alarm_cfg->callback;
 800ccf4:	6833      	ldr	r3, [r6, #0]
	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800ccf6:	68f2      	ldr	r2, [r6, #12]
	data->callback = alarm_cfg->callback;
 800ccf8:	f8c8 3000 	str.w	r3, [r8]
	data->user_data = alarm_cfg->user_data;
 800ccfc:	68b3      	ldr	r3, [r6, #8]
 800ccfe:	f8c8 3008 	str.w	r3, [r8, #8]
	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800cd02:	f012 0801 	ands.w	r8, r2, #1
 800cd06:	4e33      	ldr	r6, [pc, #204]	; (800cdd4 <rtc_stm32_set_alarm+0x100>)
 800cd08:	d14d      	bne.n	800cda6 <rtc_stm32_set_alarm+0xd2>
		ticks += now + 1;
 800cd0a:	3501      	adds	r5, #1
	return ((uint64_t)ticks * USEC_PER_SEC) / z_impl_counter_get_frequency(dev);
 800cd0c:	4638      	mov	r0, r7
 800cd0e:	f009 fc62 	bl	80165d6 <z_impl_counter_get_frequency>
 800cd12:	1961      	adds	r1, r4, r5
 800cd14:	4602      	mov	r2, r0
 800cd16:	4643      	mov	r3, r8
 800cd18:	fba1 0106 	umull	r0, r1, r1, r6
 800cd1c:	f7f4 f954 	bl	8000fc8 <__aeabi_uldivmod>
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC)
 800cd20:	2300      	movs	r3, #0
 800cd22:	4a2c      	ldr	r2, [pc, #176]	; (800cdd4 <rtc_stm32_set_alarm+0x100>)
 800cd24:	f7f4 f950 	bl	8000fc8 <__aeabi_uldivmod>
			+ T_TIME_OFFSET;
 800cd28:	4b2b      	ldr	r3, [pc, #172]	; (800cdd8 <rtc_stm32_set_alarm+0x104>)
 800cd2a:	18c0      	adds	r0, r0, r3
 800cd2c:	f141 0100 	adc.w	r1, r1, #0
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC)
 800cd30:	e9cd 0100 	strd	r0, r1, [sp]
	gmtime_r(&alarm_val, &alarm_tm);
 800cd34:	a907      	add	r1, sp, #28
 800cd36:	4668      	mov	r0, sp
 800cd38:	f004 f9d4 	bl	80110e4 <gmtime_r>
	rtc_alarm.AlarmTime.Hours = alarm_tm.tm_hour;
 800cd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd3e:	f88d 300c 	strb.w	r3, [sp, #12]
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 800cd42:	2500      	movs	r5, #0
	rtc_alarm.AlarmTime.Minutes = alarm_tm.tm_min;
 800cd44:	9b08      	ldr	r3, [sp, #32]
 800cd46:	f88d 300d 	strb.w	r3, [sp, #13]
	rtc_alarm.AlarmDateWeekDaySel = LL_RTC_ALMA_DATEWEEKDAYSEL_DATE;
 800cd4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	rtc_alarm.AlarmTime.Seconds = alarm_tm.tm_sec;
 800cd4e:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800cd50:	4c22      	ldr	r4, [pc, #136]	; (800cddc <rtc_stm32_set_alarm+0x108>)
 800cd52:	f88d 300e 	strb.w	r3, [sp, #14]
 800cd56:	f04f 08ca 	mov.w	r8, #202	; 0xca
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 800cd5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 800cd5c:	9502      	str	r5, [sp, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800cd5e:	2753      	movs	r7, #83	; 0x53
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 800cd60:	f88d 3018 	strb.w	r3, [sp, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800cd64:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800cd68:	6267      	str	r7, [r4, #36]	; 0x24
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800cd6a:	69a3      	ldr	r3, [r4, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800cd6c:	26ff      	movs	r6, #255	; 0xff
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800cd6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd72:	61a3      	str	r3, [r4, #24]
	if (LL_RTC_ALMA_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_alarm) != SUCCESS) {
 800cd74:	aa02      	add	r2, sp, #8
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800cd76:	6266      	str	r6, [r4, #36]	; 0x24
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f00b feda 	bl	8018b34 <LL_RTC_ALMA_Init>
 800cd80:	2801      	cmp	r0, #1
 800cd82:	d123      	bne.n	800cdcc <rtc_stm32_set_alarm+0xf8>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800cd84:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800cd88:	6267      	str	r7, [r4, #36]	; 0x24
  SET_BIT(RTCx->CR, RTC_CR_ALRAE);
 800cd8a:	69a3      	ldr	r3, [r4, #24]
 800cd8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd90:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800cd92:	65e0      	str	r0, [r4, #92]	; 0x5c
  SET_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800cd94:	69a3      	ldr	r3, [r4, #24]
 800cd96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd9a:	61a3      	str	r3, [r4, #24]
	return 0;
 800cd9c:	4628      	mov	r0, r5
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800cd9e:	6266      	str	r6, [r4, #36]	; 0x24
}
 800cda0:	b011      	add	sp, #68	; 0x44
 800cda2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cda6:	4638      	mov	r0, r7
 800cda8:	f009 fc15 	bl	80165d6 <z_impl_counter_get_frequency>
 800cdac:	464b      	mov	r3, r9
 800cdae:	4602      	mov	r2, r0
 800cdb0:	fba5 0106 	umull	r0, r1, r5, r6
 800cdb4:	f7f4 f908 	bl	8000fc8 <__aeabi_uldivmod>
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC);
 800cdb8:	4a06      	ldr	r2, [pc, #24]	; (800cdd4 <rtc_stm32_set_alarm+0x100>)
 800cdba:	2300      	movs	r3, #0
 800cdbc:	f7f4 f904 	bl	8000fc8 <__aeabi_uldivmod>
 800cdc0:	e9cd 0100 	strd	r0, r1, [sp]
 800cdc4:	e7b6      	b.n	800cd34 <rtc_stm32_set_alarm+0x60>
		return -EBUSY;
 800cdc6:	f06f 000f 	mvn.w	r0, #15
 800cdca:	e7e9      	b.n	800cda0 <rtc_stm32_set_alarm+0xcc>
		return -EIO;
 800cdcc:	f06f 0004 	mvn.w	r0, #4
 800cdd0:	e7e6      	b.n	800cda0 <rtc_stm32_set_alarm+0xcc>
 800cdd2:	bf00      	nop
 800cdd4:	000f4240 	.word	0x000f4240
 800cdd8:	386d4380 	.word	0x386d4380
 800cddc:	40002800 	.word	0x40002800

0800cde0 <sync_timer_handler>:
	data->syncpoint.syncclock = data->isw_syncclock;
	sync_finish(dev, 0);
}

static void sync_timer_handler(struct k_timer *tmr)
{
 800cde0:	b510      	push	{r4, lr}
 800cde2:	b086      	sub	sp, #24
	struct ds3231_data *data = CONTAINER_OF(tmr, struct ds3231_data,
						sync_timer);

	LOG_INF("sync_timer fired");
 800cde4:	4b08      	ldr	r3, [pc, #32]	; (800ce08 <sync_timer_handler+0x28>)
 800cde6:	9304      	str	r3, [sp, #16]
{
 800cde8:	4604      	mov	r4, r0
	LOG_INF("sync_timer fired");
 800cdea:	2302      	movs	r3, #2
 800cdec:	4807      	ldr	r0, [pc, #28]	; (800ce0c <sync_timer_handler+0x2c>)
 800cdee:	9303      	str	r3, [sp, #12]
 800cdf0:	aa03      	add	r2, sp, #12
 800cdf2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800cdf6:	f009 fc77 	bl	80166e8 <z_log_msg2_static_create.constprop.0>
	k_work_submit(&data->sync_work);
 800cdfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 800cdfe:	b006      	add	sp, #24
 800ce00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->sync_work);
 800ce04:	f003 bb0c 	b.w	8010420 <k_work_submit>
 800ce08:	0801c573 	.word	0x0801c573
 800ce0c:	08019f80 	.word	0x08019f80

0800ce10 <validate_isw_monitoring>:
{
 800ce10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ds3231_data *data = dev->data;
 800ce14:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 800ce18:	6846      	ldr	r6, [r0, #4]
	if (rp->ctrl & (MAXIM_DS3231_ALARM1 | MAXIM_DS3231_ALARM2)) {
 800ce1a:	f898 4012 	ldrb.w	r4, [r8, #18]
	if (data->sync_state != SYNCSM_IDLE) {
 800ce1e:	f898 3113 	ldrb.w	r3, [r8, #275]	; 0x113
	uint8_t isw_mon_req = 0;
 800ce22:	f014 0403 	ands.w	r4, r4, #3
{
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	4605      	mov	r5, r0
	uint8_t isw_mon_req = 0;
 800ce2a:	bf18      	it	ne
 800ce2c:	2401      	movne	r4, #1
	if (data->sync_state != SYNCSM_IDLE) {
 800ce2e:	b10b      	cbz	r3, 800ce34 <validate_isw_monitoring+0x24>
		isw_mon_req |= ISW_MON_REQ_Sync;
 800ce30:	f044 0402 	orr.w	r4, r4, #2
	if ((cfg->isw_gpios.port != NULL)
 800ce34:	6973      	ldr	r3, [r6, #20]
 800ce36:	b39b      	cbz	r3, 800cea0 <validate_isw_monitoring+0x90>
	    && (isw_mon_req != data->isw_mon_req)) {
 800ce38:	f898 3112 	ldrb.w	r3, [r8, #274]	; 0x112
 800ce3c:	42a3      	cmp	r3, r4
 800ce3e:	d02f      	beq.n	800cea0 <validate_isw_monitoring+0x90>
		rc = gpio_pin_interrupt_configure_dt(&cfg->isw_gpios,
 800ce40:	3614      	adds	r6, #20
 800ce42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce46:	4630      	mov	r0, r6
 800ce48:	f009 fc03 	bl	8016652 <gpio_pin_interrupt_configure_dt>
		if ((rc >= 0)
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	db0d      	blt.n	800ce6c <validate_isw_monitoring+0x5c>
			!= (data->isw_mon_req & ISW_MON_REQ_Sync))) {
 800ce50:	f898 3112 	ldrb.w	r3, [r8, #274]	; 0x112
 800ce54:	4063      	eors	r3, r4
		    && ((isw_mon_req & ISW_MON_REQ_Sync)
 800ce56:	079b      	lsls	r3, r3, #30
 800ce58:	d508      	bpl.n	800ce6c <validate_isw_monitoring+0x5c>
			if (isw_mon_req & ISW_MON_REQ_Sync) {
 800ce5a:	f014 0202 	ands.w	r2, r4, #2
				rc = sc_ctrl(dev, 0,
 800ce5e:	bf1a      	itte	ne
 800ce60:	221c      	movne	r2, #28
 800ce62:	2100      	movne	r1, #0
				rc = sc_ctrl(dev, MAXIM_DS3231_REG_CTRL_INTCN, 0);
 800ce64:	2104      	moveq	r1, #4
 800ce66:	4628      	mov	r0, r5
 800ce68:	f009 fc6b 	bl	8016742 <sc_ctrl>
		if ((rc >= 0) && (isw_mon_req != 0)) {
 800ce6c:	2800      	cmp	r0, #0
		data->isw_mon_req = isw_mon_req;
 800ce6e:	f888 4112 	strb.w	r4, [r8, #274]	; 0x112
		if ((rc >= 0) && (isw_mon_req != 0)) {
 800ce72:	db05      	blt.n	800ce80 <validate_isw_monitoring+0x70>
 800ce74:	b124      	cbz	r4, 800ce80 <validate_isw_monitoring+0x70>
			rc = gpio_pin_interrupt_configure_dt(
 800ce76:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f009 fbe9 	bl	8016652 <gpio_pin_interrupt_configure_dt>
		LOG_INF("ISW reconfigure to %x: %d", isw_mon_req, rc);
 800ce80:	4b09      	ldr	r3, [pc, #36]	; (800cea8 <validate_isw_monitoring+0x98>)
 800ce82:	466d      	mov	r5, sp
 800ce84:	b088      	sub	sp, #32
 800ce86:	466a      	mov	r2, sp
 800ce88:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800ce8c:	2304      	movs	r3, #4
 800ce8e:	6190      	str	r0, [r2, #24]
 800ce90:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 800ce94:	f842 3f0c 	str.w	r3, [r2, #12]!
 800ce98:	4804      	ldr	r0, [pc, #16]	; (800ceac <validate_isw_monitoring+0x9c>)
 800ce9a:	f009 fc25 	bl	80166e8 <z_log_msg2_static_create.constprop.0>
 800ce9e:	46ad      	mov	sp, r5
}
 800cea0:	46bd      	mov	sp, r7
 800cea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea6:	bf00      	nop
 800cea8:	0801c584 	.word	0x0801c584
 800ceac:	08019f80 	.word	0x08019f80

0800ceb0 <alarm_worker>:
{
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *ds3231 = data->ds3231;
 800ceb4:	f850 5c68 	ldr.w	r5, [r0, #-104]
{
 800ceb8:	b089      	sub	sp, #36	; 0x24
	const struct ds3231_config *cfg = ds3231->config;
 800ceba:	686b      	ldr	r3, [r5, #4]
 800cebc:	9300      	str	r3, [sp, #0]
	k_sem_take(&data->lock, K_FOREVER);
 800cebe:	f1a0 0750 	sub.w	r7, r0, #80	; 0x50
{
 800cec2:	4606      	mov	r6, r0
	k_sem_take(&data->lock, K_FOREVER);
 800cec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cecc:	4638      	mov	r0, r7
 800cece:	f009 fc26 	bl	801671e <k_sem_take.constprop.0.isra.0>
		af = check_handled_alarms(ds3231);
 800ced2:	4628      	mov	r0, r5
 800ced4:	f009 fce0 	bl	8016898 <check_handled_alarms>
	while (af > 0) {
 800ced8:	2800      	cmp	r0, #0
		af = check_handled_alarms(ds3231);
 800ceda:	4604      	mov	r4, r0
	while (af > 0) {
 800cedc:	dc5a      	bgt.n	800cf94 <alarm_worker+0xe4>
	k_sem_give(&data->lock);
 800cede:	4638      	mov	r0, r7
 800cee0:	f009 fbde 	bl	80166a0 <k_sem_give>
	if (af < 0) {
 800cee4:	b14c      	cbz	r4, 800cefa <alarm_worker+0x4a>
		LOG_ERR("failed to read alarm flags");
 800cee6:	4b2d      	ldr	r3, [pc, #180]	; (800cf9c <alarm_worker+0xec>)
 800cee8:	9306      	str	r3, [sp, #24]
 800ceea:	482d      	ldr	r0, [pc, #180]	; (800cfa0 <alarm_worker+0xf0>)
 800ceec:	2302      	movs	r3, #2
 800ceee:	aa05      	add	r2, sp, #20
 800cef0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800cef4:	9305      	str	r3, [sp, #20]
 800cef6:	f009 fbf7 	bl	80166e8 <z_log_msg2_static_create.constprop.0>
}
 800cefa:	b009      	add	sp, #36	; 0x24
 800cefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((af & (MAXIM_DS3231_ALARM1 << id)) == 0) {
 800cf00:	fa24 f30a 	lsr.w	r3, r4, sl
 800cf04:	07db      	lsls	r3, r3, #31
 800cf06:	d533      	bpl.n	800cf70 <alarm_worker+0xc0>
			if (data->alarm_flags[id] & MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE) {
 800cf08:	eb06 020a 	add.w	r2, r6, sl
 800cf0c:	eb06 038a 	add.w	r3, r6, sl, lsl #2
 800cf10:	f992 20a8 	ldrsb.w	r2, [r2, #168]	; 0xa8
			maxim_ds3231_alarm_callback_handler_t handler
 800cf14:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
			void *ud = data->alarm_user_data[id];
 800cf18:	f8d3 b0a0 	ldr.w	fp, [r3, #160]	; 0xa0
			if (data->alarm_flags[id] & MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE) {
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	da08      	bge.n	800cf32 <alarm_worker+0x82>
				int rc = cancel_alarm(ds3231, id);
 800cf20:	4651      	mov	r1, sl
 800cf22:	4628      	mov	r0, r5
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	f009 fc27 	bl	8016778 <cancel_alarm>
				validate_isw_monitoring(ds3231);
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f7ff ff70 	bl	800ce10 <validate_isw_monitoring>
 800cf30:	9b01      	ldr	r3, [sp, #4]
			if (handler == counter_alarm_forwarder) {
 800cf32:	4a1c      	ldr	r2, [pc, #112]	; (800cfa4 <alarm_worker+0xf4>)
 800cf34:	4591      	cmp	r9, r2
 800cf36:	d124      	bne.n	800cf82 <alarm_worker+0xd2>
				uint32_t ticks = data->counter_ticks[id];
 800cf38:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
				counter_alarm_callback_t cb = data->counter_handler[id];
 800cf3c:	f8d3 9088 	ldr.w	r9, [r3, #136]	; 0x88
				uint32_t ticks = data->counter_ticks[id];
 800cf40:	9201      	str	r2, [sp, #4]
				data->counter_handler[id] = NULL;
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				data->counter_ticks[id] = 0;
 800cf48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				if (cb) {
 800cf4c:	f1b9 0f00 	cmp.w	r9, #0
 800cf50:	d00e      	beq.n	800cf70 <alarm_worker+0xc0>
					k_sem_give(&data->lock);
 800cf52:	4638      	mov	r0, r7
 800cf54:	f009 fba4 	bl	80166a0 <k_sem_give>
					cb(ds3231, id, ticks, ud);
 800cf58:	9a01      	ldr	r2, [sp, #4]
 800cf5a:	465b      	mov	r3, fp
				handler(ds3231, id, data->isw_syncclock, ud);
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	4651      	mov	r1, sl
 800cf60:	47c8      	blx	r9
				k_sem_take(&data->lock, K_FOREVER);
 800cf62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf6a:	4638      	mov	r0, r7
 800cf6c:	f009 fbd7 	bl	801671e <k_sem_take.constprop.0.isra.0>
		for (id = 0; id < cfg->generic.channels; ++id) {
 800cf70:	f108 0801 	add.w	r8, r8, #1
 800cf74:	9b00      	ldr	r3, [sp, #0]
 800cf76:	7a5b      	ldrb	r3, [r3, #9]
 800cf78:	fa5f fa88 	uxtb.w	sl, r8
 800cf7c:	4553      	cmp	r3, sl
 800cf7e:	d8bf      	bhi.n	800cf00 <alarm_worker+0x50>
 800cf80:	e7a7      	b.n	800ced2 <alarm_worker+0x22>
			} else if (handler != NULL) {
 800cf82:	f1b9 0f00 	cmp.w	r9, #0
 800cf86:	d0f3      	beq.n	800cf70 <alarm_worker+0xc0>
				k_sem_give(&data->lock);
 800cf88:	4638      	mov	r0, r7
 800cf8a:	f009 fb89 	bl	80166a0 <k_sem_give>
				handler(ds3231, id, data->isw_syncclock, ud);
 800cf8e:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800cf90:	465b      	mov	r3, fp
 800cf92:	e7e3      	b.n	800cf5c <alarm_worker+0xac>
 800cf94:	f04f 0800 	mov.w	r8, #0
 800cf98:	e7ec      	b.n	800cf74 <alarm_worker+0xc4>
 800cf9a:	bf00      	nop
 800cf9c:	0801c59e 	.word	0x0801c59e
 800cfa0:	08019f80 	.word	0x08019f80
 800cfa4:	08016683 	.word	0x08016683

0800cfa8 <ds3231_counter_set_alarm>:
}

int ds3231_counter_set_alarm(const struct device *dev,
			     uint8_t id,
			     const struct counter_alarm_cfg *alarm_cfg)
{
 800cfa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct register_map *rp = &data->registers;
	const struct ds3231_config *cfg = dev->config;
	time_t when;
	int rc = 0;

	if (id >= cfg->generic.channels) {
 800cfac:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 800cfae:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (id >= cfg->generic.channels) {
 800cfb2:	7a5b      	ldrb	r3, [r3, #9]
 800cfb4:	428b      	cmp	r3, r1
{
 800cfb6:	b089      	sub	sp, #36	; 0x24
 800cfb8:	4606      	mov	r6, r0
 800cfba:	460f      	mov	r7, r1
 800cfbc:	4615      	mov	r5, r2
	if (id >= cfg->generic.channels) {
 800cfbe:	d949      	bls.n	800d054 <ds3231_counter_set_alarm+0xac>
		rc = -ENOTSUP;
		goto out;
	}

	k_sem_take(&data->lock, K_FOREVER);
 800cfc0:	f108 0918 	add.w	r9, r8, #24
 800cfc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfcc:	4648      	mov	r0, r9
 800cfce:	f009 fba6 	bl	801671e <k_sem_take.constprop.0.isra.0>

	if (rp->ctrl & (MAXIM_DS3231_ALARM1 << id)) {
 800cfd2:	f898 4012 	ldrb.w	r4, [r8, #18]
 800cfd6:	40fc      	lsrs	r4, r7
 800cfd8:	f014 0401 	ands.w	r4, r4, #1
 800cfdc:	d137      	bne.n	800d04e <ds3231_counter_set_alarm+0xa6>
		rc = -EBUSY;
		goto out_locked;
	}

	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800cfde:	68eb      	ldr	r3, [r5, #12]
 800cfe0:	07db      	lsls	r3, r3, #31
 800cfe2:	d430      	bmi.n	800d046 <ds3231_counter_set_alarm+0x9e>
		rc = read_time(dev, &when);
 800cfe4:	4669      	mov	r1, sp
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f009 fd62 	bl	8016ab0 <read_time>
		if (rc >= 0) {
 800cfec:	1e04      	subs	r4, r0, #0
 800cfee:	db07      	blt.n	800d000 <ds3231_counter_set_alarm+0x58>
			when += alarm_cfg->ticks;
 800cff0:	686a      	ldr	r2, [r5, #4]
 800cff2:	9b00      	ldr	r3, [sp, #0]
 800cff4:	189b      	adds	r3, r3, r2
 800cff6:	9a01      	ldr	r2, [sp, #4]
 800cff8:	f142 0200 	adc.w	r2, r2, #0
 800cffc:	e9cd 3200 	strd	r3, r2, [sp]
		}
	} else {
		when = alarm_cfg->ticks;
	}

	struct maxim_ds3231_alarm alarm = {
 800d000:	2200      	movs	r2, #0
 800d002:	9203      	str	r2, [sp, #12]
 800d004:	4a15      	ldr	r2, [pc, #84]	; (800d05c <ds3231_counter_set_alarm+0xb4>)
 800d006:	9204      	str	r2, [sp, #16]
 800d008:	68aa      	ldr	r2, [r5, #8]
		.time = (uint32_t)when,
 800d00a:	9b00      	ldr	r3, [sp, #0]
	struct maxim_ds3231_alarm alarm = {
 800d00c:	9205      	str	r2, [sp, #20]
		.handler = counter_alarm_forwarder,
		.user_data = alarm_cfg->user_data,
		.flags = MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE,
	};

	if (rc >= 0) {
 800d00e:	2c00      	cmp	r4, #0
	struct maxim_ds3231_alarm alarm = {
 800d010:	f04f 0280 	mov.w	r2, #128	; 0x80
 800d014:	9302      	str	r3, [sp, #8]
 800d016:	f88d 2018 	strb.w	r2, [sp, #24]
	if (rc >= 0) {
 800d01a:	db0c      	blt.n	800d036 <ds3231_counter_set_alarm+0x8e>
		data->counter_handler[id] = alarm_cfg->callback;
 800d01c:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800d020:	682a      	ldr	r2, [r5, #0]
 800d022:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
		.time = (uint32_t)when,
 800d026:	f8c8 30f8 	str.w	r3, [r8, #248]	; 0xf8
		data->counter_ticks[id] = alarm.time;
		rc = set_alarm(dev, id, &alarm);
 800d02a:	aa02      	add	r2, sp, #8
 800d02c:	4639      	mov	r1, r7
 800d02e:	4630      	mov	r0, r6
 800d030:	f009 fc3f 	bl	80168b2 <set_alarm>
 800d034:	4604      	mov	r4, r0
	}

out_locked:
	k_sem_give(&data->lock);
 800d036:	4648      	mov	r0, r9
 800d038:	f009 fb32 	bl	80166a0 <k_sem_give>

out:
	/* Throw away information counter API disallows */
	if (rc >= 0) {
 800d03c:	ea04 70e4 	and.w	r0, r4, r4, asr #31
		rc = 0;
	}

	return rc;
}
 800d040:	b009      	add	sp, #36	; 0x24
 800d042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		when = alarm_cfg->ticks;
 800d046:	686b      	ldr	r3, [r5, #4]
 800d048:	e9cd 3400 	strd	r3, r4, [sp]
 800d04c:	e7d8      	b.n	800d000 <ds3231_counter_set_alarm+0x58>
		rc = -EBUSY;
 800d04e:	f06f 040f 	mvn.w	r4, #15
 800d052:	e7f0      	b.n	800d036 <ds3231_counter_set_alarm+0x8e>
		rc = -ENOTSUP;
 800d054:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800d058:	e7f2      	b.n	800d040 <ds3231_counter_set_alarm+0x98>
 800d05a:	bf00      	nop
 800d05c:	08016683 	.word	0x08016683

0800d060 <sync_worker>:
{
 800d060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d064:	4604      	mov	r4, r0
 800d066:	b091      	sub	sp, #68	; 0x44
	k_sem_take(&data->lock, K_FOREVER);
 800d068:	f1a4 0670 	sub.w	r6, r4, #112	; 0x70
{
 800d06c:	af02      	add	r7, sp, #8
 *
 * @return the current value of the synchronization clock.
 */
static inline uint32_t maxim_ds3231_read_syncclock(const struct device *dev)
{
	return k_uptime_get_32();
 800d06e:	f009 fb19 	bl	80166a4 <k_uptime_get_32>
	k_sem_take(&data->lock, K_FOREVER);
 800d072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d07a:	4630      	mov	r0, r6
 800d07c:	f009 fb4f 	bl	801671e <k_sem_take.constprop.0.isra.0>
	switch (data->sync_state) {
 800d080:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800d084:	3b01      	subs	r3, #1
 800d086:	2b03      	cmp	r3, #3
 800d088:	d817      	bhi.n	800d0ba <sync_worker+0x5a>
 800d08a:	e8df f003 	tbb	[pc, r3]
 800d08e:	1a02      	.short	0x1a02
 800d090:	8833      	.short	0x8833
		sync_prep_read(data->ds3231);
 800d092:	f854 4c88 	ldr.w	r4, [r4, #-136]
	int rc = sc_ctrl(dev, 0U, MAXIM_DS3231_REG_CTRL_INTCN
 800d096:	2100      	movs	r1, #0
 800d098:	221c      	movs	r2, #28
 800d09a:	4620      	mov	r0, r4
	struct ds3231_data *data = dev->data;
 800d09c:	6925      	ldr	r5, [r4, #16]
	int rc = sc_ctrl(dev, 0U, MAXIM_DS3231_REG_CTRL_INTCN
 800d09e:	f009 fb50 	bl	8016742 <sc_ctrl>
	if (rc < 0) {
 800d0a2:	1e01      	subs	r1, r0, #0
 800d0a4:	da03      	bge.n	800d0ae <sync_worker+0x4e>
		sync_finish(dev, rc);
 800d0a6:	4620      	mov	r0, r4
	sync_finish(dev, 0);
 800d0a8:	f009 fb93 	bl	80167d2 <sync_finish>
}
 800d0ac:	e005      	b.n	800d0ba <sync_worker+0x5a>
	data->sync_state = SYNCSM_FINISH_READ;
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
	validate_isw_monitoring(dev);
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f7ff feab 	bl	800ce10 <validate_isw_monitoring>
		k_sem_give(&data->lock);
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f009 faf0 	bl	80166a0 <k_sem_give>
 800d0c0:	e0ce      	b.n	800d260 <sync_worker+0x200>
		sync_finish_read(data->ds3231);
 800d0c2:	f854 5c88 	ldr.w	r5, [r4, #-136]
	time_t time = 0;
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2300      	movs	r3, #0
	(void)read_time(dev, &time);
 800d0ca:	f107 0110 	add.w	r1, r7, #16
 800d0ce:	4628      	mov	r0, r5
	struct ds3231_data *data = dev->data;
 800d0d0:	692c      	ldr	r4, [r5, #16]
	time_t time = 0;
 800d0d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	(void)read_time(dev, &time);
 800d0d6:	f009 fceb 	bl	8016ab0 <read_time>
	data->syncpoint.rtc.tv_sec = time;
 800d0da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	data->syncpoint.rtc.tv_nsec = 0;
 800d0de:	2100      	movs	r1, #0
	data->syncpoint.rtc.tv_sec = time;
 800d0e0:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
	data->syncpoint.syncclock = data->isw_syncclock;
 800d0e4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	data->syncpoint.rtc.tv_nsec = 0;
 800d0e8:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	data->syncpoint.syncclock = data->isw_syncclock;
 800d0ec:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	sync_finish(dev, 0);
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	e7d9      	b.n	800d0a8 <sync_worker+0x48>
		sync_prep_write(data->ds3231);
 800d0f4:	f854 3c88 	ldr.w	r3, [r4, #-136]
 800d0f8:	691d      	ldr	r5, [r3, #16]
 800d0fa:	f009 fad3 	bl	80166a4 <k_uptime_get_32>
	uint32_t offset = syncclock - data->new_sp.syncclock;
 800d0fe:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	uint32_t offset_ms = (offset % syncclock_Hz) * 1000U / syncclock_Hz;
 800d102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	uint32_t offset = syncclock - data->new_sp.syncclock;
 800d106:	1ac3      	subs	r3, r0, r3
	uint32_t offset_ms = (offset % syncclock_Hz) * 1000U / syncclock_Hz;
 800d108:	fbb3 f4f2 	udiv	r4, r3, r2
 800d10c:	fb02 3314 	mls	r3, r2, r4, r3
 800d110:	4353      	muls	r3, r2
 800d112:	fbb3 f3f2 	udiv	r3, r3, r2
	time_t when = data->new_sp.rtc.tv_sec;
 800d116:	e9d5 2130 	ldrd	r2, r1, [r5, #192]	; 0xc0
 800d11a:	4680      	mov	r8, r0
	when += offset_s;
 800d11c:	18a4      	adds	r4, r4, r2
	offset_ms += data->new_sp.rtc.tv_nsec / NSEC_PER_USEC / USEC_PER_MSEC;
 800d11e:	4852      	ldr	r0, [pc, #328]	; (800d268 <sync_worker+0x208>)
 800d120:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
 800d124:	fbb2 f2f0 	udiv	r2, r2, r0
 800d128:	4413      	add	r3, r2
	when += offset_s;
 800d12a:	f141 0100 	adc.w	r1, r1, #0
	if (offset_ms >= MSEC_PER_SEC) {
 800d12e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d132:	d330      	bcc.n	800d196 <sync_worker+0x136>
		offset_ms -= MSEC_PER_SEC;
 800d134:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
	uint32_t rem_ms = MSEC_PER_SEC - offset_ms;
 800d138:	f5c3 797a 	rsb	r9, r3, #1000	; 0x3e8
	if (rem_ms < 5) {
 800d13c:	f1b9 0f04 	cmp.w	r9, #4
 800d140:	d804      	bhi.n	800d14c <sync_worker+0xec>
		when += 1;
 800d142:	3401      	adds	r4, #1
 800d144:	f141 0100 	adc.w	r1, r1, #0
		rem_ms += MSEC_PER_SEC;
 800d148:	f5c3 69fa 	rsb	r9, r3, #2000	; 0x7d0
	data->new_sp.rtc.tv_nsec = 0;
 800d14c:	2300      	movs	r3, #0
 800d14e:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	data->sync_state = SYNCSM_FINISH_WRITE;
 800d152:	2304      	movs	r3, #4
 800d154:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
 800d158:	230a      	movs	r3, #10
	data->new_sp.rtc.tv_sec = when;
 800d15a:	e9c5 4130 	strd	r4, r1, [r5, #192]	; 0xc0
 800d15e:	fba9 2303 	umull	r2, r3, r9, r3
	z_impl_k_timer_start(timer, duration, period);
 800d162:	2100      	movs	r1, #0
 800d164:	2000      	movs	r0, #0
 800d166:	e9cd 0100 	strd	r0, r1, [sp]
 800d16a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800d16e:	f003 fea5 	bl	8010ebc <z_impl_k_timer_start>
	LOG_INF("sync %u in %u ms after %u", (uint32_t)when, rem_ms, syncclock);
 800d172:	466d      	mov	r5, sp
 800d174:	4b3d      	ldr	r3, [pc, #244]	; (800d26c <sync_worker+0x20c>)
 800d176:	483e      	ldr	r0, [pc, #248]	; (800d270 <sync_worker+0x210>)
 800d178:	b088      	sub	sp, #32
 800d17a:	aa02      	add	r2, sp, #8
 800d17c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800d180:	2305      	movs	r3, #5
 800d182:	e9c2 9806 	strd	r9, r8, [r2, #24]
 800d186:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 800d18a:	f842 3f0c 	str.w	r3, [r2, #12]!
 800d18e:	f009 faab 	bl	80166e8 <z_log_msg2_static_create.constprop.0>
 800d192:	46ad      	mov	sp, r5
}
 800d194:	e791      	b.n	800d0ba <sync_worker+0x5a>
		when += 1;
 800d196:	3401      	adds	r4, #1
 800d198:	f141 0100 	adc.w	r1, r1, #0
 800d19c:	e7cc      	b.n	800d138 <sync_worker+0xd8>
		sync_finish_write(data->ds3231);
 800d19e:	f854 4c88 	ldr.w	r4, [r4, #-136]
	struct ds3231_data *data = dev->data;
 800d1a2:	6926      	ldr	r6, [r4, #16]
	const struct ds3231_config *cfg = dev->config;
 800d1a4:	6865      	ldr	r5, [r4, #4]
	time_t when = data->new_sp.rtc.tv_sec;
 800d1a6:	e9d6 2330 	ldrd	r2, r3, [r6, #192]	; 0xc0
	(void)gmtime_r(&when, &tm);
 800d1aa:	f107 0110 	add.w	r1, r7, #16
	time_t when = data->new_sp.rtc.tv_sec;
 800d1ae:	e9c7 2300 	strd	r2, r3, [r7]
	(void)gmtime_r(&when, &tm);
 800d1b2:	4638      	mov	r0, r7
	*bp++ = offsetof(struct register_map, sec);
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	723b      	strb	r3, [r7, #8]
	(void)gmtime_r(&when, &tm);
 800d1b8:	f003 ff94 	bl	80110e4 <gmtime_r>
	val = bin2bcd(tm.tm_sec);
 800d1bc:	7c38      	ldrb	r0, [r7, #16]
 800d1be:	f009 fa3f 	bl	8016640 <bin2bcd>
	*bp++ = val;
 800d1c2:	7278      	strb	r0, [r7, #9]
	val = bin2bcd(tm.tm_min);
 800d1c4:	7d38      	ldrb	r0, [r7, #20]
 800d1c6:	f009 fa3b 	bl	8016640 <bin2bcd>
	*bp++ = val;
 800d1ca:	72b8      	strb	r0, [r7, #10]
	val = bin2bcd(tm.tm_hour);
 800d1cc:	7e38      	ldrb	r0, [r7, #24]
 800d1ce:	f009 fa37 	bl	8016640 <bin2bcd>
	*bp++ = 1 + tm.tm_wday;
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
	*bp++ = val;
 800d1d4:	72f8      	strb	r0, [r7, #11]
	*bp++ = 1 + tm.tm_wday;
 800d1d6:	3301      	adds	r3, #1
	val = bin2bcd(tm.tm_mday);
 800d1d8:	7f38      	ldrb	r0, [r7, #28]
	*bp++ = 1 + tm.tm_wday;
 800d1da:	733b      	strb	r3, [r7, #12]
	val = bin2bcd(tm.tm_mday);
 800d1dc:	f009 fa30 	bl	8016640 <bin2bcd>
	*bp++ = val;
 800d1e0:	7378      	strb	r0, [r7, #13]
	tm.tm_mon += 1;
 800d1e2:	6a38      	ldr	r0, [r7, #32]
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	6238      	str	r0, [r7, #32]
	val = bin2bcd(tm.tm_mon);
 800d1e8:	b2c0      	uxtb	r0, r0
 800d1ea:	f009 fa29 	bl	8016640 <bin2bcd>
	if (tm.tm_year >= 100) {
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	2b63      	cmp	r3, #99	; 0x63
		val |= REG_MONCEN_CENTURY;
 800d1f2:	bfc1      	itttt	gt
 800d1f4:	f060 007f 	orngt	r0, r0, #127	; 0x7f
		tm.tm_year -= 100;
 800d1f8:	3b64      	subgt	r3, #100	; 0x64
		val |= REG_MONCEN_CENTURY;
 800d1fa:	b2c0      	uxtbgt	r0, r0
		tm.tm_year -= 100;
 800d1fc:	627b      	strgt	r3, [r7, #36]	; 0x24
	*bp++ = val;
 800d1fe:	73b8      	strb	r0, [r7, #14]
	val = bin2bcd(tm.tm_year);
 800d200:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800d204:	f009 fa1c 	bl	8016640 <bin2bcd>
	*bp++ = val;
 800d208:	73f8      	strb	r0, [r7, #15]
 800d20a:	f009 fa4b 	bl	80166a4 <k_uptime_get_32>
	int rc = i2c_write_dt(&cfg->bus, buf, bp - buf);
 800d20e:	2208      	movs	r2, #8
 800d210:	4680      	mov	r8, r0
 800d212:	18b9      	adds	r1, r7, r2
 800d214:	f105 000c 	add.w	r0, r5, #12
 800d218:	f009 fa83 	bl	8016722 <i2c_write_dt>
	if (rc >= 0) {
 800d21c:	1e05      	subs	r5, r0, #0
 800d21e:	db1b      	blt.n	800d258 <sync_worker+0x1f8>
		data->syncpoint.rtc.tv_sec = when;
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
		data->syncpoint.rtc.tv_nsec = 0;
 800d22c:	2200      	movs	r2, #0
 800d22e:	f8c6 20b0 	str.w	r2, [r6, #176]	; 0xb0
		data->syncpoint.syncclock = syncclock;
 800d232:	f8c6 80b8 	str.w	r8, [r6, #184]	; 0xb8
		LOG_INF("sync %u at %u", (uint32_t)when, syncclock);
 800d236:	490f      	ldr	r1, [pc, #60]	; (800d274 <sync_worker+0x214>)
 800d238:	480d      	ldr	r0, [pc, #52]	; (800d270 <sync_worker+0x210>)
 800d23a:	466e      	mov	r6, sp
 800d23c:	b088      	sub	sp, #32
 800d23e:	aa02      	add	r2, sp, #8
 800d240:	e9c2 1304 	strd	r1, r3, [r2, #16]
 800d244:	2304      	movs	r3, #4
 800d246:	f8c2 8018 	str.w	r8, [r2, #24]
 800d24a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 800d24e:	f842 3f0c 	str.w	r3, [r2, #12]!
 800d252:	f009 fa49 	bl	80166e8 <z_log_msg2_static_create.constprop.0>
 800d256:	46b5      	mov	sp, r6
	sync_finish(dev, rc);
 800d258:	4629      	mov	r1, r5
 800d25a:	4620      	mov	r0, r4
 800d25c:	f009 fab9 	bl	80167d2 <sync_finish>
}
 800d260:	373c      	adds	r7, #60	; 0x3c
 800d262:	46bd      	mov	sp, r7
 800d264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d268:	000f4240 	.word	0x000f4240
 800d26c:	0801c5b9 	.word	0x0801c5b9
 800d270:	08019f80 	.word	0x08019f80
 800d274:	0801c5d3 	.word	0x0801c5d3

0800d278 <ds3231_init>:
{
 800d278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct ds3231_data *data = dev->data;
 800d27c:	6905      	ldr	r5, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 800d27e:	6847      	ldr	r7, [r0, #4]
{
 800d280:	b086      	sub	sp, #24
 800d282:	4606      	mov	r6, r0
	k_sem_init(&data->lock, 0, 1);
 800d284:	f105 0818 	add.w	r8, r5, #24
	return z_impl_k_sem_init(sem, initial_count, limit);
 800d288:	2201      	movs	r2, #1
 800d28a:	2100      	movs	r1, #0
 800d28c:	4640      	mov	r0, r8
 800d28e:	f00b fde3 	bl	8018e58 <z_impl_k_sem_init>
	if (!device_is_ready(cfg->bus.bus)) {
 800d292:	68f8      	ldr	r0, [r7, #12]
	data->ds3231 = dev;
 800d294:	602e      	str	r6, [r5, #0]
 800d296:	f00b fd67 	bl	8018d68 <z_device_is_ready>
	if (!device_is_ready(cfg->bus.bus)) {
 800d29a:	b998      	cbnz	r0, 800d2c4 <ds3231_init+0x4c>
		LOG_ERR("I2C device not ready");
 800d29c:	4b4d      	ldr	r3, [pc, #308]	; (800d3d4 <ds3231_init+0x15c>)
			LOG_ERR("INTn/SQW GPIO device not ready");
 800d29e:	9304      	str	r3, [sp, #16]
 800d2a0:	484d      	ldr	r0, [pc, #308]	; (800d3d8 <ds3231_init+0x160>)
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	aa03      	add	r2, sp, #12
 800d2a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			rc = -ENODEV;
 800d2aa:	f06f 0412 	mvn.w	r4, #18
			LOG_ERR("INTn/SQW GPIO device not ready");
 800d2ae:	9303      	str	r3, [sp, #12]
 800d2b0:	f009 fa1a 	bl	80166e8 <z_log_msg2_static_create.constprop.0>
	k_sem_give(&data->lock);
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	f009 f9f3 	bl	80166a0 <k_sem_give>
}
 800d2ba:	ea04 70e4 	and.w	r0, r4, r4, asr #31
 800d2be:	b006      	add	sp, #24
 800d2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t addr = 0;
 800d2c4:	f04f 0a00 	mov.w	sl, #0
	struct ds3231_data *data = dev->data;
 800d2c8:	f8d6 9010 	ldr.w	r9, [r6, #16]
	const struct ds3231_config *cfg = dev->config;
 800d2cc:	6874      	ldr	r4, [r6, #4]
	uint8_t addr = 0;
 800d2ce:	f88d a000 	strb.w	sl, [sp]
 800d2d2:	f009 f9e7 	bl	80166a4 <k_uptime_get_32>
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &data->registers,
 800d2d6:	2313      	movs	r3, #19
	data->syncclock_base = maxim_ds3231_read_syncclock(dev);
 800d2d8:	f8c9 00e8 	str.w	r0, [r9, #232]	; 0xe8
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &data->registers,
 800d2dc:	f109 0204 	add.w	r2, r9, #4
 800d2e0:	4669      	mov	r1, sp
 800d2e2:	f104 000c 	add.w	r0, r4, #12
 800d2e6:	f009 fa02 	bl	80166ee <i2c_write_read_dt.constprop.0>
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	f009 f9da 	bl	80166a4 <k_uptime_get_32>
	if (rc < 0) {
 800d2f0:	4554      	cmp	r4, sl
 800d2f2:	db0d      	blt.n	800d310 <ds3231_init+0x98>
	data->rtc_base = decode_rtc(data);
 800d2f4:	4648      	mov	r0, r9
 800d2f6:	f009 fba1 	bl	8016a3c <decode_rtc>
	rc = sc_ctrl(dev,
 800d2fa:	221b      	movs	r2, #27
	data->rtc_base = decode_rtc(data);
 800d2fc:	e9c9 0a38 	strd	r0, sl, [r9, #224]	; 0xe0
	rc = sc_ctrl(dev,
 800d300:	2104      	movs	r1, #4
 800d302:	4630      	mov	r0, r6
 800d304:	f009 fa1d 	bl	8016742 <sc_ctrl>
	if (rc < 0) {
 800d308:	1e04      	subs	r4, r0, #0
 800d30a:	da0d      	bge.n	800d328 <ds3231_init+0xb0>
		LOG_WRN("Failed to reset config: %d", rc);
 800d30c:	4b33      	ldr	r3, [pc, #204]	; (800d3dc <ds3231_init+0x164>)
 800d30e:	e000      	b.n	800d312 <ds3231_init+0x9a>
		LOG_WRN("Failed to fetch registers: %d", rc);
 800d310:	4b33      	ldr	r3, [pc, #204]	; (800d3e0 <ds3231_init+0x168>)
		LOG_WRN("Failed to reset config: %d", rc);
 800d312:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d316:	2303      	movs	r3, #3
 800d318:	9303      	str	r3, [sp, #12]
 800d31a:	aa03      	add	r2, sp, #12
 800d31c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
				LOG_ERR("Failed to configure ISW callback: %d",
 800d320:	482d      	ldr	r0, [pc, #180]	; (800d3d8 <ds3231_init+0x160>)
 800d322:	f009 f9e1 	bl	80166e8 <z_log_msg2_static_create.constprop.0>
 800d326:	e7c5      	b.n	800d2b4 <ds3231_init+0x3c>
	if (cfg->isw_gpios.port != NULL) {
 800d328:	6978      	ldr	r0, [r7, #20]
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d0c2      	beq.n	800d2b4 <ds3231_init+0x3c>
 800d32e:	f00b fd1b 	bl	8018d68 <z_device_is_ready>
		if (!device_is_ready(cfg->isw_gpios.port)) {
 800d332:	b908      	cbnz	r0, 800d338 <ds3231_init+0xc0>
			LOG_ERR("INTn/SQW GPIO device not ready");
 800d334:	4b2b      	ldr	r3, [pc, #172]	; (800d3e4 <ds3231_init+0x16c>)
 800d336:	e7b2      	b.n	800d29e <ds3231_init+0x26>
		k_timer_init(&data->sync_timer, sync_timer_handler, NULL);
 800d338:	4652      	mov	r2, sl
 800d33a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800d33e:	492a      	ldr	r1, [pc, #168]	; (800d3e8 <ds3231_init+0x170>)
 800d340:	f00b ff1a 	bl	8019178 <k_timer_init>
		k_work_init(&data->alarm_work, alarm_worker);
 800d344:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800d348:	4928      	ldr	r1, [pc, #160]	; (800d3ec <ds3231_init+0x174>)
 800d34a:	f00b fda7 	bl	8018e9c <k_work_init>
		k_work_init(&data->sqw_work, sqw_worker);
 800d34e:	f105 0078 	add.w	r0, r5, #120	; 0x78
 800d352:	4927      	ldr	r1, [pc, #156]	; (800d3f0 <ds3231_init+0x178>)
 800d354:	f00b fda2 	bl	8018e9c <k_work_init>
		k_work_init(&data->sync_work, sync_worker);
 800d358:	f105 0088 	add.w	r0, r5, #136	; 0x88
 800d35c:	4925      	ldr	r1, [pc, #148]	; (800d3f4 <ds3231_init+0x17c>)
 800d35e:	f00b fd9d 	bl	8018e9c <k_work_init>
				   BIT(cfg->isw_gpios.pin));
 800d362:	7e39      	ldrb	r1, [r7, #24]
	return gpio_pin_configure(spec->port,
 800d364:	6978      	ldr	r0, [r7, #20]
 800d366:	2301      	movs	r3, #1
 800d368:	fa03 f401 	lsl.w	r4, r3, r1
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 800d36c:	4b22      	ldr	r3, [pc, #136]	; (800d3f8 <ds3231_init+0x180>)
	callback->pin_mask = pin_mask;
 800d36e:	e9c5 3427 	strd	r3, r4, [r5, #156]	; 0x9c
				  spec->dt_flags | extra_flags);
 800d372:	8b7b      	ldrh	r3, [r7, #26]
	return gpio_pin_configure(spec->port,
 800d374:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
 800d378:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
 800d37a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800d37e:	f013 0f01 	tst.w	r3, #1
 800d382:	6833      	ldr	r3, [r6, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800d384:	bf14      	ite	ne
 800d386:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800d388:	43a3      	biceq	r3, r4
 800d38a:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 800d38c:	f8dc 3000 	ldr.w	r3, [ip]
 800d390:	4798      	blx	r3
		if (rc >= 0) {
 800d392:	1e04      	subs	r4, r0, #0
 800d394:	db8e      	blt.n	800d2b4 <ds3231_init+0x3c>
			rc = gpio_pin_interrupt_configure_dt(&cfg->isw_gpios,
 800d396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d39a:	f107 0014 	add.w	r0, r7, #20
 800d39e:	f009 f958 	bl	8016652 <gpio_pin_interrupt_configure_dt>
		if (rc >= 0) {
 800d3a2:	1e04      	subs	r4, r0, #0
 800d3a4:	db86      	blt.n	800d2b4 <ds3231_init+0x3c>
			rc = gpio_add_callback(cfg->isw_gpios.port,
 800d3a6:	6978      	ldr	r0, [r7, #20]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 800d3a8:	6883      	ldr	r3, [r0, #8]
 800d3aa:	69db      	ldr	r3, [r3, #28]
 800d3ac:	b17b      	cbz	r3, 800d3ce <ds3231_init+0x156>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f105 0198 	add.w	r1, r5, #152	; 0x98
 800d3b4:	4798      	blx	r3
			if (rc < 0) {
 800d3b6:	1e04      	subs	r4, r0, #0
 800d3b8:	f6bf af7c 	bge.w	800d2b4 <ds3231_init+0x3c>
				LOG_ERR("Failed to configure ISW callback: %d",
 800d3bc:	4b0f      	ldr	r3, [pc, #60]	; (800d3fc <ds3231_init+0x184>)
 800d3be:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	9303      	str	r3, [sp, #12]
 800d3c6:	aa03      	add	r2, sp, #12
 800d3c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800d3cc:	e7a8      	b.n	800d320 <ds3231_init+0xa8>
		return -ENOTSUP;
 800d3ce:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800d3d2:	e7f3      	b.n	800d3bc <ds3231_init+0x144>
 800d3d4:	0801c5e1 	.word	0x0801c5e1
 800d3d8:	08019f80 	.word	0x08019f80
 800d3dc:	0801c614 	.word	0x0801c614
 800d3e0:	0801c5f6 	.word	0x0801c5f6
 800d3e4:	0801c62f 	.word	0x0801c62f
 800d3e8:	0800cde1 	.word	0x0800cde1
 800d3ec:	0800ceb1 	.word	0x0800ceb1
 800d3f0:	080166b5 	.word	0x080166b5
 800d3f4:	0800d061 	.word	0x0800d061
 800d3f8:	080166b9 	.word	0x080166b9
 800d3fc:	0801c64e 	.word	0x0801c64e

0800d400 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800d400:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800d402:	4b08      	ldr	r3, [pc, #32]	; (800d424 <uart_console_init+0x24>)
 800d404:	4808      	ldr	r0, [pc, #32]	; (800d428 <uart_console_init+0x28>)
 800d406:	6018      	str	r0, [r3, #0]
 800d408:	f00b fcae 	bl	8018d68 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 800d40c:	b138      	cbz	r0, 800d41e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 800d40e:	4807      	ldr	r0, [pc, #28]	; (800d42c <uart_console_init+0x2c>)
 800d410:	f7f8 f8f0 	bl	80055f4 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800d414:	4805      	ldr	r0, [pc, #20]	; (800d42c <uart_console_init+0x2c>)
 800d416:	f7f5 ff35 	bl	8003284 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 800d41a:	2000      	movs	r0, #0
}
 800d41c:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800d41e:	f06f 0012 	mvn.w	r0, #18
 800d422:	e7fb      	b.n	800d41c <uart_console_init+0x1c>
 800d424:	200021b4 	.word	0x200021b4
 800d428:	08019c68 	.word	0x08019c68
 800d42c:	0800d431 	.word	0x0800d431

0800d430 <console_out>:
	if ('\n' == c) {
 800d430:	280a      	cmp	r0, #10
{
 800d432:	b538      	push	{r3, r4, r5, lr}
 800d434:	4d07      	ldr	r5, [pc, #28]	; (800d454 <console_out+0x24>)
 800d436:	4604      	mov	r4, r0
	if ('\n' == c) {
 800d438:	d104      	bne.n	800d444 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 800d43a:	6828      	ldr	r0, [r5, #0]
 800d43c:	6883      	ldr	r3, [r0, #8]
 800d43e:	210d      	movs	r1, #13
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 800d444:	6828      	ldr	r0, [r5, #0]
 800d446:	6883      	ldr	r3, [r0, #8]
 800d448:	b2e1      	uxtb	r1, r4
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	4798      	blx	r3
}
 800d44e:	4620      	mov	r0, r4
 800d450:	bd38      	pop	{r3, r4, r5, pc}
 800d452:	bf00      	nop
 800d454:	200021b4 	.word	0x200021b4

0800d458 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800d458:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 800d45a:	6903      	ldr	r3, [r0, #16]
 800d45c:	6058      	str	r0, [r3, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 800d45e:	6845      	ldr	r5, [r0, #4]
 800d460:	350c      	adds	r5, #12
 800d462:	4c08      	ldr	r4, [pc, #32]	; (800d484 <gpio_stm32_init+0x2c>)
 800d464:	4620      	mov	r0, r4
 800d466:	f00b fc7f 	bl	8018d68 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800d46a:	b138      	cbz	r0, 800d47c <gpio_stm32_init+0x24>
	return api->on(dev, sys);
 800d46c:	68a3      	ldr	r3, [r4, #8]
 800d46e:	4629      	mov	r1, r5
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4620      	mov	r0, r4
 800d474:	4798      	blx	r3

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800d476:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 800d47c:	f06f 0012 	mvn.w	r0, #18
 800d480:	e7f9      	b.n	800d476 <gpio_stm32_init+0x1e>
 800d482:	bf00      	nop
 800d484:	08019bd8 	.word	0x08019bd8

0800d488 <gpio_stm32_pin_interrupt_configure>:
{
 800d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 800d48e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 800d492:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800d494:	6902      	ldr	r2, [r0, #16]
{
 800d496:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800d498:	d124      	bne.n	800d4e4 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800d49a:	f004 0303 	and.w	r3, r4, #3
 800d49e:	3304      	adds	r3, #4
 800d4a0:	009a      	lsls	r2, r3, #2
 800d4a2:	230f      	movs	r3, #15
 800d4a4:	4093      	lsls	r3, r2
 800d4a6:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT)) >> POSITION_VAL(Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT));
 800d4aa:	f003 0203 	and.w	r2, r3, #3
 800d4ae:	492f      	ldr	r1, [pc, #188]	; (800d56c <gpio_stm32_pin_interrupt_configure+0xe4>)
 800d4b0:	3202      	adds	r2, #2
 800d4b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d4b6:	0c19      	lsrs	r1, r3, #16
 800d4b8:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4bc:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800d4c0:	fab2 f282 	clz	r2, r2
 800d4c4:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800d4c6:	68ba      	ldr	r2, [r7, #8]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d109      	bne.n	800d4e0 <gpio_stm32_pin_interrupt_configure+0x58>
			stm32_exti_disable(pin);
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f7fe fedf 	bl	800c290 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f7fe ff32 	bl	800c33c <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f7fe fee8 	bl	800c2b0 <stm32_exti_trigger>
	int err = 0;
 800d4e0:	2500      	movs	r5, #0
 800d4e2:	e037      	b.n	800d554 <gpio_stm32_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
 800d4e4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800d4e8:	d03a      	beq.n	800d560 <gpio_stm32_pin_interrupt_configure+0xd8>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800d4ea:	4921      	ldr	r1, [pc, #132]	; (800d570 <gpio_stm32_pin_interrupt_configure+0xe8>)
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f7fe ff13 	bl	800c318 <stm32_exti_set_callback>
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	bbb8      	cbnz	r0, 800d566 <gpio_stm32_pin_interrupt_configure+0xde>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800d4f6:	f004 0303 	and.w	r3, r4, #3
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	009a      	lsls	r2, r3, #2
 800d4fe:	230f      	movs	r3, #15
 800d500:	4093      	lsls	r3, r2
 800d502:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT), (Port << ((POSITION_VAL((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT))) & 0x0000000FUL)));
 800d506:	f003 0203 	and.w	r2, r3, #3
 800d50a:	0092      	lsls	r2, r2, #2
 800d50c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800d510:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	LL_SYSCFG_SetEXTISource(port, line);
 800d514:	68b8      	ldr	r0, [r7, #8]
 800d516:	6897      	ldr	r7, [r2, #8]
 800d518:	0c19      	lsrs	r1, r3, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d51a:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 800d51e:	fab1 f181 	clz	r1, r1
 800d522:	f001 010f 	and.w	r1, r1, #15
 800d526:	ea27 4313 	bic.w	r3, r7, r3, lsr #16
 800d52a:	fa00 f101 	lsl.w	r1, r0, r1
 800d52e:	430b      	orrs	r3, r1
	switch (trig) {
 800d530:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 800d534:	6093      	str	r3, [r2, #8]
 800d536:	d00f      	beq.n	800d558 <gpio_stm32_pin_interrupt_configure+0xd0>
 800d538:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 800d53c:	d00e      	beq.n	800d55c <gpio_stm32_pin_interrupt_configure+0xd4>
 800d53e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800d542:	bf14      	ite	ne
 800d544:	2100      	movne	r1, #0
 800d546:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800d548:	4620      	mov	r0, r4
 800d54a:	f7fe feb1 	bl	800c2b0 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800d54e:	4620      	mov	r0, r4
 800d550:	f7fe fe8e 	bl	800c270 <stm32_exti_enable>
}
 800d554:	4628      	mov	r0, r5
 800d556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 800d558:	2101      	movs	r1, #1
 800d55a:	e7f5      	b.n	800d548 <gpio_stm32_pin_interrupt_configure+0xc0>
		edge = STM32_EXTI_TRIG_BOTH;
 800d55c:	2103      	movs	r1, #3
 800d55e:	e7f3      	b.n	800d548 <gpio_stm32_pin_interrupt_configure+0xc0>
		err = -ENOTSUP;
 800d560:	f06f 0585 	mvn.w	r5, #133	; 0x85
 800d564:	e7f6      	b.n	800d554 <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -EBUSY;
 800d566:	f06f 050f 	mvn.w	r5, #15
	return err;
 800d56a:	e7f3      	b.n	800d554 <gpio_stm32_pin_interrupt_configure+0xcc>
 800d56c:	40010000 	.word	0x40010000
 800d570:	08016d2d 	.word	0x08016d2d

0800d574 <msg_init>:
#define STM32_I2C_TRANSFER_TIMEOUT_MSEC  500

static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
			    uint8_t *next_msg_flags, uint16_t slave,
			    uint32_t transfer)
{
 800d574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d576:	4606      	mov	r6, r0
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
	I2C_TypeDef *i2c = cfg->i2c;
 800d578:	6840      	ldr	r0, [r0, #4]
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800d57a:	684d      	ldr	r5, [r1, #4]
 800d57c:	68c4      	ldr	r4, [r0, #12]
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800d57e:	6860      	ldr	r0, [r4, #4]
 800d580:	01c0      	lsls	r0, r0, #7
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800d582:	ea4f 4505 	mov.w	r5, r5, lsl #16
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800d586:	d505      	bpl.n	800d594 <msg_init+0x20>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800d588:	6863      	ldr	r3, [r4, #4]
 800d58a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800d58e:	432b      	orrs	r3, r5
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800d590:	6063      	str	r3, [r4, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 800d592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 800d594:	6930      	ldr	r0, [r6, #16]
 800d596:	4f1d      	ldr	r7, [pc, #116]	; (800d60c <msg_init+0x98>)
 800d598:	6b00      	ldr	r0, [r0, #48]	; 0x30
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800d59a:	6866      	ldr	r6, [r4, #4]
 800d59c:	f010 0f01 	tst.w	r0, #1
 800d5a0:	d028      	beq.n	800d5f4 <msg_init+0x80>
 800d5a2:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 800d5a6:	6066      	str	r6, [r4, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800d5a8:	6860      	ldr	r0, [r4, #4]
 800d5aa:	4038      	ands	r0, r7
 800d5ac:	4318      	orrs	r0, r3
 800d5ae:	6060      	str	r0, [r4, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 800d5b0:	7a0b      	ldrb	r3, [r1, #8]
 800d5b2:	0799      	lsls	r1, r3, #30
 800d5b4:	d426      	bmi.n	800d604 <msg_init+0x90>
 800d5b6:	b32a      	cbz	r2, 800d604 <msg_init+0x90>
 800d5b8:	7813      	ldrb	r3, [r2, #0]
 800d5ba:	075b      	lsls	r3, r3, #29
 800d5bc:	d422      	bmi.n	800d604 <msg_init+0x90>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800d5be:	6863      	ldr	r3, [r4, #4]
 800d5c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800d5c4:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800d5c6:	6863      	ldr	r3, [r4, #4]
 800d5c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d5cc:	6063      	str	r3, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800d5ce:	6862      	ldr	r2, [r4, #4]
 800d5d0:	9b05      	ldr	r3, [sp, #20]
 800d5d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5d6:	431a      	orrs	r2, r3
 800d5d8:	6062      	str	r2, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800d5da:	6863      	ldr	r3, [r4, #4]
 800d5dc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800d5e0:	432b      	orrs	r3, r5
 800d5e2:	6063      	str	r3, [r4, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	f043 0301 	orr.w	r3, r3, #1
 800d5ea:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800d5ec:	6863      	ldr	r3, [r4, #4]
 800d5ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d5f2:	e7cd      	b.n	800d590 <msg_init+0x1c>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800d5f4:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 800d5f8:	6066      	str	r6, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800d5fa:	6860      	ldr	r0, [r4, #4]
 800d5fc:	4038      	ands	r0, r7
 800d5fe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d602:	e7d4      	b.n	800d5ae <msg_init+0x3a>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800d604:	6863      	ldr	r3, [r4, #4]
 800d606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d60a:	e7db      	b.n	800d5c4 <msg_init+0x50>
 800d60c:	fffffc00 	.word	0xfffffc00

0800d610 <stm32_i2c_configure_timing>:
	return msg_done(dev, msg->flags);
}
#endif

int stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 800d614:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800d616:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800d61a:	f8d7 800c 	ldr.w	r8, [r7, #12]
{
 800d61e:	b087      	sub	sp, #28
 800d620:	460c      	mov	r4, r1
	uint32_t i2c_h_min_time, i2c_l_min_time;
	uint32_t presc = 1U;
	uint32_t timing = 0U;

	/*  Look for an adequate preset timing value */
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 800d622:	2500      	movs	r5, #0
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	42ab      	cmp	r3, r5
 800d628:	d83d      	bhi.n	800d6a6 <stm32_i2c_configure_timing+0x96>
			return 0;
		}
	}

	/* No preset timing was provided, let's dynamically configure */
	switch (I2C_SPEED_GET(data->dev_config)) {
 800d62a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800d62e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800d632:	2b01      	cmp	r3, #1
 800d634:	d07c      	beq.n	800d730 <stm32_i2c_configure_timing+0x120>
 800d636:	2b02      	cmp	r3, #2
 800d638:	f040 8086 	bne.w	800d748 <stm32_i2c_configure_timing+0x138>
 800d63c:	f240 5014 	movw	r0, #1300	; 0x514
 800d640:	f44f 7616 	mov.w	r6, #600	; 0x258
 800d644:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800d648:	f240 1777 	movw	r7, #375	; 0x177
	}

	/* Calculate period until prescaler matches */
	do {
		uint32_t t_presc = clock / presc;
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800d64c:	f8df c100 	ldr.w	ip, [pc, #256]	; 800d750 <stm32_i2c_configure_timing+0x140>
	switch (I2C_SPEED_GET(data->dev_config)) {
 800d650:	2102      	movs	r1, #2
		uint32_t t_presc = clock / presc;
 800d652:	1e4b      	subs	r3, r1, #1
 800d654:	fbb4 f3f3 	udiv	r3, r4, r3
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800d658:	fbbc f3f3 	udiv	r3, ip, r3
		uint32_t sclh = i2c_h_min_time / ns_presc;
 800d65c:	fbb6 fef3 	udiv	lr, r6, r3
		uint32_t scll = i2c_l_min_time / ns_presc;
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
		uint32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800d660:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800d664:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800d668:	d86b      	bhi.n	800d742 <stm32_i2c_configure_timing+0x132>
		uint32_t scll = i2c_l_min_time / ns_presc;
 800d66a:	fbb0 f9f3 	udiv	r9, r0, r3
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800d66e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d672:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d676:	d864      	bhi.n	800d742 <stm32_i2c_configure_timing+0x132>
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
 800d678:	fbb7 f2f3 	udiv	r2, r7, r3
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 800d67c:	2a0f      	cmp	r2, #15
 800d67e:	d860      	bhi.n	800d742 <stm32_i2c_configure_timing+0x132>
		uint32_t scldel = i2c_setup_time_min / ns_presc;
 800d680:	fbb5 f3f3 	udiv	r3, r5, r3
		if (sdadel > 15 || (scldel - 1) > 15) {
 800d684:	3b01      	subs	r3, #1
 800d686:	2b0f      	cmp	r3, #15
 800d688:	d85b      	bhi.n	800d742 <stm32_i2c_configure_timing+0x132>
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 800d68a:	0412      	lsls	r2, r2, #16
 800d68c:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 800d690:	ea43 0309 	orr.w	r3, r3, r9
 800d694:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800d698:	3902      	subs	r1, #2
 800d69a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800d69e:	f8c8 3010 	str.w	r3, [r8, #16]
		return -EINVAL;
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	e02c      	b.n	800d700 <stm32_i2c_configure_timing+0xf0>
		const struct i2c_config_timing *preset = &cfg->timings[i];
 800d6a6:	f8d7 b018 	ldr.w	fp, [r7, #24]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 800d6aa:	4a2a      	ldr	r2, [pc, #168]	; (800d754 <stm32_i2c_configure_timing+0x144>)
 800d6ac:	260c      	movs	r6, #12
 800d6ae:	436e      	muls	r6, r5
 800d6b0:	eb0b 0a06 	add.w	sl, fp, r6
		uint32_t speed = i2c_map_dt_bitrate(preset->i2c_speed);
 800d6b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d02f      	beq.n	800d71c <stm32_i2c_configure_timing+0x10c>
 800d6bc:	d823      	bhi.n	800d706 <stm32_i2c_configure_timing+0xf6>
 800d6be:	4a26      	ldr	r2, [pc, #152]	; (800d758 <stm32_i2c_configure_timing+0x148>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d02d      	beq.n	800d720 <stm32_i2c_configure_timing+0x110>
 800d6c4:	4a25      	ldr	r2, [pc, #148]	; (800d75c <stm32_i2c_configure_timing+0x14c>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d02c      	beq.n	800d724 <stm32_i2c_configure_timing+0x114>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 800d6ca:	4b25      	ldr	r3, [pc, #148]	; (800d760 <stm32_i2c_configure_timing+0x150>)
 800d6cc:	9304      	str	r3, [sp, #16]
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	9303      	str	r3, [sp, #12]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	4823      	ldr	r0, [pc, #140]	; (800d764 <stm32_i2c_configure_timing+0x154>)
 800d6d6:	aa03      	add	r2, sp, #12
 800d6d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d6dc:	f006 fd79 	bl	80141d2 <z_impl_z_log_msg2_static_create>

	return 0;
 800d6e0:	2300      	movs	r3, #0
		if ((I2C_SPEED_GET(speed) == I2C_SPEED_GET(data->dev_config))
 800d6e2:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 800d6e6:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800d6ea:	ea90 0053 	eors.w	r0, r0, r3, lsr #1
 800d6ee:	d11d      	bne.n	800d72c <stm32_i2c_configure_timing+0x11c>
		   && (preset->periph_clock == clock)) {
 800d6f0:	f85b 3006 	ldr.w	r3, [fp, r6]
 800d6f4:	42a3      	cmp	r3, r4
 800d6f6:	d119      	bne.n	800d72c <stm32_i2c_configure_timing+0x11c>
			LL_I2C_SetTiming(i2c, preset->timing_setting);
 800d6f8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d6fc:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800d700:	b007      	add	sp, #28
 800d702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bitrate) {
 800d706:	4a18      	ldr	r2, [pc, #96]	; (800d768 <stm32_i2c_configure_timing+0x158>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d00d      	beq.n	800d728 <stm32_i2c_configure_timing+0x118>
 800d70c:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800d710:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800d714:	4293      	cmp	r3, r2
 800d716:	d1d8      	bne.n	800d6ca <stm32_i2c_configure_timing+0xba>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800d718:	230a      	movs	r3, #10
 800d71a:	e7e2      	b.n	800d6e2 <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800d71c:	2306      	movs	r3, #6
 800d71e:	e7e0      	b.n	800d6e2 <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800d720:	2302      	movs	r3, #2
 800d722:	e7de      	b.n	800d6e2 <stm32_i2c_configure_timing+0xd2>
	switch (bitrate) {
 800d724:	2304      	movs	r3, #4
 800d726:	e7dc      	b.n	800d6e2 <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800d728:	2308      	movs	r3, #8
 800d72a:	e7da      	b.n	800d6e2 <stm32_i2c_configure_timing+0xd2>
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 800d72c:	3501      	adds	r5, #1
 800d72e:	e779      	b.n	800d624 <stm32_i2c_configure_timing+0x14>
		i2c_l_min_time = 4700U;
 800d730:	f241 205c 	movw	r0, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 800d734:	f44f 667a 	mov.w	r6, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 800d738:	f240 45e2 	movw	r5, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 800d73c:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800d740:	e784      	b.n	800d64c <stm32_i2c_configure_timing+0x3c>
	} while (presc < 16);
 800d742:	3101      	adds	r1, #1
 800d744:	2911      	cmp	r1, #17
 800d746:	d184      	bne.n	800d652 <stm32_i2c_configure_timing+0x42>
	switch (I2C_SPEED_GET(data->dev_config)) {
 800d748:	f06f 0015 	mvn.w	r0, #21
 800d74c:	e7d8      	b.n	800d700 <stm32_i2c_configure_timing+0xf0>
 800d74e:	bf00      	nop
 800d750:	3b9aca00 	.word	0x3b9aca00
 800d754:	000f4240 	.word	0x000f4240
 800d758:	000186a0 	.word	0x000186a0
 800d75c:	00061a80 	.word	0x00061a80
 800d760:	0801c683 	.word	0x0801c683
 800d764:	08019fd0 	.word	0x08019fd0
 800d768:	0033e140 	.word	0x0033e140

0800d76c <i2c_stm32_runtime_configure>:
LOG_MODULE_REGISTER(i2c_ll_stm32);

#include "i2c-priv.h"

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 800d76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 800d770:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800d772:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800d776:	68fe      	ldr	r6, [r7, #12]
{
 800d778:	b089      	sub	sp, #36	; 0x24
	uint32_t clock = 0U;
 800d77a:	2200      	movs	r2, #0
{
 800d77c:	4605      	mov	r5, r0
 800d77e:	460c      	mov	r4, r1
	uint32_t clock = 0U;
 800d780:	9201      	str	r2, [sp, #4]
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 800d782:	3704      	adds	r7, #4
 800d784:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800d800 <i2c_stm32_runtime_configure+0x94>
 800d788:	4640      	mov	r0, r8
 800d78a:	f00b faed 	bl	8018d68 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 800d78e:	b980      	cbnz	r0, 800d7b2 <i2c_stm32_runtime_configure+0x46>
		LOG_ERR("Failed call clock_control_get_rate");
 800d790:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <i2c_stm32_runtime_configure+0x98>)
 800d792:	9306      	str	r3, [sp, #24]
 800d794:	2302      	movs	r3, #2
 800d796:	9305      	str	r3, [sp, #20]
 800d798:	481b      	ldr	r0, [pc, #108]	; (800d808 <i2c_stm32_runtime_configure+0x9c>)
 800d79a:	2300      	movs	r3, #0
 800d79c:	aa05      	add	r2, sp, #20
 800d79e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800d7a2:	f06f 0504 	mvn.w	r5, #4
 800d7a6:	f006 fd14 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
	ret = stm32_i2c_configure_timing(dev, clock);
	k_sem_give(&data->bus_mutex);

	return ret;
}
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	b009      	add	sp, #36	; 0x24
 800d7ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800d7b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d0e9      	beq.n	800d790 <i2c_stm32_runtime_configure+0x24>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800d7bc:	aa01      	add	r2, sp, #4
 800d7be:	4639      	mov	r1, r7
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	dbe3      	blt.n	800d790 <i2c_stm32_runtime_configure+0x24>
	data->dev_config = config;
 800d7c8:	f8c9 4030 	str.w	r4, [r9, #48]	; 0x30
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800d7cc:	f109 0918 	add.w	r9, r9, #24
	return z_impl_k_sem_take(sem, timeout);
 800d7d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7d8:	4648      	mov	r0, r9
 800d7da:	f002 fd13 	bl	8010204 <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800d7de:	6833      	ldr	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 800d7e0:	9901      	ldr	r1, [sp, #4]
 800d7e2:	f023 0301 	bic.w	r3, r3, #1
 800d7e6:	6033      	str	r3, [r6, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800d7e8:	6833      	ldr	r3, [r6, #0]
 800d7ea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d7ee:	6033      	str	r3, [r6, #0]
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f7ff ff0d 	bl	800d610 <stm32_i2c_configure_timing>
 800d7f6:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800d7f8:	4648      	mov	r0, r9
 800d7fa:	f002 fcdd 	bl	80101b8 <z_impl_k_sem_give>
}
 800d7fe:	e7d4      	b.n	800d7aa <i2c_stm32_runtime_configure+0x3e>
 800d800:	08019bd8 	.word	0x08019bd8
 800d804:	0801c6ae 	.word	0x0801c6ae
 800d808:	08019fc8 	.word	0x08019fc8

0800d80c <i2c_stm32_init>:
	.slave_unregister = i2c_stm32_slave_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 800d80c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = dev->config;
 800d80e:	6845      	ldr	r5, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = dev->data;
 800d810:	6906      	ldr	r6, [r0, #16]
{
 800d812:	b087      	sub	sp, #28
 800d814:	4607      	mov	r7, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 800d816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d81a:	2100      	movs	r1, #0
 800d81c:	4630      	mov	r0, r6
 800d81e:	f00b fb1b 	bl	8018e58 <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 800d822:	682b      	ldr	r3, [r5, #0]
 800d824:	4638      	mov	r0, r7
 800d826:	4798      	blx	r3
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800d828:	6968      	ldr	r0, [r5, #20]
 800d82a:	466a      	mov	r2, sp
 800d82c:	2100      	movs	r1, #0
 800d82e:	f00a f87a 	bl	8017926 <pinctrl_lookup_state>
	if (ret < 0) {
 800d832:	1e04      	subs	r4, r0, #0
 800d834:	db07      	blt.n	800d846 <i2c_stm32_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800d836:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800d838:	2200      	movs	r2, #0
 800d83a:	7919      	ldrb	r1, [r3, #4]
 800d83c:	6818      	ldr	r0, [r3, #0]
 800d83e:	f001 f977 	bl	800eb30 <pinctrl_configure_pins>
#endif

	/* Configure dt provided device signals when available */
	ret = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 800d842:	1e04      	subs	r4, r0, #0
 800d844:	da0e      	bge.n	800d864 <i2c_stm32_init+0x58>
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 800d846:	4b37      	ldr	r3, [pc, #220]	; (800d924 <i2c_stm32_init+0x118>)
 800d848:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d84c:	2303      	movs	r3, #3
 800d84e:	9303      	str	r3, [sp, #12]
 800d850:	4835      	ldr	r0, [pc, #212]	; (800d928 <i2c_stm32_init+0x11c>)
 800d852:	2300      	movs	r3, #0
 800d854:	aa03      	add	r2, sp, #12
 800d856:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800d85a:	f006 fcba 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 800d85e:	4620      	mov	r0, r4
 800d860:	b007      	add	sp, #28
 800d862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d864:	2201      	movs	r2, #1
 800d866:	4611      	mov	r1, r2
 800d868:	f106 0018 	add.w	r0, r6, #24
 800d86c:	f00b faf4 	bl	8018e58 <z_impl_k_sem_init>
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
 800d870:	1d2e      	adds	r6, r5, #4
 800d872:	4c2e      	ldr	r4, [pc, #184]	; (800d92c <i2c_stm32_init+0x120>)
 800d874:	4620      	mov	r0, r4
 800d876:	f00b fa77 	bl	8018d68 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800d87a:	b968      	cbnz	r0, 800d898 <i2c_stm32_init+0x8c>
		LOG_ERR("i2c: failure enabling clock");
 800d87c:	4b2c      	ldr	r3, [pc, #176]	; (800d930 <i2c_stm32_init+0x124>)
 800d87e:	9304      	str	r3, [sp, #16]
 800d880:	2302      	movs	r3, #2
 800d882:	9303      	str	r3, [sp, #12]
 800d884:	4828      	ldr	r0, [pc, #160]	; (800d928 <i2c_stm32_init+0x11c>)
 800d886:	2300      	movs	r3, #0
 800d888:	aa03      	add	r2, sp, #12
 800d88a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d88e:	f006 fca0 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		return -EIO;
 800d892:	f06f 0404 	mvn.w	r4, #4
 800d896:	e7e2      	b.n	800d85e <i2c_stm32_init+0x52>
	return api->on(dev, sys);
 800d898:	68a3      	ldr	r3, [r4, #8]
 800d89a:	4620      	mov	r0, r4
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4631      	mov	r1, r6
 800d8a0:	4798      	blx	r3
	if (clock_control_on(clock,
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d1e9      	bne.n	800d87c <i2c_stm32_init+0x70>
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 800d8a8:	692b      	ldr	r3, [r5, #16]
	switch (bitrate) {
 800d8aa:	4a22      	ldr	r2, [pc, #136]	; (800d934 <i2c_stm32_init+0x128>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d031      	beq.n	800d914 <i2c_stm32_init+0x108>
 800d8b0:	d825      	bhi.n	800d8fe <i2c_stm32_init+0xf2>
 800d8b2:	4a21      	ldr	r2, [pc, #132]	; (800d938 <i2c_stm32_init+0x12c>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d02f      	beq.n	800d918 <i2c_stm32_init+0x10c>
 800d8b8:	4a20      	ldr	r2, [pc, #128]	; (800d93c <i2c_stm32_init+0x130>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d02e      	beq.n	800d91c <i2c_stm32_init+0x110>
	LOG_ERR("Invalid I2C bit rate value");
 800d8be:	4b20      	ldr	r3, [pc, #128]	; (800d940 <i2c_stm32_init+0x134>)
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	2302      	movs	r3, #2
 800d8c4:	9303      	str	r3, [sp, #12]
 800d8c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d8ca:	4817      	ldr	r0, [pc, #92]	; (800d928 <i2c_stm32_init+0x11c>)
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	aa03      	add	r2, sp, #12
 800d8d0:	f006 fc7f 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	return 0;
 800d8d4:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 800d8d6:	f041 0110 	orr.w	r1, r1, #16
 800d8da:	4638      	mov	r0, r7
 800d8dc:	f7ff ff46 	bl	800d76c <i2c_stm32_runtime_configure>
	if (ret < 0) {
 800d8e0:	1e05      	subs	r5, r0, #0
 800d8e2:	dabc      	bge.n	800d85e <i2c_stm32_init+0x52>
		LOG_ERR("i2c: failure initializing");
 800d8e4:	4b17      	ldr	r3, [pc, #92]	; (800d944 <i2c_stm32_init+0x138>)
 800d8e6:	9304      	str	r3, [sp, #16]
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	9303      	str	r3, [sp, #12]
 800d8ec:	480e      	ldr	r0, [pc, #56]	; (800d928 <i2c_stm32_init+0x11c>)
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	aa03      	add	r2, sp, #12
 800d8f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d8f6:	f006 fc6c 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		return ret;
 800d8fa:	462c      	mov	r4, r5
 800d8fc:	e7af      	b.n	800d85e <i2c_stm32_init+0x52>
	switch (bitrate) {
 800d8fe:	4a12      	ldr	r2, [pc, #72]	; (800d948 <i2c_stm32_init+0x13c>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d00d      	beq.n	800d920 <i2c_stm32_init+0x114>
 800d904:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800d908:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d1d6      	bne.n	800d8be <i2c_stm32_init+0xb2>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800d910:	210a      	movs	r1, #10
 800d912:	e7e0      	b.n	800d8d6 <i2c_stm32_init+0xca>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800d914:	2106      	movs	r1, #6
 800d916:	e7de      	b.n	800d8d6 <i2c_stm32_init+0xca>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800d918:	2102      	movs	r1, #2
 800d91a:	e7dc      	b.n	800d8d6 <i2c_stm32_init+0xca>
	switch (bitrate) {
 800d91c:	2104      	movs	r1, #4
 800d91e:	e7da      	b.n	800d8d6 <i2c_stm32_init+0xca>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800d920:	2108      	movs	r1, #8
 800d922:	e7d8      	b.n	800d8d6 <i2c_stm32_init+0xca>
 800d924:	0801c6d1 	.word	0x0801c6d1
 800d928:	08019fc8 	.word	0x08019fc8
 800d92c:	08019bd8 	.word	0x08019bd8
 800d930:	0801c6ef 	.word	0x0801c6ef
 800d934:	000f4240 	.word	0x000f4240
 800d938:	000186a0 	.word	0x000186a0
 800d93c:	00061a80 	.word	0x00061a80
 800d940:	0801c683 	.word	0x0801c683
 800d944:	0801c70b 	.word	0x0801c70b
 800d948:	0033e140 	.word	0x0033e140

0800d94c <bme280_channel_get>:
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme280_data *data = dev->data;

	switch (chan) {
 800d94c:	290e      	cmp	r1, #14
{
 800d94e:	b510      	push	{r4, lr}
	struct bme280_data *data = dev->data;
 800d950:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
 800d952:	d010      	beq.n	800d976 <bme280_channel_get+0x2a>
 800d954:	2910      	cmp	r1, #16
 800d956:	d01d      	beq.n	800d994 <bme280_channel_get+0x48>
 800d958:	290d      	cmp	r1, #13
 800d95a:	d124      	bne.n	800d9a6 <bme280_channel_get+0x5a>
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->comp_temp has a resolution of 0.01 degC.  So
		 * 5123 equals 51.23 degC.
		 */
		val->val1 = data->comp_temp / 100;
 800d95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95e:	2064      	movs	r0, #100	; 0x64
 800d960:	fb93 f1f0 	sdiv	r1, r3, r0
		val->val2 = data->comp_temp % 100 * 10000;
 800d964:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = data->comp_temp / 100;
 800d968:	6011      	str	r1, [r2, #0]
		val->val2 = data->comp_temp % 100 * 10000;
 800d96a:	f242 7110 	movw	r1, #10000	; 0x2710
 800d96e:	434b      	muls	r3, r1
		 * data->comp_humidity has 22 integer bits and 10
		 * fractional.  Output value of 47445 represents
		 * 47445/1024 = 46.333 %RH
		 */
		val->val1 = (data->comp_humidity >> 10);
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
 800d970:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
 800d972:	2000      	movs	r0, #0
}
 800d974:	bd10      	pop	{r4, pc}
		val->val1 = (data->comp_press >> 8) / 1000U;
 800d976:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d97c:	0a0b      	lsrs	r3, r1, #8
			(((data->comp_press & 0xff) * 1000U) >> 8);
 800d97e:	b2c9      	uxtb	r1, r1
		val->val1 = (data->comp_press >> 8) / 1000U;
 800d980:	fbb3 f4f0 	udiv	r4, r3, r0
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800d984:	fb00 3314 	mls	r3, r0, r4, r3
			(((data->comp_press & 0xff) * 1000U) >> 8);
 800d988:	4341      	muls	r1, r0
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800d98a:	4343      	muls	r3, r0
		val->val1 = (data->comp_press >> 8) / 1000U;
 800d98c:	6014      	str	r4, [r2, #0]
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800d98e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 800d992:	e7ed      	b.n	800d970 <bme280_channel_get+0x24>
		val->val1 = (data->comp_humidity >> 10);
 800d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d996:	0a99      	lsrs	r1, r3, #10
 800d998:	6011      	str	r1, [r2, #0]
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
 800d99a:	4904      	ldr	r1, [pc, #16]	; (800d9ac <bme280_channel_get+0x60>)
 800d99c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9a0:	434b      	muls	r3, r1
 800d9a2:	0a9b      	lsrs	r3, r3, #10
 800d9a4:	e7e4      	b.n	800d970 <bme280_channel_get+0x24>
	switch (chan) {
 800d9a6:	f06f 0015 	mvn.w	r0, #21
 800d9aa:	e7e3      	b.n	800d974 <bme280_channel_get+0x28>
 800d9ac:	000f4240 	.word	0x000f4240

0800d9b0 <sht3xd_channel_get>:

	/*
	 * See datasheet "Conversion of Signal Output" section
	 * for more details on processing sample data.
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800d9b0:	290d      	cmp	r1, #13
{
 800d9b2:	b570      	push	{r4, r5, r6, lr}
	const struct sht3xd_data *data = dev->data;
 800d9b4:	6903      	ldr	r3, [r0, #16]
{
 800d9b6:	4614      	mov	r4, r2
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800d9b8:	d121      	bne.n	800d9fe <sht3xd_channel_get+0x4e>
		/* val = -45 + 175 * sample / (2^16 -1) */
		tmp = (uint64_t)data->t_sample * 175U;
 800d9ba:	881e      	ldrh	r6, [r3, #0]
 800d9bc:	25af      	movs	r5, #175	; 0xaf
 800d9be:	fba6 6505 	umull	r6, r5, r6, r5
		val->val1 = (int32_t)(tmp / 0xFFFF) - 45;
 800d9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	f7f3 fafc 	bl	8000fc8 <__aeabi_uldivmod>
 800d9d0:	382d      	subs	r0, #45	; 0x2d
 800d9d2:	6020      	str	r0, [r4, #0]
		val->val2 = ((tmp % 0xFFFF) * 1000000U) / 0xFFFF;
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f7f3 faf3 	bl	8000fc8 <__aeabi_uldivmod>
 800d9e2:	4d12      	ldr	r5, [pc, #72]	; (800da2c <sht3xd_channel_get+0x7c>)
 800d9e4:	461e      	mov	r6, r3
 800d9e6:	fba2 0105 	umull	r0, r1, r2, r5
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9f0:	fb05 1106 	mla	r1, r5, r6, r1
 800d9f4:	f7f3 fae8 	bl	8000fc8 <__aeabi_uldivmod>
 800d9f8:	6060      	str	r0, [r4, #4]
		val->val2 = (tmp2 % 0xFFFF) * 15625U / 1024;
	} else {
		return -ENOTSUP;
	}

	return 0;
 800d9fa:	2000      	movs	r0, #0
}
 800d9fc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
 800d9fe:	2910      	cmp	r1, #16
 800da00:	d110      	bne.n	800da24 <sht3xd_channel_get+0x74>
		uint32_t tmp2 = (uint32_t)data->rh_sample * 100U;
 800da02:	885b      	ldrh	r3, [r3, #2]
 800da04:	2264      	movs	r2, #100	; 0x64
 800da06:	4353      	muls	r3, r2
		val->val1 = tmp2 / 0xFFFF;
 800da08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800da0c:	fbb3 f1f1 	udiv	r1, r3, r1
 800da10:	6021      	str	r1, [r4, #0]
		val->val2 = (tmp2 % 0xFFFF) * 15625U / 1024;
 800da12:	ebc1 4101 	rsb	r1, r1, r1, lsl #16
 800da16:	1a5b      	subs	r3, r3, r1
 800da18:	f643 5209 	movw	r2, #15625	; 0x3d09
 800da1c:	4353      	muls	r3, r2
 800da1e:	0a9b      	lsrs	r3, r3, #10
 800da20:	6063      	str	r3, [r4, #4]
 800da22:	e7ea      	b.n	800d9fa <sht3xd_channel_get+0x4a>
		return -ENOTSUP;
 800da24:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800da28:	e7e8      	b.n	800d9fc <sht3xd_channel_get+0x4c>
 800da2a:	bf00      	nop
 800da2c:	000f4240 	.word	0x000f4240

0800da30 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800da30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800da32:	ab0b      	add	r3, sp, #44	; 0x2c
 800da34:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800da36:	9303      	str	r3, [sp, #12]
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800da3a:	9302      	str	r3, [sp, #8]
 800da3c:	2300      	movs	r3, #0
 800da3e:	e9cd 3300 	strd	r3, r3, [sp]
 800da42:	2201      	movs	r2, #1
 800da44:	4618      	mov	r0, r3
 800da46:	f7f6 ff89 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 800da4a:	b007      	add	sp, #28
 800da4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800da50:	0801c732 	.word	0x0801c732

0800da54 <sht3xd_init>:
	.sample_fetch = sht3xd_sample_fetch,
	.channel_get = sht3xd_channel_get,
};

static int sht3xd_init(const struct device *dev)
{
 800da54:	b530      	push	{r4, r5, lr}
	const struct sht3xd_config *cfg = dev->config;
 800da56:	6845      	ldr	r5, [r0, #4]
{
 800da58:	4604      	mov	r4, r0
 800da5a:	b085      	sub	sp, #20

	if (!device_is_ready(cfg->bus.bus)) {
 800da5c:	6828      	ldr	r0, [r5, #0]
 800da5e:	f00b f983 	bl	8018d68 <z_device_is_ready>
 800da62:	4603      	mov	r3, r0
 800da64:	b970      	cbnz	r0, 800da84 <sht3xd_init+0x30>
		LOG_ERR("I2C bus %s is not ready!", cfg->bus.bus->name);
 800da66:	682a      	ldr	r2, [r5, #0]
 800da68:	4914      	ldr	r1, [pc, #80]	; (800dabc <sht3xd_init+0x68>)
 800da6a:	6812      	ldr	r2, [r2, #0]
 800da6c:	9203      	str	r2, [sp, #12]
 800da6e:	4a14      	ldr	r2, [pc, #80]	; (800dac0 <sht3xd_init+0x6c>)
 800da70:	9000      	str	r0, [sp, #0]
 800da72:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f7ff ffda 	bl	800da30 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
 800da7c:	f06f 0015 	mvn.w	r0, #21
		return -EIO;
	}
#endif

	return 0;
}
 800da80:	b005      	add	sp, #20
 800da82:	bd30      	pop	{r4, r5, pc}
	if (sht3xd_write_command(dev, SHT3XD_CMD_CLEAR_STATUS) < 0) {
 800da84:	f243 0141 	movw	r1, #12353	; 0x3041
 800da88:	4620      	mov	r0, r4
 800da8a:	f009 fd9d 	bl	80175c8 <sht3xd_write_command>
 800da8e:	2800      	cmp	r0, #0
 800da90:	da02      	bge.n	800da98 <sht3xd_init+0x44>
		return -EIO;
 800da92:	f06f 0004 	mvn.w	r0, #4
 800da96:	e7f3      	b.n	800da80 <sht3xd_init+0x2c>
	z_impl_k_busy_wait(usec_to_wait);
 800da98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da9c:	f003 f9b0 	bl	8010e00 <z_impl_k_busy_wait>
	if (sht3xd_write_command(dev,
 800daa0:	f242 1130 	movw	r1, #8496	; 0x2130
 800daa4:	4620      	mov	r0, r4
 800daa6:	f009 fd8f 	bl	80175c8 <sht3xd_write_command>
 800daaa:	2800      	cmp	r0, #0
 800daac:	dbf1      	blt.n	800da92 <sht3xd_init+0x3e>
 800daae:	f643 2098 	movw	r0, #15000	; 0x3a98
 800dab2:	f003 f9a5 	bl	8010e00 <z_impl_k_busy_wait>
	return 0;
 800dab6:	2000      	movs	r0, #0
}
 800dab8:	e7e2      	b.n	800da80 <sht3xd_init+0x2c>
 800daba:	bf00      	nop
 800dabc:	08019f88 	.word	0x08019f88
 800dac0:	0801c732 	.word	0x0801c732

0800dac4 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 800dac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 800dac8:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800daca:	6847      	ldr	r7, [r0, #4]
{
 800dacc:	b08c      	sub	sp, #48	; 0x30
 800dace:	4604      	mov	r4, r0
 800dad0:	4d3f      	ldr	r5, [pc, #252]	; (800dbd0 <spi_stm32_init+0x10c>)
 800dad2:	4628      	mov	r0, r5
 800dad4:	f00b f948 	bl	8018d68 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800dad8:	b980      	cbnz	r0, 800dafc <spi_stm32_init+0x38>
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 800dada:	4b3e      	ldr	r3, [pc, #248]	; (800dbd4 <spi_stm32_init+0x110>)
 800dadc:	930a      	str	r3, [sp, #40]	; 0x28
 800dade:	2302      	movs	r3, #2
 800dae0:	9309      	str	r3, [sp, #36]	; 0x24
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800dae2:	483d      	ldr	r0, [pc, #244]	; (800dbd8 <spi_stm32_init+0x114>)
 800dae4:	2300      	movs	r3, #0
 800dae6:	aa09      	add	r2, sp, #36	; 0x24
 800dae8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800daec:	f06f 0404 	mvn.w	r4, #4
 800daf0:	f006 fb6f 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 800daf4:	4620      	mov	r0, r4
 800daf6:	b00c      	add	sp, #48	; 0x30
 800daf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
 800dafc:	68ab      	ldr	r3, [r5, #8]
 800dafe:	4639      	mov	r1, r7
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4628      	mov	r0, r5
 800db04:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800db06:	2800      	cmp	r0, #0
 800db08:	d1e7      	bne.n	800dada <spi_stm32_init+0x16>
	return cfg->use_subghzspi_nss;
 800db0a:	6863      	ldr	r3, [r4, #4]
	if (!spi_stm32_is_subghzspi(dev)) {
 800db0c:	7c1d      	ldrb	r5, [r3, #16]
 800db0e:	b9dd      	cbnz	r5, 800db48 <spi_stm32_init+0x84>
	ret = pinctrl_lookup_state(config, id, &state);
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	aa06      	add	r2, sp, #24
 800db14:	4629      	mov	r1, r5
 800db16:	f009 ff06 	bl	8017926 <pinctrl_lookup_state>
	if (ret < 0) {
 800db1a:	1e04      	subs	r4, r0, #0
 800db1c:	db07      	blt.n	800db2e <spi_stm32_init+0x6a>
	return pinctrl_apply_state_direct(config, state);
 800db1e:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800db20:	462a      	mov	r2, r5
 800db22:	7919      	ldrb	r1, [r3, #4]
 800db24:	6818      	ldr	r0, [r3, #0]
 800db26:	f001 f803 	bl	800eb30 <pinctrl_configure_pins>
		if (err < 0) {
 800db2a:	1e04      	subs	r4, r0, #0
 800db2c:	da0c      	bge.n	800db48 <spi_stm32_init+0x84>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 800db2e:	4b2b      	ldr	r3, [pc, #172]	; (800dbdc <spi_stm32_init+0x118>)
 800db30:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800db34:	2303      	movs	r3, #3
 800db36:	9309      	str	r3, [sp, #36]	; 0x24
 800db38:	4827      	ldr	r0, [pc, #156]	; (800dbd8 <spi_stm32_init+0x114>)
 800db3a:	2300      	movs	r3, #0
 800db3c:	aa09      	add	r2, sp, #36	; 0x24
 800db3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800db42:	f006 fb46 	bl	80141d2 <z_impl_z_log_msg2_static_create>
			return err;
 800db46:	e7d5      	b.n	800daf4 <spi_stm32_init+0x30>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800db48:	68b5      	ldr	r5, [r6, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800db4a:	2701      	movs	r7, #1
 800db4c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800db50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db54:	429d      	cmp	r5, r3
 800db56:	d304      	bcc.n	800db62 <spi_stm32_init+0x9e>
	spi_context_unlock_unconditionally(&data->ctx);
 800db58:	4630      	mov	r0, r6
 800db5a:	f009 fda5 	bl	80176a8 <spi_context_unlock_unconditionally>
	return 0;
 800db5e:	2400      	movs	r4, #0
 800db60:	e7c8      	b.n	800daf4 <spi_stm32_init+0x30>
		if (!device_is_ready(cs_gpio->port)) {
 800db62:	6828      	ldr	r0, [r5, #0]
 800db64:	f00b f900 	bl	8018d68 <z_device_is_ready>
 800db68:	4603      	mov	r3, r0
 800db6a:	b978      	cbnz	r0, 800db8c <spi_stm32_init+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 800db6c:	792a      	ldrb	r2, [r5, #4]
 800db6e:	9204      	str	r2, [sp, #16]
 800db70:	682a      	ldr	r2, [r5, #0]
 800db72:	4919      	ldr	r1, [pc, #100]	; (800dbd8 <spi_stm32_init+0x114>)
 800db74:	6812      	ldr	r2, [r2, #0]
 800db76:	9203      	str	r2, [sp, #12]
 800db78:	4a19      	ldr	r2, [pc, #100]	; (800dbe0 <spi_stm32_init+0x11c>)
 800db7a:	9000      	str	r0, [sp, #0]
 800db7c:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	f009 fd4b 	bl	801761c <z_log_msg2_runtime_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 800db86:	f06f 0412 	mvn.w	r4, #18
 800db8a:	e7b3      	b.n	800daf4 <spi_stm32_init+0x30>
	return gpio_pin_configure(spec->port,
 800db8c:	6828      	ldr	r0, [r5, #0]
 800db8e:	7929      	ldrb	r1, [r5, #4]
				  spec->dt_flags | extra_flags);
 800db90:	88eb      	ldrh	r3, [r5, #6]
	struct gpio_driver_data *data =
 800db92:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 800db96:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800db9a:	f8dc 4000 	ldr.w	r4, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800db9e:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 800dba0:	bf54      	ite	pl
 800dba2:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800dba6:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800dbaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800dbae:	fa07 fe01 	lsl.w	lr, r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800dbb2:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800dbb4:	bf4c      	ite	mi
 800dbb6:	ea4e 0404 	orrmi.w	r4, lr, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800dbba:	ea24 040e 	bicpl.w	r4, r4, lr
 800dbbe:	f8cc 4000 	str.w	r4, [ip]
	return api->pin_configure(port, pin, flags);
 800dbc2:	f8d8 3000 	ldr.w	r3, [r8]
 800dbc6:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 800dbc8:	1e04      	subs	r4, r0, #0
 800dbca:	db93      	blt.n	800daf4 <spi_stm32_init+0x30>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800dbcc:	3508      	adds	r5, #8
 800dbce:	e7bd      	b.n	800db4c <spi_stm32_init+0x88>
 800dbd0:	08019bd8 	.word	0x08019bd8
 800dbd4:	0801c752 	.word	0x0801c752
 800dbd8:	0801a020 	.word	0x0801a020
 800dbdc:	0801c76d 	.word	0x0801c76d
 800dbe0:	0801c78b 	.word	0x0801c78b

0800dbe4 <spi_stm32_transceive>:
{
 800dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe8:	b09b      	sub	sp, #108	; 0x6c
 800dbea:	461e      	mov	r6, r3
 800dbec:	af06      	add	r7, sp, #24
	SPI_TypeDef *spi = cfg->spi;
 800dbee:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800dbf0:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800dbf2:	f8d3 b008 	ldr.w	fp, [r3, #8]
{
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 800dbfa:	4691      	mov	r9, r2
 800dbfc:	b90a      	cbnz	r2, 800dc02 <spi_stm32_transceive+0x1e>
 800dbfe:	2e00      	cmp	r6, #0
 800dc00:	d055      	beq.n	800dcae <spi_stm32_transceive+0xca>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800dc02:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800dc06:	049d      	lsls	r5, r3, #18
 800dc08:	d456      	bmi.n	800dcb8 <spi_stm32_transceive+0xd4>
	return z_impl_k_sem_take(sem, timeout);
 800dc0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc12:	f104 0010 	add.w	r0, r4, #16
 800dc16:	f002 faf5 	bl	8010204 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800dc1a:	f8c4 8004 	str.w	r8, [r4, #4]
	const struct spi_stm32_config *cfg = dev->config;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
	const uint32_t scaler[] = {
 800dc20:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 800dee4 <spi_stm32_transceive+0x300>
	const struct spi_stm32_config *cfg = dev->config;
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	60bb      	str	r3, [r7, #8]
	struct spi_stm32_data *data = dev->data;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	607b      	str	r3, [r7, #4]
	const uint32_t scaler[] = {
 800dc2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc32:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800dc36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc38:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800dc3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4598      	cmp	r8, r3
 800dc46:	f000 80b2 	beq.w	800ddae <spi_stm32_transceive+0x1ca>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800dc4a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800dc4e:	f3c3 1245 	ubfx	r2, r3, #5, #6
 800dc52:	2a08      	cmp	r2, #8
 800dc54:	d002      	beq.n	800dc5c <spi_stm32_transceive+0x78>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 800dc56:	2a10      	cmp	r2, #16
 800dc58:	f040 812d 	bne.w	800deb6 <spi_stm32_transceive+0x2d2>
	SPI_TypeDef *spi = cfg->spi;
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	6895      	ldr	r5, [r2, #8]
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 800dc60:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800dc64:	686b      	ldr	r3, [r5, #4]
 800dc66:	bf14      	ite	ne
 800dc68:	f043 0310 	orrne.w	r3, r3, #16
 800dc6c:	f023 0310 	biceq.w	r3, r3, #16
 800dc70:	606b      	str	r3, [r5, #4]
 800dc72:	f8df a274 	ldr.w	sl, [pc, #628]	; 800dee8 <spi_stm32_transceive+0x304>
 800dc76:	4650      	mov	r0, sl
 800dc78:	f00b f876 	bl	8018d68 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800dc7c:	bb18      	cbnz	r0, 800dcc6 <spi_stm32_transceive+0xe2>
		LOG_ERR("Failed call clock_control_get_rate");
 800dc7e:	4b9b      	ldr	r3, [pc, #620]	; (800deec <spi_stm32_transceive+0x308>)
 800dc80:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc82:	2302      	movs	r3, #2
 800dc84:	627b      	str	r3, [r7, #36]	; 0x24
 800dc86:	489a      	ldr	r0, [pc, #616]	; (800def0 <spi_stm32_transceive+0x30c>)
 800dc88:	2300      	movs	r3, #0
 800dc8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dc8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800dc92:	f06f 0604 	mvn.w	r6, #4
 800dc96:	f006 fa9c 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	889b      	ldrh	r3, [r3, #4]
 800dc9e:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800dca2:	d104      	bne.n	800dcae <spi_stm32_transceive+0xca>
		ctx->owner = NULL;
 800dca4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 800dca6:	f104 0010 	add.w	r0, r4, #16
 800dcaa:	f002 fa85 	bl	80101b8 <z_impl_k_sem_give>
}
 800dcae:	4630      	mov	r0, r6
 800dcb0:	3754      	adds	r7, #84	; 0x54
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800dcb8:	69a3      	ldr	r3, [r4, #24]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1a5      	bne.n	800dc0a <spi_stm32_transceive+0x26>
		(k_sem_count_get(&ctx->lock) == 0) &&
 800dcbe:	6863      	ldr	r3, [r4, #4]
 800dcc0:	4598      	cmp	r8, r3
 800dcc2:	d1a2      	bne.n	800dc0a <spi_stm32_transceive+0x26>
 800dcc4:	e7ab      	b.n	800dc1e <spi_stm32_transceive+0x3a>
	if (api->get_rate == NULL) {
 800dcc6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d0d6      	beq.n	800dc7e <spi_stm32_transceive+0x9a>
	return api->get_rate(dev, sys, rate);
 800dcd0:	68b9      	ldr	r1, [r7, #8]
 800dcd2:	f107 0214 	add.w	r2, r7, #20
 800dcd6:	4650      	mov	r0, sl
 800dcd8:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	dbcf      	blt.n	800dc7e <spi_stm32_transceive+0x9a>
		uint32_t clk = clock >> br;
 800dcde:	6979      	ldr	r1, [r7, #20]
		if (clk <= config->frequency) {
 800dce0:	f8d8 0000 	ldr.w	r0, [r8]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800dce4:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 800dce6:	fa21 f203 	lsr.w	r2, r1, r3
		if (clk <= config->frequency) {
 800dcea:	4282      	cmp	r2, r0
 800dcec:	f240 8218 	bls.w	800e120 <spi_stm32_transceive+0x53c>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	2b09      	cmp	r3, #9
 800dcf4:	d1f7      	bne.n	800dce6 <spi_stm32_transceive+0x102>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 800dcf6:	4b7f      	ldr	r3, [pc, #508]	; (800def4 <spi_stm32_transceive+0x310>)
 800dcf8:	466d      	mov	r5, sp
 800dcfa:	b088      	sub	sp, #32
 800dcfc:	aa06      	add	r2, sp, #24
 800dcfe:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800dd02:	084b      	lsrs	r3, r1, #1
 800dd04:	6193      	str	r3, [r2, #24]
 800dd06:	0a09      	lsrs	r1, r1, #8
 800dd08:	2305      	movs	r3, #5
 800dd0a:	61d1      	str	r1, [r2, #28]
 800dd0c:	f842 3f0c 	str.w	r3, [r2, #12]!
 800dd10:	4877      	ldr	r0, [pc, #476]	; (800def0 <spi_stm32_transceive+0x30c>)
 800dd12:	2300      	movs	r3, #0
 800dd14:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800dd18:	f006 fa5b 	bl	80141d2 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800dd1c:	f06f 0615 	mvn.w	r6, #21
 800dd20:	46ad      	mov	sp, r5
	if (ret) {
 800dd22:	e7ba      	b.n	800dc9a <spi_stm32_transceive+0xb6>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800dd24:	682a      	ldr	r2, [r5, #0]
 800dd26:	f042 0202 	orr.w	r2, r2, #2
 800dd2a:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800dd2c:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800dd2e:	0758      	lsls	r0, r3, #29
 800dd30:	bf4c      	ite	mi
 800dd32:	f042 0201 	orrmi.w	r2, r2, #1
 800dd36:	f022 0201 	bicpl.w	r2, r2, #1
 800dd3a:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800dd3c:	682a      	ldr	r2, [r5, #0]
 800dd3e:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800dd42:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800dd44:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 800dd46:	06d9      	lsls	r1, r3, #27
 800dd48:	bf4c      	ite	mi
 800dd4a:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 800dd4e:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800dd52:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 800dd54:	682a      	ldr	r2, [r5, #0]
 800dd56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dd5a:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800dd5c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800dd60:	f003 0101 	and.w	r1, r3, #1
 800dd64:	2a00      	cmp	r2, #0
 800dd66:	f000 8095 	beq.w	800de94 <spi_stm32_transceive+0x2b0>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800dd6a:	682a      	ldr	r2, [r5, #0]
 800dd6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd70:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800dd72:	686a      	ldr	r2, [r5, #4]
 800dd74:	f022 0204 	bic.w	r2, r2, #4
 800dd78:	606a      	str	r2, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800dd7a:	2900      	cmp	r1, #0
 800dd7c:	f000 8097 	beq.w	800deae <spi_stm32_transceive+0x2ca>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800dd80:	682a      	ldr	r2, [r5, #0]
 800dd82:	f422 7282 	bic.w	r2, r2, #260	; 0x104
 800dd86:	602a      	str	r2, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 800dd88:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800dd8c:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800dd8e:	686b      	ldr	r3, [r5, #4]
 800dd90:	bf06      	itte	eq
 800dd92:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 800dd96:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 800dd9a:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 800dd9e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800dda0:	686b      	ldr	r3, [r5, #4]
 800dda2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dda6:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8c3 8000 	str.w	r8, [r3]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800ddae:	f1b9 0f00 	cmp.w	r9, #0
 800ddb2:	f040 8083 	bne.w	800debc <spi_stm32_transceive+0x2d8>
 800ddb6:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800ddba:	464a      	mov	r2, r9
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800ddbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddc0:	60bb      	str	r3, [r7, #8]
 800ddc2:	f104 0558 	add.w	r5, r4, #88	; 0x58
 800ddc6:	f104 0348 	add.w	r3, r4, #72	; 0x48
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800ddca:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800ddcc:	607b      	str	r3, [r7, #4]
 800ddce:	462a      	mov	r2, r5
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800ddd6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800ddda:	f009 fc0b 	bl	80175f4 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 800ddde:	6560      	str	r0, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800dde0:	2e00      	cmp	r6, #0
 800dde2:	d174      	bne.n	800dece <spi_stm32_transceive+0x2ea>
 800dde4:	64e6      	str	r6, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800dde6:	f104 084c 	add.w	r8, r4, #76	; 0x4c
 800ddea:	f104 0950 	add.w	r9, r4, #80	; 0x50
 800ddee:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 800ddf2:	2301      	movs	r3, #1
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800ddf4:	6526      	str	r6, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800ddf6:	4652      	mov	r2, sl
 800ddf8:	4649      	mov	r1, r9
 800ddfa:	4640      	mov	r0, r8
 800ddfc:	f009 fbfa 	bl	80175f4 <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 800de00:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 800de02:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
 800de04:	6423      	str	r3, [r4, #64]	; 0x40
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800de06:	f8db 2008 	ldr.w	r2, [fp, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800de0a:	f012 0201 	ands.w	r2, r2, #1
 800de0e:	d165      	bne.n	800dedc <spi_stm32_transceive+0x2f8>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800de10:	f8db 3000 	ldr.w	r3, [fp]
 800de14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de18:	f8cb 3000 	str.w	r3, [fp]
	_spi_context_cs_control(ctx, on, false);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2101      	movs	r1, #1
 800de20:	6918      	ldr	r0, [r3, #16]
 800de22:	f009 fc1f 	bl	8017664 <_spi_context_cs_control>
	if (cfg->use_subghzspi_nss) {
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	7c1b      	ldrb	r3, [r3, #16]
 800de2c:	b133      	cbz	r3, 800de3c <spi_stm32_transceive+0x258>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800de2e:	4a32      	ldr	r2, [pc, #200]	; (800def8 <spi_stm32_transceive+0x314>)
 800de30:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800de34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	uint16_t operation = data->ctx.config->operation;
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800de40:	f013 0101 	ands.w	r1, r3, #1
 800de44:	f040 80d2 	bne.w	800dfec <spi_stm32_transceive+0x408>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800de48:	f8db 2008 	ldr.w	r2, [fp, #8]
 800de4c:	0792      	lsls	r2, r2, #30
 800de4e:	d5fb      	bpl.n	800de48 <spi_stm32_transceive+0x264>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800de50:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800de54:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800de56:	6d62      	ldr	r2, [r4, #84]	; 0x54
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800de58:	f040 809c 	bne.w	800df94 <spi_stm32_transceive+0x3b0>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 800de5c:	b112      	cbz	r2, 800de64 <spi_stm32_transceive+0x280>
 800de5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de60:	b103      	cbz	r3, 800de64 <spi_stm32_transceive+0x280>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800de62:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800de64:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800de66:	f88b 100c 	strb.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 800de6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d049      	beq.n	800df04 <spi_stm32_transceive+0x320>
	ctx->tx_len -= len;
 800de70:	3b01      	subs	r3, #1
 800de72:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800de74:	2b00      	cmp	r3, #0
 800de76:	d141      	bne.n	800defc <spi_stm32_transceive+0x318>
		++ctx->current_tx;
 800de78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800de7a:	3308      	adds	r3, #8
 800de7c:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800de7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de80:	3b01      	subs	r3, #1
 800de82:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800de84:	2301      	movs	r3, #1
 800de86:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
 800de8a:	462a      	mov	r2, r5
 800de8c:	f009 fbb2 	bl	80175f4 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800de90:	6560      	str	r0, [r4, #84]	; 0x54
 800de92:	e037      	b.n	800df04 <spi_stm32_transceive+0x320>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800de94:	682a      	ldr	r2, [r5, #0]
 800de96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800de9a:	2900      	cmp	r1, #0
 800de9c:	f47f af68 	bne.w	800dd70 <spi_stm32_transceive+0x18c>
 800dea0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dea4:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800dea6:	686a      	ldr	r2, [r5, #4]
 800dea8:	f042 0204 	orr.w	r2, r2, #4
 800deac:	606a      	str	r2, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800deae:	682a      	ldr	r2, [r5, #0]
 800deb0:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 800deb4:	e767      	b.n	800dd86 <spi_stm32_transceive+0x1a2>
		return -ENOTSUP;
 800deb6:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800deba:	e6ee      	b.n	800dc9a <spi_stm32_transceive+0xb6>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800debc:	f8d9 2000 	ldr.w	r2, [r9]
 800dec0:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800dec2:	2a00      	cmp	r2, #0
 800dec4:	f43f af7a 	beq.w	800ddbc <spi_stm32_transceive+0x1d8>
 800dec8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800decc:	e776      	b.n	800ddbc <spi_stm32_transceive+0x1d8>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800dece:	6833      	ldr	r3, [r6, #0]
 800ded0:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800ded2:	b10b      	cbz	r3, 800ded8 <spi_stm32_transceive+0x2f4>
 800ded4:	6876      	ldr	r6, [r6, #4]
 800ded6:	e786      	b.n	800dde6 <spi_stm32_transceive+0x202>
 800ded8:	461e      	mov	r6, r3
 800deda:	e784      	b.n	800dde6 <spi_stm32_transceive+0x202>
  return (*((__IO uint8_t *)&SPIx->DR));
 800dedc:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800dee0:	e791      	b.n	800de06 <spi_stm32_transceive+0x222>
 800dee2:	bf00      	nop
 800dee4:	0801a124 	.word	0x0801a124
 800dee8:	08019bd8 	.word	0x08019bd8
 800deec:	0801c6ae 	.word	0x0801c6ae
 800def0:	0801a020 	.word	0x0801a020
 800def4:	0801c7ba 	.word	0x0801c7ba
 800def8:	58000400 	.word	0x58000400
	} else if (ctx->tx_buf) {
 800defc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800defe:	b10b      	cbz	r3, 800df04 <spi_stm32_transceive+0x320>
		ctx->tx_buf += dfs * len;
 800df00:	3301      	adds	r3, #1
 800df02:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800df04:	f8db 3008 	ldr.w	r3, [fp, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 800df08:	07de      	lsls	r6, r3, #31
 800df0a:	d5fb      	bpl.n	800df04 <spi_stm32_transceive+0x320>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800df0c:	6822      	ldr	r2, [r4, #0]
 800df0e:	8892      	ldrh	r2, [r2, #4]
 800df10:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800df14:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800df16:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	; 0x5c
 800df1a:	d153      	bne.n	800dfc4 <spi_stm32_transceive+0x3e0>
  return (*((__IO uint8_t *)&SPIx->DR));
 800df1c:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800df20:	b2d2      	uxtb	r2, r2
 800df22:	b10b      	cbz	r3, 800df28 <spi_stm32_transceive+0x344>
 800df24:	b101      	cbz	r1, 800df28 <spi_stm32_transceive+0x344>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800df26:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800df28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800df2a:	b18b      	cbz	r3, 800df50 <spi_stm32_transceive+0x36c>
	ctx->rx_len -= len;
 800df2c:	3b01      	subs	r3, #1
 800df2e:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800df30:	2b00      	cmp	r3, #0
 800df32:	f040 80ac 	bne.w	800e08e <spi_stm32_transceive+0x4aa>
		++ctx->current_rx;
 800df36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800df38:	3308      	adds	r3, #8
 800df3a:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800df3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800df3e:	3b01      	subs	r3, #1
 800df40:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800df42:	2301      	movs	r3, #1
 800df44:	4652      	mov	r2, sl
 800df46:	4649      	mov	r1, r9
 800df48:	4640      	mov	r0, r8
 800df4a:	f009 fb53 	bl	80175f4 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 800df4e:	65e0      	str	r0, [r4, #92]	; 0x5c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800df50:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 800df54:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 800df58:	f000 80a9 	beq.w	800e0ae <spi_stm32_transceive+0x4ca>
		LOG_ERR("%s: err=%d", __func__,
 800df5c:	9304      	str	r3, [sp, #16]
 800df5e:	4b7c      	ldr	r3, [pc, #496]	; (800e150 <spi_stm32_transceive+0x56c>)
 800df60:	9303      	str	r3, [sp, #12]
 800df62:	4b7c      	ldr	r3, [pc, #496]	; (800e154 <spi_stm32_transceive+0x570>)
 800df64:	9302      	str	r3, [sp, #8]
 800df66:	2300      	movs	r3, #0
 800df68:	e9cd 3300 	strd	r3, r3, [sp]
 800df6c:	2201      	movs	r2, #1
 800df6e:	4618      	mov	r0, r3
 800df70:	4979      	ldr	r1, [pc, #484]	; (800e158 <spi_stm32_transceive+0x574>)
 800df72:	f009 fb53 	bl	801761c <z_log_msg2_runtime_create.constprop.0>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 800df76:	f8db 3008 	ldr.w	r3, [fp, #8]
 800df7a:	065a      	lsls	r2, r3, #25
 800df7c:	d507      	bpl.n	800df8e <spi_stm32_transceive+0x3aa>
  tmpreg = SPIx->DR;
 800df7e:	f8db 300c 	ldr.w	r3, [fp, #12]
 800df82:	61bb      	str	r3, [r7, #24]
  (void) tmpreg;
 800df84:	69bb      	ldr	r3, [r7, #24]
  tmpreg = SPIx->SR;
 800df86:	f8db 3008 	ldr.w	r3, [fp, #8]
 800df8a:	61bb      	str	r3, [r7, #24]
  (void) tmpreg;
 800df8c:	69bb      	ldr	r3, [r7, #24]
		return -EIO;
 800df8e:	f06f 0604 	mvn.w	r6, #4
 800df92:	e094      	b.n	800e0be <spi_stm32_transceive+0x4da>
	return !!(ctx->tx_len);
 800df94:	6da3      	ldr	r3, [r4, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
 800df96:	b10a      	cbz	r2, 800df9c <spi_stm32_transceive+0x3b8>
 800df98:	b103      	cbz	r3, 800df9c <spi_stm32_transceive+0x3b8>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800df9a:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800df9c:	f8ab 100c 	strh.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d0af      	beq.n	800df04 <spi_stm32_transceive+0x320>
	ctx->tx_len -= len;
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800dfa8:	b93b      	cbnz	r3, 800dfba <spi_stm32_transceive+0x3d6>
		++ctx->current_tx;
 800dfaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfac:	3308      	adds	r3, #8
 800dfae:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800dfb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800dfb6:	2302      	movs	r3, #2
 800dfb8:	e765      	b.n	800de86 <spi_stm32_transceive+0x2a2>
	} else if (ctx->tx_buf) {
 800dfba:	2a00      	cmp	r2, #0
 800dfbc:	d0a2      	beq.n	800df04 <spi_stm32_transceive+0x320>
		ctx->tx_buf += dfs * len;
 800dfbe:	3202      	adds	r2, #2
 800dfc0:	6562      	str	r2, [r4, #84]	; 0x54
 800dfc2:	e79f      	b.n	800df04 <spi_stm32_transceive+0x320>
  return (uint16_t)(READ_REG(SPIx->DR));
 800dfc4:	f8db 200c 	ldr.w	r2, [fp, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
 800dfc8:	b10b      	cbz	r3, 800dfce <spi_stm32_transceive+0x3ea>
 800dfca:	b101      	cbz	r1, 800dfce <spi_stm32_transceive+0x3ea>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800dfcc:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800dfce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d0bd      	beq.n	800df50 <spi_stm32_transceive+0x36c>
	ctx->rx_len -= len;
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d162      	bne.n	800e0a2 <spi_stm32_transceive+0x4be>
		++ctx->current_rx;
 800dfdc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dfde:	3308      	adds	r3, #8
 800dfe0:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800dfe2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800dfe8:	2302      	movs	r3, #2
 800dfea:	e7ab      	b.n	800df44 <spi_stm32_transceive+0x360>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800dfec:	f8db 2008 	ldr.w	r2, [fp, #8]
 800dff0:	0790      	lsls	r0, r2, #30
 800dff2:	d545      	bpl.n	800e080 <spi_stm32_transceive+0x49c>
	return !!(ctx->tx_len);
 800dff4:	6da1      	ldr	r1, [r4, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800dff6:	2900      	cmp	r1, #0
 800dff8:	d042      	beq.n	800e080 <spi_stm32_transceive+0x49c>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800dffa:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800dffe:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800e000:	6d62      	ldr	r2, [r4, #84]	; 0x54
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800e002:	d12c      	bne.n	800e05e <spi_stm32_transceive+0x47a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800e004:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 800e006:	f88b 300c 	strb.w	r3, [fp, #12]
	if (!ctx->tx_len) {
 800e00a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e00c:	b1a3      	cbz	r3, 800e038 <spi_stm32_transceive+0x454>
	ctx->tx_len -= len;
 800e00e:	3b01      	subs	r3, #1
 800e010:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800e012:	b96b      	cbnz	r3, 800e030 <spi_stm32_transceive+0x44c>
		++ctx->current_tx;
 800e014:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e016:	3308      	adds	r3, #8
 800e018:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800e01a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e01c:	3b01      	subs	r3, #1
 800e01e:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800e020:	2301      	movs	r3, #1
 800e022:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
 800e026:	462a      	mov	r2, r5
 800e028:	f009 fae4 	bl	80175f4 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800e02c:	6560      	str	r0, [r4, #84]	; 0x54
 800e02e:	e003      	b.n	800e038 <spi_stm32_transceive+0x454>
	} else if (ctx->tx_buf) {
 800e030:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e032:	b10b      	cbz	r3, 800e038 <spi_stm32_transceive+0x454>
		ctx->tx_buf += dfs * len;
 800e034:	3301      	adds	r3, #1
 800e036:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800e038:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 800e03c:	07d9      	lsls	r1, r3, #31
 800e03e:	d587      	bpl.n	800df50 <spi_stm32_transceive+0x36c>
	return !!(ctx->rx_buf && ctx->rx_len);
 800e040:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e042:	2b00      	cmp	r3, #0
 800e044:	d084      	beq.n	800df50 <spi_stm32_transceive+0x36c>
 800e046:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e048:	2a00      	cmp	r2, #0
 800e04a:	d081      	beq.n	800df50 <spi_stm32_transceive+0x36c>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800e04c:	6822      	ldr	r2, [r4, #0]
 800e04e:	8892      	ldrh	r2, [r2, #4]
 800e050:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800e054:	2a08      	cmp	r2, #8
 800e056:	d121      	bne.n	800e09c <spi_stm32_transceive+0x4b8>
  return (*((__IO uint8_t *)&SPIx->DR));
 800e058:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e05c:	e763      	b.n	800df26 <spi_stm32_transceive+0x342>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800e05e:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 800e060:	f8ab 300c 	strh.w	r3, [fp, #12]
	ctx->tx_len -= len;
 800e064:	3901      	subs	r1, #1
 800e066:	65a1      	str	r1, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800e068:	b939      	cbnz	r1, 800e07a <spi_stm32_transceive+0x496>
		++ctx->current_tx;
 800e06a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e06c:	3308      	adds	r3, #8
 800e06e:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800e070:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e072:	3b01      	subs	r3, #1
 800e074:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800e076:	2302      	movs	r3, #2
 800e078:	e7d3      	b.n	800e022 <spi_stm32_transceive+0x43e>
		ctx->tx_buf += dfs * len;
 800e07a:	3202      	adds	r2, #2
 800e07c:	6562      	str	r2, [r4, #84]	; 0x54
 800e07e:	e7db      	b.n	800e038 <spi_stm32_transceive+0x454>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800e080:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e088:	f8cb 3004 	str.w	r3, [fp, #4]
	defined(CONFIG_SOC_SERIES_STM32U5X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 800e08c:	e7d4      	b.n	800e038 <spi_stm32_transceive+0x454>
	} else if (ctx->rx_buf) {
 800e08e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e090:	2b00      	cmp	r3, #0
 800e092:	f43f af5d 	beq.w	800df50 <spi_stm32_transceive+0x36c>
		ctx->rx_buf += dfs * len;
 800e096:	3301      	adds	r3, #1
 800e098:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e09a:	e759      	b.n	800df50 <spi_stm32_transceive+0x36c>
  return (uint16_t)(READ_REG(SPIx->DR));
 800e09c:	f8db 200c 	ldr.w	r2, [fp, #12]
 800e0a0:	e794      	b.n	800dfcc <spi_stm32_transceive+0x3e8>
	} else if (ctx->rx_buf) {
 800e0a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f43f af53 	beq.w	800df50 <spi_stm32_transceive+0x36c>
		ctx->rx_buf += dfs * len;
 800e0aa:	3302      	adds	r3, #2
 800e0ac:	e7f4      	b.n	800e098 <spi_stm32_transceive+0x4b4>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800e0ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f47f aec3 	bne.w	800de3c <spi_stm32_transceive+0x258>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 800e0b6:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800e0b8:	2e00      	cmp	r6, #0
 800e0ba:	f47f aebf 	bne.w	800de3c <spi_stm32_transceive+0x258>
	SPI_TypeDef *spi = cfg->spi;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	689d      	ldr	r5, [r3, #8]
	_spi_context_cs_control(ctx, on, false);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	6918      	ldr	r0, [r3, #16]
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	f009 faca 	bl	8017664 <_spi_context_cs_control>
	if (cfg->use_subghzspi_nss) {
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	7c1b      	ldrb	r3, [r3, #16]
 800e0d6:	b133      	cbz	r3, 800e0e6 <spi_stm32_transceive+0x502>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800e0d8:	4a20      	ldr	r2, [pc, #128]	; (800e15c <spi_stm32_transceive+0x578>)
 800e0da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800e0de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800e0e6:	68ab      	ldr	r3, [r5, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800e0e8:	07db      	lsls	r3, r3, #31
 800e0ea:	d417      	bmi.n	800e11c <spi_stm32_transceive+0x538>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800e0ec:	682b      	ldr	r3, [r5, #0]
 800e0ee:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800e0f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0f6:	d102      	bne.n	800e0fe <spi_stm32_transceive+0x51a>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800e0f8:	68ab      	ldr	r3, [r5, #8]
 800e0fa:	0618      	lsls	r0, r3, #24
 800e0fc:	d4fc      	bmi.n	800e0f8 <spi_stm32_transceive+0x514>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800e0fe:	68ab      	ldr	r3, [r5, #8]
 800e100:	0699      	lsls	r1, r3, #26
 800e102:	d506      	bpl.n	800e112 <spi_stm32_transceive+0x52e>
  tmpreg_sr = SPIx->SR;
 800e104:	68ab      	ldr	r3, [r5, #8]
 800e106:	633b      	str	r3, [r7, #48]	; 0x30
  (void) tmpreg_sr;
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800e10a:	682b      	ldr	r3, [r5, #0]
 800e10c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e110:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800e112:	682b      	ldr	r3, [r5, #0]
 800e114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e118:	602b      	str	r3, [r5, #0]
}
 800e11a:	e5be      	b.n	800dc9a <spi_stm32_transceive+0xb6>
  return (*((__IO uint8_t *)&SPIx->DR));
 800e11c:	7b2b      	ldrb	r3, [r5, #12]
 800e11e:	e7e2      	b.n	800e0e6 <spi_stm32_transceive+0x502>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800e120:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 800e122:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e12a:	602a      	str	r2, [r5, #0]
 800e12c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800e130:	682a      	ldr	r2, [r5, #0]
 800e132:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800e136:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800e13a:	4313      	orrs	r3, r2
 800e13c:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800e13e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800e142:	079a      	lsls	r2, r3, #30
 800e144:	f53f adee 	bmi.w	800dd24 <spi_stm32_transceive+0x140>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800e148:	682a      	ldr	r2, [r5, #0]
 800e14a:	f022 0202 	bic.w	r2, r2, #2
 800e14e:	e5ec      	b.n	800dd2a <spi_stm32_transceive+0x146>
 800e150:	0801c800 	.word	0x0801c800
 800e154:	0801c7af 	.word	0x0801c7af
 800e158:	0801a020 	.word	0x0801a020
 800e15c:	58000400 	.word	0x58000400

0800e160 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800e160:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800e162:	ab0b      	add	r3, sp, #44	; 0x2c
 800e164:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800e166:	9303      	str	r3, [sp, #12]
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800e16a:	9302      	str	r3, [sp, #8]
 800e16c:	2300      	movs	r3, #0
 800e16e:	e9cd 3300 	strd	r3, r3, [sp]
 800e172:	2201      	movs	r2, #1
 800e174:	4618      	mov	r0, r3
 800e176:	f7f6 fbf1 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 800e17a:	b007      	add	sp, #28
 800e17c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e180:	0801c78b 	.word	0x0801c78b

0800e184 <spi_bitbang_init>:
	.transceive_async = spi_bitbang_transceive_async,
#endif /* CONFIG_SPI_ASYNC */
};

int spi_bitbang_init(const struct device *dev)
{
 800e184:	b530      	push	{r4, r5, lr}
	const struct spi_bitbang_config *config = dev->config;
 800e186:	6845      	ldr	r5, [r0, #4]
{
 800e188:	b087      	sub	sp, #28
	int rc;

	if (!device_is_ready(config->clk_gpio.port)) {
 800e18a:	6828      	ldr	r0, [r5, #0]
 800e18c:	f00a fdec 	bl	8018d68 <z_device_is_ready>
 800e190:	4603      	mov	r3, r0
 800e192:	b970      	cbnz	r0, 800e1b2 <spi_bitbang_init+0x2e>
		LOG_ERR("GPIO port for clk pin is not ready");
 800e194:	4a24      	ldr	r2, [pc, #144]	; (800e228 <spi_bitbang_init+0xa4>)
		return rc;
	}

	if (config->mosi_gpio.port != NULL) {
		if (!device_is_ready(config->mosi_gpio.port)) {
			LOG_ERR("GPIO port for mosi pin is not ready");
 800e196:	9204      	str	r2, [sp, #16]
 800e198:	2202      	movs	r2, #2
 800e19a:	9203      	str	r2, [sp, #12]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800e19c:	4823      	ldr	r0, [pc, #140]	; (800e22c <spi_bitbang_init+0xa8>)
 800e19e:	aa03      	add	r2, sp, #12
 800e1a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			return -ENODEV;
 800e1a4:	f06f 0412 	mvn.w	r4, #18
 800e1a8:	f006 f813 	bl	80141d2 <z_impl_z_log_msg2_static_create>
			return rc;
		}
	}

	return 0;
}
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	b007      	add	sp, #28
 800e1b0:	bd30      	pop	{r4, r5, pc}
	rc = gpio_pin_configure_dt(&config->clk_gpio, GPIO_OUTPUT_INACTIVE);
 800e1b2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f009 fa8c 	bl	80176d4 <gpio_pin_configure_dt>
	if (rc < 0) {
 800e1bc:	1e04      	subs	r4, r0, #0
 800e1be:	da0c      	bge.n	800e1da <spi_bitbang_init+0x56>
		LOG_ERR("Couldn't configure clk pin; (%d)", rc);
 800e1c0:	4b1b      	ldr	r3, [pc, #108]	; (800e230 <spi_bitbang_init+0xac>)
			LOG_ERR("Couldn't configure miso pin; (%d)", rc);
 800e1c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	9303      	str	r3, [sp, #12]
 800e1ca:	4818      	ldr	r0, [pc, #96]	; (800e22c <spi_bitbang_init+0xa8>)
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	aa03      	add	r2, sp, #12
 800e1d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800e1d4:	f005 fffd 	bl	80141d2 <z_impl_z_log_msg2_static_create>
			return rc;
 800e1d8:	e7e8      	b.n	800e1ac <spi_bitbang_init+0x28>
	if (config->mosi_gpio.port != NULL) {
 800e1da:	68a8      	ldr	r0, [r5, #8]
 800e1dc:	b178      	cbz	r0, 800e1fe <spi_bitbang_init+0x7a>
 800e1de:	f00a fdc3 	bl	8018d68 <z_device_is_ready>
		if (!device_is_ready(config->mosi_gpio.port)) {
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	b908      	cbnz	r0, 800e1ea <spi_bitbang_init+0x66>
			LOG_ERR("GPIO port for mosi pin is not ready");
 800e1e6:	4a13      	ldr	r2, [pc, #76]	; (800e234 <spi_bitbang_init+0xb0>)
 800e1e8:	e7d5      	b.n	800e196 <spi_bitbang_init+0x12>
		rc = gpio_pin_configure_dt(&config->mosi_gpio,
 800e1ea:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800e1ee:	f105 0008 	add.w	r0, r5, #8
 800e1f2:	f009 fa6f 	bl	80176d4 <gpio_pin_configure_dt>
		if (rc < 0) {
 800e1f6:	1e04      	subs	r4, r0, #0
 800e1f8:	da01      	bge.n	800e1fe <spi_bitbang_init+0x7a>
			LOG_ERR("Couldn't configure mosi pin; (%d)", rc);
 800e1fa:	4b0f      	ldr	r3, [pc, #60]	; (800e238 <spi_bitbang_init+0xb4>)
 800e1fc:	e7e1      	b.n	800e1c2 <spi_bitbang_init+0x3e>
	if (config->miso_gpio.port != NULL) {
 800e1fe:	6928      	ldr	r0, [r5, #16]
 800e200:	b908      	cbnz	r0, 800e206 <spi_bitbang_init+0x82>
	return 0;
 800e202:	2400      	movs	r4, #0
 800e204:	e7d2      	b.n	800e1ac <spi_bitbang_init+0x28>
 800e206:	f00a fdaf 	bl	8018d68 <z_device_is_ready>
		if (!device_is_ready(config->miso_gpio.port)) {
 800e20a:	4603      	mov	r3, r0
 800e20c:	b908      	cbnz	r0, 800e212 <spi_bitbang_init+0x8e>
			LOG_ERR("GPIO port for miso pin is not ready");
 800e20e:	4a0b      	ldr	r2, [pc, #44]	; (800e23c <spi_bitbang_init+0xb8>)
 800e210:	e7c1      	b.n	800e196 <spi_bitbang_init+0x12>
		rc = gpio_pin_configure_dt(&config->miso_gpio, GPIO_INPUT);
 800e212:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e216:	f105 0010 	add.w	r0, r5, #16
 800e21a:	f009 fa5b 	bl	80176d4 <gpio_pin_configure_dt>
		if (rc < 0) {
 800e21e:	1e04      	subs	r4, r0, #0
 800e220:	daef      	bge.n	800e202 <spi_bitbang_init+0x7e>
			LOG_ERR("Couldn't configure miso pin; (%d)", rc);
 800e222:	4b07      	ldr	r3, [pc, #28]	; (800e240 <spi_bitbang_init+0xbc>)
 800e224:	e7cd      	b.n	800e1c2 <spi_bitbang_init+0x3e>
 800e226:	bf00      	nop
 800e228:	0801c812 	.word	0x0801c812
 800e22c:	0801a018 	.word	0x0801a018
 800e230:	0801c835 	.word	0x0801c835
 800e234:	0801c856 	.word	0x0801c856
 800e238:	0801c87a 	.word	0x0801c87a
 800e23c:	0801c89c 	.word	0x0801c89c
 800e240:	0801c8c0 	.word	0x0801c8c0

0800e244 <spi_bitbang_transceive>:
{
 800e244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e248:	460f      	mov	r7, r1
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800e24a:	8889      	ldrh	r1, [r1, #4]
	const struct spi_bitbang_config *info = dev->config;
 800e24c:	6846      	ldr	r6, [r0, #4]
	struct spi_bitbang_data *data = dev->data;
 800e24e:	6904      	ldr	r4, [r0, #16]
{
 800e250:	4691      	mov	r9, r2
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800e252:	f011 0201 	ands.w	r2, r1, #1
{
 800e256:	b09d      	sub	sp, #116	; 0x74
 800e258:	4605      	mov	r5, r0
 800e25a:	4698      	mov	r8, r3
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800e25c:	f000 808d 	beq.w	800e37a <spi_bitbang_transceive+0x136>
		LOG_ERR("Slave mode not supported");
 800e260:	4b75      	ldr	r3, [pc, #468]	; (800e438 <spi_bitbang_transceive+0x1f4>)
 800e262:	931a      	str	r3, [sp, #104]	; 0x68
 800e264:	2302      	movs	r3, #2
 800e266:	9319      	str	r3, [sp, #100]	; 0x64
 800e268:	2300      	movs	r3, #0
 800e26a:	4874      	ldr	r0, [pc, #464]	; (800e43c <spi_bitbang_transceive+0x1f8>)
 800e26c:	aa19      	add	r2, sp, #100	; 0x64
 800e26e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e272:	f005 ffae 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	spi_context_buffers_setup(ctx, tx_bufs, rx_bufs, data->dfs);
 800e276:	f894 a06c 	ldrb.w	sl, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800e27a:	f1b9 0f00 	cmp.w	r9, #0
 800e27e:	f040 80c5 	bne.w	800e40c <spi_bitbang_transceive+0x1c8>
 800e282:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800e286:	464a      	mov	r2, r9
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800e288:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800e28c:	930d      	str	r3, [sp, #52]	; 0x34
 800e28e:	f104 0b44 	add.w	fp, r4, #68	; 0x44
 800e292:	f104 0358 	add.w	r3, r4, #88	; 0x58
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800e296:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800e298:	930e      	str	r3, [sp, #56]	; 0x38
 800e29a:	f104 0258 	add.w	r2, r4, #88	; 0x58
 800e29e:	4653      	mov	r3, sl
 800e2a0:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800e2a4:	4658      	mov	r0, fp
 800e2a6:	f009 fa48 	bl	801773a <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 800e2aa:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800e2ac:	f1b8 0f00 	cmp.w	r8, #0
 800e2b0:	f040 80b5 	bne.w	800e41e <spi_bitbang_transceive+0x1da>
 800e2b4:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800e2b8:	4643      	mov	r3, r8
 800e2ba:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800e2bc:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800e2c0:	9310      	str	r3, [sp, #64]	; 0x40
 800e2c2:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800e2c6:	9311      	str	r3, [sp, #68]	; 0x44
 800e2c8:	f104 0360 	add.w	r3, r4, #96	; 0x60
 800e2cc:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800e2d0:	9312      	str	r3, [sp, #72]	; 0x48
 800e2d2:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800e2d6:	4653      	mov	r3, sl
 800e2d8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800e2dc:	f009 fa2d 	bl	801773a <spi_context_get_next_buf>
	if (SPI_MODE_GET(spi_cfg->operation) & SPI_MODE_CPOL) {
 800e2e0:	88bf      	ldrh	r7, [r7, #4]
	ctx->rx_buf = (uint8_t *)
 800e2e2:	65e0      	str	r0, [r4, #92]	; 0x5c
 800e2e4:	f007 0302 	and.w	r3, r7, #2
 800e2e8:	930a      	str	r3, [sp, #40]	; 0x28
 800e2ea:	f3c7 0340 	ubfx	r3, r7, #1, #1
	ctx->sync_status = 0;
 800e2ee:	f04f 0800 	mov.w	r8, #0
 800e2f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2f4:	f007 0304 	and.w	r3, r7, #4
 800e2f8:	930b      	str	r3, [sp, #44]	; 0x2c
	gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800e2fa:	f3c7 0140 	ubfx	r1, r7, #1, #1
 800e2fe:	f007 0308 	and.w	r3, r7, #8
 800e302:	4630      	mov	r0, r6
 800e304:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
	if (SPI_MODE_GET(spi_cfg->operation) & SPI_MODE_LOOP) {
 800e308:	930c      	str	r3, [sp, #48]	; 0x30
	gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800e30a:	f009 fa2a 	bl	8017762 <gpio_pin_set_dt.isra.0>
	_spi_context_cs_control(ctx, on, false);
 800e30e:	4642      	mov	r2, r8
 800e310:	2101      	movs	r1, #1
 800e312:	4620      	mov	r0, r4
 800e314:	f009 fa39 	bl	801778a <_spi_context_cs_control>
	const uint32_t wait_us = data->wait_us;
 800e318:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e31a:	9308      	str	r3, [sp, #32]
	const struct spi_bitbang_config *info = dev->config;
 800e31c:	686b      	ldr	r3, [r5, #4]
	return info->miso_gpio.port != NULL;
 800e31e:	691a      	ldr	r2, [r3, #16]
	return info->mosi_gpio.port != NULL;
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	9309      	str	r3, [sp, #36]	; 0x24
			if (!loop && do_read && !cpha) {
 800e324:	f007 030c 	and.w	r3, r7, #12
	return info->miso_gpio.port != NULL;
 800e328:	9207      	str	r2, [sp, #28]
			if (!loop && do_read && !cpha) {
 800e32a:	9314      	str	r3, [sp, #80]	; 0x50
	return !!(ctx->tx_buf && ctx->tx_len);
 800e32c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e32e:	b10b      	cbz	r3, 800e334 <spi_bitbang_transceive+0xf0>
 800e330:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e332:	b94a      	cbnz	r2, 800e348 <spi_bitbang_transceive+0x104>
	return !!(ctx->rx_buf && ctx->rx_len);
 800e334:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e336:	2a00      	cmp	r2, #0
 800e338:	f000 8116 	beq.w	800e568 <spi_bitbang_transceive+0x324>
 800e33c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e33e:	2a00      	cmp	r2, #0
 800e340:	f000 8112 	beq.w	800e568 <spi_bitbang_transceive+0x324>
		if (ctx->tx_len) {
 800e344:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800e346:	b12f      	cbz	r7, 800e354 <spi_bitbang_transceive+0x110>
			switch (data->dfs) {
 800e348:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e34a:	2a01      	cmp	r2, #1
 800e34c:	d070      	beq.n	800e430 <spi_bitbang_transceive+0x1ec>
 800e34e:	2a02      	cmp	r2, #2
 800e350:	d170      	bne.n	800e434 <spi_bitbang_transceive+0x1f0>
				w = *(uint16_t *)(ctx->tx_buf);
 800e352:	881f      	ldrh	r7, [r3, #0]
		int shift = data->bits - 1;
 800e354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
		if (has_miso && spi_context_rx_buf_on(ctx)) {
 800e35a:	9b07      	ldr	r3, [sp, #28]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 80ef 	beq.w	800e540 <spi_bitbang_transceive+0x2fc>
 800e362:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800e364:	b11d      	cbz	r5, 800e36e <spi_bitbang_transceive+0x12a>
 800e366:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800e368:	3d00      	subs	r5, #0
 800e36a:	bf18      	it	ne
 800e36c:	2501      	movne	r5, #1
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800e36e:	f106 0308 	add.w	r3, r6, #8
		bool do_read = false;
 800e372:	f04f 0900 	mov.w	r9, #0
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800e376:	9313      	str	r3, [sp, #76]	; 0x4c
 800e378:	e0a5      	b.n	800e4c6 <spi_bitbang_transceive+0x282>
	if (config->operation & (SPI_TRANSFER_LSB | SPI_LINES_DUAL
 800e37a:	f011 0310 	ands.w	r3, r1, #16
 800e37e:	d001      	beq.n	800e384 <spi_bitbang_transceive+0x140>
		LOG_ERR("Unsupported configuration");
 800e380:	4b2f      	ldr	r3, [pc, #188]	; (800e440 <spi_bitbang_transceive+0x1fc>)
 800e382:	e76e      	b.n	800e262 <spi_bitbang_transceive+0x1e>
	const int bits = SPI_WORD_SIZE_GET(config->operation);
 800e384:	f3c1 1145 	ubfx	r1, r1, #5, #6
	if (bits > 16) {
 800e388:	2910      	cmp	r1, #16
 800e38a:	dd04      	ble.n	800e396 <spi_bitbang_transceive+0x152>
		LOG_ERR("Word sizes > 16 bits not supported");
 800e38c:	4a2d      	ldr	r2, [pc, #180]	; (800e444 <spi_bitbang_transceive+0x200>)
 800e38e:	921a      	str	r2, [sp, #104]	; 0x68
 800e390:	2202      	movs	r2, #2
 800e392:	9219      	str	r2, [sp, #100]	; 0x64
 800e394:	e769      	b.n	800e26a <spi_bitbang_transceive+0x26>
	data->dfs = ((data->bits - 1) / 8) + 1;
 800e396:	1e4b      	subs	r3, r1, #1
 800e398:	bf48      	it	mi
 800e39a:	1d8b      	addmi	r3, r1, #6
 800e39c:	10db      	asrs	r3, r3, #3
	if (config->frequency > 0) {
 800e39e:	683a      	ldr	r2, [r7, #0]
	data->bits = bits;
 800e3a0:	6661      	str	r1, [r4, #100]	; 0x64
	data->dfs = ((data->bits - 1) / 8) + 1;
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (config->frequency > 0) {
 800e3a6:	b322      	cbz	r2, 800e3f2 <spi_bitbang_transceive+0x1ae>
		data->wait_us = (1000000ul * 2000ul / config->frequency) / 2000ul;
 800e3a8:	4b27      	ldr	r3, [pc, #156]	; (800e448 <spi_bitbang_transceive+0x204>)
 800e3aa:	fbb3 f3f2 	udiv	r3, r3, r2
		data->wait_us /= 2;
 800e3ae:	105b      	asrs	r3, r3, #1
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800e3b0:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800e3b4:	66a3      	str	r3, [r4, #104]	; 0x68
	data->ctx.config = config;
 800e3b6:	6027      	str	r7, [r4, #0]
 800e3b8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800e3bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3c0:	459a      	cmp	sl, r3
 800e3c2:	f4bf af58 	bcs.w	800e276 <spi_bitbang_transceive+0x32>
		if (!device_is_ready(cs_gpio->port)) {
 800e3c6:	f8da 0000 	ldr.w	r0, [sl]
 800e3ca:	f00a fccd 	bl	8018d68 <z_device_is_ready>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	b988      	cbnz	r0, 800e3f6 <spi_bitbang_transceive+0x1b2>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 800e3d2:	f89a 2004 	ldrb.w	r2, [sl, #4]
 800e3d6:	9204      	str	r2, [sp, #16]
 800e3d8:	f8da 2000 	ldr.w	r2, [sl]
 800e3dc:	4917      	ldr	r1, [pc, #92]	; (800e43c <spi_bitbang_transceive+0x1f8>)
 800e3de:	6812      	ldr	r2, [r2, #0]
 800e3e0:	9203      	str	r2, [sp, #12]
 800e3e2:	4a1a      	ldr	r2, [pc, #104]	; (800e44c <spi_bitbang_transceive+0x208>)
 800e3e4:	9000      	str	r0, [sp, #0]
 800e3e6:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f7ff feb8 	bl	800e160 <z_log_msg2_runtime_create.constprop.0>
			return -ENODEV;
 800e3f0:	e741      	b.n	800e276 <spi_bitbang_transceive+0x32>
		data->wait_us = 8 / 2; /* 125 kHz */
 800e3f2:	2304      	movs	r3, #4
 800e3f4:	e7dc      	b.n	800e3b0 <spi_bitbang_transceive+0x16c>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
 800e3f6:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800e3fa:	4650      	mov	r0, sl
 800e3fc:	f009 f96a 	bl	80176d4 <gpio_pin_configure_dt>
		if (ret < 0) {
 800e400:	2800      	cmp	r0, #0
 800e402:	f6ff af38 	blt.w	800e276 <spi_bitbang_transceive+0x32>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800e406:	f10a 0a08 	add.w	sl, sl, #8
 800e40a:	e7d5      	b.n	800e3b8 <spi_bitbang_transceive+0x174>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800e40c:	f8d9 2000 	ldr.w	r2, [r9]
 800e410:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800e412:	2a00      	cmp	r2, #0
 800e414:	f43f af38 	beq.w	800e288 <spi_bitbang_transceive+0x44>
 800e418:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800e41c:	e734      	b.n	800e288 <spi_bitbang_transceive+0x44>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800e41e:	f8d8 3000 	ldr.w	r3, [r8]
 800e422:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800e424:	2b00      	cmp	r3, #0
 800e426:	f43f af48 	beq.w	800e2ba <spi_bitbang_transceive+0x76>
 800e42a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e42e:	e744      	b.n	800e2ba <spi_bitbang_transceive+0x76>
				w = *(uint8_t *)(ctx->tx_buf);
 800e430:	781f      	ldrb	r7, [r3, #0]
				break;
 800e432:	e78f      	b.n	800e354 <spi_bitbang_transceive+0x110>
			switch (data->dfs) {
 800e434:	2700      	movs	r7, #0
 800e436:	e78d      	b.n	800e354 <spi_bitbang_transceive+0x110>
 800e438:	0801c8e2 	.word	0x0801c8e2
 800e43c:	0801a018 	.word	0x0801a018
 800e440:	0801c8fb 	.word	0x0801c8fb
 800e444:	0801c915 	.word	0x0801c915
 800e448:	000f4240 	.word	0x000f4240
 800e44c:	0801c78b 	.word	0x0801c78b
			if (has_mosi) {
 800e450:	9b09      	ldr	r3, [sp, #36]	; 0x24
			const int d = (w >> shift) & 0x1;
 800e452:	fa47 fa08 	asr.w	sl, r7, r8
 800e456:	f00a 0a01 	and.w	sl, sl, #1
			if (has_mosi) {
 800e45a:	b11b      	cbz	r3, 800e464 <spi_bitbang_transceive+0x220>
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800e45c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e45e:	4651      	mov	r1, sl
 800e460:	f009 f97f 	bl	8017762 <gpio_pin_set_dt.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
 800e464:	9808      	ldr	r0, [sp, #32]
 800e466:	f002 fccb 	bl	8010e00 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, !clock_state);
 800e46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e46c:	fab3 f183 	clz	r1, r3
 800e470:	0949      	lsrs	r1, r1, #5
 800e472:	4630      	mov	r0, r6
 800e474:	f009 f975 	bl	8017762 <gpio_pin_set_dt.isra.0>
			if (!loop && do_read && !cpha) {
 800e478:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d15a      	bne.n	800e534 <spi_bitbang_transceive+0x2f0>
 800e47e:	2d00      	cmp	r5, #0
 800e480:	d05a      	beq.n	800e538 <spi_bitbang_transceive+0x2f4>
	return gpio_pin_get(spec->port, spec->pin);
 800e482:	7d31      	ldrb	r1, [r6, #20]
 800e484:	6930      	ldr	r0, [r6, #16]
 800e486:	f009 f944 	bl	8017712 <gpio_pin_get>
 800e48a:	4603      	mov	r3, r0
 800e48c:	9315      	str	r3, [sp, #84]	; 0x54
 800e48e:	9808      	ldr	r0, [sp, #32]
 800e490:	f002 fcb6 	bl	8010e00 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800e494:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e496:	4630      	mov	r0, r6
 800e498:	f009 f963 	bl	8017762 <gpio_pin_set_dt.isra.0>
			if (!loop && do_read && cpha) {
 800e49c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d14c      	bne.n	800e53c <spi_bitbang_transceive+0x2f8>
 800e4a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4a4:	b135      	cbz	r5, 800e4b4 <spi_bitbang_transceive+0x270>
 800e4a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4a8:	b122      	cbz	r2, 800e4b4 <spi_bitbang_transceive+0x270>
 800e4aa:	7d31      	ldrb	r1, [r6, #20]
 800e4ac:	6930      	ldr	r0, [r6, #16]
 800e4ae:	f009 f930 	bl	8017712 <gpio_pin_get>
 800e4b2:	4603      	mov	r3, r0
			r = (r << 1) | (b ? 0x1 : 0x0);
 800e4b4:	3b00      	subs	r3, #0
 800e4b6:	bf18      	it	ne
 800e4b8:	2301      	movne	r3, #1
 800e4ba:	ea43 0949 	orr.w	r9, r3, r9, lsl #1
 800e4be:	fa1f f989 	uxth.w	r9, r9
			--shift;
 800e4c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		while (shift >= 0) {
 800e4c6:	f1b8 0f00 	cmp.w	r8, #0
 800e4ca:	dac1      	bge.n	800e450 <spi_bitbang_transceive+0x20c>
	return !!(ctx->rx_buf && ctx->rx_len);
 800e4cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e4ce:	b143      	cbz	r3, 800e4e2 <spi_bitbang_transceive+0x29e>
 800e4d0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e4d2:	b132      	cbz	r2, 800e4e2 <spi_bitbang_transceive+0x29e>
			switch (data->dfs) {
 800e4d4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e4d6:	2a01      	cmp	r2, #1
 800e4d8:	d034      	beq.n	800e544 <spi_bitbang_transceive+0x300>
 800e4da:	2a02      	cmp	r2, #2
 800e4dc:	d101      	bne.n	800e4e2 <spi_bitbang_transceive+0x29e>
				*(uint16_t *)(ctx->rx_buf) = r;
 800e4de:	f8a3 9000 	strh.w	r9, [r3]
	if (!ctx->tx_len) {
 800e4e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e4e4:	b182      	cbz	r2, 800e508 <spi_bitbang_transceive+0x2c4>
	ctx->tx_len -= len;
 800e4e6:	3a01      	subs	r2, #1
		spi_context_update_tx(ctx, data->dfs, 1);
 800e4e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e4ea:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800e4ec:	bb6a      	cbnz	r2, 800e54a <spi_bitbang_transceive+0x306>
		++ctx->current_tx;
 800e4ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e4f0:	3208      	adds	r2, #8
 800e4f2:	6462      	str	r2, [r4, #68]	; 0x44
		--ctx->tx_count;
 800e4f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e4f6:	3a01      	subs	r2, #1
 800e4f8:	64a2      	str	r2, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 800e500:	4658      	mov	r0, fp
 800e502:	f009 f91a 	bl	801773a <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800e506:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
 800e508:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800e50a:	2a00      	cmp	r2, #0
 800e50c:	f43f af0e 	beq.w	800e32c <spi_bitbang_transceive+0xe8>
	ctx->rx_len -= len;
 800e510:	3a01      	subs	r2, #1
		spi_context_update_rx(ctx, data->dfs, 1);
 800e512:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e514:	6622      	str	r2, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800e516:	b9fa      	cbnz	r2, 800e558 <spi_bitbang_transceive+0x314>
		++ctx->current_rx;
 800e518:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
 800e51a:	9810      	ldr	r0, [sp, #64]	; 0x40
		++ctx->current_rx;
 800e51c:	3208      	adds	r2, #8
 800e51e:	64e2      	str	r2, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800e520:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e522:	3a01      	subs	r2, #1
 800e524:	6522      	str	r2, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800e526:	b2db      	uxtb	r3, r3
 800e528:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800e52c:	f009 f905 	bl	801773a <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 800e530:	65e0      	str	r0, [r4, #92]	; 0x5c
 800e532:	e6fb      	b.n	800e32c <spi_bitbang_transceive+0xe8>
			b = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	e7a9      	b.n	800e48c <spi_bitbang_transceive+0x248>
 800e538:	462b      	mov	r3, r5
 800e53a:	e7a7      	b.n	800e48c <spi_bitbang_transceive+0x248>
				b = d;
 800e53c:	4653      	mov	r3, sl
 800e53e:	e7b9      	b.n	800e4b4 <spi_bitbang_transceive+0x270>
		bool do_read = false;
 800e540:	9d07      	ldr	r5, [sp, #28]
 800e542:	e714      	b.n	800e36e <spi_bitbang_transceive+0x12a>
				*(uint8_t *)(ctx->rx_buf) = r;
 800e544:	f883 9000 	strb.w	r9, [r3]
				break;
 800e548:	e7cb      	b.n	800e4e2 <spi_bitbang_transceive+0x29e>
	} else if (ctx->tx_buf) {
 800e54a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800e54c:	2a00      	cmp	r2, #0
 800e54e:	d0db      	beq.n	800e508 <spi_bitbang_transceive+0x2c4>
		ctx->tx_buf += dfs * len;
 800e550:	fa52 f383 	uxtab	r3, r2, r3
 800e554:	6563      	str	r3, [r4, #84]	; 0x54
 800e556:	e7d7      	b.n	800e508 <spi_bitbang_transceive+0x2c4>
	} else if (ctx->rx_buf) {
 800e558:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e55a:	2a00      	cmp	r2, #0
 800e55c:	f43f aee6 	beq.w	800e32c <spi_bitbang_transceive+0xe8>
		ctx->rx_buf += dfs * len;
 800e560:	fa52 f383 	uxtab	r3, r2, r3
 800e564:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e566:	e6e1      	b.n	800e32c <spi_bitbang_transceive+0xe8>
	_spi_context_cs_control(ctx, on, false);
 800e568:	2200      	movs	r2, #0
 800e56a:	4611      	mov	r1, r2
 800e56c:	4620      	mov	r0, r4
	ctx->sync_status = status;
 800e56e:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
 800e570:	f009 f90b 	bl	801778a <_spi_context_cs_control>
	ctx->sync_status = status;
 800e574:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
 800e576:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e57a:	f001 fe1d 	bl	80101b8 <z_impl_k_sem_give>
}
 800e57e:	4628      	mov	r0, r5
 800e580:	b01d      	add	sp, #116	; 0x74
 800e582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e586:	bf00      	nop

0800e588 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800e588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800e58a:	ab0b      	add	r3, sp, #44	; 0x2c
 800e58c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800e58e:	9303      	str	r3, [sp, #12]
 800e590:	4b05      	ldr	r3, [pc, #20]	; (800e5a8 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800e592:	9302      	str	r3, [sp, #8]
 800e594:	2300      	movs	r3, #0
 800e596:	e9cd 3300 	strd	r3, r3, [sp]
 800e59a:	2201      	movs	r2, #1
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7f6 f9dd 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 800e5a2:	b007      	add	sp, #28
 800e5a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5a8:	0801c944 	.word	0x0801c944

0800e5ac <lpuartdiv_calc>:

#if HAS_LPUART_1
#ifdef USART_PRESC_PRESCALER
uint32_t lpuartdiv_calc(const uint64_t clock_rate, const uint16_t presc_idx,
			const uint32_t baud_rate)
{
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	461d      	mov	r5, r3
	uint64_t lpuartdiv;

	lpuartdiv = clock_rate / LPUART_PRESCALER_TAB[presc_idx];
 800e5b0:	4b09      	ldr	r3, [pc, #36]	; (800e5d8 <lpuartdiv_calc+0x2c>)
 800e5b2:	2600      	movs	r6, #0
 800e5b4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e5b8:	4633      	mov	r3, r6
 800e5ba:	f7f2 fd05 	bl	8000fc8 <__aeabi_uldivmod>
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 800e5be:	0209      	lsls	r1, r1, #8
 800e5c0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
	lpuartdiv += baud_rate / 2;
 800e5c4:	086c      	lsrs	r4, r5, #1
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 800e5c6:	0200      	lsls	r0, r0, #8
	lpuartdiv += baud_rate / 2;
 800e5c8:	1820      	adds	r0, r4, r0
	lpuartdiv /= baud_rate;
 800e5ca:	462a      	mov	r2, r5
 800e5cc:	4633      	mov	r3, r6
 800e5ce:	f141 0100 	adc.w	r1, r1, #0
 800e5d2:	f7f2 fcf9 	bl	8000fc8 <__aeabi_uldivmod>

	return (uint32_t)lpuartdiv;
}
 800e5d6:	bd70      	pop	{r4, r5, r6, pc}
 800e5d8:	0801ab0e 	.word	0x0801ab0e

0800e5dc <uart_stm32_set_baudrate>:
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev,
					   uint32_t baud_rate)
{
 800e5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uart_stm32_data *data = dev->data;

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 800e5e0:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 800e5e2:	6846      	ldr	r6, [r0, #4]
	if (clock_control_get_rate(data->clock,
 800e5e4:	685d      	ldr	r5, [r3, #4]
{
 800e5e6:	b08e      	sub	sp, #56	; 0x38
 800e5e8:	4607      	mov	r7, r0
 800e5ea:	460c      	mov	r4, r1
			       (clock_control_subsys_t *)&config->pclken,
 800e5ec:	f106 0804 	add.w	r8, r6, #4
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	f00a fbb9 	bl	8018d68 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800e5f6:	b968      	cbnz	r0, 800e614 <uart_stm32_set_baudrate+0x38>
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 800e5f8:	4b34      	ldr	r3, [pc, #208]	; (800e6cc <uart_stm32_set_baudrate+0xf0>)
 800e5fa:	930c      	str	r3, [sp, #48]	; 0x30
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	930b      	str	r3, [sp, #44]	; 0x2c
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800e600:	4833      	ldr	r0, [pc, #204]	; (800e6d0 <uart_stm32_set_baudrate+0xf4>)
 800e602:	2300      	movs	r3, #0
 800e604:	aa0b      	add	r2, sp, #44	; 0x2c
 800e606:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800e60a:	f005 fde2 	bl	80141d2 <z_impl_z_log_msg2_static_create>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 800e60e:	b00e      	add	sp, #56	; 0x38
 800e610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->get_rate == NULL) {
 800e614:	68ab      	ldr	r3, [r5, #8]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d0ed      	beq.n	800e5f8 <uart_stm32_set_baudrate+0x1c>
	return api->get_rate(dev, sys, rate);
 800e61c:	aa07      	add	r2, sp, #28
 800e61e:	4641      	mov	r1, r8
 800e620:	4628      	mov	r0, r5
 800e622:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 800e624:	2800      	cmp	r0, #0
 800e626:	dbe7      	blt.n	800e5f8 <uart_stm32_set_baudrate+0x1c>
	if (IS_LPUART_INSTANCE(config->usart)) {
 800e628:	6833      	ldr	r3, [r6, #0]
 800e62a:	4a2a      	ldr	r2, [pc, #168]	; (800e6d4 <uart_stm32_set_baudrate+0xf8>)
		LL_USART_SetBaudRate(config->usart,
 800e62c:	9d07      	ldr	r5, [sp, #28]
	if (IS_LPUART_INSTANCE(config->usart)) {
 800e62e:	4293      	cmp	r3, r2
 800e630:	d11d      	bne.n	800e66e <uart_stm32_set_baudrate+0x92>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 800e632:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e6d8 <uart_stm32_set_baudrate+0xfc>
			lpuartdiv = lpuartdiv_calc(clock_rate, presc_idx, baud_rate);
 800e636:	2600      	movs	r6, #0
 800e638:	4623      	mov	r3, r4
 800e63a:	b2b2      	uxth	r2, r6
 800e63c:	4628      	mov	r0, r5
 800e63e:	2100      	movs	r1, #0
 800e640:	f7ff ffb4 	bl	800e5ac <lpuartdiv_calc>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 800e644:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 800e648:	4540      	cmp	r0, r8
 800e64a:	d91d      	bls.n	800e688 <uart_stm32_set_baudrate+0xac>
		for (presc_idx = 0; presc_idx < ARRAY_SIZE(LPUART_PRESCALER_TAB); presc_idx++) {
 800e64c:	3601      	adds	r6, #1
 800e64e:	2e0c      	cmp	r6, #12
 800e650:	d1f2      	bne.n	800e638 <uart_stm32_set_baudrate+0x5c>
			LOG_ERR("Unable to set %s to %d", dev->name, baud_rate);
 800e652:	9404      	str	r4, [sp, #16]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	9303      	str	r3, [sp, #12]
 800e658:	4b20      	ldr	r3, [pc, #128]	; (800e6dc <uart_stm32_set_baudrate+0x100>)
 800e65a:	9302      	str	r3, [sp, #8]
 800e65c:	2300      	movs	r3, #0
 800e65e:	e9cd 3300 	strd	r3, r3, [sp]
 800e662:	491b      	ldr	r1, [pc, #108]	; (800e6d0 <uart_stm32_set_baudrate+0xf4>)
 800e664:	2201      	movs	r2, #1
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff ff8e 	bl	800e588 <z_log_msg2_runtime_create.constprop.0>
			return;
 800e66c:	e7cf      	b.n	800e60e <uart_stm32_set_baudrate+0x32>
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e674:	601a      	str	r2, [r3, #0]

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 800e676:	2c00      	cmp	r4, #0
 800e678:	d0c9      	beq.n	800e60e <uart_stm32_set_baudrate+0x32>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800e67a:	eb05 0554 	add.w	r5, r5, r4, lsr #1
 800e67e:	fbb5 f4f4 	udiv	r4, r5, r4
 800e682:	b2a4      	uxth	r4, r4
 800e684:	60dc      	str	r4, [r3, #12]
 800e686:	e7c2      	b.n	800e60e <uart_stm32_set_baudrate+0x32>
  *         @arg @ref LL_LPUART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetPrescaler(USART_TypeDef *LPUARTx, uint32_t PrescalerValue)
{
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800e688:	4f12      	ldr	r7, [pc, #72]	; (800e6d4 <uart_stm32_set_baudrate+0xf8>)
 800e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68c:	f023 030f 	bic.w	r3, r3, #15
 800e690:	4333      	orrs	r3, r6
 800e692:	62fb      	str	r3, [r7, #44]	; 0x2c
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
  if (BaudRate != 0U)
 800e694:	2c00      	cmp	r4, #0
 800e696:	d0ba      	beq.n	800e60e <uart_stm32_set_baudrate+0x32>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800e698:	4b11      	ldr	r3, [pc, #68]	; (800e6e0 <uart_stm32_set_baudrate+0x104>)
 800e69a:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800e69e:	2300      	movs	r3, #0
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f7f2 fc90 	bl	8000fc8 <__aeabi_uldivmod>
 800e6a8:	0209      	lsls	r1, r1, #8
 800e6aa:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800e6ae:	0863      	lsrs	r3, r4, #1
 800e6b0:	0200      	lsls	r0, r0, #8
 800e6b2:	18c0      	adds	r0, r0, r3
 800e6b4:	4622      	mov	r2, r4
 800e6b6:	f04f 0300 	mov.w	r3, #0
 800e6ba:	f141 0100 	adc.w	r1, r1, #0
 800e6be:	f7f2 fc83 	bl	8000fc8 <__aeabi_uldivmod>
 800e6c2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	e7a1      	b.n	800e60e <uart_stm32_set_baudrate+0x32>
 800e6ca:	bf00      	nop
 800e6cc:	0801c6ae 	.word	0x0801c6ae
 800e6d0:	0801a040 	.word	0x0801a040
 800e6d4:	40008000 	.word	0x40008000
 800e6d8:	000ffcff 	.word	0x000ffcff
 800e6dc:	0801c944 	.word	0x0801c944
 800e6e0:	0801ab0e 	.word	0x0801ab0e

0800e6e4 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 800e6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800e6e8:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 800e6ea:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800e6ec:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 800e6ee:	2b01      	cmp	r3, #1
{
 800e6f0:	460c      	mov	r4, r1
	switch (parity) {
 800e6f2:	d01b      	beq.n	800e72c <uart_stm32_configure+0x48>
		return LL_USART_PARITY_NONE;
 800e6f4:	2b02      	cmp	r3, #2
 800e6f6:	bf0c      	ite	eq
 800e6f8:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 800e6fc:	f04f 0800 	movne.w	r8, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800e700:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800e704:	79a7      	ldrb	r7, [r4, #6]
 800e706:	f1b9 0f02 	cmp.w	r9, #2
 800e70a:	bf96      	itet	ls
 800e70c:	4a43      	ldrls	r2, [pc, #268]	; (800e81c <uart_stm32_configure+0x138>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800e70e:	f44f 5100 	movhi.w	r1, #8192	; 0x2000
 800e712:	f832 1019 	ldrhls.w	r1, [r2, r9, lsl #1]
	switch (db) {
 800e716:	2f02      	cmp	r7, #2
 800e718:	d00b      	beq.n	800e732 <uart_stm32_configure+0x4e>
 800e71a:	2f04      	cmp	r7, #4
 800e71c:	d077      	beq.n	800e80e <uart_stm32_configure+0x12a>
			return LL_USART_DATAWIDTH_8B;
 800e71e:	2b00      	cmp	r3, #0
 800e720:	bf14      	ite	ne
 800e722:	f44f 5e80 	movne.w	lr, #4096	; 0x1000
 800e726:	f04f 0e00 	moveq.w	lr, #0
 800e72a:	e008      	b.n	800e73e <uart_stm32_configure+0x5a>
	switch (parity) {
 800e72c:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 800e730:	e7e6      	b.n	800e700 <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 800e732:	2b00      	cmp	r3, #0
 800e734:	bf0c      	ite	eq
 800e736:	f04f 5e80 	moveq.w	lr, #268435456	; 0x10000000
 800e73a:	f04f 0e00 	movne.w	lr, #0
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800e73e:	79e2      	ldrb	r2, [r4, #7]

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e740:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800e744:	2a01      	cmp	r2, #1
 800e746:	bf14      	ite	ne
 800e748:	f04f 0c00 	movne.w	ip, #0
 800e74c:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800e750:	f1ba 0f01 	cmp.w	sl, #1
 800e754:	d95e      	bls.n	800e814 <uart_stm32_configure+0x130>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800e756:	b10b      	cbz	r3, 800e75c <uart_stm32_configure+0x78>
 800e758:	2f04      	cmp	r7, #4
 800e75a:	d05b      	beq.n	800e814 <uart_stm32_configure+0x130>
	    (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
		return -ENOTSUP;
	}

#if defined(LL_USART_STOPBITS_0_5) && HAS_LPUART_1
	if (IS_LPUART_INSTANCE(config->usart) &&
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800e820 <uart_stm32_configure+0x13c>
 800e762:	4553      	cmp	r3, sl
 800e764:	d102      	bne.n	800e76c <uart_stm32_configure+0x88>
 800e766:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800e76a:	d053      	beq.n	800e814 <uart_stm32_configure+0x130>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800e76c:	2f01      	cmp	r7, #1
 800e76e:	d951      	bls.n	800e814 <uart_stm32_configure+0x130>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800e770:	2f04      	cmp	r7, #4
 800e772:	d04f      	beq.n	800e814 <uart_stm32_configure+0x130>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800e774:	b162      	cbz	r2, 800e790 <uart_stm32_configure+0xac>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800e776:	4f2b      	ldr	r7, [pc, #172]	; (800e824 <uart_stm32_configure+0x140>)
 800e778:	42bb      	cmp	r3, r7
 800e77a:	d007      	beq.n	800e78c <uart_stm32_configure+0xa8>
 800e77c:	f5a7 4774 	sub.w	r7, r7, #62464	; 0xf400
 800e780:	42bb      	cmp	r3, r7
 800e782:	d003      	beq.n	800e78c <uart_stm32_configure+0xa8>
 800e784:	f507 5770 	add.w	r7, r7, #15360	; 0x3c00
 800e788:	42bb      	cmp	r3, r7
 800e78a:	d143      	bne.n	800e814 <uart_stm32_configure+0x130>
 800e78c:	2a01      	cmp	r2, #1
 800e78e:	d141      	bne.n	800e814 <uart_stm32_configure+0x130>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	f022 0201 	bic.w	r2, r2, #1
 800e796:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(config->usart);

	if (parity != uart_stm32_get_parity(dev)) {
 800e79e:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800e7a0:	bf1f      	itttt	ne
 800e7a2:	681a      	ldrne	r2, [r3, #0]
 800e7a4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800e7a8:	ea42 0208 	orrne.w	r2, r2, r8
 800e7ac:	601a      	strne	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800e7ae:	685a      	ldr	r2, [r3, #4]
 800e7b0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800e7b4:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e7b6:	bf1f      	itttt	ne
 800e7b8:	685f      	ldrne	r7, [r3, #4]
 800e7ba:	f427 5740 	bicne.w	r7, r7, #12288	; 0x3000
 800e7be:	430f      	orrne	r7, r1
 800e7c0:	605f      	strne	r7, [r3, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 800e7c8:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800e7ca:	bf1f      	itttt	ne
 800e7cc:	6819      	ldrne	r1, [r3, #0]
 800e7ce:	f021 2110 	bicne.w	r1, r1, #268439552	; 0x10001000
 800e7d2:	ea41 010e 	orrne.w	r1, r1, lr
 800e7d6:	6019      	strne	r1, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800e7d8:	689a      	ldr	r2, [r3, #8]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800e7da:	6821      	ldr	r1, [r4, #0]
 800e7dc:	f402 7240 	and.w	r2, r2, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800e7e0:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e7e2:	bf1f      	itttt	ne
 800e7e4:	689a      	ldrne	r2, [r3, #8]
 800e7e6:	f422 7240 	bicne.w	r2, r2, #768	; 0x300
 800e7ea:	ea42 020c 	orrne.w	r2, r2, ip
 800e7ee:	609a      	strne	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 800e7f0:	6833      	ldr	r3, [r6, #0]
 800e7f2:	4299      	cmp	r1, r3
 800e7f4:	d003      	beq.n	800e7fe <uart_stm32_configure+0x11a>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800e7f6:	f7ff fef1 	bl	800e5dc <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800e7fa:	6823      	ldr	r3, [r4, #0]
 800e7fc:	6033      	str	r3, [r6, #0]
	}

	LL_USART_Enable(config->usart);
 800e7fe:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e800:	6813      	ldr	r3, [r2, #0]
 800e802:	f043 0301 	orr.w	r3, r3, #1
 800e806:	6013      	str	r3, [r2, #0]
	return 0;
 800e808:	2000      	movs	r0, #0
};
 800e80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 800e80e:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 800e812:	e794      	b.n	800e73e <uart_stm32_configure+0x5a>
		return -ENOTSUP;
 800e814:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800e818:	e7f7      	b.n	800e80a <uart_stm32_configure+0x126>
 800e81a:	bf00      	nop
 800e81c:	0801ab08 	.word	0x0801ab08
 800e820:	40008000 	.word	0x40008000
 800e824:	40013800 	.word	0x40013800

0800e828 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800e828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
 800e82c:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800e82e:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 800e830:	4c3e      	ldr	r4, [pc, #248]	; (800e92c <uart_stm32_init+0x104>)
 800e832:	607c      	str	r4, [r7, #4]
{
 800e834:	b086      	sub	sp, #24
 800e836:	4606      	mov	r6, r0
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
 800e838:	f105 0804 	add.w	r8, r5, #4
 800e83c:	4620      	mov	r0, r4
 800e83e:	f00a fa93 	bl	8018d68 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800e842:	2800      	cmp	r0, #0
 800e844:	d06c      	beq.n	800e920 <uart_stm32_init+0xf8>
	return api->on(dev, sys);
 800e846:	68a3      	ldr	r3, [r4, #8]
 800e848:	4620      	mov	r0, r4
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4641      	mov	r1, r8
 800e84e:	4798      	blx	r3
	if (clock_control_on(data->clock,
 800e850:	4604      	mov	r4, r0
 800e852:	2800      	cmp	r0, #0
 800e854:	d164      	bne.n	800e920 <uart_stm32_init+0xf8>
	ret = pinctrl_lookup_state(config, id, &state);
 800e856:	4601      	mov	r1, r0
 800e858:	466a      	mov	r2, sp
 800e85a:	69a8      	ldr	r0, [r5, #24]
 800e85c:	f009 f863 	bl	8017926 <pinctrl_lookup_state>
	if (ret < 0) {
 800e860:	2800      	cmp	r0, #0
 800e862:	db5f      	blt.n	800e924 <uart_stm32_init+0xfc>
	return pinctrl_apply_state_direct(config, state);
 800e864:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800e866:	4622      	mov	r2, r4
 800e868:	7919      	ldrb	r1, [r3, #4]
 800e86a:	6818      	ldr	r0, [r3, #0]
 800e86c:	f000 f960 	bl	800eb30 <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800e870:	2800      	cmp	r0, #0
 800e872:	db57      	blt.n	800e924 <uart_stm32_init+0xfc>
		return err;
	}

	LL_USART_Disable(config->usart);
 800e874:	682a      	ldr	r2, [r5, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800e876:	6813      	ldr	r3, [r2, #0]
 800e878:	f023 0301 	bic.w	r3, r3, #1
 800e87c:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800e882:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e886:	e842 3400 	strex	r4, r3, [r2]
 800e88a:	2c00      	cmp	r4, #0
 800e88c:	d1f7      	bne.n	800e87e <uart_stm32_init+0x56>
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800e88e:	692b      	ldr	r3, [r5, #16]
 800e890:	2b02      	cmp	r3, #2
 800e892:	d010      	beq.n	800e8b6 <uart_stm32_init+0x8e>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800e894:	2b01      	cmp	r3, #1
 800e896:	d03e      	beq.n	800e916 <uart_stm32_init+0xee>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 800e898:	b15b      	cbz	r3, 800e8b2 <uart_stm32_init+0x8a>
			LOG_WRN("Invalid parity setting '%d'."
 800e89a:	4a25      	ldr	r2, [pc, #148]	; (800e930 <uart_stm32_init+0x108>)
 800e89c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8a0:	2303      	movs	r3, #3
 800e8a2:	9303      	str	r3, [sp, #12]
 800e8a4:	4823      	ldr	r0, [pc, #140]	; (800e934 <uart_stm32_init+0x10c>)
 800e8a6:	4623      	mov	r3, r4
 800e8a8:	aa03      	add	r2, sp, #12
 800e8aa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800e8ae:	f005 fc90 	bl	80141d2 <z_impl_z_log_msg2_static_create>
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800e8b2:	4622      	mov	r2, r4
 800e8b4:	e003      	b.n	800e8be <uart_stm32_init+0x96>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800e8b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800e8ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
	}

	/* Set datawidth and parity, 1 start bit, 1 stop bit  */
	LL_USART_ConfigCharacter(config->usart,
 800e8be:	6829      	ldr	r1, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800e8c0:	680b      	ldr	r3, [r1, #0]
 800e8c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e8ca:	4314      	orrs	r4, r2
 800e8cc:	4323      	orrs	r3, r4
 800e8ce:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e8d0:	684b      	ldr	r3, [r1, #4]
 800e8d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e8d6:	604b      	str	r3, [r1, #4]
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800e8d8:	7b2b      	ldrb	r3, [r5, #12]
 800e8da:	b12b      	cbz	r3, 800e8e8 <uart_stm32_init+0xc0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 800e8dc:	6873      	ldr	r3, [r6, #4]
 800e8de:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e8e0:	6893      	ldr	r3, [r2, #8]
 800e8e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e8e6:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800e8e8:	6839      	ldr	r1, [r7, #0]
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	f7ff fe76 	bl	800e5dc <uart_stm32_set_baudrate>

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 800e8f0:	7d2a      	ldrb	r2, [r5, #20]
 800e8f2:	682b      	ldr	r3, [r5, #0]
 800e8f4:	b11a      	cbz	r2, 800e8fe <uart_stm32_init+0xd6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800e8f6:	689a      	ldr	r2, [r3, #8]
 800e8f8:	f042 0208 	orr.w	r2, r2, #8
 800e8fc:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	f042 0201 	orr.w	r2, r2, #1
 800e904:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800e906:	69da      	ldr	r2, [r3, #28]
 800e908:	0291      	lsls	r1, r2, #10
 800e90a:	d5fc      	bpl.n	800e906 <uart_stm32_init+0xde>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800e90c:	69da      	ldr	r2, [r3, #28]
 800e90e:	0252      	lsls	r2, r2, #9
 800e910:	d5fc      	bpl.n	800e90c <uart_stm32_init+0xe4>
#endif /* CONFIG_PM || CONFIG_UART_INTERRUPT_DRIVEN || CONFIG_UART_ASYNC_API */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
 800e912:	2000      	movs	r0, #0
 800e914:	e006      	b.n	800e924 <uart_stm32_init+0xfc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800e916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800e91a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800e91e:	e7ce      	b.n	800e8be <uart_stm32_init+0x96>
		return -EIO;
 800e920:	f06f 0004 	mvn.w	r0, #4
#endif
}
 800e924:	b006      	add	sp, #24
 800e926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e92a:	bf00      	nop
 800e92c:	08019bd8 	.word	0x08019bd8
 800e930:	0801c95b 	.word	0x0801c95b
 800e934:	0801a040 	.word	0x0801a040

0800e938 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800e938:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800e93c:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800e93e:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800e940:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800e942:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800e944:	4b09      	ldr	r3, [pc, #36]	; (800e96c <elapsed+0x34>)
 800e946:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800e94a:	4909      	ldr	r1, [pc, #36]	; (800e970 <elapsed+0x38>)
 800e94c:	d101      	bne.n	800e952 <elapsed+0x1a>
	    || (val1 < val2)) {
 800e94e:	4282      	cmp	r2, r0
 800e950:	d206      	bcs.n	800e960 <elapsed+0x28>
		overflow_cyc += last_load;
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	680c      	ldr	r4, [r1, #0]
 800e956:	4422      	add	r2, r4
 800e958:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800e95a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e95e:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	680a      	ldr	r2, [r1, #0]
 800e964:	4413      	add	r3, r2
}
 800e966:	1a18      	subs	r0, r3, r0
 800e968:	bd10      	pop	{r4, pc}
 800e96a:	bf00      	nop
 800e96c:	200022dc 	.word	0x200022dc
 800e970:	200022d8 	.word	0x200022d8

0800e974 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e974:	4b09      	ldr	r3, [pc, #36]	; (800e99c <sys_clock_driver_init+0x28>)
 800e976:	2210      	movs	r2, #16
 800e978:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800e97c:	4b08      	ldr	r3, [pc, #32]	; (800e9a0 <sys_clock_driver_init+0x2c>)
 800e97e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800e982:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800e984:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <sys_clock_driver_init+0x30>)
 800e986:	2000      	movs	r0, #0
 800e988:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800e98a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e98e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800e990:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800e992:	691a      	ldr	r2, [r3, #16]
 800e994:	f042 0207 	orr.w	r2, r2, #7
 800e998:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800e99a:	4770      	bx	lr
 800e99c:	e000ed00 	.word	0xe000ed00
 800e9a0:	200022d8 	.word	0x200022d8
 800e9a4:	200022dc 	.word	0x200022dc

0800e9a8 <sys_clock_isr>:
{
 800e9a8:	b508      	push	{r3, lr}
	elapsed();
 800e9aa:	f7ff ffc5 	bl	800e938 <elapsed>
	cycle_count += overflow_cyc;
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	; (800e9e0 <sys_clock_isr+0x38>)
 800e9b0:	4a0c      	ldr	r2, [pc, #48]	; (800e9e4 <sys_clock_isr+0x3c>)
 800e9b2:	6818      	ldr	r0, [r3, #0]
 800e9b4:	6811      	ldr	r1, [r2, #0]
 800e9b6:	4408      	add	r0, r1
 800e9b8:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800e9be:	4a0a      	ldr	r2, [pc, #40]	; (800e9e8 <sys_clock_isr+0x40>)
 800e9c0:	6813      	ldr	r3, [r2, #0]
 800e9c2:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 800e9c6:	1ac0      	subs	r0, r0, r3
 800e9c8:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 800e9cc:	fb01 3300 	mla	r3, r1, r0, r3
 800e9d0:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800e9d2:	f002 f9a1 	bl	8010d18 <sys_clock_announce>
}
 800e9d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800e9da:	f7f6 ba3d 	b.w	8004e58 <z_arm_exc_exit>
 800e9de:	bf00      	nop
 800e9e0:	200022dc 	.word	0x200022dc
 800e9e4:	200022d4 	.word	0x200022d4
 800e9e8:	200022d0 	.word	0x200022d0

0800e9ec <sys_clock_set_timeout>:
{
 800e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ee:	4c31      	ldr	r4, [pc, #196]	; (800eab4 <sys_clock_set_timeout+0xc8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800e9f0:	b159      	cbz	r1, 800ea0a <sys_clock_set_timeout+0x1e>
 800e9f2:	1c42      	adds	r2, r0, #1
 800e9f4:	d109      	bne.n	800ea0a <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800e9f6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e9fa:	6913      	ldr	r3, [r2, #16]
 800e9fc:	f023 0301 	bic.w	r3, r3, #1
 800ea00:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800ea02:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800ea06:	6023      	str	r3, [r4, #0]
}
 800ea08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800ea0a:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 800ea0c:	6826      	ldr	r6, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800ea0e:	d023      	beq.n	800ea58 <sys_clock_set_timeout+0x6c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800ea10:	2801      	cmp	r0, #1
 800ea12:	dd24      	ble.n	800ea5e <sys_clock_set_timeout+0x72>
 800ea14:	f640 53a6 	movw	r3, #3494	; 0xda6
 800ea18:	4298      	cmp	r0, r3
 800ea1a:	dc22      	bgt.n	800ea62 <sys_clock_set_timeout+0x76>
 800ea1c:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 800ea1e:	f04f 0310 	mov.w	r3, #16
 800ea22:	f3ef 8511 	mrs	r5, BASEPRI
 800ea26:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea2a:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800ea2e:	f7ff ff83 	bl	800e938 <elapsed>
	cycle_count += pending;
 800ea32:	4921      	ldr	r1, [pc, #132]	; (800eab8 <sys_clock_set_timeout+0xcc>)
	val1 = SysTick->VAL;
 800ea34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 800ea38:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 800ea3a:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 800ea3e:	680b      	ldr	r3, [r1, #0]
 800ea40:	4418      	add	r0, r3
	overflow_cyc = 0U;
 800ea42:	4b1e      	ldr	r3, [pc, #120]	; (800eabc <sys_clock_set_timeout+0xd0>)
	cycle_count += pending;
 800ea44:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 800ea46:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800ea48:	4b1d      	ldr	r3, [pc, #116]	; (800eac0 <sys_clock_set_timeout+0xd4>)
 800ea4a:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800ea4c:	1a83      	subs	r3, r0, r2
 800ea4e:	d50a      	bpl.n	800ea66 <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 800ea50:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800ea54:	6023      	str	r3, [r4, #0]
 800ea56:	e019      	b.n	800ea8c <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800ea58:	f640 50a6 	movw	r0, #3494	; 0xda6
 800ea5c:	e7de      	b.n	800ea1c <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800ea5e:	2700      	movs	r7, #0
 800ea60:	e7dd      	b.n	800ea1e <sys_clock_set_timeout+0x32>
 800ea62:	461f      	mov	r7, r3
 800ea64:	e7db      	b.n	800ea1e <sys_clock_set_timeout+0x32>
		delay = ticks * CYC_PER_TICK;
 800ea66:	f44f 5e96 	mov.w	lr, #4800	; 0x12c0
		delay += unannounced;
 800ea6a:	fb0e 3307 	mla	r3, lr, r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800ea6e:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
		delay -= unannounced;
 800ea72:	1a12      	subs	r2, r2, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800ea74:	331f      	adds	r3, #31
 800ea76:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 800ea7a:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 800ea7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea82:	d9e5      	bls.n	800ea50 <sys_clock_set_timeout+0x64>
		if (delay > MAX_CYCLES) {
 800ea84:	4a0f      	ldr	r2, [pc, #60]	; (800eac4 <sys_clock_set_timeout+0xd8>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d9e4      	bls.n	800ea54 <sys_clock_set_timeout+0x68>
			last_load = MAX_CYCLES;
 800ea8a:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 800ea8c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 800ea90:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 800ea92:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 800ea94:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 800ea96:	bf38      	it	cc
 800ea98:	44b4      	addcc	ip, r6
	SysTick->LOAD = last_load - 1;
 800ea9a:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 800ea9c:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 800eaa0:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 800eaa2:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 800eaa4:	2400      	movs	r4, #0
 800eaa6:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 800eaa8:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 800eaaa:	f385 8811 	msr	BASEPRI, r5
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	e7a9      	b.n	800ea08 <sys_clock_set_timeout+0x1c>
 800eab4:	200022d8 	.word	0x200022d8
 800eab8:	200022d4 	.word	0x200022d4
 800eabc:	200022dc 	.word	0x200022dc
 800eac0:	200022d0 	.word	0x200022d0
 800eac4:	00ffe880 	.word	0x00ffe880

0800eac8 <sys_clock_elapsed>:
{
 800eac8:	b510      	push	{r4, lr}
	__asm__ volatile(
 800eaca:	f04f 0310 	mov.w	r3, #16
 800eace:	f3ef 8411 	mrs	r4, BASEPRI
 800ead2:	f383 8812 	msr	BASEPRI_MAX, r3
 800ead6:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800eada:	f7ff ff2d 	bl	800e938 <elapsed>
 800eade:	4b07      	ldr	r3, [pc, #28]	; (800eafc <sys_clock_elapsed+0x34>)
 800eae0:	4a07      	ldr	r2, [pc, #28]	; (800eb00 <sys_clock_elapsed+0x38>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	6812      	ldr	r2, [r2, #0]
 800eae6:	1a9b      	subs	r3, r3, r2
 800eae8:	4403      	add	r3, r0
	__asm__ volatile(
 800eaea:	f384 8811 	msr	BASEPRI, r4
 800eaee:	f3bf 8f6f 	isb	sy
}
 800eaf2:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800eaf6:	fbb3 f0f0 	udiv	r0, r3, r0
 800eafa:	bd10      	pop	{r4, pc}
 800eafc:	200022d4 	.word	0x200022d4
 800eb00:	200022d0 	.word	0x200022d0

0800eb04 <sys_clock_cycle_get_32>:
{
 800eb04:	b510      	push	{r4, lr}
	__asm__ volatile(
 800eb06:	f04f 0310 	mov.w	r3, #16
 800eb0a:	f3ef 8411 	mrs	r4, BASEPRI
 800eb0e:	f383 8812 	msr	BASEPRI_MAX, r3
 800eb12:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800eb16:	f7ff ff0f 	bl	800e938 <elapsed>
 800eb1a:	4b04      	ldr	r3, [pc, #16]	; (800eb2c <sys_clock_cycle_get_32+0x28>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4418      	add	r0, r3
	__asm__ volatile(
 800eb20:	f384 8811 	msr	BASEPRI, r4
 800eb24:	f3bf 8f6f 	isb	sy
}
 800eb28:	bd10      	pop	{r4, pc}
 800eb2a:	bf00      	nop
 800eb2c:	200022d4 	.word	0x200022d4

0800eb30 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800eb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 800eb34:	4f1c      	ldr	r7, [pc, #112]	; (800eba8 <pinctrl_configure_pins+0x78>)
 800eb36:	4604      	mov	r4, r0
 800eb38:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t func = 0;
 800eb3c:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800eb3e:	42b4      	cmp	r4, r6
 800eb40:	d101      	bne.n	800eb46 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800eb42:	2000      	movs	r0, #0
 800eb44:	e014      	b.n	800eb70 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 800eb46:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800eb48:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800eb4a:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800eb4e:	d411      	bmi.n	800eb74 <pinctrl_configure_pins+0x44>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800eb50:	6865      	ldr	r5, [r4, #4]
 800eb52:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800eb56:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800eb5a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800eb5e:	280a      	cmp	r0, #10
 800eb60:	d81e      	bhi.n	800eba0 <pinctrl_configure_pins+0x70>
	port_device = gpio_ports[STM32_PORT(pin)];
 800eb62:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800eb66:	f1b8 0f00 	cmp.w	r8, #0
 800eb6a:	d108      	bne.n	800eb7e <pinctrl_configure_pins+0x4e>
		return -ENODEV;
 800eb6c:	f06f 0012 	mvn.w	r0, #18
}
 800eb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			func = STM32_MODER_ANALOG_MODE;
 800eb74:	f1b9 0f10 	cmp.w	r9, #16
 800eb78:	bf08      	it	eq
 800eb7a:	2530      	moveq	r5, #48	; 0x30
 800eb7c:	e7eb      	b.n	800eb56 <pinctrl_configure_pins+0x26>
 800eb7e:	4640      	mov	r0, r8
 800eb80:	f00a f8f2 	bl	8018d68 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d0f1      	beq.n	800eb6c <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800eb88:	464b      	mov	r3, r9
 800eb8a:	462a      	mov	r2, r5
 800eb8c:	f00a 010f 	and.w	r1, sl, #15
 800eb90:	4640      	mov	r0, r8
 800eb92:	f008 f8de 	bl	8016d52 <gpio_stm32_configure>
		if (ret < 0) {
 800eb96:	2800      	cmp	r0, #0
 800eb98:	f104 0408 	add.w	r4, r4, #8
 800eb9c:	dacf      	bge.n	800eb3e <pinctrl_configure_pins+0xe>
 800eb9e:	e7e7      	b.n	800eb70 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800eba0:	f06f 0015 	mvn.w	r0, #21
 800eba4:	e7e4      	b.n	800eb70 <pinctrl_configure_pins+0x40>
 800eba6:	bf00      	nop
 800eba8:	0801a860 	.word	0x0801a860

0800ebac <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800ebac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800ebae:	6804      	ldr	r4, [r0, #0]
{
 800ebb0:	4605      	mov	r5, r0
	if (!tp) return vol;	/* Invalid path name? */
 800ebb2:	b37c      	cbz	r4, 800ec14 <get_ldnumber+0x68>
 800ebb4:	4621      	mov	r1, r4
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
 800ebb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebba:	2b20      	cmp	r3, #32
 800ebbc:	d92d      	bls.n	800ec1a <get_ldnumber+0x6e>
 800ebbe:	2b3a      	cmp	r3, #58	; 0x3a
 800ebc0:	d1f9      	bne.n	800ebb6 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800ebc2:	7820      	ldrb	r0, [r4, #0]
 800ebc4:	3830      	subs	r0, #48	; 0x30
 800ebc6:	b2c3      	uxtb	r3, r0
 800ebc8:	2b09      	cmp	r3, #9
 800ebca:	d91e      	bls.n	800ec0a <get_ldnumber+0x5e>
 800ebcc:	4f16      	ldr	r7, [pc, #88]	; (800ec28 <get_ldnumber+0x7c>)
 800ebce:	2000      	movs	r0, #0
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
 800ebd0:	f857 cb04 	ldr.w	ip, [r7], #4
 800ebd4:	4626      	mov	r6, r4
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
 800ebd6:	f81c 3b01 	ldrb.w	r3, [ip], #1
 800ebda:	f816 2b01 	ldrb.w	r2, [r6], #1
					if (IsLower(c)) c -= 0x20;
 800ebde:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 800ebe2:	f1be 0f19 	cmp.w	lr, #25
 800ebe6:	bf98      	it	ls
 800ebe8:	3b20      	subls	r3, #32
					if (IsLower(tc)) tc -= 0x20;
 800ebea:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
					if (IsLower(c)) c -= 0x20;
 800ebee:	bf98      	it	ls
 800ebf0:	b2db      	uxtbls	r3, r3
					if (IsLower(tc)) tc -= 0x20;
 800ebf2:	f1be 0f19 	cmp.w	lr, #25
 800ebf6:	bf9c      	itt	ls
 800ebf8:	3a20      	subls	r2, #32
 800ebfa:	b2d2      	uxtbls	r2, r2
				} while (c && (TCHAR)c == tc);
 800ebfc:	b17b      	cbz	r3, 800ec1e <get_ldnumber+0x72>
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d0e9      	beq.n	800ebd6 <get_ldnumber+0x2a>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 800ec02:	3001      	adds	r0, #1
 800ec04:	2808      	cmp	r0, #8
 800ec06:	d1e3      	bne.n	800ebd0 <get_ldnumber+0x24>
 800ec08:	e004      	b.n	800ec14 <get_ldnumber+0x68>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800ec0a:	1ca3      	adds	r3, r4, #2
 800ec0c:	4299      	cmp	r1, r3
 800ec0e:	d1dd      	bne.n	800ebcc <get_ldnumber+0x20>
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800ec10:	2807      	cmp	r0, #7
 800ec12:	dd06      	ble.n	800ec22 <get_ldnumber+0x76>
	if (!tp) return vol;	/* Invalid path name? */
 800ec14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec18:	e004      	b.n	800ec24 <get_ldnumber+0x78>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	e002      	b.n	800ec24 <get_ldnumber+0x78>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 800ec1e:	42b1      	cmp	r1, r6
 800ec20:	d1ef      	bne.n	800ec02 <get_ldnumber+0x56>
			*path = tt;		/* Snip the drive prefix off */
 800ec22:	6029      	str	r1, [r5, #0]
}
 800ec24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec26:	bf00      	nop
 800ec28:	0801a88c 	.word	0x0801a88c

0800ec2c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800ec2c:	b538      	push	{r3, r4, r5, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800ec2e:	2300      	movs	r3, #0
 800ec30:	70c3      	strb	r3, [r0, #3]
 800ec32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec36:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800ec38:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800ec3a:	f008 feeb 	bl	8017a14 <move_window>
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	d146      	bne.n	800ecd0 <check_fs+0xa4>
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800ec42:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ec46:	f8b4 522e 	ldrh.w	r5, [r4, #558]	; 0x22e
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800ec4a:	2beb      	cmp	r3, #235	; 0xeb
 800ec4c:	d00a      	beq.n	800ec64 <check_fs+0x38>
 800ec4e:	3318      	adds	r3, #24
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d906      	bls.n	800ec64 <check_fs+0x38>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800ec56:	f64a 2055 	movw	r0, #43605	; 0xaa55
 800ec5a:	4285      	cmp	r5, r0
 800ec5c:	bf0c      	ite	eq
 800ec5e:	2002      	moveq	r0, #2
 800ec60:	2003      	movne	r0, #3
}
 800ec62:	bd38      	pop	{r3, r4, r5, pc}
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800ec64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec68:	429d      	cmp	r5, r3
 800ec6a:	d027      	beq.n	800ecbc <check_fs+0x90>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800ec6c:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 800ec70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec74:	d1ef      	bne.n	800ec56 <check_fs+0x2a>
		b = fs->win[BPB_SecPerClus];
 800ec76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d0eb      	beq.n	800ec56 <check_fs+0x2a>
 800ec7e:	1e5a      	subs	r2, r3, #1
 800ec80:	421a      	tst	r2, r3
 800ec82:	d1e8      	bne.n	800ec56 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800ec84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d0e5      	beq.n	800ec56 <check_fs+0x2a>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800ec8a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d8e0      	bhi.n	800ec56 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800ec94:	f8b4 3041 	ldrh.w	r3, [r4, #65]	; 0x41
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d0dc      	beq.n	800ec56 <check_fs+0x2a>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800ec9c:	f8b4 3043 	ldrh.w	r3, [r4, #67]	; 0x43
 800eca0:	2b7f      	cmp	r3, #127	; 0x7f
 800eca2:	d806      	bhi.n	800ecb2 <check_fs+0x86>
 800eca4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eca8:	f008 fe55 	bl	8017956 <ld_dword>
 800ecac:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800ecb0:	d3d1      	bcc.n	800ec56 <check_fs+0x2a>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800ecb2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d0cd      	beq.n	800ec56 <check_fs+0x2a>
 800ecba:	e007      	b.n	800eccc <check_fs+0xa0>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800ecbc:	4905      	ldr	r1, [pc, #20]	; (800ecd4 <check_fs+0xa8>)
 800ecbe:	2208      	movs	r2, #8
 800ecc0:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800ecc4:	f00a fbc6 	bl	8019454 <memcmp>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d1cf      	bne.n	800ec6c <check_fs+0x40>
			return 0;	/* It is an FAT32 VBR */
 800eccc:	2000      	movs	r0, #0
 800ecce:	e7c8      	b.n	800ec62 <check_fs+0x36>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800ecd0:	2004      	movs	r0, #4
 800ecd2:	e7c6      	b.n	800ec62 <check_fs+0x36>
 800ecd4:	0801c9c7 	.word	0x0801c9c7

0800ecd8 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 800ecd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800ecda:	2300      	movs	r3, #0
{
 800ecdc:	b085      	sub	sp, #20
	*rfs = 0;
 800ecde:	600b      	str	r3, [r1, #0]
{
 800ece0:	460f      	mov	r7, r1
 800ece2:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800ece4:	f7ff ff62 	bl	800ebac <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ece8:	1e06      	subs	r6, r0, #0
 800ecea:	f2c0 8101 	blt.w	800eef0 <mount_volume+0x218>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800ecee:	4b87      	ldr	r3, [pc, #540]	; (800ef0c <mount_volume+0x234>)
 800ecf0:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800ecf4:	2c00      	cmp	r4, #0
 800ecf6:	f000 80fd 	beq.w	800eef4 <mount_volume+0x21c>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800ecfa:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800ecfc:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ecfe:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800ed02:	b163      	cbz	r3, 800ed1e <mount_volume+0x46>
		stat = disk_status(fs->pdrv);
 800ed04:	7860      	ldrb	r0, [r4, #1]
 800ed06:	f000 fd6f 	bl	800f7e8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed0a:	07c7      	lsls	r7, r0, #31
 800ed0c:	d407      	bmi.n	800ed1e <mount_volume+0x46>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ed0e:	b11d      	cbz	r5, 800ed18 <mount_volume+0x40>
 800ed10:	f010 0504 	ands.w	r5, r0, #4
 800ed14:	d000      	beq.n	800ed18 <mount_volume+0x40>
				return FR_WRITE_PROTECTED;
 800ed16:	250a      	movs	r5, #10
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800ed18:	4628      	mov	r0, r5
 800ed1a:	b005      	add	sp, #20
 800ed1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800ed1e:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
 800ed20:	2300      	movs	r3, #0
 800ed22:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800ed24:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800ed26:	f000 fd6b 	bl	800f800 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ed2a:	07c6      	lsls	r6, r0, #31
 800ed2c:	f100 80e4 	bmi.w	800eef8 <mount_volume+0x220>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ed30:	b10d      	cbz	r5, 800ed36 <mount_volume+0x5e>
 800ed32:	0741      	lsls	r1, r0, #29
 800ed34:	d4ef      	bmi.n	800ed16 <mount_volume+0x3e>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800ed36:	2100      	movs	r1, #0
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f7ff ff77 	bl	800ec2c <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800ed3e:	2802      	cmp	r0, #2
 800ed40:	f040 80c0 	bne.w	800eec4 <mount_volume+0x1ec>
 800ed44:	466e      	mov	r6, sp
 800ed46:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 800ed4a:	f204 2136 	addw	r1, r4, #566	; 0x236
 800ed4e:	4632      	mov	r2, r6
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800ed50:	4618      	mov	r0, r3
 800ed52:	f008 fe00 	bl	8017956 <ld_dword>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800ed56:	3310      	adds	r3, #16
 800ed58:	428b      	cmp	r3, r1
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800ed5a:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800ed5e:	d1f7      	bne.n	800ed50 <mount_volume+0x78>
 800ed60:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800ed62:	f856 1b04 	ldr.w	r1, [r6], #4
 800ed66:	2900      	cmp	r1, #0
 800ed68:	f000 80a3 	beq.w	800eeb2 <mount_volume+0x1da>
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f7ff ff5d 	bl	800ec2c <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800ed72:	2801      	cmp	r0, #1
 800ed74:	f200 809e 	bhi.w	800eeb4 <mount_volume+0x1dc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ed78:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 800ed7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed80:	f040 80a5 	bne.w	800eece <mount_volume+0x1f6>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ed84:	f8b4 6046 	ldrh.w	r6, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ed88:	b926      	cbnz	r6, 800ed94 <mount_volume+0xbc>
 800ed8a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800ed8e:	f008 fde2 	bl	8017956 <ld_dword>
 800ed92:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ed94:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	bsect = fs->winsect;					/* Volume offset */
 800ed98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		fs->fsize = fasize;
 800ed9a:	61a6      	str	r6, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ed9c:	1e5a      	subs	r2, r3, #1
 800ed9e:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eda0:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eda2:	f200 8094 	bhi.w	800eece <mount_volume+0x1f6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eda6:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 800edaa:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800edac:	2d00      	cmp	r5, #0
 800edae:	f000 808e 	beq.w	800eece <mount_volume+0x1f6>
 800edb2:	1e6a      	subs	r2, r5, #1
 800edb4:	422a      	tst	r2, r5
 800edb6:	f040 808a 	bne.w	800eece <mount_volume+0x1f6>
	rv = ptr[1];
 800edba:	f8b4 7041 	ldrh.w	r7, [r4, #65]	; 0x41
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800edbe:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800edc0:	073a      	lsls	r2, r7, #28
 800edc2:	f040 8084 	bne.w	800eece <mount_volume+0x1f6>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800edc6:	f8b4 0043 	ldrh.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800edca:	b918      	cbnz	r0, 800edd4 <mount_volume+0xfc>
 800edcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800edd0:	f008 fdc1 	bl	8017956 <ld_dword>
	rv = ptr[1];
 800edd4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800edd6:	2a00      	cmp	r2, #0
 800edd8:	d079      	beq.n	800eece <mount_volume+0x1f6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800edda:	fb06 fe03 	mul.w	lr, r6, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800edde:	eb02 1c17 	add.w	ip, r2, r7, lsr #4
 800ede2:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ede4:	4560      	cmp	r0, ip
 800ede6:	d372      	bcc.n	800eece <mount_volume+0x1f6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ede8:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800edec:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800edee:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800edf2:	d36c      	bcc.n	800eece <mount_volume+0x1f6>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800edf4:	4846      	ldr	r0, [pc, #280]	; (800ef10 <mount_volume+0x238>)
 800edf6:	4283      	cmp	r3, r0
 800edf8:	d869      	bhi.n	800eece <mount_volume+0x1f6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800edfa:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800edfe:	4283      	cmp	r3, r0
 800ee00:	d97c      	bls.n	800eefc <mount_volume+0x224>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800ee02:	2503      	movs	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ee04:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee06:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
 800ee08:	eb01 000c 	add.w	r0, r1, ip
		if (fmt == FS_FAT32) {
 800ee0c:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ee0e:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ee10:	61e1      	str	r1, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee12:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ee14:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ee16:	d15c      	bne.n	800eed2 <mount_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 800ee18:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee1c:	433a      	orrs	r2, r7
 800ee1e:	d156      	bne.n	800eece <mount_volume+0x1f6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee24:	f008 fd97 	bl	8017956 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ee28:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee2a:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ee2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ee30:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 800ee34:	d34b      	bcc.n	800eece <mount_volume+0x1f6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ee36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee3a:	e9c4 3303 	strd	r3, r3, [r4, #12]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800ee3e:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
 800ee40:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ee44:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800ee46:	d12b      	bne.n	800eea0 <mount_volume+0x1c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ee48:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d127      	bne.n	800eea0 <mount_volume+0x1c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ee50:	3101      	adds	r1, #1
 800ee52:	4620      	mov	r0, r4
 800ee54:	f008 fdde 	bl	8017a14 <move_window>
 800ee58:	bb10      	cbnz	r0, 800eea0 <mount_volume+0x1c8>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800ee5a:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 800ee5e:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800ee60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d11b      	bne.n	800eea0 <mount_volume+0x1c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ee68:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800ee6c:	f008 fd73 	bl	8017956 <ld_dword>
 800ee70:	4b28      	ldr	r3, [pc, #160]	; (800ef14 <mount_volume+0x23c>)
 800ee72:	4298      	cmp	r0, r3
 800ee74:	d114      	bne.n	800eea0 <mount_volume+0x1c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ee76:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800ee7a:	f008 fd6c 	bl	8017956 <ld_dword>
 800ee7e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800ee82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ee86:	3320      	adds	r3, #32
 800ee88:	4298      	cmp	r0, r3
 800ee8a:	d109      	bne.n	800eea0 <mount_volume+0x1c8>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ee8c:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800ee90:	f008 fd61 	bl	8017956 <ld_dword>
 800ee94:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ee96:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800ee9a:	f008 fd5c 	bl	8017956 <ld_dword>
 800ee9e:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
 800eea0:	4a1d      	ldr	r2, [pc, #116]	; (800ef18 <mount_volume+0x240>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 800eea2:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800eea4:	8813      	ldrh	r3, [r2, #0]
 800eea6:	3301      	adds	r3, #1
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	8013      	strh	r3, [r2, #0]
 800eeac:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800eeae:	2500      	movs	r5, #0
 800eeb0:	e732      	b.n	800ed18 <mount_volume+0x40>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800eeb2:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800eeb4:	3501      	adds	r5, #1
 800eeb6:	2d04      	cmp	r5, #4
 800eeb8:	f47f af53 	bne.w	800ed62 <mount_volume+0x8a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eebc:	2804      	cmp	r0, #4
 800eebe:	d106      	bne.n	800eece <mount_volume+0x1f6>
 800eec0:	2501      	movs	r5, #1
 800eec2:	e729      	b.n	800ed18 <mount_volume+0x40>
 800eec4:	2804      	cmp	r0, #4
 800eec6:	d0fb      	beq.n	800eec0 <mount_volume+0x1e8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eec8:	2801      	cmp	r0, #1
 800eeca:	f67f af55 	bls.w	800ed78 <mount_volume+0xa0>
 800eece:	250d      	movs	r5, #13
 800eed0:	e722      	b.n	800ed18 <mount_volume+0x40>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800eed2:	2f00      	cmp	r7, #0
 800eed4:	d0fb      	beq.n	800eece <mount_volume+0x1f6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eed6:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eed8:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eeda:	6262      	str	r2, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eedc:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eee0:	bf1b      	ittet	ne
 800eee2:	18d2      	addne	r2, r2, r3
 800eee4:	f003 0301 	andne.w	r3, r3, #1
 800eee8:	4613      	moveq	r3, r2
 800eeea:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800eeee:	e79d      	b.n	800ee2c <mount_volume+0x154>
	if (vol < 0) return FR_INVALID_DRIVE;
 800eef0:	250b      	movs	r5, #11
 800eef2:	e711      	b.n	800ed18 <mount_volume+0x40>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800eef4:	250c      	movs	r5, #12
 800eef6:	e70f      	b.n	800ed18 <mount_volume+0x40>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eef8:	2503      	movs	r5, #3
 800eefa:	e70d      	b.n	800ed18 <mount_volume+0x40>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eefc:	f640 75f5 	movw	r5, #4085	; 0xff5
 800ef00:	42ab      	cmp	r3, r5
 800ef02:	bf8c      	ite	hi
 800ef04:	2502      	movhi	r5, #2
 800ef06:	2501      	movls	r5, #1
 800ef08:	e77c      	b.n	800ee04 <mount_volume+0x12c>
 800ef0a:	bf00      	nop
 800ef0c:	200022e0 	.word	0x200022e0
 800ef10:	0ffffff5 	.word	0x0ffffff5
 800ef14:	41615252 	.word	0x41615252
 800ef18:	2000235c 	.word	0x2000235c

0800ef1c <follow_path>:
{
 800ef1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800ef20:	f8d0 b000 	ldr.w	fp, [r0]
{
 800ef24:	4604      	mov	r4, r0
 800ef26:	460d      	mov	r5, r1
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800ef28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef2c:	2b2f      	cmp	r3, #47	; 0x2f
 800ef2e:	d0fa      	beq.n	800ef26 <follow_path+0xa>
 800ef30:	2b5c      	cmp	r3, #92	; 0x5c
 800ef32:	d0f8      	beq.n	800ef26 <follow_path+0xa>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800ef34:	2300      	movs	r3, #0
 800ef36:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef38:	782b      	ldrb	r3, [r5, #0]
 800ef3a:	2b1f      	cmp	r3, #31
 800ef3c:	d956      	bls.n	800efec <follow_path+0xd0>
	p = *path; sfn = dp->fn;
 800ef3e:	f104 0720 	add.w	r7, r4, #32
 800ef42:	f04f 3a20 	mov.w	sl, #538976288	; 0x20202020
 800ef46:	f1c5 0302 	rsb	r3, r5, #2
 800ef4a:	9300      	str	r3, [sp, #0]
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800ef4c:	4a54      	ldr	r2, [pc, #336]	; (800f0a0 <follow_path+0x184>)
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ef4e:	4b55      	ldr	r3, [pc, #340]	; (800f0a4 <follow_path+0x188>)
 800ef50:	f8c7 a004 	str.w	sl, [r7, #4]
 800ef54:	f8c7 a000 	str.w	sl, [r7]
 800ef58:	f8c7 a007 	str.w	sl, [r7, #7]
 800ef5c:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ef60:	2600      	movs	r6, #0
 800ef62:	f04f 0808 	mov.w	r8, #8
		c = (BYTE)p[si++];				/* Get a byte */
 800ef66:	9900      	ldr	r1, [sp, #0]
 800ef68:	eb01 0009 	add.w	r0, r1, r9
 800ef6c:	f819 1f01 	ldrb.w	r1, [r9, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ef70:	2920      	cmp	r1, #32
 800ef72:	d908      	bls.n	800ef86 <follow_path+0x6a>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800ef74:	292f      	cmp	r1, #47	; 0x2f
 800ef76:	d001      	beq.n	800ef7c <follow_path+0x60>
 800ef78:	295c      	cmp	r1, #92	; 0x5c
 800ef7a:	d142      	bne.n	800f002 <follow_path+0xe6>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800ef7c:	5c2b      	ldrb	r3, [r5, r0]
 800ef7e:	2b2f      	cmp	r3, #47	; 0x2f
 800ef80:	d03d      	beq.n	800effe <follow_path+0xe2>
 800ef82:	2b5c      	cmp	r3, #92	; 0x5c
 800ef84:	d03b      	beq.n	800effe <follow_path+0xe2>
	*path = &p[si];						/* Return pointer to the next segment */
 800ef86:	4405      	add	r5, r0
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ef88:	2e00      	cmp	r6, #0
 800ef8a:	d07e      	beq.n	800f08a <follow_path+0x16e>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ef8c:	f894 3020 	ldrb.w	r3, [r4, #32]
 800ef90:	2be5      	cmp	r3, #229	; 0xe5
 800ef92:	bf04      	itt	eq
 800ef94:	2305      	moveq	r3, #5
 800ef96:	f884 3020 	strbeq.w	r3, [r4, #32]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800ef9a:	2920      	cmp	r1, #32
 800ef9c:	d94d      	bls.n	800f03a <follow_path+0x11e>
 800ef9e:	782b      	ldrb	r3, [r5, #0]
 800efa0:	2b21      	cmp	r3, #33	; 0x21
 800efa2:	bf34      	ite	cc
 800efa4:	2304      	movcc	r3, #4
 800efa6:	2300      	movcs	r3, #0
 800efa8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800efac:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800efae:	f8d4 8000 	ldr.w	r8, [r4]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800efb2:	f008 ff64 	bl	8017e7e <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800efb6:	4606      	mov	r6, r0
 800efb8:	2800      	cmp	r0, #0
 800efba:	d146      	bne.n	800f04a <follow_path+0x12e>
		res = move_window(fs, dp->sect);
 800efbc:	69a1      	ldr	r1, [r4, #24]
 800efbe:	4640      	mov	r0, r8
 800efc0:	f008 fd28 	bl	8017a14 <move_window>
		if (res != FR_OK) break;
 800efc4:	4606      	mov	r6, r0
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d13f      	bne.n	800f04a <follow_path+0x12e>
		c = dp->dir[DIR_Name];
 800efca:	69e0      	ldr	r0, [r4, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800efcc:	7803      	ldrb	r3, [r0, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d048      	beq.n	800f064 <follow_path+0x148>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800efd2:	7ac3      	ldrb	r3, [r0, #11]
 800efd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efd8:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800efda:	7ac6      	ldrb	r6, [r0, #11]
 800efdc:	f016 0608 	ands.w	r6, r6, #8
 800efe0:	d02d      	beq.n	800f03e <follow_path+0x122>
		res = dir_next(dp, 0);	/* Next entry */
 800efe2:	2100      	movs	r1, #0
 800efe4:	4620      	mov	r0, r4
 800efe6:	f008 ff7c 	bl	8017ee2 <dir_next>
 800efea:	e7e4      	b.n	800efb6 <follow_path+0x9a>
		dp->fn[NSFLAG] = NS_NONAME;
 800efec:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800efee:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800eff0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 800eff4:	b003      	add	sp, #12
 800eff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800effa:	f008 bf40 	b.w	8017e7e <dir_sdi.constprop.0>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800effe:	3001      	adds	r0, #1
 800f000:	e7bc      	b.n	800ef7c <follow_path+0x60>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800f002:	292e      	cmp	r1, #46	; 0x2e
 800f004:	d045      	beq.n	800f092 <follow_path+0x176>
 800f006:	45b0      	cmp	r8, r6
 800f008:	d93f      	bls.n	800f08a <follow_path+0x16e>
		if (c >= 0x80) {				/* Is SBC extended character? */
 800f00a:	0608      	lsls	r0, r1, #24
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800f00c:	bf48      	it	mi
 800f00e:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f012:	4618      	mov	r0, r3
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800f014:	bf48      	it	mi
 800f016:	5c51      	ldrbmi	r1, [r2, r1]
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f018:	9101      	str	r1, [sp, #4]
 800f01a:	f00a fa5b 	bl	80194d4 <strchr>
 800f01e:	2800      	cmp	r0, #0
 800f020:	d133      	bne.n	800f08a <follow_path+0x16e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f022:	9901      	ldr	r1, [sp, #4]
 800f024:	4b1f      	ldr	r3, [pc, #124]	; (800f0a4 <follow_path+0x188>)
 800f026:	4a1e      	ldr	r2, [pc, #120]	; (800f0a0 <follow_path+0x184>)
 800f028:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
 800f02c:	2819      	cmp	r0, #25
 800f02e:	bf9c      	itt	ls
 800f030:	3920      	subls	r1, #32
 800f032:	b2c9      	uxtbls	r1, r1
			sfn[i++] = c;
 800f034:	55b9      	strb	r1, [r7, r6]
 800f036:	3601      	adds	r6, #1
 800f038:	e795      	b.n	800ef66 <follow_path+0x4a>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800f03a:	2304      	movs	r3, #4
 800f03c:	e7b4      	b.n	800efa8 <follow_path+0x8c>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f03e:	220b      	movs	r2, #11
 800f040:	4639      	mov	r1, r7
 800f042:	f00a fa07 	bl	8019454 <memcmp>
 800f046:	2800      	cmp	r0, #0
 800f048:	d1cb      	bne.n	800efe2 <follow_path+0xc6>
			ns = dp->fn[NSFLAG];
 800f04a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 800f04e:	b15e      	cbz	r6, 800f068 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f050:	2e04      	cmp	r6, #4
 800f052:	d103      	bne.n	800f05c <follow_path+0x140>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f054:	f013 0f04 	tst.w	r3, #4
 800f058:	bf08      	it	eq
 800f05a:	2605      	moveq	r6, #5
}
 800f05c:	4630      	mov	r0, r6
 800f05e:	b003      	add	sp, #12
 800f060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f064:	2604      	movs	r6, #4
 800f066:	e7f0      	b.n	800f04a <follow_path+0x12e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800f068:	075a      	lsls	r2, r3, #29
 800f06a:	d4f7      	bmi.n	800f05c <follow_path+0x140>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800f06c:	79a3      	ldrb	r3, [r4, #6]
 800f06e:	06db      	lsls	r3, r3, #27
 800f070:	d50d      	bpl.n	800f08e <follow_path+0x172>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f072:	6921      	ldr	r1, [r4, #16]
 800f074:	f89b 0000 	ldrb.w	r0, [fp]
 800f078:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 800f07c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800f080:	4419      	add	r1, r3
 800f082:	f008 fdfa 	bl	8017c7a <ld_clust.isra.0>
 800f086:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f088:	e75d      	b.n	800ef46 <follow_path+0x2a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f08a:	2606      	movs	r6, #6
 800f08c:	e7e6      	b.n	800f05c <follow_path+0x140>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f08e:	2605      	movs	r6, #5
	return res;
 800f090:	e7e4      	b.n	800f05c <follow_path+0x140>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800f092:	f1b8 0f0b 	cmp.w	r8, #11
 800f096:	d0f8      	beq.n	800f08a <follow_path+0x16e>
			i = 8; ni = 11;				/* Enter file extension field */
 800f098:	2608      	movs	r6, #8
 800f09a:	f04f 080b 	mov.w	r8, #11
 800f09e:	e762      	b.n	800ef66 <follow_path+0x4a>
 800f0a0:	0801ca02 	.word	0x0801ca02
 800f0a4:	0801c9a1 	.word	0x0801c9a1

0800f0a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800f0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0aa:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f0ae:	a803      	add	r0, sp, #12
{
 800f0b0:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 800f0b2:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800f0b4:	f7ff fd7a 	bl	800ebac <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	db15      	blt.n	800f0e8 <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f0bc:	4a0b      	ldr	r2, [pc, #44]	; (800f0ec <f_mount+0x44>)
 800f0be:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {
 800f0c2:	b10b      	cbz	r3, 800f0c8 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 800f0c8:	9b01      	ldr	r3, [sp, #4]
 800f0ca:	b10b      	cbz	r3, 800f0d0 <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	7019      	strb	r1, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f0d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 800f0d4:	b12c      	cbz	r4, 800f0e2 <f_mount+0x3a>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	a901      	add	r1, sp, #4
 800f0da:	4668      	mov	r0, sp
 800f0dc:	f7ff fdfc 	bl	800ecd8 <mount_volume>
 800f0e0:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	b004      	add	sp, #16
 800f0e6:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800f0e8:	240b      	movs	r4, #11
 800f0ea:	e7fa      	b.n	800f0e2 <f_mount+0x3a>
 800f0ec:	200022e0 	.word	0x200022e0

0800f0f0 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800f0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f4:	b091      	sub	sp, #68	; 0x44
 800f0f6:	460e      	mov	r6, r1
 800f0f8:	9009      	str	r0, [sp, #36]	; 0x24
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f0fa:	a809      	add	r0, sp, #36	; 0x24
{
 800f0fc:	4614      	mov	r4, r2
 800f0fe:	9308      	str	r3, [sp, #32]
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f100:	f7ff fd54 	bl	800ebac <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f104:	2800      	cmp	r0, #0
 800f106:	f2c0 835f 	blt.w	800f7c8 <f_mkfs+0x6d8>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800f10a:	4ba5      	ldr	r3, [pc, #660]	; (800f3a0 <f_mkfs+0x2b0>)
 800f10c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f110:	b10b      	cbz	r3, 800f116 <f_mkfs+0x26>
 800f112:	2200      	movs	r2, #0
 800f114:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800f116:	4ba3      	ldr	r3, [pc, #652]	; (800f3a4 <f_mkfs+0x2b4>)
	pdrv = LD2PD(vol);			/* Physical drive */
 800f118:	fa5f fb80 	uxtb.w	fp, r0

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
 800f11c:	4658      	mov	r0, fp
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800f11e:	2e00      	cmp	r6, #0
 800f120:	bf08      	it	eq
 800f122:	461e      	moveq	r6, r3
	ds = disk_initialize(pdrv);
 800f124:	f000 fb6c 	bl	800f800 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800f128:	07c2      	lsls	r2, r0, #31
 800f12a:	f100 834f 	bmi.w	800f7cc <f_mkfs+0x6dc>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f12e:	0743      	lsls	r3, r0, #29
 800f130:	f100 834e 	bmi.w	800f7d0 <f_mkfs+0x6e0>
	sz_blk = opt->align;
 800f134:	6873      	ldr	r3, [r6, #4]
 800f136:	930b      	str	r3, [sp, #44]	; 0x2c
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
 800f138:	b93b      	cbnz	r3, 800f14a <f_mkfs+0x5a>
 800f13a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f13c:	2103      	movs	r1, #3
 800f13e:	4658      	mov	r0, fp
 800f140:	f000 fb82 	bl	800f848 <disk_ioctl>
 800f144:	b108      	cbz	r0, 800f14a <f_mkfs+0x5a>
 800f146:	2301      	movs	r3, #1
 800f148:	930b      	str	r3, [sp, #44]	; 0x2c
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
 800f14a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f14c:	1e53      	subs	r3, r2, #1
 800f14e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f152:	d201      	bcs.n	800f158 <f_mkfs+0x68>
 800f154:	421a      	tst	r2, r3
 800f156:	d001      	beq.n	800f15c <f_mkfs+0x6c>
 800f158:	2301      	movs	r3, #1
 800f15a:	930b      	str	r3, [sp, #44]	; 0x2c
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800f15c:	7873      	ldrb	r3, [r6, #1]
 800f15e:	9301      	str	r3, [sp, #4]
 800f160:	3b01      	subs	r3, #1
 800f162:	2b01      	cmp	r3, #1
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800f164:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800f168:	9b01      	ldr	r3, [sp, #4]
 800f16a:	bf88      	it	hi
 800f16c:	2301      	movhi	r3, #1
 800f16e:	9301      	str	r3, [sp, #4]
 800f170:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800f174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f178:	d26c      	bcs.n	800f254 <f_mkfs+0x164>
 800f17a:	f019 0f0f 	tst.w	r9, #15
 800f17e:	bf18      	it	ne
 800f180:	f44f 7900 	movne.w	r9, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800f184:	68f5      	ldr	r5, [r6, #12]
 800f186:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 800f18a:	d866      	bhi.n	800f25a <f_mkfs+0x16a>
 800f18c:	1e6b      	subs	r3, r5, #1
 800f18e:	422b      	tst	r3, r5
 800f190:	bf18      	it	ne
 800f192:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800f194:	9b08      	ldr	r3, [sp, #32]
 800f196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f19a:	f0c0 831b 	bcc.w	800f7d4 <f_mkfs+0x6e4>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800f19e:	2c00      	cmp	r4, #0
 800f1a0:	f000 8318 	beq.w	800f7d4 <f_mkfs+0x6e4>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800f1a4:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f1a6:	aa0c      	add	r2, sp, #48	; 0x30
 800f1a8:	2101      	movs	r1, #1
 800f1aa:	4658      	mov	r0, fp
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800f1ac:	f896 8000 	ldrb.w	r8, [r6]
	b_vol = sz_vol = 0;
 800f1b0:	930c      	str	r3, [sp, #48]	; 0x30
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f1b2:	f000 fb49 	bl	800f848 <disk_ioctl>
 800f1b6:	4607      	mov	r7, r0
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	f040 8181 	bne.w	800f4c0 <f_mkfs+0x3d0>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800f1be:	f018 0308 	ands.w	r3, r8, #8
 800f1c2:	9307      	str	r3, [sp, #28]
 800f1c4:	d106      	bne.n	800f1d4 <f_mkfs+0xe4>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800f1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1c8:	2b3f      	cmp	r3, #63	; 0x3f
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800f1ca:	bf89      	itett	hi
 800f1cc:	3b3f      	subhi	r3, #63	; 0x3f
	b_vol = sz_vol = 0;
 800f1ce:	9f07      	ldrls	r7, [sp, #28]
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800f1d0:	930c      	strhi	r3, [sp, #48]	; 0x30
 800f1d2:	273f      	movhi	r7, #63	; 0x3f
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800f1d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f1d6:	2e7f      	cmp	r6, #127	; 0x7f
 800f1d8:	f240 80d4 	bls.w	800f384 <f_mkfs+0x294>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800f1dc:	f5b5 3f81 	cmp.w	r5, #66048	; 0x10200
	sz_au /= ss;	/* Byte --> Sector */
 800f1e0:	bf34      	ite	cc
 800f1e2:	0a6b      	lsrcc	r3, r5, #9
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800f1e4:	2380      	movcs	r3, #128	; 0x80
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800f1e6:	f018 0e02 	ands.w	lr, r8, #2
 800f1ea:	f008 0201 	and.w	r2, r8, #1
 800f1ee:	d036      	beq.n	800f25e <f_mkfs+0x16e>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800f1f0:	2a00      	cmp	r2, #0
 800f1f2:	d038      	beq.n	800f266 <f_mkfs+0x176>
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
		fsty = FS_FAT16;
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800f1f4:	f106 42a0 	add.w	r2, r6, #1342177280	; 0x50000000
 800f1f8:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000
 800f1fc:	9204      	str	r2, [sp, #16]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f040 8094 	bne.w	800f32c <f_mkfs+0x23c>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f204:	4868      	ldr	r0, [pc, #416]	; (800f3a8 <f_mkfs+0x2b8>)
 800f206:	ea4f 3c16 	mov.w	ip, r6, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f20a:	2501      	movs	r5, #1
 800f20c:	f830 2b02 	ldrh.w	r2, [r0], #2
 800f210:	b112      	cbz	r2, 800f218 <f_mkfs+0x128>
 800f212:	4562      	cmp	r2, ip
 800f214:	f240 8088 	bls.w	800f328 <f_mkfs+0x238>
				}
				n_clst = (DWORD)sz_vol / pau;
				if (n_clst > MAX_FAT12) {
 800f218:	f640 70f5 	movw	r0, #4085	; 0xff5
				n_clst = (DWORD)sz_vol / pau;
 800f21c:	fbb6 f2f5 	udiv	r2, r6, r5
				if (n_clst > MAX_FAT12) {
 800f220:	4282      	cmp	r2, r0
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fsty = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f222:	bf9b      	ittet	ls
 800f224:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
 800f228:	3201      	addls	r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f22a:	3202      	addhi	r2, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f22c:	0852      	lsrls	r2, r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f22e:	bf8c      	ite	hi
 800f230:	0052      	lslhi	r2, r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f232:	3203      	addls	r2, #3
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f234:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800f238:	ea4f 2252 	mov.w	r2, r2, lsr #9
 800f23c:	9203      	str	r2, [sp, #12]
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800f23e:	f3c9 1216 	ubfx	r2, r9, #4, #23
 800f242:	bf8c      	ite	hi
 800f244:	f04f 0802 	movhi.w	r8, #2
					fsty = FS_FAT12;
 800f248:	f04f 0801 	movls.w	r8, #1
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800f24c:	9206      	str	r2, [sp, #24]
				sz_rsv = 1;						/* Number of reserved sectors */
 800f24e:	f04f 0a01 	mov.w	sl, #1
 800f252:	e02d      	b.n	800f2b0 <f_mkfs+0x1c0>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800f254:	f44f 7900 	mov.w	r9, #512	; 0x200
 800f258:	e794      	b.n	800f184 <f_mkfs+0x94>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800f25a:	2500      	movs	r5, #0
 800f25c:	e79a      	b.n	800f194 <f_mkfs+0xa4>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800f25e:	2a00      	cmp	r2, #0
 800f260:	d1c8      	bne.n	800f1f4 <f_mkfs+0x104>
 800f262:	2013      	movs	r0, #19
 800f264:	e2ad      	b.n	800f7c2 <f_mkfs+0x6d2>
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800f266:	f106 42a0 	add.w	r2, r6, #1342177280	; 0x50000000
 800f26a:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000
 800f26e:	9204      	str	r2, [sp, #16]
				if (pau == 0) {	/* AU auto-selection */
 800f270:	2b00      	cmp	r3, #0
 800f272:	d157      	bne.n	800f324 <f_mkfs+0x234>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f274:	484d      	ldr	r0, [pc, #308]	; (800f3ac <f_mkfs+0x2bc>)
 800f276:	0c75      	lsrs	r5, r6, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f278:	2301      	movs	r3, #1
 800f27a:	f830 2b02 	ldrh.w	r2, [r0], #2
 800f27e:	b112      	cbz	r2, 800f286 <f_mkfs+0x196>
 800f280:	42aa      	cmp	r2, r5
 800f282:	d94d      	bls.n	800f320 <f_mkfs+0x230>
 800f284:	2200      	movs	r2, #0
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800f286:	fbb6 f0f3 	udiv	r0, r6, r3
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f28a:	0085      	lsls	r5, r0, #2
 800f28c:	f205 2507 	addw	r5, r5, #519	; 0x207
 800f290:	0a69      	lsrs	r1, r5, #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800f292:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
 800f296:	4d46      	ldr	r5, [pc, #280]	; (800f3b0 <f_mkfs+0x2c0>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f298:	9103      	str	r1, [sp, #12]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800f29a:	38f6      	subs	r0, #246	; 0xf6
 800f29c:	42a8      	cmp	r0, r5
 800f29e:	d871      	bhi.n	800f384 <f_mkfs+0x294>
 800f2a0:	461d      	mov	r5, r3
 800f2a2:	4613      	mov	r3, r2
				sz_dir = 0;		/* No static directory */
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	9206      	str	r2, [sp, #24]
				sz_rsv = 32;	/* Number of reserved sectors */
 800f2a8:	f04f 0a20 	mov.w	sl, #32
 800f2ac:	f04f 0803 	mov.w	r8, #3
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800f2b0:	9903      	ldr	r1, [sp, #12]
 800f2b2:	9801      	ldr	r0, [sp, #4]

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800f2b4:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f2b8:	eb0a 0207 	add.w	r2, sl, r7
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800f2bc:	fb00 2001 	mla	r0, r0, r1, r2
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f2c0:	9202      	str	r2, [sp, #8]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800f2c2:	9a06      	ldr	r2, [sp, #24]
 800f2c4:	4410      	add	r0, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800f2c6:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800f2ca:	4402      	add	r2, r0
 800f2cc:	f1cc 0c00 	rsb	ip, ip, #0
 800f2d0:	ea02 020c 	and.w	r2, r2, ip
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800f2d4:	f1b8 0f03 	cmp.w	r8, #3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800f2d8:	eba2 0200 	sub.w	r2, r2, r0
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800f2dc:	d128      	bne.n	800f330 <f_mkfs+0x240>
				sz_rsv += n; b_fat += n;
 800f2de:	9902      	ldr	r1, [sp, #8]
 800f2e0:	4411      	add	r1, r2
 800f2e2:	4492      	add	sl, r2
 800f2e4:	9102      	str	r1, [sp, #8]
				}
				sz_fat += n / n_fat;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800f2e6:	ebc7 1205 	rsb	r2, r7, r5, lsl #4
 800f2ea:	4410      	add	r0, r2
 800f2ec:	4286      	cmp	r6, r0
 800f2ee:	d349      	bcc.n	800f384 <f_mkfs+0x294>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800f2f0:	9a06      	ldr	r2, [sp, #24]
 800f2f2:	9903      	ldr	r1, [sp, #12]
 800f2f4:	9801      	ldr	r0, [sp, #4]
 800f2f6:	1ab2      	subs	r2, r6, r2
 800f2f8:	eba2 020a 	sub.w	r2, r2, sl
			if (fsty == FS_FAT32) {
 800f2fc:	f1b8 0f03 	cmp.w	r8, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800f300:	fb00 2211 	mls	r2, r0, r1, r2
 800f304:	fbb2 f2f5 	udiv	r2, r2, r5
 800f308:	9205      	str	r2, [sp, #20]
			if (fsty == FS_FAT32) {
 800f30a:	d126      	bne.n	800f35a <f_mkfs+0x26a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800f30c:	9905      	ldr	r1, [sp, #20]
 800f30e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f312:	4291      	cmp	r1, r2
 800f314:	d855      	bhi.n	800f3c2 <f_mkfs+0x2d2>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f316:	bbab      	cbnz	r3, 800f384 <f_mkfs+0x294>
 800f318:	2d01      	cmp	r5, #1
 800f31a:	d933      	bls.n	800f384 <f_mkfs+0x294>
 800f31c:	086b      	lsrs	r3, r5, #1
 800f31e:	e7a7      	b.n	800f270 <f_mkfs+0x180>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f320:	005b      	lsls	r3, r3, #1
 800f322:	e7aa      	b.n	800f27a <f_mkfs+0x18a>
 800f324:	461a      	mov	r2, r3
 800f326:	e7ae      	b.n	800f286 <f_mkfs+0x196>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f328:	006d      	lsls	r5, r5, #1
 800f32a:	e76f      	b.n	800f20c <f_mkfs+0x11c>
 800f32c:	461d      	mov	r5, r3
 800f32e:	e773      	b.n	800f218 <f_mkfs+0x128>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800f330:	9901      	ldr	r1, [sp, #4]
 800f332:	fbb2 fcf1 	udiv	ip, r2, r1
 800f336:	fb01 2c1c 	mls	ip, r1, ip, r2
 800f33a:	f1bc 0f00 	cmp.w	ip, #0
 800f33e:	d005      	beq.n	800f34c <f_mkfs+0x25c>
					n--; sz_rsv++; b_fat++;
 800f340:	9902      	ldr	r1, [sp, #8]
 800f342:	3101      	adds	r1, #1
 800f344:	3a01      	subs	r2, #1
 800f346:	f10a 0a01 	add.w	sl, sl, #1
 800f34a:	9102      	str	r1, [sp, #8]
				sz_fat += n / n_fat;
 800f34c:	9901      	ldr	r1, [sp, #4]
 800f34e:	fbb2 f2f1 	udiv	r2, r2, r1
 800f352:	9903      	ldr	r1, [sp, #12]
 800f354:	4411      	add	r1, r2
 800f356:	9103      	str	r1, [sp, #12]
 800f358:	e7c5      	b.n	800f2e6 <f_mkfs+0x1f6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT16) {
 800f35a:	f1b8 0f02 	cmp.w	r8, #2
 800f35e:	d129      	bne.n	800f3b4 <f_mkfs+0x2c4>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f360:	9905      	ldr	r1, [sp, #20]
 800f362:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f366:	4291      	cmp	r1, r2
 800f368:	d90e      	bls.n	800f388 <f_mkfs+0x298>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	f040 8234 	bne.w	800f7d8 <f_mkfs+0x6e8>
 800f370:	006b      	lsls	r3, r5, #1
 800f372:	2b40      	cmp	r3, #64	; 0x40
 800f374:	f67f af43 	bls.w	800f1fe <f_mkfs+0x10e>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
					}
					if ((fsopt & FM_FAT32)) {
 800f378:	f1be 0f00 	cmp.w	lr, #0
 800f37c:	f47f af7a 	bne.w	800f274 <f_mkfs+0x184>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f380:	2b80      	cmp	r3, #128	; 0x80
 800f382:	d9d3      	bls.n	800f32c <f_mkfs+0x23c>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800f384:	200e      	movs	r0, #14
 800f386:	e21c      	b.n	800f7c2 <f_mkfs+0x6d2>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f388:	9905      	ldr	r1, [sp, #20]
 800f38a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f38e:	4291      	cmp	r1, r2
 800f390:	d817      	bhi.n	800f3c2 <f_mkfs+0x2d2>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f392:	2b00      	cmp	r3, #0
 800f394:	d1f6      	bne.n	800f384 <f_mkfs+0x294>
 800f396:	006b      	lsls	r3, r5, #1
 800f398:	2b80      	cmp	r3, #128	; 0x80
 800f39a:	f67f af30 	bls.w	800f1fe <f_mkfs+0x10e>
 800f39e:	e7f1      	b.n	800f384 <f_mkfs+0x294>
 800f3a0:	200022e0 	.word	0x200022e0
 800f3a4:	0801a8ac 	.word	0x0801a8ac
 800f3a8:	0801ab26 	.word	0x0801ab26
 800f3ac:	0801ab34 	.word	0x0801ab34
 800f3b0:	0ffeffff 	.word	0x0ffeffff
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800f3b4:	9a05      	ldr	r2, [sp, #20]
 800f3b6:	f640 73f5 	movw	r3, #4085	; 0xff5
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d8e2      	bhi.n	800f384 <f_mkfs+0x294>
 800f3be:	f04f 0801 	mov.w	r8, #1
 800f3c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f00a f87b 	bl	80194c4 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800f3ce:	4b4e      	ldr	r3, [pc, #312]	; (800f508 <f_mkfs+0x418>)
	*ptr++ = (BYTE)val; val >>= 8;
 800f3d0:	f884 a00e 	strb.w	sl, [r4, #14]
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	6022      	str	r2, [r4, #0]
 800f3d8:	685a      	ldr	r2, [r3, #4]
 800f3da:	6062      	str	r2, [r4, #4]
 800f3dc:	f1b8 0f03 	cmp.w	r8, #3
 800f3e0:	891a      	ldrh	r2, [r3, #8]
 800f3e2:	7a9b      	ldrb	r3, [r3, #10]
 800f3e4:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 800f3e6:	bf08      	it	eq
 800f3e8:	f04f 0900 	moveq.w	r9, #0
 800f3ec:	2302      	movs	r3, #2
 800f3ee:	7323      	strb	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800f3f0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
		memset(buf, 0, ss);
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800f3f4:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800f3f6:	f884 9011 	strb.w	r9, [r4, #17]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
 800f3fa:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
 800f3fe:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800f402:	8122      	strh	r2, [r4, #8]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f404:	7365      	strb	r5, [r4, #13]
	*ptr++ = (BYTE)val;
 800f406:	f884 a00f 	strb.w	sl, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800f40a:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val;
 800f40c:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
 800f410:	d258      	bcs.n	800f4c4 <f_mkfs+0x3d4>
	*ptr++ = (BYTE)val; val >>= 8;
 800f412:	74e6      	strb	r6, [r4, #19]
 800f414:	f3c6 2607 	ubfx	r6, r6, #8, #8
	*ptr++ = (BYTE)val;
 800f418:	7526      	strb	r6, [r4, #20]
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f41a:	23f8      	movs	r3, #248	; 0xf8
 800f41c:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800f41e:	233f      	movs	r3, #63	; 0x3f
 800f420:	7623      	strb	r3, [r4, #24]
	*ptr++ = (BYTE)val;
 800f422:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f424:	23ff      	movs	r3, #255	; 0xff
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800f426:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 800f428:	7662      	strb	r2, [r4, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800f42a:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
 800f42c:	76e2      	strb	r2, [r4, #27]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800f42e:	f104 001c 	add.w	r0, r4, #28
 800f432:	f008 fa92 	bl	801795a <st_dword>
		if (fsty == FS_FAT32) {
 800f436:	f1b8 0f03 	cmp.w	r8, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800f43a:	9904      	ldr	r1, [sp, #16]
		if (fsty == FS_FAT32) {
 800f43c:	d148      	bne.n	800f4d0 <f_mkfs+0x3e0>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800f43e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800f442:	f008 fa8a 	bl	801795a <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f446:	9903      	ldr	r1, [sp, #12]
 800f448:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f44c:	f008 fa85 	bl	801795a <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800f450:	2302      	movs	r3, #2
 800f452:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800f456:	2301      	movs	r3, #1
 800f458:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800f45c:	2306      	movs	r3, #6
 800f45e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f462:	2380      	movs	r3, #128	; 0x80
 800f464:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f468:	2329      	movs	r3, #41	; 0x29
 800f46a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f46e:	4b27      	ldr	r3, [pc, #156]	; (800f50c <f_mkfs+0x41c>)
	*ptr++ = (BYTE)val; val >>= 8;
 800f470:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
 800f474:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	*ptr++ = (BYTE)val;
 800f478:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	*ptr++ = (BYTE)val;
 800f47c:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 800f480:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 800f484:	f103 0110 	add.w	r1, r3, #16
 800f488:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f48c:	f853 0b04 	ldr.w	r0, [r3], #4
 800f490:	f842 0b04 	str.w	r0, [r2], #4
 800f494:	428b      	cmp	r3, r1
 800f496:	d1f9      	bne.n	800f48c <f_mkfs+0x39c>
 800f498:	8819      	ldrh	r1, [r3, #0]
 800f49a:	789b      	ldrb	r3, [r3, #2]
 800f49c:	8011      	strh	r1, [r2, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f49e:	f04f 0a55 	mov.w	sl, #85	; 0x55
	*ptr++ = (BYTE)val;
 800f4a2:	f04f 09aa 	mov.w	r9, #170	; 0xaa
 800f4a6:	7093      	strb	r3, [r2, #2]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800f4a8:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800f4aa:	f884 a1fe 	strb.w	sl, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800f4ae:	f884 91ff 	strb.w	r9, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	463a      	mov	r2, r7
 800f4b6:	4658      	mov	r0, fp
 800f4b8:	f000 f9ba 	bl	800f830 <disk_write>
 800f4bc:	4606      	mov	r6, r0
 800f4be:	b348      	cbz	r0, 800f514 <f_mkfs+0x424>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f4c0:	2001      	movs	r0, #1
 800f4c2:	e17e      	b.n	800f7c2 <f_mkfs+0x6d2>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	f104 0020 	add.w	r0, r4, #32
 800f4ca:	f008 fa46 	bl	801795a <st_dword>
 800f4ce:	e7a4      	b.n	800f41a <f_mkfs+0x32a>
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800f4d0:	f104 0027 	add.w	r0, r4, #39	; 0x27
 800f4d4:	f008 fa41 	bl	801795a <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800f4d8:	9b03      	ldr	r3, [sp, #12]
 800f4da:	75a3      	strb	r3, [r4, #22]
 800f4dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
 800f4e0:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f4e2:	2380      	movs	r3, #128	; 0x80
 800f4e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f4e8:	2329      	movs	r3, #41	; 0x29
 800f4ea:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800f4ee:	4b08      	ldr	r3, [pc, #32]	; (800f510 <f_mkfs+0x420>)
 800f4f0:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800f4f4:	f103 0110 	add.w	r1, r3, #16
 800f4f8:	f853 0b04 	ldr.w	r0, [r3], #4
 800f4fc:	f842 0b04 	str.w	r0, [r2], #4
 800f500:	428b      	cmp	r3, r1
 800f502:	d1f9      	bne.n	800f4f8 <f_mkfs+0x408>
 800f504:	e7c8      	b.n	800f498 <f_mkfs+0x3a8>
 800f506:	bf00      	nop
 800f508:	0801c9b0 	.word	0x0801c9b0
 800f50c:	0801c9bc 	.word	0x0801c9bc
 800f510:	0801c9d0 	.word	0x0801c9d0

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800f514:	f1b8 0f03 	cmp.w	r8, #3
 800f518:	d13a      	bne.n	800f590 <f_mkfs+0x4a0>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f51a:	2301      	movs	r3, #1
 800f51c:	1dba      	adds	r2, r7, #6
 800f51e:	4621      	mov	r1, r4
 800f520:	4658      	mov	r0, fp
 800f522:	f000 f985 	bl	800f830 <disk_write>
__ssp_bos_icheck3(memset, void *, int)
 800f526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f52a:	4631      	mov	r1, r6
 800f52c:	4620      	mov	r0, r4
 800f52e:	f009 ffc9 	bl	80194c4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800f532:	2352      	movs	r3, #82	; 0x52
 800f534:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f536:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800f538:	2361      	movs	r3, #97	; 0x61
 800f53a:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 800f53c:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			memset(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f540:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val;
 800f542:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800f544:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val;
 800f546:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800f548:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 800f54c:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 800f550:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f554:	1e59      	subs	r1, r3, #1
 800f556:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 800f55a:	f008 f9fe 	bl	801795a <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800f55e:	2302      	movs	r3, #2
 800f560:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f564:	1dfa      	adds	r2, r7, #7
 800f566:	2301      	movs	r3, #1
 800f568:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800f56a:	f884 61ed 	strb.w	r6, [r4, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 800f56e:	f884 61ee 	strb.w	r6, [r4, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
 800f572:	f884 61ef 	strb.w	r6, [r4, #495]	; 0x1ef
	*ptr++ = (BYTE)val; val >>= 8;
 800f576:	f884 a1fe 	strb.w	sl, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800f57a:	f884 91ff 	strb.w	r9, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f57e:	4658      	mov	r0, fp
 800f580:	f000 f956 	bl	800f830 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f584:	2301      	movs	r3, #1
 800f586:	18fa      	adds	r2, r7, r3
 800f588:	4621      	mov	r1, r4
 800f58a:	4658      	mov	r0, fp
 800f58c:	f000 f950 	bl	800f830 <disk_write>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800f590:	9b08      	ldr	r3, [sp, #32]
 800f592:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 800f596:	f022 0201 	bic.w	r2, r2, #1
 800f59a:	2100      	movs	r1, #0
 800f59c:	4620      	mov	r0, r4
 800f59e:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 800f5a2:	f009 ff8f 	bl	80194c4 <memset>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800f5a6:	f1b8 0f01 	cmp.w	r8, #1
 800f5aa:	4b8e      	ldr	r3, [pc, #568]	; (800f7e4 <f_mkfs+0x6f4>)
 800f5ac:	bf18      	it	ne
 800f5ae:	f06f 0307 	mvnne.w	r3, #7
 800f5b2:	9305      	str	r3, [sp, #20]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	9304      	str	r3, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5b8:	26ff      	movs	r6, #255	; 0xff
			if (fsty == FS_FAT32) {
 800f5ba:	f1b8 0f03 	cmp.w	r8, #3
 800f5be:	f040 80d6 	bne.w	800f76e <f_mkfs+0x67e>
	*ptr++ = (BYTE)val; val >>= 8;
 800f5c2:	f06f 0307 	mvn.w	r3, #7
 800f5c6:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val;
 800f5c8:	f04f 030f 	mov.w	r3, #15
	*ptr++ = (BYTE)val; val >>= 8;
 800f5cc:	7066      	strb	r6, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5ce:	70a6      	strb	r6, [r4, #2]
	*ptr++ = (BYTE)val;
 800f5d0:	70e6      	strb	r6, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5d2:	7126      	strb	r6, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5d4:	7166      	strb	r6, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5d6:	71a6      	strb	r6, [r4, #6]
	*ptr++ = (BYTE)val;
 800f5d8:	71e6      	strb	r6, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5da:	7226      	strb	r6, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5dc:	7266      	strb	r6, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5de:	72a6      	strb	r6, [r4, #10]
	*ptr++ = (BYTE)val;
 800f5e0:	72e3      	strb	r3, [r4, #11]
 800f5e2:	9f03      	ldr	r7, [sp, #12]
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f5e4:	9a02      	ldr	r2, [sp, #8]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f5e6:	4557      	cmp	r7, sl
 800f5e8:	46b9      	mov	r9, r7
 800f5ea:	bf28      	it	cs
 800f5ec:	46d1      	movcs	r9, sl
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	464b      	mov	r3, r9
 800f5f2:	4658      	mov	r0, fp
 800f5f4:	f000 f91c 	bl	800f830 <disk_write>
 800f5f8:	4601      	mov	r1, r0
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	f47f af60 	bne.w	800f4c0 <f_mkfs+0x3d0>
 800f600:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f604:	4620      	mov	r0, r4
 800f606:	f009 ff5d 	bl	80194c4 <memset>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
				sect += n; nsect -= n;
 800f60a:	9b02      	ldr	r3, [sp, #8]
			} while (nsect);
 800f60c:	ebb7 0709 	subs.w	r7, r7, r9
				sect += n; nsect -= n;
 800f610:	444b      	add	r3, r9
 800f612:	9302      	str	r3, [sp, #8]
			} while (nsect);
 800f614:	d1e6      	bne.n	800f5e4 <f_mkfs+0x4f4>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800f616:	9b04      	ldr	r3, [sp, #16]
 800f618:	2201      	movs	r2, #1
 800f61a:	9204      	str	r2, [sp, #16]
 800f61c:	9a01      	ldr	r2, [sp, #4]
 800f61e:	3301      	adds	r3, #1
 800f620:	429a      	cmp	r2, r3
 800f622:	d8ca      	bhi.n	800f5ba <f_mkfs+0x4ca>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f624:	9b06      	ldr	r3, [sp, #24]
 800f626:	f1b8 0f03 	cmp.w	r8, #3
 800f62a:	bf18      	it	ne
 800f62c:	461d      	movne	r5, r3
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f62e:	4555      	cmp	r5, sl
 800f630:	462e      	mov	r6, r5
 800f632:	bf28      	it	cs
 800f634:	4656      	movcs	r6, sl
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f636:	9a02      	ldr	r2, [sp, #8]
 800f638:	4633      	mov	r3, r6
 800f63a:	4621      	mov	r1, r4
 800f63c:	4658      	mov	r0, fp
 800f63e:	f000 f8f7 	bl	800f830 <disk_write>
 800f642:	2800      	cmp	r0, #0
 800f644:	f47f af3c 	bne.w	800f4c0 <f_mkfs+0x3d0>
			sect += n; nsect -= n;
 800f648:	9b02      	ldr	r3, [sp, #8]
		} while (nsect);
 800f64a:	1bad      	subs	r5, r5, r6
			sect += n; nsect -= n;
 800f64c:	4433      	add	r3, r6
 800f64e:	9302      	str	r3, [sp, #8]
		} while (nsect);
 800f650:	d1ed      	bne.n	800f62e <f_mkfs+0x53e>

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;			/* exFAT */
	} else {
		if (fsty == FS_FAT32) {
 800f652:	f1b8 0f03 	cmp.w	r8, #3
 800f656:	f000 808f 	beq.w	800f778 <f_mkfs+0x688>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
 800f65a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f65c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f660:	f080 808d 	bcs.w	800f77e <f_mkfs+0x68e>
				sys = 0x06;	/* FAT12/16 (large) */
			} else {
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 800f664:	f1b8 0f02 	cmp.w	r8, #2
 800f668:	bf0c      	ite	eq
 800f66a:	f04f 0904 	moveq.w	r9, #4
 800f66e:	f04f 0901 	movne.w	r9, #1
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
 800f672:	9b07      	ldr	r3, [sp, #28]
 800f674:	2b00      	cmp	r3, #0
 800f676:	f040 809c 	bne.w	800f7b2 <f_mkfs+0x6c2>
			lba[0] = sz_vol; lba[1] = 0;
 800f67a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f67c:	930e      	str	r3, [sp, #56]	; 0x38
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800f67e:	aa0d      	add	r2, sp, #52	; 0x34
			lba[0] = sz_vol; lba[1] = 0;
 800f680:	9b07      	ldr	r3, [sp, #28]
 800f682:	930f      	str	r3, [sp, #60]	; 0x3c
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800f684:	2101      	movs	r1, #1
 800f686:	4658      	mov	r0, fp
 800f688:	f000 f8de 	bl	800f848 <disk_ioctl>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	f47f af17 	bne.w	800f4c0 <f_mkfs+0x3d0>
		sz_drv32 = (DWORD)sz_drv;
 800f692:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800f696:	2305      	movs	r3, #5
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800f698:	2708      	movs	r7, #8
 800f69a:	f64f 423e 	movw	r2, #64574	; 0xfc3e
 800f69e:	fbb8 f1f7 	udiv	r1, r8, r7
 800f6a2:	4291      	cmp	r1, r2
 800f6a4:	d86e      	bhi.n	800f784 <f_mkfs+0x694>
 800f6a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f009 ff09 	bl	80194c4 <memset>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800f6b2:	2364      	movs	r3, #100	; 0x64
 800f6b4:	fbb8 f3f3 	udiv	r3, r8, r3
 800f6b8:	9301      	str	r3, [sp, #4]
 800f6ba:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 800f6be:	f504 75e3 	add.w	r5, r4, #454	; 0x1c6
 800f6c2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800f6c6:	9302      	str	r3, [sp, #8]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800f6c8:	223f      	movs	r2, #63	; 0x3f
 800f6ca:	4590      	cmp	r8, r2
 800f6cc:	d962      	bls.n	800f794 <f_mkfs+0x6a4>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800f6ce:	f85a 6b04 	ldr.w	r6, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800f6d2:	2e64      	cmp	r6, #100	; 0x64
 800f6d4:	d803      	bhi.n	800f6de <f_mkfs+0x5ee>
 800f6d6:	bf16      	itet	ne
 800f6d8:	9901      	ldrne	r1, [sp, #4]
 800f6da:	4646      	moveq	r6, r8
 800f6dc:	434e      	mulne	r6, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800f6de:	18b0      	adds	r0, r6, r2
 800f6e0:	bf2c      	ite	cs
 800f6e2:	2101      	movcs	r1, #1
 800f6e4:	2100      	movcc	r1, #0
 800f6e6:	4580      	cmp	r8, r0
 800f6e8:	d301      	bcc.n	800f6ee <f_mkfs+0x5fe>
 800f6ea:	2900      	cmp	r1, #0
 800f6ec:	d050      	beq.n	800f790 <f_mkfs+0x6a0>
 800f6ee:	eba8 0602 	sub.w	r6, r8, r2
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	f008 f930 	bl	801795a <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800f6fa:	4631      	mov	r1, r6
 800f6fc:	1d28      	adds	r0, r5, #4
 800f6fe:	f008 f92c 	bl	801795a <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800f702:	233f      	movs	r3, #63	; 0x3f
 800f704:	fbb2 f1f3 	udiv	r1, r2, r3
 800f708:	fbb1 f0f7 	udiv	r0, r1, r7
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800f70c:	fb07 1c10 	mls	ip, r7, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800f710:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 800f714:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800f716:	f805 cc07 	strb.w	ip, [r5, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f71a:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 800f71e:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800f722:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f724:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800f728:	4432      	add	r2, r6
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f72a:	f805 1c06 	strb.w	r1, [r5, #-6]
			pte[PTE_StCyl] = (BYTE)cy;
 800f72e:	f805 0c05 	strb.w	r0, [r5, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800f732:	1e51      	subs	r1, r2, #1
 800f734:	fbb1 f6f3 	udiv	r6, r1, r3
 800f738:	fbb6 f0f7 	udiv	r0, r6, r7
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800f73c:	fb07 6c10 	mls	ip, r7, r0, r6
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800f740:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
 800f744:	1b89      	subs	r1, r1, r6
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f746:	0886      	lsrs	r6, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800f748:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800f74a:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800f74e:	4331      	orrs	r1, r6
 800f750:	f805 1c02 	strb.w	r1, [r5, #-2]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800f754:	9902      	ldr	r1, [sp, #8]
			pte[PTE_System] = sys;					/* System type */
 800f756:	f805 9c04 	strb.w	r9, [r5, #-4]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800f75a:	42a9      	cmp	r1, r5
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800f75c:	f805 cc03 	strb.w	ip, [r5, #-3]
			pte[PTE_EdCyl] = (BYTE)cy;
 800f760:	f805 0c01 	strb.w	r0, [r5, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800f764:	d016      	beq.n	800f794 <f_mkfs+0x6a4>
 800f766:	3510      	adds	r5, #16
 800f768:	2a00      	cmp	r2, #0
 800f76a:	d1ae      	bne.n	800f6ca <f_mkfs+0x5da>
 800f76c:	e012      	b.n	800f794 <f_mkfs+0x6a4>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800f76e:	9905      	ldr	r1, [sp, #20]
 800f770:	4620      	mov	r0, r4
 800f772:	f008 f8f2 	bl	801795a <st_dword>
 800f776:	e734      	b.n	800f5e2 <f_mkfs+0x4f2>
			sys = 0x0C;		/* FAT32X */
 800f778:	f04f 090c 	mov.w	r9, #12
 800f77c:	e779      	b.n	800f672 <f_mkfs+0x582>
				sys = 0x06;	/* FAT12/16 (large) */
 800f77e:	f04f 0906 	mov.w	r9, #6
 800f782:	e776      	b.n	800f672 <f_mkfs+0x582>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800f784:	007f      	lsls	r7, r7, #1
 800f786:	3b01      	subs	r3, #1
 800f788:	b2ff      	uxtb	r7, r7
 800f78a:	d188      	bne.n	800f69e <f_mkfs+0x5ae>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800f78c:	27ff      	movs	r7, #255	; 0xff
 800f78e:	e78a      	b.n	800f6a6 <f_mkfs+0x5b6>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800f790:	2e00      	cmp	r6, #0
 800f792:	d1ae      	bne.n	800f6f2 <f_mkfs+0x602>
	*ptr++ = (BYTE)val; val >>= 8;
 800f794:	2355      	movs	r3, #85	; 0x55
 800f796:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800f79a:	23aa      	movs	r3, #170	; 0xaa
 800f79c:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	4621      	mov	r1, r4
 800f7a6:	4658      	mov	r0, fp
 800f7a8:	f000 f842 	bl	800f830 <disk_write>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	f47f ae87 	bne.w	800f4c0 <f_mkfs+0x3d0>
			fr = create_partition(pdrv, lba, sys, buf);
			if (fr != FR_OK) LEAVE_MKFS(fr);
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	4658      	mov	r0, fp
 800f7b8:	f000 f846 	bl	800f848 <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f7bc:	3800      	subs	r0, #0
 800f7be:	bf18      	it	ne
 800f7c0:	2001      	movne	r0, #1

	LEAVE_MKFS(FR_OK);
}
 800f7c2:	b011      	add	sp, #68	; 0x44
 800f7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800f7c8:	200b      	movs	r0, #11
 800f7ca:	e7fa      	b.n	800f7c2 <f_mkfs+0x6d2>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800f7cc:	2003      	movs	r0, #3
 800f7ce:	e7f8      	b.n	800f7c2 <f_mkfs+0x6d2>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f7d0:	200a      	movs	r0, #10
 800f7d2:	e7f6      	b.n	800f7c2 <f_mkfs+0x6d2>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800f7d4:	2011      	movs	r0, #17
 800f7d6:	e7f4      	b.n	800f7c2 <f_mkfs+0x6d2>
					if ((fsopt & FM_FAT32)) {
 800f7d8:	f1be 0f00 	cmp.w	lr, #0
 800f7dc:	f47f ad48 	bne.w	800f270 <f_mkfs+0x180>
 800f7e0:	e5d0      	b.n	800f384 <f_mkfs+0x294>
 800f7e2:	bf00      	nop
 800f7e4:	00fffff8 	.word	0x00fffff8

0800f7e8 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
 800f7e8:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
 800f7ea:	4b04      	ldr	r3, [pc, #16]	; (800f7fc <disk_status+0x14>)
 800f7ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f7f0:	f004 fd1d 	bl	801422e <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 800f7f4:	3800      	subs	r0, #0
 800f7f6:	bf18      	it	ne
 800f7f8:	2001      	movne	r0, #1
 800f7fa:	bd08      	pop	{r3, pc}
 800f7fc:	0801a8bc 	.word	0x0801a8bc

0800f800 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
 800f800:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
 800f802:	4b04      	ldr	r3, [pc, #16]	; (800f814 <disk_initialize+0x14>)
 800f804:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f808:	f004 fd03 	bl	8014212 <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 800f80c:	3800      	subs	r0, #0
 800f80e:	bf18      	it	ne
 800f810:	2001      	movne	r0, #1
 800f812:	bd08      	pop	{r3, pc}
 800f814:	0801a8bc 	.word	0x0801a8bc

0800f818 <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 800f818:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
 800f81a:	4c04      	ldr	r4, [pc, #16]	; (800f82c <disk_read+0x14>)
 800f81c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800f820:	f004 fd13 	bl	801424a <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
 800f824:	3800      	subs	r0, #0
 800f826:	bf18      	it	ne
 800f828:	2001      	movne	r0, #1
 800f82a:	bd10      	pop	{r4, pc}
 800f82c:	0801a8bc 	.word	0x0801a8bc

0800f830 <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 800f830:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
 800f832:	4c04      	ldr	r4, [pc, #16]	; (800f844 <disk_write+0x14>)
 800f834:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800f838:	f004 fd1e 	bl	8014278 <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
 800f83c:	3800      	subs	r0, #0
 800f83e:	bf18      	it	ne
 800f840:	2001      	movne	r0, #1
 800f842:	bd10      	pop	{r4, pc}
 800f844:	0801a8bc 	.word	0x0801a8bc

0800f848 <disk_ioctl>:
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
 800f848:	b513      	push	{r0, r1, r4, lr}
	int ret = RES_OK;
	uint32_t sector_size = 0;
 800f84a:	2300      	movs	r3, #0
{
 800f84c:	4614      	mov	r4, r2
	uint32_t sector_size = 0;
 800f84e:	9301      	str	r3, [sp, #4]

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
 800f850:	2903      	cmp	r1, #3
 800f852:	d821      	bhi.n	800f898 <disk_ioctl+0x50>
 800f854:	e8df f001 	tbb	[pc, r1]
 800f858:	1e0e0c02 	.word	0x1e0e0c02
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
 800f85c:	2105      	movs	r1, #5
			ret = RES_ERROR;
		}
		break;

	case GET_BLOCK_SIZE:
		if (disk_access_ioctl(pdrv_str[pdrv],
 800f85e:	4b10      	ldr	r3, [pc, #64]	; (800f8a0 <disk_ioctl+0x58>)
 800f860:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f864:	f004 fd1f 	bl	80142a6 <disk_access_ioctl>
 800f868:	3800      	subs	r0, #0
 800f86a:	bf18      	it	ne
 800f86c:	2001      	movne	r0, #1
 800f86e:	e00e      	b.n	800f88e <disk_ioctl+0x46>
		if (disk_access_ioctl(pdrv_str[pdrv],
 800f870:	2101      	movs	r1, #1
 800f872:	e7f4      	b.n	800f85e <disk_ioctl+0x16>
		if ((disk_access_ioctl(pdrv_str[pdrv],
 800f874:	4b0a      	ldr	r3, [pc, #40]	; (800f8a0 <disk_ioctl+0x58>)
 800f876:	aa01      	add	r2, sp, #4
 800f878:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f87c:	2102      	movs	r1, #2
 800f87e:	f004 fd12 	bl	80142a6 <disk_access_ioctl>
 800f882:	b958      	cbnz	r0, 800f89c <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
 800f884:	9b01      	ldr	r3, [sp, #4]
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
 800f886:	b29a      	uxth	r2, r3
 800f888:	4293      	cmp	r3, r2
 800f88a:	d107      	bne.n	800f89c <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
 800f88c:	8023      	strh	r3, [r4, #0]
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
 800f88e:	b2c0      	uxtb	r0, r0
 800f890:	b002      	add	sp, #8
 800f892:	bd10      	pop	{r4, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
 800f894:	2104      	movs	r1, #4
 800f896:	e7e2      	b.n	800f85e <disk_ioctl+0x16>
	switch (cmd) {
 800f898:	2004      	movs	r0, #4
 800f89a:	e7f8      	b.n	800f88e <disk_ioctl+0x46>
			ret = RES_ERROR;
 800f89c:	2001      	movs	r0, #1
 800f89e:	e7f6      	b.n	800f88e <disk_ioctl+0x46>
 800f8a0:	0801a8bc 	.word	0x0801a8bc

0800f8a4 <LL_RTC_DeInit>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800f8a4:	23ca      	movs	r3, #202	; 0xca
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are de-initialized
  *          - ERROR: RTC registers are not de-initialized
  */
ErrorStatus LL_RTC_DeInit(RTC_TypeDef *RTCx)
{
 800f8a6:	b510      	push	{r4, lr}
 800f8a8:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800f8aa:	2353      	movs	r3, #83	; 0x53
 800f8ac:	6243      	str	r3, [r0, #36]	; 0x24
 800f8ae:	4604      	mov	r4, r0

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800f8b0:	f009 f9b2 	bl	8018c18 <LL_RTC_EnterInitMode>
 800f8b4:	b1a0      	cbz	r0, 800f8e0 <LL_RTC_DeInit+0x3c>
  {
    /* Reset TR, DR and CR registers */
    WRITE_REG(RTCx->TR,       0x00000000U);
 800f8b6:	2300      	movs	r3, #0
#if defined(RTC_WAKEUP_SUPPORT)
    WRITE_REG(RTCx->WUTR,     RTC_WUTR_WUT);
#endif /* RTC_WAKEUP_SUPPORT */
    WRITE_REG(RTCx->DR, (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800f8b8:	f242 1201 	movw	r2, #8449	; 0x2101
    WRITE_REG(RTCx->TR,       0x00000000U);
 800f8bc:	6023      	str	r3, [r4, #0]
    WRITE_REG(RTCx->DR, (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800f8be:	6062      	str	r2, [r4, #4]
#if defined(RTC_WAKEUP_SUPPORT)
    WRITE_REG(RTCx->CR, (LL_RTC_ReadReg(RTCx, CR) & RTC_CR_WUCKSEL));
#else
    WRITE_REG(RTCx->CR, 0x00000000U);
#endif /* RTC_WAKEUP_SUPPORT */
    WRITE_REG(RTCx->PRER, (RTC_PRER_PREDIV_A | RTC_SYNCH_PRESC_DEFAULT));
 800f8c0:	4a0e      	ldr	r2, [pc, #56]	; (800f8fc <LL_RTC_DeInit+0x58>)
    WRITE_REG(RTCx->CR, 0x00000000U);
 800f8c2:	61a3      	str	r3, [r4, #24]
    WRITE_REG(RTCx->PRER, (RTC_PRER_PREDIV_A | RTC_SYNCH_PRESC_DEFAULT));
 800f8c4:	6122      	str	r2, [r4, #16]
    WRITE_REG(RTCx->ALRMAR,   0x00000000U);
 800f8c6:	6423      	str	r3, [r4, #64]	; 0x40
    WRITE_REG(RTCx->ALRMBR,   0x00000000U);
 800f8c8:	64a3      	str	r3, [r4, #72]	; 0x48
    WRITE_REG(RTCx->SHIFTR,   0x00000000U);
 800f8ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    WRITE_REG(RTCx->CALR,     0x00000000U);
 800f8cc:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(RTCx->ALRMASSR, 0x00000000U);
 800f8ce:	6463      	str	r3, [r4, #68]	; 0x44
    WRITE_REG(RTCx->ALRMBSSR, 0x00000000U);
 800f8d0:	64e3      	str	r3, [r4, #76]	; 0x4c
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 800f8d2:	68e3      	ldr	r3, [r4, #12]
 800f8d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8d8:	60e3      	str	r3, [r4, #12]

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);

    /* Wait till the RTC RSF flag is set */
    status = LL_RTC_WaitForSynchro(RTCx);
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f009 f9eb 	bl	8018cb6 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800f8e0:	23ff      	movs	r3, #255	; 0xff
 800f8e2:	6263      	str	r3, [r4, #36]	; 0x24
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);

  /* DeInitialization of the TAMP */
  /* Reset TAMP CR1 and CR2 registers */
  WRITE_REG(TAMP->CR1,      0xFFFF0000U);
 800f8e4:	4b06      	ldr	r3, [pc, #24]	; (800f900 <LL_RTC_DeInit+0x5c>)
 800f8e6:	4a07      	ldr	r2, [pc, #28]	; (800f904 <LL_RTC_DeInit+0x60>)
 800f8e8:	601a      	str	r2, [r3, #0]
  WRITE_REG(TAMP->CR2,     0x00000000U);
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	605a      	str	r2, [r3, #4]
#if defined (RTC_OTHER_SUPPORT)
  WRITE_REG(TAMP->CR3,     0x00000000U);
  WRITE_REG(TAMP->SMCR,     0x00000000U);
  WRITE_REG(TAMP->PRIVCR,   0x00000000U);
#endif /* RTC_OTHER_SUPPORT */
  WRITE_REG(TAMP->FLTCR,    0x00000000U);
 800f8ee:	60da      	str	r2, [r3, #12]
#if defined (RTC_ACTIVE_TAMPER_SUPPORT)
  WRITE_REG(TAMP->ATCR1,    0x00000000U);
  WRITE_REG(TAMP->ATCR2,    0x00000000U);
#endif /* RTC_ACTIVE_TAMPER_SUPPORT */
  WRITE_REG(TAMP->IER,      0x00000000U);
 800f8f0:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(TAMP->SCR,      0xFFFFFFFFU);
 800f8f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8f6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined (RTC_OPTION_REG_SUPPORT)
  WRITE_REG(TAMP->OR,       0x00000000U);
#endif /* RTC_OPTION_REG_SUPPORT */

  return status;
}
 800f8f8:	bd10      	pop	{r4, pc}
 800f8fa:	bf00      	nop
 800f8fc:	007f00ff 	.word	0x007f00ff
 800f900:	4000b000 	.word	0x4000b000
 800f904:	ffff0000 	.word	0xffff0000

0800f908 <LL_SetFlashLatency>:

  /* Flash Clock source (HCLK3) range in MHz with a VCORE is range2 */
  const uint32_t UTILS_CLK_SRC_RANGE_VOS2[] = {6000000U, 12000000U, UTILS_MAX_FREQUENCY_SCALE2};

  /* Flash Latency range */
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800f908:	4a1f      	ldr	r2, [pc, #124]	; (800f988 <LL_SetFlashLatency+0x80>)
{
 800f90a:	4603      	mov	r3, r0
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800f90c:	ca07      	ldmia	r2, {r0, r1, r2}
{
 800f90e:	b084      	sub	sp, #16
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800f910:	f10d 0c10 	add.w	ip, sp, #16
 800f914:	e90c 0007 	stmdb	ip, {r0, r1, r2}

  /* Frequency cannot be equal to 0 */
  if (HCLK3_Frequency != 0U)
 800f918:	4618      	mov	r0, r3
 800f91a:	b333      	cbz	r3, 800f96a <LL_SetFlashLatency+0x62>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800f91c:	4b1b      	ldr	r3, [pc, #108]	; (800f98c <LL_SetFlashLatency+0x84>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  {
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800f924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f928:	d122      	bne.n	800f970 <LL_SetFlashLatency+0x68>
    {
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE1)
 800f92a:	4b19      	ldr	r3, [pc, #100]	; (800f990 <LL_SetFlashLatency+0x88>)
 800f92c:	4298      	cmp	r0, r3
 800f92e:	d81c      	bhi.n	800f96a <LL_SetFlashLatency+0x62>
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS1); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS1[index])
 800f930:	4b18      	ldr	r3, [pc, #96]	; (800f994 <LL_SetFlashLatency+0x8c>)
 800f932:	4298      	cmp	r0, r3
 800f934:	d924      	bls.n	800f980 <LL_SetFlashLatency+0x78>
 800f936:	4b18      	ldr	r3, [pc, #96]	; (800f998 <LL_SetFlashLatency+0x90>)
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS2); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 800f938:	4298      	cmp	r0, r3
 800f93a:	bf94      	ite	ls
 800f93c:	2001      	movls	r0, #1
 800f93e:	2002      	movhi	r0, #2
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800f940:	4916      	ldr	r1, [pc, #88]	; (800f99c <LL_SetFlashLatency+0x94>)
          {
            latency = UTILS_LATENCY_RANGE[index];
 800f942:	ab04      	add	r3, sp, #16
 800f944:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f948:	680b      	ldr	r3, [r1, #0]
 800f94a:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 800f94e:	f023 0307 	bic.w	r3, r3, #7
 800f952:	4313      	orrs	r3, r2
 800f954:	600b      	str	r3, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800f956:	680b      	ldr	r3, [r1, #0]
 800f958:	f003 0307 	and.w	r3, r3, #7
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d011      	beq.n	800f984 <LL_SetFlashLatency+0x7c>
 800f960:	680b      	ldr	r3, [r1, #0]
 800f962:	f003 0307 	and.w	r3, r3, #7
 800f966:	429a      	cmp	r2, r3
 800f968:	d00c      	beq.n	800f984 <LL_SetFlashLatency+0x7c>
  ErrorStatus status = ERROR;
 800f96a:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800f96c:	b004      	add	sp, #16
 800f96e:	4770      	bx	lr
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
 800f970:	4b0b      	ldr	r3, [pc, #44]	; (800f9a0 <LL_SetFlashLatency+0x98>)
 800f972:	4298      	cmp	r0, r3
 800f974:	d8f9      	bhi.n	800f96a <LL_SetFlashLatency+0x62>
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 800f976:	4b0b      	ldr	r3, [pc, #44]	; (800f9a4 <LL_SetFlashLatency+0x9c>)
 800f978:	4298      	cmp	r0, r3
 800f97a:	d901      	bls.n	800f980 <LL_SetFlashLatency+0x78>
 800f97c:	4b0a      	ldr	r3, [pc, #40]	; (800f9a8 <LL_SetFlashLatency+0xa0>)
 800f97e:	e7db      	b.n	800f938 <LL_SetFlashLatency+0x30>
 800f980:	2000      	movs	r0, #0
 800f982:	e7dd      	b.n	800f940 <LL_SetFlashLatency+0x38>
 800f984:	2001      	movs	r0, #1
 800f986:	e7f1      	b.n	800f96c <LL_SetFlashLatency+0x64>
 800f988:	0801a144 	.word	0x0801a144
 800f98c:	58000400 	.word	0x58000400
 800f990:	02dc6c00 	.word	0x02dc6c00
 800f994:	0112a880 	.word	0x0112a880
 800f998:	02255100 	.word	0x02255100
 800f99c:	58004000 	.word	0x58004000
 800f9a0:	00f42400 	.word	0x00f42400
 800f9a4:	005b8d80 	.word	0x005b8d80
 800f9a8:	00b71b00 	.word	0x00b71b00

0800f9ac <UTILS_EnablePLLAndSwitchSystem>:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency,
                                                  LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800f9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHB3CLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK3 frequency based on SYSCLK_Frequency target */
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800f9b0:	688b      	ldr	r3, [r1, #8]
 800f9b2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800fa9c <UTILS_EnablePLLAndSwitchSystem+0xf0>

  /* Calculate HCLK3 frequency current */
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800f9b6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800faa0 <UTILS_EnablePLLAndSwitchSystem+0xf4>
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800f9ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 800f9be:	4607      	mov	r7, r0
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800f9c0:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 800f9c4:	fbb0 f5f5 	udiv	r5, r0, r5
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f9c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800f9d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800f9d4:	f3c2 1203 	ubfx	r2, r2, #4, #4
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800f9d8:	f003 030f 	and.w	r3, r3, #15
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800f9dc:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
 800f9e0:	f8d9 2000 	ldr.w	r2, [r9]
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800f9e4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800f9e8:	4356      	muls	r6, r2
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800f9ea:	fbb6 f6f3 	udiv	r6, r6, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (hclks_frequency_current < hclks_frequency_target)
 800f9ee:	42b5      	cmp	r5, r6
 800f9f0:	d847      	bhi.n	800fa82 <UTILS_EnablePLLAndSwitchSystem+0xd6>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f9f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800f9fc:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800f9fe:	68da      	ldr	r2, [r3, #12]
 800fa00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800fa04:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	0192      	lsls	r2, r2, #6
 800fa0a:	d5fc      	bpl.n	800fa06 <UTILS_EnablePLLAndSwitchSystem+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800fa0c:	6899      	ldr	r1, [r3, #8]
 800fa0e:	6822      	ldr	r2, [r4, #0]
 800fa10:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800fa14:	430a      	orrs	r2, r1
 800fa16:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800fa18:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800fa1c:	6862      	ldr	r2, [r4, #4]
 800fa1e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800fa22:	430a      	orrs	r2, r1
 800fa24:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800fa28:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fa2c:	68a1      	ldr	r1, [r4, #8]
 800fa2e:	f022 020f 	bic.w	r2, r2, #15
 800fa32:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 800fa36:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800fa3a:	689a      	ldr	r2, [r3, #8]
 800fa3c:	f042 0203 	orr.w	r2, r2, #3
 800fa40:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800fa42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fa46:	689a      	ldr	r2, [r3, #8]
 800fa48:	f002 020c 	and.w	r2, r2, #12
#if defined(DUAL_CORE)
    LL_C2_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->CPU2CLKDivider);
#endif /* DUAL_CORE */
    LL_RCC_SetAHB3Prescaler(UTILS_ClkInitStruct->AHB3CLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800fa4c:	2a0c      	cmp	r2, #12
 800fa4e:	d1fa      	bne.n	800fa46 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800fa50:	6899      	ldr	r1, [r3, #8]
 800fa52:	68e2      	ldr	r2, [r4, #12]
 800fa54:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800fa58:	430a      	orrs	r2, r1
 800fa5a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800fa5c:	6899      	ldr	r1, [r3, #8]
 800fa5e:	6922      	ldr	r2, [r4, #16]
 800fa60:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800fa64:	430a      	orrs	r2, r1
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (hclks_frequency_current > hclks_frequency_target)
 800fa66:	42b5      	cmp	r5, r6
 800fa68:	609a      	str	r2, [r3, #8]
 800fa6a:	d311      	bcc.n	800fa90 <UTILS_EnablePLLAndSwitchSystem+0xe4>
  if (status == SUCCESS)
  {
#if defined(CORE_CM0PLUS) && defined(DUAL_CORE)
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK2_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU2CLKDivider));
#else
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU1CLKDivider));
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800fa72:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800fa76:	fbb7 f7f0 	udiv	r7, r7, r0
}
 800fa7a:	2001      	movs	r0, #1
  SystemCoreClock = HCLKFrequency;
 800fa7c:	f8c9 7000 	str.w	r7, [r9]
}
 800fa80:	e004      	b.n	800fa8c <UTILS_EnablePLLAndSwitchSystem+0xe0>
    status = LL_SetFlashLatency(hclks_frequency_target);
 800fa82:	4628      	mov	r0, r5
 800fa84:	f7ff ff40 	bl	800f908 <LL_SetFlashLatency>
  if (status == SUCCESS)
 800fa88:	2801      	cmp	r0, #1
 800fa8a:	d0b2      	beq.n	800f9f2 <UTILS_EnablePLLAndSwitchSystem+0x46>
#endif /* CORE_CM0PLUS && DUAL_CORE */
  }

  return status;
}
 800fa8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    status = LL_SetFlashLatency(hclks_frequency_target);
 800fa90:	4628      	mov	r0, r5
 800fa92:	f7ff ff39 	bl	800f908 <LL_SetFlashLatency>
  if (status == SUCCESS)
 800fa96:	2801      	cmp	r0, #1
 800fa98:	d1f8      	bne.n	800fa8c <UTILS_EnablePLLAndSwitchSystem+0xe0>
 800fa9a:	e7e7      	b.n	800fa6c <UTILS_EnablePLLAndSwitchSystem+0xc0>
 800fa9c:	0801a8dc 	.word	0x0801a8dc
 800faa0:	2000022c 	.word	0x2000022c

0800faa4 <LL_PLL_ConfigSystemClock_HSI>:
{
 800faa4:	b570      	push	{r4, r5, r6, lr}
 800faa6:	4604      	mov	r4, r0
  if (UTILS_PLL_IsBusy() == SUCCESS)
 800faa8:	f009 f955 	bl	8018d56 <UTILS_PLL_IsBusy>
 800faac:	2801      	cmp	r0, #1
{
 800faae:	460d      	mov	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 800fab0:	d12e      	bne.n	800fb10 <LL_PLL_ConfigSystemClock_HSI+0x6c>
    pllrfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800fab2:	4818      	ldr	r0, [pc, #96]	; (800fb14 <LL_PLL_ConfigSystemClock_HSI+0x70>)
 800fab4:	4621      	mov	r1, r4
 800fab6:	f009 f93f 	bl	8018d38 <UTILS_GetPLLOutputFrequency>
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 800faba:	686b      	ldr	r3, [r5, #4]
 800fabc:	4a16      	ldr	r2, [pc, #88]	; (800fb18 <LL_PLL_ConfigSystemClock_HSI+0x74>)
 800fabe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800fac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (hclk2freq > UTILS_HCLK2_MAX)
 800fac6:	4a15      	ldr	r2, [pc, #84]	; (800fb1c <LL_PLL_ConfigSystemClock_HSI+0x78>)
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 800fac8:	fbb0 f3f3 	udiv	r3, r0, r3
    if (hclk2freq > UTILS_HCLK2_MAX)
 800facc:	4293      	cmp	r3, r2
 800face:	d81f      	bhi.n	800fb10 <LL_PLL_ConfigSystemClock_HSI+0x6c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800fad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	0551      	lsls	r1, r2, #21
 800fad8:	d406      	bmi.n	800fae8 <LL_PLL_ConfigSystemClock_HSI+0x44>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fae0:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	0552      	lsls	r2, r2, #21
 800fae6:	d5fc      	bpl.n	800fae2 <LL_PLL_ConfigSystemClock_HSI+0x3e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800fae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800faec:	4b0c      	ldr	r3, [pc, #48]	; (800fb20 <LL_PLL_ConfigSystemClock_HSI+0x7c>)
 800faee:	68d6      	ldr	r6, [r2, #12]
 800faf0:	6861      	ldr	r1, [r4, #4]
 800faf2:	4033      	ands	r3, r6
 800faf4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800faf8:	6821      	ldr	r1, [r4, #0]
 800fafa:	430b      	orrs	r3, r1
 800fafc:	68a1      	ldr	r1, [r4, #8]
 800fafe:	430b      	orrs	r3, r1
 800fb00:	f043 0302 	orr.w	r3, r3, #2
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 800fb04:	4629      	mov	r1, r5
 800fb06:	60d3      	str	r3, [r2, #12]
}
 800fb08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 800fb0c:	f7ff bf4e 	b.w	800f9ac <UTILS_EnablePLLAndSwitchSystem>
}
 800fb10:	2000      	movs	r0, #0
 800fb12:	bd70      	pop	{r4, r5, r6, pc}
 800fb14:	00f42400 	.word	0x00f42400
 800fb18:	0801a8dc 	.word	0x0801a8dc
 800fb1c:	02dc6c00 	.word	0x02dc6c00
 800fb20:	1fff808c 	.word	0x1fff808c

0800fb24 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800fb24:	4b0e      	ldr	r3, [pc, #56]	; (800fb60 <z_sys_init_run_level+0x3c>)
{
 800fb26:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800fb28:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800fb32:	42a6      	cmp	r6, r4
 800fb34:	d800      	bhi.n	800fb38 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 800fb38:	e9d4 3500 	ldrd	r3, r5, [r4]
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	4798      	blx	r3
		if (dev != NULL) {
 800fb40:	b165      	cbz	r5, 800fb5c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 800fb42:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 800fb44:	b130      	cbz	r0, 800fb54 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 800fb46:	2800      	cmp	r0, #0
 800fb48:	bfb8      	it	lt
 800fb4a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800fb4c:	28ff      	cmp	r0, #255	; 0xff
 800fb4e:	bfa8      	it	ge
 800fb50:	20ff      	movge	r0, #255	; 0xff
 800fb52:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 800fb54:	785a      	ldrb	r2, [r3, #1]
 800fb56:	f042 0201 	orr.w	r2, r2, #1
 800fb5a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800fb5c:	3408      	adds	r4, #8
 800fb5e:	e7e8      	b.n	800fb32 <z_sys_init_run_level+0xe>
 800fb60:	0801a91c 	.word	0x0801a91c

0800fb64 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800fb64:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800fb66:	4605      	mov	r5, r0
 800fb68:	b910      	cbnz	r0, 800fb70 <z_impl_device_get_binding+0xc>
		return NULL;
 800fb6a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800fb70:	7803      	ldrb	r3, [r0, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d0f9      	beq.n	800fb6a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 800fb76:	4c0e      	ldr	r4, [pc, #56]	; (800fbb0 <z_impl_device_get_binding+0x4c>)
 800fb78:	4e0e      	ldr	r6, [pc, #56]	; (800fbb4 <z_impl_device_get_binding+0x50>)
 800fb7a:	42b4      	cmp	r4, r6
 800fb7c:	d108      	bne.n	800fb90 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 800fb7e:	4c0c      	ldr	r4, [pc, #48]	; (800fbb0 <z_impl_device_get_binding+0x4c>)
 800fb80:	42b4      	cmp	r4, r6
 800fb82:	d0f2      	beq.n	800fb6a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800fb84:	4620      	mov	r0, r4
 800fb86:	f009 f8ef 	bl	8018d68 <z_device_is_ready>
 800fb8a:	b950      	cbnz	r0, 800fba2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 800fb8c:	3418      	adds	r4, #24
 800fb8e:	e7f7      	b.n	800fb80 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800fb90:	4620      	mov	r0, r4
 800fb92:	f009 f8e9 	bl	8018d68 <z_device_is_ready>
 800fb96:	b110      	cbz	r0, 800fb9e <z_impl_device_get_binding+0x3a>
 800fb98:	6823      	ldr	r3, [r4, #0]
 800fb9a:	42ab      	cmp	r3, r5
 800fb9c:	d0e6      	beq.n	800fb6c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 800fb9e:	3418      	adds	r4, #24
 800fba0:	e7eb      	b.n	800fb7a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800fba2:	6821      	ldr	r1, [r4, #0]
 800fba4:	4628      	mov	r0, r5
 800fba6:	f7f1 fc04 	bl	80013b2 <strcmp>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d1ee      	bne.n	800fb8c <z_impl_device_get_binding+0x28>
 800fbae:	e7dd      	b.n	800fb6c <z_impl_device_get_binding+0x8>
 800fbb0:	08019bd8 	.word	0x08019bd8
 800fbb4:	08019d88 	.word	0x08019d88

0800fbb8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800fbb8:	4b01      	ldr	r3, [pc, #4]	; (800fbc0 <z_impl_z_errno+0x8>)
 800fbba:	6898      	ldr	r0, [r3, #8]
}
 800fbbc:	3064      	adds	r0, #100	; 0x64
 800fbbe:	4770      	bx	lr
 800fbc0:	20002300 	.word	0x20002300

0800fbc4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	b086      	sub	sp, #24
	z_impl_log_panic();
 800fbca:	f7f4 fc99 	bl	8004500 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 800fbce:	4b07      	ldr	r3, [pc, #28]	; (800fbec <k_sys_fatal_error_handler+0x28>)
 800fbd0:	9304      	str	r3, [sp, #16]
 800fbd2:	2302      	movs	r3, #2
 800fbd4:	9303      	str	r3, [sp, #12]
 800fbd6:	4806      	ldr	r0, [pc, #24]	; (800fbf0 <k_sys_fatal_error_handler+0x2c>)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	aa03      	add	r2, sp, #12
 800fbdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800fbe0:	f004 faf7 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f009 f8d9 	bl	8018d9c <arch_system_halt>
 800fbea:	bf00      	nop
 800fbec:	0801ca82 	.word	0x0801ca82
 800fbf0:	0801a008 	.word	0x0801a008

0800fbf4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800fbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf8:	4605      	mov	r5, r0
 800fbfa:	b08c      	sub	sp, #48	; 0x30
 800fbfc:	460f      	mov	r7, r1
	__asm__ volatile(
 800fbfe:	f04f 0310 	mov.w	r3, #16
 800fc02:	f3ef 8811 	mrs	r8, BASEPRI
 800fc06:	f383 8812 	msr	BASEPRI_MAX, r3
 800fc0a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800fc0e:	f000 ff2b 	bl	8010a68 <z_impl_z_current_get>
 800fc12:	2d04      	cmp	r5, #4
 800fc14:	bf96      	itet	ls
 800fc16:	4b22      	ldrls	r3, [pc, #136]	; (800fca0 <z_fatal_error+0xac>)
 800fc18:	4b22      	ldrhi	r3, [pc, #136]	; (800fca4 <z_fatal_error+0xb0>)
 800fc1a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800fc1e:	4922      	ldr	r1, [pc, #136]	; (800fca8 <z_fatal_error+0xb4>)
 800fc20:	9503      	str	r5, [sp, #12]
 800fc22:	2600      	movs	r6, #0
 800fc24:	e9cd 3604 	strd	r3, r6, [sp, #16]
 800fc28:	4b20      	ldr	r3, [pc, #128]	; (800fcac <z_fatal_error+0xb8>)
 800fc2a:	9600      	str	r6, [sp, #0]
 800fc2c:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800fc30:	4604      	mov	r4, r0
 800fc32:	4633      	mov	r3, r6
 800fc34:	2201      	movs	r2, #1
 800fc36:	4630      	mov	r0, r6
 800fc38:	f009 f8a0 	bl	8018d7c <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800fc3c:	b177      	cbz	r7, 800fc5c <z_fatal_error+0x68>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc44:	b153      	cbz	r3, 800fc5c <z_fatal_error+0x68>
		LOG_ERR("Fault during interrupt handling\n");
 800fc46:	4b1a      	ldr	r3, [pc, #104]	; (800fcb0 <z_fatal_error+0xbc>)
 800fc48:	930a      	str	r3, [sp, #40]	; 0x28
 800fc4a:	2302      	movs	r3, #2
 800fc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc4e:	4816      	ldr	r0, [pc, #88]	; (800fca8 <z_fatal_error+0xb4>)
 800fc50:	4633      	mov	r3, r6
 800fc52:	aa09      	add	r2, sp, #36	; 0x24
 800fc54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800fc58:	f004 fabb 	bl	80141d2 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800fc5c:	b12c      	cbz	r4, 800fc6a <z_fatal_error+0x76>
 800fc5e:	4620      	mov	r0, r4
 800fc60:	f009 f8db 	bl	8018e1a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800fc64:	b108      	cbz	r0, 800fc6a <z_fatal_error+0x76>
 800fc66:	7803      	ldrb	r3, [r0, #0]
 800fc68:	b903      	cbnz	r3, 800fc6c <z_fatal_error+0x78>
		thread_name = "unknown";
 800fc6a:	4812      	ldr	r0, [pc, #72]	; (800fcb4 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800fc6c:	4b12      	ldr	r3, [pc, #72]	; (800fcb8 <z_fatal_error+0xc4>)
 800fc6e:	9302      	str	r3, [sp, #8]
 800fc70:	2300      	movs	r3, #0
 800fc72:	e9cd 4003 	strd	r4, r0, [sp, #12]
 800fc76:	e9cd 3300 	strd	r3, r3, [sp]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	490a      	ldr	r1, [pc, #40]	; (800fca8 <z_fatal_error+0xb4>)
 800fc80:	f009 f87c 	bl	8018d7c <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800fc84:	4639      	mov	r1, r7
 800fc86:	4628      	mov	r0, r5
 800fc88:	f7ff ff9c 	bl	800fbc4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800fc8c:	f388 8811 	msr	BASEPRI, r8
 800fc90:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800fc94:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800fc96:	b00c      	add	sp, #48	; 0x30
 800fc98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc9c:	f7f5 bbba 	b.w	8005414 <z_impl_k_thread_abort>
 800fca0:	0801a934 	.word	0x0801a934
 800fca4:	0801bdcb 	.word	0x0801bdcb
 800fca8:	0801a008 	.word	0x0801a008
 800fcac:	0801ca91 	.word	0x0801ca91
 800fcb0:	0801cab9 	.word	0x0801cab9
 800fcb4:	0801bc36 	.word	0x0801bc36
 800fcb8:	0801cada 	.word	0x0801cada

0800fcbc <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800fcbc:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800fcbe:	4b0a      	ldr	r3, [pc, #40]	; (800fce8 <bg_thread_main+0x2c>)
 800fcc0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800fcc2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 800fcc4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800fcc6:	f7ff ff2d 	bl	800fb24 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800fcca:	f001 f9d3 	bl	8011074 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800fcce:	2003      	movs	r0, #3
 800fcd0:	f7ff ff28 	bl	800fb24 <z_sys_init_run_level>

	z_init_static_threads();
 800fcd4:	f000 f96a 	bl	800ffac <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 800fcd8:	f7f2 facc 	bl	8002274 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800fcdc:	4a03      	ldr	r2, [pc, #12]	; (800fcec <bg_thread_main+0x30>)
 800fcde:	7b13      	ldrb	r3, [r2, #12]
 800fce0:	f023 0301 	bic.w	r3, r3, #1
 800fce4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800fce6:	bd08      	pop	{r3, pc}
 800fce8:	2000267e 	.word	0x2000267e
 800fcec:	20000c40 	.word	0x20000c40

0800fcf0 <z_bss_zero>:
{
 800fcf0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 800fcf2:	4803      	ldr	r0, [pc, #12]	; (800fd00 <z_bss_zero+0x10>)
 800fcf4:	4a03      	ldr	r2, [pc, #12]	; (800fd04 <z_bss_zero+0x14>)
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	1a12      	subs	r2, r2, r0
 800fcfa:	f009 f858 	bl	8018dae <z_early_memset>
}
 800fcfe:	bd08      	pop	{r3, pc}
 800fd00:	20000470 	.word	0x20000470
 800fd04:	20002698 	.word	0x20002698

0800fd08 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 800fd08:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 800fd0a:	2300      	movs	r3, #0
{
 800fd0c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 800fd0e:	2201      	movs	r2, #1
 800fd10:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 800fd14:	4e13      	ldr	r6, [pc, #76]	; (800fd64 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800fd16:	4d14      	ldr	r5, [pc, #80]	; (800fd68 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 800fd18:	9301      	str	r3, [sp, #4]
 800fd1a:	220f      	movs	r2, #15
 800fd1c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800fd20:	4912      	ldr	r1, [pc, #72]	; (800fd6c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800fd22:	2318      	movs	r3, #24
 800fd24:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 800fd28:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 800fd2c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 800fd2e:	f44f 7090 	mov.w	r0, #288	; 0x120
 800fd32:	fb00 1104 	mla	r1, r0, r4, r1
 800fd36:	4b0e      	ldr	r3, [pc, #56]	; (800fd70 <z_init_cpu+0x68>)
 800fd38:	9500      	str	r5, [sp, #0]
 800fd3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f000 f8d6 	bl	800fef0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800fd44:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800fd46:	480b      	ldr	r0, [pc, #44]	; (800fd74 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
 800fd48:	752c      	strb	r4, [r5, #20]
 800fd4a:	f023 0304 	bic.w	r3, r3, #4
 800fd4e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800fd50:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800fd54:	fb03 0404 	mla	r4, r3, r4, r0
 800fd58:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800fd5a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 800fd5c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 800fd5e:	b006      	add	sp, #24
 800fd60:	bd70      	pop	{r4, r5, r6, pc}
 800fd62:	bf00      	nop
 800fd64:	20000bc0 	.word	0x20000bc0
 800fd68:	20002300 	.word	0x20002300
 800fd6c:	20009240 	.word	0x20009240
 800fd70:	08018e23 	.word	0x08018e23
 800fd74:	20009360 	.word	0x20009360

0800fd78 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800fd78:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800fd7a:	4b2e      	ldr	r3, [pc, #184]	; (800fe34 <z_cstart+0xbc>)
 800fd7c:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800fd7e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800fd82:	4d2d      	ldr	r5, [pc, #180]	; (800fe38 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 800fd84:	4e2d      	ldr	r6, [pc, #180]	; (800fe3c <z_cstart+0xc4>)
 800fd86:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800fd88:	4f2d      	ldr	r7, [pc, #180]	; (800fe40 <z_cstart+0xc8>)
 800fd8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fd8e:	616b      	str	r3, [r5, #20]
 800fd90:	2400      	movs	r4, #0
 800fd92:	23f0      	movs	r3, #240	; 0xf0
 800fd94:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800fd98:	77ec      	strb	r4, [r5, #31]
 800fd9a:	762c      	strb	r4, [r5, #24]
 800fd9c:	766c      	strb	r4, [r5, #25]
 800fd9e:	76ac      	strb	r4, [r5, #26]
 800fda0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800fda4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fda6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800fdaa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800fdac:	f7f5 fafe 	bl	80053ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800fdb0:	f7f4 fed8 	bl	8004b64 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800fdb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdb8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800fdba:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
 800fdbc:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800fdbe:	f7f5 fbe9 	bl	8005594 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800fdc2:	f7f5 fb39 	bl	8005438 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800fdc6:	f7f4 faa5 	bl	8004314 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800fdca:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
 800fdce:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
 800fdd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
 800fdd4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
 800fdd8:	f001 f946 	bl	8011068 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
 800fddc:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800fdde:	f008 ffc2 	bl	8018d66 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800fde2:	4620      	mov	r0, r4
 800fde4:	f7ff fe9e 	bl	800fb24 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800fde8:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 800fdea:	4d16      	ldr	r5, [pc, #88]	; (800fe44 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800fdec:	f7ff fe9a 	bl	800fb24 <z_sys_init_run_level>
	z_sched_init();
 800fdf0:	f000 fd8e 	bl	8010910 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800fdf4:	4b14      	ldr	r3, [pc, #80]	; (800fe48 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 800fdf6:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800fdf8:	9305      	str	r3, [sp, #20]
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	4913      	ldr	r1, [pc, #76]	; (800fe4c <z_cstart+0xd4>)
 800fdfe:	9400      	str	r4, [sp, #0]
 800fe00:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800fe04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe08:	463b      	mov	r3, r7
 800fe0a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800fe0e:	4628      	mov	r0, r5
 800fe10:	f000 f86e 	bl	800fef0 <z_setup_new_thread>
 800fe14:	7b6a      	ldrb	r2, [r5, #13]
 800fe16:	4606      	mov	r6, r0
 800fe18:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	736a      	strb	r2, [r5, #13]
 800fe20:	f009 f8bd 	bl	8018f9e <z_ready_thread>
	z_init_cpu(0);
 800fe24:	4620      	mov	r0, r4
 800fe26:	f7ff ff6f 	bl	800fd08 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800fe2a:	463a      	mov	r2, r7
 800fe2c:	4631      	mov	r1, r6
 800fe2e:	4628      	mov	r0, r5
 800fe30:	f7f4 ffe8 	bl	8004e04 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800fe34:	20009b80 	.word	0x20009b80
 800fe38:	e000ed00 	.word	0xe000ed00
 800fe3c:	20002300 	.word	0x20002300
 800fe40:	0800fcbd 	.word	0x0800fcbd
 800fe44:	20000c40 	.word	0x20000c40
 800fe48:	0801b193 	.word	0x0801b193
 800fe4c:	20008a20 	.word	0x20008a20

0800fe50 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800fe50:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800fe52:	4b0e      	ldr	r3, [pc, #56]	; (800fe8c <init_mem_slab_module+0x3c>)
 800fe54:	4c0e      	ldr	r4, [pc, #56]	; (800fe90 <init_mem_slab_module+0x40>)
 800fe56:	42a3      	cmp	r3, r4
 800fe58:	d301      	bcc.n	800fe5e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 800fe5a:	2000      	movs	r0, #0
	return rc;
}
 800fe5c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800fe5e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 800fe62:	ea41 0200 	orr.w	r2, r1, r0
 800fe66:	f012 0203 	ands.w	r2, r2, #3
 800fe6a:	d10b      	bne.n	800fe84 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 800fe6c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 800fe6e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 800fe70:	42aa      	cmp	r2, r5
 800fe72:	d101      	bne.n	800fe78 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800fe74:	331c      	adds	r3, #28
 800fe76:	e7ee      	b.n	800fe56 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 800fe78:	695e      	ldr	r6, [r3, #20]
 800fe7a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 800fe7c:	3201      	adds	r2, #1
		slab->free_list = p;
 800fe7e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
 800fe80:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 800fe82:	e7f5      	b.n	800fe70 <init_mem_slab_module+0x20>
	return rc;
 800fe84:	f06f 0015 	mvn.w	r0, #21
 800fe88:	e7e8      	b.n	800fe5c <init_mem_slab_module+0xc>
 800fe8a:	bf00      	nop
 800fe8c:	20000348 	.word	0x20000348
 800fe90:	20000380 	.word	0x20000380

0800fe94 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 800fe94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe96:	460c      	mov	r4, r1
	__asm__ volatile(
 800fe98:	f04f 0510 	mov.w	r5, #16
 800fe9c:	f3ef 8111 	mrs	r1, BASEPRI
 800fea0:	f385 8812 	msr	BASEPRI_MAX, r5
 800fea4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 800fea8:	6945      	ldr	r5, [r0, #20]
 800feaa:	b15d      	cbz	r5, 800fec4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 800feac:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 800feae:	682b      	ldr	r3, [r5, #0]
 800feb0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 800feb2:	6983      	ldr	r3, [r0, #24]
 800feb4:	3301      	adds	r3, #1
 800feb6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 800feb8:	2000      	movs	r0, #0
	__asm__ volatile(
 800feba:	f381 8811 	msr	BASEPRI, r1
 800febe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 800fec2:	e011      	b.n	800fee8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 800fec4:	ea52 0c03 	orrs.w	ip, r2, r3
 800fec8:	d103      	bne.n	800fed2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 800feca:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 800fecc:	f06f 000b 	mvn.w	r0, #11
 800fed0:	e7f3      	b.n	800feba <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 800fed2:	e9cd 2300 	strd	r2, r3, [sp]
 800fed6:	4602      	mov	r2, r0
 800fed8:	3008      	adds	r0, #8
 800feda:	f000 fc6f 	bl	80107bc <z_pend_curr>
		if (result == 0) {
 800fede:	b918      	cbnz	r0, 800fee8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 800fee0:	4b02      	ldr	r3, [pc, #8]	; (800feec <k_mem_slab_alloc+0x58>)
 800fee2:	689b      	ldr	r3, [r3, #8]
 800fee4:	695b      	ldr	r3, [r3, #20]
 800fee6:	6023      	str	r3, [r4, #0]
}
 800fee8:	b003      	add	sp, #12
 800feea:	bd30      	pop	{r4, r5, pc}
 800feec:	20002300 	.word	0x20002300

0800fef0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800fef0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 800fef4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800fef6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800fef8:	2604      	movs	r6, #4
 800fefa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 800fefc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800fefe:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800ff00:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 800ff04:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800ff06:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
 800ff08:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800ff0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 800ff0e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800ff10:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800ff14:	3720      	adds	r7, #32
	node->prev = NULL;
 800ff16:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 800ff1a:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
 800ff1e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 800ff20:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800ff22:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800ff24:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800ff28:	9202      	str	r2, [sp, #8]
 800ff2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff2c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800ff2e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800ff30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff32:	9200      	str	r2, [sp, #0]
 800ff34:	4642      	mov	r2, r8
{
 800ff36:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800ff38:	f7f4 ff32 	bl	8004da0 <arch_new_thread>
	if (!_current) {
 800ff3c:	4b04      	ldr	r3, [pc, #16]	; (800ff50 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800ff3e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	b103      	cbz	r3, 800ff46 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 800ff44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800ff46:	6763      	str	r3, [r4, #116]	; 0x74
}
 800ff48:	4640      	mov	r0, r8
 800ff4a:	b004      	add	sp, #16
 800ff4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff50:	20002300 	.word	0x20002300

0800ff54 <z_impl_k_thread_create>:
{
 800ff54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff56:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800ff58:	2700      	movs	r7, #0
 800ff5a:	9705      	str	r7, [sp, #20]
 800ff5c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ff5e:	9704      	str	r7, [sp, #16]
 800ff60:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ff62:	9703      	str	r7, [sp, #12]
 800ff64:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ff66:	9702      	str	r7, [sp, #8]
{
 800ff68:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800ff6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ff6e:	9701      	str	r7, [sp, #4]
 800ff70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800ff72:	9700      	str	r7, [sp, #0]
{
 800ff74:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800ff76:	f7ff ffbb 	bl	800fef0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800ff7a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800ff7e:	bf08      	it	eq
 800ff80:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800ff84:	d005      	beq.n	800ff92 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800ff86:	ea55 0306 	orrs.w	r3, r5, r6
 800ff8a:	d105      	bne.n	800ff98 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f000 fbb9 	bl	8010704 <z_sched_start>
}
 800ff92:	4620      	mov	r0, r4
 800ff94:	b007      	add	sp, #28
 800ff96:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800ff98:	4903      	ldr	r1, [pc, #12]	; (800ffa8 <z_impl_k_thread_create+0x54>)
 800ff9a:	4632      	mov	r2, r6
 800ff9c:	462b      	mov	r3, r5
 800ff9e:	f104 0018 	add.w	r0, r4, #24
 800ffa2:	f000 fe3f 	bl	8010c24 <z_add_timeout>
 800ffa6:	e7f4      	b.n	800ff92 <z_impl_k_thread_create+0x3e>
 800ffa8:	08018fbf 	.word	0x08018fbf

0800ffac <z_init_static_threads>:
{
 800ffac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffae:	4c22      	ldr	r4, [pc, #136]	; (8010038 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 800ffb0:	4d22      	ldr	r5, [pc, #136]	; (801003c <z_init_static_threads+0x90>)
{
 800ffb2:	b087      	sub	sp, #28
 800ffb4:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800ffb6:	42ae      	cmp	r6, r5
 800ffb8:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800ffbc:	d30b      	bcc.n	800ffd6 <z_init_static_threads+0x2a>
	k_sched_lock();
 800ffbe:	f000 fabb 	bl	8010538 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800ffc2:	4c1d      	ldr	r4, [pc, #116]	; (8010038 <z_init_static_threads+0x8c>)
 800ffc4:	4f1e      	ldr	r7, [pc, #120]	; (8010040 <z_init_static_threads+0x94>)
 800ffc6:	260a      	movs	r6, #10
 800ffc8:	42ac      	cmp	r4, r5
 800ffca:	d320      	bcc.n	801000e <z_init_static_threads+0x62>
}
 800ffcc:	b007      	add	sp, #28
 800ffce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800ffd2:	f000 bc81 	b.w	80108d8 <k_sched_unlock>
		z_setup_new_thread(
 800ffd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ffda:	9305      	str	r3, [sp, #20]
 800ffdc:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800ffe0:	9304      	str	r3, [sp, #16]
 800ffe2:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800ffe6:	9303      	str	r3, [sp, #12]
 800ffe8:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800ffec:	9302      	str	r3, [sp, #8]
 800ffee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800fff2:	9301      	str	r3, [sp, #4]
 800fff4:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800fffe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8010002:	f7ff ff75 	bl	800fef0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8010006:	f854 3c30 	ldr.w	r3, [r4, #-48]
 801000a:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 801000c:	e7d2      	b.n	800ffb4 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 801000e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010010:	1c53      	adds	r3, r2, #1
 8010012:	d009      	beq.n	8010028 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 8010014:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8010018:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 801001c:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8010020:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8010022:	d103      	bne.n	801002c <z_init_static_threads+0x80>
	z_sched_start(thread);
 8010024:	f000 fb6e 	bl	8010704 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8010028:	3430      	adds	r4, #48	; 0x30
 801002a:	e7cd      	b.n	800ffc8 <z_init_static_threads+0x1c>
 801002c:	4639      	mov	r1, r7
 801002e:	3018      	adds	r0, #24
 8010030:	f000 fdf8 	bl	8010c24 <z_add_timeout>
 8010034:	e7f8      	b.n	8010028 <z_init_static_threads+0x7c>
 8010036:	bf00      	nop
 8010038:	20000310 	.word	0x20000310
 801003c:	20000310 	.word	0x20000310
 8010040:	08018fbf 	.word	0x08018fbf

08010044 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8010044:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010048:	4604      	mov	r4, r0
 801004a:	4617      	mov	r7, r2
 801004c:	461e      	mov	r6, r3
	__asm__ volatile(
 801004e:	f04f 0310 	mov.w	r3, #16
 8010052:	f3ef 8811 	mrs	r8, BASEPRI
 8010056:	f383 8812 	msr	BASEPRI_MAX, r3
 801005a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 801005e:	68c3      	ldr	r3, [r0, #12]
 8010060:	4a32      	ldr	r2, [pc, #200]	; (801012c <z_impl_k_mutex_lock+0xe8>)
 8010062:	b16b      	cbz	r3, 8010080 <z_impl_k_mutex_lock+0x3c>
 8010064:	6880      	ldr	r0, [r0, #8]
 8010066:	6891      	ldr	r1, [r2, #8]
 8010068:	4288      	cmp	r0, r1
 801006a:	d019      	beq.n	80100a0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 801006c:	ea57 0306 	orrs.w	r3, r7, r6
 8010070:	d118      	bne.n	80100a4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 8010072:	f388 8811 	msr	BASEPRI, r8
 8010076:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 801007a:	f06f 000f 	mvn.w	r0, #15
 801007e:	e00c      	b.n	801009a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 8010080:	6891      	ldr	r1, [r2, #8]
 8010082:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8010086:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 8010088:	3301      	adds	r3, #1
 801008a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 801008c:	6893      	ldr	r3, [r2, #8]
 801008e:	60a3      	str	r3, [r4, #8]
 8010090:	f388 8811 	msr	BASEPRI, r8
 8010094:	f3bf 8f6f 	isb	sy
		return 0;
 8010098:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 801009a:	b002      	add	sp, #8
 801009c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 80100a0:	6921      	ldr	r1, [r4, #16]
 80100a2:	e7f0      	b.n	8010086 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 80100a4:	f991 100e 	ldrsb.w	r1, [r1, #14]
 80100a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 80100ac:	4299      	cmp	r1, r3
 80100ae:	bfa8      	it	ge
 80100b0:	4619      	movge	r1, r3
 80100b2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 80100b6:	4291      	cmp	r1, r2
 80100b8:	bfb8      	it	lt
 80100ba:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 80100bc:	428b      	cmp	r3, r1
 80100be:	dd2e      	ble.n	801011e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 80100c0:	f008 febb 	bl	8018e3a <adjust_owner_prio.isra.0>
 80100c4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 80100c6:	e9cd 7600 	strd	r7, r6, [sp]
 80100ca:	4819      	ldr	r0, [pc, #100]	; (8010130 <z_impl_k_mutex_lock+0xec>)
 80100cc:	4622      	mov	r2, r4
 80100ce:	4641      	mov	r1, r8
 80100d0:	f000 fb74 	bl	80107bc <z_pend_curr>
	if (got_mutex == 0) {
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d0e0      	beq.n	801009a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 80100d8:	f04f 0310 	mov.w	r3, #16
 80100dc:	f3ef 8611 	mrs	r6, BASEPRI
 80100e0:	f383 8812 	msr	BASEPRI_MAX, r3
 80100e4:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80100e8:	6823      	ldr	r3, [r4, #0]
 80100ea:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80100ec:	429c      	cmp	r4, r3
 80100ee:	d00a      	beq.n	8010106 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80100f0:	b14b      	cbz	r3, 8010106 <z_impl_k_mutex_lock+0xc2>
 80100f2:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80100f6:	4299      	cmp	r1, r3
 80100f8:	bfa8      	it	ge
 80100fa:	4619      	movge	r1, r3
 80100fc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8010100:	4299      	cmp	r1, r3
 8010102:	bfb8      	it	lt
 8010104:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8010106:	68a0      	ldr	r0, [r4, #8]
 8010108:	f008 fe97 	bl	8018e3a <adjust_owner_prio.isra.0>
 801010c:	b900      	cbnz	r0, 8010110 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 801010e:	b145      	cbz	r5, 8010122 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 8010110:	4807      	ldr	r0, [pc, #28]	; (8010130 <z_impl_k_mutex_lock+0xec>)
 8010112:	4631      	mov	r1, r6
 8010114:	f000 f9fe 	bl	8010514 <z_reschedule>
	return -EAGAIN;
 8010118:	f06f 000a 	mvn.w	r0, #10
 801011c:	e7bd      	b.n	801009a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 801011e:	2500      	movs	r5, #0
 8010120:	e7d1      	b.n	80100c6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 8010122:	f386 8811 	msr	BASEPRI, r6
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	e7f5      	b.n	8010118 <z_impl_k_mutex_lock+0xd4>
 801012c:	20002300 	.word	0x20002300
 8010130:	2000267f 	.word	0x2000267f

08010134 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8010134:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8010136:	6883      	ldr	r3, [r0, #8]
{
 8010138:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 801013a:	2b00      	cmp	r3, #0
 801013c:	d032      	beq.n	80101a4 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 801013e:	4a1c      	ldr	r2, [pc, #112]	; (80101b0 <z_impl_k_mutex_unlock+0x7c>)
 8010140:	6892      	ldr	r2, [r2, #8]
 8010142:	4293      	cmp	r3, r2
 8010144:	d131      	bne.n	80101aa <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8010146:	7bda      	ldrb	r2, [r3, #15]
 8010148:	3a01      	subs	r2, #1
 801014a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 801014c:	68c3      	ldr	r3, [r0, #12]
 801014e:	2b01      	cmp	r3, #1
 8010150:	d905      	bls.n	801015e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 8010152:	3b01      	subs	r3, #1
 8010154:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 8010156:	f000 fbbf 	bl	80108d8 <k_sched_unlock>

	return 0;
 801015a:	2000      	movs	r0, #0
}
 801015c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 801015e:	f04f 0310 	mov.w	r3, #16
 8010162:	f3ef 8511 	mrs	r5, BASEPRI
 8010166:	f383 8812 	msr	BASEPRI_MAX, r3
 801016a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 801016e:	6901      	ldr	r1, [r0, #16]
 8010170:	6880      	ldr	r0, [r0, #8]
 8010172:	f008 fe62 	bl	8018e3a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8010176:	4620      	mov	r0, r4
 8010178:	f008 ff82 	bl	8019080 <z_unpend_first_thread>
	mutex->owner = new_owner;
 801017c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 801017e:	b158      	cbz	r0, 8010198 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
 8010180:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8010184:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8010186:	2200      	movs	r2, #0
 8010188:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 801018a:	f008 ff08 	bl	8018f9e <z_ready_thread>
		z_reschedule(&lock, key);
 801018e:	4809      	ldr	r0, [pc, #36]	; (80101b4 <z_impl_k_mutex_unlock+0x80>)
 8010190:	4629      	mov	r1, r5
 8010192:	f000 f9bf 	bl	8010514 <z_reschedule>
 8010196:	e7de      	b.n	8010156 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8010198:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 801019a:	f385 8811 	msr	BASEPRI, r5
 801019e:	f3bf 8f6f 	isb	sy
 80101a2:	e7d8      	b.n	8010156 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 80101a4:	f06f 0015 	mvn.w	r0, #21
 80101a8:	e7d8      	b.n	801015c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 80101aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101ae:	e7d5      	b.n	801015c <z_impl_k_mutex_unlock+0x28>
 80101b0:	20002300 	.word	0x20002300
 80101b4:	2000267f 	.word	0x2000267f

080101b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	4604      	mov	r4, r0
	__asm__ volatile(
 80101bc:	f04f 0310 	mov.w	r3, #16
 80101c0:	f3ef 8511 	mrs	r5, BASEPRI
 80101c4:	f383 8812 	msr	BASEPRI_MAX, r3
 80101c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 80101cc:	f008 ff58 	bl	8019080 <z_unpend_first_thread>

	if (thread != NULL) {
 80101d0:	b148      	cbz	r0, 80101e6 <z_impl_k_sem_give+0x2e>
 80101d2:	2200      	movs	r2, #0
 80101d4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80101d6:	f008 fee2 	bl	8018f9e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 80101da:	4629      	mov	r1, r5
 80101dc:	4808      	ldr	r0, [pc, #32]	; (8010200 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80101de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 80101e2:	f000 b997 	b.w	8010514 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80101e6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	bf18      	it	ne
 80101ee:	3301      	addne	r3, #1
 80101f0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80101f2:	2102      	movs	r1, #2
 80101f4:	f104 0010 	add.w	r0, r4, #16
 80101f8:	f009 f916 	bl	8019428 <z_handle_obj_poll_events>
}
 80101fc:	e7ed      	b.n	80101da <z_impl_k_sem_give+0x22>
 80101fe:	bf00      	nop
 8010200:	2000267f 	.word	0x2000267f

08010204 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8010204:	b513      	push	{r0, r1, r4, lr}
 8010206:	f04f 0410 	mov.w	r4, #16
 801020a:	f3ef 8111 	mrs	r1, BASEPRI
 801020e:	f384 8812 	msr	BASEPRI_MAX, r4
 8010212:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8010216:	6884      	ldr	r4, [r0, #8]
 8010218:	b144      	cbz	r4, 801022c <z_impl_k_sem_take+0x28>
		sem->count--;
 801021a:	3c01      	subs	r4, #1
 801021c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 801021e:	f381 8811 	msr	BASEPRI, r1
 8010222:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8010226:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8010228:	b002      	add	sp, #8
 801022a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801022c:	ea52 0403 	orrs.w	r4, r2, r3
 8010230:	d106      	bne.n	8010240 <z_impl_k_sem_take+0x3c>
 8010232:	f381 8811 	msr	BASEPRI, r1
 8010236:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 801023a:	f06f 000f 	mvn.w	r0, #15
 801023e:	e7f3      	b.n	8010228 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8010240:	e9cd 2300 	strd	r2, r3, [sp]
 8010244:	4602      	mov	r2, r0
 8010246:	4802      	ldr	r0, [pc, #8]	; (8010250 <z_impl_k_sem_take+0x4c>)
 8010248:	f000 fab8 	bl	80107bc <z_pend_curr>
	return ret;
 801024c:	e7ec      	b.n	8010228 <z_impl_k_sem_take+0x24>
 801024e:	bf00      	nop
 8010250:	2000267f 	.word	0x2000267f

08010254 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8010254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
 8010258:	4e47      	ldr	r6, [pc, #284]	; (8010378 <work_queue_main+0x124>)
 801025a:	b085      	sub	sp, #20
 801025c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 801025e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010262:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
 8010266:	f04f 0310 	mov.w	r3, #16
 801026a:	f3ef 8711 	mrs	r7, BASEPRI
 801026e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010272:	f3bf 8f6f 	isb	sy
 8010276:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 801027a:	b98d      	cbnz	r5, 80102a0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 801027c:	2102      	movs	r1, #2
 801027e:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8010282:	f008 fdf9 	bl	8018e78 <flag_test_and_clear>
 8010286:	2800      	cmp	r0, #0
 8010288:	d135      	bne.n	80102f6 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 801028a:	2300      	movs	r3, #0
 801028c:	e9cd 8900 	strd	r8, r9, [sp]
 8010290:	9302      	str	r3, [sp, #8]
 8010292:	f104 0288 	add.w	r2, r4, #136	; 0x88
 8010296:	4639      	mov	r1, r7
 8010298:	4838      	ldr	r0, [pc, #224]	; (801037c <work_queue_main+0x128>)
 801029a:	f000 fc4d 	bl	8010b38 <z_sched_wait>
			continue;
 801029e:	e7e2      	b.n	8010266 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80102a0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 80102a4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 80102a6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80102aa:	4295      	cmp	r5, r2
 80102ac:	d101      	bne.n	80102b2 <work_queue_main+0x5e>
	list->tail = node;
 80102ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 80102b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80102b6:	f043 0302 	orr.w	r3, r3, #2
 80102ba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 80102be:	68eb      	ldr	r3, [r5, #12]
 80102c0:	f023 0304 	bic.w	r3, r3, #4
 80102c4:	f043 0301 	orr.w	r3, r3, #1
 80102c8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 80102ca:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 80102cc:	f387 8811 	msr	BASEPRI, r7
 80102d0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 80102d4:	4628      	mov	r0, r5
 80102d6:	4798      	blx	r3
	__asm__ volatile(
 80102d8:	f04f 0310 	mov.w	r3, #16
 80102dc:	f3ef 8b11 	mrs	fp, BASEPRI
 80102e0:	f383 8812 	msr	BASEPRI_MAX, r3
 80102e4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 80102e8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80102ea:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 80102ec:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80102f0:	d40b      	bmi.n	801030a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 80102f2:	60ea      	str	r2, [r5, #12]
 80102f4:	e00e      	b.n	8010314 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 80102f6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 80102fa:	2200      	movs	r2, #0
 80102fc:	2101      	movs	r1, #1
 80102fe:	4628      	mov	r0, r5
 8010300:	f008 fee7 	bl	80190d2 <z_sched_wake>
 8010304:	2800      	cmp	r0, #0
 8010306:	d1f8      	bne.n	80102fa <work_queue_main+0xa6>
 8010308:	e7bf      	b.n	801028a <work_queue_main+0x36>
	return list->head;
 801030a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 801030c:	f023 0303 	bic.w	r3, r3, #3
 8010310:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8010312:	b970      	cbnz	r0, 8010332 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 8010314:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8010318:	f023 0302 	bic.w	r3, r3, #2
 801031c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
 8010320:	f38b 8811 	msr	BASEPRI, fp
 8010324:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 8010328:	05d8      	lsls	r0, r3, #23
 801032a:	d49c      	bmi.n	8010266 <work_queue_main+0x12>
	z_impl_k_yield();
 801032c:	f000 fafc 	bl	8010928 <z_impl_k_yield>
}
 8010330:	e799      	b.n	8010266 <work_queue_main+0x12>
	return node->next;
 8010332:	2700      	movs	r7, #0
 8010334:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
 8010338:	463b      	mov	r3, r7
		if (wc->work == work) {
 801033a:	6842      	ldr	r2, [r0, #4]
 801033c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 801033e:	4601      	mov	r1, r0
		if (wc->work == work) {
 8010340:	d10c      	bne.n	801035c <work_queue_main+0x108>
	return node->next;
 8010342:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8010344:	b997      	cbnz	r7, 801036c <work_queue_main+0x118>
 8010346:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 8010348:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 801034a:	4282      	cmp	r2, r0
 801034c:	d100      	bne.n	8010350 <work_queue_main+0xfc>
	list->tail = node;
 801034e:	6071      	str	r1, [r6, #4]
	parent->next = child;
 8010350:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 8010354:	f7ff ff30 	bl	80101b8 <z_impl_k_sem_give>
}
 8010358:	4639      	mov	r1, r7
 801035a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 801035c:	f1ba 0f00 	cmp.w	sl, #0
 8010360:	d0d8      	beq.n	8010314 <work_queue_main+0xc0>
	return node->next;
 8010362:	4650      	mov	r0, sl
 8010364:	460f      	mov	r7, r1
 8010366:	f8da a000 	ldr.w	sl, [sl]
 801036a:	e7e6      	b.n	801033a <work_queue_main+0xe6>
	return list->tail;
 801036c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
 801036e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 8010370:	4290      	cmp	r0, r2
	list->tail = node;
 8010372:	bf08      	it	eq
 8010374:	6077      	streq	r7, [r6, #4]
}
 8010376:	e7eb      	b.n	8010350 <work_queue_main+0xfc>
 8010378:	20002324 	.word	0x20002324
 801037c:	2000267f 	.word	0x2000267f

08010380 <submit_to_queue_locked>:
{
 8010380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 8010382:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8010384:	079a      	lsls	r2, r3, #30
{
 8010386:	4604      	mov	r4, r0
 8010388:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 801038a:	f3c3 0540 	ubfx	r5, r3, #1, #1
 801038e:	d41f      	bmi.n	80103d0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8010390:	075f      	lsls	r7, r3, #29
 8010392:	d41f      	bmi.n	80103d4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 8010394:	680a      	ldr	r2, [r1, #0]
 8010396:	b90a      	cbnz	r2, 801039c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 8010398:	6882      	ldr	r2, [r0, #8]
 801039a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 801039c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 801039e:	bf44      	itt	mi
 80103a0:	68a3      	ldrmi	r3, [r4, #8]
 80103a2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 80103a4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
 80103a6:	bf4c      	ite	mi
 80103a8:	2502      	movmi	r5, #2
		ret = 1;
 80103aa:	2501      	movpl	r5, #1
	if (queue == NULL) {
 80103ac:	b37f      	cbz	r7, 801040e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 80103ae:	4b1b      	ldr	r3, [pc, #108]	; (801041c <submit_to_queue_locked+0x9c>)
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	42bb      	cmp	r3, r7
 80103b4:	d111      	bne.n	80103da <submit_to_queue_locked+0x5a>
 80103b6:	f008 fd27 	bl	8018e08 <k_is_in_isr>
 80103ba:	f080 0001 	eor.w	r0, r0, #1
 80103be:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 80103c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 80103c4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 80103c6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 80103ca:	d523      	bpl.n	8010414 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 80103cc:	b13a      	cbz	r2, 80103de <submit_to_queue_locked+0x5e>
 80103ce:	b940      	cbnz	r0, 80103e2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 80103d0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 80103d4:	2300      	movs	r3, #0
 80103d6:	6033      	str	r3, [r6, #0]
	return ret;
 80103d8:	e013      	b.n	8010402 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 80103da:	2000      	movs	r0, #0
 80103dc:	e7f0      	b.n	80103c0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 80103de:	071b      	lsls	r3, r3, #28
 80103e0:	d4f6      	bmi.n	80103d0 <submit_to_queue_locked+0x50>
	parent->next = child;
 80103e2:	2300      	movs	r3, #0
 80103e4:	6023      	str	r3, [r4, #0]
	return list->tail;
 80103e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 80103ea:	b963      	cbnz	r3, 8010406 <submit_to_queue_locked+0x86>
	list->head = node;
 80103ec:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
 80103f0:	4638      	mov	r0, r7
 80103f2:	f008 fd4c 	bl	8018e8e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 80103f6:	68e3      	ldr	r3, [r4, #12]
 80103f8:	f043 0304 	orr.w	r3, r3, #4
 80103fc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 80103fe:	6833      	ldr	r3, [r6, #0]
 8010400:	60a3      	str	r3, [r4, #8]
}
 8010402:	4628      	mov	r0, r5
 8010404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 8010406:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8010408:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
 801040c:	e7f0      	b.n	80103f0 <submit_to_queue_locked+0x70>
		return -EINVAL;
 801040e:	f06f 0515 	mvn.w	r5, #21
 8010412:	e7df      	b.n	80103d4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 8010414:	f06f 0512 	mvn.w	r5, #18
 8010418:	e7dc      	b.n	80103d4 <submit_to_queue_locked+0x54>
 801041a:	bf00      	nop
 801041c:	20002300 	.word	0x20002300

08010420 <k_work_submit>:
{
 8010420:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 8010422:	4801      	ldr	r0, [pc, #4]	; (8010428 <k_work_submit+0x8>)
 8010424:	f008 bd43 	b.w	8018eae <k_work_submit_to_queue>
 8010428:	20000cc8 	.word	0x20000cc8

0801042c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 801042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801042e:	b089      	sub	sp, #36	; 0x24
 8010430:	4604      	mov	r4, r0
	list->head = NULL;
 8010432:	2000      	movs	r0, #0
	list->tail = NULL;
 8010434:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 8010438:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801043a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 801043e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 8010442:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8010446:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 801044a:	b31d      	cbz	r5, 8010494 <k_work_queue_start+0x68>
 801044c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 801044e:	2800      	cmp	r0, #0
 8010450:	f240 1001 	movw	r0, #257	; 0x101
 8010454:	bf08      	it	eq
 8010456:	2001      	moveq	r0, #1
	*flagp = flags;
 8010458:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 801045c:	2000      	movs	r0, #0
 801045e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010462:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010466:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801046a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801046e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010472:	4b09      	ldr	r3, [pc, #36]	; (8010498 <k_work_queue_start+0x6c>)
 8010474:	9400      	str	r4, [sp, #0]
 8010476:	4620      	mov	r0, r4
 8010478:	f7ff fd6c 	bl	800ff54 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 801047c:	b125      	cbz	r5, 8010488 <k_work_queue_start+0x5c>
 801047e:	6829      	ldr	r1, [r5, #0]
 8010480:	b111      	cbz	r1, 8010488 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 8010482:	4620      	mov	r0, r4
 8010484:	f008 fcc6 	bl	8018e14 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8010488:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 801048a:	b009      	add	sp, #36	; 0x24
 801048c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010490:	f008 bcc5 	b.w	8018e1e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8010494:	2001      	movs	r0, #1
 8010496:	e7df      	b.n	8010458 <k_work_queue_start+0x2c>
 8010498:	08010255 	.word	0x08010255

0801049c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 801049c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 801049e:	4d07      	ldr	r5, [pc, #28]	; (80104bc <z_reset_time_slice+0x20>)
 80104a0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 80104a2:	b154      	cbz	r4, 80104ba <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 80104a4:	f7fe fb10 	bl	800eac8 <sys_clock_elapsed>
 80104a8:	4b05      	ldr	r3, [pc, #20]	; (80104c0 <z_reset_time_slice+0x24>)
 80104aa:	4404      	add	r4, r0
 80104ac:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 80104ae:	6828      	ldr	r0, [r5, #0]
 80104b0:	2100      	movs	r1, #0
	}
}
 80104b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 80104b6:	f008 be3f 	b.w	8019138 <z_set_timeout_expiry>
}
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	20002334 	.word	0x20002334
 80104c0:	20002300 	.word	0x20002300

080104c4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 80104c4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80104c6:	f04f 0310 	mov.w	r3, #16
 80104ca:	f3ef 8411 	mrs	r4, BASEPRI
 80104ce:	f383 8812 	msr	BASEPRI_MAX, r3
 80104d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 80104d6:	4a0c      	ldr	r2, [pc, #48]	; (8010508 <k_sched_time_slice_set+0x44>)
 80104d8:	2300      	movs	r3, #0
 80104da:	6113      	str	r3, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 80104dc:	2800      	cmp	r0, #0
			return ((uint32_t)t) * (to_hz / from_hz);
 80104de:	f04f 030a 	mov.w	r3, #10
 80104e2:	fb00 f303 	mul.w	r3, r0, r3
 80104e6:	4809      	ldr	r0, [pc, #36]	; (801050c <k_sched_time_slice_set+0x48>)
 80104e8:	dc0a      	bgt.n	8010500 <k_sched_time_slice_set+0x3c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 80104ea:	6003      	str	r3, [r0, #0]
		}
		slice_max_prio = prio;
 80104ec:	4b08      	ldr	r3, [pc, #32]	; (8010510 <k_sched_time_slice_set+0x4c>)
		z_reset_time_slice(_current);
 80104ee:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 80104f0:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 80104f2:	f7ff ffd3 	bl	801049c <z_reset_time_slice>
	__asm__ volatile(
 80104f6:	f384 8811 	msr	BASEPRI, r4
 80104fa:	f3bf 8f6f 	isb	sy
	}
}
 80104fe:	bd10      	pop	{r4, pc}
			slice_ticks = MAX(2, slice_ticks);
 8010500:	2b02      	cmp	r3, #2
 8010502:	bfb8      	it	lt
 8010504:	2302      	movlt	r3, #2
 8010506:	e7f0      	b.n	80104ea <k_sched_time_slice_set+0x26>
 8010508:	20002300 	.word	0x20002300
 801050c:	20002334 	.word	0x20002334
 8010510:	20002330 	.word	0x20002330

08010514 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8010514:	b949      	cbnz	r1, 801052a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010516:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 801051a:	b930      	cbnz	r0, 801052a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 801051c:	4b05      	ldr	r3, [pc, #20]	; (8010534 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 801051e:	699a      	ldr	r2, [r3, #24]
 8010520:	689b      	ldr	r3, [r3, #8]
 8010522:	429a      	cmp	r2, r3
 8010524:	d001      	beq.n	801052a <z_reschedule+0x16>
	ret = arch_swap(key);
 8010526:	f7f4 bbe7 	b.w	8004cf8 <arch_swap>
 801052a:	f381 8811 	msr	BASEPRI, r1
 801052e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8010532:	4770      	bx	lr
 8010534:	20002300 	.word	0x20002300

08010538 <k_sched_lock>:
	__asm__ volatile(
 8010538:	f04f 0310 	mov.w	r3, #16
 801053c:	f3ef 8111 	mrs	r1, BASEPRI
 8010540:	f383 8812 	msr	BASEPRI_MAX, r3
 8010544:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8010548:	4b04      	ldr	r3, [pc, #16]	; (801055c <k_sched_lock+0x24>)
 801054a:	689a      	ldr	r2, [r3, #8]
 801054c:	7bd3      	ldrb	r3, [r2, #15]
 801054e:	3b01      	subs	r3, #1
 8010550:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8010552:	f381 8811 	msr	BASEPRI, r1
 8010556:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 801055a:	4770      	bx	lr
 801055c:	20002300 	.word	0x20002300

08010560 <update_cache>:
{
 8010560:	b538      	push	{r3, r4, r5, lr}
 8010562:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 8010564:	480c      	ldr	r0, [pc, #48]	; (8010598 <update_cache+0x38>)
 8010566:	4d0d      	ldr	r5, [pc, #52]	; (801059c <update_cache+0x3c>)
 8010568:	f008 fd13 	bl	8018f92 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 801056c:	4604      	mov	r4, r0
 801056e:	b900      	cbnz	r0, 8010572 <update_cache+0x12>
 8010570:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8010572:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8010574:	b94a      	cbnz	r2, 801058a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 8010576:	7b5a      	ldrb	r2, [r3, #13]
 8010578:	06d2      	lsls	r2, r2, #27
 801057a:	d106      	bne.n	801058a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 801057c:	69a2      	ldr	r2, [r4, #24]
 801057e:	b922      	cbnz	r2, 801058a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 8010580:	89da      	ldrh	r2, [r3, #14]
 8010582:	2a7f      	cmp	r2, #127	; 0x7f
 8010584:	d901      	bls.n	801058a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 8010586:	61ab      	str	r3, [r5, #24]
}
 8010588:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 801058a:	429c      	cmp	r4, r3
 801058c:	d002      	beq.n	8010594 <update_cache+0x34>
			z_reset_time_slice(thread);
 801058e:	4620      	mov	r0, r4
 8010590:	f7ff ff84 	bl	801049c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8010594:	61ac      	str	r4, [r5, #24]
}
 8010596:	e7f7      	b.n	8010588 <update_cache+0x28>
 8010598:	2000231c 	.word	0x2000231c
 801059c:	20002300 	.word	0x20002300

080105a0 <move_thread_to_end_of_prio_q>:
{
 80105a0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80105a2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 80105a6:	7b43      	ldrb	r3, [r0, #13]
 80105a8:	2a00      	cmp	r2, #0
{
 80105aa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80105ac:	da04      	bge.n	80105b8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80105ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105b2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 80105b4:	f008 fc98 	bl	8018ee8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 80105b8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 80105ba:	4a15      	ldr	r2, [pc, #84]	; (8010610 <move_thread_to_end_of_prio_q+0x70>)
 80105bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80105c0:	734b      	strb	r3, [r1, #13]
	return (node == list->tail) ? NULL : node->next;
 80105c2:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80105c6:	f102 051c 	add.w	r5, r2, #28
 80105ca:	42ab      	cmp	r3, r5
 80105cc:	d01b      	beq.n	8010606 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80105ce:	b1d3      	cbz	r3, 8010606 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 80105d0:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 80105d4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 80105d8:	4286      	cmp	r6, r0
 80105da:	d00f      	beq.n	80105fc <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 80105dc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80105de:	2800      	cmp	r0, #0
 80105e0:	dd0c      	ble.n	80105fc <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80105e2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 80105e4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 80105e8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80105ea:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 80105ec:	6890      	ldr	r0, [r2, #8]
 80105ee:	1a43      	subs	r3, r0, r1
 80105f0:	4258      	negs	r0, r3
}
 80105f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 80105f6:	4158      	adcs	r0, r3
 80105f8:	f7ff bfb2 	b.w	8010560 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80105fc:	42a3      	cmp	r3, r4
 80105fe:	d002      	beq.n	8010606 <move_thread_to_end_of_prio_q+0x66>
 8010600:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1e6      	bne.n	80105d4 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 8010606:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 801060a:	6021      	str	r1, [r4, #0]
	list->tail = node;
 801060c:	6211      	str	r1, [r2, #32]
}
 801060e:	e7ed      	b.n	80105ec <move_thread_to_end_of_prio_q+0x4c>
 8010610:	20002300 	.word	0x20002300

08010614 <z_time_slice>:
{
 8010614:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8010616:	f04f 0310 	mov.w	r3, #16
 801061a:	f3ef 8511 	mrs	r5, BASEPRI
 801061e:	f383 8812 	msr	BASEPRI_MAX, r3
 8010622:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8010626:	4b17      	ldr	r3, [pc, #92]	; (8010684 <z_time_slice+0x70>)
 8010628:	4a17      	ldr	r2, [pc, #92]	; (8010688 <z_time_slice+0x74>)
 801062a:	689c      	ldr	r4, [r3, #8]
 801062c:	6811      	ldr	r1, [r2, #0]
 801062e:	428c      	cmp	r4, r1
 8010630:	d107      	bne.n	8010642 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 8010632:	4620      	mov	r0, r4
 8010634:	f7ff ff32 	bl	801049c <z_reset_time_slice>
	__asm__ volatile(
 8010638:	f385 8811 	msr	BASEPRI, r5
 801063c:	f3bf 8f6f 	isb	sy
}
 8010640:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8010642:	2100      	movs	r1, #0
 8010644:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 8010646:	4a11      	ldr	r2, [pc, #68]	; (801068c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 8010648:	6812      	ldr	r2, [r2, #0]
 801064a:	b1c2      	cbz	r2, 801067e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 801064c:	89e2      	ldrh	r2, [r4, #14]
 801064e:	2a7f      	cmp	r2, #127	; 0x7f
 8010650:	d815      	bhi.n	801067e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8010652:	7b62      	ldrb	r2, [r4, #13]
 8010654:	06d2      	lsls	r2, r2, #27
 8010656:	d112      	bne.n	801067e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8010658:	4a0d      	ldr	r2, [pc, #52]	; (8010690 <z_time_slice+0x7c>)
 801065a:	f994 100e 	ldrsb.w	r1, [r4, #14]
 801065e:	6812      	ldr	r2, [r2, #0]
 8010660:	4291      	cmp	r1, r2
 8010662:	db0c      	blt.n	801067e <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
 8010664:	4a0b      	ldr	r2, [pc, #44]	; (8010694 <z_time_slice+0x80>)
 8010666:	4294      	cmp	r4, r2
 8010668:	d009      	beq.n	801067e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 801066a:	691a      	ldr	r2, [r3, #16]
 801066c:	4282      	cmp	r2, r0
 801066e:	dc03      	bgt.n	8010678 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 8010670:	4620      	mov	r0, r4
 8010672:	f7ff ff95 	bl	80105a0 <move_thread_to_end_of_prio_q>
 8010676:	e7dc      	b.n	8010632 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 8010678:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 801067a:	611a      	str	r2, [r3, #16]
 801067c:	e7dc      	b.n	8010638 <z_time_slice+0x24>
 801067e:	2200      	movs	r2, #0
 8010680:	e7fb      	b.n	801067a <z_time_slice+0x66>
 8010682:	bf00      	nop
 8010684:	20002300 	.word	0x20002300
 8010688:	2000232c 	.word	0x2000232c
 801068c:	20002334 	.word	0x20002334
 8010690:	20002330 	.word	0x20002330
 8010694:	20000bc0 	.word	0x20000bc0

08010698 <ready_thread>:
{
 8010698:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 801069a:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801069e:	7b43      	ldrb	r3, [r0, #13]
 80106a0:	2a00      	cmp	r2, #0
 80106a2:	db2a      	blt.n	80106fa <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80106a4:	06da      	lsls	r2, r3, #27
 80106a6:	d128      	bne.n	80106fa <ready_thread+0x62>
 80106a8:	6982      	ldr	r2, [r0, #24]
 80106aa:	bb32      	cbnz	r2, 80106fa <ready_thread+0x62>
	return list->head == list;
 80106ac:	4a14      	ldr	r2, [pc, #80]	; (8010700 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 80106ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80106b2:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 80106b4:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80106b8:	f102 051c 	add.w	r5, r2, #28
 80106bc:	42ab      	cmp	r3, r5
 80106be:	d017      	beq.n	80106f0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80106c0:	b1b3      	cbz	r3, 80106f0 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 80106c2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 80106c6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 80106ca:	428e      	cmp	r6, r1
 80106cc:	d00b      	beq.n	80106e6 <ready_thread+0x4e>
		return b2 - b1;
 80106ce:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 80106d0:	2900      	cmp	r1, #0
 80106d2:	dd08      	ble.n	80106e6 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 80106d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80106d6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 80106da:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80106dc:	6058      	str	r0, [r3, #4]
}
 80106de:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80106e0:	2000      	movs	r0, #0
 80106e2:	f7ff bf3d 	b.w	8010560 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 80106e6:	42a3      	cmp	r3, r4
 80106e8:	d002      	beq.n	80106f0 <ready_thread+0x58>
 80106ea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1ea      	bne.n	80106c6 <ready_thread+0x2e>
	node->prev = tail;
 80106f0:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 80106f4:	6020      	str	r0, [r4, #0]
	list->tail = node;
 80106f6:	6210      	str	r0, [r2, #32]
}
 80106f8:	e7f1      	b.n	80106de <ready_thread+0x46>
}
 80106fa:	bc70      	pop	{r4, r5, r6}
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	20002300 	.word	0x20002300

08010704 <z_sched_start>:
{
 8010704:	b510      	push	{r4, lr}
	__asm__ volatile(
 8010706:	f04f 0210 	mov.w	r2, #16
 801070a:	f3ef 8411 	mrs	r4, BASEPRI
 801070e:	f382 8812 	msr	BASEPRI_MAX, r2
 8010712:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8010716:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8010718:	0751      	lsls	r1, r2, #29
 801071a:	d404      	bmi.n	8010726 <z_sched_start+0x22>
	__asm__ volatile(
 801071c:	f384 8811 	msr	BASEPRI, r4
 8010720:	f3bf 8f6f 	isb	sy
}
 8010724:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8010726:	f022 0204 	bic.w	r2, r2, #4
 801072a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 801072c:	f7ff ffb4 	bl	8010698 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8010730:	4621      	mov	r1, r4
 8010732:	4802      	ldr	r0, [pc, #8]	; (801073c <z_sched_start+0x38>)
}
 8010734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8010738:	f7ff beec 	b.w	8010514 <z_reschedule>
 801073c:	2000267f 	.word	0x2000267f

08010740 <unready_thread>:
{
 8010740:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8010742:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8010746:	7b43      	ldrb	r3, [r0, #13]
 8010748:	2a00      	cmp	r2, #0
{
 801074a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 801074c:	da04      	bge.n	8010758 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801074e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010752:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8010754:	f008 fbc8 	bl	8018ee8 <sys_dlist_remove>
	update_cache(thread == _current);
 8010758:	4b04      	ldr	r3, [pc, #16]	; (801076c <unready_thread+0x2c>)
 801075a:	6898      	ldr	r0, [r3, #8]
 801075c:	1a43      	subs	r3, r0, r1
 801075e:	4258      	negs	r0, r3
 8010760:	4158      	adcs	r0, r3
}
 8010762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8010766:	f7ff befb 	b.w	8010560 <update_cache>
 801076a:	bf00      	nop
 801076c:	20002300 	.word	0x20002300

08010770 <pend>:
{
 8010770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010774:	4606      	mov	r6, r0
 8010776:	4615      	mov	r5, r2
 8010778:	461c      	mov	r4, r3
	__asm__ volatile(
 801077a:	f04f 0310 	mov.w	r3, #16
 801077e:	f3ef 8711 	mrs	r7, BASEPRI
 8010782:	f383 8812 	msr	BASEPRI_MAX, r3
 8010786:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 801078a:	f008 fc3a 	bl	8019002 <add_to_waitq_locked>
	__asm__ volatile(
 801078e:	f387 8811 	msr	BASEPRI, r7
 8010792:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010796:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801079a:	bf08      	it	eq
 801079c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 80107a0:	d008      	beq.n	80107b4 <pend+0x44>
 80107a2:	462a      	mov	r2, r5
 80107a4:	4623      	mov	r3, r4
 80107a6:	f106 0018 	add.w	r0, r6, #24
 80107aa:	4903      	ldr	r1, [pc, #12]	; (80107b8 <pend+0x48>)
}
 80107ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107b0:	f000 ba38 	b.w	8010c24 <z_add_timeout>
 80107b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b8:	08018fbf 	.word	0x08018fbf

080107bc <z_pend_curr>:
{
 80107bc:	b510      	push	{r4, lr}
	pending_current = _current;
 80107be:	4b07      	ldr	r3, [pc, #28]	; (80107dc <z_pend_curr+0x20>)
 80107c0:	6898      	ldr	r0, [r3, #8]
 80107c2:	4b07      	ldr	r3, [pc, #28]	; (80107e0 <z_pend_curr+0x24>)
{
 80107c4:	460c      	mov	r4, r1
	pending_current = _current;
 80107c6:	6018      	str	r0, [r3, #0]
{
 80107c8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 80107ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107ce:	f7ff ffcf 	bl	8010770 <pend>
 80107d2:	4620      	mov	r0, r4
}
 80107d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107d8:	f7f4 ba8e 	b.w	8004cf8 <arch_swap>
 80107dc:	20002300 	.word	0x20002300
 80107e0:	2000232c 	.word	0x2000232c

080107e4 <z_set_prio>:
{
 80107e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e6:	4604      	mov	r4, r0
	__asm__ volatile(
 80107e8:	f04f 0310 	mov.w	r3, #16
 80107ec:	f3ef 8611 	mrs	r6, BASEPRI
 80107f0:	f383 8812 	msr	BASEPRI_MAX, r3
 80107f4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 80107f8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80107fa:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 80107fc:	b249      	sxtb	r1, r1
 80107fe:	d133      	bne.n	8010868 <z_set_prio+0x84>
		if (need_sched) {
 8010800:	6982      	ldr	r2, [r0, #24]
 8010802:	bb8a      	cbnz	r2, 8010868 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010808:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 801080a:	f008 fb6d 	bl	8018ee8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 801080e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 8010810:	4a17      	ldr	r2, [pc, #92]	; (8010870 <z_set_prio+0x8c>)
				thread->base.prio = prio;
 8010812:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8010814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010818:	7343      	strb	r3, [r0, #13]
 801081a:	4610      	mov	r0, r2
 801081c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010820:	4283      	cmp	r3, r0
 8010822:	d01b      	beq.n	801085c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010824:	b1d3      	cbz	r3, 801085c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 8010826:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
 8010828:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 801082c:	42a9      	cmp	r1, r5
 801082e:	d010      	beq.n	8010852 <z_set_prio+0x6e>
		return b2 - b1;
 8010830:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8010832:	2d00      	cmp	r5, #0
 8010834:	dd0d      	ble.n	8010852 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 8010836:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8010838:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 801083c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 801083e:	605c      	str	r4, [r3, #4]
			update_cache(1);
 8010840:	2001      	movs	r0, #1
 8010842:	f7ff fe8d 	bl	8010560 <update_cache>
 8010846:	2001      	movs	r0, #1
	__asm__ volatile(
 8010848:	f386 8811 	msr	BASEPRI, r6
 801084c:	f3bf 8f6f 	isb	sy
}
 8010850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8010852:	42bb      	cmp	r3, r7
 8010854:	d002      	beq.n	801085c <z_set_prio+0x78>
 8010856:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010858:	2b00      	cmp	r3, #0
 801085a:	d1e5      	bne.n	8010828 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 801085c:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
 801085e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 8010862:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8010864:	6214      	str	r4, [r2, #32]
}
 8010866:	e7eb      	b.n	8010840 <z_set_prio+0x5c>
			thread->base.prio = prio;
 8010868:	73a1      	strb	r1, [r4, #14]
 801086a:	2000      	movs	r0, #0
 801086c:	e7ec      	b.n	8010848 <z_set_prio+0x64>
 801086e:	bf00      	nop
 8010870:	20002300 	.word	0x20002300

08010874 <z_impl_k_thread_suspend>:
{
 8010874:	b570      	push	{r4, r5, r6, lr}
 8010876:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8010878:	3018      	adds	r0, #24
 801087a:	f008 fc47 	bl	801910c <z_abort_timeout>
	__asm__ volatile(
 801087e:	f04f 0310 	mov.w	r3, #16
 8010882:	f3ef 8611 	mrs	r6, BASEPRI
 8010886:	f383 8812 	msr	BASEPRI_MAX, r3
 801088a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 801088e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8010892:	7b63      	ldrb	r3, [r4, #13]
 8010894:	2a00      	cmp	r2, #0
 8010896:	da05      	bge.n	80108a4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801089c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 801089e:	4620      	mov	r0, r4
 80108a0:	f008 fb22 	bl	8018ee8 <sys_dlist_remove>
		update_cache(thread == _current);
 80108a4:	4d0b      	ldr	r5, [pc, #44]	; (80108d4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80108a6:	7b63      	ldrb	r3, [r4, #13]
 80108a8:	68a8      	ldr	r0, [r5, #8]
 80108aa:	f043 0310 	orr.w	r3, r3, #16
 80108ae:	7363      	strb	r3, [r4, #13]
 80108b0:	1b03      	subs	r3, r0, r4
 80108b2:	4258      	negs	r0, r3
 80108b4:	4158      	adcs	r0, r3
 80108b6:	f7ff fe53 	bl	8010560 <update_cache>
	__asm__ volatile(
 80108ba:	f386 8811 	msr	BASEPRI, r6
 80108be:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 80108c2:	68ab      	ldr	r3, [r5, #8]
 80108c4:	42a3      	cmp	r3, r4
 80108c6:	d103      	bne.n	80108d0 <z_impl_k_thread_suspend+0x5c>
}
 80108c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 80108cc:	f008 bb57 	b.w	8018f7e <z_reschedule_unlocked>
}
 80108d0:	bd70      	pop	{r4, r5, r6, pc}
 80108d2:	bf00      	nop
 80108d4:	20002300 	.word	0x20002300

080108d8 <k_sched_unlock>:
{
 80108d8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80108da:	f04f 0310 	mov.w	r3, #16
 80108de:	f3ef 8411 	mrs	r4, BASEPRI
 80108e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80108e6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80108ea:	4b08      	ldr	r3, [pc, #32]	; (801090c <k_sched_unlock+0x34>)
 80108ec:	689a      	ldr	r2, [r3, #8]
 80108ee:	7bd3      	ldrb	r3, [r2, #15]
 80108f0:	3301      	adds	r3, #1
 80108f2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80108f4:	2000      	movs	r0, #0
 80108f6:	f7ff fe33 	bl	8010560 <update_cache>
	__asm__ volatile(
 80108fa:	f384 8811 	msr	BASEPRI, r4
 80108fe:	f3bf 8f6f 	isb	sy
}
 8010902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8010906:	f008 bb3a 	b.w	8018f7e <z_reschedule_unlocked>
 801090a:	bf00      	nop
 801090c:	20002300 	.word	0x20002300

08010910 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8010910:	4b04      	ldr	r3, [pc, #16]	; (8010924 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8010912:	2100      	movs	r1, #0
 8010914:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8010918:	e9c3 2207 	strd	r2, r2, [r3, #28]
 801091c:	4608      	mov	r0, r1
 801091e:	f7ff bdd1 	b.w	80104c4 <k_sched_time_slice_set>
 8010922:	bf00      	nop
 8010924:	20002300 	.word	0x20002300

08010928 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 8010928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 801092a:	f04f 0310 	mov.w	r3, #16
 801092e:	f3ef 8511 	mrs	r5, BASEPRI
 8010932:	f383 8812 	msr	BASEPRI_MAX, r3
 8010936:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 801093a:	491a      	ldr	r1, [pc, #104]	; (80109a4 <z_impl_k_yield+0x7c>)
 801093c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801093e:	7b43      	ldrb	r3, [r0, #13]
 8010940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010944:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8010946:	f008 facf 	bl	8018ee8 <sys_dlist_remove>
	}
	queue_thread(_current);
 801094a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 801094c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 801094e:	4608      	mov	r0, r1
 8010950:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010954:	735a      	strb	r2, [r3, #13]
 8010956:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801095a:	4282      	cmp	r2, r0
 801095c:	d01c      	beq.n	8010998 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801095e:	b1da      	cbz	r2, 8010998 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 8010960:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 8010962:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 8010966:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 801096a:	42a6      	cmp	r6, r4
 801096c:	d00f      	beq.n	801098e <z_impl_k_yield+0x66>
		return b2 - b1;
 801096e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 8010970:	2c00      	cmp	r4, #0
 8010972:	dd0c      	ble.n	801098e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 8010974:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8010976:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 801097a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 801097c:	6053      	str	r3, [r2, #4]
	update_cache(1);
 801097e:	2001      	movs	r0, #1
 8010980:	f7ff fdee 	bl	8010560 <update_cache>
 8010984:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 8010986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801098a:	f7f4 b9b5 	b.w	8004cf8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 801098e:	42ba      	cmp	r2, r7
 8010990:	d002      	beq.n	8010998 <z_impl_k_yield+0x70>
 8010992:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8010994:	2a00      	cmp	r2, #0
 8010996:	d1e6      	bne.n	8010966 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 8010998:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 801099a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 801099e:	6013      	str	r3, [r2, #0]
	list->tail = node;
 80109a0:	620b      	str	r3, [r1, #32]
}
 80109a2:	e7ec      	b.n	801097e <z_impl_k_yield+0x56>
 80109a4:	20002300 	.word	0x20002300

080109a8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80109a8:	ea50 0301 	orrs.w	r3, r0, r1
{
 80109ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b0:	4605      	mov	r5, r0
 80109b2:	460e      	mov	r6, r1
	if (ticks == 0) {
 80109b4:	d103      	bne.n	80109be <z_tick_sleep+0x16>
	z_impl_k_yield();
 80109b6:	f7ff ffb7 	bl	8010928 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 80109ba:	2000      	movs	r0, #0
 80109bc:	e033      	b.n	8010a26 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 80109be:	f06f 0401 	mvn.w	r4, #1
 80109c2:	1a24      	subs	r4, r4, r0
 80109c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109c8:	eb63 0301 	sbc.w	r3, r3, r1
 80109cc:	2c01      	cmp	r4, #1
 80109ce:	f173 0300 	sbcs.w	r3, r3, #0
 80109d2:	da02      	bge.n	80109da <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80109d4:	f008 fbca 	bl	801916c <sys_clock_tick_get_32>
 80109d8:	1944      	adds	r4, r0, r5
 80109da:	f04f 0310 	mov.w	r3, #16
 80109de:	f3ef 8811 	mrs	r8, BASEPRI
 80109e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80109e6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 80109ea:	4f10      	ldr	r7, [pc, #64]	; (8010a2c <z_tick_sleep+0x84>)
 80109ec:	4b10      	ldr	r3, [pc, #64]	; (8010a30 <z_tick_sleep+0x88>)
 80109ee:	68b8      	ldr	r0, [r7, #8]
 80109f0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 80109f2:	f7ff fea5 	bl	8010740 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80109f6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80109f8:	490e      	ldr	r1, [pc, #56]	; (8010a34 <z_tick_sleep+0x8c>)
 80109fa:	462a      	mov	r2, r5
 80109fc:	4633      	mov	r3, r6
 80109fe:	3018      	adds	r0, #24
 8010a00:	f000 f910 	bl	8010c24 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8010a04:	68ba      	ldr	r2, [r7, #8]
 8010a06:	7b53      	ldrb	r3, [r2, #13]
 8010a08:	f043 0310 	orr.w	r3, r3, #16
 8010a0c:	7353      	strb	r3, [r2, #13]
 8010a0e:	4640      	mov	r0, r8
 8010a10:	f7f4 f972 	bl	8004cf8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8010a14:	f008 fbaa 	bl	801916c <sys_clock_tick_get_32>
 8010a18:	1a20      	subs	r0, r4, r0
 8010a1a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8010a1e:	2801      	cmp	r0, #1
 8010a20:	f173 0300 	sbcs.w	r3, r3, #0
 8010a24:	dbc9      	blt.n	80109ba <z_tick_sleep+0x12>
}
 8010a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a2a:	bf00      	nop
 8010a2c:	20002300 	.word	0x20002300
 8010a30:	2000232c 	.word	0x2000232c
 8010a34:	08018fbf 	.word	0x08018fbf

08010a38 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010a38:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8010a3c:	bf08      	it	eq
 8010a3e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8010a42:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010a44:	d106      	bne.n	8010a54 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8010a46:	4b07      	ldr	r3, [pc, #28]	; (8010a64 <z_impl_k_sleep+0x2c>)
 8010a48:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8010a4a:	f7ff ff13 	bl	8010874 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8010a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8010a52:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8010a54:	f7ff ffa8 	bl	80109a8 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8010a58:	220a      	movs	r2, #10
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	17c1      	asrs	r1, r0, #31
 8010a5e:	f7f0 fab3 	bl	8000fc8 <__aeabi_uldivmod>
	return ret;
 8010a62:	e7f6      	b.n	8010a52 <z_impl_k_sleep+0x1a>
 8010a64:	20002300 	.word	0x20002300

08010a68 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8010a68:	4b01      	ldr	r3, [pc, #4]	; (8010a70 <z_impl_z_current_get+0x8>)
 8010a6a:	6898      	ldr	r0, [r3, #8]
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	20002300 	.word	0x20002300

08010a74 <z_impl_k_is_preempt_thread>:
 8010a74:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 8010a78:	b93b      	cbnz	r3, 8010a8a <z_impl_k_is_preempt_thread+0x16>
 8010a7a:	4b05      	ldr	r3, [pc, #20]	; (8010a90 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8010a7c:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 8010a7e:	89d8      	ldrh	r0, [r3, #14]
 8010a80:	287f      	cmp	r0, #127	; 0x7f
 8010a82:	bf8c      	ite	hi
 8010a84:	2000      	movhi	r0, #0
 8010a86:	2001      	movls	r0, #1
 8010a88:	4770      	bx	lr
 8010a8a:	2000      	movs	r0, #0
}
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	20002300 	.word	0x20002300

08010a94 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8010a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a98:	4604      	mov	r4, r0
 8010a9a:	f04f 0310 	mov.w	r3, #16
 8010a9e:	f3ef 8611 	mrs	r6, BASEPRI
 8010aa2:	f383 8812 	msr	BASEPRI_MAX, r3
 8010aa6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8010aaa:	7b43      	ldrb	r3, [r0, #13]
 8010aac:	071a      	lsls	r2, r3, #28
 8010aae:	d505      	bpl.n	8010abc <z_thread_abort+0x28>
	__asm__ volatile(
 8010ab0:	f386 8811 	msr	BASEPRI, r6
 8010ab4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8010ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8010abc:	f023 0220 	bic.w	r2, r3, #32
 8010ac0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 8010ac4:	09d2      	lsrs	r2, r2, #7
 8010ac6:	d120      	bne.n	8010b0a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8010ac8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 8010aca:	68a3      	ldr	r3, [r4, #8]
 8010acc:	b113      	cbz	r3, 8010ad4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f008 fa12 	bl	8018ef8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 8010ad4:	f104 0018 	add.w	r0, r4, #24
 8010ad8:	f008 fb18 	bl	801910c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8010adc:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8010ae0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8010ae4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010ae6:	42bd      	cmp	r5, r7
 8010ae8:	d000      	beq.n	8010aec <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8010aea:	b9b5      	cbnz	r5, 8010b1a <z_thread_abort+0x86>
		update_cache(1);
 8010aec:	2001      	movs	r0, #1
 8010aee:	f7ff fd37 	bl	8010560 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8010af2:	4b10      	ldr	r3, [pc, #64]	; (8010b34 <z_thread_abort+0xa0>)
 8010af4:	689b      	ldr	r3, [r3, #8]
 8010af6:	42a3      	cmp	r3, r4
 8010af8:	d1da      	bne.n	8010ab0 <z_thread_abort+0x1c>
 8010afa:	f3ef 8305 	mrs	r3, IPSR
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1d6      	bne.n	8010ab0 <z_thread_abort+0x1c>
 8010b02:	4630      	mov	r0, r6
 8010b04:	f7f4 f8f8 	bl	8004cf8 <arch_swap>
	return ret;
 8010b08:	e7d2      	b.n	8010ab0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8010b0a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8010b0e:	f043 0308 	orr.w	r3, r3, #8
 8010b12:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8010b14:	f008 f9e8 	bl	8018ee8 <sys_dlist_remove>
}
 8010b18:	e7d7      	b.n	8010aca <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f008 f9ec 	bl	8018ef8 <unpend_thread_no_timeout>
 8010b20:	f105 0018 	add.w	r0, r5, #24
 8010b24:	f008 faf2 	bl	801910c <z_abort_timeout>
 8010b28:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	f7ff fdb3 	bl	8010698 <ready_thread>
 8010b32:	e7d7      	b.n	8010ae4 <z_thread_abort+0x50>
 8010b34:	20002300 	.word	0x20002300

08010b38 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8010b38:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8010b3a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 8010b3e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8010b40:	e9cd 6700 	strd	r6, r7, [sp]
 8010b44:	f7ff fe3a 	bl	80107bc <z_pend_curr>

	if (data != NULL) {
 8010b48:	b11c      	cbz	r4, 8010b52 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 8010b4a:	4b03      	ldr	r3, [pc, #12]	; (8010b58 <z_sched_wait+0x20>)
 8010b4c:	689b      	ldr	r3, [r3, #8]
 8010b4e:	695b      	ldr	r3, [r3, #20]
 8010b50:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8010b52:	b002      	add	sp, #8
 8010b54:	bdd0      	pop	{r4, r6, r7, pc}
 8010b56:	bf00      	nop
 8010b58:	20002300 	.word	0x20002300

08010b5c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 8010b5c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 8010b5e:	4806      	ldr	r0, [pc, #24]	; (8010b78 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8010b60:	4a06      	ldr	r2, [pc, #24]	; (8010b7c <z_data_copy+0x20>)
 8010b62:	4907      	ldr	r1, [pc, #28]	; (8010b80 <z_data_copy+0x24>)
 8010b64:	1a12      	subs	r2, r2, r0
 8010b66:	f008 f924 	bl	8018db2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8010b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 8010b6e:	4a05      	ldr	r2, [pc, #20]	; (8010b84 <z_data_copy+0x28>)
 8010b70:	4905      	ldr	r1, [pc, #20]	; (8010b88 <z_data_copy+0x2c>)
 8010b72:	4806      	ldr	r0, [pc, #24]	; (8010b8c <z_data_copy+0x30>)
 8010b74:	f008 b91d 	b.w	8018db2 <z_early_memcpy>
 8010b78:	20000000 	.word	0x20000000
 8010b7c:	2000046c 	.word	0x2000046c
 8010b80:	0801ce90 	.word	0x0801ce90
 8010b84:	00000000 	.word	0x00000000
 8010b88:	0801ce90 	.word	0x0801ce90
 8010b8c:	20000000 	.word	0x20000000

08010b90 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8010b90:	4b03      	ldr	r3, [pc, #12]	; (8010ba0 <elapsed+0x10>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	b90b      	cbnz	r3, 8010b9a <elapsed+0xa>
 8010b96:	f7fd bf97 	b.w	800eac8 <sys_clock_elapsed>
}
 8010b9a:	2000      	movs	r0, #0
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop
 8010ba0:	20002338 	.word	0x20002338

08010ba4 <next_timeout>:
	return list->head == list;
 8010ba4:	4b10      	ldr	r3, [pc, #64]	; (8010be8 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 8010ba6:	b510      	push	{r4, lr}
 8010ba8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010baa:	429c      	cmp	r4, r3
 8010bac:	bf08      	it	eq
 8010bae:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8010bb0:	f7ff ffee 	bl	8010b90 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 8010bb4:	b1a4      	cbz	r4, 8010be0 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 8010bb6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010bba:	1a1b      	subs	r3, r3, r0
 8010bbc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 8010bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010bc4:	f170 0200 	sbcs.w	r2, r0, #0
 8010bc8:	da0a      	bge.n	8010be0 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	bfac      	ite	ge
 8010bce:	4618      	movge	r0, r3
 8010bd0:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8010bd2:	4b06      	ldr	r3, [pc, #24]	; (8010bec <next_timeout+0x48>)
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	b113      	cbz	r3, 8010bde <next_timeout+0x3a>
 8010bd8:	4298      	cmp	r0, r3
 8010bda:	bfa8      	it	ge
 8010bdc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8010bde:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 8010be0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010be4:	e7f5      	b.n	8010bd2 <next_timeout+0x2e>
 8010be6:	bf00      	nop
 8010be8:	20000230 	.word	0x20000230
 8010bec:	20002300 	.word	0x20002300

08010bf0 <remove_timeout>:
{
 8010bf0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 8010bf2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8010bf4:	b168      	cbz	r0, 8010c12 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8010bf6:	4a0a      	ldr	r2, [pc, #40]	; (8010c20 <remove_timeout+0x30>)
 8010bf8:	6852      	ldr	r2, [r2, #4]
 8010bfa:	4290      	cmp	r0, r2
 8010bfc:	d009      	beq.n	8010c12 <remove_timeout+0x22>
	if (next(t) != NULL) {
 8010bfe:	b143      	cbz	r3, 8010c12 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8010c00:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8010c04:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8010c08:	1912      	adds	r2, r2, r4
 8010c0a:	eb41 0105 	adc.w	r1, r1, r5
 8010c0e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8010c12:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8010c14:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8010c16:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8010c18:	2300      	movs	r3, #0
	node->prev = NULL;
 8010c1a:	e9c0 3300 	strd	r3, r3, [r0]
}
 8010c1e:	bd30      	pop	{r4, r5, pc}
 8010c20:	20000230 	.word	0x20000230

08010c24 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c28:	bf08      	it	eq
 8010c2a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8010c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c30:	4604      	mov	r4, r0
 8010c32:	461f      	mov	r7, r3
 8010c34:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8010c36:	d067      	beq.n	8010d08 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8010c38:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8010c3a:	f04f 0310 	mov.w	r3, #16
 8010c3e:	f3ef 8611 	mrs	r6, BASEPRI
 8010c42:	f383 8812 	msr	BASEPRI_MAX, r3
 8010c46:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8010c4a:	f06f 0201 	mvn.w	r2, #1
 8010c4e:	1b53      	subs	r3, r2, r5
 8010c50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010c54:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	db1b      	blt.n	8010c94 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8010c5c:	4b2b      	ldr	r3, [pc, #172]	; (8010d0c <z_add_timeout+0xe8>)
 8010c5e:	e9d3 1300 	ldrd	r1, r3, [r3]
 8010c62:	1a52      	subs	r2, r2, r1
 8010c64:	eb6c 0303 	sbc.w	r3, ip, r3
 8010c68:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 8010c6a:	eb63 0307 	sbc.w	r3, r3, r7
 8010c6e:	2d01      	cmp	r5, #1
 8010c70:	f173 0200 	sbcs.w	r2, r3, #0
 8010c74:	bfbc      	itt	lt
 8010c76:	2501      	movlt	r5, #1
 8010c78:	2300      	movlt	r3, #0
 8010c7a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 8010c7e:	4824      	ldr	r0, [pc, #144]	; (8010d10 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 8010c80:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010c84:	4283      	cmp	r3, r0
 8010c86:	d118      	bne.n	8010cba <z_add_timeout+0x96>
	node->prev = tail;
 8010c88:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 8010c8c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 8010c90:	6044      	str	r4, [r0, #4]
}
 8010c92:	e026      	b.n	8010ce2 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8010c94:	f7ff ff7c 	bl	8010b90 <elapsed>
 8010c98:	3501      	adds	r5, #1
 8010c9a:	f147 0700 	adc.w	r7, r7, #0
 8010c9e:	182d      	adds	r5, r5, r0
 8010ca0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 8010ca4:	e9c4 5704 	strd	r5, r7, [r4, #16]
 8010ca8:	e7e9      	b.n	8010c7e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 8010caa:	1a52      	subs	r2, r2, r1
 8010cac:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 8010cb0:	459c      	cmp	ip, r3
 8010cb2:	e9c4 2504 	strd	r2, r5, [r4, #16]
 8010cb6:	d0e7      	beq.n	8010c88 <z_add_timeout+0x64>
 8010cb8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d0e4      	beq.n	8010c88 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 8010cbe:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 8010cc2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 8010cc6:	428a      	cmp	r2, r1
 8010cc8:	eb75 0e07 	sbcs.w	lr, r5, r7
 8010ccc:	daed      	bge.n	8010caa <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 8010cce:	1a8a      	subs	r2, r1, r2
 8010cd0:	eb67 0505 	sbc.w	r5, r7, r5
 8010cd4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 8010cd8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8010cda:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8010cde:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8010ce0:	605c      	str	r4, [r3, #4]
	return list->head == list;
 8010ce2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010ce4:	4283      	cmp	r3, r0
 8010ce6:	d00b      	beq.n	8010d00 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8010ce8:	429c      	cmp	r4, r3
 8010cea:	d109      	bne.n	8010d00 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8010cec:	f7ff ff5a 	bl	8010ba4 <next_timeout>

			if (next_time == 0 ||
 8010cf0:	b118      	cbz	r0, 8010cfa <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 8010cf2:	4b08      	ldr	r3, [pc, #32]	; (8010d14 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 8010cf4:	691b      	ldr	r3, [r3, #16]
 8010cf6:	4283      	cmp	r3, r0
 8010cf8:	d002      	beq.n	8010d00 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 8010cfa:	2100      	movs	r1, #0
 8010cfc:	f7fd fe76 	bl	800e9ec <sys_clock_set_timeout>
	__asm__ volatile(
 8010d00:	f386 8811 	msr	BASEPRI, r6
 8010d04:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8010d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	20000cc0 	.word	0x20000cc0
 8010d10:	20000230 	.word	0x20000230
 8010d14:	20002300 	.word	0x20002300

08010d18 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8010d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d1c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8010d1e:	f7ff fc79 	bl	8010614 <z_time_slice>
	__asm__ volatile(
 8010d22:	f04f 0310 	mov.w	r3, #16
 8010d26:	f3ef 8411 	mrs	r4, BASEPRI
 8010d2a:	f383 8812 	msr	BASEPRI_MAX, r3
 8010d2e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8010d32:	4e24      	ldr	r6, [pc, #144]	; (8010dc4 <sys_clock_announce+0xac>)
	return list->head == list;
 8010d34:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8010dc8 <sys_clock_announce+0xb0>
 8010d38:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8010d3a:	4d24      	ldr	r5, [pc, #144]	; (8010dcc <sys_clock_announce+0xb4>)
 8010d3c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8010d40:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010d42:	4540      	cmp	r0, r8
		curr_tick += dt;
 8010d44:	e9d5 1e00 	ldrd	r1, lr, [r5]
 8010d48:	ea4f 77e2 	mov.w	r7, r2, asr #31
 8010d4c:	d00b      	beq.n	8010d66 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8010d4e:	b150      	cbz	r0, 8010d66 <sys_clock_announce+0x4e>
 8010d50:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	eb77 090c 	sbcs.w	r9, r7, ip
 8010d5a:	da16      	bge.n	8010d8a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8010d5c:	1a9b      	subs	r3, r3, r2
 8010d5e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8010d62:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8010d66:	1852      	adds	r2, r2, r1
 8010d68:	eb4e 0707 	adc.w	r7, lr, r7
 8010d6c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 8010d70:	2500      	movs	r5, #0
 8010d72:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8010d74:	f7ff ff16 	bl	8010ba4 <next_timeout>
 8010d78:	4629      	mov	r1, r5
 8010d7a:	f7fd fe37 	bl	800e9ec <sys_clock_set_timeout>
	__asm__ volatile(
 8010d7e:	f384 8811 	msr	BASEPRI, r4
 8010d82:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8010d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 8010d8a:	1859      	adds	r1, r3, r1
 8010d8c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8010d94:	2200      	movs	r2, #0
 8010d96:	2300      	movs	r3, #0
 8010d98:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 8010d9c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 8010da0:	f7ff ff26 	bl	8010bf0 <remove_timeout>
 8010da4:	f384 8811 	msr	BASEPRI, r4
 8010da8:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8010dac:	6883      	ldr	r3, [r0, #8]
 8010dae:	4798      	blx	r3
	__asm__ volatile(
 8010db0:	f04f 0310 	mov.w	r3, #16
 8010db4:	f3ef 8411 	mrs	r4, BASEPRI
 8010db8:	f383 8812 	msr	BASEPRI_MAX, r3
 8010dbc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8010dc0:	e7bc      	b.n	8010d3c <sys_clock_announce+0x24>
 8010dc2:	bf00      	nop
 8010dc4:	20002338 	.word	0x20002338
 8010dc8:	20000230 	.word	0x20000230
 8010dcc:	20000cc0 	.word	0x20000cc0

08010dd0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8010dd0:	b510      	push	{r4, lr}
 8010dd2:	f04f 0310 	mov.w	r3, #16
 8010dd6:	f3ef 8411 	mrs	r4, BASEPRI
 8010dda:	f383 8812 	msr	BASEPRI_MAX, r3
 8010dde:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 8010de2:	f7fd fe71 	bl	800eac8 <sys_clock_elapsed>
 8010de6:	4a05      	ldr	r2, [pc, #20]	; (8010dfc <sys_clock_tick_get+0x2c>)
 8010de8:	e9d2 3100 	ldrd	r3, r1, [r2]
 8010dec:	18c0      	adds	r0, r0, r3
 8010dee:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8010df2:	f384 8811 	msr	BASEPRI, r4
 8010df6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8010dfa:	bd10      	pop	{r4, pc}
 8010dfc:	20000cc0 	.word	0x20000cc0

08010e00 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8010e00:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8010e02:	4604      	mov	r4, r0
 8010e04:	b178      	cbz	r0, 8010e26 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8010e06:	f7fd fe7d 	bl	800eb04 <sys_clock_cycle_get_32>
 8010e0a:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8010e0c:	4806      	ldr	r0, [pc, #24]	; (8010e28 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8010e0e:	4a07      	ldr	r2, [pc, #28]	; (8010e2c <z_impl_k_busy_wait+0x2c>)
 8010e10:	fba4 0100 	umull	r0, r1, r4, r0
 8010e14:	2300      	movs	r3, #0
 8010e16:	f7f0 f8d7 	bl	8000fc8 <__aeabi_uldivmod>
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	f7fd fe72 	bl	800eb04 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8010e20:	1b43      	subs	r3, r0, r5
 8010e22:	42a3      	cmp	r3, r4
 8010e24:	d3fa      	bcc.n	8010e1c <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8010e26:	bd38      	pop	{r3, r4, r5, pc}
 8010e28:	02dc6c00 	.word	0x02dc6c00
 8010e2c:	000f4240 	.word	0x000f4240

08010e30 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	4604      	mov	r4, r0
	__asm__ volatile(
 8010e34:	f04f 0310 	mov.w	r3, #16
 8010e38:	f3ef 8511 	mrs	r5, BASEPRI
 8010e3c:	f383 8812 	msr	BASEPRI_MAX, r3
 8010e40:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8010e44:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 8010e48:	3301      	adds	r3, #1
 8010e4a:	f142 0200 	adc.w	r2, r2, #0
 8010e4e:	2b02      	cmp	r3, #2
 8010e50:	f172 0300 	sbcs.w	r3, r2, #0
 8010e54:	d304      	bcc.n	8010e60 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8010e56:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8010e5a:	4917      	ldr	r1, [pc, #92]	; (8010eb8 <z_timer_expiration_handler+0x88>)
 8010e5c:	f7ff fee2 	bl	8010c24 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8010e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e62:	3301      	adds	r3, #1
 8010e64:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8010e66:	6a23      	ldr	r3, [r4, #32]
 8010e68:	b173      	cbz	r3, 8010e88 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
 8010e6a:	f385 8811 	msr	BASEPRI, r5
 8010e6e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 8010e72:	6a23      	ldr	r3, [r4, #32]
 8010e74:	4620      	mov	r0, r4
 8010e76:	4798      	blx	r3
	__asm__ volatile(
 8010e78:	f04f 0310 	mov.w	r3, #16
 8010e7c:	f3ef 8511 	mrs	r5, BASEPRI
 8010e80:	f383 8812 	msr	BASEPRI_MAX, r3
 8010e84:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8010e88:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8010e8c:	42a6      	cmp	r6, r4
 8010e8e:	d000      	beq.n	8010e92 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8010e90:	b926      	cbnz	r6, 8010e9c <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
 8010e92:	f385 8811 	msr	BASEPRI, r5
 8010e96:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 8010e9a:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	f008 f83e 	bl	8018f1e <z_unpend_thread_no_timeout>
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010ea6:	f385 8811 	msr	BASEPRI, r5
 8010eaa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 8010eae:	4630      	mov	r0, r6
}
 8010eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 8010eb4:	f008 b873 	b.w	8018f9e <z_ready_thread>
 8010eb8:	08010e31 	.word	0x08010e31

08010ebc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8010ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec0:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8010ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ec6:	bf08      	it	eq
 8010ec8:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
 8010ecc:	4606      	mov	r6, r0
 8010ece:	461c      	mov	r4, r3
 8010ed0:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
 8010ed4:	4689      	mov	r9, r1
 8010ed6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8010ed8:	d03e      	beq.n	8010f58 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8010eda:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010ede:	bf08      	it	eq
 8010ee0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8010ee4:	4615      	mov	r5, r2
 8010ee6:	4607      	mov	r7, r0
 8010ee8:	d014      	beq.n	8010f14 <z_impl_k_timer_start+0x58>
 8010eea:	ea50 0302 	orrs.w	r3, r0, r2
 8010eee:	d011      	beq.n	8010f14 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
 8010ef0:	f06f 0301 	mvn.w	r3, #1
 8010ef4:	1a9b      	subs	r3, r3, r2
 8010ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010efa:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	da08      	bge.n	8010f14 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
 8010f02:	2a02      	cmp	r2, #2
 8010f04:	f170 0300 	sbcs.w	r3, r0, #0
 8010f08:	bfbc      	itt	lt
 8010f0a:	2502      	movlt	r5, #2
 8010f0c:	2700      	movlt	r7, #0
 8010f0e:	3d01      	subs	r5, #1
 8010f10:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8010f14:	f06f 0301 	mvn.w	r3, #1
 8010f18:	1a5b      	subs	r3, r3, r1
 8010f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f1e:	eb63 0304 	sbc.w	r3, r3, r4
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	da09      	bge.n	8010f3a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8010f26:	2901      	cmp	r1, #1
 8010f28:	f174 0300 	sbcs.w	r3, r4, #0
 8010f2c:	bfbc      	itt	lt
 8010f2e:	2101      	movlt	r1, #1
 8010f30:	2400      	movlt	r4, #0
 8010f32:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
 8010f36:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f008 f8e6 	bl	801910c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 8010f40:	2300      	movs	r3, #0
 8010f42:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
 8010f44:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8010f48:	464a      	mov	r2, r9
 8010f4a:	4643      	mov	r3, r8
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	4903      	ldr	r1, [pc, #12]	; (8010f5c <z_impl_k_timer_start+0xa0>)
		     duration);
}
 8010f50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8010f54:	f7ff be66 	b.w	8010c24 <z_add_timeout>
}
 8010f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5c:	08010e31 	.word	0x08010e31

08010f60 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8010f60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f64:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 8010f66:	4b29      	ldr	r3, [pc, #164]	; (801100c <z_impl_k_poll+0xac>)
 8010f68:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 8010f70:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 8010f74:	ea52 0305 	orrs.w	r3, r2, r5
{
 8010f78:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
 8010f7a:	bf0c      	ite	eq
 8010f7c:	2301      	moveq	r3, #1
 8010f7e:	2300      	movne	r3, #0
 8010f80:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 8010f84:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
 8010f86:	f008 f94f 	bl	8019228 <register_events>
 8010f8a:	4681      	mov	r9, r0
	__asm__ volatile(
 8010f8c:	f04f 0310 	mov.w	r3, #16
 8010f90:	f3ef 8a11 	mrs	sl, BASEPRI
 8010f94:	f383 8812 	msr	BASEPRI_MAX, r3
 8010f98:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 8010f9c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 8010fa0:	b964      	cbnz	r4, 8010fbc <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
 8010fa2:	4601      	mov	r1, r0
 8010fa4:	4652      	mov	r2, sl
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	f008 fa0f 	bl	80193ca <clear_event_registrations>
	__asm__ volatile(
 8010fac:	f38a 8811 	msr	BASEPRI, sl
 8010fb0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	b002      	add	sp, #8
 8010fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8010fc2:	ea56 0305 	orrs.w	r3, r6, r5
 8010fc6:	d106      	bne.n	8010fd6 <z_impl_k_poll+0x76>
 8010fc8:	f38a 8811 	msr	BASEPRI, sl
 8010fcc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8010fd0:	f06f 040a 	mvn.w	r4, #10
 8010fd4:	e7ee      	b.n	8010fb4 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8010fd6:	e9cd 6500 	strd	r6, r5, [sp]
 8010fda:	4a0d      	ldr	r2, [pc, #52]	; (8011010 <z_impl_k_poll+0xb0>)
 8010fdc:	480d      	ldr	r0, [pc, #52]	; (8011014 <z_impl_k_poll+0xb4>)
 8010fde:	4651      	mov	r1, sl
 8010fe0:	f7ff fbec 	bl	80107bc <z_pend_curr>
 8010fe4:	4604      	mov	r4, r0
	__asm__ volatile(
 8010fe6:	f04f 0310 	mov.w	r3, #16
 8010fea:	f3ef 8511 	mrs	r5, BASEPRI
 8010fee:	f383 8812 	msr	BASEPRI_MAX, r3
 8010ff2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
 8010ff6:	462a      	mov	r2, r5
 8010ff8:	4649      	mov	r1, r9
 8010ffa:	4640      	mov	r0, r8
 8010ffc:	f008 f9e5 	bl	80193ca <clear_event_registrations>
	__asm__ volatile(
 8011000:	f385 8811 	msr	BASEPRI, r5
 8011004:	f3bf 8f6f 	isb	sy
	return swap_rc;
 8011008:	e7d4      	b.n	8010fb4 <z_impl_k_poll+0x54>
 801100a:	bf00      	nop
 801100c:	20002300 	.word	0x20002300
 8011010:	20000238 	.word	0x20000238
 8011014:	2000267f 	.word	0x2000267f

08011018 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8011018:	b538      	push	{r3, r4, r5, lr}
 801101a:	4603      	mov	r3, r0
	__asm__ volatile(
 801101c:	f04f 0210 	mov.w	r2, #16
 8011020:	f3ef 8511 	mrs	r5, BASEPRI
 8011024:	f382 8812 	msr	BASEPRI_MAX, r2
 8011028:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 801102c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 801102e:	2101      	movs	r1, #1
 8011030:	6081      	str	r1, [r0, #8]
	return list->head == list;
 8011032:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8011034:	4283      	cmp	r3, r0
 8011036:	d106      	bne.n	8011046 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 8011038:	f385 8811 	msr	BASEPRI, r5
 801103c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 8011040:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
 8011042:	4620      	mov	r0, r4
 8011044:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
 8011046:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 801104a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801104c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801104e:	2300      	movs	r3, #0
	node->prev = NULL;
 8011050:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8011054:	f008 f95f 	bl	8019316 <signal_poll_event>
	z_reschedule(&lock, key);
 8011058:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 801105a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 801105c:	4801      	ldr	r0, [pc, #4]	; (8011064 <z_impl_k_poll_signal_raise+0x4c>)
 801105e:	f7ff fa59 	bl	8010514 <z_reschedule>
	return rc;
 8011062:	e7ee      	b.n	8011042 <z_impl_k_poll_signal_raise+0x2a>
 8011064:	2000267f 	.word	0x2000267f

08011068 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
 8011068:	4b01      	ldr	r3, [pc, #4]	; (8011070 <k_thread_system_pool_assign+0x8>)
 801106a:	6743      	str	r3, [r0, #116]	; 0x74
}
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	20000380 	.word	0x20000380

08011074 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8011074:	4a02      	ldr	r2, [pc, #8]	; (8011080 <boot_banner+0xc>)
 8011076:	4903      	ldr	r1, [pc, #12]	; (8011084 <boot_banner+0x10>)
 8011078:	4803      	ldr	r0, [pc, #12]	; (8011088 <boot_banner+0x14>)
 801107a:	f002 bd55 	b.w	8013b28 <printk>
 801107e:	bf00      	nop
 8011080:	0801b143 	.word	0x0801b143
 8011084:	0801cb3f 	.word	0x0801cb3f
 8011088:	0801cb60 	.word	0x0801cb60

0801108c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 801108c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 801108e:	4c06      	ldr	r4, [pc, #24]	; (80110a8 <statics_init+0x1c>)
 8011090:	4d06      	ldr	r5, [pc, #24]	; (80110ac <statics_init+0x20>)
 8011092:	42ac      	cmp	r4, r5
 8011094:	d301      	bcc.n	801109a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 8011096:	2000      	movs	r0, #0
 8011098:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 801109a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801109e:	4620      	mov	r0, r4
 80110a0:	f008 f9d0 	bl	8019444 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 80110a4:	3414      	adds	r4, #20
 80110a6:	e7f4      	b.n	8011092 <statics_init+0x6>
 80110a8:	20000380 	.word	0x20000380
 80110ac:	20000394 	.word	0x20000394

080110b0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 80110b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 80110b2:	4b09      	ldr	r3, [pc, #36]	; (80110d8 <k_sys_work_q_init+0x28>)
 80110b4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 80110b6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 80110b8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 80110ba:	9300      	str	r3, [sp, #0]
 80110bc:	4907      	ldr	r1, [pc, #28]	; (80110dc <k_sys_work_q_init+0x2c>)
 80110be:	4808      	ldr	r0, [pc, #32]	; (80110e0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 80110c0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 80110c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110cc:	f7ff f9ae 	bl	801042c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 80110d0:	4620      	mov	r0, r4
 80110d2:	b004      	add	sp, #16
 80110d4:	bd10      	pop	{r4, pc}
 80110d6:	bf00      	nop
 80110d8:	0801cb87 	.word	0x0801cb87
 80110dc:	20009b80 	.word	0x20009b80
 80110e0:	20000cc8 	.word	0x20000cc8

080110e4 <gmtime_r>:
 80110e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80110ec:	460c      	mov	r4, r1
 80110ee:	4a50      	ldr	r2, [pc, #320]	; (8011230 <gmtime_r+0x14c>)
 80110f0:	2300      	movs	r3, #0
 80110f2:	4630      	mov	r0, r6
 80110f4:	4639      	mov	r1, r7
 80110f6:	f7ef ff17 	bl	8000f28 <__aeabi_ldivmod>
 80110fa:	4639      	mov	r1, r7
 80110fc:	4605      	mov	r5, r0
 80110fe:	4a4c      	ldr	r2, [pc, #304]	; (8011230 <gmtime_r+0x14c>)
 8011100:	4630      	mov	r0, r6
 8011102:	2300      	movs	r3, #0
 8011104:	f7ef ff10 	bl	8000f28 <__aeabi_ldivmod>
 8011108:	2a00      	cmp	r2, #0
 801110a:	bfbc      	itt	lt
 801110c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8011110:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8011114:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8011118:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 801111c:	fbb2 f1f0 	udiv	r1, r2, r0
 8011120:	fb00 2211 	mls	r2, r0, r1, r2
 8011124:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8011128:	bfac      	ite	ge
 801112a:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 801112e:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8011132:	60a1      	str	r1, [r4, #8]
 8011134:	fbb2 f1f0 	udiv	r1, r2, r0
 8011138:	fb00 2211 	mls	r2, r0, r1, r2
 801113c:	6061      	str	r1, [r4, #4]
 801113e:	6022      	str	r2, [r4, #0]
 8011140:	2107      	movs	r1, #7
 8011142:	1cda      	adds	r2, r3, #3
 8011144:	fb92 f1f1 	sdiv	r1, r2, r1
 8011148:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801114c:	1a52      	subs	r2, r2, r1
 801114e:	bf48      	it	mi
 8011150:	3207      	addmi	r2, #7
 8011152:	4d38      	ldr	r5, [pc, #224]	; (8011234 <gmtime_r+0x150>)
 8011154:	4838      	ldr	r0, [pc, #224]	; (8011238 <gmtime_r+0x154>)
 8011156:	61a2      	str	r2, [r4, #24]
 8011158:	2b00      	cmp	r3, #0
 801115a:	bfb7      	itett	lt
 801115c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8011160:	fb93 f5f5 	sdivge	r5, r3, r5
 8011164:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8011168:	fb92 f5f5 	sdivlt	r5, r2, r5
 801116c:	fb00 3005 	mla	r0, r0, r5, r3
 8011170:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8011174:	fbb0 f2f2 	udiv	r2, r0, r2
 8011178:	4402      	add	r2, r0
 801117a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 801117e:	fbb0 f1f3 	udiv	r1, r0, r3
 8011182:	1a52      	subs	r2, r2, r1
 8011184:	f240 1c6d 	movw	ip, #365	; 0x16d
 8011188:	492c      	ldr	r1, [pc, #176]	; (801123c <gmtime_r+0x158>)
 801118a:	fbb0 f1f1 	udiv	r1, r0, r1
 801118e:	2764      	movs	r7, #100	; 0x64
 8011190:	1a52      	subs	r2, r2, r1
 8011192:	fbb2 f1fc 	udiv	r1, r2, ip
 8011196:	fbb2 f3f3 	udiv	r3, r2, r3
 801119a:	fbb1 f6f7 	udiv	r6, r1, r7
 801119e:	1af3      	subs	r3, r6, r3
 80111a0:	4403      	add	r3, r0
 80111a2:	fb0c 3311 	mls	r3, ip, r1, r3
 80111a6:	2299      	movs	r2, #153	; 0x99
 80111a8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80111ac:	f10e 0e02 	add.w	lr, lr, #2
 80111b0:	f103 0c01 	add.w	ip, r3, #1
 80111b4:	fbbe f0f2 	udiv	r0, lr, r2
 80111b8:	4342      	muls	r2, r0
 80111ba:	3202      	adds	r2, #2
 80111bc:	f04f 0805 	mov.w	r8, #5
 80111c0:	fbb2 f2f8 	udiv	r2, r2, r8
 80111c4:	ebac 0c02 	sub.w	ip, ip, r2
 80111c8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80111cc:	4596      	cmp	lr, r2
 80111ce:	bf94      	ite	ls
 80111d0:	2202      	movls	r2, #2
 80111d2:	f06f 0209 	mvnhi.w	r2, #9
 80111d6:	4410      	add	r0, r2
 80111d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80111dc:	fb02 1505 	mla	r5, r2, r5, r1
 80111e0:	2801      	cmp	r0, #1
 80111e2:	bf98      	it	ls
 80111e4:	3501      	addls	r5, #1
 80111e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80111ea:	d30d      	bcc.n	8011208 <gmtime_r+0x124>
 80111ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80111f0:	61e3      	str	r3, [r4, #28]
 80111f2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80111f6:	2300      	movs	r3, #0
 80111f8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80111fc:	f8c4 c00c 	str.w	ip, [r4, #12]
 8011200:	6223      	str	r3, [r4, #32]
 8011202:	4620      	mov	r0, r4
 8011204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011208:	078a      	lsls	r2, r1, #30
 801120a:	d102      	bne.n	8011212 <gmtime_r+0x12e>
 801120c:	fb07 1616 	mls	r6, r7, r6, r1
 8011210:	b95e      	cbnz	r6, 801122a <gmtime_r+0x146>
 8011212:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011216:	fbb1 f6f2 	udiv	r6, r1, r2
 801121a:	fb02 1216 	mls	r2, r2, r6, r1
 801121e:	fab2 f282 	clz	r2, r2
 8011222:	0952      	lsrs	r2, r2, #5
 8011224:	333b      	adds	r3, #59	; 0x3b
 8011226:	4413      	add	r3, r2
 8011228:	e7e2      	b.n	80111f0 <gmtime_r+0x10c>
 801122a:	2201      	movs	r2, #1
 801122c:	e7fa      	b.n	8011224 <gmtime_r+0x140>
 801122e:	bf00      	nop
 8011230:	00015180 	.word	0x00015180
 8011234:	00023ab1 	.word	0x00023ab1
 8011238:	fffdc54f 	.word	0xfffdc54f
 801123c:	00023ab0 	.word	0x00023ab0

08011240 <malloc>:
 8011240:	4b02      	ldr	r3, [pc, #8]	; (801124c <malloc+0xc>)
 8011242:	4601      	mov	r1, r0
 8011244:	6818      	ldr	r0, [r3, #0]
 8011246:	f000 b855 	b.w	80112f4 <_malloc_r>
 801124a:	bf00      	nop
 801124c:	20000240 	.word	0x20000240

08011250 <free>:
 8011250:	4b02      	ldr	r3, [pc, #8]	; (801125c <free+0xc>)
 8011252:	4601      	mov	r1, r0
 8011254:	6818      	ldr	r0, [r3, #0]
 8011256:	f000 b803 	b.w	8011260 <_free_r>
 801125a:	bf00      	nop
 801125c:	20000240 	.word	0x20000240

08011260 <_free_r>:
 8011260:	b538      	push	{r3, r4, r5, lr}
 8011262:	4605      	mov	r5, r0
 8011264:	2900      	cmp	r1, #0
 8011266:	d041      	beq.n	80112ec <_free_r+0x8c>
 8011268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801126c:	1f0c      	subs	r4, r1, #4
 801126e:	2b00      	cmp	r3, #0
 8011270:	bfb8      	it	lt
 8011272:	18e4      	addlt	r4, r4, r3
 8011274:	f001 fac2 	bl	80127fc <__malloc_lock>
 8011278:	4a1d      	ldr	r2, [pc, #116]	; (80112f0 <_free_r+0x90>)
 801127a:	6813      	ldr	r3, [r2, #0]
 801127c:	b933      	cbnz	r3, 801128c <_free_r+0x2c>
 801127e:	6063      	str	r3, [r4, #4]
 8011280:	6014      	str	r4, [r2, #0]
 8011282:	4628      	mov	r0, r5
 8011284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011288:	f001 babe 	b.w	8012808 <__malloc_unlock>
 801128c:	42a3      	cmp	r3, r4
 801128e:	d908      	bls.n	80112a2 <_free_r+0x42>
 8011290:	6820      	ldr	r0, [r4, #0]
 8011292:	1821      	adds	r1, r4, r0
 8011294:	428b      	cmp	r3, r1
 8011296:	bf01      	itttt	eq
 8011298:	6819      	ldreq	r1, [r3, #0]
 801129a:	685b      	ldreq	r3, [r3, #4]
 801129c:	1809      	addeq	r1, r1, r0
 801129e:	6021      	streq	r1, [r4, #0]
 80112a0:	e7ed      	b.n	801127e <_free_r+0x1e>
 80112a2:	461a      	mov	r2, r3
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	b10b      	cbz	r3, 80112ac <_free_r+0x4c>
 80112a8:	42a3      	cmp	r3, r4
 80112aa:	d9fa      	bls.n	80112a2 <_free_r+0x42>
 80112ac:	6811      	ldr	r1, [r2, #0]
 80112ae:	1850      	adds	r0, r2, r1
 80112b0:	42a0      	cmp	r0, r4
 80112b2:	d10b      	bne.n	80112cc <_free_r+0x6c>
 80112b4:	6820      	ldr	r0, [r4, #0]
 80112b6:	4401      	add	r1, r0
 80112b8:	1850      	adds	r0, r2, r1
 80112ba:	4283      	cmp	r3, r0
 80112bc:	6011      	str	r1, [r2, #0]
 80112be:	d1e0      	bne.n	8011282 <_free_r+0x22>
 80112c0:	6818      	ldr	r0, [r3, #0]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	6053      	str	r3, [r2, #4]
 80112c6:	4401      	add	r1, r0
 80112c8:	6011      	str	r1, [r2, #0]
 80112ca:	e7da      	b.n	8011282 <_free_r+0x22>
 80112cc:	d902      	bls.n	80112d4 <_free_r+0x74>
 80112ce:	230c      	movs	r3, #12
 80112d0:	602b      	str	r3, [r5, #0]
 80112d2:	e7d6      	b.n	8011282 <_free_r+0x22>
 80112d4:	6820      	ldr	r0, [r4, #0]
 80112d6:	1821      	adds	r1, r4, r0
 80112d8:	428b      	cmp	r3, r1
 80112da:	bf04      	itt	eq
 80112dc:	6819      	ldreq	r1, [r3, #0]
 80112de:	685b      	ldreq	r3, [r3, #4]
 80112e0:	6063      	str	r3, [r4, #4]
 80112e2:	bf04      	itt	eq
 80112e4:	1809      	addeq	r1, r1, r0
 80112e6:	6021      	streq	r1, [r4, #0]
 80112e8:	6054      	str	r4, [r2, #4]
 80112ea:	e7ca      	b.n	8011282 <_free_r+0x22>
 80112ec:	bd38      	pop	{r3, r4, r5, pc}
 80112ee:	bf00      	nop
 80112f0:	2000233c 	.word	0x2000233c

080112f4 <_malloc_r>:
 80112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f6:	1ccd      	adds	r5, r1, #3
 80112f8:	f025 0503 	bic.w	r5, r5, #3
 80112fc:	3508      	adds	r5, #8
 80112fe:	2d0c      	cmp	r5, #12
 8011300:	bf38      	it	cc
 8011302:	250c      	movcc	r5, #12
 8011304:	2d00      	cmp	r5, #0
 8011306:	4606      	mov	r6, r0
 8011308:	db01      	blt.n	801130e <_malloc_r+0x1a>
 801130a:	42a9      	cmp	r1, r5
 801130c:	d903      	bls.n	8011316 <_malloc_r+0x22>
 801130e:	230c      	movs	r3, #12
 8011310:	6033      	str	r3, [r6, #0]
 8011312:	2000      	movs	r0, #0
 8011314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011316:	f001 fa71 	bl	80127fc <__malloc_lock>
 801131a:	4921      	ldr	r1, [pc, #132]	; (80113a0 <_malloc_r+0xac>)
 801131c:	680a      	ldr	r2, [r1, #0]
 801131e:	4614      	mov	r4, r2
 8011320:	b99c      	cbnz	r4, 801134a <_malloc_r+0x56>
 8011322:	4f20      	ldr	r7, [pc, #128]	; (80113a4 <_malloc_r+0xb0>)
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	b923      	cbnz	r3, 8011332 <_malloc_r+0x3e>
 8011328:	4621      	mov	r1, r4
 801132a:	4630      	mov	r0, r6
 801132c:	f000 f854 	bl	80113d8 <_sbrk_r>
 8011330:	6038      	str	r0, [r7, #0]
 8011332:	4629      	mov	r1, r5
 8011334:	4630      	mov	r0, r6
 8011336:	f000 f84f 	bl	80113d8 <_sbrk_r>
 801133a:	1c43      	adds	r3, r0, #1
 801133c:	d123      	bne.n	8011386 <_malloc_r+0x92>
 801133e:	230c      	movs	r3, #12
 8011340:	6033      	str	r3, [r6, #0]
 8011342:	4630      	mov	r0, r6
 8011344:	f001 fa60 	bl	8012808 <__malloc_unlock>
 8011348:	e7e3      	b.n	8011312 <_malloc_r+0x1e>
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	1b5b      	subs	r3, r3, r5
 801134e:	d417      	bmi.n	8011380 <_malloc_r+0x8c>
 8011350:	2b0b      	cmp	r3, #11
 8011352:	d903      	bls.n	801135c <_malloc_r+0x68>
 8011354:	6023      	str	r3, [r4, #0]
 8011356:	441c      	add	r4, r3
 8011358:	6025      	str	r5, [r4, #0]
 801135a:	e004      	b.n	8011366 <_malloc_r+0x72>
 801135c:	6863      	ldr	r3, [r4, #4]
 801135e:	42a2      	cmp	r2, r4
 8011360:	bf0c      	ite	eq
 8011362:	600b      	streq	r3, [r1, #0]
 8011364:	6053      	strne	r3, [r2, #4]
 8011366:	4630      	mov	r0, r6
 8011368:	f001 fa4e 	bl	8012808 <__malloc_unlock>
 801136c:	f104 000b 	add.w	r0, r4, #11
 8011370:	1d23      	adds	r3, r4, #4
 8011372:	f020 0007 	bic.w	r0, r0, #7
 8011376:	1ac2      	subs	r2, r0, r3
 8011378:	d0cc      	beq.n	8011314 <_malloc_r+0x20>
 801137a:	1a1b      	subs	r3, r3, r0
 801137c:	50a3      	str	r3, [r4, r2]
 801137e:	e7c9      	b.n	8011314 <_malloc_r+0x20>
 8011380:	4622      	mov	r2, r4
 8011382:	6864      	ldr	r4, [r4, #4]
 8011384:	e7cc      	b.n	8011320 <_malloc_r+0x2c>
 8011386:	1cc4      	adds	r4, r0, #3
 8011388:	f024 0403 	bic.w	r4, r4, #3
 801138c:	42a0      	cmp	r0, r4
 801138e:	d0e3      	beq.n	8011358 <_malloc_r+0x64>
 8011390:	1a21      	subs	r1, r4, r0
 8011392:	4630      	mov	r0, r6
 8011394:	f000 f820 	bl	80113d8 <_sbrk_r>
 8011398:	3001      	adds	r0, #1
 801139a:	d1dd      	bne.n	8011358 <_malloc_r+0x64>
 801139c:	e7cf      	b.n	801133e <_malloc_r+0x4a>
 801139e:	bf00      	nop
 80113a0:	2000233c 	.word	0x2000233c
 80113a4:	20002340 	.word	0x20002340

080113a8 <iprintf>:
 80113a8:	b40f      	push	{r0, r1, r2, r3}
 80113aa:	4b0a      	ldr	r3, [pc, #40]	; (80113d4 <iprintf+0x2c>)
 80113ac:	b513      	push	{r0, r1, r4, lr}
 80113ae:	681c      	ldr	r4, [r3, #0]
 80113b0:	b124      	cbz	r4, 80113bc <iprintf+0x14>
 80113b2:	69a3      	ldr	r3, [r4, #24]
 80113b4:	b913      	cbnz	r3, 80113bc <iprintf+0x14>
 80113b6:	4620      	mov	r0, r4
 80113b8:	f001 f922 	bl	8012600 <__sinit>
 80113bc:	ab05      	add	r3, sp, #20
 80113be:	9a04      	ldr	r2, [sp, #16]
 80113c0:	68a1      	ldr	r1, [r4, #8]
 80113c2:	9301      	str	r3, [sp, #4]
 80113c4:	4620      	mov	r0, r4
 80113c6:	f001 fa25 	bl	8012814 <_vfiprintf_r>
 80113ca:	b002      	add	sp, #8
 80113cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113d0:	b004      	add	sp, #16
 80113d2:	4770      	bx	lr
 80113d4:	20000240 	.word	0x20000240

080113d8 <_sbrk_r>:
 80113d8:	b538      	push	{r3, r4, r5, lr}
 80113da:	4d06      	ldr	r5, [pc, #24]	; (80113f4 <_sbrk_r+0x1c>)
 80113dc:	2300      	movs	r3, #0
 80113de:	4604      	mov	r4, r0
 80113e0:	4608      	mov	r0, r1
 80113e2:	602b      	str	r3, [r5, #0]
 80113e4:	f7f4 f938 	bl	8005658 <_sbrk>
 80113e8:	1c43      	adds	r3, r0, #1
 80113ea:	d102      	bne.n	80113f2 <_sbrk_r+0x1a>
 80113ec:	682b      	ldr	r3, [r5, #0]
 80113ee:	b103      	cbz	r3, 80113f2 <_sbrk_r+0x1a>
 80113f0:	6023      	str	r3, [r4, #0]
 80113f2:	bd38      	pop	{r3, r4, r5, pc}
 80113f4:	20002350 	.word	0x20002350

080113f8 <iso_year_adjust>:
 80113f8:	6942      	ldr	r2, [r0, #20]
 80113fa:	2a00      	cmp	r2, #0
 80113fc:	f240 736c 	movw	r3, #1900	; 0x76c
 8011400:	bfa8      	it	ge
 8011402:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8011406:	4413      	add	r3, r2
 8011408:	0792      	lsls	r2, r2, #30
 801140a:	d105      	bne.n	8011418 <iso_year_adjust+0x20>
 801140c:	2164      	movs	r1, #100	; 0x64
 801140e:	fb93 f2f1 	sdiv	r2, r3, r1
 8011412:	fb01 3212 	mls	r2, r1, r2, r3
 8011416:	b9da      	cbnz	r2, 8011450 <iso_year_adjust+0x58>
 8011418:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801141c:	fb93 f1f2 	sdiv	r1, r3, r2
 8011420:	fb02 3311 	mls	r3, r2, r1, r3
 8011424:	fab3 f383 	clz	r3, r3
 8011428:	095b      	lsrs	r3, r3, #5
 801142a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801142e:	0040      	lsls	r0, r0, #1
 8011430:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8011434:	4418      	add	r0, r3
 8011436:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801143a:	4298      	cmp	r0, r3
 801143c:	d03a      	beq.n	80114b4 <iso_year_adjust+0xbc>
 801143e:	dc21      	bgt.n	8011484 <iso_year_adjust+0x8c>
 8011440:	2801      	cmp	r0, #1
 8011442:	dc1a      	bgt.n	801147a <iso_year_adjust+0x82>
 8011444:	2800      	cmp	r0, #0
 8011446:	bfb4      	ite	lt
 8011448:	2000      	movlt	r0, #0
 801144a:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 801144e:	4770      	bx	lr
 8011450:	2301      	movs	r3, #1
 8011452:	e7ea      	b.n	801142a <iso_year_adjust+0x32>
 8011454:	2817      	cmp	r0, #23
 8011456:	d813      	bhi.n	8011480 <iso_year_adjust+0x88>
 8011458:	e8df f000 	tbb	[pc, r0]
 801145c:	0c0c0c0c 	.word	0x0c0c0c0c
 8011460:	0c0c1212 	.word	0x0c0c1212
 8011464:	12121212 	.word	0x12121212
 8011468:	12121212 	.word	0x12121212
 801146c:	0c0c1212 	.word	0x0c0c1212
 8011470:	0c0c1212 	.word	0x0c0c1212
 8011474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011478:	4770      	bx	lr
 801147a:	380a      	subs	r0, #10
 801147c:	2817      	cmp	r0, #23
 801147e:	d9e9      	bls.n	8011454 <iso_year_adjust+0x5c>
 8011480:	2000      	movs	r0, #0
 8011482:	4770      	bx	lr
 8011484:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8011488:	4298      	cmp	r0, r3
 801148a:	dc06      	bgt.n	801149a <iso_year_adjust+0xa2>
 801148c:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8011490:	4298      	cmp	r0, r3
 8011492:	bfd4      	ite	le
 8011494:	2000      	movle	r0, #0
 8011496:	2001      	movgt	r0, #1
 8011498:	4770      	bx	lr
 801149a:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801149e:	3802      	subs	r0, #2
 80114a0:	2815      	cmp	r0, #21
 80114a2:	d8ed      	bhi.n	8011480 <iso_year_adjust+0x88>
 80114a4:	2301      	movs	r3, #1
 80114a6:	4083      	lsls	r3, r0
 80114a8:	4803      	ldr	r0, [pc, #12]	; (80114b8 <iso_year_adjust+0xc0>)
 80114aa:	4018      	ands	r0, r3
 80114ac:	3800      	subs	r0, #0
 80114ae:	bf18      	it	ne
 80114b0:	2001      	movne	r0, #1
 80114b2:	4770      	bx	lr
 80114b4:	2001      	movs	r0, #1
 80114b6:	4770      	bx	lr
 80114b8:	002a001f 	.word	0x002a001f

080114bc <__strftime.isra.0>:
 80114bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c0:	b08f      	sub	sp, #60	; 0x3c
 80114c2:	461e      	mov	r6, r3
 80114c4:	2300      	movs	r3, #0
 80114c6:	4607      	mov	r7, r0
 80114c8:	460d      	mov	r5, r1
 80114ca:	9302      	str	r3, [sp, #8]
 80114cc:	461c      	mov	r4, r3
 80114ce:	7813      	ldrb	r3, [r2, #0]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 84b8 	beq.w	8011e46 <__strftime.isra.0+0x98a>
 80114d6:	2b25      	cmp	r3, #37	; 0x25
 80114d8:	d11f      	bne.n	801151a <__strftime.isra.0+0x5e>
 80114da:	f892 b001 	ldrb.w	fp, [r2, #1]
 80114de:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80114e2:	d024      	beq.n	801152e <__strftime.isra.0+0x72>
 80114e4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80114e8:	d021      	beq.n	801152e <__strftime.isra.0+0x72>
 80114ea:	f102 0801 	add.w	r8, r2, #1
 80114ee:	f04f 0b00 	mov.w	fp, #0
 80114f2:	f898 2000 	ldrb.w	r2, [r8]
 80114f6:	3a31      	subs	r2, #49	; 0x31
 80114f8:	2a08      	cmp	r2, #8
 80114fa:	d81b      	bhi.n	8011534 <__strftime.isra.0+0x78>
 80114fc:	4640      	mov	r0, r8
 80114fe:	220a      	movs	r2, #10
 8011500:	a906      	add	r1, sp, #24
 8011502:	f000 fd21 	bl	8011f48 <strtoul>
 8011506:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801150a:	4681      	mov	r9, r0
 801150c:	f898 2000 	ldrb.w	r2, [r8]
 8011510:	2a45      	cmp	r2, #69	; 0x45
 8011512:	d112      	bne.n	801153a <__strftime.isra.0+0x7e>
 8011514:	f108 0801 	add.w	r8, r8, #1
 8011518:	e011      	b.n	801153e <__strftime.isra.0+0x82>
 801151a:	1e69      	subs	r1, r5, #1
 801151c:	42a1      	cmp	r1, r4
 801151e:	d802      	bhi.n	8011526 <__strftime.isra.0+0x6a>
 8011520:	2400      	movs	r4, #0
 8011522:	f000 bc93 	b.w	8011e4c <__strftime.isra.0+0x990>
 8011526:	553b      	strb	r3, [r7, r4]
 8011528:	3201      	adds	r2, #1
 801152a:	3401      	adds	r4, #1
 801152c:	e7cf      	b.n	80114ce <__strftime.isra.0+0x12>
 801152e:	f102 0802 	add.w	r8, r2, #2
 8011532:	e7de      	b.n	80114f2 <__strftime.isra.0+0x36>
 8011534:	f04f 0900 	mov.w	r9, #0
 8011538:	e7e8      	b.n	801150c <__strftime.isra.0+0x50>
 801153a:	2a4f      	cmp	r2, #79	; 0x4f
 801153c:	d0ea      	beq.n	8011514 <__strftime.isra.0+0x58>
 801153e:	f898 0000 	ldrb.w	r0, [r8]
 8011542:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8011546:	2a55      	cmp	r2, #85	; 0x55
 8011548:	d8ea      	bhi.n	8011520 <__strftime.isra.0+0x64>
 801154a:	a301      	add	r3, pc, #4	; (adr r3, 8011550 <__strftime.isra.0+0x94>)
 801154c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8011550:	08011e3b 	.word	0x08011e3b
 8011554:	08011521 	.word	0x08011521
 8011558:	08011521 	.word	0x08011521
 801155c:	08011521 	.word	0x08011521
 8011560:	08011521 	.word	0x08011521
 8011564:	08011521 	.word	0x08011521
 8011568:	08011521 	.word	0x08011521
 801156c:	08011521 	.word	0x08011521
 8011570:	08011521 	.word	0x08011521
 8011574:	08011521 	.word	0x08011521
 8011578:	08011521 	.word	0x08011521
 801157c:	08011521 	.word	0x08011521
 8011580:	08011521 	.word	0x08011521
 8011584:	08011521 	.word	0x08011521
 8011588:	08011521 	.word	0x08011521
 801158c:	08011521 	.word	0x08011521
 8011590:	08011521 	.word	0x08011521
 8011594:	08011521 	.word	0x08011521
 8011598:	08011521 	.word	0x08011521
 801159c:	08011521 	.word	0x08011521
 80115a0:	08011521 	.word	0x08011521
 80115a4:	08011521 	.word	0x08011521
 80115a8:	08011521 	.word	0x08011521
 80115ac:	08011521 	.word	0x08011521
 80115b0:	08011521 	.word	0x08011521
 80115b4:	08011521 	.word	0x08011521
 80115b8:	08011521 	.word	0x08011521
 80115bc:	08011521 	.word	0x08011521
 80115c0:	080116e5 	.word	0x080116e5
 80115c4:	0801173d 	.word	0x0801173d
 80115c8:	080117ab 	.word	0x080117ab
 80115cc:	08011849 	.word	0x08011849
 80115d0:	08011521 	.word	0x08011521
 80115d4:	08011893 	.word	0x08011893
 80115d8:	08011981 	.word	0x08011981
 80115dc:	08011a59 	.word	0x08011a59
 80115e0:	08011a67 	.word	0x08011a67
 80115e4:	08011521 	.word	0x08011521
 80115e8:	08011521 	.word	0x08011521
 80115ec:	08011521 	.word	0x08011521
 80115f0:	08011a97 	.word	0x08011a97
 80115f4:	08011521 	.word	0x08011521
 80115f8:	08011521 	.word	0x08011521
 80115fc:	08011aab 	.word	0x08011aab
 8011600:	08011521 	.word	0x08011521
 8011604:	08011afd 	.word	0x08011afd
 8011608:	08011c11 	.word	0x08011c11
 801160c:	08011c21 	.word	0x08011c21
 8011610:	08011c49 	.word	0x08011c49
 8011614:	08011c81 	.word	0x08011c81
 8011618:	08011cf5 	.word	0x08011cf5
 801161c:	080117a3 	.word	0x080117a3
 8011620:	08011d21 	.word	0x08011d21
 8011624:	08011de9 	.word	0x08011de9
 8011628:	08011521 	.word	0x08011521
 801162c:	08011521 	.word	0x08011521
 8011630:	08011521 	.word	0x08011521
 8011634:	08011521 	.word	0x08011521
 8011638:	08011521 	.word	0x08011521
 801163c:	08011521 	.word	0x08011521
 8011640:	080116a9 	.word	0x080116a9
 8011644:	08011713 	.word	0x08011713
 8011648:	08011769 	.word	0x08011769
 801164c:	08011825 	.word	0x08011825
 8011650:	08011825 	.word	0x08011825
 8011654:	08011521 	.word	0x08011521
 8011658:	080118e5 	.word	0x080118e5
 801165c:	08011713 	.word	0x08011713
 8011660:	08011521 	.word	0x08011521
 8011664:	08011a89 	.word	0x08011a89
 8011668:	08011a59 	.word	0x08011a59
 801166c:	08011a67 	.word	0x08011a67
 8011670:	08011a91 	.word	0x08011a91
 8011674:	08011a9b 	.word	0x08011a9b
 8011678:	08011521 	.word	0x08011521
 801167c:	08011aab 	.word	0x08011aab
 8011680:	08011521 	.word	0x08011521
 8011684:	08011793 	.word	0x08011793
 8011688:	08011b0f 	.word	0x08011b0f
 801168c:	08011c15 	.word	0x08011c15
 8011690:	08011c2f 	.word	0x08011c2f
 8011694:	08011521 	.word	0x08011521
 8011698:	08011ce7 	.word	0x08011ce7
 801169c:	0801179b 	.word	0x0801179b
 80116a0:	08011d05 	.word	0x08011d05
 80116a4:	08011d73 	.word	0x08011d73
 80116a8:	69b3      	ldr	r3, [r6, #24]
 80116aa:	4aa9      	ldr	r2, [pc, #676]	; (8011950 <__strftime.isra.0+0x494>)
 80116ac:	3318      	adds	r3, #24
 80116ae:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80116b2:	4648      	mov	r0, r9
 80116b4:	f7ef fe87 	bl	80013c6 <strlen>
 80116b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80116bc:	4420      	add	r0, r4
 80116be:	1e6b      	subs	r3, r5, #1
 80116c0:	42a0      	cmp	r0, r4
 80116c2:	d107      	bne.n	80116d4 <__strftime.isra.0+0x218>
 80116c4:	f898 3000 	ldrb.w	r3, [r8]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f000 83bc 	beq.w	8011e46 <__strftime.isra.0+0x98a>
 80116ce:	f108 0201 	add.w	r2, r8, #1
 80116d2:	e6fc      	b.n	80114ce <__strftime.isra.0+0x12>
 80116d4:	42a3      	cmp	r3, r4
 80116d6:	f67f af23 	bls.w	8011520 <__strftime.isra.0+0x64>
 80116da:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80116de:	553a      	strb	r2, [r7, r4]
 80116e0:	3401      	adds	r4, #1
 80116e2:	e7ed      	b.n	80116c0 <__strftime.isra.0+0x204>
 80116e4:	69b2      	ldr	r2, [r6, #24]
 80116e6:	4b9a      	ldr	r3, [pc, #616]	; (8011950 <__strftime.isra.0+0x494>)
 80116e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80116ec:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 80116f0:	4648      	mov	r0, r9
 80116f2:	f7ef fe68 	bl	80013c6 <strlen>
 80116f6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80116fa:	4420      	add	r0, r4
 80116fc:	1e6b      	subs	r3, r5, #1
 80116fe:	42a0      	cmp	r0, r4
 8011700:	d0e0      	beq.n	80116c4 <__strftime.isra.0+0x208>
 8011702:	42a3      	cmp	r3, r4
 8011704:	f67f af0c 	bls.w	8011520 <__strftime.isra.0+0x64>
 8011708:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 801170c:	553a      	strb	r2, [r7, r4]
 801170e:	3401      	adds	r4, #1
 8011710:	e7f5      	b.n	80116fe <__strftime.isra.0+0x242>
 8011712:	4b8f      	ldr	r3, [pc, #572]	; (8011950 <__strftime.isra.0+0x494>)
 8011714:	6932      	ldr	r2, [r6, #16]
 8011716:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 801171a:	4648      	mov	r0, r9
 801171c:	f7ef fe53 	bl	80013c6 <strlen>
 8011720:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011724:	4420      	add	r0, r4
 8011726:	1e6b      	subs	r3, r5, #1
 8011728:	42a0      	cmp	r0, r4
 801172a:	d0cb      	beq.n	80116c4 <__strftime.isra.0+0x208>
 801172c:	42a3      	cmp	r3, r4
 801172e:	f67f aef7 	bls.w	8011520 <__strftime.isra.0+0x64>
 8011732:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8011736:	553a      	strb	r2, [r7, r4]
 8011738:	3401      	adds	r4, #1
 801173a:	e7f5      	b.n	8011728 <__strftime.isra.0+0x26c>
 801173c:	6933      	ldr	r3, [r6, #16]
 801173e:	4a84      	ldr	r2, [pc, #528]	; (8011950 <__strftime.isra.0+0x494>)
 8011740:	330c      	adds	r3, #12
 8011742:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8011746:	4648      	mov	r0, r9
 8011748:	f7ef fe3d 	bl	80013c6 <strlen>
 801174c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011750:	4420      	add	r0, r4
 8011752:	1e6b      	subs	r3, r5, #1
 8011754:	42a0      	cmp	r0, r4
 8011756:	d0b5      	beq.n	80116c4 <__strftime.isra.0+0x208>
 8011758:	42a3      	cmp	r3, r4
 801175a:	f67f aee1 	bls.w	8011520 <__strftime.isra.0+0x64>
 801175e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8011762:	553a      	strb	r2, [r7, r4]
 8011764:	3401      	adds	r4, #1
 8011766:	e7f5      	b.n	8011754 <__strftime.isra.0+0x298>
 8011768:	4b79      	ldr	r3, [pc, #484]	; (8011950 <__strftime.isra.0+0x494>)
 801176a:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 801176e:	4648      	mov	r0, r9
 8011770:	f7ef fe29 	bl	80013c6 <strlen>
 8011774:	f899 3000 	ldrb.w	r3, [r9]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d0a3      	beq.n	80116c4 <__strftime.isra.0+0x208>
 801177c:	4633      	mov	r3, r6
 801177e:	464a      	mov	r2, r9
 8011780:	1b29      	subs	r1, r5, r4
 8011782:	1938      	adds	r0, r7, r4
 8011784:	f7ff fe9a 	bl	80114bc <__strftime.isra.0>
 8011788:	2800      	cmp	r0, #0
 801178a:	f77f aec9 	ble.w	8011520 <__strftime.isra.0+0x64>
 801178e:	4404      	add	r4, r0
 8011790:	e798      	b.n	80116c4 <__strftime.isra.0+0x208>
 8011792:	4b6f      	ldr	r3, [pc, #444]	; (8011950 <__strftime.isra.0+0x494>)
 8011794:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8011798:	e7e9      	b.n	801176e <__strftime.isra.0+0x2b2>
 801179a:	4b6d      	ldr	r3, [pc, #436]	; (8011950 <__strftime.isra.0+0x494>)
 801179c:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80117a0:	e7e5      	b.n	801176e <__strftime.isra.0+0x2b2>
 80117a2:	4b6b      	ldr	r3, [pc, #428]	; (8011950 <__strftime.isra.0+0x494>)
 80117a4:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80117a8:	e7e1      	b.n	801176e <__strftime.isra.0+0x2b2>
 80117aa:	496a      	ldr	r1, [pc, #424]	; (8011954 <__strftime.isra.0+0x498>)
 80117ac:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80117b0:	458a      	cmp	sl, r1
 80117b2:	bfac      	ite	ge
 80117b4:	2100      	movge	r1, #0
 80117b6:	2101      	movlt	r1, #1
 80117b8:	f1ba 0f00 	cmp.w	sl, #0
 80117bc:	db11      	blt.n	80117e2 <__strftime.isra.0+0x326>
 80117be:	2064      	movs	r0, #100	; 0x64
 80117c0:	fb9a f0f0 	sdiv	r0, sl, r0
 80117c4:	3013      	adds	r0, #19
 80117c6:	f1bb 0f00 	cmp.w	fp, #0
 80117ca:	d014      	beq.n	80117f6 <__strftime.isra.0+0x33a>
 80117cc:	2863      	cmp	r0, #99	; 0x63
 80117ce:	dd27      	ble.n	8011820 <__strftime.isra.0+0x364>
 80117d0:	4b61      	ldr	r3, [pc, #388]	; (8011958 <__strftime.isra.0+0x49c>)
 80117d2:	4a62      	ldr	r2, [pc, #392]	; (801195c <__strftime.isra.0+0x4a0>)
 80117d4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80117d8:	bf18      	it	ne
 80117da:	461a      	movne	r2, r3
 80117dc:	f8df c180 	ldr.w	ip, [pc, #384]	; 8011960 <__strftime.isra.0+0x4a4>
 80117e0:	e00c      	b.n	80117fc <__strftime.isra.0+0x340>
 80117e2:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80117e6:	9103      	str	r1, [sp, #12]
 80117e8:	f007 fedc 	bl	80195a4 <abs>
 80117ec:	2264      	movs	r2, #100	; 0x64
 80117ee:	9903      	ldr	r1, [sp, #12]
 80117f0:	fb90 f0f2 	sdiv	r0, r0, r2
 80117f4:	e7e7      	b.n	80117c6 <__strftime.isra.0+0x30a>
 80117f6:	4a58      	ldr	r2, [pc, #352]	; (8011958 <__strftime.isra.0+0x49c>)
 80117f8:	f8df c168 	ldr.w	ip, [pc, #360]	; 8011964 <__strftime.isra.0+0x4a8>
 80117fc:	4b5a      	ldr	r3, [pc, #360]	; (8011968 <__strftime.isra.0+0x4ac>)
 80117fe:	9001      	str	r0, [sp, #4]
 8011800:	f1b9 0f02 	cmp.w	r9, #2
 8011804:	bf2c      	ite	cs
 8011806:	ebc1 0109 	rsbcs	r1, r1, r9
 801180a:	f1c1 0102 	rsbcc	r1, r1, #2
 801180e:	9100      	str	r1, [sp, #0]
 8011810:	4950      	ldr	r1, [pc, #320]	; (8011954 <__strftime.isra.0+0x498>)
 8011812:	458a      	cmp	sl, r1
 8011814:	bfa8      	it	ge
 8011816:	4613      	movge	r3, r2
 8011818:	4662      	mov	r2, ip
 801181a:	1b29      	subs	r1, r5, r4
 801181c:	1938      	adds	r0, r7, r4
 801181e:	e029      	b.n	8011874 <__strftime.isra.0+0x3b8>
 8011820:	4a4d      	ldr	r2, [pc, #308]	; (8011958 <__strftime.isra.0+0x49c>)
 8011822:	e7db      	b.n	80117dc <__strftime.isra.0+0x320>
 8011824:	4951      	ldr	r1, [pc, #324]	; (801196c <__strftime.isra.0+0x4b0>)
 8011826:	4a52      	ldr	r2, [pc, #328]	; (8011970 <__strftime.isra.0+0x4b4>)
 8011828:	68f3      	ldr	r3, [r6, #12]
 801182a:	2864      	cmp	r0, #100	; 0x64
 801182c:	bf08      	it	eq
 801182e:	460a      	moveq	r2, r1
 8011830:	1b29      	subs	r1, r5, r4
 8011832:	1938      	adds	r0, r7, r4
 8011834:	f001 fa44 	bl	8012cc0 <sniprintf>
 8011838:	2800      	cmp	r0, #0
 801183a:	f6ff ae71 	blt.w	8011520 <__strftime.isra.0+0x64>
 801183e:	4404      	add	r4, r0
 8011840:	42a5      	cmp	r5, r4
 8011842:	f63f af3f 	bhi.w	80116c4 <__strftime.isra.0+0x208>
 8011846:	e66b      	b.n	8011520 <__strftime.isra.0+0x64>
 8011848:	6970      	ldr	r0, [r6, #20]
 801184a:	6933      	ldr	r3, [r6, #16]
 801184c:	68f2      	ldr	r2, [r6, #12]
 801184e:	2800      	cmp	r0, #0
 8011850:	eb07 0904 	add.w	r9, r7, r4
 8011854:	eba5 0a04 	sub.w	sl, r5, r4
 8011858:	f103 0b01 	add.w	fp, r3, #1
 801185c:	db0d      	blt.n	801187a <__strftime.isra.0+0x3be>
 801185e:	2164      	movs	r1, #100	; 0x64
 8011860:	fb90 fcf1 	sdiv	ip, r0, r1
 8011864:	fb01 001c 	mls	r0, r1, ip, r0
 8011868:	e9cd 2000 	strd	r2, r0, [sp]
 801186c:	4a41      	ldr	r2, [pc, #260]	; (8011974 <__strftime.isra.0+0x4b8>)
 801186e:	465b      	mov	r3, fp
 8011870:	4651      	mov	r1, sl
 8011872:	4648      	mov	r0, r9
 8011874:	f001 fa24 	bl	8012cc0 <sniprintf>
 8011878:	e7de      	b.n	8011838 <__strftime.isra.0+0x37c>
 801187a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801187e:	9203      	str	r2, [sp, #12]
 8011880:	f007 fe90 	bl	80195a4 <abs>
 8011884:	2164      	movs	r1, #100	; 0x64
 8011886:	9a03      	ldr	r2, [sp, #12]
 8011888:	fb90 fcf1 	sdiv	ip, r0, r1
 801188c:	fb0c 0011 	mls	r0, ip, r1, r0
 8011890:	e7ea      	b.n	8011868 <__strftime.isra.0+0x3ac>
 8011892:	2225      	movs	r2, #37	; 0x25
 8011894:	f88d 2018 	strb.w	r2, [sp, #24]
 8011898:	f1bb 0f00 	cmp.w	fp, #0
 801189c:	d011      	beq.n	80118c2 <__strftime.isra.0+0x406>
 801189e:	f1b9 0f06 	cmp.w	r9, #6
 80118a2:	bf38      	it	cc
 80118a4:	f04f 0906 	movcc.w	r9, #6
 80118a8:	f1b9 0306 	subs.w	r3, r9, #6
 80118ac:	f88d b019 	strb.w	fp, [sp, #25]
 80118b0:	d10c      	bne.n	80118cc <__strftime.isra.0+0x410>
 80118b2:	f10d 001a 	add.w	r0, sp, #26
 80118b6:	4930      	ldr	r1, [pc, #192]	; (8011978 <__strftime.isra.0+0x4bc>)
 80118b8:	f007 fe19 	bl	80194ee <strcpy>
 80118bc:	4633      	mov	r3, r6
 80118be:	aa06      	add	r2, sp, #24
 80118c0:	e75e      	b.n	8011780 <__strftime.isra.0+0x2c4>
 80118c2:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 80118c6:	f04f 090a 	mov.w	r9, #10
 80118ca:	e7ed      	b.n	80118a8 <__strftime.isra.0+0x3ec>
 80118cc:	4a2b      	ldr	r2, [pc, #172]	; (801197c <__strftime.isra.0+0x4c0>)
 80118ce:	211e      	movs	r1, #30
 80118d0:	f10d 001a 	add.w	r0, sp, #26
 80118d4:	f001 f9f4 	bl	8012cc0 <sniprintf>
 80118d8:	2800      	cmp	r0, #0
 80118da:	ddea      	ble.n	80118b2 <__strftime.isra.0+0x3f6>
 80118dc:	f10d 031a 	add.w	r3, sp, #26
 80118e0:	4418      	add	r0, r3
 80118e2:	e7e8      	b.n	80118b6 <__strftime.isra.0+0x3fa>
 80118e4:	4630      	mov	r0, r6
 80118e6:	f7ff fd87 	bl	80113f8 <iso_year_adjust>
 80118ea:	4681      	mov	r9, r0
 80118ec:	6970      	ldr	r0, [r6, #20]
 80118ee:	2800      	cmp	r0, #0
 80118f0:	db11      	blt.n	8011916 <__strftime.isra.0+0x45a>
 80118f2:	2364      	movs	r3, #100	; 0x64
 80118f4:	fb90 f2f3 	sdiv	r2, r0, r3
 80118f8:	fb03 0012 	mls	r0, r3, r2, r0
 80118fc:	2264      	movs	r2, #100	; 0x64
 80118fe:	4481      	add	r9, r0
 8011900:	fb99 f3f2 	sdiv	r3, r9, r2
 8011904:	fb02 9913 	mls	r9, r2, r3, r9
 8011908:	4491      	add	r9, r2
 801190a:	fbb9 f3f2 	udiv	r3, r9, r2
 801190e:	fb02 9313 	mls	r3, r2, r3, r9
 8011912:	4a16      	ldr	r2, [pc, #88]	; (801196c <__strftime.isra.0+0x4b0>)
 8011914:	e78c      	b.n	8011830 <__strftime.isra.0+0x374>
 8011916:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801191a:	f007 fe43 	bl	80195a4 <abs>
 801191e:	2364      	movs	r3, #100	; 0x64
 8011920:	f1b9 0f00 	cmp.w	r9, #0
 8011924:	fb90 f2f3 	sdiv	r2, r0, r3
 8011928:	fb02 0013 	mls	r0, r2, r3, r0
 801192c:	da07      	bge.n	801193e <__strftime.isra.0+0x482>
 801192e:	6972      	ldr	r2, [r6, #20]
 8011930:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8011934:	429a      	cmp	r2, r3
 8011936:	bfb8      	it	lt
 8011938:	f04f 0901 	movlt.w	r9, #1
 801193c:	e7de      	b.n	80118fc <__strftime.isra.0+0x440>
 801193e:	d0dd      	beq.n	80118fc <__strftime.isra.0+0x440>
 8011940:	6972      	ldr	r2, [r6, #20]
 8011942:	4b04      	ldr	r3, [pc, #16]	; (8011954 <__strftime.isra.0+0x498>)
 8011944:	429a      	cmp	r2, r3
 8011946:	bfb8      	it	lt
 8011948:	f04f 39ff 	movlt.w	r9, #4294967295	; 0xffffffff
 801194c:	e7d6      	b.n	80118fc <__strftime.isra.0+0x440>
 801194e:	bf00      	nop
 8011950:	0801a94c 	.word	0x0801a94c
 8011954:	fffff894 	.word	0xfffff894
 8011958:	0801b143 	.word	0x0801b143
 801195c:	0801cca0 	.word	0x0801cca0
 8011960:	0801cc98 	.word	0x0801cc98
 8011964:	0801cc91 	.word	0x0801cc91
 8011968:	0801ce79 	.word	0x0801ce79
 801196c:	0801ccb0 	.word	0x0801ccb0
 8011970:	0801cca2 	.word	0x0801cca2
 8011974:	0801cca6 	.word	0x0801cca6
 8011978:	0801ccb9 	.word	0x0801ccb9
 801197c:	0801ccb5 	.word	0x0801ccb5
 8011980:	6971      	ldr	r1, [r6, #20]
 8011982:	4ab5      	ldr	r2, [pc, #724]	; (8011c58 <__strftime.isra.0+0x79c>)
 8011984:	4291      	cmp	r1, r2
 8011986:	bfac      	ite	ge
 8011988:	2300      	movge	r3, #0
 801198a:	2301      	movlt	r3, #1
 801198c:	4630      	mov	r0, r6
 801198e:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8011992:	f7ff fd31 	bl	80113f8 <iso_year_adjust>
 8011996:	9904      	ldr	r1, [sp, #16]
 8011998:	2900      	cmp	r1, #0
 801199a:	4682      	mov	sl, r0
 801199c:	db2c      	blt.n	80119f8 <__strftime.isra.0+0x53c>
 801199e:	2264      	movs	r2, #100	; 0x64
 80119a0:	fb91 f2f2 	sdiv	r2, r1, r2
 80119a4:	3213      	adds	r2, #19
 80119a6:	6970      	ldr	r0, [r6, #20]
 80119a8:	2800      	cmp	r0, #0
 80119aa:	db2f      	blt.n	8011a0c <__strftime.isra.0+0x550>
 80119ac:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80119b0:	fb90 fefc 	sdiv	lr, r0, ip
 80119b4:	fb0c 001e 	mls	r0, ip, lr, r0
 80119b8:	f1ba 0f00 	cmp.w	sl, #0
 80119bc:	da35      	bge.n	8011a2a <__strftime.isra.0+0x56e>
 80119be:	6971      	ldr	r1, [r6, #20]
 80119c0:	4ba6      	ldr	r3, [pc, #664]	; (8011c5c <__strftime.isra.0+0x7a0>)
 80119c2:	4299      	cmp	r1, r3
 80119c4:	db3c      	blt.n	8011a40 <__strftime.isra.0+0x584>
 80119c6:	4482      	add	sl, r0
 80119c8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80119cc:	d13d      	bne.n	8011a4a <__strftime.isra.0+0x58e>
 80119ce:	3a01      	subs	r2, #1
 80119d0:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80119d4:	9b03      	ldr	r3, [sp, #12]
 80119d6:	2064      	movs	r0, #100	; 0x64
 80119d8:	fb00 aa02 	mla	sl, r0, r2, sl
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f000 81ab 	beq.w	8011d38 <__strftime.isra.0+0x87c>
 80119e2:	222d      	movs	r2, #45	; 0x2d
 80119e4:	f88d 2018 	strb.w	r2, [sp, #24]
 80119e8:	f1b9 0f00 	cmp.w	r9, #0
 80119ec:	d001      	beq.n	80119f2 <__strftime.isra.0+0x536>
 80119ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80119f2:	f10d 0219 	add.w	r2, sp, #25
 80119f6:	e1aa      	b.n	8011d4e <__strftime.isra.0+0x892>
 80119f8:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80119fc:	9104      	str	r1, [sp, #16]
 80119fe:	f007 fdd1 	bl	80195a4 <abs>
 8011a02:	2264      	movs	r2, #100	; 0x64
 8011a04:	9904      	ldr	r1, [sp, #16]
 8011a06:	fb90 f2f2 	sdiv	r2, r0, r2
 8011a0a:	e7cc      	b.n	80119a6 <__strftime.isra.0+0x4ea>
 8011a0c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8011a10:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8011a14:	f007 fdc6 	bl	80195a4 <abs>
 8011a18:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8011a1c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8011a20:	fb90 fefc 	sdiv	lr, r0, ip
 8011a24:	fb0e 001c 	mls	r0, lr, ip, r0
 8011a28:	e7c6      	b.n	80119b8 <__strftime.isra.0+0x4fc>
 8011a2a:	d0cc      	beq.n	80119c6 <__strftime.isra.0+0x50a>
 8011a2c:	4b8a      	ldr	r3, [pc, #552]	; (8011c58 <__strftime.isra.0+0x79c>)
 8011a2e:	4299      	cmp	r1, r3
 8011a30:	bfb4      	ite	lt
 8011a32:	2301      	movlt	r3, #1
 8011a34:	2300      	movge	r3, #0
 8011a36:	9303      	str	r3, [sp, #12]
 8011a38:	bfb8      	it	lt
 8011a3a:	f04f 3aff 	movlt.w	sl, #4294967295	; 0xffffffff
 8011a3e:	e7c2      	b.n	80119c6 <__strftime.isra.0+0x50a>
 8011a40:	f04f 0a01 	mov.w	sl, #1
 8011a44:	f8cd a00c 	str.w	sl, [sp, #12]
 8011a48:	e7bd      	b.n	80119c6 <__strftime.isra.0+0x50a>
 8011a4a:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8011a4e:	bf04      	itt	eq
 8011a50:	3201      	addeq	r2, #1
 8011a52:	f04f 0a00 	moveq.w	sl, #0
 8011a56:	e7bd      	b.n	80119d4 <__strftime.isra.0+0x518>
 8011a58:	4981      	ldr	r1, [pc, #516]	; (8011c60 <__strftime.isra.0+0x7a4>)
 8011a5a:	4a82      	ldr	r2, [pc, #520]	; (8011c64 <__strftime.isra.0+0x7a8>)
 8011a5c:	68b3      	ldr	r3, [r6, #8]
 8011a5e:	286b      	cmp	r0, #107	; 0x6b
 8011a60:	bf08      	it	eq
 8011a62:	460a      	moveq	r2, r1
 8011a64:	e6e4      	b.n	8011830 <__strftime.isra.0+0x374>
 8011a66:	68b3      	ldr	r3, [r6, #8]
 8011a68:	b163      	cbz	r3, 8011a84 <__strftime.isra.0+0x5c8>
 8011a6a:	2b0c      	cmp	r3, #12
 8011a6c:	d004      	beq.n	8011a78 <__strftime.isra.0+0x5bc>
 8011a6e:	210c      	movs	r1, #12
 8011a70:	fb93 f2f1 	sdiv	r2, r3, r1
 8011a74:	fb01 3312 	mls	r3, r1, r2, r3
 8011a78:	497a      	ldr	r1, [pc, #488]	; (8011c64 <__strftime.isra.0+0x7a8>)
 8011a7a:	4a79      	ldr	r2, [pc, #484]	; (8011c60 <__strftime.isra.0+0x7a4>)
 8011a7c:	2849      	cmp	r0, #73	; 0x49
 8011a7e:	bf08      	it	eq
 8011a80:	460a      	moveq	r2, r1
 8011a82:	e6d5      	b.n	8011830 <__strftime.isra.0+0x374>
 8011a84:	230c      	movs	r3, #12
 8011a86:	e7f7      	b.n	8011a78 <__strftime.isra.0+0x5bc>
 8011a88:	69f3      	ldr	r3, [r6, #28]
 8011a8a:	4a77      	ldr	r2, [pc, #476]	; (8011c68 <__strftime.isra.0+0x7ac>)
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	e6cf      	b.n	8011830 <__strftime.isra.0+0x374>
 8011a90:	6933      	ldr	r3, [r6, #16]
 8011a92:	3301      	adds	r3, #1
 8011a94:	e73d      	b.n	8011912 <__strftime.isra.0+0x456>
 8011a96:	6873      	ldr	r3, [r6, #4]
 8011a98:	e73b      	b.n	8011912 <__strftime.isra.0+0x456>
 8011a9a:	1e6b      	subs	r3, r5, #1
 8011a9c:	429c      	cmp	r4, r3
 8011a9e:	f4bf ad3f 	bcs.w	8011520 <__strftime.isra.0+0x64>
 8011aa2:	230a      	movs	r3, #10
 8011aa4:	553b      	strb	r3, [r7, r4]
 8011aa6:	3401      	adds	r4, #1
 8011aa8:	e60c      	b.n	80116c4 <__strftime.isra.0+0x208>
 8011aaa:	68b3      	ldr	r3, [r6, #8]
 8011aac:	2b0b      	cmp	r3, #11
 8011aae:	4b6f      	ldr	r3, [pc, #444]	; (8011c6c <__strftime.isra.0+0x7b0>)
 8011ab0:	bfd4      	ite	le
 8011ab2:	2200      	movle	r2, #0
 8011ab4:	2201      	movgt	r2, #1
 8011ab6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011aba:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8011abe:	4648      	mov	r0, r9
 8011ac0:	f7ef fc81 	bl	80013c6 <strlen>
 8011ac4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8011ac8:	4420      	add	r0, r4
 8011aca:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011ace:	42a0      	cmp	r0, r4
 8011ad0:	f43f adf8 	beq.w	80116c4 <__strftime.isra.0+0x208>
 8011ad4:	45a4      	cmp	ip, r4
 8011ad6:	f67f ad23 	bls.w	8011520 <__strftime.isra.0+0x64>
 8011ada:	f898 1000 	ldrb.w	r1, [r8]
 8011ade:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8011ae2:	2950      	cmp	r1, #80	; 0x50
 8011ae4:	d107      	bne.n	8011af6 <__strftime.isra.0+0x63a>
 8011ae6:	4962      	ldr	r1, [pc, #392]	; (8011c70 <__strftime.isra.0+0x7b4>)
 8011ae8:	5cc9      	ldrb	r1, [r1, r3]
 8011aea:	f001 0103 	and.w	r1, r1, #3
 8011aee:	2901      	cmp	r1, #1
 8011af0:	bf08      	it	eq
 8011af2:	3320      	addeq	r3, #32
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	553b      	strb	r3, [r7, r4]
 8011af8:	3401      	adds	r4, #1
 8011afa:	e7e8      	b.n	8011ace <__strftime.isra.0+0x612>
 8011afc:	6873      	ldr	r3, [r6, #4]
 8011afe:	9300      	str	r3, [sp, #0]
 8011b00:	4a5c      	ldr	r2, [pc, #368]	; (8011c74 <__strftime.isra.0+0x7b8>)
 8011b02:	68b3      	ldr	r3, [r6, #8]
 8011b04:	1b29      	subs	r1, r5, r4
 8011b06:	1938      	adds	r0, r7, r4
 8011b08:	f001 f8da 	bl	8012cc0 <sniprintf>
 8011b0c:	e694      	b.n	8011838 <__strftime.isra.0+0x37c>
 8011b0e:	6a33      	ldr	r3, [r6, #32]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	db7a      	blt.n	8011c0a <__strftime.isra.0+0x74e>
 8011b14:	f000 fa22 	bl	8011f5c <__tz_lock>
 8011b18:	9b02      	ldr	r3, [sp, #8]
 8011b1a:	b90b      	cbnz	r3, 8011b20 <__strftime.isra.0+0x664>
 8011b1c:	f000 fa2a 	bl	8011f74 <_tzset_unlocked>
 8011b20:	f000 fe28 	bl	8012774 <__gettzinfo>
 8011b24:	6a33      	ldr	r3, [r6, #32]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	bfd4      	ite	le
 8011b2a:	2200      	movle	r2, #0
 8011b2c:	2201      	movgt	r2, #1
 8011b2e:	2328      	movs	r3, #40	; 0x28
 8011b30:	fb02 3303 	mla	r3, r2, r3, r3
 8011b34:	58c3      	ldr	r3, [r0, r3]
 8011b36:	f1c3 0900 	rsb	r9, r3, #0
 8011b3a:	f000 fa15 	bl	8011f68 <__tz_unlock>
 8011b3e:	2301      	movs	r3, #1
 8011b40:	9302      	str	r3, [sp, #8]
 8011b42:	6972      	ldr	r2, [r6, #20]
 8011b44:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8011b48:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8011b4c:	f16c 0c00 	sbc.w	ip, ip, #0
 8011b50:	f1bc 0f00 	cmp.w	ip, #0
 8011b54:	eba5 0104 	sub.w	r1, r5, r4
 8011b58:	eb07 0004 	add.w	r0, r7, r4
 8011b5c:	da02      	bge.n	8011b64 <__strftime.isra.0+0x6a8>
 8011b5e:	3303      	adds	r3, #3
 8011b60:	f14c 0c00 	adc.w	ip, ip, #0
 8011b64:	089b      	lsrs	r3, r3, #2
 8011b66:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8011b6a:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 8011b6e:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8011b72:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8011b76:	fb9a fefe 	sdiv	lr, sl, lr
 8011b7a:	ebb3 030e 	subs.w	r3, r3, lr
 8011b7e:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8011b82:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8011b86:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8011b8a:	fb9a fefe 	sdiv	lr, sl, lr
 8011b8e:	eb13 030e 	adds.w	r3, r3, lr
 8011b92:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8011b96:	3a46      	subs	r2, #70	; 0x46
 8011b98:	f240 1c6d 	movw	ip, #365	; 0x16d
 8011b9c:	fb0c f202 	mul.w	r2, ip, r2
 8011ba0:	189b      	adds	r3, r3, r2
 8011ba2:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8011ba6:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8011baa:	f04f 0c18 	mov.w	ip, #24
 8011bae:	eb13 030e 	adds.w	r3, r3, lr
 8011bb2:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8011bb6:	fba3 3e0c 	umull	r3, lr, r3, ip
 8011bba:	fb0c e202 	mla	r2, ip, r2, lr
 8011bbe:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8011bc2:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8011bc6:	eb13 030e 	adds.w	r3, r3, lr
 8011bca:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8011bce:	fba3 320c 	umull	r3, r2, r3, ip
 8011bd2:	fb0c 220e 	mla	r2, ip, lr, r2
 8011bd6:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8011bda:	eb13 030e 	adds.w	r3, r3, lr
 8011bde:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8011be2:	fba3 3e0c 	umull	r3, lr, r3, ip
 8011be6:	fb0c e202 	mla	r2, ip, r2, lr
 8011bea:	f8d6 e000 	ldr.w	lr, [r6]
 8011bee:	eb13 030e 	adds.w	r3, r3, lr
 8011bf2:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8011bf6:	ebb3 0309 	subs.w	r3, r3, r9
 8011bfa:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8011bfe:	e9cd 3200 	strd	r3, r2, [sp]
 8011c02:	4a1d      	ldr	r2, [pc, #116]	; (8011c78 <__strftime.isra.0+0x7bc>)
 8011c04:	f001 f85c 	bl	8012cc0 <sniprintf>
 8011c08:	e616      	b.n	8011838 <__strftime.isra.0+0x37c>
 8011c0a:	f04f 0900 	mov.w	r9, #0
 8011c0e:	e798      	b.n	8011b42 <__strftime.isra.0+0x686>
 8011c10:	6833      	ldr	r3, [r6, #0]
 8011c12:	e67e      	b.n	8011912 <__strftime.isra.0+0x456>
 8011c14:	1e6b      	subs	r3, r5, #1
 8011c16:	429c      	cmp	r4, r3
 8011c18:	f4bf ac82 	bcs.w	8011520 <__strftime.isra.0+0x64>
 8011c1c:	2309      	movs	r3, #9
 8011c1e:	e741      	b.n	8011aa4 <__strftime.isra.0+0x5e8>
 8011c20:	6833      	ldr	r3, [r6, #0]
 8011c22:	9301      	str	r3, [sp, #4]
 8011c24:	6873      	ldr	r3, [r6, #4]
 8011c26:	9300      	str	r3, [sp, #0]
 8011c28:	4a14      	ldr	r2, [pc, #80]	; (8011c7c <__strftime.isra.0+0x7c0>)
 8011c2a:	68b3      	ldr	r3, [r6, #8]
 8011c2c:	e5f5      	b.n	801181a <__strftime.isra.0+0x35e>
 8011c2e:	1e6b      	subs	r3, r5, #1
 8011c30:	429c      	cmp	r4, r3
 8011c32:	f4bf ac75 	bcs.w	8011520 <__strftime.isra.0+0x64>
 8011c36:	69b3      	ldr	r3, [r6, #24]
 8011c38:	1c62      	adds	r2, r4, #1
 8011c3a:	b91b      	cbnz	r3, 8011c44 <__strftime.isra.0+0x788>
 8011c3c:	2337      	movs	r3, #55	; 0x37
 8011c3e:	553b      	strb	r3, [r7, r4]
 8011c40:	4614      	mov	r4, r2
 8011c42:	e53f      	b.n	80116c4 <__strftime.isra.0+0x208>
 8011c44:	3330      	adds	r3, #48	; 0x30
 8011c46:	e7fa      	b.n	8011c3e <__strftime.isra.0+0x782>
 8011c48:	69f3      	ldr	r3, [r6, #28]
 8011c4a:	69b2      	ldr	r2, [r6, #24]
 8011c4c:	3307      	adds	r3, #7
 8011c4e:	1a9b      	subs	r3, r3, r2
 8011c50:	2207      	movs	r2, #7
 8011c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c56:	e65c      	b.n	8011912 <__strftime.isra.0+0x456>
 8011c58:	fffff894 	.word	0xfffff894
 8011c5c:	fffff895 	.word	0xfffff895
 8011c60:	0801cca2 	.word	0x0801cca2
 8011c64:	0801ccb0 	.word	0x0801ccb0
 8011c68:	0801ccc5 	.word	0x0801ccc5
 8011c6c:	0801a94c 	.word	0x0801a94c
 8011c70:	0801cb91 	.word	0x0801cb91
 8011c74:	0801ccd4 	.word	0x0801ccd4
 8011c78:	0801ccca 	.word	0x0801ccca
 8011c7c:	0801cccf 	.word	0x0801cccf
 8011c80:	4630      	mov	r0, r6
 8011c82:	f7ff fbb9 	bl	80113f8 <iso_year_adjust>
 8011c86:	69b2      	ldr	r2, [r6, #24]
 8011c88:	b132      	cbz	r2, 8011c98 <__strftime.isra.0+0x7dc>
 8011c8a:	3a01      	subs	r2, #1
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	dc28      	bgt.n	8011ce2 <__strftime.isra.0+0x826>
 8011c90:	69f3      	ldr	r3, [r6, #28]
 8011c92:	d103      	bne.n	8011c9c <__strftime.isra.0+0x7e0>
 8011c94:	330a      	adds	r3, #10
 8011c96:	e7da      	b.n	8011c4e <__strftime.isra.0+0x792>
 8011c98:	2206      	movs	r2, #6
 8011c9a:	e7f7      	b.n	8011c8c <__strftime.isra.0+0x7d0>
 8011c9c:	6971      	ldr	r1, [r6, #20]
 8011c9e:	2900      	cmp	r1, #0
 8011ca0:	eba2 0203 	sub.w	r2, r2, r3
 8011ca4:	f240 736b 	movw	r3, #1899	; 0x76b
 8011ca8:	bfa8      	it	ge
 8011caa:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8011cae:	440b      	add	r3, r1
 8011cb0:	0799      	lsls	r1, r3, #30
 8011cb2:	d105      	bne.n	8011cc0 <__strftime.isra.0+0x804>
 8011cb4:	2064      	movs	r0, #100	; 0x64
 8011cb6:	fb93 f1f0 	sdiv	r1, r3, r0
 8011cba:	fb00 3111 	mls	r1, r0, r1, r3
 8011cbe:	b971      	cbnz	r1, 8011cde <__strftime.isra.0+0x822>
 8011cc0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011cc4:	fb93 f0f1 	sdiv	r0, r3, r1
 8011cc8:	fb01 3310 	mls	r3, r1, r0, r3
 8011ccc:	fab3 f383 	clz	r3, r3
 8011cd0:	095b      	lsrs	r3, r3, #5
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	2b05      	cmp	r3, #5
 8011cd6:	bfb4      	ite	lt
 8011cd8:	2335      	movlt	r3, #53	; 0x35
 8011cda:	2334      	movge	r3, #52	; 0x34
 8011cdc:	e619      	b.n	8011912 <__strftime.isra.0+0x456>
 8011cde:	2301      	movs	r3, #1
 8011ce0:	e7f7      	b.n	8011cd2 <__strftime.isra.0+0x816>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e615      	b.n	8011912 <__strftime.isra.0+0x456>
 8011ce6:	1e6b      	subs	r3, r5, #1
 8011ce8:	429c      	cmp	r4, r3
 8011cea:	f4bf ac19 	bcs.w	8011520 <__strftime.isra.0+0x64>
 8011cee:	69b3      	ldr	r3, [r6, #24]
 8011cf0:	3330      	adds	r3, #48	; 0x30
 8011cf2:	e6d7      	b.n	8011aa4 <__strftime.isra.0+0x5e8>
 8011cf4:	69b2      	ldr	r2, [r6, #24]
 8011cf6:	b11a      	cbz	r2, 8011d00 <__strftime.isra.0+0x844>
 8011cf8:	3a01      	subs	r2, #1
 8011cfa:	69f3      	ldr	r3, [r6, #28]
 8011cfc:	3307      	adds	r3, #7
 8011cfe:	e7a6      	b.n	8011c4e <__strftime.isra.0+0x792>
 8011d00:	2206      	movs	r2, #6
 8011d02:	e7fa      	b.n	8011cfa <__strftime.isra.0+0x83e>
 8011d04:	6970      	ldr	r0, [r6, #20]
 8011d06:	2800      	cmp	r0, #0
 8011d08:	db05      	blt.n	8011d16 <__strftime.isra.0+0x85a>
 8011d0a:	2364      	movs	r3, #100	; 0x64
 8011d0c:	fb90 f2f3 	sdiv	r2, r0, r3
 8011d10:	fb02 0313 	mls	r3, r2, r3, r0
 8011d14:	e5fd      	b.n	8011912 <__strftime.isra.0+0x456>
 8011d16:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8011d1a:	f007 fc43 	bl	80195a4 <abs>
 8011d1e:	e7f4      	b.n	8011d0a <__strftime.isra.0+0x84e>
 8011d20:	6972      	ldr	r2, [r6, #20]
 8011d22:	494c      	ldr	r1, [pc, #304]	; (8011e54 <__strftime.isra.0+0x998>)
 8011d24:	428a      	cmp	r2, r1
 8011d26:	da05      	bge.n	8011d34 <__strftime.isra.0+0x878>
 8011d28:	202d      	movs	r0, #45	; 0x2d
 8011d2a:	f88d 0018 	strb.w	r0, [sp, #24]
 8011d2e:	eba1 0a02 	sub.w	sl, r1, r2
 8011d32:	e659      	b.n	80119e8 <__strftime.isra.0+0x52c>
 8011d34:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8011d38:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8011d3c:	d106      	bne.n	8011d4c <__strftime.isra.0+0x890>
 8011d3e:	f242 720f 	movw	r2, #9999	; 0x270f
 8011d42:	4592      	cmp	sl, r2
 8011d44:	d902      	bls.n	8011d4c <__strftime.isra.0+0x890>
 8011d46:	f88d b018 	strb.w	fp, [sp, #24]
 8011d4a:	e64d      	b.n	80119e8 <__strftime.isra.0+0x52c>
 8011d4c:	aa06      	add	r2, sp, #24
 8011d4e:	2125      	movs	r1, #37	; 0x25
 8011d50:	7011      	strb	r1, [r2, #0]
 8011d52:	f1bb 0f00 	cmp.w	fp, #0
 8011d56:	d108      	bne.n	8011d6a <__strftime.isra.0+0x8ae>
 8011d58:	1c50      	adds	r0, r2, #1
 8011d5a:	493f      	ldr	r1, [pc, #252]	; (8011e58 <__strftime.isra.0+0x99c>)
 8011d5c:	f007 fbc7 	bl	80194ee <strcpy>
 8011d60:	f8cd a000 	str.w	sl, [sp]
 8011d64:	464b      	mov	r3, r9
 8011d66:	aa06      	add	r2, sp, #24
 8011d68:	e6cc      	b.n	8011b04 <__strftime.isra.0+0x648>
 8011d6a:	2330      	movs	r3, #48	; 0x30
 8011d6c:	1c90      	adds	r0, r2, #2
 8011d6e:	7053      	strb	r3, [r2, #1]
 8011d70:	e7f3      	b.n	8011d5a <__strftime.isra.0+0x89e>
 8011d72:	6a33      	ldr	r3, [r6, #32]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	f6ff aca5 	blt.w	80116c4 <__strftime.isra.0+0x208>
 8011d7a:	f000 f8ef 	bl	8011f5c <__tz_lock>
 8011d7e:	9b02      	ldr	r3, [sp, #8]
 8011d80:	b90b      	cbnz	r3, 8011d86 <__strftime.isra.0+0x8ca>
 8011d82:	f000 f8f7 	bl	8011f74 <_tzset_unlocked>
 8011d86:	f000 fcf5 	bl	8012774 <__gettzinfo>
 8011d8a:	6a33      	ldr	r3, [r6, #32]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	bfd4      	ite	le
 8011d90:	2200      	movle	r2, #0
 8011d92:	2201      	movgt	r2, #1
 8011d94:	2328      	movs	r3, #40	; 0x28
 8011d96:	fb02 3303 	mla	r3, r2, r3, r3
 8011d9a:	eb07 0a04 	add.w	sl, r7, r4
 8011d9e:	58c3      	ldr	r3, [r0, r3]
 8011da0:	f1c3 0900 	rsb	r9, r3, #0
 8011da4:	f000 f8e0 	bl	8011f68 <__tz_unlock>
 8011da8:	233c      	movs	r3, #60	; 0x3c
 8011daa:	fb99 f0f3 	sdiv	r0, r9, r3
 8011dae:	f007 fc39 	bl	8019624 <labs>
 8011db2:	233c      	movs	r3, #60	; 0x3c
 8011db4:	eba5 0b04 	sub.w	fp, r5, r4
 8011db8:	fb90 f2f3 	sdiv	r2, r0, r3
 8011dbc:	fb02 0013 	mls	r0, r2, r3, r0
 8011dc0:	9000      	str	r0, [sp, #0]
 8011dc2:	4a26      	ldr	r2, [pc, #152]	; (8011e5c <__strftime.isra.0+0x9a0>)
 8011dc4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011dc8:	4659      	mov	r1, fp
 8011dca:	4650      	mov	r0, sl
 8011dcc:	fb99 f3f3 	sdiv	r3, r9, r3
 8011dd0:	f000 ff76 	bl	8012cc0 <sniprintf>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	f6ff aba3 	blt.w	8011520 <__strftime.isra.0+0x64>
 8011dda:	4404      	add	r4, r0
 8011ddc:	42a5      	cmp	r5, r4
 8011dde:	f67f ab9f 	bls.w	8011520 <__strftime.isra.0+0x64>
 8011de2:	2301      	movs	r3, #1
 8011de4:	9302      	str	r3, [sp, #8]
 8011de6:	e46d      	b.n	80116c4 <__strftime.isra.0+0x208>
 8011de8:	6a33      	ldr	r3, [r6, #32]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	f6ff ac6a 	blt.w	80116c4 <__strftime.isra.0+0x208>
 8011df0:	f000 f8b4 	bl	8011f5c <__tz_lock>
 8011df4:	9b02      	ldr	r3, [sp, #8]
 8011df6:	b90b      	cbnz	r3, 8011dfc <__strftime.isra.0+0x940>
 8011df8:	f000 f8bc 	bl	8011f74 <_tzset_unlocked>
 8011dfc:	6a33      	ldr	r3, [r6, #32]
 8011dfe:	4a18      	ldr	r2, [pc, #96]	; (8011e60 <__strftime.isra.0+0x9a4>)
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	bfd4      	ite	le
 8011e04:	2300      	movle	r3, #0
 8011e06:	2301      	movgt	r3, #1
 8011e08:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8011e0c:	4648      	mov	r0, r9
 8011e0e:	f7ef fada 	bl	80013c6 <strlen>
 8011e12:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011e16:	4420      	add	r0, r4
 8011e18:	1e6b      	subs	r3, r5, #1
 8011e1a:	42a0      	cmp	r0, r4
 8011e1c:	d102      	bne.n	8011e24 <__strftime.isra.0+0x968>
 8011e1e:	f000 f8a3 	bl	8011f68 <__tz_unlock>
 8011e22:	e7de      	b.n	8011de2 <__strftime.isra.0+0x926>
 8011e24:	42a3      	cmp	r3, r4
 8011e26:	d904      	bls.n	8011e32 <__strftime.isra.0+0x976>
 8011e28:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8011e2c:	553a      	strb	r2, [r7, r4]
 8011e2e:	3401      	adds	r4, #1
 8011e30:	e7f3      	b.n	8011e1a <__strftime.isra.0+0x95e>
 8011e32:	f000 f899 	bl	8011f68 <__tz_unlock>
 8011e36:	f7ff bb73 	b.w	8011520 <__strftime.isra.0+0x64>
 8011e3a:	1e6b      	subs	r3, r5, #1
 8011e3c:	429c      	cmp	r4, r3
 8011e3e:	f4bf ab6f 	bcs.w	8011520 <__strftime.isra.0+0x64>
 8011e42:	2325      	movs	r3, #37	; 0x25
 8011e44:	e62e      	b.n	8011aa4 <__strftime.isra.0+0x5e8>
 8011e46:	b10d      	cbz	r5, 8011e4c <__strftime.isra.0+0x990>
 8011e48:	2300      	movs	r3, #0
 8011e4a:	553b      	strb	r3, [r7, r4]
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	b00f      	add	sp, #60	; 0x3c
 8011e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e54:	fffff894 	.word	0xfffff894
 8011e58:	0801ccc1 	.word	0x0801ccc1
 8011e5c:	0801ccde 	.word	0x0801ccde
 8011e60:	200002a4 	.word	0x200002a4

08011e64 <_strtoul_l.constprop.0>:
 8011e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e68:	4f36      	ldr	r7, [pc, #216]	; (8011f44 <_strtoul_l.constprop.0+0xe0>)
 8011e6a:	4686      	mov	lr, r0
 8011e6c:	460d      	mov	r5, r1
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e74:	5de6      	ldrb	r6, [r4, r7]
 8011e76:	f016 0608 	ands.w	r6, r6, #8
 8011e7a:	d1f8      	bne.n	8011e6e <_strtoul_l.constprop.0+0xa>
 8011e7c:	2c2d      	cmp	r4, #45	; 0x2d
 8011e7e:	d12f      	bne.n	8011ee0 <_strtoul_l.constprop.0+0x7c>
 8011e80:	782c      	ldrb	r4, [r5, #0]
 8011e82:	2601      	movs	r6, #1
 8011e84:	1c85      	adds	r5, r0, #2
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d057      	beq.n	8011f3a <_strtoul_l.constprop.0+0xd6>
 8011e8a:	2b10      	cmp	r3, #16
 8011e8c:	d109      	bne.n	8011ea2 <_strtoul_l.constprop.0+0x3e>
 8011e8e:	2c30      	cmp	r4, #48	; 0x30
 8011e90:	d107      	bne.n	8011ea2 <_strtoul_l.constprop.0+0x3e>
 8011e92:	7828      	ldrb	r0, [r5, #0]
 8011e94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011e98:	2858      	cmp	r0, #88	; 0x58
 8011e9a:	d149      	bne.n	8011f30 <_strtoul_l.constprop.0+0xcc>
 8011e9c:	786c      	ldrb	r4, [r5, #1]
 8011e9e:	2310      	movs	r3, #16
 8011ea0:	3502      	adds	r5, #2
 8011ea2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011ea6:	2700      	movs	r7, #0
 8011ea8:	fbb8 f8f3 	udiv	r8, r8, r3
 8011eac:	fb03 f908 	mul.w	r9, r3, r8
 8011eb0:	ea6f 0909 	mvn.w	r9, r9
 8011eb4:	4638      	mov	r0, r7
 8011eb6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011eba:	f1bc 0f09 	cmp.w	ip, #9
 8011ebe:	d814      	bhi.n	8011eea <_strtoul_l.constprop.0+0x86>
 8011ec0:	4664      	mov	r4, ip
 8011ec2:	42a3      	cmp	r3, r4
 8011ec4:	dd22      	ble.n	8011f0c <_strtoul_l.constprop.0+0xa8>
 8011ec6:	2f00      	cmp	r7, #0
 8011ec8:	db1d      	blt.n	8011f06 <_strtoul_l.constprop.0+0xa2>
 8011eca:	4580      	cmp	r8, r0
 8011ecc:	d31b      	bcc.n	8011f06 <_strtoul_l.constprop.0+0xa2>
 8011ece:	d101      	bne.n	8011ed4 <_strtoul_l.constprop.0+0x70>
 8011ed0:	45a1      	cmp	r9, r4
 8011ed2:	db18      	blt.n	8011f06 <_strtoul_l.constprop.0+0xa2>
 8011ed4:	fb00 4003 	mla	r0, r0, r3, r4
 8011ed8:	2701      	movs	r7, #1
 8011eda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ede:	e7ea      	b.n	8011eb6 <_strtoul_l.constprop.0+0x52>
 8011ee0:	2c2b      	cmp	r4, #43	; 0x2b
 8011ee2:	bf04      	itt	eq
 8011ee4:	782c      	ldrbeq	r4, [r5, #0]
 8011ee6:	1c85      	addeq	r5, r0, #2
 8011ee8:	e7cd      	b.n	8011e86 <_strtoul_l.constprop.0+0x22>
 8011eea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011eee:	f1bc 0f19 	cmp.w	ip, #25
 8011ef2:	d801      	bhi.n	8011ef8 <_strtoul_l.constprop.0+0x94>
 8011ef4:	3c37      	subs	r4, #55	; 0x37
 8011ef6:	e7e4      	b.n	8011ec2 <_strtoul_l.constprop.0+0x5e>
 8011ef8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011efc:	f1bc 0f19 	cmp.w	ip, #25
 8011f00:	d804      	bhi.n	8011f0c <_strtoul_l.constprop.0+0xa8>
 8011f02:	3c57      	subs	r4, #87	; 0x57
 8011f04:	e7dd      	b.n	8011ec2 <_strtoul_l.constprop.0+0x5e>
 8011f06:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011f0a:	e7e6      	b.n	8011eda <_strtoul_l.constprop.0+0x76>
 8011f0c:	2f00      	cmp	r7, #0
 8011f0e:	da07      	bge.n	8011f20 <_strtoul_l.constprop.0+0xbc>
 8011f10:	2322      	movs	r3, #34	; 0x22
 8011f12:	f8ce 3000 	str.w	r3, [lr]
 8011f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f1a:	b932      	cbnz	r2, 8011f2a <_strtoul_l.constprop.0+0xc6>
 8011f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f20:	b106      	cbz	r6, 8011f24 <_strtoul_l.constprop.0+0xc0>
 8011f22:	4240      	negs	r0, r0
 8011f24:	2a00      	cmp	r2, #0
 8011f26:	d0f9      	beq.n	8011f1c <_strtoul_l.constprop.0+0xb8>
 8011f28:	b107      	cbz	r7, 8011f2c <_strtoul_l.constprop.0+0xc8>
 8011f2a:	1e69      	subs	r1, r5, #1
 8011f2c:	6011      	str	r1, [r2, #0]
 8011f2e:	e7f5      	b.n	8011f1c <_strtoul_l.constprop.0+0xb8>
 8011f30:	2430      	movs	r4, #48	; 0x30
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1b5      	bne.n	8011ea2 <_strtoul_l.constprop.0+0x3e>
 8011f36:	2308      	movs	r3, #8
 8011f38:	e7b3      	b.n	8011ea2 <_strtoul_l.constprop.0+0x3e>
 8011f3a:	2c30      	cmp	r4, #48	; 0x30
 8011f3c:	d0a9      	beq.n	8011e92 <_strtoul_l.constprop.0+0x2e>
 8011f3e:	230a      	movs	r3, #10
 8011f40:	e7af      	b.n	8011ea2 <_strtoul_l.constprop.0+0x3e>
 8011f42:	bf00      	nop
 8011f44:	0801cb91 	.word	0x0801cb91

08011f48 <strtoul>:
 8011f48:	4613      	mov	r3, r2
 8011f4a:	460a      	mov	r2, r1
 8011f4c:	4601      	mov	r1, r0
 8011f4e:	4802      	ldr	r0, [pc, #8]	; (8011f58 <strtoul+0x10>)
 8011f50:	6800      	ldr	r0, [r0, #0]
 8011f52:	f7ff bf87 	b.w	8011e64 <_strtoul_l.constprop.0>
 8011f56:	bf00      	nop
 8011f58:	20000240 	.word	0x20000240

08011f5c <__tz_lock>:
 8011f5c:	4801      	ldr	r0, [pc, #4]	; (8011f64 <__tz_lock+0x8>)
 8011f5e:	f002 b9ee 	b.w	801433e <__retarget_lock_acquire>
 8011f62:	bf00      	nop
 8011f64:	2000040c 	.word	0x2000040c

08011f68 <__tz_unlock>:
 8011f68:	4801      	ldr	r0, [pc, #4]	; (8011f70 <__tz_unlock+0x8>)
 8011f6a:	f002 b9f4 	b.w	8014356 <__retarget_lock_release>
 8011f6e:	bf00      	nop
 8011f70:	2000040c 	.word	0x2000040c

08011f74 <_tzset_unlocked>:
 8011f74:	4b01      	ldr	r3, [pc, #4]	; (8011f7c <_tzset_unlocked+0x8>)
 8011f76:	6818      	ldr	r0, [r3, #0]
 8011f78:	f000 b802 	b.w	8011f80 <_tzset_unlocked_r>
 8011f7c:	20000240 	.word	0x20000240

08011f80 <_tzset_unlocked_r>:
 8011f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f84:	b08d      	sub	sp, #52	; 0x34
 8011f86:	4607      	mov	r7, r0
 8011f88:	f000 fbf4 	bl	8012774 <__gettzinfo>
 8011f8c:	49b0      	ldr	r1, [pc, #704]	; (8012250 <_tzset_unlocked_r+0x2d0>)
 8011f8e:	4eb1      	ldr	r6, [pc, #708]	; (8012254 <_tzset_unlocked_r+0x2d4>)
 8011f90:	4605      	mov	r5, r0
 8011f92:	4638      	mov	r0, r7
 8011f94:	f007 fb3f 	bl	8019616 <_getenv_r>
 8011f98:	4604      	mov	r4, r0
 8011f9a:	b970      	cbnz	r0, 8011fba <_tzset_unlocked_r+0x3a>
 8011f9c:	4bae      	ldr	r3, [pc, #696]	; (8012258 <_tzset_unlocked_r+0x2d8>)
 8011f9e:	4aaf      	ldr	r2, [pc, #700]	; (801225c <_tzset_unlocked_r+0x2dc>)
 8011fa0:	6018      	str	r0, [r3, #0]
 8011fa2:	4baf      	ldr	r3, [pc, #700]	; (8012260 <_tzset_unlocked_r+0x2e0>)
 8011fa4:	6018      	str	r0, [r3, #0]
 8011fa6:	4baf      	ldr	r3, [pc, #700]	; (8012264 <_tzset_unlocked_r+0x2e4>)
 8011fa8:	6830      	ldr	r0, [r6, #0]
 8011faa:	e9c3 2200 	strd	r2, r2, [r3]
 8011fae:	f7ff f94f 	bl	8011250 <free>
 8011fb2:	6034      	str	r4, [r6, #0]
 8011fb4:	b00d      	add	sp, #52	; 0x34
 8011fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fba:	6831      	ldr	r1, [r6, #0]
 8011fbc:	2900      	cmp	r1, #0
 8011fbe:	d162      	bne.n	8012086 <_tzset_unlocked_r+0x106>
 8011fc0:	6830      	ldr	r0, [r6, #0]
 8011fc2:	f7ff f945 	bl	8011250 <free>
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f7ef f9fd 	bl	80013c6 <strlen>
 8011fcc:	1c41      	adds	r1, r0, #1
 8011fce:	4638      	mov	r0, r7
 8011fd0:	f7ff f990 	bl	80112f4 <_malloc_r>
 8011fd4:	6030      	str	r0, [r6, #0]
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d15a      	bne.n	8012090 <_tzset_unlocked_r+0x110>
 8011fda:	7823      	ldrb	r3, [r4, #0]
 8011fdc:	4aa2      	ldr	r2, [pc, #648]	; (8012268 <_tzset_unlocked_r+0x2e8>)
 8011fde:	49a3      	ldr	r1, [pc, #652]	; (801226c <_tzset_unlocked_r+0x2ec>)
 8011fe0:	2b3a      	cmp	r3, #58	; 0x3a
 8011fe2:	bf08      	it	eq
 8011fe4:	3401      	addeq	r4, #1
 8011fe6:	ae0a      	add	r6, sp, #40	; 0x28
 8011fe8:	4633      	mov	r3, r6
 8011fea:	4620      	mov	r0, r4
 8011fec:	f000 fe9c 	bl	8012d28 <siscanf>
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	dddf      	ble.n	8011fb4 <_tzset_unlocked_r+0x34>
 8011ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ff6:	18e7      	adds	r7, r4, r3
 8011ff8:	5ce3      	ldrb	r3, [r4, r3]
 8011ffa:	2b2d      	cmp	r3, #45	; 0x2d
 8011ffc:	d14c      	bne.n	8012098 <_tzset_unlocked_r+0x118>
 8011ffe:	3701      	adds	r7, #1
 8012000:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012004:	f10d 0a20 	add.w	sl, sp, #32
 8012008:	f10d 0b1e 	add.w	fp, sp, #30
 801200c:	2400      	movs	r4, #0
 801200e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8012012:	4997      	ldr	r1, [pc, #604]	; (8012270 <_tzset_unlocked_r+0x2f0>)
 8012014:	9603      	str	r6, [sp, #12]
 8012016:	f8cd b000 	str.w	fp, [sp]
 801201a:	4633      	mov	r3, r6
 801201c:	aa07      	add	r2, sp, #28
 801201e:	4638      	mov	r0, r7
 8012020:	f8ad 401e 	strh.w	r4, [sp, #30]
 8012024:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012028:	f000 fe7e 	bl	8012d28 <siscanf>
 801202c:	42a0      	cmp	r0, r4
 801202e:	ddc1      	ble.n	8011fb4 <_tzset_unlocked_r+0x34>
 8012030:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012034:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012038:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8012274 <_tzset_unlocked_r+0x2f4>
 801203c:	213c      	movs	r1, #60	; 0x3c
 801203e:	fb01 3302 	mla	r3, r1, r2, r3
 8012042:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8012046:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801204a:	fb01 3302 	mla	r3, r1, r2, r3
 801204e:	fb08 f303 	mul.w	r3, r8, r3
 8012052:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8012264 <_tzset_unlocked_r+0x2e4>
 8012056:	62ab      	str	r3, [r5, #40]	; 0x28
 8012058:	4b83      	ldr	r3, [pc, #524]	; (8012268 <_tzset_unlocked_r+0x2e8>)
 801205a:	f8c8 3000 	str.w	r3, [r8]
 801205e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012060:	4982      	ldr	r1, [pc, #520]	; (801226c <_tzset_unlocked_r+0x2ec>)
 8012062:	441f      	add	r7, r3
 8012064:	464a      	mov	r2, r9
 8012066:	4633      	mov	r3, r6
 8012068:	4638      	mov	r0, r7
 801206a:	f000 fe5d 	bl	8012d28 <siscanf>
 801206e:	42a0      	cmp	r0, r4
 8012070:	dc18      	bgt.n	80120a4 <_tzset_unlocked_r+0x124>
 8012072:	f8d8 3000 	ldr.w	r3, [r8]
 8012076:	f8c8 3004 	str.w	r3, [r8, #4]
 801207a:	4b77      	ldr	r3, [pc, #476]	; (8012258 <_tzset_unlocked_r+0x2d8>)
 801207c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801207e:	601a      	str	r2, [r3, #0]
 8012080:	4b77      	ldr	r3, [pc, #476]	; (8012260 <_tzset_unlocked_r+0x2e0>)
 8012082:	601c      	str	r4, [r3, #0]
 8012084:	e796      	b.n	8011fb4 <_tzset_unlocked_r+0x34>
 8012086:	f7ef f994 	bl	80013b2 <strcmp>
 801208a:	2800      	cmp	r0, #0
 801208c:	d198      	bne.n	8011fc0 <_tzset_unlocked_r+0x40>
 801208e:	e791      	b.n	8011fb4 <_tzset_unlocked_r+0x34>
 8012090:	4621      	mov	r1, r4
 8012092:	f007 fa2c 	bl	80194ee <strcpy>
 8012096:	e7a0      	b.n	8011fda <_tzset_unlocked_r+0x5a>
 8012098:	2b2b      	cmp	r3, #43	; 0x2b
 801209a:	bf08      	it	eq
 801209c:	3701      	addeq	r7, #1
 801209e:	f04f 0801 	mov.w	r8, #1
 80120a2:	e7af      	b.n	8012004 <_tzset_unlocked_r+0x84>
 80120a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120a6:	f8c8 9004 	str.w	r9, [r8, #4]
 80120aa:	18fc      	adds	r4, r7, r3
 80120ac:	5cfb      	ldrb	r3, [r7, r3]
 80120ae:	2b2d      	cmp	r3, #45	; 0x2d
 80120b0:	f040 808b 	bne.w	80121ca <_tzset_unlocked_r+0x24a>
 80120b4:	3401      	adds	r4, #1
 80120b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80120ba:	2300      	movs	r3, #0
 80120bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80120c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80120c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80120c8:	930a      	str	r3, [sp, #40]	; 0x28
 80120ca:	e9cd a602 	strd	sl, r6, [sp, #8]
 80120ce:	e9cd b600 	strd	fp, r6, [sp]
 80120d2:	4967      	ldr	r1, [pc, #412]	; (8012270 <_tzset_unlocked_r+0x2f0>)
 80120d4:	4633      	mov	r3, r6
 80120d6:	aa07      	add	r2, sp, #28
 80120d8:	4620      	mov	r0, r4
 80120da:	f000 fe25 	bl	8012d28 <siscanf>
 80120de:	2800      	cmp	r0, #0
 80120e0:	dc78      	bgt.n	80121d4 <_tzset_unlocked_r+0x254>
 80120e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80120e4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80120e8:	652b      	str	r3, [r5, #80]	; 0x50
 80120ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120ec:	462f      	mov	r7, r5
 80120ee:	441c      	add	r4, r3
 80120f0:	f04f 0900 	mov.w	r9, #0
 80120f4:	7823      	ldrb	r3, [r4, #0]
 80120f6:	2b2c      	cmp	r3, #44	; 0x2c
 80120f8:	bf08      	it	eq
 80120fa:	3401      	addeq	r4, #1
 80120fc:	f894 8000 	ldrb.w	r8, [r4]
 8012100:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8012104:	d178      	bne.n	80121f8 <_tzset_unlocked_r+0x278>
 8012106:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801210a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801210e:	ab09      	add	r3, sp, #36	; 0x24
 8012110:	9300      	str	r3, [sp, #0]
 8012112:	4959      	ldr	r1, [pc, #356]	; (8012278 <_tzset_unlocked_r+0x2f8>)
 8012114:	9603      	str	r6, [sp, #12]
 8012116:	4633      	mov	r3, r6
 8012118:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801211c:	4620      	mov	r0, r4
 801211e:	f000 fe03 	bl	8012d28 <siscanf>
 8012122:	2803      	cmp	r0, #3
 8012124:	f47f af46 	bne.w	8011fb4 <_tzset_unlocked_r+0x34>
 8012128:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801212c:	1e4b      	subs	r3, r1, #1
 801212e:	2b0b      	cmp	r3, #11
 8012130:	f63f af40 	bhi.w	8011fb4 <_tzset_unlocked_r+0x34>
 8012134:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012138:	1e53      	subs	r3, r2, #1
 801213a:	2b04      	cmp	r3, #4
 801213c:	f63f af3a 	bhi.w	8011fb4 <_tzset_unlocked_r+0x34>
 8012140:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012144:	2b06      	cmp	r3, #6
 8012146:	f63f af35 	bhi.w	8011fb4 <_tzset_unlocked_r+0x34>
 801214a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801214e:	f887 8008 	strb.w	r8, [r7, #8]
 8012152:	617b      	str	r3, [r7, #20]
 8012154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012156:	eb04 0803 	add.w	r8, r4, r3
 801215a:	2302      	movs	r3, #2
 801215c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012160:	2300      	movs	r3, #0
 8012162:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012166:	f8ad 3020 	strh.w	r3, [sp, #32]
 801216a:	930a      	str	r3, [sp, #40]	; 0x28
 801216c:	f898 3000 	ldrb.w	r3, [r8]
 8012170:	2b2f      	cmp	r3, #47	; 0x2f
 8012172:	d109      	bne.n	8012188 <_tzset_unlocked_r+0x208>
 8012174:	e9cd a602 	strd	sl, r6, [sp, #8]
 8012178:	e9cd b600 	strd	fp, r6, [sp]
 801217c:	493f      	ldr	r1, [pc, #252]	; (801227c <_tzset_unlocked_r+0x2fc>)
 801217e:	4633      	mov	r3, r6
 8012180:	aa07      	add	r2, sp, #28
 8012182:	4640      	mov	r0, r8
 8012184:	f000 fdd0 	bl	8012d28 <siscanf>
 8012188:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801218c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012190:	213c      	movs	r1, #60	; 0x3c
 8012192:	fb01 3302 	mla	r3, r1, r2, r3
 8012196:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801219a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801219e:	fb01 3302 	mla	r3, r1, r2, r3
 80121a2:	61bb      	str	r3, [r7, #24]
 80121a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80121a6:	3728      	adds	r7, #40	; 0x28
 80121a8:	4444      	add	r4, r8
 80121aa:	f1b9 0f00 	cmp.w	r9, #0
 80121ae:	d020      	beq.n	80121f2 <_tzset_unlocked_r+0x272>
 80121b0:	6868      	ldr	r0, [r5, #4]
 80121b2:	f000 fde3 	bl	8012d7c <__tzcalc_limits>
 80121b6:	4b28      	ldr	r3, [pc, #160]	; (8012258 <_tzset_unlocked_r+0x2d8>)
 80121b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80121ba:	601a      	str	r2, [r3, #0]
 80121bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80121be:	1a9b      	subs	r3, r3, r2
 80121c0:	4a27      	ldr	r2, [pc, #156]	; (8012260 <_tzset_unlocked_r+0x2e0>)
 80121c2:	bf18      	it	ne
 80121c4:	2301      	movne	r3, #1
 80121c6:	6013      	str	r3, [r2, #0]
 80121c8:	e6f4      	b.n	8011fb4 <_tzset_unlocked_r+0x34>
 80121ca:	2b2b      	cmp	r3, #43	; 0x2b
 80121cc:	bf08      	it	eq
 80121ce:	3401      	addeq	r4, #1
 80121d0:	2701      	movs	r7, #1
 80121d2:	e772      	b.n	80120ba <_tzset_unlocked_r+0x13a>
 80121d4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80121d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80121dc:	213c      	movs	r1, #60	; 0x3c
 80121de:	fb01 3302 	mla	r3, r1, r2, r3
 80121e2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80121e6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80121ea:	fb01 3302 	mla	r3, r1, r2, r3
 80121ee:	437b      	muls	r3, r7
 80121f0:	e77a      	b.n	80120e8 <_tzset_unlocked_r+0x168>
 80121f2:	f04f 0901 	mov.w	r9, #1
 80121f6:	e77d      	b.n	80120f4 <_tzset_unlocked_r+0x174>
 80121f8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80121fc:	bf06      	itte	eq
 80121fe:	3401      	addeq	r4, #1
 8012200:	4643      	moveq	r3, r8
 8012202:	2344      	movne	r3, #68	; 0x44
 8012204:	220a      	movs	r2, #10
 8012206:	a90b      	add	r1, sp, #44	; 0x2c
 8012208:	4620      	mov	r0, r4
 801220a:	9305      	str	r3, [sp, #20]
 801220c:	f7ff fe9c 	bl	8011f48 <strtoul>
 8012210:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012214:	9b05      	ldr	r3, [sp, #20]
 8012216:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801221a:	45a0      	cmp	r8, r4
 801221c:	d114      	bne.n	8012248 <_tzset_unlocked_r+0x2c8>
 801221e:	234d      	movs	r3, #77	; 0x4d
 8012220:	f1b9 0f00 	cmp.w	r9, #0
 8012224:	d107      	bne.n	8012236 <_tzset_unlocked_r+0x2b6>
 8012226:	722b      	strb	r3, [r5, #8]
 8012228:	2103      	movs	r1, #3
 801222a:	2302      	movs	r3, #2
 801222c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8012230:	f8c5 9014 	str.w	r9, [r5, #20]
 8012234:	e791      	b.n	801215a <_tzset_unlocked_r+0x1da>
 8012236:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801223a:	220b      	movs	r2, #11
 801223c:	2301      	movs	r3, #1
 801223e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8012242:	2300      	movs	r3, #0
 8012244:	63eb      	str	r3, [r5, #60]	; 0x3c
 8012246:	e788      	b.n	801215a <_tzset_unlocked_r+0x1da>
 8012248:	b280      	uxth	r0, r0
 801224a:	723b      	strb	r3, [r7, #8]
 801224c:	6178      	str	r0, [r7, #20]
 801224e:	e784      	b.n	801215a <_tzset_unlocked_r+0x1da>
 8012250:	0801ce09 	.word	0x0801ce09
 8012254:	20002344 	.word	0x20002344
 8012258:	2000234c 	.word	0x2000234c
 801225c:	0801ce0c 	.word	0x0801ce0c
 8012260:	20002348 	.word	0x20002348
 8012264:	200002a4 	.word	0x200002a4
 8012268:	2000268a 	.word	0x2000268a
 801226c:	0801ce10 	.word	0x0801ce10
 8012270:	0801ce33 	.word	0x0801ce33
 8012274:	2000267f 	.word	0x2000267f
 8012278:	0801ce1f 	.word	0x0801ce1f
 801227c:	0801ce32 	.word	0x0801ce32

08012280 <__swbuf_r>:
 8012280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012282:	460e      	mov	r6, r1
 8012284:	4614      	mov	r4, r2
 8012286:	4605      	mov	r5, r0
 8012288:	b118      	cbz	r0, 8012292 <__swbuf_r+0x12>
 801228a:	6983      	ldr	r3, [r0, #24]
 801228c:	b90b      	cbnz	r3, 8012292 <__swbuf_r+0x12>
 801228e:	f000 f9b7 	bl	8012600 <__sinit>
 8012292:	4b21      	ldr	r3, [pc, #132]	; (8012318 <__swbuf_r+0x98>)
 8012294:	429c      	cmp	r4, r3
 8012296:	d12b      	bne.n	80122f0 <__swbuf_r+0x70>
 8012298:	686c      	ldr	r4, [r5, #4]
 801229a:	69a3      	ldr	r3, [r4, #24]
 801229c:	60a3      	str	r3, [r4, #8]
 801229e:	89a3      	ldrh	r3, [r4, #12]
 80122a0:	071a      	lsls	r2, r3, #28
 80122a2:	d52f      	bpl.n	8012304 <__swbuf_r+0x84>
 80122a4:	6923      	ldr	r3, [r4, #16]
 80122a6:	b36b      	cbz	r3, 8012304 <__swbuf_r+0x84>
 80122a8:	6923      	ldr	r3, [r4, #16]
 80122aa:	6820      	ldr	r0, [r4, #0]
 80122ac:	1ac0      	subs	r0, r0, r3
 80122ae:	6963      	ldr	r3, [r4, #20]
 80122b0:	b2f6      	uxtb	r6, r6
 80122b2:	4283      	cmp	r3, r0
 80122b4:	4637      	mov	r7, r6
 80122b6:	dc04      	bgt.n	80122c2 <__swbuf_r+0x42>
 80122b8:	4621      	mov	r1, r4
 80122ba:	4628      	mov	r0, r5
 80122bc:	f000 f922 	bl	8012504 <_fflush_r>
 80122c0:	bb30      	cbnz	r0, 8012310 <__swbuf_r+0x90>
 80122c2:	68a3      	ldr	r3, [r4, #8]
 80122c4:	3b01      	subs	r3, #1
 80122c6:	60a3      	str	r3, [r4, #8]
 80122c8:	6823      	ldr	r3, [r4, #0]
 80122ca:	1c5a      	adds	r2, r3, #1
 80122cc:	6022      	str	r2, [r4, #0]
 80122ce:	701e      	strb	r6, [r3, #0]
 80122d0:	6963      	ldr	r3, [r4, #20]
 80122d2:	3001      	adds	r0, #1
 80122d4:	4283      	cmp	r3, r0
 80122d6:	d004      	beq.n	80122e2 <__swbuf_r+0x62>
 80122d8:	89a3      	ldrh	r3, [r4, #12]
 80122da:	07db      	lsls	r3, r3, #31
 80122dc:	d506      	bpl.n	80122ec <__swbuf_r+0x6c>
 80122de:	2e0a      	cmp	r6, #10
 80122e0:	d104      	bne.n	80122ec <__swbuf_r+0x6c>
 80122e2:	4621      	mov	r1, r4
 80122e4:	4628      	mov	r0, r5
 80122e6:	f000 f90d 	bl	8012504 <_fflush_r>
 80122ea:	b988      	cbnz	r0, 8012310 <__swbuf_r+0x90>
 80122ec:	4638      	mov	r0, r7
 80122ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122f0:	4b0a      	ldr	r3, [pc, #40]	; (801231c <__swbuf_r+0x9c>)
 80122f2:	429c      	cmp	r4, r3
 80122f4:	d101      	bne.n	80122fa <__swbuf_r+0x7a>
 80122f6:	68ac      	ldr	r4, [r5, #8]
 80122f8:	e7cf      	b.n	801229a <__swbuf_r+0x1a>
 80122fa:	4b09      	ldr	r3, [pc, #36]	; (8012320 <__swbuf_r+0xa0>)
 80122fc:	429c      	cmp	r4, r3
 80122fe:	bf08      	it	eq
 8012300:	68ec      	ldreq	r4, [r5, #12]
 8012302:	e7ca      	b.n	801229a <__swbuf_r+0x1a>
 8012304:	4621      	mov	r1, r4
 8012306:	4628      	mov	r0, r5
 8012308:	f000 f80c 	bl	8012324 <__swsetup_r>
 801230c:	2800      	cmp	r0, #0
 801230e:	d0cb      	beq.n	80122a8 <__swbuf_r+0x28>
 8012310:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012314:	e7ea      	b.n	80122ec <__swbuf_r+0x6c>
 8012316:	bf00      	nop
 8012318:	0801aa68 	.word	0x0801aa68
 801231c:	0801aa88 	.word	0x0801aa88
 8012320:	0801aa48 	.word	0x0801aa48

08012324 <__swsetup_r>:
 8012324:	4b32      	ldr	r3, [pc, #200]	; (80123f0 <__swsetup_r+0xcc>)
 8012326:	b570      	push	{r4, r5, r6, lr}
 8012328:	681d      	ldr	r5, [r3, #0]
 801232a:	4606      	mov	r6, r0
 801232c:	460c      	mov	r4, r1
 801232e:	b125      	cbz	r5, 801233a <__swsetup_r+0x16>
 8012330:	69ab      	ldr	r3, [r5, #24]
 8012332:	b913      	cbnz	r3, 801233a <__swsetup_r+0x16>
 8012334:	4628      	mov	r0, r5
 8012336:	f000 f963 	bl	8012600 <__sinit>
 801233a:	4b2e      	ldr	r3, [pc, #184]	; (80123f4 <__swsetup_r+0xd0>)
 801233c:	429c      	cmp	r4, r3
 801233e:	d10f      	bne.n	8012360 <__swsetup_r+0x3c>
 8012340:	686c      	ldr	r4, [r5, #4]
 8012342:	89a3      	ldrh	r3, [r4, #12]
 8012344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012348:	0719      	lsls	r1, r3, #28
 801234a:	d42c      	bmi.n	80123a6 <__swsetup_r+0x82>
 801234c:	06dd      	lsls	r5, r3, #27
 801234e:	d411      	bmi.n	8012374 <__swsetup_r+0x50>
 8012350:	2309      	movs	r3, #9
 8012352:	6033      	str	r3, [r6, #0]
 8012354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012358:	81a3      	strh	r3, [r4, #12]
 801235a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801235e:	e03e      	b.n	80123de <__swsetup_r+0xba>
 8012360:	4b25      	ldr	r3, [pc, #148]	; (80123f8 <__swsetup_r+0xd4>)
 8012362:	429c      	cmp	r4, r3
 8012364:	d101      	bne.n	801236a <__swsetup_r+0x46>
 8012366:	68ac      	ldr	r4, [r5, #8]
 8012368:	e7eb      	b.n	8012342 <__swsetup_r+0x1e>
 801236a:	4b24      	ldr	r3, [pc, #144]	; (80123fc <__swsetup_r+0xd8>)
 801236c:	429c      	cmp	r4, r3
 801236e:	bf08      	it	eq
 8012370:	68ec      	ldreq	r4, [r5, #12]
 8012372:	e7e6      	b.n	8012342 <__swsetup_r+0x1e>
 8012374:	0758      	lsls	r0, r3, #29
 8012376:	d512      	bpl.n	801239e <__swsetup_r+0x7a>
 8012378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801237a:	b141      	cbz	r1, 801238e <__swsetup_r+0x6a>
 801237c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012380:	4299      	cmp	r1, r3
 8012382:	d002      	beq.n	801238a <__swsetup_r+0x66>
 8012384:	4630      	mov	r0, r6
 8012386:	f7fe ff6b 	bl	8011260 <_free_r>
 801238a:	2300      	movs	r3, #0
 801238c:	6363      	str	r3, [r4, #52]	; 0x34
 801238e:	89a3      	ldrh	r3, [r4, #12]
 8012390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012394:	81a3      	strh	r3, [r4, #12]
 8012396:	2300      	movs	r3, #0
 8012398:	6063      	str	r3, [r4, #4]
 801239a:	6923      	ldr	r3, [r4, #16]
 801239c:	6023      	str	r3, [r4, #0]
 801239e:	89a3      	ldrh	r3, [r4, #12]
 80123a0:	f043 0308 	orr.w	r3, r3, #8
 80123a4:	81a3      	strh	r3, [r4, #12]
 80123a6:	6923      	ldr	r3, [r4, #16]
 80123a8:	b94b      	cbnz	r3, 80123be <__swsetup_r+0x9a>
 80123aa:	89a3      	ldrh	r3, [r4, #12]
 80123ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123b4:	d003      	beq.n	80123be <__swsetup_r+0x9a>
 80123b6:	4621      	mov	r1, r4
 80123b8:	4630      	mov	r0, r6
 80123ba:	f000 f9df 	bl	801277c <__smakebuf_r>
 80123be:	89a0      	ldrh	r0, [r4, #12]
 80123c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123c4:	f010 0301 	ands.w	r3, r0, #1
 80123c8:	d00a      	beq.n	80123e0 <__swsetup_r+0xbc>
 80123ca:	2300      	movs	r3, #0
 80123cc:	60a3      	str	r3, [r4, #8]
 80123ce:	6963      	ldr	r3, [r4, #20]
 80123d0:	425b      	negs	r3, r3
 80123d2:	61a3      	str	r3, [r4, #24]
 80123d4:	6923      	ldr	r3, [r4, #16]
 80123d6:	b943      	cbnz	r3, 80123ea <__swsetup_r+0xc6>
 80123d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123dc:	d1ba      	bne.n	8012354 <__swsetup_r+0x30>
 80123de:	bd70      	pop	{r4, r5, r6, pc}
 80123e0:	0781      	lsls	r1, r0, #30
 80123e2:	bf58      	it	pl
 80123e4:	6963      	ldrpl	r3, [r4, #20]
 80123e6:	60a3      	str	r3, [r4, #8]
 80123e8:	e7f4      	b.n	80123d4 <__swsetup_r+0xb0>
 80123ea:	2000      	movs	r0, #0
 80123ec:	e7f7      	b.n	80123de <__swsetup_r+0xba>
 80123ee:	bf00      	nop
 80123f0:	20000240 	.word	0x20000240
 80123f4:	0801aa68 	.word	0x0801aa68
 80123f8:	0801aa88 	.word	0x0801aa88
 80123fc:	0801aa48 	.word	0x0801aa48

08012400 <__sflush_r>:
 8012400:	898a      	ldrh	r2, [r1, #12]
 8012402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012404:	4605      	mov	r5, r0
 8012406:	0710      	lsls	r0, r2, #28
 8012408:	460c      	mov	r4, r1
 801240a:	d457      	bmi.n	80124bc <__sflush_r+0xbc>
 801240c:	684b      	ldr	r3, [r1, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	dc04      	bgt.n	801241c <__sflush_r+0x1c>
 8012412:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012414:	2b00      	cmp	r3, #0
 8012416:	dc01      	bgt.n	801241c <__sflush_r+0x1c>
 8012418:	2000      	movs	r0, #0
 801241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801241c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801241e:	2e00      	cmp	r6, #0
 8012420:	d0fa      	beq.n	8012418 <__sflush_r+0x18>
 8012422:	2300      	movs	r3, #0
 8012424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012428:	682f      	ldr	r7, [r5, #0]
 801242a:	602b      	str	r3, [r5, #0]
 801242c:	d032      	beq.n	8012494 <__sflush_r+0x94>
 801242e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012430:	89a3      	ldrh	r3, [r4, #12]
 8012432:	075a      	lsls	r2, r3, #29
 8012434:	d505      	bpl.n	8012442 <__sflush_r+0x42>
 8012436:	6863      	ldr	r3, [r4, #4]
 8012438:	1ac0      	subs	r0, r0, r3
 801243a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801243c:	b10b      	cbz	r3, 8012442 <__sflush_r+0x42>
 801243e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012440:	1ac0      	subs	r0, r0, r3
 8012442:	2300      	movs	r3, #0
 8012444:	4602      	mov	r2, r0
 8012446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012448:	6a21      	ldr	r1, [r4, #32]
 801244a:	4628      	mov	r0, r5
 801244c:	47b0      	blx	r6
 801244e:	1c43      	adds	r3, r0, #1
 8012450:	89a3      	ldrh	r3, [r4, #12]
 8012452:	d106      	bne.n	8012462 <__sflush_r+0x62>
 8012454:	6829      	ldr	r1, [r5, #0]
 8012456:	291d      	cmp	r1, #29
 8012458:	d82c      	bhi.n	80124b4 <__sflush_r+0xb4>
 801245a:	4a29      	ldr	r2, [pc, #164]	; (8012500 <__sflush_r+0x100>)
 801245c:	40ca      	lsrs	r2, r1
 801245e:	07d6      	lsls	r6, r2, #31
 8012460:	d528      	bpl.n	80124b4 <__sflush_r+0xb4>
 8012462:	2200      	movs	r2, #0
 8012464:	6062      	str	r2, [r4, #4]
 8012466:	04d9      	lsls	r1, r3, #19
 8012468:	6922      	ldr	r2, [r4, #16]
 801246a:	6022      	str	r2, [r4, #0]
 801246c:	d504      	bpl.n	8012478 <__sflush_r+0x78>
 801246e:	1c42      	adds	r2, r0, #1
 8012470:	d101      	bne.n	8012476 <__sflush_r+0x76>
 8012472:	682b      	ldr	r3, [r5, #0]
 8012474:	b903      	cbnz	r3, 8012478 <__sflush_r+0x78>
 8012476:	6560      	str	r0, [r4, #84]	; 0x54
 8012478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801247a:	602f      	str	r7, [r5, #0]
 801247c:	2900      	cmp	r1, #0
 801247e:	d0cb      	beq.n	8012418 <__sflush_r+0x18>
 8012480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012484:	4299      	cmp	r1, r3
 8012486:	d002      	beq.n	801248e <__sflush_r+0x8e>
 8012488:	4628      	mov	r0, r5
 801248a:	f7fe fee9 	bl	8011260 <_free_r>
 801248e:	2000      	movs	r0, #0
 8012490:	6360      	str	r0, [r4, #52]	; 0x34
 8012492:	e7c2      	b.n	801241a <__sflush_r+0x1a>
 8012494:	6a21      	ldr	r1, [r4, #32]
 8012496:	2301      	movs	r3, #1
 8012498:	4628      	mov	r0, r5
 801249a:	47b0      	blx	r6
 801249c:	1c41      	adds	r1, r0, #1
 801249e:	d1c7      	bne.n	8012430 <__sflush_r+0x30>
 80124a0:	682b      	ldr	r3, [r5, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d0c4      	beq.n	8012430 <__sflush_r+0x30>
 80124a6:	2b1d      	cmp	r3, #29
 80124a8:	d001      	beq.n	80124ae <__sflush_r+0xae>
 80124aa:	2b16      	cmp	r3, #22
 80124ac:	d101      	bne.n	80124b2 <__sflush_r+0xb2>
 80124ae:	602f      	str	r7, [r5, #0]
 80124b0:	e7b2      	b.n	8012418 <__sflush_r+0x18>
 80124b2:	89a3      	ldrh	r3, [r4, #12]
 80124b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124b8:	81a3      	strh	r3, [r4, #12]
 80124ba:	e7ae      	b.n	801241a <__sflush_r+0x1a>
 80124bc:	690f      	ldr	r7, [r1, #16]
 80124be:	2f00      	cmp	r7, #0
 80124c0:	d0aa      	beq.n	8012418 <__sflush_r+0x18>
 80124c2:	0793      	lsls	r3, r2, #30
 80124c4:	680e      	ldr	r6, [r1, #0]
 80124c6:	bf08      	it	eq
 80124c8:	694b      	ldreq	r3, [r1, #20]
 80124ca:	600f      	str	r7, [r1, #0]
 80124cc:	bf18      	it	ne
 80124ce:	2300      	movne	r3, #0
 80124d0:	1bf6      	subs	r6, r6, r7
 80124d2:	608b      	str	r3, [r1, #8]
 80124d4:	2e00      	cmp	r6, #0
 80124d6:	dd9f      	ble.n	8012418 <__sflush_r+0x18>
 80124d8:	6a21      	ldr	r1, [r4, #32]
 80124da:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80124de:	4633      	mov	r3, r6
 80124e0:	463a      	mov	r2, r7
 80124e2:	4628      	mov	r0, r5
 80124e4:	47e0      	blx	ip
 80124e6:	2800      	cmp	r0, #0
 80124e8:	dc06      	bgt.n	80124f8 <__sflush_r+0xf8>
 80124ea:	89a3      	ldrh	r3, [r4, #12]
 80124ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124f0:	81a3      	strh	r3, [r4, #12]
 80124f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124f6:	e790      	b.n	801241a <__sflush_r+0x1a>
 80124f8:	4407      	add	r7, r0
 80124fa:	1a36      	subs	r6, r6, r0
 80124fc:	e7ea      	b.n	80124d4 <__sflush_r+0xd4>
 80124fe:	bf00      	nop
 8012500:	20400001 	.word	0x20400001

08012504 <_fflush_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	690b      	ldr	r3, [r1, #16]
 8012508:	4605      	mov	r5, r0
 801250a:	460c      	mov	r4, r1
 801250c:	b913      	cbnz	r3, 8012514 <_fflush_r+0x10>
 801250e:	2500      	movs	r5, #0
 8012510:	4628      	mov	r0, r5
 8012512:	bd38      	pop	{r3, r4, r5, pc}
 8012514:	b118      	cbz	r0, 801251e <_fflush_r+0x1a>
 8012516:	6983      	ldr	r3, [r0, #24]
 8012518:	b90b      	cbnz	r3, 801251e <_fflush_r+0x1a>
 801251a:	f000 f871 	bl	8012600 <__sinit>
 801251e:	4b14      	ldr	r3, [pc, #80]	; (8012570 <_fflush_r+0x6c>)
 8012520:	429c      	cmp	r4, r3
 8012522:	d11b      	bne.n	801255c <_fflush_r+0x58>
 8012524:	686c      	ldr	r4, [r5, #4]
 8012526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d0ef      	beq.n	801250e <_fflush_r+0xa>
 801252e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012530:	07d0      	lsls	r0, r2, #31
 8012532:	d404      	bmi.n	801253e <_fflush_r+0x3a>
 8012534:	0599      	lsls	r1, r3, #22
 8012536:	d402      	bmi.n	801253e <_fflush_r+0x3a>
 8012538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801253a:	f001 ff06 	bl	801434a <__retarget_lock_acquire_recursive>
 801253e:	4628      	mov	r0, r5
 8012540:	4621      	mov	r1, r4
 8012542:	f7ff ff5d 	bl	8012400 <__sflush_r>
 8012546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012548:	07da      	lsls	r2, r3, #31
 801254a:	4605      	mov	r5, r0
 801254c:	d4e0      	bmi.n	8012510 <_fflush_r+0xc>
 801254e:	89a3      	ldrh	r3, [r4, #12]
 8012550:	059b      	lsls	r3, r3, #22
 8012552:	d4dd      	bmi.n	8012510 <_fflush_r+0xc>
 8012554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012556:	f001 ff00 	bl	801435a <__retarget_lock_release_recursive>
 801255a:	e7d9      	b.n	8012510 <_fflush_r+0xc>
 801255c:	4b05      	ldr	r3, [pc, #20]	; (8012574 <_fflush_r+0x70>)
 801255e:	429c      	cmp	r4, r3
 8012560:	d101      	bne.n	8012566 <_fflush_r+0x62>
 8012562:	68ac      	ldr	r4, [r5, #8]
 8012564:	e7df      	b.n	8012526 <_fflush_r+0x22>
 8012566:	4b04      	ldr	r3, [pc, #16]	; (8012578 <_fflush_r+0x74>)
 8012568:	429c      	cmp	r4, r3
 801256a:	bf08      	it	eq
 801256c:	68ec      	ldreq	r4, [r5, #12]
 801256e:	e7da      	b.n	8012526 <_fflush_r+0x22>
 8012570:	0801aa68 	.word	0x0801aa68
 8012574:	0801aa88 	.word	0x0801aa88
 8012578:	0801aa48 	.word	0x0801aa48

0801257c <std>:
 801257c:	2300      	movs	r3, #0
 801257e:	b510      	push	{r4, lr}
 8012580:	4604      	mov	r4, r0
 8012582:	e9c0 3300 	strd	r3, r3, [r0]
 8012586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801258a:	6083      	str	r3, [r0, #8]
 801258c:	8181      	strh	r1, [r0, #12]
 801258e:	6643      	str	r3, [r0, #100]	; 0x64
 8012590:	81c2      	strh	r2, [r0, #14]
 8012592:	6183      	str	r3, [r0, #24]
 8012594:	4619      	mov	r1, r3
 8012596:	2208      	movs	r2, #8
 8012598:	305c      	adds	r0, #92	; 0x5c
 801259a:	f006 ff93 	bl	80194c4 <memset>
 801259e:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <std+0x38>)
 80125a0:	6263      	str	r3, [r4, #36]	; 0x24
 80125a2:	4b05      	ldr	r3, [pc, #20]	; (80125b8 <std+0x3c>)
 80125a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80125a6:	4b05      	ldr	r3, [pc, #20]	; (80125bc <std+0x40>)
 80125a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125aa:	4b05      	ldr	r3, [pc, #20]	; (80125c0 <std+0x44>)
 80125ac:	6224      	str	r4, [r4, #32]
 80125ae:	6323      	str	r3, [r4, #48]	; 0x30
 80125b0:	bd10      	pop	{r4, pc}
 80125b2:	bf00      	nop
 80125b4:	0801979f 	.word	0x0801979f
 80125b8:	080197c5 	.word	0x080197c5
 80125bc:	080197fd 	.word	0x080197fd
 80125c0:	08019821 	.word	0x08019821

080125c4 <_cleanup_r>:
 80125c4:	4901      	ldr	r1, [pc, #4]	; (80125cc <_cleanup_r+0x8>)
 80125c6:	f007 b807 	b.w	80195d8 <_fwalk_reent>
 80125ca:	bf00      	nop
 80125cc:	08012505 	.word	0x08012505

080125d0 <__sfp_lock_acquire>:
 80125d0:	4801      	ldr	r0, [pc, #4]	; (80125d8 <__sfp_lock_acquire+0x8>)
 80125d2:	f001 beba 	b.w	801434a <__retarget_lock_acquire_recursive>
 80125d6:	bf00      	nop
 80125d8:	200003bc 	.word	0x200003bc

080125dc <__sfp_lock_release>:
 80125dc:	4801      	ldr	r0, [pc, #4]	; (80125e4 <__sfp_lock_release+0x8>)
 80125de:	f001 bebc 	b.w	801435a <__retarget_lock_release_recursive>
 80125e2:	bf00      	nop
 80125e4:	200003bc 	.word	0x200003bc

080125e8 <__sinit_lock_acquire>:
 80125e8:	4801      	ldr	r0, [pc, #4]	; (80125f0 <__sinit_lock_acquire+0x8>)
 80125ea:	f001 beae 	b.w	801434a <__retarget_lock_acquire_recursive>
 80125ee:	bf00      	nop
 80125f0:	200003d0 	.word	0x200003d0

080125f4 <__sinit_lock_release>:
 80125f4:	4801      	ldr	r0, [pc, #4]	; (80125fc <__sinit_lock_release+0x8>)
 80125f6:	f001 beb0 	b.w	801435a <__retarget_lock_release_recursive>
 80125fa:	bf00      	nop
 80125fc:	200003d0 	.word	0x200003d0

08012600 <__sinit>:
 8012600:	b510      	push	{r4, lr}
 8012602:	4604      	mov	r4, r0
 8012604:	f7ff fff0 	bl	80125e8 <__sinit_lock_acquire>
 8012608:	69a3      	ldr	r3, [r4, #24]
 801260a:	b11b      	cbz	r3, 8012614 <__sinit+0x14>
 801260c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012610:	f7ff bff0 	b.w	80125f4 <__sinit_lock_release>
 8012614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012618:	6523      	str	r3, [r4, #80]	; 0x50
 801261a:	4b13      	ldr	r3, [pc, #76]	; (8012668 <__sinit+0x68>)
 801261c:	4a13      	ldr	r2, [pc, #76]	; (801266c <__sinit+0x6c>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	62a2      	str	r2, [r4, #40]	; 0x28
 8012622:	42a3      	cmp	r3, r4
 8012624:	bf04      	itt	eq
 8012626:	2301      	moveq	r3, #1
 8012628:	61a3      	streq	r3, [r4, #24]
 801262a:	4620      	mov	r0, r4
 801262c:	f000 f820 	bl	8012670 <__sfp>
 8012630:	6060      	str	r0, [r4, #4]
 8012632:	4620      	mov	r0, r4
 8012634:	f000 f81c 	bl	8012670 <__sfp>
 8012638:	60a0      	str	r0, [r4, #8]
 801263a:	4620      	mov	r0, r4
 801263c:	f000 f818 	bl	8012670 <__sfp>
 8012640:	2200      	movs	r2, #0
 8012642:	60e0      	str	r0, [r4, #12]
 8012644:	2104      	movs	r1, #4
 8012646:	6860      	ldr	r0, [r4, #4]
 8012648:	f7ff ff98 	bl	801257c <std>
 801264c:	68a0      	ldr	r0, [r4, #8]
 801264e:	2201      	movs	r2, #1
 8012650:	2109      	movs	r1, #9
 8012652:	f7ff ff93 	bl	801257c <std>
 8012656:	68e0      	ldr	r0, [r4, #12]
 8012658:	2202      	movs	r2, #2
 801265a:	2112      	movs	r1, #18
 801265c:	f7ff ff8e 	bl	801257c <std>
 8012660:	2301      	movs	r3, #1
 8012662:	61a3      	str	r3, [r4, #24]
 8012664:	e7d2      	b.n	801260c <__sinit+0xc>
 8012666:	bf00      	nop
 8012668:	0801a948 	.word	0x0801a948
 801266c:	080125c5 	.word	0x080125c5

08012670 <__sfp>:
 8012670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012672:	4607      	mov	r7, r0
 8012674:	f7ff ffac 	bl	80125d0 <__sfp_lock_acquire>
 8012678:	4b1e      	ldr	r3, [pc, #120]	; (80126f4 <__sfp+0x84>)
 801267a:	681e      	ldr	r6, [r3, #0]
 801267c:	69b3      	ldr	r3, [r6, #24]
 801267e:	b913      	cbnz	r3, 8012686 <__sfp+0x16>
 8012680:	4630      	mov	r0, r6
 8012682:	f7ff ffbd 	bl	8012600 <__sinit>
 8012686:	3648      	adds	r6, #72	; 0x48
 8012688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801268c:	3b01      	subs	r3, #1
 801268e:	d503      	bpl.n	8012698 <__sfp+0x28>
 8012690:	6833      	ldr	r3, [r6, #0]
 8012692:	b30b      	cbz	r3, 80126d8 <__sfp+0x68>
 8012694:	6836      	ldr	r6, [r6, #0]
 8012696:	e7f7      	b.n	8012688 <__sfp+0x18>
 8012698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801269c:	b9d5      	cbnz	r5, 80126d4 <__sfp+0x64>
 801269e:	4b16      	ldr	r3, [pc, #88]	; (80126f8 <__sfp+0x88>)
 80126a0:	60e3      	str	r3, [r4, #12]
 80126a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126a6:	6665      	str	r5, [r4, #100]	; 0x64
 80126a8:	f001 fe3f 	bl	801432a <__retarget_lock_init_recursive>
 80126ac:	f7ff ff96 	bl	80125dc <__sfp_lock_release>
 80126b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80126b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80126b8:	6025      	str	r5, [r4, #0]
 80126ba:	61a5      	str	r5, [r4, #24]
 80126bc:	2208      	movs	r2, #8
 80126be:	4629      	mov	r1, r5
 80126c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80126c4:	f006 fefe 	bl	80194c4 <memset>
 80126c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80126cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80126d0:	4620      	mov	r0, r4
 80126d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126d4:	3468      	adds	r4, #104	; 0x68
 80126d6:	e7d9      	b.n	801268c <__sfp+0x1c>
 80126d8:	2104      	movs	r1, #4
 80126da:	4638      	mov	r0, r7
 80126dc:	f006 ff66 	bl	80195ac <__sfmoreglue>
 80126e0:	4604      	mov	r4, r0
 80126e2:	6030      	str	r0, [r6, #0]
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d1d5      	bne.n	8012694 <__sfp+0x24>
 80126e8:	f7ff ff78 	bl	80125dc <__sfp_lock_release>
 80126ec:	230c      	movs	r3, #12
 80126ee:	603b      	str	r3, [r7, #0]
 80126f0:	e7ee      	b.n	80126d0 <__sfp+0x60>
 80126f2:	bf00      	nop
 80126f4:	0801a948 	.word	0x0801a948
 80126f8:	ffff0001 	.word	0xffff0001

080126fc <_findenv_r>:
 80126fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012700:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8012770 <_findenv_r+0x74>
 8012704:	4607      	mov	r7, r0
 8012706:	4689      	mov	r9, r1
 8012708:	4616      	mov	r6, r2
 801270a:	f000 fbff 	bl	8012f0c <__env_lock>
 801270e:	f8da 4000 	ldr.w	r4, [sl]
 8012712:	b134      	cbz	r4, 8012722 <_findenv_r+0x26>
 8012714:	464b      	mov	r3, r9
 8012716:	4698      	mov	r8, r3
 8012718:	f813 2b01 	ldrb.w	r2, [r3], #1
 801271c:	b13a      	cbz	r2, 801272e <_findenv_r+0x32>
 801271e:	2a3d      	cmp	r2, #61	; 0x3d
 8012720:	d1f9      	bne.n	8012716 <_findenv_r+0x1a>
 8012722:	4638      	mov	r0, r7
 8012724:	f000 fbf8 	bl	8012f18 <__env_unlock>
 8012728:	2000      	movs	r0, #0
 801272a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801272e:	eba8 0809 	sub.w	r8, r8, r9
 8012732:	46a3      	mov	fp, r4
 8012734:	f854 0b04 	ldr.w	r0, [r4], #4
 8012738:	2800      	cmp	r0, #0
 801273a:	d0f2      	beq.n	8012722 <_findenv_r+0x26>
 801273c:	4642      	mov	r2, r8
 801273e:	4649      	mov	r1, r9
 8012740:	f006 fefb 	bl	801953a <strncmp>
 8012744:	2800      	cmp	r0, #0
 8012746:	d1f4      	bne.n	8012732 <_findenv_r+0x36>
 8012748:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801274c:	eb03 0508 	add.w	r5, r3, r8
 8012750:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012754:	2b3d      	cmp	r3, #61	; 0x3d
 8012756:	d1ec      	bne.n	8012732 <_findenv_r+0x36>
 8012758:	f8da 3000 	ldr.w	r3, [sl]
 801275c:	ebab 0303 	sub.w	r3, fp, r3
 8012760:	109b      	asrs	r3, r3, #2
 8012762:	4638      	mov	r0, r7
 8012764:	6033      	str	r3, [r6, #0]
 8012766:	f000 fbd7 	bl	8012f18 <__env_unlock>
 801276a:	1c68      	adds	r0, r5, #1
 801276c:	e7dd      	b.n	801272a <_findenv_r+0x2e>
 801276e:	bf00      	nop
 8012770:	200002ac 	.word	0x200002ac

08012774 <__gettzinfo>:
 8012774:	4800      	ldr	r0, [pc, #0]	; (8012778 <__gettzinfo+0x4>)
 8012776:	4770      	bx	lr
 8012778:	20000000 	.word	0x20000000

0801277c <__smakebuf_r>:
 801277c:	898b      	ldrh	r3, [r1, #12]
 801277e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012780:	079d      	lsls	r5, r3, #30
 8012782:	4606      	mov	r6, r0
 8012784:	460c      	mov	r4, r1
 8012786:	d507      	bpl.n	8012798 <__smakebuf_r+0x1c>
 8012788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801278c:	6023      	str	r3, [r4, #0]
 801278e:	6123      	str	r3, [r4, #16]
 8012790:	2301      	movs	r3, #1
 8012792:	6163      	str	r3, [r4, #20]
 8012794:	b002      	add	sp, #8
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	ab01      	add	r3, sp, #4
 801279a:	466a      	mov	r2, sp
 801279c:	f006 ff46 	bl	801962c <__swhatbuf_r>
 80127a0:	9900      	ldr	r1, [sp, #0]
 80127a2:	4605      	mov	r5, r0
 80127a4:	4630      	mov	r0, r6
 80127a6:	f7fe fda5 	bl	80112f4 <_malloc_r>
 80127aa:	b948      	cbnz	r0, 80127c0 <__smakebuf_r+0x44>
 80127ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127b0:	059a      	lsls	r2, r3, #22
 80127b2:	d4ef      	bmi.n	8012794 <__smakebuf_r+0x18>
 80127b4:	f023 0303 	bic.w	r3, r3, #3
 80127b8:	f043 0302 	orr.w	r3, r3, #2
 80127bc:	81a3      	strh	r3, [r4, #12]
 80127be:	e7e3      	b.n	8012788 <__smakebuf_r+0xc>
 80127c0:	4b0d      	ldr	r3, [pc, #52]	; (80127f8 <__smakebuf_r+0x7c>)
 80127c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80127c4:	89a3      	ldrh	r3, [r4, #12]
 80127c6:	6020      	str	r0, [r4, #0]
 80127c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127cc:	81a3      	strh	r3, [r4, #12]
 80127ce:	9b00      	ldr	r3, [sp, #0]
 80127d0:	6163      	str	r3, [r4, #20]
 80127d2:	9b01      	ldr	r3, [sp, #4]
 80127d4:	6120      	str	r0, [r4, #16]
 80127d6:	b15b      	cbz	r3, 80127f0 <__smakebuf_r+0x74>
 80127d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127dc:	4630      	mov	r0, r6
 80127de:	f000 fbb3 	bl	8012f48 <_isatty_r>
 80127e2:	b128      	cbz	r0, 80127f0 <__smakebuf_r+0x74>
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	f023 0303 	bic.w	r3, r3, #3
 80127ea:	f043 0301 	orr.w	r3, r3, #1
 80127ee:	81a3      	strh	r3, [r4, #12]
 80127f0:	89a0      	ldrh	r0, [r4, #12]
 80127f2:	4305      	orrs	r5, r0
 80127f4:	81a5      	strh	r5, [r4, #12]
 80127f6:	e7cd      	b.n	8012794 <__smakebuf_r+0x18>
 80127f8:	080125c5 	.word	0x080125c5

080127fc <__malloc_lock>:
 80127fc:	4801      	ldr	r0, [pc, #4]	; (8012804 <__malloc_lock+0x8>)
 80127fe:	f001 bda4 	b.w	801434a <__retarget_lock_acquire_recursive>
 8012802:	bf00      	nop
 8012804:	200003a8 	.word	0x200003a8

08012808 <__malloc_unlock>:
 8012808:	4801      	ldr	r0, [pc, #4]	; (8012810 <__malloc_unlock+0x8>)
 801280a:	f001 bda6 	b.w	801435a <__retarget_lock_release_recursive>
 801280e:	bf00      	nop
 8012810:	200003a8 	.word	0x200003a8

08012814 <_vfiprintf_r>:
 8012814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012818:	460d      	mov	r5, r1
 801281a:	b09d      	sub	sp, #116	; 0x74
 801281c:	4614      	mov	r4, r2
 801281e:	4698      	mov	r8, r3
 8012820:	4606      	mov	r6, r0
 8012822:	b118      	cbz	r0, 801282c <_vfiprintf_r+0x18>
 8012824:	6983      	ldr	r3, [r0, #24]
 8012826:	b90b      	cbnz	r3, 801282c <_vfiprintf_r+0x18>
 8012828:	f7ff feea 	bl	8012600 <__sinit>
 801282c:	4b89      	ldr	r3, [pc, #548]	; (8012a54 <_vfiprintf_r+0x240>)
 801282e:	429d      	cmp	r5, r3
 8012830:	d11b      	bne.n	801286a <_vfiprintf_r+0x56>
 8012832:	6875      	ldr	r5, [r6, #4]
 8012834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012836:	07d9      	lsls	r1, r3, #31
 8012838:	d405      	bmi.n	8012846 <_vfiprintf_r+0x32>
 801283a:	89ab      	ldrh	r3, [r5, #12]
 801283c:	059a      	lsls	r2, r3, #22
 801283e:	d402      	bmi.n	8012846 <_vfiprintf_r+0x32>
 8012840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012842:	f001 fd82 	bl	801434a <__retarget_lock_acquire_recursive>
 8012846:	89ab      	ldrh	r3, [r5, #12]
 8012848:	071b      	lsls	r3, r3, #28
 801284a:	d501      	bpl.n	8012850 <_vfiprintf_r+0x3c>
 801284c:	692b      	ldr	r3, [r5, #16]
 801284e:	b9eb      	cbnz	r3, 801288c <_vfiprintf_r+0x78>
 8012850:	4629      	mov	r1, r5
 8012852:	4630      	mov	r0, r6
 8012854:	f7ff fd66 	bl	8012324 <__swsetup_r>
 8012858:	b1c0      	cbz	r0, 801288c <_vfiprintf_r+0x78>
 801285a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801285c:	07dc      	lsls	r4, r3, #31
 801285e:	d50e      	bpl.n	801287e <_vfiprintf_r+0x6a>
 8012860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012864:	b01d      	add	sp, #116	; 0x74
 8012866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286a:	4b7b      	ldr	r3, [pc, #492]	; (8012a58 <_vfiprintf_r+0x244>)
 801286c:	429d      	cmp	r5, r3
 801286e:	d101      	bne.n	8012874 <_vfiprintf_r+0x60>
 8012870:	68b5      	ldr	r5, [r6, #8]
 8012872:	e7df      	b.n	8012834 <_vfiprintf_r+0x20>
 8012874:	4b79      	ldr	r3, [pc, #484]	; (8012a5c <_vfiprintf_r+0x248>)
 8012876:	429d      	cmp	r5, r3
 8012878:	bf08      	it	eq
 801287a:	68f5      	ldreq	r5, [r6, #12]
 801287c:	e7da      	b.n	8012834 <_vfiprintf_r+0x20>
 801287e:	89ab      	ldrh	r3, [r5, #12]
 8012880:	0598      	lsls	r0, r3, #22
 8012882:	d4ed      	bmi.n	8012860 <_vfiprintf_r+0x4c>
 8012884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012886:	f001 fd68 	bl	801435a <__retarget_lock_release_recursive>
 801288a:	e7e9      	b.n	8012860 <_vfiprintf_r+0x4c>
 801288c:	2300      	movs	r3, #0
 801288e:	9309      	str	r3, [sp, #36]	; 0x24
 8012890:	2320      	movs	r3, #32
 8012892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012896:	f8cd 800c 	str.w	r8, [sp, #12]
 801289a:	2330      	movs	r3, #48	; 0x30
 801289c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012a60 <_vfiprintf_r+0x24c>
 80128a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128a4:	f04f 0901 	mov.w	r9, #1
 80128a8:	4623      	mov	r3, r4
 80128aa:	469a      	mov	sl, r3
 80128ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128b0:	b10a      	cbz	r2, 80128b6 <_vfiprintf_r+0xa2>
 80128b2:	2a25      	cmp	r2, #37	; 0x25
 80128b4:	d1f9      	bne.n	80128aa <_vfiprintf_r+0x96>
 80128b6:	ebba 0b04 	subs.w	fp, sl, r4
 80128ba:	d00b      	beq.n	80128d4 <_vfiprintf_r+0xc0>
 80128bc:	465b      	mov	r3, fp
 80128be:	4622      	mov	r2, r4
 80128c0:	4629      	mov	r1, r5
 80128c2:	4630      	mov	r0, r6
 80128c4:	f006 feec 	bl	80196a0 <__sfputs_r>
 80128c8:	3001      	adds	r0, #1
 80128ca:	f000 80aa 	beq.w	8012a22 <_vfiprintf_r+0x20e>
 80128ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128d0:	445a      	add	r2, fp
 80128d2:	9209      	str	r2, [sp, #36]	; 0x24
 80128d4:	f89a 3000 	ldrb.w	r3, [sl]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f000 80a2 	beq.w	8012a22 <_vfiprintf_r+0x20e>
 80128de:	2300      	movs	r3, #0
 80128e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128e8:	f10a 0a01 	add.w	sl, sl, #1
 80128ec:	9304      	str	r3, [sp, #16]
 80128ee:	9307      	str	r3, [sp, #28]
 80128f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128f4:	931a      	str	r3, [sp, #104]	; 0x68
 80128f6:	4654      	mov	r4, sl
 80128f8:	2205      	movs	r2, #5
 80128fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128fe:	4858      	ldr	r0, [pc, #352]	; (8012a60 <_vfiprintf_r+0x24c>)
 8012900:	f7ed fc1e 	bl	8000140 <memchr>
 8012904:	9a04      	ldr	r2, [sp, #16]
 8012906:	b9d8      	cbnz	r0, 8012940 <_vfiprintf_r+0x12c>
 8012908:	06d1      	lsls	r1, r2, #27
 801290a:	bf44      	itt	mi
 801290c:	2320      	movmi	r3, #32
 801290e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012912:	0713      	lsls	r3, r2, #28
 8012914:	bf44      	itt	mi
 8012916:	232b      	movmi	r3, #43	; 0x2b
 8012918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801291c:	f89a 3000 	ldrb.w	r3, [sl]
 8012920:	2b2a      	cmp	r3, #42	; 0x2a
 8012922:	d015      	beq.n	8012950 <_vfiprintf_r+0x13c>
 8012924:	9a07      	ldr	r2, [sp, #28]
 8012926:	4654      	mov	r4, sl
 8012928:	2000      	movs	r0, #0
 801292a:	f04f 0c0a 	mov.w	ip, #10
 801292e:	4621      	mov	r1, r4
 8012930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012934:	3b30      	subs	r3, #48	; 0x30
 8012936:	2b09      	cmp	r3, #9
 8012938:	d94e      	bls.n	80129d8 <_vfiprintf_r+0x1c4>
 801293a:	b1b0      	cbz	r0, 801296a <_vfiprintf_r+0x156>
 801293c:	9207      	str	r2, [sp, #28]
 801293e:	e014      	b.n	801296a <_vfiprintf_r+0x156>
 8012940:	eba0 0308 	sub.w	r3, r0, r8
 8012944:	fa09 f303 	lsl.w	r3, r9, r3
 8012948:	4313      	orrs	r3, r2
 801294a:	9304      	str	r3, [sp, #16]
 801294c:	46a2      	mov	sl, r4
 801294e:	e7d2      	b.n	80128f6 <_vfiprintf_r+0xe2>
 8012950:	9b03      	ldr	r3, [sp, #12]
 8012952:	1d19      	adds	r1, r3, #4
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	9103      	str	r1, [sp, #12]
 8012958:	2b00      	cmp	r3, #0
 801295a:	bfbb      	ittet	lt
 801295c:	425b      	neglt	r3, r3
 801295e:	f042 0202 	orrlt.w	r2, r2, #2
 8012962:	9307      	strge	r3, [sp, #28]
 8012964:	9307      	strlt	r3, [sp, #28]
 8012966:	bfb8      	it	lt
 8012968:	9204      	strlt	r2, [sp, #16]
 801296a:	7823      	ldrb	r3, [r4, #0]
 801296c:	2b2e      	cmp	r3, #46	; 0x2e
 801296e:	d10c      	bne.n	801298a <_vfiprintf_r+0x176>
 8012970:	7863      	ldrb	r3, [r4, #1]
 8012972:	2b2a      	cmp	r3, #42	; 0x2a
 8012974:	d135      	bne.n	80129e2 <_vfiprintf_r+0x1ce>
 8012976:	9b03      	ldr	r3, [sp, #12]
 8012978:	1d1a      	adds	r2, r3, #4
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	9203      	str	r2, [sp, #12]
 801297e:	2b00      	cmp	r3, #0
 8012980:	bfb8      	it	lt
 8012982:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012986:	3402      	adds	r4, #2
 8012988:	9305      	str	r3, [sp, #20]
 801298a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8012a64 <_vfiprintf_r+0x250>
 801298e:	7821      	ldrb	r1, [r4, #0]
 8012990:	2203      	movs	r2, #3
 8012992:	4650      	mov	r0, sl
 8012994:	f7ed fbd4 	bl	8000140 <memchr>
 8012998:	b140      	cbz	r0, 80129ac <_vfiprintf_r+0x198>
 801299a:	2340      	movs	r3, #64	; 0x40
 801299c:	eba0 000a 	sub.w	r0, r0, sl
 80129a0:	fa03 f000 	lsl.w	r0, r3, r0
 80129a4:	9b04      	ldr	r3, [sp, #16]
 80129a6:	4303      	orrs	r3, r0
 80129a8:	3401      	adds	r4, #1
 80129aa:	9304      	str	r3, [sp, #16]
 80129ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129b0:	482d      	ldr	r0, [pc, #180]	; (8012a68 <_vfiprintf_r+0x254>)
 80129b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80129b6:	2206      	movs	r2, #6
 80129b8:	f7ed fbc2 	bl	8000140 <memchr>
 80129bc:	2800      	cmp	r0, #0
 80129be:	d03f      	beq.n	8012a40 <_vfiprintf_r+0x22c>
 80129c0:	4b2a      	ldr	r3, [pc, #168]	; (8012a6c <_vfiprintf_r+0x258>)
 80129c2:	bb1b      	cbnz	r3, 8012a0c <_vfiprintf_r+0x1f8>
 80129c4:	9b03      	ldr	r3, [sp, #12]
 80129c6:	3307      	adds	r3, #7
 80129c8:	f023 0307 	bic.w	r3, r3, #7
 80129cc:	3308      	adds	r3, #8
 80129ce:	9303      	str	r3, [sp, #12]
 80129d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129d2:	443b      	add	r3, r7
 80129d4:	9309      	str	r3, [sp, #36]	; 0x24
 80129d6:	e767      	b.n	80128a8 <_vfiprintf_r+0x94>
 80129d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80129dc:	460c      	mov	r4, r1
 80129de:	2001      	movs	r0, #1
 80129e0:	e7a5      	b.n	801292e <_vfiprintf_r+0x11a>
 80129e2:	2300      	movs	r3, #0
 80129e4:	3401      	adds	r4, #1
 80129e6:	9305      	str	r3, [sp, #20]
 80129e8:	4619      	mov	r1, r3
 80129ea:	f04f 0c0a 	mov.w	ip, #10
 80129ee:	4620      	mov	r0, r4
 80129f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129f4:	3a30      	subs	r2, #48	; 0x30
 80129f6:	2a09      	cmp	r2, #9
 80129f8:	d903      	bls.n	8012a02 <_vfiprintf_r+0x1ee>
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d0c5      	beq.n	801298a <_vfiprintf_r+0x176>
 80129fe:	9105      	str	r1, [sp, #20]
 8012a00:	e7c3      	b.n	801298a <_vfiprintf_r+0x176>
 8012a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a06:	4604      	mov	r4, r0
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e7f0      	b.n	80129ee <_vfiprintf_r+0x1da>
 8012a0c:	ab03      	add	r3, sp, #12
 8012a0e:	9300      	str	r3, [sp, #0]
 8012a10:	462a      	mov	r2, r5
 8012a12:	4b17      	ldr	r3, [pc, #92]	; (8012a70 <_vfiprintf_r+0x25c>)
 8012a14:	a904      	add	r1, sp, #16
 8012a16:	4630      	mov	r0, r6
 8012a18:	f3af 8000 	nop.w
 8012a1c:	4607      	mov	r7, r0
 8012a1e:	1c78      	adds	r0, r7, #1
 8012a20:	d1d6      	bne.n	80129d0 <_vfiprintf_r+0x1bc>
 8012a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a24:	07d9      	lsls	r1, r3, #31
 8012a26:	d405      	bmi.n	8012a34 <_vfiprintf_r+0x220>
 8012a28:	89ab      	ldrh	r3, [r5, #12]
 8012a2a:	059a      	lsls	r2, r3, #22
 8012a2c:	d402      	bmi.n	8012a34 <_vfiprintf_r+0x220>
 8012a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a30:	f001 fc93 	bl	801435a <__retarget_lock_release_recursive>
 8012a34:	89ab      	ldrh	r3, [r5, #12]
 8012a36:	065b      	lsls	r3, r3, #25
 8012a38:	f53f af12 	bmi.w	8012860 <_vfiprintf_r+0x4c>
 8012a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a3e:	e711      	b.n	8012864 <_vfiprintf_r+0x50>
 8012a40:	ab03      	add	r3, sp, #12
 8012a42:	9300      	str	r3, [sp, #0]
 8012a44:	462a      	mov	r2, r5
 8012a46:	4b0a      	ldr	r3, [pc, #40]	; (8012a70 <_vfiprintf_r+0x25c>)
 8012a48:	a904      	add	r1, sp, #16
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f000 f812 	bl	8012a74 <_printf_i>
 8012a50:	e7e4      	b.n	8012a1c <_vfiprintf_r+0x208>
 8012a52:	bf00      	nop
 8012a54:	0801aa68 	.word	0x0801aa68
 8012a58:	0801aa88 	.word	0x0801aa88
 8012a5c:	0801aa48 	.word	0x0801aa48
 8012a60:	0801ce45 	.word	0x0801ce45
 8012a64:	0801ce4b 	.word	0x0801ce4b
 8012a68:	0801ce4f 	.word	0x0801ce4f
 8012a6c:	00000000 	.word	0x00000000
 8012a70:	080196a1 	.word	0x080196a1

08012a74 <_printf_i>:
 8012a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a78:	7e0f      	ldrb	r7, [r1, #24]
 8012a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a7c:	2f78      	cmp	r7, #120	; 0x78
 8012a7e:	4691      	mov	r9, r2
 8012a80:	4680      	mov	r8, r0
 8012a82:	460c      	mov	r4, r1
 8012a84:	469a      	mov	sl, r3
 8012a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a8a:	d807      	bhi.n	8012a9c <_printf_i+0x28>
 8012a8c:	2f62      	cmp	r7, #98	; 0x62
 8012a8e:	d80a      	bhi.n	8012aa6 <_printf_i+0x32>
 8012a90:	2f00      	cmp	r7, #0
 8012a92:	f000 80d8 	beq.w	8012c46 <_printf_i+0x1d2>
 8012a96:	2f58      	cmp	r7, #88	; 0x58
 8012a98:	f000 80a3 	beq.w	8012be2 <_printf_i+0x16e>
 8012a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012aa4:	e03a      	b.n	8012b1c <_printf_i+0xa8>
 8012aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012aaa:	2b15      	cmp	r3, #21
 8012aac:	d8f6      	bhi.n	8012a9c <_printf_i+0x28>
 8012aae:	a101      	add	r1, pc, #4	; (adr r1, 8012ab4 <_printf_i+0x40>)
 8012ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ab4:	08012b0d 	.word	0x08012b0d
 8012ab8:	08012b21 	.word	0x08012b21
 8012abc:	08012a9d 	.word	0x08012a9d
 8012ac0:	08012a9d 	.word	0x08012a9d
 8012ac4:	08012a9d 	.word	0x08012a9d
 8012ac8:	08012a9d 	.word	0x08012a9d
 8012acc:	08012b21 	.word	0x08012b21
 8012ad0:	08012a9d 	.word	0x08012a9d
 8012ad4:	08012a9d 	.word	0x08012a9d
 8012ad8:	08012a9d 	.word	0x08012a9d
 8012adc:	08012a9d 	.word	0x08012a9d
 8012ae0:	08012c2d 	.word	0x08012c2d
 8012ae4:	08012b51 	.word	0x08012b51
 8012ae8:	08012c0f 	.word	0x08012c0f
 8012aec:	08012a9d 	.word	0x08012a9d
 8012af0:	08012a9d 	.word	0x08012a9d
 8012af4:	08012c4f 	.word	0x08012c4f
 8012af8:	08012a9d 	.word	0x08012a9d
 8012afc:	08012b51 	.word	0x08012b51
 8012b00:	08012a9d 	.word	0x08012a9d
 8012b04:	08012a9d 	.word	0x08012a9d
 8012b08:	08012c17 	.word	0x08012c17
 8012b0c:	682b      	ldr	r3, [r5, #0]
 8012b0e:	1d1a      	adds	r2, r3, #4
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	602a      	str	r2, [r5, #0]
 8012b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	e0a3      	b.n	8012c68 <_printf_i+0x1f4>
 8012b20:	6820      	ldr	r0, [r4, #0]
 8012b22:	6829      	ldr	r1, [r5, #0]
 8012b24:	0606      	lsls	r6, r0, #24
 8012b26:	f101 0304 	add.w	r3, r1, #4
 8012b2a:	d50a      	bpl.n	8012b42 <_printf_i+0xce>
 8012b2c:	680e      	ldr	r6, [r1, #0]
 8012b2e:	602b      	str	r3, [r5, #0]
 8012b30:	2e00      	cmp	r6, #0
 8012b32:	da03      	bge.n	8012b3c <_printf_i+0xc8>
 8012b34:	232d      	movs	r3, #45	; 0x2d
 8012b36:	4276      	negs	r6, r6
 8012b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b3c:	485e      	ldr	r0, [pc, #376]	; (8012cb8 <_printf_i+0x244>)
 8012b3e:	230a      	movs	r3, #10
 8012b40:	e019      	b.n	8012b76 <_printf_i+0x102>
 8012b42:	680e      	ldr	r6, [r1, #0]
 8012b44:	602b      	str	r3, [r5, #0]
 8012b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012b4a:	bf18      	it	ne
 8012b4c:	b236      	sxthne	r6, r6
 8012b4e:	e7ef      	b.n	8012b30 <_printf_i+0xbc>
 8012b50:	682b      	ldr	r3, [r5, #0]
 8012b52:	6820      	ldr	r0, [r4, #0]
 8012b54:	1d19      	adds	r1, r3, #4
 8012b56:	6029      	str	r1, [r5, #0]
 8012b58:	0601      	lsls	r1, r0, #24
 8012b5a:	d501      	bpl.n	8012b60 <_printf_i+0xec>
 8012b5c:	681e      	ldr	r6, [r3, #0]
 8012b5e:	e002      	b.n	8012b66 <_printf_i+0xf2>
 8012b60:	0646      	lsls	r6, r0, #25
 8012b62:	d5fb      	bpl.n	8012b5c <_printf_i+0xe8>
 8012b64:	881e      	ldrh	r6, [r3, #0]
 8012b66:	4854      	ldr	r0, [pc, #336]	; (8012cb8 <_printf_i+0x244>)
 8012b68:	2f6f      	cmp	r7, #111	; 0x6f
 8012b6a:	bf0c      	ite	eq
 8012b6c:	2308      	moveq	r3, #8
 8012b6e:	230a      	movne	r3, #10
 8012b70:	2100      	movs	r1, #0
 8012b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b76:	6865      	ldr	r5, [r4, #4]
 8012b78:	60a5      	str	r5, [r4, #8]
 8012b7a:	2d00      	cmp	r5, #0
 8012b7c:	bfa2      	ittt	ge
 8012b7e:	6821      	ldrge	r1, [r4, #0]
 8012b80:	f021 0104 	bicge.w	r1, r1, #4
 8012b84:	6021      	strge	r1, [r4, #0]
 8012b86:	b90e      	cbnz	r6, 8012b8c <_printf_i+0x118>
 8012b88:	2d00      	cmp	r5, #0
 8012b8a:	d04d      	beq.n	8012c28 <_printf_i+0x1b4>
 8012b8c:	4615      	mov	r5, r2
 8012b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b92:	fb03 6711 	mls	r7, r3, r1, r6
 8012b96:	5dc7      	ldrb	r7, [r0, r7]
 8012b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b9c:	4637      	mov	r7, r6
 8012b9e:	42bb      	cmp	r3, r7
 8012ba0:	460e      	mov	r6, r1
 8012ba2:	d9f4      	bls.n	8012b8e <_printf_i+0x11a>
 8012ba4:	2b08      	cmp	r3, #8
 8012ba6:	d10b      	bne.n	8012bc0 <_printf_i+0x14c>
 8012ba8:	6823      	ldr	r3, [r4, #0]
 8012baa:	07de      	lsls	r6, r3, #31
 8012bac:	d508      	bpl.n	8012bc0 <_printf_i+0x14c>
 8012bae:	6923      	ldr	r3, [r4, #16]
 8012bb0:	6861      	ldr	r1, [r4, #4]
 8012bb2:	4299      	cmp	r1, r3
 8012bb4:	bfde      	ittt	le
 8012bb6:	2330      	movle	r3, #48	; 0x30
 8012bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012bbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012bc0:	1b52      	subs	r2, r2, r5
 8012bc2:	6122      	str	r2, [r4, #16]
 8012bc4:	f8cd a000 	str.w	sl, [sp]
 8012bc8:	464b      	mov	r3, r9
 8012bca:	aa03      	add	r2, sp, #12
 8012bcc:	4621      	mov	r1, r4
 8012bce:	4640      	mov	r0, r8
 8012bd0:	f006 fd78 	bl	80196c4 <_printf_common>
 8012bd4:	3001      	adds	r0, #1
 8012bd6:	d14c      	bne.n	8012c72 <_printf_i+0x1fe>
 8012bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bdc:	b004      	add	sp, #16
 8012bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012be2:	4835      	ldr	r0, [pc, #212]	; (8012cb8 <_printf_i+0x244>)
 8012be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012be8:	6829      	ldr	r1, [r5, #0]
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8012bf0:	6029      	str	r1, [r5, #0]
 8012bf2:	061d      	lsls	r5, r3, #24
 8012bf4:	d514      	bpl.n	8012c20 <_printf_i+0x1ac>
 8012bf6:	07df      	lsls	r7, r3, #31
 8012bf8:	bf44      	itt	mi
 8012bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8012bfe:	6023      	strmi	r3, [r4, #0]
 8012c00:	b91e      	cbnz	r6, 8012c0a <_printf_i+0x196>
 8012c02:	6823      	ldr	r3, [r4, #0]
 8012c04:	f023 0320 	bic.w	r3, r3, #32
 8012c08:	6023      	str	r3, [r4, #0]
 8012c0a:	2310      	movs	r3, #16
 8012c0c:	e7b0      	b.n	8012b70 <_printf_i+0xfc>
 8012c0e:	6823      	ldr	r3, [r4, #0]
 8012c10:	f043 0320 	orr.w	r3, r3, #32
 8012c14:	6023      	str	r3, [r4, #0]
 8012c16:	2378      	movs	r3, #120	; 0x78
 8012c18:	4828      	ldr	r0, [pc, #160]	; (8012cbc <_printf_i+0x248>)
 8012c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012c1e:	e7e3      	b.n	8012be8 <_printf_i+0x174>
 8012c20:	0659      	lsls	r1, r3, #25
 8012c22:	bf48      	it	mi
 8012c24:	b2b6      	uxthmi	r6, r6
 8012c26:	e7e6      	b.n	8012bf6 <_printf_i+0x182>
 8012c28:	4615      	mov	r5, r2
 8012c2a:	e7bb      	b.n	8012ba4 <_printf_i+0x130>
 8012c2c:	682b      	ldr	r3, [r5, #0]
 8012c2e:	6826      	ldr	r6, [r4, #0]
 8012c30:	6961      	ldr	r1, [r4, #20]
 8012c32:	1d18      	adds	r0, r3, #4
 8012c34:	6028      	str	r0, [r5, #0]
 8012c36:	0635      	lsls	r5, r6, #24
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	d501      	bpl.n	8012c40 <_printf_i+0x1cc>
 8012c3c:	6019      	str	r1, [r3, #0]
 8012c3e:	e002      	b.n	8012c46 <_printf_i+0x1d2>
 8012c40:	0670      	lsls	r0, r6, #25
 8012c42:	d5fb      	bpl.n	8012c3c <_printf_i+0x1c8>
 8012c44:	8019      	strh	r1, [r3, #0]
 8012c46:	2300      	movs	r3, #0
 8012c48:	6123      	str	r3, [r4, #16]
 8012c4a:	4615      	mov	r5, r2
 8012c4c:	e7ba      	b.n	8012bc4 <_printf_i+0x150>
 8012c4e:	682b      	ldr	r3, [r5, #0]
 8012c50:	1d1a      	adds	r2, r3, #4
 8012c52:	602a      	str	r2, [r5, #0]
 8012c54:	681d      	ldr	r5, [r3, #0]
 8012c56:	6862      	ldr	r2, [r4, #4]
 8012c58:	2100      	movs	r1, #0
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	f7ed fa70 	bl	8000140 <memchr>
 8012c60:	b108      	cbz	r0, 8012c66 <_printf_i+0x1f2>
 8012c62:	1b40      	subs	r0, r0, r5
 8012c64:	6060      	str	r0, [r4, #4]
 8012c66:	6863      	ldr	r3, [r4, #4]
 8012c68:	6123      	str	r3, [r4, #16]
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c70:	e7a8      	b.n	8012bc4 <_printf_i+0x150>
 8012c72:	6923      	ldr	r3, [r4, #16]
 8012c74:	462a      	mov	r2, r5
 8012c76:	4649      	mov	r1, r9
 8012c78:	4640      	mov	r0, r8
 8012c7a:	47d0      	blx	sl
 8012c7c:	3001      	adds	r0, #1
 8012c7e:	d0ab      	beq.n	8012bd8 <_printf_i+0x164>
 8012c80:	6823      	ldr	r3, [r4, #0]
 8012c82:	079b      	lsls	r3, r3, #30
 8012c84:	d413      	bmi.n	8012cae <_printf_i+0x23a>
 8012c86:	68e0      	ldr	r0, [r4, #12]
 8012c88:	9b03      	ldr	r3, [sp, #12]
 8012c8a:	4298      	cmp	r0, r3
 8012c8c:	bfb8      	it	lt
 8012c8e:	4618      	movlt	r0, r3
 8012c90:	e7a4      	b.n	8012bdc <_printf_i+0x168>
 8012c92:	2301      	movs	r3, #1
 8012c94:	4632      	mov	r2, r6
 8012c96:	4649      	mov	r1, r9
 8012c98:	4640      	mov	r0, r8
 8012c9a:	47d0      	blx	sl
 8012c9c:	3001      	adds	r0, #1
 8012c9e:	d09b      	beq.n	8012bd8 <_printf_i+0x164>
 8012ca0:	3501      	adds	r5, #1
 8012ca2:	68e3      	ldr	r3, [r4, #12]
 8012ca4:	9903      	ldr	r1, [sp, #12]
 8012ca6:	1a5b      	subs	r3, r3, r1
 8012ca8:	42ab      	cmp	r3, r5
 8012caa:	dcf2      	bgt.n	8012c92 <_printf_i+0x21e>
 8012cac:	e7eb      	b.n	8012c86 <_printf_i+0x212>
 8012cae:	2500      	movs	r5, #0
 8012cb0:	f104 0619 	add.w	r6, r4, #25
 8012cb4:	e7f5      	b.n	8012ca2 <_printf_i+0x22e>
 8012cb6:	bf00      	nop
 8012cb8:	0801ce56 	.word	0x0801ce56
 8012cbc:	0801ce67 	.word	0x0801ce67

08012cc0 <sniprintf>:
 8012cc0:	b40c      	push	{r2, r3}
 8012cc2:	b530      	push	{r4, r5, lr}
 8012cc4:	4b17      	ldr	r3, [pc, #92]	; (8012d24 <sniprintf+0x64>)
 8012cc6:	1e0c      	subs	r4, r1, #0
 8012cc8:	681d      	ldr	r5, [r3, #0]
 8012cca:	b09d      	sub	sp, #116	; 0x74
 8012ccc:	da08      	bge.n	8012ce0 <sniprintf+0x20>
 8012cce:	238b      	movs	r3, #139	; 0x8b
 8012cd0:	602b      	str	r3, [r5, #0]
 8012cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cd6:	b01d      	add	sp, #116	; 0x74
 8012cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012cdc:	b002      	add	sp, #8
 8012cde:	4770      	bx	lr
 8012ce0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012ce8:	bf14      	ite	ne
 8012cea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012cee:	4623      	moveq	r3, r4
 8012cf0:	9304      	str	r3, [sp, #16]
 8012cf2:	9307      	str	r3, [sp, #28]
 8012cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cf8:	9002      	str	r0, [sp, #8]
 8012cfa:	9006      	str	r0, [sp, #24]
 8012cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012d02:	ab21      	add	r3, sp, #132	; 0x84
 8012d04:	a902      	add	r1, sp, #8
 8012d06:	4628      	mov	r0, r5
 8012d08:	9301      	str	r3, [sp, #4]
 8012d0a:	f000 f93f 	bl	8012f8c <_svfiprintf_r>
 8012d0e:	1c43      	adds	r3, r0, #1
 8012d10:	bfbc      	itt	lt
 8012d12:	238b      	movlt	r3, #139	; 0x8b
 8012d14:	602b      	strlt	r3, [r5, #0]
 8012d16:	2c00      	cmp	r4, #0
 8012d18:	d0dd      	beq.n	8012cd6 <sniprintf+0x16>
 8012d1a:	9b02      	ldr	r3, [sp, #8]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	701a      	strb	r2, [r3, #0]
 8012d20:	e7d9      	b.n	8012cd6 <sniprintf+0x16>
 8012d22:	bf00      	nop
 8012d24:	20000240 	.word	0x20000240

08012d28 <siscanf>:
 8012d28:	b40e      	push	{r1, r2, r3}
 8012d2a:	b530      	push	{r4, r5, lr}
 8012d2c:	b09c      	sub	sp, #112	; 0x70
 8012d2e:	ac1f      	add	r4, sp, #124	; 0x7c
 8012d30:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012d34:	f854 5b04 	ldr.w	r5, [r4], #4
 8012d38:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012d3c:	9002      	str	r0, [sp, #8]
 8012d3e:	9006      	str	r0, [sp, #24]
 8012d40:	f7ee fb41 	bl	80013c6 <strlen>
 8012d44:	4b0b      	ldr	r3, [pc, #44]	; (8012d74 <siscanf+0x4c>)
 8012d46:	9003      	str	r0, [sp, #12]
 8012d48:	9007      	str	r0, [sp, #28]
 8012d4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d4c:	480a      	ldr	r0, [pc, #40]	; (8012d78 <siscanf+0x50>)
 8012d4e:	9401      	str	r4, [sp, #4]
 8012d50:	2300      	movs	r3, #0
 8012d52:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d54:	9314      	str	r3, [sp, #80]	; 0x50
 8012d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d5e:	462a      	mov	r2, r5
 8012d60:	4623      	mov	r3, r4
 8012d62:	a902      	add	r1, sp, #8
 8012d64:	6800      	ldr	r0, [r0, #0]
 8012d66:	f000 fa11 	bl	801318c <__ssvfiscanf_r>
 8012d6a:	b01c      	add	sp, #112	; 0x70
 8012d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d70:	b003      	add	sp, #12
 8012d72:	4770      	bx	lr
 8012d74:	080197c1 	.word	0x080197c1
 8012d78:	20000240 	.word	0x20000240

08012d7c <__tzcalc_limits>:
 8012d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d80:	4605      	mov	r5, r0
 8012d82:	f7ff fcf7 	bl	8012774 <__gettzinfo>
 8012d86:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8012d8a:	429d      	cmp	r5, r3
 8012d8c:	f340 8095 	ble.w	8012eba <__tzcalc_limits+0x13e>
 8012d90:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8012d94:	18ac      	adds	r4, r5, r2
 8012d96:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8012d9a:	f240 126d 	movw	r2, #365	; 0x16d
 8012d9e:	10a4      	asrs	r4, r4, #2
 8012da0:	fb02 4403 	mla	r4, r2, r3, r4
 8012da4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8012da8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8012dac:	fb93 f3f2 	sdiv	r3, r3, r2
 8012db0:	441c      	add	r4, r3
 8012db2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012db6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8012dba:	fb95 fef3 	sdiv	lr, r5, r3
 8012dbe:	fb03 5e1e 	mls	lr, r3, lr, r5
 8012dc2:	186a      	adds	r2, r5, r1
 8012dc4:	fabe f78e 	clz	r7, lr
 8012dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8012dcc:	4414      	add	r4, r2
 8012dce:	2264      	movs	r2, #100	; 0x64
 8012dd0:	6045      	str	r5, [r0, #4]
 8012dd2:	fb95 fcf2 	sdiv	ip, r5, r2
 8012dd6:	097f      	lsrs	r7, r7, #5
 8012dd8:	fb02 5c1c 	mls	ip, r2, ip, r5
 8012ddc:	4601      	mov	r1, r0
 8012dde:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8012de2:	f005 0303 	and.w	r3, r5, #3
 8012de6:	7a0a      	ldrb	r2, [r1, #8]
 8012de8:	694d      	ldr	r5, [r1, #20]
 8012dea:	2a4a      	cmp	r2, #74	; 0x4a
 8012dec:	d12a      	bne.n	8012e44 <__tzcalc_limits+0xc8>
 8012dee:	1962      	adds	r2, r4, r5
 8012df0:	b913      	cbnz	r3, 8012df8 <__tzcalc_limits+0x7c>
 8012df2:	f1bc 0f00 	cmp.w	ip, #0
 8012df6:	d102      	bne.n	8012dfe <__tzcalc_limits+0x82>
 8012df8:	f1be 0f00 	cmp.w	lr, #0
 8012dfc:	d120      	bne.n	8012e40 <__tzcalc_limits+0xc4>
 8012dfe:	2d3b      	cmp	r5, #59	; 0x3b
 8012e00:	bfd4      	ite	le
 8012e02:	2500      	movle	r5, #0
 8012e04:	2501      	movgt	r5, #1
 8012e06:	4415      	add	r5, r2
 8012e08:	3d01      	subs	r5, #1
 8012e0a:	698e      	ldr	r6, [r1, #24]
 8012e0c:	4a2c      	ldr	r2, [pc, #176]	; (8012ec0 <__tzcalc_limits+0x144>)
 8012e0e:	fb02 6505 	mla	r5, r2, r5, r6
 8012e12:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8012e14:	4415      	add	r5, r2
 8012e16:	17ea      	asrs	r2, r5, #31
 8012e18:	e9c1 5208 	strd	r5, r2, [r1, #32]
 8012e1c:	3128      	adds	r1, #40	; 0x28
 8012e1e:	458b      	cmp	fp, r1
 8012e20:	d1e1      	bne.n	8012de6 <__tzcalc_limits+0x6a>
 8012e22:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8012e26:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8012e2a:	428c      	cmp	r4, r1
 8012e2c:	eb72 0303 	sbcs.w	r3, r2, r3
 8012e30:	bfb4      	ite	lt
 8012e32:	2301      	movlt	r3, #1
 8012e34:	2300      	movge	r3, #0
 8012e36:	6003      	str	r3, [r0, #0]
 8012e38:	2001      	movs	r0, #1
 8012e3a:	b003      	add	sp, #12
 8012e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e40:	2500      	movs	r5, #0
 8012e42:	e7e0      	b.n	8012e06 <__tzcalc_limits+0x8a>
 8012e44:	2a44      	cmp	r2, #68	; 0x44
 8012e46:	d101      	bne.n	8012e4c <__tzcalc_limits+0xd0>
 8012e48:	4425      	add	r5, r4
 8012e4a:	e7de      	b.n	8012e0a <__tzcalc_limits+0x8e>
 8012e4c:	bb7b      	cbnz	r3, 8012eae <__tzcalc_limits+0x132>
 8012e4e:	f1bc 0f00 	cmp.w	ip, #0
 8012e52:	bf0c      	ite	eq
 8012e54:	463e      	moveq	r6, r7
 8012e56:	2601      	movne	r6, #1
 8012e58:	f8df a068 	ldr.w	sl, [pc, #104]	; 8012ec4 <__tzcalc_limits+0x148>
 8012e5c:	68ca      	ldr	r2, [r1, #12]
 8012e5e:	9201      	str	r2, [sp, #4]
 8012e60:	f04f 0830 	mov.w	r8, #48	; 0x30
 8012e64:	fb08 a606 	mla	r6, r8, r6, sl
 8012e68:	4622      	mov	r2, r4
 8012e6a:	f04f 0900 	mov.w	r9, #0
 8012e6e:	3e04      	subs	r6, #4
 8012e70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012e74:	f109 0901 	add.w	r9, r9, #1
 8012e78:	45c8      	cmp	r8, r9
 8012e7a:	f856 a029 	ldr.w	sl, [r6, r9, lsl #2]
 8012e7e:	dc18      	bgt.n	8012eb2 <__tzcalc_limits+0x136>
 8012e80:	1d16      	adds	r6, r2, #4
 8012e82:	f04f 0807 	mov.w	r8, #7
 8012e86:	fb96 f9f8 	sdiv	r9, r6, r8
 8012e8a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8012e8e:	eba6 0909 	sub.w	r9, r6, r9
 8012e92:	ebb5 0909 	subs.w	r9, r5, r9
 8012e96:	690d      	ldr	r5, [r1, #16]
 8012e98:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8012e9c:	bf48      	it	mi
 8012e9e:	44c1      	addmi	r9, r8
 8012ea0:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8012ea4:	444d      	add	r5, r9
 8012ea6:	4555      	cmp	r5, sl
 8012ea8:	da05      	bge.n	8012eb6 <__tzcalc_limits+0x13a>
 8012eaa:	4415      	add	r5, r2
 8012eac:	e7ad      	b.n	8012e0a <__tzcalc_limits+0x8e>
 8012eae:	463e      	mov	r6, r7
 8012eb0:	e7d2      	b.n	8012e58 <__tzcalc_limits+0xdc>
 8012eb2:	4452      	add	r2, sl
 8012eb4:	e7dc      	b.n	8012e70 <__tzcalc_limits+0xf4>
 8012eb6:	3d07      	subs	r5, #7
 8012eb8:	e7f5      	b.n	8012ea6 <__tzcalc_limits+0x12a>
 8012eba:	2000      	movs	r0, #0
 8012ebc:	e7bd      	b.n	8012e3a <__tzcalc_limits+0xbe>
 8012ebe:	bf00      	nop
 8012ec0:	00015180 	.word	0x00015180
 8012ec4:	0801aaa8 	.word	0x0801aaa8

08012ec8 <_write_r>:
 8012ec8:	b538      	push	{r3, r4, r5, lr}
 8012eca:	4d07      	ldr	r5, [pc, #28]	; (8012ee8 <_write_r+0x20>)
 8012ecc:	4604      	mov	r4, r0
 8012ece:	4608      	mov	r0, r1
 8012ed0:	4611      	mov	r1, r2
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	602a      	str	r2, [r5, #0]
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	f001 fa14 	bl	8014304 <_write>
 8012edc:	1c43      	adds	r3, r0, #1
 8012ede:	d102      	bne.n	8012ee6 <_write_r+0x1e>
 8012ee0:	682b      	ldr	r3, [r5, #0]
 8012ee2:	b103      	cbz	r3, 8012ee6 <_write_r+0x1e>
 8012ee4:	6023      	str	r3, [r4, #0]
 8012ee6:	bd38      	pop	{r3, r4, r5, pc}
 8012ee8:	20002350 	.word	0x20002350

08012eec <_close_r>:
 8012eec:	b538      	push	{r3, r4, r5, lr}
 8012eee:	4d06      	ldr	r5, [pc, #24]	; (8012f08 <_close_r+0x1c>)
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	4608      	mov	r0, r1
 8012ef6:	602b      	str	r3, [r5, #0]
 8012ef8:	f001 fa08 	bl	801430c <_close>
 8012efc:	1c43      	adds	r3, r0, #1
 8012efe:	d102      	bne.n	8012f06 <_close_r+0x1a>
 8012f00:	682b      	ldr	r3, [r5, #0]
 8012f02:	b103      	cbz	r3, 8012f06 <_close_r+0x1a>
 8012f04:	6023      	str	r3, [r4, #0]
 8012f06:	bd38      	pop	{r3, r4, r5, pc}
 8012f08:	20002350 	.word	0x20002350

08012f0c <__env_lock>:
 8012f0c:	4801      	ldr	r0, [pc, #4]	; (8012f14 <__env_lock+0x8>)
 8012f0e:	f001 ba1c 	b.w	801434a <__retarget_lock_acquire_recursive>
 8012f12:	bf00      	nop
 8012f14:	20000394 	.word	0x20000394

08012f18 <__env_unlock>:
 8012f18:	4801      	ldr	r0, [pc, #4]	; (8012f20 <__env_unlock+0x8>)
 8012f1a:	f001 ba1e 	b.w	801435a <__retarget_lock_release_recursive>
 8012f1e:	bf00      	nop
 8012f20:	20000394 	.word	0x20000394

08012f24 <_fstat_r>:
 8012f24:	b538      	push	{r3, r4, r5, lr}
 8012f26:	4d07      	ldr	r5, [pc, #28]	; (8012f44 <_fstat_r+0x20>)
 8012f28:	2300      	movs	r3, #0
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	4608      	mov	r0, r1
 8012f2e:	4611      	mov	r1, r2
 8012f30:	602b      	str	r3, [r5, #0]
 8012f32:	f001 f9f5 	bl	8014320 <_fstat>
 8012f36:	1c43      	adds	r3, r0, #1
 8012f38:	d102      	bne.n	8012f40 <_fstat_r+0x1c>
 8012f3a:	682b      	ldr	r3, [r5, #0]
 8012f3c:	b103      	cbz	r3, 8012f40 <_fstat_r+0x1c>
 8012f3e:	6023      	str	r3, [r4, #0]
 8012f40:	bd38      	pop	{r3, r4, r5, pc}
 8012f42:	bf00      	nop
 8012f44:	20002350 	.word	0x20002350

08012f48 <_isatty_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4d06      	ldr	r5, [pc, #24]	; (8012f64 <_isatty_r+0x1c>)
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	4604      	mov	r4, r0
 8012f50:	4608      	mov	r0, r1
 8012f52:	602b      	str	r3, [r5, #0]
 8012f54:	f001 f9df 	bl	8014316 <_isatty>
 8012f58:	1c43      	adds	r3, r0, #1
 8012f5a:	d102      	bne.n	8012f62 <_isatty_r+0x1a>
 8012f5c:	682b      	ldr	r3, [r5, #0]
 8012f5e:	b103      	cbz	r3, 8012f62 <_isatty_r+0x1a>
 8012f60:	6023      	str	r3, [r4, #0]
 8012f62:	bd38      	pop	{r3, r4, r5, pc}
 8012f64:	20002350 	.word	0x20002350

08012f68 <_lseek_r>:
 8012f68:	b538      	push	{r3, r4, r5, lr}
 8012f6a:	4d07      	ldr	r5, [pc, #28]	; (8012f88 <_lseek_r+0x20>)
 8012f6c:	4604      	mov	r4, r0
 8012f6e:	4608      	mov	r0, r1
 8012f70:	4611      	mov	r1, r2
 8012f72:	2200      	movs	r2, #0
 8012f74:	602a      	str	r2, [r5, #0]
 8012f76:	461a      	mov	r2, r3
 8012f78:	f001 f9cb 	bl	8014312 <_lseek>
 8012f7c:	1c43      	adds	r3, r0, #1
 8012f7e:	d102      	bne.n	8012f86 <_lseek_r+0x1e>
 8012f80:	682b      	ldr	r3, [r5, #0]
 8012f82:	b103      	cbz	r3, 8012f86 <_lseek_r+0x1e>
 8012f84:	6023      	str	r3, [r4, #0]
 8012f86:	bd38      	pop	{r3, r4, r5, pc}
 8012f88:	20002350 	.word	0x20002350

08012f8c <_svfiprintf_r>:
 8012f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f90:	4698      	mov	r8, r3
 8012f92:	898b      	ldrh	r3, [r1, #12]
 8012f94:	061b      	lsls	r3, r3, #24
 8012f96:	b09d      	sub	sp, #116	; 0x74
 8012f98:	4607      	mov	r7, r0
 8012f9a:	460d      	mov	r5, r1
 8012f9c:	4614      	mov	r4, r2
 8012f9e:	d50e      	bpl.n	8012fbe <_svfiprintf_r+0x32>
 8012fa0:	690b      	ldr	r3, [r1, #16]
 8012fa2:	b963      	cbnz	r3, 8012fbe <_svfiprintf_r+0x32>
 8012fa4:	2140      	movs	r1, #64	; 0x40
 8012fa6:	f7fe f9a5 	bl	80112f4 <_malloc_r>
 8012faa:	6028      	str	r0, [r5, #0]
 8012fac:	6128      	str	r0, [r5, #16]
 8012fae:	b920      	cbnz	r0, 8012fba <_svfiprintf_r+0x2e>
 8012fb0:	230c      	movs	r3, #12
 8012fb2:	603b      	str	r3, [r7, #0]
 8012fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fb8:	e0d1      	b.n	801315e <_svfiprintf_r+0x1d2>
 8012fba:	2340      	movs	r3, #64	; 0x40
 8012fbc:	616b      	str	r3, [r5, #20]
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8012fc2:	2320      	movs	r3, #32
 8012fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012fcc:	2330      	movs	r3, #48	; 0x30
 8012fce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013178 <_svfiprintf_r+0x1ec>
 8012fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012fd6:	f04f 0901 	mov.w	r9, #1
 8012fda:	4623      	mov	r3, r4
 8012fdc:	469a      	mov	sl, r3
 8012fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fe2:	b10a      	cbz	r2, 8012fe8 <_svfiprintf_r+0x5c>
 8012fe4:	2a25      	cmp	r2, #37	; 0x25
 8012fe6:	d1f9      	bne.n	8012fdc <_svfiprintf_r+0x50>
 8012fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8012fec:	d00b      	beq.n	8013006 <_svfiprintf_r+0x7a>
 8012fee:	465b      	mov	r3, fp
 8012ff0:	4622      	mov	r2, r4
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	4638      	mov	r0, r7
 8012ff6:	f006 fc3d 	bl	8019874 <__ssputs_r>
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	f000 80aa 	beq.w	8013154 <_svfiprintf_r+0x1c8>
 8013000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013002:	445a      	add	r2, fp
 8013004:	9209      	str	r2, [sp, #36]	; 0x24
 8013006:	f89a 3000 	ldrb.w	r3, [sl]
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 80a2 	beq.w	8013154 <_svfiprintf_r+0x1c8>
 8013010:	2300      	movs	r3, #0
 8013012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801301a:	f10a 0a01 	add.w	sl, sl, #1
 801301e:	9304      	str	r3, [sp, #16]
 8013020:	9307      	str	r3, [sp, #28]
 8013022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013026:	931a      	str	r3, [sp, #104]	; 0x68
 8013028:	4654      	mov	r4, sl
 801302a:	2205      	movs	r2, #5
 801302c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013030:	4851      	ldr	r0, [pc, #324]	; (8013178 <_svfiprintf_r+0x1ec>)
 8013032:	f7ed f885 	bl	8000140 <memchr>
 8013036:	9a04      	ldr	r2, [sp, #16]
 8013038:	b9d8      	cbnz	r0, 8013072 <_svfiprintf_r+0xe6>
 801303a:	06d0      	lsls	r0, r2, #27
 801303c:	bf44      	itt	mi
 801303e:	2320      	movmi	r3, #32
 8013040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013044:	0711      	lsls	r1, r2, #28
 8013046:	bf44      	itt	mi
 8013048:	232b      	movmi	r3, #43	; 0x2b
 801304a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801304e:	f89a 3000 	ldrb.w	r3, [sl]
 8013052:	2b2a      	cmp	r3, #42	; 0x2a
 8013054:	d015      	beq.n	8013082 <_svfiprintf_r+0xf6>
 8013056:	9a07      	ldr	r2, [sp, #28]
 8013058:	4654      	mov	r4, sl
 801305a:	2000      	movs	r0, #0
 801305c:	f04f 0c0a 	mov.w	ip, #10
 8013060:	4621      	mov	r1, r4
 8013062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013066:	3b30      	subs	r3, #48	; 0x30
 8013068:	2b09      	cmp	r3, #9
 801306a:	d94e      	bls.n	801310a <_svfiprintf_r+0x17e>
 801306c:	b1b0      	cbz	r0, 801309c <_svfiprintf_r+0x110>
 801306e:	9207      	str	r2, [sp, #28]
 8013070:	e014      	b.n	801309c <_svfiprintf_r+0x110>
 8013072:	eba0 0308 	sub.w	r3, r0, r8
 8013076:	fa09 f303 	lsl.w	r3, r9, r3
 801307a:	4313      	orrs	r3, r2
 801307c:	9304      	str	r3, [sp, #16]
 801307e:	46a2      	mov	sl, r4
 8013080:	e7d2      	b.n	8013028 <_svfiprintf_r+0x9c>
 8013082:	9b03      	ldr	r3, [sp, #12]
 8013084:	1d19      	adds	r1, r3, #4
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	9103      	str	r1, [sp, #12]
 801308a:	2b00      	cmp	r3, #0
 801308c:	bfbb      	ittet	lt
 801308e:	425b      	neglt	r3, r3
 8013090:	f042 0202 	orrlt.w	r2, r2, #2
 8013094:	9307      	strge	r3, [sp, #28]
 8013096:	9307      	strlt	r3, [sp, #28]
 8013098:	bfb8      	it	lt
 801309a:	9204      	strlt	r2, [sp, #16]
 801309c:	7823      	ldrb	r3, [r4, #0]
 801309e:	2b2e      	cmp	r3, #46	; 0x2e
 80130a0:	d10c      	bne.n	80130bc <_svfiprintf_r+0x130>
 80130a2:	7863      	ldrb	r3, [r4, #1]
 80130a4:	2b2a      	cmp	r3, #42	; 0x2a
 80130a6:	d135      	bne.n	8013114 <_svfiprintf_r+0x188>
 80130a8:	9b03      	ldr	r3, [sp, #12]
 80130aa:	1d1a      	adds	r2, r3, #4
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	9203      	str	r2, [sp, #12]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	bfb8      	it	lt
 80130b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80130b8:	3402      	adds	r4, #2
 80130ba:	9305      	str	r3, [sp, #20]
 80130bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801317c <_svfiprintf_r+0x1f0>
 80130c0:	7821      	ldrb	r1, [r4, #0]
 80130c2:	2203      	movs	r2, #3
 80130c4:	4650      	mov	r0, sl
 80130c6:	f7ed f83b 	bl	8000140 <memchr>
 80130ca:	b140      	cbz	r0, 80130de <_svfiprintf_r+0x152>
 80130cc:	2340      	movs	r3, #64	; 0x40
 80130ce:	eba0 000a 	sub.w	r0, r0, sl
 80130d2:	fa03 f000 	lsl.w	r0, r3, r0
 80130d6:	9b04      	ldr	r3, [sp, #16]
 80130d8:	4303      	orrs	r3, r0
 80130da:	3401      	adds	r4, #1
 80130dc:	9304      	str	r3, [sp, #16]
 80130de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130e2:	4827      	ldr	r0, [pc, #156]	; (8013180 <_svfiprintf_r+0x1f4>)
 80130e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80130e8:	2206      	movs	r2, #6
 80130ea:	f7ed f829 	bl	8000140 <memchr>
 80130ee:	2800      	cmp	r0, #0
 80130f0:	d038      	beq.n	8013164 <_svfiprintf_r+0x1d8>
 80130f2:	4b24      	ldr	r3, [pc, #144]	; (8013184 <_svfiprintf_r+0x1f8>)
 80130f4:	bb1b      	cbnz	r3, 801313e <_svfiprintf_r+0x1b2>
 80130f6:	9b03      	ldr	r3, [sp, #12]
 80130f8:	3307      	adds	r3, #7
 80130fa:	f023 0307 	bic.w	r3, r3, #7
 80130fe:	3308      	adds	r3, #8
 8013100:	9303      	str	r3, [sp, #12]
 8013102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013104:	4433      	add	r3, r6
 8013106:	9309      	str	r3, [sp, #36]	; 0x24
 8013108:	e767      	b.n	8012fda <_svfiprintf_r+0x4e>
 801310a:	fb0c 3202 	mla	r2, ip, r2, r3
 801310e:	460c      	mov	r4, r1
 8013110:	2001      	movs	r0, #1
 8013112:	e7a5      	b.n	8013060 <_svfiprintf_r+0xd4>
 8013114:	2300      	movs	r3, #0
 8013116:	3401      	adds	r4, #1
 8013118:	9305      	str	r3, [sp, #20]
 801311a:	4619      	mov	r1, r3
 801311c:	f04f 0c0a 	mov.w	ip, #10
 8013120:	4620      	mov	r0, r4
 8013122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013126:	3a30      	subs	r2, #48	; 0x30
 8013128:	2a09      	cmp	r2, #9
 801312a:	d903      	bls.n	8013134 <_svfiprintf_r+0x1a8>
 801312c:	2b00      	cmp	r3, #0
 801312e:	d0c5      	beq.n	80130bc <_svfiprintf_r+0x130>
 8013130:	9105      	str	r1, [sp, #20]
 8013132:	e7c3      	b.n	80130bc <_svfiprintf_r+0x130>
 8013134:	fb0c 2101 	mla	r1, ip, r1, r2
 8013138:	4604      	mov	r4, r0
 801313a:	2301      	movs	r3, #1
 801313c:	e7f0      	b.n	8013120 <_svfiprintf_r+0x194>
 801313e:	ab03      	add	r3, sp, #12
 8013140:	9300      	str	r3, [sp, #0]
 8013142:	462a      	mov	r2, r5
 8013144:	4b10      	ldr	r3, [pc, #64]	; (8013188 <_svfiprintf_r+0x1fc>)
 8013146:	a904      	add	r1, sp, #16
 8013148:	4638      	mov	r0, r7
 801314a:	f3af 8000 	nop.w
 801314e:	1c42      	adds	r2, r0, #1
 8013150:	4606      	mov	r6, r0
 8013152:	d1d6      	bne.n	8013102 <_svfiprintf_r+0x176>
 8013154:	89ab      	ldrh	r3, [r5, #12]
 8013156:	065b      	lsls	r3, r3, #25
 8013158:	f53f af2c 	bmi.w	8012fb4 <_svfiprintf_r+0x28>
 801315c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801315e:	b01d      	add	sp, #116	; 0x74
 8013160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013164:	ab03      	add	r3, sp, #12
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	462a      	mov	r2, r5
 801316a:	4b07      	ldr	r3, [pc, #28]	; (8013188 <_svfiprintf_r+0x1fc>)
 801316c:	a904      	add	r1, sp, #16
 801316e:	4638      	mov	r0, r7
 8013170:	f7ff fc80 	bl	8012a74 <_printf_i>
 8013174:	e7eb      	b.n	801314e <_svfiprintf_r+0x1c2>
 8013176:	bf00      	nop
 8013178:	0801ce45 	.word	0x0801ce45
 801317c:	0801ce4b 	.word	0x0801ce4b
 8013180:	0801ce4f 	.word	0x0801ce4f
 8013184:	00000000 	.word	0x00000000
 8013188:	08019875 	.word	0x08019875

0801318c <__ssvfiscanf_r>:
 801318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013190:	460c      	mov	r4, r1
 8013192:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013196:	2100      	movs	r1, #0
 8013198:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801319c:	49a6      	ldr	r1, [pc, #664]	; (8013438 <__ssvfiscanf_r+0x2ac>)
 801319e:	91a0      	str	r1, [sp, #640]	; 0x280
 80131a0:	f10d 0804 	add.w	r8, sp, #4
 80131a4:	49a5      	ldr	r1, [pc, #660]	; (801343c <__ssvfiscanf_r+0x2b0>)
 80131a6:	4fa6      	ldr	r7, [pc, #664]	; (8013440 <__ssvfiscanf_r+0x2b4>)
 80131a8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013444 <__ssvfiscanf_r+0x2b8>
 80131ac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80131b0:	4606      	mov	r6, r0
 80131b2:	91a1      	str	r1, [sp, #644]	; 0x284
 80131b4:	9300      	str	r3, [sp, #0]
 80131b6:	7813      	ldrb	r3, [r2, #0]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	f000 815a 	beq.w	8013472 <__ssvfiscanf_r+0x2e6>
 80131be:	5dd9      	ldrb	r1, [r3, r7]
 80131c0:	f011 0108 	ands.w	r1, r1, #8
 80131c4:	f102 0501 	add.w	r5, r2, #1
 80131c8:	d019      	beq.n	80131fe <__ssvfiscanf_r+0x72>
 80131ca:	6863      	ldr	r3, [r4, #4]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	dd0f      	ble.n	80131f0 <__ssvfiscanf_r+0x64>
 80131d0:	6823      	ldr	r3, [r4, #0]
 80131d2:	781a      	ldrb	r2, [r3, #0]
 80131d4:	5cba      	ldrb	r2, [r7, r2]
 80131d6:	0712      	lsls	r2, r2, #28
 80131d8:	d401      	bmi.n	80131de <__ssvfiscanf_r+0x52>
 80131da:	462a      	mov	r2, r5
 80131dc:	e7eb      	b.n	80131b6 <__ssvfiscanf_r+0x2a>
 80131de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80131e0:	3201      	adds	r2, #1
 80131e2:	9245      	str	r2, [sp, #276]	; 0x114
 80131e4:	6862      	ldr	r2, [r4, #4]
 80131e6:	3301      	adds	r3, #1
 80131e8:	3a01      	subs	r2, #1
 80131ea:	6062      	str	r2, [r4, #4]
 80131ec:	6023      	str	r3, [r4, #0]
 80131ee:	e7ec      	b.n	80131ca <__ssvfiscanf_r+0x3e>
 80131f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131f2:	4621      	mov	r1, r4
 80131f4:	4630      	mov	r0, r6
 80131f6:	4798      	blx	r3
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d0e9      	beq.n	80131d0 <__ssvfiscanf_r+0x44>
 80131fc:	e7ed      	b.n	80131da <__ssvfiscanf_r+0x4e>
 80131fe:	2b25      	cmp	r3, #37	; 0x25
 8013200:	d012      	beq.n	8013228 <__ssvfiscanf_r+0x9c>
 8013202:	469a      	mov	sl, r3
 8013204:	6863      	ldr	r3, [r4, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	f340 8091 	ble.w	801332e <__ssvfiscanf_r+0x1a2>
 801320c:	6822      	ldr	r2, [r4, #0]
 801320e:	7813      	ldrb	r3, [r2, #0]
 8013210:	4553      	cmp	r3, sl
 8013212:	f040 812e 	bne.w	8013472 <__ssvfiscanf_r+0x2e6>
 8013216:	6863      	ldr	r3, [r4, #4]
 8013218:	3b01      	subs	r3, #1
 801321a:	6063      	str	r3, [r4, #4]
 801321c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801321e:	3201      	adds	r2, #1
 8013220:	3301      	adds	r3, #1
 8013222:	6022      	str	r2, [r4, #0]
 8013224:	9345      	str	r3, [sp, #276]	; 0x114
 8013226:	e7d8      	b.n	80131da <__ssvfiscanf_r+0x4e>
 8013228:	9141      	str	r1, [sp, #260]	; 0x104
 801322a:	9143      	str	r1, [sp, #268]	; 0x10c
 801322c:	7853      	ldrb	r3, [r2, #1]
 801322e:	2b2a      	cmp	r3, #42	; 0x2a
 8013230:	bf02      	ittt	eq
 8013232:	2310      	moveq	r3, #16
 8013234:	1c95      	addeq	r5, r2, #2
 8013236:	9341      	streq	r3, [sp, #260]	; 0x104
 8013238:	220a      	movs	r2, #10
 801323a:	46aa      	mov	sl, r5
 801323c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013240:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013244:	2b09      	cmp	r3, #9
 8013246:	d91d      	bls.n	8013284 <__ssvfiscanf_r+0xf8>
 8013248:	487e      	ldr	r0, [pc, #504]	; (8013444 <__ssvfiscanf_r+0x2b8>)
 801324a:	2203      	movs	r2, #3
 801324c:	f7ec ff78 	bl	8000140 <memchr>
 8013250:	b140      	cbz	r0, 8013264 <__ssvfiscanf_r+0xd8>
 8013252:	2301      	movs	r3, #1
 8013254:	eba0 0009 	sub.w	r0, r0, r9
 8013258:	fa03 f000 	lsl.w	r0, r3, r0
 801325c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801325e:	4318      	orrs	r0, r3
 8013260:	9041      	str	r0, [sp, #260]	; 0x104
 8013262:	4655      	mov	r5, sl
 8013264:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013268:	2b78      	cmp	r3, #120	; 0x78
 801326a:	d806      	bhi.n	801327a <__ssvfiscanf_r+0xee>
 801326c:	2b57      	cmp	r3, #87	; 0x57
 801326e:	d810      	bhi.n	8013292 <__ssvfiscanf_r+0x106>
 8013270:	2b25      	cmp	r3, #37	; 0x25
 8013272:	d0c6      	beq.n	8013202 <__ssvfiscanf_r+0x76>
 8013274:	d856      	bhi.n	8013324 <__ssvfiscanf_r+0x198>
 8013276:	2b00      	cmp	r3, #0
 8013278:	d064      	beq.n	8013344 <__ssvfiscanf_r+0x1b8>
 801327a:	2303      	movs	r3, #3
 801327c:	9347      	str	r3, [sp, #284]	; 0x11c
 801327e:	230a      	movs	r3, #10
 8013280:	9342      	str	r3, [sp, #264]	; 0x108
 8013282:	e071      	b.n	8013368 <__ssvfiscanf_r+0x1dc>
 8013284:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013286:	fb02 1103 	mla	r1, r2, r3, r1
 801328a:	3930      	subs	r1, #48	; 0x30
 801328c:	9143      	str	r1, [sp, #268]	; 0x10c
 801328e:	4655      	mov	r5, sl
 8013290:	e7d3      	b.n	801323a <__ssvfiscanf_r+0xae>
 8013292:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013296:	2a20      	cmp	r2, #32
 8013298:	d8ef      	bhi.n	801327a <__ssvfiscanf_r+0xee>
 801329a:	a101      	add	r1, pc, #4	; (adr r1, 80132a0 <__ssvfiscanf_r+0x114>)
 801329c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80132a0:	08013353 	.word	0x08013353
 80132a4:	0801327b 	.word	0x0801327b
 80132a8:	0801327b 	.word	0x0801327b
 80132ac:	080133b1 	.word	0x080133b1
 80132b0:	0801327b 	.word	0x0801327b
 80132b4:	0801327b 	.word	0x0801327b
 80132b8:	0801327b 	.word	0x0801327b
 80132bc:	0801327b 	.word	0x0801327b
 80132c0:	0801327b 	.word	0x0801327b
 80132c4:	0801327b 	.word	0x0801327b
 80132c8:	0801327b 	.word	0x0801327b
 80132cc:	080133c7 	.word	0x080133c7
 80132d0:	0801339d 	.word	0x0801339d
 80132d4:	0801332b 	.word	0x0801332b
 80132d8:	0801332b 	.word	0x0801332b
 80132dc:	0801332b 	.word	0x0801332b
 80132e0:	0801327b 	.word	0x0801327b
 80132e4:	080133a1 	.word	0x080133a1
 80132e8:	0801327b 	.word	0x0801327b
 80132ec:	0801327b 	.word	0x0801327b
 80132f0:	0801327b 	.word	0x0801327b
 80132f4:	0801327b 	.word	0x0801327b
 80132f8:	080133d7 	.word	0x080133d7
 80132fc:	080133a9 	.word	0x080133a9
 8013300:	0801334b 	.word	0x0801334b
 8013304:	0801327b 	.word	0x0801327b
 8013308:	0801327b 	.word	0x0801327b
 801330c:	080133d3 	.word	0x080133d3
 8013310:	0801327b 	.word	0x0801327b
 8013314:	0801339d 	.word	0x0801339d
 8013318:	0801327b 	.word	0x0801327b
 801331c:	0801327b 	.word	0x0801327b
 8013320:	08013353 	.word	0x08013353
 8013324:	3b45      	subs	r3, #69	; 0x45
 8013326:	2b02      	cmp	r3, #2
 8013328:	d8a7      	bhi.n	801327a <__ssvfiscanf_r+0xee>
 801332a:	2305      	movs	r3, #5
 801332c:	e01b      	b.n	8013366 <__ssvfiscanf_r+0x1da>
 801332e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013330:	4621      	mov	r1, r4
 8013332:	4630      	mov	r0, r6
 8013334:	4798      	blx	r3
 8013336:	2800      	cmp	r0, #0
 8013338:	f43f af68 	beq.w	801320c <__ssvfiscanf_r+0x80>
 801333c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801333e:	2800      	cmp	r0, #0
 8013340:	f040 808d 	bne.w	801345e <__ssvfiscanf_r+0x2d2>
 8013344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013348:	e08f      	b.n	801346a <__ssvfiscanf_r+0x2de>
 801334a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801334c:	f042 0220 	orr.w	r2, r2, #32
 8013350:	9241      	str	r2, [sp, #260]	; 0x104
 8013352:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013358:	9241      	str	r2, [sp, #260]	; 0x104
 801335a:	2210      	movs	r2, #16
 801335c:	2b6f      	cmp	r3, #111	; 0x6f
 801335e:	9242      	str	r2, [sp, #264]	; 0x108
 8013360:	bf34      	ite	cc
 8013362:	2303      	movcc	r3, #3
 8013364:	2304      	movcs	r3, #4
 8013366:	9347      	str	r3, [sp, #284]	; 0x11c
 8013368:	6863      	ldr	r3, [r4, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	dd42      	ble.n	80133f4 <__ssvfiscanf_r+0x268>
 801336e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013370:	0659      	lsls	r1, r3, #25
 8013372:	d404      	bmi.n	801337e <__ssvfiscanf_r+0x1f2>
 8013374:	6823      	ldr	r3, [r4, #0]
 8013376:	781a      	ldrb	r2, [r3, #0]
 8013378:	5cba      	ldrb	r2, [r7, r2]
 801337a:	0712      	lsls	r2, r2, #28
 801337c:	d441      	bmi.n	8013402 <__ssvfiscanf_r+0x276>
 801337e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013380:	2b02      	cmp	r3, #2
 8013382:	dc50      	bgt.n	8013426 <__ssvfiscanf_r+0x29a>
 8013384:	466b      	mov	r3, sp
 8013386:	4622      	mov	r2, r4
 8013388:	a941      	add	r1, sp, #260	; 0x104
 801338a:	4630      	mov	r0, r6
 801338c:	f000 f876 	bl	801347c <_scanf_chars>
 8013390:	2801      	cmp	r0, #1
 8013392:	d06e      	beq.n	8013472 <__ssvfiscanf_r+0x2e6>
 8013394:	2802      	cmp	r0, #2
 8013396:	f47f af20 	bne.w	80131da <__ssvfiscanf_r+0x4e>
 801339a:	e7cf      	b.n	801333c <__ssvfiscanf_r+0x1b0>
 801339c:	220a      	movs	r2, #10
 801339e:	e7dd      	b.n	801335c <__ssvfiscanf_r+0x1d0>
 80133a0:	2300      	movs	r3, #0
 80133a2:	9342      	str	r3, [sp, #264]	; 0x108
 80133a4:	2303      	movs	r3, #3
 80133a6:	e7de      	b.n	8013366 <__ssvfiscanf_r+0x1da>
 80133a8:	2308      	movs	r3, #8
 80133aa:	9342      	str	r3, [sp, #264]	; 0x108
 80133ac:	2304      	movs	r3, #4
 80133ae:	e7da      	b.n	8013366 <__ssvfiscanf_r+0x1da>
 80133b0:	4629      	mov	r1, r5
 80133b2:	4640      	mov	r0, r8
 80133b4:	f006 fb13 	bl	80199de <__sccl>
 80133b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80133ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133be:	9341      	str	r3, [sp, #260]	; 0x104
 80133c0:	4605      	mov	r5, r0
 80133c2:	2301      	movs	r3, #1
 80133c4:	e7cf      	b.n	8013366 <__ssvfiscanf_r+0x1da>
 80133c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80133c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133cc:	9341      	str	r3, [sp, #260]	; 0x104
 80133ce:	2300      	movs	r3, #0
 80133d0:	e7c9      	b.n	8013366 <__ssvfiscanf_r+0x1da>
 80133d2:	2302      	movs	r3, #2
 80133d4:	e7c7      	b.n	8013366 <__ssvfiscanf_r+0x1da>
 80133d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80133d8:	06c3      	lsls	r3, r0, #27
 80133da:	f53f aefe 	bmi.w	80131da <__ssvfiscanf_r+0x4e>
 80133de:	9b00      	ldr	r3, [sp, #0]
 80133e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80133e2:	1d19      	adds	r1, r3, #4
 80133e4:	9100      	str	r1, [sp, #0]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f010 0f01 	tst.w	r0, #1
 80133ec:	bf14      	ite	ne
 80133ee:	801a      	strhne	r2, [r3, #0]
 80133f0:	601a      	streq	r2, [r3, #0]
 80133f2:	e6f2      	b.n	80131da <__ssvfiscanf_r+0x4e>
 80133f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80133f6:	4621      	mov	r1, r4
 80133f8:	4630      	mov	r0, r6
 80133fa:	4798      	blx	r3
 80133fc:	2800      	cmp	r0, #0
 80133fe:	d0b6      	beq.n	801336e <__ssvfiscanf_r+0x1e2>
 8013400:	e79c      	b.n	801333c <__ssvfiscanf_r+0x1b0>
 8013402:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013404:	3201      	adds	r2, #1
 8013406:	9245      	str	r2, [sp, #276]	; 0x114
 8013408:	6862      	ldr	r2, [r4, #4]
 801340a:	3a01      	subs	r2, #1
 801340c:	2a00      	cmp	r2, #0
 801340e:	6062      	str	r2, [r4, #4]
 8013410:	dd02      	ble.n	8013418 <__ssvfiscanf_r+0x28c>
 8013412:	3301      	adds	r3, #1
 8013414:	6023      	str	r3, [r4, #0]
 8013416:	e7ad      	b.n	8013374 <__ssvfiscanf_r+0x1e8>
 8013418:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801341a:	4621      	mov	r1, r4
 801341c:	4630      	mov	r0, r6
 801341e:	4798      	blx	r3
 8013420:	2800      	cmp	r0, #0
 8013422:	d0a7      	beq.n	8013374 <__ssvfiscanf_r+0x1e8>
 8013424:	e78a      	b.n	801333c <__ssvfiscanf_r+0x1b0>
 8013426:	2b04      	cmp	r3, #4
 8013428:	dc0e      	bgt.n	8013448 <__ssvfiscanf_r+0x2bc>
 801342a:	466b      	mov	r3, sp
 801342c:	4622      	mov	r2, r4
 801342e:	a941      	add	r1, sp, #260	; 0x104
 8013430:	4630      	mov	r0, r6
 8013432:	f000 f87d 	bl	8013530 <_scanf_i>
 8013436:	e7ab      	b.n	8013390 <__ssvfiscanf_r+0x204>
 8013438:	0801992b 	.word	0x0801992b
 801343c:	080199a5 	.word	0x080199a5
 8013440:	0801cb91 	.word	0x0801cb91
 8013444:	0801ce4b 	.word	0x0801ce4b
 8013448:	4b0b      	ldr	r3, [pc, #44]	; (8013478 <__ssvfiscanf_r+0x2ec>)
 801344a:	2b00      	cmp	r3, #0
 801344c:	f43f aec5 	beq.w	80131da <__ssvfiscanf_r+0x4e>
 8013450:	466b      	mov	r3, sp
 8013452:	4622      	mov	r2, r4
 8013454:	a941      	add	r1, sp, #260	; 0x104
 8013456:	4630      	mov	r0, r6
 8013458:	f3af 8000 	nop.w
 801345c:	e798      	b.n	8013390 <__ssvfiscanf_r+0x204>
 801345e:	89a3      	ldrh	r3, [r4, #12]
 8013460:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013464:	bf18      	it	ne
 8013466:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801346a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801346e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013472:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013474:	e7f9      	b.n	801346a <__ssvfiscanf_r+0x2de>
 8013476:	bf00      	nop
 8013478:	00000000 	.word	0x00000000

0801347c <_scanf_chars>:
 801347c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013480:	4615      	mov	r5, r2
 8013482:	688a      	ldr	r2, [r1, #8]
 8013484:	4680      	mov	r8, r0
 8013486:	460c      	mov	r4, r1
 8013488:	b932      	cbnz	r2, 8013498 <_scanf_chars+0x1c>
 801348a:	698a      	ldr	r2, [r1, #24]
 801348c:	2a00      	cmp	r2, #0
 801348e:	bf0c      	ite	eq
 8013490:	2201      	moveq	r2, #1
 8013492:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8013496:	608a      	str	r2, [r1, #8]
 8013498:	6822      	ldr	r2, [r4, #0]
 801349a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801352c <_scanf_chars+0xb0>
 801349e:	06d1      	lsls	r1, r2, #27
 80134a0:	bf5f      	itttt	pl
 80134a2:	681a      	ldrpl	r2, [r3, #0]
 80134a4:	1d11      	addpl	r1, r2, #4
 80134a6:	6019      	strpl	r1, [r3, #0]
 80134a8:	6816      	ldrpl	r6, [r2, #0]
 80134aa:	2700      	movs	r7, #0
 80134ac:	69a0      	ldr	r0, [r4, #24]
 80134ae:	b188      	cbz	r0, 80134d4 <_scanf_chars+0x58>
 80134b0:	2801      	cmp	r0, #1
 80134b2:	d107      	bne.n	80134c4 <_scanf_chars+0x48>
 80134b4:	682b      	ldr	r3, [r5, #0]
 80134b6:	781a      	ldrb	r2, [r3, #0]
 80134b8:	6963      	ldr	r3, [r4, #20]
 80134ba:	5c9b      	ldrb	r3, [r3, r2]
 80134bc:	b953      	cbnz	r3, 80134d4 <_scanf_chars+0x58>
 80134be:	2f00      	cmp	r7, #0
 80134c0:	d031      	beq.n	8013526 <_scanf_chars+0xaa>
 80134c2:	e022      	b.n	801350a <_scanf_chars+0x8e>
 80134c4:	2802      	cmp	r0, #2
 80134c6:	d120      	bne.n	801350a <_scanf_chars+0x8e>
 80134c8:	682b      	ldr	r3, [r5, #0]
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80134d0:	071b      	lsls	r3, r3, #28
 80134d2:	d41a      	bmi.n	801350a <_scanf_chars+0x8e>
 80134d4:	6823      	ldr	r3, [r4, #0]
 80134d6:	06da      	lsls	r2, r3, #27
 80134d8:	bf5e      	ittt	pl
 80134da:	682b      	ldrpl	r3, [r5, #0]
 80134dc:	781b      	ldrbpl	r3, [r3, #0]
 80134de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80134e2:	682a      	ldr	r2, [r5, #0]
 80134e4:	686b      	ldr	r3, [r5, #4]
 80134e6:	3201      	adds	r2, #1
 80134e8:	602a      	str	r2, [r5, #0]
 80134ea:	68a2      	ldr	r2, [r4, #8]
 80134ec:	3b01      	subs	r3, #1
 80134ee:	3a01      	subs	r2, #1
 80134f0:	606b      	str	r3, [r5, #4]
 80134f2:	3701      	adds	r7, #1
 80134f4:	60a2      	str	r2, [r4, #8]
 80134f6:	b142      	cbz	r2, 801350a <_scanf_chars+0x8e>
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	dcd7      	bgt.n	80134ac <_scanf_chars+0x30>
 80134fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013500:	4629      	mov	r1, r5
 8013502:	4640      	mov	r0, r8
 8013504:	4798      	blx	r3
 8013506:	2800      	cmp	r0, #0
 8013508:	d0d0      	beq.n	80134ac <_scanf_chars+0x30>
 801350a:	6823      	ldr	r3, [r4, #0]
 801350c:	f013 0310 	ands.w	r3, r3, #16
 8013510:	d105      	bne.n	801351e <_scanf_chars+0xa2>
 8013512:	68e2      	ldr	r2, [r4, #12]
 8013514:	3201      	adds	r2, #1
 8013516:	60e2      	str	r2, [r4, #12]
 8013518:	69a2      	ldr	r2, [r4, #24]
 801351a:	b102      	cbz	r2, 801351e <_scanf_chars+0xa2>
 801351c:	7033      	strb	r3, [r6, #0]
 801351e:	6923      	ldr	r3, [r4, #16]
 8013520:	443b      	add	r3, r7
 8013522:	6123      	str	r3, [r4, #16]
 8013524:	2000      	movs	r0, #0
 8013526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801352a:	bf00      	nop
 801352c:	0801cb91 	.word	0x0801cb91

08013530 <_scanf_i>:
 8013530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013534:	4698      	mov	r8, r3
 8013536:	4b76      	ldr	r3, [pc, #472]	; (8013710 <_scanf_i+0x1e0>)
 8013538:	460c      	mov	r4, r1
 801353a:	4682      	mov	sl, r0
 801353c:	4616      	mov	r6, r2
 801353e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013542:	b087      	sub	sp, #28
 8013544:	ab03      	add	r3, sp, #12
 8013546:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801354a:	4b72      	ldr	r3, [pc, #456]	; (8013714 <_scanf_i+0x1e4>)
 801354c:	69a1      	ldr	r1, [r4, #24]
 801354e:	4a72      	ldr	r2, [pc, #456]	; (8013718 <_scanf_i+0x1e8>)
 8013550:	2903      	cmp	r1, #3
 8013552:	bf18      	it	ne
 8013554:	461a      	movne	r2, r3
 8013556:	68a3      	ldr	r3, [r4, #8]
 8013558:	9201      	str	r2, [sp, #4]
 801355a:	1e5a      	subs	r2, r3, #1
 801355c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013560:	bf88      	it	hi
 8013562:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013566:	4627      	mov	r7, r4
 8013568:	bf82      	ittt	hi
 801356a:	eb03 0905 	addhi.w	r9, r3, r5
 801356e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013572:	60a3      	strhi	r3, [r4, #8]
 8013574:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013578:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801357c:	bf98      	it	ls
 801357e:	f04f 0900 	movls.w	r9, #0
 8013582:	6023      	str	r3, [r4, #0]
 8013584:	463d      	mov	r5, r7
 8013586:	f04f 0b00 	mov.w	fp, #0
 801358a:	6831      	ldr	r1, [r6, #0]
 801358c:	ab03      	add	r3, sp, #12
 801358e:	7809      	ldrb	r1, [r1, #0]
 8013590:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013594:	2202      	movs	r2, #2
 8013596:	f7ec fdd3 	bl	8000140 <memchr>
 801359a:	b328      	cbz	r0, 80135e8 <_scanf_i+0xb8>
 801359c:	f1bb 0f01 	cmp.w	fp, #1
 80135a0:	d159      	bne.n	8013656 <_scanf_i+0x126>
 80135a2:	6862      	ldr	r2, [r4, #4]
 80135a4:	b92a      	cbnz	r2, 80135b2 <_scanf_i+0x82>
 80135a6:	6822      	ldr	r2, [r4, #0]
 80135a8:	2308      	movs	r3, #8
 80135aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135ae:	6063      	str	r3, [r4, #4]
 80135b0:	6022      	str	r2, [r4, #0]
 80135b2:	6822      	ldr	r2, [r4, #0]
 80135b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80135b8:	6022      	str	r2, [r4, #0]
 80135ba:	68a2      	ldr	r2, [r4, #8]
 80135bc:	1e51      	subs	r1, r2, #1
 80135be:	60a1      	str	r1, [r4, #8]
 80135c0:	b192      	cbz	r2, 80135e8 <_scanf_i+0xb8>
 80135c2:	6832      	ldr	r2, [r6, #0]
 80135c4:	1c51      	adds	r1, r2, #1
 80135c6:	6031      	str	r1, [r6, #0]
 80135c8:	7812      	ldrb	r2, [r2, #0]
 80135ca:	f805 2b01 	strb.w	r2, [r5], #1
 80135ce:	6872      	ldr	r2, [r6, #4]
 80135d0:	3a01      	subs	r2, #1
 80135d2:	2a00      	cmp	r2, #0
 80135d4:	6072      	str	r2, [r6, #4]
 80135d6:	dc07      	bgt.n	80135e8 <_scanf_i+0xb8>
 80135d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80135dc:	4631      	mov	r1, r6
 80135de:	4650      	mov	r0, sl
 80135e0:	4790      	blx	r2
 80135e2:	2800      	cmp	r0, #0
 80135e4:	f040 8085 	bne.w	80136f2 <_scanf_i+0x1c2>
 80135e8:	f10b 0b01 	add.w	fp, fp, #1
 80135ec:	f1bb 0f03 	cmp.w	fp, #3
 80135f0:	d1cb      	bne.n	801358a <_scanf_i+0x5a>
 80135f2:	6863      	ldr	r3, [r4, #4]
 80135f4:	b90b      	cbnz	r3, 80135fa <_scanf_i+0xca>
 80135f6:	230a      	movs	r3, #10
 80135f8:	6063      	str	r3, [r4, #4]
 80135fa:	6863      	ldr	r3, [r4, #4]
 80135fc:	4947      	ldr	r1, [pc, #284]	; (801371c <_scanf_i+0x1ec>)
 80135fe:	6960      	ldr	r0, [r4, #20]
 8013600:	1ac9      	subs	r1, r1, r3
 8013602:	f006 f9ec 	bl	80199de <__sccl>
 8013606:	f04f 0b00 	mov.w	fp, #0
 801360a:	68a3      	ldr	r3, [r4, #8]
 801360c:	6822      	ldr	r2, [r4, #0]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d03d      	beq.n	801368e <_scanf_i+0x15e>
 8013612:	6831      	ldr	r1, [r6, #0]
 8013614:	6960      	ldr	r0, [r4, #20]
 8013616:	f891 c000 	ldrb.w	ip, [r1]
 801361a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801361e:	2800      	cmp	r0, #0
 8013620:	d035      	beq.n	801368e <_scanf_i+0x15e>
 8013622:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013626:	d124      	bne.n	8013672 <_scanf_i+0x142>
 8013628:	0510      	lsls	r0, r2, #20
 801362a:	d522      	bpl.n	8013672 <_scanf_i+0x142>
 801362c:	f10b 0b01 	add.w	fp, fp, #1
 8013630:	f1b9 0f00 	cmp.w	r9, #0
 8013634:	d003      	beq.n	801363e <_scanf_i+0x10e>
 8013636:	3301      	adds	r3, #1
 8013638:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801363c:	60a3      	str	r3, [r4, #8]
 801363e:	6873      	ldr	r3, [r6, #4]
 8013640:	3b01      	subs	r3, #1
 8013642:	2b00      	cmp	r3, #0
 8013644:	6073      	str	r3, [r6, #4]
 8013646:	dd1b      	ble.n	8013680 <_scanf_i+0x150>
 8013648:	6833      	ldr	r3, [r6, #0]
 801364a:	3301      	adds	r3, #1
 801364c:	6033      	str	r3, [r6, #0]
 801364e:	68a3      	ldr	r3, [r4, #8]
 8013650:	3b01      	subs	r3, #1
 8013652:	60a3      	str	r3, [r4, #8]
 8013654:	e7d9      	b.n	801360a <_scanf_i+0xda>
 8013656:	f1bb 0f02 	cmp.w	fp, #2
 801365a:	d1ae      	bne.n	80135ba <_scanf_i+0x8a>
 801365c:	6822      	ldr	r2, [r4, #0]
 801365e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013662:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013666:	d1bf      	bne.n	80135e8 <_scanf_i+0xb8>
 8013668:	2310      	movs	r3, #16
 801366a:	6063      	str	r3, [r4, #4]
 801366c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013670:	e7a2      	b.n	80135b8 <_scanf_i+0x88>
 8013672:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013676:	6022      	str	r2, [r4, #0]
 8013678:	780b      	ldrb	r3, [r1, #0]
 801367a:	f805 3b01 	strb.w	r3, [r5], #1
 801367e:	e7de      	b.n	801363e <_scanf_i+0x10e>
 8013680:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013684:	4631      	mov	r1, r6
 8013686:	4650      	mov	r0, sl
 8013688:	4798      	blx	r3
 801368a:	2800      	cmp	r0, #0
 801368c:	d0df      	beq.n	801364e <_scanf_i+0x11e>
 801368e:	6823      	ldr	r3, [r4, #0]
 8013690:	05db      	lsls	r3, r3, #23
 8013692:	d50d      	bpl.n	80136b0 <_scanf_i+0x180>
 8013694:	42bd      	cmp	r5, r7
 8013696:	d909      	bls.n	80136ac <_scanf_i+0x17c>
 8013698:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801369c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136a0:	4632      	mov	r2, r6
 80136a2:	4650      	mov	r0, sl
 80136a4:	4798      	blx	r3
 80136a6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80136aa:	464d      	mov	r5, r9
 80136ac:	42bd      	cmp	r5, r7
 80136ae:	d02d      	beq.n	801370c <_scanf_i+0x1dc>
 80136b0:	6822      	ldr	r2, [r4, #0]
 80136b2:	f012 0210 	ands.w	r2, r2, #16
 80136b6:	d113      	bne.n	80136e0 <_scanf_i+0x1b0>
 80136b8:	702a      	strb	r2, [r5, #0]
 80136ba:	6863      	ldr	r3, [r4, #4]
 80136bc:	9e01      	ldr	r6, [sp, #4]
 80136be:	4639      	mov	r1, r7
 80136c0:	4650      	mov	r0, sl
 80136c2:	47b0      	blx	r6
 80136c4:	6821      	ldr	r1, [r4, #0]
 80136c6:	f8d8 3000 	ldr.w	r3, [r8]
 80136ca:	f011 0f20 	tst.w	r1, #32
 80136ce:	d013      	beq.n	80136f8 <_scanf_i+0x1c8>
 80136d0:	1d1a      	adds	r2, r3, #4
 80136d2:	f8c8 2000 	str.w	r2, [r8]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	6018      	str	r0, [r3, #0]
 80136da:	68e3      	ldr	r3, [r4, #12]
 80136dc:	3301      	adds	r3, #1
 80136de:	60e3      	str	r3, [r4, #12]
 80136e0:	1bed      	subs	r5, r5, r7
 80136e2:	44ab      	add	fp, r5
 80136e4:	6925      	ldr	r5, [r4, #16]
 80136e6:	445d      	add	r5, fp
 80136e8:	6125      	str	r5, [r4, #16]
 80136ea:	2000      	movs	r0, #0
 80136ec:	b007      	add	sp, #28
 80136ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f2:	f04f 0b00 	mov.w	fp, #0
 80136f6:	e7ca      	b.n	801368e <_scanf_i+0x15e>
 80136f8:	1d1a      	adds	r2, r3, #4
 80136fa:	f8c8 2000 	str.w	r2, [r8]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	f011 0f01 	tst.w	r1, #1
 8013704:	bf14      	ite	ne
 8013706:	8018      	strhne	r0, [r3, #0]
 8013708:	6018      	streq	r0, [r3, #0]
 801370a:	e7e6      	b.n	80136da <_scanf_i+0x1aa>
 801370c:	2001      	movs	r0, #1
 801370e:	e7ed      	b.n	80136ec <_scanf_i+0x1bc>
 8013710:	0801a150 	.word	0x0801a150
 8013714:	080195a1 	.word	0x080195a1
 8013718:	08019a4f 	.word	0x08019a4f
 801371c:	0801ce8e 	.word	0x0801ce8e

08013720 <_read_r>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	4d07      	ldr	r5, [pc, #28]	; (8013740 <_read_r+0x20>)
 8013724:	4604      	mov	r4, r0
 8013726:	4608      	mov	r0, r1
 8013728:	4611      	mov	r1, r2
 801372a:	2200      	movs	r2, #0
 801372c:	602a      	str	r2, [r5, #0]
 801372e:	461a      	mov	r2, r3
 8013730:	f000 fde4 	bl	80142fc <_read>
 8013734:	1c43      	adds	r3, r0, #1
 8013736:	d102      	bne.n	801373e <_read_r+0x1e>
 8013738:	682b      	ldr	r3, [r5, #0]
 801373a:	b103      	cbz	r3, 801373e <_read_r+0x1e>
 801373c:	6023      	str	r3, [r4, #0]
 801373e:	bd38      	pop	{r3, r4, r5, pc}
 8013740:	20002350 	.word	0x20002350

08013744 <_strtol_l.constprop.0>:
 8013744:	2b01      	cmp	r3, #1
 8013746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801374a:	4680      	mov	r8, r0
 801374c:	d001      	beq.n	8013752 <_strtol_l.constprop.0+0xe>
 801374e:	2b24      	cmp	r3, #36	; 0x24
 8013750:	d906      	bls.n	8013760 <_strtol_l.constprop.0+0x1c>
 8013752:	f000 fe04 	bl	801435e <__errno>
 8013756:	2316      	movs	r3, #22
 8013758:	6003      	str	r3, [r0, #0]
 801375a:	2000      	movs	r0, #0
 801375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013760:	4f35      	ldr	r7, [pc, #212]	; (8013838 <_strtol_l.constprop.0+0xf4>)
 8013762:	460d      	mov	r5, r1
 8013764:	4628      	mov	r0, r5
 8013766:	f815 4b01 	ldrb.w	r4, [r5], #1
 801376a:	5de6      	ldrb	r6, [r4, r7]
 801376c:	f016 0608 	ands.w	r6, r6, #8
 8013770:	d1f8      	bne.n	8013764 <_strtol_l.constprop.0+0x20>
 8013772:	2c2d      	cmp	r4, #45	; 0x2d
 8013774:	d12f      	bne.n	80137d6 <_strtol_l.constprop.0+0x92>
 8013776:	782c      	ldrb	r4, [r5, #0]
 8013778:	2601      	movs	r6, #1
 801377a:	1c85      	adds	r5, r0, #2
 801377c:	2b00      	cmp	r3, #0
 801377e:	d057      	beq.n	8013830 <_strtol_l.constprop.0+0xec>
 8013780:	2b10      	cmp	r3, #16
 8013782:	d109      	bne.n	8013798 <_strtol_l.constprop.0+0x54>
 8013784:	2c30      	cmp	r4, #48	; 0x30
 8013786:	d107      	bne.n	8013798 <_strtol_l.constprop.0+0x54>
 8013788:	7828      	ldrb	r0, [r5, #0]
 801378a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801378e:	2858      	cmp	r0, #88	; 0x58
 8013790:	d149      	bne.n	8013826 <_strtol_l.constprop.0+0xe2>
 8013792:	786c      	ldrb	r4, [r5, #1]
 8013794:	2310      	movs	r3, #16
 8013796:	3502      	adds	r5, #2
 8013798:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 801379c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80137a0:	2700      	movs	r7, #0
 80137a2:	fbbe f9f3 	udiv	r9, lr, r3
 80137a6:	4638      	mov	r0, r7
 80137a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80137ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80137b0:	f1bc 0f09 	cmp.w	ip, #9
 80137b4:	d814      	bhi.n	80137e0 <_strtol_l.constprop.0+0x9c>
 80137b6:	4664      	mov	r4, ip
 80137b8:	42a3      	cmp	r3, r4
 80137ba:	dd22      	ble.n	8013802 <_strtol_l.constprop.0+0xbe>
 80137bc:	2f00      	cmp	r7, #0
 80137be:	db1d      	blt.n	80137fc <_strtol_l.constprop.0+0xb8>
 80137c0:	4581      	cmp	r9, r0
 80137c2:	d31b      	bcc.n	80137fc <_strtol_l.constprop.0+0xb8>
 80137c4:	d101      	bne.n	80137ca <_strtol_l.constprop.0+0x86>
 80137c6:	45a2      	cmp	sl, r4
 80137c8:	db18      	blt.n	80137fc <_strtol_l.constprop.0+0xb8>
 80137ca:	fb00 4003 	mla	r0, r0, r3, r4
 80137ce:	2701      	movs	r7, #1
 80137d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137d4:	e7ea      	b.n	80137ac <_strtol_l.constprop.0+0x68>
 80137d6:	2c2b      	cmp	r4, #43	; 0x2b
 80137d8:	bf04      	itt	eq
 80137da:	782c      	ldrbeq	r4, [r5, #0]
 80137dc:	1c85      	addeq	r5, r0, #2
 80137de:	e7cd      	b.n	801377c <_strtol_l.constprop.0+0x38>
 80137e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80137e4:	f1bc 0f19 	cmp.w	ip, #25
 80137e8:	d801      	bhi.n	80137ee <_strtol_l.constprop.0+0xaa>
 80137ea:	3c37      	subs	r4, #55	; 0x37
 80137ec:	e7e4      	b.n	80137b8 <_strtol_l.constprop.0+0x74>
 80137ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80137f2:	f1bc 0f19 	cmp.w	ip, #25
 80137f6:	d804      	bhi.n	8013802 <_strtol_l.constprop.0+0xbe>
 80137f8:	3c57      	subs	r4, #87	; 0x57
 80137fa:	e7dd      	b.n	80137b8 <_strtol_l.constprop.0+0x74>
 80137fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013800:	e7e6      	b.n	80137d0 <_strtol_l.constprop.0+0x8c>
 8013802:	2f00      	cmp	r7, #0
 8013804:	da07      	bge.n	8013816 <_strtol_l.constprop.0+0xd2>
 8013806:	2322      	movs	r3, #34	; 0x22
 8013808:	f8c8 3000 	str.w	r3, [r8]
 801380c:	4670      	mov	r0, lr
 801380e:	2a00      	cmp	r2, #0
 8013810:	d0a4      	beq.n	801375c <_strtol_l.constprop.0+0x18>
 8013812:	1e69      	subs	r1, r5, #1
 8013814:	e005      	b.n	8013822 <_strtol_l.constprop.0+0xde>
 8013816:	b106      	cbz	r6, 801381a <_strtol_l.constprop.0+0xd6>
 8013818:	4240      	negs	r0, r0
 801381a:	2a00      	cmp	r2, #0
 801381c:	d09e      	beq.n	801375c <_strtol_l.constprop.0+0x18>
 801381e:	2f00      	cmp	r7, #0
 8013820:	d1f7      	bne.n	8013812 <_strtol_l.constprop.0+0xce>
 8013822:	6011      	str	r1, [r2, #0]
 8013824:	e79a      	b.n	801375c <_strtol_l.constprop.0+0x18>
 8013826:	2430      	movs	r4, #48	; 0x30
 8013828:	2b00      	cmp	r3, #0
 801382a:	d1b5      	bne.n	8013798 <_strtol_l.constprop.0+0x54>
 801382c:	2308      	movs	r3, #8
 801382e:	e7b3      	b.n	8013798 <_strtol_l.constprop.0+0x54>
 8013830:	2c30      	cmp	r4, #48	; 0x30
 8013832:	d0a9      	beq.n	8013788 <_strtol_l.constprop.0+0x44>
 8013834:	230a      	movs	r3, #10
 8013836:	e7af      	b.n	8013798 <_strtol_l.constprop.0+0x54>
 8013838:	0801cb91 	.word	0x0801cb91

0801383c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 801383c:	4770      	bx	lr

0801383e <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
 801383e:	6883      	ldr	r3, [r0, #8]
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	4718      	bx	r3

08013844 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8013844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8013846:	ab0b      	add	r3, sp, #44	; 0x2c
 8013848:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 801384a:	9303      	str	r3, [sp, #12]
 801384c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801384e:	9302      	str	r3, [sp, #8]
 8013850:	2300      	movs	r3, #0
 8013852:	e9cd 3300 	strd	r3, r3, [sp]
 8013856:	4618      	mov	r0, r3
 8013858:	f7f1 f880 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 801385c:	b007      	add	sp, #28
 801385e:	f85d fb04 	ldr.w	pc, [sp], #4

08013862 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8013862:	2300      	movs	r3, #0
 8013864:	f000 bcb5 	b.w	80141d2 <z_impl_z_log_msg2_static_create>

08013868 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8013868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 801386a:	ab0b      	add	r3, sp, #44	; 0x2c
 801386c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 801386e:	9303      	str	r3, [sp, #12]
 8013870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013872:	9302      	str	r3, [sp, #8]
 8013874:	2300      	movs	r3, #0
 8013876:	e9cd 3300 	strd	r3, r3, [sp]
 801387a:	4618      	mov	r0, r3
 801387c:	f7f1 f86e 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 8013880:	b007      	add	sp, #28
 8013882:	f85d fb04 	ldr.w	pc, [sp], #4

08013886 <k_msleep.isra.0>:
			return t * ((uint64_t)to_hz / from_hz);
 8013886:	210a      	movs	r1, #10
 8013888:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 801388c:	f7fd b8d4 	b.w	8010a38 <z_impl_k_sleep>

08013890 <i2c_write.isra.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
 8013890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
 8013892:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8013896:	2202      	movs	r2, #2
 8013898:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 801389c:	6882      	ldr	r2, [r0, #8]
 801389e:	a901      	add	r1, sp, #4
 80138a0:	6894      	ldr	r4, [r2, #8]
 80138a2:	2201      	movs	r2, #1
 80138a4:	47a0      	blx	r4
}
 80138a6:	b004      	add	sp, #16
 80138a8:	bd10      	pop	{r4, pc}

080138aa <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 80138aa:	2300      	movs	r3, #0
 80138ac:	f000 bc91 	b.w	80141d2 <z_impl_z_log_msg2_static_create>

080138b0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 80138b0:	b510      	push	{r4, lr}
 80138b2:	b086      	sub	sp, #24
	va_start(ap, fmt);
 80138b4:	a80b      	add	r0, sp, #44	; 0x2c
 80138b6:	9005      	str	r0, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 80138b8:	9003      	str	r0, [sp, #12]
 80138ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80138bc:	9c08      	ldr	r4, [sp, #32]
 80138be:	9002      	str	r0, [sp, #8]
 80138c0:	2000      	movs	r0, #0
 80138c2:	9001      	str	r0, [sp, #4]
 80138c4:	9400      	str	r4, [sp, #0]
 80138c6:	f7f1 f849 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 80138ca:	b006      	add	sp, #24
 80138cc:	bd10      	pop	{r4, pc}

080138ce <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 80138ce:	4603      	mov	r3, r0
 80138d0:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 80138d2:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80138d4:	7919      	ldrb	r1, [r3, #4]
 80138d6:	2301      	movs	r3, #1
 80138d8:	fa03 f101 	lsl.w	r1, r3, r1
 80138dc:	6903      	ldr	r3, [r0, #16]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 80138e2:	bf18      	it	ne
 80138e4:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 80138e8:	b112      	cbz	r2, 80138f0 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 80138ea:	6883      	ldr	r3, [r0, #8]
 80138ec:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80138ee:	4718      	bx	r3
 80138f0:	6883      	ldr	r3, [r0, #8]
 80138f2:	691b      	ldr	r3, [r3, #16]
 80138f4:	e7fb      	b.n	80138ee <gpio_pin_set_dt.isra.0+0x20>

080138f6 <gpio_pin_configure.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
 80138f6:	b4f0      	push	{r4, r5, r6, r7}
 80138f8:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80138fa:	02d4      	lsls	r4, r2, #11
	const struct gpio_driver_api *api =
 80138fc:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 80138fe:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8013900:	d506      	bpl.n	8013910 <gpio_pin_configure.isra.0+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8013902:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 8013906:	d003      	beq.n	8013910 <gpio_pin_configure.isra.0+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8013908:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 801390a:	bf48      	it	mi
 801390c:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8013910:	6834      	ldr	r4, [r6, #0]
 8013912:	2501      	movs	r5, #1
 8013914:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8013916:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 801391a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 801391c:	bf4c      	ite	mi
 801391e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8013920:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
 8013926:	bcf0      	pop	{r4, r5, r6, r7}
 8013928:	4718      	bx	r3

0801392a <k_msleep.isra.0>:
 801392a:	210a      	movs	r1, #10
 801392c:	fb80 0101 	smull	r0, r1, r0, r1
 8013930:	f7fd b882 	b.w	8010a38 <z_impl_k_sleep>

08013934 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8013934:	2300      	movs	r3, #0
 8013936:	f000 bc4c 	b.w	80141d2 <z_impl_z_log_msg2_static_create>

0801393a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 801393a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 801393c:	ab0b      	add	r3, sp, #44	; 0x2c
 801393e:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8013940:	9303      	str	r3, [sp, #12]
 8013942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013944:	9302      	str	r3, [sp, #8]
 8013946:	2300      	movs	r3, #0
 8013948:	e9cd 3300 	strd	r3, r3, [sp]
 801394c:	2203      	movs	r2, #3
 801394e:	4618      	mov	r0, r3
 8013950:	f7f1 f804 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 8013954:	b007      	add	sp, #28
 8013956:	f85d fb04 	ldr.w	pc, [sp], #4

0801395a <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801395a:	2301      	movs	r3, #1
 801395c:	fa03 f101 	lsl.w	r1, r3, r1
 8013960:	6903      	ldr	r3, [r0, #16]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8013966:	bf18      	it	ne
 8013968:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 801396c:	b112      	cbz	r2, 8013974 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 801396e:	6883      	ldr	r3, [r0, #8]
 8013970:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8013972:	4718      	bx	r3
 8013974:	6883      	ldr	r3, [r0, #8]
 8013976:	691b      	ldr	r3, [r3, #16]
 8013978:	e7fb      	b.n	8013972 <gpio_pin_set.isra.0+0x18>

0801397a <gpio_pin_configure.isra.0>:
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
 801397a:	b470      	push	{r4, r5, r6}
	struct gpio_driver_data *data =
 801397c:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
 801397e:	6886      	ldr	r6, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8013980:	2301      	movs	r3, #1
 8013982:	fa03 f401 	lsl.w	r4, r3, r1
 8013986:	682b      	ldr	r3, [r5, #0]
 8013988:	ea23 0304 	bic.w	r3, r3, r4
 801398c:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 801398e:	6833      	ldr	r3, [r6, #0]
}
 8013990:	bc70      	pop	{r4, r5, r6}
 8013992:	4718      	bx	r3

08013994 <k_usleep.isra.0>:
	return z_impl_k_usleep(us);
 8013994:	f005 bb8c 	b.w	80190b0 <z_impl_k_usleep>

08013998 <k_msleep.isra.0>:
 8013998:	210a      	movs	r1, #10
 801399a:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 801399e:	f7fd b84b 	b.w	8010a38 <z_impl_k_sleep>

080139a2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 80139a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 80139a4:	ab0b      	add	r3, sp, #44	; 0x2c
 80139a6:	9305      	str	r3, [sp, #20]
 80139a8:	9303      	str	r3, [sp, #12]
 80139aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ac:	9302      	str	r3, [sp, #8]
 80139ae:	2300      	movs	r3, #0
 80139b0:	e9cd 3300 	strd	r3, r3, [sp]
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7f0 ffd1 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 80139ba:	b007      	add	sp, #28
 80139bc:	f85d fb04 	ldr.w	pc, [sp], #4

080139c0 <str_out>:
	if (scp->dp < scp->dpe) {
 80139c0:	e9d1 3200 	ldrd	r3, r2, [r1]
 80139c4:	4293      	cmp	r3, r2
		*(scp->dp++) = c;
 80139c6:	bf3e      	ittt	cc
 80139c8:	1c5a      	addcc	r2, r3, #1
 80139ca:	600a      	strcc	r2, [r1, #0]
 80139cc:	7018      	strbcc	r0, [r3, #0]
}
 80139ce:	4770      	bx	lr

080139d0 <snprintfcb>:
{
 80139d0:	b40c      	push	{r2, r3}
 80139d2:	b507      	push	{r0, r1, r2, lr}
 80139d4:	ab04      	add	r3, sp, #16
 80139d6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, format);
 80139da:	9301      	str	r3, [sp, #4]
	rc = vsnprintfcb(str, size, format, ap);
 80139dc:	f7ef f9fe 	bl	8002ddc <vsnprintfcb>
}
 80139e0:	b003      	add	sp, #12
 80139e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80139e6:	b002      	add	sp, #8
 80139e8:	4770      	bx	lr

080139ea <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
 80139ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139ee:	4607      	mov	r7, r0
 80139f0:	460e      	mov	r6, r1
 80139f2:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
 80139f4:	461d      	mov	r5, r3
 80139f6:	b30b      	cbz	r3, 8013a3c <cbpprintf_external+0x52>
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
	rws_nbr   = buf[3];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 80139f8:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
 80139fa:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
 80139fc:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
 8013a00:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 8013a02:	441c      	add	r4, r3
 8013a04:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8013a08:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 8013a0a:	f04f 0900 	mov.w	r9, #0
 8013a0e:	45d1      	cmp	r9, sl
 8013a10:	d308      	bcc.n	8013a24 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
 8013a12:	686a      	ldr	r2, [r5, #4]
 8013a14:	f105 0308 	add.w	r3, r5, #8
 8013a18:	4641      	mov	r1, r8
 8013a1a:	4638      	mov	r0, r7
 8013a1c:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
 8013a1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 8013a22:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 8013a24:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
 8013a28:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	f7ed fcca 	bl	80013c6 <strlen>
 8013a32:	3001      	adds	r0, #1
 8013a34:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 8013a36:	f109 0901 	add.w	r9, r9, #1
 8013a3a:	e7e8      	b.n	8013a0e <cbpprintf_external+0x24>
}
 8013a3c:	f06f 0015 	mvn.w	r0, #21
 8013a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013a44 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
 8013a44:	440a      	add	r2, r1
 8013a46:	428a      	cmp	r2, r1
 8013a48:	d100      	bne.n	8013a4c <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
 8013a4a:	4770      	bx	lr
		seed ^= *src++;
 8013a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a50:	ba40      	rev16	r0, r0
 8013a52:	b280      	uxth	r0, r0
 8013a54:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
 8013a56:	f3c0 1303 	ubfx	r3, r0, #4, #4
 8013a5a:	4058      	eors	r0, r3
		seed ^= seed << 12U;
 8013a5c:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
 8013a60:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
 8013a62:	0158      	lsls	r0, r3, #5
 8013a64:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
 8013a68:	4058      	eors	r0, r3
	for (; len > 0; len--) {
 8013a6a:	e7ec      	b.n	8013a46 <crc16_itu_t+0x2>

08013a6c <crc8>:
	return val;
}

uint8_t crc8(const uint8_t *src, size_t len, uint8_t polynomial, uint8_t initial_value,
	  bool reversed)
{
 8013a6c:	b570      	push	{r4, r5, r6, lr}
 8013a6e:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8013a72:	4604      	mov	r4, r0
 8013a74:	4401      	add	r1, r0
	uint8_t crc = initial_value;
 8013a76:	4618      	mov	r0, r3
	size_t i, j;

	for (i = 0; i < len; i++) {
 8013a78:	428c      	cmp	r4, r1
 8013a7a:	d100      	bne.n	8013a7e <crc8+0x12>
			}
		}
	}

	return crc;
}
 8013a7c:	bd70      	pop	{r4, r5, r6, pc}
		crc ^= src[i];
 8013a7e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013a82:	2508      	movs	r5, #8
 8013a84:	4058      	eors	r0, r3
			if (reversed) {
 8013a86:	b14e      	cbz	r6, 8013a9c <crc8+0x30>
				if (crc & 0x01) {
 8013a88:	f000 0301 	and.w	r3, r0, #1
					crc = (crc >> 1) ^ polynomial;
 8013a8c:	0840      	lsrs	r0, r0, #1
				if (crc & 0x01) {
 8013a8e:	b113      	cbz	r3, 8013a96 <crc8+0x2a>
					crc = (crc >> 1) ^ polynomial;
 8013a90:	ea80 0302 	eor.w	r3, r0, r2
 8013a94:	b2d8      	uxtb	r0, r3
		for (j = 0; j < 8; j++) {
 8013a96:	3d01      	subs	r5, #1
 8013a98:	d1f5      	bne.n	8013a86 <crc8+0x1a>
 8013a9a:	e7ed      	b.n	8013a78 <crc8+0xc>
				if (crc & 0x80) {
 8013a9c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013aa0:	ea4f 0040 	mov.w	r0, r0, lsl #1
					crc = (crc << 1) ^ polynomial;
 8013aa4:	bf18      	it	ne
 8013aa6:	4050      	eorne	r0, r2
					crc <<= 1;
 8013aa8:	b2c0      	uxtb	r0, r0
 8013aaa:	e7f4      	b.n	8013a96 <crc8+0x2a>

08013aac <crc7_be>:

#include <sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
 8013aac:	440a      	add	r2, r1
 8013aae:	4291      	cmp	r1, r2
 8013ab0:	d100      	bne.n	8013ab4 <crc7_be+0x8>

		seed = (f << 1) ^ (f << 4);
	}

	return seed;
}
 8013ab2:	4770      	bx	lr
		uint8_t e = seed ^ *src++;
 8013ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ab8:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
 8013aba:	09c3      	lsrs	r3, r0, #7
 8013abc:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
		seed = (f << 1) ^ (f << 4);
 8013ac0:	4058      	eors	r0, r3
 8013ac2:	0103      	lsls	r3, r0, #4
 8013ac4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
 8013ac8:	b2c0      	uxtb	r0, r0
 8013aca:	e7f0      	b.n	8013aae <crc7_be+0x2>

08013acc <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 8013acc:	6842      	ldr	r2, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
 8013ace:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 8013ad2:	2a02      	cmp	r2, #2
{
 8013ad4:	b510      	push	{r4, lr}
 8013ad6:	4603      	mov	r3, r0
	notify->result = res;
 8013ad8:	6081      	str	r1, [r0, #8]
	switch (method) {
 8013ada:	d00a      	beq.n	8013af2 <sys_notify_finalize+0x26>
 8013adc:	2a03      	cmp	r2, #3
 8013ade:	d10b      	bne.n	8013af8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 8013ae0:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
 8013ae2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
 8013ae8:	b108      	cbz	r0, 8013aee <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
 8013aea:	f7fd fa95 	bl	8011018 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 8013aee:	4620      	mov	r0, r4
 8013af0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
 8013af2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
 8013af4:	2400      	movs	r4, #0
		break;
 8013af6:	e7f5      	b.n	8013ae4 <sys_notify_finalize+0x18>
	switch (method) {
 8013af8:	2400      	movs	r4, #0
 8013afa:	4620      	mov	r0, r4
 8013afc:	e7f2      	b.n	8013ae4 <sys_notify_finalize+0x18>

08013afe <arch_printk_char_out>:
}
 8013afe:	2000      	movs	r0, #0
 8013b00:	4770      	bx	lr

08013b02 <str_out>:
{
 8013b02:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8013b04:	688a      	ldr	r2, [r1, #8]
 8013b06:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8013b08:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8013b0a:	b114      	cbz	r4, 8013b12 <str_out+0x10>
 8013b0c:	684b      	ldr	r3, [r1, #4]
 8013b0e:	4293      	cmp	r3, r2
 8013b10:	dc01      	bgt.n	8013b16 <str_out+0x14>
		ctx->count++;
 8013b12:	608d      	str	r5, [r1, #8]
}
 8013b14:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 8013b16:	3b01      	subs	r3, #1
 8013b18:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8013b1a:	bf08      	it	eq
 8013b1c:	2200      	moveq	r2, #0
 8013b1e:	608d      	str	r5, [r1, #8]
 8013b20:	bf0c      	ite	eq
 8013b22:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8013b24:	54a0      	strbne	r0, [r4, r2]
 8013b26:	e7f5      	b.n	8013b14 <str_out+0x12>

08013b28 <printk>:
{
 8013b28:	b40f      	push	{r0, r1, r2, r3}
 8013b2a:	b507      	push	{r0, r1, r2, lr}
 8013b2c:	a904      	add	r1, sp, #16
 8013b2e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8013b32:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 8013b34:	f7ef fbac 	bl	8003290 <vprintk>
}
 8013b38:	b003      	add	sp, #12
 8013b3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b3e:	b004      	add	sp, #16
 8013b40:	4770      	bx	lr

08013b42 <snprintk>:
{
 8013b42:	b40c      	push	{r2, r3}
 8013b44:	b507      	push	{r0, r1, r2, lr}
 8013b46:	ab04      	add	r3, sp, #16
 8013b48:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8013b4c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8013b4e:	f7ef fbad 	bl	80032ac <vsnprintk>
}
 8013b52:	b003      	add	sp, #12
 8013b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b58:	b002      	add	sp, #8
 8013b5a:	4770      	bx	lr

08013b5c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	b508      	push	{r3, lr}
 8013b60:	4608      	mov	r0, r1
 8013b62:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8013b64:	461a      	mov	r2, r3
 8013b66:	47a0      	blx	r4
	return z_impl_z_current_get();
 8013b68:	f7fc ff7e 	bl	8010a68 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8013b6c:	f7f1 fc52 	bl	8005414 <z_impl_k_thread_abort>

08013b70 <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
 8013b70:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
 8013b72:	f7ef fbaf 	bl	80032d4 <timeutil_timegm64>
 8013b76:	4605      	mov	r5, r0
 8013b78:	460c      	mov	r4, r1
	time_t rv = (time_t)time;

	errno = 0;
 8013b7a:	f000 fbf0 	bl	801435e <__errno>
 8013b7e:	2300      	movs	r3, #0
 8013b80:	6003      	str	r3, [r0, #0]
		errno = ERANGE;
		rv = -1;
	}

	return rv;
}
 8013b82:	4621      	mov	r1, r4
 8013b84:	4628      	mov	r0, r5
 8013b86:	bd38      	pop	{r3, r4, r5, pc}

08013b88 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 8013b88:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8013b8c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
 8013b8e:	0840      	lsrs	r0, r0, #1
 8013b90:	4770      	bx	lr

08013b92 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8013b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b94:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8013b96:	f7ff fff7 	bl	8013b88 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 8013b9a:	fab0 f080 	clz	r0, r0
 8013b9e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 8013ba2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
 8013ba6:	00ca      	lsls	r2, r1, #3
 8013ba8:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
 8013bac:	1d17      	adds	r7, r2, #4
{
 8013bae:	460c      	mov	r4, r1
 8013bb0:	3206      	adds	r2, #6
 8013bb2:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 8013bb4:	b956      	cbnz	r6, 8013bcc <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 8013bb6:	2101      	movs	r1, #1
 8013bb8:	fa01 f000 	lsl.w	r0, r1, r0
 8013bbc:	68d9      	ldr	r1, [r3, #12]
 8013bbe:	4301      	orrs	r1, r0
 8013bc0:	60d9      	str	r1, [r3, #12]
		b->next = c;
 8013bc2:	f8cc 4010 	str.w	r4, [ip, #16]
 8013bc6:	53dd      	strh	r5, [r3, r7]
 8013bc8:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
 8013bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 8013bcc:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 8013bce:	3104      	adds	r1, #4
 8013bd0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 8013bd2:	53d8      	strh	r0, [r3, r7]
 8013bd4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8013bd8:	529e      	strh	r6, [r3, r2]
 8013bda:	80c5      	strh	r5, [r0, #6]
 8013bdc:	525d      	strh	r5, [r3, r1]
 8013bde:	e7f4      	b.n	8013bca <free_list_add+0x38>

08013be0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8013be0:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8013be2:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8013be4:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8013be6:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8013bea:	f021 0107 	bic.w	r1, r1, #7
{
 8013bee:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8013bf0:	1acd      	subs	r5, r1, r3
 8013bf2:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8013bf4:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
 8013bf6:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8013bfa:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
 8013bfe:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8013c00:	3407      	adds	r4, #7
	h->avail_buckets = 0;
 8013c02:	2600      	movs	r6, #0
 8013c04:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8013c06:	f1c0 0020 	rsb	r0, r0, #32
 8013c0a:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
 8013c0e:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
 8013c10:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8013c12:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8013c16:	4284      	cmp	r4, r0
 8013c18:	d118      	bne.n	8013c4c <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8013c1a:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8013c1c:	f040 0001 	orr.w	r0, r0, #1
 8013c20:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
 8013c22:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8013c26:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8013c28:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
 8013c2a:	801e      	strh	r6, [r3, #0]
 8013c2c:	8067      	strh	r7, [r4, #2]
 8013c2e:	195c      	adds	r4, r3, r5
 8013c30:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
 8013c34:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
 8013c38:	8066      	strh	r6, [r4, #2]
 8013c3a:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8013c3c:	8850      	ldrh	r0, [r2, #2]
 8013c3e:	f040 0001 	orr.w	r0, r0, #1
 8013c42:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 8013c44:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7ff bfa3 	b.w	8013b92 <free_list_add>
		h->buckets[i].next = 0;
 8013c4c:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
 8013c50:	e7e1      	b.n	8013c16 <sys_heap_init+0x36>

08013c52 <_ldiv5>:
	uint32_t v_lo = *v;
 8013c52:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 8013c56:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8013c58:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8013c5c:	fba2 2403 	umull	r2, r4, r2, r3
 8013c60:	18d5      	adds	r5, r2, r3
 8013c62:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 8013c66:	fba1 1303 	umull	r1, r3, r1, r3
 8013c6a:	1852      	adds	r2, r2, r1
 8013c6c:	eb44 0403 	adc.w	r4, r4, r3
 8013c70:	1952      	adds	r2, r2, r5
 8013c72:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8013c76:	1889      	adds	r1, r1, r2
 8013c78:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 8013c7c:	e9c0 1300 	strd	r1, r3, [r0]
}
 8013c80:	bd30      	pop	{r4, r5, pc}

08013c82 <_get_digit>:
	if (*digit_count > 0) {
 8013c82:	680a      	ldr	r2, [r1, #0]
 8013c84:	2a00      	cmp	r2, #0
{
 8013c86:	b510      	push	{r4, lr}
 8013c88:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 8013c8a:	dd0f      	ble.n	8013cac <_get_digit+0x2a>
		--*digit_count;
 8013c8c:	3a01      	subs	r2, #1
 8013c8e:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	6844      	ldr	r4, [r0, #4]
 8013c94:	200a      	movs	r0, #10
 8013c96:	fba2 1200 	umull	r1, r2, r2, r0
 8013c9a:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 8013c9e:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 8013ca0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8013ca4:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 8013ca8:	3030      	adds	r0, #48	; 0x30
}
 8013caa:	bd10      	pop	{r4, pc}
		rval = '0';
 8013cac:	2030      	movs	r0, #48	; 0x30
 8013cae:	e7fc      	b.n	8013caa <_get_digit+0x28>

08013cb0 <outs>:
{
 8013cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb4:	4607      	mov	r7, r0
 8013cb6:	4688      	mov	r8, r1
 8013cb8:	4615      	mov	r5, r2
 8013cba:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8013cbc:	4614      	mov	r4, r2
 8013cbe:	42b4      	cmp	r4, r6
 8013cc0:	eba4 0005 	sub.w	r0, r4, r5
 8013cc4:	d302      	bcc.n	8013ccc <outs+0x1c>
 8013cc6:	b93e      	cbnz	r6, 8013cd8 <outs+0x28>
 8013cc8:	7823      	ldrb	r3, [r4, #0]
 8013cca:	b12b      	cbz	r3, 8013cd8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8013ccc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013cd0:	4641      	mov	r1, r8
 8013cd2:	47b8      	blx	r7
		if (rc < 0) {
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	daf2      	bge.n	8013cbe <outs+0xe>
}
 8013cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013cdc <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
 8013cdc:	4602      	mov	r2, r0
 8013cde:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 8013ce0:	68c0      	ldr	r0, [r0, #12]
 8013ce2:	6814      	ldr	r4, [r2, #0]
 8013ce4:	42a0      	cmp	r0, r4
 8013ce6:	d904      	bls.n	8013cf2 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 8013ce8:	3801      	subs	r0, #1
 8013cea:	1b00      	subs	r0, r0, r4
 8013cec:	6008      	str	r0, [r1, #0]

		return false;
 8013cee:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
 8013cf0:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 8013cf2:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
 8013cf4:	b918      	cbnz	r0, 8013cfe <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 8013cf6:	3b01      	subs	r3, #1
 8013cf8:	1b1b      	subs	r3, r3, r4
 8013cfa:	600b      	str	r3, [r1, #0]
		return false;
 8013cfc:	e7f8      	b.n	8013cf0 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
 8013cfe:	1b1b      	subs	r3, r3, r4
 8013d00:	600b      	str	r3, [r1, #0]
	return true;
 8013d02:	2001      	movs	r0, #1
 8013d04:	e7f4      	b.n	8013cf0 <free_space+0x14>

08013d06 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
 8013d06:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
 8013d08:	a901      	add	r1, sp, #4
{
 8013d0a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 8013d0c:	f7ff ffe6 	bl	8013cdc <free_space>
 8013d10:	b120      	cbz	r0, 8013d1c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 8013d12:	9b01      	ldr	r3, [sp, #4]
 8013d14:	68e2      	ldr	r2, [r4, #12]
 8013d16:	3b01      	subs	r3, #1
 8013d18:	4413      	add	r3, r2
 8013d1a:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
 8013d1c:	9801      	ldr	r0, [sp, #4]
 8013d1e:	6a23      	ldr	r3, [r4, #32]
 8013d20:	43c0      	mvns	r0, r0
}
 8013d22:	4418      	add	r0, r3
 8013d24:	b002      	add	sp, #8
 8013d26:	bd10      	pop	{r4, pc}

08013d28 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
 8013d28:	b510      	push	{r4, lr}
 8013d2a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 8013d2c:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8013d2e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 8013d30:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8013d32:	07d2      	lsls	r2, r2, #31
 8013d34:	d502      	bpl.n	8013d3c <idx_inc+0x14>
		return i & (buffer->size - 1);
 8013d36:	3b01      	subs	r3, #1
 8013d38:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
 8013d3a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 8013d3c:	4298      	cmp	r0, r3
 8013d3e:	bf28      	it	cs
 8013d40:	1ac0      	subcs	r0, r0, r3
 8013d42:	e7fa      	b.n	8013d3a <idx_inc+0x12>

08013d44 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 8013d44:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8013d46:	69c2      	ldr	r2, [r0, #28]
{
 8013d48:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
 8013d4a:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8013d4c:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 8013d4e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8013d52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8013d56:	462a      	mov	r2, r5
 8013d58:	6801      	ldr	r1, [r0, #0]
{
 8013d5a:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8013d5c:	f7ff ffe4 	bl	8013d28 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8013d60:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8013d62:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8013d64:	462a      	mov	r2, r5
 8013d66:	4620      	mov	r0, r4
 8013d68:	f7ff ffde 	bl	8013d28 <idx_inc>
 8013d6c:	6060      	str	r0, [r4, #4]
}
 8013d6e:	bd38      	pop	{r3, r4, r5, pc}

08013d70 <max_utilization_update>:
{
 8013d70:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 8013d72:	6903      	ldr	r3, [r0, #16]
 8013d74:	075b      	lsls	r3, r3, #29
{
 8013d76:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 8013d78:	d506      	bpl.n	8013d88 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8013d7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013d7c:	f7ff ffc3 	bl	8013d06 <get_usage>
 8013d80:	4285      	cmp	r5, r0
 8013d82:	d902      	bls.n	8013d8a <max_utilization_update+0x1a>
 8013d84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013d86:	6260      	str	r0, [r4, #36]	; 0x24
}
 8013d88:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	f7ff ffbb 	bl	8013d06 <get_usage>
 8013d90:	e7f9      	b.n	8013d86 <max_utilization_update+0x16>

08013d92 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 8013d92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 8013d96:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8013d9a:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
 8013d9e:	461f      	mov	r7, r3
	*user_packet = false;
 8013da0:	2300      	movs	r3, #0
 8013da2:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
 8013da4:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 8013da8:	f003 0303 	and.w	r3, r3, #3
 8013dac:	2b02      	cmp	r3, #2
{
 8013dae:	4604      	mov	r4, r0
 8013db0:	468b      	mov	fp, r1
 8013db2:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 8013db4:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 8013db8:	d103      	bne.n	8013dc2 <drop_item_locked+0x30>
		return item->skip.len;
 8013dba:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 8013dbe:	08ad      	lsrs	r5, r5, #2
 8013dc0:	d12e      	bne.n	8013e20 <drop_item_locked+0x8e>
 8013dc2:	69a3      	ldr	r3, [r4, #24]
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	4798      	blx	r3
 8013dc8:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
 8013dca:	f1b8 0f00 	cmp.w	r8, #0
 8013dce:	d036      	beq.n	8013e3e <drop_item_locked+0xac>
		if (item->hdr.busy) {
 8013dd0:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 8013dd4:	079b      	lsls	r3, r3, #30
 8013dd6:	d52f      	bpl.n	8013e38 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
 8013dd8:	f10b 0101 	add.w	r1, fp, #1
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f7ff ffb1 	bl	8013d44 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 8013de2:	6861      	ldr	r1, [r4, #4]
 8013de4:	462a      	mov	r2, r5
 8013de6:	4620      	mov	r0, r4
 8013de8:	f7ff ff9e 	bl	8013d28 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 8013dec:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 8013dee:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 8013df0:	462a      	mov	r2, r5
 8013df2:	4620      	mov	r0, r4
 8013df4:	f7ff ff98 	bl	8013d28 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8013df8:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 8013dfa:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8013dfc:	68e1      	ldr	r1, [r4, #12]
 8013dfe:	4620      	mov	r0, r4
 8013e00:	f7ff ff92 	bl	8013d28 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 8013e04:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
 8013e06:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 8013e0a:	f002 0203 	and.w	r2, r2, #3
 8013e0e:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 8013e10:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 8013e14:	d10c      	bne.n	8013e30 <drop_item_locked+0x9e>
		return item->skip.len;
 8013e16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
 8013e1a:	089b      	lsrs	r3, r3, #2
 8013e1c:	d008      	beq.n	8013e30 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
 8013e1e:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8013e20:	68e1      	ldr	r1, [r4, #12]
 8013e22:	462a      	mov	r2, r5
 8013e24:	4620      	mov	r0, r4
 8013e26:	f7ff ff7f 	bl	8013d28 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 8013e2a:	e9c4 0002 	strd	r0, r0, [r4, #8]
 8013e2e:	e007      	b.n	8013e40 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
 8013e30:	69a3      	ldr	r3, [r4, #24]
 8013e32:	4630      	mov	r0, r6
 8013e34:	4798      	blx	r3
 8013e36:	4405      	add	r5, r0
			*user_packet = true;
 8013e38:	2301      	movs	r3, #1
 8013e3a:	703b      	strb	r3, [r7, #0]
 8013e3c:	e7f0      	b.n	8013e20 <drop_item_locked+0x8e>
		item = NULL;
 8013e3e:	4646      	mov	r6, r8
	}

	return item;
}
 8013e40:	4630      	mov	r0, r6
 8013e42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e46 <mpsc_pbuf_init>:
{
 8013e46:	b538      	push	{r3, r4, r5, lr}
 8013e48:	460d      	mov	r5, r1
 8013e4a:	4604      	mov	r4, r0
 8013e4c:	221c      	movs	r2, #28
 8013e4e:	2100      	movs	r1, #0
 8013e50:	f005 fb38 	bl	80194c4 <memset>
	buffer->get_wlen = cfg->get_wlen;
 8013e54:	68eb      	ldr	r3, [r5, #12]
 8013e56:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
 8013e58:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
 8013e5a:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
 8013e5c:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
 8013e5e:	682b      	ldr	r3, [r5, #0]
 8013e60:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
 8013e62:	2300      	movs	r3, #0
 8013e64:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
 8013e66:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
 8013e68:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 8013e6a:	b122      	cbz	r2, 8013e76 <mpsc_pbuf_init+0x30>
 8013e6c:	1e51      	subs	r1, r2, #1
 8013e6e:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 8013e70:	bf08      	it	eq
 8013e72:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
 8013e76:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8013e78:	2201      	movs	r2, #1
 8013e7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013e7e:	2100      	movs	r1, #0
}
 8013e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e84:	f004 bfe8 	b.w	8018e58 <z_impl_k_sem_init>

08013e88 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 8013e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e8c:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 8013e8e:	6a03      	ldr	r3, [r0, #32]
 8013e90:	3b01      	subs	r3, #1
 8013e92:	428b      	cmp	r3, r1
{
 8013e94:	b085      	sub	sp, #20
 8013e96:	4604      	mov	r4, r0
 8013e98:	460f      	mov	r7, r1
 8013e9a:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
 8013e9c:	d364      	bcc.n	8013f68 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
 8013e9e:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
 8013ea0:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
 8013ea2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
 8013ea6:	f04f 0310 	mov.w	r3, #16
 8013eaa:	f3ef 8611 	mrs	r6, BASEPRI
 8013eae:	f383 8812 	msr	BASEPRI_MAX, r3
 8013eb2:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
 8013eb6:	a903      	add	r1, sp, #12
 8013eb8:	4620      	mov	r0, r4
 8013eba:	f7ff ff0f 	bl	8013cdc <free_space>
		if (free_wlen >= wlen) {
 8013ebe:	9903      	ldr	r1, [sp, #12]
 8013ec0:	42b9      	cmp	r1, r7
 8013ec2:	d321      	bcc.n	8013f08 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 8013ec4:	6821      	ldr	r1, [r4, #0]
			item =
 8013ec6:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
 8013ec8:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
 8013ecc:	f022 0203 	bic.w	r2, r2, #3
 8013ed0:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	463a      	mov	r2, r7
			item =
 8013ed8:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
 8013edc:	f7ff ff24 	bl	8013d28 <idx_inc>
		cont = false;
 8013ee0:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
 8013ee2:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
 8013ee4:	f386 8811 	msr	BASEPRI, r6
 8013ee8:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d03d      	beq.n	8013f6c <mpsc_pbuf_alloc+0xe4>
 8013ef0:	2d00      	cmp	r5, #0
 8013ef2:	d0d8      	beq.n	8013ea6 <mpsc_pbuf_alloc+0x1e>
 8013ef4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d0d4      	beq.n	8013ea6 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 8013efc:	4629      	mov	r1, r5
 8013efe:	6963      	ldr	r3, [r4, #20]
 8013f00:	4620      	mov	r0, r4
 8013f02:	4798      	blx	r3
			dropped_item = NULL;
 8013f04:	2500      	movs	r5, #0
 8013f06:	e7ce      	b.n	8013ea6 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
 8013f08:	b128      	cbz	r0, 8013f16 <mpsc_pbuf_alloc+0x8e>
 8013f0a:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	f7ff ff19 	bl	8013d44 <add_skip_item>
			cont = true;
 8013f12:	9b01      	ldr	r3, [sp, #4]
 8013f14:	e7e6      	b.n	8013ee4 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8013f16:	ea58 0309 	orrs.w	r3, r8, r9
 8013f1a:	d017      	beq.n	8013f4c <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
 8013f1c:	f004 ff74 	bl	8018e08 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8013f20:	b9a0      	cbnz	r0, 8013f4c <mpsc_pbuf_alloc+0xc4>
 8013f22:	f386 8811 	msr	BASEPRI, r6
 8013f26:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
 8013f2a:	4642      	mov	r2, r8
 8013f2c:	464b      	mov	r3, r9
 8013f2e:	4658      	mov	r0, fp
 8013f30:	f7fc f968 	bl	8010204 <z_impl_k_sem_take>
	__asm__ volatile(
 8013f34:	f04f 0310 	mov.w	r3, #16
 8013f38:	f3ef 8611 	mrs	r6, BASEPRI
 8013f3c:	f383 8812 	msr	BASEPRI_MAX, r3
 8013f40:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 8013f44:	fab0 f380 	clz	r3, r0
 8013f48:	095b      	lsrs	r3, r3, #5
 8013f4a:	e7cb      	b.n	8013ee4 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 8013f4c:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 8013f4e:	9903      	ldr	r1, [sp, #12]
 8013f50:	f10d 030b 	add.w	r3, sp, #11
 8013f54:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f7ff ff1a 	bl	8013d92 <drop_item_locked>
			cont = dropped_item != NULL;
 8013f5e:	1e03      	subs	r3, r0, #0
 8013f60:	4605      	mov	r5, r0
 8013f62:	bf18      	it	ne
 8013f64:	2301      	movne	r3, #1
 8013f66:	e7bd      	b.n	8013ee4 <mpsc_pbuf_alloc+0x5c>
		return NULL;
 8013f68:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 8013f6c:	4650      	mov	r0, sl
 8013f6e:	b005      	add	sp, #20
 8013f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f74 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 8013f74:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
 8013f76:	6983      	ldr	r3, [r0, #24]
{
 8013f78:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 8013f7a:	4608      	mov	r0, r1
{
 8013f7c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8013f7e:	4798      	blx	r3
 8013f80:	4602      	mov	r2, r0
 8013f82:	f04f 0310 	mov.w	r3, #16
 8013f86:	f3ef 8611 	mrs	r6, BASEPRI
 8013f8a:	f383 8812 	msr	BASEPRI_MAX, r3
 8013f8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 8013f92:	782b      	ldrb	r3, [r5, #0]
 8013f94:	f043 0301 	orr.w	r3, r3, #1
 8013f98:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8013f9a:	6861      	ldr	r1, [r4, #4]
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	f7ff fec3 	bl	8013d28 <idx_inc>
 8013fa2:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f7ff fee3 	bl	8013d70 <max_utilization_update>
	__asm__ volatile(
 8013faa:	f386 8811 	msr	BASEPRI, r6
 8013fae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}

08013fb4 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 8013fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb8:	4604      	mov	r4, r0
	__asm__ volatile(
 8013fba:	f04f 0310 	mov.w	r3, #16
 8013fbe:	f3ef 8611 	mrs	r6, BASEPRI
 8013fc2:	f383 8812 	msr	BASEPRI_MAX, r3
 8013fc6:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 8013fca:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013fce:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 8013fd0:	bf88      	it	hi
 8013fd2:	6a23      	ldrhi	r3, [r4, #32]
 8013fd4:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
 8013fd6:	b1f3      	cbz	r3, 8014016 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
 8013fd8:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
 8013fda:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
 8013fde:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
 8013fe2:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
 8013fe6:	d016      	beq.n	8014016 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
 8013fe8:	2b02      	cmp	r3, #2
 8013fea:	d103      	bne.n	8013ff4 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
 8013fec:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 8013ff0:	08ad      	lsrs	r5, r5, #2
 8013ff2:	d115      	bne.n	8014020 <mpsc_pbuf_claim+0x6c>
 8013ff4:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
 8013ff6:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
 8013ff8:	d50f      	bpl.n	801401a <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
 8013ffa:	f042 0202 	orr.w	r2, r2, #2
 8013ffe:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 8014002:	4640      	mov	r0, r8
 8014004:	4798      	blx	r3
 8014006:	4639      	mov	r1, r7
 8014008:	4602      	mov	r2, r0
 801400a:	4620      	mov	r0, r4
 801400c:	f7ff fe8c 	bl	8013d28 <idx_inc>
		cont = false;
 8014010:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
 8014012:	60a0      	str	r0, [r4, #8]
 8014014:	e011      	b.n	801403a <mpsc_pbuf_claim+0x86>
			item = NULL;
 8014016:	4698      	mov	r8, r3
 8014018:	e00f      	b.n	801403a <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
 801401a:	4640      	mov	r0, r8
 801401c:	4798      	blx	r3
 801401e:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 8014020:	68a1      	ldr	r1, [r4, #8]
 8014022:	462a      	mov	r2, r5
 8014024:	4620      	mov	r0, r4
 8014026:	f7ff fe7f 	bl	8013d28 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
 801402a:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
 801402c:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
 801402e:	462a      	mov	r2, r5
 8014030:	4620      	mov	r0, r4
 8014032:	f7ff fe79 	bl	8013d28 <idx_inc>
				cont = true;
 8014036:	2301      	movs	r3, #1
				buffer->rd_idx =
 8014038:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 801403a:	f386 8811 	msr	BASEPRI, r6
 801403e:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 8014042:	2b00      	cmp	r3, #0
 8014044:	d1b9      	bne.n	8013fba <mpsc_pbuf_claim+0x6>

	return item;
}
 8014046:	4640      	mov	r0, r8
 8014048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801404c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 801404c:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
 801404e:	6983      	ldr	r3, [r0, #24]
{
 8014050:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 8014052:	4608      	mov	r0, r1
{
 8014054:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8014056:	4798      	blx	r3
 8014058:	4602      	mov	r2, r0
	__asm__ volatile(
 801405a:	f04f 0310 	mov.w	r3, #16
 801405e:	f3ef 8611 	mrs	r6, BASEPRI
 8014062:	f383 8812 	msr	BASEPRI_MAX, r3
 8014066:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 801406a:	782b      	ldrb	r3, [r5, #0]
 801406c:	f36f 0300 	bfc	r3, #0, #1
 8014070:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8014072:	6923      	ldr	r3, [r4, #16]
 8014074:	079b      	lsls	r3, r3, #30
 8014076:	d505      	bpl.n	8014084 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 8014078:	68e1      	ldr	r1, [r4, #12]
 801407a:	69e3      	ldr	r3, [r4, #28]
 801407c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8014080:	429d      	cmp	r5, r3
 8014082:	d112      	bne.n	80140aa <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
 8014084:	782b      	ldrb	r3, [r5, #0]
 8014086:	f36f 0341 	bfc	r3, #1, #1
 801408a:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 801408c:	68e1      	ldr	r1, [r4, #12]
 801408e:	4620      	mov	r0, r4
 8014090:	f7ff fe4a 	bl	8013d28 <idx_inc>
 8014094:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8014096:	f386 8811 	msr	BASEPRI, r6
 801409a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 801409e:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 80140a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140a6:	f7fc b887 	b.w	80101b8 <z_impl_k_sem_give>
		witem->skip.len = wlen;
 80140aa:	682b      	ldr	r3, [r5, #0]
 80140ac:	f360 039f 	bfi	r3, r0, #2, #30
 80140b0:	602b      	str	r3, [r5, #0]
 80140b2:	e7f0      	b.n	8014096 <mpsc_pbuf_free+0x4a>

080140b4 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 80140b4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 80140b8:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 80140ba:	bf8a      	itet	hi
 80140bc:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 80140be:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 80140c0:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 80140c2:	1e18      	subs	r0, r3, #0
 80140c4:	bf18      	it	ne
 80140c6:	2001      	movne	r0, #1
 80140c8:	4770      	bx	lr

080140ca <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80140ca:	4770      	bx	lr

080140cc <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 80140cc:	2000      	movs	r0, #0
 80140ce:	4770      	bx	lr

080140d0 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 80140d0:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 80140d2:	075b      	lsls	r3, r3, #29
 80140d4:	d40b      	bmi.n	80140ee <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 80140d6:	6803      	ldr	r3, [r0, #0]
 80140d8:	8840      	ldrh	r0, [r0, #2]
 80140da:	f3c3 2349 	ubfx	r3, r3, #9, #10
 80140de:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 80140e2:	4418      	add	r0, r3
 80140e4:	3013      	adds	r0, #19
 80140e6:	f020 0007 	bic.w	r0, r0, #7
 80140ea:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 80140ec:	4770      	bx	lr
	return 0;
 80140ee:	2000      	movs	r0, #0
}
 80140f0:	4770      	bx	lr

080140f2 <default_lf_get_timestamp>:
{
 80140f2:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80140f4:	f005 f83e 	bl	8019174 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80140f8:	220a      	movs	r2, #10
 80140fa:	2300      	movs	r3, #0
 80140fc:	f7ec ff64 	bl	8000fc8 <__aeabi_uldivmod>
}
 8014100:	bd08      	pop	{r3, pc}

08014102 <dummy_timestamp>:
 8014102:	2000      	movs	r0, #0
 8014104:	4770      	bx	lr

08014106 <notify_drop>:
	z_log_dropped(true);
 8014106:	2001      	movs	r0, #1
 8014108:	f7f0 b8b2 	b.w	8004270 <z_log_dropped>

0801410c <get_msg>:
{
 801410c:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 801410e:	f7f0 f923 	bl	8004358 <z_log_msg2_claim>
}
 8014112:	bd08      	pop	{r3, pc}

08014114 <z_log_get_tag>:
}
 8014114:	2000      	movs	r0, #0
 8014116:	4770      	bx	lr

08014118 <buffer_write>:
{
 8014118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801411a:	4606      	mov	r6, r0
 801411c:	460d      	mov	r5, r1
 801411e:	4614      	mov	r4, r2
 8014120:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 8014122:	4621      	mov	r1, r4
 8014124:	4628      	mov	r0, r5
 8014126:	463a      	mov	r2, r7
 8014128:	47b0      	blx	r6
	} while (len != 0);
 801412a:	1a24      	subs	r4, r4, r0
		buf += processed;
 801412c:	4405      	add	r5, r0
	} while (len != 0);
 801412e:	d1f8      	bne.n	8014122 <buffer_write+0xa>
}
 8014130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014132 <log_output_flush>:
		     output->control_block->offset,
 8014132:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 8014134:	6881      	ldr	r1, [r0, #8]
{
 8014136:	b510      	push	{r4, lr}
 8014138:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 801413a:	e9d2 2300 	ldrd	r2, r3, [r2]
 801413e:	6800      	ldr	r0, [r0, #0]
 8014140:	f7ff ffea 	bl	8014118 <buffer_write>
	output->control_block->offset = 0;
 8014144:	6863      	ldr	r3, [r4, #4]
 8014146:	2200      	movs	r2, #0
 8014148:	601a      	str	r2, [r3, #0]
}
 801414a:	bd10      	pop	{r4, pc}

0801414c <out_func>:
{
 801414c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 801414e:	684b      	ldr	r3, [r1, #4]
 8014150:	681a      	ldr	r2, [r3, #0]
 8014152:	68cb      	ldr	r3, [r1, #12]
 8014154:	429a      	cmp	r2, r3
{
 8014156:	4605      	mov	r5, r0
 8014158:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 801415a:	d102      	bne.n	8014162 <out_func+0x16>
		log_output_flush(out_ctx);
 801415c:	4608      	mov	r0, r1
 801415e:	f7ff ffe8 	bl	8014132 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8014162:	6863      	ldr	r3, [r4, #4]
 8014164:	f3bf 8f5b 	dmb	ish
 8014168:	e853 2f00 	ldrex	r2, [r3]
 801416c:	1c51      	adds	r1, r2, #1
 801416e:	e843 1000 	strex	r0, r1, [r3]
 8014172:	2800      	cmp	r0, #0
 8014174:	d1f8      	bne.n	8014168 <out_func+0x1c>
 8014176:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 801417a:	68a3      	ldr	r3, [r4, #8]
 801417c:	549d      	strb	r5, [r3, r2]
}
 801417e:	2000      	movs	r0, #0
 8014180:	bd38      	pop	{r3, r4, r5, pc}

08014182 <cr_out_func>:
{
 8014182:	b538      	push	{r3, r4, r5, lr}
 8014184:	4605      	mov	r5, r0
 8014186:	460c      	mov	r4, r1
	out_func(c, ctx);
 8014188:	f7ff ffe0 	bl	801414c <out_func>
	if (c == '\n') {
 801418c:	2d0a      	cmp	r5, #10
 801418e:	d103      	bne.n	8014198 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
 8014190:	4621      	mov	r1, r4
 8014192:	200d      	movs	r0, #13
 8014194:	f7ff ffda 	bl	801414c <out_func>
}
 8014198:	2000      	movs	r0, #0
 801419a:	bd38      	pop	{r3, r4, r5, pc}

0801419c <z_log_msg2_finalize>:
{
 801419c:	b570      	push	{r4, r5, r6, lr}
 801419e:	460e      	mov	r6, r1
 80141a0:	4615      	mov	r5, r2
 80141a2:	4619      	mov	r1, r3
	if (!msg) {
 80141a4:	4604      	mov	r4, r0
 80141a6:	b918      	cbnz	r0, 80141b0 <z_log_msg2_finalize+0x14>
}
 80141a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 80141ac:	f7f0 b860 	b.w	8004270 <z_log_dropped>
	if (data) {
 80141b0:	b143      	cbz	r3, 80141c4 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
 80141b2:	f100 030c 	add.w	r3, r0, #12
 80141b6:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80141ba:	4418      	add	r0, r3
 80141bc:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 80141c0:	f005 f958 	bl	8019474 <memcpy>
	msg->hdr.source = source;
 80141c4:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
 80141c8:	4620      	mov	r0, r4
}
 80141ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
 80141ce:	f7f0 b985 	b.w	80044dc <z_log_msg2_commit>

080141d2 <z_impl_z_log_msg2_static_create>:
{
 80141d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 80141d6:	f3c1 2949 	ubfx	r9, r1, #9, #10
 80141da:	f3c1 44cb 	ubfx	r4, r1, #19, #12
 80141de:	444c      	add	r4, r9
 80141e0:	3413      	adds	r4, #19
 80141e2:	f024 0407 	bic.w	r4, r4, #7
 80141e6:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 80141e8:	08a0      	lsrs	r0, r4, #2
{
 80141ea:	460d      	mov	r5, r1
 80141ec:	4690      	mov	r8, r2
 80141ee:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 80141f0:	f7f0 f8aa 	bl	8004348 <z_log_msg2_alloc>
	if (msg) {
 80141f4:	4604      	mov	r4, r0
 80141f6:	b120      	cbz	r0, 8014202 <z_impl_z_log_msg2_static_create+0x30>
 80141f8:	464a      	mov	r2, r9
 80141fa:	4641      	mov	r1, r8
 80141fc:	300c      	adds	r0, #12
 80141fe:	f005 f939 	bl	8019474 <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
 8014202:	463b      	mov	r3, r7
 8014204:	462a      	mov	r2, r5
 8014206:	4631      	mov	r1, r6
 8014208:	4620      	mov	r0, r4
}
 801420a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
 801420e:	f7ff bfc5 	b.w	801419c <z_log_msg2_finalize>

08014212 <disk_access_init>:
{
 8014212:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 8014214:	f7f0 fc40 	bl	8004a98 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8014218:	b130      	cbz	r0, 8014228 <disk_access_init+0x16>
 801421a:	68c3      	ldr	r3, [r0, #12]
 801421c:	b123      	cbz	r3, 8014228 <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
 801421e:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8014220:	b113      	cbz	r3, 8014228 <disk_access_init+0x16>
}
 8014222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
 8014226:	4718      	bx	r3
}
 8014228:	f06f 0015 	mvn.w	r0, #21
 801422c:	bd10      	pop	{r4, pc}

0801422e <disk_access_status>:
{
 801422e:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 8014230:	f7f0 fc32 	bl	8004a98 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8014234:	b130      	cbz	r0, 8014244 <disk_access_status+0x16>
 8014236:	68c3      	ldr	r3, [r0, #12]
 8014238:	b123      	cbz	r3, 8014244 <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
 801423a:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
 801423c:	b113      	cbz	r3, 8014244 <disk_access_status+0x16>
}
 801423e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
 8014242:	4718      	bx	r3
}
 8014244:	f06f 0015 	mvn.w	r0, #21
 8014248:	bd10      	pop	{r4, pc}

0801424a <disk_access_read>:
{
 801424a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801424e:	460d      	mov	r5, r1
 8014250:	4616      	mov	r6, r2
 8014252:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
 8014254:	f7f0 fc20 	bl	8004a98 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8014258:	b150      	cbz	r0, 8014270 <disk_access_read+0x26>
 801425a:	68c3      	ldr	r3, [r0, #12]
 801425c:	b143      	cbz	r3, 8014270 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
 801425e:	689c      	ldr	r4, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8014260:	b134      	cbz	r4, 8014270 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 8014262:	463b      	mov	r3, r7
 8014264:	4632      	mov	r2, r6
 8014266:	4629      	mov	r1, r5
 8014268:	46a4      	mov	ip, r4
}
 801426a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 801426e:	4760      	bx	ip
}
 8014270:	f06f 0015 	mvn.w	r0, #21
 8014274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014278 <disk_access_write>:
{
 8014278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801427c:	460d      	mov	r5, r1
 801427e:	4616      	mov	r6, r2
 8014280:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
 8014282:	f7f0 fc09 	bl	8004a98 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8014286:	b150      	cbz	r0, 801429e <disk_access_write+0x26>
 8014288:	68c3      	ldr	r3, [r0, #12]
 801428a:	b143      	cbz	r3, 801429e <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
 801428c:	68dc      	ldr	r4, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
 801428e:	b134      	cbz	r4, 801429e <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 8014290:	463b      	mov	r3, r7
 8014292:	4632      	mov	r2, r6
 8014294:	4629      	mov	r1, r5
 8014296:	46a4      	mov	ip, r4
}
 8014298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 801429c:	4760      	bx	ip
}
 801429e:	f06f 0015 	mvn.w	r0, #21
 80142a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142a6 <disk_access_ioctl>:
{
 80142a6:	b570      	push	{r4, r5, r6, lr}
 80142a8:	460c      	mov	r4, r1
 80142aa:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
 80142ac:	f7f0 fbf4 	bl	8004a98 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 80142b0:	b140      	cbz	r0, 80142c4 <disk_access_ioctl+0x1e>
 80142b2:	68c3      	ldr	r3, [r0, #12]
 80142b4:	b133      	cbz	r3, 80142c4 <disk_access_ioctl+0x1e>
				(disk->ops->ioctl != NULL)) {
 80142b6:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
 80142b8:	b123      	cbz	r3, 80142c4 <disk_access_ioctl+0x1e>
		rc = disk->ops->ioctl(disk, cmd, buf);
 80142ba:	462a      	mov	r2, r5
 80142bc:	4621      	mov	r1, r4
}
 80142be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
 80142c2:	4718      	bx	r3
}
 80142c4:	f06f 0015 	mvn.w	r0, #21
 80142c8:	bd70      	pop	{r4, r5, r6, pc}

080142ca <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80142ca:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 80142cc:	6800      	ldr	r0, [r0, #0]
 80142ce:	f7f0 bc5d 	b.w	8004b8c <z_arm_fatal_error>

080142d2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80142d2:	2100      	movs	r1, #0
 80142d4:	2001      	movs	r0, #1
 80142d6:	f7f0 bc59 	b.w	8004b8c <z_arm_fatal_error>

080142da <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 80142da:	b508      	push	{r3, lr}
	handler();
 80142dc:	f7f0 fcf2 	bl	8004cc4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80142e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80142e4:	f7f0 bdb8 	b.w	8004e58 <z_arm_exc_exit>

080142e8 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 80142e8:	2300      	movs	r3, #0
 80142ea:	f7ff bf72 	b.w	80141d2 <z_impl_z_log_msg2_static_create>

080142ee <malloc_prepare>:
}
 80142ee:	2000      	movs	r0, #0
 80142f0:	4770      	bx	lr

080142f2 <_stdout_hook_default>:
}
 80142f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142f6:	4770      	bx	lr

080142f8 <_stdin_hook_default>:
}
 80142f8:	2000      	movs	r0, #0
 80142fa:	4770      	bx	lr

080142fc <_read>:
{
 80142fc:	4608      	mov	r0, r1
 80142fe:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
 8014300:	f7f1 b97e 	b.w	8005600 <z_impl_zephyr_read_stdin>

08014304 <_write>:
{
 8014304:	4608      	mov	r0, r1
 8014306:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8014308:	f7f1 b98e 	b.w	8005628 <z_impl_zephyr_write_stdout>

0801430c <_close>:
 801430c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014310:	4770      	bx	lr

08014312 <_lseek>:
}
 8014312:	2000      	movs	r0, #0
 8014314:	4770      	bx	lr

08014316 <_isatty>:
}
 8014316:	2802      	cmp	r0, #2
 8014318:	bfcc      	ite	gt
 801431a:	2000      	movgt	r0, #0
 801431c:	2001      	movle	r0, #1
 801431e:	4770      	bx	lr

08014320 <_fstat>:
	st->st_mode = S_IFCHR;
 8014320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014324:	604b      	str	r3, [r1, #4]
}
 8014326:	2000      	movs	r0, #0
 8014328:	4770      	bx	lr

0801432a <__retarget_lock_init_recursive>:
{
 801432a:	b510      	push	{r4, lr}
 801432c:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
 801432e:	2014      	movs	r0, #20
 8014330:	f7fc ff86 	bl	8011240 <malloc>
 8014334:	6020      	str	r0, [r4, #0]
}
 8014336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 801433a:	f004 bd86 	b.w	8018e4a <z_impl_k_mutex_init>

0801433e <__retarget_lock_acquire>:
	return z_impl_k_sem_take(sem, timeout);
 801433e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014346:	f7fb bf5d 	b.w	8010204 <z_impl_k_sem_take>

0801434a <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
 801434a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801434e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014352:	f7fb be77 	b.w	8010044 <z_impl_k_mutex_lock>

08014356 <__retarget_lock_release>:
	z_impl_k_sem_give(sem);
 8014356:	f7fb bf2f 	b.w	80101b8 <z_impl_k_sem_give>

0801435a <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 801435a:	f7fb beeb 	b.w	8010134 <z_impl_k_mutex_unlock>

0801435e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 801435e:	f7fb bc2b 	b.w	800fbb8 <z_impl_z_errno>

08014362 <MlmeIndication>:
}
 8014362:	4770      	bx	lr

08014364 <OnMacProcessNotify>:
	LoRaMacProcess();
 8014364:	f7f4 bd24 	b.w	8008db0 <LoRaMacProcess>

08014368 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8014368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 801436a:	ab0b      	add	r3, sp, #44	; 0x2c
 801436c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 801436e:	9303      	str	r3, [sp, #12]
 8014370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014372:	9302      	str	r3, [sp, #8]
 8014374:	2300      	movs	r3, #0
 8014376:	e9cd 3300 	strd	r3, r3, [sp]
 801437a:	2201      	movs	r2, #1
 801437c:	4618      	mov	r0, r3
 801437e:	f7f0 faed 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 8014382:	b007      	add	sp, #28
 8014384:	f85d fb04 	ldr.w	pc, [sp], #4

08014388 <BoardGetUniqueId>:
}
 8014388:	4770      	bx	lr

0801438a <lorawan_get_payload_sizes>:
{
 801438a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801438c:	4605      	mov	r5, r0
 801438e:	460c      	mov	r4, r1
	(void)LoRaMacQueryTxPossible(0, &txInfo);
 8014390:	2000      	movs	r0, #0
 8014392:	a901      	add	r1, sp, #4
 8014394:	f7f5 fb9c 	bl	8009ad0 <LoRaMacQueryTxPossible>
	*max_next_payload_size = txInfo.MaxPossibleApplicationDataSize;
 8014398:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801439c:	702b      	strb	r3, [r5, #0]
	*max_payload_size = txInfo.CurrentPossiblePayloadSize;
 801439e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80143a2:	7023      	strb	r3, [r4, #0]
}
 80143a4:	b003      	add	sp, #12
 80143a6:	bd30      	pop	{r4, r5, pc}

080143a8 <timer_work_handler>:
	TimerIrqHandler();
 80143a8:	f7f2 b988 	b.w	80066bc <TimerIrqHandler>

080143ac <k_uptime_get_32>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
 80143ac:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80143ae:	f004 fee1 	bl	8019174 <z_impl_k_uptime_ticks>
 80143b2:	220a      	movs	r2, #10
 80143b4:	2300      	movs	r3, #0
 80143b6:	f7ec fe07 	bl	8000fc8 <__aeabi_uldivmod>
	return (uint32_t)k_uptime_get();
}
 80143ba:	bd08      	pop	{r3, pc}

080143bc <RtcGetCalendarTime>:
{
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	4606      	mov	r6, r0
 80143c0:	f004 fed8 	bl	8019174 <z_impl_k_uptime_ticks>
 80143c4:	220a      	movs	r2, #10
 80143c6:	2300      	movs	r3, #0
 80143c8:	f7ec fdfe 	bl	8000fc8 <__aeabi_uldivmod>
	*milliseconds = now % MSEC_PER_SEC;
 80143cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80143d0:	2300      	movs	r3, #0
 80143d2:	4605      	mov	r5, r0
 80143d4:	460c      	mov	r4, r1
 80143d6:	f7ec fda7 	bl	8000f28 <__aeabi_ldivmod>
	return now / MSEC_PER_SEC;
 80143da:	2300      	movs	r3, #0
	*milliseconds = now % MSEC_PER_SEC;
 80143dc:	8032      	strh	r2, [r6, #0]
	return now / MSEC_PER_SEC;
 80143de:	4628      	mov	r0, r5
 80143e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80143e4:	4621      	mov	r1, r4
 80143e6:	f7ec fd9f 	bl	8000f28 <__aeabi_ldivmod>
}
 80143ea:	bd70      	pop	{r4, r5, r6, pc}

080143ec <RtcGetTimerValue>:
	return k_uptime_get_32();
 80143ec:	f7ff bfde 	b.w	80143ac <k_uptime_get_32>

080143f0 <RtcGetMinimumTimeout>:
}
 80143f0:	2001      	movs	r0, #1
 80143f2:	4770      	bx	lr

080143f4 <DelayMsMcu>:
			return t * ((uint64_t)to_hz / from_hz);
 80143f4:	210a      	movs	r1, #10
 80143f6:	fba0 0101 	umull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 80143fa:	f7fc bb1d 	b.w	8010a38 <z_impl_k_sleep>

080143fe <RtcMs2Tick>:
}

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 80143fe:	4770      	bx	lr

08014400 <RtcTick2Ms>:
 8014400:	4770      	bx	lr

08014402 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 8014402:	f04f 0210 	mov.w	r2, #16
 8014406:	f3ef 8311 	mrs	r3, BASEPRI
 801440a:	f382 8812 	msr	BASEPRI_MAX, r2
 801440e:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 8014412:	6003      	str	r3, [r0, #0]
}
 8014414:	4770      	bx	lr

08014416 <BoardCriticalSectionEnd>:
	__asm__ volatile(
 8014416:	6803      	ldr	r3, [r0, #0]
 8014418:	f383 8811 	msr	BASEPRI, r3
 801441c:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
 8014420:	4770      	bx	lr

08014422 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8014422:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8014424:	ab0b      	add	r3, sp, #44	; 0x2c
 8014426:	9305      	str	r3, [sp, #20]
 8014428:	9303      	str	r3, [sp, #12]
 801442a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801442c:	9302      	str	r3, [sp, #8]
 801442e:	2300      	movs	r3, #0
 8014430:	e9cd 3300 	strd	r3, r3, [sp]
 8014434:	2201      	movs	r2, #1
 8014436:	4618      	mov	r0, r3
 8014438:	f7f0 fa90 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 801443c:	b007      	add	sp, #28
 801443e:	f85d fb04 	ldr.w	pc, [sp], #4

08014442 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8014442:	2301      	movs	r3, #1
 8014444:	fa03 f101 	lsl.w	r1, r3, r1
 8014448:	6903      	ldr	r3, [r0, #16]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 801444e:	bf18      	it	ne
 8014450:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8014454:	b112      	cbz	r2, 801445c <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8014456:	6883      	ldr	r3, [r0, #8]
 8014458:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 801445a:	4718      	bx	r3
 801445c:	6883      	ldr	r3, [r0, #8]
 801445e:	691b      	ldr	r3, [r3, #16]
 8014460:	e7fb      	b.n	801445a <gpio_pin_set.isra.0+0x18>

08014462 <SX126xAntSwOn>:
}
 8014462:	4770      	bx	lr

08014464 <SX126xAntSwOff>:
 8014464:	4770      	bx	lr

08014466 <SX126xGetBoardTcxoWakeupTime>:
}
 8014466:	2005      	movs	r0, #5
 8014468:	4770      	bx	lr

0801446a <SX126xGetDeviceId>:
}
 801446a:	2002      	movs	r0, #2
 801446c:	4770      	bx	lr

0801446e <SX126xIoTcxoInit>:
{
 801446e:	b508      	push	{r3, lr}
	SX126xSetDio3AsTcxoCtrl(TCXO_DIO3_VOLTAGE,
 8014470:	2001      	movs	r0, #1
 8014472:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014476:	f000 fb73 	bl	8014b60 <SX126xSetDio3AsTcxoCtrl>
}
 801447a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SX126xCalibrate(cal);
 801447e:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8014482:	f000 bb18 	b.w	8014ab6 <SX126xCalibrate>

08014486 <SX126xIoRfSwitchInit>:
	SX126xSetDio2AsRfSwitchCtrl(DIO2_TX_ENABLE);
 8014486:	2000      	movs	r0, #0
 8014488:	f000 bb5e 	b.w	8014b48 <SX126xSetDio2AsRfSwitchCtrl>

0801448c <SX126xSetRfTxPower>:
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 801448c:	2102      	movs	r1, #2
 801448e:	f000 bb7d 	b.w	8014b8c <SX126xSetTxParams>

08014492 <SX126xWriteBuffer>:
{
 8014492:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014494:	460b      	mov	r3, r1
	uint8_t req[] = {
 8014496:	210e      	movs	r1, #14
 8014498:	f88d 100c 	strb.w	r1, [sp, #12]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 801449c:	2100      	movs	r1, #0
	uint8_t req[] = {
 801449e:	f88d 000d 	strb.w	r0, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 80144a2:	9201      	str	r2, [sp, #4]
 80144a4:	9100      	str	r1, [sp, #0]
 80144a6:	2202      	movs	r2, #2
 80144a8:	a803      	add	r0, sp, #12
 80144aa:	f7f1 ffe7 	bl	800647c <sx126x_spi_transceive.isra.0>
}
 80144ae:	b005      	add	sp, #20
 80144b0:	f85d fb04 	ldr.w	pc, [sp], #4

080144b4 <SX126xReadBuffer>:
{
 80144b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t req[] = {
 80144b6:	231e      	movs	r3, #30
 80144b8:	f88d 300c 	strb.w	r3, [sp, #12]
 80144bc:	2300      	movs	r3, #0
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 80144be:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t req[] = {
 80144c2:	f88d 000d 	strb.w	r0, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 80144c6:	2203      	movs	r2, #3
 80144c8:	4619      	mov	r1, r3
 80144ca:	a803      	add	r0, sp, #12
	uint8_t req[] = {
 80144cc:	f88d 300e 	strb.w	r3, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 80144d0:	f7f1 ffd4 	bl	800647c <sx126x_spi_transceive.isra.0>
}
 80144d4:	b005      	add	sp, #20
 80144d6:	f85d fb04 	ldr.w	pc, [sp], #4

080144da <SX126xWriteCommand>:
{
 80144da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144dc:	460b      	mov	r3, r1
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 80144de:	2100      	movs	r1, #0
	uint8_t req[] = {
 80144e0:	f88d 000c 	strb.w	r0, [sp, #12]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 80144e4:	9201      	str	r2, [sp, #4]
 80144e6:	9100      	str	r1, [sp, #0]
 80144e8:	2201      	movs	r2, #1
 80144ea:	a803      	add	r0, sp, #12
 80144ec:	f7f1 ffc6 	bl	800647c <sx126x_spi_transceive.isra.0>
}
 80144f0:	b005      	add	sp, #20
 80144f2:	f85d fb04 	ldr.w	pc, [sp], #4

080144f6 <SX126xReadCommand>:
{
 80144f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_req[] = {
 80144f8:	2300      	movs	r3, #0
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 80144fa:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t tx_req[] = {
 80144fe:	f88d 0008 	strb.w	r0, [sp, #8]
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 8014502:	2202      	movs	r2, #2
 8014504:	a802      	add	r0, sp, #8
 8014506:	a903      	add	r1, sp, #12
	uint8_t tx_req[] = {
 8014508:	f88d 3009 	strb.w	r3, [sp, #9]
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 801450c:	f7f1 ffb6 	bl	800647c <sx126x_spi_transceive.isra.0>
}
 8014510:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8014514:	b005      	add	sp, #20
 8014516:	f85d fb04 	ldr.w	pc, [sp], #4

0801451a <SX126xWriteRegisters>:
{
 801451a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801451c:	460b      	mov	r3, r1
	uint8_t req[] = {
 801451e:	210d      	movs	r1, #13
 8014520:	f88d 100c 	strb.w	r1, [sp, #12]
 8014524:	0a01      	lsrs	r1, r0, #8
 8014526:	f88d 100d 	strb.w	r1, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 801452a:	2100      	movs	r1, #0
	uint8_t req[] = {
 801452c:	f88d 000e 	strb.w	r0, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 8014530:	9201      	str	r2, [sp, #4]
 8014532:	9100      	str	r1, [sp, #0]
 8014534:	2203      	movs	r2, #3
 8014536:	a803      	add	r0, sp, #12
 8014538:	f7f1 ffa0 	bl	800647c <sx126x_spi_transceive.isra.0>
}
 801453c:	b005      	add	sp, #20
 801453e:	f85d fb04 	ldr.w	pc, [sp], #4

08014542 <SX126xWriteRegister>:
{
 8014542:	b507      	push	{r0, r1, r2, lr}
	SX126xWriteRegisters(address, &value, 1);
 8014544:	2201      	movs	r2, #1
{
 8014546:	f88d 1007 	strb.w	r1, [sp, #7]
	SX126xWriteRegisters(address, &value, 1);
 801454a:	f10d 0107 	add.w	r1, sp, #7
 801454e:	f7ff ffe4 	bl	801451a <SX126xWriteRegisters>
}
 8014552:	b003      	add	sp, #12
 8014554:	f85d fb04 	ldr.w	pc, [sp], #4

08014558 <SX126xReadRegisters>:
{
 8014558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t req[] = {
 801455a:	231d      	movs	r3, #29
 801455c:	f88d 300c 	strb.w	r3, [sp, #12]
 8014560:	0a03      	lsrs	r3, r0, #8
 8014562:	f88d 300d 	strb.w	r3, [sp, #13]
 8014566:	2300      	movs	r3, #0
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 8014568:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t req[] = {
 801456c:	f88d 000e 	strb.w	r0, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 8014570:	2204      	movs	r2, #4
 8014572:	4619      	mov	r1, r3
 8014574:	a803      	add	r0, sp, #12
	uint8_t req[] = {
 8014576:	f88d 300f 	strb.w	r3, [sp, #15]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 801457a:	f7f1 ff7f 	bl	800647c <sx126x_spi_transceive.isra.0>
}
 801457e:	b005      	add	sp, #20
 8014580:	f85d fb04 	ldr.w	pc, [sp], #4

08014584 <SX126xReadRegister>:
{
 8014584:	b507      	push	{r0, r1, r2, lr}
	SX126xReadRegisters(address, &data, 1);
 8014586:	2201      	movs	r2, #1
 8014588:	f10d 0107 	add.w	r1, sp, #7
 801458c:	f7ff ffe4 	bl	8014558 <SX126xReadRegisters>
}
 8014590:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014594:	b003      	add	sp, #12
 8014596:	f85d fb04 	ldr.w	pc, [sp], #4

0801459a <radio_isr>:
{
 801459a:	b510      	push	{r4, lr}
	struct sx126x_data *dev_data = dev->data;
 801459c:	6904      	ldr	r4, [r0, #16]
	irq_disable(DT_INST_IRQN(0));
 801459e:	2032      	movs	r0, #50	; 0x32
 80145a0:	f7f0 fb64 	bl	8004c6c <arch_irq_disable>
	k_work_submit(&dev_data->dio1_irq_work);
 80145a4:	f104 000c 	add.w	r0, r4, #12
}
 80145a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&dev_data->dio1_irq_work);
 80145ac:	f7fb bf38 	b.w	8010420 <k_work_submit>

080145b0 <sx126x_reset>:
{
 80145b0:	b510      	push	{r4, lr}
  SET_BIT(RCC->CSR, RCC_CSR_RFRST);
 80145b2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80145b6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80145ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145be:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80145c2:	2100      	movs	r1, #0
 80145c4:	20c8      	movs	r0, #200	; 0xc8
 80145c6:	f7fc fa37 	bl	8010a38 <z_impl_k_sleep>
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80145ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80145ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80145d2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80145d6:	2064      	movs	r0, #100	; 0x64
}
 80145d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145dc:	2100      	movs	r1, #0
 80145de:	f7fc ba2b 	b.w	8010a38 <z_impl_k_sleep>

080145e2 <sx126x_get_dio1_pin_state>:
}
 80145e2:	2000      	movs	r0, #0
 80145e4:	4770      	bx	lr

080145e6 <sx126x_dio1_irq_disable>:
	irq_disable(DT_INST_IRQN(0));
 80145e6:	2032      	movs	r0, #50	; 0x32
 80145e8:	f7f0 bb40 	b.w	8004c6c <arch_irq_disable>

080145ec <randr>:
{
 80145ec:	b538      	push	{r3, r4, r5, lr}
 80145ee:	4605      	mov	r5, r0
 80145f0:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80145f2:	f7f1 ffeb 	bl	80065cc <rand1>
 80145f6:	1b61      	subs	r1, r4, r5
 80145f8:	3101      	adds	r1, #1
 80145fa:	fb90 f3f1 	sdiv	r3, r0, r1
 80145fe:	fb03 0011 	mls	r0, r3, r1, r0
}
 8014602:	4428      	add	r0, r5
 8014604:	bd38      	pop	{r3, r4, r5, pc}

08014606 <memcpy1>:
    while( size-- )
 8014606:	3801      	subs	r0, #1
 8014608:	440a      	add	r2, r1
 801460a:	4291      	cmp	r1, r2
 801460c:	d100      	bne.n	8014610 <memcpy1+0xa>
}
 801460e:	4770      	bx	lr
        *dst++ = *src++;
 8014610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014614:	f800 3f01 	strb.w	r3, [r0, #1]!
 8014618:	e7f7      	b.n	801460a <memcpy1+0x4>

0801461a <memcpyr>:
    while( size-- )
 801461a:	4410      	add	r0, r2
 801461c:	440a      	add	r2, r1
 801461e:	4291      	cmp	r1, r2
 8014620:	d100      	bne.n	8014624 <memcpyr+0xa>
}
 8014622:	4770      	bx	lr
        *dst-- = *src++;
 8014624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014628:	f800 3d01 	strb.w	r3, [r0, #-1]!
 801462c:	e7f7      	b.n	801461e <memcpyr+0x4>

0801462e <memset1>:
    while( size-- )
 801462e:	4402      	add	r2, r0
 8014630:	4290      	cmp	r0, r2
 8014632:	d100      	bne.n	8014636 <memset1+0x8>
}
 8014634:	4770      	bx	lr
        *dst++ = value;
 8014636:	f800 1b01 	strb.w	r1, [r0], #1
 801463a:	e7f9      	b.n	8014630 <memset1+0x2>

0801463c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801463c:	b082      	sub	sp, #8
 801463e:	b082      	sub	sp, #8
 8014640:	f10d 0c08 	add.w	ip, sp, #8
 8014644:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014648:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 801464c:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 801464e:	440b      	add	r3, r1
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014650:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014654:	440a      	add	r2, r1
 8014656:	b291      	uxth	r1, r2
 8014658:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
 801465a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 801465e:	bfa2      	ittt	ge
 8014660:	f5a1 727a 	subge.w	r2, r1, #1000	; 0x3e8
        c.Seconds++;
 8014664:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
 8014666:	b212      	sxthge	r2, r2
    }
    return c;
 8014668:	6003      	str	r3, [r0, #0]
 801466a:	8082      	strh	r2, [r0, #4]
}
 801466c:	b002      	add	sp, #8
 801466e:	b002      	add	sp, #8
 8014670:	4770      	bx	lr

08014672 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8014672:	b082      	sub	sp, #8
 8014674:	b082      	sub	sp, #8
 8014676:	f10d 0c08 	add.w	ip, sp, #8
 801467a:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801467e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 8014682:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 8014684:	1acb      	subs	r3, r1, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014686:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801468a:	1a52      	subs	r2, r2, r1
 801468c:	b291      	uxth	r1, r2
 801468e:	b212      	sxth	r2, r2
    if( c.SubSeconds < 0 )
 8014690:	2a00      	cmp	r2, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 8014692:	bfbe      	ittt	lt
 8014694:	f501 727a 	addlt.w	r2, r1, #1000	; 0x3e8
        c.Seconds--;
 8014698:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 801469c:	b212      	sxthlt	r2, r2
    }
    return c;
 801469e:	6003      	str	r3, [r0, #0]
 80146a0:	8082      	strh	r2, [r0, #4]
}
 80146a2:	b002      	add	sp, #8
 80146a4:	b002      	add	sp, #8
 80146a6:	4770      	bx	lr

080146a8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80146a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146aa:	466b      	mov	r3, sp
 80146ac:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80146b0:	2300      	movs	r3, #0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80146b2:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80146b4:	9302      	str	r3, [sp, #8]
 80146b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80146ba:	f7ff fe7f 	bl	80143bc <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 80146be:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80146c0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80146c4:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 80146c6:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80146c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80146cc:	1ac9      	subs	r1, r1, r3
 80146ce:	b28b      	uxth	r3, r1
 80146d0:	b209      	sxth	r1, r1
    if( c.SubSeconds < 0 )
 80146d2:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
 80146d4:	bfbe      	ittt	lt
 80146d6:	f503 717a 	addlt.w	r1, r3, #1000	; 0x3e8
        c.Seconds--;
 80146da:	f100 30ff 	addlt.w	r0, r0, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 80146de:	b209      	sxthlt	r1, r1

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
 80146e0:	f7f1 fb00 	bl	8005ce4 <RtcBkupWrite>
}
 80146e4:	b005      	add	sp, #20
 80146e6:	f85d fb04 	ldr.w	pc, [sp], #4

080146ea <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80146ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146ec:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80146ee:	2300      	movs	r3, #0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80146f0:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80146f2:	9302      	str	r3, [sp, #8]
 80146f4:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80146f8:	f7ff fe60 	bl	80143bc <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
 80146fc:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80146fe:	9002      	str	r0, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
 8014700:	4668      	mov	r0, sp
 8014702:	f7f1 faf5 	bl	8005cf0 <RtcBkupRead>
    c.Seconds = a.Seconds + b.Seconds;
 8014706:	9b02      	ldr	r3, [sp, #8]
 8014708:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801470a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 801470e:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014710:	9b01      	ldr	r3, [sp, #4]
 8014712:	440b      	add	r3, r1
 8014714:	b299      	uxth	r1, r3
 8014716:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 8014718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 801471c:	bfa2      	ittt	ge
 801471e:	f5a1 737a 	subge.w	r3, r1, #1000	; 0x3e8
        c.Seconds++;
 8014722:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
 8014724:	b21b      	sxthge	r3, r3
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
 8014726:	4620      	mov	r0, r4
    return sysTime;
 8014728:	6022      	str	r2, [r4, #0]
 801472a:	80a3      	strh	r3, [r4, #4]
}
 801472c:	b004      	add	sp, #16
 801472e:	bd10      	pop	{r4, pc}

08014730 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
 8014730:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014732:	2300      	movs	r3, #0
{
 8014734:	4604      	mov	r4, r0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014736:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014738:	9300      	str	r3, [sp, #0]
 801473a:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801473e:	f7ff fe3d 	bl	80143bc <RtcGetCalendarTime>
 8014742:	466d      	mov	r5, sp
 8014744:	9000      	str	r0, [sp, #0]

    return calendarTime;
 8014746:	e895 0003 	ldmia.w	r5, {r0, r1}
 801474a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 801474e:	4620      	mov	r0, r4
 8014750:	b003      	add	sp, #12
 8014752:	bd30      	pop	{r4, r5, pc}

08014754 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8014754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014756:	466b      	mov	r3, sp
 8014758:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
 801475c:	a903      	add	r1, sp, #12
 801475e:	a802      	add	r0, sp, #8
 8014760:	f7f1 fac6 	bl	8005cf0 <RtcBkupRead>
    c.Seconds = a.Seconds - b.Seconds;
 8014764:	9802      	ldr	r0, [sp, #8]
 8014766:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014768:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c.Seconds = a.Seconds - b.Seconds;
 801476c:	1a12      	subs	r2, r2, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801476e:	9803      	ldr	r0, [sp, #12]
 8014770:	1a1b      	subs	r3, r3, r0
 8014772:	b299      	uxth	r1, r3
 8014774:	b21b      	sxth	r3, r3
    if( c.SubSeconds < 0 )
 8014776:	2b00      	cmp	r3, #0
        c.SubSeconds += 1000;
 8014778:	bfbe      	ittt	lt
 801477a:	f501 737a 	addlt.w	r3, r1, #1000	; 0x3e8
        c.Seconds--;
 801477e:	f102 32ff 	addlt.w	r2, r2, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 8014782:	b21b      	sxthlt	r3, r3
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}
 8014784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014788:	fb00 3002 	mla	r0, r0, r2, r3
 801478c:	b005      	add	sp, #20
 801478e:	f85d fb04 	ldr.w	pc, [sp], #4

08014792 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8014792:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t seconds = timeMs / 1000;
 8014794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8014798:	4606      	mov	r6, r0
    uint32_t seconds = timeMs / 1000;
 801479a:	fbb1 f4f3 	udiv	r4, r1, r3
    uint32_t subSeconds = timeMs - seconds * 1000;
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
 801479e:	4668      	mov	r0, sp
 80147a0:	fb03 1514 	mls	r5, r3, r4, r1
 80147a4:	a901      	add	r1, sp, #4
    uint32_t seconds = timeMs / 1000;
 80147a6:	9400      	str	r4, [sp, #0]
    uint32_t subSeconds = timeMs - seconds * 1000;
 80147a8:	9501      	str	r5, [sp, #4]
    RtcBkupRead( &seconds, &subSeconds );
 80147aa:	f7f1 faa1 	bl	8005cf0 <RtcBkupRead>
    c.Seconds = a.Seconds + b.Seconds;
 80147ae:	9b00      	ldr	r3, [sp, #0]
 80147b0:	441c      	add	r4, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80147b2:	9b01      	ldr	r3, [sp, #4]
 80147b4:	442b      	add	r3, r5
 80147b6:	b29a      	uxth	r2, r3
 80147b8:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 80147ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 80147be:	bfa2      	ittt	ge
 80147c0:	f5a2 737a 	subge.w	r3, r2, #1000	; 0x3e8
        c.Seconds++;
 80147c4:	3401      	addge	r4, #1
        c.SubSeconds -= 1000;
 80147c6:	b21b      	sxthge	r3, r3

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
 80147c8:	4630      	mov	r0, r6
    return c;
 80147ca:	6034      	str	r4, [r6, #0]
 80147cc:	80b3      	strh	r3, [r6, #4]
}
 80147ce:	b002      	add	sp, #8
 80147d0:	bd70      	pop	{r4, r5, r6, pc}

080147d2 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 80147d2:	b570      	push	{r4, r5, r6, lr}
 80147d4:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 80147d6:	f7ff fe0b 	bl	80143f0 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 80147da:	2301      	movs	r3, #1
 80147dc:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 80147de:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 80147e0:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 80147e2:	f7f1 fa8d 	bl	8005d00 <RtcGetTimerElapsedTime>
 80147e6:	4428      	add	r0, r5
 80147e8:	4286      	cmp	r6, r0
 80147ea:	d203      	bcs.n	80147f4 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 80147ec:	f7f1 fa88 	bl	8005d00 <RtcGetTimerElapsedTime>
 80147f0:	4405      	add	r5, r0
 80147f2:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 80147f4:	6820      	ldr	r0, [r4, #0]
}
 80147f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
 80147fa:	f7f1 ba91 	b.w	8005d20 <RtcSetAlarm>

080147fe <TimerInit>:
    obj->Timestamp = 0;
 80147fe:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
 8014800:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
 8014804:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
 8014808:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
 801480a:	6143      	str	r3, [r0, #20]
}
 801480c:	4770      	bx	lr

0801480e <TimerSetValue>:
{
 801480e:	b538      	push	{r3, r4, r5, lr}
 8014810:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
 8014812:	4608      	mov	r0, r1
 8014814:	f7ff fdf3 	bl	80143fe <RtcMs2Tick>
 8014818:	4604      	mov	r4, r0
    TimerStop( obj );
 801481a:	4628      	mov	r0, r5
 801481c:	f7f1 ff8a 	bl	8006734 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 8014820:	f7ff fde6 	bl	80143f0 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 8014824:	42a0      	cmp	r0, r4
 8014826:	bf38      	it	cc
 8014828:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
 801482a:	e9c5 0000 	strd	r0, r0, [r5]
}
 801482e:	bd38      	pop	{r3, r4, r5, pc}

08014830 <TimerGetCurrentTime>:
{
 8014830:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 8014832:	f7ff fddb 	bl	80143ec <RtcGetTimerValue>
}
 8014836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
 801483a:	f7ff bde1 	b.w	8014400 <RtcTick2Ms>

0801483e <TimerGetElapsedTime>:
{
 801483e:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 8014840:	4604      	mov	r4, r0
 8014842:	b150      	cbz	r0, 801485a <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
 8014844:	f7ff fdd2 	bl	80143ec <RtcGetTimerValue>
 8014848:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 801484a:	4620      	mov	r0, r4
 801484c:	f7ff fdd7 	bl	80143fe <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8014850:	1a28      	subs	r0, r5, r0
}
 8014852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8014856:	f7ff bdd3 	b.w	8014400 <RtcTick2Ms>
}
 801485a:	bd38      	pop	{r3, r4, r5, pc}

0801485c <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
 801485c:	f7ff bdca 	b.w	80143f4 <DelayMsMcu>

08014860 <SX126xCheckDeviceReady>:
{
 8014860:	b508      	push	{r3, lr}
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 8014862:	f7f1 fdbf 	bl	80063e4 <SX126xGetOperatingMode>
 8014866:	b938      	cbnz	r0, 8014878 <SX126xCheckDeviceReady+0x18>
        SX126xWakeup( );
 8014868:	f7f1 fe4c 	bl	8006504 <SX126xWakeup>
        SX126xAntSwOn( );
 801486c:	f7ff fdf9 	bl	8014462 <SX126xAntSwOn>
}
 8014870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xWaitOnBusy( );
 8014874:	f7f1 bdf4 	b.w	8006460 <SX126xWaitOnBusy>
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 8014878:	f7f1 fdb4 	bl	80063e4 <SX126xGetOperatingMode>
 801487c:	2806      	cmp	r0, #6
 801487e:	d1f7      	bne.n	8014870 <SX126xCheckDeviceReady+0x10>
 8014880:	e7f2      	b.n	8014868 <SX126xCheckDeviceReady+0x8>

08014882 <SX126xSetPayload>:
{
 8014882:	460a      	mov	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 8014884:	4601      	mov	r1, r0
 8014886:	2000      	movs	r0, #0
 8014888:	f7ff be03 	b.w	8014492 <SX126xWriteBuffer>

0801488c <SX126xSetSyncWord>:
{
 801488c:	b508      	push	{r3, lr}
 801488e:	4601      	mov	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8014890:	2208      	movs	r2, #8
 8014892:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8014896:	f7ff fe40 	bl	801451a <SX126xWriteRegisters>
}
 801489a:	2000      	movs	r0, #0
 801489c:	bd08      	pop	{r3, pc}

0801489e <SX126xSetStandby>:
{
 801489e:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80148a0:	2201      	movs	r2, #1
{
 80148a2:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80148a6:	f10d 0107 	add.w	r1, sp, #7
 80148aa:	2080      	movs	r0, #128	; 0x80
 80148ac:	f7ff fe15 	bl	80144da <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 80148b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80148b4:	b92b      	cbnz	r3, 80148c2 <SX126xSetStandby+0x24>
        SX126xSetOperatingMode( MODE_STDBY_RC );
 80148b6:	2001      	movs	r0, #1
        SX126xSetOperatingMode( MODE_STDBY_XOSC );
 80148b8:	f7f1 fd9a 	bl	80063f0 <SX126xSetOperatingMode>
}
 80148bc:	b003      	add	sp, #12
 80148be:	f85d fb04 	ldr.w	pc, [sp], #4
        SX126xSetOperatingMode( MODE_STDBY_XOSC );
 80148c2:	2002      	movs	r0, #2
 80148c4:	e7f8      	b.n	80148b8 <SX126xSetStandby+0x1a>

080148c6 <SX126xSetTx>:
{
 80148c6:	b513      	push	{r0, r1, r4, lr}
 80148c8:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_TX );
 80148ca:	2004      	movs	r0, #4
 80148cc:	f7f1 fd90 	bl	80063f0 <SX126xSetOperatingMode>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80148d0:	0c23      	lsrs	r3, r4, #16
 80148d2:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 80148d6:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80148d8:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 80148da:	a901      	add	r1, sp, #4
 80148dc:	2083      	movs	r0, #131	; 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80148de:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80148e2:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 80148e6:	f7ff fdf8 	bl	80144da <SX126xWriteCommand>
}
 80148ea:	b002      	add	sp, #8
 80148ec:	bd10      	pop	{r4, pc}

080148ee <SX126xSendPayload>:
{
 80148ee:	b510      	push	{r4, lr}
 80148f0:	4614      	mov	r4, r2
    SX126xSetPayload( payload, size );
 80148f2:	f7ff ffc6 	bl	8014882 <SX126xSetPayload>
    SX126xSetTx( timeout );
 80148f6:	4620      	mov	r0, r4
}
 80148f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX126xSetTx( timeout );
 80148fc:	f7ff bfe3 	b.w	80148c6 <SX126xSetTx>

08014900 <SX126xSetRx>:
{
 8014900:	b513      	push	{r0, r1, r4, lr}
 8014902:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 8014904:	2005      	movs	r0, #5
 8014906:	f7f1 fd73 	bl	80063f0 <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 801490a:	2194      	movs	r1, #148	; 0x94
 801490c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8014910:	f7ff fe17 	bl	8014542 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014914:	0c23      	lsrs	r3, r4, #16
 8014916:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 801491a:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801491c:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 801491e:	a901      	add	r1, sp, #4
 8014920:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014922:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8014926:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 801492a:	f7ff fdd6 	bl	80144da <SX126xWriteCommand>
}
 801492e:	b002      	add	sp, #8
 8014930:	bd10      	pop	{r4, pc}

08014932 <SX126xGetRandom>:
{
 8014932:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t number = 0;
 8014934:	2600      	movs	r6, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8014936:	f640 00e2 	movw	r0, #2274	; 0x8e2
    uint32_t number = 0;
 801493a:	9601      	str	r6, [sp, #4]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 801493c:	f7ff fe22 	bl	8014584 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8014940:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8014944:	4605      	mov	r5, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8014946:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801494a:	f7ff fdfa 	bl	8014542 <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 801494e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014952:	f7ff fe17 	bl	8014584 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8014956:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 801495a:	4604      	mov	r4, r0
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801495c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014960:	f7ff fdef 	bl	8014542 <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8014964:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014968:	f7ff ffca 	bl	8014900 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801496c:	2204      	movs	r2, #4
 801496e:	eb0d 0102 	add.w	r1, sp, r2
 8014972:	f640 0019 	movw	r0, #2073	; 0x819
 8014976:	f7ff fdef 	bl	8014558 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 801497a:	4630      	mov	r0, r6
 801497c:	f7ff ff8f 	bl	801489e <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 8014980:	4629      	mov	r1, r5
 8014982:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8014986:	f7ff fddc 	bl	8014542 <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 801498a:	4621      	mov	r1, r4
 801498c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014990:	f7ff fdd7 	bl	8014542 <SX126xWriteRegister>
}
 8014994:	9801      	ldr	r0, [sp, #4]
 8014996:	b002      	add	sp, #8
 8014998:	bd70      	pop	{r4, r5, r6, pc}

0801499a <SX126xSetRxBoosted>:
{
 801499a:	b513      	push	{r0, r1, r4, lr}
 801499c:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 801499e:	2005      	movs	r0, #5
 80149a0:	f7f1 fd26 	bl	80063f0 <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80149a4:	2196      	movs	r1, #150	; 0x96
 80149a6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80149aa:	f7ff fdca 	bl	8014542 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80149ae:	0c23      	lsrs	r3, r4, #16
 80149b0:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 80149b4:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80149b6:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 80149b8:	a901      	add	r1, sp, #4
 80149ba:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80149bc:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80149c0:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 80149c4:	f7ff fd89 	bl	80144da <SX126xWriteCommand>
}
 80149c8:	b002      	add	sp, #8
 80149ca:	bd10      	pop	{r4, pc}

080149cc <SX126xSetRxDutyCycle>:
{
 80149cc:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80149ce:	0c03      	lsrs	r3, r0, #16
 80149d0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80149d4:	0a03      	lsrs	r3, r0, #8
 80149d6:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80149da:	0c0b      	lsrs	r3, r1, #16
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80149dc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80149e0:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80149e4:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80149e8:	0a0b      	lsrs	r3, r1, #8
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80149ea:	2206      	movs	r2, #6
 80149ec:	4669      	mov	r1, sp
 80149ee:	2094      	movs	r0, #148	; 0x94
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80149f0:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80149f4:	f7ff fd71 	bl	80144da <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_RX_DC );
 80149f8:	2006      	movs	r0, #6
 80149fa:	f7f1 fcf9 	bl	80063f0 <SX126xSetOperatingMode>
}
 80149fe:	b003      	add	sp, #12
 8014a00:	f85d fb04 	ldr.w	pc, [sp], #4

08014a04 <SX126xSetCad>:
{
 8014a04:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 8014a06:	2200      	movs	r2, #0
 8014a08:	20c5      	movs	r0, #197	; 0xc5
 8014a0a:	4611      	mov	r1, r2
 8014a0c:	f7ff fd65 	bl	80144da <SX126xWriteCommand>
}
 8014a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetOperatingMode( MODE_CAD );
 8014a14:	2007      	movs	r0, #7
 8014a16:	f7f1 bceb 	b.w	80063f0 <SX126xSetOperatingMode>

08014a1a <SX126xSetTxContinuousWave>:
{
 8014a1a:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	20d1      	movs	r0, #209	; 0xd1
 8014a20:	4611      	mov	r1, r2
 8014a22:	f7ff fd5a 	bl	80144da <SX126xWriteCommand>
}
 8014a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetOperatingMode( MODE_TX );
 8014a2a:	2004      	movs	r0, #4
 8014a2c:	f7f1 bce0 	b.w	80063f0 <SX126xSetOperatingMode>

08014a30 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 8014a30:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8014a32:	2201      	movs	r2, #1
{
 8014a34:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8014a38:	f10d 0107 	add.w	r1, sp, #7
 8014a3c:	209f      	movs	r0, #159	; 0x9f
 8014a3e:	f7ff fd4c 	bl	80144da <SX126xWriteCommand>
}
 8014a42:	b003      	add	sp, #12
 8014a44:	f85d fb04 	ldr.w	pc, [sp], #4

08014a48 <SX126xSetLoRaSymbNumTimeout>:
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 8014a48:	28f8      	cmp	r0, #248	; 0xf8
{
 8014a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	bf28      	it	cs
 8014a50:	24f8      	movcs	r4, #248	; 0xf8
                       symbNum ) + 1 ) >> 1;
 8014a52:	3401      	adds	r4, #1
{
 8014a54:	4606      	mov	r6, r0
    uint8_t mant = ( ( ( symbNum > SX126X_MAX_LORA_SYMB_NUM_TIMEOUT ) ?
 8014a56:	f3c4 0446 	ubfx	r4, r4, #1, #7
    while( mant > 31 )
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	2c1f      	cmp	r4, #31
 8014a5e:	b2dd      	uxtb	r5, r3
 8014a60:	f103 0301 	add.w	r3, r3, #1
 8014a64:	d817      	bhi.n	8014a96 <SX126xSetLoRaSymbNumTimeout+0x4e>
    reg = mant << ( 2 * exp + 1 );
 8014a66:	006b      	lsls	r3, r5, #1
 8014a68:	3301      	adds	r3, #1
 8014a6a:	fa04 f303 	lsl.w	r3, r4, r3
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 8014a6e:	2201      	movs	r2, #1
 8014a70:	f10d 0107 	add.w	r1, sp, #7
 8014a74:	20a0      	movs	r0, #160	; 0xa0
    reg = mant << ( 2 * exp + 1 );
 8014a76:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 8014a7a:	f7ff fd2e 	bl	80144da <SX126xWriteCommand>
    if( symbNum != 0 )
 8014a7e:	b146      	cbz	r6, 8014a92 <SX126xSetLoRaSymbNumTimeout+0x4a>
        reg = exp + ( mant << 3 );
 8014a80:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014a84:	b2c9      	uxtb	r1, r1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8014a86:	f240 7006 	movw	r0, #1798	; 0x706
        reg = exp + ( mant << 3 );
 8014a8a:	f88d 1007 	strb.w	r1, [sp, #7]
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8014a8e:	f7ff fd58 	bl	8014542 <SX126xWriteRegister>
}
 8014a92:	b002      	add	sp, #8
 8014a94:	bd70      	pop	{r4, r5, r6, pc}
        mant = ( mant + 3 ) >> 2;
 8014a96:	3403      	adds	r4, #3
 8014a98:	f3c4 0487 	ubfx	r4, r4, #2, #8
        exp++;
 8014a9c:	e7de      	b.n	8014a5c <SX126xSetLoRaSymbNumTimeout+0x14>

08014a9e <SX126xSetRegulatorMode>:
{
 8014a9e:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8014aa0:	2201      	movs	r2, #1
{
 8014aa2:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8014aa6:	f10d 0107 	add.w	r1, sp, #7
 8014aaa:	2096      	movs	r0, #150	; 0x96
 8014aac:	f7ff fd15 	bl	80144da <SX126xWriteCommand>
}
 8014ab0:	b003      	add	sp, #12
 8014ab2:	f85d fb04 	ldr.w	pc, [sp], #4

08014ab6 <SX126xCalibrate>:
{
 8014ab6:	b507      	push	{r0, r1, r2, lr}
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8014ab8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014abc:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 8014ac0:	2201      	movs	r2, #1
 8014ac2:	f10d 0107 	add.w	r1, sp, #7
 8014ac6:	2089      	movs	r0, #137	; 0x89
 8014ac8:	f7ff fd07 	bl	80144da <SX126xWriteCommand>
}
 8014acc:	b003      	add	sp, #12
 8014ace:	f85d fb04 	ldr.w	pc, [sp], #4

08014ad2 <SX126xSetPaConfig>:
{
 8014ad2:	b507      	push	{r0, r1, r2, lr}
    buf[2] = deviceSel;
 8014ad4:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8014ad8:	2204      	movs	r2, #4
    buf[0] = paDutyCycle;
 8014ada:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8014ade:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8014ae2:	2095      	movs	r0, #149	; 0x95
 8014ae4:	eb0d 0102 	add.w	r1, sp, r2
    buf[3] = paLut;
 8014ae8:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8014aec:	f7ff fcf5 	bl	80144da <SX126xWriteCommand>
}
 8014af0:	b003      	add	sp, #12
 8014af2:	f85d fb04 	ldr.w	pc, [sp], #4

08014af6 <SX126xSetDioIrqParams>:
{
 8014af6:	b513      	push	{r0, r1, r4, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8014af8:	0a04      	lsrs	r4, r0, #8
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8014afa:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8014afe:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8014b02:	0a08      	lsrs	r0, r1, #8
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8014b04:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8014b08:	0a11      	lsrs	r1, r2, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8014b0a:	0a1a      	lsrs	r2, r3, #8
 8014b0c:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8014b10:	2208      	movs	r2, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8014b12:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8014b16:	f88d 1004 	strb.w	r1, [sp, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8014b1a:	4610      	mov	r0, r2
 8014b1c:	4669      	mov	r1, sp
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8014b1e:	f88d 4000 	strb.w	r4, [sp]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8014b22:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8014b26:	f7ff fcd8 	bl	80144da <SX126xWriteCommand>
}
 8014b2a:	b002      	add	sp, #8
 8014b2c:	bd10      	pop	{r4, pc}

08014b2e <SX126xGetIrqStatus>:
{
 8014b2e:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8014b30:	2202      	movs	r2, #2
 8014b32:	a901      	add	r1, sp, #4
 8014b34:	2012      	movs	r0, #18
 8014b36:	f7ff fcde 	bl	80144f6 <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8014b3a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8014b3e:	ba40      	rev16	r0, r0
}
 8014b40:	b280      	uxth	r0, r0
 8014b42:	b003      	add	sp, #12
 8014b44:	f85d fb04 	ldr.w	pc, [sp], #4

08014b48 <SX126xSetDio2AsRfSwitchCtrl>:
{
 8014b48:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8014b4a:	2201      	movs	r2, #1
{
 8014b4c:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8014b50:	f10d 0107 	add.w	r1, sp, #7
 8014b54:	209d      	movs	r0, #157	; 0x9d
 8014b56:	f7ff fcc0 	bl	80144da <SX126xWriteCommand>
}
 8014b5a:	b003      	add	sp, #12
 8014b5c:	f85d fb04 	ldr.w	pc, [sp], #4

08014b60 <SX126xSetDio3AsTcxoCtrl>:
{
 8014b60:	b507      	push	{r0, r1, r2, lr}
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014b62:	0c0b      	lsrs	r3, r1, #16
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8014b64:	2204      	movs	r2, #4
    buf[0] = tcxoVoltage & 0x07;
 8014b66:	f000 0007 	and.w	r0, r0, #7
 8014b6a:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014b6e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8014b72:	f88d 1007 	strb.w	r1, [sp, #7]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014b76:	0a0b      	lsrs	r3, r1, #8
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8014b78:	2097      	movs	r0, #151	; 0x97
 8014b7a:	eb0d 0102 	add.w	r1, sp, r2
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014b7e:	f88d 3006 	strb.w	r3, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8014b82:	f7ff fcaa 	bl	80144da <SX126xWriteCommand>
}
 8014b86:	b003      	add	sp, #12
 8014b88:	f85d fb04 	ldr.w	pc, [sp], #4

08014b8c <SX126xSetTxParams>:
{
 8014b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b8e:	4604      	mov	r4, r0
 8014b90:	460d      	mov	r5, r1
    if( SX126xGetDeviceId( ) == SX1261 )
 8014b92:	f7ff fc6a 	bl	801446a <SX126xGetDeviceId>
 8014b96:	2801      	cmp	r0, #1
 8014b98:	4603      	mov	r3, r0
 8014b9a:	d11b      	bne.n	8014bd4 <SX126xSetTxParams+0x48>
        if( power == 15 )
 8014b9c:	2c0f      	cmp	r4, #15
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	f04f 0100 	mov.w	r1, #0
 8014ba4:	bf0c      	ite	eq
 8014ba6:	2006      	moveq	r0, #6
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8014ba8:	2004      	movne	r0, #4
 8014baa:	f7ff ff92 	bl	8014ad2 <SX126xSetPaConfig>
        if( power >= 14 )
 8014bae:	f06f 0010 	mvn.w	r0, #16
 8014bb2:	4284      	cmp	r4, r0
 8014bb4:	bfb8      	it	lt
 8014bb6:	4604      	movlt	r4, r0
 8014bb8:	2c0e      	cmp	r4, #14
 8014bba:	bfa8      	it	ge
 8014bbc:	240e      	movge	r4, #14
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8014bbe:	2202      	movs	r2, #2
 8014bc0:	a901      	add	r1, sp, #4
 8014bc2:	208e      	movs	r0, #142	; 0x8e
    buf[0] = power;
 8014bc4:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 8014bc8:	f88d 5005 	strb.w	r5, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8014bcc:	f7ff fc85 	bl	80144da <SX126xWriteCommand>
}
 8014bd0:	b003      	add	sp, #12
 8014bd2:	bd30      	pop	{r4, r5, pc}
        SX126xWriteRegister( REG_TX_CLAMP_CFG, SX126xReadRegister( REG_TX_CLAMP_CFG ) | ( 0x0F << 1 ) );
 8014bd4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8014bd8:	f7ff fcd4 	bl	8014584 <SX126xReadRegister>
 8014bdc:	f040 011e 	orr.w	r1, r0, #30
 8014be0:	b2c9      	uxtb	r1, r1
 8014be2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8014be6:	f7ff fcac 	bl	8014542 <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8014bea:	2004      	movs	r0, #4
 8014bec:	2301      	movs	r3, #1
 8014bee:	2200      	movs	r2, #0
 8014bf0:	2107      	movs	r1, #7
 8014bf2:	f7ff ff6e 	bl	8014ad2 <SX126xSetPaConfig>
        if( power > 22 )
 8014bf6:	f06f 0008 	mvn.w	r0, #8
 8014bfa:	4284      	cmp	r4, r0
 8014bfc:	bfb8      	it	lt
 8014bfe:	4604      	movlt	r4, r0
 8014c00:	2c16      	cmp	r4, #22
 8014c02:	bfa8      	it	ge
 8014c04:	2416      	movge	r4, #22
 8014c06:	e7da      	b.n	8014bbe <SX126xSetTxParams+0x32>

08014c08 <SX126xSetBufferBaseAddress>:
{
 8014c08:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8014c0a:	2202      	movs	r2, #2
    buf[0] = txBaseAddress;
 8014c0c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8014c10:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8014c14:	208f      	movs	r0, #143	; 0x8f
 8014c16:	a901      	add	r1, sp, #4
 8014c18:	f7ff fc5f 	bl	80144da <SX126xWriteCommand>
}
 8014c1c:	b003      	add	sp, #12
 8014c1e:	f85d fb04 	ldr.w	pc, [sp], #4

08014c22 <SX126xGetRssiInst>:
{
 8014c22:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8014c24:	2201      	movs	r2, #1
 8014c26:	a901      	add	r1, sp, #4
 8014c28:	2015      	movs	r0, #21
 8014c2a:	f7ff fc64 	bl	80144f6 <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 8014c2e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8014c32:	4240      	negs	r0, r0
}
 8014c34:	1040      	asrs	r0, r0, #1
 8014c36:	b003      	add	sp, #12
 8014c38:	f85d fb04 	ldr.w	pc, [sp], #4

08014c3c <SX126xGetPayload>:
{
 8014c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c3e:	460d      	mov	r5, r1
 8014c40:	4606      	mov	r6, r0
    uint8_t offset = 0;
 8014c42:	2400      	movs	r4, #0
    SX126xGetRxBufferStatus( size, &offset );
 8014c44:	f10d 0107 	add.w	r1, sp, #7
 8014c48:	4628      	mov	r0, r5
{
 8014c4a:	4617      	mov	r7, r2
    uint8_t offset = 0;
 8014c4c:	f88d 4007 	strb.w	r4, [sp, #7]
    SX126xGetRxBufferStatus( size, &offset );
 8014c50:	f7f1 ff58 	bl	8006b04 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 8014c54:	782a      	ldrb	r2, [r5, #0]
 8014c56:	42ba      	cmp	r2, r7
 8014c58:	d807      	bhi.n	8014c6a <SX126xGetPayload+0x2e>
    SX126xReadBuffer( offset, buffer, *size );
 8014c5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014c5e:	4631      	mov	r1, r6
 8014c60:	f7ff fc28 	bl	80144b4 <SX126xReadBuffer>
    return 0;
 8014c64:	4620      	mov	r0, r4
}
 8014c66:	b003      	add	sp, #12
 8014c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 8014c6a:	2001      	movs	r0, #1
 8014c6c:	e7fb      	b.n	8014c66 <SX126xGetPayload+0x2a>

08014c6e <SX126xClearIrqStatus>:
{
 8014c6e:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8014c70:	2202      	movs	r2, #2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8014c72:	0a03      	lsrs	r3, r0, #8
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 8014c74:	f88d 0005 	strb.w	r0, [sp, #5]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8014c78:	a901      	add	r1, sp, #4
 8014c7a:	4610      	mov	r0, r2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8014c7c:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8014c80:	f7ff fc2b 	bl	80144da <SX126xWriteCommand>
}
 8014c84:	b003      	add	sp, #12
 8014c86:	f85d fb04 	ldr.w	pc, [sp], #4

08014c8a <RadioCheckRfFrequency>:
}
 8014c8a:	2001      	movs	r0, #1
 8014c8c:	4770      	bx	lr

08014c8e <RadioStandby>:
    SX126xSetStandby( STDBY_RC );
 8014c8e:	2000      	movs	r0, #0
 8014c90:	f7ff be05 	b.w	801489e <SX126xSetStandby>

08014c94 <RadioSetChannel>:
    SX126xSetRfFrequency( freq );
 8014c94:	f7f1 be32 	b.w	80068fc <SX126xSetRfFrequency>

08014c98 <RadioRead>:
    return SX126xReadRegister( addr );
 8014c98:	b280      	uxth	r0, r0
 8014c9a:	f7ff bc73 	b.w	8014584 <SX126xReadRegister>

08014c9e <RadioWrite>:
    SX126xWriteRegister( addr, data );
 8014c9e:	b280      	uxth	r0, r0
 8014ca0:	f7ff bc4f 	b.w	8014542 <SX126xWriteRegister>

08014ca4 <RadioSleep>:
{
 8014ca4:	b508      	push	{r3, lr}
    SX126xSetSleep( params );
 8014ca6:	f04f 0004 	mov.w	r0, #4
 8014caa:	f7f1 fdb3 	bl	8006814 <SX126xSetSleep>
}
 8014cae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DelayMs( 2 );
 8014cb2:	2002      	movs	r0, #2
 8014cb4:	f7ff bdd2 	b.w	801485c <DelayMs>

08014cb8 <RadioSetRxDutyCycle>:
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 8014cb8:	f7ff be88 	b.w	80149cc <SX126xSetRxDutyCycle>

08014cbc <RadioReadBuffer>:
    SX126xReadRegisters( addr, buffer, size );
 8014cbc:	b280      	uxth	r0, r0
 8014cbe:	f7ff bc4b 	b.w	8014558 <SX126xReadRegisters>

08014cc2 <RadioWriteBuffer>:
    SX126xWriteRegisters( addr, buffer, size );
 8014cc2:	b280      	uxth	r0, r0
 8014cc4:	f7ff bc29 	b.w	801451a <SX126xWriteRegisters>

08014cc8 <RadioStartCad>:
{
 8014cc8:	b508      	push	{r3, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014cca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8014cce:	2300      	movs	r3, #0
 8014cd0:	461a      	mov	r2, r3
 8014cd2:	4608      	mov	r0, r1
 8014cd4:	f7ff ff0f 	bl	8014af6 <SX126xSetDioIrqParams>
}
 8014cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetCad( );
 8014cdc:	f7ff be92 	b.w	8014a04 <SX126xSetCad>

08014ce0 <RadioRssi>:
{
 8014ce0:	b508      	push	{r3, lr}
    return SX126xGetRssiInst( );
 8014ce2:	f7ff ff9e 	bl	8014c22 <SX126xGetRssiInst>
}
 8014ce6:	b200      	sxth	r0, r0
 8014ce8:	bd08      	pop	{r3, pc}

08014cea <RadioGetWakeupTime>:
{
 8014cea:	b508      	push	{r3, lr}
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8014cec:	f7ff fbbb 	bl	8014466 <SX126xGetBoardTcxoWakeupTime>
}
 8014cf0:	3003      	adds	r0, #3
 8014cf2:	bd08      	pop	{r3, pc}

08014cf4 <RadioIsChannelFree>:
{
 8014cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	b08a      	sub	sp, #40	; 0x28
    RadioSetModem( MODEM_FSK );
 8014cfc:	2000      	movs	r0, #0
{
 8014cfe:	460d      	mov	r5, r1
 8014d00:	4617      	mov	r7, r2
 8014d02:	461e      	mov	r6, r3
    RadioSetModem( MODEM_FSK );
 8014d04:	f7f2 f9a8 	bl	8007058 <RadioSetModem>
    SX126xSetRfFrequency( freq );
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f7f1 fdf7 	bl	80068fc <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8014d0e:	2400      	movs	r4, #0
 8014d10:	f04f 0801 	mov.w	r8, #1
 8014d14:	2303      	movs	r3, #3
 8014d16:	f44f 7216 	mov.w	r2, #600	; 0x258
 8014d1a:	4629      	mov	r1, r5
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	e9cd 4808 	strd	r4, r8, [sp, #32]
 8014d22:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8014d26:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8014d2a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8014d2e:	e9cd 5300 	strd	r5, r3, [sp]
 8014d32:	4623      	mov	r3, r4
 8014d34:	f7f2 f9a0 	bl	8007078 <RadioSetRxConfig>
    RadioRx( 0 );
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f7f1 ffe1 	bl	8006d00 <RadioRx>
    DelayMs( 1 );
 8014d3e:	4640      	mov	r0, r8
 8014d40:	f7ff fd8c 	bl	801485c <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8014d44:	f7ff fd74 	bl	8014830 <TimerGetCurrentTime>
 8014d48:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f7ff fd77 	bl	801483e <TimerGetElapsedTime>
 8014d50:	42b0      	cmp	r0, r6
 8014d52:	d306      	bcc.n	8014d62 <RadioIsChannelFree+0x6e>
    bool     status           = true;
 8014d54:	2401      	movs	r4, #1
    RadioSleep( );
 8014d56:	f7ff ffa5 	bl	8014ca4 <RadioSleep>
}
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	b00a      	add	sp, #40	; 0x28
 8014d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SX126xGetRssiInst( );
 8014d62:	f7ff ff5e 	bl	8014c22 <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 8014d66:	b200      	sxth	r0, r0
 8014d68:	4287      	cmp	r7, r0
 8014d6a:	daee      	bge.n	8014d4a <RadioIsChannelFree+0x56>
            status = false;
 8014d6c:	2400      	movs	r4, #0
 8014d6e:	e7f2      	b.n	8014d56 <RadioIsChannelFree+0x62>

08014d70 <RadioRandom>:
{
 8014d70:	b508      	push	{r3, lr}
 8014d72:	f7f2 f95f 	bl	8007034 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014d76:	2300      	movs	r3, #0
 8014d78:	461a      	mov	r2, r3
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7ff feba 	bl	8014af6 <SX126xSetDioIrqParams>
}
 8014d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rnd = SX126xGetRandom( );
 8014d86:	f7ff bdd4 	b.w	8014932 <SX126xGetRandom>

08014d8a <RadioAddRegisterToRetentionList>:
{
 8014d8a:	b530      	push	{r4, r5, lr}
 8014d8c:	b085      	sub	sp, #20
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8014d8e:	a901      	add	r1, sp, #4
{
 8014d90:	4604      	mov	r4, r0
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8014d92:	2209      	movs	r2, #9
 8014d94:	f240 209f 	movw	r0, #671	; 0x29f
 8014d98:	f7ff fbde 	bl	8014558 <SX126xReadRegisters>
    const uint8_t nbOfRegisters = buffer[0];
 8014d9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 8014da0:	a801      	add	r0, sp, #4
 8014da2:	2100      	movs	r1, #0
 8014da4:	b2ca      	uxtb	r2, r1
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d817      	bhi.n	8014dda <RadioAddRegisterToRetentionList+0x50>
    if( nbOfRegisters < MAX_NB_REG_IN_RETENTION )
 8014daa:	2b03      	cmp	r3, #3
 8014dac:	d820      	bhi.n	8014df0 <RadioAddRegisterToRetentionList+0x66>
        buffer[0] += 1;
 8014dae:	1c5a      	adds	r2, r3, #1
 8014db0:	f88d 2004 	strb.w	r2, [sp, #4]
        registerList[2 * nbOfRegisters]     = ( uint8_t )( registerAddress >> 8 );
 8014db4:	a904      	add	r1, sp, #16
 8014db6:	2202      	movs	r2, #2
 8014db8:	fb03 1102 	mla	r1, r3, r2, r1
 8014dbc:	0a20      	lsrs	r0, r4, #8
 8014dbe:	f801 0c0b 	strb.w	r0, [r1, #-11]
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 8014dc2:	a904      	add	r1, sp, #16
 8014dc4:	fb02 1303 	mla	r3, r2, r3, r1
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8014dc8:	f240 209f 	movw	r0, #671	; 0x29f
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 8014dcc:	f803 4c0a 	strb.w	r4, [r3, #-10]
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8014dd0:	2209      	movs	r2, #9
 8014dd2:	a901      	add	r1, sp, #4
 8014dd4:	f7ff fba1 	bl	801451a <SX126xWriteRegisters>
 8014dd8:	e00a      	b.n	8014df0 <RadioAddRegisterToRetentionList+0x66>
        if( registerAddress == ( ( uint16_t ) registerList[2 * i] << 8 ) + registerList[2 * i + 1] )
 8014dda:	4602      	mov	r2, r0
 8014ddc:	7845      	ldrb	r5, [r0, #1]
 8014dde:	7892      	ldrb	r2, [r2, #2]
 8014de0:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8014de4:	4294      	cmp	r4, r2
 8014de6:	f101 0101 	add.w	r1, r1, #1
 8014dea:	f100 0002 	add.w	r0, r0, #2
 8014dee:	d1d9      	bne.n	8014da4 <RadioAddRegisterToRetentionList+0x1a>
}
 8014df0:	b005      	add	sp, #20
 8014df2:	bd30      	pop	{r4, r5, pc}

08014df4 <xor_block>:
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8014df4:	780a      	ldrb	r2, [r1, #0]
 8014df6:	7803      	ldrb	r3, [r0, #0]
 8014df8:	4053      	eors	r3, r2
 8014dfa:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8014dfc:	784a      	ldrb	r2, [r1, #1]
 8014dfe:	7843      	ldrb	r3, [r0, #1]
 8014e00:	4053      	eors	r3, r2
 8014e02:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8014e04:	788a      	ldrb	r2, [r1, #2]
 8014e06:	7883      	ldrb	r3, [r0, #2]
 8014e08:	4053      	eors	r3, r2
 8014e0a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8014e0c:	78ca      	ldrb	r2, [r1, #3]
 8014e0e:	78c3      	ldrb	r3, [r0, #3]
 8014e10:	4053      	eors	r3, r2
 8014e12:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8014e14:	790a      	ldrb	r2, [r1, #4]
 8014e16:	7903      	ldrb	r3, [r0, #4]
 8014e18:	4053      	eors	r3, r2
 8014e1a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8014e1c:	794a      	ldrb	r2, [r1, #5]
 8014e1e:	7943      	ldrb	r3, [r0, #5]
 8014e20:	4053      	eors	r3, r2
 8014e22:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8014e24:	798a      	ldrb	r2, [r1, #6]
 8014e26:	7983      	ldrb	r3, [r0, #6]
 8014e28:	4053      	eors	r3, r2
 8014e2a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8014e2c:	79ca      	ldrb	r2, [r1, #7]
 8014e2e:	79c3      	ldrb	r3, [r0, #7]
 8014e30:	4053      	eors	r3, r2
 8014e32:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8014e34:	7a0a      	ldrb	r2, [r1, #8]
 8014e36:	7a03      	ldrb	r3, [r0, #8]
 8014e38:	4053      	eors	r3, r2
 8014e3a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8014e3c:	7a4a      	ldrb	r2, [r1, #9]
 8014e3e:	7a43      	ldrb	r3, [r0, #9]
 8014e40:	4053      	eors	r3, r2
 8014e42:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8014e44:	7a8a      	ldrb	r2, [r1, #10]
 8014e46:	7a83      	ldrb	r3, [r0, #10]
 8014e48:	4053      	eors	r3, r2
 8014e4a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8014e4c:	7aca      	ldrb	r2, [r1, #11]
 8014e4e:	7ac3      	ldrb	r3, [r0, #11]
 8014e50:	4053      	eors	r3, r2
 8014e52:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8014e54:	7b0a      	ldrb	r2, [r1, #12]
 8014e56:	7b03      	ldrb	r3, [r0, #12]
 8014e58:	4053      	eors	r3, r2
 8014e5a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8014e5c:	7b4a      	ldrb	r2, [r1, #13]
 8014e5e:	7b43      	ldrb	r3, [r0, #13]
 8014e60:	4053      	eors	r3, r2
 8014e62:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8014e64:	7b8a      	ldrb	r2, [r1, #14]
 8014e66:	7b83      	ldrb	r3, [r0, #14]
 8014e68:	4053      	eors	r3, r2
 8014e6a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8014e6c:	7bca      	ldrb	r2, [r1, #15]
 8014e6e:	7bc3      	ldrb	r3, [r0, #15]
 8014e70:	4053      	eors	r3, r2
 8014e72:	73c3      	strb	r3, [r0, #15]
}
 8014e74:	4770      	bx	lr

08014e76 <copy_and_key>:
{
 8014e76:	b510      	push	{r4, lr}
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8014e78:	780b      	ldrb	r3, [r1, #0]
 8014e7a:	7814      	ldrb	r4, [r2, #0]
 8014e7c:	4063      	eors	r3, r4
 8014e7e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8014e80:	7854      	ldrb	r4, [r2, #1]
 8014e82:	784b      	ldrb	r3, [r1, #1]
 8014e84:	4063      	eors	r3, r4
 8014e86:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8014e88:	7894      	ldrb	r4, [r2, #2]
 8014e8a:	788b      	ldrb	r3, [r1, #2]
 8014e8c:	4063      	eors	r3, r4
 8014e8e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8014e90:	78d4      	ldrb	r4, [r2, #3]
 8014e92:	78cb      	ldrb	r3, [r1, #3]
 8014e94:	4063      	eors	r3, r4
 8014e96:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8014e98:	7914      	ldrb	r4, [r2, #4]
 8014e9a:	790b      	ldrb	r3, [r1, #4]
 8014e9c:	4063      	eors	r3, r4
 8014e9e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8014ea0:	7954      	ldrb	r4, [r2, #5]
 8014ea2:	794b      	ldrb	r3, [r1, #5]
 8014ea4:	4063      	eors	r3, r4
 8014ea6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8014ea8:	7994      	ldrb	r4, [r2, #6]
 8014eaa:	798b      	ldrb	r3, [r1, #6]
 8014eac:	4063      	eors	r3, r4
 8014eae:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8014eb0:	79d4      	ldrb	r4, [r2, #7]
 8014eb2:	79cb      	ldrb	r3, [r1, #7]
 8014eb4:	4063      	eors	r3, r4
 8014eb6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8014eb8:	7a14      	ldrb	r4, [r2, #8]
 8014eba:	7a0b      	ldrb	r3, [r1, #8]
 8014ebc:	4063      	eors	r3, r4
 8014ebe:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8014ec0:	7a54      	ldrb	r4, [r2, #9]
 8014ec2:	7a4b      	ldrb	r3, [r1, #9]
 8014ec4:	4063      	eors	r3, r4
 8014ec6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8014ec8:	7a8b      	ldrb	r3, [r1, #10]
 8014eca:	7a94      	ldrb	r4, [r2, #10]
 8014ecc:	4063      	eors	r3, r4
 8014ece:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8014ed0:	7ad4      	ldrb	r4, [r2, #11]
 8014ed2:	7acb      	ldrb	r3, [r1, #11]
 8014ed4:	4063      	eors	r3, r4
 8014ed6:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8014ed8:	7b14      	ldrb	r4, [r2, #12]
 8014eda:	7b0b      	ldrb	r3, [r1, #12]
 8014edc:	4063      	eors	r3, r4
 8014ede:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8014ee0:	7b54      	ldrb	r4, [r2, #13]
 8014ee2:	7b4b      	ldrb	r3, [r1, #13]
 8014ee4:	4063      	eors	r3, r4
 8014ee6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8014ee8:	7b94      	ldrb	r4, [r2, #14]
 8014eea:	7b8b      	ldrb	r3, [r1, #14]
 8014eec:	4063      	eors	r3, r4
 8014eee:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8014ef0:	7bcb      	ldrb	r3, [r1, #15]
 8014ef2:	7bd2      	ldrb	r2, [r2, #15]
 8014ef4:	4053      	eors	r3, r2
 8014ef6:	73c3      	strb	r3, [r0, #15]
}
 8014ef8:	bd10      	pop	{r4, pc}

08014efa <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8014efa:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
 8014efc:	2210      	movs	r2, #16
{
 8014efe:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8014f00:	2100      	movs	r1, #0
 8014f02:	30f1      	adds	r0, #241	; 0xf1
 8014f04:	f7ff fb93 	bl	801462e <memset1>
    ctx->M_n = 0;
 8014f08:	2100      	movs	r1, #0
 8014f0a:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8014f0e:	4620      	mov	r0, r4
 8014f10:	22f0      	movs	r2, #240	; 0xf0
}
 8014f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8014f16:	f7ff bb8a 	b.w	801462e <memset1>

08014f1a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	4608      	mov	r0, r1
    aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8014f1e:	2110      	movs	r1, #16
 8014f20:	f7f2 baa8 	b.w	8007474 <aes_set_key>

08014f24 <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8014f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f28:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8014f2a:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 8014f2e:	b085      	sub	sp, #20
 8014f30:	460e      	mov	r6, r1
 8014f32:	4615      	mov	r5, r2
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8014f34:	f204 1701 	addw	r7, r4, #257	; 0x101
    if( ctx->M_n > 0 )
 8014f38:	b388      	cbz	r0, 8014f9e <AES_CMAC_Update+0x7a>
        mlen = MIN( 16 - ctx->M_n, len );
 8014f3a:	f1c0 0910 	rsb	r9, r0, #16
 8014f3e:	4591      	cmp	r9, r2
 8014f40:	46c8      	mov	r8, r9
 8014f42:	bf28      	it	cs
 8014f44:	4690      	movcs	r8, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8014f46:	fa1f f288 	uxth.w	r2, r8
 8014f4a:	4438      	add	r0, r7
 8014f4c:	f7ff fb5b 	bl	8014606 <memcpy1>
        ctx->M_n += mlen;
 8014f50:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8014f54:	4443      	add	r3, r8
        if( ctx->M_n < 16 || len == mlen )
 8014f56:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
 8014f58:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8014f5c:	d928      	bls.n	8014fb0 <AES_CMAC_Update+0x8c>
 8014f5e:	45a9      	cmp	r9, r5
 8014f60:	d226      	bcs.n	8014fb0 <AES_CMAC_Update+0x8c>
 8014f62:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8014f66:	4699      	mov	r9, r3
            return;
        XOR( ctx->M_last, ctx->X );
 8014f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f6c:	7bd9      	ldrb	r1, [r3, #15]
 8014f6e:	42bb      	cmp	r3, r7
 8014f70:	ea82 0201 	eor.w	r2, r2, r1
 8014f74:	f803 2c01 	strb.w	r2, [r3, #-1]
 8014f78:	d1f6      	bne.n	8014f68 <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8014f7a:	2210      	movs	r2, #16
 8014f7c:	4649      	mov	r1, r9
 8014f7e:	4668      	mov	r0, sp
 8014f80:	f7ff fb41 	bl	8014606 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 8014f84:	4622      	mov	r2, r4
 8014f86:	4669      	mov	r1, sp
 8014f88:	4668      	mov	r0, sp
 8014f8a:	f7f2 faef 	bl	800756c <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8014f8e:	2210      	movs	r2, #16
 8014f90:	4669      	mov	r1, sp
 8014f92:	4648      	mov	r0, r9
 8014f94:	f7ff fb37 	bl	8014606 <memcpy1>

        data += mlen;
 8014f98:	4446      	add	r6, r8
        len -= mlen;
 8014f9a:	eba5 0508 	sub.w	r5, r5, r8
    }
    while( len > 16 )
 8014f9e:	2d10      	cmp	r5, #16
 8014fa0:	d809      	bhi.n	8014fb6 <AES_CMAC_Update+0x92>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8014fa2:	b2aa      	uxth	r2, r5
 8014fa4:	4631      	mov	r1, r6
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	f7ff fb2d 	bl	8014606 <memcpy1>
    ctx->M_n = len;
 8014fac:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 8014fb0:	b005      	add	sp, #20
 8014fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fb6:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8014fba:	1e71      	subs	r1, r6, #1
 8014fbc:	4698      	mov	r8, r3
        XOR( data, ctx->X );
 8014fbe:	781a      	ldrb	r2, [r3, #0]
 8014fc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014fc4:	4042      	eors	r2, r0
 8014fc6:	f803 2b01 	strb.w	r2, [r3], #1
 8014fca:	42bb      	cmp	r3, r7
 8014fcc:	d1f7      	bne.n	8014fbe <AES_CMAC_Update+0x9a>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8014fce:	2210      	movs	r2, #16
 8014fd0:	4641      	mov	r1, r8
 8014fd2:	4668      	mov	r0, sp
 8014fd4:	f7ff fb17 	bl	8014606 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 8014fd8:	4622      	mov	r2, r4
 8014fda:	4669      	mov	r1, sp
 8014fdc:	4668      	mov	r0, sp
 8014fde:	f7f2 fac5 	bl	800756c <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8014fe2:	2210      	movs	r2, #16
 8014fe4:	4669      	mov	r1, sp
 8014fe6:	4640      	mov	r0, r8
 8014fe8:	f7ff fb0d 	bl	8014606 <memcpy1>
        data += 16;
 8014fec:	3610      	adds	r6, #16
        len -= 16;
 8014fee:	3d10      	subs	r5, #16
 8014ff0:	e7d5      	b.n	8014f9e <AES_CMAC_Update+0x7a>

08014ff2 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8014ff2:	b570      	push	{r4, r5, r6, lr}
 8014ff4:	b088      	sub	sp, #32
 8014ff6:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8014ff8:	2210      	movs	r2, #16
 8014ffa:	2100      	movs	r1, #0
{
 8014ffc:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
 8014ffe:	4668      	mov	r0, sp
 8015000:	f7ff fb15 	bl	801462e <memset1>

    aes_encrypt( K, K, &ctx->rijndael );
 8015004:	4622      	mov	r2, r4
 8015006:	4669      	mov	r1, sp
 8015008:	4668      	mov	r0, sp
 801500a:	f7f2 faaf 	bl	800756c <aes_encrypt>

    if( K[0] & 0x80 )
 801500e:	f99d 3000 	ldrsb.w	r3, [sp]
 8015012:	2b00      	cmp	r3, #0
 8015014:	466a      	mov	r2, sp
    {
        LSHIFT( K, K );
 8015016:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
 801501a:	da41      	bge.n	80150a0 <AES_CMAC_Final+0xae>
        LSHIFT( K, K );
 801501c:	7813      	ldrb	r3, [r2, #0]
 801501e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015022:	3101      	adds	r1, #1
 8015024:	005b      	lsls	r3, r3, #1
 8015026:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 801502a:	290f      	cmp	r1, #15
 801502c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015030:	d1f4      	bne.n	801501c <AES_CMAC_Final+0x2a>
 8015032:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015036:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 8015038:	f083 0387 	eor.w	r3, r3, #135	; 0x87
    }
    else
        LSHIFT( K, K );
 801503c:	f88d 300f 	strb.w	r3, [sp, #15]

    if( ctx->M_n == 16 )
 8015040:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8015044:	2b10      	cmp	r3, #16
 8015046:	d13a      	bne.n	80150be <AES_CMAC_Final+0xcc>
 8015048:	f204 1301 	addw	r3, r4, #257	; 0x101
 801504c:	4669      	mov	r1, sp
 801504e:	f204 1011 	addw	r0, r4, #273	; 0x111
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8015052:	781a      	ldrb	r2, [r3, #0]
 8015054:	f811 6b01 	ldrb.w	r6, [r1], #1
 8015058:	4072      	eors	r2, r6
 801505a:	f803 2b01 	strb.w	r2, [r3], #1
 801505e:	4298      	cmp	r0, r3
 8015060:	d1f7      	bne.n	8015052 <AES_CMAC_Final+0x60>
 8015062:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 8015066:	f204 1001 	addw	r0, r4, #257	; 0x101
 801506a:	4619      	mov	r1, r3
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 801506c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015070:	7bde      	ldrb	r6, [r3, #15]
 8015072:	4298      	cmp	r0, r3
 8015074:	ea82 0206 	eor.w	r2, r2, r6
 8015078:	f803 2c01 	strb.w	r2, [r3, #-1]
 801507c:	d1f6      	bne.n	801506c <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801507e:	2210      	movs	r2, #16
 8015080:	eb0d 0002 	add.w	r0, sp, r2
 8015084:	f7ff fabf 	bl	8014606 <memcpy1>
    aes_encrypt( in, digest, &ctx->rijndael );
 8015088:	4622      	mov	r2, r4
 801508a:	4629      	mov	r1, r5
 801508c:	a804      	add	r0, sp, #16
 801508e:	f7f2 fa6d 	bl	800756c <aes_encrypt>
    memset1( K, 0, sizeof K );
 8015092:	2210      	movs	r2, #16
 8015094:	2100      	movs	r1, #0
 8015096:	4668      	mov	r0, sp
 8015098:	f7ff fac9 	bl	801462e <memset1>
}
 801509c:	b008      	add	sp, #32
 801509e:	bd70      	pop	{r4, r5, r6, pc}
        LSHIFT( K, K );
 80150a0:	7813      	ldrb	r3, [r2, #0]
 80150a2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80150a6:	3101      	adds	r1, #1
 80150a8:	005b      	lsls	r3, r3, #1
 80150aa:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80150ae:	290f      	cmp	r1, #15
 80150b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80150b4:	d1f4      	bne.n	80150a0 <AES_CMAC_Final+0xae>
 80150b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80150ba:	005b      	lsls	r3, r3, #1
 80150bc:	e7be      	b.n	801503c <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
 80150be:	f99d 2000 	ldrsb.w	r2, [sp]
 80150c2:	2a00      	cmp	r2, #0
 80150c4:	4669      	mov	r1, sp
            LSHIFT( K, K );
 80150c6:	f04f 0000 	mov.w	r0, #0
        if( K[0] & 0x80 )
 80150ca:	da36      	bge.n	801513a <AES_CMAC_Final+0x148>
            LSHIFT( K, K );
 80150cc:	780a      	ldrb	r2, [r1, #0]
 80150ce:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80150d2:	3001      	adds	r0, #1
 80150d4:	0052      	lsls	r2, r2, #1
 80150d6:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 80150da:	280f      	cmp	r0, #15
 80150dc:	f801 2c01 	strb.w	r2, [r1, #-1]
 80150e0:	d1f4      	bne.n	80150cc <AES_CMAC_Final+0xda>
 80150e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80150e6:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 80150e8:	f082 0287 	eor.w	r2, r2, #135	; 0x87
            LSHIFT( K, K );
 80150ec:	f88d 200f 	strb.w	r2, [sp, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 80150f0:	18e2      	adds	r2, r4, r3
 80150f2:	2180      	movs	r1, #128	; 0x80
 80150f4:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80150f8:	f46f 7080 	mvn.w	r0, #256	; 0x100
 80150fc:	f503 7281 	add.w	r2, r3, #258	; 0x102
 8015100:	4422      	add	r2, r4
 8015102:	1b00      	subs	r0, r0, r4
            ctx->M_last[ctx->M_n] = 0;
 8015104:	2600      	movs	r6, #0
        while( ++ctx->M_n < 16 )
 8015106:	1881      	adds	r1, r0, r2
 8015108:	290f      	cmp	r1, #15
 801510a:	d925      	bls.n	8015158 <AES_CMAC_Final+0x166>
 801510c:	1c5a      	adds	r2, r3, #1
 801510e:	2a10      	cmp	r2, #16
 8015110:	f1c3 030f 	rsb	r3, r3, #15
 8015114:	bf88      	it	hi
 8015116:	2300      	movhi	r3, #0
 8015118:	4413      	add	r3, r2
 801511a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 801511e:	4669      	mov	r1, sp
 8015120:	f204 1301 	addw	r3, r4, #257	; 0x101
 8015124:	f204 1011 	addw	r0, r4, #273	; 0x111
        XOR( K, ctx->M_last );
 8015128:	781a      	ldrb	r2, [r3, #0]
 801512a:	f811 6b01 	ldrb.w	r6, [r1], #1
 801512e:	4072      	eors	r2, r6
 8015130:	f803 2b01 	strb.w	r2, [r3], #1
 8015134:	4298      	cmp	r0, r3
 8015136:	d1f7      	bne.n	8015128 <AES_CMAC_Final+0x136>
 8015138:	e793      	b.n	8015062 <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 801513a:	780a      	ldrb	r2, [r1, #0]
 801513c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8015140:	3001      	adds	r0, #1
 8015142:	0052      	lsls	r2, r2, #1
 8015144:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 8015148:	280f      	cmp	r0, #15
 801514a:	f801 2c01 	strb.w	r2, [r1, #-1]
 801514e:	d1f4      	bne.n	801513a <AES_CMAC_Final+0x148>
 8015150:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8015154:	0052      	lsls	r2, r2, #1
 8015156:	e7c9      	b.n	80150ec <AES_CMAC_Final+0xfa>
            ctx->M_last[ctx->M_n] = 0;
 8015158:	f802 6b01 	strb.w	r6, [r2], #1
 801515c:	e7d3      	b.n	8015106 <AES_CMAC_Final+0x114>

0801515e <SecureElementComputeAesCmac>:
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 801515e:	2b7e      	cmp	r3, #126	; 0x7e
{
 8015160:	b410      	push	{r4}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8015162:	d802      	bhi.n	801516a <SecureElementComputeAesCmac+0xc>
}
 8015164:	bc10      	pop	{r4}
    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8015166:	f7f2 bb57 	b.w	8007818 <ComputeCmac>
}
 801516a:	2003      	movs	r0, #3
 801516c:	bc10      	pop	{r4}
 801516e:	4770      	bx	lr

08015170 <SecureElementVerifyAesCmac>:
{
 8015170:	b530      	push	{r4, r5, lr}
 8015172:	460d      	mov	r5, r1
 8015174:	b085      	sub	sp, #20
 8015176:	4614      	mov	r4, r2
    if( buffer == NULL )
 8015178:	4601      	mov	r1, r0
 801517a:	b168      	cbz	r0, 8015198 <SecureElementVerifyAesCmac+0x28>
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801517c:	aa03      	add	r2, sp, #12
    uint32_t              compCmac = 0;
 801517e:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8015180:	9200      	str	r2, [sp, #0]
 8015182:	462a      	mov	r2, r5
    uint32_t              compCmac = 0;
 8015184:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8015186:	f7f2 fb47 	bl	8007818 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801518a:	b918      	cbnz	r0, 8015194 <SecureElementVerifyAesCmac+0x24>
        return SECURE_ELEMENT_ERROR_NPE;
 801518c:	9803      	ldr	r0, [sp, #12]
 801518e:	1b00      	subs	r0, r0, r4
 8015190:	bf18      	it	ne
 8015192:	2001      	movne	r0, #1
}
 8015194:	b005      	add	sp, #20
 8015196:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8015198:	2002      	movs	r0, #2
 801519a:	e7fb      	b.n	8015194 <SecureElementVerifyAesCmac+0x24>

0801519c <SecureElementSetKey>:
    if( key == NULL )
 801519c:	b109      	cbz	r1, 80151a2 <SecureElementSetKey+0x6>
 801519e:	f7f2 bc53 	b.w	8007a48 <SecureElementSetKey.part.0>
}
 80151a2:	2002      	movs	r0, #2
 80151a4:	4770      	bx	lr

080151a6 <SecureElementDeriveAndStoreKey>:
{
 80151a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151a8:	4614      	mov	r4, r2
    if( input == NULL )
 80151aa:	b1a0      	cbz	r0, 80151d6 <SecureElementDeriveAndStoreKey+0x30>
    uint8_t               key[16] = { 0 };
 80151ac:	2300      	movs	r3, #0
    if( targetKeyID == MC_KE_KEY )
 80151ae:	2a7f      	cmp	r2, #127	; 0x7f
    uint8_t               key[16] = { 0 };
 80151b0:	e9cd 3300 	strd	r3, r3, [sp]
 80151b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( targetKeyID == MC_KE_KEY )
 80151b8:	d101      	bne.n	80151be <SecureElementDeriveAndStoreKey+0x18>
        if( rootKeyID != MC_ROOT_KEY )
 80151ba:	2908      	cmp	r1, #8
 80151bc:	d10d      	bne.n	80151da <SecureElementDeriveAndStoreKey+0x34>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 80151be:	460a      	mov	r2, r1
 80151c0:	466b      	mov	r3, sp
 80151c2:	2110      	movs	r1, #16
 80151c4:	f7f2 fc02 	bl	80079cc <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80151c8:	b918      	cbnz	r0, 80151d2 <SecureElementDeriveAndStoreKey+0x2c>
    if( key == NULL )
 80151ca:	4669      	mov	r1, sp
 80151cc:	4620      	mov	r0, r4
 80151ce:	f7f2 fc3b 	bl	8007a48 <SecureElementSetKey.part.0>
}
 80151d2:	b004      	add	sp, #16
 80151d4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80151d6:	2002      	movs	r0, #2
 80151d8:	e7fb      	b.n	80151d2 <SecureElementDeriveAndStoreKey+0x2c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80151da:	2003      	movs	r0, #3
 80151dc:	e7f9      	b.n	80151d2 <SecureElementDeriveAndStoreKey+0x2c>

080151de <SecureElementProcessJoinAccept>:
{
 80151de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80151e2:	461f      	mov	r7, r3
{
 80151e4:	e9dd 5809 	ldrd	r5, r8, [sp, #36]	; 0x24
 80151e8:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d038      	beq.n	8015262 <SecureElementProcessJoinAccept+0x84>
 80151f0:	b3bd      	cbz	r5, 8015262 <SecureElementProcessJoinAccept+0x84>
 80151f2:	f1b8 0f00 	cmp.w	r8, #0
 80151f6:	d034      	beq.n	8015262 <SecureElementProcessJoinAccept+0x84>
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80151f8:	2c21      	cmp	r4, #33	; 0x21
 80151fa:	d834      	bhi.n	8015266 <SecureElementProcessJoinAccept+0x88>
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80151fc:	b2a6      	uxth	r6, r4
        encKeyID = J_S_ENC_KEY;
 80151fe:	28ff      	cmp	r0, #255	; 0xff
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8015200:	4619      	mov	r1, r3
 8015202:	4632      	mov	r2, r6
 8015204:	4628      	mov	r0, r5
        encKeyID = J_S_ENC_KEY;
 8015206:	bf0c      	ite	eq
 8015208:	f04f 0901 	moveq.w	r9, #1
 801520c:	f04f 0903 	movne.w	r9, #3
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8015210:	f7ff f9f9 	bl	8014606 <memcpy1>
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8015214:	1e71      	subs	r1, r6, #1
 8015216:	1c6b      	adds	r3, r5, #1
 8015218:	464a      	mov	r2, r9
 801521a:	b289      	uxth	r1, r1
 801521c:	1c78      	adds	r0, r7, #1
 801521e:	f7f2 fbd5 	bl	80079cc <SecureElementAesEncrypt>
 8015222:	bb10      	cbnz	r0, 801526a <SecureElementProcessJoinAccept+0x8c>
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8015224:	7aeb      	ldrb	r3, [r5, #11]
 8015226:	09db      	lsrs	r3, r3, #7
 8015228:	f888 3000 	strb.w	r3, [r8]
    if( *versionMinor == 0 )
 801522c:	b9fb      	cbnz	r3, 801526e <SecureElementProcessJoinAccept+0x90>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 801522e:	192b      	adds	r3, r5, r4
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8015230:	1f31      	subs	r1, r6, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8015232:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8015236:	f813 2c02 	ldrb.w	r2, [r3, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 801523a:	0600      	lsls	r0, r0, #24
 801523c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8015240:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8015244:	4310      	orrs	r0, r2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8015246:	f813 2c03 	ldrb.w	r2, [r3, #-3]
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 801524a:	b289      	uxth	r1, r1
 801524c:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 8015250:	2301      	movs	r3, #1
 8015252:	4628      	mov	r0, r5
 8015254:	f7ff ff8c 	bl	8015170 <SecureElementVerifyAesCmac>
        return SECURE_ELEMENT_ERROR_NPE;
 8015258:	3800      	subs	r0, #0
 801525a:	bf18      	it	ne
 801525c:	2001      	movne	r0, #1
}
 801525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8015262:	2002      	movs	r0, #2
 8015264:	e7fb      	b.n	801525e <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8015266:	2005      	movs	r0, #5
 8015268:	e7f9      	b.n	801525e <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 801526a:	2007      	movs	r0, #7
 801526c:	e7f7      	b.n	801525e <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801526e:	2004      	movs	r0, #4
 8015270:	e7f5      	b.n	801525e <SecureElementProcessJoinAccept+0x80>

08015272 <SoftSeHalGetUniqueId>:

#include "soft-se-hal.h"

void SoftSeHalGetUniqueId( uint8_t *id )
{
    BoardGetUniqueId( id );
 8015272:	f7ff b889 	b.w	8014388 <BoardGetUniqueId>

08015276 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8015276:	4603      	mov	r3, r0
 8015278:	b1d0      	cbz	r0, 80152b0 <DetermineFrameType+0x3a>
 801527a:	b1c9      	cbz	r1, 80152b0 <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801527c:	7b02      	ldrb	r2, [r0, #12]
 801527e:	f012 020f 	ands.w	r2, r2, #15
 8015282:	d005      	beq.n	8015290 <DetermineFrameType+0x1a>
 8015284:	f890 0020 	ldrb.w	r0, [r0, #32]
 8015288:	b110      	cbz	r0, 8015290 <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 801528a:	2000      	movs	r0, #0
 801528c:	7008      	strb	r0, [r1, #0]
 801528e:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 8015290:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8015294:	b910      	cbnz	r0, 801529c <DetermineFrameType+0x26>
        *fType = FRAME_TYPE_B;
 8015296:	2301      	movs	r3, #1
        *fType = FRAME_TYPE_C;
 8015298:	700b      	strb	r3, [r1, #0]
 801529a:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801529c:	b952      	cbnz	r2, 80152b4 <DetermineFrameType+0x3e>
 801529e:	f893 0020 	ldrb.w	r0, [r3, #32]
 80152a2:	b908      	cbnz	r0, 80152a8 <DetermineFrameType+0x32>
        *fType = FRAME_TYPE_C;
 80152a4:	2302      	movs	r3, #2
 80152a6:	e7f7      	b.n	8015298 <DetermineFrameType+0x22>
        *fType = FRAME_TYPE_D;
 80152a8:	2303      	movs	r3, #3
 80152aa:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
 80152ac:	4610      	mov	r0, r2
        *fType = FRAME_TYPE_D;
 80152ae:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80152b0:	2003      	movs	r0, #3
 80152b2:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80152b4:	2017      	movs	r0, #23
}
 80152b6:	4770      	bx	lr

080152b8 <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80152b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152bc:	b08b      	sub	sp, #44	; 0x2c
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;

    if( adrNext->AdrEnabled == true )
 80152be:	7847      	ldrb	r7, [r0, #1]
{
 80152c0:	9300      	str	r3, [sp, #0]
    *adrAckCounter = adrNext->AdrAckCounter;
 80152c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    int8_t datarate = adrNext->Datarate;
 80152c4:	f990 800c 	ldrsb.w	r8, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 80152c8:	f990 600d 	ldrsb.w	r6, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 80152cc:	f890 900e 	ldrb.w	r9, [r0, #14]
{
 80152d0:	468b      	mov	fp, r1
    *adrAckCounter = adrNext->AdrAckCounter;
 80152d2:	6841      	ldr	r1, [r0, #4]
 80152d4:	6019      	str	r1, [r3, #0]
{
 80152d6:	4604      	mov	r4, r0
 80152d8:	4692      	mov	sl, r2
    if( adrNext->AdrEnabled == true )
 80152da:	2f00      	cmp	r7, #0
 80152dc:	d057      	beq.n	801538e <LoRaMacAdrCalcNext+0xd6>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80152de:	2302      	movs	r3, #2
 80152e0:	f88d 3010 	strb.w	r3, [sp, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80152e4:	a904      	add	r1, sp, #16
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80152e6:	7bc3      	ldrb	r3, [r0, #15]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80152e8:	7c00      	ldrb	r0, [r0, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80152ea:	f88d 3012 	strb.w	r3, [sp, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80152ee:	f000 faa0 	bl	8015832 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
        datarate = MAX( datarate, minTxDatarate );

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80152f2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
        {
            adrAckReq = true;
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80152f6:	8961      	ldrh	r1, [r4, #10]
        minTxDatarate = phyParam.Value;
 80152f8:	b243      	sxtb	r3, r0
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80152fa:	6860      	ldr	r0, [r4, #4]
        datarate = MAX( datarate, minTxDatarate );
 80152fc:	4598      	cmp	r8, r3
 80152fe:	4645      	mov	r5, r8
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015300:	4461      	add	r1, ip
        datarate = MAX( datarate, minTxDatarate );
 8015302:	bfb8      	it	lt
 8015304:	461d      	movlt	r5, r3
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8015306:	4560      	cmp	r0, ip
 8015308:	bf34      	ite	cc
 801530a:	2700      	movcc	r7, #0
 801530c:	2701      	movcs	r7, #1
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801530e:	4288      	cmp	r0, r1
 8015310:	d309      	bcc.n	8015326 <LoRaMacAdrCalcNext+0x6e>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8015312:	210a      	movs	r1, #10
 8015314:	f88d 1010 	strb.w	r1, [sp, #16]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015318:	7c20      	ldrb	r0, [r4, #16]
 801531a:	9301      	str	r3, [sp, #4]
 801531c:	a904      	add	r1, sp, #16
 801531e:	f000 fa88 	bl	8015832 <RegionGetPhyParam>
            txPower = phyParam.Value;
 8015322:	9b01      	ldr	r3, [sp, #4]
 8015324:	b246      	sxtb	r6, r0
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8015326:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801532a:	8960      	ldrh	r0, [r4, #10]
 801532c:	6861      	ldr	r1, [r4, #4]
 801532e:	eb0c 0e40 	add.w	lr, ip, r0, lsl #1
 8015332:	4571      	cmp	r1, lr
 8015334:	d320      	bcc.n	8015378 <LoRaMacAdrCalcNext+0xc0>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8015336:	eba1 010c 	sub.w	r1, r1, ip
 801533a:	fbb1 fcf0 	udiv	ip, r1, r0
 801533e:	fb00 111c 	mls	r1, r0, ip, r1
 8015342:	b9c9      	cbnz	r1, 8015378 <LoRaMacAdrCalcNext+0xc0>
            {
                if( datarate == minTxDatarate )
 8015344:	4598      	cmp	r8, r3
 8015346:	dc0a      	bgt.n	801535e <LoRaMacAdrCalcNext+0xa6>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8015348:	7823      	ldrb	r3, [r4, #0]
 801534a:	b133      	cbz	r3, 801535a <LoRaMacAdrCalcNext+0xa2>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801534c:	2302      	movs	r3, #2
                        RegionInitDefaults( adrNext->Region, &params );
 801534e:	7c20      	ldrb	r0, [r4, #16]
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015350:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        RegionInitDefaults( adrNext->Region, &params );
 8015354:	a906      	add	r1, sp, #24
 8015356:	f000 fa7c 	bl	8015852 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 801535a:	f04f 0901 	mov.w	r9, #1
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801535e:	2320      	movs	r3, #32
 8015360:	f88d 3010 	strb.w	r3, [sp, #16]
                getPhy.Datarate = datarate;
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015364:	7c20      	ldrb	r0, [r4, #16]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015366:	7be3      	ldrb	r3, [r4, #15]
                getPhy.Datarate = datarate;
 8015368:	f88d 5011 	strb.w	r5, [sp, #17]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801536c:	a904      	add	r1, sp, #16
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801536e:	f88d 3012 	strb.w	r3, [sp, #18]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015372:	f000 fa5e 	bl	8015832 <RegionGetPhyParam>
                datarate = phyParam.Value;
 8015376:	b245      	sxtb	r5, r0
        }
    }

    *drOut = datarate;
    *txPowOut = txPower;
    *nbTransOut = nbTrans;
 8015378:	9b00      	ldr	r3, [sp, #0]
    *drOut = datarate;
 801537a:	f88b 5000 	strb.w	r5, [fp]
    return adrAckReq;
}
 801537e:	4638      	mov	r0, r7
    *txPowOut = txPower;
 8015380:	f88a 6000 	strb.w	r6, [sl]
    *nbTransOut = nbTrans;
 8015384:	f883 9000 	strb.w	r9, [r3]
}
 8015388:	b00b      	add	sp, #44	; 0x2c
 801538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int8_t datarate = adrNext->Datarate;
 801538e:	4645      	mov	r5, r8
 8015390:	e7f2      	b.n	8015378 <LoRaMacAdrCalcNext+0xc0>

08015392 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8015392:	4770      	bx	lr

08015394 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015394:	4770      	bx	lr

08015396 <LoRaMacClassBSetPingSlotState>:
 8015396:	4770      	bx	lr

08015398 <LoRaMacClassBSetMulticastSlotState>:
 8015398:	4770      	bx	lr

0801539a <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 801539a:	2000      	movs	r0, #0
 801539c:	4770      	bx	lr

0801539e <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801539e:	4770      	bx	lr

080153a0 <LoRaMacClassBPingSlotTimerEvent>:
 80153a0:	4770      	bx	lr

080153a2 <LoRaMacClassBMulticastSlotTimerEvent>:
 80153a2:	4770      	bx	lr

080153a4 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80153a4:	2000      	movs	r0, #0
 80153a6:	4770      	bx	lr

080153a8 <LoRaMacClassBIsBeaconExpected>:
 80153a8:	2000      	movs	r0, #0
 80153aa:	4770      	bx	lr

080153ac <LoRaMacClassBIsPingExpected>:
 80153ac:	2000      	movs	r0, #0
 80153ae:	4770      	bx	lr

080153b0 <LoRaMacClassBIsMulticastExpected>:
 80153b0:	2000      	movs	r0, #0
 80153b2:	4770      	bx	lr

080153b4 <LoRaMacClassBIsBeaconModeActive>:
 80153b4:	2000      	movs	r0, #0
 80153b6:	4770      	bx	lr

080153b8 <LoRaMacClassBSetPingSlotInfo>:
 80153b8:	4770      	bx	lr

080153ba <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80153ba:	4770      	bx	lr

080153bc <LoRaMacClassBResumeBeaconing>:
 80153bc:	4770      	bx	lr

080153be <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80153be:	2002      	movs	r0, #2
 80153c0:	4770      	bx	lr

080153c2 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80153c2:	2002      	movs	r0, #2
 80153c4:	4770      	bx	lr

080153c6 <LoRaMacMibClassBSetRequestConfirm>:
 80153c6:	2002      	movs	r0, #2
 80153c8:	4770      	bx	lr

080153ca <LoRaMacClassBPingSlotInfoAns>:
 80153ca:	4770      	bx	lr

080153cc <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80153cc:	2000      	movs	r0, #0
 80153ce:	4770      	bx	lr

080153d0 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80153d0:	4770      	bx	lr

080153d2 <LoRaMacClassBDeviceTimeAns>:
 80153d2:	4770      	bx	lr

080153d4 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80153d4:	2000      	movs	r0, #0
 80153d6:	4770      	bx	lr

080153d8 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80153d8:	2000      	movs	r0, #0
 80153da:	4770      	bx	lr

080153dc <LoRaMacClassBStopRxSlots>:
 80153dc:	4770      	bx	lr

080153de <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
 80153de:	4770      	bx	lr

080153e0 <LoRaMacClassBProcess>:
 80153e0:	4770      	bx	lr

080153e2 <DeriveSessionKey10x>:
{
 80153e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            compBase[0] = 0x01;
 80153e4:	2807      	cmp	r0, #7
    uint8_t compBase[16] = { 0 };
 80153e6:	f04f 0400 	mov.w	r4, #0
 80153ea:	e9cd 4402 	strd	r4, r4, [sp, #8]
            compBase[0] = 0x01;
 80153ee:	bf0c      	ite	eq
 80153f0:	2402      	moveq	r4, #2
 80153f2:	2401      	movne	r4, #1
 80153f4:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80153f8:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80153fc:	0a0c      	lsrs	r4, r1, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80153fe:	0c09      	lsrs	r1, r1, #16
 8015400:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8015404:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015408:	0a11      	lsrs	r1, r2, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801540a:	0c12      	lsrs	r2, r2, #16
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801540c:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015410:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015414:	f88d 3007 	strb.w	r3, [sp, #7]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015418:	4602      	mov	r2, r0
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801541a:	0a1b      	lsrs	r3, r3, #8
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801541c:	2101      	movs	r1, #1
 801541e:	4668      	mov	r0, sp
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8015420:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8015424:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015428:	f7ff febd 	bl	80151a6 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801542c:	2800      	cmp	r0, #0
}
 801542e:	bf18      	it	ne
 8015430:	200e      	movne	r0, #14
 8015432:	b004      	add	sp, #16
 8015434:	bd10      	pop	{r4, pc}

08015436 <PayloadEncrypt>:
{
 8015436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801543a:	b088      	sub	sp, #32
 801543c:	4617      	mov	r7, r2
 801543e:	460d      	mov	r5, r1
 8015440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 8015442:	4606      	mov	r6, r0
 8015444:	2800      	cmp	r0, #0
 8015446:	d053      	beq.n	80154f0 <PayloadEncrypt+0xba>
    uint8_t sBlock[16] = { 0 };
 8015448:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
 801544a:	2101      	movs	r1, #1
    uint8_t aBlock[16] = { 0 };
 801544c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
 8015450:	f88d 1010 	strb.w	r1, [sp, #16]
    aBlock[5] = dir;
 8015454:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8015458:	f88d 1015 	strb.w	r1, [sp, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801545c:	0a19      	lsrs	r1, r3, #8
    aBlock[6] = address & 0xFF;
 801545e:	f88d 3016 	strb.w	r3, [sp, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015462:	f88d 1017 	strb.w	r1, [sp, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015466:	0c19      	lsrs	r1, r3, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015468:	0e1b      	lsrs	r3, r3, #24
 801546a:	f88d 3019 	strb.w	r3, [sp, #25]
    uint8_t sBlock[16] = { 0 };
 801546e:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015472:	0a13      	lsrs	r3, r2, #8
    uint8_t sBlock[16] = { 0 };
 8015474:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[10] = frameCounter & 0xFF;
 8015478:	f88d 201a 	strb.w	r2, [sp, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801547c:	f88d 301b 	strb.w	r3, [sp, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015480:	0c13      	lsrs	r3, r2, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015482:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
 8015484:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015486:	f88d 1018 	strb.w	r1, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801548a:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801548e:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
 8015492:	b2e3      	uxtb	r3, r4
 8015494:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8015498:	2d00      	cmp	r5, #0
 801549a:	fa5f f888 	uxtb.w	r8, r8
 801549e:	dc03      	bgt.n	80154a8 <PayloadEncrypt+0x72>
    return LORAMAC_CRYPTO_SUCCESS;
 80154a0:	2000      	movs	r0, #0
}
 80154a2:	b008      	add	sp, #32
 80154a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        aBlock[15] = ctr & 0xFF;
 80154a8:	3301      	adds	r3, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80154aa:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 80154ac:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80154b0:	463a      	mov	r2, r7
 80154b2:	466b      	mov	r3, sp
 80154b4:	eb0d 0001 	add.w	r0, sp, r1
 80154b8:	f7f2 fa88 	bl	80079cc <SecureElementAesEncrypt>
 80154bc:	4603      	mov	r3, r0
 80154be:	b9c8      	cbnz	r0, 80154f4 <PayloadEncrypt+0xbe>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80154c0:	2d10      	cmp	r5, #16
 80154c2:	46ac      	mov	ip, r5
 80154c4:	bfa8      	it	ge
 80154c6:	f04f 0c10 	movge.w	ip, #16
 80154ca:	b2da      	uxtb	r2, r3
 80154cc:	4562      	cmp	r2, ip
 80154ce:	f103 0301 	add.w	r3, r3, #1
 80154d2:	db03      	blt.n	80154dc <PayloadEncrypt+0xa6>
        size -= 16;
 80154d4:	3d10      	subs	r5, #16
 80154d6:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 80154d8:	3401      	adds	r4, #1
 80154da:	e7da      	b.n	8015492 <PayloadEncrypt+0x5c>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80154dc:	a908      	add	r1, sp, #32
 80154de:	eb08 0002 	add.w	r0, r8, r2
 80154e2:	440a      	add	r2, r1
 80154e4:	5c31      	ldrb	r1, [r6, r0]
 80154e6:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80154ea:	404a      	eors	r2, r1
 80154ec:	5432      	strb	r2, [r6, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80154ee:	e7ec      	b.n	80154ca <PayloadEncrypt+0x94>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80154f0:	2009      	movs	r0, #9
 80154f2:	e7d6      	b.n	80154a2 <PayloadEncrypt+0x6c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80154f4:	200e      	movs	r0, #14
 80154f6:	e7d4      	b.n	80154a2 <PayloadEncrypt+0x6c>

080154f8 <LoRaMacCryptoDeriveMcKEKey.part.0>:
LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 80154f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 80154fa:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80154fc:	227f      	movs	r2, #127	; 0x7f
 80154fe:	2108      	movs	r1, #8
 8015500:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
 8015502:	e9cd 3300 	strd	r3, r3, [sp]
 8015506:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801550a:	f7ff fe4c 	bl	80151a6 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801550e:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8015510:	bf18      	it	ne
 8015512:	200e      	movne	r0, #14
 8015514:	b005      	add	sp, #20
 8015516:	f85d fb04 	ldr.w	pc, [sp], #4

0801551a <LoRaMacCryptoGetFCntDown>:
{
 801551a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t lastDown = 0;
 801551c:	2300      	movs	r3, #0
{
 801551e:	460d      	mov	r5, r1
    uint32_t lastDown = 0;
 8015520:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 8015522:	4614      	mov	r4, r2
 8015524:	b1d2      	cbz	r2, 801555c <LoRaMacCryptoGetFCntDown+0x42>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015526:	a901      	add	r1, sp, #4
 8015528:	f7f5 fa4c 	bl	800a9c4 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801552c:	b918      	cbnz	r0, 8015536 <LoRaMacCryptoGetFCntDown+0x1c>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801552e:	9b01      	ldr	r3, [sp, #4]
 8015530:	1c5a      	adds	r2, r3, #1
 8015532:	d102      	bne.n	801553a <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
 8015534:	6025      	str	r5, [r4, #0]
}
 8015536:	b003      	add	sp, #12
 8015538:	bd30      	pop	{r4, r5, pc}
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801553a:	b29a      	uxth	r2, r3
 801553c:	1aaa      	subs	r2, r5, r2
        if( fCntDiff > 0 )
 801553e:	2a00      	cmp	r2, #0
 8015540:	dd02      	ble.n	8015548 <LoRaMacCryptoGetFCntDown+0x2e>
            *currentDown = lastDown + fCntDiff;
 8015542:	4413      	add	r3, r2
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015544:	6023      	str	r3, [r4, #0]
 8015546:	e7f6      	b.n	8015536 <LoRaMacCryptoGetFCntDown+0x1c>
        else if( fCntDiff == 0 )
 8015548:	d102      	bne.n	8015550 <LoRaMacCryptoGetFCntDown+0x36>
            *currentDown = lastDown;
 801554a:	6023      	str	r3, [r4, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801554c:	2007      	movs	r0, #7
 801554e:	e7f2      	b.n	8015536 <LoRaMacCryptoGetFCntDown+0x1c>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015550:	0c1b      	lsrs	r3, r3, #16
 8015552:	041b      	lsls	r3, r3, #16
 8015554:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8015558:	442b      	add	r3, r5
 801555a:	e7f3      	b.n	8015544 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 801555c:	2009      	movs	r0, #9
 801555e:	e7ea      	b.n	8015536 <LoRaMacCryptoGetFCntDown+0x1c>

08015560 <LoRaMacCryptoDeriveMcRootKey>:
{
 8015560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
 8015562:	b9b1      	cbnz	r1, 8015592 <LoRaMacCryptoDeriveMcRootKey+0x32>
    if( versionMinor == 1 )
 8015564:	2801      	cmp	r0, #1
    uint8_t compBase[16] = { 0 };
 8015566:	e9cd 1100 	strd	r1, r1, [sp]
        compBase[0] = 0x20;
 801556a:	bf08      	it	eq
 801556c:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
 801556e:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015572:	f04f 0208 	mov.w	r2, #8
 8015576:	f04f 0100 	mov.w	r1, #0
 801557a:	4668      	mov	r0, sp
        compBase[0] = 0x20;
 801557c:	bf08      	it	eq
 801557e:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015582:	f7ff fe10 	bl	80151a6 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015586:	2800      	cmp	r0, #0
 8015588:	bf18      	it	ne
 801558a:	200e      	movne	r0, #14
}
 801558c:	b005      	add	sp, #20
 801558e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015592:	200a      	movs	r0, #10
 8015594:	e7fa      	b.n	801558c <LoRaMacCryptoDeriveMcRootKey+0x2c>

08015596 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015596:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015598:	4604      	mov	r4, r0
 801559a:	2800      	cmp	r0, #0
 801559c:	d045      	beq.n	801562a <LoRaMacParserJoinAccept+0x94>
 801559e:	6801      	ldr	r1, [r0, #0]
 80155a0:	2900      	cmp	r1, #0
 80155a2:	d042      	beq.n	801562a <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80155a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155a8:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80155aa:	2203      	movs	r2, #3
 80155ac:	3006      	adds	r0, #6
 80155ae:	f7ff f82a 	bl	8014606 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80155b2:	4620      	mov	r0, r4
 80155b4:	2203      	movs	r2, #3
 80155b6:	f850 1b09 	ldr.w	r1, [r0], #9
 80155ba:	3104      	adds	r1, #4
 80155bc:	f7ff f823 	bl	8014606 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80155c0:	6821      	ldr	r1, [r4, #0]
 80155c2:	79cb      	ldrb	r3, [r1, #7]
 80155c4:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80155c6:	7a0a      	ldrb	r2, [r1, #8]
 80155c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80155cc:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80155ce:	7a4a      	ldrb	r2, [r1, #9]
 80155d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80155d4:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80155d6:	7a8a      	ldrb	r2, [r1, #10]
 80155d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80155dc:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80155de:	7acb      	ldrb	r3, [r1, #11]
 80155e0:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80155e2:	7b0b      	ldrb	r3, [r1, #12]
 80155e4:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80155e6:	7923      	ldrb	r3, [r4, #4]
 80155e8:	2b21      	cmp	r3, #33	; 0x21
 80155ea:	d11a      	bne.n	8015622 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80155ec:	2210      	movs	r2, #16
 80155ee:	310d      	adds	r1, #13
 80155f0:	f104 0012 	add.w	r0, r4, #18
 80155f4:	f7ff f807 	bl	8014606 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80155f8:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80155fa:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80155fc:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80155fe:	5c8b      	ldrb	r3, [r1, r2]
 8015600:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015602:	5c08      	ldrb	r0, [r1, r0]
 8015604:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015608:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801560a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801560c:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801560e:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015610:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015614:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015616:	5c8a      	ldrb	r2, [r1, r2]
 8015618:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801561c:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801561e:	2000      	movs	r0, #0
}
 8015620:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015622:	2b11      	cmp	r3, #17
 8015624:	dc03      	bgt.n	801562e <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015626:	220d      	movs	r2, #13
 8015628:	e7e7      	b.n	80155fa <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 801562a:	2002      	movs	r0, #2
 801562c:	e7f8      	b.n	8015620 <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 801562e:	2001      	movs	r0, #1
 8015630:	e7f6      	b.n	8015620 <LoRaMacParserJoinAccept+0x8a>

08015632 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015632:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015634:	4604      	mov	r4, r0
 8015636:	2800      	cmp	r0, #0
 8015638:	d054      	beq.n	80156e4 <LoRaMacParserData+0xb2>
 801563a:	6801      	ldr	r1, [r0, #0]
 801563c:	2900      	cmp	r1, #0
 801563e:	d051      	beq.n	80156e4 <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015640:	780b      	ldrb	r3, [r1, #0]
 8015642:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015644:	784b      	ldrb	r3, [r1, #1]
 8015646:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015648:	788a      	ldrb	r2, [r1, #2]
 801564a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801564e:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015650:	78ca      	ldrb	r2, [r1, #3]
 8015652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015656:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015658:	790a      	ldrb	r2, [r1, #4]
 801565a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801565e:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015660:	794b      	ldrb	r3, [r1, #5]
 8015662:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015664:	798b      	ldrb	r3, [r1, #6]
 8015666:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015668:	79ca      	ldrb	r2, [r1, #7]
 801566a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801566e:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015670:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015672:	f002 020f 	and.w	r2, r2, #15
 8015676:	3108      	adds	r1, #8
 8015678:	3010      	adds	r0, #16
 801567a:	f7fe ffc4 	bl	8014606 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801567e:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015680:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015682:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 8015686:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 801568a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801568e:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015690:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015694:	1a11      	subs	r1, r2, r0
 8015696:	2904      	cmp	r1, #4
 8015698:	dd0d      	ble.n	80156b6 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801569a:	6821      	ldr	r1, [r4, #0]
 801569c:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801569e:	3a04      	subs	r2, #4
 80156a0:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80156a2:	5c08      	ldrb	r0, [r1, r0]
 80156a4:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80156a8:	b2d2      	uxtb	r2, r2
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80156aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80156ac:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80156b0:	4419      	add	r1, r3
 80156b2:	f7fe ffa8 	bl	8014606 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80156b6:	7923      	ldrb	r3, [r4, #4]
 80156b8:	6822      	ldr	r2, [r4, #0]
 80156ba:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 80156bc:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80156be:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 80156c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80156c4:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80156c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80156cc:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80156ce:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80156d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80156d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80156d8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80156dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80156e0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80156e2:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 80156e4:	2002      	movs	r0, #2
 80156e6:	e7fc      	b.n	80156e2 <LoRaMacParserData+0xb0>

080156e8 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80156e8:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80156ea:	4604      	mov	r4, r0
 80156ec:	b360      	cbz	r0, 8015748 <LoRaMacSerializerJoinRequest+0x60>
 80156ee:	6803      	ldr	r3, [r0, #0]
 80156f0:	b353      	cbz	r3, 8015748 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80156f2:	7902      	ldrb	r2, [r0, #4]
 80156f4:	2a16      	cmp	r2, #22
 80156f6:	d929      	bls.n	801574c <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80156f8:	7942      	ldrb	r2, [r0, #5]
 80156fa:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80156fc:	4601      	mov	r1, r0
 80156fe:	2208      	movs	r2, #8
 8015700:	f851 0b06 	ldr.w	r0, [r1], #6
 8015704:	3001      	adds	r0, #1
 8015706:	f7fe ff88 	bl	801461a <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801570a:	4621      	mov	r1, r4
 801570c:	2208      	movs	r2, #8
 801570e:	f851 0b0e 	ldr.w	r0, [r1], #14
 8015712:	3009      	adds	r0, #9
 8015714:	f7fe ff81 	bl	801461a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015718:	6823      	ldr	r3, [r4, #0]
 801571a:	8ae2      	ldrh	r2, [r4, #22]
 801571c:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801571e:	8ae3      	ldrh	r3, [r4, #22]
 8015720:	6822      	ldr	r2, [r4, #0]
 8015722:	0a1b      	lsrs	r3, r3, #8
 8015724:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015726:	6823      	ldr	r3, [r4, #0]
 8015728:	69a2      	ldr	r2, [r4, #24]
 801572a:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801572c:	69a3      	ldr	r3, [r4, #24]
 801572e:	6822      	ldr	r2, [r4, #0]
 8015730:	0a1b      	lsrs	r3, r3, #8
 8015732:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015734:	6823      	ldr	r3, [r4, #0]
 8015736:	8b62      	ldrh	r2, [r4, #26]
 8015738:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801573a:	6823      	ldr	r3, [r4, #0]
 801573c:	7ee2      	ldrb	r2, [r4, #27]
 801573e:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8015740:	2317      	movs	r3, #23
 8015742:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015744:	2000      	movs	r0, #0
}
 8015746:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015748:	2001      	movs	r0, #1
 801574a:	e7fc      	b.n	8015746 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801574c:	2002      	movs	r0, #2
 801574e:	e7fa      	b.n	8015746 <LoRaMacSerializerJoinRequest+0x5e>

08015750 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015750:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015752:	4604      	mov	r4, r0
 8015754:	2800      	cmp	r0, #0
 8015756:	d063      	beq.n	8015820 <LoRaMacSerializerData+0xd0>
 8015758:	6801      	ldr	r1, [r0, #0]
 801575a:	2900      	cmp	r1, #0
 801575c:	d060      	beq.n	8015820 <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801575e:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015760:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015764:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 8015768:	2a00      	cmp	r2, #0
 801576a:	d157      	bne.n	801581c <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801576c:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
 801576e:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015770:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
 8015772:	4413      	add	r3, r2
 8015774:	4298      	cmp	r0, r3
 8015776:	d355      	bcc.n	8015824 <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015778:	7963      	ldrb	r3, [r4, #5]
 801577a:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801577c:	6823      	ldr	r3, [r4, #0]
 801577e:	68a2      	ldr	r2, [r4, #8]
 8015780:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015782:	68a3      	ldr	r3, [r4, #8]
 8015784:	6822      	ldr	r2, [r4, #0]
 8015786:	0a1b      	lsrs	r3, r3, #8
 8015788:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801578a:	6823      	ldr	r3, [r4, #0]
 801578c:	8962      	ldrh	r2, [r4, #10]
 801578e:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015790:	6823      	ldr	r3, [r4, #0]
 8015792:	7ae2      	ldrb	r2, [r4, #11]
 8015794:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015796:	6823      	ldr	r3, [r4, #0]
 8015798:	7b22      	ldrb	r2, [r4, #12]
 801579a:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801579c:	6823      	ldr	r3, [r4, #0]
 801579e:	89e2      	ldrh	r2, [r4, #14]
 80157a0:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80157a2:	89e3      	ldrh	r3, [r4, #14]
 80157a4:	6822      	ldr	r2, [r4, #0]
 80157a6:	0a1b      	lsrs	r3, r3, #8

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80157a8:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80157aa:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80157ac:	7b22      	ldrb	r2, [r4, #12]
 80157ae:	f851 0b10 	ldr.w	r0, [r1], #16
 80157b2:	f002 020f 	and.w	r2, r2, #15
 80157b6:	3008      	adds	r0, #8
 80157b8:	f7fe ff25 	bl	8014606 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80157bc:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80157be:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80157c2:	f003 030f 	and.w	r3, r3, #15
 80157c6:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 80157ca:	b12a      	cbz	r2, 80157d8 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80157cc:	6822      	ldr	r2, [r4, #0]
 80157ce:	f894 1020 	ldrb.w	r1, [r4, #32]
 80157d2:	5551      	strb	r1, [r2, r5]
 80157d4:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80157d8:	6820      	ldr	r0, [r4, #0]
 80157da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80157de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80157e0:	4428      	add	r0, r5
 80157e2:	f7fe ff10 	bl	8014606 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80157e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80157ea:	6822      	ldr	r2, [r4, #0]
 80157ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80157ee:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80157f0:	54d1      	strb	r1, [r2, r3]
 80157f2:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80157f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80157f6:	6820      	ldr	r0, [r4, #0]
 80157f8:	b292      	uxth	r2, r2
 80157fa:	0a09      	lsrs	r1, r1, #8
 80157fc:	5481      	strb	r1, [r0, r2]
 80157fe:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015800:	6821      	ldr	r1, [r4, #0]
 8015802:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8015804:	b292      	uxth	r2, r2
 8015806:	5488      	strb	r0, [r1, r2]
 8015808:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801580a:	6821      	ldr	r1, [r4, #0]
 801580c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8015810:	b292      	uxth	r2, r2
 8015812:	3304      	adds	r3, #4
 8015814:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 8015816:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015818:	2000      	movs	r0, #0
}
 801581a:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801581c:	3309      	adds	r3, #9
 801581e:	e7a6      	b.n	801576e <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015820:	2001      	movs	r0, #1
 8015822:	e7fa      	b.n	801581a <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015824:	2002      	movs	r0, #2
 8015826:	e7f8      	b.n	801581a <LoRaMacSerializerData+0xca>

08015828 <RegionIsActive>:
}
 8015828:	f1a0 0308 	sub.w	r3, r0, #8
 801582c:	4258      	negs	r0, r3
 801582e:	4158      	adcs	r0, r3
 8015830:	4770      	bx	lr

08015832 <RegionGetPhyParam>:
    switch( region )
 8015832:	2808      	cmp	r0, #8
{
 8015834:	b082      	sub	sp, #8
    switch( region )
 8015836:	d103      	bne.n	8015840 <RegionGetPhyParam+0xe>
        US915_GET_PHY_PARAM( );
 8015838:	4608      	mov	r0, r1
}
 801583a:	b002      	add	sp, #8
        US915_GET_PHY_PARAM( );
 801583c:	f7f5 bca2 	b.w	800b184 <RegionUS915GetPhyParam>
}
 8015840:	2000      	movs	r0, #0
 8015842:	b002      	add	sp, #8
 8015844:	4770      	bx	lr

08015846 <RegionSetBandTxDone>:
    switch( region )
 8015846:	2808      	cmp	r0, #8
 8015848:	d102      	bne.n	8015850 <RegionSetBandTxDone+0xa>
        US915_SET_BAND_TX_DONE( );
 801584a:	4608      	mov	r0, r1
 801584c:	f7f5 bd36 	b.w	800b2bc <RegionUS915SetBandTxDone>
}
 8015850:	4770      	bx	lr

08015852 <RegionInitDefaults>:
    switch( region )
 8015852:	2808      	cmp	r0, #8
 8015854:	d102      	bne.n	801585c <RegionInitDefaults+0xa>
        US915_INIT_DEFAULTS( );
 8015856:	4608      	mov	r0, r1
 8015858:	f7f5 bd4c 	b.w	800b2f4 <RegionUS915InitDefaults>
}
 801585c:	4770      	bx	lr

0801585e <RegionVerify>:
{
 801585e:	4603      	mov	r3, r0
    switch( region )
 8015860:	2b08      	cmp	r3, #8
{
 8015862:	4608      	mov	r0, r1
 8015864:	4611      	mov	r1, r2
    switch( region )
 8015866:	d101      	bne.n	801586c <RegionVerify+0xe>
        US915_VERIFY( );
 8015868:	f000 bacd 	b.w	8015e06 <RegionUS915Verify>
}
 801586c:	2000      	movs	r0, #0
 801586e:	4770      	bx	lr

08015870 <RegionApplyCFList>:
    switch( region )
 8015870:	2808      	cmp	r0, #8
 8015872:	d102      	bne.n	801587a <RegionApplyCFList+0xa>
        US915_APPLY_CF_LIST( );
 8015874:	4608      	mov	r0, r1
 8015876:	f7f5 bdc7 	b.w	800b408 <RegionUS915ApplyCFList>
}
 801587a:	4770      	bx	lr

0801587c <RegionChanMaskSet>:
    switch( region )
 801587c:	2808      	cmp	r0, #8
 801587e:	d102      	bne.n	8015886 <RegionChanMaskSet+0xa>
        US915_CHAN_MASK_SET( );
 8015880:	4608      	mov	r0, r1
 8015882:	f7f5 bdef 	b.w	800b464 <RegionUS915ChanMaskSet>
}
 8015886:	2000      	movs	r0, #0
 8015888:	4770      	bx	lr

0801588a <RegionComputeRxWindowParameters>:
{
 801588a:	b410      	push	{r4}
 801588c:	4604      	mov	r4, r0
    switch( region )
 801588e:	2c08      	cmp	r4, #8
{
 8015890:	4608      	mov	r0, r1
 8015892:	4611      	mov	r1, r2
 8015894:	461a      	mov	r2, r3
 8015896:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8015898:	d102      	bne.n	80158a0 <RegionComputeRxWindowParameters+0x16>
}
 801589a:	bc10      	pop	{r4}
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801589c:	f7f5 be1e 	b.w	800b4dc <RegionUS915ComputeRxWindowParameters>
}
 80158a0:	bc10      	pop	{r4}
 80158a2:	4770      	bx	lr

080158a4 <RegionRxConfig>:
{
 80158a4:	4603      	mov	r3, r0
    switch( region )
 80158a6:	2b08      	cmp	r3, #8
{
 80158a8:	4608      	mov	r0, r1
 80158aa:	4611      	mov	r1, r2
    switch( region )
 80158ac:	d101      	bne.n	80158b2 <RegionRxConfig+0xe>
        US915_RX_CONFIG( );
 80158ae:	f7f5 be41 	b.w	800b534 <RegionUS915RxConfig>
}
 80158b2:	2000      	movs	r0, #0
 80158b4:	4770      	bx	lr

080158b6 <RegionTxConfig>:
{
 80158b6:	b410      	push	{r4}
 80158b8:	4604      	mov	r4, r0
    switch( region )
 80158ba:	2c08      	cmp	r4, #8
{
 80158bc:	4608      	mov	r0, r1
 80158be:	4611      	mov	r1, r2
 80158c0:	461a      	mov	r2, r3
    switch( region )
 80158c2:	d102      	bne.n	80158ca <RegionTxConfig+0x14>
}
 80158c4:	bc10      	pop	{r4}
        US915_TX_CONFIG( );
 80158c6:	f7f5 be81 	b.w	800b5cc <RegionUS915TxConfig>
}
 80158ca:	2000      	movs	r0, #0
 80158cc:	bc10      	pop	{r4}
 80158ce:	4770      	bx	lr

080158d0 <RegionLinkAdrReq>:
{
 80158d0:	b430      	push	{r4, r5}
 80158d2:	4605      	mov	r5, r0
    switch( region )
 80158d4:	2d08      	cmp	r5, #8
{
 80158d6:	4608      	mov	r0, r1
 80158d8:	4611      	mov	r1, r2
 80158da:	461a      	mov	r2, r3
 80158dc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
 80158e0:	d103      	bne.n	80158ea <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 80158e2:	9402      	str	r4, [sp, #8]
}
 80158e4:	bc30      	pop	{r4, r5}
        US915_LINK_ADR_REQ( );
 80158e6:	f7f5 beef 	b.w	800b6c8 <RegionUS915LinkAdrReq>
}
 80158ea:	2000      	movs	r0, #0
 80158ec:	bc30      	pop	{r4, r5}
 80158ee:	4770      	bx	lr

080158f0 <RegionRxParamSetupReq>:
    switch( region )
 80158f0:	2808      	cmp	r0, #8
 80158f2:	d102      	bne.n	80158fa <RegionRxParamSetupReq+0xa>
        US915_RX_PARAM_SETUP_REQ( );
 80158f4:	4608      	mov	r0, r1
 80158f6:	f000 baa9 	b.w	8015e4c <RegionUS915RxParamSetupReq>
}
 80158fa:	2000      	movs	r0, #0
 80158fc:	4770      	bx	lr

080158fe <RegionNewChannelReq>:
    switch( region )
 80158fe:	2808      	cmp	r0, #8
 8015900:	d102      	bne.n	8015908 <RegionNewChannelReq+0xa>
        US915_NEW_CHANNEL_REQ( );
 8015902:	4608      	mov	r0, r1
 8015904:	f000 bace 	b.w	8015ea4 <RegionUS915NewChannelReq>
}
 8015908:	2000      	movs	r0, #0
 801590a:	4770      	bx	lr

0801590c <RegionTxParamSetupReq>:
    switch( region )
 801590c:	2808      	cmp	r0, #8
 801590e:	d102      	bne.n	8015916 <RegionTxParamSetupReq+0xa>
        US915_TX_PARAM_SETUP_REQ( );
 8015910:	4608      	mov	r0, r1
 8015912:	f000 baca 	b.w	8015eaa <RegionUS915TxParamSetupReq>
}
 8015916:	2000      	movs	r0, #0
 8015918:	4770      	bx	lr

0801591a <RegionDlChannelReq>:
    switch( region )
 801591a:	2808      	cmp	r0, #8
 801591c:	d102      	bne.n	8015924 <RegionDlChannelReq+0xa>
        US915_DL_CHANNEL_REQ( );
 801591e:	4608      	mov	r0, r1
 8015920:	f000 bac6 	b.w	8015eb0 <RegionUS915DlChannelReq>
}
 8015924:	2000      	movs	r0, #0
 8015926:	4770      	bx	lr

08015928 <RegionAlternateDr>:
{
 8015928:	4603      	mov	r3, r0
    switch( region )
 801592a:	2b08      	cmp	r3, #8
{
 801592c:	4608      	mov	r0, r1
 801592e:	4611      	mov	r1, r2
    switch( region )
 8015930:	d101      	bne.n	8015936 <RegionAlternateDr+0xe>
        US915_ALTERNATE_DR( );
 8015932:	f7f5 bfd9 	b.w	800b8e8 <RegionUS915AlternateDr>
}
 8015936:	2000      	movs	r0, #0
 8015938:	4770      	bx	lr

0801593a <RegionNextChannel>:
{
 801593a:	b410      	push	{r4}
 801593c:	4604      	mov	r4, r0
    switch( region )
 801593e:	2c08      	cmp	r4, #8
{
 8015940:	4608      	mov	r0, r1
 8015942:	4611      	mov	r1, r2
 8015944:	461a      	mov	r2, r3
 8015946:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8015948:	d102      	bne.n	8015950 <RegionNextChannel+0x16>
}
 801594a:	bc10      	pop	{r4}
        US915_NEXT_CHANNEL( );
 801594c:	f7f5 bfe2 	b.w	800b914 <RegionUS915NextChannel>
}
 8015950:	2009      	movs	r0, #9
 8015952:	bc10      	pop	{r4}
 8015954:	4770      	bx	lr

08015956 <RegionApplyDrOffset>:
{
 8015956:	b410      	push	{r4}
 8015958:	4604      	mov	r4, r0
    switch( region )
 801595a:	2c08      	cmp	r4, #8
{
 801595c:	4608      	mov	r0, r1
 801595e:	4611      	mov	r1, r2
 8015960:	461a      	mov	r2, r3
    switch( region )
 8015962:	d102      	bne.n	801596a <RegionApplyDrOffset+0x14>
}
 8015964:	bc10      	pop	{r4}
        US915_APPLY_DR_OFFSET( );
 8015966:	f7f6 b871 	b.w	800ba4c <RegionUS915ApplyDrOffset>
}
 801596a:	b2c8      	uxtb	r0, r1
 801596c:	bc10      	pop	{r4}
 801596e:	4770      	bx	lr

08015970 <RegionCommonChanVerifyDr>:
{
 8015970:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ( value >= min ) && ( value <= max ) )
 8015972:	429a      	cmp	r2, r3
{
 8015974:	9e06      	ldr	r6, [sp, #24]
    if( ( value >= min ) && ( value <= max ) )
 8015976:	db03      	blt.n	8015980 <RegionCommonChanVerifyDr+0x10>
 8015978:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 801597c:	429a      	cmp	r2, r3
 801597e:	dd25      	ble.n	80159cc <RegionCommonChanVerifyDr+0x5c>
        return false;
 8015980:	2000      	movs	r0, #0
}
 8015982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015988:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
 801598c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015990:	2700      	movs	r7, #0
 8015992:	fa4e f507 	asr.w	r5, lr, r7
 8015996:	07ed      	lsls	r5, r5, #31
 8015998:	d50c      	bpl.n	80159b4 <RegionCommonChanVerifyDr+0x44>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801599a:	f893 c008 	ldrb.w	ip, [r3, #8]
 801599e:	f34c 1503 	sbfx	r5, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 80159a2:	f00c 0c0f 	and.w	ip, ip, #15
 80159a6:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80159a8:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 80159aa:	db03      	blt.n	80159b4 <RegionCommonChanVerifyDr+0x44>
 80159ac:	f005 050f 	and.w	r5, r5, #15
 80159b0:	42aa      	cmp	r2, r5
 80159b2:	dd0d      	ble.n	80159d0 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 80159b4:	3701      	adds	r7, #1
 80159b6:	2f10      	cmp	r7, #16
 80159b8:	f103 030c 	add.w	r3, r3, #12
 80159bc:	d1e9      	bne.n	8015992 <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80159be:	3401      	adds	r4, #1
 80159c0:	b2e4      	uxtb	r4, r4
 80159c2:	0123      	lsls	r3, r4, #4
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	4298      	cmp	r0, r3
 80159c8:	d8dc      	bhi.n	8015984 <RegionCommonChanVerifyDr+0x14>
 80159ca:	e7d9      	b.n	8015980 <RegionCommonChanVerifyDr+0x10>
 80159cc:	2400      	movs	r4, #0
 80159ce:	e7f8      	b.n	80159c2 <RegionCommonChanVerifyDr+0x52>
                    return true;
 80159d0:	2001      	movs	r0, #1
 80159d2:	e7d6      	b.n	8015982 <RegionCommonChanVerifyDr+0x12>

080159d4 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 80159d4:	4288      	cmp	r0, r1
 80159d6:	db04      	blt.n	80159e2 <RegionCommonValueInRange+0xe>
        return 1;
 80159d8:	4290      	cmp	r0, r2
 80159da:	bfcc      	ite	gt
 80159dc:	2000      	movgt	r0, #0
 80159de:	2001      	movle	r0, #1
 80159e0:	4770      	bx	lr
    return 0;
 80159e2:	2000      	movs	r0, #0
}
 80159e4:	4770      	bx	lr

080159e6 <RegionCommonChanDisable>:
{
 80159e6:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80159e8:	0914      	lsrs	r4, r2, #4
 80159ea:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
{
 80159ee:	4603      	mov	r3, r0
    uint8_t index = id / 16;
 80159f0:	ea4f 1011 	mov.w	r0, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80159f4:	d30e      	bcc.n	8015a14 <RegionCommonChanDisable+0x2e>
 80159f6:	4291      	cmp	r1, r2
 80159f8:	d20c      	bcs.n	8015a14 <RegionCommonChanDisable+0x2e>
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80159fa:	b202      	sxth	r2, r0
 80159fc:	f001 010f 	and.w	r1, r1, #15
 8015a00:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8015a04:	2001      	movs	r0, #1
 8015a06:	fa00 f101 	lsl.w	r1, r0, r1
 8015a0a:	ea24 0101 	bic.w	r1, r4, r1
 8015a0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8015a12:	bd10      	pop	{r4, pc}
        return false;
 8015a14:	2000      	movs	r0, #0
 8015a16:	e7fc      	b.n	8015a12 <RegionCommonChanDisable+0x2c>

08015a18 <RegionCommonCountChannels>:
{
 8015a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( channelsMask == NULL )
 8015a1a:	b128      	cbz	r0, 8015a28 <RegionCommonCountChannels+0x10>
 8015a1c:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015a20:	2601      	movs	r6, #1
    uint8_t nbChannels = 0;
 8015a22:	2000      	movs	r0, #0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015a24:	4291      	cmp	r1, r2
 8015a26:	d300      	bcc.n	8015a2a <RegionCommonCountChannels+0x12>
}
 8015a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015a2a:	2400      	movs	r4, #0
 8015a2c:	f835 7b02 	ldrh.w	r7, [r5], #2
    uint8_t nbActiveBits = 0;
 8015a30:	4623      	mov	r3, r4
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015a32:	fa06 fc04 	lsl.w	ip, r6, r4
 8015a36:	ea3c 0c07 	bics.w	ip, ip, r7
            nbActiveBits++;
 8015a3a:	bf08      	it	eq
 8015a3c:	3301      	addeq	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 8015a3e:	f104 0401 	add.w	r4, r4, #1
            nbActiveBits++;
 8015a42:	bf08      	it	eq
 8015a44:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8015a46:	2c10      	cmp	r4, #16
 8015a48:	d1f3      	bne.n	8015a32 <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015a4a:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015a4c:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015a4e:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015a50:	b2c9      	uxtb	r1, r1
 8015a52:	e7e7      	b.n	8015a24 <RegionCommonCountChannels+0xc>

08015a54 <RegionCommonChanMaskCopy>:
{
 8015a54:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015a56:	b100      	cbz	r0, 8015a5a <RegionCommonChanMaskCopy+0x6>
 8015a58:	b949      	cbnz	r1, 8015a6e <RegionCommonChanMaskCopy+0x1a>
}
 8015a5a:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015a5c:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8015a60:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8015a64:	3301      	adds	r3, #1
 8015a66:	b2dc      	uxtb	r4, r3
 8015a68:	42a2      	cmp	r2, r4
 8015a6a:	d8f7      	bhi.n	8015a5c <RegionCommonChanMaskCopy+0x8>
 8015a6c:	e7f5      	b.n	8015a5a <RegionCommonChanMaskCopy+0x6>
 8015a6e:	2300      	movs	r3, #0
 8015a70:	e7f9      	b.n	8015a66 <RegionCommonChanMaskCopy+0x12>

08015a72 <RegionCommonSetBandTxDone>:
{
 8015a72:	b082      	sub	sp, #8
 8015a74:	b530      	push	{r4, r5, lr}
 8015a76:	8804      	ldrh	r4, [r0, #0]
 8015a78:	9304      	str	r3, [sp, #16]
    if( joined == false )
 8015a7a:	b96a      	cbnz	r2, 8015a98 <RegionCommonSetBandTxDone+0x26>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8015a7c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8015a80:	d318      	bcc.n	8015ab4 <RegionCommonSetBandTxDone+0x42>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015a82:	f649 25af 	movw	r5, #39599	; 0x9aaf
 8015a86:	f242 7210 	movw	r2, #10000	; 0x2710
 8015a8a:	42ab      	cmp	r3, r5
 8015a8c:	bf98      	it	ls
 8015a8e:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015a92:	4294      	cmp	r4, r2
 8015a94:	bf38      	it	cc
 8015a96:	4614      	movcc	r4, r2
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015a98:	2c01      	cmp	r4, #1
 8015a9a:	68c3      	ldr	r3, [r0, #12]
 8015a9c:	bf38      	it	cc
 8015a9e:	2401      	movcc	r4, #1
 8015aa0:	434c      	muls	r4, r1
 8015aa2:	42a3      	cmp	r3, r4
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015aa4:	bf8c      	ite	hi
 8015aa6:	1b1c      	subhi	r4, r3, r4
        band->TimeCredits = 0;
 8015aa8:	2400      	movls	r4, #0
 8015aaa:	60c4      	str	r4, [r0, #12]
}
 8015aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ab0:	b002      	add	sp, #8
 8015ab2:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015ab4:	2264      	movs	r2, #100	; 0x64
 8015ab6:	e7ec      	b.n	8015a92 <RegionCommonSetBandTxDone+0x20>

08015ab8 <RegionCommonParseLinkAdrReq>:
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015ab8:	7803      	ldrb	r3, [r0, #0]
 8015aba:	2b03      	cmp	r3, #3
 8015abc:	d114      	bne.n	8015ae8 <RegionCommonParseLinkAdrReq+0x30>
        linkAdrParams->Datarate = payload[1];
 8015abe:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015ac0:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015ac4:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015ac6:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015ac8:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015aca:	7883      	ldrb	r3, [r0, #2]
 8015acc:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015ace:	78c2      	ldrb	r2, [r0, #3]
 8015ad0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015ad4:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8015ad6:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015ad8:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 8015adc:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015ae0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015ae2:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8015ae4:	2005      	movs	r0, #5
 8015ae6:	4770      	bx	lr
    uint8_t retIndex = 0;
 8015ae8:	2000      	movs	r0, #0
}
 8015aea:	4770      	bx	lr

08015aec <RegionCommonLinkAdrReqVerifyParams>:
{
 8015aec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015af0:	4698      	mov	r8, r3
    if( verifyParams->AdrEnabled == false )
 8015af2:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 8015af4:	7905      	ldrb	r5, [r0, #4]
    int8_t txPower = verifyParams->TxPower;
 8015af6:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015afa:	7a06      	ldrb	r6, [r0, #8]
{
 8015afc:	4691      	mov	r9, r2
 8015afe:	4604      	mov	r4, r0
    int8_t datarate = verifyParams->Datarate;
 8015b00:	f990 2006 	ldrsb.w	r2, [r0, #6]
{
 8015b04:	468a      	mov	sl, r1
    if( verifyParams->AdrEnabled == false )
 8015b06:	b17b      	cbz	r3, 8015b28 <RegionCommonLinkAdrReqVerifyParams+0x3c>
    int8_t nbRepetitions = verifyParams->NbRep;
 8015b08:	b276      	sxtb	r6, r6
    if( status != 0 )
 8015b0a:	b375      	cbz	r5, 8015b6a <RegionCommonLinkAdrReqVerifyParams+0x7e>
        if( datarate == 0x0F )
 8015b0c:	2a0f      	cmp	r2, #15
 8015b0e:	d112      	bne.n	8015b36 <RegionCommonLinkAdrReqVerifyParams+0x4a>
            datarate =  verifyParams->CurrentDatarate;
 8015b10:	f994 2009 	ldrsb.w	r2, [r4, #9]
        if( txPower == 0x0F )
 8015b14:	2f0f      	cmp	r7, #15
 8015b16:	d11e      	bne.n	8015b56 <RegionCommonLinkAdrReqVerifyParams+0x6a>
            txPower =  verifyParams->CurrentTxPower;
 8015b18:	f994 700a 	ldrsb.w	r7, [r4, #10]
    if( status == 0x07 )
 8015b1c:	2d07      	cmp	r5, #7
 8015b1e:	d124      	bne.n	8015b6a <RegionCommonLinkAdrReqVerifyParams+0x7e>
            nbRepetitions = 1;
 8015b20:	2e00      	cmp	r6, #0
 8015b22:	bf08      	it	eq
 8015b24:	2601      	moveq	r6, #1
 8015b26:	e020      	b.n	8015b6a <RegionCommonLinkAdrReqVerifyParams+0x7e>
        nbRepetitions = verifyParams->CurrentNbRep;
 8015b28:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8015b2c:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8015b30:	f990 700a 	ldrsb.w	r7, [r0, #10]
 8015b34:	e7e9      	b.n	8015b0a <RegionCommonLinkAdrReqVerifyParams+0x1e>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015b36:	69a3      	ldr	r3, [r4, #24]
 8015b38:	9301      	str	r3, [sp, #4]
 8015b3a:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8015b3e:	9300      	str	r3, [sp, #0]
 8015b40:	6921      	ldr	r1, [r4, #16]
 8015b42:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8015b46:	7b20      	ldrb	r0, [r4, #12]
 8015b48:	f7ff ff12 	bl	8015970 <RegionCommonChanVerifyDr>
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	d1e1      	bne.n	8015b14 <RegionCommonLinkAdrReqVerifyParams+0x28>
            status &= 0xFD; // Datarate KO
 8015b50:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8015b54:	e7de      	b.n	8015b14 <RegionCommonLinkAdrReqVerifyParams+0x28>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015b56:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8015b5a:	f994 101c 	ldrsb.w	r1, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 8015b5e:	42bb      	cmp	r3, r7
 8015b60:	dc0d      	bgt.n	8015b7e <RegionCommonLinkAdrReqVerifyParams+0x92>
 8015b62:	42b9      	cmp	r1, r7
 8015b64:	dada      	bge.n	8015b1c <RegionCommonLinkAdrReqVerifyParams+0x30>
                status &= 0xFB; // TxPower KO
 8015b66:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
}
 8015b6a:	4628      	mov	r0, r5
    *dr = datarate;
 8015b6c:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
 8015b70:	f889 7000 	strb.w	r7, [r9]
    *nbRep = nbRepetitions;
 8015b74:	f888 6000 	strb.w	r6, [r8]
}
 8015b78:	b002      	add	sp, #8
 8015b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b7e:	461f      	mov	r7, r3
 8015b80:	e7cc      	b.n	8015b1c <RegionCommonLinkAdrReqVerifyParams+0x30>

08015b82 <RegionCommonComputeRxWindowParameters>:
{
 8015b82:	b530      	push	{r4, r5, lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015b84:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8015b88:	1f0c      	subs	r4, r1, #4
 8015b8a:	436a      	muls	r2, r5
 8015b8c:	fb00 2204 	mla	r2, r0, r4, r2
 8015b90:	0052      	lsls	r2, r2, #1
 8015b92:	bf1e      	ittt	ne
 8015b94:	f100 34ff 	addne.w	r4, r0, #4294967295	; 0xffffffff
 8015b98:	1912      	addne	r2, r2, r4
 8015b9a:	fbb2 f2f0 	udivne	r2, r2, r0
 8015b9e:	428a      	cmp	r2, r1
 8015ba0:	bf38      	it	cc
 8015ba2:	460a      	movcc	r2, r1
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015ba4:	0084      	lsls	r4, r0, #2
 8015ba6:	4350      	muls	r0, r2
 8015ba8:	bf18      	it	ne
 8015baa:	3001      	addne	r0, #1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015bac:	9903      	ldr	r1, [sp, #12]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015bae:	bf18      	it	ne
 8015bb0:	0840      	lsrne	r0, r0, #1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015bb2:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015bb4:	1a20      	subs	r0, r4, r0
 8015bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015bba:	fb02 0013 	mls	r0, r2, r3, r0
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	9b04      	ldr	r3, [sp, #16]
 8015bc2:	bfd2      	itee	le
 8015bc4:	fb90 f0f2 	sdivle	r0, r0, r2
 8015bc8:	f200 30e7 	addwgt	r0, r0, #999	; 0x3e7
 8015bcc:	fbb0 f0f2 	udivgt	r0, r0, r2
 8015bd0:	6018      	str	r0, [r3, #0]
}
 8015bd2:	bd30      	pop	{r4, r5, pc}

08015bd4 <RegionCommonComputeTxPower>:
{
 8015bd4:	b538      	push	{r3, r4, r5, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015bd6:	0040      	lsls	r0, r0, #1
{
 8015bd8:	4614      	mov	r4, r2
 8015bda:	460d      	mov	r5, r1
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015bdc:	f7ea fffc 	bl	8000bd8 <__aeabi_ui2f>
 8015be0:	4601      	mov	r1, r0
 8015be2:	4628      	mov	r0, r5
 8015be4:	f7ea ff46 	bl	8000a74 <__aeabi_fsub>
 8015be8:	4621      	mov	r1, r4
 8015bea:	f7ea ff43 	bl	8000a74 <__aeabi_fsub>
 8015bee:	f7ea fc5b 	bl	80004a8 <__aeabi_f2d>
 8015bf2:	f7eb fd15 	bl	8001620 <floor>
 8015bf6:	f7ea fec1 	bl	800097c <__aeabi_d2iz>
}
 8015bfa:	b240      	sxtb	r0, r0
 8015bfc:	bd38      	pop	{r3, r4, r5, pc}

08015bfe <RegionCommonCountNbOfEnabledChannels>:
{
 8015bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c02:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015c04:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 8015c06:	461f      	mov	r7, r3
    uint8_t nbChannelCount = 0;
 8015c08:	469c      	mov	ip, r3
 8015c0a:	011c      	lsls	r4, r3, #4
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015c0c:	8a05      	ldrh	r5, [r0, #16]
 8015c0e:	fa5f fe84 	uxtb.w	lr, r4
 8015c12:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8015c16:	42a5      	cmp	r5, r4
 8015c18:	d806      	bhi.n	8015c28 <RegionCommonCountNbOfEnabledChannels+0x2a>
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015c1a:	9b01      	ldr	r3, [sp, #4]
    *nbEnabledChannels = nbChannelCount;
 8015c1c:	f882 c000 	strb.w	ip, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015c20:	701f      	strb	r7, [r3, #0]
}
 8015c22:	b003      	add	sp, #12
 8015c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c28:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8015c2c:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8015c30:	00ad      	lsls	r5, r5, #2
 8015c32:	2400      	movs	r4, #0
 8015c34:	6846      	ldr	r6, [r0, #4]
 8015c36:	f836 6009 	ldrh.w	r6, [r6, r9]
 8015c3a:	4126      	asrs	r6, r4
 8015c3c:	07f6      	lsls	r6, r6, #31
 8015c3e:	d527      	bpl.n	8015c90 <RegionCommonCountNbOfEnabledChannels+0x92>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8015c40:	6886      	ldr	r6, [r0, #8]
 8015c42:	eb06 0a05 	add.w	sl, r6, r5
 8015c46:	5976      	ldr	r6, [r6, r5]
 8015c48:	b316      	cbz	r6, 8015c90 <RegionCommonCountNbOfEnabledChannels+0x92>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015c4a:	7806      	ldrb	r6, [r0, #0]
 8015c4c:	b936      	cbnz	r6, 8015c5c <RegionCommonCountNbOfEnabledChannels+0x5e>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015c4e:	6946      	ldr	r6, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015c50:	b126      	cbz	r6, 8015c5c <RegionCommonCountNbOfEnabledChannels+0x5e>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8015c52:	f836 6009 	ldrh.w	r6, [r6, r9]
 8015c56:	4126      	asrs	r6, r4
 8015c58:	07f6      	lsls	r6, r6, #31
 8015c5a:	d519      	bpl.n	8015c90 <RegionCommonCountNbOfEnabledChannels+0x92>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015c5c:	f89a 6008 	ldrb.w	r6, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015c60:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015c64:	f346 0803 	sbfx	r8, r6, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 8015c68:	fa4f f888 	sxtb.w	r8, r8
 8015c6c:	45d8      	cmp	r8, fp
 8015c6e:	dc0f      	bgt.n	8015c90 <RegionCommonCountNbOfEnabledChannels+0x92>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015c70:	f346 1603 	sbfx	r6, r6, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 8015c74:	b276      	sxtb	r6, r6
 8015c76:	455e      	cmp	r6, fp
 8015c78:	db0a      	blt.n	8015c90 <RegionCommonCountNbOfEnabledChannels+0x92>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8015c7a:	f89a 6009 	ldrb.w	r6, [sl, #9]
 8015c7e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8015c82:	68c6      	ldr	r6, [r0, #12]
 8015c84:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 8015c88:	7d36      	ldrb	r6, [r6, #20]
 8015c8a:	b94e      	cbnz	r6, 8015ca0 <RegionCommonCountNbOfEnabledChannels+0xa2>
                    nbRestrictedChannelsCount++;
 8015c8c:	3701      	adds	r7, #1
 8015c8e:	b2ff      	uxtb	r7, r7
        for( uint8_t j = 0; j < 16; j++ )
 8015c90:	3401      	adds	r4, #1
 8015c92:	2c10      	cmp	r4, #16
 8015c94:	f105 050c 	add.w	r5, r5, #12
 8015c98:	d1cc      	bne.n	8015c34 <RegionCommonCountNbOfEnabledChannels+0x36>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	e7b4      	b.n	8015c0a <RegionCommonCountNbOfEnabledChannels+0xc>
                enabledChannels[nbChannelCount++] = i + j;
 8015ca0:	f10c 0601 	add.w	r6, ip, #1
 8015ca4:	eb0e 0804 	add.w	r8, lr, r4
 8015ca8:	f801 800c 	strb.w	r8, [r1, ip]
 8015cac:	fa5f fc86 	uxtb.w	ip, r6
 8015cb0:	e7ee      	b.n	8015c90 <RegionCommonCountNbOfEnabledChannels+0x92>

08015cb2 <RegionCommonIdentifyChannels>:
{
 8015cb2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb6:	4604      	mov	r4, r0
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015cb8:	6840      	ldr	r0, [r0, #4]
{
 8015cba:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8015cbe:	461d      	mov	r5, r3
 8015cc0:	468a      	mov	sl, r1
 8015cc2:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015cc4:	f7fe fdbb 	bl	801483e <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015cc8:	6823      	ldr	r3, [r4, #0]
 8015cca:	1a1b      	subs	r3, r3, r0
 8015ccc:	603b      	str	r3, [r7, #0]
    *nbEnabledChannels = 0;
 8015cce:	f04f 0800 	mov.w	r8, #0
    *nbRestrictedChannels = 1;
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	7033      	strb	r3, [r6, #0]
    *nbEnabledChannels = 0;
 8015cd6:	f885 8000 	strb.w	r8, [r5]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015cda:	6863      	ldr	r3, [r4, #4]
 8015cdc:	b113      	cbz	r3, 8015ce4 <RegionCommonIdentifyChannels+0x32>
 8015cde:	6823      	ldr	r3, [r4, #0]
 8015ce0:	4283      	cmp	r3, r0
 8015ce2:	d824      	bhi.n	8015d2e <RegionCommonIdentifyChannels+0x7c>
        *aggregatedTimeOff = 0;
 8015ce4:	f8ca 8000 	str.w	r8, [sl]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015ce8:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8015cec:	69a3      	ldr	r3, [r4, #24]
 8015cee:	f89c e000 	ldrb.w	lr, [ip]
 8015cf2:	9303      	str	r3, [sp, #12]
 8015cf4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8015cf8:	ab01      	add	r3, sp, #4
 8015cfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8015cfe:	7d23      	ldrb	r3, [r4, #20]
 8015d00:	9300      	str	r3, [sp, #0]
 8015d02:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015d06:	7a23      	ldrb	r3, [r4, #8]
 8015d08:	7a62      	ldrb	r2, [r4, #9]
 8015d0a:	4670      	mov	r0, lr
 8015d0c:	f7f5 f8f4 	bl	800aef8 <RegionCommonUpdateBandTimeOff>
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8015d10:	4633      	mov	r3, r6
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015d12:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8015d14:	462a      	mov	r2, r5
 8015d16:	69e0      	ldr	r0, [r4, #28]
 8015d18:	4649      	mov	r1, r9
 8015d1a:	f7ff ff70 	bl	8015bfe <RegionCommonCountNbOfEnabledChannels>
    if( *nbEnabledChannels > 0 )
 8015d1e:	782b      	ldrb	r3, [r5, #0]
 8015d20:	b12b      	cbz	r3, 8015d2e <RegionCommonIdentifyChannels+0x7c>
        *nextTxDelay = 0;
 8015d22:	f8c7 8000 	str.w	r8, [r7]
        return LORAMAC_STATUS_OK;
 8015d26:	2000      	movs	r0, #0
}
 8015d28:	b004      	add	sp, #16
 8015d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
 8015d2e:	7833      	ldrb	r3, [r6, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	bf14      	ite	ne
 8015d34:	200b      	movne	r0, #11
 8015d36:	200c      	moveq	r0, #12
 8015d38:	e7f6      	b.n	8015d28 <RegionCommonIdentifyChannels+0x76>

08015d3a <RegionCommonGetNextLowerTxDr>:
{
 8015d3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t drLocal = params->CurrentDr;
 8015d3c:	f990 2000 	ldrsb.w	r2, [r0]
    if( params->CurrentDr == params->MinDr )
 8015d40:	f990 5002 	ldrsb.w	r5, [r0, #2]
 8015d44:	4295      	cmp	r5, r2
{
 8015d46:	4604      	mov	r4, r0
    if( params->CurrentDr == params->MinDr )
 8015d48:	d00f      	beq.n	8015d6a <RegionCommonGetNextLowerTxDr+0x30>
            drLocal = ( drLocal - 1 );
 8015d4a:	3a01      	subs	r2, #1
 8015d4c:	b252      	sxtb	r2, r2
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015d4e:	4295      	cmp	r5, r2
 8015d50:	d00b      	beq.n	8015d6a <RegionCommonGetNextLowerTxDr+0x30>
 8015d52:	68a3      	ldr	r3, [r4, #8]
 8015d54:	9301      	str	r3, [sp, #4]
 8015d56:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8015d5a:	9300      	str	r3, [sp, #0]
 8015d5c:	6861      	ldr	r1, [r4, #4]
 8015d5e:	78e0      	ldrb	r0, [r4, #3]
 8015d60:	462b      	mov	r3, r5
 8015d62:	f7ff fe05 	bl	8015970 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8015d66:	2800      	cmp	r0, #0
 8015d68:	d0ef      	beq.n	8015d4a <RegionCommonGetNextLowerTxDr+0x10>
}
 8015d6a:	4610      	mov	r0, r2
 8015d6c:	b003      	add	sp, #12
 8015d6e:	bd30      	pop	{r4, r5, pc}

08015d70 <RegionCommonLimitTxPower>:
}
 8015d70:	4288      	cmp	r0, r1
 8015d72:	bfb8      	it	lt
 8015d74:	4608      	movlt	r0, r1
 8015d76:	4770      	bx	lr

08015d78 <RegionBaseUSComputeNext125kHzJoinChannel>:
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8015d78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	e9cd 3300 	strd	r3, r3, [sp]
{
 8015d82:	460e      	mov	r6, r1
 8015d84:	4690      	mov	r8, r2
    uint8_t availableChannels = 0;
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015d86:	4607      	mov	r7, r0
 8015d88:	b918      	cbnz	r0, 8015d92 <RegionBaseUSComputeNext125kHzJoinChannel+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015d8a:	2003      	movs	r0, #3
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
}
 8015d8c:	b002      	add	sp, #8
 8015d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015d92:	2900      	cmp	r1, #0
 8015d94:	d0f9      	beq.n	8015d8a <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
 8015d96:	2a00      	cmp	r2, #0
 8015d98:	d0f7      	beq.n	8015d8a <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
    startIndex = *groupsCurrentIndex;
 8015d9a:	780c      	ldrb	r4, [r1, #0]
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8015d9c:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 8015d9e:	07e0      	lsls	r0, r4, #31
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8015da0:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
{
 8015da4:	f04f 0300 	mov.w	r3, #0
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8015da8:	bf54      	ite	pl
 8015daa:	b2c9      	uxtbpl	r1, r1
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8015dac:	0a09      	lsrmi	r1, r1, #8
    *availableChannels = 0;
 8015dae:	461d      	mov	r5, r3
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8015db0:	fa41 f203 	asr.w	r2, r1, r3
 8015db4:	07d2      	lsls	r2, r2, #31
 8015db6:	b2d8      	uxtb	r0, r3
 8015db8:	d505      	bpl.n	8015dc6 <RegionBaseUSComputeNext125kHzJoinChannel+0x4e>
            findAvailableChannelsIndex[*availableChannels] = i;
 8015dba:	aa02      	add	r2, sp, #8
 8015dbc:	442a      	add	r2, r5
            ( *availableChannels )++;
 8015dbe:	3501      	adds	r5, #1
            findAvailableChannelsIndex[*availableChannels] = i;
 8015dc0:	f802 0c08 	strb.w	r0, [r2, #-8]
            ( *availableChannels )++;
 8015dc4:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < 8; i++ )
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	2b08      	cmp	r3, #8
 8015dca:	d1f1      	bne.n	8015db0 <RegionBaseUSComputeNext125kHzJoinChannel+0x38>
        if ( availableChannels > 0 )
 8015dcc:	b15d      	cbz	r5, 8015de6 <RegionBaseUSComputeNext125kHzJoinChannel+0x6e>
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8015dce:	1e69      	subs	r1, r5, #1
 8015dd0:	2000      	movs	r0, #0
 8015dd2:	f7fe fc0b 	bl	80145ec <randr>
 8015dd6:	ab02      	add	r3, sp, #8
 8015dd8:	4418      	add	r0, r3
 8015dda:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 8015dde:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015de2:	f888 3000 	strb.w	r3, [r8]
        startIndex++;
 8015de6:	3401      	adds	r4, #1
 8015de8:	b2e4      	uxtb	r4, r4
            startIndex = 0;
 8015dea:	2c08      	cmp	r4, #8
 8015dec:	bf28      	it	cs
 8015dee:	2400      	movcs	r4, #0
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8015df0:	b91d      	cbnz	r5, 8015dfa <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 8015df2:	7833      	ldrb	r3, [r6, #0]
 8015df4:	42a3      	cmp	r3, r4
 8015df6:	d1d1      	bne.n	8015d9c <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
 8015df8:	e7c7      	b.n	8015d8a <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
        *groupsCurrentIndex = startIndex;
 8015dfa:	7034      	strb	r4, [r6, #0]
        return LORAMAC_STATUS_OK;
 8015dfc:	2000      	movs	r0, #0
 8015dfe:	e7c5      	b.n	8015d8c <RegionBaseUSComputeNext125kHzJoinChannel+0x14>

08015e00 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 8015e00:	fb02 1000 	mla	r0, r2, r0, r1
 8015e04:	4770      	bx	lr

08015e06 <RegionUS915Verify>:
{
 8015e06:	b508      	push	{r3, lr}
    switch( phyAttribute )
 8015e08:	290a      	cmp	r1, #10
 8015e0a:	d81d      	bhi.n	8015e48 <RegionUS915Verify+0x42>
 8015e0c:	e8df f001 	tbb	[pc, r1]
 8015e10:	1c1c1c06 	.word	0x1c1c1c06
 8015e14:	100e0b1c 	.word	0x100e0b1c
 8015e18:	1a1c      	.short	0x1a1c
 8015e1a:	1a          	.byte	0x1a
 8015e1b:	00          	.byte	0x00
}
 8015e1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return VerifyRfFreq( verify->Frequency );
 8015e20:	6800      	ldr	r0, [r0, #0]
 8015e22:	f7f5 b98f 	b.w	800b144 <VerifyRfFreq>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8015e26:	2204      	movs	r2, #4
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8015e28:	2100      	movs	r1, #0
 8015e2a:	e003      	b.n	8015e34 <RegionUS915Verify+0x2e>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015e2c:	2205      	movs	r2, #5
 8015e2e:	e7fb      	b.n	8015e28 <RegionUS915Verify+0x22>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8015e30:	220d      	movs	r2, #13
 8015e32:	2108      	movs	r1, #8
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8015e34:	f990 0000 	ldrsb.w	r0, [r0]
 8015e38:	f7ff fdcc 	bl	80159d4 <RegionCommonValueInRange>
 8015e3c:	3800      	subs	r0, #0
 8015e3e:	bf18      	it	ne
 8015e40:	2001      	movne	r0, #1
}
 8015e42:	bd08      	pop	{r3, pc}
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8015e44:	220e      	movs	r2, #14
 8015e46:	e7ef      	b.n	8015e28 <RegionUS915Verify+0x22>
    switch( phyAttribute )
 8015e48:	2000      	movs	r0, #0
 8015e4a:	e7fa      	b.n	8015e42 <RegionUS915Verify+0x3c>

08015e4c <RegionUS915RxParamSetupReq>:
{
 8015e4c:	b538      	push	{r3, r4, r5, lr}
 8015e4e:	4605      	mov	r5, r0
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015e50:	6840      	ldr	r0, [r0, #4]
 8015e52:	f7f5 f977 	bl	800b144 <VerifyRfFreq>
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8015e56:	220d      	movs	r2, #13
        status &= 0xFE; // Channel frequency KO
 8015e58:	2800      	cmp	r0, #0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8015e5a:	f04f 0108 	mov.w	r1, #8
 8015e5e:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 8015e62:	bf14      	ite	ne
 8015e64:	2407      	movne	r4, #7
 8015e66:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8015e68:	f7ff fdb4 	bl	80159d4 <RegionCommonValueInRange>
 8015e6c:	b908      	cbnz	r0, 8015e72 <RegionUS915RxParamSetupReq+0x26>
        status &= 0xFD; // Datarate KO
 8015e6e:	f004 0405 	and.w	r4, r4, #5
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8015e72:	f995 0000 	ldrsb.w	r0, [r5]
 8015e76:	2207      	movs	r2, #7
 8015e78:	2105      	movs	r1, #5
 8015e7a:	f7ff fdab 	bl	80159d4 <RegionCommonValueInRange>
 8015e7e:	2801      	cmp	r0, #1
 8015e80:	d003      	beq.n	8015e8a <RegionUS915RxParamSetupReq+0x3e>
 8015e82:	f995 3000 	ldrsb.w	r3, [r5]
 8015e86:	2b0d      	cmp	r3, #13
 8015e88:	dd01      	ble.n	8015e8e <RegionUS915RxParamSetupReq+0x42>
        status &= 0xFD; // Datarate KO
 8015e8a:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8015e8e:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8015e92:	2203      	movs	r2, #3
 8015e94:	2100      	movs	r1, #0
 8015e96:	f7ff fd9d 	bl	80159d4 <RegionCommonValueInRange>
 8015e9a:	b908      	cbnz	r0, 8015ea0 <RegionUS915RxParamSetupReq+0x54>
        status &= 0xFB; // Rx1DrOffset range KO
 8015e9c:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
}
 8015ea0:	4620      	mov	r0, r4
 8015ea2:	bd38      	pop	{r3, r4, r5, pc}

08015ea4 <RegionUS915NewChannelReq>:
}
 8015ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ea8:	4770      	bx	lr

08015eaa <RegionUS915TxParamSetupReq>:
 8015eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eae:	4770      	bx	lr

08015eb0 <RegionUS915DlChannelReq>:
 8015eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015eb4:	4770      	bx	lr

08015eb6 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	f7fe b98b 	b.w	80141d2 <z_impl_z_log_msg2_static_create>

08015ebc <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
 8015ebc:	6803      	ldr	r3, [r0, #0]
}
 8015ebe:	6958      	ldr	r0, [r3, #20]
 8015ec0:	4770      	bx	lr

08015ec2 <fatfs_mkdir>:
{
 8015ec2:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
 8015ec4:	1c48      	adds	r0, r1, #1
 8015ec6:	f002 fd19 	bl	80188fc <f_mkdir>
}
 8015eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 8015ece:	f7f6 b8eb 	b.w	800c0a8 <translate_error>

08015ed2 <fatfs_unlink>:
{
 8015ed2:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
 8015ed4:	1c48      	adds	r0, r1, #1
 8015ed6:	f002 fcc4 	bl	8018862 <f_unlink>
}
 8015eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 8015ede:	f7f6 b8e3 	b.w	800c0a8 <translate_error>

08015ee2 <fatfs_rename>:
{
 8015ee2:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
 8015ee4:	1c54      	adds	r4, r2, #1
{
 8015ee6:	b087      	sub	sp, #28
 8015ee8:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
 8015eea:	4620      	mov	r0, r4
 8015eec:	4669      	mov	r1, sp
 8015eee:	f002 fbf8 	bl	80186e2 <f_stat>
	if (FR_OK == res) {
 8015ef2:	b940      	cbnz	r0, 8015f06 <fatfs_rename+0x24>
		res = f_unlink(&to[1]);
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f002 fcb4 	bl	8018862 <f_unlink>
		if (FR_OK != res)
 8015efa:	b120      	cbz	r0, 8015f06 <fatfs_rename+0x24>
}
 8015efc:	b007      	add	sp, #28
 8015efe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	res = translate_error(res);
 8015f02:	f7f6 b8d1 	b.w	800c0a8 <translate_error>
	res = f_rename(&from[1], &to[1]);
 8015f06:	4621      	mov	r1, r4
 8015f08:	1c68      	adds	r0, r5, #1
 8015f0a:	f002 fd7c 	bl	8018a06 <f_rename>
 8015f0e:	e7f5      	b.n	8015efc <fatfs_rename+0x1a>

08015f10 <fatfs_unmount>:
{
 8015f10:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
 8015f12:	68c1      	ldr	r1, [r0, #12]
 8015f14:	2200      	movs	r2, #0
 8015f16:	3101      	adds	r1, #1
 8015f18:	4610      	mov	r0, r2
 8015f1a:	f7f9 f8c5 	bl	800f0a8 <f_mount>
}
 8015f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
 8015f22:	f7f6 b8c1 	b.w	800c0a8 <translate_error>

08015f26 <fatfs_sync>:
{
 8015f26:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
 8015f28:	6800      	ldr	r0, [r0, #0]
 8015f2a:	f002 fab8 	bl	801849e <f_sync>
}
 8015f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 8015f32:	f7f6 b8b9 	b.w	800c0a8 <translate_error>

08015f36 <fatfs_seek>:
	switch (whence) {
 8015f36:	2a01      	cmp	r2, #1
{
 8015f38:	b508      	push	{r3, lr}
	switch (whence) {
 8015f3a:	d00e      	beq.n	8015f5a <fatfs_seek+0x24>
 8015f3c:	2a02      	cmp	r2, #2
 8015f3e:	d010      	beq.n	8015f62 <fatfs_seek+0x2c>
 8015f40:	b992      	cbnz	r2, 8015f68 <fatfs_seek+0x32>
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
 8015f42:	2900      	cmp	r1, #0
 8015f44:	db10      	blt.n	8015f68 <fatfs_seek+0x32>
 8015f46:	6800      	ldr	r0, [r0, #0]
 8015f48:	68c3      	ldr	r3, [r0, #12]
 8015f4a:	428b      	cmp	r3, r1
 8015f4c:	d30c      	bcc.n	8015f68 <fatfs_seek+0x32>
	res = f_lseek(zfp->filep, pos);
 8015f4e:	f002 fae8 	bl	8018522 <f_lseek>
}
 8015f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
 8015f56:	f7f6 b8a7 	b.w	800c0a8 <translate_error>
		pos = f_tell((FIL *)zfp->filep) + offset;
 8015f5a:	6803      	ldr	r3, [r0, #0]
 8015f5c:	695b      	ldr	r3, [r3, #20]
		pos = f_size((FIL *)zfp->filep) + offset;
 8015f5e:	4419      	add	r1, r3
		break;
 8015f60:	e7ef      	b.n	8015f42 <fatfs_seek+0xc>
		pos = f_size((FIL *)zfp->filep) + offset;
 8015f62:	6803      	ldr	r3, [r0, #0]
 8015f64:	68db      	ldr	r3, [r3, #12]
 8015f66:	e7fa      	b.n	8015f5e <fatfs_seek+0x28>
}
 8015f68:	f06f 0015 	mvn.w	r0, #21
 8015f6c:	bd08      	pop	{r3, pc}

08015f6e <fatfs_truncate>:
{
 8015f6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f70:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
 8015f72:	6800      	ldr	r0, [r0, #0]
{
 8015f74:	460e      	mov	r6, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
 8015f76:	68c7      	ldr	r7, [r0, #12]
	res = f_lseek(zfp->filep, length);
 8015f78:	f002 fad3 	bl	8018522 <f_lseek>
	if (res != FR_OK) {
 8015f7c:	b120      	cbz	r0, 8015f88 <fatfs_truncate+0x1a>
}
 8015f7e:	b003      	add	sp, #12
 8015f80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	res = translate_error(res);
 8015f84:	f7f6 b890 	b.w	800c0a8 <translate_error>
	if (length < cur_length) {
 8015f88:	42b7      	cmp	r7, r6
		res = f_truncate(zfp->filep);
 8015f8a:	6820      	ldr	r0, [r4, #0]
	off_t cur_length = f_size((FIL *)zfp->filep);
 8015f8c:	463d      	mov	r5, r7
	if (length < cur_length) {
 8015f8e:	dd02      	ble.n	8015f96 <fatfs_truncate+0x28>
		res = f_truncate(zfp->filep);
 8015f90:	f002 fc2c 	bl	80187ec <f_truncate>
 8015f94:	e7f3      	b.n	8015f7e <fatfs_truncate+0x10>
		res = f_lseek(zfp->filep, cur_length);
 8015f96:	4639      	mov	r1, r7
		length = f_tell((FIL *)zfp->filep);
 8015f98:	6946      	ldr	r6, [r0, #20]
		res = f_lseek(zfp->filep, cur_length);
 8015f9a:	f002 fac2 	bl	8018522 <f_lseek>
		if (res != FR_OK) {
 8015f9e:	2800      	cmp	r0, #0
 8015fa0:	d1ed      	bne.n	8015f7e <fatfs_truncate+0x10>
		uint8_t c = 0U;
 8015fa2:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
 8015fa6:	42b5      	cmp	r5, r6
 8015fa8:	db01      	blt.n	8015fae <fatfs_truncate+0x40>
 8015faa:	2000      	movs	r0, #0
 8015fac:	e7e7      	b.n	8015f7e <fatfs_truncate+0x10>
			res = f_write(zfp->filep, &c, 1, &bw);
 8015fae:	6820      	ldr	r0, [r4, #0]
 8015fb0:	ab01      	add	r3, sp, #4
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	f10d 0103 	add.w	r1, sp, #3
 8015fb8:	f002 f9b1 	bl	801831e <f_write>
			if (res != FR_OK) {
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	d1de      	bne.n	8015f7e <fatfs_truncate+0x10>
		for (int i = cur_length; i < length; i++) {
 8015fc0:	3501      	adds	r5, #1
 8015fc2:	e7f0      	b.n	8015fa6 <fatfs_truncate+0x38>

08015fc4 <fatfs_write>:
{
 8015fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (zfp->flags & FS_O_APPEND) {
 8015fc6:	7a03      	ldrb	r3, [r0, #8]
 8015fc8:	069b      	lsls	r3, r3, #26
{
 8015fca:	4604      	mov	r4, r0
 8015fcc:	460d      	mov	r5, r1
 8015fce:	4616      	mov	r6, r2
	if (zfp->flags & FS_O_APPEND) {
 8015fd0:	d40b      	bmi.n	8015fea <fatfs_write+0x26>
		res = f_write(zfp->filep, ptr, size, &bw);
 8015fd2:	6820      	ldr	r0, [r4, #0]
 8015fd4:	ab01      	add	r3, sp, #4
 8015fd6:	4632      	mov	r2, r6
 8015fd8:	4629      	mov	r1, r5
 8015fda:	f002 f9a0 	bl	801831e <f_write>
	if (res != FR_OK) {
 8015fde:	b158      	cbz	r0, 8015ff8 <fatfs_write+0x34>
}
 8015fe0:	b002      	add	sp, #8
 8015fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = translate_error(res);
 8015fe6:	f7f6 b85f 	b.w	800c0a8 <translate_error>
	off_t pos = f_size((FIL *)zfp->filep);
 8015fea:	6800      	ldr	r0, [r0, #0]
		res = f_lseek(zfp->filep, pos);
 8015fec:	68c1      	ldr	r1, [r0, #12]
 8015fee:	f002 fa98 	bl	8018522 <f_lseek>
	if (res == FR_OK) {
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	d0ed      	beq.n	8015fd2 <fatfs_write+0xe>
 8015ff6:	e7f3      	b.n	8015fe0 <fatfs_write+0x1c>
}
 8015ff8:	9801      	ldr	r0, [sp, #4]
 8015ffa:	b002      	add	sp, #8
 8015ffc:	bd70      	pop	{r4, r5, r6, pc}

08015ffe <fatfs_read>:
{
 8015ffe:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
 8016000:	6800      	ldr	r0, [r0, #0]
 8016002:	ab01      	add	r3, sp, #4
 8016004:	f002 f8f5 	bl	80181f2 <f_read>
	if (res != FR_OK) {
 8016008:	b120      	cbz	r0, 8016014 <fatfs_read+0x16>
}
 801600a:	b003      	add	sp, #12
 801600c:	f85d eb04 	ldr.w	lr, [sp], #4
		return translate_error(res);
 8016010:	f7f6 b84a 	b.w	800c0a8 <translate_error>
}
 8016014:	9801      	ldr	r0, [sp, #4]
 8016016:	b003      	add	sp, #12
 8016018:	f85d fb04 	ldr.w	pc, [sp], #4

0801601c <fatfs_stat>:
{
 801601c:	b530      	push	{r4, r5, lr}
 801601e:	4608      	mov	r0, r1
 8016020:	b087      	sub	sp, #28
	res = f_stat(&path[1], &fno);
 8016022:	4669      	mov	r1, sp
 8016024:	3001      	adds	r0, #1
{
 8016026:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
 8016028:	f002 fb5b 	bl	80186e2 <f_stat>
	if (res == FR_OK) {
 801602c:	4604      	mov	r4, r0
 801602e:	b960      	cbnz	r0, 801604a <fatfs_stat+0x2e>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 8016030:	f89d 3008 	ldrb.w	r3, [sp, #8]
		entry->type = ((fno.fattrib & AM_DIR) ?
 8016034:	4628      	mov	r0, r5
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 8016036:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
 801603a:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 801603e:	f10d 0109 	add.w	r1, sp, #9
 8016042:	f003 fa54 	bl	80194ee <strcpy>
		entry->size = fno.fsize;
 8016046:	9b00      	ldr	r3, [sp, #0]
 8016048:	612b      	str	r3, [r5, #16]
	return translate_error(res);
 801604a:	4620      	mov	r0, r4
}
 801604c:	b007      	add	sp, #28
 801604e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 8016052:	f7f6 b829 	b.w	800c0a8 <translate_error>

08016056 <fatfs_readdir>:
{
 8016056:	b530      	push	{r4, r5, lr}
 8016058:	b087      	sub	sp, #28
	res = f_readdir(zdp->dirp, &fno);
 801605a:	6800      	ldr	r0, [r0, #0]
{
 801605c:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
 801605e:	4669      	mov	r1, sp
 8016060:	f002 fb1e 	bl	80186a0 <f_readdir>
	if (res == FR_OK) {
 8016064:	4605      	mov	r5, r0
 8016066:	b968      	cbnz	r0, 8016084 <fatfs_readdir+0x2e>
 8016068:	f10d 0109 	add.w	r1, sp, #9
 801606c:	1c60      	adds	r0, r4, #1
 801606e:	f003 fa3e 	bl	80194ee <strcpy>
		if (entry->name[0] != 0) {
 8016072:	7863      	ldrb	r3, [r4, #1]
 8016074:	b133      	cbz	r3, 8016084 <fatfs_readdir+0x2e>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 8016076:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801607a:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
 801607e:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
 8016080:	9b00      	ldr	r3, [sp, #0]
 8016082:	6123      	str	r3, [r4, #16]
	return translate_error(res);
 8016084:	4628      	mov	r0, r5
}
 8016086:	b007      	add	sp, #28
 8016088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 801608c:	f7f6 b80c 	b.w	800c0a8 <translate_error>

08016090 <fatfs_statvfs>:
{
 8016090:	b513      	push	{r0, r1, r4, lr}
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 8016092:	68c0      	ldr	r0, [r0, #12]
{
 8016094:	4614      	mov	r4, r2
	DWORD f_bfree = 0;
 8016096:	2300      	movs	r3, #0
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 8016098:	466a      	mov	r2, sp
 801609a:	a901      	add	r1, sp, #4
 801609c:	3001      	adds	r0, #1
	DWORD f_bfree = 0;
 801609e:	9301      	str	r3, [sp, #4]
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 80160a0:	f002 fb41 	bl	8018726 <f_getfree>
	if (res != FR_OK) {
 80160a4:	b968      	cbnz	r0, 80160c2 <fatfs_statvfs+0x32>
	stat->f_bfree = f_bfree;
 80160a6:	9b01      	ldr	r3, [sp, #4]
	stat->f_frsize = fs->csize * stat->f_bsize;
 80160a8:	9a00      	ldr	r2, [sp, #0]
	stat->f_bfree = f_bfree;
 80160aa:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
 80160ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80160b0:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
 80160b2:	8953      	ldrh	r3, [r2, #10]
 80160b4:	025b      	lsls	r3, r3, #9
 80160b6:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
 80160b8:	6953      	ldr	r3, [r2, #20]
 80160ba:	3b02      	subs	r3, #2
 80160bc:	60a3      	str	r3, [r4, #8]
}
 80160be:	b002      	add	sp, #8
 80160c0:	bd10      	pop	{r4, pc}
		return -EIO;
 80160c2:	f06f 0004 	mvn.w	r0, #4
 80160c6:	e7fa      	b.n	80160be <fatfs_statvfs+0x2e>

080160c8 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80160c8:	2200      	movs	r2, #0
{
 80160ca:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80160cc:	4611      	mov	r1, r2
 80160ce:	2006      	movs	r0, #6
 80160d0:	f7ee fde0 	bl	8004c94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80160d4:	2200      	movs	r2, #0
 80160d6:	4611      	mov	r1, r2
 80160d8:	2007      	movs	r0, #7
 80160da:	f7ee fddb 	bl	8004c94 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80160de:	2200      	movs	r2, #0
 80160e0:	4611      	mov	r1, r2
 80160e2:	2008      	movs	r0, #8
 80160e4:	f7ee fdd6 	bl	8004c94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80160e8:	2200      	movs	r2, #0
 80160ea:	4611      	mov	r1, r2
 80160ec:	2009      	movs	r0, #9
 80160ee:	f7ee fdd1 	bl	8004c94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80160f2:	2200      	movs	r2, #0
 80160f4:	4611      	mov	r1, r2
 80160f6:	200a      	movs	r0, #10
 80160f8:	f7ee fdcc 	bl	8004c94 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80160fc:	2200      	movs	r2, #0
 80160fe:	4611      	mov	r1, r2
 8016100:	2016      	movs	r0, #22
 8016102:	f7ee fdc7 	bl	8004c94 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8016106:	2200      	movs	r2, #0
 8016108:	4611      	mov	r1, r2
 801610a:	2029      	movs	r0, #41	; 0x29
 801610c:	f7ee fdc2 	bl	8004c94 <z_arm_irq_priority_set>
}
 8016110:	2000      	movs	r0, #0
 8016112:	bd08      	pop	{r3, pc}

08016114 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8016114:	6902      	ldr	r2, [r0, #16]
 8016116:	2110      	movs	r1, #16
 8016118:	200a      	movs	r0, #10
 801611a:	f7f6 b889 	b.w	800c230 <__stm32_exti_isr.isra.0>

0801611e <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 801611e:	6902      	ldr	r2, [r0, #16]
 8016120:	210a      	movs	r1, #10
 8016122:	2005      	movs	r0, #5
 8016124:	f7f6 b884 	b.w	800c230 <__stm32_exti_isr.isra.0>

08016128 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8016128:	6902      	ldr	r2, [r0, #16]
 801612a:	2105      	movs	r1, #5
 801612c:	2004      	movs	r0, #4
 801612e:	f7f6 b87f 	b.w	800c230 <__stm32_exti_isr.isra.0>

08016132 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8016132:	6902      	ldr	r2, [r0, #16]
 8016134:	2104      	movs	r1, #4
 8016136:	2003      	movs	r0, #3
 8016138:	f7f6 b87a 	b.w	800c230 <__stm32_exti_isr.isra.0>

0801613c <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 801613c:	6902      	ldr	r2, [r0, #16]
 801613e:	2103      	movs	r1, #3
 8016140:	2002      	movs	r0, #2
 8016142:	f7f6 b875 	b.w	800c230 <__stm32_exti_isr.isra.0>

08016146 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8016146:	6902      	ldr	r2, [r0, #16]
 8016148:	2102      	movs	r1, #2
 801614a:	2001      	movs	r0, #1
 801614c:	f7f6 b870 	b.w	800c230 <__stm32_exti_isr.isra.0>

08016150 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8016150:	6902      	ldr	r2, [r0, #16]
 8016152:	2101      	movs	r1, #1
 8016154:	2000      	movs	r0, #0
 8016156:	f7f6 b86b 	b.w	800c230 <__stm32_exti_isr.isra.0>

0801615a <sys_get_be32>:
	return ((uint16_t)src[0] << 8) | src[1];
 801615a:	6800      	ldr	r0, [r0, #0]
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
}
 801615c:	ba00      	rev	r0, r0
 801615e:	4770      	bx	lr

08016160 <sdhc_is_retryable>:
	switch (err) {
 8016160:	f110 0f74 	cmn.w	r0, #116	; 0x74
 8016164:	d007      	beq.n	8016176 <sdhc_is_retryable+0x16>
 8016166:	1d43      	adds	r3, r0, #5
 8016168:	d005      	beq.n	8016176 <sdhc_is_retryable+0x16>
 801616a:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 801616e:	bf14      	ite	ne
 8016170:	2000      	movne	r0, #0
 8016172:	2001      	moveq	r0, #1
 8016174:	4770      	bx	lr
 8016176:	2001      	movs	r0, #1
}
 8016178:	4770      	bx	lr

0801617a <disk_spi_sdhc_access_status>:
	struct sdhc_spi_data *data = dev->data;
 801617a:	6903      	ldr	r3, [r0, #16]
	return data->status;
 801617c:	691b      	ldr	r3, [r3, #16]
}
 801617e:	7c18      	ldrb	r0, [r3, #16]
 8016180:	4770      	bx	lr

08016182 <sdhc_map_flags>:
{
 8016182:	4603      	mov	r3, r0
	if (flags < 0) {
 8016184:	1e08      	subs	r0, r1, #0
 8016186:	da01      	bge.n	801618c <sdhc_map_flags+0xa>
 8016188:	4770      	bx	lr
	for (; map->mask != 0U; map++) {
 801618a:	3302      	adds	r3, #2
 801618c:	781a      	ldrb	r2, [r3, #0]
 801618e:	b10a      	cbz	r2, 8016194 <sdhc_map_flags+0x12>
		if ((flags & map->mask) == map->mask) {
 8016190:	4382      	bics	r2, r0
 8016192:	d1fa      	bne.n	801618a <sdhc_map_flags+0x8>
	return -map->err;
 8016194:	7858      	ldrb	r0, [r3, #1]
 8016196:	4240      	negs	r0, r0
}
 8016198:	4770      	bx	lr

0801619a <spi_transceive.constprop.0>:
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
 801619a:	b410      	push	{r4}
 801619c:	6884      	ldr	r4, [r0, #8]
 801619e:	6824      	ldr	r4, [r4, #0]
 80161a0:	46a4      	mov	ip, r4
}
 80161a2:	bc10      	pop	{r4}
 80161a4:	4760      	bx	ip

080161a6 <sdhc_spi_tx>:
{
 80161a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct spi_buf_set tx = {
 80161a8:	2301      	movs	r3, #1
	struct spi_buf spi_bufs[] = {
 80161aa:	e9cd 1200 	strd	r1, r2, [sp]
	const struct spi_buf_set tx = {
 80161ae:	9303      	str	r3, [sp, #12]
	return spi_transceive(dev, config, tx_bufs, NULL);
 80161b0:	e9d0 0100 	ldrd	r0, r1, [r0]
 80161b4:	2300      	movs	r3, #0
 80161b6:	aa02      	add	r2, sp, #8
 80161b8:	f8cd d008 	str.w	sp, [sp, #8]
 80161bc:	f7ff ffed 	bl	801619a <spi_transceive.constprop.0>
}
 80161c0:	b005      	add	sp, #20
 80161c2:	f85d fb04 	ldr.w	pc, [sp], #4

080161c6 <sdhc_spi_tx_cmd>:
{
 80161c6:	b513      	push	{r0, r1, r4, lr}
	buf[0] = SDHC_TX | (cmd & ~SDHC_START);
 80161c8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80161cc:	f88d 1000 	strb.w	r1, [sp]
	sys_put_be16(val >> 16, dst);
 80161d0:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
 80161d2:	0e11      	lsrs	r1, r2, #24
{
 80161d4:	4604      	mov	r4, r0
 80161d6:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[1] = val;
 80161da:	f88d 3002 	strb.w	r3, [sp, #2]
 80161de:	f88d 2004 	strb.w	r2, [sp, #4]
	dst[0] = val >> 8;
 80161e2:	f3c2 2307 	ubfx	r3, r2, #8, #8
	buf[SDHC_CMD_BODY_SIZE] = crc7_be(0, buf, SDHC_CMD_BODY_SIZE) | 0x01;
 80161e6:	4669      	mov	r1, sp
 80161e8:	2205      	movs	r2, #5
 80161ea:	2000      	movs	r0, #0
 80161ec:	f88d 3003 	strb.w	r3, [sp, #3]
 80161f0:	f7fd fc5c 	bl	8013aac <crc7_be>
 80161f4:	f040 0001 	orr.w	r0, r0, #1
 80161f8:	f88d 0005 	strb.w	r0, [sp, #5]
	return sdhc_spi_tx(data, buf, sizeof(buf));
 80161fc:	2206      	movs	r2, #6
 80161fe:	4669      	mov	r1, sp
 8016200:	4620      	mov	r0, r4
 8016202:	f7ff ffd0 	bl	80161a6 <sdhc_spi_tx>
}
 8016206:	b002      	add	sp, #8
 8016208:	bd10      	pop	{r4, pc}

0801620a <sdhc_spi_rx_u8>:
{
 801620a:	b507      	push	{r0, r1, r2, lr}
	int err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 801620c:	2201      	movs	r2, #1
 801620e:	a901      	add	r1, sp, #4
 8016210:	f7f6 f8c8 	bl	800c3a4 <sdhc_spi_rx_bytes>
	if (err != 0) {
 8016214:	b908      	cbnz	r0, 801621a <sdhc_spi_rx_u8+0x10>
	return buf[0];
 8016216:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 801621a:	b003      	add	sp, #12
 801621c:	f85d fb04 	ldr.w	pc, [sp], #4

08016220 <spi_release.isra.0>:
	return api->release(dev, config);
 8016220:	6883      	ldr	r3, [r0, #8]
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	4718      	bx	r3

08016226 <k_msleep.isra.0>:
 8016226:	210a      	movs	r1, #10
 8016228:	fb80 0101 	smull	r0, r1, r0, r1
 801622c:	f7fa bc04 	b.w	8010a38 <z_impl_k_sleep>

08016230 <sdhc_retry_ok>:

/* Called at the end of a retry loop.  Returns if the minimum try
 * count and timeout has passed.  Delays/yields on retry.
 */
static inline bool sdhc_retry_ok(struct sdhc_retry *retry)
{
 8016230:	b538      	push	{r3, r4, r5, lr}
	int32_t remain = retry->end - k_uptime_get_32();
 8016232:	6805      	ldr	r5, [r0, #0]
{
 8016234:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 8016236:	f002 ff9d 	bl	8019174 <z_impl_k_uptime_ticks>

	if (retry->tries < SDHC_MIN_TRIES) {
 801623a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801623e:	2b13      	cmp	r3, #19
 8016240:	dc07      	bgt.n	8016252 <sdhc_retry_ok+0x22>
		retry->tries++;
		if (retry->sleep != 0U) {
 8016242:	88e0      	ldrh	r0, [r4, #6]
		retry->tries++;
 8016244:	3301      	adds	r3, #1
 8016246:	80a3      	strh	r3, [r4, #4]
		if (retry->sleep != 0U) {
 8016248:	b108      	cbz	r0, 801624e <sdhc_retry_ok+0x1e>
		return true;
	}

	if (remain >= 0) {
		if (retry->sleep > 0) {
			k_msleep(retry->sleep);
 801624a:	f7ff ffec 	bl	8016226 <k_msleep.isra.0>
		return true;
 801624e:	2001      	movs	r0, #1

		return true;
	}

	return false;
}
 8016250:	bd38      	pop	{r3, r4, r5, pc}
			return t / ((uint64_t)from_hz / to_hz);
 8016252:	220a      	movs	r2, #10
 8016254:	2300      	movs	r3, #0
 8016256:	f7ea feb7 	bl	8000fc8 <__aeabi_uldivmod>
	int32_t remain = retry->end - k_uptime_get_32();
 801625a:	1a2d      	subs	r5, r5, r0
	if (remain >= 0) {
 801625c:	2d00      	cmp	r5, #0
 801625e:	db05      	blt.n	801626c <sdhc_retry_ok+0x3c>
 8016260:	88e0      	ldrh	r0, [r4, #6]
		if (retry->sleep > 0) {
 8016262:	2800      	cmp	r0, #0
 8016264:	d1f1      	bne.n	801624a <sdhc_retry_ok+0x1a>
	z_impl_k_yield();
 8016266:	f7fa fb5f 	bl	8010928 <z_impl_k_yield>
 801626a:	e7f0      	b.n	801624e <sdhc_retry_ok+0x1e>
	return false;
 801626c:	2000      	movs	r0, #0
 801626e:	e7ef      	b.n	8016250 <sdhc_retry_ok+0x20>

08016270 <sdhc_retry_init>:
{
 8016270:	b570      	push	{r4, r5, r6, lr}
 8016272:	4604      	mov	r4, r0
 8016274:	460d      	mov	r5, r1
 8016276:	4616      	mov	r6, r2
	return z_impl_k_uptime_ticks();
 8016278:	f002 ff7c 	bl	8019174 <z_impl_k_uptime_ticks>
 801627c:	2300      	movs	r3, #0
 801627e:	220a      	movs	r2, #10
 8016280:	f7ea fea2 	bl	8000fc8 <__aeabi_uldivmod>
	retry->tries = 0;
 8016284:	2300      	movs	r3, #0
	retry->end = k_uptime_get_32() + timeout;
 8016286:	4405      	add	r5, r0
 8016288:	6025      	str	r5, [r4, #0]
	retry->tries = 0;
 801628a:	80a3      	strh	r3, [r4, #4]
	retry->sleep = sleep;
 801628c:	80e6      	strh	r6, [r4, #6]
}
 801628e:	bd70      	pop	{r4, r5, r6, pc}

08016290 <sdhc_spi_skip_until_start>:
{
 8016290:	b513      	push	{r0, r1, r4, lr}
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 8016292:	2200      	movs	r2, #0
{
 8016294:	4604      	mov	r4, r0
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 8016296:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801629a:	4668      	mov	r0, sp
 801629c:	f7ff ffe8 	bl	8016270 <sdhc_retry_init>
		status = sdhc_spi_rx_u8(data);
 80162a0:	4620      	mov	r0, r4
 80162a2:	f7ff ffb2 	bl	801620a <sdhc_spi_rx_u8>
		if (status < 0) {
 80162a6:	2800      	cmp	r0, #0
 80162a8:	db08      	blt.n	80162bc <sdhc_spi_skip_until_start+0x2c>
		if ((status & SDHC_START) == 0) {
 80162aa:	0603      	lsls	r3, r0, #24
 80162ac:	d506      	bpl.n	80162bc <sdhc_spi_skip_until_start+0x2c>
	} while (sdhc_retry_ok(&retry));
 80162ae:	4668      	mov	r0, sp
 80162b0:	f7ff ffbe 	bl	8016230 <sdhc_retry_ok>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	d1f3      	bne.n	80162a0 <sdhc_spi_skip_until_start+0x10>
	return -ETIMEDOUT;
 80162b8:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
 80162bc:	b002      	add	sp, #8
 80162be:	bd10      	pop	{r4, pc}

080162c0 <sdhc_spi_cmd_r37_raw>:
{
 80162c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162c2:	4605      	mov	r5, r0
 80162c4:	461f      	mov	r7, r3
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 80162c6:	f7ff ff7e 	bl	80161c6 <sdhc_spi_tx_cmd>
	if (err != 0) {
 80162ca:	4604      	mov	r4, r0
 80162cc:	b9a0      	cbnz	r0, 80162f8 <sdhc_spi_cmd_r37_raw+0x38>
	status = sdhc_spi_skip_until_start(data);
 80162ce:	4628      	mov	r0, r5
 80162d0:	f7ff ffde 	bl	8016290 <sdhc_spi_skip_until_start>
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 80162d4:	2204      	movs	r2, #4
	status = sdhc_spi_skip_until_start(data);
 80162d6:	4604      	mov	r4, r0
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 80162d8:	eb0d 0102 	add.w	r1, sp, r2
 80162dc:	4628      	mov	r0, r5
 80162de:	f7f6 f861 	bl	800c3a4 <sdhc_spi_rx_bytes>
 80162e2:	4606      	mov	r6, r0
	*reply = sys_get_be32(buf);
 80162e4:	a801      	add	r0, sp, #4
 80162e6:	f7ff ff38 	bl	801615a <sys_get_be32>
 80162ea:	6038      	str	r0, [r7, #0]
	sdhc_spi_rx_u8(data);
 80162ec:	4628      	mov	r0, r5
 80162ee:	f7ff ff8c 	bl	801620a <sdhc_spi_rx_u8>
	if (err != 0) {
 80162f2:	2e00      	cmp	r6, #0
 80162f4:	bf18      	it	ne
 80162f6:	4634      	movne	r4, r6
}
 80162f8:	4620      	mov	r0, r4
 80162fa:	b003      	add	sp, #12
 80162fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080162fe <sdhc_spi_skip_until_ready>:
{
 80162fe:	b513      	push	{r0, r1, r4, lr}
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 8016300:	2200      	movs	r2, #0
{
 8016302:	4604      	mov	r4, r0
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 8016304:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8016308:	4668      	mov	r0, sp
 801630a:	f7ff ffb1 	bl	8016270 <sdhc_retry_init>
		status = sdhc_spi_rx_u8(data);
 801630e:	4620      	mov	r0, r4
 8016310:	f7ff ff7b 	bl	801620a <sdhc_spi_rx_u8>
		if (status < 0) {
 8016314:	2800      	cmp	r0, #0
 8016316:	db07      	blt.n	8016328 <sdhc_spi_skip_until_ready+0x2a>
		if (status == 0) {
 8016318:	d108      	bne.n	801632c <sdhc_spi_skip_until_ready+0x2e>
	} while (sdhc_retry_ok(&retry));
 801631a:	4668      	mov	r0, sp
 801631c:	f7ff ff88 	bl	8016230 <sdhc_retry_ok>
 8016320:	2800      	cmp	r0, #0
 8016322:	d1f4      	bne.n	801630e <sdhc_spi_skip_until_ready+0x10>
	return -ETIMEDOUT;
 8016324:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
 8016328:	b002      	add	sp, #8
 801632a:	bd10      	pop	{r4, pc}
		if (status == 0xFF) {
 801632c:	28ff      	cmp	r0, #255	; 0xff
 801632e:	d101      	bne.n	8016334 <sdhc_spi_skip_until_ready+0x36>
			return 0;
 8016330:	2000      	movs	r0, #0
 8016332:	e7f9      	b.n	8016328 <sdhc_spi_skip_until_ready+0x2a>
		status = sdhc_spi_rx_u8(data);
 8016334:	4620      	mov	r0, r4
 8016336:	f7ff ff68 	bl	801620a <sdhc_spi_rx_u8>
		if (status < 0) {
 801633a:	2800      	cmp	r0, #0
 801633c:	dbf4      	blt.n	8016328 <sdhc_spi_skip_until_ready+0x2a>
		if (status == 0xFF) {
 801633e:	28ff      	cmp	r0, #255	; 0xff
 8016340:	d0f6      	beq.n	8016330 <sdhc_spi_skip_until_ready+0x32>
		return -EPROTO;
 8016342:	f06f 0046 	mvn.w	r0, #70	; 0x46
 8016346:	e7ef      	b.n	8016328 <sdhc_spi_skip_until_ready+0x2a>

08016348 <sdhc_spi_recover.isra.0>:
	return sdhc_spi_cmd_r1(data, SDHC_SEND_STATUS, 0);
 8016348:	2200      	movs	r2, #0
 801634a:	210d      	movs	r1, #13
 801634c:	f7f6 b8e2 	b.w	800c514 <sdhc_spi_cmd_r1>

08016350 <disk_spi_sdhc_access_read>:
	struct sdhc_spi_data *data = dev->data;
 8016350:	6900      	ldr	r0, [r0, #16]
{
 8016352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sdhc_spi_data *data = dev->data;
 8016356:	6905      	ldr	r5, [r0, #16]
	err = sdhc_spi_read(data, buf, sector, count);
 8016358:	4628      	mov	r0, r5
{
 801635a:	460e      	mov	r6, r1
 801635c:	4617      	mov	r7, r2
 801635e:	4698      	mov	r8, r3
	err = sdhc_spi_read(data, buf, sector, count);
 8016360:	f7f6 fa3a 	bl	800c7d8 <sdhc_spi_read>
	if (err != 0 && sdhc_is_retryable(err)) {
 8016364:	4604      	mov	r4, r0
 8016366:	b168      	cbz	r0, 8016384 <disk_spi_sdhc_access_read+0x34>
 8016368:	f7ff fefa 	bl	8016160 <sdhc_is_retryable>
 801636c:	b150      	cbz	r0, 8016384 <disk_spi_sdhc_access_read+0x34>
		sdhc_spi_recover(data);
 801636e:	4628      	mov	r0, r5
 8016370:	f7ff ffea 	bl	8016348 <sdhc_spi_recover.isra.0>
		err = sdhc_spi_read(data, buf, sector, count);
 8016374:	4643      	mov	r3, r8
 8016376:	463a      	mov	r2, r7
 8016378:	4631      	mov	r1, r6
 801637a:	4628      	mov	r0, r5
}
 801637c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		err = sdhc_spi_read(data, buf, sector, count);
 8016380:	f7f6 ba2a 	b.w	800c7d8 <sdhc_spi_read>
}
 8016384:	4620      	mov	r0, r4
 8016386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801638a <disk_spi_sdhc_access_write>:
	struct sdhc_spi_data *data = dev->data;
 801638a:	6900      	ldr	r0, [r0, #16]
{
 801638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sdhc_spi_data *data = dev->data;
 8016390:	6905      	ldr	r5, [r0, #16]
	if (count > 2) {
 8016392:	2b02      	cmp	r3, #2
{
 8016394:	460f      	mov	r7, r1
 8016396:	4690      	mov	r8, r2
 8016398:	461e      	mov	r6, r3
		err = sdhc_spi_write_multi(data, buf, sector, count);
 801639a:	4628      	mov	r0, r5
	if (count > 2) {
 801639c:	d916      	bls.n	80163cc <disk_spi_sdhc_access_write+0x42>
		err = sdhc_spi_write_multi(data, buf, sector, count);
 801639e:	f7f6 fad9 	bl	800c954 <sdhc_spi_write_multi>
		if (err != 0 && sdhc_is_retryable(err)) {
 80163a2:	4604      	mov	r4, r0
 80163a4:	b918      	cbnz	r0, 80163ae <disk_spi_sdhc_access_write+0x24>
{
 80163a6:	2400      	movs	r4, #0
}
 80163a8:	4620      	mov	r0, r4
 80163aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (err != 0 && sdhc_is_retryable(err)) {
 80163ae:	f7ff fed7 	bl	8016160 <sdhc_is_retryable>
 80163b2:	2800      	cmp	r0, #0
 80163b4:	d0f8      	beq.n	80163a8 <disk_spi_sdhc_access_write+0x1e>
			sdhc_spi_recover(data);
 80163b6:	4628      	mov	r0, r5
 80163b8:	f7ff ffc6 	bl	8016348 <sdhc_spi_recover.isra.0>
			err = sdhc_spi_write_multi(data, buf, sector, count);
 80163bc:	4633      	mov	r3, r6
 80163be:	4642      	mov	r2, r8
 80163c0:	4639      	mov	r1, r7
 80163c2:	4628      	mov	r0, r5
}
 80163c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = sdhc_spi_write_multi(data, buf, sector, count);
 80163c8:	f7f6 bac4 	b.w	800c954 <sdhc_spi_write_multi>
		err = sdhc_spi_write(data, buf, sector, count);
 80163cc:	f7f6 fa3c 	bl	800c848 <sdhc_spi_write>
		if (err != 0 && sdhc_is_retryable(err)) {
 80163d0:	4604      	mov	r4, r0
 80163d2:	2800      	cmp	r0, #0
 80163d4:	d0e7      	beq.n	80163a6 <disk_spi_sdhc_access_write+0x1c>
 80163d6:	f7ff fec3 	bl	8016160 <sdhc_is_retryable>
 80163da:	2800      	cmp	r0, #0
 80163dc:	d0e4      	beq.n	80163a8 <disk_spi_sdhc_access_write+0x1e>
			sdhc_spi_recover(data);
 80163de:	4628      	mov	r0, r5
 80163e0:	f7ff ffb2 	bl	8016348 <sdhc_spi_recover.isra.0>
			err = sdhc_spi_write(data, buf, sector, count);
 80163e4:	4633      	mov	r3, r6
 80163e6:	4642      	mov	r2, r8
 80163e8:	4639      	mov	r1, r7
 80163ea:	4628      	mov	r0, r5
}
 80163ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = sdhc_spi_write(data, buf, sector, count);
 80163f0:	f7f6 ba2a 	b.w	800c848 <sdhc_spi_write>

080163f4 <stm32_clock_control_on>:
	switch (pclken->bus) {
 80163f4:	680b      	ldr	r3, [r1, #0]
{
 80163f6:	b088      	sub	sp, #32
	switch (pclken->bus) {
 80163f8:	2b0a      	cmp	r3, #10
 80163fa:	d856      	bhi.n	80164aa <stm32_clock_control_on+0xb6>
 80163fc:	e8df f003 	tbb	[pc, r3]
 8016400:	3f291306 	.word	0x3f291306
 8016404:	551e5534 	.word	0x551e5534
 8016408:	5555      	.short	0x5555
 801640a:	4a          	.byte	0x4a
 801640b:	00          	.byte	0x00
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 801640c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8016410:	684b      	ldr	r3, [r1, #4]
 8016412:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8016414:	4319      	orrs	r1, r3
 8016416:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8016418:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801641a:	4013      	ands	r3, r2
 801641c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 801641e:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8016420:	2000      	movs	r0, #0
}
 8016422:	b008      	add	sp, #32
 8016424:	4770      	bx	lr
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8016426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 801642a:	684b      	ldr	r3, [r1, #4]
 801642c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801642e:	4319      	orrs	r1, r3
 8016430:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8016432:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8016434:	4013      	ands	r3, r2
 8016436:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8016438:	9b02      	ldr	r3, [sp, #8]
 801643a:	e7f1      	b.n	8016420 <stm32_clock_control_on+0x2c>
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 801643c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8016440:	684b      	ldr	r3, [r1, #4]
 8016442:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8016444:	4319      	orrs	r1, r3
 8016446:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8016448:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801644a:	4013      	ands	r3, r2
 801644c:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 801644e:	9b03      	ldr	r3, [sp, #12]
 8016450:	e7e6      	b.n	8016420 <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8016452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8016456:	684b      	ldr	r3, [r1, #4]
 8016458:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801645a:	4319      	orrs	r1, r3
 801645c:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801645e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8016460:	4013      	ands	r3, r2
 8016462:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8016464:	9b04      	ldr	r3, [sp, #16]
 8016466:	e7db      	b.n	8016420 <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8016468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP2_EnableClock(pclken->enr);
 801646c:	684b      	ldr	r3, [r1, #4]
 801646e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8016470:	4319      	orrs	r1, r3
 8016472:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8016474:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8016476:	4013      	ands	r3, r2
 8016478:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 801647a:	9b05      	ldr	r3, [sp, #20]
 801647c:	e7d0      	b.n	8016420 <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 801647e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8016482:	684b      	ldr	r3, [r1, #4]
 8016484:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8016486:	4319      	orrs	r1, r3
 8016488:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801648a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801648c:	4013      	ands	r3, r2
 801648e:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8016490:	9b06      	ldr	r3, [sp, #24]
 8016492:	e7c5      	b.n	8016420 <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8016494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB3_GRP1_EnableClock(pclken->enr);
 8016498:	684b      	ldr	r3, [r1, #4]
 801649a:	6e51      	ldr	r1, [r2, #100]	; 0x64
 801649c:	4319      	orrs	r1, r3
 801649e:	6651      	str	r1, [r2, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80164a0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80164a2:	4013      	ands	r3, r2
 80164a4:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 80164a6:	9b07      	ldr	r3, [sp, #28]
 80164a8:	e7ba      	b.n	8016420 <stm32_clock_control_on+0x2c>
	switch (pclken->bus) {
 80164aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80164ae:	e7b8      	b.n	8016422 <stm32_clock_control_on+0x2e>

080164b0 <stm32_clock_control_off>:
	switch (pclken->bus) {
 80164b0:	680b      	ldr	r3, [r1, #0]
 80164b2:	2b0a      	cmp	r3, #10
 80164b4:	d840      	bhi.n	8016538 <stm32_clock_control_off+0x88>
 80164b6:	e8df f003 	tbb	[pc, r3]
 80164ba:	0f06      	.short	0x0f06
 80164bc:	3f272f1f 	.word	0x3f272f1f
 80164c0:	3f3f3f17 	.word	0x3f3f3f17
 80164c4:	37          	.byte	0x37
 80164c5:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80164c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80164ca:	6849      	ldr	r1, [r1, #4]
 80164cc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80164ce:	ea23 0301 	bic.w	r3, r3, r1
 80164d2:	6493      	str	r3, [r2, #72]	; 0x48
	return 0;
 80164d4:	2000      	movs	r0, #0
}
 80164d6:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80164d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80164dc:	6849      	ldr	r1, [r1, #4]
 80164de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80164e0:	ea23 0301 	bic.w	r3, r3, r1
 80164e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80164e6:	e7f5      	b.n	80164d4 <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80164e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80164ec:	6849      	ldr	r1, [r1, #4]
 80164ee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80164f0:	ea23 0301 	bic.w	r3, r3, r1
 80164f4:	6513      	str	r3, [r2, #80]	; 0x50
 80164f6:	e7ed      	b.n	80164d4 <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80164f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80164fc:	6849      	ldr	r1, [r1, #4]
 80164fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8016500:	ea23 0301 	bic.w	r3, r3, r1
 8016504:	6593      	str	r3, [r2, #88]	; 0x58
 8016506:	e7e5      	b.n	80164d4 <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8016508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801650c:	6849      	ldr	r1, [r1, #4]
 801650e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8016510:	ea23 0301 	bic.w	r3, r3, r1
 8016514:	65d3      	str	r3, [r2, #92]	; 0x5c
 8016516:	e7dd      	b.n	80164d4 <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8016518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801651c:	6849      	ldr	r1, [r1, #4]
 801651e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8016520:	ea23 0301 	bic.w	r3, r3, r1
 8016524:	6613      	str	r3, [r2, #96]	; 0x60
 8016526:	e7d5      	b.n	80164d4 <stm32_clock_control_off+0x24>
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB3ENR, Periphs);
 8016528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801652c:	6849      	ldr	r1, [r1, #4]
 801652e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8016530:	ea23 0301 	bic.w	r3, r3, r1
 8016534:	6653      	str	r3, [r2, #100]	; 0x64
 8016536:	e7cd      	b.n	80164d4 <stm32_clock_control_off+0x24>
	switch (pclken->bus) {
 8016538:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801653c:	4770      	bx	lr

0801653e <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 801653e:	b510      	push	{r4, lr}
 8016540:	b088      	sub	sp, #32
	clk_init->CPU2CLKDivider = ahb_prescaler(STM32_CPU2_PRESCALER);
 8016542:	2300      	movs	r3, #0
	clk_init->CPU1CLKDivider = ahb_prescaler(STM32_CPU1_PRESCALER);
 8016544:	e9cd 3303 	strd	r3, r3, [sp, #12]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8016548:	e9cd 3305 	strd	r3, r3, [sp, #20]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 801654c:	9307      	str	r3, [sp, #28]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 801654e:	f000 f841 	bl	80165d4 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8016552:	4668      	mov	r0, sp
 8016554:	f000 f836 	bl	80165c4 <config_pll_init>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8016558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	0551      	lsls	r1, r2, #21
 8016560:	d406      	bmi.n	8016570 <stm32_clock_control_init+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8016562:	681a      	ldr	r2, [r3, #0]
 8016564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016568:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801656a:	681a      	ldr	r2, [r3, #0]
 801656c:	0552      	lsls	r2, r2, #21
 801656e:	d5fc      	bpl.n	801656a <stm32_clock_control_init+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016570:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8016574:	68a3      	ldr	r3, [r4, #8]
 8016576:	f023 0303 	bic.w	r3, r3, #3
 801657a:	f043 0301 	orr.w	r3, r3, #1
 801657e:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016580:	68a3      	ldr	r3, [r4, #8]
 8016582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016586:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016588:	68a3      	ldr	r3, [r4, #8]
 801658a:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 801658e:	2b04      	cmp	r3, #4
 8016590:	d1fa      	bne.n	8016588 <stm32_clock_control_init+0x4a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8016592:	6823      	ldr	r3, [r4, #0]
 8016594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016598:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 801659a:	68e3      	ldr	r3, [r4, #12]
 801659c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80165a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80165a4:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 80165a6:	a903      	add	r1, sp, #12
 80165a8:	4668      	mov	r0, sp
 80165aa:	f7f9 fa7b 	bl	800faa4 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80165ae:	6823      	ldr	r3, [r4, #0]
 80165b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80165b4:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80165b6:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80165b8:	2000      	movs	r0, #0
 80165ba:	f023 0301 	bic.w	r3, r3, #1
 80165be:	6023      	str	r3, [r4, #0]
 80165c0:	b008      	add	sp, #32
 80165c2:	bd10      	pop	{r4, pc}

080165c4 <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 80165c4:	2306      	movs	r3, #6
 80165c6:	2200      	movs	r2, #0
 80165c8:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 80165cc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80165d0:	6083      	str	r3, [r0, #8]
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 80165d2:	4770      	bx	lr

080165d4 <config_enable_default_clocks>:
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 80165d4:	4770      	bx	lr

080165d6 <z_impl_counter_get_frequency>:
	return api->get_freq ? api->get_freq(dev) : config->freq;
 80165d6:	6882      	ldr	r2, [r0, #8]
 80165d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80165da:	b102      	cbz	r2, 80165de <z_impl_counter_get_frequency+0x8>
 80165dc:	4710      	bx	r2
 80165de:	6843      	ldr	r3, [r0, #4]
}
 80165e0:	6858      	ldr	r0, [r3, #4]
 80165e2:	4770      	bx	lr

080165e4 <rtc_stm32_stop>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80165e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
}
 80165e8:	2000      	movs	r0, #0
 80165ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80165ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80165f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80165f6:	4770      	bx	lr

080165f8 <rtc_stm32_get_top_value>:
	return info->max_top_value;
 80165f8:	6843      	ldr	r3, [r0, #4]
}
 80165fa:	6818      	ldr	r0, [r3, #0]
 80165fc:	4770      	bx	lr

080165fe <rtc_stm32_set_top_value>:
	if ((cfg->ticks != info->max_top_value) ||
 80165fe:	6843      	ldr	r3, [r0, #4]
 8016600:	680a      	ldr	r2, [r1, #0]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	429a      	cmp	r2, r3
 8016606:	d107      	bne.n	8016618 <rtc_stm32_set_top_value+0x1a>
		!(cfg->flags & COUNTER_TOP_CFG_DONT_RESET)) {
 8016608:	68cb      	ldr	r3, [r1, #12]
		return 0;
 801660a:	f013 0f01 	tst.w	r3, #1
 801660e:	bf0c      	ite	eq
 8016610:	f06f 0085 	mvneq.w	r0, #133	; 0x85
 8016614:	2000      	movne	r0, #0
 8016616:	4770      	bx	lr
		return -ENOTSUP;
 8016618:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801661c:	4770      	bx	lr

0801661e <rtc_stm32_get_value>:
{
 801661e:	b510      	push	{r4, lr}
 8016620:	460c      	mov	r4, r1
	*ticks = rtc_stm32_read(dev);
 8016622:	f7f6 fa35 	bl	800ca90 <rtc_stm32_read>
 8016626:	6020      	str	r0, [r4, #0]
}
 8016628:	2000      	movs	r0, #0
 801662a:	bd10      	pop	{r4, pc}

0801662c <rtc_stm32_start>:
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 801662c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
}
 8016630:	2000      	movs	r0, #0
 8016632:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8016636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801663a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801663e:	4770      	bx	lr

08016640 <bin2bcd>:
 *
 * @return BCD 8421 representation of input value.
 */
static inline uint8_t bin2bcd(uint8_t bin)
{
	return (((bin / 10) << 4) | (bin % 10));
 8016640:	220a      	movs	r2, #10
 8016642:	fbb0 f3f2 	udiv	r3, r0, r2
 8016646:	fb02 0013 	mls	r0, r2, r3, r0
 801664a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 801664e:	b2c0      	uxtb	r0, r0
 8016650:	4770      	bx	lr

08016652 <gpio_pin_interrupt_configure_dt>:
{
 8016652:	b430      	push	{r4, r5}
 8016654:	4603      	mov	r3, r0
 8016656:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
 8016658:	6800      	ldr	r0, [r0, #0]
 801665a:	7919      	ldrb	r1, [r3, #4]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 801665c:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
 801665e:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8016660:	d507      	bpl.n	8016672 <gpio_pin_interrupt_configure_dt+0x20>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8016662:	6905      	ldr	r5, [r0, #16]
 8016664:	2301      	movs	r3, #1
 8016666:	682d      	ldr	r5, [r5, #0]
 8016668:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 801666a:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 801666c:	bf18      	it	ne
 801666e:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8016672:	69a4      	ldr	r4, [r4, #24]
 8016674:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
 8016678:	46a4      	mov	ip, r4
 801667a:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
 801667e:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8016680:	4760      	bx	ip

08016682 <counter_alarm_forwarder>:
}
 8016682:	4770      	bx	lr

08016684 <ds3231_counter_start>:
}
 8016684:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8016688:	4770      	bx	lr

0801668a <ds3231_counter_stop>:
}
 801668a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801668e:	4770      	bx	lr

08016690 <ds3231_counter_get_top_value>:

static uint32_t ds3231_counter_get_top_value(const struct device *dev)
{
	return UINT32_MAX;
}
 8016690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016694:	4770      	bx	lr

08016696 <ds3231_counter_get_pending_int>:

static uint32_t ds3231_counter_get_pending_int(const struct device *dev)
{
	return 0;
}
 8016696:	2000      	movs	r0, #0
 8016698:	4770      	bx	lr

0801669a <ds3231_counter_set_top_value>:

static int ds3231_counter_set_top_value(const struct device *dev,
					const struct counter_top_cfg *cfg)
{
	return -ENOTSUP;
}
 801669a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801669e:	4770      	bx	lr

080166a0 <k_sem_give>:
	z_impl_k_sem_give(sem);
 80166a0:	f7f9 bd8a 	b.w	80101b8 <z_impl_k_sem_give>

080166a4 <k_uptime_get_32>:
{
 80166a4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80166a6:	f002 fd65 	bl	8019174 <z_impl_k_uptime_ticks>
 80166aa:	220a      	movs	r2, #10
 80166ac:	2300      	movs	r3, #0
 80166ae:	f7ea fc8b 	bl	8000fc8 <__aeabi_uldivmod>
}
 80166b2:	bd08      	pop	{r3, pc}

080166b4 <sqw_worker>:
 80166b4:	f7ff bff6 	b.w	80166a4 <k_uptime_get_32>

080166b8 <isw_gpio_callback>:
{
 80166b8:	b510      	push	{r4, lr}
 80166ba:	460c      	mov	r4, r1
 80166bc:	f7ff fff2 	bl	80166a4 <k_uptime_get_32>
	if (data->registers.ctrl & MAXIM_DS3231_REG_CTRL_INTCN) {
 80166c0:	f814 3c86 	ldrb.w	r3, [r4, #-134]
	data->isw_syncclock = maxim_ds3231_read_syncclock(data->ds3231);
 80166c4:	60e0      	str	r0, [r4, #12]
	if (data->registers.ctrl & MAXIM_DS3231_REG_CTRL_INTCN) {
 80166c6:	075b      	lsls	r3, r3, #29
 80166c8:	d505      	bpl.n	80166d6 <isw_gpio_callback+0x1e>
		k_work_submit(&data->alarm_work);
 80166ca:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
}
 80166ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_submit(&data->sqw_work);
 80166d2:	f7f9 bea5 	b.w	8010420 <k_work_submit>
	} else if (data->sync_state != SYNCSM_IDLE) {
 80166d6:	f894 307b 	ldrb.w	r3, [r4, #123]	; 0x7b
 80166da:	b113      	cbz	r3, 80166e2 <isw_gpio_callback+0x2a>
		k_work_submit(&data->sync_work);
 80166dc:	f1a4 0010 	sub.w	r0, r4, #16
 80166e0:	e7f5      	b.n	80166ce <isw_gpio_callback+0x16>
		k_work_submit(&data->sqw_work);
 80166e2:	f1a4 0020 	sub.w	r0, r4, #32
 80166e6:	e7f2      	b.n	80166ce <isw_gpio_callback+0x16>

080166e8 <z_log_msg2_static_create.constprop.0>:
 80166e8:	2300      	movs	r3, #0
 80166ea:	f7fd bd72 	b.w	80141d2 <z_impl_z_log_msg2_static_create>

080166ee <i2c_write_read_dt.constprop.0>:
 * @param read_buf Pointer to storage for read data
 * @param num_read Number of bytes to read
 *
 * @return a value from i2c_write_read()
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
 80166ee:	b530      	push	{r4, r5, lr}
 80166f0:	b087      	sub	sp, #28
 80166f2:	4604      	mov	r4, r0
 80166f4:	461d      	mov	r5, r3
	msg[0].buf = (uint8_t *)write_buf;
 80166f6:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
 80166f8:	2101      	movs	r1, #1
	msg[1].len = num_read;
 80166fa:	e9cd 2503 	strd	r2, r5, [sp, #12]
	msg[0].len = num_write;
 80166fe:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8016700:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 8016702:	2100      	movs	r1, #0
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
 8016704:	6800      	ldr	r0, [r0, #0]
 8016706:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 8016708:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 801670c:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8016710:	6882      	ldr	r2, [r0, #8]
 8016712:	4669      	mov	r1, sp
 8016714:	6894      	ldr	r4, [r2, #8]
 8016716:	2202      	movs	r2, #2
 8016718:	47a0      	blx	r4
			      write_buf, num_write,
			      read_buf, num_read);
}
 801671a:	b007      	add	sp, #28
 801671c:	bd30      	pop	{r4, r5, pc}

0801671e <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
 801671e:	f7f9 bd71 	b.w	8010204 <z_impl_k_sem_take>

08016722 <i2c_write_dt>:
{
 8016722:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016724:	4603      	mov	r3, r0
	msg.len = num_bytes;
 8016726:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 801672a:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
 801672c:	6800      	ldr	r0, [r0, #0]
 801672e:	889b      	ldrh	r3, [r3, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8016730:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8016734:	6882      	ldr	r2, [r0, #8]
 8016736:	a901      	add	r1, sp, #4
 8016738:	6894      	ldr	r4, [r2, #8]
 801673a:	2201      	movs	r2, #1
 801673c:	47a0      	blx	r4
}
 801673e:	b004      	add	sp, #16
 8016740:	bd10      	pop	{r4, pc}

08016742 <sc_ctrl>:
{
 8016742:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ds3231_data *data = dev->data;
 8016744:	6905      	ldr	r5, [r0, #16]
	uint8_t ctrl = (rp->ctrl & ~clear) | set;
 8016746:	7cae      	ldrb	r6, [r5, #18]
 8016748:	ea26 0402 	bic.w	r4, r6, r2
 801674c:	430c      	orrs	r4, r1
	if (rp->ctrl != ctrl) {
 801674e:	42a6      	cmp	r6, r4
{
 8016750:	4603      	mov	r3, r0
	int rc = ctrl;
 8016752:	4620      	mov	r0, r4
	if (rp->ctrl != ctrl) {
 8016754:	d00e      	beq.n	8016774 <sc_ctrl+0x32>
	const struct ds3231_config *cfg = dev->config;
 8016756:	6858      	ldr	r0, [r3, #4]
		uint8_t buf[2] = {
 8016758:	f88d 4005 	strb.w	r4, [sp, #5]
 801675c:	230e      	movs	r3, #14
		rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 801675e:	2202      	movs	r2, #2
 8016760:	a901      	add	r1, sp, #4
 8016762:	300c      	adds	r0, #12
		uint8_t buf[2] = {
 8016764:	f88d 3004 	strb.w	r3, [sp, #4]
		rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8016768:	f7ff ffdb 	bl	8016722 <i2c_write_dt>
		if (rc >= 0) {
 801676c:	2800      	cmp	r0, #0
			rp->ctrl = ctrl;
 801676e:	bfa4      	itt	ge
 8016770:	74ac      	strbge	r4, [r5, #18]
			rc = ctrl;
 8016772:	4620      	movge	r0, r4
}
 8016774:	b002      	add	sp, #8
 8016776:	bd70      	pop	{r4, r5, r6, pc}

08016778 <cancel_alarm>:
	data->alarm_handler[id] = NULL;
 8016778:	6903      	ldr	r3, [r0, #16]
 801677a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 801677e:	460a      	mov	r2, r1
	data->alarm_handler[id] = NULL;
 8016780:	2100      	movs	r1, #0
 8016782:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	data->alarm_user_data[id] = NULL;
 8016786:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	return sc_ctrl(dev, 0, MAXIM_DS3231_ALARM1 << id);
 801678a:	2301      	movs	r3, #1
 801678c:	fa03 f202 	lsl.w	r2, r3, r2
 8016790:	b2d2      	uxtb	r2, r2
 8016792:	f7ff bfd6 	b.w	8016742 <sc_ctrl>

08016796 <ds3231_counter_cancel_alarm>:
{
 8016796:	b570      	push	{r4, r5, r6, lr}
	if (id >= cfg->generic.channels) {
 8016798:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 801679a:	6905      	ldr	r5, [r0, #16]
	if (id >= cfg->generic.channels) {
 801679c:	7a5b      	ldrb	r3, [r3, #9]
 801679e:	428b      	cmp	r3, r1
{
 80167a0:	4604      	mov	r4, r0
 80167a2:	460e      	mov	r6, r1
	if (id >= cfg->generic.channels) {
 80167a4:	d912      	bls.n	80167cc <ds3231_counter_cancel_alarm+0x36>
	k_sem_take(&data->lock, K_FOREVER);
 80167a6:	3518      	adds	r5, #24
 80167a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167b0:	4628      	mov	r0, r5
 80167b2:	f7ff ffb4 	bl	801671e <k_sem_take.constprop.0.isra.0>
	rv = cancel_alarm(dev, id);
 80167b6:	4631      	mov	r1, r6
 80167b8:	4620      	mov	r0, r4
 80167ba:	f7ff ffdd 	bl	8016778 <cancel_alarm>
 80167be:	4604      	mov	r4, r0
	k_sem_give(&data->lock);
 80167c0:	4628      	mov	r0, r5
 80167c2:	f7ff ff6d 	bl	80166a0 <k_sem_give>
	if (rv >= 0) {
 80167c6:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
 80167ca:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EINVAL;
 80167cc:	f06f 0015 	mvn.w	r0, #21
 80167d0:	e7fb      	b.n	80167ca <ds3231_counter_cancel_alarm+0x34>

080167d2 <sync_finish>:
{
 80167d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ds3231_data *data = dev->data;
 80167d6:	6904      	ldr	r4, [r0, #16]
	if (data->sync_signal) {
 80167d8:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
		signal = data->sync.signal;
 80167dc:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
{
 80167e0:	4606      	mov	r6, r0
 80167e2:	460d      	mov	r5, r1
 80167e4:	2300      	movs	r3, #0
	if (data->sync_signal) {
 80167e6:	b1da      	cbz	r2, 8016820 <sync_finish+0x4e>
		signal = data->sync.signal;
 80167e8:	46b8      	mov	r8, r7
	struct sys_notify *notify = NULL;
 80167ea:	461f      	mov	r7, r3
	(void)validate_isw_monitoring(dev);
 80167ec:	4630      	mov	r0, r6
	data->sync.ptr = NULL;
 80167ee:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	data->sync_signal = false;
 80167f2:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
	data->sync_state = SYNCSM_IDLE;
 80167f6:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	(void)validate_isw_monitoring(dev);
 80167fa:	f7f6 fb09 	bl	800ce10 <validate_isw_monitoring>
	k_sem_give(&data->lock);
 80167fe:	f104 0018 	add.w	r0, r4, #24
 8016802:	f7ff ff4d 	bl	80166a0 <k_sem_give>
	if (notify != NULL) {
 8016806:	b16f      	cbz	r7, 8016824 <sync_finish+0x52>
			(maxim_ds3231_notify_callback)sys_notify_finalize(notify, rc);
 8016808:	4629      	mov	r1, r5
 801680a:	4638      	mov	r0, r7
 801680c:	f7fd f95e 	bl	8013acc <sys_notify_finalize>
		if (cb) {
 8016810:	4603      	mov	r3, r0
 8016812:	b180      	cbz	r0, 8016836 <sync_finish+0x64>
			cb(dev, notify, rc);
 8016814:	462a      	mov	r2, r5
 8016816:	4639      	mov	r1, r7
 8016818:	4630      	mov	r0, r6
}
 801681a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			cb(dev, notify, rc);
 801681e:	4718      	bx	r3
	struct k_poll_signal *signal = NULL;
 8016820:	4698      	mov	r8, r3
 8016822:	e7e3      	b.n	80167ec <sync_finish+0x1a>
	} else if (signal != NULL) {
 8016824:	f1b8 0f00 	cmp.w	r8, #0
 8016828:	d005      	beq.n	8016836 <sync_finish+0x64>
	return z_impl_k_poll_signal_raise(sig, result);
 801682a:	4629      	mov	r1, r5
 801682c:	4640      	mov	r0, r8
}
 801682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016832:	f7fa bbf1 	b.w	8011018 <z_impl_k_poll_signal_raise>
 8016836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801683a <rsc_stat>:
{
 801683a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct ds3231_config *cfg = dev->config;
 801683c:	6846      	ldr	r6, [r0, #4]
	struct ds3231_data *data = dev->data;
 801683e:	6905      	ldr	r5, [r0, #16]
	uint8_t addr = offsetof(struct register_map, ctrl_stat);
 8016840:	230f      	movs	r3, #15
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &rp->ctrl_stat,
 8016842:	360c      	adds	r6, #12
	uint8_t addr = offsetof(struct register_map, ctrl_stat);
 8016844:	f88d 3003 	strb.w	r3, [sp, #3]
{
 8016848:	460f      	mov	r7, r1
 801684a:	4614      	mov	r4, r2
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &rp->ctrl_stat,
 801684c:	2301      	movs	r3, #1
 801684e:	f105 0213 	add.w	r2, r5, #19
 8016852:	f10d 0103 	add.w	r1, sp, #3
 8016856:	4630      	mov	r0, r6
 8016858:	f7ff ff49 	bl	80166ee <i2c_write_read_dt.constprop.0>
	if (rc >= 0) {
 801685c:	2800      	cmp	r0, #0
 801685e:	db06      	blt.n	801686e <rsc_stat+0x34>
		uint8_t stat = rp->ctrl_stat & ~clear;
 8016860:	7ce9      	ldrb	r1, [r5, #19]
 8016862:	ea21 0204 	bic.w	r2, r1, r4
		if (rp->ctrl_stat != stat) {
 8016866:	4291      	cmp	r1, r2
		uint8_t stat = rp->ctrl_stat & ~clear;
 8016868:	b253      	sxtb	r3, r2
		if (rp->ctrl_stat != stat) {
 801686a:	d102      	bne.n	8016872 <rsc_stat+0x38>
			rc = rp->ctrl_stat;
 801686c:	7ce8      	ldrb	r0, [r5, #19]
}
 801686e:	b003      	add	sp, #12
 8016870:	bdf0      	pop	{r4, r5, r6, r7, pc}
				stat | (ign & ~(set | clear)),
 8016872:	433c      	orrs	r4, r7
 8016874:	43e4      	mvns	r4, r4
			uint8_t buf[2] = {
 8016876:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801687a:	f88d 2004 	strb.w	r2, [sp, #4]
				stat | (ign & ~(set | clear)),
 801687e:	f024 047c 	bic.w	r4, r4, #124	; 0x7c
 8016882:	431c      	orrs	r4, r3
			rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8016884:	2202      	movs	r2, #2
 8016886:	a901      	add	r1, sp, #4
 8016888:	4630      	mov	r0, r6
			uint8_t buf[2] = {
 801688a:	f88d 4005 	strb.w	r4, [sp, #5]
			rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 801688e:	f7ff ff48 	bl	8016722 <i2c_write_dt>
		if (rc >= 0) {
 8016892:	2800      	cmp	r0, #0
 8016894:	dbeb      	blt.n	801686e <rsc_stat+0x34>
 8016896:	e7e9      	b.n	801686c <rsc_stat+0x32>

08016898 <check_handled_alarms>:
{
 8016898:	b510      	push	{r4, lr}
	mask &= rp->ctrl;
 801689a:	6903      	ldr	r3, [r0, #16]
 801689c:	7c9c      	ldrb	r4, [r3, #18]
 801689e:	f004 0403 	and.w	r4, r4, #3
	int rv = rsc_stat(dev, 0U, mask);
 80168a2:	4622      	mov	r2, r4
 80168a4:	2100      	movs	r1, #0
 80168a6:	f7ff ffc8 	bl	801683a <rsc_stat>
	if (rv > 0) {
 80168aa:	2800      	cmp	r0, #0
		rv &= mask;
 80168ac:	bfc8      	it	gt
 80168ae:	4020      	andgt	r0, r4
}
 80168b0:	bd10      	pop	{r4, pc}

080168b2 <set_alarm>:
{
 80168b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b6:	b091      	sub	sp, #68	; 0x44
	const struct ds3231_config *cfg = dev->config;
 80168b8:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 80168ba:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 80168be:	9301      	str	r3, [sp, #4]
{
 80168c0:	4607      	mov	r7, r0
 80168c2:	4615      	mov	r5, r2
	if (id == 0) {
 80168c4:	460e      	mov	r6, r1
 80168c6:	b1e9      	cbz	r1, 8016904 <set_alarm+0x52>
	} else if (id < cfg->generic.channels) {
 80168c8:	7a5b      	ldrb	r3, [r3, #9]
 80168ca:	428b      	cmp	r3, r1
 80168cc:	d917      	bls.n	80168fe <set_alarm+0x4c>
		len = sizeof(data->registers.alarm2);
 80168ce:	f04f 0a03 	mov.w	sl, #3
		addr = offsetof(struct register_map, alarm2);
 80168d2:	f04f 090b 	mov.w	r9, #11
	uint8_t buf[5] = { addr };
 80168d6:	2300      	movs	r3, #0
 80168d8:	f8cd 3009 	str.w	r3, [sp, #9]
 80168dc:	e9d5 2300 	ldrd	r2, r3, [r5]
	int rc = encode_alarm(buf + 1, (id == 0), cp->time, cp->flags);
 80168e0:	7c2c      	ldrb	r4, [r5, #16]
	uint8_t buf[5] = { addr };
 80168e2:	f88d 9008 	strb.w	r9, [sp, #8]
	(void)gmtime_r(&time, &tm);
 80168e6:	a907      	add	r1, sp, #28
 80168e8:	a804      	add	r0, sp, #16
 80168ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80168ee:	f7fa fbf9 	bl	80110e4 <gmtime_r>
	if (!is_power_of_two(1U + (0x0F & ~flags))) {
 80168f2:	43e3      	mvns	r3, r4
 80168f4:	f003 030f 	and.w	r3, r3, #15
 80168f8:	1c5a      	adds	r2, r3, #1
 80168fa:	421a      	tst	r2, r3
 80168fc:	d007      	beq.n	801690e <set_alarm+0x5c>
		return -EINVAL;
 80168fe:	f06f 0415 	mvn.w	r4, #21
 8016902:	e05c      	b.n	80169be <set_alarm+0x10c>
		len = sizeof(data->registers.alarm1);
 8016904:	f04f 0a04 	mov.w	sl, #4
		addr = offsetof(struct register_map, alarm1);
 8016908:	f04f 0907 	mov.w	r9, #7
 801690c:	e7e3      	b.n	80168d6 <set_alarm+0x24>
	if (with_sec) {
 801690e:	2e00      	cmp	r6, #0
 8016910:	d15b      	bne.n	80169ca <set_alarm+0x118>
		if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNSE) {
 8016912:	07e2      	lsls	r2, r4, #31
 8016914:	d457      	bmi.n	80169c6 <set_alarm+0x114>
			val = bin2bcd(tm.tm_sec);
 8016916:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801691a:	f7ff fe91 	bl	8016640 <bin2bcd>
		*ap++ = val;
 801691e:	f88d 0009 	strb.w	r0, [sp, #9]
 8016922:	f10d 010a 	add.w	r1, sp, #10
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNMN) {
 8016926:	07a3      	lsls	r3, r4, #30
 8016928:	d452      	bmi.n	80169d0 <set_alarm+0x11e>
		val = bin2bcd(tm.tm_min);
 801692a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 801692e:	f7ff fe87 	bl	8016640 <bin2bcd>
	*ap++ = val;
 8016932:	7008      	strb	r0, [r1, #0]
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNHR) {
 8016934:	0760      	lsls	r0, r4, #29
 8016936:	d44d      	bmi.n	80169d4 <set_alarm+0x122>
		val = bin2bcd(tm.tm_hour);
 8016938:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801693c:	f7ff fe80 	bl	8016640 <bin2bcd>
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNDA) {
 8016940:	0722      	lsls	r2, r4, #28
	*ap++ = val;
 8016942:	7048      	strb	r0, [r1, #1]
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNDA) {
 8016944:	d44d      	bmi.n	80169e2 <set_alarm+0x130>
	} else if (flags & MAXIM_DS3231_ALARM_FLAGS_DOW) {
 8016946:	06e3      	lsls	r3, r4, #27
 8016948:	d546      	bpl.n	80169d8 <set_alarm+0x126>
		val = REG_DAYDATE_DOW | (tm.tm_wday + 1);
 801694a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801694c:	3001      	adds	r0, #1
 801694e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8016952:	b2c0      	uxtb	r0, r0
	rc = rsc_stat(dev, 0U, (MAXIM_DS3231_ALARM1 << id));
 8016954:	2301      	movs	r3, #1
 8016956:	40b3      	lsls	r3, r6
 8016958:	fa5f fb83 	uxtb.w	fp, r3
	*ap++ = val;
 801695c:	7088      	strb	r0, [r1, #2]
	rc = rsc_stat(dev, 0U, (MAXIM_DS3231_ALARM1 << id));
 801695e:	465a      	mov	r2, fp
 8016960:	2100      	movs	r1, #0
 8016962:	4638      	mov	r0, r7
 8016964:	f7ff ff69 	bl	801683a <rsc_stat>
	if (rc >= 0) {
 8016968:	1e04      	subs	r4, r0, #0
 801696a:	db28      	blt.n	80169be <set_alarm+0x10c>
		rc = i2c_write_dt(&cfg->bus, buf, len + 1);
 801696c:	9801      	ldr	r0, [sp, #4]
 801696e:	f10a 0201 	add.w	r2, sl, #1
 8016972:	a902      	add	r1, sp, #8
 8016974:	300c      	adds	r0, #12
 8016976:	f7ff fed4 	bl	8016722 <i2c_write_dt>
	if ((rc >= 0)
 801697a:	1e04      	subs	r4, r0, #0
 801697c:	db1f      	blt.n	80169be <set_alarm+0x10c>
	    && (cp->handler != NULL)) {
 801697e:	68aa      	ldr	r2, [r5, #8]
 8016980:	b132      	cbz	r2, 8016990 <set_alarm+0xde>
		rc = sc_ctrl(dev, MAXIM_DS3231_ALARM1 << id, 0);
 8016982:	2200      	movs	r2, #0
 8016984:	4659      	mov	r1, fp
 8016986:	4638      	mov	r0, r7
 8016988:	f7ff fedb 	bl	8016742 <sc_ctrl>
	if (rc >= 0) {
 801698c:	1e04      	subs	r4, r0, #0
 801698e:	db16      	blt.n	80169be <set_alarm+0x10c>
		memmove(&data->registers.sec + addr, buf + 1, len);
 8016990:	f108 0004 	add.w	r0, r8, #4
__ssp_bos_icheck3(memmove, void *, const void *)
 8016994:	4652      	mov	r2, sl
 8016996:	f10d 0109 	add.w	r1, sp, #9
 801699a:	4448      	add	r0, r9
 801699c:	f002 fd78 	bl	8019490 <memmove>
		data->alarm_handler[id] = cp->handler;
 80169a0:	eb08 0386 	add.w	r3, r8, r6, lsl #2
 80169a4:	68aa      	ldr	r2, [r5, #8]
 80169a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		data->alarm_user_data[id] = cp->user_data;
 80169aa:	68ea      	ldr	r2, [r5, #12]
 80169ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		data->alarm_flags[id] = cp->flags;
 80169b0:	4446      	add	r6, r8
 80169b2:	7c2b      	ldrb	r3, [r5, #16]
 80169b4:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
		validate_isw_monitoring(dev);
 80169b8:	4638      	mov	r0, r7
 80169ba:	f7f6 fa29 	bl	800ce10 <validate_isw_monitoring>
}
 80169be:	4620      	mov	r0, r4
 80169c0:	b011      	add	sp, #68	; 0x44
 80169c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			val = REG_ALARM_IGN;
 80169c6:	2080      	movs	r0, #128	; 0x80
 80169c8:	e7a9      	b.n	801691e <set_alarm+0x6c>
 80169ca:	f10d 0109 	add.w	r1, sp, #9
 80169ce:	e7aa      	b.n	8016926 <set_alarm+0x74>
		val = REG_ALARM_IGN;
 80169d0:	2080      	movs	r0, #128	; 0x80
 80169d2:	e7ae      	b.n	8016932 <set_alarm+0x80>
		val = REG_ALARM_IGN;
 80169d4:	2080      	movs	r0, #128	; 0x80
 80169d6:	e7b3      	b.n	8016940 <set_alarm+0x8e>
		val = bin2bcd(tm.tm_mday);
 80169d8:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 80169dc:	f7ff fe30 	bl	8016640 <bin2bcd>
 80169e0:	e7b8      	b.n	8016954 <set_alarm+0xa2>
		val = REG_ALARM_IGN;
 80169e2:	2080      	movs	r0, #128	; 0x80
 80169e4:	e7b6      	b.n	8016954 <set_alarm+0xa2>

080169e6 <decode_time>:
{
 80169e6:	b510      	push	{r4, lr}
 80169e8:	4603      	mov	r3, r0
	if (with_sec) {
 80169ea:	b152      	cbz	r2, 8016a02 <decode_time+0x1c>
		uint8_t reg = *rp++;
 80169ec:	f811 2b01 	ldrb.w	r2, [r1], #1
	return ((10 * (bcd >> 4)) + (bcd & 0x0F));
 80169f0:	f3c2 1002 	ubfx	r0, r2, #4, #3
 80169f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80169f8:	f002 020f 	and.w	r2, r2, #15
		tp->tm_sec = bcd2bin(reg & 0x7F);
 80169fc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016a00:	601a      	str	r2, [r3, #0]
	reg = *rp++;
 8016a02:	4608      	mov	r0, r1
 8016a04:	f810 2b02 	ldrb.w	r2, [r0], #2
 8016a08:	f3c2 1402 	ubfx	r4, r2, #4, #3
 8016a0c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016a10:	f002 020f 	and.w	r2, r2, #15
	tp->tm_min = bcd2bin(reg & 0x7F);
 8016a14:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8016a18:	605a      	str	r2, [r3, #4]
	reg = *rp++;
 8016a1a:	784a      	ldrb	r2, [r1, #1]
	if (REG_HOURS_12H & reg) {
 8016a1c:	0654      	lsls	r4, r2, #25
 8016a1e:	f002 010f 	and.w	r1, r2, #15
 8016a22:	d504      	bpl.n	8016a2e <decode_time+0x48>
		if (REG_HOURS_10 & reg) {
 8016a24:	0692      	lsls	r2, r2, #26
			tp->tm_hour += 12;
 8016a26:	bf48      	it	mi
 8016a28:	3116      	addmi	r1, #22
 8016a2a:	6099      	str	r1, [r3, #8]
}
 8016a2c:	bd10      	pop	{r4, pc}
		tp->tm_hour += 10 * ((reg >> 4) & 0x03);
 8016a2e:	f3c2 1201 	ubfx	r2, r2, #4, #2
 8016a32:	240a      	movs	r4, #10
 8016a34:	fb14 1202 	smlabb	r2, r4, r2, r1
 8016a38:	609a      	str	r2, [r3, #8]
	return rp;
 8016a3a:	e7f7      	b.n	8016a2c <decode_time+0x46>

08016a3c <decode_rtc>:
{
 8016a3c:	b510      	push	{r4, lr}
 8016a3e:	b08a      	sub	sp, #40	; 0x28
 8016a40:	4604      	mov	r4, r0
	struct tm tm = { 0 };
 8016a42:	2224      	movs	r2, #36	; 0x24
 8016a44:	2100      	movs	r1, #0
 8016a46:	a801      	add	r0, sp, #4
 8016a48:	f002 fd3c 	bl	80194c4 <memset>
	decode_time(&tm, &rp->sec, true);
 8016a4c:	1d21      	adds	r1, r4, #4
 8016a4e:	2201      	movs	r2, #1
 8016a50:	a801      	add	r0, sp, #4
 8016a52:	f7ff ffc8 	bl	80169e6 <decode_time>
	tm.tm_wday = (rp->dow & 0x07) - 1;
 8016a56:	79e3      	ldrb	r3, [r4, #7]
	tm.tm_mon = 10 * (((0xF0 & ~REG_MONCEN_CENTURY) & rp->moncen) >> 4)
 8016a58:	7a60      	ldrb	r0, [r4, #9]
	tm.tm_wday = (rp->dow & 0x07) - 1;
 8016a5a:	f003 0307 	and.w	r3, r3, #7
 8016a5e:	3b01      	subs	r3, #1
 8016a60:	9307      	str	r3, [sp, #28]
	tm.tm_mday = bcd2bin(rp->dom & 0x3F);
 8016a62:	7a23      	ldrb	r3, [r4, #8]
 8016a64:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8016a68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016a6c:	f003 030f 	and.w	r3, r3, #15
 8016a70:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016a74:	9304      	str	r3, [sp, #16]
		    + (rp->moncen & 0x0F) - 1;
 8016a76:	f3c0 1102 	ubfx	r1, r0, #4, #3
 8016a7a:	f000 020f 	and.w	r2, r0, #15
 8016a7e:	230a      	movs	r3, #10
 8016a80:	fb13 2301 	smlabb	r3, r3, r1, r2
	tm.tm_year = bcd2bin(rp->year);
 8016a84:	7aa2      	ldrb	r2, [r4, #10]
		    + (rp->moncen & 0x0F) - 1;
 8016a86:	3b01      	subs	r3, #1
	tm.tm_mon = 10 * (((0xF0 & ~REG_MONCEN_CENTURY) & rp->moncen) >> 4)
 8016a88:	9305      	str	r3, [sp, #20]
 8016a8a:	0913      	lsrs	r3, r2, #4
 8016a8c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8016a90:	f002 030f 	and.w	r3, r2, #15
 8016a94:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	tm.tm_year = bcd2bin(rp->year);
 8016a98:	b2db      	uxtb	r3, r3
	if (REG_MONCEN_CENTURY & rp->moncen) {
 8016a9a:	0602      	lsls	r2, r0, #24
		tm.tm_year += 100;
 8016a9c:	bf48      	it	mi
 8016a9e:	3364      	addmi	r3, #100	; 0x64
	data->rtc_registers = timeutil_timegm(&tm);
 8016aa0:	a801      	add	r0, sp, #4
		tm.tm_year += 100;
 8016aa2:	9306      	str	r3, [sp, #24]
	data->rtc_registers = timeutil_timegm(&tm);
 8016aa4:	f7fd f864 	bl	8013b70 <timeutil_timegm>
 8016aa8:	e9c4 0136 	strd	r0, r1, [r4, #216]	; 0xd8
}
 8016aac:	b00a      	add	sp, #40	; 0x28
 8016aae:	bd10      	pop	{r4, pc}

08016ab0 <read_time>:
{
 8016ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ds3231_data *data = dev->data;
 8016ab2:	6907      	ldr	r7, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 8016ab4:	6840      	ldr	r0, [r0, #4]
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8016ab6:	2307      	movs	r3, #7
{
 8016ab8:	460d      	mov	r5, r1
	uint8_t addr = 0;
 8016aba:	2600      	movs	r6, #0
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8016abc:	1d3a      	adds	r2, r7, #4
 8016abe:	eb0d 0103 	add.w	r1, sp, r3
 8016ac2:	300c      	adds	r0, #12
	uint8_t addr = 0;
 8016ac4:	f88d 6007 	strb.w	r6, [sp, #7]
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8016ac8:	f7ff fe11 	bl	80166ee <i2c_write_read_dt.constprop.0>
	if (rc >= 0) {
 8016acc:	1e04      	subs	r4, r0, #0
 8016ace:	db04      	blt.n	8016ada <read_time+0x2a>
		*time = decode_rtc(data);
 8016ad0:	4638      	mov	r0, r7
 8016ad2:	f7ff ffb3 	bl	8016a3c <decode_rtc>
 8016ad6:	e9c5 0600 	strd	r0, r6, [r5]
}
 8016ada:	4620      	mov	r0, r4
 8016adc:	b003      	add	sp, #12
 8016ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ae0 <ds3231_counter_get_value>:
{
 8016ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ds3231_data *data = dev->data;
 8016ae2:	6905      	ldr	r5, [r0, #16]
	time_t time = 0;
 8016ae4:	2200      	movs	r2, #0
	k_sem_take(&data->lock, K_FOREVER);
 8016ae6:	3518      	adds	r5, #24
	time_t time = 0;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	e9cd 2300 	strd	r2, r3, [sp]
{
 8016aee:	4604      	mov	r4, r0
	k_sem_take(&data->lock, K_FOREVER);
 8016af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016af8:	4628      	mov	r0, r5
{
 8016afa:	460e      	mov	r6, r1
	k_sem_take(&data->lock, K_FOREVER);
 8016afc:	f7ff fe0f 	bl	801671e <k_sem_take.constprop.0.isra.0>
	int rc = read_time(dev, &time);
 8016b00:	4669      	mov	r1, sp
 8016b02:	4620      	mov	r0, r4
 8016b04:	f7ff ffd4 	bl	8016ab0 <read_time>
 8016b08:	4604      	mov	r4, r0
	k_sem_give(&data->lock);
 8016b0a:	4628      	mov	r0, r5
 8016b0c:	f7ff fdc8 	bl	80166a0 <k_sem_give>
	if (rc >= 0) {
 8016b10:	2c00      	cmp	r4, #0
		*ticks = time;
 8016b12:	bfa4      	itt	ge
 8016b14:	9b00      	ldrge	r3, [sp, #0]
 8016b16:	6033      	strge	r3, [r6, #0]
}
 8016b18:	4620      	mov	r0, r4
 8016b1a:	b002      	add	sp, #8
 8016b1c:	bd70      	pop	{r4, r5, r6, pc}

08016b1e <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016b1e:	6843      	ldr	r3, [r0, #4]
 8016b20:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8016b22:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8016b24:	600b      	str	r3, [r1, #0]
}
 8016b26:	2000      	movs	r0, #0
 8016b28:	4770      	bx	lr

08016b2a <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016b2a:	6843      	ldr	r3, [r0, #4]
 8016b2c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8016b2e:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8016b30:	4042      	eors	r2, r0
 8016b32:	400a      	ands	r2, r1
 8016b34:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8016b36:	615a      	str	r2, [r3, #20]
}
 8016b38:	2000      	movs	r0, #0
 8016b3a:	4770      	bx	lr

08016b3c <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016b3c:	6843      	ldr	r3, [r0, #4]
 8016b3e:	685b      	ldr	r3, [r3, #4]
}
 8016b40:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8016b42:	6199      	str	r1, [r3, #24]
}
 8016b44:	4770      	bx	lr

08016b46 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016b46:	6843      	ldr	r3, [r0, #4]
 8016b48:	685b      	ldr	r3, [r3, #4]
}
 8016b4a:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8016b4c:	6299      	str	r1, [r3, #40]	; 0x28
 8016b4e:	4770      	bx	lr

08016b50 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016b50:	6843      	ldr	r3, [r0, #4]
 8016b52:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8016b54:	6953      	ldr	r3, [r2, #20]
 8016b56:	404b      	eors	r3, r1
 8016b58:	6153      	str	r3, [r2, #20]
}
 8016b5a:	2000      	movs	r0, #0
 8016b5c:	4770      	bx	lr

08016b5e <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 8016b5e:	6903      	ldr	r3, [r0, #16]
	return list->head;
 8016b60:	6898      	ldr	r0, [r3, #8]
{
 8016b62:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8016b64:	b158      	cbz	r0, 8016b7e <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8016b66:	2400      	movs	r4, #0
 8016b68:	4281      	cmp	r1, r0
 8016b6a:	d112      	bne.n	8016b92 <gpio_stm32_manage_callback+0x34>
	return node->next;
 8016b6c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8016b6e:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8016b70:	b954      	cbnz	r4, 8016b88 <gpio_stm32_manage_callback+0x2a>
 8016b72:	428d      	cmp	r5, r1
	list->head = node;
 8016b74:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8016b76:	d100      	bne.n	8016b7a <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8016b78:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8016b7a:	2000      	movs	r0, #0
 8016b7c:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8016b7e:	b96a      	cbnz	r2, 8016b9c <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8016b80:	2000      	movs	r0, #0
}
 8016b82:	bd30      	pop	{r4, r5, pc}
 8016b84:	4628      	mov	r0, r5
 8016b86:	e7ef      	b.n	8016b68 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8016b88:	428d      	cmp	r5, r1
	parent->next = child;
 8016b8a:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8016b8c:	bf08      	it	eq
 8016b8e:	60dc      	streq	r4, [r3, #12]
}
 8016b90:	e7f3      	b.n	8016b7a <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8016b92:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8016b94:	4604      	mov	r4, r0
 8016b96:	2d00      	cmp	r5, #0
 8016b98:	d1f4      	bne.n	8016b84 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8016b9a:	b13a      	cbz	r2, 8016bac <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8016b9c:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8016b9e:	689a      	ldr	r2, [r3, #8]
 8016ba0:	600a      	str	r2, [r1, #0]
	list->head = node;
 8016ba2:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d1eb      	bne.n	8016b80 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8016ba8:	60d9      	str	r1, [r3, #12]
}
 8016baa:	e7ea      	b.n	8016b82 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8016bac:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8016bb0:	e7e7      	b.n	8016b82 <gpio_stm32_manage_callback+0x24>

08016bb2 <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8016bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016bb4:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8016bb6:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8016bb8:	6867      	ldr	r7, [r4, #4]
 8016bba:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8016bbc:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8016bc0:	ea27 0700 	bic.w	r7, r7, r0
 8016bc4:	408e      	lsls	r6, r1
 8016bc6:	433e      	orrs	r6, r7
 8016bc8:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016bca:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8016bce:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8016bd2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8016bd6:	f04f 0e03 	mov.w	lr, #3
 8016bda:	007f      	lsls	r7, r7, #1
 8016bdc:	fa0e f707 	lsl.w	r7, lr, r7
 8016be0:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016be4:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8016be8:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8016bec:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8016bf0:	007f      	lsls	r7, r7, #1
 8016bf2:	40be      	lsls	r6, r7
 8016bf4:	ea46 060c 	orr.w	r6, r6, ip
 8016bf8:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016bfa:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8016bfe:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8016c02:	68e7      	ldr	r7, [r4, #12]
 8016c04:	0076      	lsls	r6, r6, #1
 8016c06:	fa0e f606 	lsl.w	r6, lr, r6
 8016c0a:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c0e:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8016c12:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8016c16:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8016c1a:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8016c1c:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8016c20:	40b2      	lsls	r2, r6
 8016c22:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8016c24:	2d20      	cmp	r5, #32
 8016c26:	60e2      	str	r2, [r4, #12]
 8016c28:	d115      	bne.n	8016c56 <gpio_stm32_configure_raw.isra.0+0xa4>
		if (pin < 8) {
 8016c2a:	2907      	cmp	r1, #7
 8016c2c:	dc2b      	bgt.n	8016c86 <gpio_stm32_configure_raw.isra.0+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c2e:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8016c32:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8016c34:	b32a      	cbz	r2, 8016c82 <gpio_stm32_configure_raw.isra.0+0xd0>
  return __builtin_clz(value);
 8016c36:	fab2 f282 	clz	r2, r2
 8016c3a:	0092      	lsls	r2, r2, #2
 8016c3c:	260f      	movs	r6, #15
 8016c3e:	fa06 f202 	lsl.w	r2, r6, r2
 8016c42:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c46:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8016c4a:	fab2 f282 	clz	r2, r2
 8016c4e:	0092      	lsls	r2, r2, #2
 8016c50:	4093      	lsls	r3, r2
 8016c52:	430b      	orrs	r3, r1
 8016c54:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c56:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8016c5a:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8016c5e:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c60:	fa90 f0a0 	rbit	r0, r0
 8016c64:	005b      	lsls	r3, r3, #1
 8016c66:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8016c68:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8016c6c:	092d      	lsrs	r5, r5, #4
 8016c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8016c72:	0040      	lsls	r0, r0, #1
 8016c74:	ea22 0303 	bic.w	r3, r2, r3
 8016c78:	fa05 f000 	lsl.w	r0, r5, r0
 8016c7c:	4318      	orrs	r0, r3
 8016c7e:	6020      	str	r0, [r4, #0]
}
 8016c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8016c82:	462a      	mov	r2, r5
 8016c84:	e7d9      	b.n	8016c3a <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8016c86:	0a02      	lsrs	r2, r0, #8
 8016c88:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c8a:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8016c8e:	b181      	cbz	r1, 8016cb2 <gpio_stm32_configure_raw.isra.0+0x100>
  return __builtin_clz(value);
 8016c90:	fab1 f181 	clz	r1, r1
 8016c94:	0089      	lsls	r1, r1, #2
 8016c96:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016c98:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8016c9c:	fab2 f282 	clz	r2, r2
 8016ca0:	fa07 f101 	lsl.w	r1, r7, r1
 8016ca4:	0092      	lsls	r2, r2, #2
 8016ca6:	ea26 0101 	bic.w	r1, r6, r1
 8016caa:	4093      	lsls	r3, r2
 8016cac:	430b      	orrs	r3, r1
 8016cae:	6263      	str	r3, [r4, #36]	; 0x24
}
 8016cb0:	e7d1      	b.n	8016c56 <gpio_stm32_configure_raw.isra.0+0xa4>
    return 32U;
 8016cb2:	4629      	mov	r1, r5
 8016cb4:	e7ee      	b.n	8016c94 <gpio_stm32_configure_raw.isra.0+0xe2>

08016cb6 <gpio_stm32_config>:
{
 8016cb6:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8016cb8:	039a      	lsls	r2, r3, #14
{
 8016cba:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8016cbc:	d51a      	bpl.n	8016cf4 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8016cbe:	079c      	lsls	r4, r3, #30
 8016cc0:	d511      	bpl.n	8016ce6 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8016cc2:	075a      	lsls	r2, r3, #29
 8016cc4:	d52f      	bpl.n	8016d26 <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8016cc6:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8016cc8:	06dc      	lsls	r4, r3, #27
 8016cca:	d50e      	bpl.n	8016cea <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8016ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8016cd0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 8016cd4:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8016cd6:	d11c      	bne.n	8016d12 <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8016cd8:	035b      	lsls	r3, r3, #13
 8016cda:	d514      	bpl.n	8016d06 <gpio_stm32_config+0x50>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016cdc:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8016cde:	2301      	movs	r3, #1
 8016ce0:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8016ce2:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8016ce4:	e00f      	b.n	8016d06 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8016ce6:	2210      	movs	r2, #16
 8016ce8:	e7ee      	b.n	8016cc8 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8016cea:	069c      	lsls	r4, r3, #26
 8016cec:	d5f0      	bpl.n	8016cd0 <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8016cee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8016cf2:	e7ed      	b.n	8016cd0 <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8016cf4:	03dc      	lsls	r4, r3, #15
 8016cf6:	d511      	bpl.n	8016d1c <gpio_stm32_config+0x66>
		if ((flags & GPIO_PULL_UP) != 0) {
 8016cf8:	06da      	lsls	r2, r3, #27
 8016cfa:	d411      	bmi.n	8016d20 <gpio_stm32_config+0x6a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8016cfc:	f013 0220 	ands.w	r2, r3, #32
 8016d00:	bf18      	it	ne
 8016d02:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8016d06:	6840      	ldr	r0, [r0, #4]
 8016d08:	2300      	movs	r3, #0
 8016d0a:	f7ff ff52 	bl	8016bb2 <gpio_stm32_configure_raw.isra.0>
	return 0;
 8016d0e:	2000      	movs	r0, #0
}
 8016d10:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8016d12:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8016d14:	2301      	movs	r3, #1
 8016d16:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8016d18:	61a3      	str	r3, [r4, #24]
	return 0;
 8016d1a:	e7f4      	b.n	8016d06 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8016d1c:	2230      	movs	r2, #48	; 0x30
 8016d1e:	e7f2      	b.n	8016d06 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8016d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d24:	e7ef      	b.n	8016d06 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8016d26:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8016d2a:	e7f1      	b.n	8016d10 <gpio_stm32_config+0x5a>

08016d2c <gpio_stm32_isr>:
{
 8016d2c:	460b      	mov	r3, r1
 8016d2e:	6889      	ldr	r1, [r1, #8]
 8016d30:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8016d32:	b169      	cbz	r1, 8016d50 <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8016d34:	2501      	movs	r5, #1
 8016d36:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8016d38:	680c      	ldr	r4, [r1, #0]
 8016d3a:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8016d3c:	688a      	ldr	r2, [r1, #8]
 8016d3e:	402a      	ands	r2, r5
 8016d40:	d002      	beq.n	8016d48 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8016d42:	684b      	ldr	r3, [r1, #4]
 8016d44:	4630      	mov	r0, r6
 8016d46:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8016d48:	b114      	cbz	r4, 8016d50 <gpio_stm32_isr+0x24>
 8016d4a:	4621      	mov	r1, r4
 8016d4c:	6824      	ldr	r4, [r4, #0]
 8016d4e:	e7f5      	b.n	8016d3c <gpio_stm32_isr+0x10>
}
 8016d50:	bd70      	pop	{r4, r5, r6, pc}

08016d52 <gpio_stm32_configure>:
{
 8016d52:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8016d54:	6840      	ldr	r0, [r0, #4]
 8016d56:	f7ff ff2c 	bl	8016bb2 <gpio_stm32_configure_raw.isra.0>
}
 8016d5a:	2000      	movs	r0, #0
 8016d5c:	bd08      	pop	{r3, pc}

08016d5e <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8016d5e:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8016d60:	681a      	ldr	r2, [r3, #0]
 8016d62:	f042 0220 	orr.w	r2, r2, #32
 8016d66:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8016d68:	681a      	ldr	r2, [r3, #0]
 8016d6a:	f042 0210 	orr.w	r2, r2, #16
 8016d6e:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016d76:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8016d78:	681a      	ldr	r2, [r3, #0]
 8016d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016d7e:	601a      	str	r2, [r3, #0]
}
 8016d80:	4770      	bx	lr

08016d82 <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8016d82:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8016d84:	681a      	ldr	r2, [r3, #0]
 8016d86:	f022 0202 	bic.w	r2, r2, #2
 8016d8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8016d8c:	681a      	ldr	r2, [r3, #0]
 8016d8e:	f022 0204 	bic.w	r2, r2, #4
 8016d92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8016d94:	681a      	ldr	r2, [r3, #0]
 8016d96:	f022 0220 	bic.w	r2, r2, #32
 8016d9a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	f022 0210 	bic.w	r2, r2, #16
 8016da2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 8016da4:	681a      	ldr	r2, [r3, #0]
 8016da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016daa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016db2:	601a      	str	r2, [r3, #0]
}
 8016db4:	4770      	bx	lr

08016db6 <stm32_i2c_master_mode_end>:
{
 8016db6:	4603      	mov	r3, r0
	const struct i2c_stm32_config *cfg = dev->config;
 8016db8:	6840      	ldr	r0, [r0, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 8016dba:	68c1      	ldr	r1, [r0, #12]
{
 8016dbc:	b510      	push	{r4, lr}
	struct i2c_stm32_data *data = dev->data;
 8016dbe:	691c      	ldr	r4, [r3, #16]
	stm32_i2c_disable_transfer_interrupts(dev);
 8016dc0:	f7ff ffdf 	bl	8016d82 <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8016dc4:	680b      	ldr	r3, [r1, #0]
 8016dc6:	f023 0301 	bic.w	r3, r3, #1
 8016dca:	600b      	str	r3, [r1, #0]
	z_impl_k_sem_give(sem);
 8016dcc:	4620      	mov	r0, r4
}
 8016dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dd2:	f7f9 b9f1 	b.w	80101b8 <z_impl_k_sem_give>

08016dd6 <stm32_i2c_event_isr>:
	struct i2c_stm32_data *data = dev->data;
 8016dd6:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8016dd8:	6843      	ldr	r3, [r0, #4]
	if (data->current.len) {
 8016dda:	6c8a      	ldr	r2, [r1, #72]	; 0x48
	I2C_TypeDef *i2c = cfg->i2c;
 8016ddc:	68db      	ldr	r3, [r3, #12]
{
 8016dde:	b510      	push	{r4, lr}
	if (data->current.len) {
 8016de0:	b182      	cbz	r2, 8016e04 <stm32_i2c_event_isr+0x2e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8016de2:	699c      	ldr	r4, [r3, #24]
			LL_I2C_TransmitData8(i2c, *data->current.buf);
 8016de4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8016de6:	07a4      	lsls	r4, r4, #30
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8016de8:	bf44      	itt	mi
 8016dea:	7814      	ldrbmi	r4, [r2, #0]
 8016dec:	629c      	strmi	r4, [r3, #40]	; 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8016dee:	699c      	ldr	r4, [r3, #24]
 8016df0:	0764      	lsls	r4, r4, #29
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8016df2:	bf44      	itt	mi
 8016df4:	6a5c      	ldrmi	r4, [r3, #36]	; 0x24
 8016df6:	7014      	strbmi	r4, [r2, #0]
		data->current.buf++;
 8016df8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8016dfa:	3201      	adds	r2, #1
 8016dfc:	64ca      	str	r2, [r1, #76]	; 0x4c
		data->current.len--;
 8016dfe:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8016e00:	3a01      	subs	r2, #1
 8016e02:	648a      	str	r2, [r1, #72]	; 0x48
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8016e04:	699a      	ldr	r2, [r3, #24]
 8016e06:	06d2      	lsls	r2, r2, #27
 8016e08:	d414      	bmi.n	8016e34 <stm32_i2c_event_isr+0x5e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8016e0a:	699a      	ldr	r2, [r3, #24]
 8016e0c:	0694      	lsls	r4, r2, #26
 8016e0e:	d41c      	bmi.n	8016e4a <stm32_i2c_event_isr+0x74>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8016e10:	699a      	ldr	r2, [r3, #24]
 8016e12:	0652      	lsls	r2, r2, #25
 8016e14:	d402      	bmi.n	8016e1c <stm32_i2c_event_isr+0x46>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 8016e16:	699a      	ldr	r2, [r3, #24]
 8016e18:	0614      	lsls	r4, r2, #24
 8016e1a:	d515      	bpl.n	8016e48 <stm32_i2c_event_isr+0x72>
		if (data->current.msg->flags & I2C_MSG_STOP) {
 8016e1c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8016e1e:	7a12      	ldrb	r2, [r2, #8]
 8016e20:	0792      	lsls	r2, r2, #30
 8016e22:	d40d      	bmi.n	8016e40 <stm32_i2c_event_isr+0x6a>
			stm32_i2c_disable_transfer_interrupts(dev);
 8016e24:	6840      	ldr	r0, [r0, #4]
 8016e26:	f7ff ffac 	bl	8016d82 <stm32_i2c_disable_transfer_interrupts.isra.0>
}
 8016e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e2e:	4608      	mov	r0, r1
 8016e30:	f7f9 b9c2 	b.w	80101b8 <z_impl_k_sem_give>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8016e34:	69da      	ldr	r2, [r3, #28]
 8016e36:	f042 0210 	orr.w	r2, r2, #16
 8016e3a:	61da      	str	r2, [r3, #28]
		data->current.is_nack = 1U;
 8016e3c:	2201      	movs	r2, #1
 8016e3e:	63ca      	str	r2, [r1, #60]	; 0x3c
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8016e40:	685a      	ldr	r2, [r3, #4]
 8016e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016e46:	605a      	str	r2, [r3, #4]
}
 8016e48:	bd10      	pop	{r4, pc}
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8016e4a:	69da      	ldr	r2, [r3, #28]
 8016e4c:	f042 0220 	orr.w	r2, r2, #32
 8016e50:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8016e52:	685a      	ldr	r2, [r3, #4]
 8016e54:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8016e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e5c:	605a      	str	r2, [r3, #4]
	stm32_i2c_master_mode_end(dev);
 8016e5e:	f7ff bfaa 	b.w	8016db6 <stm32_i2c_master_mode_end>

08016e62 <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 8016e62:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8016e64:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8016e66:	68db      	ldr	r3, [r3, #12]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
 8016e68:	699a      	ldr	r2, [r3, #24]
 8016e6a:	0592      	lsls	r2, r2, #22
 8016e6c:	d507      	bpl.n	8016e7e <stm32_i2c_error_isr+0x1c>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 8016e6e:	69da      	ldr	r2, [r3, #28]
 8016e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016e74:	61da      	str	r2, [r3, #28]
		data->current.is_arlo = 1U;
 8016e76:	2301      	movs	r3, #1
 8016e78:	638b      	str	r3, [r1, #56]	; 0x38
	stm32_i2c_master_mode_end(dev);
 8016e7a:	f7ff bf9c 	b.w	8016db6 <stm32_i2c_master_mode_end>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
 8016e7e:	699a      	ldr	r2, [r3, #24]
 8016e80:	05d2      	lsls	r2, r2, #23
 8016e82:	d506      	bpl.n	8016e92 <stm32_i2c_error_isr+0x30>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 8016e84:	69da      	ldr	r2, [r3, #28]
 8016e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016e8a:	61da      	str	r2, [r3, #28]
		data->current.is_err = 1U;
 8016e8c:	2301      	movs	r3, #1
 8016e8e:	640b      	str	r3, [r1, #64]	; 0x40
		goto end;
 8016e90:	e7f3      	b.n	8016e7a <stm32_i2c_error_isr+0x18>
}
 8016e92:	4770      	bx	lr

08016e94 <stm32_i2c_msg_write>:
{
 8016e94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8016e98:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8016e9a:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8016e9c:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 8016ea0:	684f      	ldr	r7, [r1, #4]
 8016ea2:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 8016ea4:	680f      	ldr	r7, [r1, #0]
 8016ea6:	64e7      	str	r7, [r4, #76]	; 0x4c
	data->current.is_nack = 0U;
 8016ea8:	f04f 0c00 	mov.w	ip, #0
{
 8016eac:	4605      	mov	r5, r0
	data->current.is_write = 1U;
 8016eae:	2701      	movs	r7, #1
	data->current.is_err = 0U;
 8016eb0:	e9c4 cc0f 	strd	ip, ip, [r4, #60]	; 0x3c
	data->current.is_write = 1U;
 8016eb4:	6367      	str	r7, [r4, #52]	; 0x34
	data->current.msg = msg;
 8016eb6:	6461      	str	r1, [r4, #68]	; 0x44
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 8016eb8:	f8cd c000 	str.w	ip, [sp]
 8016ebc:	f7f6 fb5a 	bl	800d574 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 8016ec0:	6868      	ldr	r0, [r5, #4]
 8016ec2:	f7ff ff4c 	bl	8016d5e <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8016ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8016eca:	f043 0302 	orr.w	r3, r3, #2
 8016ece:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_sem_take(sem, timeout);
 8016ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	4620      	mov	r0, r4
 8016eda:	f7f9 f993 	bl	8010204 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8016ede:	b150      	cbz	r0, 8016ef6 <stm32_i2c_msg_write+0x62>
		stm32_i2c_master_mode_end(dev);
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	f7ff ff68 	bl	8016db6 <stm32_i2c_master_mode_end>
 8016ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016eee:	4620      	mov	r0, r4
 8016ef0:	f7f9 f988 	bl	8010204 <z_impl_k_sem_take>
		is_timeout = true;
 8016ef4:	4638      	mov	r0, r7
	if (data->current.is_nack || data->current.is_err ||
 8016ef6:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8016efa:	ea52 0503 	orrs.w	r5, r2, r3
	    data->current.is_arlo || is_timeout) {
 8016efe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (data->current.is_nack || data->current.is_err ||
 8016f00:	d104      	bne.n	8016f0c <stm32_i2c_msg_write+0x78>
 8016f02:	b921      	cbnz	r1, 8016f0e <stm32_i2c_msg_write+0x7a>
	    data->current.is_arlo || is_timeout) {
 8016f04:	b940      	cbnz	r0, 8016f18 <stm32_i2c_msg_write+0x84>
}
 8016f06:	b002      	add	sp, #8
 8016f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8016f0c:	b109      	cbz	r1, 8016f12 <stm32_i2c_msg_write+0x7e>
		data->current.is_arlo = 0U;
 8016f0e:	2100      	movs	r1, #0
 8016f10:	63a1      	str	r1, [r4, #56]	; 0x38
	if (data->current.is_nack) {
 8016f12:	b10a      	cbz	r2, 8016f18 <stm32_i2c_msg_write+0x84>
		data->current.is_nack = 0U;
 8016f14:	2200      	movs	r2, #0
 8016f16:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 8016f18:	b10b      	cbz	r3, 8016f1e <stm32_i2c_msg_write+0x8a>
		data->current.is_err = 0U;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	6423      	str	r3, [r4, #64]	; 0x40
	return -EIO;
 8016f1e:	f06f 0004 	mvn.w	r0, #4
 8016f22:	e7f0      	b.n	8016f06 <stm32_i2c_msg_write+0x72>

08016f24 <stm32_i2c_msg_read>:
{
 8016f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8016f28:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8016f2a:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8016f2c:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 8016f30:	684f      	ldr	r7, [r1, #4]
 8016f32:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 8016f34:	680f      	ldr	r7, [r1, #0]
 8016f36:	64e7      	str	r7, [r4, #76]	; 0x4c
{
 8016f38:	4605      	mov	r5, r0
	data->current.is_write = 0U;
 8016f3a:	2700      	movs	r7, #0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8016f3c:	f44f 6680 	mov.w	r6, #1024	; 0x400
	data->current.is_arlo = 0U;
 8016f40:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
	data->current.is_nack = 0U;
 8016f44:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
	data->current.msg = msg;
 8016f48:	6461      	str	r1, [r4, #68]	; 0x44
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8016f4a:	9600      	str	r6, [sp, #0]
 8016f4c:	f7f6 fb12 	bl	800d574 <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 8016f50:	6868      	ldr	r0, [r5, #4]
 8016f52:	f7ff ff04 	bl	8016d5e <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8016f56:	f8d8 3000 	ldr.w	r3, [r8]
 8016f5a:	f043 0304 	orr.w	r3, r3, #4
 8016f5e:	f8c8 3000 	str.w	r3, [r8]
 8016f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8016f66:	2300      	movs	r3, #0
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f7f9 f94b 	bl	8010204 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8016f6e:	b150      	cbz	r0, 8016f86 <stm32_i2c_msg_read+0x62>
		stm32_i2c_master_mode_end(dev);
 8016f70:	4628      	mov	r0, r5
 8016f72:	f7ff ff20 	bl	8016db6 <stm32_i2c_master_mode_end>
 8016f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f7e:	4620      	mov	r0, r4
 8016f80:	f7f9 f940 	bl	8010204 <z_impl_k_sem_take>
		is_timeout = true;
 8016f84:	2001      	movs	r0, #1
	if (data->current.is_nack || data->current.is_err ||
 8016f86:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8016f8a:	ea52 0503 	orrs.w	r5, r2, r3
	    data->current.is_arlo || is_timeout) {
 8016f8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (data->current.is_nack || data->current.is_err ||
 8016f90:	d104      	bne.n	8016f9c <stm32_i2c_msg_read+0x78>
 8016f92:	b921      	cbnz	r1, 8016f9e <stm32_i2c_msg_read+0x7a>
	    data->current.is_arlo || is_timeout) {
 8016f94:	b940      	cbnz	r0, 8016fa8 <stm32_i2c_msg_read+0x84>
}
 8016f96:	b002      	add	sp, #8
 8016f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8016f9c:	b109      	cbz	r1, 8016fa2 <stm32_i2c_msg_read+0x7e>
		data->current.is_arlo = 0U;
 8016f9e:	2100      	movs	r1, #0
 8016fa0:	63a1      	str	r1, [r4, #56]	; 0x38
	if (data->current.is_nack) {
 8016fa2:	b10a      	cbz	r2, 8016fa8 <stm32_i2c_msg_read+0x84>
		data->current.is_nack = 0U;
 8016fa4:	2200      	movs	r2, #0
 8016fa6:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 8016fa8:	b10b      	cbz	r3, 8016fae <stm32_i2c_msg_read+0x8a>
		data->current.is_err = 0U;
 8016faa:	2300      	movs	r3, #0
 8016fac:	6423      	str	r3, [r4, #64]	; 0x40
	return -EIO;
 8016fae:	f06f 0004 	mvn.w	r0, #4
 8016fb2:	e7f0      	b.n	8016f96 <stm32_i2c_msg_read+0x72>

08016fb4 <i2c_stm32_irq_config_func_i2c2>:
#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c2), okay)
STM32_I2C_INIT(i2c2);
 8016fb4:	b508      	push	{r3, lr}
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	4611      	mov	r1, r2
 8016fba:	2020      	movs	r0, #32
 8016fbc:	f7ed fe6a 	bl	8004c94 <z_arm_irq_priority_set>
 8016fc0:	2020      	movs	r0, #32
 8016fc2:	f7ed fe43 	bl	8004c4c <arch_irq_enable>
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	2021      	movs	r0, #33	; 0x21
 8016fca:	4611      	mov	r1, r2
 8016fcc:	f7ed fe62 	bl	8004c94 <z_arm_irq_priority_set>
 8016fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016fd4:	2021      	movs	r0, #33	; 0x21
 8016fd6:	f7ed be39 	b.w	8004c4c <arch_irq_enable>

08016fda <i2c_stm32_irq_config_func_i2c3>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c3), okay)
STM32_I2C_INIT(i2c3);
 8016fda:	b508      	push	{r3, lr}
 8016fdc:	2200      	movs	r2, #0
 8016fde:	4611      	mov	r1, r2
 8016fe0:	2030      	movs	r0, #48	; 0x30
 8016fe2:	f7ed fe57 	bl	8004c94 <z_arm_irq_priority_set>
 8016fe6:	2030      	movs	r0, #48	; 0x30
 8016fe8:	f7ed fe30 	bl	8004c4c <arch_irq_enable>
 8016fec:	2200      	movs	r2, #0
 8016fee:	2031      	movs	r0, #49	; 0x31
 8016ff0:	4611      	mov	r1, r2
 8016ff2:	f7ed fe4f 	bl	8004c94 <z_arm_irq_priority_set>
 8016ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016ffa:	2031      	movs	r0, #49	; 0x31
 8016ffc:	f7ed be26 	b.w	8004c4c <arch_irq_enable>

08017000 <i2c_stm32_transfer>:
{
 8017000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017004:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 8017006:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = dev->data;
 8017008:	6906      	ldr	r6, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 801700a:	f043 0304 	orr.w	r3, r3, #4
{
 801700e:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 8017010:	720b      	strb	r3, [r1, #8]
{
 8017012:	b087      	sub	sp, #28
 8017014:	4607      	mov	r7, r0
 8017016:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8017018:	460a      	mov	r2, r1
 801701a:	2301      	movs	r3, #1
 801701c:	42ab      	cmp	r3, r5
 801701e:	d90c      	bls.n	801703a <i2c_stm32_transfer+0x3a>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 8017020:	f106 0818 	add.w	r8, r6, #24
 8017024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801702c:	4640      	mov	r0, r8
 801702e:	f7f9 f8e9 	bl	8010204 <z_impl_k_sem_take>
	while (num_msgs > 0) {
 8017032:	3414      	adds	r4, #20
 8017034:	2300      	movs	r3, #0
 8017036:	ae03      	add	r6, sp, #12
 8017038:	e054      	b.n	80170e4 <i2c_stm32_transfer+0xe4>
			if (OPERATION(current) != OPERATION(next)) {
 801703a:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 801703c:	d20c      	bcs.n	8017058 <i2c_stm32_transfer+0x58>
			if (OPERATION(current) != OPERATION(next)) {
 801703e:	7d10      	ldrb	r0, [r2, #20]
 8017040:	ea80 0c01 	eor.w	ip, r0, r1
 8017044:	f01c 0f01 	tst.w	ip, #1
 8017048:	d001      	beq.n	801704e <i2c_stm32_transfer+0x4e>
				if (!(next->flags & I2C_MSG_RESTART)) {
 801704a:	0740      	lsls	r0, r0, #29
 801704c:	d501      	bpl.n	8017052 <i2c_stm32_transfer+0x52>
			if (current->flags & I2C_MSG_STOP) {
 801704e:	0789      	lsls	r1, r1, #30
 8017050:	d505      	bpl.n	801705e <i2c_stm32_transfer+0x5e>
 8017052:	f06f 0315 	mvn.w	r3, #21
 8017056:	e04c      	b.n	80170f2 <i2c_stm32_transfer+0xf2>
			current->flags |= I2C_MSG_STOP;
 8017058:	f041 0102 	orr.w	r1, r1, #2
 801705c:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 801705e:	3301      	adds	r3, #1
		current++;
 8017060:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8017062:	b2db      	uxtb	r3, r3
 8017064:	e7da      	b.n	801701c <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 8017066:	2d01      	cmp	r5, #1
 8017068:	bf14      	ite	ne
 801706a:	4623      	movne	r3, r4
 801706c:	2300      	moveq	r3, #0
 801706e:	9301      	str	r3, [sp, #4]
		ret = i2c_stm32_transaction(dev, *current, next_msg_flags, slave);
 8017070:	f1a4 0314 	sub.w	r3, r4, #20
 8017074:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017078:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const uint8_t saved_flags = msg.flags;
 801707c:	f89d b014 	ldrb.w	fp, [sp, #20]
	uint32_t rest = msg.len;
 8017080:	f8dd a010 	ldr.w	sl, [sp, #16]
		saved_flags & ~(I2C_MSG_STOP | I2C_MSG_RESTART);
 8017084:	f02b 0306 	bic.w	r3, fp, #6
	uint8_t combine_flags =
 8017088:	f88d 300b 	strb.w	r3, [sp, #11]
		if (msg.len > i2c_stm32_maxchunk) {
 801708c:	9b04      	ldr	r3, [sp, #16]
 801708e:	2bff      	cmp	r3, #255	; 0xff
			msg.len = i2c_stm32_maxchunk;
 8017090:	bf83      	ittte	hi
 8017092:	23ff      	movhi	r3, #255	; 0xff
 8017094:	9304      	strhi	r3, [sp, #16]
			msg.flags &= ~I2C_MSG_STOP;
 8017096:	f89d 3014 	ldrbhi.w	r3, [sp, #20]
			msg.flags = saved_flags;
 801709a:	f88d b014 	strbls.w	fp, [sp, #20]
			msg.flags &= ~I2C_MSG_STOP;
 801709e:	bf84      	itt	hi
 80170a0:	f023 0302 	bichi.w	r3, r3, #2
 80170a4:	f88d 3014 	strbhi.w	r3, [sp, #20]
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 80170a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
			flagsp = next_msg_flags;
 80170ac:	bf94      	ite	ls
 80170ae:	9a01      	ldrls	r2, [sp, #4]
			flagsp = &combine_flags;
 80170b0:	f10d 020b 	addhi.w	r2, sp, #11
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 80170b4:	f013 0f01 	tst.w	r3, #1
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 80170b8:	4631      	mov	r1, r6
 80170ba:	464b      	mov	r3, r9
 80170bc:	4638      	mov	r0, r7
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 80170be:	d11c      	bne.n	80170fa <i2c_stm32_transfer+0xfa>
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 80170c0:	f7ff fee8 	bl	8016e94 <stm32_i2c_msg_write>
		if (ret < 0) {
 80170c4:	2800      	cmp	r0, #0
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 80170c6:	4603      	mov	r3, r0
		if (ret < 0) {
 80170c8:	db0e      	blt.n	80170e8 <i2c_stm32_transfer+0xe8>
		rest -= msg.len;
 80170ca:	9904      	ldr	r1, [sp, #16]
		msg.buf += msg.len;
 80170cc:	9a03      	ldr	r2, [sp, #12]
		rest -= msg.len;
 80170ce:	ebaa 0a01 	sub.w	sl, sl, r1
		msg.buf += msg.len;
 80170d2:	440a      	add	r2, r1
		msg.len = rest;
 80170d4:	e9cd 2a03 	strd	r2, sl, [sp, #12]
	} while (rest > 0U);
 80170d8:	f1ba 0f00 	cmp.w	sl, #0
 80170dc:	d1d6      	bne.n	801708c <i2c_stm32_transfer+0x8c>
		num_msgs--;
 80170de:	3d01      	subs	r5, #1
 80170e0:	b2ed      	uxtb	r5, r5
 80170e2:	340c      	adds	r4, #12
	while (num_msgs > 0) {
 80170e4:	2d00      	cmp	r5, #0
 80170e6:	d1be      	bne.n	8017066 <i2c_stm32_transfer+0x66>
 80170e8:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 80170ea:	4640      	mov	r0, r8
 80170ec:	f7f9 f864 	bl	80101b8 <z_impl_k_sem_give>
}
 80170f0:	9b01      	ldr	r3, [sp, #4]
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	b007      	add	sp, #28
 80170f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 80170fa:	f7ff ff13 	bl	8016f24 <stm32_i2c_msg_read>
 80170fe:	e7e1      	b.n	80170c4 <i2c_stm32_transfer+0xc4>

08017100 <bme280_reg_write.isra.0>:
	return cfg->bus_io->write(&cfg->bus, reg, val);
 8017100:	6883      	ldr	r3, [r0, #8]
 8017102:	689b      	ldr	r3, [r3, #8]
 8017104:	4718      	bx	r3

08017106 <bme280_reg_read.isra.0>:
static inline int bme280_reg_read(const struct device *dev,
 8017106:	b410      	push	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
 8017108:	6884      	ldr	r4, [r0, #8]
 801710a:	6864      	ldr	r4, [r4, #4]
 801710c:	46a4      	mov	ip, r4
}
 801710e:	bc10      	pop	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
 8017110:	4760      	bx	ip

08017112 <bme280_wait_until_ready>:
{
 8017112:	b513      	push	{r0, r1, r4, lr}
	uint8_t status = 0;
 8017114:	2300      	movs	r3, #0
{
 8017116:	4604      	mov	r4, r0
	uint8_t status = 0;
 8017118:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_sleep(timeout);
 801711c:	2100      	movs	r1, #0
 801711e:	201e      	movs	r0, #30
 8017120:	f7f9 fc8a 	bl	8010a38 <z_impl_k_sleep>
		ret = bme280_reg_read(dev, BME280_REG_STATUS, &status, 1);
 8017124:	6860      	ldr	r0, [r4, #4]
 8017126:	2301      	movs	r3, #1
 8017128:	f10d 0207 	add.w	r2, sp, #7
 801712c:	21f3      	movs	r1, #243	; 0xf3
 801712e:	f7ff ffea 	bl	8017106 <bme280_reg_read.isra.0>
		if (ret < 0) {
 8017132:	2800      	cmp	r0, #0
 8017134:	db04      	blt.n	8017140 <bme280_wait_until_ready+0x2e>
	} while (status & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE));
 8017136:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801713a:	f013 0009 	ands.w	r0, r3, #9
 801713e:	d1ed      	bne.n	801711c <bme280_wait_until_ready+0xa>
}
 8017140:	b002      	add	sp, #8
 8017142:	bd10      	pop	{r4, pc}

08017144 <bme280_sample_fetch>:
{
 8017144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bme280_data *data = dev->data;
 8017148:	6905      	ldr	r5, [r0, #16]
{
 801714a:	4604      	mov	r4, r0
	ret = bme280_wait_until_ready(dev);
 801714c:	f7ff ffe1 	bl	8017112 <bme280_wait_until_ready>
	if (ret < 0) {
 8017150:	2800      	cmp	r0, #0
 8017152:	f2c0 8103 	blt.w	801735c <bme280_sample_fetch+0x218>
	if (data->chip_id == BME280_CHIP_ID) {
 8017156:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
 801715a:	6860      	ldr	r0, [r4, #4]
		size = 8;
 801715c:	2b60      	cmp	r3, #96	; 0x60
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
 801715e:	bf14      	ite	ne
 8017160:	2306      	movne	r3, #6
 8017162:	2308      	moveq	r3, #8
 8017164:	466a      	mov	r2, sp
 8017166:	21f7      	movs	r1, #247	; 0xf7
 8017168:	f7ff ffcd 	bl	8017106 <bme280_reg_read.isra.0>
	if (ret < 0) {
 801716c:	2800      	cmp	r0, #0
 801716e:	f2c0 80f5 	blt.w	801735c <bme280_sample_fetch+0x218>
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
 8017172:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017176:	f89d 2003 	ldrb.w	r2, [sp, #3]
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 801717a:	f8b5 9006 	ldrh.w	r9, [r5, #6]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 801717e:	f89d c000 	ldrb.w	ip, [sp]
 8017182:	f89d e001 	ldrb.w	lr, [sp, #1]
 8017186:	f89d 1002 	ldrb.w	r1, [sp, #2]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
 801718a:	011b      	lsls	r3, r3, #4
 801718c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8017190:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017194:	ea43 1412 	orr.w	r4, r3, r2, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 8017198:	882a      	ldrh	r2, [r5, #0]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 801719a:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 801719e:	0052      	lsls	r2, r2, #1
 80171a0:	ebc2 02d4 	rsb	r2, r2, r4, lsr #3
		((int32_t)data->dig_t2)) >> 11;
 80171a4:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 80171a8:	4362      	muls	r2, r4
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 80171aa:	fb03 f403 	mul.w	r4, r3, r3
		((int32_t)data->dig_t3)) >> 14;
 80171ae:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
		  ((adc_temp >> 4) - ((int32_t)data->dig_t1))) >> 12) *
 80171b2:	1324      	asrs	r4, r4, #12
 80171b4:	435c      	muls	r4, r3
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 80171b6:	13a4      	asrs	r4, r4, #14
	data->t_fine = var1 + var2;
 80171b8:	eb04 24e2 	add.w	r4, r4, r2, asr #11
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
 80171bc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80171c0:	3380      	adds	r3, #128	; 0x80
 80171c2:	121b      	asrs	r3, r3, #8
 80171c4:	f5a4 38fa 	sub.w	r8, r4, #128000	; 0x1f400
 80171c8:	626b      	str	r3, [r5, #36]	; 0x24
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80171ca:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
	data->t_fine = var1 + var2;
 80171ce:	632c      	str	r4, [r5, #48]	; 0x30
	var2 = var1 * var1 * (int64_t)data->dig_p6;
 80171d0:	fb88 6a08 	smull	r6, sl, r8, r8
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80171d4:	17d8      	asrs	r0, r3, #31
 80171d6:	fb03 f20a 	mul.w	r2, r3, sl
 80171da:	fb06 2200 	mla	r2, r6, r0, r2
 80171de:	fba3 3006 	umull	r3, r0, r3, r6
 80171e2:	0a1f      	lsrs	r7, r3, #8
		((var1 * (int64_t)data->dig_p2) << 12);
 80171e4:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80171e8:	4410      	add	r0, r2
		((var1 * (int64_t)data->dig_p2) << 12);
 80171ea:	fb83 3208 	smull	r3, r2, r3, r8
 80171ee:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80171f0:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
		((var1 * (int64_t)data->dig_p2) << 12);
 80171f4:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
 80171f8:	031b      	lsls	r3, r3, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80171fa:	18fb      	adds	r3, r7, r3
 80171fc:	eb42 2220 	adc.w	r2, r2, r0, asr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 8017200:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017204:	fba3 3709 	umull	r3, r7, r3, r9
 8017208:	fb09 7702 	mla	r7, r9, r2, r7
 801720c:	17fb      	asrs	r3, r7, #31
 801720e:	107a      	asrs	r2, r7, #1
	if (var1 == 0) {
 8017210:	ea53 0767 	orrs.w	r7, r3, r7, asr #1
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 8017214:	f04f 0000 	mov.w	r0, #0
	if (var1 == 0) {
 8017218:	d066      	beq.n	80172e8 <bme280_sample_fetch+0x1a4>
	var2 = var1 * var1 * (int64_t)data->dig_p6;
 801721a:	f9b5 9010 	ldrsh.w	r9, [r5, #16]
 801721e:	ea4f 7be9 	mov.w	fp, r9, asr #31
 8017222:	fb09 f70a 	mul.w	r7, r9, sl
 8017226:	fb06 770b 	mla	r7, r6, fp, r7
 801722a:	fba9 9606 	umull	r9, r6, r9, r6
 801722e:	4437      	add	r7, r6
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8017230:	f9b5 600e 	ldrsh.w	r6, [r5, #14]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 8017234:	0909      	lsrs	r1, r1, #4
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8017236:	fb86 6808 	smull	r6, r8, r6, r8
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 801723a:	ea41 110e 	orr.w	r1, r1, lr, lsl #4
 801723e:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8017242:	ea4f 4848 	mov.w	r8, r8, lsl #17
	p = 1048576 - adc_press;
 8017246:	f5c1 1180 	rsb	r1, r1, #1048576	; 0x100000
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 801724a:	ea48 38d6 	orr.w	r8, r8, r6, lsr #15
 801724e:	0476      	lsls	r6, r6, #17
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 8017250:	f9b5 e00c 	ldrsh.w	lr, [r5, #12]
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8017254:	eb16 0609 	adds.w	r6, r6, r9
	p = (((p << 31) - var2) * 3125) / var1;
 8017258:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 801725c:	eb47 0708 	adc.w	r7, r7, r8
	p = (((p << 31) - var2) * 3125) / var1;
 8017260:	ea4c 0c51 	orr.w	ip, ip, r1, lsr #1
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 8017264:	1980      	adds	r0, r0, r6
	p = (((p << 31) - var2) * 3125) / var1;
 8017266:	07c9      	lsls	r1, r1, #31
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 8017268:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
 801726c:	1a08      	subs	r0, r1, r0
 801726e:	f640 4635 	movw	r6, #3125	; 0xc35
 8017272:	eb6c 0c07 	sbc.w	ip, ip, r7
 8017276:	fba0 0106 	umull	r0, r1, r0, r6
 801727a:	fb06 110c 	mla	r1, r6, ip, r1
 801727e:	f7e9 fe53 	bl	8000f28 <__aeabi_ldivmod>
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
 8017282:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8017286:	134e      	asrs	r6, r1, #13
 8017288:	0b43      	lsrs	r3, r0, #13
 801728a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 801728e:	fb02 f706 	mul.w	r7, r2, r6
 8017292:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8017296:	fb03 770e 	mla	r7, r3, lr, r7
 801729a:	fba2 2e03 	umull	r2, lr, r2, r3
 801729e:	44be      	add	lr, r7
 80172a0:	fb02 f706 	mul.w	r7, r2, r6
 80172a4:	fb03 770e 	mla	r7, r3, lr, r7
 80172a8:	fba2 2303 	umull	r2, r3, r2, r3
 80172ac:	441f      	add	r7, r3
 80172ae:	0e53      	lsrs	r3, r2, #25
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
 80172b0:	f9b5 6014 	ldrsh.w	r6, [r5, #20]
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
 80172b4:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
 80172b8:	181b      	adds	r3, r3, r0
 80172ba:	eb41 6767 	adc.w	r7, r1, r7, asr #25
	p = (((p << 31) - var2) * 3125) / var1;
 80172be:	4684      	mov	ip, r0
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
 80172c0:	17f2      	asrs	r2, r6, #31
 80172c2:	4371      	muls	r1, r6
 80172c4:	fb02 110c 	mla	r1, r2, ip, r1
 80172c8:	fba6 0600 	umull	r0, r6, r6, r0
 80172cc:	4431      	add	r1, r6
 80172ce:	0cc0      	lsrs	r0, r0, #19
 80172d0:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
 80172d4:	1818      	adds	r0, r3, r0
 80172d6:	eb47 47e1 	adc.w	r7, r7, r1, asr #19
 80172da:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80172de:	0a00      	lsrs	r0, r0, #8
 80172e0:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
	data->comp_press = (uint32_t)p;
 80172e4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	if (data->chip_id == BME280_CHIP_ID) {
 80172e8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80172ec:	62a8      	str	r0, [r5, #40]	; 0x28
 80172ee:	2b60      	cmp	r3, #96	; 0x60
 80172f0:	d133      	bne.n	801735a <bme280_sample_fetch+0x216>
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 80172f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80172f6:	ba5b      	rev16	r3, r3
 80172f8:	b29a      	uxth	r2, r3
 80172fa:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
 80172fe:	051b      	lsls	r3, r3, #20
 8017300:	ebc3 3382 	rsb	r3, r3, r2, lsl #14
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
 8017304:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
	h = (data->t_fine - ((int32_t)76800));
 8017308:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 801730c:	fb01 3312 	mls	r3, r1, r2, r3
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
 8017310:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8017314:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8017316:	7f2b      	ldrb	r3, [r5, #28]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
 8017318:	f995 4022 	ldrsb.w	r4, [r5, #34]	; 0x22
 801731c:	434b      	muls	r3, r1
 801731e:	434c      	muls	r4, r1
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8017320:	12db      	asrs	r3, r3, #11
 8017322:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
 8017326:	12a4      	asrs	r4, r4, #10
 8017328:	4363      	muls	r3, r4
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
 801732a:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 801732e:	129b      	asrs	r3, r3, #10
 8017330:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
 8017334:	434b      	muls	r3, r1
 8017336:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801733a:	139b      	asrs	r3, r3, #14
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 801733c:	4353      	muls	r3, r2
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
 801733e:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h1)) >> 4));
 8017340:	7e29      	ldrb	r1, [r5, #24]
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
 8017342:	4352      	muls	r2, r2
 8017344:	11d2      	asrs	r2, r2, #7
 8017346:	434a      	muls	r2, r1
 8017348:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	h = (h > 419430400 ? 419430400 : h);
 801734c:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8017350:	bfa8      	it	ge
 8017352:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	data->comp_humidity = (uint32_t)(h >> 12);
 8017356:	131b      	asrs	r3, r3, #12
 8017358:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
 801735a:	2000      	movs	r0, #0
}
 801735c:	b003      	add	sp, #12
 801735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017362 <bme280_chip_init>:

	return 0;
}

static int bme280_chip_init(const struct device *dev)
{
 8017362:	b570      	push	{r4, r5, r6, lr}
	struct bme280_data *data = dev->data;
 8017364:	6905      	ldr	r5, [r0, #16]
{
 8017366:	4604      	mov	r4, r0
 8017368:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->check(&cfg->bus);
 801736a:	6883      	ldr	r3, [r0, #8]
{
 801736c:	b088      	sub	sp, #32
	return cfg->bus_io->check(&cfg->bus);
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	4798      	blx	r3
	int err;

	err = bme280_bus_check(dev);
	if (err < 0) {
 8017372:	2800      	cmp	r0, #0
 8017374:	f2c0 8087 	blt.w	8017486 <bme280_chip_init+0x124>
		LOG_DBG("bus check failed: %d", err);
		return err;
	}

	err = bme280_reg_read(dev, BME280_REG_ID, &data->chip_id, 1);
 8017378:	6860      	ldr	r0, [r4, #4]
 801737a:	2301      	movs	r3, #1
 801737c:	f105 0234 	add.w	r2, r5, #52	; 0x34
 8017380:	21d0      	movs	r1, #208	; 0xd0
 8017382:	f7ff fec0 	bl	8017106 <bme280_reg_read.isra.0>
	if (err < 0) {
 8017386:	2800      	cmp	r0, #0
 8017388:	db7d      	blt.n	8017486 <bme280_chip_init+0x124>
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
		LOG_DBG("ID OK");
	} else if (data->chip_id == BMP280_CHIP_ID_MP ||
 801738a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801738e:	3b56      	subs	r3, #86	; 0x56
 8017390:	b2db      	uxtb	r3, r3
 8017392:	2b0a      	cmp	r3, #10
 8017394:	f200 808e 	bhi.w	80174b4 <bme280_chip_init+0x152>
 8017398:	f240 4205 	movw	r2, #1029	; 0x405
 801739c:	fa22 f303 	lsr.w	r3, r2, r3
 80173a0:	07db      	lsls	r3, r3, #31
 80173a2:	f140 8087 	bpl.w	80174b4 <bme280_chip_init+0x152>
	} else {
		LOG_DBG("bad chip id 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme280_reg_write(dev, BME280_REG_RESET, BME280_CMD_SOFT_RESET);
 80173a6:	22b6      	movs	r2, #182	; 0xb6
 80173a8:	21e0      	movs	r1, #224	; 0xe0
 80173aa:	6860      	ldr	r0, [r4, #4]
 80173ac:	f7ff fea8 	bl	8017100 <bme280_reg_write.isra.0>
	if (err < 0) {
		LOG_DBG("Soft-reset failed: %d", err);
	}

	err = bme280_wait_until_ready(dev);
 80173b0:	4620      	mov	r0, r4
 80173b2:	f7ff feae 	bl	8017112 <bme280_wait_until_ready>
	if (err < 0) {
 80173b6:	2800      	cmp	r0, #0
 80173b8:	db65      	blt.n	8017486 <bme280_chip_init+0x124>
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
 80173ba:	6860      	ldr	r0, [r4, #4]
	struct bme280_data *data = dev->data;
 80173bc:	6926      	ldr	r6, [r4, #16]
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
 80173be:	2318      	movs	r3, #24
 80173c0:	aa02      	add	r2, sp, #8
 80173c2:	2188      	movs	r1, #136	; 0x88
 80173c4:	f7ff fe9f 	bl	8017106 <bme280_reg_read.isra.0>
	if (err < 0) {
 80173c8:	2800      	cmp	r0, #0
 80173ca:	db5c      	blt.n	8017486 <bme280_chip_init+0x124>
	data->dig_t1 = sys_le16_to_cpu(buf[0]);
 80173cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80173d0:	8033      	strh	r3, [r6, #0]
	data->dig_t2 = sys_le16_to_cpu(buf[1]);
 80173d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80173d6:	8073      	strh	r3, [r6, #2]
	data->dig_t3 = sys_le16_to_cpu(buf[2]);
 80173d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80173dc:	80b3      	strh	r3, [r6, #4]
	data->dig_p1 = sys_le16_to_cpu(buf[3]);
 80173de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80173e2:	80f3      	strh	r3, [r6, #6]
	data->dig_p2 = sys_le16_to_cpu(buf[4]);
 80173e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80173e8:	8133      	strh	r3, [r6, #8]
	data->dig_p3 = sys_le16_to_cpu(buf[5]);
 80173ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80173ee:	8173      	strh	r3, [r6, #10]
	data->dig_p4 = sys_le16_to_cpu(buf[6]);
 80173f0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80173f4:	81b3      	strh	r3, [r6, #12]
	data->dig_p5 = sys_le16_to_cpu(buf[7]);
 80173f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80173fa:	81f3      	strh	r3, [r6, #14]
	data->dig_p6 = sys_le16_to_cpu(buf[8]);
 80173fc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017400:	8233      	strh	r3, [r6, #16]
	data->dig_p7 = sys_le16_to_cpu(buf[9]);
 8017402:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8017406:	8273      	strh	r3, [r6, #18]
	data->dig_p8 = sys_le16_to_cpu(buf[10]);
 8017408:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801740c:	82b3      	strh	r3, [r6, #20]
	data->dig_p9 = sys_le16_to_cpu(buf[11]);
 801740e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017412:	82f3      	strh	r3, [r6, #22]
	if (data->chip_id == BME280_CHIP_ID) {
 8017414:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8017418:	2b60      	cmp	r3, #96	; 0x60
 801741a:	d129      	bne.n	8017470 <bme280_chip_init+0x10e>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART1,
 801741c:	6860      	ldr	r0, [r4, #4]
 801741e:	2301      	movs	r3, #1
 8017420:	f106 0218 	add.w	r2, r6, #24
 8017424:	21a1      	movs	r1, #161	; 0xa1
 8017426:	f7ff fe6e 	bl	8017106 <bme280_reg_read.isra.0>
		if (err < 0) {
 801742a:	2800      	cmp	r0, #0
 801742c:	db2b      	blt.n	8017486 <bme280_chip_init+0x124>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART2, hbuf, 7);
 801742e:	6860      	ldr	r0, [r4, #4]
 8017430:	2307      	movs	r3, #7
 8017432:	466a      	mov	r2, sp
 8017434:	21e1      	movs	r1, #225	; 0xe1
 8017436:	f7ff fe66 	bl	8017106 <bme280_reg_read.isra.0>
		if (err < 0) {
 801743a:	2800      	cmp	r0, #0
 801743c:	db23      	blt.n	8017486 <bme280_chip_init+0x124>
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
 801743e:	f8bd 3000 	ldrh.w	r3, [sp]
 8017442:	8373      	strh	r3, [r6, #26]
		data->dig_h3 = hbuf[2];
 8017444:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8017448:	7733      	strb	r3, [r6, #28]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
 801744a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801744e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8017452:	f003 020f 	and.w	r2, r3, #15
 8017456:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 801745a:	83f2      	strh	r2, [r6, #30]
		data->dig_h5 = ((hbuf[4] >> 4) & 0x0F) | (hbuf[5] << 4);
 801745c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017460:	091b      	lsrs	r3, r3, #4
 8017462:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8017466:	8433      	strh	r3, [r6, #32]
		data->dig_h6 = hbuf[6];
 8017468:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801746c:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	err = bme280_read_compensation(dev);
	if (err < 0) {
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
 8017470:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8017474:	2b60      	cmp	r3, #96	; 0x60
 8017476:	d008      	beq.n	801748a <bme280_chip_init+0x128>
			LOG_DBG("CTRL_HUM write failed: %d", err);
			return err;
		}
	}

	err = bme280_reg_write(dev, BME280_REG_CTRL_MEAS,
 8017478:	6860      	ldr	r0, [r4, #4]
 801747a:	2257      	movs	r2, #87	; 0x57
 801747c:	21f4      	movs	r1, #244	; 0xf4
 801747e:	f7ff fe3f 	bl	8017100 <bme280_reg_write.isra.0>
			       BME280_CTRL_MEAS_VAL);
	if (err < 0) {
 8017482:	2800      	cmp	r0, #0
 8017484:	da09      	bge.n	801749a <bme280_chip_init+0x138>
	/* Wait for the sensor to be ready */
	k_sleep(K_MSEC(1));

	LOG_DBG("\"%s\" OK", dev->name);
	return 0;
}
 8017486:	b008      	add	sp, #32
 8017488:	bd70      	pop	{r4, r5, r6, pc}
		err = bme280_reg_write(dev, BME280_REG_CTRL_HUM,
 801748a:	6860      	ldr	r0, [r4, #4]
 801748c:	2205      	movs	r2, #5
 801748e:	21f2      	movs	r1, #242	; 0xf2
 8017490:	f7ff fe36 	bl	8017100 <bme280_reg_write.isra.0>
		if (err < 0) {
 8017494:	2800      	cmp	r0, #0
 8017496:	daef      	bge.n	8017478 <bme280_chip_init+0x116>
 8017498:	e7f5      	b.n	8017486 <bme280_chip_init+0x124>
	err = bme280_reg_write(dev, BME280_REG_CONFIG,
 801749a:	6860      	ldr	r0, [r4, #4]
 801749c:	22a8      	movs	r2, #168	; 0xa8
 801749e:	21f5      	movs	r1, #245	; 0xf5
 80174a0:	f7ff fe2e 	bl	8017100 <bme280_reg_write.isra.0>
	if (err < 0) {
 80174a4:	2800      	cmp	r0, #0
 80174a6:	dbee      	blt.n	8017486 <bme280_chip_init+0x124>
 80174a8:	200a      	movs	r0, #10
 80174aa:	2100      	movs	r1, #0
 80174ac:	f7f9 fac4 	bl	8010a38 <z_impl_k_sleep>
	return 0;
 80174b0:	2000      	movs	r0, #0
 80174b2:	e7e8      	b.n	8017486 <bme280_chip_init+0x124>
		return -ENOTSUP;
 80174b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80174b8:	e7e5      	b.n	8017486 <bme280_chip_init+0x124>

080174ba <bme280_bus_check_i2c>:

#include "bme280.h"

#if BME280_BUS_I2C
static int bme280_bus_check_i2c(const union bme280_bus *bus)
{
 80174ba:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
 80174bc:	6800      	ldr	r0, [r0, #0]
 80174be:	f001 fc53 	bl	8018d68 <z_device_is_ready>
 80174c2:	2800      	cmp	r0, #0
}
 80174c4:	bf0c      	ite	eq
 80174c6:	f06f 0012 	mvneq.w	r0, #18
 80174ca:	2000      	movne	r0, #0
 80174cc:	bd08      	pop	{r3, pc}

080174ce <bme280_reg_read_i2c>:

static int bme280_reg_read_i2c(const union bme280_bus *bus,
			       uint8_t start, uint8_t *buf, int size)
{
 80174ce:	b530      	push	{r4, r5, lr}
 80174d0:	b089      	sub	sp, #36	; 0x24
 80174d2:	4604      	mov	r4, r0
 80174d4:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 80174d8:	f10d 0107 	add.w	r1, sp, #7
 80174dc:	461d      	mov	r5, r3
 80174de:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 80174e0:	2101      	movs	r1, #1
	msg[1].len = num_read;
 80174e2:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
 80174e6:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80174e8:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 80174ea:	2100      	movs	r1, #0
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
	return i2c_burst_read(spec->bus, spec->addr,
 80174ec:	6800      	ldr	r0, [r0, #0]
 80174ee:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 80174f0:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80174f4:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80174f8:	6882      	ldr	r2, [r0, #8]
 80174fa:	a902      	add	r1, sp, #8
 80174fc:	6894      	ldr	r4, [r2, #8]
 80174fe:	2202      	movs	r2, #2
 8017500:	47a0      	blx	r4
	return i2c_burst_read_dt(&bus->i2c, start, buf, size);
}
 8017502:	b009      	add	sp, #36	; 0x24
 8017504:	bd30      	pop	{r4, r5, pc}

08017506 <bme280_reg_write_i2c>:

static int bme280_reg_write_i2c(const union bme280_bus *bus,
				uint8_t reg, uint8_t val)
{
 8017506:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017508:	4603      	mov	r3, r0
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
 801750a:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
 801750e:	2202      	movs	r2, #2
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
 8017510:	6800      	ldr	r0, [r0, #0]
 8017512:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
 8017514:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
 8017518:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 801751c:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 801751e:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8017522:	6882      	ldr	r2, [r0, #8]
 8017524:	a901      	add	r1, sp, #4
 8017526:	6894      	ldr	r4, [r2, #8]
 8017528:	2201      	movs	r2, #1
 801752a:	47a0      	blx	r4
	return i2c_reg_write_byte_dt(&bus->i2c, reg, val);
}
 801752c:	b004      	add	sp, #16
 801752e:	bd10      	pop	{r4, pc}

08017530 <sht3xd_compute_crc>:
{
 8017530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017532:	0a03      	lsrs	r3, r0, #8
 8017534:	f88d 300c 	strb.w	r3, [sp, #12]
	return crc8(buf, 2, 0x31, 0xFF, false);
 8017538:	2300      	movs	r3, #0
	dst[1] = val;
 801753a:	f88d 000d 	strb.w	r0, [sp, #13]
 801753e:	9300      	str	r3, [sp, #0]
 8017540:	2231      	movs	r2, #49	; 0x31
 8017542:	23ff      	movs	r3, #255	; 0xff
 8017544:	2102      	movs	r1, #2
 8017546:	a803      	add	r0, sp, #12
 8017548:	f7fc fa90 	bl	8013a6c <crc8>
}
 801754c:	b005      	add	sp, #20
 801754e:	f85d fb04 	ldr.w	pc, [sp], #4

08017552 <sht3xd_sample_fetch>:
{
 8017552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017554:	b08b      	sub	sp, #44	; 0x2c
	const struct sht3xd_config *config = dev->config;
 8017556:	6843      	ldr	r3, [r0, #4]
	struct sht3xd_data *data = dev->data;
 8017558:	6907      	ldr	r7, [r0, #16]
 801755a:	2400      	movs	r4, #0
	dst[0] = val >> 8;
 801755c:	22e0      	movs	r2, #224	; 0xe0
 801755e:	f88d 2004 	strb.w	r2, [sp, #4]
	msg[1].buf = (uint8_t *)read_buf;
 8017562:	a902      	add	r1, sp, #8
	dst[1] = val;
 8017564:	f88d 4005 	strb.w	r4, [sp, #5]
	return i2c_write_read(spec->bus, spec->addr,
 8017568:	6818      	ldr	r0, [r3, #0]
 801756a:	889b      	ldrh	r3, [r3, #4]
	msg[1].buf = (uint8_t *)read_buf;
 801756c:	9107      	str	r1, [sp, #28]
	msg[0].buf = (uint8_t *)write_buf;
 801756e:	aa01      	add	r2, sp, #4
	msg[1].len = num_read;
 8017570:	2106      	movs	r1, #6
	msg[0].buf = (uint8_t *)write_buf;
 8017572:	9204      	str	r2, [sp, #16]
	msg[1].len = num_read;
 8017574:	9108      	str	r1, [sp, #32]
	msg[0].len = num_write;
 8017576:	2202      	movs	r2, #2
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8017578:	2107      	movs	r1, #7
	msg[0].len = num_write;
 801757a:	9205      	str	r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 801757c:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8017580:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 8017584:	6881      	ldr	r1, [r0, #8]
 8017586:	688d      	ldr	r5, [r1, #8]
 8017588:	a904      	add	r1, sp, #16
 801758a:	47a8      	blx	r5
	if (i2c_write_read_dt(&config->bus, tx_buf, sizeof(tx_buf),
 801758c:	42a0      	cmp	r0, r4
 801758e:	da03      	bge.n	8017598 <sht3xd_sample_fetch+0x46>
		return -EIO;
 8017590:	f06f 0004 	mvn.w	r0, #4
}
 8017594:	b00b      	add	sp, #44	; 0x2c
 8017596:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((uint16_t)src[0] << 8) | src[1];
 8017598:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801759c:	ba76      	rev16	r6, r6
	if (sht3xd_compute_crc(t_sample) != rx_buf[2]) {
 801759e:	b2b0      	uxth	r0, r6
 80175a0:	f7ff ffc6 	bl	8017530 <sht3xd_compute_crc>
 80175a4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80175a8:	4283      	cmp	r3, r0
 80175aa:	d1f1      	bne.n	8017590 <sht3xd_sample_fetch+0x3e>
 80175ac:	f8bd 500b 	ldrh.w	r5, [sp, #11]
 80175b0:	ba6d      	rev16	r5, r5
	if (sht3xd_compute_crc(rh_sample) != rx_buf[5]) {
 80175b2:	b2a8      	uxth	r0, r5
 80175b4:	f7ff ffbc 	bl	8017530 <sht3xd_compute_crc>
 80175b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80175bc:	4283      	cmp	r3, r0
 80175be:	d1e7      	bne.n	8017590 <sht3xd_sample_fetch+0x3e>
	data->t_sample = t_sample;
 80175c0:	803e      	strh	r6, [r7, #0]
	data->rh_sample = rh_sample;
 80175c2:	807d      	strh	r5, [r7, #2]
	return 0;
 80175c4:	4620      	mov	r0, r4
 80175c6:	e7e5      	b.n	8017594 <sht3xd_sample_fetch+0x42>

080175c8 <sht3xd_write_command>:
{
 80175c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct sht3xd_config *config = dev->config;
 80175ca:	6843      	ldr	r3, [r0, #4]
	dst[1] = val;
 80175cc:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[0] = val >> 8;
 80175d0:	0a0a      	lsrs	r2, r1, #8
 80175d2:	f88d 2000 	strb.w	r2, [sp]
	msg.len = num_bytes;
 80175d6:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
 80175d8:	6818      	ldr	r0, [r3, #0]
 80175da:	889b      	ldrh	r3, [r3, #4]
	msg.buf = (uint8_t *)buf;
 80175dc:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 80175e0:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80175e2:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80175e6:	6882      	ldr	r2, [r0, #8]
 80175e8:	a901      	add	r1, sp, #4
 80175ea:	6894      	ldr	r4, [r2, #8]
 80175ec:	2201      	movs	r2, #1
 80175ee:	47a0      	blx	r4
}
 80175f0:	b004      	add	sp, #16
 80175f2:	bd10      	pop	{r4, pc}

080175f4 <spi_context_get_next_buf>:
{
 80175f4:	b570      	push	{r4, r5, r6, lr}
 80175f6:	4605      	mov	r5, r0
	while (*count) {
 80175f8:	6808      	ldr	r0, [r1, #0]
 80175fa:	b908      	cbnz	r0, 8017600 <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 80175fc:	6010      	str	r0, [r2, #0]
	return NULL;
 80175fe:	e007      	b.n	8017610 <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 8017600:	682c      	ldr	r4, [r5, #0]
 8017602:	6866      	ldr	r6, [r4, #4]
 8017604:	429e      	cmp	r6, r3
 8017606:	d304      	bcc.n	8017612 <spi_context_get_next_buf+0x1e>
			return (*current)->buf;
 8017608:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
 801760a:	fbb6 f3f3 	udiv	r3, r6, r3
 801760e:	6013      	str	r3, [r2, #0]
}
 8017610:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 8017612:	3408      	adds	r4, #8
		--(*count);
 8017614:	3801      	subs	r0, #1
		++(*current);
 8017616:	602c      	str	r4, [r5, #0]
		--(*count);
 8017618:	6008      	str	r0, [r1, #0]
 801761a:	e7ed      	b.n	80175f8 <spi_context_get_next_buf+0x4>

0801761c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 801761c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 801761e:	ab0b      	add	r3, sp, #44	; 0x2c
 8017620:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8017622:	9303      	str	r3, [sp, #12]
 8017624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017626:	9302      	str	r3, [sp, #8]
 8017628:	2300      	movs	r3, #0
 801762a:	e9cd 3300 	strd	r3, r3, [sp]
 801762e:	2201      	movs	r2, #1
 8017630:	4618      	mov	r0, r3
 8017632:	f7ed f993 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 8017636:	b007      	add	sp, #28
 8017638:	f85d fb04 	ldr.w	pc, [sp], #4

0801763c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 801763c:	4603      	mov	r3, r0
 801763e:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 8017640:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8017642:	7919      	ldrb	r1, [r3, #4]
 8017644:	2301      	movs	r3, #1
 8017646:	fa03 f101 	lsl.w	r1, r3, r1
 801764a:	6903      	ldr	r3, [r0, #16]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8017650:	bf18      	it	ne
 8017652:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8017656:	b112      	cbz	r2, 801765e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 8017658:	6883      	ldr	r3, [r0, #8]
 801765a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 801765c:	4718      	bx	r3
 801765e:	6883      	ldr	r3, [r0, #8]
 8017660:	691b      	ldr	r3, [r3, #16]
 8017662:	e7fb      	b.n	801765c <gpio_pin_set_dt.isra.0+0x20>

08017664 <_spi_context_cs_control>:
{
 8017664:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8017666:	6803      	ldr	r3, [r0, #0]
{
 8017668:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 801766a:	b1e3      	cbz	r3, 80176a6 <_spi_context_cs_control+0x42>
 801766c:	6898      	ldr	r0, [r3, #8]
 801766e:	b1d0      	cbz	r0, 80176a6 <_spi_context_cs_control+0x42>
 8017670:	6805      	ldr	r5, [r0, #0]
 8017672:	b1c5      	cbz	r5, 80176a6 <_spi_context_cs_control+0x42>
		if (on) {
 8017674:	b149      	cbz	r1, 801768a <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8017676:	2101      	movs	r1, #1
 8017678:	f7ff ffe0 	bl	801763c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 801767c:	6823      	ldr	r3, [r4, #0]
 801767e:	689b      	ldr	r3, [r3, #8]
 8017680:	6898      	ldr	r0, [r3, #8]
}
 8017682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8017686:	f7f9 bbbb 	b.w	8010e00 <z_impl_k_busy_wait>
			if (!force_off &&
 801768a:	b912      	cbnz	r2, 8017692 <_spi_context_cs_control+0x2e>
 801768c:	889b      	ldrh	r3, [r3, #4]
 801768e:	04db      	lsls	r3, r3, #19
 8017690:	d409      	bmi.n	80176a6 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 8017692:	6880      	ldr	r0, [r0, #8]
 8017694:	f7f9 fbb4 	bl	8010e00 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8017698:	6823      	ldr	r3, [r4, #0]
 801769a:	2100      	movs	r1, #0
 801769c:	6898      	ldr	r0, [r3, #8]
}
 801769e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80176a2:	f7ff bfcb 	b.w	801763c <gpio_pin_set_dt.isra.0>
}
 80176a6:	bd38      	pop	{r3, r4, r5, pc}

080176a8 <spi_context_unlock_unconditionally>:
{
 80176a8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 80176aa:	2201      	movs	r2, #1
 80176ac:	2100      	movs	r1, #0
{
 80176ae:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 80176b0:	f7ff ffd8 	bl	8017664 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 80176b4:	69a3      	ldr	r3, [r4, #24]
 80176b6:	b933      	cbnz	r3, 80176c6 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 80176b8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80176ba:	f104 0010 	add.w	r0, r4, #16
}
 80176be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176c2:	f7f8 bd79 	b.w	80101b8 <z_impl_k_sem_give>
 80176c6:	bd10      	pop	{r4, pc}

080176c8 <spi_stm32_release>:
{
 80176c8:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80176ca:	6900      	ldr	r0, [r0, #16]
 80176cc:	f7ff ffec 	bl	80176a8 <spi_context_unlock_unconditionally>
}
 80176d0:	2000      	movs	r0, #0
 80176d2:	bd08      	pop	{r3, pc}

080176d4 <gpio_pin_configure_dt>:
{
 80176d4:	b4f0      	push	{r4, r5, r6, r7}
 80176d6:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
 80176d8:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 80176da:	88d3      	ldrh	r3, [r2, #6]
	return gpio_pin_configure(spec->port,
 80176dc:	7916      	ldrb	r6, [r2, #4]
 80176de:	430b      	orrs	r3, r1
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80176e0:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
 80176e2:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 80176e4:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80176e6:	d506      	bpl.n	80176f6 <gpio_pin_configure_dt+0x22>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80176e8:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 80176ec:	d003      	beq.n	80176f6 <gpio_pin_configure_dt+0x22>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80176ee:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80176f0:	bf48      	it	mi
 80176f2:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80176f6:	680c      	ldr	r4, [r1, #0]
 80176f8:	2501      	movs	r5, #1
 80176fa:	40b5      	lsls	r5, r6
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80176fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8017700:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8017702:	bf4c      	ite	mi
 8017704:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8017706:	43ac      	bicpl	r4, r5
 8017708:	600c      	str	r4, [r1, #0]
	return api->pin_configure(port, pin, flags);
 801770a:	683b      	ldr	r3, [r7, #0]
 801770c:	4631      	mov	r1, r6
}
 801770e:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 8017710:	4718      	bx	r3

08017712 <gpio_pin_get>:
{
 8017712:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
 8017714:	6905      	ldr	r5, [r0, #16]
{
 8017716:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
 8017718:	6883      	ldr	r3, [r0, #8]
 801771a:	a901      	add	r1, sp, #4
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	4798      	blx	r3
	if (ret == 0) {
 8017720:	b948      	cbnz	r0, 8017736 <gpio_pin_get+0x24>
		*value ^= data->invert;
 8017722:	9b01      	ldr	r3, [sp, #4]
 8017724:	682a      	ldr	r2, [r5, #0]
 8017726:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8017728:	2301      	movs	r3, #1
 801772a:	fa03 f104 	lsl.w	r1, r3, r4
 801772e:	420a      	tst	r2, r1
 8017730:	bf14      	ite	ne
 8017732:	4618      	movne	r0, r3
 8017734:	2000      	moveq	r0, #0
}
 8017736:	b003      	add	sp, #12
 8017738:	bd30      	pop	{r4, r5, pc}

0801773a <spi_context_get_next_buf>:
{
 801773a:	b570      	push	{r4, r5, r6, lr}
 801773c:	4605      	mov	r5, r0
	while (*count) {
 801773e:	6808      	ldr	r0, [r1, #0]
 8017740:	b908      	cbnz	r0, 8017746 <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 8017742:	6010      	str	r0, [r2, #0]
	return NULL;
 8017744:	e007      	b.n	8017756 <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 8017746:	682c      	ldr	r4, [r5, #0]
 8017748:	6866      	ldr	r6, [r4, #4]
 801774a:	429e      	cmp	r6, r3
 801774c:	d304      	bcc.n	8017758 <spi_context_get_next_buf+0x1e>
			return (*current)->buf;
 801774e:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
 8017750:	fbb6 f3f3 	udiv	r3, r6, r3
 8017754:	6013      	str	r3, [r2, #0]
}
 8017756:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 8017758:	3408      	adds	r4, #8
		--(*count);
 801775a:	3801      	subs	r0, #1
		++(*current);
 801775c:	602c      	str	r4, [r5, #0]
		--(*count);
 801775e:	6008      	str	r0, [r1, #0]
 8017760:	e7ed      	b.n	801773e <spi_context_get_next_buf+0x4>

08017762 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8017762:	4603      	mov	r3, r0
 8017764:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 8017766:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8017768:	7919      	ldrb	r1, [r3, #4]
 801776a:	2301      	movs	r3, #1
 801776c:	fa03 f101 	lsl.w	r1, r3, r1
 8017770:	6903      	ldr	r3, [r0, #16]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	4219      	tst	r1, r3
 8017776:	d003      	beq.n	8017780 <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
 8017778:	b122      	cbz	r2, 8017784 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
 801777a:	6883      	ldr	r3, [r0, #8]
 801777c:	691b      	ldr	r3, [r3, #16]
 801777e:	e003      	b.n	8017788 <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
 8017780:	2a00      	cmp	r2, #0
 8017782:	d0fa      	beq.n	801777a <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
 8017784:	6883      	ldr	r3, [r0, #8]
 8017786:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8017788:	4718      	bx	r3

0801778a <_spi_context_cs_control>:
{
 801778a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 801778c:	6803      	ldr	r3, [r0, #0]
{
 801778e:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8017790:	b1e3      	cbz	r3, 80177cc <_spi_context_cs_control+0x42>
 8017792:	6898      	ldr	r0, [r3, #8]
 8017794:	b1d0      	cbz	r0, 80177cc <_spi_context_cs_control+0x42>
 8017796:	6805      	ldr	r5, [r0, #0]
 8017798:	b1c5      	cbz	r5, 80177cc <_spi_context_cs_control+0x42>
		if (on) {
 801779a:	b149      	cbz	r1, 80177b0 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 801779c:	2101      	movs	r1, #1
 801779e:	f7ff ffe0 	bl	8017762 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 80177a2:	6823      	ldr	r3, [r4, #0]
 80177a4:	689b      	ldr	r3, [r3, #8]
 80177a6:	6898      	ldr	r0, [r3, #8]
}
 80177a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 80177ac:	f7f9 bb28 	b.w	8010e00 <z_impl_k_busy_wait>
			if (!force_off &&
 80177b0:	b912      	cbnz	r2, 80177b8 <_spi_context_cs_control+0x2e>
 80177b2:	889b      	ldrh	r3, [r3, #4]
 80177b4:	04db      	lsls	r3, r3, #19
 80177b6:	d409      	bmi.n	80177cc <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 80177b8:	6880      	ldr	r0, [r0, #8]
 80177ba:	f7f9 fb21 	bl	8010e00 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80177be:	6823      	ldr	r3, [r4, #0]
 80177c0:	2100      	movs	r1, #0
 80177c2:	6898      	ldr	r0, [r3, #8]
}
 80177c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80177c8:	f7ff bfcb 	b.w	8017762 <gpio_pin_set_dt.isra.0>
}
 80177cc:	bd38      	pop	{r3, r4, r5, pc}

080177ce <spi_bitbang_release>:
{
 80177ce:	b510      	push	{r4, lr}
	struct spi_bitbang_data *data = dev->data;
 80177d0:	6904      	ldr	r4, [r0, #16]
	_spi_context_cs_control(ctx, false, true);
 80177d2:	2201      	movs	r2, #1
 80177d4:	2100      	movs	r1, #0
 80177d6:	4620      	mov	r0, r4
 80177d8:	f7ff ffd7 	bl	801778a <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 80177dc:	69a3      	ldr	r3, [r4, #24]
 80177de:	b923      	cbnz	r3, 80177ea <spi_bitbang_release+0x1c>
		ctx->owner = NULL;
 80177e0:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80177e2:	f104 0010 	add.w	r0, r4, #16
 80177e6:	f7f8 fce7 	bl	80101b8 <z_impl_k_sem_give>
}
 80177ea:	2000      	movs	r0, #0
 80177ec:	bd10      	pop	{r4, pc}

080177ee <uart_stm32_err_check>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80177ee:	6843      	ldr	r3, [r0, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80177f2:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80177f4:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 80177f6:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80177f8:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80177fa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 80177fe:	bf48      	it	mi
 8017800:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8017804:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8017806:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 8017808:	bf48      	it	mi
 801780a:	f040 0004 	orrmi.w	r0, r0, #4
 801780e:	05d1      	lsls	r1, r2, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8017810:	bf42      	ittt	mi
 8017812:	f44f 7280 	movmi.w	r2, #256	; 0x100
		err |= UART_BREAK;
 8017816:	f040 0008 	orrmi.w	r0, r0, #8
 801781a:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 801781c:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801781e:	bf44      	itt	mi
 8017820:	2208      	movmi	r2, #8
 8017822:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8017824:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8017826:	bf44      	itt	mi
 8017828:	2201      	movmi	r2, #1
 801782a:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 801782c:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 801782e:	bf44      	itt	mi
 8017830:	2202      	movmi	r2, #2
 8017832:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8017834:	2204      	movs	r2, #4
 8017836:	621a      	str	r2, [r3, #32]
}
 8017838:	4770      	bx	lr

0801783a <uart_stm32_poll_out>:
{
 801783a:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 801783c:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 801783e:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8017840:	69d3      	ldr	r3, [r2, #28]
 8017842:	061b      	lsls	r3, r3, #24
 8017844:	d5fc      	bpl.n	8017840 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 8017846:	f04f 0210 	mov.w	r2, #16
 801784a:	f3ef 8311 	mrs	r3, BASEPRI
 801784e:	f382 8812 	msr	BASEPRI_MAX, r2
 8017852:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8017856:	6802      	ldr	r2, [r0, #0]
 8017858:	69d4      	ldr	r4, [r2, #28]
 801785a:	0624      	lsls	r4, r4, #24
 801785c:	d404      	bmi.n	8017868 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 801785e:	f383 8811 	msr	BASEPRI, r3
 8017862:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8017866:	e7ea      	b.n	801783e <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8017868:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 801786a:	f383 8811 	msr	BASEPRI, r3
 801786e:	f3bf 8f6f 	isb	sy
}
 8017872:	bd10      	pop	{r4, pc}

08017874 <uart_stm32_poll_in>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 8017874:	6843      	ldr	r3, [r0, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8017878:	69da      	ldr	r2, [r3, #28]
 801787a:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 801787c:	bf44      	itt	mi
 801787e:	2208      	movmi	r2, #8
 8017880:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8017882:	69da      	ldr	r2, [r3, #28]
 8017884:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8017886:	bf43      	ittte	mi
 8017888:	6a5b      	ldrmi	r3, [r3, #36]	; 0x24
 801788a:	700b      	strbmi	r3, [r1, #0]
	return 0;
 801788c:	2000      	movmi	r0, #0
		return -1;
 801788e:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8017892:	4770      	bx	lr

08017894 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8017894:	6903      	ldr	r3, [r0, #16]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 801789a:	6843      	ldr	r3, [r0, #4]
 801789c:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801789e:	6813      	ldr	r3, [r2, #0]
 80178a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80178a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80178a8:	d02d      	beq.n	8017906 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 80178aa:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 80178ae:	4243      	negs	r3, r0
 80178b0:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80178b2:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80178b4:	6853      	ldr	r3, [r2, #4]
 80178b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80178ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80178be:	d024      	beq.n	801790a <uart_stm32_config_get+0x76>
 80178c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80178c4:	d023      	beq.n	801790e <uart_stm32_config_get+0x7a>
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	bf14      	ite	ne
 80178ca:	2303      	movne	r3, #3
 80178cc:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80178ce:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80178d0:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80178d2:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80178d4:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 80178d8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80178dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80178e0:	d017      	beq.n	8017912 <uart_stm32_config_get+0x7e>
 80178e2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80178e6:	d119      	bne.n	801791c <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	bf0c      	ite	eq
 80178ec:	2302      	moveq	r3, #2
 80178ee:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80178f0:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80178f2:	6893      	ldr	r3, [r2, #8]
 80178f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80178f8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80178fc:	4253      	negs	r3, r2
 80178fe:	4153      	adcs	r3, r2
 8017900:	71cb      	strb	r3, [r1, #7]
}
 8017902:	2000      	movs	r0, #0
 8017904:	4770      	bx	lr
	switch (parity) {
 8017906:	2302      	movs	r3, #2
 8017908:	e7d3      	b.n	80178b2 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 801790a:	2300      	movs	r3, #0
 801790c:	e7df      	b.n	80178ce <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 801790e:	2302      	movs	r3, #2
 8017910:	e7dd      	b.n	80178ce <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 8017912:	2b00      	cmp	r3, #0
 8017914:	bf14      	ite	ne
 8017916:	2303      	movne	r3, #3
 8017918:	2304      	moveq	r3, #4
 801791a:	e7e9      	b.n	80178f0 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 801791c:	2b00      	cmp	r3, #0
 801791e:	bf14      	ite	ne
 8017920:	2302      	movne	r3, #2
 8017922:	2303      	moveq	r3, #3
 8017924:	e7e4      	b.n	80178f0 <uart_stm32_config_get+0x5c>

08017926 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8017926:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8017928:	6803      	ldr	r3, [r0, #0]
 801792a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 801792c:	7903      	ldrb	r3, [r0, #4]
 801792e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8017932:	3b01      	subs	r3, #1
 8017934:	00db      	lsls	r3, r3, #3
 8017936:	6805      	ldr	r5, [r0, #0]
 8017938:	6814      	ldr	r4, [r2, #0]
 801793a:	441d      	add	r5, r3
 801793c:	42ac      	cmp	r4, r5
 801793e:	d902      	bls.n	8017946 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 8017940:	f06f 0001 	mvn.w	r0, #1
}
 8017944:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8017946:	7965      	ldrb	r5, [r4, #5]
 8017948:	428d      	cmp	r5, r1
 801794a:	d002      	beq.n	8017952 <pinctrl_lookup_state+0x2c>
		(*state)++;
 801794c:	3408      	adds	r4, #8
 801794e:	6014      	str	r4, [r2, #0]
 8017950:	e7f1      	b.n	8017936 <pinctrl_lookup_state+0x10>
			return 0;
 8017952:	2000      	movs	r0, #0
 8017954:	e7f6      	b.n	8017944 <pinctrl_lookup_state+0x1e>

08017956 <ld_dword>:
}
 8017956:	6800      	ldr	r0, [r0, #0]
 8017958:	4770      	bx	lr

0801795a <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
 801795a:	0a0b      	lsrs	r3, r1, #8
 801795c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801795e:	7043      	strb	r3, [r0, #1]
 8017960:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017962:	0e09      	lsrs	r1, r1, #24
 8017964:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8017966:	70c1      	strb	r1, [r0, #3]
}
 8017968:	4770      	bx	lr

0801796a <clst2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 801796a:	6943      	ldr	r3, [r0, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
 801796c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 801796e:	3b02      	subs	r3, #2
 8017970:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8017972:	bf83      	ittte	hi
 8017974:	8943      	ldrhhi	r3, [r0, #10]
 8017976:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
 8017978:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 801797c:	2000      	movls	r0, #0
}
 801797e:	4770      	bx	lr

08017980 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8017980:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8017984:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8017986:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8017988:	7803      	ldrb	r3, [r0, #0]
 801798a:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801798c:	bf01      	itttt	eq
 801798e:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017990:	750a      	strbeq	r2, [r1, #20]
 8017992:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8017994:	754a      	strbeq	r2, [r1, #21]
}
 8017996:	4770      	bx	lr

08017998 <validate>:
{
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801799c:	4604      	mov	r4, r0
 801799e:	b918      	cbnz	r0, 80179a8 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80179a0:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80179a2:	2300      	movs	r3, #0
 80179a4:	602b      	str	r3, [r5, #0]
}
 80179a6:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80179a8:	6803      	ldr	r3, [r0, #0]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d0f8      	beq.n	80179a0 <validate+0x8>
 80179ae:	781a      	ldrb	r2, [r3, #0]
 80179b0:	2a00      	cmp	r2, #0
 80179b2:	d0f5      	beq.n	80179a0 <validate+0x8>
 80179b4:	8881      	ldrh	r1, [r0, #4]
 80179b6:	88da      	ldrh	r2, [r3, #6]
 80179b8:	4291      	cmp	r1, r2
 80179ba:	d1f1      	bne.n	80179a0 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80179bc:	7858      	ldrb	r0, [r3, #1]
 80179be:	f7f7 ff13 	bl	800f7e8 <disk_status>
 80179c2:	f010 0001 	ands.w	r0, r0, #1
 80179c6:	d1eb      	bne.n	80179a0 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80179c8:	6823      	ldr	r3, [r4, #0]
 80179ca:	e7eb      	b.n	80179a4 <validate+0xc>

080179cc <sync_window>:
{
 80179cc:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 80179ce:	78c3      	ldrb	r3, [r0, #3]
{
 80179d0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 80179d2:	b913      	cbnz	r3, 80179da <sync_window+0xe>
	FRESULT res = FR_OK;
 80179d4:	2500      	movs	r5, #0
}
 80179d6:	4628      	mov	r0, r5
 80179d8:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80179da:	f100 0630 	add.w	r6, r0, #48	; 0x30
 80179de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80179e0:	7840      	ldrb	r0, [r0, #1]
 80179e2:	2301      	movs	r3, #1
 80179e4:	4631      	mov	r1, r6
 80179e6:	f7f7 ff23 	bl	800f830 <disk_write>
 80179ea:	4605      	mov	r5, r0
 80179ec:	b980      	cbnz	r0, 8017a10 <sync_window+0x44>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80179ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80179f0:	6a23      	ldr	r3, [r4, #32]
 80179f2:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
 80179f4:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80179f6:	1acb      	subs	r3, r1, r3
 80179f8:	4293      	cmp	r3, r2
 80179fa:	d2eb      	bcs.n	80179d4 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80179fc:	78a3      	ldrb	r3, [r4, #2]
 80179fe:	2b02      	cmp	r3, #2
 8017a00:	d1e8      	bne.n	80179d4 <sync_window+0x8>
 8017a02:	440a      	add	r2, r1
 8017a04:	7860      	ldrb	r0, [r4, #1]
 8017a06:	2301      	movs	r3, #1
 8017a08:	4631      	mov	r1, r6
 8017a0a:	f7f7 ff11 	bl	800f830 <disk_write>
 8017a0e:	e7e2      	b.n	80179d6 <sync_window+0xa>
			res = FR_DISK_ERR;
 8017a10:	2501      	movs	r5, #1
 8017a12:	e7e0      	b.n	80179d6 <sync_window+0xa>

08017a14 <move_window>:
{
 8017a14:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8017a16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017a18:	428b      	cmp	r3, r1
{
 8017a1a:	4605      	mov	r5, r0
 8017a1c:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 8017a1e:	d010      	beq.n	8017a42 <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
 8017a20:	f7ff ffd4 	bl	80179cc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017a24:	b960      	cbnz	r0, 8017a40 <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8017a26:	4622      	mov	r2, r4
 8017a28:	7868      	ldrb	r0, [r5, #1]
 8017a2a:	2301      	movs	r3, #1
 8017a2c:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8017a30:	f7f7 fef2 	bl	800f818 <disk_read>
				res = FR_DISK_ERR;
 8017a34:	2800      	cmp	r0, #0
 8017a36:	bf1c      	itt	ne
 8017a38:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8017a3c:	2001      	movne	r0, #1
			fs->winsect = sect;
 8017a3e:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8017a40:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8017a42:	2000      	movs	r0, #0
 8017a44:	e7fc      	b.n	8017a40 <move_window+0x2c>

08017a46 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017a46:	2901      	cmp	r1, #1
{
 8017a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a4c:	4606      	mov	r6, r0
 8017a4e:	460c      	mov	r4, r1
 8017a50:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017a52:	d972      	bls.n	8017b3a <put_fat+0xf4>
 8017a54:	6943      	ldr	r3, [r0, #20]
 8017a56:	428b      	cmp	r3, r1
 8017a58:	d96f      	bls.n	8017b3a <put_fat+0xf4>
		switch (fs->fs_type) {
 8017a5a:	7803      	ldrb	r3, [r0, #0]
 8017a5c:	2b02      	cmp	r3, #2
 8017a5e:	d03f      	beq.n	8017ae0 <put_fat+0x9a>
 8017a60:	2b03      	cmp	r3, #3
 8017a62:	d050      	beq.n	8017b06 <put_fat+0xc0>
 8017a64:	2b01      	cmp	r3, #1
 8017a66:	d168      	bne.n	8017b3a <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8017a68:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017a6c:	6a01      	ldr	r1, [r0, #32]
 8017a6e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8017a72:	f7ff ffcf 	bl	8017a14 <move_window>
 8017a76:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8017a78:	bb38      	cbnz	r0, 8017aca <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8017a7a:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8017a7e:	f108 0a01 	add.w	sl, r8, #1
 8017a82:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8017a86:	f014 0401 	ands.w	r4, r4, #1
 8017a8a:	bf1f      	itttt	ne
 8017a8c:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8017a90:	f003 020f 	andne.w	r2, r3, #15
 8017a94:	013b      	lslne	r3, r7, #4
 8017a96:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8017a9a:	bf14      	ite	ne
 8017a9c:	4313      	orrne	r3, r2
 8017a9e:	b2fb      	uxtbeq	r3, r7
 8017aa0:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017aa4:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017aaa:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8017aae:	4630      	mov	r0, r6
 8017ab0:	f7ff ffb0 	bl	8017a14 <move_window>
			if (res != FR_OK) break;
 8017ab4:	4605      	mov	r5, r0
 8017ab6:	b940      	cbnz	r0, 8017aca <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8017ab8:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8017abc:	b144      	cbz	r4, 8017ad0 <put_fat+0x8a>
 8017abe:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8017ac2:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	70f3      	strb	r3, [r6, #3]
}
 8017aca:	4628      	mov	r0, r5
 8017acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8017ad0:	f819 300a 	ldrb.w	r3, [r9, sl]
 8017ad4:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8017ad8:	f023 030f 	bic.w	r3, r3, #15
 8017adc:	431f      	orrs	r7, r3
 8017ade:	e7f0      	b.n	8017ac2 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017ae0:	6a01      	ldr	r1, [r0, #32]
 8017ae2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8017ae6:	f7ff ff95 	bl	8017a14 <move_window>
			if (res != FR_OK) break;
 8017aea:	4605      	mov	r5, r0
 8017aec:	2800      	cmp	r0, #0
 8017aee:	d1ec      	bne.n	8017aca <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8017af0:	0064      	lsls	r4, r4, #1
 8017af2:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8017af6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8017afa:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8017afc:	551f      	strb	r7, [r3, r4]
 8017afe:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8017b02:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8017b04:	e7df      	b.n	8017ac6 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017b06:	6a01      	ldr	r1, [r0, #32]
 8017b08:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8017b0c:	f7ff ff82 	bl	8017a14 <move_window>
			if (res != FR_OK) break;
 8017b10:	4605      	mov	r5, r0
 8017b12:	2800      	cmp	r0, #0
 8017b14:	d1d9      	bne.n	8017aca <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017b16:	00a4      	lsls	r4, r4, #2
 8017b18:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8017b1c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8017b20:	441c      	add	r4, r3
 8017b22:	4620      	mov	r0, r4
 8017b24:	f7ff ff17 	bl	8017956 <ld_dword>
 8017b28:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8017b2c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017b30:	4339      	orrs	r1, r7
 8017b32:	4620      	mov	r0, r4
 8017b34:	f7ff ff11 	bl	801795a <st_dword>
 8017b38:	e7c5      	b.n	8017ac6 <put_fat+0x80>
		switch (fs->fs_type) {
 8017b3a:	2502      	movs	r5, #2
 8017b3c:	e7c5      	b.n	8017aca <put_fat+0x84>

08017b3e <dir_clear>:
{
 8017b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b40:	4605      	mov	r5, r0
 8017b42:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017b44:	f7ff ff42 	bl	80179cc <sync_window>
 8017b48:	4604      	mov	r4, r0
 8017b4a:	b9f8      	cbnz	r0, 8017b8c <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8017b4c:	4631      	mov	r1, r6
 8017b4e:	4628      	mov	r0, r5
 8017b50:	f7ff ff0b 	bl	801796a <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8017b54:	f105 0730 	add.w	r7, r5, #48	; 0x30
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8017b58:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8017b5a:	62e8      	str	r0, [r5, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
 8017b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b60:	4621      	mov	r1, r4
 8017b62:	4638      	mov	r0, r7
 8017b64:	f001 fcae 	bl	80194c4 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8017b68:	896b      	ldrh	r3, [r5, #10]
 8017b6a:	429c      	cmp	r4, r3
 8017b6c:	d304      	bcc.n	8017b78 <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8017b6e:	8968      	ldrh	r0, [r5, #10]
 8017b70:	1b00      	subs	r0, r0, r4
 8017b72:	bf18      	it	ne
 8017b74:	2001      	movne	r0, #1
}
 8017b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8017b78:	7868      	ldrb	r0, [r5, #1]
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	1932      	adds	r2, r6, r4
 8017b7e:	4639      	mov	r1, r7
 8017b80:	f7f7 fe56 	bl	800f830 <disk_write>
 8017b84:	2800      	cmp	r0, #0
 8017b86:	d1f2      	bne.n	8017b6e <dir_clear+0x30>
 8017b88:	3401      	adds	r4, #1
 8017b8a:	e7ed      	b.n	8017b68 <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017b8c:	2001      	movs	r0, #1
 8017b8e:	e7f2      	b.n	8017b76 <dir_clear+0x38>

08017b90 <sync_fs>:
{
 8017b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b92:	4604      	mov	r4, r0
	res = sync_window(fs);
 8017b94:	f7ff ff1a 	bl	80179cc <sync_window>
 8017b98:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8017b9a:	2800      	cmp	r0, #0
 8017b9c:	d142      	bne.n	8017c24 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8017b9e:	7823      	ldrb	r3, [r4, #0]
 8017ba0:	2b03      	cmp	r3, #3
 8017ba2:	d137      	bne.n	8017c14 <sync_fs+0x84>
 8017ba4:	7927      	ldrb	r7, [r4, #4]
 8017ba6:	2f01      	cmp	r7, #1
 8017ba8:	d134      	bne.n	8017c14 <sync_fs+0x84>
			memset(fs->win, 0, sizeof fs->win);
 8017baa:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8017bae:	4601      	mov	r1, r0
 8017bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017bb4:	4630      	mov	r0, r6
 8017bb6:	f001 fc85 	bl	80194c4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8017bba:	2355      	movs	r3, #85	; 0x55
 8017bbc:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8017bc0:	23aa      	movs	r3, #170	; 0xaa
 8017bc2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8017bc6:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8017bc8:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8017bca:	2172      	movs	r1, #114	; 0x72
 8017bcc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8017bd0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8017bd4:	2361      	movs	r3, #97	; 0x61
 8017bd6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8017bda:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
 8017bde:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8017be2:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8017be6:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 8017bea:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8017bee:	6921      	ldr	r1, [r4, #16]
 8017bf0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8017bf4:	f7ff feb1 	bl	801795a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8017bf8:	68e1      	ldr	r1, [r4, #12]
 8017bfa:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8017bfe:	f7ff feac 	bl	801795a <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8017c02:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8017c04:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8017c06:	3201      	adds	r2, #1
 8017c08:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8017c0a:	463b      	mov	r3, r7
 8017c0c:	4631      	mov	r1, r6
 8017c0e:	f7f7 fe0f 	bl	800f830 <disk_write>
			fs->fsi_flag = 0;
 8017c12:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017c14:	2200      	movs	r2, #0
 8017c16:	7860      	ldrb	r0, [r4, #1]
 8017c18:	4611      	mov	r1, r2
 8017c1a:	f7f7 fe15 	bl	800f848 <disk_ioctl>
	res = sync_window(fs);
 8017c1e:	3800      	subs	r0, #0
 8017c20:	bf18      	it	ne
 8017c22:	2001      	movne	r0, #1
}
 8017c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017c26 <get_fileinfo.part.0.isra.0>:
static void get_fileinfo (
 8017c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	si = di = 0;
 8017c28:	2300      	movs	r3, #0
static void get_fileinfo (
 8017c2a:	4602      	mov	r2, r0
 8017c2c:	1e45      	subs	r5, r0, #1
	si = di = 0;
 8017c2e:	461c      	mov	r4, r3
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8017c30:	262e      	movs	r6, #46	; 0x2e
		c = (TCHAR)dp->dir[si++];
 8017c32:	f815 0f01 	ldrb.w	r0, [r5, #1]!
		if (c == ' ') continue;		/* Skip padding spaces */
 8017c36:	2820      	cmp	r0, #32
		c = (TCHAR)dp->dir[si++];
 8017c38:	f104 0401 	add.w	r4, r4, #1
		if (c == ' ') continue;		/* Skip padding spaces */
 8017c3c:	d00a      	beq.n	8017c54 <get_fileinfo.part.0.isra.0+0x2e>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8017c3e:	2805      	cmp	r0, #5
 8017c40:	bf08      	it	eq
 8017c42:	20e5      	moveq	r0, #229	; 0xe5
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8017c44:	2c09      	cmp	r4, #9
 8017c46:	bf02      	ittt	eq
 8017c48:	18cf      	addeq	r7, r1, r3
 8017c4a:	3301      	addeq	r3, #1
 8017c4c:	727e      	strbeq	r6, [r7, #9]
		fno->fname[di++] = c;
 8017c4e:	18cf      	adds	r7, r1, r3
 8017c50:	3301      	adds	r3, #1
 8017c52:	7278      	strb	r0, [r7, #9]
	while (si < 11) {		/* Copy name body and extension */
 8017c54:	2c0b      	cmp	r4, #11
 8017c56:	d1ec      	bne.n	8017c32 <get_fileinfo.part.0.isra.0+0xc>
	fno->fname[di] = 0;		/* Terminate the SFN */
 8017c58:	440b      	add	r3, r1
 8017c5a:	2000      	movs	r0, #0
 8017c5c:	7258      	strb	r0, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8017c5e:	7ad3      	ldrb	r3, [r2, #11]
 8017c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c64:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8017c66:	f102 001c 	add.w	r0, r2, #28
 8017c6a:	f7ff fe74 	bl	8017956 <ld_dword>
 8017c6e:	6008      	str	r0, [r1, #0]
	rv = ptr[1];
 8017c70:	8ad3      	ldrh	r3, [r2, #22]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8017c72:	80cb      	strh	r3, [r1, #6]
	rv = ptr[1];
 8017c74:	8b13      	ldrh	r3, [r2, #24]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8017c76:	808b      	strh	r3, [r1, #4]
}
 8017c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017c7a <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8017c7a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8017c7c:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017c7e:	bf04      	itt	eq
 8017c80:	8a8a      	ldrheq	r2, [r1, #20]
 8017c82:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	4770      	bx	lr

08017c8a <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017c8a:	2901      	cmp	r1, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8017c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c8e:	4606      	mov	r6, r0
 8017c90:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017c92:	d94e      	bls.n	8017d32 <get_fat.isra.0+0xa8>
 8017c94:	6943      	ldr	r3, [r0, #20]
 8017c96:	4299      	cmp	r1, r3
 8017c98:	d24b      	bcs.n	8017d32 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8017c9a:	7803      	ldrb	r3, [r0, #0]
 8017c9c:	2b02      	cmp	r3, #2
 8017c9e:	d029      	beq.n	8017cf4 <get_fat.isra.0+0x6a>
 8017ca0:	2b03      	cmp	r3, #3
 8017ca2:	d034      	beq.n	8017d0e <get_fat.isra.0+0x84>
 8017ca4:	2b01      	cmp	r3, #1
 8017ca6:	d144      	bne.n	8017d32 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8017ca8:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cac:	6a01      	ldr	r1, [r0, #32]
 8017cae:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8017cb2:	f7ff feaf 	bl	8017a14 <move_window>
 8017cb6:	b110      	cbz	r0, 8017cbe <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8017cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8017cbe:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cc0:	6a31      	ldr	r1, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8017cc2:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8017cc6:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cc8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8017ccc:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8017cce:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cd2:	f7ff fe9f 	bl	8017a14 <move_window>
 8017cd6:	2800      	cmp	r0, #0
 8017cd8:	d1ee      	bne.n	8017cb8 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8017cda:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8017cde:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8017ce0:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8017ce2:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8017ce6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8017cea:	bf4c      	ite	mi
 8017cec:	0900      	lsrmi	r0, r0, #4
 8017cee:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8017cf2:	e7e3      	b.n	8017cbc <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017cf4:	6a01      	ldr	r1, [r0, #32]
 8017cf6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8017cfa:	f7ff fe8b 	bl	8017a14 <move_window>
 8017cfe:	2800      	cmp	r0, #0
 8017d00:	d1da      	bne.n	8017cb8 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8017d02:	0064      	lsls	r4, r4, #1
 8017d04:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8017d08:	4426      	add	r6, r4
 8017d0a:	8e30      	ldrh	r0, [r6, #48]	; 0x30
			break;
 8017d0c:	e7d6      	b.n	8017cbc <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017d0e:	6a01      	ldr	r1, [r0, #32]
 8017d10:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8017d14:	f7ff fe7e 	bl	8017a14 <move_window>
 8017d18:	2800      	cmp	r0, #0
 8017d1a:	d1cd      	bne.n	8017cb8 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8017d1c:	00a4      	lsls	r4, r4, #2
 8017d1e:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8017d22:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8017d26:	4420      	add	r0, r4
 8017d28:	f7ff fe15 	bl	8017956 <ld_dword>
 8017d2c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8017d30:	e7c4      	b.n	8017cbc <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8017d32:	2001      	movs	r0, #1
	return val;
 8017d34:	e7c2      	b.n	8017cbc <get_fat.isra.0+0x32>

08017d36 <remove_chain.isra.0>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 8017d36:	b570      	push	{r4, r5, r6, lr}
 8017d38:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017d3a:	2c01      	cmp	r4, #1
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 8017d3c:	4605      	mov	r5, r0
 8017d3e:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017d40:	d92a      	bls.n	8017d98 <remove_chain.isra.0+0x62>
 8017d42:	6943      	ldr	r3, [r0, #20]
 8017d44:	429c      	cmp	r4, r3
 8017d46:	d227      	bcs.n	8017d98 <remove_chain.isra.0+0x62>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017d48:	b122      	cbz	r2, 8017d54 <remove_chain.isra.0+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017d4e:	f7ff fe7a 	bl	8017a46 <put_fat>
		if (res != FR_OK) return res;
 8017d52:	b938      	cbnz	r0, 8017d64 <remove_chain.isra.0+0x2e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017d54:	4621      	mov	r1, r4
 8017d56:	4628      	mov	r0, r5
 8017d58:	f7ff ff97 	bl	8017c8a <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017d5c:	4626      	mov	r6, r4
 8017d5e:	4604      	mov	r4, r0
 8017d60:	b908      	cbnz	r0, 8017d66 <remove_chain.isra.0+0x30>
	return FR_OK;
 8017d62:	2000      	movs	r0, #0
}
 8017d64:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017d66:	2801      	cmp	r0, #1
 8017d68:	d016      	beq.n	8017d98 <remove_chain.isra.0+0x62>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017d6a:	1c43      	adds	r3, r0, #1
 8017d6c:	d016      	beq.n	8017d9c <remove_chain.isra.0+0x66>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017d6e:	2200      	movs	r2, #0
 8017d70:	4631      	mov	r1, r6
 8017d72:	4628      	mov	r0, r5
 8017d74:	f7ff fe67 	bl	8017a46 <put_fat>
			if (res != FR_OK) return res;
 8017d78:	2800      	cmp	r0, #0
 8017d7a:	d1f3      	bne.n	8017d64 <remove_chain.isra.0+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017d7c:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8017d80:	1e91      	subs	r1, r2, #2
 8017d82:	428b      	cmp	r3, r1
 8017d84:	d205      	bcs.n	8017d92 <remove_chain.isra.0+0x5c>
			fs->free_clst++;
 8017d86:	3301      	adds	r3, #1
 8017d88:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8017d8a:	792b      	ldrb	r3, [r5, #4]
 8017d8c:	f043 0301 	orr.w	r3, r3, #1
 8017d90:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017d92:	4294      	cmp	r4, r2
 8017d94:	d3de      	bcc.n	8017d54 <remove_chain.isra.0+0x1e>
 8017d96:	e7e4      	b.n	8017d62 <remove_chain.isra.0+0x2c>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017d98:	2002      	movs	r0, #2
 8017d9a:	e7e3      	b.n	8017d64 <remove_chain.isra.0+0x2e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017d9c:	2001      	movs	r0, #1
 8017d9e:	e7e1      	b.n	8017d64 <remove_chain.isra.0+0x2e>

08017da0 <create_chain.isra.0>:
static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
 8017da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017da2:	4605      	mov	r5, r0
	if (clst == 0) {	/* Create a new chain */
 8017da4:	460f      	mov	r7, r1
 8017da6:	b949      	cbnz	r1, 8017dbc <create_chain.isra.0+0x1c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8017da8:	68c6      	ldr	r6, [r0, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017daa:	b1b6      	cbz	r6, 8017dda <create_chain.isra.0+0x3a>
 8017dac:	6943      	ldr	r3, [r0, #20]
 8017dae:	429e      	cmp	r6, r3
 8017db0:	bf28      	it	cs
 8017db2:	2601      	movcs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8017db4:	692b      	ldr	r3, [r5, #16]
 8017db6:	b993      	cbnz	r3, 8017dde <create_chain.isra.0+0x3e>
 8017db8:	2400      	movs	r4, #0
 8017dba:	e005      	b.n	8017dc8 <create_chain.isra.0+0x28>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017dbc:	f7ff ff65 	bl	8017c8a <get_fat.isra.0>
		if (cs < 2) return 1;				/* Test for insanity */
 8017dc0:	2801      	cmp	r0, #1
 8017dc2:	4604      	mov	r4, r0
 8017dc4:	d802      	bhi.n	8017dcc <create_chain.isra.0+0x2c>
 8017dc6:	2401      	movs	r4, #1
}
 8017dc8:	4620      	mov	r0, r4
 8017dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8017dcc:	1c42      	adds	r2, r0, #1
 8017dce:	d050      	beq.n	8017e72 <create_chain.isra.0+0xd2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017dd0:	696b      	ldr	r3, [r5, #20]
 8017dd2:	4298      	cmp	r0, r3
 8017dd4:	d3f8      	bcc.n	8017dc8 <create_chain.isra.0+0x28>
 8017dd6:	463e      	mov	r6, r7
 8017dd8:	e7ec      	b.n	8017db4 <create_chain.isra.0+0x14>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017dda:	2601      	movs	r6, #1
 8017ddc:	e7ea      	b.n	8017db4 <create_chain.isra.0+0x14>
		if (scl == clst) {						/* Stretching an existing chain? */
 8017dde:	42b7      	cmp	r7, r6
 8017de0:	d115      	bne.n	8017e0e <create_chain.isra.0+0x6e>
			if (ncl >= fs->n_fatent) ncl = 2;
 8017de2:	696b      	ldr	r3, [r5, #20]
			ncl = scl + 1;						/* Test if next cluster is free */
 8017de4:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8017de6:	429c      	cmp	r4, r3
 8017de8:	bf28      	it	cs
 8017dea:	2402      	movcs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8017dec:	4621      	mov	r1, r4
 8017dee:	4628      	mov	r0, r5
 8017df0:	f7ff ff4b 	bl	8017c8a <get_fat.isra.0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8017df4:	2801      	cmp	r0, #1
 8017df6:	d0e6      	beq.n	8017dc6 <create_chain.isra.0+0x26>
 8017df8:	1c43      	adds	r3, r0, #1
 8017dfa:	d03a      	beq.n	8017e72 <create_chain.isra.0+0xd2>
			if (cs != 0) {						/* Not free? */
 8017dfc:	b1d8      	cbz	r0, 8017e36 <create_chain.isra.0+0x96>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8017dfe:	68eb      	ldr	r3, [r5, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	d904      	bls.n	8017e0e <create_chain.isra.0+0x6e>
 8017e04:	696a      	ldr	r2, [r5, #20]
 8017e06:	4293      	cmp	r3, r2
 8017e08:	bf34      	ite	cc
 8017e0a:	461e      	movcc	r6, r3
 8017e0c:	463e      	movcs	r6, r7
 8017e0e:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017e10:	696b      	ldr	r3, [r5, #20]
				ncl++;							/* Next cluster */
 8017e12:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017e14:	429c      	cmp	r4, r3
 8017e16:	d302      	bcc.n	8017e1e <create_chain.isra.0+0x7e>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8017e18:	2e01      	cmp	r6, #1
 8017e1a:	d9cd      	bls.n	8017db8 <create_chain.isra.0+0x18>
					ncl = 2;
 8017e1c:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017e1e:	4621      	mov	r1, r4
 8017e20:	4628      	mov	r0, r5
 8017e22:	f7ff ff32 	bl	8017c8a <get_fat.isra.0>
				if (cs == 0) break;				/* Found a free cluster? */
 8017e26:	b140      	cbz	r0, 8017e3a <create_chain.isra.0+0x9a>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8017e28:	2801      	cmp	r0, #1
 8017e2a:	d0cc      	beq.n	8017dc6 <create_chain.isra.0+0x26>
 8017e2c:	3001      	adds	r0, #1
 8017e2e:	d020      	beq.n	8017e72 <create_chain.isra.0+0xd2>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8017e30:	42a6      	cmp	r6, r4
 8017e32:	d1ed      	bne.n	8017e10 <create_chain.isra.0+0x70>
 8017e34:	e7c0      	b.n	8017db8 <create_chain.isra.0+0x18>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8017e36:	2c00      	cmp	r4, #0
 8017e38:	d0e9      	beq.n	8017e0e <create_chain.isra.0+0x6e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8017e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017e3e:	4621      	mov	r1, r4
 8017e40:	4628      	mov	r0, r5
 8017e42:	f7ff fe00 	bl	8017a46 <put_fat>
		if (res == FR_OK && clst != 0) {
 8017e46:	b990      	cbnz	r0, 8017e6e <create_chain.isra.0+0xce>
 8017e48:	b957      	cbnz	r7, 8017e60 <create_chain.isra.0+0xc0>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017e4a:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8017e4e:	3a02      	subs	r2, #2
 8017e50:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8017e52:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017e54:	d910      	bls.n	8017e78 <create_chain.isra.0+0xd8>
		fs->fsi_flag |= 1;
 8017e56:	792b      	ldrb	r3, [r5, #4]
 8017e58:	f043 0301 	orr.w	r3, r3, #1
 8017e5c:	712b      	strb	r3, [r5, #4]
 8017e5e:	e7b3      	b.n	8017dc8 <create_chain.isra.0+0x28>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8017e60:	4622      	mov	r2, r4
 8017e62:	4639      	mov	r1, r7
 8017e64:	4628      	mov	r0, r5
 8017e66:	f7ff fdee 	bl	8017a46 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	d0ed      	beq.n	8017e4a <create_chain.isra.0+0xaa>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017e6e:	2801      	cmp	r0, #1
 8017e70:	d1a9      	bne.n	8017dc6 <create_chain.isra.0+0x26>
 8017e72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017e76:	e7a7      	b.n	8017dc8 <create_chain.isra.0+0x28>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017e78:	3b01      	subs	r3, #1
 8017e7a:	612b      	str	r3, [r5, #16]
 8017e7c:	e7eb      	b.n	8017e56 <create_chain.isra.0+0xb6>

08017e7e <dir_sdi.constprop.0>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017e7e:	6882      	ldr	r2, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8017e80:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8017e82:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 8017e84:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8017e86:	6103      	str	r3, [r0, #16]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8017e88:	4604      	mov	r4, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017e8a:	b99a      	cbnz	r2, 8017eb4 <dir_sdi.constprop.0+0x36>
 8017e8c:	782b      	ldrb	r3, [r5, #0]
 8017e8e:	2b02      	cmp	r3, #2
 8017e90:	d901      	bls.n	8017e96 <dir_sdi.constprop.0+0x18>
		clst = (DWORD)fs->dirbase;
 8017e92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8017e94:	b96b      	cbnz	r3, 8017eb2 <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8017e96:	892b      	ldrh	r3, [r5, #8]
 8017e98:	b90b      	cbnz	r3, 8017e9e <dir_sdi.constprop.0+0x20>
 8017e9a:	2002      	movs	r0, #2
}
 8017e9c:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8017e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017ea0:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 8017ea2:	69a3      	ldr	r3, [r4, #24]
	dp->clust = clst;					/* Current cluster# */
 8017ea4:	6162      	str	r2, [r4, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d0f7      	beq.n	8017e9a <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017eaa:	3530      	adds	r5, #48	; 0x30
 8017eac:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 8017eae:	2000      	movs	r0, #0
 8017eb0:	e7f4      	b.n	8017e9c <dir_sdi.constprop.0+0x1e>
 8017eb2:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017eb4:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017eb6:	b963      	cbnz	r3, 8017ed2 <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017eb8:	4611      	mov	r1, r2
 8017eba:	6820      	ldr	r0, [r4, #0]
 8017ebc:	f7ff fee5 	bl	8017c8a <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017ec0:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017ec2:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017ec4:	d00b      	beq.n	8017ede <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017ec6:	2801      	cmp	r0, #1
 8017ec8:	d9e7      	bls.n	8017e9a <dir_sdi.constprop.0+0x1c>
 8017eca:	696b      	ldr	r3, [r5, #20]
 8017ecc:	4298      	cmp	r0, r3
 8017ece:	d3f3      	bcc.n	8017eb8 <dir_sdi.constprop.0+0x3a>
 8017ed0:	e7e3      	b.n	8017e9a <dir_sdi.constprop.0+0x1c>
		dp->sect = clst2sect(fs, clst);
 8017ed2:	4611      	mov	r1, r2
 8017ed4:	4628      	mov	r0, r5
 8017ed6:	f7ff fd48 	bl	801796a <clst2sect>
 8017eda:	61a0      	str	r0, [r4, #24]
 8017edc:	e7e1      	b.n	8017ea2 <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017ede:	2001      	movs	r0, #1
 8017ee0:	e7dc      	b.n	8017e9c <dir_sdi.constprop.0+0x1e>

08017ee2 <dir_next>:
{
 8017ee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017ee6:	6907      	ldr	r7, [r0, #16]
	FATFS *fs = dp->obj.fs;
 8017ee8:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017eea:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8017eec:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8017ef0:	bf24      	itt	cs
 8017ef2:	2300      	movcs	r3, #0
 8017ef4:	6183      	strcs	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8017ef6:	6983      	ldr	r3, [r0, #24]
{
 8017ef8:	4604      	mov	r4, r0
 8017efa:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8017efc:	b173      	cbz	r3, 8017f1c <dir_next+0x3a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017efe:	f3c7 0808 	ubfx	r8, r7, #0, #9
 8017f02:	f1b8 0f00 	cmp.w	r8, #0
 8017f06:	d139      	bne.n	8017f7c <dir_next+0x9a>
		if (dp->clust == 0) {	/* Static table */
 8017f08:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 8017f0a:	3301      	adds	r3, #1
 8017f0c:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 8017f0e:	b939      	cbnz	r1, 8017f20 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017f10:	8933      	ldrh	r3, [r6, #8]
 8017f12:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8017f16:	d831      	bhi.n	8017f7c <dir_next+0x9a>
				dp->sect = 0; return FR_NO_FILE;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8017f1c:	2004      	movs	r0, #4
 8017f1e:	e00b      	b.n	8017f38 <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8017f20:	8973      	ldrh	r3, [r6, #10]
 8017f22:	3b01      	subs	r3, #1
 8017f24:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8017f28:	d128      	bne.n	8017f7c <dir_next+0x9a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8017f2a:	4630      	mov	r0, r6
 8017f2c:	f7ff fead 	bl	8017c8a <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8017f30:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8017f32:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8017f34:	d802      	bhi.n	8017f3c <dir_next+0x5a>
 8017f36:	2002      	movs	r0, #2
}
 8017f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017f3c:	1c42      	adds	r2, r0, #1
 8017f3e:	d101      	bne.n	8017f44 <dir_next+0x62>
 8017f40:	2001      	movs	r0, #1
 8017f42:	e7f9      	b.n	8017f38 <dir_next+0x56>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8017f44:	6973      	ldr	r3, [r6, #20]
 8017f46:	4283      	cmp	r3, r0
 8017f48:	d812      	bhi.n	8017f70 <dir_next+0x8e>
					if (!stretch) {								/* If no stretch, report EOT */
 8017f4a:	f1b9 0f00 	cmp.w	r9, #0
 8017f4e:	d0e3      	beq.n	8017f18 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017f50:	6961      	ldr	r1, [r4, #20]
 8017f52:	6820      	ldr	r0, [r4, #0]
 8017f54:	f7ff ff24 	bl	8017da0 <create_chain.isra.0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017f58:	4605      	mov	r5, r0
 8017f5a:	b1a8      	cbz	r0, 8017f88 <dir_next+0xa6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017f5c:	2801      	cmp	r0, #1
 8017f5e:	d0ea      	beq.n	8017f36 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017f60:	1c43      	adds	r3, r0, #1
 8017f62:	d0ed      	beq.n	8017f40 <dir_next+0x5e>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8017f64:	4601      	mov	r1, r0
 8017f66:	4630      	mov	r0, r6
 8017f68:	f7ff fde9 	bl	8017b3e <dir_clear>
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	d1e7      	bne.n	8017f40 <dir_next+0x5e>
				dp->clust = clst;		/* Initialize data for new cluster */
 8017f70:	6165      	str	r5, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 8017f72:	4629      	mov	r1, r5
 8017f74:	4630      	mov	r0, r6
 8017f76:	f7ff fcf8 	bl	801796a <clst2sect>
 8017f7a:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017f7c:	3630      	adds	r6, #48	; 0x30
 8017f7e:	4446      	add	r6, r8
	dp->dptr = ofs;						/* Current entry */
 8017f80:	6127      	str	r7, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017f82:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 8017f84:	2000      	movs	r0, #0
 8017f86:	e7d7      	b.n	8017f38 <dir_next+0x56>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017f88:	2007      	movs	r0, #7
 8017f8a:	e7d5      	b.n	8017f38 <dir_next+0x56>

08017f8c <dir_read.constprop.0>:
static FRESULT dir_read (
 8017f8c:	b538      	push	{r3, r4, r5, lr}
	FATFS *fs = dp->obj.fs;
 8017f8e:	6805      	ldr	r5, [r0, #0]
static FRESULT dir_read (
 8017f90:	4604      	mov	r4, r0
	FRESULT res = FR_NO_FILE;
 8017f92:	2004      	movs	r0, #4
	while (dp->sect) {
 8017f94:	69a1      	ldr	r1, [r4, #24]
 8017f96:	b909      	cbnz	r1, 8017f9c <dir_read.constprop.0+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8017f98:	b1a8      	cbz	r0, 8017fc6 <dir_read.constprop.0+0x3a>
 8017f9a:	e01c      	b.n	8017fd6 <dir_read.constprop.0+0x4a>
		res = move_window(fs, dp->sect);
 8017f9c:	4628      	mov	r0, r5
 8017f9e:	f7ff fd39 	bl	8017a14 <move_window>
		if (res != FR_OK) break;
 8017fa2:	b9c0      	cbnz	r0, 8017fd6 <dir_read.constprop.0+0x4a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8017fa4:	69e3      	ldr	r3, [r4, #28]
 8017fa6:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
 8017fa8:	b1c2      	cbz	r2, 8017fdc <dir_read.constprop.0+0x50>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8017faa:	7adb      	ldrb	r3, [r3, #11]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8017fac:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8017fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017fb2:	71a3      	strb	r3, [r4, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8017fb4:	d009      	beq.n	8017fca <dir_read.constprop.0+0x3e>
 8017fb6:	2a2e      	cmp	r2, #46	; 0x2e
 8017fb8:	d007      	beq.n	8017fca <dir_read.constprop.0+0x3e>
 8017fba:	2b0f      	cmp	r3, #15
 8017fbc:	d005      	beq.n	8017fca <dir_read.constprop.0+0x3e>
 8017fbe:	f023 0320 	bic.w	r3, r3, #32
 8017fc2:	2b08      	cmp	r3, #8
 8017fc4:	d001      	beq.n	8017fca <dir_read.constprop.0+0x3e>
		res = move_window(fs, dp->sect);
 8017fc6:	2000      	movs	r0, #0
}
 8017fc8:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 8017fca:	2100      	movs	r1, #0
 8017fcc:	4620      	mov	r0, r4
 8017fce:	f7ff ff88 	bl	8017ee2 <dir_next>
		if (res != FR_OK) break;
 8017fd2:	2800      	cmp	r0, #0
 8017fd4:	d0de      	beq.n	8017f94 <dir_read.constprop.0+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	61a3      	str	r3, [r4, #24]
 8017fda:	e7f5      	b.n	8017fc8 <dir_read.constprop.0+0x3c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8017fdc:	2004      	movs	r0, #4
 8017fde:	e7fa      	b.n	8017fd6 <dir_read.constprop.0+0x4a>

08017fe0 <dir_register>:
{
 8017fe0:	b570      	push	{r4, r5, r6, lr}
	FATFS *fs = dp->obj.fs;
 8017fe2:	6806      	ldr	r6, [r0, #0]
{
 8017fe4:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8017fe6:	f7ff ff4a 	bl	8017e7e <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8017fea:	4604      	mov	r4, r0
 8017fec:	bb50      	cbnz	r0, 8018044 <dir_register+0x64>
			res = move_window(fs, dp->sect);
 8017fee:	69a9      	ldr	r1, [r5, #24]
 8017ff0:	4630      	mov	r0, r6
 8017ff2:	f7ff fd0f 	bl	8017a14 <move_window>
			if (res != FR_OK) break;
 8017ff6:	4604      	mov	r4, r0
 8017ff8:	bb20      	cbnz	r0, 8018044 <dir_register+0x64>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8017ffa:	69eb      	ldr	r3, [r5, #28]
 8017ffc:	781b      	ldrb	r3, [r3, #0]
 8017ffe:	2be5      	cmp	r3, #229	; 0xe5
 8018000:	d107      	bne.n	8018012 <dir_register+0x32>
		res = move_window(fs, dp->sect);
 8018002:	69a9      	ldr	r1, [r5, #24]
 8018004:	4630      	mov	r0, r6
 8018006:	f7ff fd05 	bl	8017a14 <move_window>
		if (res == FR_OK) {
 801800a:	4604      	mov	r4, r0
 801800c:	b140      	cbz	r0, 8018020 <dir_register+0x40>
}
 801800e:	4620      	mov	r0, r4
 8018010:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8018012:	2b00      	cmp	r3, #0
 8018014:	d0f5      	beq.n	8018002 <dir_register+0x22>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8018016:	2101      	movs	r1, #1
 8018018:	4628      	mov	r0, r5
 801801a:	f7ff ff62 	bl	8017ee2 <dir_next>
 801801e:	e7e4      	b.n	8017fea <dir_register+0xa>
 8018020:	4601      	mov	r1, r0
 8018022:	2220      	movs	r2, #32
 8018024:	69e8      	ldr	r0, [r5, #28]
 8018026:	f001 fa4d 	bl	80194c4 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 801802a:	3520      	adds	r5, #32
 801802c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8018030:	cd03      	ldmia	r5!, {r0, r1}
 8018032:	6018      	str	r0, [r3, #0]
 8018034:	6059      	str	r1, [r3, #4]
 8018036:	8829      	ldrh	r1, [r5, #0]
 8018038:	78aa      	ldrb	r2, [r5, #2]
 801803a:	729a      	strb	r2, [r3, #10]
 801803c:	8119      	strh	r1, [r3, #8]
			fs->wflag = 1;
 801803e:	2301      	movs	r3, #1
 8018040:	70f3      	strb	r3, [r6, #3]
 8018042:	e7e4      	b.n	801800e <dir_register+0x2e>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018044:	2c04      	cmp	r4, #4
 8018046:	bf08      	it	eq
 8018048:	2407      	moveq	r4, #7
 801804a:	e7e0      	b.n	801800e <dir_register+0x2e>

0801804c <f_open>:
{
 801804c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018050:	b08e      	sub	sp, #56	; 0x38
 8018052:	4617      	mov	r7, r2
 8018054:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8018056:	4605      	mov	r5, r0
 8018058:	2800      	cmp	r0, #0
 801805a:	f000 80c8 	beq.w	80181ee <f_open+0x1a2>
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 801805e:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 8018062:	4632      	mov	r2, r6
 8018064:	a902      	add	r1, sp, #8
 8018066:	a801      	add	r0, sp, #4
 8018068:	f7f6 fe36 	bl	800ecd8 <mount_volume>
	if (res == FR_OK) {
 801806c:	2800      	cmp	r0, #0
 801806e:	f040 80b6 	bne.w	80181de <f_open+0x192>
		dj.obj.fs = fs;
 8018072:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8018074:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8018076:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8018078:	a803      	add	r0, sp, #12
 801807a:	f7f6 ff4f 	bl	800ef1c <follow_path>
		if (res == FR_OK) {
 801807e:	4604      	mov	r4, r0
 8018080:	b920      	cbnz	r0, 801808c <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018082:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
				res = FR_INVALID_NAME;
 8018086:	2b00      	cmp	r3, #0
 8018088:	bfb8      	it	lt
 801808a:	2406      	movlt	r4, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801808c:	f017 0f1c 	tst.w	r7, #28
 8018090:	d072      	beq.n	8018178 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 8018092:	2c00      	cmp	r4, #0
 8018094:	d043      	beq.n	801811e <f_open+0xd2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018096:	2c04      	cmp	r4, #4
 8018098:	d13e      	bne.n	8018118 <f_open+0xcc>
					res = dir_register(&dj);
 801809a:	a803      	add	r0, sp, #12
 801809c:	f7ff ffa0 	bl	8017fe0 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80180a0:	4604      	mov	r4, r0
 80180a2:	2800      	cmp	r0, #0
 80180a4:	d138      	bne.n	8018118 <f_open+0xcc>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80180a6:	f046 0608 	orr.w	r6, r6, #8
					st_dword(dj.dir + DIR_CrtTime, tm);
 80180aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80180ac:	f8dd 8008 	ldr.w	r8, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80180b0:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val;
 80180b2:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 80180b4:	2121      	movs	r1, #33	; 0x21
	*ptr++ = (BYTE)val;
 80180b6:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 80180b8:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80180ba:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 80180bc:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
 80180be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val;
 80180c0:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80180c2:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80180c4:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80180c6:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80180c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80180ca:	f898 0000 	ldrb.w	r0, [r8]
 80180ce:	f7ff fdd4 	bl	8017c7a <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80180d2:	2320      	movs	r3, #32
 80180d4:	72cb      	strb	r3, [r1, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80180d6:	4622      	mov	r2, r4
 80180d8:	990a      	ldr	r1, [sp, #40]	; 0x28
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80180da:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80180dc:	4640      	mov	r0, r8
 80180de:	f7ff fc4f 	bl	8017980 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80180e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 80180e4:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80180e6:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80180e8:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 80180ea:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
 80180ec:	9b02      	ldr	r3, [sp, #8]
 80180ee:	2201      	movs	r2, #1
 80180f0:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80180f2:	b1ef      	cbz	r7, 8018130 <f_open+0xe4>
						res = remove_chain(&dj.obj, cl, 0);
 80180f4:	4622      	mov	r2, r4
 80180f6:	9803      	ldr	r0, [sp, #12]
						sc = fs->winsect;
 80180f8:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80180fc:	4639      	mov	r1, r7
 80180fe:	f7ff fe1a 	bl	8017d36 <remove_chain.isra.0>
						if (res == FR_OK) {
 8018102:	4604      	mov	r4, r0
 8018104:	b940      	cbnz	r0, 8018118 <f_open+0xcc>
							res = move_window(fs, sc);
 8018106:	9802      	ldr	r0, [sp, #8]
 8018108:	4641      	mov	r1, r8
 801810a:	f7ff fc83 	bl	8017a14 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801810e:	9b02      	ldr	r3, [sp, #8]
 8018110:	3f01      	subs	r7, #1
 8018112:	60df      	str	r7, [r3, #12]
		if (res == FR_OK) {
 8018114:	4604      	mov	r4, r0
 8018116:	b158      	cbz	r0, 8018130 <f_open+0xe4>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018118:	2300      	movs	r3, #0
 801811a:	602b      	str	r3, [r5, #0]
 801811c:	e028      	b.n	8018170 <f_open+0x124>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801811e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8018122:	f013 0f11 	tst.w	r3, #17
 8018126:	d131      	bne.n	801818c <f_open+0x140>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018128:	0778      	lsls	r0, r7, #29
 801812a:	d45a      	bmi.n	80181e2 <f_open+0x196>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 801812c:	0739      	lsls	r1, r7, #28
 801812e:	d4bc      	bmi.n	80180aa <f_open+0x5e>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018130:	9c02      	ldr	r4, [sp, #8]
			fp->dir_ptr = dj.dir;
 8018132:	990a      	ldr	r1, [sp, #40]	; 0x28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018134:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018136:	622b      	str	r3, [r5, #32]
			fp->dir_ptr = dj.dir;
 8018138:	6269      	str	r1, [r5, #36]	; 0x24
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 801813a:	0730      	lsls	r0, r6, #28
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801813c:	7820      	ldrb	r0, [r4, #0]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 801813e:	bf48      	it	mi
 8018140:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018144:	f7ff fd99 	bl	8017c7a <ld_clust.isra.0>
 8018148:	60a8      	str	r0, [r5, #8]
 801814a:	4603      	mov	r3, r0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801814c:	f101 001c 	add.w	r0, r1, #28
 8018150:	f7ff fc01 	bl	8017956 <ld_dword>
			fp->obj.id = fs->id;
 8018154:	88e2      	ldrh	r2, [r4, #6]
 8018156:	80aa      	strh	r2, [r5, #4]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018158:	06b1      	lsls	r1, r6, #26
			fp->err = 0;		/* Clear error flag */
 801815a:	f04f 0200 	mov.w	r2, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801815e:	4607      	mov	r7, r0
 8018160:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	/* Validate the file object */
 8018162:	602c      	str	r4, [r5, #0]
			fp->flag = mode;	/* Set file access mode */
 8018164:	742e      	strb	r6, [r5, #16]
			fp->err = 0;		/* Clear error flag */
 8018166:	746a      	strb	r2, [r5, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8018168:	61ea      	str	r2, [r5, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 801816a:	616a      	str	r2, [r5, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801816c:	d410      	bmi.n	8018190 <f_open+0x144>
						res = FR_INT_ERR;
 801816e:	2400      	movs	r4, #0
}
 8018170:	4620      	mov	r0, r4
 8018172:	b00e      	add	sp, #56	; 0x38
 8018174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (res == FR_OK) {					/* Is the object exsiting? */
 8018178:	2c00      	cmp	r4, #0
 801817a:	d1cd      	bne.n	8018118 <f_open+0xcc>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 801817c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8018180:	06da      	lsls	r2, r3, #27
 8018182:	d430      	bmi.n	80181e6 <f_open+0x19a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8018184:	07bf      	lsls	r7, r7, #30
 8018186:	d5d3      	bpl.n	8018130 <f_open+0xe4>
 8018188:	07dc      	lsls	r4, r3, #31
 801818a:	d5d1      	bpl.n	8018130 <f_open+0xe4>
					res = FR_DENIED;
 801818c:	2407      	movs	r4, #7
 801818e:	e7c3      	b.n	8018118 <f_open+0xcc>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018190:	2800      	cmp	r0, #0
 8018192:	d0ec      	beq.n	801816e <f_open+0x122>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018194:	8964      	ldrh	r4, [r4, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018196:	6168      	str	r0, [r5, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018198:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801819a:	42bc      	cmp	r4, r7
 801819c:	d310      	bcc.n	80181c0 <f_open+0x174>
 801819e:	2400      	movs	r4, #0
				fp->clust = clst;
 80181a0:	61ab      	str	r3, [r5, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80181a2:	2c00      	cmp	r4, #0
 80181a4:	d1b8      	bne.n	8018118 <f_open+0xcc>
 80181a6:	f3c7 0208 	ubfx	r2, r7, #0, #9
 80181aa:	2a00      	cmp	r2, #0
 80181ac:	d0df      	beq.n	801816e <f_open+0x122>
					sc = clst2sect(fs, clst);
 80181ae:	9802      	ldr	r0, [sp, #8]
 80181b0:	4619      	mov	r1, r3
 80181b2:	f7ff fbda 	bl	801796a <clst2sect>
					if (sc == 0) {
 80181b6:	b1c0      	cbz	r0, 80181ea <f_open+0x19e>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80181b8:	eb00 2057 	add.w	r0, r0, r7, lsr #9
 80181bc:	61e8      	str	r0, [r5, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80181be:	e7d7      	b.n	8018170 <f_open+0x124>
					clst = get_fat(&fp->obj, clst);
 80181c0:	4619      	mov	r1, r3
 80181c2:	6828      	ldr	r0, [r5, #0]
 80181c4:	f7ff fd61 	bl	8017c8a <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80181c8:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80181ca:	4603      	mov	r3, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181cc:	eba7 0704 	sub.w	r7, r7, r4
					if (clst <= 1) res = FR_INT_ERR;
 80181d0:	d903      	bls.n	80181da <f_open+0x18e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181d2:	1c42      	adds	r2, r0, #1
 80181d4:	d1e1      	bne.n	801819a <f_open+0x14e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80181d6:	2401      	movs	r4, #1
 80181d8:	e7e2      	b.n	80181a0 <f_open+0x154>
					if (clst <= 1) res = FR_INT_ERR;
 80181da:	2402      	movs	r4, #2
 80181dc:	e7e0      	b.n	80181a0 <f_open+0x154>
 80181de:	4604      	mov	r4, r0
 80181e0:	e79a      	b.n	8018118 <f_open+0xcc>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80181e2:	2408      	movs	r4, #8
 80181e4:	e798      	b.n	8018118 <f_open+0xcc>
					res = FR_NO_FILE;
 80181e6:	2404      	movs	r4, #4
 80181e8:	e796      	b.n	8018118 <f_open+0xcc>
						res = FR_INT_ERR;
 80181ea:	2402      	movs	r4, #2
 80181ec:	e794      	b.n	8018118 <f_open+0xcc>
	if (!fp) return FR_INVALID_OBJECT;
 80181ee:	2409      	movs	r4, #9
 80181f0:	e7be      	b.n	8018170 <f_open+0x124>

080181f2 <f_read>:
{
 80181f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f6:	4699      	mov	r9, r3
 80181f8:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80181fa:	2300      	movs	r3, #0
{
 80181fc:	4688      	mov	r8, r1
	*br = 0;	/* Clear read byte counter */
 80181fe:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018202:	a903      	add	r1, sp, #12
{
 8018204:	4604      	mov	r4, r0
 8018206:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018208:	f7ff fbc6 	bl	8017998 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801820c:	4606      	mov	r6, r0
 801820e:	b9f8      	cbnz	r0, 8018250 <f_read+0x5e>
 8018210:	7c66      	ldrb	r6, [r4, #17]
 8018212:	b9ee      	cbnz	r6, 8018250 <f_read+0x5e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8018214:	f894 a010 	ldrb.w	sl, [r4, #16]
 8018218:	f01a 0301 	ands.w	r3, sl, #1
 801821c:	9300      	str	r3, [sp, #0]
 801821e:	d07c      	beq.n	801831a <f_read+0x128>
	remain = fp->obj.objsize - fp->fptr;
 8018220:	68e7      	ldr	r7, [r4, #12]
 8018222:	6962      	ldr	r2, [r4, #20]
 8018224:	1abf      	subs	r7, r7, r2
 8018226:	42af      	cmp	r7, r5
 8018228:	bf28      	it	cs
 801822a:	462f      	movcs	r7, r5
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 801822c:	b187      	cbz	r7, 8018250 <f_read+0x5e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801822e:	6962      	ldr	r2, [r4, #20]
 8018230:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8018234:	2b00      	cmp	r3, #0
 8018236:	d157      	bne.n	80182e8 <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018238:	9b03      	ldr	r3, [sp, #12]
 801823a:	895b      	ldrh	r3, [r3, #10]
 801823c:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 801823e:	ea13 2a52 	ands.w	sl, r3, r2, lsr #9
 8018242:	d115      	bne.n	8018270 <f_read+0x7e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8018244:	b942      	cbnz	r2, 8018258 <f_read+0x66>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018246:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018248:	2801      	cmp	r0, #1
 801824a:	d80a      	bhi.n	8018262 <f_read+0x70>
 801824c:	2602      	movs	r6, #2
 801824e:	7466      	strb	r6, [r4, #17]
}
 8018250:	4630      	mov	r0, r6
 8018252:	b005      	add	sp, #20
 8018254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018258:	69a1      	ldr	r1, [r4, #24]
 801825a:	6820      	ldr	r0, [r4, #0]
 801825c:	f7ff fd15 	bl	8017c8a <get_fat.isra.0>
 8018260:	e7f2      	b.n	8018248 <f_read+0x56>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018262:	1c43      	adds	r3, r0, #1
 8018264:	d103      	bne.n	801826e <f_read+0x7c>
 8018266:	2301      	movs	r3, #1
 8018268:	9e00      	ldr	r6, [sp, #0]
 801826a:	7463      	strb	r3, [r4, #17]
 801826c:	e7f0      	b.n	8018250 <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 801826e:	61a0      	str	r0, [r4, #24]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8018270:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8018274:	69a1      	ldr	r1, [r4, #24]
 8018276:	4658      	mov	r0, fp
 8018278:	f7ff fb77 	bl	801796a <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 801827c:	2800      	cmp	r0, #0
 801827e:	d0e5      	beq.n	801824c <f_read+0x5a>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8018280:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 8018284:	eb0a 0200 	add.w	r2, sl, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8018288:	d32d      	bcc.n	80182e6 <f_read+0xf4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801828a:	f8bb 100a 	ldrh.w	r1, [fp, #10]
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801828e:	9201      	str	r2, [sp, #4]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018290:	eb0a 2057 	add.w	r0, sl, r7, lsr #9
 8018294:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8018296:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fs->csize - csect;
 801829a:	bf88      	it	hi
 801829c:	eba1 050a 	subhi.w	r5, r1, sl
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80182a0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80182a4:	462b      	mov	r3, r5
 80182a6:	4641      	mov	r1, r8
 80182a8:	f7f7 fab6 	bl	800f818 <disk_read>
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d1da      	bne.n	8018266 <f_read+0x74>
				if (fs->wflag && fs->winsect - sect < cc) {
 80182b0:	9903      	ldr	r1, [sp, #12]
 80182b2:	78cb      	ldrb	r3, [r1, #3]
 80182b4:	b15b      	cbz	r3, 80182ce <f_read+0xdc>
 80182b6:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80182b8:	9a01      	ldr	r2, [sp, #4]
 80182ba:	1a80      	subs	r0, r0, r2
 80182bc:	42a8      	cmp	r0, r5
 80182be:	d206      	bcs.n	80182ce <f_read+0xdc>
 80182c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80182c4:	3130      	adds	r1, #48	; 0x30
 80182c6:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 80182ca:	f001 f8d3 	bl	8019474 <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80182ce:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 80182d0:	f8d9 3000 	ldr.w	r3, [r9]
 80182d4:	442b      	add	r3, r5
 80182d6:	f8c9 3000 	str.w	r3, [r9]
 80182da:	6963      	ldr	r3, [r4, #20]
 80182dc:	442b      	add	r3, r5
 80182de:	1b7f      	subs	r7, r7, r5
 80182e0:	44a8      	add	r8, r5
 80182e2:	6163      	str	r3, [r4, #20]
 80182e4:	e7a2      	b.n	801822c <f_read+0x3a>
			fp->sect = sect;
 80182e6:	61e2      	str	r2, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80182e8:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80182ea:	69e1      	ldr	r1, [r4, #28]
 80182ec:	9803      	ldr	r0, [sp, #12]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80182ee:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80182f2:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80182f6:	42bd      	cmp	r5, r7
 80182f8:	bf28      	it	cs
 80182fa:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80182fc:	f7ff fb8a 	bl	8017a14 <move_window>
 8018300:	2800      	cmp	r0, #0
 8018302:	d1b0      	bne.n	8018266 <f_read+0x74>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8018304:	9903      	ldr	r1, [sp, #12]
 8018306:	6963      	ldr	r3, [r4, #20]
 8018308:	3130      	adds	r1, #48	; 0x30
 801830a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801830e:	462a      	mov	r2, r5
 8018310:	4419      	add	r1, r3
 8018312:	4640      	mov	r0, r8
 8018314:	f001 f8ae 	bl	8019474 <memcpy>
 8018318:	e7da      	b.n	80182d0 <f_read+0xde>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801831a:	2607      	movs	r6, #7
 801831c:	e798      	b.n	8018250 <f_read+0x5e>

0801831e <f_write>:
{
 801831e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018322:	469a      	mov	sl, r3
 8018324:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8018326:	2300      	movs	r3, #0
{
 8018328:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 801832a:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801832e:	a903      	add	r1, sp, #12
{
 8018330:	4604      	mov	r4, r0
 8018332:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018334:	f7ff fb30 	bl	8017998 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018338:	4606      	mov	r6, r0
 801833a:	bb20      	cbnz	r0, 8018386 <f_write+0x68>
 801833c:	7c66      	ldrb	r6, [r4, #17]
 801833e:	bb16      	cbnz	r6, 8018386 <f_write+0x68>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018340:	7c23      	ldrb	r3, [r4, #16]
 8018342:	079a      	lsls	r2, r3, #30
 8018344:	f140 80a9 	bpl.w	801849a <f_write+0x17c>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018348:	6963      	ldr	r3, [r4, #20]
 801834a:	42fb      	cmn	r3, r7
 801834c:	d300      	bcc.n	8018350 <f_write+0x32>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801834e:	43df      	mvns	r7, r3
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8018350:	b1af      	cbz	r7, 801837e <f_write+0x60>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018352:	6963      	ldr	r3, [r4, #20]
 8018354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8018358:	2a00      	cmp	r2, #0
 801835a:	f040 8081 	bne.w	8018460 <f_write+0x142>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801835e:	9a03      	ldr	r2, [sp, #12]
 8018360:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 8018364:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8018368:	ea18 2853 	ands.w	r8, r8, r3, lsr #9
 801836c:	d11e      	bne.n	80183ac <f_write+0x8e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801836e:	b973      	cbnz	r3, 801838e <f_write+0x70>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018370:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8018372:	b971      	cbnz	r1, 8018392 <f_write+0x74>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018374:	6820      	ldr	r0, [r4, #0]
 8018376:	f7ff fd13 	bl	8017da0 <create_chain.isra.0>
 801837a:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801837c:	b948      	cbnz	r0, 8018392 <f_write+0x74>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801837e:	7c23      	ldrb	r3, [r4, #16]
 8018380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018384:	7423      	strb	r3, [r4, #16]
}
 8018386:	4630      	mov	r0, r6
 8018388:	b005      	add	sp, #20
 801838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801838e:	69a1      	ldr	r1, [r4, #24]
 8018390:	e7f0      	b.n	8018374 <f_write+0x56>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018392:	2901      	cmp	r1, #1
 8018394:	d102      	bne.n	801839c <f_write+0x7e>
 8018396:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018398:	7466      	strb	r6, [r4, #17]
 801839a:	e7f4      	b.n	8018386 <f_write+0x68>
 801839c:	1c4b      	adds	r3, r1, #1
 801839e:	d101      	bne.n	80183a4 <f_write+0x86>
 80183a0:	2601      	movs	r6, #1
 80183a2:	e7f9      	b.n	8018398 <f_write+0x7a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80183a4:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80183a6:	61a1      	str	r1, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80183a8:	b903      	cbnz	r3, 80183ac <f_write+0x8e>
 80183aa:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 80183ac:	9803      	ldr	r0, [sp, #12]
 80183ae:	69e3      	ldr	r3, [r4, #28]
 80183b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80183b2:	429a      	cmp	r2, r3
 80183b4:	d103      	bne.n	80183be <f_write+0xa0>
 80183b6:	f7ff fb09 	bl	80179cc <sync_window>
 80183ba:	2800      	cmp	r0, #0
 80183bc:	d1f0      	bne.n	80183a0 <f_write+0x82>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80183be:	9d03      	ldr	r5, [sp, #12]
 80183c0:	69a1      	ldr	r1, [r4, #24]
 80183c2:	4628      	mov	r0, r5
 80183c4:	f7ff fad1 	bl	801796a <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80183c8:	2800      	cmp	r0, #0
 80183ca:	d0e4      	beq.n	8018396 <f_write+0x78>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80183cc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 80183d0:	eb08 0b00 	add.w	fp, r8, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80183d4:	d336      	bcc.n	8018444 <f_write+0x126>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80183d6:	8969      	ldrh	r1, [r5, #10]
 80183d8:	eb08 2057 	add.w	r0, r8, r7, lsr #9
 80183dc:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80183de:	ea4f 2357 	mov.w	r3, r7, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183e2:	7868      	ldrb	r0, [r5, #1]
					cc = fs->csize - csect;
 80183e4:	bf88      	it	hi
 80183e6:	eba1 0308 	subhi.w	r3, r1, r8
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183ea:	465a      	mov	r2, fp
 80183ec:	4649      	mov	r1, r9
 80183ee:	9301      	str	r3, [sp, #4]
 80183f0:	f7f7 fa1e 	bl	800f830 <disk_write>
 80183f4:	4605      	mov	r5, r0
 80183f6:	2800      	cmp	r0, #0
 80183f8:	d1d2      	bne.n	80183a0 <f_write+0x82>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 80183fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80183fe:	9b01      	ldr	r3, [sp, #4]
 8018400:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8018404:	eba1 010b 	sub.w	r1, r1, fp
 8018408:	4299      	cmp	r1, r3
 801840a:	d20a      	bcs.n	8018422 <f_write+0x104>
 801840c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018410:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8018414:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8018418:	f001 f82c 	bl	8019474 <memcpy>
					fs->wflag = 0;
 801841c:	9b01      	ldr	r3, [sp, #4]
 801841e:	f888 5003 	strb.w	r5, [r8, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018422:	025d      	lsls	r5, r3, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8018424:	f8da 3000 	ldr.w	r3, [sl]
 8018428:	442b      	add	r3, r5
 801842a:	f8ca 3000 	str.w	r3, [sl]
 801842e:	6962      	ldr	r2, [r4, #20]
 8018430:	68e3      	ldr	r3, [r4, #12]
 8018432:	1b7f      	subs	r7, r7, r5
 8018434:	44a9      	add	r9, r5
 8018436:	4415      	add	r5, r2
 8018438:	6165      	str	r5, [r4, #20]
 801843a:	42ab      	cmp	r3, r5
 801843c:	bf2c      	ite	cs
 801843e:	60e3      	strcs	r3, [r4, #12]
 8018440:	60e5      	strcc	r5, [r4, #12]
 8018442:	e785      	b.n	8018350 <f_write+0x32>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 8018444:	6961      	ldr	r1, [r4, #20]
 8018446:	68e3      	ldr	r3, [r4, #12]
 8018448:	4299      	cmp	r1, r3
 801844a:	d307      	bcc.n	801845c <f_write+0x13e>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 801844c:	4628      	mov	r0, r5
 801844e:	f7ff fabd 	bl	80179cc <sync_window>
 8018452:	2800      	cmp	r0, #0
 8018454:	d1a4      	bne.n	80183a0 <f_write+0x82>
				fs->winsect = sect;
 8018456:	9b03      	ldr	r3, [sp, #12]
 8018458:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
			fp->sect = sect;
 801845c:	f8c4 b01c 	str.w	fp, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8018460:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8018462:	69e1      	ldr	r1, [r4, #28]
 8018464:	9803      	ldr	r0, [sp, #12]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8018466:	f3c5 0508 	ubfx	r5, r5, #0, #9
 801846a:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801846e:	42bd      	cmp	r5, r7
 8018470:	bf28      	it	cs
 8018472:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8018474:	f7ff face 	bl	8017a14 <move_window>
 8018478:	2800      	cmp	r0, #0
 801847a:	d191      	bne.n	80183a0 <f_write+0x82>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801847c:	9803      	ldr	r0, [sp, #12]
 801847e:	6963      	ldr	r3, [r4, #20]
 8018480:	3030      	adds	r0, #48	; 0x30
 8018482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018486:	462a      	mov	r2, r5
 8018488:	4418      	add	r0, r3
 801848a:	4649      	mov	r1, r9
 801848c:	f000 fff2 	bl	8019474 <memcpy>
		fs->wflag = 1;
 8018490:	9b03      	ldr	r3, [sp, #12]
 8018492:	f04f 0201 	mov.w	r2, #1
 8018496:	70da      	strb	r2, [r3, #3]
 8018498:	e7c4      	b.n	8018424 <f_write+0x106>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801849a:	2607      	movs	r6, #7
 801849c:	e773      	b.n	8018386 <f_write+0x68>

0801849e <f_sync>:
{
 801849e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80184a0:	a901      	add	r1, sp, #4
{
 80184a2:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80184a4:	f7ff fa78 	bl	8017998 <validate>
	if (res == FR_OK) {
 80184a8:	4604      	mov	r4, r0
 80184aa:	bb50      	cbnz	r0, 8018502 <f_sync+0x64>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80184ac:	7c2c      	ldrb	r4, [r5, #16]
 80184ae:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 80184b2:	d026      	beq.n	8018502 <f_sync+0x64>
				res = move_window(fs, fp->dir_sect);
 80184b4:	6a29      	ldr	r1, [r5, #32]
 80184b6:	9801      	ldr	r0, [sp, #4]
 80184b8:	f7ff faac 	bl	8017a14 <move_window>
				if (res == FR_OK) {
 80184bc:	4604      	mov	r4, r0
 80184be:	bb00      	cbnz	r0, 8018502 <f_sync+0x64>
					dir = fp->dir_ptr;
 80184c0:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80184c2:	7af3      	ldrb	r3, [r6, #11]
 80184c4:	f043 0320 	orr.w	r3, r3, #32
 80184c8:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80184ca:	68aa      	ldr	r2, [r5, #8]
 80184cc:	6828      	ldr	r0, [r5, #0]
 80184ce:	4631      	mov	r1, r6
 80184d0:	f7ff fa56 	bl	8017980 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80184d4:	68e9      	ldr	r1, [r5, #12]
 80184d6:	f106 001c 	add.w	r0, r6, #28
 80184da:	f7ff fa3e 	bl	801795a <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 80184de:	2321      	movs	r3, #33	; 0x21
 80184e0:	7633      	strb	r3, [r6, #24]
					fs->wflag = 1;
 80184e2:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80184e4:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val;
 80184e6:	2350      	movs	r3, #80	; 0x50
 80184e8:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
 80184ea:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80184ec:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80184ee:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 80184f0:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 80184f2:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80184f4:	f7ff fb4c 	bl	8017b90 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80184f8:	7c2b      	ldrb	r3, [r5, #16]
 80184fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80184fe:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8018500:	742b      	strb	r3, [r5, #16]
}
 8018502:	4620      	mov	r0, r4
 8018504:	b002      	add	sp, #8
 8018506:	bd70      	pop	{r4, r5, r6, pc}

08018508 <f_close>:
{
 8018508:	b513      	push	{r0, r1, r4, lr}
 801850a:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 801850c:	f7ff ffc7 	bl	801849e <f_sync>
	if (res == FR_OK)
 8018510:	b928      	cbnz	r0, 801851e <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018512:	a901      	add	r1, sp, #4
 8018514:	4620      	mov	r0, r4
 8018516:	f7ff fa3f 	bl	8017998 <validate>
		if (res == FR_OK) {
 801851a:	b900      	cbnz	r0, 801851e <f_close+0x16>
			fp->obj.fs = 0;	/* Invalidate file object */
 801851c:	6020      	str	r0, [r4, #0]
}
 801851e:	b002      	add	sp, #8
 8018520:	bd10      	pop	{r4, pc}

08018522 <f_lseek>:
{
 8018522:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018526:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8018528:	a901      	add	r1, sp, #4
{
 801852a:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801852c:	f7ff fa34 	bl	8017998 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8018530:	4606      	mov	r6, r0
 8018532:	2800      	cmp	r0, #0
 8018534:	d150      	bne.n	80185d8 <f_lseek+0xb6>
 8018536:	7c66      	ldrb	r6, [r4, #17]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8018538:	2e00      	cmp	r6, #0
 801853a:	d14d      	bne.n	80185d8 <f_lseek+0xb6>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801853c:	68e3      	ldr	r3, [r4, #12]
 801853e:	42ab      	cmp	r3, r5
 8018540:	d204      	bcs.n	801854c <f_lseek+0x2a>
 8018542:	7c22      	ldrb	r2, [r4, #16]
 8018544:	f012 0f02 	tst.w	r2, #2
 8018548:	bf08      	it	eq
 801854a:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 801854c:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 801854e:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 8018550:	6162      	str	r2, [r4, #20]
		if (ofs > 0) {
 8018552:	b99d      	cbnz	r5, 801857c <f_lseek+0x5a>
		fp->fptr = nsect = 0;
 8018554:	2500      	movs	r5, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8018556:	68e2      	ldr	r2, [r4, #12]
 8018558:	6963      	ldr	r3, [r4, #20]
 801855a:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
 801855c:	bf82      	ittt	hi
 801855e:	7c22      	ldrbhi	r2, [r4, #16]
			fp->obj.objsize = fp->fptr;
 8018560:	60e3      	strhi	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8018562:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8018566:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 801856a:	bf88      	it	hi
 801856c:	7422      	strbhi	r2, [r4, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801856e:	2b00      	cmp	r3, #0
 8018570:	d032      	beq.n	80185d8 <f_lseek+0xb6>
 8018572:	69e3      	ldr	r3, [r4, #28]
 8018574:	42ab      	cmp	r3, r5
			fp->sect = nsect;
 8018576:	bf18      	it	ne
 8018578:	61e5      	strne	r5, [r4, #28]
 801857a:	e02d      	b.n	80185d8 <f_lseek+0xb6>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801857c:	9a01      	ldr	r2, [sp, #4]
 801857e:	8957      	ldrh	r7, [r2, #10]
 8018580:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8018582:	b1fb      	cbz	r3, 80185c4 <f_lseek+0xa2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8018584:	3b01      	subs	r3, #1
 8018586:	1e6a      	subs	r2, r5, #1
 8018588:	fbb3 f1f7 	udiv	r1, r3, r7
 801858c:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8018590:	428a      	cmp	r2, r1
 8018592:	d317      	bcc.n	80185c4 <f_lseek+0xa2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8018594:	427a      	negs	r2, r7
 8018596:	4013      	ands	r3, r2
				clst = fp->clust;
 8018598:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801859a:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 801859c:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 801859e:	2900      	cmp	r1, #0
 80185a0:	d0d8      	beq.n	8018554 <f_lseek+0x32>
				while (ofs > bcs) {						/* Cluster following loop */
 80185a2:	42bd      	cmp	r5, r7
					ofs -= bcs; fp->fptr += bcs;
 80185a4:	6963      	ldr	r3, [r4, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 80185a6:	d822      	bhi.n	80185ee <f_lseek+0xcc>
				fp->fptr += ofs;
 80185a8:	6963      	ldr	r3, [r4, #20]
 80185aa:	442b      	add	r3, r5
 80185ac:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 80185ae:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d0ce      	beq.n	8018554 <f_lseek+0x32>
					nsect = clst2sect(fs, clst);	/* Current sector */
 80185b6:	9801      	ldr	r0, [sp, #4]
 80185b8:	f7ff f9d7 	bl	801796a <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 80185bc:	b150      	cbz	r0, 80185d4 <f_lseek+0xb2>
					nsect += (DWORD)(ofs / SS(fs));
 80185be:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 80185c2:	e7c8      	b.n	8018556 <f_lseek+0x34>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80185c4:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80185c6:	b981      	cbnz	r1, 80185ea <f_lseek+0xc8>
					clst = create_chain(&fp->obj, 0);
 80185c8:	6820      	ldr	r0, [r4, #0]
 80185ca:	f7ff fbe9 	bl	8017da0 <create_chain.isra.0>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80185ce:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 80185d0:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80185d2:	d105      	bne.n	80185e0 <f_lseek+0xbe>
 80185d4:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80185d6:	7466      	strb	r6, [r4, #17]
}
 80185d8:	4630      	mov	r0, r6
 80185da:	b002      	add	sp, #8
 80185dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80185e0:	1c48      	adds	r0, r1, #1
 80185e2:	d101      	bne.n	80185e8 <f_lseek+0xc6>
 80185e4:	2601      	movs	r6, #1
 80185e6:	e7f6      	b.n	80185d6 <f_lseek+0xb4>
					fp->obj.sclust = clst;
 80185e8:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 80185ea:	61a1      	str	r1, [r4, #24]
 80185ec:	e7d7      	b.n	801859e <f_lseek+0x7c>
					ofs -= bcs; fp->fptr += bcs;
 80185ee:	443b      	add	r3, r7
 80185f0:	6163      	str	r3, [r4, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80185f2:	7c23      	ldrb	r3, [r4, #16]
 80185f4:	6820      	ldr	r0, [r4, #0]
 80185f6:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 80185f8:	eba5 0807 	sub.w	r8, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80185fc:	d505      	bpl.n	801860a <f_lseek+0xe8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80185fe:	f7ff fbcf 	bl	8017da0 <create_chain.isra.0>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8018602:	4605      	mov	r5, r0
 8018604:	b920      	cbnz	r0, 8018610 <f_lseek+0xee>
 8018606:	4601      	mov	r1, r0
 8018608:	e7ce      	b.n	80185a8 <f_lseek+0x86>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801860a:	f7ff fb3e 	bl	8017c8a <get_fat.isra.0>
 801860e:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018610:	1c6b      	adds	r3, r5, #1
 8018612:	d0e7      	beq.n	80185e4 <f_lseek+0xc2>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8018614:	2d01      	cmp	r5, #1
 8018616:	d9dd      	bls.n	80185d4 <f_lseek+0xb2>
 8018618:	9b01      	ldr	r3, [sp, #4]
 801861a:	695b      	ldr	r3, [r3, #20]
 801861c:	42ab      	cmp	r3, r5
 801861e:	d9d9      	bls.n	80185d4 <f_lseek+0xb2>
					fp->clust = clst;
 8018620:	61a5      	str	r5, [r4, #24]
 8018622:	4629      	mov	r1, r5
					ofs -= bcs; fp->fptr += bcs;
 8018624:	4645      	mov	r5, r8
 8018626:	e7bc      	b.n	80185a2 <f_lseek+0x80>

08018628 <f_opendir>:
{
 8018628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!dp) return FR_INVALID_OBJECT;
 801862a:	4604      	mov	r4, r0
{
 801862c:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 801862e:	b348      	cbz	r0, 8018684 <f_opendir+0x5c>
	res = mount_volume(&path, &fs, 0);
 8018630:	2200      	movs	r2, #0
 8018632:	a903      	add	r1, sp, #12
 8018634:	a801      	add	r0, sp, #4
 8018636:	f7f6 fb4f 	bl	800ecd8 <mount_volume>
	if (res == FR_OK) {
 801863a:	b970      	cbnz	r0, 801865a <f_opendir+0x32>
		dp->obj.fs = fs;
 801863c:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801863e:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
 8018640:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8018642:	4620      	mov	r0, r4
 8018644:	f7f6 fc6a 	bl	800ef1c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8018648:	b9f0      	cbnz	r0, 8018688 <f_opendir+0x60>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801864a:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 801864e:	2b00      	cmp	r3, #0
 8018650:	db0c      	blt.n	801866c <f_opendir+0x44>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8018652:	79a3      	ldrb	r3, [r4, #6]
 8018654:	06db      	lsls	r3, r3, #27
 8018656:	d403      	bmi.n	8018660 <f_opendir+0x38>
					res = FR_NO_PATH;
 8018658:	2005      	movs	r0, #5
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 801865a:	2300      	movs	r3, #0
 801865c:	6023      	str	r3, [r4, #0]
 801865e:	e00f      	b.n	8018680 <f_opendir+0x58>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8018660:	9b03      	ldr	r3, [sp, #12]
 8018662:	69e1      	ldr	r1, [r4, #28]
 8018664:	7818      	ldrb	r0, [r3, #0]
 8018666:	f7ff fb08 	bl	8017c7a <ld_clust.isra.0>
 801866a:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 801866c:	9b03      	ldr	r3, [sp, #12]
 801866e:	88db      	ldrh	r3, [r3, #6]
 8018670:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8018672:	4620      	mov	r0, r4
 8018674:	f7ff fc03 	bl	8017e7e <dir_sdi.constprop.0>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8018678:	2804      	cmp	r0, #4
 801867a:	d0ed      	beq.n	8018658 <f_opendir+0x30>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 801867c:	2800      	cmp	r0, #0
 801867e:	d1ec      	bne.n	801865a <f_opendir+0x32>
}
 8018680:	b004      	add	sp, #16
 8018682:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
 8018684:	2009      	movs	r0, #9
 8018686:	e7fb      	b.n	8018680 <f_opendir+0x58>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8018688:	2804      	cmp	r0, #4
 801868a:	d0e5      	beq.n	8018658 <f_opendir+0x30>
 801868c:	e7e5      	b.n	801865a <f_opendir+0x32>

0801868e <f_closedir>:
{
 801868e:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8018690:	a901      	add	r1, sp, #4
{
 8018692:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8018694:	f7ff f980 	bl	8017998 <validate>
	if (res == FR_OK) {
 8018698:	b900      	cbnz	r0, 801869c <f_closedir+0xe>
		dp->obj.fs = 0;	/* Invalidate directory object */
 801869a:	6020      	str	r0, [r4, #0]
}
 801869c:	b002      	add	sp, #8
 801869e:	bd10      	pop	{r4, pc}

080186a0 <f_readdir>:
{
 80186a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186a2:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80186a4:	a901      	add	r1, sp, #4
{
 80186a6:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80186a8:	f7ff f976 	bl	8017998 <validate>
	if (res == FR_OK) {
 80186ac:	b918      	cbnz	r0, 80186b6 <f_readdir+0x16>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80186ae:	4620      	mov	r0, r4
		if (!fno) {
 80186b0:	b91d      	cbnz	r5, 80186ba <f_readdir+0x1a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80186b2:	f7ff fbe4 	bl	8017e7e <dir_sdi.constprop.0>
}
 80186b6:	b003      	add	sp, #12
 80186b8:	bd30      	pop	{r4, r5, pc}
			res = DIR_READ_FILE(dp);		/* Read an item */
 80186ba:	f7ff fc67 	bl	8017f8c <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 80186be:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
 80186c2:	d1f8      	bne.n	80186b6 <f_readdir+0x16>
	fno->fname[0] = 0;			/* Invaidate file info */
 80186c4:	726b      	strb	r3, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80186c6:	69a3      	ldr	r3, [r4, #24]
 80186c8:	b11b      	cbz	r3, 80186d2 <f_readdir+0x32>
 80186ca:	69e0      	ldr	r0, [r4, #28]
 80186cc:	4629      	mov	r1, r5
 80186ce:	f7ff faaa 	bl	8017c26 <get_fileinfo.part.0.isra.0>
				res = dir_next(dp, 0);		/* Increment index for next */
 80186d2:	2100      	movs	r1, #0
 80186d4:	4620      	mov	r0, r4
 80186d6:	f7ff fc04 	bl	8017ee2 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80186da:	2804      	cmp	r0, #4
 80186dc:	bf08      	it	eq
 80186de:	2000      	moveq	r0, #0
 80186e0:	e7e9      	b.n	80186b6 <f_readdir+0x16>

080186e2 <f_stat>:
{
 80186e2:	b530      	push	{r4, r5, lr}
 80186e4:	b08f      	sub	sp, #60	; 0x3c
 80186e6:	460d      	mov	r5, r1
 80186e8:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &dj.obj.fs, 0);
 80186ea:	2200      	movs	r2, #0
 80186ec:	a903      	add	r1, sp, #12
 80186ee:	a801      	add	r0, sp, #4
 80186f0:	f7f6 faf2 	bl	800ecd8 <mount_volume>
	if (res == FR_OK) {
 80186f4:	4604      	mov	r4, r0
 80186f6:	b988      	cbnz	r0, 801871c <f_stat+0x3a>
		res = follow_path(&dj, path);	/* Follow the file path */
 80186f8:	9901      	ldr	r1, [sp, #4]
 80186fa:	a803      	add	r0, sp, #12
 80186fc:	f7f6 fc0e 	bl	800ef1c <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8018700:	4604      	mov	r4, r0
 8018702:	b958      	cbnz	r0, 801871c <f_stat+0x3a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8018704:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 8018708:	2b00      	cmp	r3, #0
 801870a:	db0a      	blt.n	8018722 <f_stat+0x40>
				if (fno) get_fileinfo(&dj, fno);
 801870c:	b135      	cbz	r5, 801871c <f_stat+0x3a>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 801870e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	fno->fname[0] = 0;			/* Invaidate file info */
 8018710:	7268      	strb	r0, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8018712:	b11b      	cbz	r3, 801871c <f_stat+0x3a>
 8018714:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018716:	4629      	mov	r1, r5
 8018718:	f7ff fa85 	bl	8017c26 <get_fileinfo.part.0.isra.0>
}
 801871c:	4620      	mov	r0, r4
 801871e:	b00f      	add	sp, #60	; 0x3c
 8018720:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8018722:	2406      	movs	r4, #6
 8018724:	e7fa      	b.n	801871c <f_stat+0x3a>

08018726 <f_getfree>:
{
 8018726:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801872a:	b085      	sub	sp, #20
 801872c:	460f      	mov	r7, r1
 801872e:	9001      	str	r0, [sp, #4]
 8018730:	4615      	mov	r5, r2
	res = mount_volume(&path, &fs, 0);
 8018732:	a903      	add	r1, sp, #12
 8018734:	2200      	movs	r2, #0
 8018736:	a801      	add	r0, sp, #4
 8018738:	f7f6 face 	bl	800ecd8 <mount_volume>
	if (res == FR_OK) {
 801873c:	4604      	mov	r4, r0
 801873e:	b940      	cbnz	r0, 8018752 <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 8018740:	9e03      	ldr	r6, [sp, #12]
 8018742:	602e      	str	r6, [r5, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8018744:	e9d6 3804 	ldrd	r3, r8, [r6, #16]
 8018748:	f1a8 0202 	sub.w	r2, r8, #2
 801874c:	4293      	cmp	r3, r2
 801874e:	d804      	bhi.n	801875a <f_getfree+0x34>
			*nclst = fs->free_clst;
 8018750:	603b      	str	r3, [r7, #0]
}
 8018752:	4620      	mov	r0, r4
 8018754:	b005      	add	sp, #20
 8018756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 801875a:	7833      	ldrb	r3, [r6, #0]
 801875c:	2b01      	cmp	r3, #1
 801875e:	d11a      	bne.n	8018796 <f_getfree+0x70>
				clst = 2; obj.fs = fs;
 8018760:	f04f 0802 	mov.w	r8, #2
			nfree = 0;
 8018764:	4605      	mov	r5, r0
					stat = get_fat(&obj, clst);
 8018766:	4641      	mov	r1, r8
 8018768:	4630      	mov	r0, r6
 801876a:	f7ff fa8e 	bl	8017c8a <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801876e:	1c43      	adds	r3, r0, #1
 8018770:	d036      	beq.n	80187e0 <f_getfree+0xba>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8018772:	2801      	cmp	r0, #1
 8018774:	d036      	beq.n	80187e4 <f_getfree+0xbe>
					if (stat == 0) nfree++;
 8018776:	b900      	cbnz	r0, 801877a <f_getfree+0x54>
 8018778:	3501      	adds	r5, #1
				} while (++clst < fs->n_fatent);
 801877a:	9b03      	ldr	r3, [sp, #12]
 801877c:	695b      	ldr	r3, [r3, #20]
 801877e:	f108 0801 	add.w	r8, r8, #1
 8018782:	4543      	cmp	r3, r8
 8018784:	d8ef      	bhi.n	8018766 <f_getfree+0x40>
				fs->free_clst = nfree;	/* Now free_clst is valid */
 8018786:	9b03      	ldr	r3, [sp, #12]
				*nclst = nfree;			/* Return the free clusters */
 8018788:	603d      	str	r5, [r7, #0]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 801878a:	791a      	ldrb	r2, [r3, #4]
				fs->free_clst = nfree;	/* Now free_clst is valid */
 801878c:	611d      	str	r5, [r3, #16]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 801878e:	f042 0201 	orr.w	r2, r2, #1
 8018792:	711a      	strb	r2, [r3, #4]
	LEAVE_FF(fs, res);
 8018794:	e7dd      	b.n	8018752 <f_getfree+0x2c>
					sect = fs->fatbase;		/* Top of the FAT */
 8018796:	6a31      	ldr	r1, [r6, #32]
			nfree = 0;
 8018798:	4605      	mov	r5, r0
					i = 0;					/* Offset in the sector */
 801879a:	4606      	mov	r6, r0
						if (i == 0) {
 801879c:	b936      	cbnz	r6, 80187ac <f_getfree+0x86>
							res = move_window(fs, sect++);
 801879e:	9803      	ldr	r0, [sp, #12]
 80187a0:	f101 0901 	add.w	r9, r1, #1
 80187a4:	f7ff f936 	bl	8017a14 <move_window>
							if (res != FR_OK) break;
 80187a8:	b9f0      	cbnz	r0, 80187e8 <f_getfree+0xc2>
							res = move_window(fs, sect++);
 80187aa:	4649      	mov	r1, r9
						if (fs->fs_type == FS_FAT16) {
 80187ac:	9a03      	ldr	r2, [sp, #12]
							if (ld_word(fs->win + i) == 0) nfree++;
 80187ae:	f102 0330 	add.w	r3, r2, #48	; 0x30
						if (fs->fs_type == FS_FAT16) {
 80187b2:	7812      	ldrb	r2, [r2, #0]
 80187b4:	2a02      	cmp	r2, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 80187b6:	eb03 0006 	add.w	r0, r3, r6
						if (fs->fs_type == FS_FAT16) {
 80187ba:	d109      	bne.n	80187d0 <f_getfree+0xaa>
							if (ld_word(fs->win + i) == 0) nfree++;
 80187bc:	5b9b      	ldrh	r3, [r3, r6]
 80187be:	b903      	cbnz	r3, 80187c2 <f_getfree+0x9c>
 80187c0:	3501      	adds	r5, #1
							i += 2;
 80187c2:	3602      	adds	r6, #2
					} while (--clst);
 80187c4:	f1b8 0801 	subs.w	r8, r8, #1
						i %= SS(fs);
 80187c8:	f3c6 0608 	ubfx	r6, r6, #0, #9
					} while (--clst);
 80187cc:	d1e6      	bne.n	801879c <f_getfree+0x76>
 80187ce:	e7da      	b.n	8018786 <f_getfree+0x60>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 80187d0:	f7ff f8c1 	bl	8017956 <ld_dword>
 80187d4:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 80187d8:	bf08      	it	eq
 80187da:	3501      	addeq	r5, #1
							i += 4;
 80187dc:	3604      	adds	r6, #4
 80187de:	e7f1      	b.n	80187c4 <f_getfree+0x9e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80187e0:	2401      	movs	r4, #1
 80187e2:	e7b6      	b.n	8018752 <f_getfree+0x2c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80187e4:	2402      	movs	r4, #2
 80187e6:	e7b4      	b.n	8018752 <f_getfree+0x2c>
 80187e8:	4604      	mov	r4, r0
 80187ea:	e7b2      	b.n	8018752 <f_getfree+0x2c>

080187ec <f_truncate>:
{
 80187ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80187ee:	a901      	add	r1, sp, #4
{
 80187f0:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80187f2:	f7ff f8d1 	bl	8017998 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 80187f6:	4604      	mov	r4, r0
 80187f8:	b9c0      	cbnz	r0, 801882c <f_truncate+0x40>
 80187fa:	7c6c      	ldrb	r4, [r5, #17]
 80187fc:	b9b4      	cbnz	r4, 801882c <f_truncate+0x40>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80187fe:	7c2b      	ldrb	r3, [r5, #16]
 8018800:	079a      	lsls	r2, r3, #30
 8018802:	d52c      	bpl.n	801885e <f_truncate+0x72>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 8018804:	696e      	ldr	r6, [r5, #20]
 8018806:	68eb      	ldr	r3, [r5, #12]
 8018808:	429e      	cmp	r6, r3
 801880a:	d20f      	bcs.n	801882c <f_truncate+0x40>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 801880c:	6828      	ldr	r0, [r5, #0]
 801880e:	b986      	cbnz	r6, 8018832 <f_truncate+0x46>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8018810:	4622      	mov	r2, r4
 8018812:	68a9      	ldr	r1, [r5, #8]
 8018814:	f7ff fa8f 	bl	8017d36 <remove_chain.isra.0>
			fp->obj.sclust = 0;
 8018818:	60ae      	str	r6, [r5, #8]
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 801881a:	4604      	mov	r4, r0
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 801881c:	696b      	ldr	r3, [r5, #20]
 801881e:	60eb      	str	r3, [r5, #12]
		fp->flag |= FA_MODIFIED;
 8018820:	7c2b      	ldrb	r3, [r5, #16]
 8018822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018826:	742b      	strb	r3, [r5, #16]
		if (res != FR_OK) ABORT(fs, res);
 8018828:	b104      	cbz	r4, 801882c <f_truncate+0x40>
 801882a:	746c      	strb	r4, [r5, #17]
}
 801882c:	4620      	mov	r0, r4
 801882e:	b002      	add	sp, #8
 8018830:	bd70      	pop	{r4, r5, r6, pc}
			ncl = get_fat(&fp->obj, fp->clust);
 8018832:	69a9      	ldr	r1, [r5, #24]
 8018834:	f7ff fa29 	bl	8017c8a <get_fat.isra.0>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018838:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
 801883a:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801883c:	d00b      	beq.n	8018856 <f_truncate+0x6a>
			if (ncl == 1) res = FR_INT_ERR;
 801883e:	2801      	cmp	r0, #1
 8018840:	d00b      	beq.n	801885a <f_truncate+0x6e>
			if (res == FR_OK && ncl < fs->n_fatent) {
 8018842:	9b01      	ldr	r3, [sp, #4]
 8018844:	695b      	ldr	r3, [r3, #20]
 8018846:	4283      	cmp	r3, r0
 8018848:	d9e8      	bls.n	801881c <f_truncate+0x30>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 801884a:	69aa      	ldr	r2, [r5, #24]
 801884c:	6828      	ldr	r0, [r5, #0]
 801884e:	f7ff fa72 	bl	8017d36 <remove_chain.isra.0>
 8018852:	4604      	mov	r4, r0
 8018854:	e7e2      	b.n	801881c <f_truncate+0x30>
 8018856:	2401      	movs	r4, #1
 8018858:	e7e0      	b.n	801881c <f_truncate+0x30>
			if (ncl == 1) res = FR_INT_ERR;
 801885a:	2402      	movs	r4, #2
 801885c:	e7de      	b.n	801881c <f_truncate+0x30>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801885e:	2407      	movs	r4, #7
 8018860:	e7e4      	b.n	801882c <f_truncate+0x40>

08018862 <f_unlink>:
{
 8018862:	b570      	push	{r4, r5, r6, lr}
 8018864:	b09a      	sub	sp, #104	; 0x68
	res = mount_volume(&path, &fs, FA_WRITE);
 8018866:	2202      	movs	r2, #2
{
 8018868:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
 801886a:	a903      	add	r1, sp, #12
 801886c:	a801      	add	r0, sp, #4
 801886e:	f7f6 fa33 	bl	800ecd8 <mount_volume>
	if (res == FR_OK) {
 8018872:	b978      	cbnz	r0, 8018894 <f_unlink+0x32>
		dj.obj.fs = fs;
 8018874:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8018876:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8018878:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 801887a:	a804      	add	r0, sp, #16
 801887c:	f7f6 fb4e 	bl	800ef1c <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 8018880:	b940      	cbnz	r0, 8018894 <f_unlink+0x32>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8018882:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8018886:	2b00      	cmp	r3, #0
 8018888:	db36      	blt.n	80188f8 <f_unlink+0x96>
				if (dj.obj.attr & AM_RDO) {
 801888a:	f89d 6016 	ldrb.w	r6, [sp, #22]
 801888e:	07f2      	lsls	r2, r6, #31
 8018890:	d502      	bpl.n	8018898 <f_unlink+0x36>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8018892:	2007      	movs	r0, #7
}
 8018894:	b01a      	add	sp, #104	; 0x68
 8018896:	bd70      	pop	{r4, r5, r6, pc}
					dclst = ld_clust(fs, dj.dir);
 8018898:	9d03      	ldr	r5, [sp, #12]
 801889a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801889c:	7828      	ldrb	r0, [r5, #0]
 801889e:	f7ff f9ec 	bl	8017c7a <ld_clust.isra.0>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80188a2:	06f3      	lsls	r3, r6, #27
					dclst = ld_clust(fs, dj.dir);
 80188a4:	4604      	mov	r4, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80188a6:	d410      	bmi.n	80188ca <f_unlink+0x68>
	FATFS *fs = dp->obj.fs;
 80188a8:	9d04      	ldr	r5, [sp, #16]
	res = move_window(fs, dp->sect);
 80188aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80188ac:	4628      	mov	r0, r5
 80188ae:	f7ff f8b1 	bl	8017a14 <move_window>
	if (res == FR_OK) {
 80188b2:	2800      	cmp	r0, #0
 80188b4:	d1ee      	bne.n	8018894 <f_unlink+0x32>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 80188b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188b8:	22e5      	movs	r2, #229	; 0xe5
 80188ba:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80188bc:	2301      	movs	r3, #1
 80188be:	70eb      	strb	r3, [r5, #3]
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 80188c0:	b994      	cbnz	r4, 80188e8 <f_unlink+0x86>
				if (res == FR_OK) res = sync_fs(fs);
 80188c2:	9803      	ldr	r0, [sp, #12]
 80188c4:	f7ff f964 	bl	8017b90 <sync_fs>
 80188c8:	e7e4      	b.n	8018894 <f_unlink+0x32>
						sdj.obj.sclust = dclst;
 80188ca:	9011      	str	r0, [sp, #68]	; 0x44
						res = dir_sdi(&sdj, 0);
 80188cc:	a80f      	add	r0, sp, #60	; 0x3c
						sdj.obj.fs = fs;			/* Open the sub-directory */
 80188ce:	950f      	str	r5, [sp, #60]	; 0x3c
						res = dir_sdi(&sdj, 0);
 80188d0:	f7ff fad5 	bl	8017e7e <dir_sdi.constprop.0>
						if (res == FR_OK) {
 80188d4:	2800      	cmp	r0, #0
 80188d6:	d1dd      	bne.n	8018894 <f_unlink+0x32>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 80188d8:	a80f      	add	r0, sp, #60	; 0x3c
 80188da:	f7ff fb57 	bl	8017f8c <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80188de:	2800      	cmp	r0, #0
 80188e0:	d0d7      	beq.n	8018892 <f_unlink+0x30>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80188e2:	2804      	cmp	r0, #4
 80188e4:	d1d6      	bne.n	8018894 <f_unlink+0x32>
 80188e6:	e7df      	b.n	80188a8 <f_unlink+0x46>
					res = remove_chain(&dj.obj, dclst, 0);
 80188e8:	4602      	mov	r2, r0
 80188ea:	4621      	mov	r1, r4
 80188ec:	9804      	ldr	r0, [sp, #16]
 80188ee:	f7ff fa22 	bl	8017d36 <remove_chain.isra.0>
				if (res == FR_OK) res = sync_fs(fs);
 80188f2:	2800      	cmp	r0, #0
 80188f4:	d1ce      	bne.n	8018894 <f_unlink+0x32>
 80188f6:	e7e4      	b.n	80188c2 <f_unlink+0x60>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80188f8:	2006      	movs	r0, #6
 80188fa:	e7cb      	b.n	8018894 <f_unlink+0x32>

080188fc <f_mkdir>:
{
 80188fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188fe:	b08f      	sub	sp, #60	; 0x3c
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8018900:	2202      	movs	r2, #2
{
 8018902:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8018904:	a902      	add	r1, sp, #8
 8018906:	a801      	add	r0, sp, #4
 8018908:	f7f6 f9e6 	bl	800ecd8 <mount_volume>
 801890c:	4604      	mov	r4, r0
 801890e:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8018910:	2800      	cmp	r0, #0
 8018912:	d168      	bne.n	80189e6 <f_mkdir+0xea>
		dj.obj.fs = fs;
 8018914:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);			/* Follow the file path */
 8018916:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8018918:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 801891a:	a803      	add	r0, sp, #12
 801891c:	f7f6 fafe 	bl	800ef1c <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8018920:	4604      	mov	r4, r0
 8018922:	2800      	cmp	r0, #0
 8018924:	d06d      	beq.n	8018a02 <f_mkdir+0x106>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 8018926:	2804      	cmp	r0, #4
 8018928:	d15d      	bne.n	80189e6 <f_mkdir+0xea>
			sobj.fs = fs;						/* New object id to create a new chain */
 801892a:	9e02      	ldr	r6, [sp, #8]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 801892c:	4629      	mov	r1, r5
 801892e:	4630      	mov	r0, r6
 8018930:	f7ff fa36 	bl	8017da0 <create_chain.isra.0>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8018934:	4605      	mov	r5, r0
 8018936:	2800      	cmp	r0, #0
 8018938:	d058      	beq.n	80189ec <f_mkdir+0xf0>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 801893a:	2801      	cmp	r0, #1
 801893c:	d05d      	beq.n	80189fa <f_mkdir+0xfe>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 801893e:	1c43      	adds	r3, r0, #1
 8018940:	d05d      	beq.n	80189fe <f_mkdir+0x102>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 8018942:	9802      	ldr	r0, [sp, #8]
 8018944:	4629      	mov	r1, r5
 8018946:	f7ff f8fa 	bl	8017b3e <dir_clear>
 801894a:	4603      	mov	r3, r0
 801894c:	4604      	mov	r4, r0
				if (res == FR_OK) {
 801894e:	2800      	cmp	r0, #0
 8018950:	d14d      	bne.n	80189ee <f_mkdir+0xf2>
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 8018952:	9802      	ldr	r0, [sp, #8]
__ssp_bos_icheck3(memset, void *, int)
 8018954:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 8018958:	6302      	str	r2, [r0, #48]	; 0x30
 801895a:	6342      	str	r2, [r0, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 801895c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8018960:	f8c0 2037 	str.w	r2, [r0, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8018964:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
						fs->win[DIR_Name] = '.';
 8018968:	222e      	movs	r2, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 801896a:	2321      	movs	r3, #33	; 0x21
						fs->win[DIR_Name] = '.';
 801896c:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8018970:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
						fs->win[DIR_Attr] = AM_DIR;
 8018974:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val;
 8018976:	2350      	movs	r3, #80	; 0x50
						fs->win[DIR_Attr] = AM_DIR;
 8018978:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
	*ptr++ = (BYTE)val;
 801897c:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
						st_clust(fs, fs->win, dcl);
 8018980:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8018984:	462a      	mov	r2, r5
 8018986:	f7fe fffb 	bl	8017980 <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
 801898a:	9802      	ldr	r0, [sp, #8]
 801898c:	f100 0350 	add.w	r3, r0, #80	; 0x50
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8018990:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8018994:	461a      	mov	r2, r3
 8018996:	f851 4b04 	ldr.w	r4, [r1], #4
 801899a:	f842 4b04 	str.w	r4, [r2], #4
 801899e:	4299      	cmp	r1, r3
 80189a0:	d1f9      	bne.n	8018996 <f_mkdir+0x9a>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80189a2:	232e      	movs	r3, #46	; 0x2e
 80189a4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
						st_clust(fs, fs->win + SZDIRE, pcl);
 80189a8:	9a05      	ldr	r2, [sp, #20]
 80189aa:	f7fe ffe9 	bl	8017980 <st_clust>
						fs->wflag = 1;
 80189ae:	9b02      	ldr	r3, [sp, #8]
 80189b0:	2701      	movs	r7, #1
 80189b2:	70df      	strb	r7, [r3, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 80189b4:	a803      	add	r0, sp, #12
 80189b6:	f7ff fb13 	bl	8017fe0 <dir_register>
			if (res == FR_OK) {
 80189ba:	4604      	mov	r4, r0
 80189bc:	b9b8      	cbnz	r0, 80189ee <f_mkdir+0xf2>
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 80189be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 80189c0:	2221      	movs	r2, #33	; 0x21
 80189c2:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 80189c4:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 80189c6:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80189c8:	75d8      	strb	r0, [r3, #23]
	*ptr++ = (BYTE)val;
 80189ca:	765a      	strb	r2, [r3, #25]
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 80189cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80189ce:	9802      	ldr	r0, [sp, #8]
 80189d0:	462a      	mov	r2, r5
 80189d2:	f7fe ffd5 	bl	8017980 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 80189d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					fs->wflag = 1;
 80189d8:	9802      	ldr	r0, [sp, #8]
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 80189da:	2210      	movs	r2, #16
 80189dc:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
 80189de:	70c7      	strb	r7, [r0, #3]
					res = sync_fs(fs);
 80189e0:	f7ff f8d6 	bl	8017b90 <sync_fs>
 80189e4:	4604      	mov	r4, r0
}
 80189e6:	4620      	mov	r0, r4
 80189e8:	b00f      	add	sp, #60	; 0x3c
 80189ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 80189ec:	2407      	movs	r4, #7
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 80189ee:	2200      	movs	r2, #0
 80189f0:	4629      	mov	r1, r5
 80189f2:	4630      	mov	r0, r6
 80189f4:	f7ff f99f 	bl	8017d36 <remove_chain.isra.0>
 80189f8:	e7f5      	b.n	80189e6 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 80189fa:	2402      	movs	r4, #2
 80189fc:	e7f7      	b.n	80189ee <f_mkdir+0xf2>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 80189fe:	2401      	movs	r4, #1
 8018a00:	e7f5      	b.n	80189ee <f_mkdir+0xf2>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8018a02:	2408      	movs	r4, #8
	LEAVE_FF(fs, res);
 8018a04:	e7ef      	b.n	80189e6 <f_mkdir+0xea>

08018a06 <f_rename>:
{
 8018a06:	b530      	push	{r4, r5, lr}
 8018a08:	b0a3      	sub	sp, #140	; 0x8c
 8018a0a:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 8018a0e:	4668      	mov	r0, sp
 8018a10:	f7f6 f8cc 	bl	800ebac <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8018a14:	2202      	movs	r2, #2
 8018a16:	a903      	add	r1, sp, #12
 8018a18:	a801      	add	r0, sp, #4
 8018a1a:	f7f6 f95d 	bl	800ecd8 <mount_volume>
	if (res == FR_OK) {
 8018a1e:	2800      	cmp	r0, #0
 8018a20:	f040 8082 	bne.w	8018b28 <f_rename+0x122>
		djo.obj.fs = fs;
 8018a24:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&djo, path_old);			/* Check old object */
 8018a26:	9901      	ldr	r1, [sp, #4]
		djo.obj.fs = fs;
 8018a28:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&djo, path_old);			/* Check old object */
 8018a2a:	a80c      	add	r0, sp, #48	; 0x30
 8018a2c:	f7f6 fa76 	bl	800ef1c <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d179      	bne.n	8018b28 <f_rename+0x122>
 8018a34:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8018a38:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8018a3c:	d176      	bne.n	8018b2c <f_rename+0x126>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 8018a3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018a40:	ac04      	add	r4, sp, #16
 8018a42:	f103 0520 	add.w	r5, r3, #32
 8018a46:	6818      	ldr	r0, [r3, #0]
 8018a48:	6859      	ldr	r1, [r3, #4]
 8018a4a:	4622      	mov	r2, r4
 8018a4c:	c203      	stmia	r2!, {r0, r1}
 8018a4e:	3308      	adds	r3, #8
 8018a50:	42ab      	cmp	r3, r5
 8018a52:	4614      	mov	r4, r2
 8018a54:	d1f7      	bne.n	8018a46 <f_rename+0x40>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8018a56:	ac0c      	add	r4, sp, #48	; 0x30
 8018a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a5a:	ad17      	add	r5, sp, #92	; 0x5c
 8018a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018a62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018a66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8018a6a:	9900      	ldr	r1, [sp, #0]
 8018a6c:	a817      	add	r0, sp, #92	; 0x5c
 8018a6e:	f7f6 fa55 	bl	800ef1c <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8018a72:	b948      	cbnz	r0, 8018a88 <f_rename+0x82>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8018a74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	d103      	bne.n	8018a84 <f_rename+0x7e>
 8018a7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d003      	beq.n	8018a8c <f_rename+0x86>
 8018a84:	2008      	movs	r0, #8
 8018a86:	e04f      	b.n	8018b28 <f_rename+0x122>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8018a88:	2804      	cmp	r0, #4
 8018a8a:	d14d      	bne.n	8018b28 <f_rename+0x122>
					res = dir_register(&djn);			/* Register the new entry */
 8018a8c:	a817      	add	r0, sp, #92	; 0x5c
 8018a8e:	f7ff faa7 	bl	8017fe0 <dir_register>
					if (res == FR_OK) {
 8018a92:	2800      	cmp	r0, #0
 8018a94:	d148      	bne.n	8018b28 <f_rename+0x122>
						dir = djn.dir;					/* Copy directory entry of the object except name */
 8018a96:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018a98:	f10d 031d 	add.w	r3, sp, #29
 8018a9c:	f101 020d 	add.w	r2, r1, #13
 8018aa0:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8018aa4:	f853 4b04 	ldr.w	r4, [r3], #4
 8018aa8:	f842 4b04 	str.w	r4, [r2], #4
 8018aac:	4283      	cmp	r3, r0
 8018aae:	d1f9      	bne.n	8018aa4 <f_rename+0x9e>
 8018ab0:	8818      	ldrh	r0, [r3, #0]
 8018ab2:	8010      	strh	r0, [r2, #0]
 8018ab4:	789b      	ldrb	r3, [r3, #2]
 8018ab6:	7093      	strb	r3, [r2, #2]
						dir[DIR_Attr] = buf[DIR_Attr];
 8018ab8:	f89d 301b 	ldrb.w	r3, [sp, #27]
						fs->wflag = 1;
 8018abc:	9c03      	ldr	r4, [sp, #12]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 8018abe:	06da      	lsls	r2, r3, #27
 8018ac0:	bf58      	it	pl
 8018ac2:	f043 0320 	orrpl.w	r3, r3, #32
						fs->wflag = 1;
 8018ac6:	2501      	movs	r5, #1
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 8018ac8:	72cb      	strb	r3, [r1, #11]
						fs->wflag = 1;
 8018aca:	70e5      	strb	r5, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8018acc:	7acb      	ldrb	r3, [r1, #11]
 8018ace:	06db      	lsls	r3, r3, #27
 8018ad0:	d51c      	bpl.n	8018b0c <f_rename+0x106>
 8018ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018ad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	d018      	beq.n	8018b0c <f_rename+0x106>
							sect = clst2sect(fs, ld_clust(fs, dir));
 8018ada:	7820      	ldrb	r0, [r4, #0]
 8018adc:	f7ff f8cd 	bl	8017c7a <ld_clust.isra.0>
 8018ae0:	4601      	mov	r1, r0
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	f7fe ff41 	bl	801796a <clst2sect>
							if (sect == 0) {
 8018ae8:	4601      	mov	r1, r0
 8018aea:	b308      	cbz	r0, 8018b30 <f_rename+0x12a>
								res = move_window(fs, sect);
 8018aec:	4620      	mov	r0, r4
 8018aee:	f7fe ff91 	bl	8017a14 <move_window>
								if (res == FR_OK && dir[1] == '.') {
 8018af2:	b9c8      	cbnz	r0, 8018b28 <f_rename+0x122>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8018af4:	9803      	ldr	r0, [sp, #12]
								if (res == FR_OK && dir[1] == '.') {
 8018af6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8018afa:	2b2e      	cmp	r3, #46	; 0x2e
 8018afc:	d106      	bne.n	8018b0c <f_rename+0x106>
									st_clust(fs, dir, djn.obj.sclust);
 8018afe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018b00:	f100 0150 	add.w	r1, r0, #80	; 0x50
 8018b04:	f7fe ff3c 	bl	8017980 <st_clust>
									fs->wflag = 1;
 8018b08:	9b03      	ldr	r3, [sp, #12]
 8018b0a:	70dd      	strb	r5, [r3, #3]
	FATFS *fs = dp->obj.fs;
 8018b0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	res = move_window(fs, dp->sect);
 8018b0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018b10:	4620      	mov	r0, r4
 8018b12:	f7fe ff7f 	bl	8017a14 <move_window>
	if (res == FR_OK) {
 8018b16:	b938      	cbnz	r0, 8018b28 <f_rename+0x122>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 8018b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018b1a:	22e5      	movs	r2, #229	; 0xe5
 8018b1c:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8018b1e:	2301      	movs	r3, #1
 8018b20:	70e3      	strb	r3, [r4, #3]
					res = sync_fs(fs);
 8018b22:	9803      	ldr	r0, [sp, #12]
 8018b24:	f7ff f834 	bl	8017b90 <sync_fs>
}
 8018b28:	b023      	add	sp, #140	; 0x8c
 8018b2a:	bd30      	pop	{r4, r5, pc}
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8018b2c:	2006      	movs	r0, #6
 8018b2e:	e7fb      	b.n	8018b28 <f_rename+0x122>
								res = FR_INT_ERR;
 8018b30:	2002      	movs	r0, #2
 8018b32:	e7f9      	b.n	8018b28 <f_rename+0x122>

08018b34 <LL_RTC_ALMA_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8018b34:	6983      	ldr	r3, [r0, #24]
  assert_param(IS_LL_RTC_ALMA_MASK(RTC_AlarmStruct->AlarmMask));
  assert_param(IS_LL_RTC_ALMA_DATE_WEEKDAY_SEL(RTC_AlarmStruct->AlarmDateWeekDaySel));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8018b36:	065b      	lsls	r3, r3, #25
{
 8018b38:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_LL_RTC_HOUR12(RTC_AlarmStruct->AlarmTime.Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_AlarmStruct->AlarmTime.TimeFormat));
    }
    else
    {
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 8018b3a:	bf5c      	itt	pl
 8018b3c:	2300      	movpl	r3, #0
 8018b3e:	6013      	strpl	r3, [r2, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8018b40:	23ca      	movs	r3, #202	; 0xca
 8018b42:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8018b44:	2353      	movs	r3, #83	; 0x53
 8018b46:	6243      	str	r3, [r0, #36]	; 0x24

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);

  /* Select weekday selection */
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 8018b48:	68d3      	ldr	r3, [r2, #12]
  {
    /* Set the date for ALARM */
    LL_RTC_ALMA_DisableWeekday(RTCx);
    if (RTC_Format != LL_RTC_FORMAT_BIN)
    {
      LL_RTC_ALMA_SetDay(RTCx, RTC_AlarmStruct->AlarmDateWeekDay);
 8018b4a:	7c14      	ldrb	r4, [r2, #16]
 8018b4c:	6817      	ldr	r7, [r2, #0]
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d155      	bne.n	8018bfe <LL_RTC_ALMA_Init+0xca>
  CLEAR_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8018b52:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018b54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8018b58:	6403      	str	r3, [r0, #64]	; 0x40
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8018b5a:	b1f1      	cbz	r1, 8018b9a <LL_RTC_ALMA_Init+0x66>
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8018b5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8018b5e:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 8018b62:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8018b66:	6401      	str	r1, [r0, #64]	; 0x40
  }

  /* Configure the Alarm register */
  if (RTC_Format != LL_RTC_FORMAT_BIN)
  {
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat, RTC_AlarmStruct->AlarmTime.Hours,
 8018b68:	7993      	ldrb	r3, [r2, #6]
 8018b6a:	7914      	ldrb	r4, [r2, #4]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8018b6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8018b6e:	433b      	orrs	r3, r7
 8018b70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b74:	7954      	ldrb	r4, [r2, #5]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8018b76:	f021 117f 	bic.w	r1, r1, #8323199	; 0x7f007f
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8018b7a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8018b7e:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8018b82:	430b      	orrs	r3, r1
 8018b84:	6403      	str	r3, [r0, #64]	; 0x40
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 8018b86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018b88:	6892      	ldr	r2, [r2, #8]
 8018b8a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8018b8e:	4313      	orrs	r3, r2
 8018b90:	6403      	str	r3, [r0, #64]	; 0x40
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8018b92:	23ff      	movs	r3, #255	; 0xff
 8018b94:	6243      	str	r3, [r0, #36]	; 0x24

  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);

  return SUCCESS;
}
 8018b96:	2001      	movs	r0, #1
 8018b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8018b9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
      LL_RTC_ALMA_SetDay(RTCx, __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmDateWeekDay));
 8018b9c:	210a      	movs	r1, #10
 8018b9e:	fbb4 f5f1 	udiv	r5, r4, r1
 8018ba2:	fb01 4115 	mls	r1, r1, r5, r4
 8018ba6:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8018baa:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8018bae:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8018bb2:	6401      	str	r1, [r0, #64]	; 0x40
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 8018bb4:	7993      	ldrb	r3, [r2, #6]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8018bb6:	6c06      	ldr	r6, [r0, #64]	; 0x40
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 8018bb8:	7914      	ldrb	r4, [r2, #4]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 8018bba:	7951      	ldrb	r1, [r2, #5]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 8018bbc:	250a      	movs	r5, #10
 8018bbe:	f026 167f 	bic.w	r6, r6, #8323199	; 0x7f007f
 8018bc2:	fbb3 fcf5 	udiv	ip, r3, r5
 8018bc6:	fb05 331c 	mls	r3, r5, ip, r3
 8018bca:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8018bce:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
 8018bd2:	433e      	orrs	r6, r7
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8018bd4:	b2db      	uxtb	r3, r3
 8018bd6:	4333      	orrs	r3, r6
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 8018bd8:	fbb4 f6f5 	udiv	r6, r4, r5
 8018bdc:	fb05 4416 	mls	r4, r5, r6, r4
 8018be0:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8018be4:	b2e4      	uxtb	r4, r4
 8018be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 8018bea:	fbb1 f4f5 	udiv	r4, r1, r5
 8018bee:	fb05 1114 	mls	r1, r5, r4, r1
 8018bf2:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8018bf6:	b2c9      	uxtb	r1, r1
 8018bf8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8018bfc:	e7c2      	b.n	8018b84 <LL_RTC_ALMA_Init+0x50>
  SET_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8018bfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018c04:	6403      	str	r3, [r0, #64]	; 0x40
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_DU, WeekDay << RTC_ALRMAR_DU_Pos);
 8018c06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018c08:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8018c0c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8018c10:	6403      	str	r3, [r0, #64]	; 0x40
  if (RTC_Format != LL_RTC_FORMAT_BIN)
 8018c12:	2900      	cmp	r1, #0
 8018c14:	d0ce      	beq.n	8018bb4 <LL_RTC_ALMA_Init+0x80>
 8018c16:	e7a7      	b.n	8018b68 <LL_RTC_ALMA_Init+0x34>

08018c18 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8018c18:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8018c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018c1e:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF)) ? 1U : 0U);
 8018c20:	68c2      	ldr	r2, [r0, #12]
 8018c22:	0651      	lsls	r1, r2, #25
{
 8018c24:	4603      	mov	r3, r0
 8018c26:	d41d      	bmi.n	8018c64 <LL_RTC_EnterInitMode+0x4c>
  SET_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8018c28:	68c2      	ldr	r2, [r0, #12]
 8018c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018c2e:	60c2      	str	r2, [r0, #12]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF)) ? 1U : 0U);
 8018c30:	68c2      	ldr	r2, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8018c32:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8018c36:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8018c3a:	2001      	movs	r0, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8018c3c:	9c01      	ldr	r4, [sp, #4]
 8018c3e:	b104      	cbz	r4, 8018c42 <LL_RTC_EnterInitMode+0x2a>
 8018c40:	b10a      	cbz	r2, 8018c46 <LL_RTC_EnterInitMode+0x2e>
        status = ERROR;
      }
    }
  }
  return status;
}
 8018c42:	b002      	add	sp, #8
 8018c44:	bd10      	pop	{r4, pc}
 8018c46:	690a      	ldr	r2, [r1, #16]
 8018c48:	03d2      	lsls	r2, r2, #15
        timeout --;
 8018c4a:	bf42      	ittt	mi
 8018c4c:	9a01      	ldrmi	r2, [sp, #4]
 8018c4e:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8018c52:	9201      	strmi	r2, [sp, #4]
 8018c54:	68da      	ldr	r2, [r3, #12]
      if (timeout == 0U)
 8018c56:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8018c58:	2c00      	cmp	r4, #0
 8018c5a:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8018c5e:	bf08      	it	eq
 8018c60:	2000      	moveq	r0, #0
 8018c62:	e7eb      	b.n	8018c3c <LL_RTC_EnterInitMode+0x24>
  ErrorStatus status = SUCCESS;
 8018c64:	2001      	movs	r0, #1
 8018c66:	e7ec      	b.n	8018c42 <LL_RTC_EnterInitMode+0x2a>

08018c68 <LL_RTC_Init>:
{
 8018c68:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8018c6a:	23ca      	movs	r3, #202	; 0xca
 8018c6c:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8018c6e:	2353      	movs	r3, #83	; 0x53
 8018c70:	6243      	str	r3, [r0, #36]	; 0x24
 8018c72:	4604      	mov	r4, r0
 8018c74:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8018c76:	f7ff ffcf 	bl	8018c18 <LL_RTC_EnterInitMode>
 8018c7a:	b1c8      	cbz	r0, 8018cb0 <LL_RTC_Init+0x48>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8018c7c:	69a3      	ldr	r3, [r4, #24]
 8018c7e:	682a      	ldr	r2, [r5, #0]
 8018c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018c84:	4313      	orrs	r3, r2
 8018c86:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8018c88:	6923      	ldr	r3, [r4, #16]
 8018c8a:	68aa      	ldr	r2, [r5, #8]
 8018c8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8018c90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018c94:	4313      	orrs	r3, r2
 8018c96:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8018c98:	6923      	ldr	r3, [r4, #16]
 8018c9a:	686a      	ldr	r2, [r5, #4]
 8018c9c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8018ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ca4:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8018ca6:	68e3      	ldr	r3, [r4, #12]
 8018ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018cac:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8018cae:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8018cb0:	23ff      	movs	r3, #255	; 0xff
 8018cb2:	6263      	str	r3, [r4, #36]	; 0x24
}
 8018cb4:	bd38      	pop	{r3, r4, r5, pc}

08018cb6 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8018cb6:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8018cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018cbc:	9201      	str	r2, [sp, #4]
  WRITE_REG(RTCx->ICSR, (~((RTC_ICSR_RSF | RTC_ICSR_INIT) & 0x000000FFU) | (RTCx->ICSR & RTC_ICSR_INIT)));
 8018cbe:	68c2      	ldr	r2, [r0, #12]
 8018cc0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8018cc4:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8018cc8:	60c2      	str	r2, [r0, #12]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_RSF) == (RTC_ICSR_RSF)) ? 1U : 0U);
 8018cca:	68c2      	ldr	r2, [r0, #12]
{
 8018ccc:	4603      	mov	r3, r0
 8018cce:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8018cd2:	2001      	movs	r0, #1
 8018cd4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8018cd8:	9c01      	ldr	r4, [sp, #4]
 8018cda:	b96c      	cbnz	r4, 8018cf8 <LL_RTC_WaitForSynchro+0x42>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8018cdc:	b150      	cbz	r0, 8018cf4 <LL_RTC_WaitForSynchro+0x3e>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8018cde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018ce2:	9201      	str	r2, [sp, #4]
 8018ce4:	68da      	ldr	r2, [r3, #12]
 8018ce6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8018cea:	f3c2 1240 	ubfx	r2, r2, #5, #1
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8018cee:	9c01      	ldr	r4, [sp, #4]
 8018cf0:	b104      	cbz	r4, 8018cf4 <LL_RTC_WaitForSynchro+0x3e>
 8018cf2:	b192      	cbz	r2, 8018d1a <LL_RTC_WaitForSynchro+0x64>
      }
    }
  }

  return (status);
}
 8018cf4:	b002      	add	sp, #8
 8018cf6:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 8018cf8:	2a00      	cmp	r2, #0
 8018cfa:	d0ef      	beq.n	8018cdc <LL_RTC_WaitForSynchro+0x26>
 8018cfc:	690a      	ldr	r2, [r1, #16]
 8018cfe:	03d4      	lsls	r4, r2, #15
      timeout--;
 8018d00:	bf42      	ittt	mi
 8018d02:	9a01      	ldrmi	r2, [sp, #4]
 8018d04:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8018d08:	9201      	strmi	r2, [sp, #4]
 8018d0a:	68da      	ldr	r2, [r3, #12]
    if (timeout == 0U)
 8018d0c:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8018d0e:	2c00      	cmp	r4, #0
 8018d10:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8018d14:	bf08      	it	eq
 8018d16:	2000      	moveq	r0, #0
 8018d18:	e7de      	b.n	8018cd8 <LL_RTC_WaitForSynchro+0x22>
 8018d1a:	690a      	ldr	r2, [r1, #16]
 8018d1c:	03d2      	lsls	r2, r2, #15
        timeout--;
 8018d1e:	bf42      	ittt	mi
 8018d20:	9a01      	ldrmi	r2, [sp, #4]
 8018d22:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8018d26:	9201      	strmi	r2, [sp, #4]
 8018d28:	68da      	ldr	r2, [r3, #12]
      if (timeout == 0U)
 8018d2a:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8018d2c:	2c00      	cmp	r4, #0
 8018d2e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8018d32:	bf08      	it	eq
 8018d34:	2000      	moveq	r0, #0
 8018d36:	e7da      	b.n	8018cee <LL_RTC_WaitForSynchro+0x38>

08018d38 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8018d38:	680a      	ldr	r2, [r1, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8018d3a:	684b      	ldr	r3, [r1, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8018d3c:	0912      	lsrs	r2, r2, #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8018d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8018d42:	3201      	adds	r2, #1
 8018d44:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8018d48:	4358      	muls	r0, r3
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8018d4a:	688b      	ldr	r3, [r1, #8]
 8018d4c:	0f5b      	lsrs	r3, r3, #29
 8018d4e:	3301      	adds	r3, #1
}
 8018d50:	fbb0 f0f3 	udiv	r0, r0, r3
 8018d54:	4770      	bx	lr

08018d56 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8018d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018d5a:	6818      	ldr	r0, [r3, #0]
 8018d5c:	f080 7000 	eor.w	r0, r0, #33554432	; 0x2000000
}
 8018d60:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8018d64:	4770      	bx	lr

08018d66 <z_device_state_init>:
}
 8018d66:	4770      	bx	lr

08018d68 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8018d68:	b138      	cbz	r0, 8018d7a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8018d6a:	68c3      	ldr	r3, [r0, #12]
 8018d6c:	8818      	ldrh	r0, [r3, #0]
 8018d6e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8018d72:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8018d76:	4258      	negs	r0, r3
 8018d78:	4158      	adcs	r0, r3
}
 8018d7a:	4770      	bx	lr

08018d7c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8018d7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8018d7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8018d80:	9305      	str	r3, [sp, #20]
 8018d82:	9303      	str	r3, [sp, #12]
 8018d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d86:	9302      	str	r3, [sp, #8]
 8018d88:	2300      	movs	r3, #0
 8018d8a:	e9cd 3300 	strd	r3, r3, [sp]
 8018d8e:	2201      	movs	r2, #1
 8018d90:	4618      	mov	r0, r3
 8018d92:	f7eb fde3 	bl	800495c <z_impl_z_log_msg2_runtime_vcreate>
}
 8018d96:	b007      	add	sp, #28
 8018d98:	f85d fb04 	ldr.w	pc, [sp], #4

08018d9c <arch_system_halt>:
	__asm__ volatile(
 8018d9c:	f04f 0210 	mov.w	r2, #16
 8018da0:	f3ef 8311 	mrs	r3, BASEPRI
 8018da4:	f382 8812 	msr	BASEPRI_MAX, r2
 8018da8:	f3bf 8f6f 	isb	sy
	for (;;) {
 8018dac:	e7fe      	b.n	8018dac <arch_system_halt+0x10>

08018dae <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
 8018dae:	f000 bb89 	b.w	80194c4 <memset>

08018db2 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8018db2:	f000 bb5f 	b.w	8019474 <memcpy>

08018db6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8018db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018db8:	4604      	mov	r4, r0
 8018dba:	460d      	mov	r5, r1
 8018dbc:	f04f 0310 	mov.w	r3, #16
 8018dc0:	f3ef 8611 	mrs	r6, BASEPRI
 8018dc4:	f383 8812 	msr	BASEPRI_MAX, r3
 8018dc8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8018dcc:	6947      	ldr	r7, [r0, #20]
 8018dce:	b977      	cbnz	r7, 8018dee <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8018dd0:	f000 f956 	bl	8019080 <z_unpend_first_thread>

		if (pending_thread != NULL) {
 8018dd4:	b158      	cbz	r0, 8018dee <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8018dd6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8018dd8:	6142      	str	r2, [r0, #20]
 8018dda:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
 8018ddc:	f000 f8df 	bl	8018f9e <z_ready_thread>
			z_reschedule(&slab->lock, key);
 8018de0:	4631      	mov	r1, r6
 8018de2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 8018de6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 8018dea:	f7f7 bb93 	b.w	8010514 <z_reschedule>
	**(char ***) mem = slab->free_list;
 8018dee:	682b      	ldr	r3, [r5, #0]
 8018df0:	6962      	ldr	r2, [r4, #20]
 8018df2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 8018df4:	682b      	ldr	r3, [r5, #0]
 8018df6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
 8018df8:	69a3      	ldr	r3, [r4, #24]
 8018dfa:	3b01      	subs	r3, #1
 8018dfc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 8018dfe:	f386 8811 	msr	BASEPRI, r6
 8018e02:	f3bf 8f6f 	isb	sy
}
 8018e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e08 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018e08:	f3ef 8005 	mrs	r0, IPSR
}
 8018e0c:	3800      	subs	r0, #0
 8018e0e:	bf18      	it	ne
 8018e10:	2001      	movne	r0, #1
 8018e12:	4770      	bx	lr

08018e14 <z_impl_k_thread_name_set>:
}
 8018e14:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8018e18:	4770      	bx	lr

08018e1a <k_thread_name_get>:
}
 8018e1a:	2000      	movs	r0, #0
 8018e1c:	4770      	bx	lr

08018e1e <z_impl_k_thread_start>:
	z_sched_start(thread);
 8018e1e:	f7f7 bc71 	b.w	8010704 <z_sched_start>

08018e22 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8018e22:	b508      	push	{r3, lr}
	__asm__ volatile(
 8018e24:	f04f 0210 	mov.w	r2, #16
 8018e28:	f3ef 8311 	mrs	r3, BASEPRI
 8018e2c:	f382 8812 	msr	BASEPRI_MAX, r2
 8018e30:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8018e34:	f7eb fe9c 	bl	8004b70 <arch_cpu_idle>
 8018e38:	e7f4      	b.n	8018e24 <idle+0x2>

08018e3a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 8018e3a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8018e3e:	428b      	cmp	r3, r1
 8018e40:	d001      	beq.n	8018e46 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 8018e42:	f7f7 bccf 	b.w	80107e4 <z_set_prio>
}
 8018e46:	2000      	movs	r0, #0
 8018e48:	4770      	bx	lr

08018e4a <z_impl_k_mutex_init>:
{
 8018e4a:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8018e4c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 8018e4e:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 8018e52:	e9c3 3300 	strd	r3, r3, [r3]
}
 8018e56:	4770      	bx	lr

08018e58 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8018e58:	b15a      	cbz	r2, 8018e72 <z_impl_k_sem_init+0x1a>
 8018e5a:	428a      	cmp	r2, r1
 8018e5c:	d309      	bcc.n	8018e72 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 8018e5e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 8018e62:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8018e66:	e9c0 0000 	strd	r0, r0, [r0]
 8018e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 8018e6e:	2000      	movs	r0, #0
 8018e70:	4770      	bx	lr
		return -EINVAL;
 8018e72:	f06f 0015 	mvn.w	r0, #21
}
 8018e76:	4770      	bx	lr

08018e78 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 8018e78:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 8018e7a:	2301      	movs	r3, #1
 8018e7c:	408b      	lsls	r3, r1
 8018e7e:	ea22 0303 	bic.w	r3, r2, r3
 8018e82:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 8018e84:	fa22 f001 	lsr.w	r0, r2, r1
}
 8018e88:	f000 0001 	and.w	r0, r0, #1
 8018e8c:	4770      	bx	lr

08018e8e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 8018e8e:	b120      	cbz	r0, 8018e9a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8018e90:	2200      	movs	r2, #0
 8018e92:	4611      	mov	r1, r2
 8018e94:	3088      	adds	r0, #136	; 0x88
 8018e96:	f000 b91c 	b.w	80190d2 <z_sched_wake>
}
 8018e9a:	4770      	bx	lr

08018e9c <k_work_init>:
{
 8018e9c:	b538      	push	{r3, r4, r5, lr}
 8018e9e:	4604      	mov	r4, r0
 8018ea0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8018ea2:	2210      	movs	r2, #16
 8018ea4:	2100      	movs	r1, #0
 8018ea6:	f000 fb0d 	bl	80194c4 <memset>
 8018eaa:	6065      	str	r5, [r4, #4]
}
 8018eac:	bd38      	pop	{r3, r4, r5, pc}

08018eae <k_work_submit_to_queue>:
{
 8018eae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018eb0:	9001      	str	r0, [sp, #4]
 8018eb2:	4608      	mov	r0, r1
 8018eb4:	f04f 0310 	mov.w	r3, #16
 8018eb8:	f3ef 8511 	mrs	r5, BASEPRI
 8018ebc:	f383 8812 	msr	BASEPRI_MAX, r3
 8018ec0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8018ec4:	a901      	add	r1, sp, #4
 8018ec6:	f7f7 fa5b 	bl	8010380 <submit_to_queue_locked>
 8018eca:	4604      	mov	r4, r0
	__asm__ volatile(
 8018ecc:	f385 8811 	msr	BASEPRI, r5
 8018ed0:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8018ed4:	2800      	cmp	r0, #0
 8018ed6:	dd04      	ble.n	8018ee2 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
 8018ed8:	f7f7 fdcc 	bl	8010a74 <z_impl_k_is_preempt_thread>
 8018edc:	b108      	cbz	r0, 8018ee2 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
 8018ede:	f7f7 fd23 	bl	8010928 <z_impl_k_yield>
}
 8018ee2:	4620      	mov	r0, r4
 8018ee4:	b003      	add	sp, #12
 8018ee6:	bd30      	pop	{r4, r5, pc}

08018ee8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8018ee8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8018eec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8018eee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8018ef0:	2300      	movs	r3, #0
	node->prev = NULL;
 8018ef2:	e9c0 3300 	strd	r3, r3, [r0]
}
 8018ef6:	4770      	bx	lr

08018ef8 <unpend_thread_no_timeout>:
{
 8018ef8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8018efa:	f7ff fff5 	bl	8018ee8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8018efe:	7b43      	ldrb	r3, [r0, #13]
 8018f00:	f023 0302 	bic.w	r3, r3, #2
 8018f04:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8018f06:	2300      	movs	r3, #0
 8018f08:	6083      	str	r3, [r0, #8]
}
 8018f0a:	bd08      	pop	{r3, pc}

08018f0c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 8018f0c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8018f10:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8018f14:	4283      	cmp	r3, r0
		return b2 - b1;
 8018f16:	bf14      	ite	ne
 8018f18:	1ac0      	subne	r0, r0, r3
	return 0;
 8018f1a:	2000      	moveq	r0, #0
}
 8018f1c:	4770      	bx	lr

08018f1e <z_unpend_thread_no_timeout>:
{
 8018f1e:	b508      	push	{r3, lr}
	__asm__ volatile(
 8018f20:	f04f 0310 	mov.w	r3, #16
 8018f24:	f3ef 8111 	mrs	r1, BASEPRI
 8018f28:	f383 8812 	msr	BASEPRI_MAX, r3
 8018f2c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8018f30:	f7ff ffe2 	bl	8018ef8 <unpend_thread_no_timeout>
	__asm__ volatile(
 8018f34:	f381 8811 	msr	BASEPRI, r1
 8018f38:	f3bf 8f6f 	isb	sy
}
 8018f3c:	bd08      	pop	{r3, pc}

08018f3e <z_unpend_thread>:
{
 8018f3e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8018f40:	f04f 0310 	mov.w	r3, #16
 8018f44:	f3ef 8411 	mrs	r4, BASEPRI
 8018f48:	f383 8812 	msr	BASEPRI_MAX, r3
 8018f4c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8018f50:	f7ff ffd2 	bl	8018ef8 <unpend_thread_no_timeout>
	__asm__ volatile(
 8018f54:	f384 8811 	msr	BASEPRI, r4
 8018f58:	f3bf 8f6f 	isb	sy
}
 8018f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f60:	3018      	adds	r0, #24
 8018f62:	f000 b8d3 	b.w	801910c <z_abort_timeout>

08018f66 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8018f66:	4603      	mov	r3, r0
 8018f68:	b920      	cbnz	r0, 8018f74 <z_reschedule_irqlock+0xe>
 8018f6a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8018f6e:	b90a      	cbnz	r2, 8018f74 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8018f70:	f7eb bec2 	b.w	8004cf8 <arch_swap>
 8018f74:	f383 8811 	msr	BASEPRI, r3
 8018f78:	f3bf 8f6f 	isb	sy
}
 8018f7c:	4770      	bx	lr

08018f7e <z_reschedule_unlocked>:
	__asm__ volatile(
 8018f7e:	f04f 0310 	mov.w	r3, #16
 8018f82:	f3ef 8011 	mrs	r0, BASEPRI
 8018f86:	f383 8812 	msr	BASEPRI_MAX, r3
 8018f8a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8018f8e:	f7ff bfea 	b.w	8018f66 <z_reschedule_irqlock>

08018f92 <z_priq_dumb_best>:
{
 8018f92:	4603      	mov	r3, r0
	return list->head == list;
 8018f94:	6800      	ldr	r0, [r0, #0]
}
 8018f96:	4283      	cmp	r3, r0
 8018f98:	bf08      	it	eq
 8018f9a:	2000      	moveq	r0, #0
 8018f9c:	4770      	bx	lr

08018f9e <z_ready_thread>:
{
 8018f9e:	b510      	push	{r4, lr}
 8018fa0:	f04f 0310 	mov.w	r3, #16
 8018fa4:	f3ef 8411 	mrs	r4, BASEPRI
 8018fa8:	f383 8812 	msr	BASEPRI_MAX, r3
 8018fac:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8018fb0:	f7f7 fb72 	bl	8010698 <ready_thread>
	__asm__ volatile(
 8018fb4:	f384 8811 	msr	BASEPRI, r4
 8018fb8:	f3bf 8f6f 	isb	sy
}
 8018fbc:	bd10      	pop	{r4, pc}

08018fbe <z_thread_timeout>:
{
 8018fbe:	b510      	push	{r4, lr}
 8018fc0:	4601      	mov	r1, r0
	__asm__ volatile(
 8018fc2:	f04f 0310 	mov.w	r3, #16
 8018fc6:	f3ef 8411 	mrs	r4, BASEPRI
 8018fca:	f383 8812 	msr	BASEPRI_MAX, r3
 8018fce:	f3bf 8f6f 	isb	sy
		if (!killed) {
 8018fd2:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8018fd6:	f013 0f28 	tst.w	r3, #40	; 0x28
 8018fda:	d10d      	bne.n	8018ff8 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8018fdc:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 8018fe0:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 8018fe2:	b10b      	cbz	r3, 8018fe8 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 8018fe4:	f7ff ff88 	bl	8018ef8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8018fe8:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 8018fec:	f023 0314 	bic.w	r3, r3, #20
 8018ff0:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 8018ff4:	f7f7 fb50 	bl	8010698 <ready_thread>
	__asm__ volatile(
 8018ff8:	f384 8811 	msr	BASEPRI, r4
 8018ffc:	f3bf 8f6f 	isb	sy
}
 8019000:	bd10      	pop	{r4, pc}

08019002 <add_to_waitq_locked>:
{
 8019002:	b538      	push	{r3, r4, r5, lr}
 8019004:	4604      	mov	r4, r0
 8019006:	460d      	mov	r5, r1
	unready_thread(thread);
 8019008:	f7f7 fb9a 	bl	8010740 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 801900c:	7b63      	ldrb	r3, [r4, #13]
 801900e:	f043 0302 	orr.w	r3, r3, #2
 8019012:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8019014:	b195      	cbz	r5, 801903c <add_to_waitq_locked+0x3a>
 8019016:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8019018:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801901a:	429d      	cmp	r5, r3
 801901c:	d015      	beq.n	801904a <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801901e:	b1a3      	cbz	r3, 801904a <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 8019020:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 8019024:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8019028:	4291      	cmp	r1, r2
 801902a:	d008      	beq.n	801903e <add_to_waitq_locked+0x3c>
		return b2 - b1;
 801902c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 801902e:	2a00      	cmp	r2, #0
 8019030:	dd05      	ble.n	801903e <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 8019032:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8019034:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8019038:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 801903a:	605c      	str	r4, [r3, #4]
}
 801903c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 801903e:	686a      	ldr	r2, [r5, #4]
 8019040:	4293      	cmp	r3, r2
 8019042:	d002      	beq.n	801904a <add_to_waitq_locked+0x48>
 8019044:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8019046:	2b00      	cmp	r3, #0
 8019048:	d1ec      	bne.n	8019024 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 801904a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 801904c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 8019050:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8019052:	606c      	str	r4, [r5, #4]
}
 8019054:	e7f2      	b.n	801903c <add_to_waitq_locked+0x3a>

08019056 <z_unpend1_no_timeout>:
{
 8019056:	b510      	push	{r4, lr}
	__asm__ volatile(
 8019058:	f04f 0310 	mov.w	r3, #16
 801905c:	f3ef 8411 	mrs	r4, BASEPRI
 8019060:	f383 8812 	msr	BASEPRI_MAX, r3
 8019064:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8019068:	f7ff ff93 	bl	8018f92 <z_priq_dumb_best>
		if (thread != NULL) {
 801906c:	4601      	mov	r1, r0
 801906e:	b108      	cbz	r0, 8019074 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 8019070:	f7ff ff42 	bl	8018ef8 <unpend_thread_no_timeout>
	__asm__ volatile(
 8019074:	f384 8811 	msr	BASEPRI, r4
 8019078:	f3bf 8f6f 	isb	sy
}
 801907c:	4608      	mov	r0, r1
 801907e:	bd10      	pop	{r4, pc}

08019080 <z_unpend_first_thread>:
{
 8019080:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8019082:	f04f 0310 	mov.w	r3, #16
 8019086:	f3ef 8511 	mrs	r5, BASEPRI
 801908a:	f383 8812 	msr	BASEPRI_MAX, r3
 801908e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8019092:	f7ff ff7e 	bl	8018f92 <z_priq_dumb_best>
		if (thread != NULL) {
 8019096:	4604      	mov	r4, r0
 8019098:	b120      	cbz	r0, 80190a4 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 801909a:	f7ff ff2d 	bl	8018ef8 <unpend_thread_no_timeout>
 801909e:	3018      	adds	r0, #24
 80190a0:	f000 f834 	bl	801910c <z_abort_timeout>
	__asm__ volatile(
 80190a4:	f385 8811 	msr	BASEPRI, r5
 80190a8:	f3bf 8f6f 	isb	sy
}
 80190ac:	4620      	mov	r0, r4
 80190ae:	bd38      	pop	{r3, r4, r5, pc}

080190b0 <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 80190b0:	17c1      	asrs	r1, r0, #31
		t += off;
 80190b2:	3063      	adds	r0, #99	; 0x63
{
 80190b4:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 80190b6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80190ba:	f04f 0300 	mov.w	r3, #0
 80190be:	f141 0100 	adc.w	r1, r1, #0
 80190c2:	f7e7 ff81 	bl	8000fc8 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 80190c6:	17c1      	asrs	r1, r0, #31
 80190c8:	f7f7 fc6e 	bl	80109a8 <z_tick_sleep>
}
 80190cc:	2364      	movs	r3, #100	; 0x64
 80190ce:	4358      	muls	r0, r3
 80190d0:	bd08      	pop	{r3, pc}

080190d2 <z_sched_wake>:
{
 80190d2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80190d4:	f04f 0310 	mov.w	r3, #16
 80190d8:	f3ef 8511 	mrs	r5, BASEPRI
 80190dc:	f383 8812 	msr	BASEPRI_MAX, r3
 80190e0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 80190e4:	f7ff ff55 	bl	8018f92 <z_priq_dumb_best>
		if (thread != NULL) {
 80190e8:	4604      	mov	r4, r0
 80190ea:	b150      	cbz	r0, 8019102 <z_sched_wake+0x30>
 80190ec:	67c1      	str	r1, [r0, #124]	; 0x7c
 80190ee:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 80190f0:	f7ff ff02 	bl	8018ef8 <unpend_thread_no_timeout>
 80190f4:	3018      	adds	r0, #24
 80190f6:	f000 f809 	bl	801910c <z_abort_timeout>
			ready_thread(thread);
 80190fa:	4620      	mov	r0, r4
 80190fc:	f7f7 facc 	bl	8010698 <ready_thread>
			ret = true;
 8019100:	2001      	movs	r0, #1
	__asm__ volatile(
 8019102:	f385 8811 	msr	BASEPRI, r5
 8019106:	f3bf 8f6f 	isb	sy
}
 801910a:	bd38      	pop	{r3, r4, r5, pc}

0801910c <z_abort_timeout>:
{
 801910c:	b510      	push	{r4, lr}
	__asm__ volatile(
 801910e:	f04f 0210 	mov.w	r2, #16
 8019112:	f3ef 8411 	mrs	r4, BASEPRI
 8019116:	f382 8812 	msr	BASEPRI_MAX, r2
 801911a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 801911e:	6803      	ldr	r3, [r0, #0]
 8019120:	b13b      	cbz	r3, 8019132 <z_abort_timeout+0x26>
			remove_timeout(to);
 8019122:	f7f7 fd65 	bl	8010bf0 <remove_timeout>
			ret = 0;
 8019126:	2000      	movs	r0, #0
	__asm__ volatile(
 8019128:	f384 8811 	msr	BASEPRI, r4
 801912c:	f3bf 8f6f 	isb	sy
}
 8019130:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8019132:	f06f 0015 	mvn.w	r0, #21
 8019136:	e7f7      	b.n	8019128 <z_abort_timeout+0x1c>

08019138 <z_set_timeout_expiry>:
{
 8019138:	b570      	push	{r4, r5, r6, lr}
 801913a:	4604      	mov	r4, r0
 801913c:	460d      	mov	r5, r1
	__asm__ volatile(
 801913e:	f04f 0310 	mov.w	r3, #16
 8019142:	f3ef 8611 	mrs	r6, BASEPRI
 8019146:	f383 8812 	msr	BASEPRI_MAX, r3
 801914a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 801914e:	f7f7 fd29 	bl	8010ba4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8019152:	2801      	cmp	r0, #1
 8019154:	dd05      	ble.n	8019162 <z_set_timeout_expiry+0x2a>
 8019156:	42a0      	cmp	r0, r4
 8019158:	db03      	blt.n	8019162 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 801915a:	4629      	mov	r1, r5
 801915c:	4620      	mov	r0, r4
 801915e:	f7f5 fc45 	bl	800e9ec <sys_clock_set_timeout>
	__asm__ volatile(
 8019162:	f386 8811 	msr	BASEPRI, r6
 8019166:	f3bf 8f6f 	isb	sy
}
 801916a:	bd70      	pop	{r4, r5, r6, pc}

0801916c <sys_clock_tick_get_32>:
{
 801916c:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 801916e:	f7f7 fe2f 	bl	8010dd0 <sys_clock_tick_get>
}
 8019172:	bd08      	pop	{r3, pc}

08019174 <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 8019174:	f7f7 be2c 	b.w	8010dd0 <sys_clock_tick_get>

08019178 <k_timer_init>:
	timer->status = 0U;
 8019178:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 801917a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 801917e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 8019182:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8019186:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 801918a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 801918c:	6343      	str	r3, [r0, #52]	; 0x34
}
 801918e:	4770      	bx	lr

08019190 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8019190:	b510      	push	{r4, lr}
 8019192:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8019194:	f7ff ffba 	bl	801910c <z_abort_timeout>

	if (inactive) {
 8019198:	b9b0      	cbnz	r0, 80191c8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 801919a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801919c:	b10b      	cbz	r3, 80191a2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 801919e:	4620      	mov	r0, r4
 80191a0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 80191a2:	f104 0018 	add.w	r0, r4, #24
 80191a6:	f7ff ff56 	bl	8019056 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 80191aa:	b168      	cbz	r0, 80191c8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 80191ac:	f7ff fef7 	bl	8018f9e <z_ready_thread>
	__asm__ volatile(
 80191b0:	f04f 0310 	mov.w	r3, #16
 80191b4:	f3ef 8011 	mrs	r0, BASEPRI
 80191b8:	f383 8812 	msr	BASEPRI_MAX, r3
 80191bc:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 80191c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 80191c4:	f7ff becf 	b.w	8018f66 <z_reschedule_irqlock>
 80191c8:	bd10      	pop	{r4, pc}

080191ca <add_event>:
{
 80191ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191cc:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80191ce:	e9d0 1300 	ldrd	r1, r3, [r0]
 80191d2:	4288      	cmp	r0, r1
 80191d4:	4604      	mov	r4, r0
 80191d6:	d00d      	beq.n	80191f4 <add_event+0x2a>
	if ((pending == NULL) ||
 80191d8:	b163      	cbz	r3, 80191f4 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80191da:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 80191dc:	b100      	cbz	r0, 80191e0 <add_event+0x16>
 80191de:	3860      	subs	r0, #96	; 0x60
 80191e0:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80191e4:	4639      	mov	r1, r7
 80191e6:	f7ff fe91 	bl	8018f0c <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80191ea:	2800      	cmp	r0, #0
 80191ec:	dc02      	bgt.n	80191f4 <add_event+0x2a>
	return list->head == list;
 80191ee:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80191f0:	42b4      	cmp	r4, r6
 80191f2:	d109      	bne.n	8019208 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
 80191f4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 80191f6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 80191fa:	601d      	str	r5, [r3, #0]
	list->tail = node;
 80191fc:	6065      	str	r5, [r4, #4]
}
 80191fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8019200:	6863      	ldr	r3, [r4, #4]
 8019202:	42b3      	cmp	r3, r6
 8019204:	d0f6      	beq.n	80191f4 <add_event+0x2a>
 8019206:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8019208:	2e00      	cmp	r6, #0
 801920a:	d0f3      	beq.n	80191f4 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
 801920c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801920e:	b101      	cbz	r1, 8019212 <add_event+0x48>
 8019210:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 8019212:	4638      	mov	r0, r7
 8019214:	f7ff fe7a 	bl	8018f0c <z_sched_prio_cmp>
 8019218:	2800      	cmp	r0, #0
 801921a:	ddf1      	ble.n	8019200 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
 801921c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 801921e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 8019222:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8019224:	6075      	str	r5, [r6, #4]
			return;
 8019226:	e7ea      	b.n	80191fe <add_event+0x34>

08019228 <register_events>:
{
 8019228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 801922c:	2500      	movs	r5, #0
{
 801922e:	468b      	mov	fp, r1
 8019230:	4614      	mov	r4, r2
 8019232:	461f      	mov	r7, r3
 8019234:	4682      	mov	sl, r0
	int events_registered = 0;
 8019236:	462e      	mov	r6, r5
	event->poller = NULL;
 8019238:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
 801923a:	455d      	cmp	r5, fp
 801923c:	db02      	blt.n	8019244 <register_events+0x1c>
}
 801923e:	4630      	mov	r0, r6
 8019240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019244:	f04f 0310 	mov.w	r3, #16
 8019248:	f3ef 8911 	mrs	r9, BASEPRI
 801924c:	f383 8812 	msr	BASEPRI_MAX, r3
 8019250:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 8019254:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8019258:	f003 031f 	and.w	r3, r3, #31
 801925c:	3b01      	subs	r3, #1
 801925e:	2b07      	cmp	r3, #7
 8019260:	d80f      	bhi.n	8019282 <register_events+0x5a>
 8019262:	e8df f003 	tbb	[pc, r3]
 8019266:	041e      	.short	0x041e
 8019268:	0e0e0a0e 	.word	0x0e0e0a0e
 801926c:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
 801926e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8019272:	689b      	ldr	r3, [r3, #8]
 8019274:	b12b      	cbz	r3, 8019282 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8019276:	2302      	movs	r3, #2
 8019278:	e020      	b.n	80192bc <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 801927a:	f8da 3010 	ldr.w	r3, [sl, #16]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	bb8b      	cbnz	r3, 80192e6 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
 8019282:	bb47      	cbnz	r7, 80192d6 <register_events+0xae>
 8019284:	7823      	ldrb	r3, [r4, #0]
 8019286:	b333      	cbz	r3, 80192d6 <register_events+0xae>
	switch (event->type) {
 8019288:	f89a 300d 	ldrb.w	r3, [sl, #13]
 801928c:	f003 031f 	and.w	r3, r3, #31
 8019290:	3b01      	subs	r3, #1
 8019292:	2b07      	cmp	r3, #7
 8019294:	d830      	bhi.n	80192f8 <register_events+0xd0>
 8019296:	e8df f003 	tbb	[pc, r3]
 801929a:	2833      	.short	0x2833
 801929c:	2f2f282f 	.word	0x2f2f282f
 80192a0:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
 80192a2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80192a6:	689b      	ldr	r3, [r3, #8]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d0ea      	beq.n	8019282 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
 80192ac:	2301      	movs	r3, #1
 80192ae:	e005      	b.n	80192bc <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
 80192b0:	f8da 3010 	ldr.w	r3, [sl, #16]
 80192b4:	6a1b      	ldr	r3, [r3, #32]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d0e3      	beq.n	8019282 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 80192ba:	2310      	movs	r3, #16
	event->state |= state;
 80192bc:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
 80192c0:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
 80192c4:	f3c2 3145 	ubfx	r1, r2, #13, #6
 80192c8:	430b      	orrs	r3, r1
 80192ca:	f363 3252 	bfi	r2, r3, #13, #6
 80192ce:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
 80192d2:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
 80192d6:	f389 8811 	msr	BASEPRI, r9
 80192da:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 80192de:	3501      	adds	r5, #1
 80192e0:	f10a 0a14 	add.w	sl, sl, #20
 80192e4:	e7a9      	b.n	801923a <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 80192e6:	2304      	movs	r3, #4
 80192e8:	e7e8      	b.n	80192bc <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
 80192ea:	f8da 0010 	ldr.w	r0, [sl, #16]
 80192ee:	4622      	mov	r2, r4
 80192f0:	4651      	mov	r1, sl
 80192f2:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
 80192f4:	f7ff ff69 	bl	80191ca <add_event>
	event->poller = poller;
 80192f8:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
 80192fc:	3601      	adds	r6, #1
 80192fe:	e7ea      	b.n	80192d6 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
 8019300:	f8da 0010 	ldr.w	r0, [sl, #16]
 8019304:	4622      	mov	r2, r4
 8019306:	4651      	mov	r1, sl
 8019308:	e7f4      	b.n	80192f4 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
 801930a:	f8da 0010 	ldr.w	r0, [sl, #16]
 801930e:	4622      	mov	r2, r4
 8019310:	4651      	mov	r1, sl
 8019312:	3024      	adds	r0, #36	; 0x24
 8019314:	e7ee      	b.n	80192f4 <register_events+0xcc>

08019316 <signal_poll_event>:
{
 8019316:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
 801931a:	6884      	ldr	r4, [r0, #8]
{
 801931c:	4605      	mov	r5, r0
 801931e:	460e      	mov	r6, r1
	if (poller != NULL) {
 8019320:	b144      	cbz	r4, 8019334 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 8019322:	7863      	ldrb	r3, [r4, #1]
 8019324:	2b01      	cmp	r3, #1
 8019326:	d136      	bne.n	8019396 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
 8019328:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 801932c:	f013 0302 	ands.w	r3, r3, #2
 8019330:	d10a      	bne.n	8019348 <signal_poll_event+0x32>
		poller->is_polling = false;
 8019332:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 8019334:	68eb      	ldr	r3, [r5, #12]
 8019336:	f3c3 3145 	ubfx	r1, r3, #13, #6
 801933a:	430e      	orrs	r6, r1
	event->poller = NULL;
 801933c:	2000      	movs	r0, #0
	event->state |= state;
 801933e:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
 8019342:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 8019344:	60eb      	str	r3, [r5, #12]
	return retcode;
 8019346:	e00b      	b.n	8019360 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
 8019348:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 801934c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019350:	bf08      	it	eq
 8019352:	f112 0f02 	cmneq.w	r2, #2
 8019356:	d105      	bne.n	8019364 <signal_poll_event+0x4e>
		poller->is_polling = false;
 8019358:	2300      	movs	r3, #0
 801935a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
 801935c:	f06f 000a 	mvn.w	r0, #10
}
 8019360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8019364:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
 8019368:	4640      	mov	r0, r8
 801936a:	f7ff fde8 	bl	8018f3e <z_unpend_thread>
	arch_thread_return_value_set(thread,
 801936e:	2e08      	cmp	r6, #8
 8019370:	bf0c      	ite	eq
 8019372:	f06f 0303 	mvneq.w	r3, #3
 8019376:	2300      	movne	r3, #0
 8019378:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 801937a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 801937e:	06db      	lsls	r3, r3, #27
 8019380:	d102      	bne.n	8019388 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
 8019382:	f854 7c48 	ldr.w	r7, [r4, #-72]
 8019386:	b10f      	cbz	r7, 801938c <signal_poll_event+0x76>
		poller->is_polling = false;
 8019388:	2300      	movs	r3, #0
 801938a:	e7d2      	b.n	8019332 <signal_poll_event+0x1c>
	z_ready_thread(thread);
 801938c:	4640      	mov	r0, r8
 801938e:	f7ff fe06 	bl	8018f9e <z_ready_thread>
		poller->is_polling = false;
 8019392:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 8019394:	e7ce      	b.n	8019334 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 8019396:	2b02      	cmp	r3, #2
 8019398:	d1f6      	bne.n	8019388 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 801939a:	7823      	ldrb	r3, [r4, #0]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d0c9      	beq.n	8019334 <signal_poll_event+0x1e>
 80193a0:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80193a4:	2f00      	cmp	r7, #0
 80193a6:	d0f4      	beq.n	8019392 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
 80193a8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 80193ac:	f1a4 0914 	sub.w	r9, r4, #20
 80193b0:	f104 0014 	add.w	r0, r4, #20
 80193b4:	f7ff feaa 	bl	801910c <z_abort_timeout>
		twork->poll_result = 0;
 80193b8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 80193bc:	4649      	mov	r1, r9
 80193be:	4638      	mov	r0, r7
 80193c0:	f7ff fd75 	bl	8018eae <k_work_submit_to_queue>
		poller->is_polling = false;
 80193c4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 80193c8:	e7b4      	b.n	8019334 <signal_poll_event+0x1e>

080193ca <clear_event_registrations>:
	while (num_events--) {
 80193ca:	2314      	movs	r3, #20
{
 80193cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193ce:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
 80193d2:	2400      	movs	r4, #0
 80193d4:	2601      	movs	r6, #1
	while (num_events--) {
 80193d6:	b901      	cbnz	r1, 80193da <clear_event_registrations+0x10>
}
 80193d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
 80193da:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
 80193de:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
 80193e2:	f003 031f 	and.w	r3, r3, #31
 80193e6:	2b08      	cmp	r3, #8
 80193e8:	f1a0 0714 	sub.w	r7, r0, #20
 80193ec:	d80d      	bhi.n	801940a <clear_event_registrations+0x40>
 80193ee:	fa06 f303 	lsl.w	r3, r6, r3
 80193f2:	f413 7f8b 	tst.w	r3, #278	; 0x116
 80193f6:	d008      	beq.n	801940a <clear_event_registrations+0x40>
	return node->next != NULL;
 80193f8:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80193fc:	b12b      	cbz	r3, 801940a <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
 80193fe:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
 8019402:	602b      	str	r3, [r5, #0]
	next->prev = prev;
 8019404:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 8019406:	e940 4405 	strd	r4, r4, [r0, #-20]
 801940a:	f382 8811 	msr	BASEPRI, r2
 801940e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8019412:	f04f 0310 	mov.w	r3, #16
 8019416:	f3ef 8211 	mrs	r2, BASEPRI
 801941a:	f383 8812 	msr	BASEPRI_MAX, r3
 801941e:	f3bf 8f6f 	isb	sy
 8019422:	3901      	subs	r1, #1
 8019424:	4638      	mov	r0, r7
 8019426:	e7d6      	b.n	80193d6 <clear_event_registrations+0xc>

08019428 <z_handle_obj_poll_events>:
{
 8019428:	4603      	mov	r3, r0
	return list->head == list;
 801942a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 801942c:	4283      	cmp	r3, r0
 801942e:	d008      	beq.n	8019442 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 8019430:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8019434:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8019436:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8019438:	2300      	movs	r3, #0
	node->prev = NULL;
 801943a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 801943e:	f7ff bf6a 	b.w	8019316 <signal_poll_event>
}
 8019442:	4770      	bx	lr

08019444 <k_heap_init>:
{
 8019444:	b410      	push	{r4}
 8019446:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 801944a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 801944e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8019450:	f7fa bbc6 	b.w	8013be0 <sys_heap_init>

08019454 <memcmp>:
 8019454:	b510      	push	{r4, lr}
 8019456:	3901      	subs	r1, #1
 8019458:	4402      	add	r2, r0
 801945a:	4290      	cmp	r0, r2
 801945c:	d101      	bne.n	8019462 <memcmp+0xe>
 801945e:	2000      	movs	r0, #0
 8019460:	e005      	b.n	801946e <memcmp+0x1a>
 8019462:	7803      	ldrb	r3, [r0, #0]
 8019464:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019468:	42a3      	cmp	r3, r4
 801946a:	d001      	beq.n	8019470 <memcmp+0x1c>
 801946c:	1b18      	subs	r0, r3, r4
 801946e:	bd10      	pop	{r4, pc}
 8019470:	3001      	adds	r0, #1
 8019472:	e7f2      	b.n	801945a <memcmp+0x6>

08019474 <memcpy>:
 8019474:	440a      	add	r2, r1
 8019476:	4291      	cmp	r1, r2
 8019478:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801947c:	d100      	bne.n	8019480 <memcpy+0xc>
 801947e:	4770      	bx	lr
 8019480:	b510      	push	{r4, lr}
 8019482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019486:	f803 4f01 	strb.w	r4, [r3, #1]!
 801948a:	4291      	cmp	r1, r2
 801948c:	d1f9      	bne.n	8019482 <memcpy+0xe>
 801948e:	bd10      	pop	{r4, pc}

08019490 <memmove>:
 8019490:	4288      	cmp	r0, r1
 8019492:	b510      	push	{r4, lr}
 8019494:	eb01 0402 	add.w	r4, r1, r2
 8019498:	d902      	bls.n	80194a0 <memmove+0x10>
 801949a:	4284      	cmp	r4, r0
 801949c:	4623      	mov	r3, r4
 801949e:	d807      	bhi.n	80194b0 <memmove+0x20>
 80194a0:	1e43      	subs	r3, r0, #1
 80194a2:	42a1      	cmp	r1, r4
 80194a4:	d008      	beq.n	80194b8 <memmove+0x28>
 80194a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80194aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80194ae:	e7f8      	b.n	80194a2 <memmove+0x12>
 80194b0:	4402      	add	r2, r0
 80194b2:	4601      	mov	r1, r0
 80194b4:	428a      	cmp	r2, r1
 80194b6:	d100      	bne.n	80194ba <memmove+0x2a>
 80194b8:	bd10      	pop	{r4, pc}
 80194ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80194be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80194c2:	e7f7      	b.n	80194b4 <memmove+0x24>

080194c4 <memset>:
 80194c4:	4402      	add	r2, r0
 80194c6:	4603      	mov	r3, r0
 80194c8:	4293      	cmp	r3, r2
 80194ca:	d100      	bne.n	80194ce <memset+0xa>
 80194cc:	4770      	bx	lr
 80194ce:	f803 1b01 	strb.w	r1, [r3], #1
 80194d2:	e7f9      	b.n	80194c8 <memset+0x4>

080194d4 <strchr>:
 80194d4:	b2c9      	uxtb	r1, r1
 80194d6:	4603      	mov	r3, r0
 80194d8:	4618      	mov	r0, r3
 80194da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194de:	b112      	cbz	r2, 80194e6 <strchr+0x12>
 80194e0:	428a      	cmp	r2, r1
 80194e2:	d1f9      	bne.n	80194d8 <strchr+0x4>
 80194e4:	4770      	bx	lr
 80194e6:	2900      	cmp	r1, #0
 80194e8:	bf18      	it	ne
 80194ea:	2000      	movne	r0, #0
 80194ec:	4770      	bx	lr

080194ee <strcpy>:
 80194ee:	4603      	mov	r3, r0
 80194f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80194f4:	f803 2b01 	strb.w	r2, [r3], #1
 80194f8:	2a00      	cmp	r2, #0
 80194fa:	d1f9      	bne.n	80194f0 <strcpy+0x2>
 80194fc:	4770      	bx	lr

080194fe <__strcpy_chk>:
 80194fe:	b570      	push	{r4, r5, r6, lr}
 8019500:	4605      	mov	r5, r0
 8019502:	4608      	mov	r0, r1
 8019504:	4616      	mov	r6, r2
 8019506:	460c      	mov	r4, r1
 8019508:	f7e7 ff5d 	bl	80013c6 <strlen>
 801950c:	1c42      	adds	r2, r0, #1
 801950e:	42b2      	cmp	r2, r6
 8019510:	d901      	bls.n	8019516 <__strcpy_chk+0x18>
 8019512:	f7ec f8b5 	bl	8005680 <__chk_fail>
 8019516:	42ac      	cmp	r4, r5
 8019518:	d804      	bhi.n	8019524 <__strcpy_chk+0x26>
 801951a:	18a3      	adds	r3, r4, r2
 801951c:	429d      	cmp	r5, r3
 801951e:	d3f8      	bcc.n	8019512 <__strcpy_chk+0x14>
 8019520:	42ac      	cmp	r4, r5
 8019522:	d102      	bne.n	801952a <__strcpy_chk+0x2c>
 8019524:	18ab      	adds	r3, r5, r2
 8019526:	429c      	cmp	r4, r3
 8019528:	d3f3      	bcc.n	8019512 <__strcpy_chk+0x14>
 801952a:	4621      	mov	r1, r4
 801952c:	4628      	mov	r0, r5
 801952e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019532:	f7ff bf9f 	b.w	8019474 <memcpy>

08019536 <strftime>:
 8019536:	f7f7 bfc1 	b.w	80114bc <__strftime.isra.0>

0801953a <strncmp>:
 801953a:	b510      	push	{r4, lr}
 801953c:	4603      	mov	r3, r0
 801953e:	b172      	cbz	r2, 801955e <strncmp+0x24>
 8019540:	3901      	subs	r1, #1
 8019542:	1884      	adds	r4, r0, r2
 8019544:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019548:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801954c:	4290      	cmp	r0, r2
 801954e:	d101      	bne.n	8019554 <strncmp+0x1a>
 8019550:	42a3      	cmp	r3, r4
 8019552:	d101      	bne.n	8019558 <strncmp+0x1e>
 8019554:	1a80      	subs	r0, r0, r2
 8019556:	bd10      	pop	{r4, pc}
 8019558:	2800      	cmp	r0, #0
 801955a:	d1f3      	bne.n	8019544 <strncmp+0xa>
 801955c:	e7fa      	b.n	8019554 <strncmp+0x1a>
 801955e:	4610      	mov	r0, r2
 8019560:	e7f9      	b.n	8019556 <strncmp+0x1c>

08019562 <strncpy>:
 8019562:	b510      	push	{r4, lr}
 8019564:	3901      	subs	r1, #1
 8019566:	4603      	mov	r3, r0
 8019568:	b132      	cbz	r2, 8019578 <strncpy+0x16>
 801956a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801956e:	f803 4b01 	strb.w	r4, [r3], #1
 8019572:	3a01      	subs	r2, #1
 8019574:	2c00      	cmp	r4, #0
 8019576:	d1f7      	bne.n	8019568 <strncpy+0x6>
 8019578:	441a      	add	r2, r3
 801957a:	2100      	movs	r1, #0
 801957c:	4293      	cmp	r3, r2
 801957e:	d100      	bne.n	8019582 <strncpy+0x20>
 8019580:	bd10      	pop	{r4, pc}
 8019582:	f803 1b01 	strb.w	r1, [r3], #1
 8019586:	e7f9      	b.n	801957c <strncpy+0x1a>

08019588 <strnlen>:
 8019588:	b510      	push	{r4, lr}
 801958a:	4602      	mov	r2, r0
 801958c:	4401      	add	r1, r0
 801958e:	428a      	cmp	r2, r1
 8019590:	4613      	mov	r3, r2
 8019592:	d003      	beq.n	801959c <strnlen+0x14>
 8019594:	781c      	ldrb	r4, [r3, #0]
 8019596:	3201      	adds	r2, #1
 8019598:	2c00      	cmp	r4, #0
 801959a:	d1f8      	bne.n	801958e <strnlen+0x6>
 801959c:	1a18      	subs	r0, r3, r0
 801959e:	bd10      	pop	{r4, pc}

080195a0 <_strtoul_r>:
 80195a0:	f7f8 bc60 	b.w	8011e64 <_strtoul_l.constprop.0>

080195a4 <abs>:
 80195a4:	2800      	cmp	r0, #0
 80195a6:	bfb8      	it	lt
 80195a8:	4240      	neglt	r0, r0
 80195aa:	4770      	bx	lr

080195ac <__sfmoreglue>:
 80195ac:	b570      	push	{r4, r5, r6, lr}
 80195ae:	2268      	movs	r2, #104	; 0x68
 80195b0:	1e4d      	subs	r5, r1, #1
 80195b2:	4355      	muls	r5, r2
 80195b4:	460e      	mov	r6, r1
 80195b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80195ba:	f7f7 fe9b 	bl	80112f4 <_malloc_r>
 80195be:	4604      	mov	r4, r0
 80195c0:	b140      	cbz	r0, 80195d4 <__sfmoreglue+0x28>
 80195c2:	2100      	movs	r1, #0
 80195c4:	e9c0 1600 	strd	r1, r6, [r0]
 80195c8:	300c      	adds	r0, #12
 80195ca:	60a0      	str	r0, [r4, #8]
 80195cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80195d0:	f7ff ff78 	bl	80194c4 <memset>
 80195d4:	4620      	mov	r0, r4
 80195d6:	bd70      	pop	{r4, r5, r6, pc}

080195d8 <_fwalk_reent>:
 80195d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195dc:	4606      	mov	r6, r0
 80195de:	4688      	mov	r8, r1
 80195e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80195e4:	2700      	movs	r7, #0
 80195e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80195ea:	f1b9 0901 	subs.w	r9, r9, #1
 80195ee:	d505      	bpl.n	80195fc <_fwalk_reent+0x24>
 80195f0:	6824      	ldr	r4, [r4, #0]
 80195f2:	2c00      	cmp	r4, #0
 80195f4:	d1f7      	bne.n	80195e6 <_fwalk_reent+0xe>
 80195f6:	4638      	mov	r0, r7
 80195f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195fc:	89ab      	ldrh	r3, [r5, #12]
 80195fe:	2b01      	cmp	r3, #1
 8019600:	d907      	bls.n	8019612 <_fwalk_reent+0x3a>
 8019602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019606:	3301      	adds	r3, #1
 8019608:	d003      	beq.n	8019612 <_fwalk_reent+0x3a>
 801960a:	4629      	mov	r1, r5
 801960c:	4630      	mov	r0, r6
 801960e:	47c0      	blx	r8
 8019610:	4307      	orrs	r7, r0
 8019612:	3568      	adds	r5, #104	; 0x68
 8019614:	e7e9      	b.n	80195ea <_fwalk_reent+0x12>

08019616 <_getenv_r>:
 8019616:	b507      	push	{r0, r1, r2, lr}
 8019618:	aa01      	add	r2, sp, #4
 801961a:	f7f9 f86f 	bl	80126fc <_findenv_r>
 801961e:	b003      	add	sp, #12
 8019620:	f85d fb04 	ldr.w	pc, [sp], #4

08019624 <labs>:
 8019624:	2800      	cmp	r0, #0
 8019626:	bfb8      	it	lt
 8019628:	4240      	neglt	r0, r0
 801962a:	4770      	bx	lr

0801962c <__swhatbuf_r>:
 801962c:	b570      	push	{r4, r5, r6, lr}
 801962e:	460e      	mov	r6, r1
 8019630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019634:	2900      	cmp	r1, #0
 8019636:	b096      	sub	sp, #88	; 0x58
 8019638:	4614      	mov	r4, r2
 801963a:	461d      	mov	r5, r3
 801963c:	da08      	bge.n	8019650 <__swhatbuf_r+0x24>
 801963e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019642:	2200      	movs	r2, #0
 8019644:	602a      	str	r2, [r5, #0]
 8019646:	061a      	lsls	r2, r3, #24
 8019648:	d410      	bmi.n	801966c <__swhatbuf_r+0x40>
 801964a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801964e:	e00e      	b.n	801966e <__swhatbuf_r+0x42>
 8019650:	466a      	mov	r2, sp
 8019652:	f7f9 fc67 	bl	8012f24 <_fstat_r>
 8019656:	2800      	cmp	r0, #0
 8019658:	dbf1      	blt.n	801963e <__swhatbuf_r+0x12>
 801965a:	9a01      	ldr	r2, [sp, #4]
 801965c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019660:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019664:	425a      	negs	r2, r3
 8019666:	415a      	adcs	r2, r3
 8019668:	602a      	str	r2, [r5, #0]
 801966a:	e7ee      	b.n	801964a <__swhatbuf_r+0x1e>
 801966c:	2340      	movs	r3, #64	; 0x40
 801966e:	2000      	movs	r0, #0
 8019670:	6023      	str	r3, [r4, #0]
 8019672:	b016      	add	sp, #88	; 0x58
 8019674:	bd70      	pop	{r4, r5, r6, pc}

08019676 <__sfputc_r>:
 8019676:	6893      	ldr	r3, [r2, #8]
 8019678:	3b01      	subs	r3, #1
 801967a:	2b00      	cmp	r3, #0
 801967c:	b410      	push	{r4}
 801967e:	6093      	str	r3, [r2, #8]
 8019680:	da07      	bge.n	8019692 <__sfputc_r+0x1c>
 8019682:	6994      	ldr	r4, [r2, #24]
 8019684:	42a3      	cmp	r3, r4
 8019686:	db01      	blt.n	801968c <__sfputc_r+0x16>
 8019688:	290a      	cmp	r1, #10
 801968a:	d102      	bne.n	8019692 <__sfputc_r+0x1c>
 801968c:	bc10      	pop	{r4}
 801968e:	f7f8 bdf7 	b.w	8012280 <__swbuf_r>
 8019692:	6813      	ldr	r3, [r2, #0]
 8019694:	1c58      	adds	r0, r3, #1
 8019696:	6010      	str	r0, [r2, #0]
 8019698:	7019      	strb	r1, [r3, #0]
 801969a:	4608      	mov	r0, r1
 801969c:	bc10      	pop	{r4}
 801969e:	4770      	bx	lr

080196a0 <__sfputs_r>:
 80196a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196a2:	4606      	mov	r6, r0
 80196a4:	460f      	mov	r7, r1
 80196a6:	4614      	mov	r4, r2
 80196a8:	18d5      	adds	r5, r2, r3
 80196aa:	42ac      	cmp	r4, r5
 80196ac:	d101      	bne.n	80196b2 <__sfputs_r+0x12>
 80196ae:	2000      	movs	r0, #0
 80196b0:	e007      	b.n	80196c2 <__sfputs_r+0x22>
 80196b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196b6:	463a      	mov	r2, r7
 80196b8:	4630      	mov	r0, r6
 80196ba:	f7ff ffdc 	bl	8019676 <__sfputc_r>
 80196be:	1c43      	adds	r3, r0, #1
 80196c0:	d1f3      	bne.n	80196aa <__sfputs_r+0xa>
 80196c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080196c4 <_printf_common>:
 80196c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196c8:	4616      	mov	r6, r2
 80196ca:	4699      	mov	r9, r3
 80196cc:	688a      	ldr	r2, [r1, #8]
 80196ce:	690b      	ldr	r3, [r1, #16]
 80196d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80196d4:	4293      	cmp	r3, r2
 80196d6:	bfb8      	it	lt
 80196d8:	4613      	movlt	r3, r2
 80196da:	6033      	str	r3, [r6, #0]
 80196dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80196e0:	4607      	mov	r7, r0
 80196e2:	460c      	mov	r4, r1
 80196e4:	b10a      	cbz	r2, 80196ea <_printf_common+0x26>
 80196e6:	3301      	adds	r3, #1
 80196e8:	6033      	str	r3, [r6, #0]
 80196ea:	6823      	ldr	r3, [r4, #0]
 80196ec:	0699      	lsls	r1, r3, #26
 80196ee:	bf42      	ittt	mi
 80196f0:	6833      	ldrmi	r3, [r6, #0]
 80196f2:	3302      	addmi	r3, #2
 80196f4:	6033      	strmi	r3, [r6, #0]
 80196f6:	6825      	ldr	r5, [r4, #0]
 80196f8:	f015 0506 	ands.w	r5, r5, #6
 80196fc:	d106      	bne.n	801970c <_printf_common+0x48>
 80196fe:	f104 0a19 	add.w	sl, r4, #25
 8019702:	68e3      	ldr	r3, [r4, #12]
 8019704:	6832      	ldr	r2, [r6, #0]
 8019706:	1a9b      	subs	r3, r3, r2
 8019708:	42ab      	cmp	r3, r5
 801970a:	dc26      	bgt.n	801975a <_printf_common+0x96>
 801970c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019710:	1e13      	subs	r3, r2, #0
 8019712:	6822      	ldr	r2, [r4, #0]
 8019714:	bf18      	it	ne
 8019716:	2301      	movne	r3, #1
 8019718:	0692      	lsls	r2, r2, #26
 801971a:	d42b      	bmi.n	8019774 <_printf_common+0xb0>
 801971c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019720:	4649      	mov	r1, r9
 8019722:	4638      	mov	r0, r7
 8019724:	47c0      	blx	r8
 8019726:	3001      	adds	r0, #1
 8019728:	d01e      	beq.n	8019768 <_printf_common+0xa4>
 801972a:	6823      	ldr	r3, [r4, #0]
 801972c:	68e5      	ldr	r5, [r4, #12]
 801972e:	6832      	ldr	r2, [r6, #0]
 8019730:	f003 0306 	and.w	r3, r3, #6
 8019734:	2b04      	cmp	r3, #4
 8019736:	bf08      	it	eq
 8019738:	1aad      	subeq	r5, r5, r2
 801973a:	68a3      	ldr	r3, [r4, #8]
 801973c:	6922      	ldr	r2, [r4, #16]
 801973e:	bf0c      	ite	eq
 8019740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019744:	2500      	movne	r5, #0
 8019746:	4293      	cmp	r3, r2
 8019748:	bfc4      	itt	gt
 801974a:	1a9b      	subgt	r3, r3, r2
 801974c:	18ed      	addgt	r5, r5, r3
 801974e:	2600      	movs	r6, #0
 8019750:	341a      	adds	r4, #26
 8019752:	42b5      	cmp	r5, r6
 8019754:	d11a      	bne.n	801978c <_printf_common+0xc8>
 8019756:	2000      	movs	r0, #0
 8019758:	e008      	b.n	801976c <_printf_common+0xa8>
 801975a:	2301      	movs	r3, #1
 801975c:	4652      	mov	r2, sl
 801975e:	4649      	mov	r1, r9
 8019760:	4638      	mov	r0, r7
 8019762:	47c0      	blx	r8
 8019764:	3001      	adds	r0, #1
 8019766:	d103      	bne.n	8019770 <_printf_common+0xac>
 8019768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801976c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019770:	3501      	adds	r5, #1
 8019772:	e7c6      	b.n	8019702 <_printf_common+0x3e>
 8019774:	18e1      	adds	r1, r4, r3
 8019776:	1c5a      	adds	r2, r3, #1
 8019778:	2030      	movs	r0, #48	; 0x30
 801977a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801977e:	4422      	add	r2, r4
 8019780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019788:	3302      	adds	r3, #2
 801978a:	e7c7      	b.n	801971c <_printf_common+0x58>
 801978c:	2301      	movs	r3, #1
 801978e:	4622      	mov	r2, r4
 8019790:	4649      	mov	r1, r9
 8019792:	4638      	mov	r0, r7
 8019794:	47c0      	blx	r8
 8019796:	3001      	adds	r0, #1
 8019798:	d0e6      	beq.n	8019768 <_printf_common+0xa4>
 801979a:	3601      	adds	r6, #1
 801979c:	e7d9      	b.n	8019752 <_printf_common+0x8e>

0801979e <__sread>:
 801979e:	b510      	push	{r4, lr}
 80197a0:	460c      	mov	r4, r1
 80197a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197a6:	f7f9 ffbb 	bl	8013720 <_read_r>
 80197aa:	2800      	cmp	r0, #0
 80197ac:	bfab      	itete	ge
 80197ae:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80197b0:	89a3      	ldrhlt	r3, [r4, #12]
 80197b2:	181b      	addge	r3, r3, r0
 80197b4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80197b8:	bfac      	ite	ge
 80197ba:	6563      	strge	r3, [r4, #84]	; 0x54
 80197bc:	81a3      	strhlt	r3, [r4, #12]
 80197be:	bd10      	pop	{r4, pc}

080197c0 <__seofread>:
 80197c0:	2000      	movs	r0, #0
 80197c2:	4770      	bx	lr

080197c4 <__swrite>:
 80197c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197c8:	461f      	mov	r7, r3
 80197ca:	898b      	ldrh	r3, [r1, #12]
 80197cc:	05db      	lsls	r3, r3, #23
 80197ce:	4605      	mov	r5, r0
 80197d0:	460c      	mov	r4, r1
 80197d2:	4616      	mov	r6, r2
 80197d4:	d505      	bpl.n	80197e2 <__swrite+0x1e>
 80197d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197da:	2302      	movs	r3, #2
 80197dc:	2200      	movs	r2, #0
 80197de:	f7f9 fbc3 	bl	8012f68 <_lseek_r>
 80197e2:	89a3      	ldrh	r3, [r4, #12]
 80197e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80197e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80197ec:	81a3      	strh	r3, [r4, #12]
 80197ee:	4632      	mov	r2, r6
 80197f0:	463b      	mov	r3, r7
 80197f2:	4628      	mov	r0, r5
 80197f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197f8:	f7f9 bb66 	b.w	8012ec8 <_write_r>

080197fc <__sseek>:
 80197fc:	b510      	push	{r4, lr}
 80197fe:	460c      	mov	r4, r1
 8019800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019804:	f7f9 fbb0 	bl	8012f68 <_lseek_r>
 8019808:	1c43      	adds	r3, r0, #1
 801980a:	89a3      	ldrh	r3, [r4, #12]
 801980c:	bf15      	itete	ne
 801980e:	6560      	strne	r0, [r4, #84]	; 0x54
 8019810:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019814:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019818:	81a3      	strheq	r3, [r4, #12]
 801981a:	bf18      	it	ne
 801981c:	81a3      	strhne	r3, [r4, #12]
 801981e:	bd10      	pop	{r4, pc}

08019820 <__sclose>:
 8019820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019824:	f7f9 bb62 	b.w	8012eec <_close_r>

08019828 <_realloc_r>:
 8019828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801982a:	4607      	mov	r7, r0
 801982c:	4614      	mov	r4, r2
 801982e:	460e      	mov	r6, r1
 8019830:	b921      	cbnz	r1, 801983c <_realloc_r+0x14>
 8019832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019836:	4611      	mov	r1, r2
 8019838:	f7f7 bd5c 	b.w	80112f4 <_malloc_r>
 801983c:	b922      	cbnz	r2, 8019848 <_realloc_r+0x20>
 801983e:	f7f7 fd0f 	bl	8011260 <_free_r>
 8019842:	4625      	mov	r5, r4
 8019844:	4628      	mov	r0, r5
 8019846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019848:	f000 f93d 	bl	8019ac6 <_malloc_usable_size_r>
 801984c:	42a0      	cmp	r0, r4
 801984e:	d20f      	bcs.n	8019870 <_realloc_r+0x48>
 8019850:	4621      	mov	r1, r4
 8019852:	4638      	mov	r0, r7
 8019854:	f7f7 fd4e 	bl	80112f4 <_malloc_r>
 8019858:	4605      	mov	r5, r0
 801985a:	2800      	cmp	r0, #0
 801985c:	d0f2      	beq.n	8019844 <_realloc_r+0x1c>
 801985e:	4631      	mov	r1, r6
 8019860:	4622      	mov	r2, r4
 8019862:	f7ff fe07 	bl	8019474 <memcpy>
 8019866:	4631      	mov	r1, r6
 8019868:	4638      	mov	r0, r7
 801986a:	f7f7 fcf9 	bl	8011260 <_free_r>
 801986e:	e7e9      	b.n	8019844 <_realloc_r+0x1c>
 8019870:	4635      	mov	r5, r6
 8019872:	e7e7      	b.n	8019844 <_realloc_r+0x1c>

08019874 <__ssputs_r>:
 8019874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019878:	688e      	ldr	r6, [r1, #8]
 801987a:	429e      	cmp	r6, r3
 801987c:	4682      	mov	sl, r0
 801987e:	460c      	mov	r4, r1
 8019880:	4690      	mov	r8, r2
 8019882:	461f      	mov	r7, r3
 8019884:	d838      	bhi.n	80198f8 <__ssputs_r+0x84>
 8019886:	898a      	ldrh	r2, [r1, #12]
 8019888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801988c:	d032      	beq.n	80198f4 <__ssputs_r+0x80>
 801988e:	6825      	ldr	r5, [r4, #0]
 8019890:	6909      	ldr	r1, [r1, #16]
 8019892:	eba5 0901 	sub.w	r9, r5, r1
 8019896:	6965      	ldr	r5, [r4, #20]
 8019898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801989c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80198a0:	3301      	adds	r3, #1
 80198a2:	444b      	add	r3, r9
 80198a4:	106d      	asrs	r5, r5, #1
 80198a6:	429d      	cmp	r5, r3
 80198a8:	bf38      	it	cc
 80198aa:	461d      	movcc	r5, r3
 80198ac:	0553      	lsls	r3, r2, #21
 80198ae:	d531      	bpl.n	8019914 <__ssputs_r+0xa0>
 80198b0:	4629      	mov	r1, r5
 80198b2:	f7f7 fd1f 	bl	80112f4 <_malloc_r>
 80198b6:	4606      	mov	r6, r0
 80198b8:	b950      	cbnz	r0, 80198d0 <__ssputs_r+0x5c>
 80198ba:	230c      	movs	r3, #12
 80198bc:	f8ca 3000 	str.w	r3, [sl]
 80198c0:	89a3      	ldrh	r3, [r4, #12]
 80198c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198c6:	81a3      	strh	r3, [r4, #12]
 80198c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80198cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198d0:	6921      	ldr	r1, [r4, #16]
 80198d2:	464a      	mov	r2, r9
 80198d4:	f7ff fdce 	bl	8019474 <memcpy>
 80198d8:	89a3      	ldrh	r3, [r4, #12]
 80198da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80198de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198e2:	81a3      	strh	r3, [r4, #12]
 80198e4:	6126      	str	r6, [r4, #16]
 80198e6:	6165      	str	r5, [r4, #20]
 80198e8:	444e      	add	r6, r9
 80198ea:	eba5 0509 	sub.w	r5, r5, r9
 80198ee:	6026      	str	r6, [r4, #0]
 80198f0:	60a5      	str	r5, [r4, #8]
 80198f2:	463e      	mov	r6, r7
 80198f4:	42be      	cmp	r6, r7
 80198f6:	d900      	bls.n	80198fa <__ssputs_r+0x86>
 80198f8:	463e      	mov	r6, r7
 80198fa:	6820      	ldr	r0, [r4, #0]
 80198fc:	4632      	mov	r2, r6
 80198fe:	4641      	mov	r1, r8
 8019900:	f7ff fdc6 	bl	8019490 <memmove>
 8019904:	68a3      	ldr	r3, [r4, #8]
 8019906:	1b9b      	subs	r3, r3, r6
 8019908:	60a3      	str	r3, [r4, #8]
 801990a:	6823      	ldr	r3, [r4, #0]
 801990c:	4433      	add	r3, r6
 801990e:	6023      	str	r3, [r4, #0]
 8019910:	2000      	movs	r0, #0
 8019912:	e7db      	b.n	80198cc <__ssputs_r+0x58>
 8019914:	462a      	mov	r2, r5
 8019916:	f7ff ff87 	bl	8019828 <_realloc_r>
 801991a:	4606      	mov	r6, r0
 801991c:	2800      	cmp	r0, #0
 801991e:	d1e1      	bne.n	80198e4 <__ssputs_r+0x70>
 8019920:	6921      	ldr	r1, [r4, #16]
 8019922:	4650      	mov	r0, sl
 8019924:	f7f7 fc9c 	bl	8011260 <_free_r>
 8019928:	e7c7      	b.n	80198ba <__ssputs_r+0x46>

0801992a <_sungetc_r>:
 801992a:	b538      	push	{r3, r4, r5, lr}
 801992c:	1c4b      	adds	r3, r1, #1
 801992e:	4614      	mov	r4, r2
 8019930:	d103      	bne.n	801993a <_sungetc_r+0x10>
 8019932:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019936:	4628      	mov	r0, r5
 8019938:	bd38      	pop	{r3, r4, r5, pc}
 801993a:	8993      	ldrh	r3, [r2, #12]
 801993c:	f023 0320 	bic.w	r3, r3, #32
 8019940:	8193      	strh	r3, [r2, #12]
 8019942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019944:	6852      	ldr	r2, [r2, #4]
 8019946:	b2cd      	uxtb	r5, r1
 8019948:	b18b      	cbz	r3, 801996e <_sungetc_r+0x44>
 801994a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801994c:	4293      	cmp	r3, r2
 801994e:	dd08      	ble.n	8019962 <_sungetc_r+0x38>
 8019950:	6823      	ldr	r3, [r4, #0]
 8019952:	1e5a      	subs	r2, r3, #1
 8019954:	6022      	str	r2, [r4, #0]
 8019956:	f803 5c01 	strb.w	r5, [r3, #-1]
 801995a:	6863      	ldr	r3, [r4, #4]
 801995c:	3301      	adds	r3, #1
 801995e:	6063      	str	r3, [r4, #4]
 8019960:	e7e9      	b.n	8019936 <_sungetc_r+0xc>
 8019962:	4621      	mov	r1, r4
 8019964:	f000 f875 	bl	8019a52 <__submore>
 8019968:	2800      	cmp	r0, #0
 801996a:	d0f1      	beq.n	8019950 <_sungetc_r+0x26>
 801996c:	e7e1      	b.n	8019932 <_sungetc_r+0x8>
 801996e:	6921      	ldr	r1, [r4, #16]
 8019970:	6823      	ldr	r3, [r4, #0]
 8019972:	b151      	cbz	r1, 801998a <_sungetc_r+0x60>
 8019974:	4299      	cmp	r1, r3
 8019976:	d208      	bcs.n	801998a <_sungetc_r+0x60>
 8019978:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801997c:	42a9      	cmp	r1, r5
 801997e:	d104      	bne.n	801998a <_sungetc_r+0x60>
 8019980:	3b01      	subs	r3, #1
 8019982:	3201      	adds	r2, #1
 8019984:	6023      	str	r3, [r4, #0]
 8019986:	6062      	str	r2, [r4, #4]
 8019988:	e7d5      	b.n	8019936 <_sungetc_r+0xc>
 801998a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801998e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019992:	6363      	str	r3, [r4, #52]	; 0x34
 8019994:	2303      	movs	r3, #3
 8019996:	63a3      	str	r3, [r4, #56]	; 0x38
 8019998:	4623      	mov	r3, r4
 801999a:	f803 5f46 	strb.w	r5, [r3, #70]!
 801999e:	6023      	str	r3, [r4, #0]
 80199a0:	2301      	movs	r3, #1
 80199a2:	e7dc      	b.n	801995e <_sungetc_r+0x34>

080199a4 <__ssrefill_r>:
 80199a4:	b510      	push	{r4, lr}
 80199a6:	460c      	mov	r4, r1
 80199a8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80199aa:	b169      	cbz	r1, 80199c8 <__ssrefill_r+0x24>
 80199ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199b0:	4299      	cmp	r1, r3
 80199b2:	d001      	beq.n	80199b8 <__ssrefill_r+0x14>
 80199b4:	f7f7 fc54 	bl	8011260 <_free_r>
 80199b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80199ba:	6063      	str	r3, [r4, #4]
 80199bc:	2000      	movs	r0, #0
 80199be:	6360      	str	r0, [r4, #52]	; 0x34
 80199c0:	b113      	cbz	r3, 80199c8 <__ssrefill_r+0x24>
 80199c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80199c4:	6023      	str	r3, [r4, #0]
 80199c6:	bd10      	pop	{r4, pc}
 80199c8:	6923      	ldr	r3, [r4, #16]
 80199ca:	6023      	str	r3, [r4, #0]
 80199cc:	2300      	movs	r3, #0
 80199ce:	6063      	str	r3, [r4, #4]
 80199d0:	89a3      	ldrh	r3, [r4, #12]
 80199d2:	f043 0320 	orr.w	r3, r3, #32
 80199d6:	81a3      	strh	r3, [r4, #12]
 80199d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80199dc:	e7f3      	b.n	80199c6 <__ssrefill_r+0x22>

080199de <__sccl>:
 80199de:	b570      	push	{r4, r5, r6, lr}
 80199e0:	780b      	ldrb	r3, [r1, #0]
 80199e2:	4604      	mov	r4, r0
 80199e4:	2b5e      	cmp	r3, #94	; 0x5e
 80199e6:	bf0b      	itete	eq
 80199e8:	784b      	ldrbeq	r3, [r1, #1]
 80199ea:	1c48      	addne	r0, r1, #1
 80199ec:	1c88      	addeq	r0, r1, #2
 80199ee:	2200      	movne	r2, #0
 80199f0:	bf08      	it	eq
 80199f2:	2201      	moveq	r2, #1
 80199f4:	1e61      	subs	r1, r4, #1
 80199f6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80199fa:	f801 2f01 	strb.w	r2, [r1, #1]!
 80199fe:	42a9      	cmp	r1, r5
 8019a00:	d1fb      	bne.n	80199fa <__sccl+0x1c>
 8019a02:	b90b      	cbnz	r3, 8019a08 <__sccl+0x2a>
 8019a04:	3801      	subs	r0, #1
 8019a06:	bd70      	pop	{r4, r5, r6, pc}
 8019a08:	f082 0201 	eor.w	r2, r2, #1
 8019a0c:	54e2      	strb	r2, [r4, r3]
 8019a0e:	4605      	mov	r5, r0
 8019a10:	4628      	mov	r0, r5
 8019a12:	f810 1b01 	ldrb.w	r1, [r0], #1
 8019a16:	292d      	cmp	r1, #45	; 0x2d
 8019a18:	d006      	beq.n	8019a28 <__sccl+0x4a>
 8019a1a:	295d      	cmp	r1, #93	; 0x5d
 8019a1c:	d0f3      	beq.n	8019a06 <__sccl+0x28>
 8019a1e:	b909      	cbnz	r1, 8019a24 <__sccl+0x46>
 8019a20:	4628      	mov	r0, r5
 8019a22:	e7f0      	b.n	8019a06 <__sccl+0x28>
 8019a24:	460b      	mov	r3, r1
 8019a26:	e7f1      	b.n	8019a0c <__sccl+0x2e>
 8019a28:	786e      	ldrb	r6, [r5, #1]
 8019a2a:	2e5d      	cmp	r6, #93	; 0x5d
 8019a2c:	d0fa      	beq.n	8019a24 <__sccl+0x46>
 8019a2e:	42b3      	cmp	r3, r6
 8019a30:	dcf8      	bgt.n	8019a24 <__sccl+0x46>
 8019a32:	3502      	adds	r5, #2
 8019a34:	4619      	mov	r1, r3
 8019a36:	3101      	adds	r1, #1
 8019a38:	428e      	cmp	r6, r1
 8019a3a:	5462      	strb	r2, [r4, r1]
 8019a3c:	dcfb      	bgt.n	8019a36 <__sccl+0x58>
 8019a3e:	1af1      	subs	r1, r6, r3
 8019a40:	3901      	subs	r1, #1
 8019a42:	1c58      	adds	r0, r3, #1
 8019a44:	42b3      	cmp	r3, r6
 8019a46:	bfa8      	it	ge
 8019a48:	2100      	movge	r1, #0
 8019a4a:	1843      	adds	r3, r0, r1
 8019a4c:	e7e0      	b.n	8019a10 <__sccl+0x32>

08019a4e <_strtol_r>:
 8019a4e:	f7f9 be79 	b.w	8013744 <_strtol_l.constprop.0>

08019a52 <__submore>:
 8019a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a56:	460c      	mov	r4, r1
 8019a58:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a5e:	4299      	cmp	r1, r3
 8019a60:	d11d      	bne.n	8019a9e <__submore+0x4c>
 8019a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019a66:	f7f7 fc45 	bl	80112f4 <_malloc_r>
 8019a6a:	b918      	cbnz	r0, 8019a74 <__submore+0x22>
 8019a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a78:	63a3      	str	r3, [r4, #56]	; 0x38
 8019a7a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8019a80:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019a84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019a88:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019a8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019a90:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019a94:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019a98:	6020      	str	r0, [r4, #0]
 8019a9a:	2000      	movs	r0, #0
 8019a9c:	e7e8      	b.n	8019a70 <__submore+0x1e>
 8019a9e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019aa0:	0077      	lsls	r7, r6, #1
 8019aa2:	463a      	mov	r2, r7
 8019aa4:	f7ff fec0 	bl	8019828 <_realloc_r>
 8019aa8:	4605      	mov	r5, r0
 8019aaa:	2800      	cmp	r0, #0
 8019aac:	d0de      	beq.n	8019a6c <__submore+0x1a>
 8019aae:	eb00 0806 	add.w	r8, r0, r6
 8019ab2:	4601      	mov	r1, r0
 8019ab4:	4632      	mov	r2, r6
 8019ab6:	4640      	mov	r0, r8
 8019ab8:	f7ff fcdc 	bl	8019474 <memcpy>
 8019abc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019ac0:	f8c4 8000 	str.w	r8, [r4]
 8019ac4:	e7e9      	b.n	8019a9a <__submore+0x48>

08019ac6 <_malloc_usable_size_r>:
 8019ac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019aca:	1f18      	subs	r0, r3, #4
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	bfbc      	itt	lt
 8019ad0:	580b      	ldrlt	r3, [r1, r0]
 8019ad2:	18c0      	addlt	r0, r0, r3
 8019ad4:	4770      	bx	lr
