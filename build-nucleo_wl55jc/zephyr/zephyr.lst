
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 90 00 20 d1 43 00 08 93 15 01 08 a5 43 00 08     ... .C.......C..
 8000010:	a5 43 00 08 a5 43 00 08 a5 43 00 08 00 00 00 00     .C...C...C......
	...
 800002c:	69 3d 00 08 a5 43 00 08 00 00 00 00 15 3d 00 08     i=...C.......=..
 800003c:	21 c5 00 08                                         !...

08000040 <_irq_vector_table>:
 8000040:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000050:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000060:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000070:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000080:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000090:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 80000a0:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 80000b0:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 80000c0:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 80000d0:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 80000e0:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 80000f0:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000100:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000110:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000120:	19 3e 00 08 19 3e 00 08 19 3e 00 08 19 3e 00 08     .>...>...>...>..
 8000130:	19 3e 00 08 19 3e 00 08                             .>...>..

Disassembly of section text:

08000140 <memchr>:
 8000140:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000144:	2a10      	cmp	r2, #16
 8000146:	db2b      	blt.n	80001a0 <memchr+0x60>
 8000148:	f010 0f07 	tst.w	r0, #7
 800014c:	d008      	beq.n	8000160 <memchr+0x20>
 800014e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000152:	3a01      	subs	r2, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d02d      	beq.n	80001b4 <memchr+0x74>
 8000158:	f010 0f07 	tst.w	r0, #7
 800015c:	b342      	cbz	r2, 80001b0 <memchr+0x70>
 800015e:	d1f6      	bne.n	800014e <memchr+0xe>
 8000160:	b4f0      	push	{r4, r5, r6, r7}
 8000162:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000166:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800016a:	f022 0407 	bic.w	r4, r2, #7
 800016e:	f07f 0700 	mvns.w	r7, #0
 8000172:	2300      	movs	r3, #0
 8000174:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000178:	3c08      	subs	r4, #8
 800017a:	ea85 0501 	eor.w	r5, r5, r1
 800017e:	ea86 0601 	eor.w	r6, r6, r1
 8000182:	fa85 f547 	uadd8	r5, r5, r7
 8000186:	faa3 f587 	sel	r5, r3, r7
 800018a:	fa86 f647 	uadd8	r6, r6, r7
 800018e:	faa5 f687 	sel	r6, r5, r7
 8000192:	b98e      	cbnz	r6, 80001b8 <memchr+0x78>
 8000194:	d1ee      	bne.n	8000174 <memchr+0x34>
 8000196:	bcf0      	pop	{r4, r5, r6, r7}
 8000198:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800019c:	f002 0207 	and.w	r2, r2, #7
 80001a0:	b132      	cbz	r2, 80001b0 <memchr+0x70>
 80001a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a6:	3a01      	subs	r2, #1
 80001a8:	ea83 0301 	eor.w	r3, r3, r1
 80001ac:	b113      	cbz	r3, 80001b4 <memchr+0x74>
 80001ae:	d1f8      	bne.n	80001a2 <memchr+0x62>
 80001b0:	2000      	movs	r0, #0
 80001b2:	4770      	bx	lr
 80001b4:	3801      	subs	r0, #1
 80001b6:	4770      	bx	lr
 80001b8:	2d00      	cmp	r5, #0
 80001ba:	bf06      	itte	eq
 80001bc:	4635      	moveq	r5, r6
 80001be:	3803      	subeq	r0, #3
 80001c0:	3807      	subne	r0, #7
 80001c2:	f015 0f01 	tst.w	r5, #1
 80001c6:	d107      	bne.n	80001d8 <memchr+0x98>
 80001c8:	3001      	adds	r0, #1
 80001ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80001ce:	bf02      	ittt	eq
 80001d0:	3001      	addeq	r0, #1
 80001d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80001d6:	3001      	addeq	r0, #1
 80001d8:	bcf0      	pop	{r4, r5, r6, r7}
 80001da:	3801      	subs	r0, #1
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_d2iz>:
 8000558:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800055c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000560:	d215      	bcs.n	800058e <__aeabi_d2iz+0x36>
 8000562:	d511      	bpl.n	8000588 <__aeabi_d2iz+0x30>
 8000564:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000568:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800056c:	d912      	bls.n	8000594 <__aeabi_d2iz+0x3c>
 800056e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000576:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800057a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057e:	fa23 f002 	lsr.w	r0, r3, r2
 8000582:	bf18      	it	ne
 8000584:	4240      	negne	r0, r0
 8000586:	4770      	bx	lr
 8000588:	f04f 0000 	mov.w	r0, #0
 800058c:	4770      	bx	lr
 800058e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000592:	d105      	bne.n	80005a0 <__aeabi_d2iz+0x48>
 8000594:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800059e:	4770      	bx	lr
 80005a0:	f04f 0000 	mov.w	r0, #0
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__aeabi_frsub>:
 80005a8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005ac:	e002      	b.n	80005b4 <__addsf3>
 80005ae:	bf00      	nop

080005b0 <__aeabi_fsub>:
 80005b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005b4 <__addsf3>:
 80005b4:	0042      	lsls	r2, r0, #1
 80005b6:	bf1f      	itttt	ne
 80005b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005bc:	ea92 0f03 	teqne	r2, r3
 80005c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005c8:	d06a      	beq.n	80006a0 <__addsf3+0xec>
 80005ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005d2:	bfc1      	itttt	gt
 80005d4:	18d2      	addgt	r2, r2, r3
 80005d6:	4041      	eorgt	r1, r0
 80005d8:	4048      	eorgt	r0, r1
 80005da:	4041      	eorgt	r1, r0
 80005dc:	bfb8      	it	lt
 80005de:	425b      	neglt	r3, r3
 80005e0:	2b19      	cmp	r3, #25
 80005e2:	bf88      	it	hi
 80005e4:	4770      	bxhi	lr
 80005e6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005f2:	bf18      	it	ne
 80005f4:	4240      	negne	r0, r0
 80005f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000602:	bf18      	it	ne
 8000604:	4249      	negne	r1, r1
 8000606:	ea92 0f03 	teq	r2, r3
 800060a:	d03f      	beq.n	800068c <__addsf3+0xd8>
 800060c:	f1a2 0201 	sub.w	r2, r2, #1
 8000610:	fa41 fc03 	asr.w	ip, r1, r3
 8000614:	eb10 000c 	adds.w	r0, r0, ip
 8000618:	f1c3 0320 	rsb	r3, r3, #32
 800061c:	fa01 f103 	lsl.w	r1, r1, r3
 8000620:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000624:	d502      	bpl.n	800062c <__addsf3+0x78>
 8000626:	4249      	negs	r1, r1
 8000628:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800062c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000630:	d313      	bcc.n	800065a <__addsf3+0xa6>
 8000632:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000636:	d306      	bcc.n	8000646 <__addsf3+0x92>
 8000638:	0840      	lsrs	r0, r0, #1
 800063a:	ea4f 0131 	mov.w	r1, r1, rrx
 800063e:	f102 0201 	add.w	r2, r2, #1
 8000642:	2afe      	cmp	r2, #254	; 0xfe
 8000644:	d251      	bcs.n	80006ea <__addsf3+0x136>
 8000646:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800064a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800064e:	bf08      	it	eq
 8000650:	f020 0001 	biceq.w	r0, r0, #1
 8000654:	ea40 0003 	orr.w	r0, r0, r3
 8000658:	4770      	bx	lr
 800065a:	0049      	lsls	r1, r1, #1
 800065c:	eb40 0000 	adc.w	r0, r0, r0
 8000660:	3a01      	subs	r2, #1
 8000662:	bf28      	it	cs
 8000664:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000668:	d2ed      	bcs.n	8000646 <__addsf3+0x92>
 800066a:	fab0 fc80 	clz	ip, r0
 800066e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000672:	ebb2 020c 	subs.w	r2, r2, ip
 8000676:	fa00 f00c 	lsl.w	r0, r0, ip
 800067a:	bfaa      	itet	ge
 800067c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000680:	4252      	neglt	r2, r2
 8000682:	4318      	orrge	r0, r3
 8000684:	bfbc      	itt	lt
 8000686:	40d0      	lsrlt	r0, r2
 8000688:	4318      	orrlt	r0, r3
 800068a:	4770      	bx	lr
 800068c:	f092 0f00 	teq	r2, #0
 8000690:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000694:	bf06      	itte	eq
 8000696:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800069a:	3201      	addeq	r2, #1
 800069c:	3b01      	subne	r3, #1
 800069e:	e7b5      	b.n	800060c <__addsf3+0x58>
 80006a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006a8:	bf18      	it	ne
 80006aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ae:	d021      	beq.n	80006f4 <__addsf3+0x140>
 80006b0:	ea92 0f03 	teq	r2, r3
 80006b4:	d004      	beq.n	80006c0 <__addsf3+0x10c>
 80006b6:	f092 0f00 	teq	r2, #0
 80006ba:	bf08      	it	eq
 80006bc:	4608      	moveq	r0, r1
 80006be:	4770      	bx	lr
 80006c0:	ea90 0f01 	teq	r0, r1
 80006c4:	bf1c      	itt	ne
 80006c6:	2000      	movne	r0, #0
 80006c8:	4770      	bxne	lr
 80006ca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006ce:	d104      	bne.n	80006da <__addsf3+0x126>
 80006d0:	0040      	lsls	r0, r0, #1
 80006d2:	bf28      	it	cs
 80006d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006d8:	4770      	bx	lr
 80006da:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006de:	bf3c      	itt	cc
 80006e0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006e4:	4770      	bxcc	lr
 80006e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006ea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006f2:	4770      	bx	lr
 80006f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006f8:	bf16      	itet	ne
 80006fa:	4608      	movne	r0, r1
 80006fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000700:	4601      	movne	r1, r0
 8000702:	0242      	lsls	r2, r0, #9
 8000704:	bf06      	itte	eq
 8000706:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800070a:	ea90 0f01 	teqeq	r0, r1
 800070e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000712:	4770      	bx	lr

08000714 <__aeabi_ui2f>:
 8000714:	f04f 0300 	mov.w	r3, #0
 8000718:	e004      	b.n	8000724 <__aeabi_i2f+0x8>
 800071a:	bf00      	nop

0800071c <__aeabi_i2f>:
 800071c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000720:	bf48      	it	mi
 8000722:	4240      	negmi	r0, r0
 8000724:	ea5f 0c00 	movs.w	ip, r0
 8000728:	bf08      	it	eq
 800072a:	4770      	bxeq	lr
 800072c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000730:	4601      	mov	r1, r0
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	e01c      	b.n	8000772 <__aeabi_l2f+0x2a>

08000738 <__aeabi_ul2f>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	e00a      	b.n	800075c <__aeabi_l2f+0x14>
 8000746:	bf00      	nop

08000748 <__aeabi_l2f>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000754:	d502      	bpl.n	800075c <__aeabi_l2f+0x14>
 8000756:	4240      	negs	r0, r0
 8000758:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075c:	ea5f 0c01 	movs.w	ip, r1
 8000760:	bf02      	ittt	eq
 8000762:	4684      	moveq	ip, r0
 8000764:	4601      	moveq	r1, r0
 8000766:	2000      	moveq	r0, #0
 8000768:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800076c:	bf08      	it	eq
 800076e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000772:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000776:	fabc f28c 	clz	r2, ip
 800077a:	3a08      	subs	r2, #8
 800077c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000780:	db10      	blt.n	80007a4 <__aeabi_l2f+0x5c>
 8000782:	fa01 fc02 	lsl.w	ip, r1, r2
 8000786:	4463      	add	r3, ip
 8000788:	fa00 fc02 	lsl.w	ip, r0, r2
 800078c:	f1c2 0220 	rsb	r2, r2, #32
 8000790:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000794:	fa20 f202 	lsr.w	r2, r0, r2
 8000798:	eb43 0002 	adc.w	r0, r3, r2
 800079c:	bf08      	it	eq
 800079e:	f020 0001 	biceq.w	r0, r0, #1
 80007a2:	4770      	bx	lr
 80007a4:	f102 0220 	add.w	r2, r2, #32
 80007a8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ac:	f1c2 0220 	rsb	r2, r2, #32
 80007b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007b4:	fa21 f202 	lsr.w	r2, r1, r2
 80007b8:	eb43 0002 	adc.w	r0, r3, r2
 80007bc:	bf08      	it	eq
 80007be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007c2:	4770      	bx	lr

080007c4 <__aeabi_fmul>:
 80007c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007cc:	bf1e      	ittt	ne
 80007ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007d2:	ea92 0f0c 	teqne	r2, ip
 80007d6:	ea93 0f0c 	teqne	r3, ip
 80007da:	d06f      	beq.n	80008bc <__aeabi_fmul+0xf8>
 80007dc:	441a      	add	r2, r3
 80007de:	ea80 0c01 	eor.w	ip, r0, r1
 80007e2:	0240      	lsls	r0, r0, #9
 80007e4:	bf18      	it	ne
 80007e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007ea:	d01e      	beq.n	800082a <__aeabi_fmul+0x66>
 80007ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007f8:	fba0 3101 	umull	r3, r1, r0, r1
 80007fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000800:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000804:	bf3e      	ittt	cc
 8000806:	0049      	lslcc	r1, r1, #1
 8000808:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800080c:	005b      	lslcc	r3, r3, #1
 800080e:	ea40 0001 	orr.w	r0, r0, r1
 8000812:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000816:	2afd      	cmp	r2, #253	; 0xfd
 8000818:	d81d      	bhi.n	8000856 <__aeabi_fmul+0x92>
 800081a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800081e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000822:	bf08      	it	eq
 8000824:	f020 0001 	biceq.w	r0, r0, #1
 8000828:	4770      	bx	lr
 800082a:	f090 0f00 	teq	r0, #0
 800082e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000832:	bf08      	it	eq
 8000834:	0249      	lsleq	r1, r1, #9
 8000836:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800083a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800083e:	3a7f      	subs	r2, #127	; 0x7f
 8000840:	bfc2      	ittt	gt
 8000842:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000846:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800084a:	4770      	bxgt	lr
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	3a01      	subs	r2, #1
 8000856:	dc5d      	bgt.n	8000914 <__aeabi_fmul+0x150>
 8000858:	f112 0f19 	cmn.w	r2, #25
 800085c:	bfdc      	itt	le
 800085e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000862:	4770      	bxle	lr
 8000864:	f1c2 0200 	rsb	r2, r2, #0
 8000868:	0041      	lsls	r1, r0, #1
 800086a:	fa21 f102 	lsr.w	r1, r1, r2
 800086e:	f1c2 0220 	rsb	r2, r2, #32
 8000872:	fa00 fc02 	lsl.w	ip, r0, r2
 8000876:	ea5f 0031 	movs.w	r0, r1, rrx
 800087a:	f140 0000 	adc.w	r0, r0, #0
 800087e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000882:	bf08      	it	eq
 8000884:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000888:	4770      	bx	lr
 800088a:	f092 0f00 	teq	r2, #0
 800088e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000892:	bf02      	ittt	eq
 8000894:	0040      	lsleq	r0, r0, #1
 8000896:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800089a:	3a01      	subeq	r2, #1
 800089c:	d0f9      	beq.n	8000892 <__aeabi_fmul+0xce>
 800089e:	ea40 000c 	orr.w	r0, r0, ip
 80008a2:	f093 0f00 	teq	r3, #0
 80008a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008aa:	bf02      	ittt	eq
 80008ac:	0049      	lsleq	r1, r1, #1
 80008ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008b2:	3b01      	subeq	r3, #1
 80008b4:	d0f9      	beq.n	80008aa <__aeabi_fmul+0xe6>
 80008b6:	ea41 010c 	orr.w	r1, r1, ip
 80008ba:	e78f      	b.n	80007dc <__aeabi_fmul+0x18>
 80008bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008c0:	ea92 0f0c 	teq	r2, ip
 80008c4:	bf18      	it	ne
 80008c6:	ea93 0f0c 	teqne	r3, ip
 80008ca:	d00a      	beq.n	80008e2 <__aeabi_fmul+0x11e>
 80008cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008d0:	bf18      	it	ne
 80008d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008d6:	d1d8      	bne.n	800088a <__aeabi_fmul+0xc6>
 80008d8:	ea80 0001 	eor.w	r0, r0, r1
 80008dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	bf17      	itett	ne
 80008e8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008ec:	4608      	moveq	r0, r1
 80008ee:	f091 0f00 	teqne	r1, #0
 80008f2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008f6:	d014      	beq.n	8000922 <__aeabi_fmul+0x15e>
 80008f8:	ea92 0f0c 	teq	r2, ip
 80008fc:	d101      	bne.n	8000902 <__aeabi_fmul+0x13e>
 80008fe:	0242      	lsls	r2, r0, #9
 8000900:	d10f      	bne.n	8000922 <__aeabi_fmul+0x15e>
 8000902:	ea93 0f0c 	teq	r3, ip
 8000906:	d103      	bne.n	8000910 <__aeabi_fmul+0x14c>
 8000908:	024b      	lsls	r3, r1, #9
 800090a:	bf18      	it	ne
 800090c:	4608      	movne	r0, r1
 800090e:	d108      	bne.n	8000922 <__aeabi_fmul+0x15e>
 8000910:	ea80 0001 	eor.w	r0, r0, r1
 8000914:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000918:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	4770      	bx	lr
 8000922:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000926:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800092a:	4770      	bx	lr

0800092c <__aeabi_fdiv>:
 800092c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000930:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000934:	bf1e      	ittt	ne
 8000936:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800093a:	ea92 0f0c 	teqne	r2, ip
 800093e:	ea93 0f0c 	teqne	r3, ip
 8000942:	d069      	beq.n	8000a18 <__aeabi_fdiv+0xec>
 8000944:	eba2 0203 	sub.w	r2, r2, r3
 8000948:	ea80 0c01 	eor.w	ip, r0, r1
 800094c:	0249      	lsls	r1, r1, #9
 800094e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000952:	d037      	beq.n	80009c4 <__aeabi_fdiv+0x98>
 8000954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000958:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800095c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000960:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000964:	428b      	cmp	r3, r1
 8000966:	bf38      	it	cc
 8000968:	005b      	lslcc	r3, r3, #1
 800096a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800096e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000972:	428b      	cmp	r3, r1
 8000974:	bf24      	itt	cs
 8000976:	1a5b      	subcs	r3, r3, r1
 8000978:	ea40 000c 	orrcs.w	r0, r0, ip
 800097c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000980:	bf24      	itt	cs
 8000982:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000986:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800098a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800098e:	bf24      	itt	cs
 8000990:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000994:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000998:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800099c:	bf24      	itt	cs
 800099e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009a2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009ae:	d1e0      	bne.n	8000972 <__aeabi_fdiv+0x46>
 80009b0:	2afd      	cmp	r2, #253	; 0xfd
 80009b2:	f63f af50 	bhi.w	8000856 <__aeabi_fmul+0x92>
 80009b6:	428b      	cmp	r3, r1
 80009b8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009bc:	bf08      	it	eq
 80009be:	f020 0001 	biceq.w	r0, r0, #1
 80009c2:	4770      	bx	lr
 80009c4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009c8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009cc:	327f      	adds	r2, #127	; 0x7f
 80009ce:	bfc2      	ittt	gt
 80009d0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009d4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009d8:	4770      	bxgt	lr
 80009da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	3a01      	subs	r2, #1
 80009e4:	e737      	b.n	8000856 <__aeabi_fmul+0x92>
 80009e6:	f092 0f00 	teq	r2, #0
 80009ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ee:	bf02      	ittt	eq
 80009f0:	0040      	lsleq	r0, r0, #1
 80009f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009f6:	3a01      	subeq	r2, #1
 80009f8:	d0f9      	beq.n	80009ee <__aeabi_fdiv+0xc2>
 80009fa:	ea40 000c 	orr.w	r0, r0, ip
 80009fe:	f093 0f00 	teq	r3, #0
 8000a02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a06:	bf02      	ittt	eq
 8000a08:	0049      	lsleq	r1, r1, #1
 8000a0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a0e:	3b01      	subeq	r3, #1
 8000a10:	d0f9      	beq.n	8000a06 <__aeabi_fdiv+0xda>
 8000a12:	ea41 010c 	orr.w	r1, r1, ip
 8000a16:	e795      	b.n	8000944 <__aeabi_fdiv+0x18>
 8000a18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a1c:	ea92 0f0c 	teq	r2, ip
 8000a20:	d108      	bne.n	8000a34 <__aeabi_fdiv+0x108>
 8000a22:	0242      	lsls	r2, r0, #9
 8000a24:	f47f af7d 	bne.w	8000922 <__aeabi_fmul+0x15e>
 8000a28:	ea93 0f0c 	teq	r3, ip
 8000a2c:	f47f af70 	bne.w	8000910 <__aeabi_fmul+0x14c>
 8000a30:	4608      	mov	r0, r1
 8000a32:	e776      	b.n	8000922 <__aeabi_fmul+0x15e>
 8000a34:	ea93 0f0c 	teq	r3, ip
 8000a38:	d104      	bne.n	8000a44 <__aeabi_fdiv+0x118>
 8000a3a:	024b      	lsls	r3, r1, #9
 8000a3c:	f43f af4c 	beq.w	80008d8 <__aeabi_fmul+0x114>
 8000a40:	4608      	mov	r0, r1
 8000a42:	e76e      	b.n	8000922 <__aeabi_fmul+0x15e>
 8000a44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a48:	bf18      	it	ne
 8000a4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a4e:	d1ca      	bne.n	80009e6 <__aeabi_fdiv+0xba>
 8000a50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a54:	f47f af5c 	bne.w	8000910 <__aeabi_fmul+0x14c>
 8000a58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a5c:	f47f af3c 	bne.w	80008d8 <__aeabi_fmul+0x114>
 8000a60:	e75f      	b.n	8000922 <__aeabi_fmul+0x15e>
 8000a62:	bf00      	nop

08000a64 <__aeabi_ldivmod>:
 8000a64:	b97b      	cbnz	r3, 8000a86 <__aeabi_ldivmod+0x22>
 8000a66:	b972      	cbnz	r2, 8000a86 <__aeabi_ldivmod+0x22>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bfbe      	ittt	lt
 8000a6c:	2000      	movlt	r0, #0
 8000a6e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a72:	e006      	blt.n	8000a82 <__aeabi_ldivmod+0x1e>
 8000a74:	bf08      	it	eq
 8000a76:	2800      	cmpeq	r0, #0
 8000a78:	bf1c      	itt	ne
 8000a7a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a7e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a82:	f000 b9bf 	b.w	8000e04 <__aeabi_idiv0>
 8000a86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8e:	2900      	cmp	r1, #0
 8000a90:	db09      	blt.n	8000aa6 <__aeabi_ldivmod+0x42>
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db1a      	blt.n	8000acc <__aeabi_ldivmod+0x68>
 8000a96:	f000 f84d 	bl	8000b34 <__udivmoddi4>
 8000a9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa2:	b004      	add	sp, #16
 8000aa4:	4770      	bx	lr
 8000aa6:	4240      	negs	r0, r0
 8000aa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db1b      	blt.n	8000ae8 <__aeabi_ldivmod+0x84>
 8000ab0:	f000 f840 	bl	8000b34 <__udivmoddi4>
 8000ab4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000abc:	b004      	add	sp, #16
 8000abe:	4240      	negs	r0, r0
 8000ac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac4:	4252      	negs	r2, r2
 8000ac6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aca:	4770      	bx	lr
 8000acc:	4252      	negs	r2, r2
 8000ace:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ad2:	f000 f82f 	bl	8000b34 <__udivmoddi4>
 8000ad6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ade:	b004      	add	sp, #16
 8000ae0:	4240      	negs	r0, r0
 8000ae2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae6:	4770      	bx	lr
 8000ae8:	4252      	negs	r2, r2
 8000aea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aee:	f000 f821 	bl	8000b34 <__udivmoddi4>
 8000af2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000afa:	b004      	add	sp, #16
 8000afc:	4252      	negs	r2, r2
 8000afe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	4688      	mov	r8, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14d      	bne.n	8000be0 <__udivmoddi4+0xac>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4694      	mov	ip, r2
 8000b48:	d968      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b152      	cbz	r2, 8000b66 <__udivmoddi4+0x32>
 8000b50:	fa01 f302 	lsl.w	r3, r1, r2
 8000b54:	f1c2 0120 	rsb	r1, r2, #32
 8000b58:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b60:	ea41 0803 	orr.w	r8, r1, r3
 8000b64:	4094      	lsls	r4, r2
 8000b66:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000b6a:	0c21      	lsrs	r1, r4, #16
 8000b6c:	fbb8 fef5 	udiv	lr, r8, r5
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	fb05 831e 	mls	r3, r5, lr, r8
 8000b78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7c:	fb0e f107 	mul.w	r1, lr, r7
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x68>
 8000b84:	eb1c 0303 	adds.w	r3, ip, r3
 8000b88:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000b8c:	f080 811e 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	f240 811b 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b96:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0f5 	udiv	r0, r3, r5
 8000ba4:	fb05 3310 	mls	r3, r5, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 f707 	mul.w	r7, r0, r7
 8000bb0:	42a7      	cmp	r7, r4
 8000bb2:	d90a      	bls.n	8000bca <__udivmoddi4+0x96>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bbc:	f080 8108 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc0:	42a7      	cmp	r7, r4
 8000bc2:	f240 8105 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa8>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	f000 80ee 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000bea:	2100      	movs	r1, #0
 8000bec:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	4698      	mov	r8, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d0e2      	beq.n	8000bdc <__udivmoddi4+0xa8>
 8000c16:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1a:	e7df      	b.n	8000bdc <__udivmoddi4+0xa8>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8091 	bne.w	8000d4c <__udivmoddi4+0x218>
 8000c2a:	eba1 050c 	sub.w	r5, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb5 f3f7 	udiv	r3, r5, r7
 8000c3c:	fb07 5013 	mls	r0, r7, r3, r5
 8000c40:	0c25      	lsrs	r5, r4, #16
 8000c42:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	42a8      	cmp	r0, r5
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0505 	adds.w	r5, ip, r5
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	42a8      	cmp	r0, r5
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a2d      	subs	r5, r5, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb5 f0f7 	udiv	r0, r5, r7
 8000c68:	fb07 5510 	mls	r5, r7, r0, r5
 8000c6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4628      	mov	r0, r5
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79e      	b.n	8000bd2 <__udivmoddi4+0x9e>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa05 f301 	lsl.w	r3, r5, r1
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f301 	lsl.w	r3, r0, r1
 8000cb6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 5518 	mls	r5, r9, r8, r5
 8000cc4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	42a8      	cmp	r0, r5
 8000cce:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0505 	adds.w	r5, ip, r5
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	42a8      	cmp	r0, r5
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4465      	add	r5, ip
 8000cec:	1a2d      	subs	r5, r5, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb5 f0f9 	udiv	r0, r5, r9
 8000cf4:	fb09 5510 	mls	r5, r9, r0, r5
 8000cf8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45ae      	cmp	lr, r5
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0505 	adds.w	r5, ip, r5
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	45ae      	cmp	lr, r5
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4465      	add	r5, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba5 050e 	sub.w	r5, r5, lr
 8000d22:	42a5      	cmp	r5, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15e      	cbz	r6, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb65 050e 	sbc.w	r5, r5, lr
 8000d36:	fa05 f707 	lsl.w	r7, r5, r7
 8000d3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d3e:	40cd      	lsrs	r5, r1
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c6 7500 	strd	r7, r5, [r6]
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f103 	lsr.w	r1, r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa25 f303 	lsr.w	r3, r5, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	430d      	orrs	r5, r1
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f1f7 	udiv	r1, r3, r7
 8000d6c:	fb07 3011 	mls	r0, r7, r1, r3
 8000d70:	0c2b      	lsrs	r3, r5, #16
 8000d72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000d76:	fb01 f00e 	mul.w	r0, r1, lr
 8000d7a:	4298      	cmp	r0, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3902      	subs	r1, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1a1b      	subs	r3, r3, r0
 8000d96:	b2ad      	uxth	r5, r5
 8000d98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d9c:	fb07 3310 	mls	r3, r7, r0, r3
 8000da0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000da4:	fb00 f30e 	mul.w	r3, r0, lr
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0505 	adds.w	r5, ip, r5
 8000db0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	42ab      	cmp	r3, r5
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4465      	add	r5, ip
 8000dbe:	1aed      	subs	r5, r5, r3
 8000dc0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e707      	b.n	8000bdc <__udivmoddi4+0xa8>
 8000dcc:	4686      	mov	lr, r0
 8000dce:	e6e5      	b.n	8000b9c <__udivmoddi4+0x68>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fa      	b.n	8000bca <__udivmoddi4+0x96>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4641      	mov	r1, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4465      	add	r5, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <__gedf2>:
 8000e08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e0c:	e006      	b.n	8000e1c <__cmpdf2+0x4>
 8000e0e:	bf00      	nop

08000e10 <__ledf2>:
 8000e10:	f04f 0c01 	mov.w	ip, #1
 8000e14:	e002      	b.n	8000e1c <__cmpdf2+0x4>
 8000e16:	bf00      	nop

08000e18 <__cmpdf2>:
 8000e18:	f04f 0c01 	mov.w	ip, #1
 8000e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e2c:	bf18      	it	ne
 8000e2e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000e32:	d01b      	beq.n	8000e6c <__cmpdf2+0x54>
 8000e34:	b001      	add	sp, #4
 8000e36:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e3a:	bf0c      	ite	eq
 8000e3c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e40:	ea91 0f03 	teqne	r1, r3
 8000e44:	bf02      	ittt	eq
 8000e46:	ea90 0f02 	teqeq	r0, r2
 8000e4a:	2000      	moveq	r0, #0
 8000e4c:	4770      	bxeq	lr
 8000e4e:	f110 0f00 	cmn.w	r0, #0
 8000e52:	ea91 0f03 	teq	r1, r3
 8000e56:	bf58      	it	pl
 8000e58:	4299      	cmppl	r1, r3
 8000e5a:	bf08      	it	eq
 8000e5c:	4290      	cmpeq	r0, r2
 8000e5e:	bf2c      	ite	cs
 8000e60:	17d8      	asrcs	r0, r3, #31
 8000e62:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e66:	f040 0001 	orr.w	r0, r0, #1
 8000e6a:	4770      	bx	lr
 8000e6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e74:	d102      	bne.n	8000e7c <__cmpdf2+0x64>
 8000e76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e7a:	d107      	bne.n	8000e8c <__cmpdf2+0x74>
 8000e7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e84:	d1d6      	bne.n	8000e34 <__cmpdf2+0x1c>
 8000e86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e8a:	d0d3      	beq.n	8000e34 <__cmpdf2+0x1c>
 8000e8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <__aeabi_cdrcmple>:
 8000e94:	4684      	mov	ip, r0
 8000e96:	4610      	mov	r0, r2
 8000e98:	4662      	mov	r2, ip
 8000e9a:	468c      	mov	ip, r1
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4663      	mov	r3, ip
 8000ea0:	e000      	b.n	8000ea4 <__aeabi_cdcmpeq>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_cdcmpeq>:
 8000ea4:	b501      	push	{r0, lr}
 8000ea6:	f7ff ffb7 	bl	8000e18 <__cmpdf2>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	bf48      	it	mi
 8000eae:	f110 0f00 	cmnmi.w	r0, #0
 8000eb2:	bd01      	pop	{r0, pc}

08000eb4 <__aeabi_dcmpeq>:
 8000eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb8:	f7ff fff4 	bl	8000ea4 <__aeabi_cdcmpeq>
 8000ebc:	bf0c      	ite	eq
 8000ebe:	2001      	moveq	r0, #1
 8000ec0:	2000      	movne	r0, #0
 8000ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_dcmplt>:
 8000ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ecc:	f7ff ffea 	bl	8000ea4 <__aeabi_cdcmpeq>
 8000ed0:	bf34      	ite	cc
 8000ed2:	2001      	movcc	r0, #1
 8000ed4:	2000      	movcs	r0, #0
 8000ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eda:	bf00      	nop

08000edc <__aeabi_dcmple>:
 8000edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee0:	f7ff ffe0 	bl	8000ea4 <__aeabi_cdcmpeq>
 8000ee4:	bf94      	ite	ls
 8000ee6:	2001      	movls	r0, #1
 8000ee8:	2000      	movhi	r0, #0
 8000eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eee:	bf00      	nop

08000ef0 <__aeabi_dcmpge>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff ffce 	bl	8000e94 <__aeabi_cdrcmple>
 8000ef8:	bf94      	ite	ls
 8000efa:	2001      	movls	r0, #1
 8000efc:	2000      	movhi	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_dcmpgt>:
 8000f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f08:	f7ff ffc4 	bl	8000e94 <__aeabi_cdrcmple>
 8000f0c:	bf34      	ite	cc
 8000f0e:	2001      	movcc	r0, #1
 8000f10:	2000      	movcs	r0, #0
 8000f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f16:	bf00      	nop

08000f18 <strcmp>:
 8000f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f20:	2a01      	cmp	r2, #1
 8000f22:	bf28      	it	cs
 8000f24:	429a      	cmpcs	r2, r3
 8000f26:	d0f7      	beq.n	8000f18 <strcmp>
 8000f28:	1ad0      	subs	r0, r2, r3
 8000f2a:	4770      	bx	lr

08000f2c <strlen>:
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d1fb      	bne.n	8000f2e <strlen+0x2>
 8000f36:	1a18      	subs	r0, r3, r0
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	0000      	movs	r0, r0
	...

08000f40 <floor>:
 8000f40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f46:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 8000f4a:	2d13      	cmp	r5, #19
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4684      	mov	ip, r0
 8000f50:	460c      	mov	r4, r1
 8000f52:	4606      	mov	r6, r0
 8000f54:	dc30      	bgt.n	8000fb8 <floor+0x78>
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	db1e      	blt.n	8000f98 <floor+0x58>
 8000f5a:	4f35      	ldr	r7, [pc, #212]	; (8001030 <floor+0xf0>)
 8000f5c:	412f      	asrs	r7, r5
 8000f5e:	ea01 0207 	and.w	r2, r1, r7
 8000f62:	4302      	orrs	r2, r0
 8000f64:	d015      	beq.n	8000f92 <floor+0x52>
 8000f66:	a330      	add	r3, pc, #192	; (adr r3, 8001028 <floor+0xe8>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff f93e 	bl	80001ec <__adddf3>
 8000f70:	2200      	movs	r2, #0
 8000f72:	2300      	movs	r3, #0
 8000f74:	f7ff ffc6 	bl	8000f04 <__aeabi_dcmpgt>
 8000f78:	b148      	cbz	r0, 8000f8e <floor+0x4e>
 8000f7a:	2c00      	cmp	r4, #0
 8000f7c:	da04      	bge.n	8000f88 <floor+0x48>
 8000f7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f82:	fa43 f505 	asr.w	r5, r3, r5
 8000f86:	442c      	add	r4, r5
 8000f88:	ea24 0407 	bic.w	r4, r4, r7
 8000f8c:	2600      	movs	r6, #0
 8000f8e:	4623      	mov	r3, r4
 8000f90:	46b4      	mov	ip, r6
 8000f92:	4660      	mov	r0, ip
 8000f94:	4619      	mov	r1, r3
 8000f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f98:	a323      	add	r3, pc, #140	; (adr r3, 8001028 <floor+0xe8>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff f925 	bl	80001ec <__adddf3>
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f7ff ffad 	bl	8000f04 <__aeabi_dcmpgt>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d0ef      	beq.n	8000f8e <floor+0x4e>
 8000fae:	2c00      	cmp	r4, #0
 8000fb0:	db24      	blt.n	8000ffc <floor+0xbc>
 8000fb2:	2600      	movs	r6, #0
 8000fb4:	4634      	mov	r4, r6
 8000fb6:	e7ea      	b.n	8000f8e <floor+0x4e>
 8000fb8:	2d33      	cmp	r5, #51	; 0x33
 8000fba:	dd08      	ble.n	8000fce <floor+0x8e>
 8000fbc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000fc0:	d1e7      	bne.n	8000f92 <floor+0x52>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f7ff f912 	bl	80001ec <__adddf3>
 8000fc8:	4684      	mov	ip, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	e7e1      	b.n	8000f92 <floor+0x52>
 8000fce:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8000fd2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000fd6:	40d7      	lsrs	r7, r2
 8000fd8:	4207      	tst	r7, r0
 8000fda:	d0da      	beq.n	8000f92 <floor+0x52>
 8000fdc:	a312      	add	r3, pc, #72	; (adr r3, 8001028 <floor+0xe8>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff f903 	bl	80001ec <__adddf3>
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f7ff ff8b 	bl	8000f04 <__aeabi_dcmpgt>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d0cd      	beq.n	8000f8e <floor+0x4e>
 8000ff2:	2c00      	cmp	r4, #0
 8000ff4:	db0b      	blt.n	800100e <floor+0xce>
 8000ff6:	ea26 0607 	bic.w	r6, r6, r7
 8000ffa:	e7c8      	b.n	8000f8e <floor+0x4e>
 8000ffc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <floor+0xf4>)
 8001002:	431e      	orrs	r6, r3
 8001004:	2e00      	cmp	r6, #0
 8001006:	bf18      	it	ne
 8001008:	4614      	movne	r4, r2
 800100a:	2600      	movs	r6, #0
 800100c:	e7bf      	b.n	8000f8e <floor+0x4e>
 800100e:	2d14      	cmp	r5, #20
 8001010:	d008      	beq.n	8001024 <floor+0xe4>
 8001012:	2301      	movs	r3, #1
 8001014:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8001018:	fa03 f505 	lsl.w	r5, r3, r5
 800101c:	19ae      	adds	r6, r5, r6
 800101e:	bf28      	it	cs
 8001020:	18e4      	addcs	r4, r4, r3
 8001022:	e7e8      	b.n	8000ff6 <floor+0xb6>
 8001024:	3401      	adds	r4, #1
 8001026:	e7e6      	b.n	8000ff6 <floor+0xb6>
 8001028:	8800759c 	.word	0x8800759c
 800102c:	7e37e43c 	.word	0x7e37e43c
 8001030:	000fffff 	.word	0x000fffff
 8001034:	bff00000 	.word	0xbff00000

08001038 <lsdir>:
 }

/* * * * * * * * List Dir Contents * * * * * * * * * */

 int lsdir(const char *path)
{
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b089      	sub	sp, #36	; 0x24
	static struct fs_dirent entry;

	fs_dir_t_init(&dirp);

	/* Verify fs_opendir() */
	res = fs_opendir(&dirp, path);
 800103c:	4601      	mov	r1, r0
{
 800103e:	4605      	mov	r5, r0
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
 8001040:	2600      	movs	r6, #0
	res = fs_opendir(&dirp, path);
 8001042:	a806      	add	r0, sp, #24
 8001044:	e9cd 6606 	strd	r6, r6, [sp, #24]
 8001048:	f008 fbfa 	bl	8009840 <fs_opendir>
	if (res) {
 800104c:	4604      	mov	r4, r0
 800104e:	b170      	cbz	r0, 800106e <lsdir+0x36>
		LOG_ERR("Error opening dir %s [%d]", path, res);
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <lsdir+0x9c>)
 8001052:	4921      	ldr	r1, [pc, #132]	; (80010d8 <lsdir+0xa0>)
 8001054:	9600      	str	r6, [sp, #0]
 8001056:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800105a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	4633      	mov	r3, r6
 8001062:	4630      	mov	r0, r6
 8001064:	f00f fd72 	bl	8010b4c <z_log_msg2_runtime_create.constprop.0>

	/* Verify fs_closedir() */
	fs_closedir(&dirp);

	return res;
 8001068:	4620      	mov	r0, r4
 800106a:	b009      	add	sp, #36	; 0x24
 800106c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("\nListing dir %s ...", path);
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <lsdir+0xa4>)
 8001070:	9503      	str	r5, [sp, #12]
 8001072:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8001076:	4918      	ldr	r1, [pc, #96]	; (80010d8 <lsdir+0xa0>)
 8001078:	9000      	str	r0, [sp, #0]
 800107a:	4603      	mov	r3, r0
 800107c:	2203      	movs	r2, #3
		res = fs_readdir(&dirp, &entry);
 800107e:	4d18      	ldr	r5, [pc, #96]	; (80010e0 <lsdir+0xa8>)
			LOG_INF("[FILE] %s (size = %zu)",
 8001080:	4f18      	ldr	r7, [pc, #96]	; (80010e4 <lsdir+0xac>)
	LOG_INF("\nListing dir %s ...", path);
 8001082:	f00f fd63 	bl	8010b4c <z_log_msg2_runtime_create.constprop.0>
 8001086:	1c6e      	adds	r6, r5, #1
		res = fs_readdir(&dirp, &entry);
 8001088:	4915      	ldr	r1, [pc, #84]	; (80010e0 <lsdir+0xa8>)
 800108a:	a806      	add	r0, sp, #24
 800108c:	f008 fc4a 	bl	8009924 <fs_readdir>
		if (res || entry.name[0] == 0) {
 8001090:	4604      	mov	r4, r0
 8001092:	b9d8      	cbnz	r0, 80010cc <lsdir+0x94>
 8001094:	786b      	ldrb	r3, [r5, #1]
 8001096:	b1cb      	cbz	r3, 80010cc <lsdir+0x94>
		if (entry.type == FS_DIR_ENTRY_DIR) {
 8001098:	782b      	ldrb	r3, [r5, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d10a      	bne.n	80010b4 <lsdir+0x7c>
			LOG_INF("[DIR ] %s", entry.name);
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <lsdir+0xb0>)
 80010a0:	490d      	ldr	r1, [pc, #52]	; (80010d8 <lsdir+0xa0>)
 80010a2:	9603      	str	r6, [sp, #12]
 80010a4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80010a8:	9000      	str	r0, [sp, #0]
 80010aa:	4603      	mov	r3, r0
 80010ac:	2203      	movs	r2, #3
 80010ae:	f00f fd4d 	bl	8010b4c <z_log_msg2_runtime_create.constprop.0>
 80010b2:	e7e9      	b.n	8001088 <lsdir+0x50>
			LOG_INF("[FILE] %s (size = %zu)",
 80010b4:	692b      	ldr	r3, [r5, #16]
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <lsdir+0xa0>)
 80010b8:	9000      	str	r0, [sp, #0]
 80010ba:	e9cd 6303 	strd	r6, r3, [sp, #12]
 80010be:	e9cd 0701 	strd	r0, r7, [sp, #4]
 80010c2:	4603      	mov	r3, r0
 80010c4:	2203      	movs	r2, #3
 80010c6:	f00f fd41 	bl	8010b4c <z_log_msg2_runtime_create.constprop.0>
 80010ca:	e7dd      	b.n	8001088 <lsdir+0x50>
	fs_closedir(&dirp);
 80010cc:	a806      	add	r0, sp, #24
 80010ce:	f008 fcab 	bl	8009a28 <fs_closedir>
	return res;
 80010d2:	e7c9      	b.n	8001068 <lsdir+0x30>
 80010d4:	080179ba 	.word	0x080179ba
 80010d8:	08016ec8 	.word	0x08016ec8
 80010dc:	080179d4 	.word	0x080179d4
 80010e0:	20000d18 	.word	0x20000d18
 80010e4:	080179f2 	.word	0x080179f2
 80010e8:	080179e8 	.word	0x080179e8

080010ec <init_and_mount_sdcard>:
 void init_and_mount_sdcard() {
 80010ec:	b530      	push	{r4, r5, lr}
	mp.type = FS_FATFS;
 80010ee:	4c36      	ldr	r4, [pc, #216]	; (80011c8 <init_and_mount_sdcard+0xdc>)
            if (disk_access_init(disk_pdrv) != 0) {
 80010f0:	4836      	ldr	r0, [pc, #216]	; (80011cc <init_and_mount_sdcard+0xe0>)
	mp.type = FS_FATFS;
 80010f2:	2300      	movs	r3, #0
 void init_and_mount_sdcard() {
 80010f4:	b089      	sub	sp, #36	; 0x24
	mp.type = FS_FATFS;
 80010f6:	60a3      	str	r3, [r4, #8]
	mp.fs_data = &fat_fs;
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <init_and_mount_sdcard+0xe4>)
 80010fa:	6123      	str	r3, [r4, #16]
            if (disk_access_init(disk_pdrv) != 0) {
 80010fc:	f010 f9e5 	bl	80114ca <disk_access_init>
 8001100:	b300      	cbz	r0, 8001144 <init_and_mount_sdcard+0x58>
                    LOG_ERR("Storage init ERROR!");
 8001102:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <init_and_mount_sdcard+0xe8>)
                    LOG_ERR("Unable to get sector size");
 8001104:	9306      	str	r3, [sp, #24]
 8001106:	2302      	movs	r3, #2
 8001108:	9305      	str	r3, [sp, #20]
 800110a:	aa05      	add	r2, sp, #20
 800110c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 8001110:	4831      	ldr	r0, [pc, #196]	; (80011d8 <init_and_mount_sdcard+0xec>)
    mp.mnt_point = disk_mount_pt;
 8001112:	4d32      	ldr	r5, [pc, #200]	; (80011dc <init_and_mount_sdcard+0xf0>)
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 8001114:	f00f fd17 	bl	8010b46 <z_log_msg2_static_create.constprop.0>
    int res = fs_mount(&mp);
 8001118:	482b      	ldr	r0, [pc, #172]	; (80011c8 <init_and_mount_sdcard+0xdc>)
    mp.mnt_point = disk_mount_pt;
 800111a:	60e5      	str	r5, [r4, #12]
    int res = fs_mount(&mp);
 800111c:	f008 fcaa 	bl	8009a74 <fs_mount>
    if (res == FR_OK) {
 8001120:	2302      	movs	r3, #2
 8001122:	2800      	cmp	r0, #0
 8001124:	d144      	bne.n	80011b0 <init_and_mount_sdcard+0xc4>
            LOG_INF("Disk mounted.");
 8001126:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <init_and_mount_sdcard+0xf4>)
 8001128:	482b      	ldr	r0, [pc, #172]	; (80011d8 <init_and_mount_sdcard+0xec>)
 800112a:	e9cd 3205 	strd	r3, r2, [sp, #20]
 800112e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001132:	aa05      	add	r2, sp, #20
 8001134:	f00f fd07 	bl	8010b46 <z_log_msg2_static_create.constprop.0>
            lsdir(disk_mount_pt);
 8001138:	4628      	mov	r0, r5
}
 800113a:	b009      	add	sp, #36	; 0x24
 800113c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            lsdir(disk_mount_pt);
 8001140:	f7ff bf7a 	b.w	8001038 <lsdir>
            if (disk_access_ioctl(disk_pdrv,
 8001144:	4821      	ldr	r0, [pc, #132]	; (80011cc <init_and_mount_sdcard+0xe0>)
 8001146:	466a      	mov	r2, sp
 8001148:	2101      	movs	r1, #1
 800114a:	f010 fa08 	bl	801155e <disk_access_ioctl>
 800114e:	b108      	cbz	r0, 8001154 <init_and_mount_sdcard+0x68>
                    LOG_ERR("Unable to get sector count");
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <init_and_mount_sdcard+0xf8>)
 8001152:	e7d7      	b.n	8001104 <init_and_mount_sdcard+0x18>
            LOG_INF("Block count %u", block_count);
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <init_and_mount_sdcard+0xfc>)
 8001156:	4820      	ldr	r0, [pc, #128]	; (80011d8 <init_and_mount_sdcard+0xec>)
 8001158:	9306      	str	r3, [sp, #24]
 800115a:	aa05      	add	r2, sp, #20
 800115c:	9b00      	ldr	r3, [sp, #0]
 800115e:	9307      	str	r3, [sp, #28]
 8001160:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8001164:	2503      	movs	r5, #3
 8001166:	9505      	str	r5, [sp, #20]
 8001168:	f00f fced 	bl	8010b46 <z_log_msg2_static_create.constprop.0>
            if (disk_access_ioctl(disk_pdrv,
 800116c:	4817      	ldr	r0, [pc, #92]	; (80011cc <init_and_mount_sdcard+0xe0>)
 800116e:	aa01      	add	r2, sp, #4
 8001170:	2102      	movs	r1, #2
 8001172:	f010 f9f4 	bl	801155e <disk_access_ioctl>
 8001176:	b108      	cbz	r0, 800117c <init_and_mount_sdcard+0x90>
                    LOG_ERR("Unable to get sector size");
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <init_and_mount_sdcard+0x100>)
 800117a:	e7c3      	b.n	8001104 <init_and_mount_sdcard+0x18>
            LOG_INF("Sector size %u", block_size);
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <init_and_mount_sdcard+0x104>)
 800117e:	9306      	str	r3, [sp, #24]
 8001180:	aa05      	add	r2, sp, #20
 8001182:	9b01      	ldr	r3, [sp, #4]
 8001184:	4814      	ldr	r0, [pc, #80]	; (80011d8 <init_and_mount_sdcard+0xec>)
 8001186:	9307      	str	r3, [sp, #28]
 8001188:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800118c:	9505      	str	r5, [sp, #20]
 800118e:	f00f fcda 	bl	8010b46 <z_log_msg2_static_create.constprop.0>
            memory_size_mb = (uint64_t)block_count * block_size;
 8001192:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001196:	fba3 3202 	umull	r3, r2, r3, r2
            LOG_INF("Memory Size(MB) %u", (uint32_t)(memory_size_mb >> 20));
 800119a:	0d1b      	lsrs	r3, r3, #20
 800119c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <init_and_mount_sdcard+0x108>)
 80011a2:	9505      	str	r5, [sp, #20]
 80011a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80011a8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80011ac:	aa05      	add	r2, sp, #20
 80011ae:	e7af      	b.n	8001110 <init_and_mount_sdcard+0x24>
            LOG_ERR("Error mounting disk.");
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <init_and_mount_sdcard+0x10c>)
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <init_and_mount_sdcard+0xec>)
 80011b4:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80011b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80011bc:	aa05      	add	r2, sp, #20
 80011be:	f00f fcc2 	bl	8010b46 <z_log_msg2_static_create.constprop.0>
}
 80011c2:	b009      	add	sp, #36	; 0x24
 80011c4:	bd30      	pop	{r4, r5, pc}
 80011c6:	bf00      	nop
 80011c8:	20000058 	.word	0x20000058
 80011cc:	08017a09 	.word	0x08017a09
 80011d0:	20000d2c 	.word	0x20000d2c
 80011d4:	08017a0c 	.word	0x08017a0c
 80011d8:	08016ec8 	.word	0x08016ec8
 80011dc:	08017a86 	.word	0x08017a86
 80011e0:	08017a8b 	.word	0x08017a8b
 80011e4:	08017a20 	.word	0x08017a20
 80011e8:	08017a3b 	.word	0x08017a3b
 80011ec:	08017a4a 	.word	0x08017a4a
 80011f0:	08017a64 	.word	0x08017a64
 80011f4:	08017a73 	.word	0x08017a73
 80011f8:	08017a99 	.word	0x08017a99

080011fc <count_particles>:

/* * * * * * * * THREAD: Count Particles * * * * * * * */

K_THREAD_STACK_DEFINE(count_particles_stack_area, 16384);
struct k_thread count_particles_thread_data;
extern void count_particles() {
 80011fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001200:	b0d6      	sub	sp, #344	; 0x158
  
    LOG_INF("Count Particles Thread Spawn!");
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <count_particles+0xc8>)
 8001204:	932e      	str	r3, [sp, #184]	; 0xb8
 8001206:	2302      	movs	r3, #2
 8001208:	932d      	str	r3, [sp, #180]	; 0xb4

    char text_data[100];
    struct histogram data;
    while(1) {
        LOG_INF("Counting Particles...");
 800120a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80012c8 <count_particles+0xcc>
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800120e:	4e2f      	ldr	r6, [pc, #188]	; (80012cc <count_particles+0xd0>)
        gpio_pin_set_dt(&led_red,1);
 8001210:	4d2f      	ldr	r5, [pc, #188]	; (80012d0 <count_particles+0xd4>)
 8001212:	482e      	ldr	r0, [pc, #184]	; (80012cc <count_particles+0xd0>)
 8001214:	2300      	movs	r3, #0
 8001216:	aa2d      	add	r2, sp, #180	; 0xb4
 8001218:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800121c:	f010 f935 	bl	801148a <z_impl_z_log_msg2_static_create>
        LOG_INF("Counting Particles...");
 8001220:	2302      	movs	r3, #2
 8001222:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8001226:	930d      	str	r3, [sp, #52]	; 0x34
 8001228:	2300      	movs	r3, #0
 800122a:	aa0d      	add	r2, sp, #52	; 0x34
 800122c:	4630      	mov	r0, r6
 800122e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001232:	f010 f92a 	bl	801148a <z_impl_z_log_msg2_static_create>
        gpio_pin_set_dt(&led_red,1);
 8001236:	4628      	mov	r0, r5
 8001238:	2101      	movs	r1, #1
 800123a:	f00f fca6 	bl	8010b8a <gpio_pin_set_dt.isra.0>
        opc_init();    
 800123e:	f000 f97f 	bl	8001540 <opc_init>
        opc_start();
 8001242:	f000 f9eb 	bl	800161c <opc_start>
        data = opc_read_histogram(5);
 8001246:	2105      	movs	r1, #5
 8001248:	a82a      	add	r0, sp, #168	; 0xa8
 800124a:	f000 fb47 	bl	80018dc <opc_read_histogram>
        
        snprintfcb(text_data, 100, "%s|%0.2f|%0.2f|%0.2f|%0.2f|%0.2f",
 800124e:	f000 fd83 	bl	8001d58 <get_formatted_time>
 8001252:	4604      	mov	r4, r0
 8001254:	9854      	ldr	r0, [sp, #336]	; 0x150
 8001256:	f7ff f927 	bl	80004a8 <__aeabi_f2d>
 800125a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800125e:	9853      	ldr	r0, [sp, #332]	; 0x14c
 8001260:	f7ff f922 	bl	80004a8 <__aeabi_f2d>
 8001264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001268:	9852      	ldr	r0, [sp, #328]	; 0x148
 800126a:	f7ff f91d 	bl	80004a8 <__aeabi_f2d>
 800126e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001272:	984e      	ldr	r0, [sp, #312]	; 0x138
 8001274:	f7ff f918 	bl	80004a8 <__aeabi_f2d>
 8001278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800127c:	9850      	ldr	r0, [sp, #320]	; 0x140
 800127e:	f7ff f913 	bl	80004a8 <__aeabi_f2d>
 8001282:	af11      	add	r7, sp, #68	; 0x44
 8001284:	e9cd 0100 	strd	r0, r1, [sp]
 8001288:	4623      	mov	r3, r4
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <count_particles+0xd8>)
 800128c:	2164      	movs	r1, #100	; 0x64
 800128e:	4638      	mov	r0, r7
 8001290:	f00f fcfa 	bl	8010c88 <snprintfcb>
                data.sfr,
                data.pm1,
                data.pm25,
                data.pm10);
        
        LOG_INF("R: %s",text_data);
 8001294:	2400      	movs	r4, #0
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <count_particles+0xdc>)
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	2203      	movs	r2, #3
 800129c:	4623      	mov	r3, r4
 800129e:	4631      	mov	r1, r6
 80012a0:	4620      	mov	r0, r4
 80012a2:	e9cd 4400 	strd	r4, r4, [sp]
 80012a6:	9703      	str	r7, [sp, #12]
 80012a8:	f00f fc5f 	bl	8010b6a <z_log_msg2_runtime_create.constprop.0>
        
        //save_data(text_data, "opc");

        gpio_pin_set_dt(&led_red,0);
 80012ac:	4628      	mov	r0, r5
 80012ae:	4621      	mov	r1, r4
 80012b0:	f00f fc6b 	bl	8010b8a <gpio_pin_set_dt.isra.0>
        opc_stop();
 80012b4:	f000 fa62 	bl	800177c <opc_stop>
        opc_release();
 80012b8:	f000 f8f2 	bl	80014a0 <opc_release>
        k_msleep(120000);
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <count_particles+0xe0>)
 80012be:	f00f fc92 	bl	8010be6 <k_msleep.isra.0>
    while(1) {
 80012c2:	e7ad      	b.n	8001220 <count_particles+0x24>
 80012c4:	08017ac6 	.word	0x08017ac6
 80012c8:	08017ae4 	.word	0x08017ae4
 80012cc:	08016f10 	.word	0x08016f10
 80012d0:	080170a0 	.word	0x080170a0
 80012d4:	08017afa 	.word	0x08017afa
 80012d8:	08017b1b 	.word	0x08017b1b
 80012dc:	0001d4c0 	.word	0x0001d4c0

080012e0 <read_gas_and_ambient_sensors>:

/* * * * * * * * THREAD: Read Gas & Ambient Sensors * * * * * * * */

K_THREAD_STACK_DEFINE(read_gas_and_ambient_sensors_stack_area, STACKSIZE);
struct k_thread read_gas_and_ambient_sensors_thread_data;
extern void read_gas_and_ambient_sensors() {
 80012e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    
    LOG_INF("Read Gas Sensors Thread Spawn!");
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <read_gas_and_ambient_sensors+0x2c>)
 80012e4:	9304      	str	r3, [sp, #16]
 80012e6:	2302      	movs	r3, #2
 80012e8:	9303      	str	r3, [sp, #12]
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <read_gas_and_ambient_sensors+0x30>)
 80012ec:	2300      	movs	r3, #0
 80012ee:	aa03      	add	r2, sp, #12
 80012f0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80012f4:	f010 f8c9 	bl	801148a <z_impl_z_log_msg2_static_create>
    
    while(1) {
        //LOG_INF("Reading gas sensors...");
        //gpio_pin_set_dt(&led_green,1);

        k_msleep(500);
 80012f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fc:	f00f fc73 	bl	8010be6 <k_msleep.isra.0>
        //gpio_pin_set_dt(&led_green,0);
        k_msleep(500);
 8001300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001304:	f00f fc6f 	bl	8010be6 <k_msleep.isra.0>
    while(1) {
 8001308:	e7f6      	b.n	80012f8 <read_gas_and_ambient_sensors+0x18>
 800130a:	bf00      	nop
 800130c:	08017b21 	.word	0x08017b21
 8001310:	08016f10 	.word	0x08016f10

08001314 <send_data>:

/* * * * * * * * THREAD: Send Data * * * * * * * */

K_THREAD_STACK_DEFINE(send_data_stack_area, STACKSIZE);
struct k_thread send_data_thread_data;
extern void send_data() {
 8001314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    
    LOG_INF("Send Data Thread Spawn!");
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <send_data+0x2c>)
 8001318:	9304      	str	r3, [sp, #16]
 800131a:	2302      	movs	r3, #2
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <send_data+0x30>)
 8001320:	2300      	movs	r3, #0
 8001322:	aa03      	add	r2, sp, #12
 8001324:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001328:	f010 f8af 	bl	801148a <z_impl_z_log_msg2_static_create>
    
    while(1) {
        //LOG_INF("Sending data...");
        //gpio_pin_set_dt(&led_blue,1);

        k_msleep(500);
 800132c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001330:	f00f fc59 	bl	8010be6 <k_msleep.isra.0>
        //gpio_pin_set_dt(&led_blue,0);
        k_msleep(3000);
 8001334:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001338:	f00f fc55 	bl	8010be6 <k_msleep.isra.0>
    while(1) {
 800133c:	e7f6      	b.n	800132c <send_data+0x18>
 800133e:	bf00      	nop
 8001340:	08017b40 	.word	0x08017b40
 8001344:	08016f10 	.word	0x08016f10

08001348 <main>:



/* * * * * * * * * * * * * * * * * main * * * * * * * * * *  * * * * * * * */

void main(void) {
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	b08f      	sub	sp, #60	; 0x3c
    
    LOG_INF("* * * * * * LoRaWAN Air Lab * * * * * * ");
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <main+0xf4>)
 800134e:	930c      	str	r3, [sp, #48]	; 0x30
 8001350:	2302      	movs	r3, #2
 8001352:	930b      	str	r3, [sp, #44]	; 0x2c
 8001354:	2300      	movs	r3, #0
 8001356:	aa0b      	add	r2, sp, #44	; 0x2c
 8001358:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800135c:	4838      	ldr	r0, [pc, #224]	; (8001440 <main+0xf8>)
 800135e:	f010 f894 	bl	801148a <z_impl_z_log_msg2_static_create>
    
    int ret;
    
    // System Initialitations
    
    init_time_system();
 8001362:	f000 fca5 	bl	8001cb0 <init_time_system>
    init_and_mount_sdcard();
 8001366:	f7ff fec1 	bl	80010ec <init_and_mount_sdcard>
            
    LOG_INF("Date: %s",get_formatted_time());
 800136a:	f000 fcf5 	bl	8001d58 <get_formatted_time>
 800136e:	2400      	movs	r4, #0
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <main+0xfc>)
 8001372:	9003      	str	r0, [sp, #12]
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	e9cd 4400 	strd	r4, r4, [sp]
 800137a:	4931      	ldr	r1, [pc, #196]	; (8001440 <main+0xf8>)
 800137c:	4623      	mov	r3, r4
 800137e:	2203      	movs	r2, #3
 8001380:	4620      	mov	r0, r4
 8001382:	f00f fbf2 	bl	8010b6a <z_log_msg2_runtime_create.constprop.0>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001386:	4830      	ldr	r0, [pc, #192]	; (8001448 <main+0x100>)
    
    gpioa = device_get_binding("GPIOA");
 8001388:	4d30      	ldr	r5, [pc, #192]	; (800144c <main+0x104>)
 800138a:	f00c f9a9 	bl	800d6e0 <z_impl_device_get_binding>
 800138e:	6028      	str	r0, [r5, #0]
 8001390:	482f      	ldr	r0, [pc, #188]	; (8001450 <main+0x108>)
    gpiob = device_get_binding("GPIOB");
 8001392:	4e30      	ldr	r6, [pc, #192]	; (8001454 <main+0x10c>)
 8001394:	f00c f9a4 	bl	800d6e0 <z_impl_device_get_binding>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 8001398:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 800139c:	6030      	str	r0, [r6, #0]
 800139e:	2109      	movs	r1, #9
 80013a0:	482d      	ldr	r0, [pc, #180]	; (8001458 <main+0x110>)
 80013a2:	f00f fc06 	bl	8010bb2 <gpio_pin_configure.isra.0>
 80013a6:	482c      	ldr	r0, [pc, #176]	; (8001458 <main+0x110>)
 80013a8:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80013ac:	210b      	movs	r1, #11
 80013ae:	f00f fc00 	bl	8010bb2 <gpio_pin_configure.isra.0>
    
    ret = gpio_pin_configure_dt(&led_green, GPIO_OUTPUT_INACTIVE);
    ret = gpio_pin_configure_dt(&led_red, GPIO_OUTPUT_INACTIVE);
    
    ret = gpio_pin_configure(gpiob, 3, GPIO_OUTPUT_INACTIVE);
 80013b2:	6830      	ldr	r0, [r6, #0]
 80013b4:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80013b8:	2103      	movs	r1, #3
 80013ba:	f00f fbfa 	bl	8010bb2 <gpio_pin_configure.isra.0>
    ret = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_INACTIVE);
 80013be:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
 80013c2:	6828      	ldr	r0, [r5, #0]
 80013c4:	2104      	movs	r1, #4
 80013c6:	f00f fbf4 	bl	8010bb2 <gpio_pin_configure.isra.0>
    
    gpio_pin_set_dt(&led_green,0);
 80013ca:	4621      	mov	r1, r4
 80013cc:	4823      	ldr	r0, [pc, #140]	; (800145c <main+0x114>)
 80013ce:	f00f fbdc 	bl	8010b8a <gpio_pin_set_dt.isra.0>
    gpio_pin_set_dt(&led_red,0);
 80013d2:	4823      	ldr	r0, [pc, #140]	; (8001460 <main+0x118>)
 80013d4:	4621      	mov	r1, r4
 80013d6:	f00f fbd8 	bl	8010b8a <gpio_pin_set_dt.isra.0>

    /* Thread Create: Read Ambient Sensors*/
    k_thread_create(&send_data_thread_data, send_data_stack_area,
 80013da:	2600      	movs	r6, #0
 80013dc:	2700      	movs	r7, #0
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80013de:	2505      	movs	r5, #5
 80013e0:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80013e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80013e8:	e9cd 4400 	strd	r4, r4, [sp]
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <main+0x11c>)
 80013ee:	491e      	ldr	r1, [pc, #120]	; (8001468 <main+0x120>)
 80013f0:	9404      	str	r4, [sp, #16]
 80013f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f6:	481d      	ldr	r0, [pc, #116]	; (800146c <main+0x124>)
 80013f8:	f00c fb6a 	bl	800dad0 <z_impl_k_thread_create>
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <main+0x128>)
 80013fe:	491d      	ldr	r1, [pc, #116]	; (8001474 <main+0x12c>)
 8001400:	9400      	str	r4, [sp, #0]
 8001402:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8001406:	e9cd 5403 	strd	r5, r4, [sp, #12]
 800140a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800140e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001412:	4819      	ldr	r0, [pc, #100]	; (8001478 <main+0x130>)
 8001414:	f00c fb5c 	bl	800dad0 <z_impl_k_thread_create>
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <main+0x134>)
 800141a:	4919      	ldr	r1, [pc, #100]	; (8001480 <main+0x138>)
 800141c:	4819      	ldr	r0, [pc, #100]	; (8001484 <main+0x13c>)
 800141e:	9400      	str	r4, [sp, #0]
 8001420:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8001424:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8001428:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800142c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001430:	f00c fb4e 	bl	800dad0 <z_impl_k_thread_create>
                                 NULL, NULL, NULL,
                                 5, 0, K_NO_WAIT);    
    
     
    while (1) {
        k_msleep(5);
 8001434:	2005      	movs	r0, #5
 8001436:	f00f fbd6 	bl	8010be6 <k_msleep.isra.0>
    while (1) {
 800143a:	e7fb      	b.n	8001434 <main+0xec>
 800143c:	08017b58 	.word	0x08017b58
 8001440:	08016f10 	.word	0x08016f10
 8001444:	08017b81 	.word	0x08017b81
 8001448:	08017b8a 	.word	0x08017b8a
 800144c:	20000f5c 	.word	0x20000f5c
 8001450:	08017b90 	.word	0x08017b90
 8001454:	20000f60 	.word	0x20000f60
 8001458:	08016b60 	.word	0x08016b60
 800145c:	08017098 	.word	0x08017098
 8001460:	080170a0 	.word	0x080170a0
 8001464:	08001315 	.word	0x08001315
 8001468:	200074c0 	.word	0x200074c0
 800146c:	20000520 	.word	0x20000520
 8001470:	080012e1 	.word	0x080012e1
 8001474:	200064a0 	.word	0x200064a0
 8001478:	200004a0 	.word	0x200004a0
 800147c:	080011fd 	.word	0x080011fd
 8001480:	20002480 	.word	0x20002480
 8001484:	20000420 	.word	0x20000420

08001488 <spi_transceive.constprop.0.isra.0>:
#endif

extern int z_impl_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);

__pinned_func
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
 8001488:	b410      	push	{r4}
 800148a:	4613      	mov	r3, r2
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800148c:	6882      	ldr	r2, [r0, #8]
 800148e:	6814      	ldr	r4, [r2, #0]
 8001490:	460a      	mov	r2, r1
 8001492:	46a4      	mov	ip, r4
 8001494:	4901      	ldr	r1, [pc, #4]	; (800149c <spi_transceive.constprop.0.isra.0+0x14>)
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
}
 8001496:	bc10      	pop	{r4}
 8001498:	4760      	bx	ip
 800149a:	bf00      	nop
 800149c:	20000f68 	.word	0x20000f68

080014a0 <opc_release>:


struct spi_cs_control *ctrl;
struct spi_config spi_cfg;
    
void opc_release() {
 80014a0:	b510      	push	{r4, lr}
    uint8_t r;
    r = spi_release(spi, NULL);
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <opc_release+0x8c>)
void opc_release() {
 80014a4:	b086      	sub	sp, #24
    r = spi_release(spi, NULL);
 80014a6:	6818      	ldr	r0, [r3, #0]
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
 80014a8:	6883      	ldr	r3, [r0, #8]
 80014aa:	2100      	movs	r1, #0
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4798      	blx	r3
    if (r == 0) {
 80014b0:	b2c0      	uxtb	r0, r0
 80014b2:	b948      	cbnz	r0, 80014c8 <opc_release+0x28>
        LOG_INF("SPI Released!");
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <opc_release+0x90>)
 80014b6:	9304      	str	r3, [sp, #16]
 80014b8:	481e      	ldr	r0, [pc, #120]	; (8001534 <opc_release+0x94>)
 80014ba:	2302      	movs	r3, #2
 80014bc:	aa03      	add	r2, sp, #12
 80014be:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80014c2:	9303      	str	r3, [sp, #12]
 80014c4:	f00f fb94 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
    }
    r = gpio_pin_configure(gpioa, 7, GPIO_OUTPUT_LOW);
 80014c8:	4c1b      	ldr	r4, [pc, #108]	; (8001538 <opc_release+0x98>)
 80014ca:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80014ce:	6820      	ldr	r0, [r4, #0]
 80014d0:	2107      	movs	r1, #7
 80014d2:	f00f fbb0 	bl	8010c36 <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 5, GPIO_OUTPUT_LOW);
 80014d6:	6820      	ldr	r0, [r4, #0]
 80014d8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80014dc:	2105      	movs	r1, #5
 80014de:	f00f fbaa 	bl	8010c36 <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 6, GPIO_INPUT);
 80014e2:	6820      	ldr	r0, [r4, #0]
 80014e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014e8:	2106      	movs	r1, #6
 80014ea:	f00f fba4 	bl	8010c36 <gpio_pin_configure.isra.0>
    r = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_LOW);
 80014ee:	6820      	ldr	r0, [r4, #0]
    
    
    
    gpio_pin_set(gpiob,4,0);
 80014f0:	4c12      	ldr	r4, [pc, #72]	; (800153c <opc_release+0x9c>)
    r = gpio_pin_configure(gpioa, 4, GPIO_OUTPUT_LOW);
 80014f2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80014f6:	2104      	movs	r1, #4
 80014f8:	f00f fb9d 	bl	8010c36 <gpio_pin_configure.isra.0>
    gpio_pin_set(gpiob,4,0);
 80014fc:	6820      	ldr	r0, [r4, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	2104      	movs	r1, #4
 8001502:	f00f fb88 	bl	8010c16 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,7,0);
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	2107      	movs	r1, #7
 800150c:	f00f fb83 	bl	8010c16 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,6,0);    
 8001510:	6820      	ldr	r0, [r4, #0]
 8001512:	2200      	movs	r2, #0
 8001514:	2106      	movs	r1, #6
 8001516:	f00f fb7e 	bl	8010c16 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,5,0);
 800151a:	6820      	ldr	r0, [r4, #0]
 800151c:	2200      	movs	r2, #0
 800151e:	2105      	movs	r1, #5
}    
 8001520:	b006      	add	sp, #24
 8001522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_pin_set(gpiob,5,0);
 8001526:	f00f bb76 	b.w	8010c16 <gpio_pin_set.isra.0>
 800152a:	bf00      	nop
 800152c:	20000f64 	.word	0x20000f64
 8001530:	08017b9b 	.word	0x08017b9b
 8001534:	08016f20 	.word	0x08016f20
 8001538:	20000f5c 	.word	0x20000f5c
 800153c:	20000f60 	.word	0x20000f60

08001540 <opc_init>:
void opc_init() {
 8001540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                        .gpio_dt_flags = GPIO_ACTIVE_LOW
    };
    */ 

    
    spi_cfg.frequency = 500000U;
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <opc_init+0x34>)
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <opc_init+0x38>)
 8001546:	601a      	str	r2, [r3, #0]
    spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB | 
 8001548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800154c:	809a      	strh	r2, [r3, #4]
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <opc_init+0x3c>)
 8001550:	f00c f8c6 	bl	800d6e0 <z_impl_device_get_binding>
            SPI_OP_MODE_MASTER | SPI_MODE_CPHA;

    
    spi = device_get_binding("OPC");
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <opc_init+0x40>)
 8001556:	6018      	str	r0, [r3, #0]

    if (spi == NULL) {
 8001558:	b948      	cbnz	r0, 800156e <opc_init+0x2e>
        /* No such node, or the node does not have status "okay". */
        LOG_ERR("Error: no device SPI found.");
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <opc_init+0x44>)
 800155c:	9304      	str	r3, [sp, #16]
 800155e:	480a      	ldr	r0, [pc, #40]	; (8001588 <opc_init+0x48>)
 8001560:	2302      	movs	r3, #2
 8001562:	aa03      	add	r2, sp, #12
 8001564:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001568:	9303      	str	r3, [sp, #12]
 800156a:	f00f fb41 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>

    }
    
}
 800156e:	b007      	add	sp, #28
 8001570:	f85d fb04 	ldr.w	pc, [sp], #4
 8001574:	20000f68 	.word	0x20000f68
 8001578:	0007a120 	.word	0x0007a120
 800157c:	08017ba9 	.word	0x08017ba9
 8001580:	20000f64 	.word	0x20000f64
 8001584:	08017bad 	.word	0x08017bad
 8001588:	08016f20 	.word	0x08016f20

0800158c <opc_send_command>:
{
  // Return a 32-bit unsigned int from 4 bytes
  return ((val3 << 24) | (val2 << 16) | (val1 << 8) | val0);
}

uint8_t opc_send_command(uint8_t cmd) {
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af00      	add	r7, sp, #0
    
 
    
    uint8_t tx_buf[1];
    uint8_t rx_buf[1];
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 8001592:	2401      	movs	r4, #1
    struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 8001594:	1d3b      	adds	r3, r7, #4
    struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
    
    tx_buf[0] = cmd;
    
    gpio_pin_set(gpioa,4,0);
 8001596:	4e1d      	ldr	r6, [pc, #116]	; (800160c <opc_send_command+0x80>)
    tx_buf[0] = cmd;
 8001598:	7038      	strb	r0, [r7, #0]
    struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 800159a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
uint8_t opc_send_command(uint8_t cmd) {
 80015a6:	4605      	mov	r5, r0
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 80015a8:	f107 0310 	add.w	r3, r7, #16
    gpio_pin_set(gpioa,4,0);
 80015ac:	6830      	ldr	r0, [r6, #0]
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80015ae:	60bf      	str	r7, [r7, #8]
    gpio_pin_set(gpioa,4,0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2104      	movs	r1, #4
    struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 80015b4:	e9c7 3408 	strd	r3, r4, [r7, #32]
    struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80015b8:	60fc      	str	r4, [r7, #12]
    gpio_pin_set(gpioa,4,0);
 80015ba:	f00f fb2c 	bl	8010c16 <gpio_pin_set.isra.0>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
 80015be:	2004      	movs	r0, #4
 80015c0:	f014 fdeb 	bl	801619a <z_impl_k_usleep>
    k_usleep(4);
    spi_transceive(spi, &spi_cfg, &tx, &rx);
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <opc_send_command+0x84>)
 80015c6:	f107 0220 	add.w	r2, r7, #32
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	f107 0118 	add.w	r1, r7, #24
 80015d0:	f7ff ff5a 	bl	8001488 <spi_transceive.constprop.0.isra.0>
 80015d4:	2004      	movs	r0, #4
 80015d6:	f014 fde0 	bl	801619a <z_impl_k_usleep>
    k_usleep(4);
    gpio_pin_set(gpioa,4,1);                
 80015da:	6830      	ldr	r0, [r6, #0]
 80015dc:	4622      	mov	r2, r4
 80015de:	2104      	movs	r1, #4
 80015e0:	f00f fb19 	bl	8010c16 <gpio_pin_set.isra.0>
    LOG_INF("Sent %d, received: %d",cmd,rx_buf[0]);
 80015e4:	b088      	sub	sp, #32
 80015e6:	466a      	mov	r2, sp
 80015e8:	793b      	ldrb	r3, [r7, #4]
 80015ea:	490a      	ldr	r1, [pc, #40]	; (8001614 <opc_send_command+0x88>)
 80015ec:	6193      	str	r3, [r2, #24]
 80015ee:	2304      	movs	r3, #4
 80015f0:	e9c2 1504 	strd	r1, r5, [r2, #16]
 80015f4:	4808      	ldr	r0, [pc, #32]	; (8001618 <opc_send_command+0x8c>)
 80015f6:	f842 3f0c 	str.w	r3, [r2, #12]!
 80015fa:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 80015fe:	f00f faf7 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
    return rx_buf[0];
}
 8001602:	7938      	ldrb	r0, [r7, #4]
 8001604:	372c      	adds	r7, #44	; 0x2c
 8001606:	46bd      	mov	sp, r7
 8001608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160a:	bf00      	nop
 800160c:	20000f5c 	.word	0x20000f5c
 8001610:	20000f64 	.word	0x20000f64
 8001614:	08017bc9 	.word	0x08017bc9
 8001618:	08016f20 	.word	0x08016f20

0800161c <opc_start>:


/* * * * * * * * * Start OPC * * * * * * * * * */

void opc_start() {
 800161c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001620:	b087      	sub	sp, #28
    LOG_INF("*** STARTING OPC ***");
 8001622:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <opc_start+0x13c>)
    // Switch on the relay
    for (int t=3; t>0; t--) {
        LOG_INF("Switching the relay ON in %d",t);
 8001624:	4f4d      	ldr	r7, [pc, #308]	; (800175c <opc_start+0x140>)
 8001626:	4d4e      	ldr	r5, [pc, #312]	; (8001760 <opc_start+0x144>)
    LOG_INF("*** STARTING OPC ***");
 8001628:	9304      	str	r3, [sp, #16]
    for (int t=3; t>0; t--) {
 800162a:	2403      	movs	r4, #3
    LOG_INF("*** STARTING OPC ***");
 800162c:	2302      	movs	r3, #2
 800162e:	484c      	ldr	r0, [pc, #304]	; (8001760 <opc_start+0x144>)
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	aa03      	add	r2, sp, #12
 8001634:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_INF("Switching the relay ON in %d",t);
 8001638:	4626      	mov	r6, r4
    LOG_INF("*** STARTING OPC ***");
 800163a:	f00f fad9 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        LOG_INF("Switching the relay ON in %d",t);
 800163e:	aa03      	add	r2, sp, #12
 8001640:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8001644:	4628      	mov	r0, r5
 8001646:	e9cd 7404 	strd	r7, r4, [sp, #16]
 800164a:	9603      	str	r6, [sp, #12]
 800164c:	f00f fad0 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001654:	f00f fafc 	bl	8010c50 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 8001658:	3c01      	subs	r4, #1
 800165a:	d1f0      	bne.n	800163e <opc_start+0x22>
    }    
    gpio_pin_set(gpiob,3,1);
 800165c:	4e41      	ldr	r6, [pc, #260]	; (8001764 <opc_start+0x148>)
    uint8_t r2 = 0;
    
    uint8_t c = 0; 

    for (int t=3; t>0; t--) {
        LOG_INF("Sending ON Sequence in %d:",t);
 800165e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001768 <opc_start+0x14c>
    gpio_pin_set(gpiob,3,1);
 8001662:	6830      	ldr	r0, [r6, #0]
        LOG_INF("Sending ON Sequence in %d:",t);
 8001664:	4d3e      	ldr	r5, [pc, #248]	; (8001760 <opc_start+0x144>)
    gpio_pin_set(gpiob,3,1);
 8001666:	2201      	movs	r2, #1
 8001668:	2103      	movs	r1, #3
 800166a:	f00f fad4 	bl	8010c16 <gpio_pin_set.isra.0>
    for (int t=3; t>0; t--) {
 800166e:	2403      	movs	r4, #3
        LOG_INF("Sending ON Sequence in %d:",t);
 8001670:	4627      	mov	r7, r4
 8001672:	aa03      	add	r2, sp, #12
 8001674:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8001678:	4628      	mov	r0, r5
 800167a:	e9cd 8404 	strd	r8, r4, [sp, #16]
 800167e:	9703      	str	r7, [sp, #12]
 8001680:	f00f fab6 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 8001684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001688:	f00f fae2 	bl	8010c50 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 800168c:	3c01      	subs	r4, #1
 800168e:	d1f0      	bne.n	8001672 <opc_start+0x56>
        if (r1 == 243 && r2 == 3) {
                LOG_INF("**** Received 0xF3 and 0x03 :: OPC Unit is ready for start sequence...");
                break;
        }
        if (r1 == 49) {
                LOG_INF("Received busy status from OP");
 8001690:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800176c <opc_start+0x150>
 8001694:	4f32      	ldr	r7, [pc, #200]	; (8001760 <opc_start+0x144>)
        if (c == 10) {
                LOG_INF("Waiting 5s for OPC's buffer to reset");
                k_msleep(5000);	
        }
        if (c > 20) {
                LOG_INF("power cycle...");
 8001696:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8001770 <opc_start+0x154>
        r1 = opc_send_command(0x03);
 800169a:	2003      	movs	r0, #3
 800169c:	f7ff ff76 	bl	800158c <opc_send_command>
 80016a0:	4605      	mov	r5, r0
        k_msleep(10);
 80016a2:	200a      	movs	r0, #10
 80016a4:	f00f fad4 	bl	8010c50 <k_msleep.isra.0>
        r2 = opc_send_command(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff ff6f 	bl	800158c <opc_send_command>
        if (r1 == 243 && r2 == 3) {
 80016ae:	2df3      	cmp	r5, #243	; 0xf3
 80016b0:	d112      	bne.n	80016d8 <opc_start+0xbc>
 80016b2:	2803      	cmp	r0, #3
 80016b4:	d11c      	bne.n	80016f0 <opc_start+0xd4>
                LOG_INF("**** Received 0xF3 and 0x03 :: OPC Unit is ready for start sequence...");
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <opc_start+0x158>)
 80016b8:	9304      	str	r3, [sp, #16]
 80016ba:	4829      	ldr	r0, [pc, #164]	; (8001760 <opc_start+0x144>)
 80016bc:	2302      	movs	r3, #2
 80016be:	aa03      	add	r2, sp, #12
 80016c0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80016c4:	9303      	str	r3, [sp, #12]
 80016c6:	f00f fa93 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
                c=0;
        }				
        c++;
    }

    k_msleep(5000);    
 80016ca:	f241 3088 	movw	r0, #5000	; 0x1388
}
 80016ce:	b007      	add	sp, #28
 80016d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    k_msleep(5000);    
 80016d4:	f00f babc 	b.w	8010c50 <k_msleep.isra.0>
        if (r1 == 49) {
 80016d8:	2d31      	cmp	r5, #49	; 0x31
 80016da:	d109      	bne.n	80016f0 <opc_start+0xd4>
                LOG_INF("Received busy status from OP");
 80016dc:	2302      	movs	r3, #2
 80016de:	aa03      	add	r2, sp, #12
 80016e0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80016e4:	4638      	mov	r0, r7
 80016e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80016ea:	9303      	str	r3, [sp, #12]
 80016ec:	f00f fa80 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 80016f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f4:	f00f faac 	bl	8010c50 <k_msleep.isra.0>
        if (c == 10) {
 80016f8:	2c0a      	cmp	r4, #10
 80016fa:	d110      	bne.n	800171e <opc_start+0x102>
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <opc_start+0x15c>)
 80016fe:	9304      	str	r3, [sp, #16]
 8001700:	4638      	mov	r0, r7
 8001702:	2302      	movs	r3, #2
 8001704:	aa03      	add	r2, sp, #12
 8001706:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800170a:	9303      	str	r3, [sp, #12]
 800170c:	f00f fa70 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
                k_msleep(5000);	
 8001710:	f241 3088 	movw	r0, #5000	; 0x1388
 8001714:	f00f fa9c 	bl	8010c50 <k_msleep.isra.0>
        c++;
 8001718:	3401      	adds	r4, #1
 800171a:	b2e4      	uxtb	r4, r4
        r1 = opc_send_command(0x03);
 800171c:	e7bd      	b.n	800169a <opc_start+0x7e>
        if (c > 20) {
 800171e:	2c14      	cmp	r4, #20
 8001720:	d9fa      	bls.n	8001718 <opc_start+0xfc>
                LOG_INF("power cycle...");
 8001722:	2302      	movs	r3, #2
 8001724:	aa03      	add	r2, sp, #12
 8001726:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800172a:	4638      	mov	r0, r7
 800172c:	9303      	str	r3, [sp, #12]
 800172e:	f8cd 9010 	str.w	r9, [sp, #16]
 8001732:	f00f fa5d 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
                gpio_pin_set(gpiob,3,0);
 8001736:	2200      	movs	r2, #0
 8001738:	2103      	movs	r1, #3
 800173a:	6830      	ldr	r0, [r6, #0]
 800173c:	f00f fa6b 	bl	8010c16 <gpio_pin_set.isra.0>
                k_msleep(4000);
 8001740:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001744:	f00f fa84 	bl	8010c50 <k_msleep.isra.0>
                gpio_pin_set(gpiob,3,1);
 8001748:	6830      	ldr	r0, [r6, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	2103      	movs	r1, #3
 800174e:	f00f fa62 	bl	8010c16 <gpio_pin_set.isra.0>
                c=0;
 8001752:	2400      	movs	r4, #0
 8001754:	e7e0      	b.n	8001718 <opc_start+0xfc>
 8001756:	bf00      	nop
 8001758:	08017bdf 	.word	0x08017bdf
 800175c:	08017bf4 	.word	0x08017bf4
 8001760:	08016f20 	.word	0x08016f20
 8001764:	20000f60 	.word	0x20000f60
 8001768:	08017c11 	.word	0x08017c11
 800176c:	08017c73 	.word	0x08017c73
 8001770:	08017cb5 	.word	0x08017cb5
 8001774:	08017c2c 	.word	0x08017c2c
 8001778:	08017c90 	.word	0x08017c90

0800177c <opc_stop>:

void opc_stop() {
 800177c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001780:	b087      	sub	sp, #28
    LOG_INF("*** STARTING OPC ***");
 8001782:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <opc_stop+0x13c>)
    // Switch on the relay
    for (int t=3; t>0; t--) {
        LOG_INF("Switching the relay OFF in %d",t);
 8001784:	4f4d      	ldr	r7, [pc, #308]	; (80018bc <opc_stop+0x140>)
 8001786:	4d4e      	ldr	r5, [pc, #312]	; (80018c0 <opc_stop+0x144>)
    LOG_INF("*** STARTING OPC ***");
 8001788:	9304      	str	r3, [sp, #16]
    for (int t=3; t>0; t--) {
 800178a:	2403      	movs	r4, #3
    LOG_INF("*** STARTING OPC ***");
 800178c:	2302      	movs	r3, #2
 800178e:	484c      	ldr	r0, [pc, #304]	; (80018c0 <opc_stop+0x144>)
 8001790:	9303      	str	r3, [sp, #12]
 8001792:	aa03      	add	r2, sp, #12
 8001794:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_INF("Switching the relay OFF in %d",t);
 8001798:	4626      	mov	r6, r4
    LOG_INF("*** STARTING OPC ***");
 800179a:	f00f fa29 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        LOG_INF("Switching the relay OFF in %d",t);
 800179e:	aa03      	add	r2, sp, #12
 80017a0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80017a4:	4628      	mov	r0, r5
 80017a6:	e9cd 7404 	strd	r7, r4, [sp, #16]
 80017aa:	9603      	str	r6, [sp, #12]
 80017ac:	f00f fa20 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 80017b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b4:	f00f fa4c 	bl	8010c50 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 80017b8:	3c01      	subs	r4, #1
 80017ba:	d1f0      	bne.n	800179e <opc_stop+0x22>
    }    
    gpio_pin_set(gpiob,3,1);
 80017bc:	4d41      	ldr	r5, [pc, #260]	; (80018c4 <opc_stop+0x148>)
    uint8_t r2 = 0;
    
    uint8_t c = 0; 

    for (int t=3; t>0; t--) {
        LOG_INF("Sending OFF Sequence in %d:",t);
 80017be:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80018c8 <opc_stop+0x14c>
    gpio_pin_set(gpiob,3,1);
 80017c2:	6828      	ldr	r0, [r5, #0]
        LOG_INF("Sending OFF Sequence in %d:",t);
 80017c4:	4e3e      	ldr	r6, [pc, #248]	; (80018c0 <opc_stop+0x144>)
    gpio_pin_set(gpiob,3,1);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2103      	movs	r1, #3
 80017ca:	f00f fa24 	bl	8010c16 <gpio_pin_set.isra.0>
    for (int t=3; t>0; t--) {
 80017ce:	2403      	movs	r4, #3
        LOG_INF("Sending OFF Sequence in %d:",t);
 80017d0:	4627      	mov	r7, r4
 80017d2:	aa03      	add	r2, sp, #12
 80017d4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80017d8:	4630      	mov	r0, r6
 80017da:	e9cd 8404 	strd	r8, r4, [sp, #16]
 80017de:	9703      	str	r7, [sp, #12]
 80017e0:	f00f fa06 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        k_msleep(1000);
 80017e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e8:	f00f fa32 	bl	8010c50 <k_msleep.isra.0>
    for (int t=3; t>0; t--) {
 80017ec:	3c01      	subs	r4, #1
 80017ee:	d1f0      	bne.n	80017d2 <opc_stop+0x56>
                LOG_INF("**** Received 0xF3 and 0x03 :: "
                        "OPC Unit is ready for shutdown sequence...");
                break;
        }
        if (r1 == 49) {
                LOG_INF("Received busy status from OP");
 80017f0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80018cc <opc_stop+0x150>
 80017f4:	4f32      	ldr	r7, [pc, #200]	; (80018c0 <opc_stop+0x144>)

        }		
        k_msleep(600);

        if (c == 10) {
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 80017f6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80018d0 <opc_stop+0x154>
        r1 = opc_send_command(0x03);
 80017fa:	2003      	movs	r0, #3
 80017fc:	f7ff fec6 	bl	800158c <opc_send_command>
 8001800:	4606      	mov	r6, r0
        k_msleep(10);
 8001802:	200a      	movs	r0, #10
 8001804:	f00f fa24 	bl	8010c50 <k_msleep.isra.0>
        r2 = opc_send_command(0x01);
 8001808:	2001      	movs	r0, #1
 800180a:	f7ff febf 	bl	800158c <opc_send_command>
        if (r1 == 243 && r2 == 3) {
 800180e:	2ef3      	cmp	r6, #243	; 0xf3
 8001810:	d12b      	bne.n	800186a <opc_stop+0xee>
 8001812:	2803      	cmp	r0, #3
 8001814:	d135      	bne.n	8001882 <opc_stop+0x106>
                LOG_INF("**** Received 0xF3 and 0x03 :: "
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <opc_stop+0x158>)
                k_msleep(5000);	
        }
        if (c > 20) {
            LOG_INF("Couldn't confirm off command status");
 8001818:	9304      	str	r3, [sp, #16]
 800181a:	aa03      	add	r2, sp, #12
 800181c:	2302      	movs	r3, #2
 800181e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001822:	4827      	ldr	r0, [pc, #156]	; (80018c0 <opc_stop+0x144>)
 8001824:	9303      	str	r3, [sp, #12]
 8001826:	f00f f9e3 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
            break;
        }				
        c++;
    }
    k_msleep(2000);
 800182a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800182e:	f00f fa0f 	bl	8010c50 <k_msleep.isra.0>
    gpio_pin_set(gpiob,3,0);
 8001832:	6828      	ldr	r0, [r5, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	2103      	movs	r1, #3
 8001838:	f00f f9ed 	bl	8010c16 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,4,0);
 800183c:	6828      	ldr	r0, [r5, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	2104      	movs	r1, #4
 8001842:	f00f f9e8 	bl	8010c16 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,7,0);
 8001846:	6828      	ldr	r0, [r5, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	2107      	movs	r1, #7
 800184c:	f00f f9e3 	bl	8010c16 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,6,0);    
 8001850:	6828      	ldr	r0, [r5, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	2106      	movs	r1, #6
 8001856:	f00f f9de 	bl	8010c16 <gpio_pin_set.isra.0>
    gpio_pin_set(gpiob,5,0);
 800185a:	6828      	ldr	r0, [r5, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	2105      	movs	r1, #5
}
 8001860:	b007      	add	sp, #28
 8001862:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    gpio_pin_set(gpiob,5,0);
 8001866:	f00f b9d6 	b.w	8010c16 <gpio_pin_set.isra.0>
        if (r1 == 49) {
 800186a:	2e31      	cmp	r6, #49	; 0x31
 800186c:	d109      	bne.n	8001882 <opc_stop+0x106>
                LOG_INF("Received busy status from OP");
 800186e:	2302      	movs	r3, #2
 8001870:	aa03      	add	r2, sp, #12
 8001872:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001876:	4638      	mov	r0, r7
 8001878:	f8cd 8010 	str.w	r8, [sp, #16]
 800187c:	9303      	str	r3, [sp, #12]
 800187e:	f00f f9b7 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        k_msleep(600);
 8001882:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001886:	f00f f9e3 	bl	8010c50 <k_msleep.isra.0>
        if (c == 10) {
 800188a:	2c0a      	cmp	r4, #10
 800188c:	b2e3      	uxtb	r3, r4
 800188e:	d10f      	bne.n	80018b0 <opc_stop+0x134>
                LOG_INF("Waiting 5s for OPC's buffer to reset");
 8001890:	2302      	movs	r3, #2
 8001892:	4638      	mov	r0, r7
 8001894:	aa03      	add	r2, sp, #12
 8001896:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800189a:	f8cd 9010 	str.w	r9, [sp, #16]
 800189e:	9303      	str	r3, [sp, #12]
 80018a0:	f00f f9a6 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
                k_msleep(5000);	
 80018a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80018a8:	f00f f9d2 	bl	8010c50 <k_msleep.isra.0>
    while(1) {
 80018ac:	3401      	adds	r4, #1
        r1 = opc_send_command(0x03);
 80018ae:	e7a4      	b.n	80017fa <opc_stop+0x7e>
        if (c > 20) {
 80018b0:	2b15      	cmp	r3, #21
 80018b2:	d1fb      	bne.n	80018ac <opc_stop+0x130>
            LOG_INF("Couldn't confirm off command status");
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <opc_stop+0x15c>)
 80018b6:	e7af      	b.n	8001818 <opc_stop+0x9c>
 80018b8:	08017bdf 	.word	0x08017bdf
 80018bc:	08017cc4 	.word	0x08017cc4
 80018c0:	08016f20 	.word	0x08016f20
 80018c4:	20000f60 	.word	0x20000f60
 80018c8:	08017ce2 	.word	0x08017ce2
 80018cc:	08017c73 	.word	0x08017c73
 80018d0:	08017c90 	.word	0x08017c90
 80018d4:	08017cfe 	.word	0x08017cfe
 80018d8:	08017d48 	.word	0x08017d48

080018dc <opc_read_histogram>:



/* * * * * * * * * Read Histogram * * * * * * * * * */

struct histogram opc_read_histogram(uint8_t samples) {
 80018dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e0:	b0dd      	sub	sp, #372	; 0x174
    
    
    
    
  
    for (uint8_t s=0; s<samples; s++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	9305      	str	r3, [sp, #20]
        LOG_INF("READING SAMPLE %d",s);
 80018e6:	4d28      	ldr	r5, [pc, #160]	; (8001988 <opc_read_histogram+0xac>)
struct histogram opc_read_histogram(uint8_t samples) {
 80018e8:	9004      	str	r0, [sp, #16]
    result.pm10 = 0;
 80018ea:	2300      	movs	r3, #0
struct histogram opc_read_histogram(uint8_t samples) {
 80018ec:	910d      	str	r1, [sp, #52]	; 0x34
    result.pm10 = 0;
 80018ee:	930a      	str	r3, [sp, #40]	; 0x28
    result.pm25 = 0;
 80018f0:	9306      	str	r3, [sp, #24]
    result.pm1  = 0;
 80018f2:	9309      	str	r3, [sp, #36]	; 0x24
    result.period = 0;
 80018f4:	9308      	str	r3, [sp, #32]
    result.sfr = 0;
 80018f6:	9307      	str	r3, [sp, #28]
    for (uint8_t s=0; s<samples; s++) {
 80018f8:	9b05      	ldr	r3, [sp, #20]
 80018fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d149      	bne.n	8001994 <opc_read_histogram+0xb8>
        result.period = result.period + data.period;
        result.sfr = result.sfr + data.sfr;
        
    }
    
    LOG_INF("Calculating OPC data average");
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <opc_read_histogram+0xb0>)
 8001902:	4821      	ldr	r0, [pc, #132]	; (8001988 <opc_read_histogram+0xac>)
 8001904:	9350      	str	r3, [sp, #320]	; 0x140
 8001906:	aa4f      	add	r2, sp, #316	; 0x13c
 8001908:	2502      	movs	r5, #2
 800190a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800190e:	954f      	str	r5, [sp, #316]	; 0x13c
 8001910:	f00f f96e 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
    // Calculate Average
    result.pm1 = result.pm1 / samples;
 8001914:	9805      	ldr	r0, [sp, #20]
 8001916:	f7fe ff01 	bl	800071c <__aeabi_i2f>
 800191a:	4604      	mov	r4, r0
 800191c:	4601      	mov	r1, r0
 800191e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001920:	f7ff f804 	bl	800092c <__aeabi_fdiv>
    result.pm25 = result.pm25 / samples;
 8001924:	4621      	mov	r1, r4
    result.pm1 = result.pm1 / samples;
 8001926:	4607      	mov	r7, r0
    result.pm25 = result.pm25 / samples;
 8001928:	9806      	ldr	r0, [sp, #24]
 800192a:	f7fe ffff 	bl	800092c <__aeabi_fdiv>
    result.pm10 = result.pm10 / samples;
 800192e:	4621      	mov	r1, r4
    result.pm25 = result.pm25 / samples;
 8001930:	4680      	mov	r8, r0
    result.pm10 = result.pm10 / samples;
 8001932:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001934:	f7fe fffa 	bl	800092c <__aeabi_fdiv>
    result.period = result.period / samples;
 8001938:	4621      	mov	r1, r4
    result.pm10 = result.pm10 / samples;
 800193a:	4606      	mov	r6, r0
    result.period = result.period / samples;
 800193c:	9808      	ldr	r0, [sp, #32]
 800193e:	f7fe fff5 	bl	800092c <__aeabi_fdiv>
    result.sfr = result.sfr / samples;
 8001942:	4621      	mov	r1, r4
    result.period = result.period / samples;
 8001944:	4681      	mov	r9, r0
    result.sfr = result.sfr / samples;
 8001946:	9807      	ldr	r0, [sp, #28]
 8001948:	f7fe fff0 	bl	800092c <__aeabi_fdiv>

    

    
    LOG_INF("Returning OPC read result...");
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <opc_read_histogram+0xb4>)
    result.sfr = result.sfr / samples;
 800194e:	4604      	mov	r4, r0
    LOG_INF("Returning OPC read result...");
 8001950:	aa4f      	add	r2, sp, #316	; 0x13c
 8001952:	480d      	ldr	r0, [pc, #52]	; (8001988 <opc_read_histogram+0xac>)
 8001954:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001958:	e9cd 534f 	strd	r5, r3, [sp, #316]	; 0x13c
 800195c:	f00f f948 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
    return result;
 8001960:	9a04      	ldr	r2, [sp, #16]
 8001962:	9b04      	ldr	r3, [sp, #16]
 8001964:	f8c2 9098 	str.w	r9, [r2, #152]	; 0x98
 8001968:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
}
 800196c:	4610      	mov	r0, r2
    return result;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001974:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
 8001978:	f8c2 80a4 	str.w	r8, [r2, #164]	; 0xa4
 800197c:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
}
 8001980:	b05d      	add	sp, #372	; 0x174
 8001982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001986:	bf00      	nop
 8001988:	08016f20 	.word	0x08016f20
 800198c:	08017e37 	.word	0x08017e37
 8001990:	08017e54 	.word	0x08017e54
        LOG_INF("READING SAMPLE %d",s);
 8001994:	4bb7      	ldr	r3, [pc, #732]	; (8001c74 <opc_read_histogram+0x398>)
 8001996:	9350      	str	r3, [sp, #320]	; 0x140
 8001998:	9b05      	ldr	r3, [sp, #20]
 800199a:	48b7      	ldr	r0, [pc, #732]	; (8001c78 <opc_read_histogram+0x39c>)
 800199c:	9351      	str	r3, [sp, #324]	; 0x144
 800199e:	aa4f      	add	r2, sp, #316	; 0x13c
 80019a0:	2303      	movs	r3, #3
 80019a2:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80019a6:	934f      	str	r3, [sp, #316]	; 0x13c
 80019a8:	f00f f922 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
        r = opc_send_command(0x30);
 80019ac:	2030      	movs	r0, #48	; 0x30
 80019ae:	f7ff fded 	bl	800158c <opc_send_command>
 80019b2:	900b      	str	r0, [sp, #44]	; 0x2c
        k_msleep(12);
 80019b4:	200c      	movs	r0, #12
 80019b6:	f00f f94b 	bl	8010c50 <k_msleep.isra.0>
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80019ba:	2301      	movs	r3, #1
 80019bc:	a912      	add	r1, sp, #72	; 0x48
        struct spi_buf spi_buf_rx[] = {{.buf = rx_buf,.len = sizeof(rx_buf)},};
 80019be:	aa14      	add	r2, sp, #80	; 0x50
 80019c0:	a80f      	add	r0, sp, #60	; 0x3c
 80019c2:	e9cd 0314 	strd	r0, r3, [sp, #80]	; 0x50
        struct spi_buf_set tx = {.buffers = spi_buf_tx,.count = 1};
 80019c6:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
        struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 80019ca:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80019ce:	9313      	str	r3, [sp, #76]	; 0x4c
        if (r == 243) {
 80019d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80019d2:	af0e      	add	r7, sp, #56	; 0x38
        if (r == 243) {
 80019d4:	2bf3      	cmp	r3, #243	; 0xf3
        struct spi_buf spi_buf_tx[] = {{.buf = tx_buf,.len = sizeof(tx_buf)},};
 80019d6:	9712      	str	r7, [sp, #72]	; 0x48
        struct spi_buf_set rx = {.buffers = spi_buf_rx,.count = 1};
 80019d8:	ac18      	add	r4, sp, #96	; 0x60
        if (r == 243) {
 80019da:	d130      	bne.n	8001a3e <opc_read_histogram+0x162>
            LOG_INF("Histogram %d is READY!!!!",s);
 80019dc:	4ba7      	ldr	r3, [pc, #668]	; (8001c7c <opc_read_histogram+0x3a0>)
 80019de:	9350      	str	r3, [sp, #320]	; 0x140
 80019e0:	9b05      	ldr	r3, [sp, #20]
 80019e2:	9351      	str	r3, [sp, #324]	; 0x144
 80019e4:	aa4f      	add	r2, sp, #316	; 0x13c
 80019e6:	2303      	movs	r3, #3
 80019e8:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80019ec:	4628      	mov	r0, r5
 80019ee:	934f      	str	r3, [sp, #316]	; 0x13c
 80019f0:	f00f f8fe 	bl	8010bf0 <z_log_msg2_static_create.constprop.0>
            gpio_pin_set(gpioa,4,0);
 80019f4:	4ba2      	ldr	r3, [pc, #648]	; (8001c80 <opc_read_histogram+0x3a4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	2104      	movs	r1, #4
 80019fc:	f00f f90b 	bl	8010c16 <gpio_pin_set.isra.0>
            for (int i=0; i<61; i++) {
 8001a00:	ab4c      	add	r3, sp, #304	; 0x130
 8001a02:	930c      	str	r3, [sp, #48]	; 0x30
                spi_transceive(spi, &spi_cfg, &tx, &rx);
 8001a04:	4622      	mov	r2, r4
            for (int i=0; i<61; i++) {
 8001a06:	2300      	movs	r3, #0
                spi_transceive(spi, &spi_cfg, &tx, &rx);
 8001a08:	4c9e      	ldr	r4, [pc, #632]	; (8001c84 <opc_read_histogram+0x3a8>)
            for (int i=0; i<61; i++) {
 8001a0a:	930b      	str	r3, [sp, #44]	; 0x2c
                tx_buf[0] = 0xC0;
 8001a0c:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8001a10:	703b      	strb	r3, [r7, #0]
                spi_transceive(spi, &spi_cfg, &tx, &rx);
 8001a12:	6820      	ldr	r0, [r4, #0]
 8001a14:	a916      	add	r1, sp, #88	; 0x58
 8001a16:	f7ff fd37 	bl	8001488 <spi_transceive.constprop.0.isra.0>
                vals[i] = rx_buf[0];
 8001a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a1c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8001a20:	f802 3b01 	strb.w	r3, [r2], #1
            for (int i=0; i<61; i++) {
 8001a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                vals[i] = rx_buf[0];
 8001a26:	920c      	str	r2, [sp, #48]	; 0x30
            for (int i=0; i<61; i++) {
 8001a28:	3301      	adds	r3, #1
 8001a2a:	2b3d      	cmp	r3, #61	; 0x3d
 8001a2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a2e:	aa18      	add	r2, sp, #96	; 0x60
 8001a30:	d1ec      	bne.n	8001a0c <opc_read_histogram+0x130>
            gpio_pin_set(gpioa,4,1);
 8001a32:	4b93      	ldr	r3, [pc, #588]	; (8001c80 <opc_read_histogram+0x3a4>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	2104      	movs	r1, #4
 8001a3a:	f00f f8ec 	bl	8010c16 <gpio_pin_set.isra.0>
        LOG_HEXDUMP_INF(vals, 62, "Histogram: ");
 8001a3e:	4b92      	ldr	r3, [pc, #584]	; (8001c88 <opc_read_histogram+0x3ac>)
 8001a40:	9303      	str	r3, [sp, #12]
 8001a42:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <opc_read_histogram+0x3b0>)
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2400      	movs	r4, #0
 8001a48:	233e      	movs	r3, #62	; 0x3e
 8001a4a:	e9cd 3400 	strd	r3, r4, [sp]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	ab4c      	add	r3, sp, #304	; 0x130
 8001a52:	4629      	mov	r1, r5
 8001a54:	4620      	mov	r0, r4
 8001a56:	f00f f8ce 	bl	8010bf6 <z_log_msg2_runtime_create.constprop.0>
  u.b[0] = val0;
 8001a5a:	f89d 015c 	ldrb.w	r0, [sp, #348]	; 0x15c
        data.period = calculate_float(vals[44], vals[45], vals[46], vals[47]);
 8001a5e:	f89d 115d 	ldrb.w	r1, [sp, #349]	; 0x15d
 8001a62:	f89d 215e 	ldrb.w	r2, [sp, #350]	; 0x15e
 8001a66:	f89d 315f 	ldrb.w	r3, [sp, #351]	; 0x15f
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8001a6a:	f89d 716a 	ldrb.w	r7, [sp, #362]	; 0x16a
 8001a6e:	f89d e16b 	ldrb.w	lr, [sp, #363]	; 0x16b
 8001a72:	f89d c16c 	ldrb.w	ip, [sp, #364]	; 0x16c
        testpm10[1] = vals[59];
 8001a76:	f88d e041 	strb.w	lr, [sp, #65]	; 0x41
  u.b[0] = val0;
 8001a7a:	f360 0807 	bfi	r8, r0, #0, #8
 8001a7e:	f89d 0154 	ldrb.w	r0, [sp, #340]	; 0x154
        testpm10[2] = vals[60];
 8001a82:	f88d c042 	strb.w	ip, [sp, #66]	; 0x42
  u.b[1] = val1;
 8001a86:	f361 280f 	bfi	r8, r1, #8, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 8001a8a:	f89d 1155 	ldrb.w	r1, [sp, #341]	; 0x155
  u.b[2] = val2;
 8001a8e:	f362 4817 	bfi	r8, r2, #16, #8
  u.b[0] = val0;
 8001a92:	f360 0607 	bfi	r6, r0, #0, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 8001a96:	f89d 2156 	ldrb.w	r2, [sp, #342]	; 0x156
  u.b[0] = val0;
 8001a9a:	f89d 0162 	ldrb.w	r0, [sp, #354]	; 0x162
  u.b[3] = val3;
 8001a9e:	f363 681f 	bfi	r8, r3, #24, #8
  u.b[1] = val1;
 8001aa2:	f361 260f 	bfi	r6, r1, #8, #8
        data.sfr    = calculate_float(vals[36], vals[37], vals[38], vals[39]);
 8001aa6:	f89d 3157 	ldrb.w	r3, [sp, #343]	; 0x157
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 8001aaa:	f89d 1163 	ldrb.w	r1, [sp, #355]	; 0x163
  u.b[2] = val2;
 8001aae:	f362 4617 	bfi	r6, r2, #16, #8
  u.b[0] = val0;
 8001ab2:	f360 0a07 	bfi	sl, r0, #0, #8
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 8001ab6:	f89d 2164 	ldrb.w	r2, [sp, #356]	; 0x164
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 8001aba:	f89d 0166 	ldrb.w	r0, [sp, #358]	; 0x166
        testpm25[0] = vals[54];
 8001abe:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
  u.b[3] = val3;
 8001ac2:	f363 661f 	bfi	r6, r3, #24, #8
  u.b[1] = val1;
 8001ac6:	f361 2a0f 	bfi	sl, r1, #8, #8
        data.pm1 =  calculate_float(vals[50], vals[51], vals[52], vals[53]);
 8001aca:	f89d 3165 	ldrb.w	r3, [sp, #357]	; 0x165
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 8001ace:	f89d 1167 	ldrb.w	r1, [sp, #359]	; 0x167
        testpm25[1] = vals[55];
 8001ad2:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
  u.b[2] = val2;
 8001ad6:	f362 4a17 	bfi	sl, r2, #16, #8
  u.b[3] = val3;
 8001ada:	f363 6a1f 	bfi	sl, r3, #24, #8
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 8001ade:	f89d 3168 	ldrb.w	r3, [sp, #360]	; 0x168
 8001ae2:	930b      	str	r3, [sp, #44]	; 0x2c
  u.b[2] = val2;
 8001ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        data.pm25 = calculate_float(vals[54], vals[55], vals[56], vals[57]);
 8001ae6:	f89d 3169 	ldrb.w	r3, [sp, #361]	; 0x169
        testpm25[3] = vals[57];        
 8001aea:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
  u.b[0] = val0;
 8001aee:	f360 0b07 	bfi	fp, r0, #0, #8
  u.b[1] = val1;
 8001af2:	f361 2b0f 	bfi	fp, r1, #8, #8
  u.b[2] = val2;
 8001af6:	f362 4b17 	bfi	fp, r2, #16, #8
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8001afa:	463a      	mov	r2, r7
  u.b[0] = val0;
 8001afc:	f362 0907 	bfi	r9, r2, #0, #8
  u.b[1] = val1;
 8001b00:	f36e 290f 	bfi	r9, lr, #8, #8
        data.pm10 = calculate_float(vals[58], vals[59], vals[60], vals[61]);
 8001b04:	f89d 716d 	ldrb.w	r7, [sp, #365]	; 0x16d
        testpm10[0] = vals[58];
 8001b08:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
  u.b[3] = val3;
 8001b0c:	f363 6b1f 	bfi	fp, r3, #24, #8
        LOG_HEXDUMP_INF(testpm10, 4, "PM10 Bytes: ");
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <opc_read_histogram+0x3b4>)
        testpm25[2] = vals[56];
 8001b12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        LOG_HEXDUMP_INF(testpm10, 4, "PM10 Bytes: ");
 8001b14:	9303      	str	r3, [sp, #12]
  u.b[2] = val2;
 8001b16:	f36c 4917 	bfi	r9, ip, #16, #8
        LOG_HEXDUMP_INF(testpm10, 4, "PM10 Bytes: ");
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <opc_read_histogram+0x3b0>)
        testpm10[3] = vals[61];
 8001b1c:	f88d 7043 	strb.w	r7, [sp, #67]	; 0x43
  u.b[3] = val3;
 8001b20:	f367 691f 	bfi	r9, r7, #24, #8
        testpm25[2] = vals[56];
 8001b24:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
        LOG_HEXDUMP_INF(testpm10, 4, "PM10 Bytes: ");
 8001b28:	2704      	movs	r7, #4
 8001b2a:	aa10      	add	r2, sp, #64	; 0x40
 8001b2c:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001b30:	4629      	mov	r1, r5
 8001b32:	4613      	mov	r3, r2
 8001b34:	9700      	str	r7, [sp, #0]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f00f f85c 	bl	8010bf6 <z_log_msg2_runtime_create.constprop.0>
        LOG_HEXDUMP_INF(testpm25, 4, "PM25 Bytes: ");
 8001b3e:	4b55      	ldr	r3, [pc, #340]	; (8001c94 <opc_read_histogram+0x3b8>)
 8001b40:	9303      	str	r3, [sp, #12]
 8001b42:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <opc_read_histogram+0x3b0>)
 8001b44:	9700      	str	r7, [sp, #0]
 8001b46:	2203      	movs	r2, #3
 8001b48:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	ab11      	add	r3, sp, #68	; 0x44
 8001b50:	4620      	mov	r0, r4
 8001b52:	f00f f850 	bl	8010bf6 <z_log_msg2_runtime_create.constprop.0>
        snprintfcb(fperiod, 40, "%0.2f", data.period);
 8001b56:	4640      	mov	r0, r8
 8001b58:	f7fe fca6 	bl	80004a8 <__aeabi_f2d>
 8001b5c:	4a4e      	ldr	r2, [pc, #312]	; (8001c98 <opc_read_histogram+0x3bc>)
 8001b5e:	e9cd 0100 	strd	r0, r1, [sp]
 8001b62:	2128      	movs	r1, #40	; 0x28
 8001b64:	a81a      	add	r0, sp, #104	; 0x68
 8001b66:	f00f f88f 	bl	8010c88 <snprintfcb>
        snprintfcb(fpm1, 40, "%0.2f", data.pm1);
 8001b6a:	4650      	mov	r0, sl
 8001b6c:	f7fe fc9c 	bl	80004a8 <__aeabi_f2d>
 8001b70:	4a49      	ldr	r2, [pc, #292]	; (8001c98 <opc_read_histogram+0x3bc>)
 8001b72:	e9cd 0100 	strd	r0, r1, [sp]
 8001b76:	2128      	movs	r1, #40	; 0x28
 8001b78:	a824      	add	r0, sp, #144	; 0x90
 8001b7a:	f00f f885 	bl	8010c88 <snprintfcb>
        snprintfcb(fpm25, 40, "%0.2f", data.pm25);
 8001b7e:	4658      	mov	r0, fp
 8001b80:	f7fe fc92 	bl	80004a8 <__aeabi_f2d>
 8001b84:	4a44      	ldr	r2, [pc, #272]	; (8001c98 <opc_read_histogram+0x3bc>)
 8001b86:	e9cd 0100 	strd	r0, r1, [sp]
 8001b8a:	2128      	movs	r1, #40	; 0x28
 8001b8c:	a82e      	add	r0, sp, #184	; 0xb8
 8001b8e:	f00f f87b 	bl	8010c88 <snprintfcb>
        snprintfcb(fpm10, 40, "%0.2f", data.pm10);
 8001b92:	4648      	mov	r0, r9
 8001b94:	f7fe fc88 	bl	80004a8 <__aeabi_f2d>
 8001b98:	af38      	add	r7, sp, #224	; 0xe0
 8001b9a:	e9cd 0100 	strd	r0, r1, [sp]
 8001b9e:	4a3e      	ldr	r2, [pc, #248]	; (8001c98 <opc_read_histogram+0x3bc>)
 8001ba0:	2128      	movs	r1, #40	; 0x28
 8001ba2:	4638      	mov	r0, r7
 8001ba4:	f00f f870 	bl	8010c88 <snprintfcb>
        snprintfcb(fflowrate, 40, "%0.2f", data.sfr);
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f7fe fc7d 	bl	80004a8 <__aeabi_f2d>
 8001bae:	4a3a      	ldr	r2, [pc, #232]	; (8001c98 <opc_read_histogram+0x3bc>)
 8001bb0:	e9cd 0100 	strd	r0, r1, [sp]
 8001bb4:	2128      	movs	r1, #40	; 0x28
 8001bb6:	a842      	add	r0, sp, #264	; 0x108
 8001bb8:	f00f f866 	bl	8010c88 <snprintfcb>
        LOG_INF("Sampling Period: %s", fperiod);
 8001bbc:	ab1a      	add	r3, sp, #104	; 0x68
 8001bbe:	9303      	str	r3, [sp, #12]
 8001bc0:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <opc_read_histogram+0x3c0>)
 8001bc2:	9400      	str	r4, [sp, #0]
 8001bc4:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	4623      	mov	r3, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f00f f811 	bl	8010bf6 <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("Sample Flow Rate: %s",fflowrate);
 8001bd4:	ab42      	add	r3, sp, #264	; 0x108
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <opc_read_histogram+0x3c4>)
 8001bda:	9400      	str	r4, [sp, #0]
 8001bdc:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	4623      	mov	r3, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	4620      	mov	r0, r4
 8001be8:	f00f f805 	bl	8010bf6 <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM1: %s", fpm1);
 8001bec:	ab24      	add	r3, sp, #144	; 0x90
 8001bee:	9303      	str	r3, [sp, #12]
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <opc_read_histogram+0x3c8>)
 8001bf2:	9400      	str	r4, [sp, #0]
 8001bf4:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f00e fff9 	bl	8010bf6 <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM2.5: %s", fpm25);
 8001c04:	ab2e      	add	r3, sp, #184	; 0xb8
 8001c06:	9303      	str	r3, [sp, #12]
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <opc_read_histogram+0x3cc>)
 8001c0a:	9400      	str	r4, [sp, #0]
 8001c0c:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	4623      	mov	r3, r4
 8001c14:	4629      	mov	r1, r5
 8001c16:	4620      	mov	r0, r4
 8001c18:	f00e ffed 	bl	8010bf6 <z_log_msg2_runtime_create.constprop.0>
        LOG_INF("PM10: %s", fpm10);
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <opc_read_histogram+0x3d0>)
 8001c1e:	9703      	str	r7, [sp, #12]
 8001c20:	2203      	movs	r2, #3
 8001c22:	4629      	mov	r1, r5
 8001c24:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	9400      	str	r4, [sp, #0]
 8001c2e:	f00e ffe2 	bl	8010bf6 <z_log_msg2_runtime_create.constprop.0>
        k_msleep(5000);
 8001c32:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c36:	f00f f80b 	bl	8010c50 <k_msleep.isra.0>
        result.pm1  = result.pm1 + data.pm1;
 8001c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c3c:	4651      	mov	r1, sl
 8001c3e:	f7fe fcb9 	bl	80005b4 <__addsf3>
        result.pm10 = result.pm10 + data.pm10;
 8001c42:	4649      	mov	r1, r9
        result.pm1  = result.pm1 + data.pm1;
 8001c44:	9009      	str	r0, [sp, #36]	; 0x24
        result.pm10 = result.pm10 + data.pm10;
 8001c46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001c48:	f7fe fcb4 	bl	80005b4 <__addsf3>
        result.pm25 = result.pm25 + data.pm25;
 8001c4c:	4659      	mov	r1, fp
        result.pm10 = result.pm10 + data.pm10;
 8001c4e:	900a      	str	r0, [sp, #40]	; 0x28
        result.pm25 = result.pm25 + data.pm25;
 8001c50:	9806      	ldr	r0, [sp, #24]
 8001c52:	f7fe fcaf 	bl	80005b4 <__addsf3>
        result.period = result.period + data.period;
 8001c56:	4641      	mov	r1, r8
        result.pm25 = result.pm25 + data.pm25;
 8001c58:	9006      	str	r0, [sp, #24]
        result.period = result.period + data.period;
 8001c5a:	9808      	ldr	r0, [sp, #32]
 8001c5c:	f7fe fcaa 	bl	80005b4 <__addsf3>
        result.sfr = result.sfr + data.sfr;
 8001c60:	4631      	mov	r1, r6
        result.period = result.period + data.period;
 8001c62:	9008      	str	r0, [sp, #32]
        result.sfr = result.sfr + data.sfr;
 8001c64:	9807      	ldr	r0, [sp, #28]
 8001c66:	f7fe fca5 	bl	80005b4 <__addsf3>
 8001c6a:	9b05      	ldr	r3, [sp, #20]
 8001c6c:	9007      	str	r0, [sp, #28]
    for (uint8_t s=0; s<samples; s++) {
 8001c6e:	3301      	adds	r3, #1
 8001c70:	9305      	str	r3, [sp, #20]
 8001c72:	e641      	b.n	80018f8 <opc_read_histogram+0x1c>
 8001c74:	08017da1 	.word	0x08017da1
 8001c78:	08016f20 	.word	0x08016f20
 8001c7c:	08017db3 	.word	0x08017db3
 8001c80:	20000f5c 	.word	0x20000f5c
 8001c84:	20000f64 	.word	0x20000f64
 8001c88:	08017dcd 	.word	0x08017dcd
 8001c8c:	080184da 	.word	0x080184da
 8001c90:	08017dd9 	.word	0x08017dd9
 8001c94:	08017de6 	.word	0x08017de6
 8001c98:	08017b15 	.word	0x08017b15
 8001c9c:	08017df3 	.word	0x08017df3
 8001ca0:	08017e07 	.word	0x08017e07
 8001ca4:	08017e1c 	.word	0x08017e1c
 8001ca8:	08017e24 	.word	0x08017e24
 8001cac:	08017e2e 	.word	0x08017e2e

08001cb0 <init_time_system>:

    LOG_INF("Found device \"%s\", getting sensor data", dev->name);
    return dev;
}        

void init_time_system() {
 8001cb0:	b530      	push	{r4, r5, lr}
 8001cb2:	b08b      	sub	sp, #44	; 0x2c
 8001cb4:	4817      	ldr	r0, [pc, #92]	; (8001d14 <init_time_system+0x64>)
 8001cb6:	f00b fd13 	bl	800d6e0 <z_impl_device_get_binding>
    if (dev == NULL) {
 8001cba:	4604      	mov	r4, r0
 8001cbc:	b970      	cbnz	r0, 8001cdc <init_time_system+0x2c>
        LOG_ERR("\nError: no device DS3231 found.\n");
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <init_time_system+0x68>)
 8001cc0:	9308      	str	r3, [sp, #32]
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	9307      	str	r3, [sp, #28]
 8001cc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001cca:	4603      	mov	r3, r0
 8001ccc:	aa07      	add	r2, sp, #28
 8001cce:	4813      	ldr	r0, [pc, #76]	; (8001d1c <init_time_system+0x6c>)
 8001cd0:	f00f fbdb 	bl	801148a <z_impl_z_log_msg2_static_create>
    
    dev_ds3231 = get_ds3231_device();
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <init_time_system+0x70>)
 8001cd6:	601c      	str	r4, [r3, #0]
    if (dev_ds3231 == NULL) {
        return;
    }
    
}
 8001cd8:	b00b      	add	sp, #44	; 0x2c
 8001cda:	bd30      	pop	{r4, r5, pc}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8001cdc:	f014 f8b9 	bl	8015e52 <z_device_is_ready>
 8001ce0:	6823      	ldr	r3, [r4, #0]
        LOG_ERR("\nError: Device \"%s\" is not ready; "
 8001ce2:	9303      	str	r3, [sp, #12]
    if (!device_is_ready(dev)) {
 8001ce4:	4605      	mov	r5, r0
 8001ce6:	b950      	cbnz	r0, 8001cfe <init_time_system+0x4e>
        LOG_ERR("\nError: Device \"%s\" is not ready; "
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <init_time_system+0x74>)
 8001cea:	490c      	ldr	r1, [pc, #48]	; (8001d1c <init_time_system+0x6c>)
 8001cec:	9000      	str	r0, [sp, #0]
 8001cee:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f00e ffb0 	bl	8010c5a <z_log_msg2_runtime_create.constprop.0>
        return NULL;
 8001cfa:	462c      	mov	r4, r5
 8001cfc:	e7ea      	b.n	8001cd4 <init_time_system+0x24>
    LOG_INF("Found device \"%s\", getting sensor data", dev->name);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <init_time_system+0x78>)
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2300      	movs	r3, #0
 8001d04:	e9cd 3300 	strd	r3, r3, [sp]
 8001d08:	4904      	ldr	r1, [pc, #16]	; (8001d1c <init_time_system+0x6c>)
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00e ffa4 	bl	8010c5a <z_log_msg2_runtime_create.constprop.0>
    return dev;
 8001d12:	e7df      	b.n	8001cd4 <init_time_system+0x24>
 8001d14:	08017e75 	.word	0x08017e75
 8001d18:	08017e7c 	.word	0x08017e7c
 8001d1c:	08016f58 	.word	0x08016f58
 8001d20:	20000f74 	.word	0x20000f74
 8001d24:	08017e9d 	.word	0x08017e9d
 8001d28:	08017ef1 	.word	0x08017ef1

08001d2c <format_time>:
        .syncclock = syncclock,
    };

    return format_time(sp.rtc.tv_sec, sp.rtc.tv_nsec);
}
char *format_time(time_t time, long nsec) {
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	b08c      	sub	sp, #48	; 0x30
 8001d30:	e9cd 0100 	strd	r0, r1, [sp]
    static char buf[64];
    char *bp = buf;
    char *const bpe = bp + sizeof (buf);
    struct tm tv;
    struct tm *tp = gmtime_r(&time, &tv);
 8001d34:	a903      	add	r1, sp, #12
 8001d36:	4668      	mov	r0, sp
 8001d38:	f00c ff92 	bl	800ec60 <gmtime_r>

    bp += strftime(bp, bpe - bp, "%Y-%m-%d %H:%M:%S", tp);
 8001d3c:	4c04      	ldr	r4, [pc, #16]	; (8001d50 <format_time+0x24>)
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <format_time+0x28>)
    struct tm *tp = gmtime_r(&time, &tv);
 8001d40:	4603      	mov	r3, r0
    bp += strftime(bp, bpe - bp, "%Y-%m-%d %H:%M:%S", tp);
 8001d42:	2140      	movs	r1, #64	; 0x40
 8001d44:	4620      	mov	r0, r4
 8001d46:	f014 fc4f 	bl	80165e8 <strftime>
        bp += snprintf(bp, bpe - bp, ".%09lu", nsec);
    }
    bp += strftime(bp, bpe - bp, " %a %j", tp);
    */
    return buf;
}
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	b00c      	add	sp, #48	; 0x30
 8001d4e:	bd10      	pop	{r4, pc}
 8001d50:	20002302 	.word	0x20002302
 8001d54:	08017f18 	.word	0x08017f18

08001d58 <get_formatted_time>:
char* get_formatted_time() {
 8001d58:	b530      	push	{r4, r5, lr}
 8001d5a:	b089      	sub	sp, #36	; 0x24
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 8001d5c:	f014 fa7f 	bl	801625e <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8001d60:	220a      	movs	r2, #10
 8001d62:	2300      	movs	r3, #0
 8001d64:	f7fe fece 	bl	8000b04 <__aeabi_uldivmod>
    int rc = counter_get_value(dev_ds3231, &now);
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <get_formatted_time+0x5c>)
    uint32_t now = 0;
 8001d6a:	2500      	movs	r5, #0
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	9501      	str	r5, [sp, #4]
    int rc = counter_get_value(dev_ds3231, &now);
 8001d70:	6818      	ldr	r0, [r3, #0]
					   uint32_t *ticks)
{
	const struct counter_driver_api *api =
				(struct counter_driver_api *)dev->api;

	return api->get_value(dev, ticks);
 8001d72:	6883      	ldr	r3, [r0, #8]
 8001d74:	a901      	add	r1, sp, #4
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4798      	blx	r3
    if (rc < 0) {
 8001d7a:	42a8      	cmp	r0, r5
 8001d7c:	da0a      	bge.n	8001d94 <get_formatted_time+0x3c>
        LOG_ERR("Can't get the counter value");
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <get_formatted_time+0x60>)
 8001d80:	9306      	str	r3, [sp, #24]
 8001d82:	2302      	movs	r3, #2
 8001d84:	9305      	str	r3, [sp, #20]
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <get_formatted_time+0x64>)
 8001d88:	462b      	mov	r3, r5
 8001d8a:	aa05      	add	r2, sp, #20
 8001d8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001d90:	f00f fb7b 	bl	801148a <z_impl_z_log_msg2_static_create>
            .tv_nsec = (uint64_t) NSEC_PER_SEC * syncclock / syncclock_Hz,
 8001d94:	480a      	ldr	r0, [pc, #40]	; (8001dc0 <get_formatted_time+0x68>)
 8001d96:	2300      	movs	r3, #0
 8001d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9c:	fba4 0100 	umull	r0, r1, r4, r0
 8001da0:	f7fe feb0 	bl	8000b04 <__aeabi_uldivmod>
    return format_time(sp.rtc.tv_sec, sp.rtc.tv_nsec);
 8001da4:	2100      	movs	r1, #0
            .tv_nsec = (uint64_t) NSEC_PER_SEC * syncclock / syncclock_Hz,
 8001da6:	4602      	mov	r2, r0
    return format_time(sp.rtc.tv_sec, sp.rtc.tv_nsec);
 8001da8:	9801      	ldr	r0, [sp, #4]
 8001daa:	f7ff ffbf 	bl	8001d2c <format_time>
}
 8001dae:	b009      	add	sp, #36	; 0x24
 8001db0:	bd30      	pop	{r4, r5, pc}
 8001db2:	bf00      	nop
 8001db4:	20000f74 	.word	0x20000f74
 8001db8:	08017f2a 	.word	0x08017f2a
 8001dbc:	08016f58 	.word	0x08016f58
 8001dc0:	3b9aca00 	.word	0x3b9aca00

08001dc4 <vsnprintfcb>:

	return rc;
}

int vsnprintfcb(char *str, size_t size, const char *format, va_list ap)
{
 8001dc4:	b507      	push	{r0, r1, r2, lr}
	struct str_ctx ctx = {
 8001dc6:	9000      	str	r0, [sp, #0]
		.dp = str,
		.dpe = str + size,
 8001dc8:	4408      	add	r0, r1
	struct str_ctx ctx = {
 8001dca:	9001      	str	r0, [sp, #4]
	};
	int rv = cbvprintf(str_out, &ctx, format, ap);
 8001dcc:	4669      	mov	r1, sp
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <vsnprintfcb+0x28>)
 8001dd0:	f000 fb50 	bl	8002474 <cbvprintf>

	if (ctx.dp < ctx.dpe) {
 8001dd4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	f04f 0200 	mov.w	r2, #0
		ctx.dp[0] = 0;
 8001dde:	bf34      	ite	cc
 8001de0:	701a      	strbcc	r2, [r3, #0]
	} else {
		ctx.dp[-1] = 0;
 8001de2:	f803 2c01 	strbcs.w	r2, [r3, #-1]
	}

	return rv;
}
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dec:	08010c79 	.word	0x08010c79

08001df0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 8001df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df4:	b08d      	sub	sp, #52	; 0x34
 8001df6:	461f      	mov	r7, r3
 8001df8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001dfa:	9202      	str	r2, [sp, #8]
 8001dfc:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 8001dfe:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8001e02:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 8001e06:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8001e08:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8001e0a:	0782      	lsls	r2, r0, #30
{
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 8001e10:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
 8001e12:	f040 821c 	bne.w	800224e <cbvprintf_package+0x45e>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 8001e16:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	f040 821b 	bne.w	8002254 <cbvprintf_package+0x464>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 8001e1e:	f001 0607 	and.w	r6, r1, #7
 8001e22:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 8001e24:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8001e28:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
 8001e2c:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
 8001e30:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8001e32:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 8001e36:	4652      	mov	r2, sl
	bool parsing = false;
 8001e38:	4651      	mov	r1, sl
	size = sizeof(char *);
 8001e3a:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 8001e3c:	b105      	cbz	r5, 8001e40 <cbvprintf_package+0x50>
				*(const char **)buf = s;
 8001e3e:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8001e40:	9804      	ldr	r0, [sp, #16]
 8001e42:	2800      	cmp	r0, #0
 8001e44:	dc07      	bgt.n	8001e56 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8001e46:	48c8      	ldr	r0, [pc, #800]	; (8002168 <cbvprintf_package+0x378>)
 8001e48:	4287      	cmp	r7, r0
 8001e4a:	f0c0 8139 	bcc.w	80020c0 <cbvprintf_package+0x2d0>
 8001e4e:	48c7      	ldr	r0, [pc, #796]	; (800216c <cbvprintf_package+0x37c>)
 8001e50:	4287      	cmp	r7, r0
 8001e52:	f080 8135 	bcs.w	80020c0 <cbvprintf_package+0x2d0>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
 8001e56:	9802      	ldr	r0, [sp, #8]
 8001e58:	f010 0e02 	ands.w	lr, r0, #2
 8001e5c:	f000 8149 	beq.w	80020f2 <cbvprintf_package+0x302>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 8001e60:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8001e64:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 8001e66:	f1be 0f00 	cmp.w	lr, #0
 8001e6a:	f000 812f 	beq.w	80020cc <cbvprintf_package+0x2dc>
 8001e6e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001e72:	f0c0 812b 	bcc.w	80020cc <cbvprintf_package+0x2dc>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
 8001e76:	f06f 0015 	mvn.w	r0, #21
 8001e7a:	e0f9      	b.n	8002070 <cbvprintf_package+0x280>
		if (!parsing) {
 8001e7c:	b939      	cbnz	r1, 8001e8e <cbvprintf_package+0x9e>
			if (*fmt == '%') {
 8001e7e:	2825      	cmp	r0, #37	; 0x25
 8001e80:	f040 813b 	bne.w	80020fa <cbvprintf_package+0x30a>
				parsing = true;
 8001e84:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
 8001e86:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
 8001e8a:	46c1      	mov	r9, r8
 8001e8c:	e135      	b.n	80020fa <cbvprintf_package+0x30a>
		switch (*fmt) {
 8001e8e:	282b      	cmp	r0, #43	; 0x2b
 8001e90:	d824      	bhi.n	8001edc <cbvprintf_package+0xec>
 8001e92:	281f      	cmp	r0, #31
 8001e94:	d801      	bhi.n	8001e9a <cbvprintf_package+0xaa>
			parsing = false;
 8001e96:	2100      	movs	r1, #0
 8001e98:	e12f      	b.n	80020fa <cbvprintf_package+0x30a>
 8001e9a:	f1a0 0c20 	sub.w	ip, r0, #32
 8001e9e:	f1bc 0f0b 	cmp.w	ip, #11
 8001ea2:	d8f8      	bhi.n	8001e96 <cbvprintf_package+0xa6>
 8001ea4:	f20f 0e04 	addw	lr, pc, #4
 8001ea8:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
 8001eac:	080020fb 	.word	0x080020fb
 8001eb0:	08001e97 	.word	0x08001e97
 8001eb4:	08001e97 	.word	0x08001e97
 8001eb8:	080020fb 	.word	0x080020fb
 8001ebc:	08001e97 	.word	0x08001e97
 8001ec0:	08001e97 	.word	0x08001e97
 8001ec4:	08001e97 	.word	0x08001e97
 8001ec8:	08001e97 	.word	0x08001e97
 8001ecc:	08001e97 	.word	0x08001e97
 8001ed0:	08001e97 	.word	0x08001e97
 8001ed4:	0800208b 	.word	0x0800208b
 8001ed8:	080020fb 	.word	0x080020fb
		switch (*fmt) {
 8001edc:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
 8001ee0:	fa5f fe8c 	uxtb.w	lr, ip
 8001ee4:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
 8001ee8:	d8d5      	bhi.n	8001e96 <cbvprintf_package+0xa6>
 8001eea:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
 8001eee:	d8d2      	bhi.n	8001e96 <cbvprintf_package+0xa6>
 8001ef0:	f20f 0e04 	addw	lr, pc, #4
 8001ef4:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
 8001ef8:	080020fb 	.word	0x080020fb
 8001efc:	080020fb 	.word	0x080020fb
 8001f00:	08001e97 	.word	0x08001e97
 8001f04:	080020fb 	.word	0x080020fb
 8001f08:	080020fb 	.word	0x080020fb
 8001f0c:	080020fb 	.word	0x080020fb
 8001f10:	080020fb 	.word	0x080020fb
 8001f14:	080020fb 	.word	0x080020fb
 8001f18:	080020fb 	.word	0x080020fb
 8001f1c:	080020fb 	.word	0x080020fb
 8001f20:	080020fb 	.word	0x080020fb
 8001f24:	080020fb 	.word	0x080020fb
 8001f28:	080020fb 	.word	0x080020fb
 8001f2c:	08001e97 	.word	0x08001e97
 8001f30:	08001e97 	.word	0x08001e97
 8001f34:	08001e97 	.word	0x08001e97
 8001f38:	08001e97 	.word	0x08001e97
 8001f3c:	08001e97 	.word	0x08001e97
 8001f40:	08001e97 	.word	0x08001e97
 8001f44:	08001e97 	.word	0x08001e97
 8001f48:	0800204d 	.word	0x0800204d
 8001f4c:	08001e97 	.word	0x08001e97
 8001f50:	08001e97 	.word	0x08001e97
 8001f54:	08001e97 	.word	0x08001e97
 8001f58:	0800204d 	.word	0x0800204d
 8001f5c:	0800204d 	.word	0x0800204d
 8001f60:	0800204d 	.word	0x0800204d
 8001f64:	08001e97 	.word	0x08001e97
 8001f68:	08001e97 	.word	0x08001e97
 8001f6c:	08001e97 	.word	0x08001e97
 8001f70:	08001e97 	.word	0x08001e97
 8001f74:	080020fb 	.word	0x080020fb
 8001f78:	08001e97 	.word	0x08001e97
 8001f7c:	08001e97 	.word	0x08001e97
 8001f80:	08001e97 	.word	0x08001e97
 8001f84:	08001e97 	.word	0x08001e97
 8001f88:	08001e97 	.word	0x08001e97
 8001f8c:	08001e97 	.word	0x08001e97
 8001f90:	08001e97 	.word	0x08001e97
 8001f94:	08001e97 	.word	0x08001e97
 8001f98:	08001e97 	.word	0x08001e97
 8001f9c:	08001e97 	.word	0x08001e97
 8001fa0:	08001e97 	.word	0x08001e97
 8001fa4:	08002031 	.word	0x08002031
 8001fa8:	08001e97 	.word	0x08001e97
 8001fac:	08001e97 	.word	0x08001e97
 8001fb0:	08001e97 	.word	0x08001e97
 8001fb4:	08001e97 	.word	0x08001e97
 8001fb8:	08001e97 	.word	0x08001e97
 8001fbc:	08001e97 	.word	0x08001e97
 8001fc0:	08001e97 	.word	0x08001e97
 8001fc4:	08001e97 	.word	0x08001e97
 8001fc8:	0800204d 	.word	0x0800204d
 8001fcc:	08001e97 	.word	0x08001e97
 8001fd0:	08002031 	.word	0x08002031
 8001fd4:	08002031 	.word	0x08002031
 8001fd8:	0800204d 	.word	0x0800204d
 8001fdc:	0800204d 	.word	0x0800204d
 8001fe0:	0800204d 	.word	0x0800204d
 8001fe4:	080020fb 	.word	0x080020fb
 8001fe8:	08002031 	.word	0x08002031
 8001fec:	0800207f 	.word	0x0800207f
 8001ff0:	08001e97 	.word	0x08001e97
 8001ff4:	080020fb 	.word	0x080020fb
 8001ff8:	08001e97 	.word	0x08001e97
 8001ffc:	08002085 	.word	0x08002085
 8002000:	08002031 	.word	0x08002031
 8002004:	08002085 	.word	0x08002085
 8002008:	08001e97 	.word	0x08001e97
 800200c:	08001e97 	.word	0x08001e97
 8002010:	08002085 	.word	0x08002085
 8002014:	08001e87 	.word	0x08001e87
 8002018:	08002031 	.word	0x08002031
 800201c:	08001e97 	.word	0x08001e97
 8002020:	08001e97 	.word	0x08001e97
 8002024:	08002031 	.word	0x08002031
 8002028:	08001e97 	.word	0x08001e97
 800202c:	08001e87 	.word	0x08001e87
			if (fmt[-1] == 'l') {
 8002030:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002034:	296c      	cmp	r1, #108	; 0x6c
 8002036:	d127      	bne.n	8002088 <cbvprintf_package+0x298>
				if (fmt[-2] == 'l') {
 8002038:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800203c:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
 800203e:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
 8002042:	d03a      	beq.n	80020ba <cbvprintf_package+0x2ca>
			align = VA_STACK_ALIGN(void *);
 8002044:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
 8002048:	46c1      	mov	r9, r8
 800204a:	e01e      	b.n	800208a <cbvprintf_package+0x29a>
				v.ld = va_arg(ap, long double);
 800204c:	9800      	ldr	r0, [sp, #0]
 800204e:	f100 0b07 	add.w	fp, r0, #7
 8002052:	f02b 0007 	bic.w	r0, fp, #7
 8002056:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
 800205a:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
 800205c:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
 800205e:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
 8002062:	b155      	cbz	r5, 800207a <cbvprintf_package+0x28a>
				if (BUF_OFFSET + size > len) {
 8002064:	9805      	ldr	r0, [sp, #20]
 8002066:	4420      	add	r0, r4
 8002068:	42b0      	cmp	r0, r6
 800206a:	d904      	bls.n	8002076 <cbvprintf_package+0x286>
					return -ENOSPC;
 800206c:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8002070:	b00d      	add	sp, #52	; 0x34
 8002072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
 8002076:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
 800207a:	3408      	adds	r4, #8
			parsing = false;
 800207c:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
 800207e:	f04f 0808 	mov.w	r8, #8
 8002082:	e702      	b.n	8001e8a <cbvprintf_package+0x9a>
			parsing = false;
 8002084:	2100      	movs	r1, #0
 8002086:	e7dd      	b.n	8002044 <cbvprintf_package+0x254>
			parsing = false;
 8002088:	2100      	movs	r1, #0
		buf = (void *) ROUND_UP(buf, align);
 800208a:	3c01      	subs	r4, #1
 800208c:	4444      	add	r4, r8
 800208e:	f1c8 0c00 	rsb	ip, r8, #0
 8002092:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 8002096:	b125      	cbz	r5, 80020a2 <cbvprintf_package+0x2b2>
 8002098:	eba9 0c05 	sub.w	ip, r9, r5
 800209c:	44a4      	add	ip, r4
 800209e:	4566      	cmp	r6, ip
 80020a0:	d3e4      	bcc.n	800206c <cbvprintf_package+0x27c>
		if (*fmt == 's') {
 80020a2:	2873      	cmp	r0, #115	; 0x73
 80020a4:	d152      	bne.n	800214c <cbvprintf_package+0x35c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80020a6:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
 80020a8:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80020ac:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
 80020ae:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80020b2:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
 80020b4:	f8cd b000 	str.w	fp, [sp]
 80020b8:	e6c0      	b.n	8001e3c <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
 80020ba:	f04f 0808 	mov.w	r8, #8
 80020be:	e7c3      	b.n	8002048 <cbvprintf_package+0x258>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
 80020c0:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 80020c2:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
 80020c6:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
 80020ca:	e6cb      	b.n	8001e64 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 80020cc:	2a0f      	cmp	r2, #15
 80020ce:	f63f aed2 	bhi.w	8001e76 <cbvprintf_package+0x86>
				if (buf0 != NULL) {
 80020d2:	b345      	cbz	r5, 8002126 <cbvprintf_package+0x336>
					str_ptr_pos[s_idx] = s_ptr_idx;
 80020d4:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 80020d8:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
 80020dc:	4496      	add	lr, r2
 80020de:	f1bc 0f00 	cmp.w	ip, #0
 80020e2:	d01a      	beq.n	800211a <cbvprintf_package+0x32a>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 80020e4:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80020e8:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
 80020ec:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
 80020f0:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
 80020f2:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
 80020f6:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
 80020f8:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
 80020fa:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80020fe:	2800      	cmp	r0, #0
 8002100:	f47f aebc 	bne.w	8001e7c <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
 8002104:	1b61      	subs	r1, r4, r5
 8002106:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800210a:	f4bf aeb4 	bcs.w	8001e76 <cbvprintf_package+0x86>
	if (buf0 == NULL) {
 800210e:	2d00      	cmp	r5, #0
 8002110:	d141      	bne.n	8002196 <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 8002112:	f1a6 0408 	sub.w	r4, r6, #8
 8002116:	1860      	adds	r0, r4, r1
 8002118:	e7aa      	b.n	8002070 <cbvprintf_package+0x280>
					str_ptr_pos[s_idx] = s_ptr_idx;
 800211a:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
 800211e:	9803      	ldr	r0, [sp, #12]
 8002120:	3001      	adds	r0, #1
 8002122:	9003      	str	r0, [sp, #12]
 8002124:	e7e4      	b.n	80020f0 <cbvprintf_package+0x300>
				} else if (is_ro || rws_pos_en) {
 8002126:	f1bc 0f00 	cmp.w	ip, #0
 800212a:	d101      	bne.n	8002130 <cbvprintf_package+0x340>
 800212c:	9801      	ldr	r0, [sp, #4]
 800212e:	b108      	cbz	r0, 8002134 <cbvprintf_package+0x344>
					len += 1;
 8002130:	3601      	adds	r6, #1
 8002132:	e7dd      	b.n	80020f0 <cbvprintf_package+0x300>
					len += strlen(s) + 1 + 1;
 8002134:	4638      	mov	r0, r7
 8002136:	e9cd 2106 	strd	r2, r1, [sp, #24]
 800213a:	9305      	str	r3, [sp, #20]
 800213c:	f7fe fef6 	bl	8000f2c <strlen>
 8002140:	3602      	adds	r6, #2
 8002142:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8002146:	9b05      	ldr	r3, [sp, #20]
 8002148:	4406      	add	r6, r0
 800214a:	e7d1      	b.n	80020f0 <cbvprintf_package+0x300>
		} else if (size == sizeof(int)) {
 800214c:	f1b9 0f04 	cmp.w	r9, #4
 8002150:	d10e      	bne.n	8002170 <cbvprintf_package+0x380>
			int v = va_arg(ap, int);
 8002152:	9800      	ldr	r0, [sp, #0]
 8002154:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
 8002158:	b10d      	cbz	r5, 800215e <cbvprintf_package+0x36e>
			int v = va_arg(ap, int);
 800215a:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
 800215c:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
 800215e:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
 8002160:	f8cd c000 	str.w	ip, [sp]
 8002164:	e7c9      	b.n	80020fa <cbvprintf_package+0x30a>
 8002166:	bf00      	nop
 8002168:	08016a08 	.word	0x08016a08
 800216c:	08019878 	.word	0x08019878
		} else if (size == sizeof(long long)) {
 8002170:	f1b9 0f08 	cmp.w	r9, #8
 8002174:	f47f ae7f 	bne.w	8001e76 <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
 8002178:	9800      	ldr	r0, [sp, #0]
 800217a:	3007      	adds	r0, #7
 800217c:	f020 0007 	bic.w	r0, r0, #7
 8002180:	f100 0c08 	add.w	ip, r0, #8
 8002184:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
 8002188:	b11d      	cbz	r5, 8002192 <cbvprintf_package+0x3a2>
			long long v = va_arg(ap, long long);
 800218a:	e9d0 bc00 	ldrd	fp, ip, [r0]
 800218e:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
 8002192:	3408      	adds	r4, #8
 8002194:	e7b1      	b.n	80020fa <cbvprintf_package+0x30a>
	if (rws_pos_en) {
 8002196:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
 8002198:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
 800219a:	0889      	lsrs	r1, r1, #2
 800219c:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
 800219e:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
 80021a2:	b1a3      	cbz	r3, 80021ce <cbvprintf_package+0x3de>
		buf0[1] = 0;
 80021a4:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
 80021a6:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
 80021a8:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
 80021ac:	f1ba 0f00 	cmp.w	sl, #0
 80021b0:	d006      	beq.n	80021c0 <cbvprintf_package+0x3d0>
 80021b2:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
 80021b4:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
 80021b8:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
 80021bc:	4562      	cmp	r2, ip
 80021be:	d10a      	bne.n	80021d6 <cbvprintf_package+0x3e6>
 80021c0:	f10d 0820 	add.w	r8, sp, #32
 80021c4:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
 80021c8:	f1c5 0b01 	rsb	fp, r5, #1
 80021cc:	e039      	b.n	8002242 <cbvprintf_package+0x452>
		buf0[3] = 0;
 80021ce:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
 80021d0:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
 80021d2:	70eb      	strb	r3, [r5, #3]
 80021d4:	e7e8      	b.n	80021a8 <cbvprintf_package+0x3b8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 80021d6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80021da:	060b      	lsls	r3, r1, #24
 80021dc:	d508      	bpl.n	80021f0 <cbvprintf_package+0x400>
			if (BUF_OFFSET + 1 > len) {
 80021de:	eb04 080e 	add.w	r8, r4, lr
 80021e2:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 80021e4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
 80021e8:	f4ff af40 	bcc.w	800206c <cbvprintf_package+0x27c>
			*buf++ = pos;
 80021ec:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
 80021f0:	f10c 0c01 	add.w	ip, ip, #1
 80021f4:	e7e2      	b.n	80021bc <cbvprintf_package+0x3cc>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 80021f6:	f1ba 0f00 	cmp.w	sl, #0
 80021fa:	d003      	beq.n	8002204 <cbvprintf_package+0x414>
 80021fc:	f998 2000 	ldrsb.w	r2, [r8]
 8002200:	2a00      	cmp	r2, #0
 8002202:	db1c      	blt.n	800223e <cbvprintf_package+0x44e>
		if (rws_pos_en) {
 8002204:	9b01      	ldr	r3, [sp, #4]
 8002206:	bb03      	cbnz	r3, 800224a <cbvprintf_package+0x45a>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8002208:	f898 2000 	ldrb.w	r2, [r8]
 800220c:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8002210:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
 8002214:	4638      	mov	r0, r7
 8002216:	f7fe fe89 	bl	8000f2c <strlen>
 800221a:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
 800221c:	eb04 010b 	add.w	r1, r4, fp
 8002220:	4411      	add	r1, r2
 8002222:	428e      	cmp	r6, r1
 8002224:	f4ff af22 	bcc.w	800206c <cbvprintf_package+0x27c>
		*buf++ = str_ptr_pos[i];
 8002228:	f898 1000 	ldrb.w	r1, [r8]
 800222c:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8002230:	4639      	mov	r1, r7
 8002232:	4620      	mov	r0, r4
 8002234:	9200      	str	r2, [sp, #0]
 8002236:	f014 f992 	bl	801655e <memcpy>
		buf += size;
 800223a:	9a00      	ldr	r2, [sp, #0]
 800223c:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
 800223e:	f108 0801 	add.w	r8, r8, #1
 8002242:	45c1      	cmp	r9, r8
 8002244:	d1d7      	bne.n	80021f6 <cbvprintf_package+0x406>
	return BUF_OFFSET;
 8002246:	1b60      	subs	r0, r4, r5
 8002248:	e712      	b.n	8002070 <cbvprintf_package+0x280>
			size = 0;
 800224a:	2200      	movs	r2, #0
 800224c:	e7e6      	b.n	800221c <cbvprintf_package+0x42c>
		return -EFAULT;
 800224e:	f06f 000d 	mvn.w	r0, #13
 8002252:	e70d      	b.n	8002070 <cbvprintf_package+0x280>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8002254:	2907      	cmp	r1, #7
 8002256:	f63f ade7 	bhi.w	8001e28 <cbvprintf_package+0x38>
 800225a:	e707      	b.n	800206c <cbvprintf_package+0x27c>

0800225c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 800225c:	680b      	ldr	r3, [r1, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8002262:	4b01      	ldr	r3, [pc, #4]	; (8002268 <char_out+0xc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4718      	bx	r3
 8002268:	2000007c 	.word	0x2000007c

0800226c <__printk_hook_install>:
	_char_out = fn;
 800226c:	4b01      	ldr	r3, [pc, #4]	; (8002274 <__printk_hook_install+0x8>)
 800226e:	6018      	str	r0, [r3, #0]
}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2000007c 	.word	0x2000007c

08002278 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 8002278:	b507      	push	{r0, r1, r2, lr}
 800227a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 800227c:	2100      	movs	r1, #0
{
 800227e:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
 8002280:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <vprintk+0x18>)
 8002284:	a901      	add	r1, sp, #4
 8002286:	f000 f8f5 	bl	8002474 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 800228a:	b003      	add	sp, #12
 800228c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002290:	0800225d 	.word	0x0800225d

08002294 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8002294:	b530      	push	{r4, r5, lr}
 8002296:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
 8002298:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
 800229c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 800229e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
 80022a0:	a901      	add	r1, sp, #4
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
 80022a4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
 80022a6:	f000 f8e5 	bl	8002474 <cbvprintf>

	if (ctx.count < ctx.max) {
 80022aa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 80022ae:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 80022b0:	bfb8      	it	lt
 80022b2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 80022b4:	b005      	add	sp, #20
 80022b6:	bd30      	pop	{r4, r5, pc}
 80022b8:	08010dbb 	.word	0x08010dbb

080022bc <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
 80022bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
 80022c0:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
 80022c2:	6944      	ldr	r4, [r0, #20]
	unsigned int m = tm->tm_mon + 1;
 80022c4:	6905      	ldr	r5, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
 80022c6:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
 80022c8:	f240 736c 	movw	r3, #1900	; 0x76c
 80022cc:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
 80022ce:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
 80022d0:	18e4      	adds	r4, r4, r3
 80022d2:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
 80022d6:	2d02      	cmp	r5, #2
 80022d8:	bf8c      	ite	hi
 80022da:	2300      	movhi	r3, #0
 80022dc:	2301      	movls	r3, #1
 80022de:	1ae4      	subs	r4, r4, r3
 80022e0:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 80022e4:	2900      	cmp	r1, #0
{
 80022e6:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 80022e8:	da56      	bge.n	8002398 <timeutil_timegm64+0xdc>
 80022ea:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
 80022ee:	1820      	adds	r0, r4, r0
 80022f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	f161 0100 	sbc.w	r1, r1, #0
 80022fc:	f7fe fbb2 	bl	8000a64 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <timeutil_timegm64+0xe8>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 8002302:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
 8002304:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 8002308:	e9d8 9000 	ldrd	r9, r0, [r8]
 800230c:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8002310:	233c      	movs	r3, #60	; 0x3c
 8002312:	17c6      	asrs	r6, r0, #31
 8002314:	fbc8 0603 	smlal	r0, r6, r8, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8002318:	2d02      	cmp	r5, #2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 800231a:	46b4      	mov	ip, r6
 800231c:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8002320:	bf8c      	ite	hi
 8002322:	f06f 0e02 	mvnhi.w	lr, #2
 8002326:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 800232a:	fb03 660c 	mla	r6, r3, ip, r6
 800232e:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 8002332:	ea4f 0394 	mov.w	r3, r4, lsr #2
 8002336:	f240 106d 	movw	r0, #365	; 0x16d
 800233a:	fb00 3304 	mla	r3, r0, r4, r3
 800233e:	443b      	add	r3, r7
 8002340:	f04f 0064 	mov.w	r0, #100	; 0x64
 8002344:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8002348:	eb05 000e 	add.w	r0, r5, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 800234c:	eba3 0304 	sub.w	r3, r3, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8002350:	f04f 0599 	mov.w	r5, #153	; 0x99
	return era * 146097 + (time_t)doe - 719468;
 8002354:	4c14      	ldr	r4, [pc, #80]	; (80023a8 <timeutil_timegm64+0xec>)
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
 8002356:	fb05 f000 	mul.w	r0, r5, r0
 800235a:	f100 0002 	add.w	r0, r0, #2
 800235e:	f04f 0505 	mov.w	r5, #5
 8002362:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
 8002366:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
 8002368:	fba2 0204 	umull	r0, r2, r2, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
 800236c:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
 8002370:	181b      	adds	r3, r3, r0
 8002372:	480e      	ldr	r0, [pc, #56]	; (80023ac <timeutil_timegm64+0xf0>)
 8002374:	fb04 2101 	mla	r1, r4, r1, r2
	time += 86400LL * ndays;
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <timeutil_timegm64+0xf4>)
	return era * 146097 + (time_t)doe - 719468;
 800237a:	f141 0100 	adc.w	r1, r1, #0
 800237e:	1818      	adds	r0, r3, r0
	time += 86400LL * ndays;
 8002380:	fba0 0302 	umull	r0, r3, r0, r2
	return era * 146097 + (time_t)doe - 719468;
 8002384:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
 8002388:	fb02 3101 	mla	r1, r2, r1, r3
 800238c:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
 8002390:	eb41 0106 	adc.w	r1, r1, r6
 8002394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
 8002398:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800239c:	2300      	movs	r3, #0
 800239e:	4620      	mov	r0, r4
 80023a0:	e7ac      	b.n	80022fc <timeutil_timegm64+0x40>
 80023a2:	bf00      	nop
 80023a4:	fffffe70 	.word	0xfffffe70
 80023a8:	00023ab1 	.word	0x00023ab1
 80023ac:	fff50594 	.word	0xfff50594
 80023b0:	00015180 	.word	0x00015180

080023b4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
 80023b6:	4e08      	ldr	r6, [pc, #32]	; (80023d8 <extract_decimal+0x24>)
 80023b8:	6802      	ldr	r2, [r0, #0]
{
 80023ba:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
 80023bc:	270a      	movs	r7, #10
	size_t val = 0;
 80023be:	2000      	movs	r0, #0
 80023c0:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
 80023c2:	3201      	adds	r2, #1
 80023c4:	780c      	ldrb	r4, [r1, #0]
 80023c6:	5da5      	ldrb	r5, [r4, r6]
 80023c8:	076d      	lsls	r5, r5, #29
 80023ca:	d401      	bmi.n	80023d0 <extract_decimal+0x1c>
	}
	*str = sp;
 80023cc:	6019      	str	r1, [r3, #0]
	return val;
}
 80023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
 80023d0:	fb07 4000 	mla	r0, r7, r0, r4
 80023d4:	3830      	subs	r0, #48	; 0x30
 80023d6:	e7f3      	b.n	80023c0 <extract_decimal+0xc>
 80023d8:	08019578 	.word	0x08019578

080023dc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 80023dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e0:	4615      	mov	r5, r2
 80023e2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80023e4:	78d3      	ldrb	r3, [r2, #3]
 80023e6:	4a22      	ldr	r2, [pc, #136]	; (8002470 <encode_uint+0x94>)
 80023e8:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
 80023ec:	2b6f      	cmp	r3, #111	; 0x6f
{
 80023ee:	4680      	mov	r8, r0
 80023f0:	460f      	mov	r7, r1
 80023f2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 80023f6:	d029      	beq.n	800244c <encode_uint+0x70>
 80023f8:	d824      	bhi.n	8002444 <encode_uint+0x68>
		return 16;
 80023fa:	2b58      	cmp	r3, #88	; 0x58
 80023fc:	bf14      	ite	ne
 80023fe:	260a      	movne	r6, #10
 8002400:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002402:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
 8002406:	4632      	mov	r2, r6
 8002408:	2300      	movs	r3, #0
 800240a:	4640      	mov	r0, r8
 800240c:	4639      	mov	r1, r7
 800240e:	f7fe fb79 	bl	8000b04 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002412:	2a09      	cmp	r2, #9
 8002414:	b2d4      	uxtb	r4, r2
 8002416:	d81e      	bhi.n	8002456 <encode_uint+0x7a>
 8002418:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 800241a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800241c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 800241e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002422:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8002426:	d301      	bcc.n	800242c <encode_uint+0x50>
 8002428:	45d1      	cmp	r9, sl
 800242a:	d811      	bhi.n	8002450 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 800242c:	782b      	ldrb	r3, [r5, #0]
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	d505      	bpl.n	800243e <encode_uint+0x62>
		if (radix == 8) {
 8002432:	2e08      	cmp	r6, #8
 8002434:	d115      	bne.n	8002462 <encode_uint+0x86>
			conv->altform_0 = true;
 8002436:	78ab      	ldrb	r3, [r5, #2]
 8002438:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
 800243c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
 800243e:	4648      	mov	r0, r9
 8002440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002444:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 8002448:	2b70      	cmp	r3, #112	; 0x70
 800244a:	e7d7      	b.n	80023fc <encode_uint+0x20>
	switch (specifier) {
 800244c:	2608      	movs	r6, #8
 800244e:	e7d8      	b.n	8002402 <encode_uint+0x26>
		value /= radix;
 8002450:	4680      	mov	r8, r0
 8002452:	460f      	mov	r7, r1
 8002454:	e7d7      	b.n	8002406 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002456:	f1bb 0f01 	cmp.w	fp, #1
 800245a:	bf0c      	ite	eq
 800245c:	3437      	addeq	r4, #55	; 0x37
 800245e:	3457      	addne	r4, #87	; 0x57
 8002460:	e7db      	b.n	800241a <encode_uint+0x3e>
		} else if (radix == 16) {
 8002462:	2e10      	cmp	r6, #16
 8002464:	d1eb      	bne.n	800243e <encode_uint+0x62>
			conv->altform_0c = true;
 8002466:	78ab      	ldrb	r3, [r5, #2]
 8002468:	f043 0310 	orr.w	r3, r3, #16
 800246c:	e7e6      	b.n	800243c <encode_uint+0x60>
 800246e:	bf00      	nop
 8002470:	08019578 	.word	0x08019578

08002474 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002478:	4681      	mov	r9, r0
 800247a:	b09b      	sub	sp, #108	; 0x6c
 800247c:	468a      	mov	sl, r1
 800247e:	4615      	mov	r5, r2
 8002480:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002482:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002484:	7828      	ldrb	r0, [r5, #0]
 8002486:	b910      	cbnz	r0, 800248e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8002488:	4630      	mov	r0, r6
 800248a:	f000 bdc5 	b.w	8003018 <cbvprintf+0xba4>
			OUTC(*fp++);
 800248e:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
 8002490:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 8002492:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
 8002494:	d006      	beq.n	80024a4 <cbvprintf+0x30>
			OUTC(*fp++);
 8002496:	4651      	mov	r1, sl
			OUTC('%');
 8002498:	47c8      	blx	r9
 800249a:	2800      	cmp	r0, #0
 800249c:	f2c0 85bc 	blt.w	8003018 <cbvprintf+0xba4>
 80024a0:	3601      	adds	r6, #1
		if (bps == NULL) {
 80024a2:	e226      	b.n	80028f2 <cbvprintf+0x47e>
		} state = {
 80024a4:	2218      	movs	r2, #24
 80024a6:	2100      	movs	r1, #0
 80024a8:	a80c      	add	r0, sp, #48	; 0x30
 80024aa:	f014 f880 	bl	80165ae <memset>
	if (*sp == '%') {
 80024ae:	786b      	ldrb	r3, [r5, #1]
 80024b0:	2b25      	cmp	r3, #37	; 0x25
 80024b2:	d059      	beq.n	8002568 <cbvprintf+0xf4>
 80024b4:	1c6a      	adds	r2, r5, #1
 80024b6:	4617      	mov	r7, r2
		switch (*sp) {
 80024b8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80024bc:	2b2b      	cmp	r3, #43	; 0x2b
 80024be:	f000 808b 	beq.w	80025d8 <cbvprintf+0x164>
 80024c2:	d879      	bhi.n	80025b8 <cbvprintf+0x144>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	f000 808c 	beq.w	80025e2 <cbvprintf+0x16e>
 80024ca:	2b23      	cmp	r3, #35	; 0x23
 80024cc:	f000 808e 	beq.w	80025ec <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
 80024d0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80024d4:	f003 0244 	and.w	r2, r3, #68	; 0x44
 80024d8:	2a44      	cmp	r2, #68	; 0x44
 80024da:	d103      	bne.n	80024e4 <cbvprintf+0x70>
		conv->flag_zero = false;
 80024dc:	f36f 1386 	bfc	r3, #6, #1
 80024e0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
 80024e4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80024e8:	970a      	str	r7, [sp, #40]	; 0x28
 80024ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ee:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
 80024f2:	783b      	ldrb	r3, [r7, #0]
 80024f4:	2b2a      	cmp	r3, #42	; 0x2a
 80024f6:	d17e      	bne.n	80025f6 <cbvprintf+0x182>
		conv->width_star = true;
 80024f8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
 8002504:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
 8002506:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	2a2e      	cmp	r2, #46	; 0x2e
 800250c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8002510:	bf0c      	ite	eq
 8002512:	2101      	moveq	r1, #1
 8002514:	2100      	movne	r1, #0
 8002516:	f361 0241 	bfi	r2, r1, #1, #1
 800251a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
 800251e:	d10b      	bne.n	8002538 <cbvprintf+0xc4>
	++sp;
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
 8002524:	785a      	ldrb	r2, [r3, #1]
 8002526:	2a2a      	cmp	r2, #42	; 0x2a
 8002528:	d17b      	bne.n	8002622 <cbvprintf+0x1ae>
		conv->prec_star = true;
 800252a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800252e:	f042 0204 	orr.w	r2, r2, #4
 8002532:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
 8002536:	3302      	adds	r3, #2
	switch (*sp) {
 8002538:	461a      	mov	r2, r3
 800253a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800253e:	286c      	cmp	r0, #108	; 0x6c
 8002540:	f000 80cf 	beq.w	80026e2 <cbvprintf+0x26e>
 8002544:	d87d      	bhi.n	8002642 <cbvprintf+0x1ce>
 8002546:	2868      	cmp	r0, #104	; 0x68
 8002548:	f000 8084 	beq.w	8002654 <cbvprintf+0x1e0>
 800254c:	286a      	cmp	r0, #106	; 0x6a
 800254e:	f000 80d2 	beq.w	80026f6 <cbvprintf+0x282>
 8002552:	284c      	cmp	r0, #76	; 0x4c
 8002554:	f000 80d6 	beq.w	8002704 <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
 8002558:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800255c:	f36f 02c6 	bfc	r2, #3, #4
 8002560:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
 8002564:	461a      	mov	r2, r3
 8002566:	e080      	b.n	800266a <cbvprintf+0x1f6>
		conv->specifier = *sp++;
 8002568:	1caa      	adds	r2, r5, #2
 800256a:	9202      	str	r2, [sp, #8]
 800256c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
 8002570:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8002574:	07df      	lsls	r7, r3, #31
 8002576:	f140 8170 	bpl.w	800285a <cbvprintf+0x3e6>
			width = va_arg(ap, int);
 800257a:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
 800257e:	f1bb 0f00 	cmp.w	fp, #0
 8002582:	da07      	bge.n	8002594 <cbvprintf+0x120>
				conv->flag_dash = true;
 8002584:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8002588:	f042 0204 	orr.w	r2, r2, #4
 800258c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
 8002590:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
 8002594:	0758      	lsls	r0, r3, #29
 8002596:	f140 8169 	bpl.w	800286c <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
 800259a:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
 800259e:	f1b8 0f00 	cmp.w	r8, #0
 80025a2:	f280 8168 	bge.w	8002876 <cbvprintf+0x402>
				conv->prec_present = false;
 80025a6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80025aa:	f36f 0341 	bfc	r3, #1, #1
 80025ae:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
 80025b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80025b6:	e15e      	b.n	8002876 <cbvprintf+0x402>
		switch (*sp) {
 80025b8:	2b2d      	cmp	r3, #45	; 0x2d
 80025ba:	d006      	beq.n	80025ca <cbvprintf+0x156>
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d187      	bne.n	80024d0 <cbvprintf+0x5c>
			conv->flag_zero = true;
 80025c0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80025c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c8:	e003      	b.n	80025d2 <cbvprintf+0x15e>
			conv->flag_dash = true;
 80025ca:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80025ce:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
 80025d2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
 80025d6:	e76e      	b.n	80024b6 <cbvprintf+0x42>
			conv->flag_plus = true;
 80025d8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	e7f7      	b.n	80025d2 <cbvprintf+0x15e>
			conv->flag_space = true;
 80025e2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80025e6:	f043 0310 	orr.w	r3, r3, #16
 80025ea:	e7f2      	b.n	80025d2 <cbvprintf+0x15e>
			conv->flag_hash = true;
 80025ec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80025f0:	f043 0320 	orr.w	r3, r3, #32
 80025f4:	e7ed      	b.n	80025d2 <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
 80025f6:	a80a      	add	r0, sp, #40	; 0x28
 80025f8:	f7ff fedc 	bl	80023b4 <extract_decimal>
	if (sp != wp) {
 80025fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025fe:	42bb      	cmp	r3, r7
 8002600:	d081      	beq.n	8002506 <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
 8002602:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
 8002606:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
 8002608:	f3c1 0240 	ubfx	r2, r1, #1, #1
 800260c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8002610:	0052      	lsls	r2, r2, #1
 8002612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002616:	f001 017d 	and.w	r1, r1, #125	; 0x7d
 800261a:	430a      	orrs	r2, r1
 800261c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8002620:	e771      	b.n	8002506 <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
 8002622:	a80a      	add	r0, sp, #40	; 0x28
 8002624:	f7ff fec6 	bl	80023b4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
 8002628:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
 800262c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
 800262e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002632:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
 8002636:	f360 0341 	bfi	r3, r0, #1, #1
 800263a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
 800263e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002640:	e77a      	b.n	8002538 <cbvprintf+0xc4>
	switch (*sp) {
 8002642:	2874      	cmp	r0, #116	; 0x74
 8002644:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 8002648:	d059      	beq.n	80026fe <cbvprintf+0x28a>
 800264a:	287a      	cmp	r0, #122	; 0x7a
 800264c:	d184      	bne.n	8002558 <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
 800264e:	460b      	mov	r3, r1
 8002650:	2106      	movs	r1, #6
 8002652:	e041      	b.n	80026d8 <cbvprintf+0x264>
		if (*++sp == 'h') {
 8002654:	7859      	ldrb	r1, [r3, #1]
 8002656:	2968      	cmp	r1, #104	; 0x68
 8002658:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 800265c:	d13a      	bne.n	80026d4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
 800265e:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
 8002660:	f362 01c6 	bfi	r1, r2, #3, #4
 8002664:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
 8002668:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
 800266a:	4613      	mov	r3, r2
 800266c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002670:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
 8002672:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
 8002674:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
 8002678:	f200 80c5 	bhi.w	8002806 <cbvprintf+0x392>
 800267c:	2a57      	cmp	r2, #87	; 0x57
 800267e:	d84e      	bhi.n	800271e <cbvprintf+0x2aa>
 8002680:	2a41      	cmp	r2, #65	; 0x41
 8002682:	d004      	beq.n	800268e <cbvprintf+0x21a>
 8002684:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 8002688:	2b02      	cmp	r3, #2
 800268a:	f200 80bc 	bhi.w	8002806 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
 800268e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 8002692:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
 8002696:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
 8002698:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
 800269c:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
 80026a0:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
 80026a4:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
 80026a8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
 80026ac:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
 80026b0:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
 80026b4:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
 80026b6:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
 80026ba:	b2cb      	uxtb	r3, r1
 80026bc:	f100 80cb 	bmi.w	8002856 <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
 80026c0:	f003 0278 	and.w	r2, r3, #120	; 0x78
 80026c4:	2a18      	cmp	r2, #24
 80026c6:	f040 809b 	bne.w	8002800 <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
 80026ca:	f36f 03c6 	bfc	r3, #3, #4
 80026ce:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80026d2:	e082      	b.n	80027da <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
 80026d4:	460b      	mov	r3, r1
 80026d6:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
 80026d8:	f361 03c6 	bfi	r3, r1, #3, #4
 80026dc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80026e0:	e7c3      	b.n	800266a <cbvprintf+0x1f6>
		if (*++sp == 'l') {
 80026e2:	7859      	ldrb	r1, [r3, #1]
 80026e4:	296c      	cmp	r1, #108	; 0x6c
 80026e6:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 80026ea:	d101      	bne.n	80026f0 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
 80026ec:	2204      	movs	r2, #4
 80026ee:	e7b7      	b.n	8002660 <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
 80026f0:	460b      	mov	r3, r1
 80026f2:	2103      	movs	r1, #3
 80026f4:	e7f0      	b.n	80026d8 <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
 80026f6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80026fa:	2105      	movs	r1, #5
 80026fc:	e7ec      	b.n	80026d8 <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
 80026fe:	460b      	mov	r3, r1
 8002700:	2107      	movs	r1, #7
 8002702:	e7e9      	b.n	80026d8 <cbvprintf+0x264>
		conv->unsupported = true;
 8002704:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002708:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800270c:	f023 0302 	bic.w	r3, r3, #2
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
 800271c:	e7a5      	b.n	800266a <cbvprintf+0x1f6>
 800271e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8002722:	2b20      	cmp	r3, #32
 8002724:	d86f      	bhi.n	8002806 <cbvprintf+0x392>
 8002726:	a101      	add	r1, pc, #4	; (adr r1, 800272c <cbvprintf+0x2b8>)
 8002728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800272c:	080027df 	.word	0x080027df
 8002730:	08002807 	.word	0x08002807
 8002734:	08002807 	.word	0x08002807
 8002738:	08002807 	.word	0x08002807
 800273c:	08002807 	.word	0x08002807
 8002740:	08002807 	.word	0x08002807
 8002744:	08002807 	.word	0x08002807
 8002748:	08002807 	.word	0x08002807
 800274c:	08002807 	.word	0x08002807
 8002750:	0800268f 	.word	0x0800268f
 8002754:	08002807 	.word	0x08002807
 8002758:	080027df 	.word	0x080027df
 800275c:	080027b1 	.word	0x080027b1
 8002760:	0800268f 	.word	0x0800268f
 8002764:	0800268f 	.word	0x0800268f
 8002768:	0800268f 	.word	0x0800268f
 800276c:	08002807 	.word	0x08002807
 8002770:	080027b1 	.word	0x080027b1
 8002774:	08002807 	.word	0x08002807
 8002778:	08002807 	.word	0x08002807
 800277c:	08002807 	.word	0x08002807
 8002780:	08002807 	.word	0x08002807
 8002784:	08002815 	.word	0x08002815
 8002788:	080027df 	.word	0x080027df
 800278c:	08002839 	.word	0x08002839
 8002790:	08002807 	.word	0x08002807
 8002794:	08002807 	.word	0x08002807
 8002798:	08002839 	.word	0x08002839
 800279c:	08002807 	.word	0x08002807
 80027a0:	080027df 	.word	0x080027df
 80027a4:	08002807 	.word	0x08002807
 80027a8:	08002807 	.word	0x08002807
 80027ac:	080027df 	.word	0x080027df
		conv->specifier_cat = SPECIFIER_SINT;
 80027b0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80027b4:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 80027b6:	f361 0302 	bfi	r3, r1, #0, #3
 80027ba:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 80027be:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80027c2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80027c6:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
 80027c8:	bf02      	ittt	eq
 80027ca:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
 80027ce:	f041 0101 	orreq.w	r1, r1, #1
 80027d2:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
 80027d6:	2a63      	cmp	r2, #99	; 0x63
 80027d8:	d005      	beq.n	80027e6 <cbvprintf+0x372>
	bool unsupported = false;
 80027da:	2300      	movs	r3, #0
 80027dc:	e006      	b.n	80027ec <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
 80027de:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80027e2:	2102      	movs	r1, #2
 80027e4:	e7e7      	b.n	80027b6 <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80027e6:	3b00      	subs	r3, #0
 80027e8:	bf18      	it	ne
 80027ea:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
 80027ec:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80027f0:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80027f4:	430b      	orrs	r3, r1
 80027f6:	f363 0241 	bfi	r2, r3, #1, #1
 80027fa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
 80027fe:	e6b7      	b.n	8002570 <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
 8002800:	f013 0f38 	tst.w	r3, #56	; 0x38
 8002804:	d0e9      	beq.n	80027da <cbvprintf+0x366>
			conv->invalid = true;
 8002806:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8002812:	e7e2      	b.n	80027da <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
 8002814:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8002818:	2203      	movs	r2, #3
 800281a:	f362 0302 	bfi	r3, r2, #0, #3
 800281e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002822:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8002826:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800282a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
 800282e:	f1dc 0300 	rsbs	r3, ip, #0
 8002832:	eb43 030c 	adc.w	r3, r3, ip
 8002836:	e7d9      	b.n	80027ec <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
 8002838:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800283c:	2203      	movs	r2, #3
 800283e:	f362 0302 	bfi	r3, r2, #0, #3
 8002842:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
 8002846:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800284a:	f013 0f78 	tst.w	r3, #120	; 0x78
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	e7ca      	b.n	80027ec <cbvprintf+0x378>
			unsupported = true;
 8002856:	2301      	movs	r3, #1
 8002858:	e7c8      	b.n	80027ec <cbvprintf+0x378>
		} else if (conv->width_present) {
 800285a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
 800285e:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8002860:	bfb4      	ite	lt
 8002862:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
 8002866:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
 800286a:	e693      	b.n	8002594 <cbvprintf+0x120>
		} else if (conv->prec_present) {
 800286c:	0799      	lsls	r1, r3, #30
 800286e:	f57f aea0 	bpl.w	80025b2 <cbvprintf+0x13e>
			precision = conv->prec_value;
 8002872:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
 8002876:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
 800287a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 800287c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
 8002880:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8002884:	f003 0207 	and.w	r2, r3, #7
 8002888:	2a04      	cmp	r2, #4
 800288a:	d109      	bne.n	80028a0 <cbvprintf+0x42c>
		    && !conv->prec_present) {
 800288c:	078a      	lsls	r2, r1, #30
 800288e:	d407      	bmi.n	80028a0 <cbvprintf+0x42c>
			if (conv->specifier_a) {
 8002890:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
 8002894:	2a00      	cmp	r2, #0
 8002896:	bfb4      	ite	lt
 8002898:	f04f 080d 	movlt.w	r8, #13
 800289c:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
 80028a0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80028a4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80028a6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80028aa:	d137      	bne.n	800291c <cbvprintf+0x4a8>
			switch (length_mod) {
 80028ac:	1ecb      	subs	r3, r1, #3
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d821      	bhi.n	80028f6 <cbvprintf+0x482>
 80028b2:	e8df f003 	tbb	[pc, r3]
 80028b6:	0903      	.short	0x0903
 80028b8:	2009      	.short	0x2009
 80028ba:	20          	.byte	0x20
 80028bb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
 80028bc:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
 80028c0:	17da      	asrs	r2, r3, #31
 80028c2:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 80028c6:	e006      	b.n	80028d6 <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
 80028c8:	3407      	adds	r4, #7
 80028ca:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
 80028ce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 80028d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
 80028d6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80028da:	07bb      	lsls	r3, r7, #30
 80028dc:	d056      	beq.n	800298c <cbvprintf+0x518>
			OUTS(sp, fp);
 80028de:	9b02      	ldr	r3, [sp, #8]
 80028e0:	462a      	mov	r2, r5
 80028e2:	4651      	mov	r1, sl
 80028e4:	4648      	mov	r0, r9
 80028e6:	f00e fb3f 	bl	8010f68 <outs>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	f2c0 8394 	blt.w	8003018 <cbvprintf+0xba4>
 80028f0:	4406      	add	r6, r0
			while (pad_len-- > 0) {
 80028f2:	9d02      	ldr	r5, [sp, #8]
 80028f4:	e5c6      	b.n	8002484 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80028f6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 80028fa:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80028fc:	ea4f 72e3 	mov.w	r2, r3, asr #31
 8002900:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8002904:	d105      	bne.n	8002912 <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
 8002906:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
 800290a:	930c      	str	r3, [sp, #48]	; 0x30
 800290c:	2300      	movs	r3, #0
 800290e:	930d      	str	r3, [sp, #52]	; 0x34
 8002910:	e7e1      	b.n	80028d6 <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
 8002912:	2902      	cmp	r1, #2
 8002914:	d1df      	bne.n	80028d6 <cbvprintf+0x462>
				value->sint = (short)value->sint;
 8002916:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800291a:	e7d1      	b.n	80028c0 <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
 800291c:	2b02      	cmp	r3, #2
 800291e:	d123      	bne.n	8002968 <cbvprintf+0x4f4>
			switch (length_mod) {
 8002920:	1ecb      	subs	r3, r1, #3
 8002922:	2b04      	cmp	r3, #4
 8002924:	d813      	bhi.n	800294e <cbvprintf+0x4da>
 8002926:	e8df f003 	tbb	[pc, r3]
 800292a:	0a03      	.short	0x0a03
 800292c:	120a      	.short	0x120a
 800292e:	12          	.byte	0x12
 800292f:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
 8002930:	6822      	ldr	r2, [r4, #0]
 8002932:	920c      	str	r2, [sp, #48]	; 0x30
 8002934:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
 8002936:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
 8002938:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
 800293a:	4604      	mov	r4, r0
 800293c:	e7cb      	b.n	80028d6 <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
 800293e:	1de0      	adds	r0, r4, #7
 8002940:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
 8002944:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002948:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
 800294c:	e7f5      	b.n	800293a <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
 800294e:	f854 3b04 	ldr.w	r3, [r4], #4
 8002952:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
 8002954:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
 800295c:	d0d3      	beq.n	8002906 <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
 800295e:	2902      	cmp	r1, #2
 8002960:	d1b9      	bne.n	80028d6 <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
 8002962:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8002966:	e7d0      	b.n	800290a <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
 8002968:	2b04      	cmp	r3, #4
 800296a:	d109      	bne.n	8002980 <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
 800296c:	1de3      	adds	r3, r4, #7
 800296e:	f023 0307 	bic.w	r3, r3, #7
 8002972:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800297e:	e7aa      	b.n	80028d6 <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002980:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8002982:	bf04      	itt	eq
 8002984:	f854 3b04 	ldreq.w	r3, [r4], #4
 8002988:	930c      	streq	r3, [sp, #48]	; 0x30
 800298a:	e7a4      	b.n	80028d6 <cbvprintf+0x462>
		switch (conv->specifier) {
 800298c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8002990:	2a78      	cmp	r2, #120	; 0x78
 8002992:	d8ae      	bhi.n	80028f2 <cbvprintf+0x47e>
 8002994:	2a57      	cmp	r2, #87	; 0x57
 8002996:	f200 808c 	bhi.w	8002ab2 <cbvprintf+0x63e>
 800299a:	2a25      	cmp	r2, #37	; 0x25
 800299c:	f000 80d4 	beq.w	8002b48 <cbvprintf+0x6d4>
 80029a0:	2a24      	cmp	r2, #36	; 0x24
 80029a2:	d9a6      	bls.n	80028f2 <cbvprintf+0x47e>
 80029a4:	2a41      	cmp	r2, #65	; 0x41
 80029a6:	d003      	beq.n	80029b0 <cbvprintf+0x53c>
 80029a8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d8a0      	bhi.n	80028f2 <cbvprintf+0x47e>
	} u = {
 80029b0:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f2c0 81b7 	blt.w	8002d28 <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
 80029ba:	0738      	lsls	r0, r7, #28
 80029bc:	f100 81b6 	bmi.w	8002d2c <cbvprintf+0x8b8>
		*sign = ' ';
 80029c0:	f017 0710 	ands.w	r7, r7, #16
 80029c4:	bf18      	it	ne
 80029c6:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 80029c8:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 80029cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d0:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	f040 81ab 	bne.w	8002d30 <cbvprintf+0x8bc>
 80029da:	ea51 0003 	orrs.w	r0, r1, r3
 80029de:	bf14      	ite	ne
 80029e0:	2001      	movne	r0, #1
 80029e2:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
 80029e4:	02db      	lsls	r3, r3, #11
 80029e6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80029ea:	02c9      	lsls	r1, r1, #11
		c = 'f';
 80029ec:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
 80029ee:	ea45 0e01 	orr.w	lr, r5, r1
 80029f2:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
 80029f6:	bf08      	it	eq
 80029f8:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
 80029fa:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
 80029fe:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
 8002a02:	f000 8203 	beq.w	8002e0c <cbvprintf+0x998>
		if (is_subnormal) {
 8002a06:	2800      	cmp	r0, #0
 8002a08:	f040 81cb 	bne.w	8002da2 <cbvprintf+0x92e>
		fract |= BIT_63;
 8002a0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002a10:	f04f 0c00 	mov.w	ip, #0
 8002a14:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 8002a18:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
 8002a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8002a1e:	4663      	mov	r3, ip
		fract *= 5U;
 8002a20:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
 8002a24:	f115 0f02 	cmn.w	r5, #2
 8002a28:	f2c0 81c2 	blt.w	8002db0 <cbvprintf+0x93c>
 8002a2c:	f1bc 0f00 	cmp.w	ip, #0
 8002a30:	d001      	beq.n	8002a36 <cbvprintf+0x5c2>
 8002a32:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
 8002a36:	2d00      	cmp	r5, #0
		fract += 2;
 8002a38:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
 8002a3c:	f300 81cd 	bgt.w	8002dda <cbvprintf+0x966>
	fract >>= (4 - expo);
 8002a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a42:	9908      	ldr	r1, [sp, #32]
 8002a44:	f1c5 0c04 	rsb	ip, r5, #4
 8002a48:	351c      	adds	r5, #28
 8002a4a:	fa00 f505 	lsl.w	r5, r0, r5
 8002a4e:	f1ac 0e20 	sub.w	lr, ip, #32
 8002a52:	fa21 f10c 	lsr.w	r1, r1, ip
 8002a56:	fa20 fe0e 	lsr.w	lr, r0, lr
 8002a5a:	4329      	orrs	r1, r5
 8002a5c:	ea41 010e 	orr.w	r1, r1, lr
 8002a60:	fa20 f00c 	lsr.w	r0, r0, ip
 8002a64:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
 8002a68:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8002a6c:	2947      	cmp	r1, #71	; 0x47
 8002a6e:	f040 81d4 	bne.w	8002e1a <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
 8002a72:	1cdd      	adds	r5, r3, #3
 8002a74:	db02      	blt.n	8002a7c <cbvprintf+0x608>
 8002a76:	4598      	cmp	r8, r3
 8002a78:	f280 81cb 	bge.w	8002e12 <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
 8002a7c:	3a02      	subs	r2, #2
			if (precision > 0) {
 8002a7e:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
 8002a82:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
 8002a84:	dd01      	ble.n	8002a8a <cbvprintf+0x616>
				precision--;
 8002a86:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
 8002a8a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8002a8e:	0688      	lsls	r0, r1, #26
 8002a90:	f100 81c3 	bmi.w	8002e1a <cbvprintf+0x9a6>
 8002a94:	f1b8 0f00 	cmp.w	r8, #0
 8002a98:	bfd4      	ite	le
 8002a9a:	2100      	movle	r1, #0
 8002a9c:	2101      	movgt	r1, #1
	if (c == 'f') {
 8002a9e:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
 8002aa0:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
 8002aa2:	f040 81bc 	bne.w	8002e1e <cbvprintf+0x9aa>
		if (decimals < 0) {
 8002aa6:	eb13 0508 	adds.w	r5, r3, r8
 8002aaa:	f140 81ba 	bpl.w	8002e22 <cbvprintf+0x9ae>
			decimals = 0;
 8002aae:	2500      	movs	r5, #0
 8002ab0:	e1ba      	b.n	8002e28 <cbvprintf+0x9b4>
 8002ab2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	f63f af1b 	bhi.w	80028f2 <cbvprintf+0x47e>
 8002abc:	a001      	add	r0, pc, #4	; (adr r0, 8002ac4 <cbvprintf+0x650>)
 8002abe:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002ccb 	.word	0x08002ccb
 8002ac8:	080028f3 	.word	0x080028f3
 8002acc:	080028f3 	.word	0x080028f3
 8002ad0:	080028f3 	.word	0x080028f3
 8002ad4:	080028f3 	.word	0x080028f3
 8002ad8:	080028f3 	.word	0x080028f3
 8002adc:	080028f3 	.word	0x080028f3
 8002ae0:	080028f3 	.word	0x080028f3
 8002ae4:	080028f3 	.word	0x080028f3
 8002ae8:	080029b1 	.word	0x080029b1
 8002aec:	080028f3 	.word	0x080028f3
 8002af0:	08002b75 	.word	0x08002b75
 8002af4:	08002c6b 	.word	0x08002c6b
 8002af8:	080029b1 	.word	0x080029b1
 8002afc:	080029b1 	.word	0x080029b1
 8002b00:	080029b1 	.word	0x080029b1
 8002b04:	080028f3 	.word	0x080028f3
 8002b08:	08002c6b 	.word	0x08002c6b
 8002b0c:	080028f3 	.word	0x080028f3
 8002b10:	080028f3 	.word	0x080028f3
 8002b14:	080028f3 	.word	0x080028f3
 8002b18:	080028f3 	.word	0x080028f3
 8002b1c:	08002d01 	.word	0x08002d01
 8002b20:	08002ccb 	.word	0x08002ccb
 8002b24:	08002ccf 	.word	0x08002ccf
 8002b28:	080028f3 	.word	0x080028f3
 8002b2c:	080028f3 	.word	0x080028f3
 8002b30:	08002b4f 	.word	0x08002b4f
 8002b34:	080028f3 	.word	0x080028f3
 8002b38:	08002ccb 	.word	0x08002ccb
 8002b3c:	080028f3 	.word	0x080028f3
 8002b40:	080028f3 	.word	0x080028f3
 8002b44:	08002ccb 	.word	0x08002ccb
			OUTC('%');
 8002b48:	4651      	mov	r1, sl
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	e4a4      	b.n	8002498 <cbvprintf+0x24>
			if (precision >= 0) {
 8002b4e:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8002b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
 8002b54:	db09      	blt.n	8002b6a <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
 8002b56:	4641      	mov	r1, r8
 8002b58:	4610      	mov	r0, r2
 8002b5a:	9203      	str	r2, [sp, #12]
 8002b5c:	f013 fd6d 	bl	801663a <strnlen>
				len = strlen(bps);
 8002b60:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
 8002b62:	2700      	movs	r7, #0
			bpe = bps + len;
 8002b64:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
 8002b66:	b962      	cbnz	r2, 8002b82 <cbvprintf+0x70e>
 8002b68:	e6c3      	b.n	80028f2 <cbvprintf+0x47e>
				len = strlen(bps);
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	9203      	str	r2, [sp, #12]
 8002b6e:	f7fe f9dd 	bl	8000f2c <strlen>
 8002b72:	e7f5      	b.n	8002b60 <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8002b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b76:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
 8002b7a:	2700      	movs	r7, #0
			bpe = buf + 1;
 8002b7c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
 8002b80:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
 8002b82:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
 8002b84:	b107      	cbz	r7, 8002b88 <cbvprintf+0x714>
			nj_len += 1U;
 8002b86:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8002b88:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
 8002b8c:	06c1      	lsls	r1, r0, #27
 8002b8e:	f140 8237 	bpl.w	8003000 <cbvprintf+0xb8c>
			nj_len += 2U;
 8002b92:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 8002b94:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
 8002b96:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
 8002b98:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8002b9a:	bf44      	itt	mi
 8002b9c:	9910      	ldrmi	r1, [sp, #64]	; 0x40
 8002b9e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
 8002ba0:	f1bb 0f00 	cmp.w	fp, #0
 8002ba4:	dd23      	ble.n	8002bee <cbvprintf+0x77a>
			width -= (int)nj_len;
 8002ba6:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
 8002baa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002bae:	0759      	lsls	r1, r3, #29
 8002bb0:	f3c3 0880 	ubfx	r8, r3, #2, #1
 8002bb4:	d41b      	bmi.n	8002bee <cbvprintf+0x77a>
				if (conv->flag_zero) {
 8002bb6:	0658      	lsls	r0, r3, #25
 8002bb8:	f140 8236 	bpl.w	8003028 <cbvprintf+0xbb4>
					if (sign != 0) {
 8002bbc:	2f00      	cmp	r7, #0
 8002bbe:	f000 8236 	beq.w	800302e <cbvprintf+0xbba>
						OUTC(sign);
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	4638      	mov	r0, r7
 8002bc6:	9203      	str	r2, [sp, #12]
 8002bc8:	47c8      	blx	r9
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	f2c0 8224 	blt.w	8003018 <cbvprintf+0xba4>
 8002bd0:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
 8002bd2:	4647      	mov	r7, r8
						OUTC(sign);
 8002bd4:	3601      	adds	r6, #1
					pad = '0';
 8002bd6:	f04f 0830 	mov.w	r8, #48	; 0x30
 8002bda:	445e      	add	r6, fp
 8002bdc:	465b      	mov	r3, fp
				while (width-- > 0) {
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	eba6 000b 	sub.w	r0, r6, fp
 8002be4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002be8:	f300 820e 	bgt.w	8003008 <cbvprintf+0xb94>
 8002bec:	4606      	mov	r6, r0
		if (sign != 0) {
 8002bee:	b147      	cbz	r7, 8002c02 <cbvprintf+0x78e>
			OUTC(sign);
 8002bf0:	4651      	mov	r1, sl
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	9203      	str	r2, [sp, #12]
 8002bf6:	47c8      	blx	r9
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	f2c0 820d 	blt.w	8003018 <cbvprintf+0xba4>
 8002bfe:	9a03      	ldr	r2, [sp, #12]
 8002c00:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 8002c02:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8002c06:	0659      	lsls	r1, r3, #25
 8002c08:	f140 8265 	bpl.w	80030d6 <cbvprintf+0xc62>
			if (conv->specifier_a) {
 8002c0c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	eba6 0602 	sub.w	r6, r6, r2
 8002c16:	f280 8219 	bge.w	800304c <cbvprintf+0xbd8>
 8002c1a:	4617      	mov	r7, r2
 8002c1c:	46b8      	mov	r8, r7
 8002c1e:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
 8002c20:	f817 0b01 	ldrb.w	r0, [r7], #1
 8002c24:	2870      	cmp	r0, #112	; 0x70
 8002c26:	f040 8205 	bne.w	8003034 <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
 8002c2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002c2c:	461e      	mov	r6, r3
 8002c2e:	441f      	add	r7, r3
 8002c30:	1bbb      	subs	r3, r7, r6
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f300 8248 	bgt.w	80030c8 <cbvprintf+0xc54>
			OUTS(cp, bpe);
 8002c38:	462b      	mov	r3, r5
 8002c3a:	4642      	mov	r2, r8
			OUTS(bps, bpe);
 8002c3c:	4651      	mov	r1, sl
 8002c3e:	4648      	mov	r0, r9
 8002c40:	f00e f992 	bl	8010f68 <outs>
 8002c44:	2800      	cmp	r0, #0
 8002c46:	f2c0 81e7 	blt.w	8003018 <cbvprintf+0xba4>
 8002c4a:	4430      	add	r0, r6
			while (pad_len-- > 0) {
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	4483      	add	fp, r0
		while (width > 0) {
 8002c50:	ebab 0306 	sub.w	r3, fp, r6
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f77f ae4c 	ble.w	80028f2 <cbvprintf+0x47e>
			OUTC(' ');
 8002c5a:	4651      	mov	r1, sl
 8002c5c:	2020      	movs	r0, #32
 8002c5e:	47c8      	blx	r9
 8002c60:	2800      	cmp	r0, #0
 8002c62:	f2c0 81d9 	blt.w	8003018 <cbvprintf+0xba4>
 8002c66:	3601      	adds	r6, #1
			--width;
 8002c68:	e7f2      	b.n	8002c50 <cbvprintf+0x7dc>
			if (conv->flag_plus) {
 8002c6a:	073d      	lsls	r5, r7, #28
 8002c6c:	d42b      	bmi.n	8002cc6 <cbvprintf+0x852>
				sign = ' ';
 8002c6e:	f017 0710 	ands.w	r7, r7, #16
 8002c72:	bf18      	it	ne
 8002c74:	2720      	movne	r7, #32
			sint = value->sint;
 8002c76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da05      	bge.n	8002c8a <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
 8002c7e:	4252      	negs	r2, r2
 8002c80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002c84:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
 8002c88:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002c8a:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	aa0e      	add	r2, sp, #56	; 0x38
 8002c92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c96:	ab13      	add	r3, sp, #76	; 0x4c
 8002c98:	f7ff fba0 	bl	80023dc <encode_uint>
 8002c9c:	4602      	mov	r2, r0
			if (precision >= 0) {
 8002c9e:	f1b8 0f00 	cmp.w	r8, #0
 8002ca2:	f10d 0565 	add.w	r5, sp, #101	; 0x65
 8002ca6:	f6ff af5e 	blt.w	8002b66 <cbvprintf+0x6f2>
				conv->flag_zero = false;
 8002caa:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
 8002cae:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
 8002cb0:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
 8002cb4:	4598      	cmp	r8, r3
				conv->flag_zero = false;
 8002cb6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
 8002cba:	f67f af54 	bls.w	8002b66 <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
 8002cbe:	eba8 0303 	sub.w	r3, r8, r3
 8002cc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8002cc4:	e74f      	b.n	8002b66 <cbvprintf+0x6f2>
				sign = '+';
 8002cc6:	272b      	movs	r7, #43	; 0x2b
 8002cc8:	e7d5      	b.n	8002c76 <cbvprintf+0x802>
		switch (conv->specifier) {
 8002cca:	2700      	movs	r7, #0
 8002ccc:	e7dd      	b.n	8002c8a <cbvprintf+0x816>
			if (value->ptr != NULL) {
 8002cce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	f000 8191 	beq.w	8002ff8 <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002cd6:	f10d 0365 	add.w	r3, sp, #101	; 0x65
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	aa0e      	add	r2, sp, #56	; 0x38
 8002cde:	ab13      	add	r3, sp, #76	; 0x4c
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	f7ff fb7b 	bl	80023dc <encode_uint>
				conv->altform_0c = true;
 8002ce6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8002cea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002cee:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002cf2:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002cf6:	4602      	mov	r2, r0
				conv->altform_0c = true;
 8002cf8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
 8002cfc:	2700      	movs	r7, #0
				goto prec_int_pad0;
 8002cfe:	e7ce      	b.n	8002c9e <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
 8002d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
 8002d02:	2907      	cmp	r1, #7
 8002d04:	f63f adf5 	bhi.w	80028f2 <cbvprintf+0x47e>
 8002d08:	e8df f001 	tbb	[pc, r1]
 8002d0c:	0c06040c 	.word	0x0c06040c
 8002d10:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8002d14:	701e      	strb	r6, [r3, #0]
		break;
 8002d16:	e5ec      	b.n	80028f2 <cbvprintf+0x47e>
		*(short *)dp = (short)count;
 8002d18:	801e      	strh	r6, [r3, #0]
		break;
 8002d1a:	e5ea      	b.n	80028f2 <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
 8002d1c:	17f2      	asrs	r2, r6, #31
 8002d1e:	e9c3 6200 	strd	r6, r2, [r3]
		break;
 8002d22:	e5e6      	b.n	80028f2 <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002d24:	601e      	str	r6, [r3, #0]
		break;
 8002d26:	e5e4      	b.n	80028f2 <cbvprintf+0x47e>
		*sign = '-';
 8002d28:	272d      	movs	r7, #45	; 0x2d
 8002d2a:	e64d      	b.n	80029c8 <cbvprintf+0x554>
		*sign = '+';
 8002d2c:	272b      	movs	r7, #43	; 0x2b
 8002d2e:	e64b      	b.n	80029c8 <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 8002d30:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002d34:	4285      	cmp	r5, r0
 8002d36:	d131      	bne.n	8002d9c <cbvprintf+0x928>
			if (isupper((int)c)) {
 8002d38:	3201      	adds	r2, #1
 8002d3a:	48b9      	ldr	r0, [pc, #740]	; (8003020 <cbvprintf+0xbac>)
 8002d3c:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	5c12      	ldrb	r2, [r2, r0]
 8002d42:	f002 0203 	and.w	r2, r2, #3
 8002d46:	d11b      	bne.n	8002d80 <cbvprintf+0x90c>
			if (isupper((int)c)) {
 8002d48:	2a01      	cmp	r2, #1
 8002d4a:	d111      	bne.n	8002d70 <cbvprintf+0x8fc>
				*buf++ = 'I';
 8002d4c:	2349      	movs	r3, #73	; 0x49
 8002d4e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
 8002d52:	234e      	movs	r3, #78	; 0x4e
 8002d54:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
 8002d58:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
 8002d5a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
 8002d5e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8002d62:	f36f 1386 	bfc	r3, #6, #1
 8002d66:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
 8002d6a:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
 8002d6e:	e707      	b.n	8002b80 <cbvprintf+0x70c>
				*buf++ = 'i';
 8002d70:	2369      	movs	r3, #105	; 0x69
 8002d72:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8002d76:	236e      	movs	r3, #110	; 0x6e
 8002d78:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
 8002d7c:	2366      	movs	r3, #102	; 0x66
 8002d7e:	e7ec      	b.n	8002d5a <cbvprintf+0x8e6>
			if (isupper((int)c)) {
 8002d80:	2a01      	cmp	r2, #1
				*buf++ = 'N';
 8002d82:	bf07      	ittee	eq
 8002d84:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
 8002d86:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
 8002d88:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
 8002d8a:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
 8002d8c:	bf0c      	ite	eq
 8002d8e:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
 8002d92:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
 8002d96:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 8002d9a:	e7de      	b.n	8002d5a <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	e621      	b.n	80029e4 <cbvprintf+0x570>
				expo--;
 8002da0:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8002da2:	1849      	adds	r1, r1, r1
 8002da4:	415b      	adcs	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	dafa      	bge.n	8002da0 <cbvprintf+0x92c>
 8002daa:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8002dae:	e62d      	b.n	8002a0c <cbvprintf+0x598>
			fract >>= 1;
 8002db0:	0840      	lsrs	r0, r0, #1
 8002db2:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8002db6:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8002db8:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
 8002dbc:	46ac      	mov	ip, r5
			expo++;
 8002dbe:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8002dc2:	d2f5      	bcs.n	8002db0 <cbvprintf+0x93c>
		fract *= 5U;
 8002dc4:	fb0e f501 	mul.w	r5, lr, r1
 8002dc8:	fba0 010e 	umull	r0, r1, r0, lr
 8002dcc:	4429      	add	r1, r5
		decexp--;
 8002dce:	3b01      	subs	r3, #1
		expo++;
 8002dd0:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
 8002dd4:	f04f 0c01 	mov.w	ip, #1
 8002dd8:	e624      	b.n	8002a24 <cbvprintf+0x5b0>
		fract += 2;
 8002dda:	3102      	adds	r1, #2
 8002ddc:	f140 0000 	adc.w	r0, r0, #0
 8002de0:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
 8002de4:	a808      	add	r0, sp, #32
 8002de6:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8002dea:	f00e f88e 	bl	8010f0a <_ldiv5>
		decexp++;
 8002dee:	9b04      	ldr	r3, [sp, #16]
 8002df0:	9a03      	ldr	r2, [sp, #12]
 8002df2:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
 8002df6:	3d01      	subs	r5, #1
		decexp++;
 8002df8:	3301      	adds	r3, #1
			fract <<= 1;
 8002dfa:	1849      	adds	r1, r1, r1
 8002dfc:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
 8002dfe:	2800      	cmp	r0, #0
			expo--;
 8002e00:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
 8002e04:	daf9      	bge.n	8002dfa <cbvprintf+0x986>
 8002e06:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8002e0a:	e614      	b.n	8002a36 <cbvprintf+0x5c2>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	461d      	mov	r5, r3
 8002e10:	e616      	b.n	8002a40 <cbvprintf+0x5cc>
			precision -= decexp;
 8002e12:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
 8002e16:	2266      	movs	r2, #102	; 0x66
 8002e18:	e637      	b.n	8002a8a <cbvprintf+0x616>
	bool prune_zero = false;
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	e63f      	b.n	8002a9e <cbvprintf+0x62a>
		decimals = precision + 1;
 8002e1e:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
 8002e22:	2d10      	cmp	r5, #16
 8002e24:	bfa8      	it	ge
 8002e26:	2510      	movge	r5, #16
 8002e28:	2110      	movs	r1, #16
 8002e2a:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002e32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
 8002e36:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
 8002e3a:	b9a5      	cbnz	r5, 8002e66 <cbvprintf+0x9f2>
	fract += round;
 8002e3c:	9d08      	ldr	r5, [sp, #32]
 8002e3e:	1949      	adds	r1, r1, r5
 8002e40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002e42:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
 8002e46:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8002e4a:	d21b      	bcs.n	8002e84 <cbvprintf+0xa10>
	fract += round;
 8002e4c:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
 8002e50:	2a66      	cmp	r2, #102	; 0x66
 8002e52:	f040 8099 	bne.w	8002f88 <cbvprintf+0xb14>
		if (decexp > 0) {
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	dc23      	bgt.n	8002ea2 <cbvprintf+0xa2e>
			*buf++ = '0';
 8002e5a:	2130      	movs	r1, #48	; 0x30
 8002e5c:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 8002e60:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8002e64:	e02f      	b.n	8002ec6 <cbvprintf+0xa52>
	*v >>= 1;
 8002e66:	0849      	lsrs	r1, r1, #1
 8002e68:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
 8002e6c:	0840      	lsrs	r0, r0, #1
 8002e6e:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
 8002e72:	a80a      	add	r0, sp, #40	; 0x28
 8002e74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e78:	3d01      	subs	r5, #1
 8002e7a:	f00e f846 	bl	8010f0a <_ldiv5>
 8002e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
 8002e82:	e7d8      	b.n	8002e36 <cbvprintf+0x9c2>
	*v >>= 1;
 8002e84:	0849      	lsrs	r1, r1, #1
 8002e86:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
 8002e8a:	a808      	add	r0, sp, #32
	*v >>= 1;
 8002e8c:	086d      	lsrs	r5, r5, #1
 8002e8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e92:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
 8002e96:	f00e f838 	bl	8010f0a <_ldiv5>
		decexp++;
 8002e9a:	9b05      	ldr	r3, [sp, #20]
 8002e9c:	9a04      	ldr	r2, [sp, #16]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	e7d6      	b.n	8002e50 <cbvprintf+0x9dc>
	char *buf = bps;
 8002ea2:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
 8002ea4:	9907      	ldr	r1, [sp, #28]
 8002ea6:	2900      	cmp	r1, #0
 8002ea8:	dd0b      	ble.n	8002ec2 <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
 8002eaa:	a907      	add	r1, sp, #28
 8002eac:	a808      	add	r0, sp, #32
 8002eae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002eb2:	f00e f842 	bl	8010f3a <_get_digit>
			while (decexp > 0 && digit_count > 0) {
 8002eb6:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
 8002eb8:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	9a04      	ldr	r2, [sp, #16]
 8002ec0:	d1f0      	bne.n	8002ea4 <cbvprintf+0xa30>
			conv->pad0_value = decexp;
 8002ec2:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
 8002ec4:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
 8002ec6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8002eca:	0689      	lsls	r1, r1, #26
 8002ecc:	d402      	bmi.n	8002ed4 <cbvprintf+0xa60>
 8002ece:	f1b8 0f00 	cmp.w	r8, #0
 8002ed2:	dd1d      	ble.n	8002f10 <cbvprintf+0xa9c>
			*buf++ = '.';
 8002ed4:	212e      	movs	r1, #46	; 0x2e
 8002ed6:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
 8002eda:	b19b      	cbz	r3, 8002f04 <cbvprintf+0xa90>
 8002edc:	f1b8 0f00 	cmp.w	r8, #0
 8002ee0:	dd16      	ble.n	8002f10 <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
 8002ee2:	4259      	negs	r1, r3
 8002ee4:	4541      	cmp	r1, r8
 8002ee6:	bfa8      	it	ge
 8002ee8:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
 8002eea:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
 8002eee:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
 8002ef0:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
 8002ef2:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
 8002ef6:	bfd4      	ite	le
 8002ef8:	2100      	movle	r1, #0
 8002efa:	2101      	movgt	r1, #1
 8002efc:	f361 1045 	bfi	r0, r1, #5, #1
 8002f00:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
 8002f04:	f1b8 0f00 	cmp.w	r8, #0
 8002f08:	dd02      	ble.n	8002f10 <cbvprintf+0xa9c>
 8002f0a:	9907      	ldr	r1, [sp, #28]
 8002f0c:	2900      	cmp	r1, #0
 8002f0e:	dc56      	bgt.n	8002fbe <cbvprintf+0xb4a>
	if (prune_zero) {
 8002f10:	9903      	ldr	r1, [sp, #12]
 8002f12:	2900      	cmp	r1, #0
 8002f14:	d163      	bne.n	8002fde <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
 8002f16:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
 8002f1a:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8002f1e:	2945      	cmp	r1, #69	; 0x45
 8002f20:	d121      	bne.n	8002f66 <cbvprintf+0xaf2>
		if (decexp < 0) {
 8002f22:	2b00      	cmp	r3, #0
		*buf++ = c;
 8002f24:	4629      	mov	r1, r5
			decexp = -decexp;
 8002f26:	bfb8      	it	lt
 8002f28:	425b      	neglt	r3, r3
		*buf++ = c;
 8002f2a:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
 8002f2e:	bfb4      	ite	lt
 8002f30:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
 8002f32:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
 8002f34:	2b63      	cmp	r3, #99	; 0x63
 8002f36:	706a      	strb	r2, [r5, #1]
 8002f38:	dd09      	ble.n	8002f4e <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
 8002f3a:	2064      	movs	r0, #100	; 0x64
 8002f3c:	fbb3 f2f0 	udiv	r2, r3, r0
 8002f40:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8002f44:	1ce9      	adds	r1, r5, #3
 8002f46:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
 8002f4a:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8002f4e:	200a      	movs	r0, #10
 8002f50:	460d      	mov	r5, r1
 8002f52:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
 8002f56:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
 8002f5a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
 8002f5e:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
 8002f60:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
 8002f64:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
 8002f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	dc43      	bgt.n	8002ff4 <cbvprintf+0xb80>
 8002f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bfd4      	ite	le
 8002f72:	2300      	movle	r3, #0
 8002f74:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8002f76:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8002f7a:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
 8002f7e:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
 8002f80:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
 8002f84:	702b      	strb	r3, [r5, #0]
	return bps;
 8002f86:	e5fb      	b.n	8002b80 <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
 8002f88:	a907      	add	r1, sp, #28
 8002f8a:	a808      	add	r0, sp, #32
 8002f8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f90:	f00d ffd3 	bl	8010f3a <_get_digit>
		if (*buf++ != '0') {
 8002f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
 8002f98:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
 8002f9c:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
 8002fa0:	2830      	cmp	r0, #48	; 0x30
			decexp--;
 8002fa2:	bf18      	it	ne
 8002fa4:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
 8002fa8:	0688      	lsls	r0, r1, #26
 8002faa:	d402      	bmi.n	8002fb2 <cbvprintf+0xb3e>
 8002fac:	f1b8 0f00 	cmp.w	r8, #0
 8002fb0:	dd12      	ble.n	8002fd8 <cbvprintf+0xb64>
			*buf++ = '.';
 8002fb2:	212e      	movs	r1, #46	; 0x2e
 8002fb4:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
 8002fb8:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
 8002fbc:	e7a2      	b.n	8002f04 <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
 8002fbe:	a907      	add	r1, sp, #28
 8002fc0:	a808      	add	r0, sp, #32
 8002fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fc6:	f00d ffb8 	bl	8010f3a <_get_digit>
		precision--;
 8002fca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
 8002fd2:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
 8002fd6:	e795      	b.n	8002f04 <cbvprintf+0xa90>
		if (*buf++ != '0') {
 8002fd8:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
 8002fdc:	e798      	b.n	8002f10 <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
 8002fde:	2100      	movs	r1, #0
 8002fe0:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8002fe8:	2930      	cmp	r1, #48	; 0x30
 8002fea:	d0fa      	beq.n	8002fe2 <cbvprintf+0xb6e>
		if (*buf != '.') {
 8002fec:	292e      	cmp	r1, #46	; 0x2e
 8002fee:	bf18      	it	ne
 8002ff0:	4605      	movne	r5, r0
 8002ff2:	e792      	b.n	8002f1a <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e7be      	b.n	8002f76 <cbvprintf+0xb02>
			bpe = bps + 5;
 8002ff8:	4d0a      	ldr	r5, [pc, #40]	; (8003024 <cbvprintf+0xbb0>)
		char sign = 0;
 8002ffa:	4607      	mov	r7, r0
			bps = "(nil)";
 8002ffc:	1f6a      	subs	r2, r5, #5
 8002ffe:	e5c0      	b.n	8002b82 <cbvprintf+0x70e>
		} else if (conv->altform_0) {
 8003000:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
 8003002:	bf48      	it	mi
 8003004:	3301      	addmi	r3, #1
 8003006:	e5c5      	b.n	8002b94 <cbvprintf+0x720>
					OUTC(pad);
 8003008:	4651      	mov	r1, sl
 800300a:	4640      	mov	r0, r8
 800300c:	9203      	str	r2, [sp, #12]
 800300e:	47c8      	blx	r9
 8003010:	2800      	cmp	r0, #0
 8003012:	9a03      	ldr	r2, [sp, #12]
 8003014:	f6bf ade2 	bge.w	8002bdc <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
 8003018:	b01b      	add	sp, #108	; 0x6c
 800301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	08019577 	.word	0x08019577
 8003024:	08017f57 	.word	0x08017f57
				char pad = ' ';
 8003028:	f04f 0820 	mov.w	r8, #32
 800302c:	e5d5      	b.n	8002bda <cbvprintf+0x766>
					pad = '0';
 800302e:	f04f 0830 	mov.w	r8, #48	; 0x30
 8003032:	e5d2      	b.n	8002bda <cbvprintf+0x766>
					OUTC(*cp++);
 8003034:	4651      	mov	r1, sl
 8003036:	47c8      	blx	r9
 8003038:	2800      	cmp	r0, #0
 800303a:	f6bf adef 	bge.w	8002c1c <cbvprintf+0x7a8>
 800303e:	e7eb      	b.n	8003018 <cbvprintf+0xba4>
					OUTC(*cp++);
 8003040:	4651      	mov	r1, sl
 8003042:	9203      	str	r2, [sp, #12]
 8003044:	47c8      	blx	r9
 8003046:	2800      	cmp	r0, #0
 8003048:	9a03      	ldr	r2, [sp, #12]
 800304a:	dbe5      	blt.n	8003018 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
 800304c:	7810      	ldrb	r0, [r2, #0]
 800304e:	4b37      	ldr	r3, [pc, #220]	; (800312c <cbvprintf+0xcb8>)
 8003050:	5cc3      	ldrb	r3, [r0, r3]
 8003052:	075b      	lsls	r3, r3, #29
 8003054:	4617      	mov	r7, r2
 8003056:	eb06 0802 	add.w	r8, r6, r2
 800305a:	f102 0201 	add.w	r2, r2, #1
 800305e:	d4ef      	bmi.n	8003040 <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
 8003060:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
 8003064:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
 8003066:	0699      	lsls	r1, r3, #26
 8003068:	d407      	bmi.n	800307a <cbvprintf+0xc06>
 800306a:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
 800306c:	2e00      	cmp	r6, #0
 800306e:	eba8 0206 	sub.w	r2, r8, r6
 8003072:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8003076:	dc0f      	bgt.n	8003098 <cbvprintf+0xc24>
 8003078:	4690      	mov	r8, r2
				if (*cp == '.') {
 800307a:	7838      	ldrb	r0, [r7, #0]
 800307c:	282e      	cmp	r0, #46	; 0x2e
 800307e:	d108      	bne.n	8003092 <cbvprintf+0xc1e>
					OUTC(*cp++);
 8003080:	4651      	mov	r1, sl
 8003082:	47c8      	blx	r9
						OUTC('0');
 8003084:	2800      	cmp	r0, #0
 8003086:	dbc7      	blt.n	8003018 <cbvprintf+0xba4>
					while (pad_len-- > 0) {
 8003088:	2e00      	cmp	r6, #0
						OUTC('0');
 800308a:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
 800308e:	dc09      	bgt.n	80030a4 <cbvprintf+0xc30>
					OUTC(*cp++);
 8003090:	3701      	adds	r7, #1
 8003092:	eba8 0607 	sub.w	r6, r8, r7
 8003096:	e00e      	b.n	80030b6 <cbvprintf+0xc42>
						OUTC('0');
 8003098:	4651      	mov	r1, sl
 800309a:	2030      	movs	r0, #48	; 0x30
 800309c:	47c8      	blx	r9
 800309e:	2800      	cmp	r0, #0
 80030a0:	dae4      	bge.n	800306c <cbvprintf+0xbf8>
 80030a2:	e7b9      	b.n	8003018 <cbvprintf+0xba4>
						OUTC('0');
 80030a4:	4651      	mov	r1, sl
 80030a6:	2030      	movs	r0, #48	; 0x30
 80030a8:	47c8      	blx	r9
 80030aa:	3e01      	subs	r6, #1
 80030ac:	e7ea      	b.n	8003084 <cbvprintf+0xc10>
					OUTC(*cp++);
 80030ae:	4651      	mov	r1, sl
 80030b0:	47c8      	blx	r9
 80030b2:	2800      	cmp	r0, #0
 80030b4:	dbb0      	blt.n	8003018 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <cbvprintf+0xcb8>)
 80030b8:	46b8      	mov	r8, r7
 80030ba:	19f3      	adds	r3, r6, r7
 80030bc:	f817 0b01 	ldrb.w	r0, [r7], #1
 80030c0:	5c12      	ldrb	r2, [r2, r0]
 80030c2:	0752      	lsls	r2, r2, #29
 80030c4:	d4f3      	bmi.n	80030ae <cbvprintf+0xc3a>
 80030c6:	e5b0      	b.n	8002c2a <cbvprintf+0x7b6>
				OUTC('0');
 80030c8:	4651      	mov	r1, sl
 80030ca:	2030      	movs	r0, #48	; 0x30
 80030cc:	47c8      	blx	r9
 80030ce:	2800      	cmp	r0, #0
 80030d0:	dba2      	blt.n	8003018 <cbvprintf+0xba4>
 80030d2:	3601      	adds	r6, #1
 80030d4:	e5ac      	b.n	8002c30 <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
 80030d6:	06d8      	lsls	r0, r3, #27
 80030d8:	d401      	bmi.n	80030de <cbvprintf+0xc6a>
 80030da:	0719      	lsls	r1, r3, #28
 80030dc:	d507      	bpl.n	80030ee <cbvprintf+0xc7a>
				OUTC('0');
 80030de:	4651      	mov	r1, sl
 80030e0:	2030      	movs	r0, #48	; 0x30
 80030e2:	9203      	str	r2, [sp, #12]
 80030e4:	47c8      	blx	r9
 80030e6:	2800      	cmp	r0, #0
 80030e8:	db96      	blt.n	8003018 <cbvprintf+0xba4>
 80030ea:	9a03      	ldr	r2, [sp, #12]
 80030ec:	3601      	adds	r6, #1
			if (conv->altform_0c) {
 80030ee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80030f2:	06db      	lsls	r3, r3, #27
 80030f4:	d508      	bpl.n	8003108 <cbvprintf+0xc94>
				OUTC(conv->specifier);
 80030f6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 80030fa:	9203      	str	r2, [sp, #12]
 80030fc:	4651      	mov	r1, sl
 80030fe:	47c8      	blx	r9
 8003100:	2800      	cmp	r0, #0
 8003102:	db89      	blt.n	8003018 <cbvprintf+0xba4>
 8003104:	9a03      	ldr	r2, [sp, #12]
 8003106:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
 8003108:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800310a:	4437      	add	r7, r6
 800310c:	1bbb      	subs	r3, r7, r6
 800310e:	2b00      	cmp	r3, #0
 8003110:	dc01      	bgt.n	8003116 <cbvprintf+0xca2>
			OUTS(bps, bpe);
 8003112:	462b      	mov	r3, r5
 8003114:	e592      	b.n	8002c3c <cbvprintf+0x7c8>
				OUTC('0');
 8003116:	4651      	mov	r1, sl
 8003118:	2030      	movs	r0, #48	; 0x30
 800311a:	9203      	str	r2, [sp, #12]
 800311c:	47c8      	blx	r9
 800311e:	2800      	cmp	r0, #0
 8003120:	f6ff af7a 	blt.w	8003018 <cbvprintf+0xba4>
 8003124:	9a03      	ldr	r2, [sp, #12]
 8003126:	3601      	adds	r6, #1
 8003128:	e7f0      	b.n	800310c <cbvprintf+0xc98>
 800312a:	bf00      	nop
 800312c:	08019578 	.word	0x08019578

08003130 <stm32wl_init>:
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
#if defined(CORE_CM0PLUS)
  SET_BIT(FLASH->C2ACR, FLASH_C2ACR_ICEN);
#else
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <stm32wl_init+0x34>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003140:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8003142:	f04f 0210 	mov.w	r2, #16
 8003146:	f3ef 8311 	mrs	r3, BASEPRI
 800314a:	f382 8812 	msr	BASEPRI_MAX, r2
 800314e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 800315a:	4b03      	ldr	r3, [pc, #12]	; (8003168 <stm32wl_init+0x38>)
 800315c:	4a03      	ldr	r2, [pc, #12]	; (800316c <stm32wl_init+0x3c>)
 800315e:	601a      	str	r2, [r3, #0]

	return 0;
}
 8003160:	2000      	movs	r0, #0
 8003162:	4770      	bx	lr
 8003164:	58004000 	.word	0x58004000
 8003168:	20000228 	.word	0x20000228
 800316c:	003d0900 	.word	0x003d0900

08003170 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8003170:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8003172:	4910      	ldr	r1, [pc, #64]	; (80031b4 <enable_logger+0x44>)
 8003174:	4810      	ldr	r0, [pc, #64]	; (80031b8 <enable_logger+0x48>)
{
 8003176:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 8003178:	2200      	movs	r2, #0
 800317a:	f013 f872 	bl	8016262 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800317e:	4d0f      	ldr	r5, [pc, #60]	; (80031bc <enable_logger+0x4c>)
 8003180:	490f      	ldr	r1, [pc, #60]	; (80031c0 <enable_logger+0x50>)
 8003182:	2200      	movs	r2, #0
 8003184:	2300      	movs	r3, #0
 8003186:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800318a:	2400      	movs	r4, #0
 800318c:	230e      	movs	r3, #14
 800318e:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003192:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <enable_logger+0x54>)
 8003198:	9400      	str	r4, [sp, #0]
 800319a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800319e:	4628      	mov	r0, r5
 80031a0:	f00a fc96 	bl	800dad0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 80031a4:	4908      	ldr	r1, [pc, #32]	; (80031c8 <enable_logger+0x58>)
 80031a6:	4628      	mov	r0, r5
 80031a8:	f012 fea9 	bl	8015efe <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 80031ac:	4620      	mov	r0, r4
 80031ae:	b009      	add	sp, #36	; 0x24
 80031b0:	bd30      	pop	{r4, r5, pc}
 80031b2:	bf00      	nop
 80031b4:	080031cd 	.word	0x080031cd
 80031b8:	200009a0 	.word	0x200009a0
 80031bc:	200009d8 	.word	0x200009d8
 80031c0:	200084e0 	.word	0x200084e0
 80031c4:	080033f1 	.word	0x080033f1
 80031c8:	08017f58 	.word	0x08017f58

080031cc <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80031cc:	4801      	ldr	r0, [pc, #4]	; (80031d4 <log_process_thread_timer_expiry_fn+0x8>)
 80031ce:	f00a bdb1 	b.w	800dd34 <z_impl_k_sem_give>
 80031d2:	bf00      	nop
 80031d4:	200003d4 	.word	0x200003d4

080031d8 <log_format_func_t_get>:
}
 80031d8:	4b01      	ldr	r3, [pc, #4]	; (80031e0 <log_format_func_t_get+0x8>)
 80031da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80031de:	4770      	bx	lr
 80031e0:	080170a8 	.word	0x080170a8

080031e4 <log_init>:
{
 80031e4:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <log_init+0x4c>)
 80031e8:	f3bf 8f5b 	dmb	ish
 80031ec:	e853 5f00 	ldrex	r5, [r3]
 80031f0:	1c6a      	adds	r2, r5, #1
 80031f2:	e843 2100 	strex	r1, r2, [r3]
 80031f6:	2900      	cmp	r1, #0
 80031f8:	d1f8      	bne.n	80031ec <log_init+0x8>
 80031fa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 80031fe:	b92d      	cbnz	r5, 800320c <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8003200:	4c0c      	ldr	r4, [pc, #48]	; (8003234 <log_init+0x50>)
 8003202:	4e0d      	ldr	r6, [pc, #52]	; (8003238 <log_init+0x54>)
 8003204:	1b36      	subs	r6, r6, r4
 8003206:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8003208:	42b5      	cmp	r5, r6
 800320a:	db00      	blt.n	800320e <log_init+0x2a>
}
 800320c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 800320e:	7b23      	ldrb	r3, [r4, #12]
 8003210:	b153      	cbz	r3, 8003228 <log_init+0x44>
			if (backend->api->init != NULL) {
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	b10b      	cbz	r3, 800321c <log_init+0x38>
				backend->api->init(backend);
 8003218:	4620      	mov	r0, r4
 800321a:	4798      	blx	r3
			log_backend_enable(backend,
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	2204      	movs	r2, #4
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	4620      	mov	r0, r4
 8003224:	f000 f992 	bl	800354c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8003228:	3501      	adds	r5, #1
 800322a:	3410      	adds	r4, #16
 800322c:	e7ec      	b.n	8003208 <log_init+0x24>
 800322e:	bf00      	nop
 8003230:	20000f80 	.word	0x20000f80
 8003234:	08016f68 	.word	0x08016f68
 8003238:	08016f78 	.word	0x08016f78

0800323c <z_log_notify_backend_enabled>:
{
 800323c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 800323e:	4c04      	ldr	r4, [pc, #16]	; (8003250 <z_log_notify_backend_enabled+0x14>)
 8003240:	7823      	ldrb	r3, [r4, #0]
 8003242:	b913      	cbnz	r3, 800324a <z_log_notify_backend_enabled+0xe>
 8003244:	4803      	ldr	r0, [pc, #12]	; (8003254 <z_log_notify_backend_enabled+0x18>)
 8003246:	f00a fd75 	bl	800dd34 <z_impl_k_sem_give>
	backend_attached = true;
 800324a:	2301      	movs	r3, #1
 800324c:	7023      	strb	r3, [r4, #0]
}
 800324e:	bd10      	pop	{r4, pc}
 8003250:	20002342 	.word	0x20002342
 8003254:	200003d4 	.word	0x200003d4

08003258 <z_log_dropped>:
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <z_log_dropped+0x34>)
 800325a:	f3bf 8f5b 	dmb	ish
 800325e:	e853 2f00 	ldrex	r2, [r3]
 8003262:	3201      	adds	r2, #1
 8003264:	e843 2100 	strex	r1, r2, [r3]
 8003268:	2900      	cmp	r1, #0
 800326a:	d1f8      	bne.n	800325e <z_log_dropped+0x6>
 800326c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 8003270:	b158      	cbz	r0, 800328a <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003272:	f3bf 8f5b 	dmb	ish
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <z_log_dropped+0x38>)
 8003278:	e853 2f00 	ldrex	r2, [r3]
 800327c:	3a01      	subs	r2, #1
 800327e:	e843 2100 	strex	r1, r2, [r3]
 8003282:	2900      	cmp	r1, #0
 8003284:	d1f8      	bne.n	8003278 <z_log_dropped+0x20>
 8003286:	f3bf 8f5b 	dmb	ish
}
 800328a:	4770      	bx	lr
 800328c:	20000f7c 	.word	0x20000f7c
 8003290:	20000f78 	.word	0x20000f78

08003294 <z_log_dropped_read_and_clear>:
}
 8003294:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <z_log_dropped_read_and_clear+0x1c>)
 8003298:	f3bf 8f5b 	dmb	ish
 800329c:	4602      	mov	r2, r0
 800329e:	e853 0f00 	ldrex	r0, [r3]
 80032a2:	e843 2100 	strex	r1, r2, [r3]
 80032a6:	2900      	cmp	r1, #0
 80032a8:	d1f9      	bne.n	800329e <z_log_dropped_read_and_clear+0xa>
 80032aa:	f3bf 8f5b 	dmb	ish
 80032ae:	4770      	bx	lr
 80032b0:	20000f7c 	.word	0x20000f7c

080032b4 <dropped_notify>:
{
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80032b6:	f7ff ffed 	bl	8003294 <z_log_dropped_read_and_clear>
 80032ba:	4c0a      	ldr	r4, [pc, #40]	; (80032e4 <dropped_notify+0x30>)
 80032bc:	4d0a      	ldr	r5, [pc, #40]	; (80032e8 <dropped_notify+0x34>)
 80032be:	1b2d      	subs	r5, r5, r4
 80032c0:	4607      	mov	r7, r0
 80032c2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80032c4:	2600      	movs	r6, #0
 80032c6:	42ae      	cmp	r6, r5
 80032c8:	db00      	blt.n	80032cc <dropped_notify+0x18>
}
 80032ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 80032cc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 80032ce:	795b      	ldrb	r3, [r3, #5]
 80032d0:	b12b      	cbz	r3, 80032de <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	b113      	cbz	r3, 80032de <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
 80032d8:	4639      	mov	r1, r7
 80032da:	4620      	mov	r0, r4
 80032dc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 80032de:	3601      	adds	r6, #1
 80032e0:	3410      	adds	r4, #16
 80032e2:	e7f0      	b.n	80032c6 <dropped_notify+0x12>
 80032e4:	08016f68 	.word	0x08016f68
 80032e8:	08016f78 	.word	0x08016f78

080032ec <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 80032ec:	4901      	ldr	r1, [pc, #4]	; (80032f4 <z_log_msg2_init+0x8>)
 80032ee:	4802      	ldr	r0, [pc, #8]	; (80032f8 <z_log_msg2_init+0xc>)
 80032f0:	f00d bf05 	b.w	80110fe <mpsc_pbuf_init>
 80032f4:	080170b4 	.word	0x080170b4
 80032f8:	20000f84 	.word	0x20000f84

080032fc <log_core_init>:
	panic_mode = false;
 80032fc:	4a08      	ldr	r2, [pc, #32]	; (8003320 <log_core_init+0x24>)
{
 80032fe:	b508      	push	{r3, lr}
	panic_mode = false;
 8003300:	2300      	movs	r3, #0
 8003302:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8003304:	4a07      	ldr	r2, [pc, #28]	; (8003324 <log_core_init+0x28>)
 8003306:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <log_core_init+0x2c>)
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <log_core_init+0x30>)
 800330c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 800330e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003312:	f000 faff 	bl	8003914 <log_output_timestamp_freq_set>
}
 8003316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
 800331a:	f7ff bfe7 	b.w	80032ec <z_log_msg2_init>
 800331e:	bf00      	nop
 8003320:	20002343 	.word	0x20002343
 8003324:	20000f7c 	.word	0x20000f7c
 8003328:	20000080 	.word	0x20000080
 800332c:	080113ab 	.word	0x080113ab

08003330 <z_log_msg2_alloc>:
{
 8003330:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 8003332:	2200      	movs	r2, #0
 8003334:	4801      	ldr	r0, [pc, #4]	; (800333c <z_log_msg2_alloc+0xc>)
 8003336:	2300      	movs	r3, #0
 8003338:	f00d bf02 	b.w	8011140 <mpsc_pbuf_alloc>
 800333c:	20000f84 	.word	0x20000f84

08003340 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 8003340:	4801      	ldr	r0, [pc, #4]	; (8003348 <z_log_msg2_claim+0x8>)
 8003342:	f00d bf93 	b.w	801126c <mpsc_pbuf_claim>
 8003346:	bf00      	nop
 8003348:	20000f84 	.word	0x20000f84

0800334c <z_log_msg2_free>:
{
 800334c:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 800334e:	4801      	ldr	r0, [pc, #4]	; (8003354 <z_log_msg2_free+0x8>)
 8003350:	f00d bfd8 	b.w	8011304 <mpsc_pbuf_free>
 8003354:	20000f84 	.word	0x20000f84

08003358 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
 8003358:	4801      	ldr	r0, [pc, #4]	; (8003360 <z_log_msg2_pending+0x8>)
 800335a:	f00e b807 	b.w	801136c <mpsc_pbuf_is_pending>
 800335e:	bf00      	nop
 8003360:	20000f84 	.word	0x20000f84

08003364 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <z_impl_log_process+0x78>)
 8003366:	781b      	ldrb	r3, [r3, #0]
{
 8003368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336c:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
 800336e:	b903      	cbnz	r3, 8003372 <z_impl_log_process+0xe>
 8003370:	b388      	cbz	r0, 80033d6 <z_impl_log_process+0x72>
	msg = get_msg();
 8003372:	f00e f827 	bl	80113c4 <get_msg>
	if (msg.msg) {
 8003376:	4606      	mov	r6, r0
 8003378:	b118      	cbz	r0, 8003382 <z_impl_log_process+0x1e>
		if (!bypass) {
 800337a:	b16d      	cbz	r5, 8003398 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
 800337c:	4630      	mov	r0, r6
 800337e:	f7ff ffe5 	bl	800334c <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
 8003382:	b92d      	cbnz	r5, 8003390 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	dd01      	ble.n	8003390 <z_impl_log_process+0x2c>
		dropped_notify();
 800338c:	f7ff ff92 	bl	80032b4 <dropped_notify>
}
 8003390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
 8003394:	f7ff bfe0 	b.w	8003358 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <z_impl_log_process+0x80>)
 800339a:	f3bf 8f5b 	dmb	ish
 800339e:	e853 2f00 	ldrex	r2, [r3]
 80033a2:	3a01      	subs	r2, #1
 80033a4:	e843 2100 	strex	r1, r2, [r3]
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d1f8      	bne.n	800339e <z_impl_log_process+0x3a>
 80033ac:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
 80033b0:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <z_impl_log_process+0x84>)
 80033b2:	4f0e      	ldr	r7, [pc, #56]	; (80033ec <z_impl_log_process+0x88>)
 80033b4:	1b3f      	subs	r7, r7, r4
 80033b6:	113f      	asrs	r7, r7, #4
 80033b8:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
 80033ba:	45b8      	cmp	r8, r7
 80033bc:	dade      	bge.n	800337c <z_impl_log_process+0x18>
	return backend->cb->active;
 80033be:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
 80033c0:	795b      	ldrb	r3, [r3, #5]
 80033c2:	b123      	cbz	r3, 80033ce <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	4631      	mov	r1, r6
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4620      	mov	r0, r4
 80033cc:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
 80033ce:	f108 0801 	add.w	r8, r8, #1
 80033d2:	3410      	adds	r4, #16
 80033d4:	e7f1      	b.n	80033ba <z_impl_log_process+0x56>
}
 80033d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033da:	bf00      	nop
 80033dc:	20002342 	.word	0x20002342
 80033e0:	20000f7c 	.word	0x20000f7c
 80033e4:	20000f78 	.word	0x20000f78
 80033e8:	08016f68 	.word	0x08016f68
 80033ec:	08016f78 	.word	0x08016f78

080033f0 <log_process_thread_func>:
{
 80033f0:	b510      	push	{r4, lr}
	log_init();
 80033f2:	f7ff fef7 	bl	80031e4 <log_init>
	return z_impl_z_current_get();
 80033f6:	f00b f8f5 	bl	800e5e4 <z_impl_z_current_get>
	proc_tid = process_tid;
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <log_process_thread_func+0x3c>)
 80033fc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 80033fe:	b130      	cbz	r0, 800340e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <log_process_thread_func+0x40>)
	    process_tid &&
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b09      	cmp	r3, #9
 8003406:	dd02      	ble.n	800340e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
 8003408:	480a      	ldr	r0, [pc, #40]	; (8003434 <log_process_thread_func+0x44>)
 800340a:	f00a fc93 	bl	800dd34 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
 800340e:	4c09      	ldr	r4, [pc, #36]	; (8003434 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8003410:	2000      	movs	r0, #0
 8003412:	f7ff ffa7 	bl	8003364 <z_impl_log_process>
		if (log_process(false) == false) {
 8003416:	2800      	cmp	r0, #0
 8003418:	d1fa      	bne.n	8003410 <log_process_thread_func+0x20>
 800341a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800341e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003422:	4620      	mov	r0, r4
 8003424:	f00a fcac 	bl	800dd80 <z_impl_k_sem_take>
 8003428:	e7f2      	b.n	8003410 <log_process_thread_func+0x20>
 800342a:	bf00      	nop
 800342c:	20000fc4 	.word	0x20000fc4
 8003430:	20000f78 	.word	0x20000f78
 8003434:	200003d4 	.word	0x200003d4

08003438 <z_log_msg_post_finalize>:
{
 8003438:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <z_log_msg_post_finalize+0x78>)
 800343c:	f3bf 8f5b 	dmb	ish
 8003440:	e853 2f00 	ldrex	r2, [r3]
 8003444:	1c51      	adds	r1, r2, #1
 8003446:	e843 1000 	strex	r0, r1, [r3]
 800344a:	2800      	cmp	r0, #0
 800344c:	d1f8      	bne.n	8003440 <z_log_msg_post_finalize+0x8>
 800344e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <z_log_msg_post_finalize+0x7c>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b183      	cbz	r3, 800347a <z_log_msg_post_finalize+0x42>
	__asm__ volatile(
 8003458:	f04f 0310 	mov.w	r3, #16
 800345c:	f3ef 8411 	mrs	r4, BASEPRI
 8003460:	f383 8812 	msr	BASEPRI_MAX, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	2000      	movs	r0, #0
 800346a:	f7ff ff7b 	bl	8003364 <z_impl_log_process>
	__asm__ volatile(
 800346e:	f384 8811 	msr	BASEPRI, r4
 8003472:	f3bf 8f6f 	isb	sy
}
 8003476:	b002      	add	sp, #8
 8003478:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
 800347a:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <z_log_msg_post_finalize+0x80>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f9      	beq.n	8003476 <z_log_msg_post_finalize+0x3e>
 8003482:	b952      	cbnz	r2, 800349a <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
 8003484:	2200      	movs	r2, #0
 8003486:	2300      	movs	r3, #0
 8003488:	e9cd 2300 	strd	r2, r3, [sp]
 800348c:	480b      	ldr	r0, [pc, #44]	; (80034bc <z_log_msg_post_finalize+0x84>)
 800348e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003492:	2300      	movs	r3, #0
 8003494:	f00b fad0 	bl	800ea38 <z_impl_k_timer_start>
 8003498:	e7ed      	b.n	8003476 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800349a:	2a0a      	cmp	r2, #10
 800349c:	d1eb      	bne.n	8003476 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
 800349e:	4807      	ldr	r0, [pc, #28]	; (80034bc <z_log_msg_post_finalize+0x84>)
 80034a0:	f012 feeb 	bl	801627a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80034a4:	4806      	ldr	r0, [pc, #24]	; (80034c0 <z_log_msg_post_finalize+0x88>)
}
 80034a6:	b002      	add	sp, #8
 80034a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ac:	f00a bc42 	b.w	800dd34 <z_impl_k_sem_give>
 80034b0:	20000f78 	.word	0x20000f78
 80034b4:	20002343 	.word	0x20002343
 80034b8:	20000fc4 	.word	0x20000fc4
 80034bc:	200009a0 	.word	0x200009a0
 80034c0:	200003d4 	.word	0x200003d4

080034c4 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <z_log_msg2_commit+0x1c>)
{
 80034c6:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
 80034c8:	681b      	ldr	r3, [r3, #0]
{
 80034ca:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 80034cc:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80034ce:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 80034d0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80034d2:	4804      	ldr	r0, [pc, #16]	; (80034e4 <z_log_msg2_commit+0x20>)
 80034d4:	f00d feaa 	bl	801122c <mpsc_pbuf_commit>
}
 80034d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 80034dc:	f7ff bfac 	b.w	8003438 <z_log_msg_post_finalize>
 80034e0:	20000080 	.word	0x20000080
 80034e4:	20000f84 	.word	0x20000f84

080034e8 <z_impl_log_panic>:
{
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 80034ea:	4f0e      	ldr	r7, [pc, #56]	; (8003524 <z_impl_log_panic+0x3c>)
 80034ec:	783d      	ldrb	r5, [r7, #0]
 80034ee:	b975      	cbnz	r5, 800350e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
 80034f0:	4c0d      	ldr	r4, [pc, #52]	; (8003528 <z_impl_log_panic+0x40>)
 80034f2:	4e0e      	ldr	r6, [pc, #56]	; (800352c <z_impl_log_panic+0x44>)
	log_init();
 80034f4:	f7ff fe76 	bl	80031e4 <log_init>
 80034f8:	1b36      	subs	r6, r6, r4
 80034fa:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 80034fc:	42b5      	cmp	r5, r6
 80034fe:	db07      	blt.n	8003510 <z_impl_log_panic+0x28>
 8003500:	2000      	movs	r0, #0
 8003502:	f7ff ff2f 	bl	8003364 <z_impl_log_process>
		while (log_process(false) == true) {
 8003506:	2800      	cmp	r0, #0
 8003508:	d1fa      	bne.n	8003500 <z_impl_log_panic+0x18>
	panic_mode = true;
 800350a:	2301      	movs	r3, #1
 800350c:	703b      	strb	r3, [r7, #0]
}
 800350e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8003510:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8003512:	795b      	ldrb	r3, [r3, #5]
 8003514:	b11b      	cbz	r3, 800351e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	4620      	mov	r0, r4
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 800351e:	3501      	adds	r5, #1
 8003520:	3410      	adds	r4, #16
 8003522:	e7eb      	b.n	80034fc <z_impl_log_panic+0x14>
 8003524:	20002343 	.word	0x20002343
 8003528:	08016f68 	.word	0x08016f68
 800352c:	08016f78 	.word	0x08016f78

08003530 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <log_source_name_get+0x14>)
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <log_source_name_get+0x18>)
 8003534:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8003536:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 800353a:	bf34      	ite	cc
 800353c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8003540:	2000      	movcs	r0, #0
}
 8003542:	4770      	bx	lr
 8003544:	08016ea0 	.word	0x08016ea0
 8003548:	08016f68 	.word	0x08016f68

0800354c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 800354c:	4a05      	ldr	r2, [pc, #20]	; (8003564 <log_backend_enable+0x18>)
	backend->cb->id = id;
 800354e:	6843      	ldr	r3, [r0, #4]
 8003550:	1a80      	subs	r0, r0, r2
 8003552:	1100      	asrs	r0, r0, #4
 8003554:	3001      	adds	r0, #1
	backend->cb->active = true;
 8003556:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
 8003558:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
 800355a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 800355c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 800355e:	f7ff be6d 	b.w	800323c <z_log_notify_backend_enabled>
 8003562:	bf00      	nop
 8003564:	08016f68 	.word	0x08016f68

08003568 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8003568:	b40e      	push	{r1, r2, r3}
 800356a:	b503      	push	{r0, r1, lr}
 800356c:	ab03      	add	r3, sp, #12
 800356e:	4601      	mov	r1, r0
 8003570:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003574:	4804      	ldr	r0, [pc, #16]	; (8003588 <print_formatted+0x20>)
	va_start(args, fmt);
 8003576:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003578:	f7fe ff7c 	bl	8002474 <cbvprintf>
	va_end(args);

	return length;
}
 800357c:	b002      	add	sp, #8
 800357e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003582:	b003      	add	sp, #12
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	08011405 	.word	0x08011405

0800358c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 800358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	461d      	mov	r5, r3
 8003592:	9b08      	ldr	r3, [sp, #32]
 8003594:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8003596:	06da      	lsls	r2, r3, #27
{
 8003598:	4604      	mov	r4, r0
 800359a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800359c:	d405      	bmi.n	80035aa <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800359e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 80035a0:	bf4c      	ite	mi
 80035a2:	492b      	ldrmi	r1, [pc, #172]	; (8003650 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
 80035a4:	492b      	ldrpl	r1, [pc, #172]	; (8003654 <hexdump_line_print+0xc8>)
 80035a6:	f7ff ffdf 	bl	8003568 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
 80035aa:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8003658 <hexdump_line_print+0xcc>
{
 80035ae:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 80035b2:	45a8      	cmp	r8, r5
 80035b4:	db2d      	blt.n	8003612 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 80035b6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800365c <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
 80035ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003660 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
 80035be:	f8df a098 	ldr.w	sl, [pc, #152]	; 8003658 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80035c2:	2500      	movs	r5, #0
		if (i < length) {
 80035c4:	42bd      	cmp	r5, r7
 80035c6:	d232      	bcs.n	800362e <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
 80035c8:	5d72      	ldrb	r2, [r6, r5]
 80035ca:	4649      	mov	r1, r9
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7ff ffcb 	bl	8003568 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80035d2:	3501      	adds	r5, #1
 80035d4:	2d10      	cmp	r5, #16
 80035d6:	d123      	bne.n	8003620 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
 80035d8:	4922      	ldr	r1, [pc, #136]	; (8003664 <hexdump_line_print+0xd8>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
 80035da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8003658 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
 80035de:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003668 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
 80035e2:	f8df a088 	ldr.w	sl, [pc, #136]	; 800366c <hexdump_line_print+0xe0>
	print_formatted(output, "|");
 80035e6:	4620      	mov	r0, r4
 80035e8:	f7ff ffbe 	bl	8003568 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80035ec:	2500      	movs	r5, #0
		if (i < length) {
 80035ee:	42af      	cmp	r7, r5
 80035f0:	d929      	bls.n	8003646 <hexdump_line_print+0xba>
			char c = (char)data[i];
 80035f2:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
 80035f4:	f812 3009 	ldrb.w	r3, [r2, r9]
 80035f8:	f013 0f97 	tst.w	r3, #151	; 0x97
 80035fc:	bf08      	it	eq
 80035fe:	222e      	moveq	r2, #46	; 0x2e
 8003600:	4651      	mov	r1, sl
 8003602:	4620      	mov	r0, r4
 8003604:	f7ff ffb0 	bl	8003568 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003608:	3501      	adds	r5, #1
 800360a:	2d10      	cmp	r5, #16
 800360c:	d114      	bne.n	8003638 <hexdump_line_print+0xac>
		}
	}
}
 800360e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
 8003612:	4649      	mov	r1, r9
 8003614:	4620      	mov	r0, r4
 8003616:	f7ff ffa7 	bl	8003568 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 800361a:	f108 0801 	add.w	r8, r8, #1
 800361e:	e7c8      	b.n	80035b2 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 8003620:	076a      	lsls	r2, r5, #29
 8003622:	d1cf      	bne.n	80035c4 <hexdump_line_print+0x38>
			print_formatted(output, " ");
 8003624:	4651      	mov	r1, sl
 8003626:	4620      	mov	r0, r4
 8003628:	f7ff ff9e 	bl	8003568 <print_formatted>
 800362c:	e7ca      	b.n	80035c4 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
 800362e:	4641      	mov	r1, r8
 8003630:	4620      	mov	r0, r4
 8003632:	f7ff ff99 	bl	8003568 <print_formatted>
 8003636:	e7cc      	b.n	80035d2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 8003638:	076b      	lsls	r3, r5, #29
 800363a:	d1d8      	bne.n	80035ee <hexdump_line_print+0x62>
			print_formatted(output, " ");
 800363c:	4641      	mov	r1, r8
 800363e:	4620      	mov	r0, r4
 8003640:	f7ff ff92 	bl	8003568 <print_formatted>
 8003644:	e7d3      	b.n	80035ee <hexdump_line_print+0x62>
			print_formatted(output, " ");
 8003646:	4641      	mov	r1, r8
 8003648:	4620      	mov	r0, r4
 800364a:	f7ff ff8d 	bl	8003568 <print_formatted>
 800364e:	e7db      	b.n	8003608 <hexdump_line_print+0x7c>
 8003650:	08017f65 	.word	0x08017f65
 8003654:	08017f64 	.word	0x08017f64
 8003658:	080193c9 	.word	0x080193c9
 800365c:	080193c7 	.word	0x080193c7
 8003660:	08017f67 	.word	0x08017f67
 8003664:	08017f6d 	.word	0x08017f6d
 8003668:	08019578 	.word	0x08019578
 800366c:	08017f6f 	.word	0x08017f6f

08003670 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	b087      	sub	sp, #28
 8003676:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8003678:	f001 0301 	and.w	r3, r1, #1
{
 800367c:	9205      	str	r2, [sp, #20]
 800367e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 8003682:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8003686:	9304      	str	r3, [sp, #16]
{
 8003688:	4607      	mov	r7, r0
 800368a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 800368c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8003690:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
 8003694:	f00d fe9a 	bl	80113cc <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 8003698:	4602      	mov	r2, r0
 800369a:	2800      	cmp	r0, #0
 800369c:	d044      	beq.n	8003728 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
 800369e:	493a      	ldr	r1, [pc, #232]	; (8003788 <prefix_print+0x118>)
 80036a0:	4638      	mov	r0, r7
 80036a2:	f7ff ff61 	bl	8003568 <print_formatted>
 80036a6:	4605      	mov	r5, r0
	}

	if (stamp) {
 80036a8:	f1bb 0f00 	cmp.w	fp, #0
 80036ac:	d008      	beq.n	80036c0 <prefix_print+0x50>
	if (!format) {
 80036ae:	f018 0f44 	tst.w	r8, #68	; 0x44
 80036b2:	d13b      	bne.n	800372c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
 80036b4:	4935      	ldr	r1, [pc, #212]	; (800378c <prefix_print+0x11c>)
 80036b6:	4622      	mov	r2, r4
 80036b8:	4638      	mov	r0, r7
 80036ba:	f7ff ff55 	bl	8003568 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 80036be:	4405      	add	r5, r0
	if (color) {
 80036c0:	9b04      	ldr	r3, [sp, #16]
 80036c2:	b153      	cbz	r3, 80036da <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
 80036c6:	4933      	ldr	r1, [pc, #204]	; (8003794 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
 80036c8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
 80036cc:	4b32      	ldr	r3, [pc, #200]	; (8003798 <prefix_print+0x128>)
 80036ce:	4638      	mov	r0, r7
 80036d0:	2a00      	cmp	r2, #0
 80036d2:	bf08      	it	eq
 80036d4:	461a      	moveq	r2, r3
 80036d6:	f7ff ff47 	bl	8003568 <print_formatted>
	if (level_on) {
 80036da:	b13e      	cbz	r6, 80036ec <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80036dc:	4b2f      	ldr	r3, [pc, #188]	; (800379c <prefix_print+0x12c>)
 80036de:	4930      	ldr	r1, [pc, #192]	; (80037a0 <prefix_print+0x130>)
 80036e0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80036e4:	4638      	mov	r0, r7
 80036e6:	f7ff ff3f 	bl	8003568 <print_formatted>
 80036ea:	4606      	mov	r6, r0
	if (source_id >= 0) {
 80036ec:	f1ba 0f00 	cmp.w	sl, #0
 80036f0:	db16      	blt.n	8003720 <prefix_print+0xb0>
		total += print_formatted(output,
 80036f2:	9b05      	ldr	r3, [sp, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d045      	beq.n	8003784 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80036f8:	2301      	movs	r3, #1
 80036fa:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
 80036fe:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <prefix_print+0x134>)
 8003700:	4c29      	ldr	r4, [pc, #164]	; (80037a8 <prefix_print+0x138>)
 8003702:	f019 0f10 	tst.w	r9, #16
 8003706:	bf18      	it	ne
 8003708:	461c      	movne	r4, r3
 800370a:	4651      	mov	r1, sl
 800370c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8003710:	f7ff ff0e 	bl	8003530 <log_source_name_get>
 8003714:	4621      	mov	r1, r4
 8003716:	4602      	mov	r2, r0
 8003718:	4638      	mov	r0, r7
 800371a:	f7ff ff25 	bl	8003568 <print_formatted>
 800371e:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
 8003720:	1970      	adds	r0, r6, r5
 8003722:	b007      	add	sp, #28
 8003724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 8003728:	4605      	mov	r5, r0
 800372a:	e7bd      	b.n	80036a8 <prefix_print+0x38>
	} else if (freq != 0U) {
 800372c:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <prefix_print+0x13c>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	2800      	cmp	r0, #0
 8003732:	d0c4      	beq.n	80036be <prefix_print+0x4e>
		timestamp /= timestamp_div;
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
 8003736:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
 8003740:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003744:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
 8003748:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
 800374c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
 8003750:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8003754:	fbb3 f2f1 	udiv	r2, r3, r1
 8003758:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800375c:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
 8003760:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8003764:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
 8003768:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800376c:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
 8003770:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8003772:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
 8003776:	490f      	ldr	r1, [pc, #60]	; (80037b4 <prefix_print+0x144>)
 8003778:	e9cd e001 	strd	lr, r0, [sp, #4]
 800377c:	4638      	mov	r0, r7
 800377e:	f7ff fef3 	bl	8003568 <print_formatted>
 8003782:	e79c      	b.n	80036be <prefix_print+0x4e>
		total += print_formatted(output,
 8003784:	4c08      	ldr	r4, [pc, #32]	; (80037a8 <prefix_print+0x138>)
 8003786:	e7c0      	b.n	800370a <prefix_print+0x9a>
 8003788:	08017f80 	.word	0x08017f80
 800378c:	08017f84 	.word	0x08017f84
 8003790:	080170c8 	.word	0x080170c8
 8003794:	080184da 	.word	0x080184da
 8003798:	08017f72 	.word	0x08017f72
 800379c:	080170dc 	.word	0x080170dc
 80037a0:	08017fa9 	.word	0x08017fa9
 80037a4:	08017f7c 	.word	0x08017f7c
 80037a8:	08017f77 	.word	0x08017f77
 80037ac:	20000fc8 	.word	0x20000fc8
 80037b0:	20000fcc 	.word	0x20000fcc
 80037b4:	08017f8d 	.word	0x08017f8d

080037b8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	460c      	mov	r4, r1
	if (color) {
 80037bc:	07e1      	lsls	r1, r4, #31
{
 80037be:	4605      	mov	r5, r0
	if (color) {
 80037c0:	d503      	bpl.n	80037ca <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <postfix_print+0x2c>)
 80037c4:	4908      	ldr	r1, [pc, #32]	; (80037e8 <postfix_print+0x30>)
 80037c6:	f7ff fecf 	bl	8003568 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80037ca:	06e2      	lsls	r2, r4, #27
 80037cc:	d408      	bmi.n	80037e0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80037ce:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 80037d0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 80037d2:	bf4c      	ite	mi
 80037d4:	4905      	ldrmi	r1, [pc, #20]	; (80037ec <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 80037d6:	4906      	ldrpl	r1, [pc, #24]	; (80037f0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
 80037d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 80037dc:	f7ff bec4 	b.w	8003568 <print_formatted>
}
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	08017f72 	.word	0x08017f72
 80037e8:	080184da 	.word	0x080184da
 80037ec:	08017f65 	.word	0x08017f65
 80037f0:	08017f64 	.word	0x08017f64

080037f4 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 80037f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
 80037f8:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
 80037fa:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
 80037fe:	4606      	mov	r6, r0
 8003800:	460c      	mov	r4, r1
 8003802:	4690      	mov	r8, r2
 8003804:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
 8003808:	d04d      	beq.n	80038a6 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
 800380a:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
 800380c:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
 800380e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 8003812:	2b00      	cmp	r3, #0
 8003814:	d044      	beq.n	80038a0 <log_output_msg2_process+0xac>
 8003816:	4925      	ldr	r1, [pc, #148]	; (80038ac <log_output_msg2_process+0xb8>)
 8003818:	1a5b      	subs	r3, r3, r1
 800381a:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 800381e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003822:	f8cd 9000 	str.w	r9, [sp]
 8003826:	68a3      	ldr	r3, [r4, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	4641      	mov	r1, r8
 800382c:	4630      	mov	r0, r6
 800382e:	f7ff ff1f 	bl	8003670 <prefix_print>
 8003832:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
 8003834:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
 8003836:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 800383a:	f3c3 2349 	ubfx	r3, r3, #9, #10
 800383e:	b153      	cbz	r3, 8003856 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8003840:	4f1b      	ldr	r7, [pc, #108]	; (80038b0 <log_output_msg2_process+0xbc>)
 8003842:	481c      	ldr	r0, [pc, #112]	; (80038b4 <log_output_msg2_process+0xc0>)
 8003844:	491c      	ldr	r1, [pc, #112]	; (80038b8 <log_output_msg2_process+0xc4>)
 8003846:	462b      	mov	r3, r5
 8003848:	4632      	mov	r2, r6
 800384a:	f1b9 0f00 	cmp.w	r9, #0
 800384e:	bf08      	it	eq
 8003850:	4638      	moveq	r0, r7
 8003852:	f00d fa26 	bl	8010ca2 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 8003856:	8867      	ldrh	r7, [r4, #2]
 8003858:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 800385c:	b197      	cbz	r7, 8003884 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	f3c3 2349 	ubfx	r3, r3, #9, #10
 8003864:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8003866:	2f10      	cmp	r7, #16
 8003868:	463c      	mov	r4, r7
 800386a:	bf28      	it	cs
 800386c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 800386e:	4629      	mov	r1, r5
 8003870:	f8cd 8000 	str.w	r8, [sp]
 8003874:	4653      	mov	r3, sl
 8003876:	4622      	mov	r2, r4
 8003878:	4630      	mov	r0, r6
 800387a:	f7ff fe87 	bl	800358c <hexdump_line_print>
	} while (len);
 800387e:	1b3f      	subs	r7, r7, r4
		data += length;
 8003880:	4425      	add	r5, r4
	} while (len);
 8003882:	d1f0      	bne.n	8003866 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 8003884:	f1b9 0f00 	cmp.w	r9, #0
 8003888:	d004      	beq.n	8003894 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
 800388a:	464a      	mov	r2, r9
 800388c:	4641      	mov	r1, r8
 800388e:	4630      	mov	r0, r6
 8003890:	f7ff ff92 	bl	80037b8 <postfix_print>
	}

	log_output_flush(output);
 8003894:	4630      	mov	r0, r6
}
 8003896:	b004      	add	sp, #16
 8003898:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
 800389c:	f00d bda5 	b.w	80113ea <log_output_flush>
		int16_t source_id = source ?
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038a4:	e7bb      	b.n	800381e <log_output_msg2_process+0x2a>
		prefix_offset = 0;
 80038a6:	46ca      	mov	sl, r9
 80038a8:	e7c4      	b.n	8003834 <log_output_msg2_process+0x40>
 80038aa:	bf00      	nop
 80038ac:	08016ea0 	.word	0x08016ea0
 80038b0:	0801143b 	.word	0x0801143b
 80038b4:	08011405 	.word	0x08011405
 80038b8:	08002475 	.word	0x08002475

080038bc <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 80038bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80038be:	f242 730f 	movw	r3, #9999	; 0x270f
 80038c2:	428b      	cmp	r3, r1
 80038c4:	bf28      	it	cs
 80038c6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 80038c8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80038ca:	4a0f      	ldr	r2, [pc, #60]	; (8003908 <log_output_dropped_process+0x4c>)
{
 80038cc:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80038ce:	2105      	movs	r1, #5
 80038d0:	4668      	mov	r0, sp
 80038d2:	f00d fa92 	bl	8010dfa <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80038d6:	6863      	ldr	r3, [r4, #4]
 80038d8:	490c      	ldr	r1, [pc, #48]	; (800390c <log_output_dropped_process+0x50>)
 80038da:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 80038dc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80038de:	220b      	movs	r2, #11
 80038e0:	4628      	mov	r0, r5
 80038e2:	f00d fd75 	bl	80113d0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 80038e6:	6863      	ldr	r3, [r4, #4]
 80038e8:	4632      	mov	r2, r6
 80038ea:	4669      	mov	r1, sp
 80038ec:	4628      	mov	r0, r5
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f00d fd6e 	bl	80113d0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 80038f4:	6863      	ldr	r3, [r4, #4]
 80038f6:	4906      	ldr	r1, [pc, #24]	; (8003910 <log_output_dropped_process+0x54>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	221b      	movs	r2, #27
 80038fc:	4628      	mov	r0, r5
 80038fe:	f00d fd67 	bl	80113d0 <buffer_write>
		     output->control_block->ctx);
}
 8003902:	b002      	add	sp, #8
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	bf00      	nop
 8003908:	080187f1 	.word	0x080187f1
 800390c:	08017feb 	.word	0x08017feb
 8003910:	08017fcf 	.word	0x08017fcf

08003914 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <log_output_timestamp_freq_set+0x24>)
{
 8003916:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 8003918:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 800391a:	4c08      	ldr	r4, [pc, #32]	; (800393c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 800391c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 800391e:	2100      	movs	r1, #0
 8003920:	42a0      	cmp	r0, r4
 8003922:	d804      	bhi.n	800392e <log_output_timestamp_freq_set+0x1a>
 8003924:	b101      	cbz	r1, 8003928 <log_output_timestamp_freq_set+0x14>
 8003926:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <log_output_timestamp_freq_set+0x2c>)
 800392a:	6018      	str	r0, [r3, #0]
}
 800392c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 800392e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2101      	movs	r1, #1
 8003934:	e7f4      	b.n	8003920 <log_output_timestamp_freq_set+0xc>
 8003936:	bf00      	nop
 8003938:	20000fcc 	.word	0x20000fcc
 800393c:	000f4240 	.word	0x000f4240
 8003940:	20000fc8 	.word	0x20000fc8

08003944 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
 8003944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003948:	b087      	sub	sp, #28
 800394a:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
 800394e:	469a      	mov	sl, r3
 8003950:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003952:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8003956:	9303      	str	r3, [sp, #12]
 8003958:	4604      	mov	r4, r0
 800395a:	4689      	mov	r9, r1
 800395c:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
 800395e:	b3cf      	cbz	r7, 80039d4 <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 8003960:	f8cd b000 	str.w	fp, [sp]
 8003964:	463b      	mov	r3, r7
 8003966:	462a      	mov	r2, r5
 8003968:	210c      	movs	r1, #12
 800396a:	2000      	movs	r0, #0
		va_copy(ap2, ap);
 800396c:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 8003970:	f7fe fa3e 	bl	8001df0 <cbvprintf_package>
 8003974:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
 8003976:	9a03      	ldr	r2, [sp, #12]
 8003978:	f008 0307 	and.w	r3, r8, #7
 800397c:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 8003980:	f102 0013 	add.w	r0, r2, #19
	struct log_msg2_desc desc =
 8003984:	4c14      	ldr	r4, [pc, #80]	; (80039d8 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
 8003986:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800398a:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 800398e:	4430      	add	r0, r6
	struct log_msg2_desc desc =
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <z_impl_z_log_msg2_runtime_vcreate+0x98>)
 8003992:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 8003996:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
 800399a:	ea48 0804 	orr.w	r8, r8, r4
 800399e:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
 80039a2:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
 80039a4:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
 80039a8:	f7ff fcc2 	bl	8003330 <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
 80039ac:	4604      	mov	r4, r0
 80039ae:	b140      	cbz	r0, 80039c2 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
 80039b0:	b13f      	cbz	r7, 80039c2 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
 80039b2:	f8cd b000 	str.w	fp, [sp]
 80039b6:	463b      	mov	r3, r7
 80039b8:	462a      	mov	r2, r5
 80039ba:	4631      	mov	r1, r6
 80039bc:	300c      	adds	r0, #12
 80039be:	f7fe fa17 	bl	8001df0 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
 80039c2:	4653      	mov	r3, sl
 80039c4:	4642      	mov	r2, r8
 80039c6:	4649      	mov	r1, r9
 80039c8:	4620      	mov	r0, r4
	}
}
 80039ca:	b007      	add	sp, #28
 80039cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
 80039d0:	f00d bd40 	b.w	8011454 <z_log_msg2_finalize>
		plen = 0;
 80039d4:	463e      	mov	r6, r7
 80039d6:	e7ce      	b.n	8003976 <z_impl_z_log_msg2_runtime_vcreate+0x32>
 80039d8:	0007fe00 	.word	0x0007fe00
 80039dc:	7ff80000 	.word	0x7ff80000

080039e0 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
 80039e2:	4f07      	ldr	r7, [pc, #28]	; (8003a00 <char_out+0x20>)
{
 80039e4:	460d      	mov	r5, r1
 80039e6:	4604      	mov	r4, r0
 80039e8:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
 80039ea:	42b4      	cmp	r4, r6
 80039ec:	d101      	bne.n	80039f2 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 80039ee:	4628      	mov	r0, r5
 80039f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 80039f2:	6838      	ldr	r0, [r7, #0]
 80039f4:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80039f8:	6883      	ldr	r3, [r0, #8]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 80039fe:	e7f4      	b.n	80039ea <char_out+0xa>
 8003a00:	20000fe8 	.word	0x20000fe8

08003a04 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 8003a04:	4b01      	ldr	r3, [pc, #4]	; (8003a0c <format_set+0x8>)
	return 0;
}
 8003a06:	2000      	movs	r0, #0
	log_format_current = log_type;
 8003a08:	6019      	str	r1, [r3, #0]
}
 8003a0a:	4770      	bx	lr
 8003a0c:	20000fd8 	.word	0x20000fd8

08003a10 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8003a10:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <log_backend_uart_init+0x8>)
 8003a12:	4a02      	ldr	r2, [pc, #8]	; (8003a1c <log_backend_uart_init+0xc>)
 8003a14:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 8003a16:	4770      	bx	lr
 8003a18:	20000fe8 	.word	0x20000fe8
 8003a1c:	08016b90 	.word	0x08016b90

08003a20 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
 8003a20:	4b02      	ldr	r3, [pc, #8]	; (8003a2c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8003a22:	4803      	ldr	r0, [pc, #12]	; (8003a30 <panic+0x10>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	f00d bcdf 	b.w	80113ea <log_output_flush>
 8003a2c:	20002344 	.word	0x20002344
 8003a30:	08017110 	.word	0x08017110

08003a34 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <dropped+0x8>)
 8003a36:	f7ff bf41 	b.w	80038bc <log_output_dropped_process>
 8003a3a:	bf00      	nop
 8003a3c:	08017110 	.word	0x08017110

08003a40 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <process+0x1c>)
{
 8003a42:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8003a44:	6818      	ldr	r0, [r3, #0]
{
 8003a46:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8003a48:	f7ff fbc6 	bl	80031d8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 8003a4c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 8003a4e:	4603      	mov	r3, r0
}
 8003a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <process+0x20>)
 8003a56:	220f      	movs	r2, #15
 8003a58:	4718      	bx	r3
 8003a5a:	bf00      	nop
 8003a5c:	20000fd8 	.word	0x20000fd8
 8003a60:	08017110 	.word	0x08017110

08003a64 <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
 8003a64:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 8003a66:	4804      	ldr	r0, [pc, #16]	; (8003a78 <disk_init+0x14>)
 8003a68:	f012 fa64 	bl	8015f34 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
 8003a6e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8003a70:	e9c3 3300 	strd	r3, r3, [r3]
 8003a74:	bd08      	pop	{r3, pc}
 8003a76:	bf00      	nop
 8003a78:	20000ff4 	.word	0x20000ff4
 8003a7c:	20000fec 	.word	0x20000fec

08003a80 <disk_access_get_di>:
{
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
 8003a84:	f7fd fa52 	bl	8000f2c <strlen>
 8003a88:	4605      	mov	r5, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8003a8a:	4f12      	ldr	r7, [pc, #72]	; (8003ad4 <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
 8003a8c:	4812      	ldr	r0, [pc, #72]	; (8003ad8 <disk_access_get_di+0x58>)
 8003a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a96:	f00a f893 	bl	800dbc0 <z_impl_k_mutex_lock>
 8003a9a:	683c      	ldr	r4, [r7, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003a9c:	42bc      	cmp	r4, r7
 8003a9e:	d10e      	bne.n	8003abe <disk_access_get_di+0x3e>
	struct disk_info *disk = NULL, *itr;
 8003aa0:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 8003aa2:	480d      	ldr	r0, [pc, #52]	; (8003ad8 <disk_access_get_di+0x58>)
 8003aa4:	f00a f904 	bl	800dcb0 <z_impl_k_mutex_unlock>
}
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strlen(itr->name) != name_len) {
 8003aac:	68a0      	ldr	r0, [r4, #8]
 8003aae:	f7fd fa3d 	bl	8000f2c <strlen>
 8003ab2:	42a8      	cmp	r0, r5
 8003ab4:	d006      	beq.n	8003ac4 <disk_access_get_di+0x44>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	d0f1      	beq.n	8003aa0 <disk_access_get_di+0x20>
 8003abc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
 8003abe:	2c00      	cmp	r4, #0
 8003ac0:	d1f4      	bne.n	8003aac <disk_access_get_di+0x2c>
 8003ac2:	e7ed      	b.n	8003aa0 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
 8003ac4:	68a1      	ldr	r1, [r4, #8]
 8003ac6:	462a      	mov	r2, r5
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f012 fd8f 	bl	80165ec <strncmp>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d1f1      	bne.n	8003ab6 <disk_access_get_di+0x36>
 8003ad2:	e7e6      	b.n	8003aa2 <disk_access_get_di+0x22>
 8003ad4:	20000fec 	.word	0x20000fec
 8003ad8:	20000ff4 	.word	0x20000ff4

08003adc <disk_access_register>:
{
 8003adc:	b530      	push	{r4, r5, lr}
 8003ade:	4605      	mov	r5, r0
 8003ae0:	b087      	sub	sp, #28
	return z_impl_k_mutex_lock(mutex, timeout);
 8003ae2:	4815      	ldr	r0, [pc, #84]	; (8003b38 <disk_access_register+0x5c>)
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aec:	f00a f868 	bl	800dbc0 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
 8003af0:	b10d      	cbz	r5, 8003af6 <disk_access_register+0x1a>
 8003af2:	68a8      	ldr	r0, [r5, #8]
 8003af4:	b990      	cbnz	r0, 8003b1c <disk_access_register+0x40>
		LOG_ERR("invalid disk interface!!");
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <disk_access_register+0x60>)
		LOG_ERR("disk interface already registered!!");
 8003af8:	9304      	str	r3, [sp, #16]
 8003afa:	2302      	movs	r3, #2
 8003afc:	9303      	str	r3, [sp, #12]
 8003afe:	4810      	ldr	r0, [pc, #64]	; (8003b40 <disk_access_register+0x64>)
 8003b00:	2300      	movs	r3, #0
 8003b02:	aa03      	add	r2, sp, #12
 8003b04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		rc = -EINVAL;
 8003b08:	f06f 0415 	mvn.w	r4, #21
 8003b0c:	f00d fcbd 	bl	801148a <z_impl_z_log_msg2_static_create>
	return z_impl_k_mutex_unlock(mutex);
 8003b10:	4809      	ldr	r0, [pc, #36]	; (8003b38 <disk_access_register+0x5c>)
 8003b12:	f00a f8cd 	bl	800dcb0 <z_impl_k_mutex_unlock>
}
 8003b16:	4620      	mov	r0, r4
 8003b18:	b007      	add	sp, #28
 8003b1a:	bd30      	pop	{r4, r5, pc}
	if (disk_access_get_di(disk->name) != NULL) {
 8003b1c:	f7ff ffb0 	bl	8003a80 <disk_access_get_di>
 8003b20:	4604      	mov	r4, r0
 8003b22:	b108      	cbz	r0, 8003b28 <disk_access_register+0x4c>
		LOG_ERR("disk interface already registered!!");
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <disk_access_register+0x68>)
 8003b26:	e7e7      	b.n	8003af8 <disk_access_register+0x1c>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <disk_access_register+0x6c>)
 8003b2a:	685a      	ldr	r2, [r3, #4]

	node->next = list;
	node->prev = tail;
 8003b2c:	e9c5 3200 	strd	r3, r2, [r5]

	tail->next = node;
 8003b30:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8003b32:	605d      	str	r5, [r3, #4]
	LOG_DBG("disk interface(%s) registered", disk->name);
 8003b34:	e7ec      	b.n	8003b10 <disk_access_register+0x34>
 8003b36:	bf00      	nop
 8003b38:	20000ff4 	.word	0x20000ff4
 8003b3c:	08018011 	.word	0x08018011
 8003b40:	08016ec0 	.word	0x08016ec0
 8003b44:	0801802a 	.word	0x0801802a
 8003b48:	20000fec 	.word	0x20000fec

08003b4c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003b4c:	4901      	ldr	r1, [pc, #4]	; (8003b54 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003b4e:	2210      	movs	r2, #16
	str	r2, [r1]
 8003b50:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003b52:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003b54:	e000ed10 	.word	0xe000ed10

08003b58 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003b58:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003b5a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003b5c:	f380 8811 	msr	BASEPRI, r0
	isb
 8003b60:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003b64:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003b68:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003b6a:	b662      	cpsie	i
	isb
 8003b6c:	f3bf 8f6f 	isb	sy

	bx	lr
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	4680      	mov	r8, r0
 8003b7c:	af00      	add	r7, sp, #0

	if (esf != NULL) {
 8003b7e:	460c      	mov	r4, r1
 8003b80:	2900      	cmp	r1, #0
 8003b82:	d045      	beq.n	8003c10 <z_arm_fatal_error+0x9c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003b84:	46e9      	mov	r9, sp
 8003b86:	b088      	sub	sp, #32
 8003b88:	466d      	mov	r5, sp
 8003b8a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8003b8e:	68a3      	ldr	r3, [r4, #8]
 8003b90:	4823      	ldr	r0, [pc, #140]	; (8003c20 <z_arm_fatal_error+0xac>)
 8003b92:	462e      	mov	r6, r5
 8003b94:	f04f 0a05 	mov.w	sl, #5
 8003b98:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8003b9c:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8003ba0:	f846 af0c 	str.w	sl, [r6, #12]!
 8003ba4:	481f      	ldr	r0, [pc, #124]	; (8003c24 <z_arm_fatal_error+0xb0>)
 8003ba6:	4632      	mov	r2, r6
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8003bae:	f00d fc6c 	bl	801148a <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003bb2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8003bb6:	6963      	ldr	r3, [r4, #20]
 8003bb8:	481b      	ldr	r0, [pc, #108]	; (8003c28 <z_arm_fatal_error+0xb4>)
 8003bba:	f8c5 a00c 	str.w	sl, [r5, #12]
 8003bbe:	46cd      	mov	sp, r9
 8003bc0:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8003bc4:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8003bc8:	46ad      	mov	sp, r5
 8003bca:	4816      	ldr	r0, [pc, #88]	; (8003c24 <z_arm_fatal_error+0xb0>)
 8003bcc:	4632      	mov	r2, r6
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 8003bd4:	f00d fc59 	bl	801148a <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003bd8:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <z_arm_fatal_error+0xb8>)
 8003bda:	69e3      	ldr	r3, [r4, #28]
 8003bdc:	2503      	movs	r5, #3
 8003bde:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003be2:	46cd      	mov	sp, r9
 8003be4:	60fd      	str	r5, [r7, #12]
 8003be6:	480f      	ldr	r0, [pc, #60]	; (8003c24 <z_arm_fatal_error+0xb0>)
 8003be8:	f107 020c 	add.w	r2, r7, #12
 8003bec:	2300      	movs	r3, #0
 8003bee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003bf2:	f00d fc4a 	bl	801148a <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <z_arm_fatal_error+0xbc>)
 8003bf8:	69a3      	ldr	r3, [r4, #24]
 8003bfa:	60fd      	str	r5, [r7, #12]
 8003bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003c00:	4808      	ldr	r0, [pc, #32]	; (8003c24 <z_arm_fatal_error+0xb0>)
 8003c02:	2300      	movs	r3, #0
 8003c04:	f107 020c 	add.w	r2, r7, #12
 8003c08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003c0c:	f00d fc3d 	bl	801148a <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8003c10:	4621      	mov	r1, r4
 8003c12:	4640      	mov	r0, r8
 8003c14:	f009 fdac 	bl	800d770 <z_fatal_error>
}
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c20:	08018053 	.word	0x08018053
 8003c24:	08016f28 	.word	0x08016f28
 8003c28:	08018082 	.word	0x08018082
 8003c2c:	080180b1 	.word	0x080180b1
 8003c30:	080180c0 	.word	0x080180c0

08003c34 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003c34:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db08      	blt.n	8003c4c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f000 001f 	and.w	r0, r0, #31
 8003c40:	fa02 f000 	lsl.w	r0, r2, r0
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	4a02      	ldr	r2, [pc, #8]	; (8003c50 <arch_irq_enable+0x1c>)
 8003c48:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e100 	.word	0xe000e100

08003c54 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8003c54:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	db0d      	blt.n	8003c76 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f000 001f 	and.w	r0, r0, #31
 8003c62:	fa02 f000 	lsl.w	r0, r2, r0
 8003c66:	3320      	adds	r3, #32
 8003c68:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <arch_irq_disable+0x24>)
 8003c6a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c72:	f3bf 8f6f 	isb	sy
}
 8003c76:	4770      	bx	lr
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003c7c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003c7e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c80:	bfa8      	it	ge
 8003c82:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8003c86:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8a:	bfb8      	it	lt
 8003c8c:	4b06      	ldrlt	r3, [pc, #24]	; (8003ca8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8003c92:	bfac      	ite	ge
 8003c94:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c98:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9e:	bfb4      	ite	lt
 8003ca0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed14 	.word	0xe000ed14

08003cac <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003cac:	bf30      	wfi
    b z_SysNmiOnReset
 8003cae:	f7ff bffd 	b.w	8003cac <z_SysNmiOnReset>
 8003cb2:	bf00      	nop

08003cb4 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8003cb4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <z_arm_prep_c+0x24>)
 8003cb8:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <z_arm_prep_c+0x28>)
 8003cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cbe:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003cc4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003cc8:	f009 fdd0 	bl	800d86c <z_bss_zero>
	z_data_copy();
 8003ccc:	f00a fd04 	bl	800e6d8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003cd0:	f000 fb72 	bl	80043b8 <z_arm_interrupt_init>
	z_cstart();
 8003cd4:	f009 fe0e 	bl	800d8f4 <z_cstart>
 8003cd8:	08000000 	.word	0x08000000
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8003ce2:	490a      	ldr	r1, [pc, #40]	; (8003d0c <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8003ce4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003ce6:	6809      	ldr	r1, [r1, #0]
 8003ce8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003cea:	4909      	ldr	r1, [pc, #36]	; (8003d10 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003cec:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003cee:	684b      	ldr	r3, [r1, #4]
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	604b      	str	r3, [r1, #4]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003d00:	6893      	ldr	r3, [r2, #8]
}
 8003d02:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	200022a4 	.word	0x200022a4
 8003d0c:	080177ac 	.word	0x080177ac
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003d14:	4912      	ldr	r1, [pc, #72]	; (8003d60 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003d16:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003d18:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8003d1c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8003d1e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003d22:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003d26:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003d28:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003d2c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003d30:	4f0c      	ldr	r7, [pc, #48]	; (8003d64 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003d32:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003d36:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8003d38:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003d3a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003d3c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8003d3e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003d40:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003d42:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003d46:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003d48:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003d4a:	f000 fb75 	bl	8004438 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8003d4e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003d52:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8003d56:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003d5a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8003d5e:	4770      	bx	lr
    ldr r1, =_kernel
 8003d60:	200022a4 	.word	0x200022a4
    ldr v4, =_SCS_ICSR
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8003d68:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003d6c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003d6e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003d72:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003d76:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003d78:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003d7c:	2902      	cmp	r1, #2
    beq _oops
 8003d7e:	d0ff      	beq.n	8003d80 <_oops>

08003d80 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003d80:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003d82:	f00d fbfe 	bl	8011582 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8003d86:	bd01      	pop	{r0, pc}

08003d88 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8003d88:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003d8c:	9b00      	ldr	r3, [sp, #0]
 8003d8e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8003d92:	490a      	ldr	r1, [pc, #40]	; (8003dbc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8003d94:	9b01      	ldr	r3, [sp, #4]
 8003d96:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003d9a:	9b02      	ldr	r3, [sp, #8]
 8003d9c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8003da0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8003dac:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8003db0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003db2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8003db4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8003db6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	08010e15 	.word	0x08010e15

08003dc0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003dc0:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <z_check_thread_stack_fail+0x28>)
{
 8003dc2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8003dc4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8003dc6:	b170      	cbz	r0, 8003de6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003dc8:	f113 0f16 	cmn.w	r3, #22
 8003dcc:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8003dce:	d005      	beq.n	8003ddc <z_check_thread_stack_fail+0x1c>
 8003dd0:	f1a0 0220 	sub.w	r2, r0, #32
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d805      	bhi.n	8003de4 <z_check_thread_stack_fail+0x24>
 8003dd8:	4283      	cmp	r3, r0
 8003dda:	d203      	bcs.n	8003de4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003ddc:	4281      	cmp	r1, r0
 8003dde:	bf28      	it	cs
 8003de0:	2000      	movcs	r0, #0
 8003de2:	4770      	bx	lr
 8003de4:	2000      	movs	r0, #0
}
 8003de6:	4770      	bx	lr
 8003de8:	200022a4 	.word	0x200022a4

08003dec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003dec:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <arch_switch_to_main_thread+0x28>)
 8003df0:	6098      	str	r0, [r3, #8]
{
 8003df2:	460d      	mov	r5, r1
 8003df4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003df6:	f000 fb1f 	bl	8004438 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f385 8809 	msr	PSP, r5
 8003e00:	2100      	movs	r1, #0
 8003e02:	b663      	cpsie	if
 8003e04:	f381 8811 	msr	BASEPRI, r1
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f00d f800 	bl	8010e14 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003e14:	200022a4 	.word	0x200022a4

08003e18 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003e18:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003e1a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003e1e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003e22:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003e26:	4904      	ldr	r1, [pc, #16]	; (8003e38 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003e28:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003e2a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003e2c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003e2e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003e32:	4902      	ldr	r1, [pc, #8]	; (8003e3c <_isr_wrapper+0x24>)
	bx r1
 8003e34:	4708      	bx	r1
 8003e36:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003e38:	08016cb0 	.word	0x08016cb0
	ldr r1, =z_arm_int_exit
 8003e3c:	08003e41 	.word	0x08003e41

08003e40 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8003e42:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8003e44:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8003e46:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8003e48:	d003      	beq.n	8003e52 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8003e4a:	4903      	ldr	r1, [pc, #12]	; (8003e58 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8003e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8003e50:	600a      	str	r2, [r1, #0]

08003e52 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8003e52:	4770      	bx	lr
	ldr r3, =_kernel
 8003e54:	200022a4 	.word	0x200022a4
	ldr r1, =_SCS_ICSR
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 8003e60:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <bus_fault.constprop.0+0xe0>)
 8003e62:	9304      	str	r3, [sp, #16]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8003e64:	4606      	mov	r6, r0
 8003e66:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 8003e68:	4835      	ldr	r0, [pc, #212]	; (8003f40 <bus_fault.constprop.0+0xe4>)
 8003e6a:	2402      	movs	r4, #2
 8003e6c:	aa03      	add	r2, sp, #12
 8003e6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003e72:	9403      	str	r4, [sp, #12]
 8003e74:	f00d fb94 	bl	80115a0 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003e78:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <bus_fault.constprop.0+0xe8>)
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	04db      	lsls	r3, r3, #19
 8003e7e:	d508      	bpl.n	8003e92 <bus_fault.constprop.0+0x36>
		PR_FAULT_INFO("  Stacking error");
 8003e80:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <bus_fault.constprop.0+0xec>)
 8003e82:	482f      	ldr	r0, [pc, #188]	; (8003f40 <bus_fault.constprop.0+0xe4>)
 8003e84:	aa03      	add	r2, sp, #12
 8003e86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003e8a:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003e8e:	f00d fb87 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003e92:	4b2c      	ldr	r3, [pc, #176]	; (8003f44 <bus_fault.constprop.0+0xe8>)
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	051c      	lsls	r4, r3, #20
 8003e98:	d509      	bpl.n	8003eae <bus_fault.constprop.0+0x52>
		PR_FAULT_INFO("  Unstacking error");
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <bus_fault.constprop.0+0xf0>)
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	4828      	ldr	r0, [pc, #160]	; (8003f40 <bus_fault.constprop.0+0xe4>)
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	aa03      	add	r2, sp, #12
 8003ea4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003ea8:	9303      	str	r3, [sp, #12]
 8003eaa:	f00d fb79 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003eae:	4c25      	ldr	r4, [pc, #148]	; (8003f44 <bus_fault.constprop.0+0xe8>)
 8003eb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003eb2:	0598      	lsls	r0, r3, #22
 8003eb4:	d51d      	bpl.n	8003ef2 <bus_fault.constprop.0+0x96>
		PR_FAULT_INFO("  Precise data bus error");
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <bus_fault.constprop.0+0xf4>)
 8003eb8:	9304      	str	r3, [sp, #16]
 8003eba:	aa03      	add	r2, sp, #12
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003ec2:	481f      	ldr	r0, [pc, #124]	; (8003f40 <bus_fault.constprop.0+0xe4>)
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	f00d fb6b 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8003eca:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003ecc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ece:	0411      	lsls	r1, r2, #16
 8003ed0:	d50f      	bpl.n	8003ef2 <bus_fault.constprop.0+0x96>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8003ed2:	4a20      	ldr	r2, [pc, #128]	; (8003f54 <bus_fault.constprop.0+0xf8>)
 8003ed4:	481a      	ldr	r0, [pc, #104]	; (8003f40 <bus_fault.constprop.0+0xe4>)
 8003ed6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003eda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8003ede:	2303      	movs	r3, #3
 8003ee0:	aa03      	add	r2, sp, #12
 8003ee2:	9303      	str	r3, [sp, #12]
 8003ee4:	f00d fb5c 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
 8003ee8:	b11e      	cbz	r6, 8003ef2 <bus_fault.constprop.0+0x96>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ef0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <bus_fault.constprop.0+0xe8>)
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	055a      	lsls	r2, r3, #21
 8003ef8:	d509      	bpl.n	8003f0e <bus_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Imprecise data bus error");
 8003efa:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <bus_fault.constprop.0+0xfc>)
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	4810      	ldr	r0, [pc, #64]	; (8003f40 <bus_fault.constprop.0+0xe4>)
 8003f00:	2302      	movs	r3, #2
 8003f02:	aa03      	add	r2, sp, #12
 8003f04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003f08:	9303      	str	r3, [sp, #12]
 8003f0a:	f00d fb49 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <bus_fault.constprop.0+0xe8>)
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	05db      	lsls	r3, r3, #23
 8003f14:	d509      	bpl.n	8003f2a <bus_fault.constprop.0+0xce>
		PR_FAULT_INFO("  Instruction bus error");
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <bus_fault.constprop.0+0x100>)
 8003f18:	9304      	str	r3, [sp, #16]
 8003f1a:	4809      	ldr	r0, [pc, #36]	; (8003f40 <bus_fault.constprop.0+0xe4>)
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	aa03      	add	r2, sp, #12
 8003f20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003f24:	9303      	str	r3, [sp, #12]
 8003f26:	f00d fb3b 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003f2a:	4a06      	ldr	r2, [pc, #24]	; (8003f44 <bus_fault.constprop.0+0xe8>)
 8003f2c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8003f2e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003f30:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003f34:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003f36:	7028      	strb	r0, [r5, #0]

	return reason;
}
 8003f38:	b006      	add	sp, #24
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	080180ee 	.word	0x080180ee
 8003f40:	08016f28 	.word	0x08016f28
 8003f44:	e000ed00 	.word	0xe000ed00
 8003f48:	08018104 	.word	0x08018104
 8003f4c:	08018115 	.word	0x08018115
 8003f50:	08018128 	.word	0x08018128
 8003f54:	08018141 	.word	0x08018141
 8003f58:	08018156 	.word	0x08018156
 8003f5c:	08018171 	.word	0x08018171

08003f60 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 8003f60:	b510      	push	{r4, lr}
 8003f62:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8003f64:	4b33      	ldr	r3, [pc, #204]	; (8004034 <usage_fault.constprop.0+0xd4>)
 8003f66:	4834      	ldr	r0, [pc, #208]	; (8004038 <usage_fault.constprop.0+0xd8>)
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	2402      	movs	r4, #2
 8003f6c:	aa03      	add	r2, sp, #12
 8003f6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003f72:	9403      	str	r4, [sp, #12]
 8003f74:	f00d fb14 	bl	80115a0 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003f78:	4b30      	ldr	r3, [pc, #192]	; (800403c <usage_fault.constprop.0+0xdc>)
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	d508      	bpl.n	8003f92 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
 8003f80:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <usage_fault.constprop.0+0xe0>)
 8003f82:	482d      	ldr	r0, [pc, #180]	; (8004038 <usage_fault.constprop.0+0xd8>)
 8003f84:	aa03      	add	r2, sp, #12
 8003f86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003f8a:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003f8e:	f00d fb07 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003f92:	4b2a      	ldr	r3, [pc, #168]	; (800403c <usage_fault.constprop.0+0xdc>)
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	01dc      	lsls	r4, r3, #7
 8003f98:	d509      	bpl.n	8003fae <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
 8003f9a:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <usage_fault.constprop.0+0xe4>)
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	4826      	ldr	r0, [pc, #152]	; (8004038 <usage_fault.constprop.0+0xd8>)
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	aa03      	add	r2, sp, #12
 8003fa4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003fa8:	9303      	str	r3, [sp, #12]
 8003faa:	f00d faf9 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003fae:	4b23      	ldr	r3, [pc, #140]	; (800403c <usage_fault.constprop.0+0xdc>)
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	0318      	lsls	r0, r3, #12
 8003fb4:	d509      	bpl.n	8003fca <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
 8003fb6:	4b24      	ldr	r3, [pc, #144]	; (8004048 <usage_fault.constprop.0+0xe8>)
 8003fb8:	9304      	str	r3, [sp, #16]
 8003fba:	481f      	ldr	r0, [pc, #124]	; (8004038 <usage_fault.constprop.0+0xd8>)
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	aa03      	add	r2, sp, #12
 8003fc0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003fc4:	9303      	str	r3, [sp, #12]
 8003fc6:	f00d faeb 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003fca:	4b1c      	ldr	r3, [pc, #112]	; (800403c <usage_fault.constprop.0+0xdc>)
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	0359      	lsls	r1, r3, #13
 8003fd0:	d509      	bpl.n	8003fe6 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8003fd2:	4b1e      	ldr	r3, [pc, #120]	; (800404c <usage_fault.constprop.0+0xec>)
 8003fd4:	9304      	str	r3, [sp, #16]
 8003fd6:	4818      	ldr	r0, [pc, #96]	; (8004038 <usage_fault.constprop.0+0xd8>)
 8003fd8:	2302      	movs	r3, #2
 8003fda:	aa03      	add	r2, sp, #12
 8003fdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003fe0:	9303      	str	r3, [sp, #12]
 8003fe2:	f00d fadd 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <usage_fault.constprop.0+0xdc>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	039a      	lsls	r2, r3, #14
 8003fec:	d509      	bpl.n	8004002 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8003fee:	4b18      	ldr	r3, [pc, #96]	; (8004050 <usage_fault.constprop.0+0xf0>)
 8003ff0:	9304      	str	r3, [sp, #16]
 8003ff2:	4811      	ldr	r0, [pc, #68]	; (8004038 <usage_fault.constprop.0+0xd8>)
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	aa03      	add	r2, sp, #12
 8003ff8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8003ffc:	9303      	str	r3, [sp, #12]
 8003ffe:	f00d facf 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <usage_fault.constprop.0+0xdc>)
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	03db      	lsls	r3, r3, #15
 8004008:	d509      	bpl.n	800401e <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <usage_fault.constprop.0+0xf4>)
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	480a      	ldr	r0, [pc, #40]	; (8004038 <usage_fault.constprop.0+0xd8>)
 8004010:	2302      	movs	r3, #2
 8004012:	aa03      	add	r2, sp, #12
 8004014:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004018:	9303      	str	r3, [sp, #12]
 800401a:	f00d fac1 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <usage_fault.constprop.0+0xdc>)
 8004020:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004022:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004026:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
 800402a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 800402c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800402e:	b006      	add	sp, #24
 8004030:	bd10      	pop	{r4, pc}
 8004032:	bf00      	nop
 8004034:	08018189 	.word	0x08018189
 8004038:	08016f28 	.word	0x08016f28
 800403c:	e000ed00 	.word	0xe000ed00
 8004040:	080181a1 	.word	0x080181a1
 8004044:	080181b4 	.word	0x080181b4
 8004048:	080181ce 	.word	0x080181ce
 800404c:	080181ec 	.word	0x080181ec
 8004050:	08018211 	.word	0x08018211
 8004054:	0801822b 	.word	0x0801822b

08004058 <mem_manage_fault>:
{
 8004058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405c:	b086      	sub	sp, #24
	PR_FAULT_INFO("***** MPU FAULT *****");
 800405e:	4b3e      	ldr	r3, [pc, #248]	; (8004158 <mem_manage_fault+0x100>)
 8004060:	9304      	str	r3, [sp, #16]
{
 8004062:	4607      	mov	r7, r0
 8004064:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8004066:	483d      	ldr	r0, [pc, #244]	; (800415c <mem_manage_fault+0x104>)
{
 8004068:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 800406a:	2402      	movs	r4, #2
 800406c:	aa03      	add	r2, sp, #12
 800406e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004072:	9403      	str	r4, [sp, #12]
 8004074:	f00d fa94 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8004078:	4b39      	ldr	r3, [pc, #228]	; (8004160 <mem_manage_fault+0x108>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	06d8      	lsls	r0, r3, #27
 800407e:	d508      	bpl.n	8004092 <mem_manage_fault+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8004080:	4b38      	ldr	r3, [pc, #224]	; (8004164 <mem_manage_fault+0x10c>)
 8004082:	4836      	ldr	r0, [pc, #216]	; (800415c <mem_manage_fault+0x104>)
 8004084:	aa03      	add	r2, sp, #12
 8004086:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800408a:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800408e:	f00d fa87 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <mem_manage_fault+0x108>)
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	0719      	lsls	r1, r3, #28
 8004098:	d509      	bpl.n	80040ae <mem_manage_fault+0x56>
		PR_FAULT_INFO("  Unstacking error");
 800409a:	4b33      	ldr	r3, [pc, #204]	; (8004168 <mem_manage_fault+0x110>)
 800409c:	9304      	str	r3, [sp, #16]
 800409e:	482f      	ldr	r0, [pc, #188]	; (800415c <mem_manage_fault+0x104>)
 80040a0:	2302      	movs	r3, #2
 80040a2:	aa03      	add	r2, sp, #12
 80040a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80040a8:	9303      	str	r3, [sp, #12]
 80040aa:	f00d fa79 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80040ae:	4c2c      	ldr	r4, [pc, #176]	; (8004160 <mem_manage_fault+0x108>)
 80040b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040b2:	079a      	lsls	r2, r3, #30
 80040b4:	d421      	bmi.n	80040fa <mem_manage_fault+0xa2>
	uint32_t mmfar = -EINVAL;
 80040b6:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80040ba:	4b29      	ldr	r3, [pc, #164]	; (8004160 <mem_manage_fault+0x108>)
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	07d8      	lsls	r0, r3, #31
 80040c0:	d509      	bpl.n	80040d6 <mem_manage_fault+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <mem_manage_fault+0x114>)
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	4825      	ldr	r0, [pc, #148]	; (800415c <mem_manage_fault+0x104>)
 80040c8:	2302      	movs	r3, #2
 80040ca:	aa03      	add	r2, sp, #12
 80040cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80040d0:	9303      	str	r3, [sp, #12]
 80040d2:	f00d fa65 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <mem_manage_fault+0x108>)
 80040d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040da:	06d1      	lsls	r1, r2, #27
 80040dc:	d42e      	bmi.n	800413c <mem_manage_fault+0xe4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80040de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80040e0:	0792      	lsls	r2, r2, #30
 80040e2:	d42b      	bmi.n	800413c <mem_manage_fault+0xe4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80040e4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <mem_manage_fault+0x108>)
 80040e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80040ea:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80040ee:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80040f0:	2300      	movs	r3, #0
 80040f2:	702b      	strb	r3, [r5, #0]
}
 80040f4:	b006      	add	sp, #24
 80040f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <mem_manage_fault+0x118>)
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	4817      	ldr	r0, [pc, #92]	; (800415c <mem_manage_fault+0x104>)
 8004100:	2302      	movs	r3, #2
 8004102:	aa03      	add	r2, sp, #12
 8004104:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004108:	9303      	str	r3, [sp, #12]
 800410a:	f00d fa49 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
 800410e:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8004110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	d5cf      	bpl.n	80040b6 <mem_manage_fault+0x5e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <mem_manage_fault+0x11c>)
 8004118:	4810      	ldr	r0, [pc, #64]	; (800415c <mem_manage_fault+0x104>)
 800411a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 800411e:	aa03      	add	r2, sp, #12
 8004120:	2303      	movs	r3, #3
 8004122:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004126:	9303      	str	r3, [sp, #12]
 8004128:	f00d fa3a 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
 800412c:	f1b8 0f00 	cmp.w	r8, #0
 8004130:	d0c3      	beq.n	80040ba <mem_manage_fault+0x62>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8004132:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004138:	62a3      	str	r3, [r4, #40]	; 0x28
 800413a:	e7be      	b.n	80040ba <mem_manage_fault+0x62>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	051b      	lsls	r3, r3, #20
 8004140:	d5d0      	bpl.n	80040e4 <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8004142:	4639      	mov	r1, r7
 8004144:	4630      	mov	r0, r6
 8004146:	f7ff fe3b 	bl	8003dc0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800414a:	2800      	cmp	r0, #0
 800414c:	d0ca      	beq.n	80040e4 <mem_manage_fault+0x8c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800414e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8004152:	2002      	movs	r0, #2
 8004154:	e7c7      	b.n	80040e6 <mem_manage_fault+0x8e>
 8004156:	bf00      	nop
 8004158:	08018256 	.word	0x08018256
 800415c:	08016f28 	.word	0x08016f28
 8004160:	e000ed00 	.word	0xe000ed00
 8004164:	0801826c 	.word	0x0801826c
 8004168:	08018115 	.word	0x08018115
 800416c:	080182cd 	.word	0x080182cd
 8004170:	0801829f 	.word	0x0801829f
 8004174:	080182b7 	.word	0x080182b7

08004178 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8004178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800417a:	ab0b      	add	r3, sp, #44	; 0x2c
 800417c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800417e:	9303      	str	r3, [sp, #12]
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <z_log_msg2_runtime_create.constprop.0+0x20>)
 8004182:	9302      	str	r3, [sp, #8]
 8004184:	2300      	movs	r3, #0
 8004186:	e9cd 3300 	strd	r3, r3, [sp]
 800418a:	2201      	movs	r2, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fbd9 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8004192:	b007      	add	sp, #28
 8004194:	f85d fb04 	ldr.w	pc, [sp], #4
 8004198:	080182ec 	.word	0x080182ec

0800419c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800419c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80041a0:	4b70      	ldr	r3, [pc, #448]	; (8004364 <z_arm_fault+0x1c8>)
 80041a2:	685e      	ldr	r6, [r3, #4]
{
 80041a4:	b091      	sub	sp, #68	; 0x44
 80041a6:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80041a8:	f3c6 0408 	ubfx	r4, r6, #0, #9
 80041ac:	2700      	movs	r7, #0
 80041ae:	f387 8811 	msr	BASEPRI, r7
 80041b2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80041b6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80041ba:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80041be:	d10d      	bne.n	80041dc <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80041c0:	f002 030c 	and.w	r3, r2, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d10b      	bne.n	80041e0 <z_arm_fault+0x44>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80041c8:	4b67      	ldr	r3, [pc, #412]	; (8004368 <z_arm_fault+0x1cc>)
 80041ca:	930c      	str	r3, [sp, #48]	; 0x30
 80041cc:	4867      	ldr	r0, [pc, #412]	; (800436c <z_arm_fault+0x1d0>)
 80041ce:	2302      	movs	r3, #2
 80041d0:	aa0b      	add	r2, sp, #44	; 0x2c
 80041d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80041d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80041d8:	f00d f9e2 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
		return NULL;
 80041dc:	463d      	mov	r5, r7
 80041de:	e003      	b.n	80041e8 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80041e0:	0712      	lsls	r2, r2, #28
 80041e2:	d401      	bmi.n	80041e8 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
 80041e4:	4605      	mov	r5, r0
			*nested_exc = true;
 80041e6:	2701      	movs	r7, #1
	*recoverable = false;
 80041e8:	2300      	movs	r3, #0
 80041ea:	f88d 301f 	strb.w	r3, [sp, #31]
	switch (fault) {
 80041ee:	1ee3      	subs	r3, r4, #3
 80041f0:	2b09      	cmp	r3, #9
 80041f2:	f200 809c 	bhi.w	800432e <z_arm_fault+0x192>
 80041f6:	e8df f003 	tbb	[pc, r3]
 80041fa:	8d05      	.short	0x8d05
 80041fc:	9a9a8a91 	.word	0x9a9a8a91
 8004200:	959a9a9a 	.word	0x959a9a9a
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004204:	4e57      	ldr	r6, [pc, #348]	; (8004364 <z_arm_fault+0x1c8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
 8004206:	4b5a      	ldr	r3, [pc, #360]	; (8004370 <z_arm_fault+0x1d4>)
 8004208:	4858      	ldr	r0, [pc, #352]	; (800436c <z_arm_fault+0x1d0>)
 800420a:	930c      	str	r3, [sp, #48]	; 0x30
 800420c:	f04f 0802 	mov.w	r8, #2
 8004210:	aa0b      	add	r2, sp, #44	; 0x2c
 8004212:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004216:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800421a:	f00d f9c1 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800421e:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
 8004220:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004224:	ea14 0408 	ands.w	r4, r4, r8
	*recoverable = false;
 8004228:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800422c:	d00a      	beq.n	8004244 <z_arm_fault+0xa8>
		PR_EXC("  Bus fault on vector table read");
 800422e:	4b51      	ldr	r3, [pc, #324]	; (8004374 <z_arm_fault+0x1d8>)
 8004230:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
	PR_FAULT_INFO(
 8004234:	484d      	ldr	r0, [pc, #308]	; (800436c <z_arm_fault+0x1d0>)
 8004236:	aa0b      	add	r2, sp, #44	; 0x2c
 8004238:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800423c:	f00d f9b0 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004240:	2400      	movs	r4, #0
}
 8004242:	e00b      	b.n	800425c <z_arm_fault+0xc0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8004244:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004246:	2b00      	cmp	r3, #0
 8004248:	da28      	bge.n	800429c <z_arm_fault+0x100>
		PR_EXC("  Debug event");
 800424a:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <z_arm_fault+0x1dc>)
 800424c:	4847      	ldr	r0, [pc, #284]	; (800436c <z_arm_fault+0x1d0>)
 800424e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004250:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004254:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
 8004258:	f00d f9a2 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 800425c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004260:	b9cb      	cbnz	r3, 8004296 <z_arm_fault+0xfa>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8004262:	aa08      	add	r2, sp, #32
 8004264:	f105 0620 	add.w	r6, r5, #32
 8004268:	6828      	ldr	r0, [r5, #0]
 800426a:	6869      	ldr	r1, [r5, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	c303      	stmia	r3!, {r0, r1}
 8004270:	3508      	adds	r5, #8
 8004272:	42b5      	cmp	r5, r6
 8004274:	461a      	mov	r2, r3
 8004276:	d1f7      	bne.n	8004268 <z_arm_fault+0xcc>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8004278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800427a:	2f00      	cmp	r7, #0
 800427c:	d06c      	beq.n	8004358 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800427e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004282:	b922      	cbnz	r2, 800428e <z_arm_fault+0xf2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8004284:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8004288:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800428c:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
 800428e:	a908      	add	r1, sp, #32
 8004290:	4620      	mov	r0, r4
 8004292:	f7ff fc6f 	bl	8003b74 <z_arm_fatal_error>
}
 8004296:	b011      	add	sp, #68	; 0x44
 8004298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800429c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	d5dc      	bpl.n	800425c <z_arm_fault+0xc0>
		PR_EXC("  Fault escalation (see below)");
 80042a2:	4b36      	ldr	r3, [pc, #216]	; (800437c <z_arm_fault+0x1e0>)
 80042a4:	4831      	ldr	r0, [pc, #196]	; (800436c <z_arm_fault+0x1d0>)
 80042a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80042a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80042ac:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
 80042b0:	f00d f976 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
 80042b4:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80042b6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80042ba:	f64d 7302 	movw	r3, #57090	; 0xdf02
 80042be:	429a      	cmp	r2, r3
 80042c0:	d00a      	beq.n	80042d8 <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
 80042c2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80042c6:	b1ab      	cbz	r3, 80042f4 <z_arm_fault+0x158>
			reason = mem_manage_fault(esf, 1, recoverable);
 80042c8:	f10d 021f 	add.w	r2, sp, #31
 80042cc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80042ce:	4628      	mov	r0, r5
 80042d0:	f7ff fec2 	bl	8004058 <mem_manage_fault>
 80042d4:	4604      	mov	r4, r0
		break;
 80042d6:	e7c1      	b.n	800425c <z_arm_fault+0xc0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	4a29      	ldr	r2, [pc, #164]	; (8004380 <z_arm_fault+0x1e4>)
 80042dc:	4823      	ldr	r0, [pc, #140]	; (800436c <z_arm_fault+0x1d0>)
 80042de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80042e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80042e6:	2303      	movs	r3, #3
 80042e8:	aa0b      	add	r2, sp, #44	; 0x2c
 80042ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80042ec:	f00d f958 	bl	80115a0 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
 80042f0:	682c      	ldr	r4, [r5, #0]
 80042f2:	e7b3      	b.n	800425c <z_arm_fault+0xc0>
		} else if (SCB_BFSR != 0) {
 80042f4:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80042f8:	b12b      	cbz	r3, 8004306 <z_arm_fault+0x16a>
			reason = bus_fault(esf, 1, recoverable);
 80042fa:	f10d 011f 	add.w	r1, sp, #31
 80042fe:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8004300:	f7ff fdac 	bl	8003e5c <bus_fault.constprop.0>
 8004304:	e7e6      	b.n	80042d4 <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
 8004306:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0a6      	beq.n	800425c <z_arm_fault+0xc0>
		reason = usage_fault(esf);
 800430e:	f7ff fe27 	bl	8003f60 <usage_fault.constprop.0>
 8004312:	e7df      	b.n	80042d4 <z_arm_fault+0x138>
		reason = mem_manage_fault(esf, 0, recoverable);
 8004314:	f10d 021f 	add.w	r2, sp, #31
 8004318:	2100      	movs	r1, #0
 800431a:	e7d8      	b.n	80042ce <z_arm_fault+0x132>
		reason = bus_fault(esf, 0, recoverable);
 800431c:	f10d 011f 	add.w	r1, sp, #31
 8004320:	2000      	movs	r0, #0
 8004322:	e7ed      	b.n	8004300 <z_arm_fault+0x164>
	PR_FAULT_INFO(
 8004324:	4b17      	ldr	r3, [pc, #92]	; (8004384 <z_arm_fault+0x1e8>)
 8004326:	930c      	str	r3, [sp, #48]	; 0x30
 8004328:	2302      	movs	r3, #2
 800432a:	930b      	str	r3, [sp, #44]	; 0x2c
 800432c:	e782      	b.n	8004234 <z_arm_fault+0x98>
	PR_FAULT_INFO("***** %s %d) *****",
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <z_arm_fault+0x1ec>)
 8004330:	4b16      	ldr	r3, [pc, #88]	; (800438c <z_arm_fault+0x1f0>)
 8004332:	490e      	ldr	r1, [pc, #56]	; (800436c <z_arm_fault+0x1d0>)
 8004334:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 8004338:	bf18      	it	ne
 800433a:	4613      	movne	r3, r2
 800433c:	3c10      	subs	r4, #16
 800433e:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8004342:	2400      	movs	r4, #0
 8004344:	4b12      	ldr	r3, [pc, #72]	; (8004390 <z_arm_fault+0x1f4>)
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	e9cd 4400 	strd	r4, r4, [sp]
 800434c:	4623      	mov	r3, r4
 800434e:	2201      	movs	r2, #1
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff ff11 	bl	8004178 <z_log_msg2_runtime_create.constprop.0>
}
 8004356:	e781      	b.n	800425c <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004358:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	e794      	b.n	800428c <z_arm_fault+0xf0>
 8004362:	bf00      	nop
 8004364:	e000ed00 	.word	0xe000ed00
 8004368:	0801832d 	.word	0x0801832d
 800436c:	08016f28 	.word	0x08016f28
 8004370:	08018358 	.word	0x08018358
 8004374:	0801836f 	.word	0x0801836f
 8004378:	08018390 	.word	0x08018390
 800437c:	0801839e 	.word	0x0801839e
 8004380:	080183bd 	.word	0x080183bd
 8004384:	080183d9 	.word	0x080183d9
 8004388:	08018314 	.word	0x08018314
 800438c:	080182ff 	.word	0x080182ff
 8004390:	080182ec 	.word	0x080182ec

08004394 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8004394:	4a02      	ldr	r2, [pc, #8]	; (80043a0 <z_arm_fault_init+0xc>)
 8004396:	6953      	ldr	r3, [r2, #20]
 8004398:	f043 0310 	orr.w	r3, r3, #16
 800439c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 800439e:	4770      	bx	lr
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80043a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80043a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80043ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80043ae:	4672      	mov	r2, lr
	bl z_arm_fault
 80043b0:	f7ff fef4 	bl	800419c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80043b4:	bd01      	pop	{r0, pc}
 80043b6:	bf00      	nop

080043b8 <z_arm_interrupt_init>:
 80043b8:	4804      	ldr	r0, [pc, #16]	; (80043cc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	2110      	movs	r1, #16
 80043be:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80043c0:	3301      	adds	r3, #1
 80043c2:	2b3e      	cmp	r3, #62	; 0x3e
 80043c4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80043c8:	d1f9      	bne.n	80043be <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100

080043d0 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80043d0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80043d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80043d6:	4808      	ldr	r0, [pc, #32]	; (80043f8 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80043d8:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80043dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80043de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80043e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80043e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80043e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80043ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80043ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80043f2:	f7ff fc5f 	bl	8003cb4 <z_arm_prep_c>
 80043f6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80043f8:	20009140 	.word	0x20009140

080043fc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <z_impl_k_thread_abort+0x1c>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4283      	cmp	r3, r0
 8004402:	d107      	bne.n	8004414 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004404:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8004408:	b123      	cbz	r3, 8004414 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800440a:	4a04      	ldr	r2, [pc, #16]	; (800441c <z_impl_k_thread_abort+0x20>)
 800440c:	6853      	ldr	r3, [r2, #4]
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004412:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
 8004414:	f00a b8fc 	b.w	800e610 <z_thread_abort>
 8004418:	200022a4 	.word	0x200022a4
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8004420:	4b02      	ldr	r3, [pc, #8]	; (800442c <z_arm_configure_static_mpu_regions+0xc>)
 8004422:	4a03      	ldr	r2, [pc, #12]	; (8004430 <z_arm_configure_static_mpu_regions+0x10>)
 8004424:	4803      	ldr	r0, [pc, #12]	; (8004434 <z_arm_configure_static_mpu_regions+0x14>)
 8004426:	2101      	movs	r1, #1
 8004428:	f000 b886 	b.w	8004538 <arm_core_mpu_configure_static_mpu_regions>
 800442c:	20010000 	.word	0x20010000
 8004430:	20000000 	.word	0x20000000
 8004434:	08017120 	.word	0x08017120

08004438 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004438:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 800443c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 800443e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8004440:	4a04      	ldr	r2, [pc, #16]	; (8004454 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8004442:	2120      	movs	r1, #32
 8004444:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8004448:	4618      	mov	r0, r3
 800444a:	2101      	movs	r1, #1
 800444c:	f000 b87e 	b.w	800454c <arm_core_mpu_configure_dynamic_mpu_regions>
 8004450:	20001008 	.word	0x20001008
 8004454:	150b0000 	.word	0x150b0000

08004458 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 800445a:	4f28      	ldr	r7, [pc, #160]	; (80044fc <mpu_configure_regions+0xa4>)
 800445c:	b087      	sub	sp, #28
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 800445e:	2600      	movs	r6, #0
 8004460:	428e      	cmp	r6, r1
 8004462:	da16      	bge.n	8004492 <mpu_configure_regions+0x3a>
		if (regions[i].size == 0U) {
 8004464:	6844      	ldr	r4, [r0, #4]
 8004466:	2c00      	cmp	r4, #0
 8004468:	d045      	beq.n	80044f6 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 800446a:	b1db      	cbz	r3, 80044a4 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 800446c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8004470:	ea14 0f0c 	tst.w	r4, ip
 8004474:	d010      	beq.n	8004498 <mpu_configure_regions+0x40>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <mpu_configure_regions+0xa8>)
 8004478:	e9cd 3604 	strd	r3, r6, [sp, #16]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 800447c:	2303      	movs	r3, #3
 800447e:	9303      	str	r3, [sp, #12]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8004480:	4820      	ldr	r0, [pc, #128]	; (8004504 <mpu_configure_regions+0xac>)
 8004482:	aa03      	add	r2, sp, #12
 8004484:	2300      	movs	r3, #0
 8004486:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800448a:	f00c fffe 	bl	801148a <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800448e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8004492:	4610      	mov	r0, r2
 8004494:	b007      	add	sp, #28
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
 8004498:	2c1f      	cmp	r4, #31
 800449a:	d9ec      	bls.n	8004476 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
 800449c:	6805      	ldr	r5, [r0, #0]
		&&
 800449e:	ea1c 0f05 	tst.w	ip, r5
 80044a2:	d1e8      	bne.n	8004476 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80044a4:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80044a6:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80044a8:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80044ac:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 80044ae:	d910      	bls.n	80044d2 <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
 80044b0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80044b4:	d80f      	bhi.n	80044d6 <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80044b6:	3c01      	subs	r4, #1
 80044b8:	fab4 f484 	clz	r4, r4
 80044bc:	f1c4 041f 	rsb	r4, r4, #31
 80044c0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80044c2:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80044c4:	ea4c 0404 	orr.w	r4, ip, r4
 80044c8:	d907      	bls.n	80044da <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <mpu_configure_regions+0xb0>)
 80044cc:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80044d0:	e7d4      	b.n	800447c <mpu_configure_regions+0x24>
		return REGION_32B;
 80044d2:	2408      	movs	r4, #8
 80044d4:	e7f5      	b.n	80044c2 <mpu_configure_regions+0x6a>
		return REGION_4G;
 80044d6:	243e      	movs	r4, #62	; 0x3e
 80044d8:	e7f3      	b.n	80044c2 <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80044da:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 80044de:	4315      	orrs	r5, r2
 80044e0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80044e4:	f044 0401 	orr.w	r4, r4, #1
 80044e8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80044ec:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 80044f0:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80044f2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 80044f6:	3601      	adds	r6, #1
 80044f8:	300c      	adds	r0, #12
 80044fa:	e7b1      	b.n	8004460 <mpu_configure_regions+0x8>
 80044fc:	e000ed00 	.word	0xe000ed00
 8004500:	08018401 	.word	0x08018401
 8004504:	08016f18 	.word	0x08016f18
 8004508:	08018424 	.word	0x08018424

0800450c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <arm_core_mpu_enable+0x14>)
 800450e:	2205      	movs	r2, #5
 8004510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8004514:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004518:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004524:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004528:	4b02      	ldr	r3, [pc, #8]	; (8004534 <arm_core_mpu_disable+0x10>)
 800452a:	2200      	movs	r2, #0
 800452c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8004538:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 800453a:	4c03      	ldr	r4, [pc, #12]	; (8004548 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800453c:	2301      	movs	r3, #1
 800453e:	7822      	ldrb	r2, [r4, #0]
 8004540:	f7ff ff8a 	bl	8004458 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8004544:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8004546:	bd10      	pop	{r4, pc}
 8004548:	20002346 	.word	0x20002346

0800454c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 800454c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8004550:	2300      	movs	r3, #0
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	f7ff ff80 	bl	8004458 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8004558:	f110 0f16 	cmn.w	r0, #22
 800455c:	d003      	beq.n	8004566 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
 8004560:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8004562:	2807      	cmp	r0, #7
 8004564:	dd00      	ble.n	8004568 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8004566:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8004568:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
 800456c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004570:	3001      	adds	r0, #1
 8004572:	e7f6      	b.n	8004562 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8004574:	20002346 	.word	0x20002346
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800457c:	4914      	ldr	r1, [pc, #80]	; (80045d0 <z_arm_mpu_init+0x54>)
 800457e:	6808      	ldr	r0, [r1, #0]
 8004580:	2808      	cmp	r0, #8
{
 8004582:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8004584:	d821      	bhi.n	80045ca <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8004586:	f7ff ffcd 	bl	8004524 <arm_core_mpu_disable>
 800458a:	4c12      	ldr	r4, [pc, #72]	; (80045d4 <z_arm_mpu_init+0x58>)
 800458c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800458e:	2200      	movs	r2, #0
 8004590:	4290      	cmp	r0, r2
 8004592:	f101 010c 	add.w	r1, r1, #12
 8004596:	d105      	bne.n	80045a4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <z_arm_mpu_init+0x5c>)
 800459a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 800459c:	f7ff ffb6 	bl	800450c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80045a0:	2000      	movs	r0, #0
}
 80045a2:	bd10      	pop	{r4, pc}
 80045a4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80045a8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80045ac:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80045b6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80045ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80045c6:	3201      	adds	r2, #1
 80045c8:	e7e2      	b.n	8004590 <z_arm_mpu_init+0x14>
		return -1;
 80045ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ce:	e7e8      	b.n	80045a2 <z_arm_mpu_init+0x26>
 80045d0:	0801712c 	.word	0x0801712c
 80045d4:	e000ed00 	.word	0xe000ed00
 80045d8:	20002346 	.word	0x20002346

080045dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <__stdout_hook_install+0x8>)
 80045de:	6018      	str	r0, [r3, #0]
}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000084 	.word	0x20000084

080045e8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 80045e8:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 80045ea:	4c07      	ldr	r4, [pc, #28]	; (8004608 <_sbrk+0x20>)
 80045ec:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80045ee:	18c2      	adds	r2, r0, r3
 80045f0:	4806      	ldr	r0, [pc, #24]	; (800460c <_sbrk+0x24>)
 80045f2:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
 80045f6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80045fa:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80045fc:	bf3a      	itte	cc
 80045fe:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
 8004600:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8004602:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8004606:	bd10      	pop	{r4, pc}
 8004608:	20001014 	.word	0x20001014
 800460c:	2000c2d0 	.word	0x2000c2d0

08004610 <getBatteryLevelLocal>:
	/* Do not change the default value */
}

static uint8_t getBatteryLevelLocal(void)
{
	if (getBatteryLevelUser != NULL) {
 8004610:	4b02      	ldr	r3, [pc, #8]	; (800461c <getBatteryLevelLocal+0xc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b103      	cbz	r3, 8004618 <getBatteryLevelLocal+0x8>
		return getBatteryLevelUser();
 8004616:	4718      	bx	r3
	}

	return 255;
}
 8004618:	20ff      	movs	r0, #255	; 0xff
 800461a:	4770      	bx	lr
 800461c:	20001024 	.word	0x20001024

08004620 <lorawan_init>:

	return 0;
}

static int lorawan_init(const struct device *dev)
{
 8004620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <lorawan_init+0x54>)
	LoRaMacStatus_t status;

	sys_slist_init(&dl_callbacks);

	macPrimitives.MacMcpsConfirm = McpsConfirm;
 8004624:	4814      	ldr	r0, [pc, #80]	; (8004678 <lorawan_init+0x58>)
	macPrimitives.MacMcpsIndication = McpsIndication;
	macPrimitives.MacMlmeConfirm = MlmeConfirm;
	macPrimitives.MacMlmeIndication = MlmeIndication;
	macCallbacks.GetBatteryLevel = getBatteryLevelLocal;
 8004626:	4915      	ldr	r1, [pc, #84]	; (800467c <lorawan_init+0x5c>)
 8004628:	2400      	movs	r4, #0
	list->tail = NULL;
 800462a:	e9c3 4400 	strd	r4, r4, [r3]
	macPrimitives.MacMcpsConfirm = McpsConfirm;
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <lorawan_init+0x60>)
 8004630:	6003      	str	r3, [r0, #0]
	macPrimitives.MacMcpsIndication = McpsIndication;
 8004632:	4b14      	ldr	r3, [pc, #80]	; (8004684 <lorawan_init+0x64>)
 8004634:	6043      	str	r3, [r0, #4]
	macPrimitives.MacMlmeConfirm = MlmeConfirm;
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <lorawan_init+0x68>)
 8004638:	6083      	str	r3, [r0, #8]
	macPrimitives.MacMlmeIndication = MlmeIndication;
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <lorawan_init+0x6c>)
 800463c:	60c3      	str	r3, [r0, #12]
	macCallbacks.GetBatteryLevel = getBatteryLevelLocal;
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <lorawan_init+0x70>)
	macCallbacks.GetTemperatureLevel = NULL;
	macCallbacks.NvmDataChange = NULL;
 8004640:	608c      	str	r4, [r1, #8]
	macCallbacks.GetTemperatureLevel = NULL;
 8004642:	e9c1 3400 	strd	r3, r4, [r1]
	macCallbacks.MacProcessNotify = OnMacProcessNotify;

	status = LoRaMacInitialization(&macPrimitives, &macCallbacks,
 8004646:	2208      	movs	r2, #8
	macCallbacks.MacProcessNotify = OnMacProcessNotify;
 8004648:	4b12      	ldr	r3, [pc, #72]	; (8004694 <lorawan_init+0x74>)
 800464a:	60cb      	str	r3, [r1, #12]
	status = LoRaMacInitialization(&macPrimitives, &macCallbacks,
 800464c:	f003 fc64 	bl	8007f18 <LoRaMacInitialization>
				       LORAWAN_REGION);
	if (status != LORAMAC_STATUS_OK) {
 8004650:	b170      	cbz	r0, 8004670 <lorawan_init+0x50>
		LOG_ERR("LoRaMacInitialization failed: %s",
 8004652:	f000 f909 	bl	8004868 <lorawan_status2str>
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <lorawan_init+0x78>)
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800465e:	4620      	mov	r0, r4
 8004660:	490e      	ldr	r1, [pc, #56]	; (800469c <lorawan_init+0x7c>)
 8004662:	9400      	str	r4, [sp, #0]
 8004664:	4623      	mov	r3, r4
 8004666:	2201      	movs	r2, #1
 8004668:	f00c ffb7 	bl	80115da <z_log_msg2_runtime_create.constprop.0>
			lorawan_status2str(status));
		return -EINVAL;
 800466c:	f06f 0015 	mvn.w	r0, #21
	}

	LOG_DBG("LoRaMAC Initialized");

	return 0;
}
 8004670:	b004      	add	sp, #16
 8004672:	bd10      	pop	{r4, pc}
 8004674:	20001018 	.word	0x20001018
 8004678:	20001038 	.word	0x20001038
 800467c:	20001028 	.word	0x20001028
 8004680:	08004781 	.word	0x08004781
 8004684:	080046fd 	.word	0x080046fd
 8004688:	080047d5 	.word	0x080047d5
 800468c:	080115d5 	.word	0x080115d5
 8004690:	08004611 	.word	0x08004611
 8004694:	080115d7 	.word	0x080115d7
 8004698:	08018459 	.word	0x08018459
 800469c:	08016f08 	.word	0x08016f08

080046a0 <datarate_observe>:
{
 80046a0:	b530      	push	{r4, r5, lr}
	if ((mibGet.Param.ChannelsDatarate != current_datarate) ||
 80046a2:	4c12      	ldr	r4, [pc, #72]	; (80046ec <datarate_observe+0x4c>)
{
 80046a4:	b091      	sub	sp, #68	; 0x44
	mibGet.Type = MIB_CHANNELS_DATARATE;
 80046a6:	232d      	movs	r3, #45	; 0x2d
{
 80046a8:	4605      	mov	r5, r0
	LoRaMacMibGetRequestConfirm(&mibGet);
 80046aa:	a807      	add	r0, sp, #28
	mibGet.Type = MIB_CHANNELS_DATARATE;
 80046ac:	f88d 301c 	strb.w	r3, [sp, #28]
	LoRaMacMibGetRequestConfirm(&mibGet);
 80046b0:	f003 fddc 	bl	800826c <LoRaMacMibGetRequestConfirm>
	if ((mibGet.Param.ChannelsDatarate != current_datarate) ||
 80046b4:	f99d 3020 	ldrsb.w	r3, [sp, #32]
 80046b8:	7822      	ldrb	r2, [r4, #0]
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d100      	bne.n	80046c0 <datarate_observe+0x20>
 80046be:	b195      	cbz	r5, 80046e6 <datarate_observe+0x46>
		current_datarate = mibGet.Param.ChannelsDatarate;
 80046c0:	b2d8      	uxtb	r0, r3
		if (dr_change_cb) {
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <datarate_observe+0x50>)
		current_datarate = mibGet.Param.ChannelsDatarate;
 80046c4:	7020      	strb	r0, [r4, #0]
		if (dr_change_cb) {
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	b103      	cbz	r3, 80046cc <datarate_observe+0x2c>
			dr_change_cb(current_datarate);
 80046ca:	4798      	blx	r3
		LOG_INF("Datarate changed: DR_%d", current_datarate);
 80046cc:	7823      	ldrb	r3, [r4, #0]
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <datarate_observe+0x54>)
 80046d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046d4:	2303      	movs	r3, #3
 80046d6:	9303      	str	r3, [sp, #12]
 80046d8:	4807      	ldr	r0, [pc, #28]	; (80046f8 <datarate_observe+0x58>)
 80046da:	2300      	movs	r3, #0
 80046dc:	aa03      	add	r2, sp, #12
 80046de:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 80046e2:	f00c fed2 	bl	801148a <z_impl_z_log_msg2_static_create>
}
 80046e6:	b011      	add	sp, #68	; 0x44
 80046e8:	bd30      	pop	{r4, r5, pc}
 80046ea:	bf00      	nop
 80046ec:	20002347 	.word	0x20002347
 80046f0:	20001020 	.word	0x20001020
 80046f4:	0801847a 	.word	0x0801847a
 80046f8:	08016f08 	.word	0x08016f08

080046fc <McpsIndication>:
{
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	4605      	mov	r5, r0
	if (mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8004700:	7840      	ldrb	r0, [r0, #1]
{
 8004702:	b085      	sub	sp, #20
	if (mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8004704:	b170      	cbz	r0, 8004724 <McpsIndication+0x28>
		LOG_ERR("McpsIndication failed : %s",
 8004706:	f000 f8bb 	bl	8004880 <lorawan_eventinfo2str>
 800470a:	4b19      	ldr	r3, [pc, #100]	; (8004770 <McpsIndication+0x74>)
 800470c:	9302      	str	r3, [sp, #8]
 800470e:	2300      	movs	r3, #0
 8004710:	9003      	str	r0, [sp, #12]
 8004712:	e9cd 3300 	strd	r3, r3, [sp]
 8004716:	4917      	ldr	r1, [pc, #92]	; (8004774 <McpsIndication+0x78>)
 8004718:	2201      	movs	r2, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f00c ff5d 	bl	80115da <z_log_msg2_runtime_create.constprop.0>
}
 8004720:	b005      	add	sp, #20
 8004722:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (lorawan_adr_enable) {
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <McpsIndication+0x7c>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b10b      	cbz	r3, 800472e <McpsIndication+0x32>
		datarate_observe(false);
 800472a:	f7ff ffb9 	bl	80046a0 <datarate_observe>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <McpsIndication+0x80>)
 8004730:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
 8004732:	2c00      	cmp	r4, #0
 8004734:	d0f4      	beq.n	8004720 <McpsIndication+0x24>
 8004736:	3c08      	subs	r4, #8
		if ((cb->port == LW_RECV_PORT_ANY) ||
 8004738:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800473c:	8823      	ldrh	r3, [r4, #0]
		    (cb->port == mcpsIndication->Port)) {
 800473e:	78e8      	ldrb	r0, [r5, #3]
		if ((cb->port == LW_RECV_PORT_ANY) ||
 8004740:	42bb      	cmp	r3, r7
 8004742:	d001      	beq.n	8004748 <McpsIndication+0x4c>
 8004744:	4283      	cmp	r3, r0
 8004746:	d10d      	bne.n	8004764 <McpsIndication+0x68>
			cb->cb(mcpsIndication->Port,
 8004748:	68ab      	ldr	r3, [r5, #8]
 800474a:	7969      	ldrb	r1, [r5, #5]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	7b2b      	ldrb	r3, [r5, #12]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	3900      	subs	r1, #0
 8004754:	6866      	ldr	r6, [r4, #4]
 8004756:	f995 3010 	ldrsb.w	r3, [r5, #16]
 800475a:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 800475e:	bf18      	it	ne
 8004760:	2101      	movne	r1, #1
 8004762:	47b0      	blx	r6
	return node->next;
 8004764:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
 8004766:	2c00      	cmp	r4, #0
 8004768:	d0da      	beq.n	8004720 <McpsIndication+0x24>
 800476a:	3c08      	subs	r4, #8
 800476c:	e7e6      	b.n	800473c <McpsIndication+0x40>
 800476e:	bf00      	nop
 8004770:	08018492 	.word	0x08018492
 8004774:	08016f08 	.word	0x08016f08
 8004778:	2000234a 	.word	0x2000234a
 800477c:	20001018 	.word	0x20001018

08004780 <McpsConfirm>:
{
 8004780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004782:	4604      	mov	r4, r0
	if (mcpsConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 8004784:	7840      	ldrb	r0, [r0, #1]
 8004786:	b160      	cbz	r0, 80047a2 <McpsConfirm+0x22>
		LOG_ERR("McpsRequest failed : %s",
 8004788:	f000 f87a 	bl	8004880 <lorawan_eventinfo2str>
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <McpsConfirm+0x40>)
 800478e:	9302      	str	r3, [sp, #8]
 8004790:	2300      	movs	r3, #0
 8004792:	9003      	str	r0, [sp, #12]
 8004794:	e9cd 3300 	strd	r3, r3, [sp]
 8004798:	490a      	ldr	r1, [pc, #40]	; (80047c4 <McpsConfirm+0x44>)
 800479a:	2201      	movs	r2, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f00c ff1c 	bl	80115da <z_log_msg2_runtime_create.constprop.0>
	if (lorawan_adr_enable) {
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <McpsConfirm+0x48>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b113      	cbz	r3, 80047ae <McpsConfirm+0x2e>
		datarate_observe(false);
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7ff ff79 	bl	80046a0 <datarate_observe>
	last_mcps_confirm_status = mcpsConfirm->Status;
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <McpsConfirm+0x4c>)
 80047b0:	7862      	ldrb	r2, [r4, #1]
 80047b2:	701a      	strb	r2, [r3, #0]
	z_impl_k_sem_give(sem);
 80047b4:	4806      	ldr	r0, [pc, #24]	; (80047d0 <McpsConfirm+0x50>)
}
 80047b6:	b004      	add	sp, #16
 80047b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047bc:	f009 baba 	b.w	800dd34 <z_impl_k_sem_give>
 80047c0:	080184ad 	.word	0x080184ad
 80047c4:	08016f08 	.word	0x08016f08
 80047c8:	2000234a 	.word	0x2000234a
 80047cc:	20002348 	.word	0x20002348
 80047d0:	200003ec 	.word	0x200003ec

080047d4 <MlmeConfirm>:
{
 80047d4:	b530      	push	{r4, r5, lr}
	if (mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 80047d6:	7845      	ldrb	r5, [r0, #1]
{
 80047d8:	b095      	sub	sp, #84	; 0x54
 80047da:	4604      	mov	r4, r0
	if (mlmeConfirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
 80047dc:	b1ad      	cbz	r5, 800480a <MlmeConfirm+0x36>
		LOG_ERR("MlmeConfirm failed : %s",
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 f84e 	bl	8004880 <lorawan_eventinfo2str>
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <MlmeConfirm+0x7c>)
 80047e6:	9302      	str	r3, [sp, #8]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9003      	str	r0, [sp, #12]
 80047ec:	e9cd 3300 	strd	r3, r3, [sp]
 80047f0:	4918      	ldr	r1, [pc, #96]	; (8004854 <MlmeConfirm+0x80>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f00c fef0 	bl	80115da <z_log_msg2_runtime_create.constprop.0>
	last_mlme_confirm_status = mlmeConfirm->Status;
 80047fa:	4b17      	ldr	r3, [pc, #92]	; (8004858 <MlmeConfirm+0x84>)
 80047fc:	7862      	ldrb	r2, [r4, #1]
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	4816      	ldr	r0, [pc, #88]	; (800485c <MlmeConfirm+0x88>)
 8004802:	f009 fa97 	bl	800dd34 <z_impl_k_sem_give>
}
 8004806:	b015      	add	sp, #84	; 0x54
 8004808:	bd30      	pop	{r4, r5, pc}
	switch (mlmeConfirm->MlmeRequest) {
 800480a:	7803      	ldrb	r3, [r0, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d00a      	beq.n	8004826 <MlmeConfirm+0x52>
 8004810:	2b04      	cmp	r3, #4
 8004812:	d1f2      	bne.n	80047fa <MlmeConfirm+0x26>
		LOG_INF("Link check not implemented yet!");
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <MlmeConfirm+0x8c>)
 8004816:	930e      	str	r3, [sp, #56]	; 0x38
 8004818:	2302      	movs	r3, #2
 800481a:	930d      	str	r3, [sp, #52]	; 0x34
 800481c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004820:	462b      	mov	r3, r5
 8004822:	aa0d      	add	r2, sp, #52	; 0x34
 8004824:	e00f      	b.n	8004846 <MlmeConfirm+0x72>
		mibGet.Type = MIB_DEV_ADDR;
 8004826:	2307      	movs	r3, #7
		LoRaMacMibGetRequestConfirm(&mibGet);
 8004828:	a80a      	add	r0, sp, #40	; 0x28
		mibGet.Type = MIB_DEV_ADDR;
 800482a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		LoRaMacMibGetRequestConfirm(&mibGet);
 800482e:	f003 fd1d 	bl	800826c <LoRaMacMibGetRequestConfirm>
		LOG_INF("Joined network! DevAddr: %08x", mibGet.Param.DevAddr);
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <MlmeConfirm+0x90>)
 8004834:	9308      	str	r3, [sp, #32]
 8004836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004838:	9309      	str	r3, [sp, #36]	; 0x24
 800483a:	2303      	movs	r3, #3
 800483c:	9307      	str	r3, [sp, #28]
 800483e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 8004842:	462b      	mov	r3, r5
 8004844:	aa07      	add	r2, sp, #28
 8004846:	4803      	ldr	r0, [pc, #12]	; (8004854 <MlmeConfirm+0x80>)
 8004848:	f00c fe1f 	bl	801148a <z_impl_z_log_msg2_static_create>
		break;
 800484c:	e7d5      	b.n	80047fa <MlmeConfirm+0x26>
 800484e:	bf00      	nop
 8004850:	080184c5 	.word	0x080184c5
 8004854:	08016f08 	.word	0x08016f08
 8004858:	20002349 	.word	0x20002349
 800485c:	20000404 	.word	0x20000404
 8004860:	080184fb 	.word	0x080184fb
 8004864:	080184dd 	.word	0x080184dd

08004868 <lorawan_status2str>:
	[LORAMAC_STATUS_ERROR] = "Unknown error",
};

const char *lorawan_status2str(unsigned int status)
{
	if (status < ARRAY_SIZE(status2str)) {
 8004868:	2817      	cmp	r0, #23
		return status2str[status];
 800486a:	bf9a      	itte	ls
 800486c:	4b02      	ldrls	r3, [pc, #8]	; (8004878 <lorawan_status2str+0x10>)
 800486e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown status!";
 8004872:	4802      	ldrhi	r0, [pc, #8]	; (800487c <lorawan_status2str+0x14>)
	}
}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	0801718c 	.word	0x0801718c
 800487c:	08018523 	.word	0x08018523

08004880 <lorawan_eventinfo2str>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = "Beacon not found",
};

const char *lorawan_eventinfo2str(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2str)) {
 8004880:	280f      	cmp	r0, #15
		return eventinfo2str[status];
 8004882:	bf9a      	itte	ls
 8004884:	4b02      	ldrls	r3, [pc, #8]	; (8004890 <lorawan_eventinfo2str+0x10>)
 8004886:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown event!";
 800488a:	4802      	ldrhi	r0, [pc, #8]	; (8004894 <lorawan_eventinfo2str+0x14>)
	}
}
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	0801714c 	.word	0x0801714c
 8004894:	08018533 	.word	0x08018533

08004898 <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8004898:	4801      	ldr	r0, [pc, #4]	; (80048a0 <timer_callback+0x8>)
 800489a:	f009 bb7f 	b.w	800df9c <k_work_submit>
 800489e:	bf00      	nop
 80048a0:	20000088 	.word	0x20000088

080048a4 <RtcBkupWrite>:

K_TIMER_DEFINE(lora_timer, timer_callback, NULL);

void RtcBkupWrite(uint32_t data0, uint32_t data1)
{
	backup_reg[0] = data0;
 80048a4:	4b01      	ldr	r3, [pc, #4]	; (80048ac <RtcBkupWrite+0x8>)
 80048a6:	6018      	str	r0, [r3, #0]
	backup_reg[1] = data1;
 80048a8:	6059      	str	r1, [r3, #4]
}
 80048aa:	4770      	bx	lr
 80048ac:	20001048 	.word	0x20001048

080048b0 <RtcBkupRead>:

void RtcBkupRead(uint32_t *data0, uint32_t *data1)
{
	*data0 = backup_reg[0];
 80048b0:	4b02      	ldr	r3, [pc, #8]	; (80048bc <RtcBkupRead+0xc>)
 80048b2:	681a      	ldr	r2, [r3, #0]
	*data1 = backup_reg[1];
 80048b4:	685b      	ldr	r3, [r3, #4]
	*data0 = backup_reg[0];
 80048b6:	6002      	str	r2, [r0, #0]
	*data1 = backup_reg[1];
 80048b8:	600b      	str	r3, [r1, #0]
}
 80048ba:	4770      	bx	lr
 80048bc:	20001048 	.word	0x20001048

080048c0 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 80048c0:	b508      	push	{r3, lr}
	return (k_uptime_get_32() - saved_time);
 80048c2:	f00c fe9d 	bl	8011600 <k_uptime_get_32>
 80048c6:	4b02      	ldr	r3, [pc, #8]	; (80048d0 <RtcGetTimerElapsedTime+0x10>)
 80048c8:	681b      	ldr	r3, [r3, #0]
}
 80048ca:	1ac0      	subs	r0, r0, r3
 80048cc:	bd08      	pop	{r3, pc}
 80048ce:	bf00      	nop
 80048d0:	20001050 	.word	0x20001050

080048d4 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
 80048d4:	4801      	ldr	r0, [pc, #4]	; (80048dc <RtcStopAlarm+0x8>)
 80048d6:	f011 bcd0 	b.w	801627a <z_impl_k_timer_stop>
 80048da:	bf00      	nop
 80048dc:	20000310 	.word	0x20000310

080048e0 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
 80048e0:	b507      	push	{r0, r1, r2, lr}
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80048e2:	220a      	movs	r2, #10
 80048e4:	fba0 2302 	umull	r2, r3, r0, r2
	z_impl_k_timer_start(timer, duration, period);
 80048e8:	2100      	movs	r1, #0
 80048ea:	2000      	movs	r0, #0
 80048ec:	e9cd 0100 	strd	r0, r1, [sp]
 80048f0:	4802      	ldr	r0, [pc, #8]	; (80048fc <RtcSetAlarm+0x1c>)
 80048f2:	f00a f8a1 	bl	800ea38 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 80048f6:	b003      	add	sp, #12
 80048f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80048fc:	20000310 	.word	0x20000310

08004900 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8004900:	b508      	push	{r3, lr}
	saved_time = k_uptime_get_32();
 8004902:	f00c fe7d 	bl	8011600 <k_uptime_get_32>
 8004906:	4b01      	ldr	r3, [pc, #4]	; (800490c <RtcSetTimerContext+0xc>)
 8004908:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 800490a:	bd08      	pop	{r3, pc}
 800490c:	20001050 	.word	0x20001050

08004910 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8004910:	4b01      	ldr	r3, [pc, #4]	; (8004918 <RtcGetTimerContext+0x8>)
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20001050 	.word	0x20001050

0800491c <sx12xx_ev_rx_done>:
	return true;
}

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 800491c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal *sig = dev_data.operation_done;

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
 8004920:	4c28      	ldr	r4, [pc, #160]	; (80049c4 <sx12xx_ev_rx_done+0xa8>)
{
 8004922:	469a      	mov	sl, r3
	if (dev_data.async_rx_cb) {
 8004924:	68a3      	ldr	r3, [r4, #8]
{
 8004926:	4607      	mov	r7, r0
 8004928:	460d      	mov	r5, r1
 800492a:	4616      	mov	r6, r2
	if (dev_data.async_rx_cb) {
 800492c:	b17b      	cbz	r3, 800494e <sx12xx_ev_rx_done+0x32>
		/* Start receiving again */
		Radio.Rx(0);
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <sx12xx_ev_rx_done+0xac>)
 8004930:	2000      	movs	r0, #0
 8004932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004934:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 8004936:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800493a:	6820      	ldr	r0, [r4, #0]
 800493c:	f8cd a000 	str.w	sl, [sp]
 8004940:	4633      	mov	r3, r6
 8004942:	462a      	mov	r2, r5
 8004944:	4639      	mov	r1, r7
 8004946:	47c0      	blx	r8
	/* Completely release modem */
	dev_data.operation_done = NULL;
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 8004948:	b002      	add	sp, #8
 800494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800494e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8004952:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 8004954:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8004958:	f3bf 8f5b 	dmb	ish
 800495c:	e852 1f00 	ldrex	r1, [r2]
 8004960:	2901      	cmp	r1, #1
 8004962:	d103      	bne.n	800496c <sx12xx_ev_rx_done+0x50>
 8004964:	e842 3000 	strex	r0, r3, [r2]
 8004968:	2800      	cmp	r0, #0
 800496a:	d1f7      	bne.n	800495c <sx12xx_ev_rx_done+0x40>
 800496c:	f3bf 8f5b 	dmb	ish
 8004970:	4690      	mov	r8, r2
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8004972:	d1e9      	bne.n	8004948 <sx12xx_ev_rx_done+0x2c>
	if (size < *dev_data.rx_params.size) {
 8004974:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	42aa      	cmp	r2, r5
		*dev_data.rx_params.size = size;
 800497a:	bf88      	it	hi
 800497c:	701d      	strbhi	r5, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 800497e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004980:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	4639      	mov	r1, r7
 8004986:	f011 fdea 	bl	801655e <memcpy>
	if (dev_data.rx_params.rssi) {
 800498a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800498c:	b103      	cbz	r3, 8004990 <sx12xx_ev_rx_done+0x74>
		*dev_data.rx_params.rssi = rssi;
 800498e:	801e      	strh	r6, [r3, #0]
	if (dev_data.rx_params.snr) {
 8004990:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004992:	b10b      	cbz	r3, 8004998 <sx12xx_ev_rx_done+0x7c>
		*dev_data.rx_params.snr = snr;
 8004994:	f883 a000 	strb.w	sl, [r3]
	Radio.Sleep();
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <sx12xx_ev_rx_done+0xac>)
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	4798      	blx	r3
	dev_data.operation_done = NULL;
 800499e:	2100      	movs	r1, #0
 80049a0:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80049a2:	f3bf 8f5b 	dmb	ish
 80049a6:	e858 3f00 	ldrex	r3, [r8]
 80049aa:	e848 1200 	strex	r2, r1, [r8]
 80049ae:	2a00      	cmp	r2, #0
 80049b0:	d1f9      	bne.n	80049a6 <sx12xx_ev_rx_done+0x8a>
 80049b2:	f3bf 8f5b 	dmb	ish
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 80049b6:	4648      	mov	r0, r9
}
 80049b8:	b002      	add	sp, #8
 80049ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049be:	f00a b8e9 	b.w	800eb94 <z_impl_k_poll_signal_raise>
 80049c2:	bf00      	nop
 80049c4:	20001054 	.word	0x20001054
 80049c8:	08017300 	.word	0x08017300

080049cc <modem_release.constprop.0>:
static bool modem_release(struct sx12xx_data *data)
 80049cc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80049ce:	4e13      	ldr	r6, [pc, #76]	; (8004a1c <modem_release.constprop.0+0x50>)
 80049d0:	f3bf 8f5b 	dmb	ish
 80049d4:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 80049d8:	2302      	movs	r3, #2
 80049da:	e854 2f00 	ldrex	r2, [r4]
 80049de:	2a01      	cmp	r2, #1
 80049e0:	d103      	bne.n	80049ea <modem_release.constprop.0+0x1e>
 80049e2:	e844 3100 	strex	r1, r3, [r4]
 80049e6:	2900      	cmp	r1, #0
 80049e8:	d1f7      	bne.n	80049da <modem_release.constprop.0+0xe>
 80049ea:	f3bf 8f5b 	dmb	ish
 80049ee:	bf0c      	ite	eq
 80049f0:	2001      	moveq	r0, #1
 80049f2:	2000      	movne	r0, #0
 80049f4:	f04f 0500 	mov.w	r5, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80049f8:	d10e      	bne.n	8004a18 <modem_release.constprop.0+0x4c>
	Radio.Sleep();
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <modem_release.constprop.0+0x54>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	4798      	blx	r3
	data->operation_done = NULL;
 8004a00:	6075      	str	r5, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004a02:	f3bf 8f5b 	dmb	ish
 8004a06:	e854 3f00 	ldrex	r3, [r4]
 8004a0a:	e844 5200 	strex	r2, r5, [r4]
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	d1f9      	bne.n	8004a06 <modem_release.constprop.0+0x3a>
 8004a12:	f3bf 8f5b 	dmb	ish
	return true;
 8004a16:	2001      	movs	r0, #1
}
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20001054 	.word	0x20001054
 8004a20:	08017300 	.word	0x08017300

08004a24 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
	struct k_poll_signal *sig = dev_data.operation_done;
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <sx12xx_ev_tx_done+0x1c>)
{
 8004a26:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8004a28:	685c      	ldr	r4, [r3, #4]

	if (modem_release(&dev_data)) {
 8004a2a:	f7ff ffcf 	bl	80049cc <modem_release.constprop.0>
 8004a2e:	b130      	cbz	r0, 8004a3e <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
 8004a30:	b12c      	cbz	r4, 8004a3e <sx12xx_ev_tx_done+0x1a>
 8004a32:	2100      	movs	r1, #0
 8004a34:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8004a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3a:	f00a b8ab 	b.w	800eb94 <z_impl_k_poll_signal_raise>
 8004a3e:	bd10      	pop	{r4, pc}
 8004a40:	20001054 	.word	0x20001054

08004a44 <__sx12xx_configure_pin>:
{
 8004a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a46:	4604      	mov	r4, r0
 8004a48:	b087      	sub	sp, #28
	if (!device_is_ready(gpio->port)) {
 8004a4a:	6800      	ldr	r0, [r0, #0]
{
 8004a4c:	460e      	mov	r6, r1
 8004a4e:	f011 fa00 	bl	8015e52 <z_device_is_ready>
 8004a52:	6825      	ldr	r5, [r4, #0]
	if (!device_is_ready(gpio->port)) {
 8004a54:	4603      	mov	r3, r0
 8004a56:	b970      	cbnz	r0, 8004a76 <__sx12xx_configure_pin+0x32>
		LOG_ERR("GPIO device not ready %s", gpio->port->name);
 8004a58:	682a      	ldr	r2, [r5, #0]
 8004a5a:	9203      	str	r2, [sp, #12]
 8004a5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ad8 <__sx12xx_configure_pin+0x94>)
 8004a5e:	491f      	ldr	r1, [pc, #124]	; (8004adc <__sx12xx_configure_pin+0x98>)
 8004a60:	9000      	str	r0, [sp, #0]
 8004a62:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f00c fe05 	bl	8011676 <z_log_msg2_runtime_create.constprop.0>
		return -ENODEV;
 8004a6c:	f06f 0512 	mvn.w	r5, #18
}
 8004a70:	4628      	mov	r0, r5
 8004a72:	b007      	add	sp, #28
 8004a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
				  spec->pin,
				  spec->dt_flags | extra_flags);
 8004a76:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
 8004a78:	7921      	ldrb	r1, [r4, #4]
 8004a7a:	4333      	orrs	r3, r6
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8004a7c:	02d8      	lsls	r0, r3, #11
	const struct gpio_driver_api *api =
 8004a7e:	f8d5 c008 	ldr.w	ip, [r5, #8]
	struct gpio_driver_data *data =
 8004a82:	692f      	ldr	r7, [r5, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8004a84:	d506      	bpl.n	8004a94 <__sx12xx_configure_pin+0x50>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8004a86:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8004a8a:	d003      	beq.n	8004a94 <__sx12xx_configure_pin+0x50>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8004a8c:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8004a8e:	bf48      	it	mi
 8004a90:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004a94:	6838      	ldr	r0, [r7, #0]
 8004a96:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8004a98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004a9c:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004a9e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004aa0:	bf4c      	ite	mi
 8004aa2:	4330      	orrmi	r0, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8004aa4:	43b0      	bicpl	r0, r6
 8004aa6:	6038      	str	r0, [r7, #0]
	return api->pin_configure(port, pin, flags);
 8004aa8:	f8dc 3000 	ldr.w	r3, [ip]
 8004aac:	4628      	mov	r0, r5
 8004aae:	4798      	blx	r3
	if (err) {
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d0dc      	beq.n	8004a70 <__sx12xx_configure_pin+0x2c>
		LOG_ERR("Cannot configure gpio %s %d: %d", gpio->port->name,
 8004ab6:	7923      	ldrb	r3, [r4, #4]
 8004ab8:	9304      	str	r3, [sp, #16]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	9005      	str	r0, [sp, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	9303      	str	r3, [sp, #12]
 8004ac2:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <__sx12xx_configure_pin+0x9c>)
 8004ac4:	9302      	str	r3, [sp, #8]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e9cd 3300 	strd	r3, r3, [sp]
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <__sx12xx_configure_pin+0x98>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f00c fdd0 	bl	8011676 <z_log_msg2_runtime_create.constprop.0>
		return err;
 8004ad6:	e7cb      	b.n	8004a70 <__sx12xx_configure_pin+0x2c>
 8004ad8:	080187bb 	.word	0x080187bb
 8004adc:	08016f50 	.word	0x08016f50
 8004ae0:	080187d4 	.word	0x080187d4

08004ae4 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004ae8:	4910      	ldr	r1, [pc, #64]	; (8004b2c <sx12xx_lora_send_async+0x48>)
 8004aea:	f3bf 8f5b 	dmb	ish
 8004aee:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 8004af2:	2001      	movs	r0, #1
 8004af4:	e854 6f00 	ldrex	r6, [r4]
 8004af8:	2e00      	cmp	r6, #0
 8004afa:	d104      	bne.n	8004b06 <sx12xx_lora_send_async+0x22>
 8004afc:	e844 0c00 	strex	ip, r0, [r4]
 8004b00:	f1bc 0f00 	cmp.w	ip, #0
 8004b04:	d1f6      	bne.n	8004af4 <sx12xx_lora_send_async+0x10>
 8004b06:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8004b0a:	d10b      	bne.n	8004b24 <sx12xx_lora_send_async+0x40>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8004b0c:	4e08      	ldr	r6, [pc, #32]	; (8004b30 <sx12xx_lora_send_async+0x4c>)
	dev_data.operation_done = async;
 8004b0e:	604b      	str	r3, [r1, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8004b10:	b2d4      	uxtb	r4, r2
 8004b12:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004b14:	4621      	mov	r1, r4
 8004b16:	4798      	blx	r3

	Radio.Send(data, data_len);
 8004b18:	4628      	mov	r0, r5
 8004b1a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	4798      	blx	r3

	return 0;
 8004b20:	2000      	movs	r0, #0
}
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8004b24:	f06f 000f 	mvn.w	r0, #15
 8004b28:	e7fb      	b.n	8004b22 <sx12xx_lora_send_async+0x3e>
 8004b2a:	bf00      	nop
 8004b2c:	20001054 	.word	0x20001054
 8004b30:	08017300 	.word	0x08017300

08004b34 <sx12xx_lora_send>:
{
 8004b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004b38:	2600      	movs	r6, #0
{
 8004b3a:	b095      	sub	sp, #84	; 0x54
	if (!dev_data.tx_cfg.frequency) {
 8004b3c:	4f2a      	ldr	r7, [pc, #168]	; (8004be8 <sx12xx_lora_send+0xb4>)
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004b3e:	ab05      	add	r3, sp, #20
{
 8004b40:	4680      	mov	r8, r0
 8004b42:	4689      	mov	r9, r1
 8004b44:	4614      	mov	r4, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004b46:	4631      	mov	r1, r6
 8004b48:	2210      	movs	r2, #16
 8004b4a:	a809      	add	r0, sp, #36	; 0x24
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004b4c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004b50:	e9cd 6607 	strd	r6, r6, [sp, #28]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004b54:	f011 fd2b 	bl	80165ae <memset>
	if (!dev_data.tx_cfg.frequency) {
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004b5a:	2501      	movs	r5, #1
 8004b5c:	ab05      	add	r3, sp, #20
 8004b5e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8004b62:	930d      	str	r3, [sp, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	d03c      	beq.n	8004be2 <sx12xx_lora_send+0xae>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	f7ff ffb9 	bl	8004ae4 <sx12xx_lora_send_async>
	if (ret < 0) {
 8004b72:	2800      	cmp	r0, #0
 8004b74:	db1a      	blt.n	8004bac <sx12xx_lora_send+0x78>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8004b76:	b2e4      	uxtb	r4, r4
 8004b78:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8004b7c:	4c1b      	ldr	r4, [pc, #108]	; (8004bec <sx12xx_lora_send+0xb8>)
 8004b7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b80:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8004b8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b8e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8004b90:	9503      	str	r5, [sp, #12]
 8004b92:	4628      	mov	r0, r5
 8004b94:	47a0      	blx	r4
 8004b96:	220a      	movs	r2, #10
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8004b98:	40a8      	lsls	r0, r5
 8004b9a:	fba0 2302 	umull	r2, r3, r0, r2
	return z_impl_k_poll(events, num_events, timeout);
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	a809      	add	r0, sp, #36	; 0x24
 8004ba2:	f009 ff9b 	bl	800eadc <z_impl_k_poll>
	if (ret < 0) {
 8004ba6:	42b0      	cmp	r0, r6
 8004ba8:	db03      	blt.n	8004bb2 <sx12xx_lora_send+0x7e>
	return 0;
 8004baa:	2000      	movs	r0, #0
}
 8004bac:	b015      	add	sp, #84	; 0x54
 8004bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Packet transmission failed!");
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <sx12xx_lora_send+0xbc>)
 8004bb4:	9312      	str	r3, [sp, #72]	; 0x48
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	9311      	str	r3, [sp, #68]	; 0x44
 8004bba:	480e      	ldr	r0, [pc, #56]	; (8004bf4 <sx12xx_lora_send+0xc0>)
 8004bbc:	4633      	mov	r3, r6
 8004bbe:	aa11      	add	r2, sp, #68	; 0x44
 8004bc0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004bc4:	f00c fc61 	bl	801148a <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 8004bc8:	f7ff ff00 	bl	80049cc <modem_release.constprop.0>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d1ec      	bne.n	8004baa <sx12xx_lora_send+0x76>
 8004bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd8:	4629      	mov	r1, r5
 8004bda:	a809      	add	r0, sp, #36	; 0x24
 8004bdc:	f009 ff7e 	bl	800eadc <z_impl_k_poll>
 8004be0:	e7e3      	b.n	8004baa <sx12xx_lora_send+0x76>
		return -EINVAL;
 8004be2:	f06f 0015 	mvn.w	r0, #21
 8004be6:	e7e1      	b.n	8004bac <sx12xx_lora_send+0x78>
 8004be8:	20001054 	.word	0x20001054
 8004bec:	08017300 	.word	0x08017300
 8004bf0:	080187f4 	.word	0x080187f4
 8004bf4:	08016f50 	.word	0x08016f50

08004bf8 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8004bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfa:	b093      	sub	sp, #76	; 0x4c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004bfc:	2500      	movs	r5, #0
{
 8004bfe:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004c02:	ac03      	add	r4, sp, #12
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004c04:	2210      	movs	r2, #16
{
 8004c06:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004c08:	a807      	add	r0, sp, #28
 8004c0a:	4629      	mov	r1, r5
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8004c0c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004c10:	e9cd 5505 	strd	r5, r5, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8004c14:	f011 fccb 	bl	80165ae <memset>
 8004c18:	4b26      	ldr	r3, [pc, #152]	; (8004cb4 <sx12xx_lora_recv+0xbc>)
 8004c1a:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c1c:	2601      	movs	r6, #1
 8004c1e:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8004c22:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004c26:	f3bf 8f5b 	dmb	ish
 8004c2a:	e852 1f00 	ldrex	r1, [r2]
 8004c2e:	42a9      	cmp	r1, r5
 8004c30:	d103      	bne.n	8004c3a <sx12xx_lora_recv+0x42>
 8004c32:	e842 6000 	strex	r0, r6, [r2]
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d1f7      	bne.n	8004c2a <sx12xx_lora_recv+0x32>
 8004c3a:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 8004c3e:	d135      	bne.n	8004cac <sx12xx_lora_recv+0xb4>
	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
 8004c40:	f10d 0207 	add.w	r2, sp, #7
	dev_data.operation_done = &done;
 8004c44:	e9c3 4501 	strd	r4, r5, [r3, #4]
	dev_data.rx_params.size = &size;
 8004c48:	645a      	str	r2, [r3, #68]	; 0x44
	dev_data.rx_params.rssi = rssi;
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8004c4a:	4c1b      	ldr	r4, [pc, #108]	; (8004cb8 <sx12xx_lora_recv+0xc0>)
	dev_data.rx_params.rssi = rssi;
 8004c4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004c4e:	649a      	str	r2, [r3, #72]	; 0x48
	dev_data.rx_params.snr = snr;
 8004c50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004c52:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.buf = data;
 8004c54:	641f      	str	r7, [r3, #64]	; 0x40
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8004c56:	21ff      	movs	r1, #255	; 0xff
 8004c58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	4798      	blx	r3
	Radio.Rx(0);
 8004c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c60:	4628      	mov	r0, r5
 8004c62:	4798      	blx	r3
 8004c64:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004c68:	4631      	mov	r1, r6
 8004c6a:	a807      	add	r0, sp, #28
 8004c6c:	f009 ff36 	bl	800eadc <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 8004c70:	1e04      	subs	r4, r0, #0
 8004c72:	da0a      	bge.n	8004c8a <sx12xx_lora_recv+0x92>
		if (!modem_release(&dev_data)) {
 8004c74:	f7ff feaa 	bl	80049cc <modem_release.constprop.0>
 8004c78:	b950      	cbnz	r0, 8004c90 <sx12xx_lora_recv+0x98>
 8004c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c82:	4631      	mov	r1, r6
 8004c84:	a807      	add	r0, sp, #28
 8004c86:	f009 ff29 	bl	800eadc <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8004c8a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8004c8e:	e00a      	b.n	8004ca6 <sx12xx_lora_recv+0xae>
		LOG_INF("Receive timeout");
 8004c90:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <sx12xx_lora_recv+0xc4>)
 8004c92:	9310      	str	r3, [sp, #64]	; 0x40
 8004c94:	2302      	movs	r3, #2
 8004c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c98:	4809      	ldr	r0, [pc, #36]	; (8004cc0 <sx12xx_lora_recv+0xc8>)
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c9e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004ca2:	f00c fbf2 	bl	801148a <z_impl_z_log_msg2_static_create>
}
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	b013      	add	sp, #76	; 0x4c
 8004caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
 8004cac:	f06f 040f 	mvn.w	r4, #15
 8004cb0:	e7f9      	b.n	8004ca6 <sx12xx_lora_recv+0xae>
 8004cb2:	bf00      	nop
 8004cb4:	20001054 	.word	0x20001054
 8004cb8:	08017300 	.word	0x08017300
 8004cbc:	08018810 	.word	0x08018810
 8004cc0:	08016f50 	.word	0x08016f50

08004cc4 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
 8004cc4:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
 8004cc6:	b939      	cbnz	r1, 8004cd8 <sx12xx_lora_recv_async+0x14>
		if (!modem_release(&dev_data)) {
 8004cc8:	f7ff fe80 	bl	80049cc <modem_release.constprop.0>
			/* Not receiving or already being stopped */
			return -EINVAL;
		}
		return 0;
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	bf0c      	ite	eq
 8004cd0:	f06f 0015 	mvneq.w	r0, #21
 8004cd4:	2000      	movne	r0, #0
	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
	Radio.Rx(0);

	return 0;
}
 8004cd6:	bd10      	pop	{r4, pc}
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <sx12xx_lora_recv_async+0x54>)
 8004cda:	f3bf 8f5b 	dmb	ish
 8004cde:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	e852 4f00 	ldrex	r4, [r2]
 8004ce8:	2c00      	cmp	r4, #0
 8004cea:	d104      	bne.n	8004cf6 <sx12xx_lora_recv_async+0x32>
 8004cec:	e842 0c00 	strex	ip, r0, [r2]
 8004cf0:	f1bc 0f00 	cmp.w	ip, #0
 8004cf4:	d1f6      	bne.n	8004ce4 <sx12xx_lora_recv_async+0x20>
 8004cf6:	f3bf 8f5b 	dmb	ish
	if (!modem_acquire(&dev_data)) {
 8004cfa:	d109      	bne.n	8004d10 <sx12xx_lora_recv_async+0x4c>
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8004cfc:	4c07      	ldr	r4, [pc, #28]	; (8004d1c <sx12xx_lora_recv_async+0x58>)
	dev_data.async_rx_cb = cb;
 8004cfe:	6099      	str	r1, [r3, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8004d00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d02:	21ff      	movs	r1, #255	; 0xff
 8004d04:	4798      	blx	r3
	Radio.Rx(0);
 8004d06:	2000      	movs	r0, #0
 8004d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d0a:	4798      	blx	r3
	return 0;
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e7e2      	b.n	8004cd6 <sx12xx_lora_recv_async+0x12>
		return -EBUSY;
 8004d10:	f06f 000f 	mvn.w	r0, #15
 8004d14:	e7df      	b.n	8004cd6 <sx12xx_lora_recv_async+0x12>
 8004d16:	bf00      	nop
 8004d18:	20001054 	.word	0x20001054
 8004d1c:	08017300 	.word	0x08017300

08004d20 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d22:	4d27      	ldr	r5, [pc, #156]	; (8004dc0 <sx12xx_lora_config+0xa0>)
 8004d24:	f3bf 8f5b 	dmb	ish
 8004d28:	b08b      	sub	sp, #44	; 0x2c
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	2601      	movs	r6, #1
 8004d2e:	e855 3f00 	ldrex	r3, [r5]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <sx12xx_lora_config+0x1e>
 8004d36:	e845 6200 	strex	r2, r6, [r5]
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	d1f7      	bne.n	8004d2e <sx12xx_lora_config+0xe>
 8004d3e:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8004d42:	d139      	bne.n	8004db8 <sx12xx_lora_config+0x98>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8004d44:	4f1f      	ldr	r7, [pc, #124]	; (8004dc4 <sx12xx_lora_config+0xa4>)
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4798      	blx	r3

	if (config->tx) {
 8004d4c:	7ae3      	ldrb	r3, [r4, #11]
 8004d4e:	b303      	cbz	r3, 8004d92 <sx12xx_lora_config+0x72>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8004d50:	6820      	ldr	r0, [r4, #0]
 8004d52:	6861      	ldr	r1, [r4, #4]
 8004d54:	f1a5 030c 	sub.w	r3, r5, #12
 8004d58:	c303      	stmia	r3!, {r0, r1}
 8004d5a:	68a0      	ldr	r0, [r4, #8]
 8004d5c:	6018      	str	r0, [r3, #0]
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004d64:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8004d68:	8923      	ldrh	r3, [r4, #8]
 8004d6a:	9302      	str	r3, [sp, #8]
 8004d6c:	79a3      	ldrb	r3, [r4, #6]
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	7963      	ldrb	r3, [r4, #5]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8004d78:	e9cd 2603 	strd	r2, r6, [sp, #12]
 8004d7c:	69fd      	ldr	r5, [r7, #28]
 8004d7e:	7923      	ldrb	r3, [r4, #4]
 8004d80:	f994 100a 	ldrsb.w	r1, [r4, #10]
 8004d84:	4630      	mov	r0, r6
 8004d86:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 8004d88:	f7ff fe20 	bl	80049cc <modem_release.constprop.0>
	return 0;
 8004d8c:	2000      	movs	r0, #0
}
 8004d8e:	b00b      	add	sp, #44	; 0x2c
 8004d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8004d92:	220a      	movs	r2, #10
 8004d94:	9202      	str	r2, [sp, #8]
 8004d96:	8922      	ldrh	r2, [r4, #8]
 8004d98:	9303      	str	r3, [sp, #12]
 8004d9a:	e9cd 3200 	strd	r3, r2, [sp]
 8004d9e:	e9cd 3608 	strd	r3, r6, [sp, #32]
 8004da2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004da6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004daa:	69bd      	ldr	r5, [r7, #24]
 8004dac:	79a3      	ldrb	r3, [r4, #6]
 8004dae:	7962      	ldrb	r2, [r4, #5]
 8004db0:	7921      	ldrb	r1, [r4, #4]
 8004db2:	4630      	mov	r0, r6
 8004db4:	47a8      	blx	r5
 8004db6:	e7e7      	b.n	8004d88 <sx12xx_lora_config+0x68>
		return -EBUSY;
 8004db8:	f06f 000f 	mvn.w	r0, #15
 8004dbc:	e7e7      	b.n	8004d8e <sx12xx_lora_config+0x6e>
 8004dbe:	bf00      	nop
 8004dc0:	20001090 	.word	0x20001090
 8004dc4:	08017300 	.word	0x08017300

08004dc8 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4608      	mov	r0, r1
 8004dcc:	4611      	mov	r1, r2
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <sx12xx_lora_test_cw+0x38>)
 8004dd2:	f3bf 8f5b 	dmb	ish
 8004dd6:	2401      	movs	r4, #1
 8004dd8:	e853 5f00 	ldrex	r5, [r3]
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	d104      	bne.n	8004dea <sx12xx_lora_test_cw+0x22>
 8004de0:	e843 4c00 	strex	ip, r4, [r3]
 8004de4:	f1bc 0f00 	cmp.w	ip, #0
 8004de8:	d1f6      	bne.n	8004dd8 <sx12xx_lora_test_cw+0x10>
 8004dea:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8004dee:	d104      	bne.n	8004dfa <sx12xx_lora_test_cw+0x32>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <sx12xx_lora_test_cw+0x3c>)
 8004df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df4:	4798      	blx	r3
	return 0;
 8004df6:	2000      	movs	r0, #0
}
 8004df8:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
 8004dfa:	f06f 000f 	mvn.w	r0, #15
 8004dfe:	e7fb      	b.n	8004df8 <sx12xx_lora_test_cw+0x30>
 8004e00:	20001090 	.word	0x20001090
 8004e04:	08017300 	.word	0x08017300

08004e08 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8004e08:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <sx12xx_init+0x3c>)
 8004e0c:	f3bf 8f5b 	dmb	ish
 8004e10:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004e14:	2400      	movs	r4, #0
 8004e16:	e852 1f00 	ldrex	r1, [r2]
 8004e1a:	e842 4500 	strex	r5, r4, [r2]
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	d1f9      	bne.n	8004e16 <sx12xx_init+0xe>
 8004e22:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
 8004e26:	4d08      	ldr	r5, [pc, #32]	; (8004e48 <sx12xx_init+0x40>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8004e28:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <sx12xx_init+0x44>)
 8004e2a:	60da      	str	r2, [r3, #12]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8004e2c:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <sx12xx_init+0x48>)
	dev_data.dev = dev;
 8004e2e:	6018      	str	r0, [r3, #0]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8004e30:	615a      	str	r2, [r3, #20]
	Radio.Init(&dev_data.events);
 8004e32:	f103 000c 	add.w	r0, r3, #12
 8004e36:	682a      	ldr	r2, [r5, #0]
 8004e38:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8004e3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004e3c:	4798      	blx	r3

	return 0;
}
 8004e3e:	4620      	mov	r0, r4
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	20001054 	.word	0x20001054
 8004e48:	08017300 	.word	0x08017300
 8004e4c:	08004a25 	.word	0x08004a25
 8004e50:	0800491d 	.word	0x0800491d

08004e54 <sx126x_set_rx_enable>:
	gpio_pin_set_dt(&dev_config.tx_enable, value);
#endif
}

static void sx126x_set_rx_enable(int value)
{
 8004e54:	4602      	mov	r2, r0
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8004e56:	2105      	movs	r1, #5
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <sx126x_set_rx_enable+0xc>)
 8004e5a:	f00c bc1c 	b.w	8011696 <gpio_pin_set.isra.0>
 8004e5e:	bf00      	nop
 8004e60:	08016b48 	.word	0x08016b48

08004e64 <sx126x_set_tx_enable>:
{
 8004e64:	4602      	mov	r2, r0
 8004e66:	2104      	movs	r1, #4
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <sx126x_set_tx_enable+0xc>)
 8004e6a:	f00c bc14 	b.w	8011696 <gpio_pin_set.isra.0>
 8004e6e:	bf00      	nop
 8004e70:	08016b48 	.word	0x08016b48

08004e74 <sx126x_dio1_irq_work_handler.part.0>:
uint32_t SX126xGetDio1PinState(void)
{
	return sx126x_get_dio1_pin_state(&dev_data);
}

static void sx126x_dio1_irq_work_handler(struct k_work *work)
 8004e74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	LOG_DBG("Processing DIO1 interrupt");
	if (!dev_data.radio_dio_irq) {
		LOG_WRN("DIO1 interrupt without valid HAL IRQ callback.");
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <sx126x_dio1_irq_work_handler.part.0+0x20>)
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	4806      	ldr	r0, [pc, #24]	; (8004e98 <sx126x_dio1_irq_work_handler.part.0+0x24>)
 8004e80:	2300      	movs	r3, #0
 8004e82:	aa03      	add	r2, sp, #12
 8004e84:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8004e88:	f00c faff 	bl	801148a <z_impl_z_log_msg2_static_create>

	/* Re-enable the interrupt if we are not in sleep mode */
	if (dev_data.mode != MODE_SLEEP) {
		sx126x_dio1_irq_enable(&dev_data);
	}
}
 8004e8c:	b007      	add	sp, #28
 8004e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e92:	bf00      	nop
 8004e94:	0801882e 	.word	0x0801882e
 8004e98:	08016f48 	.word	0x08016f48

08004e9c <sx126x_dio1_irq_work_handler>:
{
 8004e9c:	b510      	push	{r4, lr}
	if (!dev_data.radio_dio_irq) {
 8004e9e:	4c0b      	ldr	r4, [pc, #44]	; (8004ecc <sx126x_dio1_irq_work_handler+0x30>)
 8004ea0:	69e3      	ldr	r3, [r4, #28]
 8004ea2:	b91b      	cbnz	r3, 8004eac <sx126x_dio1_irq_work_handler+0x10>
}
 8004ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea8:	f7ff bfe4 	b.w	8004e74 <sx126x_dio1_irq_work_handler.part.0>
	dev_data.radio_dio_irq(NULL);
 8004eac:	2000      	movs	r0, #0
 8004eae:	4798      	blx	r3
	if (Radio.IrqProcess) {
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <sx126x_dio1_irq_work_handler+0x34>)
 8004eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb4:	b103      	cbz	r3, 8004eb8 <sx126x_dio1_irq_work_handler+0x1c>
		Radio.IrqProcess();
 8004eb6:	4798      	blx	r3
	if (dev_data.mode != MODE_SLEEP) {
 8004eb8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004ebc:	b123      	cbz	r3, 8004ec8 <sx126x_dio1_irq_work_handler+0x2c>
}
 8004ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sx126x_dio1_irq_enable(&dev_data);
 8004ec2:	4802      	ldr	r0, [pc, #8]	; (8004ecc <sx126x_dio1_irq_work_handler+0x30>)
 8004ec4:	f000 b944 	b.w	8005150 <sx126x_dio1_irq_enable>
}
 8004ec8:	bd10      	pop	{r4, pc}
 8004eca:	bf00      	nop
 8004ecc:	200010a4 	.word	0x200010a4
 8004ed0:	08017300 	.word	0x08017300

08004ed4 <sx126x_lora_init>:

static int sx126x_lora_init(const struct device *dev)
{
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret;

	LOG_DBG("Initializing %s", DT_INST_LABEL(0));

	if (sx12xx_configure_pin(antenna_enable, GPIO_OUTPUT_INACTIVE) ||
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 8004ed6:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
	const struct sx126x_config *config = dev->config;
 8004eda:	6847      	ldr	r7, [r0, #4]
{
 8004edc:	b087      	sub	sp, #28
 8004ede:	4605      	mov	r5, r0
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 8004ee0:	4828      	ldr	r0, [pc, #160]	; (8004f84 <sx126x_lora_init+0xb0>)
 8004ee2:	f7ff fdaf 	bl	8004a44 <__sx12xx_configure_pin>
	if (sx12xx_configure_pin(antenna_enable, GPIO_OUTPUT_INACTIVE) ||
 8004ee6:	b120      	cbz	r0, 8004ef2 <sx126x_lora_init+0x1e>
	    sx12xx_configure_pin(tx_enable, GPIO_OUTPUT_INACTIVE)) {
		return -EIO;
 8004ee8:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8004eec:	4620      	mov	r0, r4
 8004eee:	b007      	add	sp, #28
 8004ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    sx12xx_configure_pin(tx_enable, GPIO_OUTPUT_INACTIVE)) {
 8004ef2:	4825      	ldr	r0, [pc, #148]	; (8004f88 <sx126x_lora_init+0xb4>)
 8004ef4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8004ef8:	f7ff fda4 	bl	8004a44 <__sx12xx_configure_pin>
	    sx12xx_configure_pin(rx_enable, GPIO_OUTPUT_INACTIVE) ||
 8004efc:	4606      	mov	r6, r0
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d1f2      	bne.n	8004ee8 <sx126x_lora_init+0x14>
	k_work_init(&dev_data.dio1_irq_work, sx126x_dio1_irq_work_handler);
 8004f02:	4922      	ldr	r1, [pc, #136]	; (8004f8c <sx126x_lora_init+0xb8>)
 8004f04:	4822      	ldr	r0, [pc, #136]	; (8004f90 <sx126x_lora_init+0xbc>)
 8004f06:	f011 f83e 	bl	8015f86 <k_work_init>
	ret = sx126x_variant_init(dev);
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f000 f92a 	bl	8005164 <sx126x_variant_init>
	if (ret) {
 8004f10:	4604      	mov	r4, r0
 8004f12:	b158      	cbz	r0, 8004f2c <sx126x_lora_init+0x58>
		LOG_ERR("Variant initialization failed");
 8004f14:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <sx126x_lora_init+0xc0>)
 8004f16:	9304      	str	r3, [sp, #16]
 8004f18:	2302      	movs	r3, #2
 8004f1a:	9303      	str	r3, [sp, #12]
 8004f1c:	481e      	ldr	r0, [pc, #120]	; (8004f98 <sx126x_lora_init+0xc4>)
 8004f1e:	4633      	mov	r3, r6
 8004f20:	aa03      	add	r2, sp, #12
 8004f22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f26:	f00c fab0 	bl	801148a <z_impl_z_log_msg2_static_create>
		return ret;
 8004f2a:	e7df      	b.n	8004eec <sx126x_lora_init+0x18>
	if (!device_is_ready(spec->bus)) {
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f010 ff90 	bl	8015e52 <z_device_is_ready>
 8004f32:	b968      	cbnz	r0, 8004f50 <sx126x_lora_init+0x7c>
		LOG_ERR("SPI device not ready");
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <sx126x_lora_init+0xc8>)
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	2302      	movs	r3, #2
 8004f3a:	9303      	str	r3, [sp, #12]
 8004f3c:	4816      	ldr	r0, [pc, #88]	; (8004f98 <sx126x_lora_init+0xc4>)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	aa03      	add	r2, sp, #12
 8004f42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f46:	f00c faa0 	bl	801148a <z_impl_z_log_msg2_static_create>
		return -ENODEV;
 8004f4a:	f06f 0412 	mvn.w	r4, #18
 8004f4e:	e7cd      	b.n	8004eec <sx126x_lora_init+0x18>
	if (spec->config.cs &&
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	b123      	cbz	r3, 8004f5e <sx126x_lora_init+0x8a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	f010 ff7c 	bl	8015e52 <z_device_is_ready>
	if (spec->config.cs &&
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d0ea      	beq.n	8004f34 <sx126x_lora_init+0x60>
	ret = sx12xx_init(dev);
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f7ff ff52 	bl	8004e08 <sx12xx_init>
	if (ret < 0) {
 8004f64:	1e05      	subs	r5, r0, #0
 8004f66:	dac1      	bge.n	8004eec <sx126x_lora_init+0x18>
		LOG_ERR("Failed to initialize SX12xx common");
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <sx126x_lora_init+0xcc>)
 8004f6a:	9304      	str	r3, [sp, #16]
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	9303      	str	r3, [sp, #12]
 8004f70:	4809      	ldr	r0, [pc, #36]	; (8004f98 <sx126x_lora_init+0xc4>)
 8004f72:	2300      	movs	r3, #0
 8004f74:	aa03      	add	r2, sp, #12
 8004f76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8004f7a:	f00c fa86 	bl	801148a <z_impl_z_log_msg2_static_create>
		return ret;
 8004f7e:	462c      	mov	r4, r5
 8004f80:	e7b4      	b.n	8004eec <sx126x_lora_init+0x18>
 8004f82:	bf00      	nop
 8004f84:	08017204 	.word	0x08017204
 8004f88:	080171fc 	.word	0x080171fc
 8004f8c:	08004e9d 	.word	0x08004e9d
 8004f90:	200010b0 	.word	0x200010b0
 8004f94:	0801885d 	.word	0x0801885d
 8004f98:	08016f48 	.word	0x08016f48
 8004f9c:	0801887b 	.word	0x0801887b
 8004fa0:	08018890 	.word	0x08018890

08004fa4 <SX126xGetOperatingMode>:
}
 8004fa4:	4b01      	ldr	r3, [pc, #4]	; (8004fac <SX126xGetOperatingMode+0x8>)
 8004fa6:	f893 0020 	ldrb.w	r0, [r3, #32]
 8004faa:	4770      	bx	lr
 8004fac:	200010a4 	.word	0x200010a4

08004fb0 <SX126xSetOperatingMode>:
{
 8004fb0:	b508      	push	{r3, lr}
 8004fb2:	4603      	mov	r3, r0
	dev_data.mode = mode;
 8004fb4:	4810      	ldr	r0, [pc, #64]	; (8004ff8 <SX126xSetOperatingMode+0x48>)
	switch (mode) {
 8004fb6:	2b04      	cmp	r3, #4
	dev_data.mode = mode;
 8004fb8:	f880 3020 	strb.w	r3, [r0, #32]
	switch (mode) {
 8004fbc:	d011      	beq.n	8004fe2 <SX126xSetOperatingMode+0x32>
 8004fbe:	d805      	bhi.n	8004fcc <SX126xSetOperatingMode+0x1c>
 8004fc0:	b1bb      	cbz	r3, 8004ff2 <SX126xSetOperatingMode+0x42>
		sx126x_set_rx_enable(0);
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7ff ff46 	bl	8004e54 <sx126x_set_rx_enable>
		sx126x_set_tx_enable(0);
 8004fc8:	2000      	movs	r0, #0
 8004fca:	e00e      	b.n	8004fea <SX126xSetOperatingMode+0x3a>
	switch (mode) {
 8004fcc:	3b05      	subs	r3, #5
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d8f7      	bhi.n	8004fc2 <SX126xSetOperatingMode+0x12>
		sx126x_set_tx_enable(0);
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f7ff ff46 	bl	8004e64 <sx126x_set_tx_enable>
}
 8004fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sx126x_set_rx_enable(1);
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f7ff bf39 	b.w	8004e54 <sx126x_set_rx_enable>
		sx126x_set_rx_enable(0);
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7ff ff36 	bl	8004e54 <sx126x_set_rx_enable>
		sx126x_set_tx_enable(1);
 8004fe8:	2001      	movs	r0, #1
}
 8004fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sx126x_set_tx_enable(0);
 8004fee:	f7ff bf39 	b.w	8004e64 <sx126x_set_tx_enable>
		sx126x_dio1_irq_disable(&dev_data);
 8004ff2:	f00c fc22 	bl	801183a <sx126x_dio1_irq_disable>
 8004ff6:	e7e4      	b.n	8004fc2 <SX126xSetOperatingMode+0x12>
 8004ff8:	200010a4 	.word	0x200010a4

08004ffc <SX126xIoIrqInit>:
	dev_data.radio_dio_irq = dioIrq;
 8004ffc:	4b01      	ldr	r3, [pc, #4]	; (8005004 <SX126xIoIrqInit+0x8>)
 8004ffe:	61d8      	str	r0, [r3, #28]
}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	200010a4 	.word	0x200010a4

08005008 <SX126xReset>:
{
 8005008:	b510      	push	{r4, lr}
	sx126x_reset(&dev_data);
 800500a:	4c04      	ldr	r4, [pc, #16]	; (800501c <SX126xReset+0x14>)
 800500c:	4620      	mov	r0, r4
 800500e:	f00c fbf9 	bl	8011804 <sx126x_reset>
	dev_data.mode = MODE_STDBY_RC;
 8005012:	2301      	movs	r3, #1
 8005014:	f884 3020 	strb.w	r3, [r4, #32]
}
 8005018:	bd10      	pop	{r4, pc}
 800501a:	bf00      	nop
 800501c:	200010a4 	.word	0x200010a4

08005020 <SX126xWaitOnBusy>:
{
 8005020:	b510      	push	{r4, lr}
	while (sx126x_is_busy(&dev_data)) {
 8005022:	4c05      	ldr	r4, [pc, #20]	; (8005038 <SX126xWaitOnBusy+0x18>)
 8005024:	4620      	mov	r0, r4
 8005026:	f000 f88b 	bl	8005140 <sx126x_is_busy>
 800502a:	b900      	cbnz	r0, 800502e <SX126xWaitOnBusy+0xe>
}
 800502c:	bd10      	pop	{r4, pc}
	return z_impl_k_sleep(timeout);
 800502e:	2100      	movs	r1, #0
 8005030:	200a      	movs	r0, #10
 8005032:	f009 fabf 	bl	800e5b4 <z_impl_k_sleep>
 8005036:	e7f5      	b.n	8005024 <SX126xWaitOnBusy+0x4>
 8005038:	200010a4 	.word	0x200010a4

0800503c <sx126x_spi_transceive.isra.0>:
static int sx126x_spi_transceive(uint8_t *req_tx, uint8_t *req_rx,
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	b092      	sub	sp, #72	; 0x48
 8005040:	460d      	mov	r5, r1
 8005042:	e9dd 6116 	ldrd	r6, r1, [sp, #88]	; 0x58
	const struct spi_buf tx_buf[] = {
 8005046:	e9cd 3106 	strd	r3, r1, [sp, #24]
	const struct spi_buf_set tx = {
 800504a:	ab04      	add	r3, sp, #16
	const struct spi_buf tx_buf[] = {
 800504c:	e9cd 0204 	strd	r0, r2, [sp, #16]
	const struct spi_buf rx_buf[] = {
 8005050:	e9cd 5208 	strd	r5, r2, [sp, #32]
	const struct spi_buf_set tx = {
 8005054:	9300      	str	r3, [sp, #0]
	const struct spi_buf_set rx = {
 8005056:	aa08      	add	r2, sp, #32
	const struct spi_buf_set tx = {
 8005058:	2302      	movs	r3, #2
static int sx126x_spi_transceive(uint8_t *req_tx, uint8_t *req_rx,
 800505a:	4604      	mov	r4, r0
	const struct spi_buf rx_buf[] = {
 800505c:	e9cd 610a 	strd	r6, r1, [sp, #40]	; 0x28
	const struct spi_buf_set rx = {
 8005060:	e9cd 2302 	strd	r2, r3, [sp, #8]
	const struct spi_buf_set tx = {
 8005064:	9301      	str	r3, [sp, #4]
	SX126xCheckDeviceReady();
 8005066:	f00c fd25 	bl	8011ab4 <SX126xCheckDeviceReady>
	if (!req_rx && !data_rx) {
 800506a:	4812      	ldr	r0, [pc, #72]	; (80050b4 <sx126x_spi_transceive.isra.0+0x78>)
 800506c:	b9dd      	cbnz	r5, 80050a6 <sx126x_spi_transceive.isra.0+0x6a>
 800506e:	b9d6      	cbnz	r6, 80050a6 <sx126x_spi_transceive.isra.0+0x6a>
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8005070:	6883      	ldr	r3, [r0, #8]
 8005072:	4911      	ldr	r1, [pc, #68]	; (80050b8 <sx126x_spi_transceive.isra.0+0x7c>)
 8005074:	681d      	ldr	r5, [r3, #0]
 8005076:	466a      	mov	r2, sp
 8005078:	4633      	mov	r3, r6
 800507a:	47a8      	blx	r5
	if (ret < 0) {
 800507c:	2800      	cmp	r0, #0
 800507e:	da0b      	bge.n	8005098 <sx126x_spi_transceive.isra.0+0x5c>
		LOG_ERR("SPI transaction failed: %i", ret);
 8005080:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <sx126x_spi_transceive.isra.0+0x80>)
 8005082:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
 8005086:	2303      	movs	r3, #3
 8005088:	930f      	str	r3, [sp, #60]	; 0x3c
 800508a:	480d      	ldr	r0, [pc, #52]	; (80050c0 <sx126x_spi_transceive.isra.0+0x84>)
 800508c:	2300      	movs	r3, #0
 800508e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005090:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8005094:	f00c f9f9 	bl	801148a <z_impl_z_log_msg2_static_create>
	if (req_len >= 1 && req_tx[0] != RADIO_SET_SLEEP) {
 8005098:	7823      	ldrb	r3, [r4, #0]
 800509a:	2b84      	cmp	r3, #132	; 0x84
 800509c:	d001      	beq.n	80050a2 <sx126x_spi_transceive.isra.0+0x66>
		SX126xWaitOnBusy();
 800509e:	f7ff ffbf 	bl	8005020 <SX126xWaitOnBusy>
}
 80050a2:	b012      	add	sp, #72	; 0x48
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
 80050a6:	6883      	ldr	r3, [r0, #8]
 80050a8:	4903      	ldr	r1, [pc, #12]	; (80050b8 <sx126x_spi_transceive.isra.0+0x7c>)
 80050aa:	681d      	ldr	r5, [r3, #0]
 80050ac:	4801      	ldr	r0, [pc, #4]	; (80050b4 <sx126x_spi_transceive.isra.0+0x78>)
 80050ae:	ab02      	add	r3, sp, #8
 80050b0:	466a      	mov	r2, sp
 80050b2:	e7e2      	b.n	800507a <sx126x_spi_transceive.isra.0+0x3e>
 80050b4:	08016c08 	.word	0x08016c08
 80050b8:	080171f0 	.word	0x080171f0
 80050bc:	080188b3 	.word	0x080188b3
 80050c0:	08016f48 	.word	0x08016f48

080050c4 <SX126xWakeup>:
{
 80050c4:	b570      	push	{r4, r5, r6, lr}
	sx126x_dio1_irq_enable(&dev_data);
 80050c6:	4c16      	ldr	r4, [pc, #88]	; (8005120 <SX126xWakeup+0x5c>)
{
 80050c8:	b08c      	sub	sp, #48	; 0x30
	sx126x_dio1_irq_enable(&dev_data);
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 f840 	bl	8005150 <sx126x_dio1_irq_enable>
	uint8_t req[] = { RADIO_GET_STATUS, 0 };
 80050d0:	23c0      	movs	r3, #192	; 0xc0
 80050d2:	f8ad 3004 	strh.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
 80050d6:	ab01      	add	r3, sp, #4
 80050d8:	9302      	str	r3, [sp, #8]
 80050da:	2302      	movs	r3, #2
 80050dc:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set tx = {
 80050de:	2501      	movs	r5, #1
 80050e0:	ab02      	add	r3, sp, #8
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	9505      	str	r5, [sp, #20]
 80050e6:	480f      	ldr	r0, [pc, #60]	; (8005124 <SX126xWakeup+0x60>)
 80050e8:	490f      	ldr	r1, [pc, #60]	; (8005128 <SX126xWakeup+0x64>)
 80050ea:	6883      	ldr	r3, [r0, #8]
 80050ec:	aa04      	add	r2, sp, #16
 80050ee:	681e      	ldr	r6, [r3, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	47b0      	blx	r6
	if (ret < 0) {
 80050f4:	2800      	cmp	r0, #0
 80050f6:	da0d      	bge.n	8005114 <SX126xWakeup+0x50>
		LOG_ERR("SPI transaction failed: %i", ret);
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <SX126xWakeup+0x68>)
 80050fa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80050fe:	2303      	movs	r3, #3
 8005100:	9309      	str	r3, [sp, #36]	; 0x24
 8005102:	480b      	ldr	r0, [pc, #44]	; (8005130 <SX126xWakeup+0x6c>)
 8005104:	2300      	movs	r3, #0
 8005106:	aa09      	add	r2, sp, #36	; 0x24
 8005108:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800510c:	f00c f9bd 	bl	801148a <z_impl_z_log_msg2_static_create>
}
 8005110:	b00c      	add	sp, #48	; 0x30
 8005112:	bd70      	pop	{r4, r5, r6, pc}
	SX126xWaitOnBusy();
 8005114:	f7ff ff84 	bl	8005020 <SX126xWaitOnBusy>
	dev_data.mode = MODE_STDBY_RC;
 8005118:	f884 5020 	strb.w	r5, [r4, #32]
 800511c:	e7f8      	b.n	8005110 <SX126xWakeup+0x4c>
 800511e:	bf00      	nop
 8005120:	200010a4 	.word	0x200010a4
 8005124:	08016c08 	.word	0x08016c08
 8005128:	080171f0 	.word	0x080171f0
 800512c:	080188b3 	.word	0x080188b3
 8005130:	08016f48 	.word	0x08016f48

08005134 <SX126xGetDio1PinState>:
	return sx126x_get_dio1_pin_state(&dev_data);
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <SX126xGetDio1PinState+0x8>)
 8005136:	f00c bb7e 	b.w	8011836 <sx126x_get_dio1_pin_state>
 800513a:	bf00      	nop
 800513c:	200010a4 	.word	0x200010a4

08005140 <sx126x_is_busy>:
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005140:	4b02      	ldr	r3, [pc, #8]	; (800514c <sx126x_is_busy+0xc>)
 8005142:	6958      	ldr	r0, [r3, #20]
}

bool sx126x_is_busy(struct sx126x_data *dev_data)
{
	return LL_PWR_IsActiveFlag_RFBUSYS();
}
 8005144:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	58000400 	.word	0x58000400

08005150 <sx126x_dio1_irq_enable>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <sx126x_dio1_irq_enable+0x10>)
 8005152:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005156:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}

void sx126x_dio1_irq_enable(struct sx126x_data *dev_data)
{
	NVIC_ClearPendingIRQ(DT_INST_IRQN(0));
	irq_enable(DT_INST_IRQN(0));
 800515a:	2032      	movs	r0, #50	; 0x32
 800515c:	f7fe bd6a 	b.w	8003c34 <arch_irq_enable>
 8005160:	e000e100 	.word	0xe000e100

08005164 <sx126x_variant_init>:
	k_work_submit(&dev_data->dio1_irq_work);
}

int sx126x_variant_init(const struct device *dev)
{
	IRQ_CONNECT(DT_INST_IRQN(0),
 8005164:	2200      	movs	r2, #0
{
 8005166:	b508      	push	{r3, lr}
	IRQ_CONNECT(DT_INST_IRQN(0),
 8005168:	4611      	mov	r1, r2
 800516a:	2032      	movs	r0, #50	; 0x32
 800516c:	f7fe fd86 	bl	8003c7c <z_arm_irq_priority_set>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005170:	4a05      	ldr	r2, [pc, #20]	; (8005188 <sx126x_variant_init+0x24>)
 8005172:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800517a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		    DT_INST_IRQ(0, priority),
		    radio_isr, DEVICE_DT_INST_GET(0), 0);
	LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
	irq_enable(DT_INST_IRQN(0));
 800517e:	2032      	movs	r0, #50	; 0x32
 8005180:	f7fe fd58 	bl	8003c34 <arch_irq_enable>

	return 0;
}
 8005184:	2000      	movs	r0, #0
 8005186:	bd08      	pop	{r3, pc}
 8005188:	58000800 	.word	0x58000800

0800518c <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800518c:	4b07      	ldr	r3, [pc, #28]	; (80051ac <rand1+0x20>)
 800518e:	4908      	ldr	r1, [pc, #32]	; (80051b0 <rand1+0x24>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f243 0039 	movw	r0, #12345	; 0x3039
 8005196:	fb01 0002 	mla	r0, r1, r2, r0
 800519a:	6018      	str	r0, [r3, #0]
 800519c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80051a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a4:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 80051a8:	1ac0      	subs	r0, r0, r3
 80051aa:	4770      	bx	lr
 80051ac:	20000098 	.word	0x20000098
 80051b0:	41c64e6d 	.word	0x41c64e6d

080051b4 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80051b4:	4b01      	ldr	r3, [pc, #4]	; (80051bc <srand1+0x8>)
 80051b6:	6018      	str	r0, [r3, #0]
}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000098 	.word	0x20000098

080051c0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80051c0:	b530      	push	{r4, r5, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80051c2:	b130      	cbz	r0, 80051d2 <Crc32+0x12>
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80051c4:	4d0a      	ldr	r5, [pc, #40]	; (80051f0 <Crc32+0x30>)
 80051c6:	4401      	add	r1, r0
    uint32_t crc = 0xFFFFFFFF;
 80051c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    for( uint16_t i = 0; i < length; ++i )
 80051cc:	4281      	cmp	r1, r0
 80051ce:	d101      	bne.n	80051d4 <Crc32+0x14>
        }
    }

    return ~crc;
 80051d0:	43d8      	mvns	r0, r3
}
 80051d2:	bd30      	pop	{r4, r5, pc}
        crc ^= ( uint32_t )buffer[i];
 80051d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d8:	4053      	eors	r3, r2
 80051da:	2208      	movs	r2, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80051dc:	f343 0400 	sbfx	r4, r3, #0, #1
        for( uint16_t i = 0; i < 8; i++ )
 80051e0:	3a01      	subs	r2, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80051e2:	402c      	ands	r4, r5
        for( uint16_t i = 0; i < 8; i++ )
 80051e4:	b292      	uxth	r2, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80051e6:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 80051ea:	2a00      	cmp	r2, #0
 80051ec:	d1f6      	bne.n	80051dc <Crc32+0x1c>
 80051ee:	e7ed      	b.n	80051cc <Crc32+0xc>
 80051f0:	edb88320 	.word	0xedb88320

080051f4 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80051f4:	4a04      	ldr	r2, [pc, #16]	; (8005208 <TimerInsertNewHeadTimer+0x14>)
 80051f6:	6813      	ldr	r3, [r2, #0]

    if( cur != NULL )
 80051f8:	b10b      	cbz	r3, 80051fe <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
 80051fa:	2100      	movs	r1, #0
 80051fc:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
 80051fe:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8005200:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8005202:	f00c bc10 	b.w	8011a26 <TimerSetTimeout>
 8005206:	bf00      	nop
 8005208:	200010c8 	.word	0x200010c8

0800520c <TimerStart>:
{
 800520c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800520e:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8005210:	a801      	add	r0, sp, #4
 8005212:	f00c fa20 	bl	8011656 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8005216:	b16c      	cbz	r4, 8005234 <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8005218:	4d17      	ldr	r5, [pc, #92]	; (8005278 <TimerStart+0x6c>)
 800521a:	682a      	ldr	r2, [r5, #0]
 800521c:	4613      	mov	r3, r2

    while( cur != NULL )
 800521e:	b973      	cbnz	r3, 800523e <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8005224:	2301      	movs	r3, #1
 8005226:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 8005228:	b96a      	cbnz	r2, 8005246 <TimerStart+0x3a>
        RtcSetTimerContext( );
 800522a:	f7ff fb69 	bl	8004900 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
 800522e:	4620      	mov	r0, r4
 8005230:	f7ff ffe0 	bl	80051f4 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
 8005234:	a801      	add	r0, sp, #4
 8005236:	f00c fa18 	bl	801166a <BoardCriticalSectionEnd>
}
 800523a:	b003      	add	sp, #12
 800523c:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
 800523e:	429c      	cmp	r4, r3
 8005240:	d0f8      	beq.n	8005234 <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	e7eb      	b.n	800521e <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
 8005246:	f7ff fb3b 	bl	80048c0 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
 800524e:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
 8005250:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4290      	cmp	r0, r2
 8005256:	d3ea      	bcc.n	800522e <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
 8005258:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 800525a:	6959      	ldr	r1, [r3, #20]
 800525c:	b911      	cbnz	r1, 8005264 <TimerStart+0x58>
    cur->Next = obj;
 800525e:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
 8005260:	6161      	str	r1, [r4, #20]
 8005262:	e7e7      	b.n	8005234 <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
 8005264:	6811      	ldr	r1, [r2, #0]
 8005266:	4288      	cmp	r0, r1
 8005268:	d902      	bls.n	8005270 <TimerStart+0x64>
            next = next->Next;
 800526a:	4613      	mov	r3, r2
 800526c:	6952      	ldr	r2, [r2, #20]
 800526e:	e7f4      	b.n	800525a <TimerStart+0x4e>
            cur->Next = obj;
 8005270:	615c      	str	r4, [r3, #20]
            obj->Next = next;
 8005272:	6162      	str	r2, [r4, #20]
            return;
 8005274:	e7de      	b.n	8005234 <TimerStart+0x28>
 8005276:	bf00      	nop
 8005278:	200010c8 	.word	0x200010c8

0800527c <TimerIrqHandler>:
{
 800527c:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 800527e:	f7ff fb47 	bl	8004910 <RtcGetTimerContext>
    if( TimerListHead != NULL )
 8005282:	4c1b      	ldr	r4, [pc, #108]	; (80052f0 <TimerIrqHandler+0x74>)
    uint32_t old =  RtcGetTimerContext( );
 8005284:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8005286:	f7ff fb3b 	bl	8004900 <RtcSetTimerContext>
    if( TimerListHead != NULL )
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	b19a      	cbz	r2, 80052b6 <TimerIrqHandler+0x3a>
    uint32_t deltaContext = now - old; // intentional wrap around
 800528e:	1b46      	subs	r6, r0, r5
 8005290:	4611      	mov	r1, r2
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8005292:	6949      	ldr	r1, [r1, #20]
 8005294:	b929      	cbnz	r1, 80052a2 <TimerIrqHandler+0x26>
        TimerListHead = TimerListHead->Next;
 8005296:	6953      	ldr	r3, [r2, #20]
 8005298:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 800529a:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
 800529c:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800529e:	b943      	cbnz	r3, 80052b2 <TimerIrqHandler+0x36>
 80052a0:	e7fe      	b.n	80052a0 <TimerIrqHandler+0x24>
            if( next->Timestamp > deltaContext )
 80052a2:	680b      	ldr	r3, [r1, #0]
 80052a4:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
 80052a6:	bf86      	itte	hi
 80052a8:	195b      	addhi	r3, r3, r5
 80052aa:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
 80052ac:	2300      	movls	r3, #0
 80052ae:	600b      	str	r3, [r1, #0]
 80052b0:	e7ef      	b.n	8005292 <TimerIrqHandler+0x16>
        ExecuteCallBack( cur->Callback, cur->Context );
 80052b2:	6910      	ldr	r0, [r2, #16]
 80052b4:	4798      	blx	r3
        cur->IsStarted = false;
 80052b6:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	b92b      	cbnz	r3, 80052c8 <TimerIrqHandler+0x4c>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	b980      	cbnz	r0, 80052e2 <TimerIrqHandler+0x66>
}
 80052c0:	bd70      	pop	{r4, r5, r6, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
 80052c2:	6918      	ldr	r0, [r3, #16]
 80052c4:	4790      	blx	r2
 80052c6:	e7f7      	b.n	80052b8 <TimerIrqHandler+0x3c>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80052c8:	681d      	ldr	r5, [r3, #0]
 80052ca:	f7ff faf9 	bl	80048c0 <RtcGetTimerElapsedTime>
 80052ce:	4285      	cmp	r5, r0
 80052d0:	d2f4      	bcs.n	80052bc <TimerIrqHandler+0x40>
        cur = TimerListHead;
 80052d2:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 80052d8:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
 80052da:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80052dc:	2a00      	cmp	r2, #0
 80052de:	d1f0      	bne.n	80052c2 <TimerIrqHandler+0x46>
 80052e0:	e7fe      	b.n	80052e0 <TimerIrqHandler+0x64>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80052e2:	7a43      	ldrb	r3, [r0, #9]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1eb      	bne.n	80052c0 <TimerIrqHandler+0x44>
}
 80052e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
 80052ec:	f00c bb9b 	b.w	8011a26 <TimerSetTimeout>
 80052f0:	200010c8 	.word	0x200010c8

080052f4 <TimerStop>:
{
 80052f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
 80052f6:	4d14      	ldr	r5, [pc, #80]	; (8005348 <TimerStop+0x54>)
{
 80052f8:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80052fa:	a801      	add	r0, sp, #4
 80052fc:	f00c f9ab 	bl	8011656 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8005300:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8005302:	b103      	cbz	r3, 8005306 <TimerStop+0x12>
 8005304:	b924      	cbnz	r4, 8005310 <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
 8005306:	a801      	add	r0, sp, #4
 8005308:	f00c f9af 	bl	801166a <BoardCriticalSectionEnd>
}
 800530c:	b003      	add	sp, #12
 800530e:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
 8005310:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
 8005312:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
 8005314:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8005316:	d10d      	bne.n	8005334 <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8005318:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
 800531a:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800531c:	b141      	cbz	r1, 8005330 <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
 800531e:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8005320:	b124      	cbz	r4, 800532c <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
 8005322:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
 8005324:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
 8005326:	f00c fb7e 	bl	8011a26 <TimerSetTimeout>
 800532a:	e7ec      	b.n	8005306 <TimerStop+0x12>
                RtcStopAlarm( );
 800532c:	f7ff fad2 	bl	80048d4 <RtcStopAlarm>
                TimerListHead = NULL;
 8005330:	602c      	str	r4, [r5, #0]
 8005332:	e7e8      	b.n	8005306 <TimerStop+0x12>
                cur = cur->Next;
 8005334:	461a      	mov	r2, r3
 8005336:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0e4      	beq.n	8005306 <TimerStop+0x12>
            if( cur == obj )
 800533c:	429c      	cmp	r4, r3
 800533e:	d1f9      	bne.n	8005334 <TimerStop+0x40>
                if( cur->Next != NULL )
 8005340:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
 8005342:	6153      	str	r3, [r2, #20]
 8005344:	e7df      	b.n	8005306 <TimerStop+0x12>
 8005346:	bf00      	nop
 8005348:	200010c8 	.word	0x200010c8

0800534c <SX126xSetCrcSeed>:
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SX126xSetCrcSeed( uint16_t seed )
{
 800534c:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800534e:	0a03      	lsrs	r3, r0, #8
 8005350:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <SX126xSetCrcSeed+0x24>)
    buf[1] = ( uint8_t )( seed & 0xFF );
 8005356:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SX126xGetPacketType( ) )
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b92b      	cbnz	r3, 800536a <SX126xSetCrcSeed+0x1e>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800535e:	2202      	movs	r2, #2
 8005360:	a901      	add	r1, sp, #4
 8005362:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8005366:	f00c fa02 	bl	801176e <SX126xWriteRegisters>
}
 800536a:	b003      	add	sp, #12
 800536c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005370:	2000234d 	.word	0x2000234d

08005374 <SX126xSetCrcPolynomial>:
{
 8005374:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8005376:	0a03      	lsrs	r3, r0, #8
 8005378:	f88d 3004 	strb.w	r3, [sp, #4]
    return PacketType;
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <SX126xSetCrcPolynomial+0x24>)
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800537e:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SX126xGetPacketType( ) )
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	b92b      	cbnz	r3, 8005392 <SX126xSetCrcPolynomial+0x1e>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8005386:	2202      	movs	r2, #2
 8005388:	a901      	add	r1, sp, #4
 800538a:	f240 60be 	movw	r0, #1726	; 0x6be
 800538e:	f00c f9ee 	bl	801176e <SX126xWriteRegisters>
}
 8005392:	b003      	add	sp, #12
 8005394:	f85d fb04 	ldr.w	pc, [sp], #4
 8005398:	2000234d 	.word	0x2000234d

0800539c <SX126xSetWhiteningSeed>:
{
 800539c:	b510      	push	{r4, lr}
    return PacketType;
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <SX126xSetWhiteningSeed+0x34>)
    switch( SX126xGetPacketType( ) )
 80053a0:	781b      	ldrb	r3, [r3, #0]
{
 80053a2:	4604      	mov	r4, r0
    switch( SX126xGetPacketType( ) )
 80053a4:	b99b      	cbnz	r3, 80053ce <SX126xSetWhiteningSeed+0x32>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80053a6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80053aa:	f00c fa15 	bl	80117d8 <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80053ae:	f3c4 2100 	ubfx	r1, r4, #8, #1
 80053b2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80053b6:	4301      	orrs	r1, r0
 80053b8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80053bc:	f00c f9eb 	bl	8011796 <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 80053c0:	b2e1      	uxtb	r1, r4
 80053c2:	f240 60b9 	movw	r0, #1721	; 0x6b9
}
 80053c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 80053ca:	f00c b9e4 	b.w	8011796 <SX126xWriteRegister>
}
 80053ce:	bd10      	pop	{r4, pc}
 80053d0:	2000234d 	.word	0x2000234d

080053d4 <SX126xSetSleep>:
{
 80053d4:	b513      	push	{r0, r1, r4, lr}
 80053d6:	4604      	mov	r4, r0
    SX126xAntSwOff( );
 80053d8:	f00c f96e 	bl	80116b8 <SX126xAntSwOff>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80053dc:	f004 0307 	and.w	r3, r4, #7
    if( sleepConfig.Fields.WarmStart == 0 )
 80053e0:	f014 0404 	ands.w	r4, r4, #4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80053e4:	f88d 3007 	strb.w	r3, [sp, #7]
        ImageCalibrated = false;
 80053e8:	bf08      	it	eq
 80053ea:	4b08      	ldreq	r3, [pc, #32]	; (800540c <SX126xSetSleep+0x38>)
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80053ec:	f04f 0201 	mov.w	r2, #1
 80053f0:	f10d 0107 	add.w	r1, sp, #7
 80053f4:	f04f 0084 	mov.w	r0, #132	; 0x84
        ImageCalibrated = false;
 80053f8:	bf08      	it	eq
 80053fa:	701c      	strbeq	r4, [r3, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80053fc:	f00c f997 	bl	801172e <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_SLEEP );
 8005400:	2000      	movs	r0, #0
 8005402:	f7ff fdd5 	bl	8004fb0 <SX126xSetOperatingMode>
}
 8005406:	b002      	add	sp, #8
 8005408:	bd10      	pop	{r4, pc}
 800540a:	bf00      	nop
 800540c:	2000234b 	.word	0x2000234b

08005410 <SX126xInit>:
{
 8005410:	b510      	push	{r4, lr}
 8005412:	4604      	mov	r4, r0
    SX126xReset( );
 8005414:	f7ff fdf8 	bl	8005008 <SX126xReset>
    SX126xIoIrqInit( dioIrq );
 8005418:	4620      	mov	r0, r4
 800541a:	f7ff fdef 	bl	8004ffc <SX126xIoIrqInit>
    SX126xWakeup( );
 800541e:	f7ff fe51 	bl	80050c4 <SX126xWakeup>
    SX126xSetStandby( STDBY_RC );
 8005422:	2000      	movs	r0, #0
 8005424:	f00c fb65 	bl	8011af2 <SX126xSetStandby>
    SX126xIoTcxoInit( );
 8005428:	f00c f94b 	bl	80116c2 <SX126xIoTcxoInit>
    SX126xIoRfSwitchInit( );
 800542c:	f00c f955 	bl	80116da <SX126xIoRfSwitchInit>
    ImageCalibrated = false;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <SX126xInit+0x30>)
 8005432:	2200      	movs	r2, #0
}
 8005434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX126xSetOperatingMode( MODE_STDBY_RC );
 8005438:	2001      	movs	r0, #1
    ImageCalibrated = false;
 800543a:	701a      	strb	r2, [r3, #0]
    SX126xSetOperatingMode( MODE_STDBY_RC );
 800543c:	f7ff bdb8 	b.w	8004fb0 <SX126xSetOperatingMode>
 8005440:	2000234b 	.word	0x2000234b

08005444 <SX126xCalibrateImage>:
    if( freq > 900000000 )
 8005444:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <SX126xCalibrateImage+0x64>)
 8005446:	4298      	cmp	r0, r3
{
 8005448:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 800544a:	d90d      	bls.n	8005468 <SX126xCalibrateImage+0x24>
        calFreq[0] = 0xE1;
 800544c:	23e1      	movs	r3, #225	; 0xe1
 800544e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8005452:	23e9      	movs	r3, #233	; 0xe9
        calFreq[1] = 0x6F;
 8005454:	f88d 3005 	strb.w	r3, [sp, #5]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8005458:	2202      	movs	r2, #2
 800545a:	a901      	add	r1, sp, #4
 800545c:	2098      	movs	r0, #152	; 0x98
 800545e:	f00c f966 	bl	801172e <SX126xWriteCommand>
}
 8005462:	b003      	add	sp, #12
 8005464:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8005468:	4b10      	ldr	r3, [pc, #64]	; (80054ac <SX126xCalibrateImage+0x68>)
 800546a:	4298      	cmp	r0, r3
 800546c:	d904      	bls.n	8005478 <SX126xCalibrateImage+0x34>
        calFreq[0] = 0xD7;
 800546e:	23d7      	movs	r3, #215	; 0xd7
 8005470:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8005474:	23db      	movs	r3, #219	; 0xdb
 8005476:	e7ed      	b.n	8005454 <SX126xCalibrateImage+0x10>
    else if( freq > 770000000 )
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <SX126xCalibrateImage+0x6c>)
 800547a:	4298      	cmp	r0, r3
 800547c:	d904      	bls.n	8005488 <SX126xCalibrateImage+0x44>
        calFreq[0] = 0xC1;
 800547e:	23c1      	movs	r3, #193	; 0xc1
 8005480:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8005484:	23c5      	movs	r3, #197	; 0xc5
 8005486:	e7e5      	b.n	8005454 <SX126xCalibrateImage+0x10>
    else if( freq > 460000000 )
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <SX126xCalibrateImage+0x70>)
 800548a:	4298      	cmp	r0, r3
 800548c:	d904      	bls.n	8005498 <SX126xCalibrateImage+0x54>
        calFreq[0] = 0x75;
 800548e:	2375      	movs	r3, #117	; 0x75
 8005490:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8005494:	2381      	movs	r3, #129	; 0x81
 8005496:	e7dd      	b.n	8005454 <SX126xCalibrateImage+0x10>
    else if( freq > 425000000 )
 8005498:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <SX126xCalibrateImage+0x74>)
 800549a:	4298      	cmp	r0, r3
 800549c:	d9dc      	bls.n	8005458 <SX126xCalibrateImage+0x14>
        calFreq[0] = 0x6B;
 800549e:	236b      	movs	r3, #107	; 0x6b
 80054a0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80054a4:	236f      	movs	r3, #111	; 0x6f
 80054a6:	e7d5      	b.n	8005454 <SX126xCalibrateImage+0x10>
 80054a8:	35a4e900 	.word	0x35a4e900
 80054ac:	32a9f880 	.word	0x32a9f880
 80054b0:	2de54480 	.word	0x2de54480
 80054b4:	1b6b0b00 	.word	0x1b6b0b00
 80054b8:	1954fc40 	.word	0x1954fc40

080054bc <SX126xSetRfFrequency>:
{
 80054bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 80054be:	4d14      	ldr	r5, [pc, #80]	; (8005510 <SX126xSetRfFrequency+0x54>)
 80054c0:	782b      	ldrb	r3, [r5, #0]
{
 80054c2:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80054c4:	b91b      	cbnz	r3, 80054ce <SX126xSetRfFrequency+0x12>
        SX126xCalibrateImage( frequency );
 80054c6:	f7ff ffbd 	bl	8005444 <SX126xCalibrateImage>
        ImageCalibrated = true;
 80054ca:	2301      	movs	r3, #1
 80054cc:	702b      	strb	r3, [r5, #0]
    stepsInt = freqInHz / SX126X_PLL_STEP_SCALED;
    stepsFrac = freqInHz - ( stepsInt * SX126X_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80054ce:	f643 5209 	movw	r2, #15625	; 0x3d09
 80054d2:	f641 6384 	movw	r3, #7812	; 0x1e84
 80054d6:	fbb4 f1f2 	udiv	r1, r4, r2
 80054da:	fb02 4411 	mls	r4, r2, r1, r4
 80054de:	eb03 3384 	add.w	r3, r3, r4, lsl #14
 80054e2:	fbb3 f3f2 	udiv	r3, r3, r2
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 80054e6:	eb03 3381 	add.w	r3, r3, r1, lsl #14
    buf[0] = ( uint8_t )( ( freqInPllSteps >> 24 ) & 0xFF );
 80054ea:	0e1a      	lsrs	r2, r3, #24
 80054ec:	f88d 2004 	strb.w	r2, [sp, #4]
    buf[1] = ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF );
 80054f0:	0c1a      	lsrs	r2, r3, #16
 80054f2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[2] = ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF );
 80054f6:	0a1a      	lsrs	r2, r3, #8
 80054f8:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80054fc:	2204      	movs	r2, #4
 80054fe:	eb0d 0102 	add.w	r1, sp, r2
 8005502:	2086      	movs	r0, #134	; 0x86
    buf[3] = ( uint8_t )( freqInPllSteps & 0xFF );
 8005504:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8005508:	f00c f911 	bl	801172e <SX126xWriteCommand>
}
 800550c:	b003      	add	sp, #12
 800550e:	bd30      	pop	{r4, r5, pc}
 8005510:	2000234b 	.word	0x2000234b

08005514 <SX126xSetPacketType>:
{
 8005514:	b507      	push	{r0, r1, r2, lr}
    PacketType = packetType;
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <SX126xSetPacketType+0x1c>)
{
 8005518:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800551c:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800551e:	2201      	movs	r2, #1
 8005520:	f10d 0107 	add.w	r1, sp, #7
 8005524:	208a      	movs	r0, #138	; 0x8a
 8005526:	f00c f902 	bl	801172e <SX126xWriteCommand>
}
 800552a:	b003      	add	sp, #12
 800552c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005530:	2000234d 	.word	0x2000234d

08005534 <SX126xGetPacketType>:
}
 8005534:	4b01      	ldr	r3, [pc, #4]	; (800553c <SX126xGetPacketType+0x8>)
 8005536:	7818      	ldrb	r0, [r3, #0]
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	2000234d 	.word	0x2000234d

08005540 <SX126xSetModulationParams>:
{
 8005540:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8005542:	4a28      	ldr	r2, [pc, #160]	; (80055e4 <SX126xSetModulationParams+0xa4>)
{
 8005544:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8005546:	6851      	ldr	r1, [r2, #4]
 8005548:	6810      	ldr	r0, [r2, #0]
 800554a:	466b      	mov	r3, sp
 800554c:	c303      	stmia	r3!, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800554e:	4b26      	ldr	r3, [pc, #152]	; (80055e8 <SX126xSetModulationParams+0xa8>)
 8005550:	7820      	ldrb	r0, [r4, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	4283      	cmp	r3, r0
 8005556:	d001      	beq.n	800555c <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 8005558:	f7ff ffdc 	bl	8005514 <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 800555c:	7823      	ldrb	r3, [r4, #0]
 800555e:	b11b      	cbz	r3, 8005568 <SX126xSetModulationParams+0x28>
 8005560:	2b01      	cmp	r3, #1
 8005562:	d030      	beq.n	80055c6 <SX126xSetModulationParams+0x86>
}
 8005564:	b002      	add	sp, #8
 8005566:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t )( 32 * SX126X_XTAL_FREQ / modulationParams->Params.Gfsk.BitRate );
 8005568:	6862      	ldr	r2, [r4, #4]
 800556a:	4b20      	ldr	r3, [pc, #128]	; (80055ec <SX126xSetModulationParams+0xac>)
 800556c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8005570:	0c1a      	lsrs	r2, r3, #16
 8005572:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005576:	0a1a      	lsrs	r2, r3, #8
 8005578:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800557c:	f88d 3002 	strb.w	r3, [sp, #2]
        tempVal = SX126xConvertFreqInHzToPllStep( modulationParams->Params.Gfsk.Fdev );
 8005580:	68a2      	ldr	r2, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8005582:	7b23      	ldrb	r3, [r4, #12]
 8005584:	f88d 3003 	strb.w	r3, [sp, #3]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8005588:	f643 5109 	movw	r1, #15625	; 0x3d09
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800558c:	7b63      	ldrb	r3, [r4, #13]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800558e:	fbb2 f0f1 	udiv	r0, r2, r1
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8005592:	f88d 3004 	strb.w	r3, [sp, #4]
           ( ( ( stepsFrac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 8005596:	fb01 2210 	mls	r2, r1, r0, r2
 800559a:	f641 6384 	movw	r3, #7812	; 0x1e84
 800559e:	eb03 3382 	add.w	r3, r3, r2, lsl #14
 80055a2:	fbb3 f3f1 	udiv	r3, r3, r1
    return ( stepsInt << SX126X_PLL_STEP_SHIFT_AMOUNT ) + 
 80055a6:	eb03 3380 	add.w	r3, r3, r0, lsl #14
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80055aa:	0c1a      	lsrs	r2, r3, #16
 80055ac:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80055b0:	0a1a      	lsrs	r2, r3, #8
 80055b2:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80055b6:	f88d 3007 	strb.w	r3, [sp, #7]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80055ba:	2208      	movs	r2, #8
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80055bc:	4669      	mov	r1, sp
 80055be:	208b      	movs	r0, #139	; 0x8b
 80055c0:	f00c f8b5 	bl	801172e <SX126xWriteCommand>
        break;
 80055c4:	e7ce      	b.n	8005564 <SX126xSetModulationParams+0x24>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80055c6:	7c23      	ldrb	r3, [r4, #16]
 80055c8:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80055cc:	7c63      	ldrb	r3, [r4, #17]
 80055ce:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80055d2:	7ca3      	ldrb	r3, [r4, #18]
 80055d4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80055d8:	7ce3      	ldrb	r3, [r4, #19]
 80055da:	f88d 3003 	strb.w	r3, [sp, #3]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80055de:	2204      	movs	r2, #4
 80055e0:	e7ec      	b.n	80055bc <SX126xSetModulationParams+0x7c>
 80055e2:	bf00      	nop
 80055e4:	0801707c 	.word	0x0801707c
 80055e8:	2000234d 	.word	0x2000234d
 80055ec:	3d090000 	.word	0x3d090000

080055f0 <SX126xSetPacketParams>:
{
 80055f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80055f2:	4a31      	ldr	r2, [pc, #196]	; (80056b8 <SX126xSetPacketParams+0xc8>)
{
 80055f4:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80055f6:	68d1      	ldr	r1, [r2, #12]
 80055f8:	6890      	ldr	r0, [r2, #8]
 80055fa:	7c12      	ldrb	r2, [r2, #16]
 80055fc:	ab01      	add	r3, sp, #4
 80055fe:	c303      	stmia	r3!, {r0, r1}
 8005600:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8005602:	4b2e      	ldr	r3, [pc, #184]	; (80056bc <SX126xSetPacketParams+0xcc>)
 8005604:	7820      	ldrb	r0, [r4, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	4283      	cmp	r3, r0
 800560a:	d001      	beq.n	8005610 <SX126xSetPacketParams+0x20>
        SX126xSetPacketType( packetParams->PacketType );
 800560c:	f7ff ff82 	bl	8005514 <SX126xSetPacketType>
    switch( packetParams->PacketType )
 8005610:	7823      	ldrb	r3, [r4, #0]
 8005612:	b11b      	cbz	r3, 800561c <SX126xSetPacketParams+0x2c>
 8005614:	2b01      	cmp	r3, #1
 8005616:	d039      	beq.n	800568c <SX126xSetPacketParams+0x9c>
}
 8005618:	b004      	add	sp, #16
 800561a:	bd10      	pop	{r4, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800561c:	7a63      	ldrb	r3, [r4, #9]
 800561e:	2bf1      	cmp	r3, #241	; 0xf1
 8005620:	d128      	bne.n	8005674 <SX126xSetPacketParams+0x84>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 8005622:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005626:	f7ff fe91 	bl	800534c <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800562a:	f248 0005 	movw	r0, #32773	; 0x8005
 800562e:	f7ff fea1 	bl	8005374 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8005632:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8005634:	8862      	ldrh	r2, [r4, #2]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8005636:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800563a:	0a11      	lsrs	r1, r2, #8
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800563c:	7922      	ldrb	r2, [r4, #4]
 800563e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8005642:	7962      	ldrb	r2, [r4, #5]
 8005644:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8005648:	79a2      	ldrb	r2, [r4, #6]
 800564a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800564e:	79e2      	ldrb	r2, [r4, #7]
 8005650:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[7] = crcVal;
 8005654:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8005658:	7a22      	ldrb	r2, [r4, #8]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800565a:	7aa3      	ldrb	r3, [r4, #10]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800565c:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8005660:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8005664:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8005668:	2209      	movs	r2, #9
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800566a:	a901      	add	r1, sp, #4
 800566c:	208c      	movs	r0, #140	; 0x8c
 800566e:	f00c f85e 	bl	801172e <SX126xWriteCommand>
 8005672:	e7d1      	b.n	8005618 <SX126xSetPacketParams+0x28>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8005674:	2bf2      	cmp	r3, #242	; 0xf2
 8005676:	d1dd      	bne.n	8005634 <SX126xSetPacketParams+0x44>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 8005678:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800567c:	f7ff fe66 	bl	800534c <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8005680:	f241 0021 	movw	r0, #4129	; 0x1021
 8005684:	f7ff fe76 	bl	8005374 <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8005688:	2306      	movs	r3, #6
 800568a:	e7d3      	b.n	8005634 <SX126xSetPacketParams+0x44>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800568c:	89a3      	ldrh	r3, [r4, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800568e:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8005692:	0a1a      	lsrs	r2, r3, #8
 8005694:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8005698:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <SX126xSetPacketParams+0xd0>)
 800569a:	7ba3      	ldrb	r3, [r4, #14]
 800569c:	7013      	strb	r3, [r2, #0]
 800569e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80056a2:	7be3      	ldrb	r3, [r4, #15]
 80056a4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80056a8:	7c23      	ldrb	r3, [r4, #16]
 80056aa:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80056ae:	7c63      	ldrb	r3, [r4, #17]
 80056b0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80056b4:	2206      	movs	r2, #6
        break;
 80056b6:	e7d8      	b.n	800566a <SX126xSetPacketParams+0x7a>
 80056b8:	0801707c 	.word	0x0801707c
 80056bc:	2000234d 	.word	0x2000234d
 80056c0:	2000234c 	.word	0x2000234c

080056c4 <SX126xGetRxBufferStatus>:
{
 80056c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c6:	4604      	mov	r4, r0
 80056c8:	460d      	mov	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80056ca:	2202      	movs	r2, #2
 80056cc:	a901      	add	r1, sp, #4
 80056ce:	2013      	movs	r0, #19
 80056d0:	f00c f83b 	bl	801174a <SX126xReadCommand>
    return PacketType;
 80056d4:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <SX126xGetRxBufferStatus+0x3c>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10d      	bne.n	80056f8 <SX126xGetRxBufferStatus+0x34>
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <SX126xGetRxBufferStatus+0x40>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d109      	bne.n	80056f8 <SX126xGetRxBufferStatus+0x34>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 80056e4:	f240 7002 	movw	r0, #1794	; 0x702
 80056e8:	f00c f876 	bl	80117d8 <SX126xReadRegister>
 80056ec:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 80056ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80056f2:	702b      	strb	r3, [r5, #0]
}
 80056f4:	b003      	add	sp, #12
 80056f6:	bd30      	pop	{r4, r5, pc}
        *payloadLength = status[0];
 80056f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056fc:	7023      	strb	r3, [r4, #0]
 80056fe:	e7f6      	b.n	80056ee <SX126xGetRxBufferStatus+0x2a>
 8005700:	2000234d 	.word	0x2000234d
 8005704:	2000234c 	.word	0x2000234c

08005708 <SX126xGetPacketStatus>:
{
 8005708:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800570a:	2203      	movs	r2, #3
{
 800570c:	4604      	mov	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800570e:	a901      	add	r1, sp, #4
 8005710:	2014      	movs	r0, #20
 8005712:	f00c f81a 	bl	801174a <SX126xReadCommand>
    return PacketType;
 8005716:	4b18      	ldr	r3, [pc, #96]	; (8005778 <SX126xGetPacketStatus+0x70>)
 8005718:	781a      	ldrb	r2, [r3, #0]
    pktStatus->packetType = SX126xGetPacketType( );
 800571a:	7022      	strb	r2, [r4, #0]
    switch( pktStatus->packetType )
 800571c:	b14a      	cbz	r2, 8005732 <SX126xGetPacketStatus+0x2a>
 800571e:	2a01      	cmp	r2, #1
 8005720:	d017      	beq.n	8005752 <SX126xGetPacketStatus+0x4a>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8005722:	2214      	movs	r2, #20
 8005724:	2100      	movs	r1, #0
 8005726:	4620      	mov	r0, r4
 8005728:	f010 ff41 	bl	80165ae <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800572c:	230f      	movs	r3, #15
 800572e:	7023      	strb	r3, [r4, #0]
}
 8005730:	e00d      	b.n	800574e <SX126xGetPacketStatus+0x46>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8005732:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005736:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8005738:	f89d 3005 	ldrb.w	r3, [sp, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800573c:	60a2      	str	r2, [r4, #8]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800573e:	425b      	negs	r3, r3
 8005740:	105b      	asrs	r3, r3, #1
 8005742:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8005744:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005748:	425b      	negs	r3, r3
 800574a:	105b      	asrs	r3, r3, #1
 800574c:	7163      	strb	r3, [r4, #5]
}
 800574e:	b002      	add	sp, #8
 8005750:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8005752:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005756:	425b      	negs	r3, r3
 8005758:	105b      	asrs	r3, r3, #1
 800575a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800575c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8005760:	3302      	adds	r3, #2
 8005762:	109b      	asrs	r3, r3, #2
 8005764:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8005766:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800576a:	425b      	negs	r3, r3
 800576c:	105b      	asrs	r3, r3, #1
 800576e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8005770:	4b02      	ldr	r3, [pc, #8]	; (800577c <SX126xGetPacketStatus+0x74>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6123      	str	r3, [r4, #16]
            break;
 8005776:	e7ea      	b.n	800574e <SX126xGetPacketStatus+0x46>
 8005778:	2000234d 	.word	0x2000234d
 800577c:	200010cc 	.word	0x200010cc

08005780 <RadioOnTxTimeoutIrq>:
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <RadioOnTxTimeoutIrq+0x10>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	b113      	cbz	r3, 800578c <RadioOnTxTimeoutIrq+0xc>
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	b103      	cbz	r3, 800578c <RadioOnTxTimeoutIrq+0xc>
    {
        RadioEvents->TxTimeout( );
 800578a:	4718      	bx	r3
    }
}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	200010d0 	.word	0x200010d0

08005794 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <RadioOnRxTimeoutIrq+0x10>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	b113      	cbz	r3, 80057a0 <RadioOnRxTimeoutIrq+0xc>
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	b103      	cbz	r3, 80057a0 <RadioOnRxTimeoutIrq+0xc>
    {
        RadioEvents->RxTimeout( );
 800579e:	4718      	bx	r3
    }
}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	200010d0 	.word	0x200010d0

080057a8 <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
    IrqFired = true;
 80057a8:	4b01      	ldr	r3, [pc, #4]	; (80057b0 <RadioOnDioIrq+0x8>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
}
 80057ae:	4770      	bx	lr
 80057b0:	2000234e 	.word	0x2000234e

080057b4 <RadioGetStatus>:
{
 80057b4:	b508      	push	{r3, lr}
    switch( SX126xGetOperatingMode( ) )
 80057b6:	f7ff fbf5 	bl	8004fa4 <SX126xGetOperatingMode>
 80057ba:	3804      	subs	r0, #4
 80057bc:	b2c0      	uxtb	r0, r0
 80057be:	2803      	cmp	r0, #3
 80057c0:	bf96      	itet	ls
 80057c2:	4b02      	ldrls	r3, [pc, #8]	; (80057cc <RadioGetStatus+0x18>)
 80057c4:	2000      	movhi	r0, #0
 80057c6:	5c18      	ldrbls	r0, [r3, r0]
}
 80057c8:	bd08      	pop	{r3, pc}
 80057ca:	bf00      	nop
 80057cc:	080188e5 	.word	0x080188e5

080057d0 <RadioSend>:
{
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	460c      	mov	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80057d4:	2300      	movs	r3, #0
 80057d6:	f240 2101 	movw	r1, #513	; 0x201
 80057da:	461a      	mov	r2, r3
{
 80057dc:	4605      	mov	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80057de:	4608      	mov	r0, r1
 80057e0:	f00c fab3 	bl	8011d4a <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 80057e4:	f7ff fea6 	bl	8005534 <SX126xGetPacketType>
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <RadioSend+0x4c>)
 80057ea:	2801      	cmp	r0, #1
    SX126xSetPacketParams( &SX126x.PacketParams );
 80057ec:	480c      	ldr	r0, [pc, #48]	; (8005820 <RadioSend+0x50>)
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 80057ee:	bf0c      	ite	eq
 80057f0:	f883 40c7 	strbeq.w	r4, [r3, #199]	; 0xc7
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 80057f4:	f883 40c0 	strbne.w	r4, [r3, #192]	; 0xc0
    SX126xSetPacketParams( &SX126x.PacketParams );
 80057f8:	f7ff fefa 	bl	80055f0 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 80057fc:	4621      	mov	r1, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	2200      	movs	r2, #0
 8005802:	f00c f99e 	bl	8011b42 <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <RadioSend+0x54>)
 8005808:	4807      	ldr	r0, [pc, #28]	; (8005828 <RadioSend+0x58>)
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	f00c f929 	bl	8011a62 <TimerSetValue>
}
 8005810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TimerStart( &TxTimeoutTimer );
 8005814:	4804      	ldr	r0, [pc, #16]	; (8005828 <RadioSend+0x58>)
 8005816:	f7ff bcf9 	b.w	800520c <TimerStart>
 800581a:	bf00      	nop
 800581c:	20001104 	.word	0x20001104
 8005820:	200011bc 	.word	0x200011bc
 8005824:	200011f8 	.word	0x200011f8
 8005828:	200011fc 	.word	0x200011fc

0800582c <RadioSetTxContinuousWave>:
{
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	460d      	mov	r5, r1
 8005830:	4614      	mov	r4, r2
    SX126xSetRfFrequency( freq );
 8005832:	f7ff fe43 	bl	80054bc <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 8005836:	4628      	mov	r0, r5
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005838:	4d07      	ldr	r5, [pc, #28]	; (8005858 <RadioSetTxContinuousWave+0x2c>)
    SX126xSetRfTxPower( power );
 800583a:	f00b ff51 	bl	80116e0 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 800583e:	f00c fa16 	bl	8011c6e <SX126xSetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005842:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005846:	4628      	mov	r0, r5
 8005848:	4361      	muls	r1, r4
 800584a:	f00c f90a 	bl	8011a62 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 800584e:	4628      	mov	r0, r5
}
 8005850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    TimerStart( &TxTimeoutTimer );
 8005854:	f7ff bcda 	b.w	800520c <TimerStart>
 8005858:	200011fc 	.word	0x200011fc

0800585c <RadioGetFskBandwidthRegValue>:
{
 800585c:	b510      	push	{r4, lr}
    if( bandwidth == 0 )
 800585e:	b190      	cbz	r0, 8005886 <RadioGetFskBandwidthRegValue+0x2a>
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <RadioGetFskBandwidthRegValue+0x30>)
 8005862:	2201      	movs	r2, #1
 8005864:	4619      	mov	r1, r3
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8005866:	681c      	ldr	r4, [r3, #0]
 8005868:	42a0      	cmp	r0, r4
 800586a:	d306      	bcc.n	800587a <RadioGetFskBandwidthRegValue+0x1e>
 800586c:	689c      	ldr	r4, [r3, #8]
 800586e:	42a0      	cmp	r0, r4
 8005870:	d203      	bcs.n	800587a <RadioGetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i+1].RegValue;
 8005872:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005876:	7910      	ldrb	r0, [r2, #4]
}
 8005878:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800587a:	3201      	adds	r2, #1
 800587c:	2a16      	cmp	r2, #22
 800587e:	f103 0308 	add.w	r3, r3, #8
 8005882:	d1f0      	bne.n	8005866 <RadioGetFskBandwidthRegValue+0xa>
    while( 1 );
 8005884:	e7fe      	b.n	8005884 <RadioGetFskBandwidthRegValue+0x28>
        return( 0x1F );
 8005886:	201f      	movs	r0, #31
 8005888:	e7f6      	b.n	8005878 <RadioGetFskBandwidthRegValue+0x1c>
 800588a:	bf00      	nop
 800588c:	08017250 	.word	0x08017250

08005890 <RadioSetMaxPayloadLength>:
    if( modem == MODEM_LORA )
 8005890:	2801      	cmp	r0, #1
 8005892:	4809      	ldr	r0, [pc, #36]	; (80058b8 <RadioSetMaxPayloadLength+0x28>)
 8005894:	d106      	bne.n	80058a4 <RadioSetMaxPayloadLength+0x14>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <RadioSetMaxPayloadLength+0x2c>)
 8005898:	f880 10c7 	strb.w	r1, [r0, #199]	; 0xc7
 800589c:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 800589e:	30b8      	adds	r0, #184	; 0xb8
 80058a0:	f7ff bea6 	b.w	80055f0 <SX126xSetPacketParams>
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80058a4:	f890 30bf 	ldrb.w	r3, [r0, #191]	; 0xbf
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d104      	bne.n	80058b6 <RadioSetMaxPayloadLength+0x26>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <RadioSetMaxPayloadLength+0x2c>)
 80058ae:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
 80058b2:	7019      	strb	r1, [r3, #0]
 80058b4:	e7f3      	b.n	800589e <RadioSetMaxPayloadLength+0xe>
}
 80058b6:	4770      	bx	lr
 80058b8:	20001104 	.word	0x20001104
 80058bc:	200002ac 	.word	0x200002ac

080058c0 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80058c0:	2300      	movs	r3, #0
 80058c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
 80058c6:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80058c8:	461a      	mov	r2, r3
{
 80058ca:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 80058cc:	4608      	mov	r0, r1
 80058ce:	f00c fa3c 	bl	8011d4a <SX126xSetDioIrqParams>
    if( timeout != 0 )
 80058d2:	b134      	cbz	r4, 80058e2 <RadioRx+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80058d4:	4809      	ldr	r0, [pc, #36]	; (80058fc <RadioRx+0x3c>)
 80058d6:	4621      	mov	r1, r4
 80058d8:	f00c f8c3 	bl	8011a62 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80058dc:	4807      	ldr	r0, [pc, #28]	; (80058fc <RadioRx+0x3c>)
 80058de:	f7ff fc95 	bl	800520c <TimerStart>
    if( RxContinuous == true )
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <RadioRx+0x40>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	b12b      	cbz	r3, 80058f4 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 80058e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
}
 80058ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRx( RxTimeout << 6 );
 80058f0:	f00c b930 	b.w	8011b54 <SX126xSetRx>
 80058f4:	4b03      	ldr	r3, [pc, #12]	; (8005904 <RadioRx+0x44>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	0180      	lsls	r0, r0, #6
 80058fa:	e7f7      	b.n	80058ec <RadioRx+0x2c>
 80058fc:	200010ec 	.word	0x200010ec
 8005900:	20002450 	.word	0x20002450
 8005904:	200010e8 	.word	0x200010e8

08005908 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8005908:	2300      	movs	r3, #0
 800590a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
 800590e:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8005910:	461a      	mov	r2, r3
{
 8005912:	4604      	mov	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 8005914:	4608      	mov	r0, r1
 8005916:	f00c fa18 	bl	8011d4a <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800591a:	b134      	cbz	r4, 800592a <RadioRxBoosted+0x22>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800591c:	4809      	ldr	r0, [pc, #36]	; (8005944 <RadioRxBoosted+0x3c>)
 800591e:	4621      	mov	r1, r4
 8005920:	f00c f89f 	bl	8011a62 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8005924:	4807      	ldr	r0, [pc, #28]	; (8005944 <RadioRxBoosted+0x3c>)
 8005926:	f7ff fc71 	bl	800520c <TimerStart>
    if( RxContinuous == true )
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <RadioRxBoosted+0x40>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b12b      	cbz	r3, 800593c <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005930:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
}
 8005934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xSetRxBoosted( RxTimeout << 6 );
 8005938:	f00c b959 	b.w	8011bee <SX126xSetRxBoosted>
 800593c:	4b03      	ldr	r3, [pc, #12]	; (800594c <RadioRxBoosted+0x44>)
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	0180      	lsls	r0, r0, #6
 8005942:	e7f7      	b.n	8005934 <RadioRxBoosted+0x2c>
 8005944:	200010ec 	.word	0x200010ec
 8005948:	20002450 	.word	0x20002450
 800594c:	200010e8 	.word	0x200010e8

08005950 <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 8005950:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    CRITICAL_SECTION_BEGIN( );
    // Clear IRQ flag
    const bool isIrqFired = IrqFired;
 8005952:	4d57      	ldr	r5, [pc, #348]	; (8005ab0 <RadioIrqProcess+0x160>)
    CRITICAL_SECTION_BEGIN( );
 8005954:	a802      	add	r0, sp, #8
 8005956:	f00b fe7e 	bl	8011656 <BoardCriticalSectionBegin>
    const bool isIrqFired = IrqFired;
 800595a:	782c      	ldrb	r4, [r5, #0]
    IrqFired = false;
 800595c:	2300      	movs	r3, #0
    CRITICAL_SECTION_END( );
 800595e:	a802      	add	r0, sp, #8
    IrqFired = false;
 8005960:	702b      	strb	r3, [r5, #0]
    CRITICAL_SECTION_END( );
 8005962:	f00b fe82 	bl	801166a <BoardCriticalSectionEnd>

    if( isIrqFired == true )
 8005966:	2c00      	cmp	r4, #0
 8005968:	d061      	beq.n	8005a2e <RadioIrqProcess+0xde>
    {
        uint16_t irqRegs = SX126xGetIrqStatus( );
 800596a:	f00c fa0a 	bl	8011d82 <SX126xGetIrqStatus>
 800596e:	4604      	mov	r4, r0
        SX126xClearIrqStatus( irqRegs );
 8005970:	f00c faa7 	bl	8011ec2 <SX126xClearIrqStatus>

        // Check if DIO1 pin is High. If it is the case revert IrqFired to true
        CRITICAL_SECTION_BEGIN( );
 8005974:	a803      	add	r0, sp, #12
 8005976:	f00b fe6e 	bl	8011656 <BoardCriticalSectionBegin>
        if( SX126xGetDio1PinState( ) == 1 )
 800597a:	f7ff fbdb 	bl	8005134 <SX126xGetDio1PinState>
 800597e:	2801      	cmp	r0, #1
        {
            IrqFired = true;
 8005980:	bf08      	it	eq
 8005982:	7028      	strbeq	r0, [r5, #0]
        }
        CRITICAL_SECTION_END( );
 8005984:	a803      	add	r0, sp, #12
 8005986:	f00b fe70 	bl	801166a <BoardCriticalSectionEnd>

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800598a:	07e5      	lsls	r5, r4, #31
 800598c:	d50b      	bpl.n	80059a6 <RadioIrqProcess+0x56>
        {
            TimerStop( &TxTimeoutTimer );
 800598e:	4849      	ldr	r0, [pc, #292]	; (8005ab4 <RadioIrqProcess+0x164>)
 8005990:	f7ff fcb0 	bl	80052f4 <TimerStop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 8005994:	2001      	movs	r0, #1
 8005996:	f7ff fb0b 	bl	8004fb0 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800599a:	4b47      	ldr	r3, [pc, #284]	; (8005ab8 <RadioIrqProcess+0x168>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	b113      	cbz	r3, 80059a6 <RadioIrqProcess+0x56>
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <RadioIrqProcess+0x56>
            {
                RadioEvents->TxDone( );
 80059a4:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 80059a6:	07a0      	lsls	r0, r4, #30
 80059a8:	d511      	bpl.n	80059ce <RadioIrqProcess+0x7e>
        {
            TimerStop( &RxTimeoutTimer );
 80059aa:	4844      	ldr	r0, [pc, #272]	; (8005abc <RadioIrqProcess+0x16c>)
 80059ac:	4e42      	ldr	r6, [pc, #264]	; (8005ab8 <RadioIrqProcess+0x168>)
 80059ae:	f7ff fca1 	bl	80052f4 <TimerStop>

            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 80059b2:	f014 0f40 	tst.w	r4, #64	; 0x40
 80059b6:	4b42      	ldr	r3, [pc, #264]	; (8005ac0 <RadioIrqProcess+0x170>)
 80059b8:	d03b      	beq.n	8005a32 <RadioIrqProcess+0xe2>
            {
                if( RxContinuous == false )
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b913      	cbnz	r3, 80059c4 <RadioIrqProcess+0x74>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 80059be:	2001      	movs	r0, #1
 80059c0:	f7ff faf6 	bl	8004fb0 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80059c4:	6833      	ldr	r3, [r6, #0]
 80059c6:	b113      	cbz	r3, 80059ce <RadioIrqProcess+0x7e>
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	b103      	cbz	r3, 80059ce <RadioIrqProcess+0x7e>
                {
                    RadioEvents->RxError( );
 80059cc:	4798      	blx	r3
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 80059ce:	0621      	lsls	r1, r4, #24
 80059d0:	d50a      	bpl.n	80059e8 <RadioIrqProcess+0x98>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 80059d2:	2001      	movs	r0, #1
 80059d4:	f7ff faec 	bl	8004fb0 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80059d8:	4b37      	ldr	r3, [pc, #220]	; (8005ab8 <RadioIrqProcess+0x168>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	b123      	cbz	r3, 80059e8 <RadioIrqProcess+0x98>
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	b113      	cbz	r3, 80059e8 <RadioIrqProcess+0x98>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 80059e2:	f3c4 2000 	ubfx	r0, r4, #8, #1
 80059e6:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80059e8:	05a2      	lsls	r2, r4, #22
 80059ea:	d50f      	bpl.n	8005a0c <RadioIrqProcess+0xbc>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 80059ec:	f7ff fada 	bl	8004fa4 <SX126xGetOperatingMode>
 80059f0:	2804      	cmp	r0, #4
 80059f2:	d14c      	bne.n	8005a8e <RadioIrqProcess+0x13e>
            {
                TimerStop( &TxTimeoutTimer );
 80059f4:	482f      	ldr	r0, [pc, #188]	; (8005ab4 <RadioIrqProcess+0x164>)
 80059f6:	f7ff fc7d 	bl	80052f4 <TimerStop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 80059fa:	2001      	movs	r0, #1
 80059fc:	f7ff fad8 	bl	8004fb0 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005a00:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <RadioIrqProcess+0x168>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	b113      	cbz	r3, 8005a0c <RadioIrqProcess+0xbc>
 8005a06:	685b      	ldr	r3, [r3, #4]
            else if( SX126xGetOperatingMode( ) == MODE_RX )
            {
                TimerStop( &RxTimeoutTimer );
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005a08:	b103      	cbz	r3, 8005a0c <RadioIrqProcess+0xbc>
                {
                    RadioEvents->RxTimeout( );
 8005a0a:	4798      	blx	r3
        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8005a0c:	06a3      	lsls	r3, r4, #26
 8005a0e:	d50e      	bpl.n	8005a2e <RadioIrqProcess+0xde>
        {
            TimerStop( &RxTimeoutTimer );
 8005a10:	482a      	ldr	r0, [pc, #168]	; (8005abc <RadioIrqProcess+0x16c>)
 8005a12:	f7ff fc6f 	bl	80052f4 <TimerStop>
            if( RxContinuous == false )
 8005a16:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <RadioIrqProcess+0x170>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	b913      	cbnz	r3, 8005a22 <RadioIrqProcess+0xd2>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	f7ff fac7 	bl	8004fb0 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005a22:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <RadioIrqProcess+0x168>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	b113      	cbz	r3, 8005a2e <RadioIrqProcess+0xde>
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	b103      	cbz	r3, 8005a2e <RadioIrqProcess+0xde>
            {
                RadioEvents->RxTimeout( );
 8005a2c:	4798      	blx	r3
            }
        }
    }
}
 8005a2e:	b004      	add	sp, #16
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
                if( RxContinuous == false )
 8005a32:	781d      	ldrb	r5, [r3, #0]
 8005a34:	b995      	cbnz	r5, 8005a5c <RadioIrqProcess+0x10c>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 8005a36:	2001      	movs	r0, #1
 8005a38:	f7ff faba 	bl	8004fb0 <SX126xSetOperatingMode>
                    SX126xWriteRegister( REG_RTC_CTRL, 0x00 );
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f640 1002 	movw	r0, #2306	; 0x902
 8005a42:	f00b fea8 	bl	8011796 <SX126xWriteRegister>
                    SX126xWriteRegister( REG_EVT_CLR, SX126xReadRegister( REG_EVT_CLR ) | ( 1 << 1 ) );
 8005a46:	f640 1044 	movw	r0, #2372	; 0x944
 8005a4a:	f00b fec5 	bl	80117d8 <SX126xReadRegister>
 8005a4e:	f040 0102 	orr.w	r1, r0, #2
 8005a52:	b2c9      	uxtb	r1, r1
 8005a54:	f640 1044 	movw	r0, #2372	; 0x944
 8005a58:	f00b fe9d 	bl	8011796 <SX126xWriteRegister>
                SX126xGetPacketStatus( &RadioPktStatus );
 8005a5c:	4d19      	ldr	r5, [pc, #100]	; (8005ac4 <RadioIrqProcess+0x174>)
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 8005a5e:	481a      	ldr	r0, [pc, #104]	; (8005ac8 <RadioIrqProcess+0x178>)
 8005a60:	22ff      	movs	r2, #255	; 0xff
 8005a62:	f10d 0107 	add.w	r1, sp, #7
 8005a66:	f00c fa13 	bl	8011e90 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f7ff fe4c 	bl	8005708 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005a70:	6833      	ldr	r3, [r6, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0ab      	beq.n	80059ce <RadioIrqProcess+0x7e>
 8005a76:	689e      	ldr	r6, [r3, #8]
 8005a78:	2e00      	cmp	r6, #0
 8005a7a:	d0a8      	beq.n	80059ce <RadioIrqProcess+0x7e>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 8005a7c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8005a80:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8005a84:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005a88:	480f      	ldr	r0, [pc, #60]	; (8005ac8 <RadioIrqProcess+0x178>)
 8005a8a:	47b0      	blx	r6
 8005a8c:	e79f      	b.n	80059ce <RadioIrqProcess+0x7e>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 8005a8e:	f7ff fa89 	bl	8004fa4 <SX126xGetOperatingMode>
 8005a92:	2805      	cmp	r0, #5
 8005a94:	d1ba      	bne.n	8005a0c <RadioIrqProcess+0xbc>
                TimerStop( &RxTimeoutTimer );
 8005a96:	4809      	ldr	r0, [pc, #36]	; (8005abc <RadioIrqProcess+0x16c>)
 8005a98:	f7ff fc2c 	bl	80052f4 <TimerStop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f7ff fa87 	bl	8004fb0 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <RadioIrqProcess+0x168>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0b0      	beq.n	8005a0c <RadioIrqProcess+0xbc>
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	e7ac      	b.n	8005a08 <RadioIrqProcess+0xb8>
 8005aae:	bf00      	nop
 8005ab0:	2000234e 	.word	0x2000234e
 8005ab4:	200011fc 	.word	0x200011fc
 8005ab8:	200010d0 	.word	0x200010d0
 8005abc:	200010ec 	.word	0x200010ec
 8005ac0:	20002450 	.word	0x20002450
 8005ac4:	200010d4 	.word	0x200010d4
 8005ac8:	20002351 	.word	0x20002351

08005acc <RadioTimeOnAir>:
{
 8005acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ace:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8005ad2:	f89d c018 	ldrb.w	ip, [sp, #24]
 8005ad6:	f89d 701c 	ldrb.w	r7, [sp, #28]
 8005ada:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
 8005ade:	b140      	cbz	r0, 8005af2 <RadioTimeOnAir+0x26>
 8005ae0:	2801      	cmp	r0, #1
 8005ae2:	d019      	beq.n	8005b18 <RadioTimeOnAir+0x4c>
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 8005ae8:	18a0      	adds	r0, r4, r2
 8005aea:	3801      	subs	r0, #1
 8005aec:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8005af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005af2:	f1bc 0f00 	cmp.w	ip, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2308      	moveq	r3, #8
 8005afa:	2300      	movne	r3, #0
               ( ( crcOn == true ) ? 2 : 0 ) 
 8005afc:	2d00      	cmp	r5, #0
    return ( preambleLen << 3 ) +
 8005afe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
               ( ( crcOn == true ) ? 2 : 0 ) 
 8005b02:	bf14      	ite	ne
 8005b04:	2002      	movne	r0, #2
 8005b06:	2000      	moveq	r0, #0
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005b08:	3418      	adds	r4, #24
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 8005b0a:	4438      	add	r0, r7
             ( syncWordLength << 3 ) +
 8005b0c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005b10:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005b14:	4344      	muls	r4, r0
        break;
 8005b16:	e7e7      	b.n	8005ae8 <RadioTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005b18:	1f50      	subs	r0, r2, #5
 8005b1a:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 8005b1c:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005b20:	d802      	bhi.n	8005b28 <RadioTimeOnAir+0x5c>
        if( preambleLen < 12 )
 8005b22:	2c0c      	cmp	r4, #12
 8005b24:	bf38      	it	cc
 8005b26:	240c      	movcc	r4, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	d137      	bne.n	8005b9c <RadioTimeOnAir+0xd0>
 8005b2c:	f1a2 060b 	sub.w	r6, r2, #11
 8005b30:	2e01      	cmp	r6, #1
 8005b32:	bf8c      	ite	hi
 8005b34:	2600      	movhi	r6, #0
 8005b36:	2601      	movls	r6, #1
                            ( crcOn ? 16 : 0 ) -
 8005b38:	2d00      	cmp	r5, #0
 8005b3a:	bf14      	ite	ne
 8005b3c:	2010      	movne	r0, #16
 8005b3e:	2000      	moveq	r0, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005b40:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
                            ( fixLen ? 0 : 20 );
 8005b44:	f1bc 0f00 	cmp.w	ip, #0
 8005b48:	bf14      	ite	ne
 8005b4a:	2700      	movne	r7, #0
 8005b4c:	2714      	moveq	r7, #20
                            ( crcOn ? 16 : 0 ) -
 8005b4e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
 8005b52:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
 8005b54:	4438      	add	r0, r7
 8005b56:	ea4f 0582 	mov.w	r5, r2, lsl #2
            ceilDenominator = 4 * ( datarate - 2 );
 8005b5a:	f1a2 0702 	sub.w	r7, r2, #2
    if( datarate <= 6 )
 8005b5e:	d902      	bls.n	8005b66 <RadioTimeOnAir+0x9a>
        ceilNumerator += 8;
 8005b60:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 8005b62:	b106      	cbz	r6, 8005b66 <RadioTimeOnAir+0x9a>
            ceilDenominator = 4 * ( datarate - 2 );
 8005b64:	00bd      	lsls	r5, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005b66:	2800      	cmp	r0, #0
 8005b68:	bfac      	ite	ge
 8005b6a:	182e      	addge	r6, r5, r0
 8005b6c:	1c2e      	addlt	r6, r5, #0
 8005b6e:	1e70      	subs	r0, r6, #1
 8005b70:	fb90 f5f5 	sdiv	r5, r0, r5
 8005b74:	fb03 4405 	mla	r4, r3, r5, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005b78:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <RadioTimeOnAir+0xe4>)
 8005b7a:	5c5b      	ldrb	r3, [r3, r1]
    if( datarate <= 6 )
 8005b7c:	2a06      	cmp	r2, #6
    int32_t intermediate =
 8005b7e:	bf8c      	ite	hi
 8005b80:	340c      	addhi	r4, #12
        intermediate += 2;
 8005b82:	340e      	addls	r4, #14
    switch( bw )
 8005b84:	2b0a      	cmp	r3, #10
 8005b86:	d812      	bhi.n	8005bae <RadioTimeOnAir+0xe2>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005b88:	00a4      	lsls	r4, r4, #2
 8005b8a:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <RadioTimeOnAir+0xe8>)
 8005b8c:	3401      	adds	r4, #1
 8005b8e:	40bc      	lsls	r4, r7
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b98:	4344      	muls	r4, r0
 8005b9a:	e7a5      	b.n	8005ae8 <RadioTimeOnAir+0x1c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005b9c:	2901      	cmp	r1, #1
 8005b9e:	d104      	bne.n	8005baa <RadioTimeOnAir+0xde>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005ba0:	2a0c      	cmp	r2, #12
 8005ba2:	bf14      	ite	ne
 8005ba4:	2600      	movne	r6, #0
 8005ba6:	2601      	moveq	r6, #1
 8005ba8:	e7c6      	b.n	8005b38 <RadioTimeOnAir+0x6c>
    bool    lowDatareOptimize = false;
 8005baa:	2600      	movs	r6, #0
 8005bac:	e7c4      	b.n	8005b38 <RadioTimeOnAir+0x6c>
    return ( numerator + denominator - 1 ) / denominator;
 8005bae:	deff      	udf	#255	; 0xff
 8005bb0:	080188e2 	.word	0x080188e2
 8005bb4:	08017224 	.word	0x08017224

08005bb8 <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	; (8005bf0 <RadioSetPublicNetwork+0x38>)
{
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	4604      	mov	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8005bbe:	7018      	strb	r0, [r3, #0]
 8005bc0:	7058      	strb	r0, [r3, #1]
    switch( modem )
 8005bc2:	f000 f817 	bl	8005bf4 <RadioSetModem.part.0>
    if( enable == true )
 8005bc6:	b15c      	cbz	r4, 8005be0 <RadioSetPublicNetwork+0x28>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8005bc8:	2134      	movs	r1, #52	; 0x34
 8005bca:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005bce:	f00b fde2 	bl	8011796 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8005bd2:	2144      	movs	r1, #68	; 0x44
}
 8005bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8005bd8:	f240 7041 	movw	r0, #1857	; 0x741
 8005bdc:	f00b bddb 	b.w	8011796 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8005be0:	2114      	movs	r1, #20
 8005be2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8005be6:	f00b fdd6 	bl	8011796 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8005bea:	2124      	movs	r1, #36	; 0x24
 8005bec:	e7f2      	b.n	8005bd4 <RadioSetPublicNetwork+0x1c>
 8005bee:	bf00      	nop
 8005bf0:	2000234f 	.word	0x2000234f

08005bf4 <RadioSetModem.part.0>:
void RadioSetModem( RadioModems_t modem )
 8005bf4:	b508      	push	{r3, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f7ff fc8c 	bl	8005514 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <RadioSetModem.part.0+0x20>)
 8005bfe:	7818      	ldrb	r0, [r3, #0]
 8005c00:	785a      	ldrb	r2, [r3, #1]
 8005c02:	4282      	cmp	r2, r0
 8005c04:	d004      	beq.n	8005c10 <RadioSetModem.part.0+0x1c>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8005c06:	7058      	strb	r0, [r3, #1]
}
 8005c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 8005c0c:	f7ff bfd4 	b.w	8005bb8 <RadioSetPublicNetwork>
}
 8005c10:	bd08      	pop	{r3, pc}
 8005c12:	bf00      	nop
 8005c14:	2000234f 	.word	0x2000234f

08005c18 <RadioSetModem>:
    switch( modem )
 8005c18:	2801      	cmp	r0, #1
{
 8005c1a:	b508      	push	{r3, lr}
    switch( modem )
 8005c1c:	d006      	beq.n	8005c2c <RadioSetModem+0x14>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f7ff fc78 	bl	8005514 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 8005c24:	4b03      	ldr	r3, [pc, #12]	; (8005c34 <RadioSetModem+0x1c>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	705a      	strb	r2, [r3, #1]
}
 8005c2a:	bd08      	pop	{r3, pc}
 8005c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005c30:	f7ff bfe0 	b.w	8005bf4 <RadioSetModem.part.0>
 8005c34:	2000234f 	.word	0x2000234f

08005c38 <RadioSetRxConfig>:
{
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	460e      	mov	r6, r1
 8005c40:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8005c44:	9100      	str	r1, [sp, #0]
 8005c46:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8005c4a:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8005c4e:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
    RxContinuous = rxContinuous;
 8005c52:	4c6a      	ldr	r4, [pc, #424]	; (8005dfc <RadioSetRxConfig+0x1c4>)
 8005c54:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8005e00 <RadioSetRxConfig+0x1c8>
{
 8005c58:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
    RxContinuous = rxContinuous;
 8005c5c:	7021      	strb	r1, [r4, #0]
        symbTimeout = 0;
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	bf18      	it	ne
 8005c62:	2700      	movne	r7, #0
        MaxPayloadLength = 0xFF;
 8005c64:	f1b9 0f00 	cmp.w	r9, #0
{
 8005c68:	4615      	mov	r5, r2
 8005c6a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
        MaxPayloadLength = 0xFF;
 8005c6e:	bf08      	it	eq
 8005c70:	22ff      	moveq	r2, #255	; 0xff
 8005c72:	f88b 2000 	strb.w	r2, [fp]
    switch( modem )
 8005c76:	4680      	mov	r8, r0
 8005c78:	b120      	cbz	r0, 8005c84 <RadioSetRxConfig+0x4c>
 8005c7a:	2801      	cmp	r0, #1
 8005c7c:	d054      	beq.n	8005d28 <RadioSetRxConfig+0xf0>
}
 8005c7e:	b005      	add	sp, #20
 8005c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005c84:	4c5f      	ldr	r4, [pc, #380]	; (8005e04 <RadioSetRxConfig+0x1cc>)
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8005c86:	f00b fffd 	bl	8011c84 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005c8a:	230b      	movs	r3, #11
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8005c8c:	0070      	lsls	r0, r6, #1
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005c8e:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005c92:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005c96:	f884 80e0 	strb.w	r8, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8005c9a:	f7ff fddf 	bl	800585c <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005c9e:	f641 0304 	movw	r3, #6148	; 0x1804
 8005ca2:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005ca6:	f89b 3000 	ldrb.w	r3, [fp]
 8005caa:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005cae:	9b00      	ldr	r3, [sp, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8005cb0:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bf14      	ite	ne
 8005cb8:	23f2      	movne	r3, #242	; 0xf2
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005cc0:	ea4f 0aca 	mov.w	sl, sl, lsl #3
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005cc4:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005cc6:	f089 0901 	eor.w	r9, r9, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005cca:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005cce:	f884 80b8 	strb.w	r8, [r4, #184]	; 0xb8
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005cd2:	f8a4 a0ba 	strh.w	sl, [r4, #186]	; 0xba
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005cd6:	f884 80be 	strb.w	r8, [r4, #190]	; 0xbe
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005cda:	f884 90bf 	strb.w	r9, [r4, #191]	; 0xbf
            RadioStandby( );
 8005cde:	f00c f900 	bl	8011ee2 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005ce2:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 8005ce6:	3800      	subs	r0, #0
 8005ce8:	bf18      	it	ne
 8005cea:	2001      	movne	r0, #1
 8005cec:	f7ff ff94 	bl	8005c18 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8005cf0:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8005cf4:	f7ff fc24 	bl	8005540 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8005cf8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8005cfc:	f7ff fc78 	bl	80055f0 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005d00:	4a41      	ldr	r2, [pc, #260]	; (8005e08 <RadioSetRxConfig+0x1d0>)
 8005d02:	6810      	ldr	r0, [r2, #0]
 8005d04:	6851      	ldr	r1, [r2, #4]
 8005d06:	ab02      	add	r3, sp, #8
 8005d08:	c303      	stmia	r3!, {r0, r1}
 8005d0a:	a802      	add	r0, sp, #8
 8005d0c:	f00b fee8 	bl	8011ae0 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8005d10:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d14:	f7ff fb42 	bl	800539c <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8005d18:	4b3c      	ldr	r3, [pc, #240]	; (8005e0c <RadioSetRxConfig+0x1d4>)
 8005d1a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005d1e:	4357      	muls	r7, r2
 8005d20:	fbb7 f5f5 	udiv	r5, r7, r5
 8005d24:	601d      	str	r5, [r3, #0]
            break;
 8005d26:	e7aa      	b.n	8005c7e <RadioSetRxConfig+0x46>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 8005d28:	2000      	movs	r0, #0
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	f00b ffaa 	bl	8011c84 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005d30:	4937      	ldr	r1, [pc, #220]	; (8005e10 <RadioSetRxConfig+0x1d8>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005d32:	4c34      	ldr	r4, [pc, #208]	; (8005e04 <RadioSetRxConfig+0x1cc>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005d34:	5d89      	ldrb	r1, [r1, r6]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8005d36:	9b01      	ldr	r3, [sp, #4]
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005d38:	f884 80e0 	strb.w	r8, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8005d3c:	b2ea      	uxtb	r2, r5
 8005d3e:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005d42:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8005d46:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	d144      	bne.n	8005dd8 <RadioSetRxConfig+0x1a0>
 8005d4e:	3d0b      	subs	r5, #11
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005d50:	2d01      	cmp	r5, #1
 8005d52:	bf8c      	ite	hi
 8005d54:	2500      	movhi	r5, #0
 8005d56:	2501      	movls	r5, #1
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005d58:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005d5a:	3a05      	subs	r2, #5
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005d62:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005d66:	d840      	bhi.n	8005dea <RadioSetRxConfig+0x1b2>
                if( preambleLen < 12 )
 8005d68:	f1ba 0f0b 	cmp.w	sl, #11
 8005d6c:	d83d      	bhi.n	8005dea <RadioSetRxConfig+0x1b2>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8005d6e:	230c      	movs	r3, #12
 8005d70:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005d74:	f89b 3000 	ldrb.w	r3, [fp]
 8005d78:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005d7c:	9b00      	ldr	r3, [sp, #0]
 8005d7e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005d82:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8005d86:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005d8a:	f884 90c6 	strb.w	r9, [r4, #198]	; 0xc6
            RadioStandby( );
 8005d8e:	f00c f8a8 	bl	8011ee2 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005d92:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 8005d96:	3800      	subs	r0, #0
 8005d98:	bf18      	it	ne
 8005d9a:	2001      	movne	r0, #1
 8005d9c:	f7ff ff3c 	bl	8005c18 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8005da0:	481c      	ldr	r0, [pc, #112]	; (8005e14 <RadioSetRxConfig+0x1dc>)
 8005da2:	f7ff fbcd 	bl	8005540 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8005da6:	481c      	ldr	r0, [pc, #112]	; (8005e18 <RadioSetRxConfig+0x1e0>)
 8005da8:	f7ff fc22 	bl	80055f0 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 8005dac:	b2f8      	uxtb	r0, r7
 8005dae:	f00b ff75 	bl	8011c9c <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005db2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
 8005db6:	2b01      	cmp	r3, #1
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 8005db8:	f240 7036 	movw	r0, #1846	; 0x736
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8005dbc:	d118      	bne.n	8005df0 <RadioSetRxConfig+0x1b8>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) & ~( 1 << 2 ) );
 8005dbe:	f00b fd0b 	bl	80117d8 <SX126xReadRegister>
 8005dc2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 8005dc6:	f240 7036 	movw	r0, #1846	; 0x736
 8005dca:	f00b fce4 	bl	8011796 <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <RadioSetRxConfig+0x1d4>)
 8005dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd4:	601a      	str	r2, [r3, #0]
}
 8005dd6:	e752      	b.n	8005c7e <RadioSetRxConfig+0x46>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005dd8:	2e01      	cmp	r6, #1
 8005dda:	d104      	bne.n	8005de6 <RadioSetRxConfig+0x1ae>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005ddc:	f1a5 030c 	sub.w	r3, r5, #12
 8005de0:	425d      	negs	r5, r3
 8005de2:	415d      	adcs	r5, r3
 8005de4:	e7b8      	b.n	8005d58 <RadioSetRxConfig+0x120>
 8005de6:	2500      	movs	r5, #0
 8005de8:	e7b6      	b.n	8005d58 <RadioSetRxConfig+0x120>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005dea:	f8a4 a0c4 	strh.w	sl, [r4, #196]	; 0xc4
 8005dee:	e7c1      	b.n	8005d74 <RadioSetRxConfig+0x13c>
                SX126xWriteRegister( REG_IQ_POLARITY, SX126xReadRegister( REG_IQ_POLARITY ) | ( 1 << 2 ) );
 8005df0:	f00b fcf2 	bl	80117d8 <SX126xReadRegister>
 8005df4:	f040 0104 	orr.w	r1, r0, #4
 8005df8:	b2c9      	uxtb	r1, r1
 8005dfa:	e7e4      	b.n	8005dc6 <RadioSetRxConfig+0x18e>
 8005dfc:	20002450 	.word	0x20002450
 8005e00:	200002ac 	.word	0x200002ac
 8005e04:	20001104 	.word	0x20001104
 8005e08:	0801708d 	.word	0x0801708d
 8005e0c:	200010e8 	.word	0x200010e8
 8005e10:	080188e2 	.word	0x080188e2
 8005e14:	200011e4 	.word	0x200011e4
 8005e18:	200011bc 	.word	0x200011bc

08005e1c <RadioSetTxConfig>:
{
 8005e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e22:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8005e26:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8005e2a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8005e2e:	460f      	mov	r7, r1
 8005e30:	4693      	mov	fp, r2
    switch( modem )
 8005e32:	4606      	mov	r6, r0
 8005e34:	b148      	cbz	r0, 8005e4a <RadioSetTxConfig+0x2e>
 8005e36:	2801      	cmp	r0, #1
 8005e38:	d04e      	beq.n	8005ed8 <RadioSetTxConfig+0xbc>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 8005e3a:	f640 0089 	movw	r0, #2185	; 0x889
 8005e3e:	f00b fccb 	bl	80117d8 <SX126xReadRegister>
 8005e42:	f040 0104 	orr.w	r1, r0, #4
 8005e46:	b2c9      	uxtb	r1, r1
 8005e48:	e08f      	b.n	8005f6a <RadioSetTxConfig+0x14e>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005e4a:	4c54      	ldr	r4, [pc, #336]	; (8005f9c <RadioSetTxConfig+0x180>)
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005e4c:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005e4e:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8005e52:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8005e54:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005e58:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8005e5c:	f7ff fcfe 	bl	800585c <RadioGetFskBandwidthRegValue>
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005e60:	f641 0304 	movw	r3, #6148	; 0x1804
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005e64:	f1ba 0f00 	cmp.w	sl, #0
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8005e68:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005e6c:	bf14      	ite	ne
 8005e6e:	23f2      	movne	r3, #242	; 0xf2
 8005e70:	2301      	moveq	r3, #1
 8005e72:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005e76:	ea4f 08c8 	mov.w	r8, r8, lsl #3
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005e7a:	2301      	movs	r3, #1
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005e7c:	f089 0901 	eor.w	r9, r9, #1
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005e80:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 8005e84:	f884 00ed 	strb.w	r0, [r4, #237]	; 0xed
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005e88:	f8c4 b0e8 	str.w	fp, [r4, #232]	; 0xe8
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005e8c:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005e90:	f8a4 80ba 	strh.w	r8, [r4, #186]	; 0xba
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005e94:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8005e98:	f884 90bf 	strb.w	r9, [r4, #191]	; 0xbf
            RadioStandby( );
 8005e9c:	f00c f821 	bl	8011ee2 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005ea0:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 8005ea4:	3800      	subs	r0, #0
 8005ea6:	bf18      	it	ne
 8005ea8:	2001      	movne	r0, #1
 8005eaa:	f7ff feb5 	bl	8005c18 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8005eae:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8005eb2:	f7ff fb45 	bl	8005540 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8005eb6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8005eba:	f7ff fb99 	bl	80055f0 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005ebe:	4a38      	ldr	r2, [pc, #224]	; (8005fa0 <RadioSetTxConfig+0x184>)
 8005ec0:	6810      	ldr	r0, [r2, #0]
 8005ec2:	6851      	ldr	r1, [r2, #4]
 8005ec4:	466b      	mov	r3, sp
 8005ec6:	c303      	stmia	r3!, {r0, r1}
 8005ec8:	4668      	mov	r0, sp
 8005eca:	f00b fe09 	bl	8011ae0 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 8005ece:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ed2:	f7ff fa63 	bl	800539c <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8005ed6:	e7b0      	b.n	8005e3a <RadioSetTxConfig+0x1e>
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8005ed8:	4932      	ldr	r1, [pc, #200]	; (8005fa4 <RadioSetTxConfig+0x188>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005eda:	4c30      	ldr	r4, [pc, #192]	; (8005f9c <RadioSetTxConfig+0x180>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8005edc:	5cc9      	ldrb	r1, [r1, r3]
 8005ede:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005ee2:	b2ea      	uxtb	r2, r5
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005ee4:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005ee8:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8005eec:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8005ef0:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d145      	bne.n	8005f84 <RadioSetTxConfig+0x168>
 8005ef8:	3d0b      	subs	r5, #11
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005efa:	2d01      	cmp	r5, #1
 8005efc:	bf8c      	ite	hi
 8005efe:	2500      	movhi	r5, #0
 8005f00:	2501      	movls	r5, #1
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005f02:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005f04:	3a05      	subs	r2, #5
 8005f06:	429a      	cmp	r2, r3
 8005f08:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005f0c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005f10:	d841      	bhi.n	8005f96 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8005f12:	f1b8 0f0b 	cmp.w	r8, #11
 8005f16:	d83e      	bhi.n	8005f96 <RadioSetTxConfig+0x17a>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8005f18:	230c      	movs	r3, #12
 8005f1a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005f1e:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <RadioSetTxConfig+0x18c>)
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005f20:	f884 90c6 	strb.w	r9, [r4, #198]	; 0xc6
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005f2a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8005f2e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005f32:	f884 a0c8 	strb.w	sl, [r4, #200]	; 0xc8
            RadioStandby( );
 8005f36:	f00b ffd4 	bl	8011ee2 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8005f3a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
 8005f3e:	3800      	subs	r0, #0
 8005f40:	bf18      	it	ne
 8005f42:	2001      	movne	r0, #1
 8005f44:	f7ff fe68 	bl	8005c18 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 8005f48:	4818      	ldr	r0, [pc, #96]	; (8005fac <RadioSetTxConfig+0x190>)
 8005f4a:	f7ff faf9 	bl	8005540 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 8005f4e:	4818      	ldr	r0, [pc, #96]	; (8005fb0 <RadioSetTxConfig+0x194>)
 8005f50:	f7ff fb4e 	bl	80055f0 <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8005f54:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	f47f af6e 	bne.w	8005e3a <RadioSetTxConfig+0x1e>
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) & ~( 1 << 2 ) );
 8005f5e:	f640 0089 	movw	r0, #2185	; 0x889
 8005f62:	f00b fc39 	bl	80117d8 <SX126xReadRegister>
 8005f66:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
        SX126xWriteRegister( REG_TX_MODULATION, SX126xReadRegister( REG_TX_MODULATION ) | ( 1 << 2 ) );
 8005f6a:	f640 0089 	movw	r0, #2185	; 0x889
 8005f6e:	f00b fc12 	bl	8011796 <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 8005f72:	4638      	mov	r0, r7
 8005f74:	f00b fbb4 	bl	80116e0 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 8005f78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f7a:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <RadioSetTxConfig+0x198>)
 8005f7c:	601a      	str	r2, [r3, #0]
}
 8005f7e:	b003      	add	sp, #12
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d104      	bne.n	8005f92 <RadioSetTxConfig+0x176>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005f88:	f1a5 030c 	sub.w	r3, r5, #12
 8005f8c:	425d      	negs	r5, r3
 8005f8e:	415d      	adcs	r5, r3
 8005f90:	e7b7      	b.n	8005f02 <RadioSetTxConfig+0xe6>
 8005f92:	2500      	movs	r5, #0
 8005f94:	e7b5      	b.n	8005f02 <RadioSetTxConfig+0xe6>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005f96:	f8a4 80c4 	strh.w	r8, [r4, #196]	; 0xc4
 8005f9a:	e7c0      	b.n	8005f1e <RadioSetTxConfig+0x102>
 8005f9c:	20001104 	.word	0x20001104
 8005fa0:	0801708d 	.word	0x0801708d
 8005fa4:	080188e2 	.word	0x080188e2
 8005fa8:	200002ac 	.word	0x200002ac
 8005fac:	200011e4 	.word	0x200011e4
 8005fb0:	200011bc 	.word	0x200011bc
 8005fb4:	200011f8 	.word	0x200011f8

08005fb8 <RadioInit>:
{
 8005fb8:	b508      	push	{r3, lr}
    RadioEvents = events;
 8005fba:	4b17      	ldr	r3, [pc, #92]	; (8006018 <RadioInit+0x60>)
 8005fbc:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 8005fbe:	4817      	ldr	r0, [pc, #92]	; (800601c <RadioInit+0x64>)
 8005fc0:	f7ff fa26 	bl	8005410 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f00b fd94 	bl	8011af2 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 8005fca:	2001      	movs	r0, #1
 8005fcc:	f00b fe91 	bl	8011cf2 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	f00b ff42 	bl	8011e5c <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 8005fd8:	2104      	movs	r1, #4
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f00b ff00 	bl	8011de0 <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4608      	mov	r0, r1
 8005fea:	f00b feae 	bl	8011d4a <SX126xSetDioIrqParams>
    RadioAddRegisterToRetentionList( REG_RX_GAIN );
 8005fee:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8005ff2:	f00b fff4 	bl	8011fde <RadioAddRegisterToRetentionList>
    RadioAddRegisterToRetentionList( REG_TX_MODULATION );
 8005ff6:	f640 0089 	movw	r0, #2185	; 0x889
 8005ffa:	f00b fff0 	bl	8011fde <RadioAddRegisterToRetentionList>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8005ffe:	4908      	ldr	r1, [pc, #32]	; (8006020 <RadioInit+0x68>)
 8006000:	4808      	ldr	r0, [pc, #32]	; (8006024 <RadioInit+0x6c>)
 8006002:	f00b fd26 	bl	8011a52 <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006006:	4908      	ldr	r1, [pc, #32]	; (8006028 <RadioInit+0x70>)
 8006008:	4808      	ldr	r0, [pc, #32]	; (800602c <RadioInit+0x74>)
 800600a:	f00b fd22 	bl	8011a52 <TimerInit>
    IrqFired = false;
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <RadioInit+0x78>)
 8006010:	2200      	movs	r2, #0
 8006012:	701a      	strb	r2, [r3, #0]
}
 8006014:	bd08      	pop	{r3, pc}
 8006016:	bf00      	nop
 8006018:	200010d0 	.word	0x200010d0
 800601c:	080057a9 	.word	0x080057a9
 8006020:	08005781 	.word	0x08005781
 8006024:	200011fc 	.word	0x200011fc
 8006028:	08005795 	.word	0x08005795
 800602c:	200010ec 	.word	0x200010ec
 8006030:	2000234e 	.word	0x2000234e

08006034 <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8006034:	f1a1 0310 	sub.w	r3, r1, #16
{
 8006038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	b2dc      	uxtb	r4, r3
 800603e:	2c10      	cmp	r4, #16
 8006040:	d806      	bhi.n	8006050 <aes_set_key+0x1c>
 8006042:	2301      	movs	r3, #1
 8006044:	40a3      	lsls	r3, r4
 8006046:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800604a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604e:	b92b      	cbnz	r3, 800605c <aes_set_key+0x28>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        return ( uint8_t )-1;
 8006056:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8006058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while( nn-- )
 800605c:	1e53      	subs	r3, r2, #1
 800605e:	1844      	adds	r4, r0, r1
 8006060:	42a0      	cmp	r0, r4
 8006062:	d152      	bne.n	800610a <aes_set_key+0xd6>
    hi = (keylen + 28) << 2;
 8006064:	f101 031c 	add.w	r3, r1, #28
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	fa5f f883 	uxtb.w	r8, r3
    ctx->rnd = (hi >> 4) - 1;
 800606e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006072:	3b01      	subs	r3, #1
            t0 = s_box(t0);
 8006074:	4c2c      	ldr	r4, [pc, #176]	; (8006128 <aes_set_key+0xf4>)
    ctx->rnd = (hi >> 4) - 1;
 8006076:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800607a:	f04f 0901 	mov.w	r9, #1
    ctx->rnd = (hi >> 4) - 1;
 800607e:	460b      	mov	r3, r1
        t0 = ctx->ksch[cc - 4];
 8006080:	eb02 0c03 	add.w	ip, r2, r3
        if( cc % keylen == 0 )
 8006084:	fbb3 f0f1 	udiv	r0, r3, r1
 8006088:	fb01 3010 	mls	r0, r1, r0, r3
 800608c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
 8006090:	f81c ac04 	ldrb.w	sl, [ip, #-4]
        t1 = ctx->ksch[cc - 3];
 8006094:	f81c 7c03 	ldrb.w	r7, [ip, #-3]
        t2 = ctx->ksch[cc - 2];
 8006098:	f81c 6c02 	ldrb.w	r6, [ip, #-2]
        t3 = ctx->ksch[cc - 1];
 800609c:	f81c 5c01 	ldrb.w	r5, [ip, #-1]
        if( cc % keylen == 0 )
 80060a0:	d138      	bne.n	8006114 <aes_set_key+0xe0>
            rc = f2(rc);
 80060a2:	ea4f 10d9 	mov.w	r0, r9, lsr #7
            t0 = s_box(t1) ^ rc;
 80060a6:	f814 e007 	ldrb.w	lr, [r4, r7]
            t1 = s_box(t2);
 80060aa:	5da7      	ldrb	r7, [r4, r6]
            t2 = s_box(t3);
 80060ac:	5d66      	ldrb	r6, [r4, r5]
            t3 = s_box(tt);
 80060ae:	f814 500a 	ldrb.w	r5, [r4, sl]
            rc = f2(rc);
 80060b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80060b6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
            t0 = s_box(t1) ^ rc;
 80060ba:	ea89 0e0e 	eor.w	lr, r9, lr
            rc = f2(rc);
 80060be:	ea80 0049 	eor.w	r0, r0, r9, lsl #1
 80060c2:	fa5f f980 	uxtb.w	r9, r0
            t0 = s_box(t1) ^ rc;
 80060c6:	46f2      	mov	sl, lr
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80060c8:	1a58      	subs	r0, r3, r1
 80060ca:	b2c0      	uxtb	r0, r0
 80060cc:	f812 e000 	ldrb.w	lr, [r2, r0]
 80060d0:	ea8a 0a0e 	eor.w	sl, sl, lr
 80060d4:	f802 a003 	strb.w	sl, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80060d8:	4410      	add	r0, r2
 80060da:	f103 0e01 	add.w	lr, r3, #1
 80060de:	f890 a001 	ldrb.w	sl, [r0, #1]
 80060e2:	fa5f fe8e 	uxtb.w	lr, lr
 80060e6:	ea87 070a 	eor.w	r7, r7, sl
 80060ea:	f802 700e 	strb.w	r7, [r2, lr]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80060ee:	7887      	ldrb	r7, [r0, #2]
 80060f0:	407e      	eors	r6, r7
 80060f2:	f88c 6002 	strb.w	r6, [ip, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80060f6:	78c0      	ldrb	r0, [r0, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80060f8:	3304      	adds	r3, #4
 80060fa:	b2db      	uxtb	r3, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80060fc:	4045      	eors	r5, r0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80060fe:	4598      	cmp	r8, r3
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006100:	f88c 5003 	strb.w	r5, [ip, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006104:	d8bc      	bhi.n	8006080 <aes_set_key+0x4c>
    return 0;
 8006106:	2000      	movs	r0, #0
 8006108:	e7a6      	b.n	8006058 <aes_set_key+0x24>
        *d++ = *s++;
 800610a:	f810 5b01 	ldrb.w	r5, [r0], #1
 800610e:	f803 5f01 	strb.w	r5, [r3, #1]!
 8006112:	e7a5      	b.n	8006060 <aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8006114:	2918      	cmp	r1, #24
 8006116:	d9d7      	bls.n	80060c8 <aes_set_key+0x94>
 8006118:	2810      	cmp	r0, #16
            t0 = s_box(t0);
 800611a:	bf01      	itttt	eq
 800611c:	f814 a00a 	ldrbeq.w	sl, [r4, sl]
            t1 = s_box(t1);
 8006120:	5de7      	ldrbeq	r7, [r4, r7]
            t2 = s_box(t2);
 8006122:	5da6      	ldrbeq	r6, [r4, r6]
            t3 = s_box(t3);
 8006124:	5d65      	ldrbeq	r5, [r4, r5]
 8006126:	e7cf      	b.n	80060c8 <aes_set_key+0x94>
 8006128:	08018ae9 	.word	0x08018ae9

0800612c <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ctx->rnd )
 8006130:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
 8006134:	b0a1      	sub	sp, #132	; 0x84
 8006136:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
    if( ctx->rnd )
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 8154 	beq.w	80063e8 <aes_encrypt+0x2bc>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8006140:	4601      	mov	r1, r0
 8006142:	a81c      	add	r0, sp, #112	; 0x70
 8006144:	f00b ffc1 	bl	80120ca <copy_and_key>
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006148:	4ca8      	ldr	r4, [pc, #672]	; (80063ec <aes_encrypt+0x2c0>)
 800614a:	4da9      	ldr	r5, [pc, #676]	; (80063f0 <aes_encrypt+0x2c4>)
 800614c:	4ea9      	ldr	r6, [pc, #676]	; (80063f4 <aes_encrypt+0x2c8>)

        for( r = 1 ; r < ctx->rnd ; ++r )
 800614e:	f04f 0801 	mov.w	r8, #1
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8006152:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006154:	f89d a07a 	ldrb.w	sl, [sp, #122]	; 0x7a
 8006158:	f89d 907f 	ldrb.w	r9, [sp, #127]	; 0x7f
 800615c:	f814 100a 	ldrb.w	r1, [r4, sl]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8006160:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006164:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8006168:	9301      	str	r3, [sp, #4]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800616a:	9a01      	ldr	r2, [sp, #4]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800616c:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8006170:	9302      	str	r3, [sp, #8]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8006172:	5ca0      	ldrb	r0, [r4, r2]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8006174:	9a02      	ldr	r2, [sp, #8]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006176:	f814 3009 	ldrb.w	r3, [r4, r9]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800617a:	f814 c002 	ldrb.w	ip, [r4, r2]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800617e:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8006182:	9203      	str	r2, [sp, #12]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006184:	9f03      	ldr	r7, [sp, #12]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006186:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800618a:	5de7      	ldrb	r7, [r4, r7]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800618c:	9204      	str	r2, [sp, #16]
 800618e:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006192:	9708      	str	r7, [sp, #32]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006194:	9f04      	ldr	r7, [sp, #16]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006196:	9205      	str	r2, [sp, #20]
 8006198:	5ca2      	ldrb	r2, [r4, r2]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800619a:	5de7      	ldrb	r7, [r4, r7]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800619c:	9206      	str	r2, [sp, #24]
 800619e:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80061a2:	9709      	str	r7, [sp, #36]	; 0x24
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80061a4:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80061a8:	9207      	str	r2, [sp, #28]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80061aa:	970a      	str	r7, [sp, #40]	; 0x28
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80061ac:	5ca2      	ldrb	r2, [r4, r2]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80061ae:	f89d 707d 	ldrb.w	r7, [sp, #125]	; 0x7d
 80061b2:	970b      	str	r7, [sp, #44]	; 0x2c
 80061b4:	f89d 7072 	ldrb.w	r7, [sp, #114]	; 0x72
 80061b8:	970c      	str	r7, [sp, #48]	; 0x30
 80061ba:	5de7      	ldrb	r7, [r4, r7]
 80061bc:	970d      	str	r7, [sp, #52]	; 0x34
 80061be:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
 80061c2:	970e      	str	r7, [sp, #56]	; 0x38
 80061c4:	5de7      	ldrb	r7, [r4, r7]
 80061c6:	970f      	str	r7, [sp, #60]	; 0x3c
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80061c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80061ca:	5de7      	ldrb	r7, [r4, r7]
 80061cc:	9710      	str	r7, [sp, #64]	; 0x40
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80061ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80061d0:	5de7      	ldrb	r7, [r4, r7]
 80061d2:	9711      	str	r7, [sp, #68]	; 0x44
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80061d4:	f89d 707c 	ldrb.w	r7, [sp, #124]	; 0x7c
 80061d8:	9712      	str	r7, [sp, #72]	; 0x48
 80061da:	f89d 7071 	ldrb.w	r7, [sp, #113]	; 0x71
 80061de:	9713      	str	r7, [sp, #76]	; 0x4c
 80061e0:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 80061e4:	9714      	str	r7, [sp, #80]	; 0x50
 80061e6:	5de7      	ldrb	r7, [r4, r7]
 80061e8:	9715      	str	r7, [sp, #84]	; 0x54
 80061ea:	f89d 707b 	ldrb.w	r7, [sp, #123]	; 0x7b
 80061ee:	9716      	str	r7, [sp, #88]	; 0x58
 80061f0:	5de7      	ldrb	r7, [r4, r7]
 80061f2:	9717      	str	r7, [sp, #92]	; 0x5c
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80061f4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80061f6:	5de7      	ldrb	r7, [r4, r7]
 80061f8:	9718      	str	r7, [sp, #96]	; 0x60
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80061fa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80061fc:	5de7      	ldrb	r7, [r4, r7]
 80061fe:	9719      	str	r7, [sp, #100]	; 0x64
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006200:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006202:	f897 70f0 	ldrb.w	r7, [r7, #240]	; 0xf0
 8006206:	4547      	cmp	r7, r8
 8006208:	d833      	bhi.n	8006272 <aes_encrypt+0x146>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800620a:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
 800620e:	9808      	ldr	r0, [sp, #32]
 8006210:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8006214:	f88d 1072 	strb.w	r1, [sp, #114]	; 0x72
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006218:	9810      	ldr	r0, [sp, #64]	; 0x40
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800621a:	990d      	ldr	r1, [sp, #52]	; 0x34
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800621c:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8006220:	f88d 107a 	strb.w	r1, [sp, #122]	; 0x7a
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006224:	9818      	ldr	r0, [sp, #96]	; 0x60
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8006226:	9906      	ldr	r1, [sp, #24]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006228:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800622c:	f88d 1076 	strb.w	r1, [sp, #118]	; 0x76
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006230:	9809      	ldr	r0, [sp, #36]	; 0x24
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8006232:	9915      	ldr	r1, [sp, #84]	; 0x54
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006234:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8006238:	f88d 107e 	strb.w	r1, [sp, #126]	; 0x7e
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800623c:	9811      	ldr	r0, [sp, #68]	; 0x44
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800623e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8006240:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8006244:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8006248:	9819      	ldr	r0, [sp, #100]	; 0x64
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800624a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800624c:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8006250:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006254:	981b      	ldr	r0, [sp, #108]	; 0x6c
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8006256:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800625a:	a91c      	add	r1, sp, #112	; 0x70
 800625c:	4672      	mov	r2, lr
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800625e:	f88d c071 	strb.w	ip, [sp, #113]	; 0x71
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8006262:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006266:	f00b ff30 	bl	80120ca <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800626a:	2000      	movs	r0, #0
}
 800626c:	b021      	add	sp, #132	; 0x84
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006272:	f8dd b004 	ldr.w	fp, [sp, #4]
 8006276:	f815 b00b 	ldrb.w	fp, [r5, fp]
 800627a:	ea81 0703 	eor.w	r7, r1, r3
 800627e:	ea8b 0707 	eor.w	r7, fp, r7
 8006282:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006286:	f816 b00b 	ldrb.w	fp, [r6, fp]
 800628a:	ea87 070b 	eor.w	r7, r7, fp
 800628e:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8006292:	9f02      	ldr	r7, [sp, #8]
 8006294:	5def      	ldrb	r7, [r5, r7]
 8006296:	4043      	eors	r3, r0
 8006298:	407b      	eors	r3, r7
 800629a:	f816 700a 	ldrb.w	r7, [r6, sl]
 800629e:	407b      	eors	r3, r7
 80062a0:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80062a4:	f815 300a 	ldrb.w	r3, [r5, sl]
 80062a8:	ea80 000c 	eor.w	r0, r0, ip
 80062ac:	4058      	eors	r0, r3
 80062ae:	f816 3009 	ldrb.w	r3, [r6, r9]
 80062b2:	4058      	eors	r0, r3
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80062b4:	9b01      	ldr	r3, [sp, #4]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80062b6:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80062ba:	ea81 010c 	eor.w	r1, r1, ip
 80062be:	f816 c003 	ldrb.w	ip, [r6, r3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80062c2:	9b06      	ldr	r3, [sp, #24]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80062c4:	ea8c 0101 	eor.w	r1, ip, r1
 80062c8:	f815 c009 	ldrb.w	ip, [r5, r9]
 80062cc:	ea81 0c0c 	eor.w	ip, r1, ip
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80062d0:	9903      	ldr	r1, [sp, #12]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80062d2:	f88d c073 	strb.w	ip, [sp, #115]	; 0x73
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80062d6:	5c69      	ldrb	r1, [r5, r1]
 80062d8:	4053      	eors	r3, r2
 80062da:	404b      	eors	r3, r1
 80062dc:	9904      	ldr	r1, [sp, #16]
 80062de:	5c71      	ldrb	r1, [r6, r1]
 80062e0:	404b      	eors	r3, r1
 80062e2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80062e6:	9b08      	ldr	r3, [sp, #32]
 80062e8:	405a      	eors	r2, r3
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	5ceb      	ldrb	r3, [r5, r3]
 80062ee:	405a      	eors	r2, r3
 80062f0:	9b05      	ldr	r3, [sp, #20]
 80062f2:	5cf3      	ldrb	r3, [r6, r3]
 80062f4:	405a      	eors	r2, r3
 80062f6:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80062fa:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80062fe:	4053      	eors	r3, r2
 8006300:	9a05      	ldr	r2, [sp, #20]
 8006302:	5caa      	ldrb	r2, [r5, r2]
 8006304:	4053      	eors	r3, r2
 8006306:	9a07      	ldr	r2, [sp, #28]
 8006308:	5cb2      	ldrb	r2, [r6, r2]
 800630a:	4053      	eors	r3, r2
 800630c:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	4053      	eors	r3, r2
 8006316:	9a03      	ldr	r2, [sp, #12]
 8006318:	5cb2      	ldrb	r2, [r6, r2]
 800631a:	4053      	eors	r3, r2
 800631c:	9a07      	ldr	r2, [sp, #28]
 800631e:	5caa      	ldrb	r2, [r5, r2]
 8006320:	4053      	eors	r3, r2
 8006322:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800632a:	4053      	eors	r3, r2
 800632c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800632e:	5caa      	ldrb	r2, [r5, r2]
 8006330:	4053      	eors	r3, r2
 8006332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006334:	5cb2      	ldrb	r2, [r6, r2]
 8006336:	4053      	eors	r3, r2
 8006338:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800633c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8006340:	4053      	eors	r3, r2
 8006342:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006344:	5caa      	ldrb	r2, [r5, r2]
 8006346:	4053      	eors	r3, r2
 8006348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800634a:	5cb2      	ldrb	r2, [r6, r2]
 800634c:	4053      	eors	r3, r2
 800634e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8006352:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8006356:	4053      	eors	r3, r2
 8006358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800635a:	5caa      	ldrb	r2, [r5, r2]
 800635c:	4053      	eors	r3, r2
 800635e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006360:	5cb2      	ldrb	r2, [r6, r2]
 8006362:	4053      	eors	r3, r2
 8006364:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8006368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800636a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800636c:	4053      	eors	r3, r2
 800636e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006370:	5cb2      	ldrb	r2, [r6, r2]
 8006372:	4053      	eors	r3, r2
 8006374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006376:	5caa      	ldrb	r2, [r5, r2]
 8006378:	4053      	eors	r3, r2
 800637a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800637e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006380:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006382:	4053      	eors	r3, r2
 8006384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006386:	5caa      	ldrb	r2, [r5, r2]
 8006388:	4053      	eors	r3, r2
 800638a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800638c:	5cb2      	ldrb	r2, [r6, r2]
 800638e:	4053      	eors	r3, r2
 8006390:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006394:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 8006398:	4053      	eors	r3, r2
 800639a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800639c:	5caa      	ldrb	r2, [r5, r2]
 800639e:	4053      	eors	r3, r2
 80063a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063a2:	5cb2      	ldrb	r2, [r6, r2]
 80063a4:	4053      	eors	r3, r2
 80063a6:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80063aa:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 80063ae:	4053      	eors	r3, r2
 80063b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063b2:	5caa      	ldrb	r2, [r5, r2]
 80063b4:	4053      	eors	r3, r2
 80063b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063b8:	5cb2      	ldrb	r2, [r6, r2]
 80063ba:	4053      	eors	r3, r2
 80063bc:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80063c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063c4:	4053      	eors	r3, r2
 80063c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063c8:	5cb2      	ldrb	r2, [r6, r2]
 80063ca:	4053      	eors	r3, r2
 80063cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063ce:	5caa      	ldrb	r2, [r5, r2]
    xor_block(d, k);
 80063d0:	4671      	mov	r1, lr
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80063d2:	4053      	eors	r3, r2
    xor_block(d, k);
 80063d4:	a81c      	add	r0, sp, #112	; 0x70
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80063d6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
    xor_block(d, k);
 80063da:	f00b fe35 	bl	8012048 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80063de:	f108 0301 	add.w	r3, r8, #1
 80063e2:	fa5f f883 	uxtb.w	r8, r3
 80063e6:	e6b4      	b.n	8006152 <aes_encrypt+0x26>
        return ( uint8_t )-1;
 80063e8:	20ff      	movs	r0, #255	; 0xff
 80063ea:	e73f      	b.n	800626c <aes_encrypt+0x140>
 80063ec:	08018ae9 	.word	0x08018ae9
 80063f0:	080188e9 	.word	0x080188e9
 80063f4:	080189e9 	.word	0x080189e9

080063f8 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 80063f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063fc:	b0cb      	sub	sp, #300	; 0x12c
 80063fe:	4606      	mov	r6, r0
 8006400:	f8dd 9148 	ldr.w	r9, [sp, #328]	; 0x148
 8006404:	4617      	mov	r7, r2
 8006406:	4698      	mov	r8, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8006408:	460d      	mov	r5, r1
 800640a:	b389      	cbz	r1, 8006470 <ComputeCmac+0x78>
 800640c:	f1b9 0f00 	cmp.w	r9, #0
 8006410:	d02e      	beq.n	8006470 <ComputeCmac+0x78>
    }

    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8006412:	a804      	add	r0, sp, #16
 8006414:	f00b fe9b 	bl	801214e <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006418:	4b16      	ldr	r3, [pc, #88]	; (8006474 <ComputeCmac+0x7c>)
 800641a:	6819      	ldr	r1, [r3, #0]
 800641c:	2400      	movs	r4, #0
 800641e:	f101 0314 	add.w	r3, r1, #20
 8006422:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8006426:	5c1a      	ldrb	r2, [r3, r0]
 8006428:	4542      	cmp	r2, r8
 800642a:	d113      	bne.n	8006454 <ComputeCmac+0x5c>
    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800642c:	3015      	adds	r0, #21
 800642e:	4401      	add	r1, r0
 8006430:	a804      	add	r0, sp, #16
 8006432:	f00b fe9c 	bl	801216e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8006436:	b9a6      	cbnz	r6, 8006462 <ComputeCmac+0x6a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8006438:	463a      	mov	r2, r7
 800643a:	4629      	mov	r1, r5
 800643c:	a804      	add	r0, sp, #16
 800643e:	f00b fe9b 	bl	8012178 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 8006442:	4668      	mov	r0, sp
 8006444:	a904      	add	r1, sp, #16
 8006446:	f00b fefe 	bl	8012246 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800644a:	9b00      	ldr	r3, [sp, #0]
 800644c:	f8c9 3000 	str.w	r3, [r9]
 8006450:	2000      	movs	r0, #0
 8006452:	e003      	b.n	800645c <ComputeCmac+0x64>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8006454:	3401      	adds	r4, #1
 8006456:	2c17      	cmp	r4, #23
 8006458:	d1e3      	bne.n	8006422 <ComputeCmac+0x2a>
 800645a:	2003      	movs	r0, #3
                              ( uint32_t ) Cmac[0] );
    }

    return retval;
}
 800645c:	b04b      	add	sp, #300	; 0x12c
 800645e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8006462:	2210      	movs	r2, #16
 8006464:	4631      	mov	r1, r6
 8006466:	eb0d 0002 	add.w	r0, sp, r2
 800646a:	f00b fe85 	bl	8012178 <AES_CMAC_Update>
 800646e:	e7e3      	b.n	8006438 <ComputeCmac+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
 8006470:	2002      	movs	r0, #2
 8006472:	e7f3      	b.n	800645c <ComputeCmac+0x64>
 8006474:	20001214 	.word	0x20001214

08006478 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	b0e8      	sub	sp, #416	; 0x1a0
    SecureElementNvmData_t seNvmInit =
 800647c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006480:	2100      	movs	r1, #0
{
 8006482:	4604      	mov	r4, r0
    SecureElementNvmData_t seNvmInit =
 8006484:	4668      	mov	r0, sp
 8006486:	f010 f892 	bl	80165ae <memset>
 800648a:	4a46      	ldr	r2, [pc, #280]	; (80065a4 <SecureElementInit+0x12c>)
 800648c:	f10d 0115 	add.w	r1, sp, #21
 8006490:	f102 0310 	add.w	r3, r2, #16
 8006494:	f852 0b04 	ldr.w	r0, [r2], #4
 8006498:	f841 0b04 	str.w	r0, [r1], #4
 800649c:	429a      	cmp	r2, r3
 800649e:	d1f9      	bne.n	8006494 <SecureElementInit+0x1c>
 80064a0:	2201      	movs	r2, #1
 80064a2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80064a6:	4a3f      	ldr	r2, [pc, #252]	; (80065a4 <SecureElementInit+0x12c>)
 80064a8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 80064ac:	f852 0b04 	ldr.w	r0, [r2], #4
 80064b0:	f841 0b04 	str.w	r0, [r1], #4
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d1f9      	bne.n	80064ac <SecureElementInit+0x34>
 80064b8:	2202      	movs	r2, #2
 80064ba:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80064be:	2203      	movs	r2, #3
 80064c0:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 80064c4:	2204      	movs	r2, #4
 80064c6:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
 80064ca:	4a36      	ldr	r2, [pc, #216]	; (80065a4 <SecureElementInit+0x12c>)
 80064cc:	f10d 0159 	add.w	r1, sp, #89	; 0x59
 80064d0:	f852 0b04 	ldr.w	r0, [r2], #4
 80064d4:	f841 0b04 	str.w	r0, [r1], #4
 80064d8:	429a      	cmp	r2, r3
 80064da:	d1f9      	bne.n	80064d0 <SecureElementInit+0x58>
 80064dc:	2205      	movs	r2, #5
 80064de:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80064e2:	4a30      	ldr	r2, [pc, #192]	; (80065a4 <SecureElementInit+0x12c>)
 80064e4:	f10d 016a 	add.w	r1, sp, #106	; 0x6a
 80064e8:	f852 0b04 	ldr.w	r0, [r2], #4
 80064ec:	f841 0b04 	str.w	r0, [r1], #4
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d1f9      	bne.n	80064e8 <SecureElementInit+0x70>
 80064f4:	2206      	movs	r2, #6
 80064f6:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80064fa:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <SecureElementInit+0x12c>)
 80064fc:	f10d 017b 	add.w	r1, sp, #123	; 0x7b
 8006500:	f852 0b04 	ldr.w	r0, [r2], #4
 8006504:	f841 0b04 	str.w	r0, [r1], #4
 8006508:	429a      	cmp	r2, r3
 800650a:	d1f9      	bne.n	8006500 <SecureElementInit+0x88>
 800650c:	2207      	movs	r2, #7
 800650e:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 8006512:	4a24      	ldr	r2, [pc, #144]	; (80065a4 <SecureElementInit+0x12c>)
 8006514:	ae23      	add	r6, sp, #140	; 0x8c
 8006516:	6810      	ldr	r0, [r2, #0]
 8006518:	6851      	ldr	r1, [r2, #4]
 800651a:	4635      	mov	r5, r6
 800651c:	c503      	stmia	r5!, {r0, r1}
 800651e:	3208      	adds	r2, #8
 8006520:	429a      	cmp	r2, r3
 8006522:	462e      	mov	r6, r5
 8006524:	d1f7      	bne.n	8006516 <SecureElementInit+0x9e>
 8006526:	2308      	movs	r3, #8
 8006528:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 800652c:	237f      	movs	r3, #127	; 0x7f
 800652e:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
 8006538:	2381      	movs	r3, #129	; 0x81
 800653a:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
 800653e:	2382      	movs	r3, #130	; 0x82
 8006540:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
 8006544:	2383      	movs	r3, #131	; 0x83
 8006546:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800654a:	2384      	movs	r3, #132	; 0x84
 800654c:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
 8006550:	2385      	movs	r3, #133	; 0x85
 8006552:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
 8006556:	2386      	movs	r3, #134	; 0x86
 8006558:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 800655c:	2387      	movs	r3, #135	; 0x87
 800655e:	f88d 3135 	strb.w	r3, [sp, #309]	; 0x135
 8006562:	2388      	movs	r3, #136	; 0x88
 8006564:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
 8006568:	2389      	movs	r3, #137	; 0x89
 800656a:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
 800656e:	238a      	movs	r3, #138	; 0x8a
 8006570:	f88d 3168 	strb.w	r3, [sp, #360]	; 0x168
 8006574:	238b      	movs	r3, #139	; 0x8b
 8006576:	f88d 3179 	strb.w	r3, [sp, #377]	; 0x179
 800657a:	238c      	movs	r3, #140	; 0x8c
 800657c:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 8006580:	b16c      	cbz	r4, 800659e <SecureElementInit+0x126>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 8006582:	4d09      	ldr	r5, [pc, #36]	; (80065a8 <SecureElementInit+0x130>)

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8006584:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006588:	4669      	mov	r1, sp
 800658a:	4620      	mov	r0, r4
    SeNvm = nvm;
 800658c:	602c      	str	r4, [r5, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800658e:	f00b f964 	bl	801185a <memcpy1>

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    // Get a DevEUI from MCU unique ID
    SoftSeHalGetUniqueId( SeNvm->DevEui );
 8006592:	6828      	ldr	r0, [r5, #0]
 8006594:	f00b ff92 	bl	80124bc <SoftSeHalGetUniqueId>
#endif
#endif
    return SECURE_ELEMENT_SUCCESS;
 8006598:	2000      	movs	r0, #0
}
 800659a:	b068      	add	sp, #416	; 0x1a0
 800659c:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800659e:	2002      	movs	r0, #2
 80065a0:	e7fb      	b.n	800659a <SecureElementInit+0x122>
 80065a2:	bf00      	nop
 80065a4:	08018be9 	.word	0x08018be9
 80065a8:	20001214 	.word	0x20001214

080065ac <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 80065ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b0:	460d      	mov	r5, r1
 80065b2:	b0be      	sub	sp, #248	; 0xf8
 80065b4:	4616      	mov	r6, r2
 80065b6:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
 80065b8:	4607      	mov	r7, r0
 80065ba:	b370      	cbz	r0, 800661a <SecureElementAesEncrypt+0x6e>
 80065bc:	b36b      	cbz	r3, 800661a <SecureElementAesEncrypt+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80065be:	f011 040f 	ands.w	r4, r1, #15
 80065c2:	d12c      	bne.n	800661e <SecureElementAesEncrypt+0x72>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80065c4:	22f0      	movs	r2, #240	; 0xf0
 80065c6:	4621      	mov	r1, r4
 80065c8:	a801      	add	r0, sp, #4
 80065ca:	f00b f95a 	bl	8011882 <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80065ce:	4b15      	ldr	r3, [pc, #84]	; (8006624 <SecureElementAesEncrypt+0x78>)
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	4621      	mov	r1, r4
 80065d4:	f100 0214 	add.w	r2, r0, #20
 80065d8:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 80065dc:	5cd4      	ldrb	r4, [r2, r3]
 80065de:	42b4      	cmp	r4, r6
 80065e0:	d10b      	bne.n	80065fa <SecureElementAesEncrypt+0x4e>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        aes_set_key( pItem->KeyValue, 16, &aesContext );
 80065e2:	3315      	adds	r3, #21
 80065e4:	aa01      	add	r2, sp, #4
 80065e6:	2110      	movs	r1, #16
 80065e8:	4418      	add	r0, r3
 80065ea:	f7ff fd23 	bl	8006034 <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 80065ee:	462c      	mov	r4, r5
 80065f0:	1b2e      	subs	r6, r5, r4
 80065f2:	b2f6      	uxtb	r6, r6
 80065f4:	b944      	cbnz	r4, 8006608 <SecureElementAesEncrypt+0x5c>
 80065f6:	4620      	mov	r0, r4
 80065f8:	e003      	b.n	8006602 <SecureElementAesEncrypt+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80065fa:	3101      	adds	r1, #1
 80065fc:	2917      	cmp	r1, #23
 80065fe:	d1eb      	bne.n	80065d8 <SecureElementAesEncrypt+0x2c>
 8006600:	2003      	movs	r0, #3
            block = block + 16;
            size  = size - 16;
        }
    }
    return retval;
}
 8006602:	b03e      	add	sp, #248	; 0xf8
 8006604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8006608:	aa01      	add	r2, sp, #4
 800660a:	eb08 0106 	add.w	r1, r8, r6
 800660e:	19b8      	adds	r0, r7, r6
            size  = size - 16;
 8006610:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8006612:	f7ff fd8b 	bl	800612c <aes_encrypt>
            size  = size - 16;
 8006616:	b2a4      	uxth	r4, r4
 8006618:	e7ea      	b.n	80065f0 <SecureElementAesEncrypt+0x44>
        return SECURE_ELEMENT_ERROR_NPE;
 800661a:	2002      	movs	r0, #2
 800661c:	e7f1      	b.n	8006602 <SecureElementAesEncrypt+0x56>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800661e:	2005      	movs	r0, #5
 8006620:	e7ef      	b.n	8006602 <SecureElementAesEncrypt+0x56>
 8006622:	bf00      	nop
 8006624:	20001214 	.word	0x20001214

08006628 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006628:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 800662a:	4d1c      	ldr	r5, [pc, #112]	; (800669c <SecureElementSetKey.part.0+0x74>)
 800662c:	682c      	ldr	r4, [r5, #0]
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 800662e:	4603      	mov	r3, r0
 8006630:	b085      	sub	sp, #20
 8006632:	4608      	mov	r0, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006634:	2200      	movs	r2, #0
 8006636:	f104 0114 	add.w	r1, r4, #20
 800663a:	eb02 1602 	add.w	r6, r2, r2, lsl #4
 800663e:	5d8f      	ldrb	r7, [r1, r6]
 8006640:	429f      	cmp	r7, r3
 8006642:	d126      	bne.n	8006692 <SecureElementSetKey.part.0+0x6a>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8006644:	f083 0280 	eor.w	r2, r3, #128	; 0x80
 8006648:	2a09      	cmp	r2, #9
 800664a:	f106 0615 	add.w	r6, r6, #21
 800664e:	d819      	bhi.n	8006684 <SecureElementSetKey.part.0+0x5c>
 8006650:	f240 2349 	movw	r3, #585	; 0x249
 8006654:	40d3      	lsrs	r3, r2
 8006656:	43db      	mvns	r3, r3
 8006658:	f013 0301 	ands.w	r3, r3, #1
 800665c:	d112      	bne.n	8006684 <SecureElementSetKey.part.0+0x5c>
                uint8_t               decryptedKey[16] = { 0 };
 800665e:	e9cd 3300 	strd	r3, r3, [sp]
 8006662:	e9cd 3302 	strd	r3, r3, [sp, #8]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8006666:	227f      	movs	r2, #127	; 0x7f
 8006668:	2110      	movs	r1, #16
 800666a:	466b      	mov	r3, sp
 800666c:	f7ff ff9e 	bl	80065ac <SecureElementAesEncrypt>
 8006670:	4604      	mov	r4, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8006672:	6828      	ldr	r0, [r5, #0]
 8006674:	2210      	movs	r2, #16
 8006676:	4669      	mov	r1, sp
 8006678:	4430      	add	r0, r6
 800667a:	f00b f8ee 	bl	801185a <memcpy1>
}
 800667e:	4620      	mov	r0, r4
 8006680:	b005      	add	sp, #20
 8006682:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8006684:	4601      	mov	r1, r0
 8006686:	2210      	movs	r2, #16
 8006688:	19a0      	adds	r0, r4, r6
 800668a:	f00b f8e6 	bl	801185a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800668e:	2400      	movs	r4, #0
 8006690:	e7f5      	b.n	800667e <SecureElementSetKey.part.0+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8006692:	3201      	adds	r2, #1
 8006694:	2a17      	cmp	r2, #23
 8006696:	d1d0      	bne.n	800663a <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006698:	2403      	movs	r4, #3
 800669a:	e7f0      	b.n	800667e <SecureElementSetKey.part.0+0x56>
 800669c:	20001214 	.word	0x20001214

080066a0 <SecureElementGetDevEui>:
}

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 80066a0:	4b01      	ldr	r3, [pc, #4]	; (80066a8 <SecureElementGetDevEui+0x8>)
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	20001214 	.word	0x20001214

080066ac <SecureElementGetJoinEui>:
    return SECURE_ELEMENT_SUCCESS;
}

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 80066ac:	4b01      	ldr	r3, [pc, #4]	; (80066b4 <SecureElementGetJoinEui+0x8>)
 80066ae:	6818      	ldr	r0, [r3, #0]
}
 80066b0:	3008      	adds	r0, #8
 80066b2:	4770      	bx	lr
 80066b4:	20001214 	.word	0x20001214

080066b8 <SecureElementGetPin>:
    return SECURE_ELEMENT_SUCCESS;
}

uint8_t* SecureElementGetPin( void )
{
    return SeNvm->Pin;
 80066b8:	4b01      	ldr	r3, [pc, #4]	; (80066c0 <SecureElementGetPin+0x8>)
 80066ba:	6818      	ldr	r0, [r3, #0]
}
 80066bc:	3010      	adds	r0, #16
 80066be:	4770      	bx	lr
 80066c0:	20001214 	.word	0x20001214

080066c4 <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80066c4:	4a06      	ldr	r2, [pc, #24]	; (80066e0 <OnRadioTxTimeout+0x1c>)
 80066c6:	7813      	ldrb	r3, [r2, #0]
 80066c8:	f043 0308 	orr.w	r3, r3, #8
 80066cc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <OnRadioTxTimeout+0x20>)
 80066d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80066d4:	b113      	cbz	r3, 80066dc <OnRadioTxTimeout+0x18>
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	b103      	cbz	r3, 80066dc <OnRadioTxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80066da:	4718      	bx	r3
    }
}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20001218 	.word	0x20001218
 80066e4:	2000121c 	.word	0x2000121c

080066e8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 80066e8:	4a06      	ldr	r2, [pc, #24]	; (8006704 <OnRadioRxError+0x1c>)
 80066ea:	7813      	ldrb	r3, [r2, #0]
 80066ec:	f043 0304 	orr.w	r3, r3, #4
 80066f0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <OnRadioRxError+0x20>)
 80066f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80066f8:	b113      	cbz	r3, 8006700 <OnRadioRxError+0x18>
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	b103      	cbz	r3, 8006700 <OnRadioRxError+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80066fe:	4718      	bx	r3
    }
}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20001218 	.word	0x20001218
 8006708:	2000121c 	.word	0x2000121c

0800670c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800670c:	4a06      	ldr	r2, [pc, #24]	; (8006728 <OnRadioRxTimeout+0x1c>)
 800670e:	7813      	ldrb	r3, [r2, #0]
 8006710:	f043 0302 	orr.w	r3, r3, #2
 8006714:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <OnRadioRxTimeout+0x20>)
 8006718:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800671c:	b113      	cbz	r3, 8006724 <OnRadioRxTimeout+0x18>
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	b103      	cbz	r3, 8006724 <OnRadioRxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8006722:	4718      	bx	r3
    }
}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20001218 	.word	0x20001218
 800672c:	2000121c 	.word	0x2000121c

08006730 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006730:	4b04      	ldr	r3, [pc, #16]	; (8006744 <UpdateRxSlotIdleState+0x14>)
 8006732:	4a05      	ldr	r2, [pc, #20]	; (8006748 <UpdateRxSlotIdleState+0x18>)
 8006734:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8006738:	2b02      	cmp	r3, #2
 800673a:	bf18      	it	ne
 800673c:	2306      	movne	r3, #6
 800673e:	f882 348c 	strb.w	r3, [r2, #1164]	; 0x48c
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8006742:	4770      	bx	lr
 8006744:	20001734 	.word	0x20001734
 8006748:	2000121c 	.word	0x2000121c

0800674c <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800674c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <GetMaxAppPayloadWithoutFOptsLength+0x28>)
    getPhy.Datarate = datarate;
 8006750:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006754:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8006758:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800675c:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8006760:	220d      	movs	r2, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006762:	a902      	add	r1, sp, #8
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8006764:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006768:	f00c f914 	bl	8012994 <RegionGetPhyParam>

    return phyParam.Value;
}
 800676c:	b2c0      	uxtb	r0, r0
 800676e:	b005      	add	sp, #20
 8006770:	f85d fb04 	ldr.w	pc, [sp], #4
 8006774:	20001734 	.word	0x20001734

08006778 <OnRetransmitTimeoutTimerEvent>:
{
 8006778:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800677a:	4c0a      	ldr	r4, [pc, #40]	; (80067a4 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800677c:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8006780:	f7fe fdb8 	bl	80052f4 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8006784:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8006788:	b113      	cbz	r3, 8006790 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800678a:	2301      	movs	r3, #1
 800678c:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006790:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
 8006794:	b123      	cbz	r3, 80067a0 <OnRetransmitTimeoutTimerEvent+0x28>
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	b113      	cbz	r3, 80067a0 <OnRetransmitTimeoutTimerEvent+0x28>
}
 800679a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 800679e:	4718      	bx	r3
}
 80067a0:	bd10      	pop	{r4, pc}
 80067a2:	bf00      	nop
 80067a4:	2000121c 	.word	0x2000121c

080067a8 <PrepareRxDoneAbort>:
{
 80067a8:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80067aa:	4c0c      	ldr	r4, [pc, #48]	; (80067dc <PrepareRxDoneAbort+0x34>)
 80067ac:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80067b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b4:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80067b8:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80067bc:	b113      	cbz	r3, 80067c4 <PrepareRxDoneAbort+0x1c>
        OnRetransmitTimeoutTimerEvent( NULL );
 80067be:	2000      	movs	r0, #0
 80067c0:	f7ff ffda 	bl	8006778 <OnRetransmitTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80067c4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80067c8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067cc:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 80067d0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
}
 80067d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
 80067d8:	f7ff bfaa 	b.w	8006730 <UpdateRxSlotIdleState>
 80067dc:	2000121c 	.word	0x2000121c

080067e0 <HandleRadioRxErrorTimeout>:
{
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80067e4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006894 <HandleRadioRxErrorTimeout+0xb4>
 80067e8:	f898 3184 	ldrb.w	r3, [r8, #388]	; 0x184
 80067ec:	2b02      	cmp	r3, #2
{
 80067ee:	4606      	mov	r6, r0
 80067f0:	460d      	mov	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80067f2:	d002      	beq.n	80067fa <HandleRadioRxErrorTimeout+0x1a>
        Radio.Sleep( );
 80067f4:	4b28      	ldr	r3, [pc, #160]	; (8006898 <HandleRadioRxErrorTimeout+0xb8>)
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80067fa:	f00b fe8b 	bl	8012514 <LoRaMacClassBIsBeaconExpected>
 80067fe:	4604      	mov	r4, r0
 8006800:	b128      	cbz	r0, 800680e <HandleRadioRxErrorTimeout+0x2e>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8006802:	2002      	movs	r0, #2
 8006804:	f00b fe7e 	bl	8012504 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8006808:	2000      	movs	r0, #0
 800680a:	f00b fe7e 	bl	801250a <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800680e:	f898 3184 	ldrb.w	r3, [r8, #388]	; 0x184
 8006812:	2b01      	cmp	r3, #1
 8006814:	d117      	bne.n	8006846 <HandleRadioRxErrorTimeout+0x66>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8006816:	f00b fe7f 	bl	8012518 <LoRaMacClassBIsPingExpected>
 800681a:	4607      	mov	r7, r0
 800681c:	b130      	cbz	r0, 800682c <HandleRadioRxErrorTimeout+0x4c>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800681e:	2000      	movs	r0, #0
 8006820:	f00b fe71 	bl	8012506 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8006824:	2000      	movs	r0, #0
 8006826:	f00b fe71 	bl	801250c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800682a:	463c      	mov	r4, r7
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800682c:	f00b fe76 	bl	801251c <LoRaMacClassBIsMulticastExpected>
 8006830:	b148      	cbz	r0, 8006846 <HandleRadioRxErrorTimeout+0x66>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8006832:	2000      	movs	r0, #0
 8006834:	f00b fe68 	bl	8012508 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8006838:	2000      	movs	r0, #0
 800683a:	f00b fe68 	bl	801250e <LoRaMacClassBMulticastSlotTimerEvent>
}
 800683e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    UpdateRxSlotIdleState( );
 8006842:	f7ff bf75 	b.w	8006730 <UpdateRxSlotIdleState>
    if( classBRx == false )
 8006846:	2c00      	cmp	r4, #0
 8006848:	d1f9      	bne.n	800683e <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 800684a:	4c14      	ldr	r4, [pc, #80]	; (800689c <HandleRadioRxErrorTimeout+0xbc>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800684c:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
            if( MacCtx.NodeAckRequested == true )
 8006850:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8006854:	b9ba      	cbnz	r2, 8006886 <HandleRadioRxErrorTimeout+0xa6>
            if( MacCtx.NodeAckRequested == true )
 8006856:	b10b      	cbz	r3, 800685c <HandleRadioRxErrorTimeout+0x7c>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8006858:	f884 6445 	strb.w	r6, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800685c:	4630      	mov	r0, r6
 800685e:	f001 ff31 	bl	80086c4 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8006862:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 8006866:	f00b f914 	bl	8011a92 <TimerGetElapsedTime>
 800686a:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800686e:	4298      	cmp	r0, r3
 8006870:	d3e5      	bcc.n	800683e <HandleRadioRxErrorTimeout+0x5e>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8006872:	480b      	ldr	r0, [pc, #44]	; (80068a0 <HandleRadioRxErrorTimeout+0xc0>)
 8006874:	f7fe fd3e 	bl	80052f4 <TimerStop>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8006878:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800687c:	f043 0320 	orr.w	r3, r3, #32
 8006880:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
 8006884:	e7db      	b.n	800683e <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 8006886:	b10b      	cbz	r3, 800688c <HandleRadioRxErrorTimeout+0xac>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8006888:	f884 5445 	strb.w	r5, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800688c:	4628      	mov	r0, r5
 800688e:	f001 ff19 	bl	80086c4 <LoRaMacConfirmQueueSetStatusCmn>
 8006892:	e7f1      	b.n	8006878 <HandleRadioRxErrorTimeout+0x98>
 8006894:	20001734 	.word	0x20001734
 8006898:	08017300 	.word	0x08017300
 800689c:	2000121c 	.word	0x2000121c
 80068a0:	200015bc 	.word	0x200015bc

080068a4 <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 80068a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80068a6:	4c15      	ldr	r4, [pc, #84]	; (80068fc <OpenContinuousRxCWindow+0x58>)
 80068a8:	4d15      	ldr	r5, [pc, #84]	; (8006900 <OpenContinuousRxCWindow+0x5c>)
 80068aa:	f504 767a 	add.w	r6, r4, #1000	; 0x3e8
 80068ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80068b0:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
 80068b4:	f995 107c 	ldrsb.w	r1, [r5, #124]	; 0x7c
 80068b8:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 80068bc:	9600      	str	r6, [sp, #0]
 80068be:	f00c f885 	bl	80129cc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80068c2:	2302      	movs	r3, #2
 80068c4:	f884 33fa 	strb.w	r3, [r4, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80068c8:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
 80068cc:	f884 33fb 	strb.w	r3, [r4, #1019]	; 0x3fb
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80068d0:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80068d4:	2301      	movs	r3, #1
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80068d6:	f204 4224 	addw	r2, r4, #1060	; 0x424
 80068da:	4631      	mov	r1, r6
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80068dc:	f884 33f9 	strb.w	r3, [r4, #1017]	; 0x3f9
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80068e0:	f00c f881 	bl	80129e6 <RegionRxConfig>
 80068e4:	b138      	cbz	r0, 80068f6 <OpenContinuousRxCWindow+0x52>
    {
        Radio.Rx( 0 ); // Continuous mode
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <OpenContinuousRxCWindow+0x60>)
 80068e8:	2000      	movs	r0, #0
 80068ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ec:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80068ee:	f894 33fa 	ldrb.w	r3, [r4, #1018]	; 0x3fa
 80068f2:	f884 348c 	strb.w	r3, [r4, #1164]	; 0x48c
    }
}
 80068f6:	b002      	add	sp, #8
 80068f8:	bd70      	pop	{r4, r5, r6, pc}
 80068fa:	bf00      	nop
 80068fc:	2000121c 	.word	0x2000121c
 8006900:	20001734 	.word	0x20001734
 8006904:	08017300 	.word	0x08017300

08006908 <OnRadioRxDone>:
{
 8006908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690c:	4616      	mov	r6, r2
 800690e:	461d      	mov	r5, r3
 8006910:	4680      	mov	r8, r0
 8006912:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8006914:	f00b f8b6 	bl	8011a84 <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8006918:	4a0b      	ldr	r2, [pc, #44]	; (8006948 <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800691a:	4c0c      	ldr	r4, [pc, #48]	; (800694c <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800691c:	7813      	ldrb	r3, [r2, #0]
    RxDoneParams.Size = size;
 800691e:	8127      	strh	r7, [r4, #8]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8006920:	f023 0311 	bic.w	r3, r3, #17
 8006924:	f043 0311 	orr.w	r3, r3, #17
 8006928:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <OnRadioRxDone+0x48>)
    RxDoneParams.Rssi = rssi;
 800692c:	8166      	strh	r6, [r4, #10]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800692e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
    RxDoneParams.Snr = snr;
 8006932:	7325      	strb	r5, [r4, #12]
    RxDoneParams.Payload = payload;
 8006934:	e9c4 0800 	strd	r0, r8, [r4]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8006938:	b123      	cbz	r3, 8006944 <OnRadioRxDone+0x3c>
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	b113      	cbz	r3, 8006944 <OnRadioRxDone+0x3c>
}
 800693e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 8006942:	4718      	bx	r3
}
 8006944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006948:	20001218 	.word	0x20001218
 800694c:	20001e38 	.word	0x20001e38
 8006950:	2000121c 	.word	0x2000121c

08006954 <OnRadioTxDone>:
{
 8006954:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8006956:	f00b f895 	bl	8011a84 <TimerGetCurrentTime>
 800695a:	4b0e      	ldr	r3, [pc, #56]	; (8006994 <OnRadioTxDone+0x40>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 800695c:	4d0e      	ldr	r5, [pc, #56]	; (8006998 <OnRadioTxDone+0x44>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800695e:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8006960:	466c      	mov	r4, sp
 8006962:	4620      	mov	r0, r4
 8006964:	f00a ffeb 	bl	801193e <SysTimeGet>
 8006968:	e894 0003 	ldmia.w	r4, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800696c:	4a0b      	ldr	r2, [pc, #44]	; (800699c <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 800696e:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8006972:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8006976:	7813      	ldrb	r3, [r2, #0]
 8006978:	f043 0320 	orr.w	r3, r3, #32
 800697c:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800697e:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8006982:	b12b      	cbz	r3, 8006990 <OnRadioTxDone+0x3c>
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	b11b      	cbz	r3, 8006990 <OnRadioTxDone+0x3c>
}
 8006988:	b003      	add	sp, #12
 800698a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
 800698e:	4718      	bx	r3
}
 8006990:	b003      	add	sp, #12
 8006992:	bd30      	pop	{r4, r5, pc}
 8006994:	20001e48 	.word	0x20001e48
 8006998:	2000121c 	.word	0x2000121c
 800699c:	20001218 	.word	0x20001218

080069a0 <ResetMacParameters>:
{
 80069a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80069a4:	4c46      	ldr	r4, [pc, #280]	; (8006ac0 <ResetMacParameters+0x120>)
    MacCtx.ResponseTimeoutStartTime = 0;
 80069a6:	4d47      	ldr	r5, [pc, #284]	; (8006ac4 <ResetMacParameters+0x124>)
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80069a8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 80069ac:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80069b0:	e9d4 012b 	ldrd	r0, r1, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80069b4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 80069b8:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80069bc:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80069c0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80069c4:	e9d4 012d 	ldrd	r0, r1, [r4, #180]	; 0xb4
 80069c8:	f104 0378 	add.w	r3, r4, #120	; 0x78
 80069cc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80069d0:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
 80069d4:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80069d8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80069dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
{
 80069e0:	b090      	sub	sp, #64	; 0x40
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80069e2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80069e6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80069ea:	f504 7351 	add.w	r3, r4, #836	; 0x344
 80069ee:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80069f0:	f504 7356 	add.w	r3, r4, #856	; 0x358
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80069f4:	2600      	movs	r6, #0
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80069f6:	f04f 0801 	mov.w	r8, #1
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80069fa:	9304      	str	r3, [sp, #16]
    params.Bands = &RegionBands;
 80069fc:	4b32      	ldr	r3, [pc, #200]	; (8006ac8 <ResetMacParameters+0x128>)
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80069fe:	f884 619c 	strb.w	r6, [r4, #412]	; 0x19c
    Nvm.MacGroup1.AdrAckCounter = 0;
 8006a02:	6366      	str	r6, [r4, #52]	; 0x34
    Nvm.MacGroup2.MaxDCycle = 0;
 8006a04:	f884 6187 	strb.w	r6, [r4, #391]	; 0x187
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8006a08:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
    Nvm.MacGroup1.SrvAckRequested = false;
 8006a0c:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8006a10:	f884 6189 	strb.w	r6, [r4, #393]	; 0x189
    Nvm.MacGroup2.DownlinkReceived = false;
 8006a14:	f884 618a 	strb.w	r6, [r4, #394]	; 0x18a
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006a18:	a903      	add	r1, sp, #12
    MacCtx.ResponseTimeoutStartTime = 0;
 8006a1a:	f8c5 6494 	str.w	r6, [r5, #1172]	; 0x494
    MacCtx.ChannelsNbTransCounter = 0;
 8006a1e:	f8a5 6418 	strh.w	r6, [r5, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8006a22:	f885 641a 	strb.w	r6, [r5, #1050]	; 0x41a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8006a26:	f88d 8018 	strb.w	r8, [sp, #24]
    params.Bands = &RegionBands;
 8006a2a:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8006a2c:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8006a30:	f00b ffc0 	bl	80129b4 <RegionInitDefaults>
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8006a34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006a36:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006a3a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006a3e:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8006a42:	f885 63d4 	strb.w	r6, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8006a46:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
 8006a4a:	f885 33e7 	strb.w	r3, [r5, #999]	; 0x3e7
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8006a4e:	f505 7775 	add.w	r7, r5, #980	; 0x3d4
 8006a52:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006a54:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 8006a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    MacCtx.RxWindow2Config.RxContinuous = false;
 8006a5a:	f885 63e5 	strb.w	r6, [r5, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8006a5e:	f885 83e6 	strb.w	r8, [r5, #998]	; 0x3e6
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8006a66:	2302      	movs	r3, #2
 8006a68:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( MacCtx.MacCallbacks != NULL )
 8006a6c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
    MacCtx.Channel = 0;
 8006a70:	f885 641b 	strb.w	r6, [r5, #1051]	; 0x41b
    classBCallbacks.MacProcessNotify = NULL;
 8006a74:	e9cd 6601 	strd	r6, r6, [sp, #4]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8006a78:	f885 83f9 	strb.w	r8, [r5, #1017]	; 0x3f9
    if( MacCtx.MacCallbacks != NULL )
 8006a7c:	b11b      	cbz	r3, 8006a86 <ResetMacParameters+0xe6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8006a7e:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8006a80:	68db      	ldr	r3, [r3, #12]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8006a82:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8006a84:	9302      	str	r3, [sp, #8]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8006a86:	4b11      	ldr	r3, [pc, #68]	; (8006acc <ResetMacParameters+0x12c>)
 8006a88:	9307      	str	r3, [sp, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8006a8a:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
 8006a8e:	9208      	str	r2, [sp, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8006a90:	f1a3 0214 	sub.w	r2, r3, #20
 8006a94:	9209      	str	r2, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8006a96:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <ResetMacParameters+0x130>)
 8006a98:	920b      	str	r2, [sp, #44]	; 0x2c
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8006a9a:	3321      	adds	r3, #33	; 0x21
 8006a9c:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8006a9e:	f1a2 0384 	sub.w	r3, r2, #132	; 0x84
 8006aa2:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8006aa4:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8006aa8:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8006aaa:	a901      	add	r1, sp, #4
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8006aac:	1d13      	adds	r3, r2, #4
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8006aae:	a807      	add	r0, sp, #28
 8006ab0:	f202 6204 	addw	r2, r2, #1540	; 0x604
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8006ab4:	930e      	str	r3, [sp, #56]	; 0x38
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8006ab6:	f00b fd24 	bl	8012502 <LoRaMacClassBInit>
}
 8006aba:	b010      	add	sp, #64	; 0x40
 8006abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac0:	20001734 	.word	0x20001734
 8006ac4:	2000121c 	.word	0x2000121c
 8006ac8:	20001e20 	.word	0x20001e20
 8006acc:	20001688 	.word	0x20001688
 8006ad0:	20001804 	.word	0x20001804

08006ad4 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Radio.Standby( );
 8006ad6:	4f0b      	ldr	r7, [pc, #44]	; (8006b04 <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8006ad8:	4d0b      	ldr	r5, [pc, #44]	; (8006b08 <RxWindowSetup.constprop.0+0x34>)
 8006ada:	4e0c      	ldr	r6, [pc, #48]	; (8006b0c <RxWindowSetup.constprop.0+0x38>)
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8006adc:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8006ade:	f7fe fc09 	bl	80052f4 <TimerStop>
    Radio.Standby( );
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8006ae6:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
 8006aea:	f205 4224 	addw	r2, r5, #1060	; 0x424
 8006aee:	4621      	mov	r1, r4
 8006af0:	f00b ff79 	bl	80129e6 <RegionRxConfig>
 8006af4:	b128      	cbz	r0, 8006b02 <RxWindowSetup.constprop.0+0x2e>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	6db0      	ldr	r0, [r6, #88]	; 0x58
 8006afa:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8006afc:	7ca3      	ldrb	r3, [r4, #18]
 8006afe:	f885 348c 	strb.w	r3, [r5, #1164]	; 0x48c
}
 8006b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b04:	08017300 	.word	0x08017300
 8006b08:	2000121c 	.word	0x2000121c
 8006b0c:	20001734 	.word	0x20001734

08006b10 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8006b10:	480e      	ldr	r0, [pc, #56]	; (8006b4c <OnRxWindow1TimerEvent+0x3c>)
 8006b12:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 8006b16:	f880 33c0 	strb.w	r3, [r0, #960]	; 0x3c0
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <OnRxWindow1TimerEvent+0x40>)
 8006b1c:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 8006b20:	f880 23c3 	strb.w	r2, [r0, #963]	; 0x3c3
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006b24:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8006b28:	f880 23d0 	strb.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8006b2c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8006b30:	f880 33d3 	strb.w	r3, [r0, #979]	; 0x3d3
    MacCtx.RxWindow1Config.RxContinuous = false;
 8006b34:	2200      	movs	r2, #0
 8006b36:	f880 23d1 	strb.w	r2, [r0, #977]	; 0x3d1
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8006b3a:	f880 23d2 	strb.w	r2, [r0, #978]	; 0x3d2
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8006b3e:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8006b42:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8006b46:	f7ff bfc5 	b.w	8006ad4 <RxWindowSetup.constprop.0>
 8006b4a:	bf00      	nop
 8006b4c:	2000121c 	.word	0x2000121c
 8006b50:	20001734 	.word	0x20001734

08006b54 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8006b54:	4810      	ldr	r0, [pc, #64]	; (8006b98 <OnRxWindow2TimerEvent+0x44>)
 8006b56:	f890 348c 	ldrb.w	r3, [r0, #1164]	; 0x48c
 8006b5a:	b1db      	cbz	r3, 8006b94 <OnRxWindow2TimerEvent+0x40>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8006b5c:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 8006b60:	f880 33d4 	strb.w	r3, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <OnRxWindow2TimerEvent+0x48>)
 8006b66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b68:	f8c0 23d8 	str.w	r2, [r0, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006b6c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8006b70:	f880 23e4 	strb.w	r2, [r0, #996]	; 0x3e4
    MacCtx.RxWindow2Config.RxContinuous = false;
 8006b74:	2200      	movs	r2, #0
 8006b76:	f880 23e5 	strb.w	r2, [r0, #997]	; 0x3e5
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8006b7a:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8006b7e:	f880 33e7 	strb.w	r3, [r0, #999]	; 0x3e7
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8006b82:	2201      	movs	r2, #1
 8006b84:	f880 23e6 	strb.w	r2, [r0, #998]	; 0x3e6
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8006b88:	f500 7175 	add.w	r1, r0, #980	; 0x3d4
 8006b8c:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8006b90:	f7ff bfa0 	b.w	8006ad4 <RxWindowSetup.constprop.0>
}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	2000121c 	.word	0x2000121c
 8006b9c:	20001734 	.word	0x20001734

08006ba0 <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	b091      	sub	sp, #68	; 0x44
    uint8_t status = 0;
 8006ba6:	f04f 0800 	mov.w	r8, #0
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8006baa:	2b01      	cmp	r3, #1
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8006bac:	4605      	mov	r5, r0
 8006bae:	460f      	mov	r7, r1
 8006bb0:	9202      	str	r2, [sp, #8]
    uint8_t status = 0;
 8006bb2:	f88d 8015 	strb.w	r8, [sp, #21]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8006bb6:	f8ad 8018 	strh.w	r8, [sp, #24]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8006bba:	d803      	bhi.n	8006bc4 <ProcessMacCommands.constprop.0+0x24>
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006bbc:	4ec3      	ldr	r6, [pc, #780]	; (8006ecc <ProcessMacCommands.constprop.0+0x32c>)
 8006bbe:	46c1      	mov	r9, r8
    while( macIndex < commandsSize )
 8006bc0:	45b9      	cmp	r9, r7
 8006bc2:	d302      	bcc.n	8006bca <ProcessMacCommands.constprop.0+0x2a>
}
 8006bc4:	b011      	add	sp, #68	; 0x44
 8006bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8006bca:	f815 0009 	ldrb.w	r0, [r5, r9]
 8006bce:	f001 fce7 	bl	80085a0 <LoRaMacCommandsGetCmdSize>
 8006bd2:	4448      	add	r0, r9
 8006bd4:	42b8      	cmp	r0, r7
 8006bd6:	dcf5      	bgt.n	8006bc4 <ProcessMacCommands.constprop.0+0x24>
        switch( payload[macIndex++] )
 8006bd8:	f815 3009 	ldrb.w	r3, [r5, r9]
 8006bdc:	f109 0401 	add.w	r4, r9, #1
 8006be0:	3b02      	subs	r3, #2
 8006be2:	b2e4      	uxtb	r4, r4
 8006be4:	2b11      	cmp	r3, #17
 8006be6:	d8ed      	bhi.n	8006bc4 <ProcessMacCommands.constprop.0+0x24>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <ProcessMacCommands.constprop.0+0x50>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c39 	.word	0x08006c39
 8006bf4:	08006c6b 	.word	0x08006c6b
 8006bf8:	08006d6f 	.word	0x08006d6f
 8006bfc:	08006d97 	.word	0x08006d97
 8006c00:	08006e2d 	.word	0x08006e2d
 8006c04:	08006e59 	.word	0x08006e59
 8006c08:	08006ed5 	.word	0x08006ed5
 8006c0c:	08006f11 	.word	0x08006f11
 8006c10:	08006f9d 	.word	0x08006f9d
 8006c14:	08006bc5 	.word	0x08006bc5
 8006c18:	08006bc5 	.word	0x08006bc5
 8006c1c:	08006ffb 	.word	0x08006ffb
 8006c20:	08006bc5 	.word	0x08006bc5
 8006c24:	08006bc5 	.word	0x08006bc5
 8006c28:	080070b9 	.word	0x080070b9
 8006c2c:	080070e1 	.word	0x080070e1
 8006c30:	08007125 	.word	0x08007125
 8006c34:	08007163 	.word	0x08007163
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8006c38:	2004      	movs	r0, #4
 8006c3a:	f001 fd5d 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 8006c3e:	b190      	cbz	r0, 8006c66 <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8006c40:	2104      	movs	r1, #4
 8006c42:	2000      	movs	r0, #0
 8006c44:	f001 fd1c 	bl	8008680 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8006c48:	5d2a      	ldrb	r2, [r5, r4]
 8006c4a:	4ba1      	ldr	r3, [pc, #644]	; (8006ed0 <ProcessMacCommands.constprop.0+0x330>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8006c4c:	f109 0403 	add.w	r4, r9, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8006c50:	f109 0902 	add.w	r9, r9, #2
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8006c54:	fa5f f989 	uxtb.w	r9, r9
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8006c58:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8006c5c:	f815 2009 	ldrb.w	r2, [r5, r9]
 8006c60:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 8006c64:	b2e4      	uxtb	r4, r4
                uint8_t eirpDwellTime = payload[macIndex++];
 8006c66:	46a1      	mov	r9, r4
 8006c68:	e7aa      	b.n	8006bc0 <ProcessMacCommands.constprop.0+0x20>
                int8_t linkAdrDatarate = DR_0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f88d 3016 	strb.w	r3, [sp, #22]
                int8_t linkAdrTxPower = TX_POWER_0;
 8006c70:	f88d 3017 	strb.w	r3, [sp, #23]
                uint8_t linkAdrNbRep = 0;
 8006c74:	f88d 301c 	strb.w	r3, [sp, #28]
                uint8_t linkAdrNbBytesParsed = 0;
 8006c78:	f88d 3020 	strb.w	r3, [sp, #32]
                if( adrBlockFound == false )
 8006c7c:	f1b8 0f00 	cmp.w	r8, #0
 8006c80:	d170      	bne.n	8006d64 <ProcessMacCommands.constprop.0+0x1c4>
                            linkAdrReq.PayloadSize = 5;
 8006c82:	f04f 0805 	mov.w	r8, #5
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006c86:	f896 2080 	ldrb.w	r2, [r6, #128]	; 0x80
 8006c8a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8006c8e:	1e63      	subs	r3, r4, #1
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8006c90:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
 8006c94:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8006c98:	442b      	add	r3, r5
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8006c9a:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8006c9e:	930d      	str	r3, [sp, #52]	; 0x34
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8006ca0:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8006ca4:	f896 3186 	ldrb.w	r3, [r6, #390]	; 0x186
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8006ca8:	f896 206c 	ldrb.w	r2, [r6, #108]	; 0x6c
 8006cac:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8006cb0:	f8d6 2198 	ldr.w	r2, [r6, #408]	; 0x198
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8006cb4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8006cb8:	920c      	str	r2, [sp, #48]	; 0x30
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8006cba:	b373      	cbz	r3, 8006d1a <ProcessMacCommands.constprop.0+0x17a>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8006cbc:	1c7b      	adds	r3, r7, #1
 8006cbe:	1b1b      	subs	r3, r3, r4
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8006cc6:	ab08      	add	r3, sp, #32
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	ab07      	add	r3, sp, #28
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
 8006cd2:	f10d 0317 	add.w	r3, sp, #23
 8006cd6:	f10d 0216 	add.w	r2, sp, #22
 8006cda:	a90c      	add	r1, sp, #48	; 0x30
 8006cdc:	f00b fe99 	bl	8012a12 <RegionLinkAdrReq>
 8006ce0:	f88d 0015 	strb.w	r0, [sp, #21]
                        if( ( status & 0x07 ) == 0x07 )
 8006ce4:	f000 0007 	and.w	r0, r0, #7
 8006ce8:	2807      	cmp	r0, #7
 8006cea:	d113      	bne.n	8006d14 <ProcessMacCommands.constprop.0+0x174>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8006cec:	f996 2045 	ldrsb.w	r2, [r6, #69]	; 0x45
 8006cf0:	f99d 3016 	ldrsb.w	r3, [sp, #22]
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8006cf4:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8006cf8:	429a      	cmp	r2, r3
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8006cfa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006cfe:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8006d02:	bfb8      	it	lt
 8006d04:	2201      	movlt	r2, #1
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8006d06:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8006d0a:	bfb8      	it	lt
 8006d0c:	f886 2189 	strblt.w	r2, [r6, #393]	; 0x189
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8006d10:	f886 306c 	strb.w	r3, [r6, #108]	; 0x6c
                            linkAdrReq.PayloadSize = 5;
 8006d14:	f04f 0900 	mov.w	r9, #0
 8006d18:	e009      	b.n	8006d2e <ProcessMacCommands.constprop.0+0x18e>
 8006d1a:	2305      	movs	r3, #5
 8006d1c:	e7d1      	b.n	8006cc2 <ProcessMacCommands.constprop.0+0x122>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f10d 0115 	add.w	r1, sp, #21
 8006d24:	2003      	movs	r0, #3
 8006d26:	f001 fb85 	bl	8008434 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8006d2a:	f109 0901 	add.w	r9, r9, #1
 8006d2e:	fa5f f289 	uxtb.w	r2, r9
 8006d32:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006d36:	fbb3 f1f8 	udiv	r1, r3, r8
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	d8ef      	bhi.n	8006d1e <ProcessMacCommands.constprop.0+0x17e>
                        macIndex += linkAdrNbBytesParsed - 1;
 8006d3e:	441c      	add	r4, r3
 8006d40:	b2e4      	uxtb	r4, r4
 8006d42:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8006d46:	fa5f f989 	uxtb.w	r9, r9
                        if( macIndex >= commandsSize )
 8006d4a:	454f      	cmp	r7, r9
 8006d4c:	d906      	bls.n	8006d5c <ProcessMacCommands.constprop.0+0x1bc>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8006d4e:	f815 3009 	ldrb.w	r3, [r5, r9]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d097      	beq.n	8006c86 <ProcessMacCommands.constprop.0+0xe6>
                    if( macIndex < commandsSize )
 8006d56:	42a7      	cmp	r7, r4
 8006d58:	bf98      	it	ls
 8006d5a:	46a1      	movls	r9, r4
                break;
 8006d5c:	464c      	mov	r4, r9
 8006d5e:	f04f 0801 	mov.w	r8, #1
 8006d62:	e780      	b.n	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                    macIndex += 4;
 8006d64:	f109 0905 	add.w	r9, r9, #5
 8006d68:	fa5f f989 	uxtb.w	r9, r9
 8006d6c:	e7f6      	b.n	8006d5c <ProcessMacCommands.constprop.0+0x1bc>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8006d6e:	5d2b      	ldrb	r3, [r5, r4]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8006d70:	2201      	movs	r2, #1
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	f109 0902 	add.w	r9, r9, #2
 8006d7a:	f886 3187 	strb.w	r3, [r6, #391]	; 0x187
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8006d82:	fa5f f989 	uxtb.w	r9, r9
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8006d86:	f8a6 318c 	strh.w	r3, [r6, #396]	; 0x18c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	a906      	add	r1, sp, #24
 8006d8e:	2004      	movs	r0, #4
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8006d90:	f001 fb50 	bl	8008434 <LoRaMacCommandsAddCmd>
                break;
 8006d94:	e0ba      	b.n	8006f0c <ProcessMacCommands.constprop.0+0x36c>
                status = 0x07;
 8006d96:	2307      	movs	r3, #7
 8006d98:	f88d 3015 	strb.w	r3, [sp, #21]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006d9c:	5d2b      	ldrb	r3, [r5, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8006d9e:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006da2:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8006da6:	f003 030f 	and.w	r3, r3, #15
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006daa:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8006dae:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006db2:	f109 0204 	add.w	r2, r9, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8006db6:	f109 0303 	add.w	r3, r9, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006dba:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	f109 0405 	add.w	r4, r9, #5
                macIndex++;
 8006dc2:	f109 0902 	add.w	r9, r9, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006dc6:	5ce9      	ldrb	r1, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006dc8:	5cab      	ldrb	r3, [r5, r2]
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8006dca:	fa5f f989 	uxtb.w	r9, r9
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006dce:	041b      	lsls	r3, r3, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8006dd0:	f815 2009 	ldrb.w	r2, [r5, r9]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006dd4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006dd8:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8006dda:	2264      	movs	r2, #100	; 0x64
 8006ddc:	4353      	muls	r3, r2
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8006dde:	a90c      	add	r1, sp, #48	; 0x30
                rxParamSetupReq.Frequency *= 100;
 8006de0:	930d      	str	r3, [sp, #52]	; 0x34
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8006de2:	f00b fe26 	bl	8012a32 <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
 8006de6:	f000 0307 	and.w	r3, r0, #7
 8006dea:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006dec:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8006dee:	f88d 0015 	strb.w	r0, [sp, #21]
                if( ( status & 0x07 ) == 0x07 )
 8006df2:	d10c      	bne.n	8006e0e <ProcessMacCommands.constprop.0+0x26e>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8006df4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8006df8:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8006dfc:	f886 307c 	strb.w	r3, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8006e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e02:	6733      	str	r3, [r6, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8006e04:	67b3      	str	r3, [r6, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8006e06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8006e0a:	f886 306d 	strb.w	r3, [r6, #109]	; 0x6d
                macCmdPayload[0] = status;
 8006e0e:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8006e12:	2201      	movs	r2, #1
 8006e14:	a906      	add	r1, sp, #24
 8006e16:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8006e18:	f001 fb0c 	bl	8008434 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006e1c:	4a2c      	ldr	r2, [pc, #176]	; (8006ed0 <ProcessMacCommands.constprop.0+0x330>)
 8006e1e:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 8006e22:	f043 0310 	orr.w	r3, r3, #16
 8006e26:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
}
 8006e2a:	e71c      	b.n	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8006e2c:	4b28      	ldr	r3, [pc, #160]	; (8006ed0 <ProcessMacCommands.constprop.0+0x330>)
 8006e2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8006e32:	b17b      	cbz	r3, 8006e54 <ProcessMacCommands.constprop.0+0x2b4>
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	b16b      	cbz	r3, 8006e54 <ProcessMacCommands.constprop.0+0x2b4>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8006e38:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8006e3a:	9b02      	ldr	r3, [sp, #8]
                macCmdPayload[0] = batteryLevel;
 8006e3c:	f88d 0018 	strb.w	r0, [sp, #24]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8006e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e44:	f88d 3019 	strb.w	r3, [sp, #25]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8006e48:	2202      	movs	r2, #2
 8006e4a:	a906      	add	r1, sp, #24
 8006e4c:	2006      	movs	r0, #6
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8006e4e:	f001 faf1 	bl	8008434 <LoRaMacCommandsAddCmd>
                break;
 8006e52:	e708      	b.n	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8006e54:	20ff      	movs	r0, #255	; 0xff
 8006e56:	e7f0      	b.n	8006e3a <ProcessMacCommands.constprop.0+0x29a>
                status = 0x03;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	f88d 3015 	strb.w	r3, [sp, #21]
                newChannelReq.ChannelId = payload[macIndex++];
 8006e5e:	5d2b      	ldrb	r3, [r5, r4]
 8006e60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 8006e64:	ab0c      	add	r3, sp, #48	; 0x30
 8006e66:	9308      	str	r3, [sp, #32]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006e68:	f109 0204 	add.w	r2, r9, #4
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8006e6c:	f109 0303 	add.w	r3, r9, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006e70:	b2db      	uxtb	r3, r3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006e72:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006e74:	5ce9      	ldrb	r1, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006e76:	5cab      	ldrb	r3, [r5, r2]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8006e78:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                newChannelReq.ChannelId = payload[macIndex++];
 8006e7c:	f109 0202 	add.w	r2, r9, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8006e80:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006e82:	041b      	lsls	r3, r3, #16
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8006e84:	5caa      	ldrb	r2, [r5, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006e86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e8a:	4313      	orrs	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8006e8c:	f109 0406 	add.w	r4, r9, #6
                chParam.Frequency *= 100;
 8006e90:	2264      	movs	r2, #100	; 0x64
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006e92:	f109 0905 	add.w	r9, r9, #5
                chParam.Frequency *= 100;
 8006e96:	4353      	muls	r3, r2
                chParam.DrRange.Value = payload[macIndex++];
 8006e98:	fa5f f989 	uxtb.w	r9, r9
                chParam.Frequency *= 100;
 8006e9c:	930c      	str	r3, [sp, #48]	; 0x30
                chParam.Rx1Frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	930d      	str	r3, [sp, #52]	; 0x34
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8006ea2:	a908      	add	r1, sp, #32
                chParam.DrRange.Value = payload[macIndex++];
 8006ea4:	f815 3009 	ldrb.w	r3, [r5, r9]
 8006ea8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8006eac:	f00b fdc8 	bl	8012a40 <RegionNewChannelReq>
 8006eb0:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 8006eb2:	2800      	cmp	r0, #0
                chParam.DrRange.Value = payload[macIndex++];
 8006eb4:	b2e4      	uxtb	r4, r4
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8006eb6:	f88d 3015 	strb.w	r3, [sp, #21]
                if( ( int8_t )status >= 0 )
 8006eba:	f6ff aed4 	blt.w	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                    macCmdPayload[0] = status;
 8006ebe:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	a906      	add	r1, sp, #24
 8006ec6:	2007      	movs	r0, #7
 8006ec8:	e7c1      	b.n	8006e4e <ProcessMacCommands.constprop.0+0x2ae>
 8006eca:	bf00      	nop
 8006ecc:	20001734 	.word	0x20001734
 8006ed0:	2000121c 	.word	0x2000121c
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006ed4:	5d2b      	ldrb	r3, [r5, r4]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ee0:	bf38      	it	cc
 8006ee2:	2301      	movcc	r3, #1
 8006ee4:	4353      	muls	r3, r2
 8006ee6:	65f3      	str	r3, [r6, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8006ee8:	a906      	add	r1, sp, #24
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8006eea:	4413      	add	r3, r2
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8006eec:	2008      	movs	r0, #8
 8006eee:	2200      	movs	r2, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8006ef0:	6633      	str	r3, [r6, #96]	; 0x60
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8006ef2:	f001 fa9f 	bl	8008434 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006ef6:	4aa9      	ldr	r2, [pc, #676]	; (800719c <ProcessMacCommands.constprop.0+0x5fc>)
 8006ef8:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006efc:	f109 0902 	add.w	r9, r9, #2
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006f00:	f043 0310 	orr.w	r3, r3, #16
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006f04:	fa5f f989 	uxtb.w	r9, r9
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8006f08:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006f0c:	464c      	mov	r4, r9
}
 8006f0e:	e6aa      	b.n	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                uint8_t eirpDwellTime = payload[macIndex++];
 8006f10:	5d2b      	ldrb	r3, [r5, r4]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006f12:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                txParamSetupReq.UplinkDwellTime = 0;
 8006f16:	2200      	movs	r2, #0
 8006f18:	f88d 201c 	strb.w	r2, [sp, #28]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8006f1c:	f013 0220 	ands.w	r2, r3, #32
                    txParamSetupReq.DownlinkDwellTime = 1;
 8006f20:	bf18      	it	ne
 8006f22:	2201      	movne	r2, #1
 8006f24:	f88d 201d 	strb.w	r2, [sp, #29]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8006f28:	06da      	lsls	r2, r3, #27
                    txParamSetupReq.UplinkDwellTime = 1;
 8006f2a:	bf48      	it	mi
 8006f2c:	2201      	movmi	r2, #1
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8006f2e:	f003 030f 	and.w	r3, r3, #15
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006f32:	a907      	add	r1, sp, #28
                    txParamSetupReq.UplinkDwellTime = 1;
 8006f34:	bf48      	it	mi
 8006f36:	f88d 201c 	strbmi.w	r2, [sp, #28]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8006f3a:	f88d 301e 	strb.w	r3, [sp, #30]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006f3e:	f00b fd86 	bl	8012a4e <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
 8006f42:	f109 0902 	add.w	r9, r9, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006f46:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8006f48:	fa5f f989 	uxtb.w	r9, r9
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8006f4c:	d0de      	beq.n	8006f0c <ProcessMacCommands.constprop.0+0x36c>
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8006f4e:	f89d 301d 	ldrb.w	r3, [sp, #29]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006f52:	4a93      	ldr	r2, [pc, #588]	; (80071a0 <ProcessMacCommands.constprop.0+0x600>)
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8006f54:	f886 3081 	strb.w	r3, [r6, #129]	; 0x81
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006f58:	f89d 301e 	ldrb.w	r3, [sp, #30]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8006f5c:	f89d 401c 	ldrb.w	r4, [sp, #28]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006f60:	5cd0      	ldrb	r0, [r2, r3]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8006f62:	f886 4080 	strb.w	r4, [r6, #128]	; 0x80
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006f66:	f7f9 fbd5 	bl	8000714 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8006f6a:	2302      	movs	r3, #2
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006f6c:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f70:	a90c      	add	r1, sp, #48	; 0x30
 8006f72:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8006f76:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006f7a:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f7e:	f00b fd09 	bl	8012994 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8006f82:	f996 3045 	ldrsb.w	r3, [r6, #69]	; 0x45
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8006f86:	9008      	str	r0, [sp, #32]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8006f88:	b240      	sxtb	r0, r0
 8006f8a:	4298      	cmp	r0, r3
 8006f8c:	bfb8      	it	lt
 8006f8e:	4618      	movlt	r0, r3
 8006f90:	f886 0045 	strb.w	r0, [r6, #69]	; 0x45
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8006f94:	2200      	movs	r2, #0
 8006f96:	a906      	add	r1, sp, #24
 8006f98:	2009      	movs	r0, #9
 8006f9a:	e6f9      	b.n	8006d90 <ProcessMacCommands.constprop.0+0x1f0>
                status = 0x03;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	f88d 3015 	strb.w	r3, [sp, #21]
                dlChannelReq.ChannelId = payload[macIndex++];
 8006fa2:	5d2b      	ldrb	r3, [r5, r4]
 8006fa4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006fa8:	f109 0204 	add.w	r2, r9, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8006fac:	f109 0303 	add.w	r3, r9, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006fb0:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	f109 0405 	add.w	r4, r9, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8006fb8:	f109 0902 	add.w	r9, r9, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8006fbc:	5ce9      	ldrb	r1, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006fbe:	5cab      	ldrb	r3, [r5, r2]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006fc0:	f896 004c 	ldrb.w	r0, [r6, #76]	; 0x4c
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8006fc4:	fa5f f989 	uxtb.w	r9, r9
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006fc8:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8006fca:	f815 2009 	ldrb.w	r2, [r5, r9]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006fce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006fd2:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8006fd4:	2264      	movs	r2, #100	; 0x64
 8006fd6:	4353      	muls	r3, r2
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006fd8:	a90c      	add	r1, sp, #48	; 0x30
                dlChannelReq.Rx1Frequency *= 100;
 8006fda:	930d      	str	r3, [sp, #52]	; 0x34
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006fdc:	f00b fd3e 	bl	8012a5c <RegionDlChannelReq>
 8006fe0:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
 8006fe2:	2800      	cmp	r0, #0
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8006fe4:	b2e4      	uxtb	r4, r4
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8006fe6:	f88d 3015 	strb.w	r3, [sp, #21]
                if( ( int8_t )status >= 0 )
 8006fea:	f6ff ae3c 	blt.w	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                    macCmdPayload[0] = status;
 8006fee:	f88d 3018 	strb.w	r3, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	a906      	add	r1, sp, #24
 8006ff6:	200a      	movs	r0, #10
 8006ff8:	e70e      	b.n	8006e18 <ProcessMacCommands.constprop.0+0x278>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8006ffa:	2009      	movs	r0, #9
 8006ffc:	f001 fb7c 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 8007000:	f8df a198 	ldr.w	sl, [pc, #408]	; 800719c <ProcessMacCommands.constprop.0+0x5fc>
 8007004:	2800      	cmp	r0, #0
 8007006:	d054      	beq.n	80070b2 <ProcessMacCommands.constprop.0+0x512>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8007008:	2109      	movs	r1, #9
 800700a:	2000      	movs	r0, #0
 800700c:	f001 fb38 	bl	8008680 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8007010:	2300      	movs	r3, #0
 8007012:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8007016:	f109 0203 	add.w	r2, r9, #3
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800701a:	f109 0302 	add.w	r3, r9, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800701e:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007020:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8007022:	5ce9      	ldrb	r1, [r5, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007024:	5cab      	ldrb	r3, [r5, r2]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8007026:	5d2a      	ldrb	r2, [r5, r4]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800702e:	4313      	orrs	r3, r2
 8007030:	f109 0204 	add.w	r2, r9, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007034:	b2d2      	uxtb	r2, r2
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8007036:	f109 0406 	add.w	r4, r9, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800703a:	f109 0905 	add.w	r9, r9, #5
 800703e:	5caa      	ldrb	r2, [r5, r2]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8007040:	fa5f f989 	uxtb.w	r9, r9
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007044:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007048:	f815 2009 	ldrb.w	r2, [r5, r9]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800704c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800704e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007052:	434a      	muls	r2, r1
                    sysTimeCurrent = SysTimeGet( );
 8007054:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007058:	1212      	asrs	r2, r2, #8
                    sysTimeCurrent = SysTimeGet( );
 800705a:	4658      	mov	r0, fp
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800705c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                    sysTimeCurrent = SysTimeGet( );
 8007060:	f00a fc6d 	bl	801193e <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8007064:	9b03      	ldr	r3, [sp, #12]
 8007066:	f103 5396 	add.w	r3, r3, #314572800	; 0x12c00000
 800706a:	f503 13a9 	add.w	r3, r3, #1384448	; 0x152000
 800706e:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8007072:	9308      	str	r3, [sp, #32]
 8007074:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	f10d 0920 	add.w	r9, sp, #32
 800707e:	e899 0006 	ldmia.w	r9, {r1, r2}
 8007082:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 8007086:	a80a      	add	r0, sp, #40	; 0x28
 8007088:	f00a fc1d 	bl	80118c6 <SysTimeSub>
 800708c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8007094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007096:	4648      	mov	r0, r9
 8007098:	f00a fbfa 	bl	8011890 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800709c:	e899 0003 	ldmia.w	r9, {r0, r1}
 80070a0:	f00a fc2c 	bl	80118fc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80070a4:	f00b fa46 	bl	8012534 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80070a8:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80070aa:	b2e4      	uxtb	r4, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80070ac:	f88a 343c 	strb.w	r3, [sl, #1084]	; 0x43c
 80070b0:	e5d9      	b.n	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80070b2:	f88a 043c 	strb.w	r0, [sl, #1084]	; 0x43c
 80070b6:	e5d6      	b.n	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80070b8:	200c      	movs	r0, #12
 80070ba:	f001 fb1d 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 80070be:	2800      	cmp	r0, #0
 80070c0:	f43f add1 	beq.w	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80070c4:	210c      	movs	r1, #12
 80070c6:	2000      	movs	r0, #0
 80070c8:	f001 fada 	bl	8008680 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80070cc:	4b33      	ldr	r3, [pc, #204]	; (800719c <ProcessMacCommands.constprop.0+0x5fc>)
 80070ce:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
 80070d2:	3b04      	subs	r3, #4
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	f67f adc6 	bls.w	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                        LoRaMacClassBPingSlotInfoAns( );
 80070da:	f00b fa27 	bl	801252c <LoRaMacClassBPingSlotInfoAns>
 80070de:	e5c2      	b.n	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                frequency = ( uint32_t )payload[macIndex++];
 80070e0:	f109 0202 	add.w	r2, r9, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80070e4:	b2d2      	uxtb	r2, r2
                frequency = ( uint32_t )payload[macIndex++];
 80070e6:	5d29      	ldrb	r1, [r5, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80070e8:	5ca8      	ldrb	r0, [r5, r2]
 80070ea:	f109 0203 	add.w	r2, r9, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80070ee:	b2d2      	uxtb	r2, r2
                datarate = payload[macIndex++] & 0x0F;
 80070f0:	f109 0405 	add.w	r4, r9, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80070f4:	5cab      	ldrb	r3, [r5, r2]
 80070f6:	f109 0904 	add.w	r9, r9, #4
                datarate = payload[macIndex++] & 0x0F;
 80070fa:	fa5f f989 	uxtb.w	r9, r9
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                datarate = payload[macIndex++] & 0x0F;
 8007104:	f815 0009 	ldrb.w	r0, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007108:	430b      	orrs	r3, r1
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800710a:	2164      	movs	r1, #100	; 0x64
 800710c:	4359      	muls	r1, r3
 800710e:	f000 000f 	and.w	r0, r0, #15
 8007112:	f00b fa0c 	bl	801252e <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
 8007116:	b2e4      	uxtb	r4, r4
                macCmdPayload[0] = status;
 8007118:	f88d 0018 	strb.w	r0, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800711c:	2201      	movs	r2, #1
 800711e:	a906      	add	r1, sp, #24
 8007120:	2011      	movs	r0, #17
 8007122:	e679      	b.n	8006e18 <ProcessMacCommands.constprop.0+0x278>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8007124:	200d      	movs	r0, #13
 8007126:	f001 fae7 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 800712a:	2800      	cmp	r0, #0
 800712c:	f43f ad9b 	beq.w	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8007130:	210d      	movs	r1, #13
 8007132:	2000      	movs	r0, #0
 8007134:	f001 faa4 	bl	8008680 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8007138:	f109 0302 	add.w	r3, r9, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800713c:	b2db      	uxtb	r3, r3
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800713e:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <ProcessMacCommands.constprop.0+0x604>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8007140:	5ce8      	ldrb	r0, [r5, r3]
 8007142:	5d2b      	ldrb	r3, [r5, r4]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007144:	6812      	ldr	r2, [r2, #0]
                    beaconTimingChannel = payload[macIndex++];
 8007146:	f109 0404 	add.w	r4, r9, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800714a:	f109 0903 	add.w	r9, r9, #3
                    beaconTimingChannel = payload[macIndex++];
 800714e:	fa5f f989 	uxtb.w	r9, r9
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007152:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007156:	f815 1009 	ldrb.w	r1, [r5, r9]
                    beaconTimingChannel = payload[macIndex++];
 800715a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800715c:	f00b f9e9 	bl	8012532 <LoRaMacClassBBeaconTimingAns>
 8007160:	e581      	b.n	8006c66 <ProcessMacCommands.constprop.0+0xc6>
                    frequency = ( uint32_t )payload[macIndex++];
 8007162:	5d28      	ldrb	r0, [r5, r4]
 8007164:	f109 0302 	add.w	r3, r9, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007168:	f109 0404 	add.w	r4, r9, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800716c:	f109 0903 	add.w	r9, r9, #3
 8007170:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007172:	fa5f f989 	uxtb.w	r9, r9
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007176:	5cea      	ldrb	r2, [r5, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007178:	f815 3009 	ldrb.w	r3, [r5, r9]
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007182:	4303      	orrs	r3, r0
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007184:	2064      	movs	r0, #100	; 0x64
 8007186:	4358      	muls	r0, r3
 8007188:	f00b f9d5 	bl	8012536 <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800718c:	b2e4      	uxtb	r4, r4
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800718e:	f88d 0018 	strb.w	r0, [sp, #24]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8007192:	2201      	movs	r2, #1
 8007194:	a906      	add	r1, sp, #24
 8007196:	2013      	movs	r0, #19
 8007198:	e659      	b.n	8006e4e <ProcessMacCommands.constprop.0+0x2ae>
 800719a:	bf00      	nop
 800719c:	2000121c 	.word	0x2000121c
 80071a0:	08018bfa 	.word	0x08018bfa
 80071a4:	20001e38 	.word	0x20001e38

080071a8 <StopRetransmission.isra.0>:
    return counter;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80071a8:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <StopRetransmission.isra.0+0x3c>)
 80071aa:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 80071ae:	0792      	lsls	r2, r2, #30
 80071b0:	d503      	bpl.n	80071ba <StopRetransmission.isra.0+0x12>
 80071b2:	f893 2431 	ldrb.w	r2, [r3, #1073]	; 0x431
 80071b6:	2a01      	cmp	r2, #1
 80071b8:	d908      	bls.n	80071cc <StopRetransmission.isra.0+0x24>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80071ba:	490b      	ldr	r1, [pc, #44]	; (80071e8 <StopRetransmission.isra.0+0x40>)
 80071bc:	f891 2186 	ldrb.w	r2, [r1, #390]	; 0x186
 80071c0:	b122      	cbz	r2, 80071cc <StopRetransmission.isra.0+0x24>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80071c2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if( counter < ADR_ACK_COUNTER_MAX )
 80071c4:	1c50      	adds	r0, r2, #1
        counter++;
 80071c6:	bf18      	it	ne
 80071c8:	3201      	addne	r2, #1
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80071ca:	634a      	str	r2, [r1, #52]	; 0x34
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 80071d2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80071d6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80071da:	f022 0202 	bic.w	r2, r2, #2
 80071de:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80071e2:	4770      	bx	lr
 80071e4:	2000121c 	.word	0x2000121c
 80071e8:	20001734 	.word	0x20001734

080071ec <SendFrameOnChannel>:
{
 80071ec:	b570      	push	{r4, r5, r6, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80071ee:	4d45      	ldr	r5, [pc, #276]	; (8007304 <SendFrameOnChannel+0x118>)
    txConfig.PktLen = MacCtx.PktBufferLen;
 80071f0:	4c45      	ldr	r4, [pc, #276]	; (8007308 <SendFrameOnChannel+0x11c>)
{
 80071f2:	b086      	sub	sp, #24
    int8_t txPower = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	f88d 3003 	strb.w	r3, [sp, #3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80071fa:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80071fe:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007202:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8007206:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800720a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800720e:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007210:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8007214:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8007216:	8823      	ldrh	r3, [r4, #0]
    txConfig.Channel = channel;
 8007218:	f88d 0008 	strb.w	r0, [sp, #8]
{
 800721c:	4606      	mov	r6, r0
    txConfig.PktLen = MacCtx.PktBufferLen;
 800721e:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007222:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 8007226:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800722a:	f10d 0203 	add.w	r2, sp, #3
 800722e:	a902      	add	r1, sp, #8
 8007230:	f00b fbe2 	bl	80129f8 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800723a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800723e:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8007242:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007246:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800724a:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsConfirm.Channel = channel;
 800724e:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007252:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007256:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800725a:	f00b f961 	bl	8012520 <LoRaMacClassBIsBeaconModeActive>
 800725e:	b9a8      	cbnz	r0, 800728c <SendFrameOnChannel+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007260:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <SendFrameOnChannel+0x80>
        LoRaMacClassBStopRxSlots( );
 8007268:	f00b f969 	bl	801253e <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 800726c:	f00b f95a 	bl	8012524 <LoRaMacClassBHaltBeaconing>
    uint32_t fCntUp = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8007274:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007278:	f995 5045 	ldrsb.w	r5, [r5, #69]	; 0x45
 800727c:	f894 641b 	ldrb.w	r6, [r4, #1051]	; 0x41b
    switch( MacCtx.TxMsg.Type )
 8007280:	b163      	cbz	r3, 800729c <SendFrameOnChannel+0xb0>
 8007282:	2b04      	cmp	r3, #4
 8007284:	d029      	beq.n	80072da <SendFrameOnChannel+0xee>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8007286:	2003      	movs	r0, #3
}
 8007288:	b006      	add	sp, #24
 800728a:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800728c:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 8007290:	f00b f953 	bl	801253a <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8007294:	2800      	cmp	r0, #0
 8007296:	d0e3      	beq.n	8007260 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8007298:	2010      	movs	r0, #16
 800729a:	e7f5      	b.n	8007288 <SendFrameOnChannel+0x9c>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800729c:	481b      	ldr	r0, [pc, #108]	; (800730c <SendFrameOnChannel+0x120>)
 800729e:	f001 fb3d 	bl	800891c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80072a2:	bb58      	cbnz	r0, 80072fc <SendFrameOnChannel+0x110>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80072a4:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 80072a8:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80072aa:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80072ae:	4818      	ldr	r0, [pc, #96]	; (8007310 <SendFrameOnChannel+0x124>)
 80072b0:	7821      	ldrb	r1, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80072b2:	f043 0302 	orr.w	r3, r3, #2
 80072b6:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 80072ba:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80072be:	3301      	adds	r3, #1
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80072c6:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <SendFrameOnChannel+0x128>)
    MacCtx.ResponseTimeoutStartTime = 0;
 80072cc:	2500      	movs	r5, #0
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    MacCtx.ResponseTimeoutStartTime = 0;
 80072d0:	f8c4 5494 	str.w	r5, [r4, #1172]	; 0x494
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80072d4:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 80072d6:	4628      	mov	r0, r5
 80072d8:	e7d6      	b.n	8007288 <SendFrameOnChannel+0x9c>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80072da:	a801      	add	r0, sp, #4
 80072dc:	f001 fafc 	bl	80088d8 <LoRaMacCryptoGetFCntUp>
 80072e0:	b970      	cbnz	r0, 8007300 <SendFrameOnChannel+0x114>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80072e2:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80072e6:	b113      	cbz	r3, 80072ee <SendFrameOnChannel+0x102>
                fCntUp -= 1;
 80072e8:	9b01      	ldr	r3, [sp, #4]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <SendFrameOnChannel+0x120>)
 80072f0:	9801      	ldr	r0, [sp, #4]
 80072f2:	4632      	mov	r2, r6
 80072f4:	b2e9      	uxtb	r1, r5
 80072f6:	f001 fb35 	bl	8008964 <LoRaMacCryptoSecureMessage>
 80072fa:	e7d2      	b.n	80072a2 <SendFrameOnChannel+0xb6>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80072fc:	2011      	movs	r0, #17
 80072fe:	e7c3      	b.n	8007288 <SendFrameOnChannel+0x9c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8007300:	2012      	movs	r0, #18
 8007302:	e7c1      	b.n	8007288 <SendFrameOnChannel+0x9c>
 8007304:	20001734 	.word	0x20001734
 8007308:	2000121c 	.word	0x2000121c
 800730c:	20001324 	.word	0x20001324
 8007310:	2000121e 	.word	0x2000121e
 8007314:	08017300 	.word	0x08017300

08007318 <ScheduleTx>:
{
 8007318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800731c:	b08e      	sub	sp, #56	; 0x38
 800731e:	4606      	mov	r6, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007320:	f00b f8f8 	bl	8012514 <LoRaMacClassBIsBeaconExpected>
 8007324:	2800      	cmp	r0, #0
 8007326:	f040 80d3 	bne.w	80074d0 <ScheduleTx+0x1b8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800732a:	4c6a      	ldr	r4, [pc, #424]	; (80074d4 <ScheduleTx+0x1bc>)
 800732c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
 8007330:	2b01      	cmp	r3, #1
 8007332:	d009      	beq.n	8007348 <ScheduleTx+0x30>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007336:	4d68      	ldr	r5, [pc, #416]	; (80074d8 <ScheduleTx+0x1c0>)
 8007338:	b193      	cbz	r3, 8007360 <ScheduleTx+0x48>
    switch( MacCtx.TxMsg.Type )
 800733a:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800733e:	b1bb      	cbz	r3, 8007370 <ScheduleTx+0x58>
 8007340:	2b04      	cmp	r3, #4
 8007342:	d01b      	beq.n	800737c <ScheduleTx+0x64>
 8007344:	2003      	movs	r0, #3
 8007346:	e003      	b.n	8007350 <ScheduleTx+0x38>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007348:	f00b f8e6 	bl	8012518 <LoRaMacClassBIsPingExpected>
 800734c:	b118      	cbz	r0, 8007356 <ScheduleTx+0x3e>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800734e:	200f      	movs	r0, #15
}
 8007350:	b00e      	add	sp, #56	; 0x38
 8007352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007356:	f00b f8e1 	bl	801251c <LoRaMacClassBIsMulticastExpected>
 800735a:	2800      	cmp	r0, #0
 800735c:	d0ea      	beq.n	8007334 <ScheduleTx+0x1c>
 800735e:	e7f6      	b.n	800734e <ScheduleTx+0x36>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007360:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
 8007364:	f8d5 241c 	ldr.w	r2, [r5, #1052]	; 0x41c
 8007368:	3b01      	subs	r3, #1
 800736a:	4353      	muls	r3, r2
 800736c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800736e:	e7e4      	b.n	800733a <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007370:	485a      	ldr	r0, [pc, #360]	; (80074dc <ScheduleTx+0x1c4>)
 8007372:	f00b fa6a 	bl	801284a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8007376:	b128      	cbz	r0, 8007384 <ScheduleTx+0x6c>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8007378:	2011      	movs	r0, #17
 800737a:	e7e9      	b.n	8007350 <ScheduleTx+0x38>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800737c:	4857      	ldr	r0, [pc, #348]	; (80074dc <ScheduleTx+0x1c4>)
 800737e:	f00b fa98 	bl	80128b2 <LoRaMacSerializerData>
 8007382:	e7f8      	b.n	8007376 <ScheduleTx+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007384:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
 8007388:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800738a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800738c:	9308      	str	r3, [sp, #32]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800738e:	f10d 0818 	add.w	r8, sp, #24
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007392:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007396:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800739a:	4640      	mov	r0, r8
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800739c:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
 80073a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80073a4:	f00a faee 	bl	8011984 <SysTimeGetMcuTime>
 80073a8:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	af02      	add	r7, sp, #8
 80073b0:	e898 0006 	ldmia.w	r8, {r1, r2}
 80073b4:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
 80073b8:	4638      	mov	r0, r7
 80073ba:	f00a fa84 	bl	80118c6 <SysTimeSub>
 80073be:	e897 0003 	ldmia.w	r7, {r0, r1}
 80073c2:	ab0b      	add	r3, sp, #44	; 0x2c
 80073c4:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80073c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073ca:	9309      	str	r3, [sp, #36]	; 0x24
    nextChan.LastTxIsJoinRequest = false;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    nextChan.PktLen = MacCtx.PktBufferLen;
 80073d2:	882b      	ldrh	r3, [r5, #0]
 80073d4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80073d8:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
    nextChan.Joined = true;
 80073dc:	2201      	movs	r2, #1
 80073de:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80073e2:	b91b      	cbnz	r3, 80073ec <ScheduleTx+0xd4>
        nextChan.LastTxIsJoinRequest = true;
 80073e4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
        nextChan.Joined = false;
 80073e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80073ec:	4b3c      	ldr	r3, [pc, #240]	; (80074e0 <ScheduleTx+0x1c8>)
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4b3c      	ldr	r3, [pc, #240]	; (80074e4 <ScheduleTx+0x1cc>)
 80073f2:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 80073f6:	f1a3 0275 	sub.w	r2, r3, #117	; 0x75
 80073fa:	a908      	add	r1, sp, #32
 80073fc:	f00b fb35 	bl	8012a6a <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8007400:	b1a0      	cbz	r0, 800742c <ScheduleTx+0x114>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8007402:	280b      	cmp	r0, #11
 8007404:	d1a4      	bne.n	8007350 <ScheduleTx+0x38>
 8007406:	2e00      	cmp	r6, #0
 8007408:	d0a2      	beq.n	8007350 <ScheduleTx+0x38>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800740a:	f8d5 1490 	ldr.w	r1, [r5, #1168]	; 0x490
 800740e:	b159      	cbz	r1, 8007428 <ScheduleTx+0x110>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007410:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007414:	4834      	ldr	r0, [pc, #208]	; (80074e8 <ScheduleTx+0x1d0>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007416:	f043 0320 	orr.w	r3, r3, #32
 800741a:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800741e:	f00a fb20 	bl	8011a62 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 8007422:	4831      	ldr	r0, [pc, #196]	; (80074e8 <ScheduleTx+0x1d0>)
 8007424:	f7fd fef2 	bl	800520c <TimerStart>
            return LORAMAC_STATUS_OK;
 8007428:	2000      	movs	r0, #0
 800742a:	e791      	b.n	8007350 <ScheduleTx+0x38>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800742c:	f894 704c 	ldrb.w	r7, [r4, #76]	; 0x4c
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007430:	f994 306d 	ldrsb.w	r3, [r4, #109]	; 0x6d
 8007434:	f994 2045 	ldrsb.w	r2, [r4, #69]	; 0x45
 8007438:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800743c:	4e2b      	ldr	r6, [pc, #172]	; (80074ec <ScheduleTx+0x1d4>)
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800743e:	4638      	mov	r0, r7
 8007440:	f00b fb21 	bl	8012a86 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007444:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007446:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 800744a:	9600      	str	r6, [sp, #0]
 800744c:	b241      	sxtb	r1, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800744e:	3614      	adds	r6, #20
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007450:	4638      	mov	r0, r7
 8007452:	f00b fabb 	bl	80129cc <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007456:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007458:	f994 1074 	ldrsb.w	r1, [r4, #116]	; 0x74
 800745c:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8007460:	9600      	str	r6, [sp, #0]
 8007462:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8007466:	f00b fab1 	bl	80129cc <RegionComputeRxWindowParameters>
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800746a:	f8d5 03e0 	ldr.w	r0, [r5, #992]	; 0x3e0
 800746e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007470:	f8d5 63cc 	ldr.w	r6, [r5, #972]	; 0x3cc
 8007474:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007476:	4401      	add	r1, r0
 8007478:	f8c5 13bc 	str.w	r1, [r5, #956]	; 0x3bc
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800747c:	f894 119c 	ldrb.w	r1, [r4, #412]	; 0x19c
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007480:	4433      	add	r3, r6
 8007482:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007486:	b939      	cbnz	r1, 8007498 <ScheduleTx+0x180>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007488:	6e62      	ldr	r2, [r4, #100]	; 0x64
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800748a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800748c:	4432      	add	r2, r6
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800748e:	4403      	add	r3, r0
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007490:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007494:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    size_t macCmdsSize = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	9305      	str	r3, [sp, #20]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800749c:	b179      	cbz	r1, 80074be <ScheduleTx+0x1a6>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800749e:	a805      	add	r0, sp, #20
 80074a0:	f001 f85e 	bl	8008560 <LoRaMacCommandsGetSizeSerializedCmds>
 80074a4:	b990      	cbnz	r0, 80074cc <ScheduleTx+0x1b4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80074a6:	f994 0045 	ldrsb.w	r0, [r4, #69]	; 0x45
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80074aa:	f895 6237 	ldrb.w	r6, [r5, #567]	; 0x237
 80074ae:	f89d 7014 	ldrb.w	r7, [sp, #20]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80074b2:	f7ff f94b 	bl	800674c <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80074b6:	443e      	add	r6, r7
 80074b8:	b280      	uxth	r0, r0
 80074ba:	42b0      	cmp	r0, r6
 80074bc:	d304      	bcc.n	80074c8 <ScheduleTx+0x1b0>
    return SendFrameOnChannel( MacCtx.Channel );
 80074be:	f895 041b 	ldrb.w	r0, [r5, #1051]	; 0x41b
 80074c2:	f7ff fe93 	bl	80071ec <SendFrameOnChannel>
 80074c6:	e743      	b.n	8007350 <ScheduleTx+0x38>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80074c8:	2008      	movs	r0, #8
 80074ca:	e741      	b.n	8007350 <ScheduleTx+0x38>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80074cc:	2013      	movs	r0, #19
 80074ce:	e73f      	b.n	8007350 <ScheduleTx+0x38>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80074d0:	200e      	movs	r0, #14
 80074d2:	e73d      	b.n	8007350 <ScheduleTx+0x38>
 80074d4:	20001734 	.word	0x20001734
 80074d8:	2000121c 	.word	0x2000121c
 80074dc:	20001324 	.word	0x20001324
 80074e0:	20001770 	.word	0x20001770
 80074e4:	200016ac 	.word	0x200016ac
 80074e8:	2000158c 	.word	0x2000158c
 80074ec:	200015dc 	.word	0x200015dc

080074f0 <OnTxDelayedTimerEvent>:
{
 80074f0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80074f2:	4c18      	ldr	r4, [pc, #96]	; (8007554 <OnTxDelayedTimerEvent+0x64>)
 80074f4:	f504 705c 	add.w	r0, r4, #880	; 0x370
 80074f8:	f7fd fefc 	bl	80052f4 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80074fc:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
 8007500:	f8d4 0494 	ldr.w	r0, [r4, #1172]	; 0x494
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8007504:	f023 0320 	bic.w	r3, r3, #32
 8007508:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( startTimeInMs != 0 )
 800750c:	b148      	cbz	r0, 8007522 <OnTxDelayedTimerEvent+0x32>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800750e:	f00a fac0 	bl	8011a92 <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8007512:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8007516:	d904      	bls.n	8007522 <OnTxDelayedTimerEvent+0x32>
            Nvm.MacGroup1.SrvAckRequested = false;
 8007518:	4b0f      	ldr	r3, [pc, #60]	; (8007558 <OnTxDelayedTimerEvent+0x68>)
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 8007520:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8007522:	2001      	movs	r0, #1
 8007524:	f7ff fef8 	bl	8007318 <ScheduleTx>
 8007528:	2800      	cmp	r0, #0
 800752a:	d0f9      	beq.n	8007520 <OnTxDelayedTimerEvent+0x30>
 800752c:	280b      	cmp	r0, #11
 800752e:	d0f7      	beq.n	8007520 <OnTxDelayedTimerEvent+0x30>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007530:	4b09      	ldr	r3, [pc, #36]	; (8007558 <OnTxDelayedTimerEvent+0x68>)
 8007532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007536:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800753a:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800753c:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8007540:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8007544:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8007548:	f001 f8bc 	bl	80086c4 <LoRaMacConfirmQueueSetStatusCmn>
}
 800754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
 8007550:	f7ff be2a 	b.w	80071a8 <StopRetransmission.isra.0>
 8007554:	2000121c 	.word	0x2000121c
 8007558:	20001734 	.word	0x20001734

0800755c <LoRaMacProcess>:
{
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    events = LoRaMacRadioEvents;
 8007560:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 8007844 <LoRaMacProcess+0x2e8>
 8007564:	4cb8      	ldr	r4, [pc, #736]	; (8007848 <LoRaMacProcess+0x2ec>)
{
 8007566:	b0a9      	sub	sp, #164	; 0xa4
    CRITICAL_SECTION_BEGIN( );
 8007568:	a808      	add	r0, sp, #32
 800756a:	f00a f874 	bl	8011656 <BoardCriticalSectionBegin>
    events = LoRaMacRadioEvents;
 800756e:	f8da 5000 	ldr.w	r5, [sl]
    LoRaMacRadioEvents.Value = 0;
 8007572:	2300      	movs	r3, #0
    CRITICAL_SECTION_END( );
 8007574:	a808      	add	r0, sp, #32
    LoRaMacRadioEvents.Value = 0;
 8007576:	f8ca 3000 	str.w	r3, [sl]
    CRITICAL_SECTION_END( );
 800757a:	f00a f876 	bl	801166a <BoardCriticalSectionEnd>
    if( events.Value != 0 )
 800757e:	2d00      	cmp	r5, #0
 8007580:	f000 80d9 	beq.w	8007736 <LoRaMacProcess+0x1da>
        if( events.Events.TxDone == 1 )
 8007584:	b2eb      	uxtb	r3, r5
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	06ab      	lsls	r3, r5, #26
 800758a:	d559      	bpl.n	8007640 <LoRaMacProcess+0xe4>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800758c:	4daf      	ldr	r5, [pc, #700]	; (800784c <LoRaMacProcess+0x2f0>)
 800758e:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8007592:	2b02      	cmp	r3, #2
 8007594:	d002      	beq.n	800759c <LoRaMacProcess+0x40>
        Radio.Sleep( );
 8007596:	4bae      	ldr	r3, [pc, #696]	; (8007850 <LoRaMacProcess+0x2f4>)
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800759c:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 80075a0:	48ac      	ldr	r0, [pc, #688]	; (8007854 <LoRaMacProcess+0x2f8>)
 80075a2:	f00a fa5e 	bl	8011a62 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80075a6:	48ab      	ldr	r0, [pc, #684]	; (8007854 <LoRaMacProcess+0x2f8>)
 80075a8:	f7fd fe30 	bl	800520c <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80075ac:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
 80075b0:	48a9      	ldr	r0, [pc, #676]	; (8007858 <LoRaMacProcess+0x2fc>)
 80075b2:	f00a fa56 	bl	8011a62 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80075b6:	48a8      	ldr	r0, [pc, #672]	; (8007858 <LoRaMacProcess+0x2fc>)
 80075b8:	f7fd fe28 	bl	800520c <TimerStart>
    if( MacCtx.NodeAckRequested == true )
 80075bc:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 81f4 	beq.w	80079ae <LoRaMacProcess+0x452>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 80075c6:	2314      	movs	r3, #20
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80075c8:	a912      	add	r1, sp, #72	; 0x48
 80075ca:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 80075ce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80075d2:	f00b f9df 	bl	8012994 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80075d6:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80075da:	900f      	str	r0, [sp, #60]	; 0x3c
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80075dc:	4401      	add	r1, r0
 80075de:	489f      	ldr	r0, [pc, #636]	; (800785c <LoRaMacProcess+0x300>)
 80075e0:	f00a fa3f 	bl	8011a62 <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 80075e4:	489d      	ldr	r0, [pc, #628]	; (800785c <LoRaMacProcess+0x300>)
 80075e6:	f7fd fe11 	bl	800520c <TimerStart>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80075ea:	4b9d      	ldr	r3, [pc, #628]	; (8007860 <LoRaMacProcess+0x304>)
    txDone.Channel = MacCtx.Channel;
 80075ec:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	63ab      	str	r3, [r5, #56]	; 0x38
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80075f4:	af0d      	add	r7, sp, #52	; 0x34
 80075f6:	4638      	mov	r0, r7
    txDone.Channel = MacCtx.Channel;
 80075f8:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80075fc:	931d      	str	r3, [sp, #116]	; 0x74
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80075fe:	f00a f9c1 	bl	8011984 <SysTimeGetMcuTime>
 8007602:	f8d5 3194 	ldr.w	r3, [r5, #404]	; 0x194
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	ae06      	add	r6, sp, #24
 800760a:	e897 0006 	ldmia.w	r7, {r1, r2}
 800760e:	f8d5 3190 	ldr.w	r3, [r5, #400]	; 0x190
 8007612:	4630      	mov	r0, r6
 8007614:	f00a f957 	bl	80118c6 <SysTimeSub>
 8007618:	e896 0003 	ldmia.w	r6, {r0, r1}
 800761c:	ab1f      	add	r3, sp, #124	; 0x7c
 800761e:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8007622:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 8007626:	931e      	str	r3, [sp, #120]	; 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007628:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800762c:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
        txDone.Joined  = false;
 8007630:	2b00      	cmp	r3, #0
 8007632:	bf18      	it	ne
 8007634:	2301      	movne	r3, #1
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007636:	a91c      	add	r1, sp, #112	; 0x70
        txDone.Joined  = false;
 8007638:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800763c:	f00b f9b4 	bl	80129a8 <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	06df      	lsls	r7, r3, #27
 8007644:	d54b      	bpl.n	80076de <LoRaMacProcess+0x182>
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8007646:	4d81      	ldr	r5, [pc, #516]	; (800784c <LoRaMacProcess+0x2f0>)
    uint8_t *payload = RxDoneParams.Payload;
 8007648:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007864 <LoRaMacProcess+0x308>
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800764c:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
    int16_t rssi = RxDoneParams.Rssi;
 8007650:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8007654:	9205      	str	r2, [sp, #20]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8007656:	f89a 2000 	ldrb.w	r2, [sl]
    int16_t rssi = RxDoneParams.Rssi;
 800765a:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 800765c:	2300      	movs	r3, #0
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800765e:	f363 0200 	bfi	r2, r3, #0, #1
    uint32_t downLinkCounter = 0;
 8007662:	930a      	str	r3, [sp, #40]	; 0x28
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8007664:	f88a 2000 	strb.w	r2, [sl]
    MacCtx.McpsConfirm.AckReceived = false;
 8007668:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.McpsIndication.Rssi = rssi;
 800766c:	9a04      	ldr	r2, [sp, #16]
    MacCtx.McpsIndication.Multicast = 0;
 800766e:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 8007672:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8007676:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800767a:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.AckReceived = false;
 800767e:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8007682:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007686:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800768a:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800768e:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8007692:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 8007696:	4b6e      	ldr	r3, [pc, #440]	; (8007850 <LoRaMacProcess+0x2f4>)
    int8_t snr = RxDoneParams.Snr;
 8007698:	f999 800c 	ldrsb.w	r8, [r9, #12]
    MacCtx.McpsIndication.Rssi = rssi;
 800769c:	f8a4 242e 	strh.w	r2, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80076a0:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
    Radio.Sleep( );
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    MacCtx.McpsIndication.Snr = snr;
 80076a6:	f884 8430 	strb.w	r8, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80076aa:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint8_t *payload = RxDoneParams.Payload;
 80076ae:	f8d9 7004 	ldr.w	r7, [r9, #4]
    uint16_t size = RxDoneParams.Size;
 80076b2:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    Radio.Sleep( );
 80076b6:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 80076b8:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 80076bc:	b913      	cbnz	r3, 80076c4 <LoRaMacProcess+0x168>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80076be:	4866      	ldr	r0, [pc, #408]	; (8007858 <LoRaMacProcess+0x2fc>)
 80076c0:	f7fd fe18 	bl	80052f4 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80076c4:	4631      	mov	r1, r6
 80076c6:	4638      	mov	r0, r7
 80076c8:	f00a ff22 	bl	8012510 <LoRaMacClassBRxBeacon>
 80076cc:	4683      	mov	fp, r0
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f000 8170 	beq.w	80079b4 <LoRaMacProcess+0x458>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	f8a4 347e 	strh.w	r3, [r4, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80076da:	f884 8480 	strb.w	r8, [r4, #1152]	; 0x480
        if( events.Events.TxTimeout == 1 )
 80076de:	9b03      	ldr	r3, [sp, #12]
 80076e0:	0718      	lsls	r0, r3, #28
 80076e2:	d51a      	bpl.n	800771a <LoRaMacProcess+0x1be>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80076e4:	4b59      	ldr	r3, [pc, #356]	; (800784c <LoRaMacProcess+0x2f0>)
 80076e6:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d002      	beq.n	80076f4 <LoRaMacProcess+0x198>
        Radio.Sleep( );
 80076ee:	4b58      	ldr	r3, [pc, #352]	; (8007850 <LoRaMacProcess+0x2f4>)
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80076f4:	2002      	movs	r0, #2
    UpdateRxSlotIdleState( );
 80076f6:	f7ff f81b 	bl	8006730 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80076fa:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80076fe:	f000 ffe1 	bl	80086c4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8007702:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8007706:	b113      	cbz	r3, 800770e <LoRaMacProcess+0x1b2>
        MacCtx.RetransmitTimeoutRetry = true;
 8007708:	2301      	movs	r3, #1
 800770a:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800770e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007712:	f043 0320 	orr.w	r3, r3, #32
 8007716:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( events.Events.RxError == 1 )
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	0759      	lsls	r1, r3, #29
 800771e:	d503      	bpl.n	8007728 <LoRaMacProcess+0x1cc>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8007720:	2106      	movs	r1, #6
 8007722:	2005      	movs	r0, #5
 8007724:	f7ff f85c 	bl	80067e0 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	079a      	lsls	r2, r3, #30
 800772c:	d503      	bpl.n	8007736 <LoRaMacProcess+0x1da>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800772e:	2104      	movs	r1, #4
 8007730:	2003      	movs	r0, #3
 8007732:	f7ff f855 	bl	80067e0 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8007736:	f00a ff04 	bl	8012542 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800773a:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
 800773e:	0693      	lsls	r3, r2, #26
 8007740:	d571      	bpl.n	8007826 <LoRaMacProcess+0x2ca>
    MacCtx.AllowRequests = requestState;
 8007742:	2300      	movs	r3, #0
 8007744:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007748:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800774c:	061f      	lsls	r7, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800774e:	bf44      	itt	mi
 8007750:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
 8007754:	f8c4 3340 	strmi.w	r3, [r4, #832]	; 0x340
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
    }
}
static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007758:	f012 0f05 	tst.w	r2, #5
 800775c:	f000 8378 	beq.w	8007e50 <LoRaMacProcess+0x8f4>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007760:	200b      	movs	r0, #11
 8007762:	f000 ffc9 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 8007766:	2800      	cmp	r0, #0
 8007768:	f000 8372 	beq.w	8007e50 <LoRaMacProcess+0x8f4>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800776c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007770:	07de      	lsls	r6, r3, #31
 8007772:	f100 836d 	bmi.w	8007e50 <LoRaMacProcess+0x8f4>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007776:	075d      	lsls	r5, r3, #29
 8007778:	f140 8384 	bpl.w	8007e84 <LoRaMacProcess+0x928>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800777c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8007780:	f023 0302 	bic.w	r3, r3, #2
 8007784:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.MacState == LORAMAC_IDLE )
 8007788:	f8d4 2340 	ldr.w	r2, [r4, #832]	; 0x340
 800778c:	2a00      	cmp	r2, #0
 800778e:	d141      	bne.n	8007814 <LoRaMacProcess+0x2b8>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8007790:	f894 548d 	ldrb.w	r5, [r4, #1165]	; 0x48d
 8007794:	f015 0101 	ands.w	r1, r5, #1
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8007798:	bf1e      	ittt	ne
 800779a:	462b      	movne	r3, r5
 800779c:	f362 0300 	bfine	r3, r2, #0, #1
 80077a0:	f884 348d 	strbne.w	r3, [r4, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80077a4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80077a8:	075f      	lsls	r7, r3, #29
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80077aa:	bf44      	itt	mi
 80077ac:	f36f 0382 	bfcmi	r3, #2, #1
 80077b0:	f884 348d 	strbmi.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        if( reqEvents.Bits.McpsReq == 1 )
 80077ba:	b121      	cbz	r1, 80077c6 <LoRaMacProcess+0x26a>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80077bc:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 80077c0:	4829      	ldr	r0, [pc, #164]	; (8007868 <LoRaMacProcess+0x30c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 80077c6:	076e      	lsls	r6, r5, #29
 80077c8:	d50b      	bpl.n	80077e2 <LoRaMacProcess+0x286>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80077ca:	4828      	ldr	r0, [pc, #160]	; (800786c <LoRaMacProcess+0x310>)
 80077cc:	f000 ffa0 	bl	8008710 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80077d0:	f000 ffc8 	bl	8008764 <LoRaMacConfirmQueueGetCnt>
 80077d4:	b128      	cbz	r0, 80077e2 <LoRaMacProcess+0x286>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80077d6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80077da:	f043 0304 	orr.w	r3, r3, #4
 80077de:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        LoRaMacClassBResumeBeaconing( );
 80077e2:	f00a fea0 	bl	8012526 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80077e6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80077ea:	f36f 1345 	bfc	r3, #5, #1
 80077ee:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState == LORAMAC_IDLE )
 80077f2:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80077f6:	b96b      	cbnz	r3, 8007814 <LoRaMacProcess+0x2b8>
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80077f8:	a81c      	add	r0, sp, #112	; 0x70
        bool isStickyMacCommandPending = false;
 80077fa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80077fe:	f000 febb 	bl	8008578 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8007802:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8007806:	b12b      	cbz	r3, 8007814 <LoRaMacProcess+0x2b8>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007808:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800780c:	f043 0310 	orr.w	r3, r3, #16
 8007810:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
 8007814:	2301      	movs	r3, #1
 8007816:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800781a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800781e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007822:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007826:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800782a:	071d      	lsls	r5, r3, #28
 800782c:	d522      	bpl.n	8007874 <LoRaMacProcess+0x318>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800782e:	f36f 03c3 	bfc	r3, #3, #1
 8007832:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8007836:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 800783a:	480d      	ldr	r0, [pc, #52]	; (8007870 <LoRaMacProcess+0x314>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	4798      	blx	r3
 8007840:	e018      	b.n	8007874 <LoRaMacProcess+0x318>
 8007842:	bf00      	nop
 8007844:	20001218 	.word	0x20001218
 8007848:	2000121c 	.word	0x2000121c
 800784c:	20001734 	.word	0x20001734
 8007850:	08017300 	.word	0x08017300
 8007854:	200015a4 	.word	0x200015a4
 8007858:	200015bc 	.word	0x200015bc
 800785c:	2000161c 	.word	0x2000161c
 8007860:	20001e48 	.word	0x20001e48
 8007864:	20001e38 	.word	0x20001e38
 8007868:	20001660 	.word	0x20001660
 800786c:	20001674 	.word	0x20001674
 8007870:	20001688 	.word	0x20001688
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8007874:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007878:	06d8      	lsls	r0, r3, #27
 800787a:	d50d      	bpl.n	8007898 <LoRaMacProcess+0x33c>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800787c:	2306      	movs	r3, #6
 800787e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8007882:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8007886:	a81c      	add	r0, sp, #112	; 0x70
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800788c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007890:	f36f 1304 	bfc	r3, #4, #1
 8007894:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007898:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 800789c:	0799      	lsls	r1, r3, #30
 800789e:	d508      	bpl.n	80078b2 <LoRaMacProcess+0x356>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80078a0:	f36f 0341 	bfc	r3, #1, #1
 80078a4:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80078a8:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 80078ac:	4893      	ldr	r0, [pc, #588]	; (8007afc <LoRaMacProcess+0x5a0>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80078b2:	f894 348c 	ldrb.w	r3, [r4, #1164]	; 0x48c
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d101      	bne.n	80078be <LoRaMacProcess+0x362>
        OpenContinuousRxCWindow( );
 80078ba:	f7fe fff3 	bl	80068a4 <OpenContinuousRxCWindow>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 80078be:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 80078c2:	065a      	lsls	r2, r3, #25
 80078c4:	f140 8321 	bpl.w	8007f0a <LoRaMacProcess+0x9ae>
    if( MacCtx.MacState != LORAMAC_IDLE )
 80078c8:	f8d4 5340 	ldr.w	r5, [r4, #832]	; 0x340
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 80078cc:	f36f 1386 	bfc	r3, #6, #1
 80078d0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState != LORAMAC_IDLE )
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	f040 8318 	bne.w	8007f0a <LoRaMacProcess+0x9ae>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80078da:	4e89      	ldr	r6, [pc, #548]	; (8007b00 <LoRaMacProcess+0x5a4>)
 80078dc:	2130      	movs	r1, #48	; 0x30
 80078de:	4630      	mov	r0, r6
 80078e0:	f7fd fc6e 	bl	80051c0 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 80078e4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80078e6:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
 80078e8:	bf18      	it	ne
 80078ea:	6330      	strne	r0, [r6, #48]	; 0x30
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80078ec:	f04f 0114 	mov.w	r1, #20
 80078f0:	4884      	ldr	r0, [pc, #528]	; (8007b04 <LoRaMacProcess+0x5a8>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80078f2:	bf18      	it	ne
 80078f4:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80078f6:	f7fd fc63 	bl	80051c0 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 80078fa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80078fc:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
 80078fe:	bf18      	it	ne
 8007900:	64b0      	strne	r0, [r6, #72]	; 0x48
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8007902:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8007906:	4880      	ldr	r0, [pc, #512]	; (8007b08 <LoRaMacProcess+0x5ac>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8007908:	bf18      	it	ne
 800790a:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800790e:	f7fd fc57 	bl	80051c0 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8007912:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 8007916:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
 8007918:	bf18      	it	ne
 800791a:	f8c6 01a0 	strne.w	r0, [r6, #416]	; 0x1a0
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800791e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8007922:	487a      	ldr	r0, [pc, #488]	; (8007b0c <LoRaMacProcess+0x5b0>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8007924:	bf18      	it	ne
 8007926:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800792a:	f7fd fc49 	bl	80051c0 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800792e:	f8d6 3340 	ldr.w	r3, [r6, #832]	; 0x340
 8007932:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
 8007934:	bf18      	it	ne
 8007936:	f8c6 0340 	strne.w	r0, [r6, #832]	; 0x340
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800793a:	f04f 0110 	mov.w	r1, #16
 800793e:	4874      	ldr	r0, [pc, #464]	; (8007b10 <LoRaMacProcess+0x5b4>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8007940:	bf18      	it	ne
 8007942:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8007946:	f7fd fc3b 	bl	80051c0 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800794a:	f8d6 3354 	ldr.w	r3, [r6, #852]	; 0x354
 800794e:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
 8007950:	bf18      	it	ne
 8007952:	f8c6 0354 	strne.w	r0, [r6, #852]	; 0x354
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8007956:	f44f 715e 	mov.w	r1, #888	; 0x378
 800795a:	486e      	ldr	r0, [pc, #440]	; (8007b14 <LoRaMacProcess+0x5b8>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800795c:	bf18      	it	ne
 800795e:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8007962:	f7fd fc2d 	bl	80051c0 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8007966:	f8d6 36d0 	ldr.w	r3, [r6, #1744]	; 0x6d0
 800796a:	4298      	cmp	r0, r3
        nvmData->RegionGroup2.Crc32 = crc;
 800796c:	bf18      	it	ne
 800796e:	f8c6 06d0 	strne.w	r0, [r6, #1744]	; 0x6d0
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8007972:	f04f 0114 	mov.w	r1, #20
 8007976:	4868      	ldr	r0, [pc, #416]	; (8007b18 <LoRaMacProcess+0x5bc>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8007978:	bf18      	it	ne
 800797a:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800797e:	f7fd fc1f 	bl	80051c0 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8007982:	f8d6 36e8 	ldr.w	r3, [r6, #1768]	; 0x6e8
 8007986:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007988:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        nvmData->ClassB.Crc32 = crc;
 800798c:	bf1c      	itt	ne
 800798e:	f8c6 06e8 	strne.w	r0, [r6, #1768]	; 0x6e8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8007992:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 82b7 	beq.w	8007f0a <LoRaMacProcess+0x9ae>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800799c:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 82b3 	beq.w	8007f0a <LoRaMacProcess+0x9ae>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80079a4:	4628      	mov	r0, r5
}
 80079a6:	b029      	add	sp, #164	; 0xa4
 80079a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80079ac:	4718      	bx	r3
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80079ae:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
 80079b2:	e61a      	b.n	80075ea <LoRaMacProcess+0x8e>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80079b4:	f895 2184 	ldrb.w	r2, [r5, #388]	; 0x184
 80079b8:	2a01      	cmp	r2, #1
 80079ba:	d10c      	bne.n	80079d6 <LoRaMacProcess+0x47a>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80079bc:	f00a fdac 	bl	8012518 <LoRaMacClassBIsPingExpected>
 80079c0:	4682      	mov	sl, r0
 80079c2:	b1c0      	cbz	r0, 80079f6 <LoRaMacProcess+0x49a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80079c4:	4658      	mov	r0, fp
 80079c6:	f00a fd9e 	bl	8012506 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80079ca:	4658      	mov	r0, fp
 80079cc:	f00a fd9e 	bl	801250c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80079d0:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80079d2:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
 80079d6:	783b      	ldrb	r3, [r7, #0]
 80079d8:	9304      	str	r3, [sp, #16]
    switch( macHdr.Bits.MType )
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	3b01      	subs	r3, #1
 80079de:	2b06      	cmp	r3, #6
 80079e0:	f200 821d 	bhi.w	8007e1e <LoRaMacProcess+0x8c2>
 80079e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80079e8:	021b0013 	.word	0x021b0013
 80079ec:	021b009d 	.word	0x021b009d
 80079f0:	021b009a 	.word	0x021b009a
 80079f4:	020c      	.short	0x020c
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80079f6:	f00a fd91 	bl	801251c <LoRaMacClassBIsMulticastExpected>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0eb      	beq.n	80079d6 <LoRaMacProcess+0x47a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80079fe:	4650      	mov	r0, sl
 8007a00:	f00a fd82 	bl	8012508 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007a04:	4650      	mov	r0, sl
 8007a06:	f00a fd82 	bl	801250e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8007a0a:	2305      	movs	r3, #5
 8007a0c:	e7e1      	b.n	80079d2 <LoRaMacProcess+0x476>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8007a0e:	2e10      	cmp	r6, #16
 8007a10:	d803      	bhi.n	8007a1a <LoRaMacProcess+0x4be>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
 8007a18:	e12e      	b.n	8007c78 <LoRaMacProcess+0x71c>
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007a1a:	f895 319c 	ldrb.w	r3, [r5, #412]	; 0x19c
            macMsgJoinAccept.Buffer = payload;
 8007a1e:	9712      	str	r7, [sp, #72]	; 0x48
            macMsgJoinAccept.BufSize = size;
 8007a20:	b2f6      	uxtb	r6, r6
 8007a22:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1f3      	bne.n	8007a12 <LoRaMacProcess+0x4b6>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8007a2a:	f7fe fe3f 	bl	80066ac <SecureElementGetJoinEui>
 8007a2e:	aa12      	add	r2, sp, #72	; 0x48
 8007a30:	4601      	mov	r1, r0
 8007a32:	20ff      	movs	r0, #255	; 0xff
 8007a34:	f001 f894 	bl	8008b60 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d157      	bne.n	8007aec <LoRaMacProcess+0x590>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8007a3c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8007a40:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8007a4a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8007a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a56:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8007a5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8007a5e:	f3c3 1202 	ubfx	r2, r3, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007a62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007a66:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8007a6a:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8007a6e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8007a72:	f885 206d 	strb.w	r2, [r5, #109]	; 0x6d
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8007a76:	b3bb      	cbz	r3, 8007ae8 <LoRaMacProcess+0x58c>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8007a78:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8007a7a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007a7c:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8007a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a84:	4353      	muls	r3, r2
 8007a86:	65eb      	str	r3, [r5, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8007a88:	4413      	add	r3, r2
 8007a8a:	662b      	str	r3, [r5, #96]	; 0x60
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8007a8c:	f10d 035a 	add.w	r3, sp, #90	; 0x5a
 8007a90:	9310      	str	r3, [sp, #64]	; 0x40
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8007a92:	2700      	movs	r7, #0
                applyCFList.JoinChannel = MacCtx.Channel;
 8007a94:	f894 341b 	ldrb.w	r3, [r4, #1051]	; 0x41b
 8007a98:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
                applyCFList.Size = size - 17;
 8007a9c:	3e11      	subs	r6, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007a9e:	a90f      	add	r1, sp, #60	; 0x3c
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8007aa0:	f885 719a 	strb.w	r7, [r5, #410]	; 0x19a
                applyCFList.Size = size - 17;
 8007aa4:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8007aa8:	f00a ff8a 	bl	80129c0 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007aac:	2302      	movs	r3, #2
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007aae:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007ab0:	f885 319c 	strb.w	r3, [r5, #412]	; 0x19c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007ab4:	f000 fe20 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 8007ab8:	b118      	cbz	r0, 8007ac2 <LoRaMacProcess+0x566>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8007aba:	2101      	movs	r1, #1
 8007abc:	4638      	mov	r0, r7
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8007abe:	f000 fddf 	bl	8008680 <LoRaMacConfirmQueueSetStatus>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8007ac2:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	f200 81b7 	bhi.w	8007e3a <LoRaMacProcess+0x8de>
        if( MacCtx.NodeAckRequested == true )
 8007acc:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f040 81aa 	bne.w	8007e2a <LoRaMacProcess+0x8ce>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007ad6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007ada:	f043 0320 	orr.w	r3, r3, #32
 8007ade:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
 8007ae2:	f7fe fe25 	bl	8006730 <UpdateRxSlotIdleState>
 8007ae6:	e5fa      	b.n	80076de <LoRaMacProcess+0x182>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e7c5      	b.n	8007a78 <LoRaMacProcess+0x51c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007aec:	2001      	movs	r0, #1
 8007aee:	f000 fe03 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d0e5      	beq.n	8007ac2 <LoRaMacProcess+0x566>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8007af6:	2101      	movs	r1, #1
 8007af8:	2007      	movs	r0, #7
 8007afa:	e7e0      	b.n	8007abe <LoRaMacProcess+0x562>
 8007afc:	2000163c 	.word	0x2000163c
 8007b00:	20001734 	.word	0x20001734
 8007b04:	20001768 	.word	0x20001768
 8007b08:	20001780 	.word	0x20001780
 8007b0c:	200018d8 	.word	0x200018d8
 8007b10:	20001a78 	.word	0x20001a78
 8007b14:	20001a8c 	.word	0x20001a8c
 8007b18:	20001e08 	.word	0x20001e08
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007b22:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
 8007b26:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8007b2a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
 8007b2e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b32:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007b36:	230d      	movs	r3, #13
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b38:	a90b      	add	r1, sp, #44	; 0x2c
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007b3a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b3e:	f00a ff29 	bl	8012994 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8007b42:	f1a6 030d 	sub.w	r3, r6, #13
 8007b46:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b48:	9009      	str	r0, [sp, #36]	; 0x24
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8007b4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b4e:	b200      	sxth	r0, r0
 8007b50:	4283      	cmp	r3, r0
 8007b52:	f73f af5e 	bgt.w	8007a12 <LoRaMacProcess+0x4b6>
 8007b56:	2e0b      	cmp	r6, #11
 8007b58:	f67f af5b 	bls.w	8007a12 <LoRaMacProcess+0x4b6>
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8007b5c:	4bba      	ldr	r3, [pc, #744]	; (8007e48 <LoRaMacProcess+0x8ec>)
 8007b5e:	9325      	str	r3, [sp, #148]	; 0x94
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8007b60:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8007b64:	23ff      	movs	r3, #255	; 0xff
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8007b66:	4658      	mov	r0, fp
            macMsgData.Buffer = payload;
 8007b68:	971c      	str	r7, [sp, #112]	; 0x70
            macMsgData.BufSize = size;
 8007b6a:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8007b6e:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8007b72:	f00a fe0f 	bl	8012794 <LoRaMacParserData>
 8007b76:	4607      	mov	r7, r0
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	f47f af4a 	bne.w	8007a12 <LoRaMacProcess+0x4b6>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007b7e:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d114      	bne.n	8007bb0 <LoRaMacProcess+0x654>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8007b86:	f00a fcc7 	bl	8012518 <LoRaMacClassBIsPingExpected>
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d043      	beq.n	8007c18 <LoRaMacProcess+0x6bc>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007b90:	4638      	mov	r0, r7
 8007b92:	f00a fcb8 	bl	8012506 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8007b96:	4638      	mov	r0, r7
 8007b98:	f00a fcb8 	bl	801250c <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8007b9c:	2304      	movs	r3, #4
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8007b9e:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8007ba2:	981e      	ldr	r0, [sp, #120]	; 0x78
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8007ba4:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8007ba8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8007bac:	f00a fcc8 	bl	8012540 <LoRaMacClassBSetFPendingBit>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8007bb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bb2:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8007bb6:	a90f      	add	r1, sp, #60	; 0x3c
 8007bb8:	4658      	mov	r0, fp
 8007bba:	f00a fc81 	bl	80124c0 <DetermineFrameType>
 8007bbe:	4607      	mov	r7, r0
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f47f af26 	bne.w	8007a12 <LoRaMacProcess+0x4b6>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007bc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007bc8:	4ba0      	ldr	r3, [pc, #640]	; (8007e4c <LoRaMacProcess+0x8f0>)
            downLinkCounter = 0;
 8007bca:	900a      	str	r0, [sp, #40]	; 0x28
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007bcc:	4682      	mov	sl, r0
 8007bce:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007bd2:	428a      	cmp	r2, r1
 8007bd4:	d12c      	bne.n	8007c30 <LoRaMacProcess+0x6d4>
 8007bd6:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
 8007bda:	b348      	cbz	r0, 8007c30 <LoRaMacProcess+0x6d4>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8007bdc:	232c      	movs	r3, #44	; 0x2c
 8007bde:	fb03 530a 	mla	r3, r3, sl, r5
 8007be2:	f893 a0d7 	ldrb.w	sl, [r3, #215]	; 0xd7
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8007be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	930a      	str	r3, [sp, #40]	; 0x28
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007bee:	f895 3184 	ldrb.w	r3, [r5, #388]	; 0x184
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d102      	bne.n	8007bfc <LoRaMacProcess+0x6a0>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8007bfc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	f47f af06 	bne.w	8007a12 <LoRaMacProcess+0x4b6>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8007c06:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8007c0a:	f013 0f60 	tst.w	r3, #96	; 0x60
 8007c0e:	f47f af00 	bne.w	8007a12 <LoRaMacProcess+0x4b6>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8007c12:	9205      	str	r2, [sp, #20]
 8007c14:	2701      	movs	r7, #1
 8007c16:	e012      	b.n	8007c3e <LoRaMacProcess+0x6e2>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007c18:	f00a fc80 	bl	801251c <LoRaMacClassBIsMulticastExpected>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d0c7      	beq.n	8007bb0 <LoRaMacProcess+0x654>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007c20:	4630      	mov	r0, r6
 8007c22:	f00a fc71 	bl	8012508 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007c26:	4630      	mov	r0, r6
 8007c28:	f00a fc71 	bl	801250e <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8007c2c:	2305      	movs	r3, #5
 8007c2e:	e7b6      	b.n	8007b9e <LoRaMacProcess+0x642>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007c30:	f10a 0a01 	add.w	sl, sl, #1
 8007c34:	f1ba 0f04 	cmp.w	sl, #4
 8007c38:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007c3c:	d1c7      	bne.n	8007bce <LoRaMacProcess+0x672>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8007c3e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8007c42:	f895 619a 	ldrb.w	r6, [r5, #410]	; 0x19a
    switch( addrID )
 8007c46:	f1ba 0f04 	cmp.w	sl, #4
 8007c4a:	d829      	bhi.n	8007ca0 <LoRaMacProcess+0x744>
 8007c4c:	e8df f00a 	tbb	[pc, sl]
 8007c50:	201e0322 	.word	0x201e0322
 8007c54:	17          	.byte	0x17
 8007c55:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_1;
 8007c56:	2605      	movs	r6, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8007c58:	f8bd 107e 	ldrh.w	r1, [sp, #126]	; 0x7e
 8007c5c:	aa0a      	add	r2, sp, #40	; 0x28
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f00a fd0c 	bl	801267c <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007c64:	b1f0      	cbz	r0, 8007ca4 <LoRaMacProcess+0x748>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007c66:	2807      	cmp	r0, #7
 8007c68:	bf0c      	ite	eq
 8007c6a:	2308      	moveq	r3, #8
 8007c6c:	2301      	movne	r3, #1
 8007c6e:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c74:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
 8007c78:	f7fe fd96 	bl	80067a8 <PrepareRxDoneAbort>
                return;
 8007c7c:	e52f      	b.n	80076de <LoRaMacProcess+0x182>
            if( lrWanVersion.Fields.Minor == 1 )
 8007c7e:	2e01      	cmp	r6, #1
 8007c80:	d10a      	bne.n	8007c98 <LoRaMacProcess+0x73c>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8007c82:	b15b      	cbz	r3, 8007c9c <LoRaMacProcess+0x740>
                    *fCntID = A_FCNT_DOWN;
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	bf08      	it	eq
 8007c88:	2602      	moveq	r6, #2
 8007c8a:	e7e5      	b.n	8007c58 <LoRaMacProcess+0x6fc>
            *fCntID = MC_FCNT_DOWN_2;
 8007c8c:	2606      	movs	r6, #6
            break;
 8007c8e:	e7e3      	b.n	8007c58 <LoRaMacProcess+0x6fc>
            *fCntID = MC_FCNT_DOWN_3;
 8007c90:	2607      	movs	r6, #7
            break;
 8007c92:	e7e1      	b.n	8007c58 <LoRaMacProcess+0x6fc>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8007c94:	2604      	movs	r6, #4
 8007c96:	e7df      	b.n	8007c58 <LoRaMacProcess+0x6fc>
                *fCntID = FCNT_DOWN;
 8007c98:	2603      	movs	r6, #3
 8007c9a:	e7dd      	b.n	8007c58 <LoRaMacProcess+0x6fc>
                    *fCntID = A_FCNT_DOWN;
 8007c9c:	2602      	movs	r6, #2
 8007c9e:	e7db      	b.n	8007c58 <LoRaMacProcess+0x6fc>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e7e4      	b.n	8007c6e <LoRaMacProcess+0x712>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8007ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca6:	9905      	ldr	r1, [sp, #20]
 8007ca8:	f8cd b000 	str.w	fp, [sp]
 8007cac:	4632      	mov	r2, r6
 8007cae:	4650      	mov	r0, sl
 8007cb0:	f000 feca 	bl	8008a48 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8007cb4:	b120      	cbz	r0, 8007cc0 <LoRaMacProcess+0x764>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8007cb6:	2802      	cmp	r0, #2
 8007cb8:	bf0c      	ite	eq
 8007cba:	230a      	moveq	r3, #10
 8007cbc:	230b      	movne	r3, #11
 8007cbe:	e6a9      	b.n	8007a14 <LoRaMacProcess+0x4b8>
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007cc0:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007cc4:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007cc8:	f3c3 1200 	ubfx	r2, r3, #4, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007ccc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007cd0:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8007cd4:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8007cd8:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8007cdc:	f884 2425 	strb.w	r2, [r4, #1061]	; 0x425
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8007ce0:	2b01      	cmp	r3, #1
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8007ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce4:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
                Nvm.MacGroup2.DownlinkReceived = true;
 8007ce8:	bf9e      	ittt	ls
 8007cea:	2201      	movls	r2, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
 8007cec:	6368      	strls	r0, [r5, #52]	; 0x34
                Nvm.MacGroup2.DownlinkReceived = true;
 8007cee:	f885 218a 	strbls.w	r2, [r5, #394]	; 0x18a
            if( multicast == 1 )
 8007cf2:	2f01      	cmp	r7, #1
            MacCtx.McpsIndication.Multicast = multicast;
 8007cf4:	f884 7422 	strb.w	r7, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8007cf8:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8007cfc:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007d00:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            if( multicast == 1 )
 8007d04:	d103      	bne.n	8007d0e <LoRaMacProcess+0x7b2>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8007d06:	2202      	movs	r2, #2
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8007d08:	f884 2420 	strb.w	r2, [r4, #1056]	; 0x420
 8007d0c:	e018      	b.n	8007d40 <LoRaMacProcess+0x7e4>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8007d0e:	9a04      	ldr	r2, [sp, #16]
 8007d10:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 8007d14:	2aa0      	cmp	r2, #160	; 0xa0
 8007d16:	d127      	bne.n	8007d68 <LoRaMacProcess+0x80c>
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8007d18:	f895 119a 	ldrb.w	r1, [r5, #410]	; 0x19a
                    Nvm.MacGroup1.SrvAckRequested = true;
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8007d22:	b909      	cbnz	r1, 8007d28 <LoRaMacProcess+0x7cc>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8007d24:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007d26:	6429      	str	r1, [r5, #64]	; 0x40
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8007d28:	2b01      	cmp	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8007d2a:	f884 2420 	strb.w	r2, [r4, #1056]	; 0x420
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8007d2e:	d907      	bls.n	8007d40 <LoRaMacProcess+0x7e4>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
 8007d30:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007d34:	f8c4 2440 	str.w	r2, [r4, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8007d38:	f8d9 2000 	ldr.w	r2, [r9]
 8007d3c:	f8c4 2494 	str.w	r2, [r4, #1172]	; 0x494
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8007d40:	2b01      	cmp	r3, #1
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8007d42:	f894 1444 	ldrb.w	r1, [r4, #1092]	; 0x444
 8007d46:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8007d4a:	d805      	bhi.n	8007d58 <LoRaMacProcess+0x7fc>
        if( request == MCPS_CONFIRMED )
 8007d4c:	2901      	cmp	r1, #1
 8007d4e:	d101      	bne.n	8007d54 <LoRaMacProcess+0x7f8>
            if( fCtrl.Bits.Ack == 1 )
 8007d50:	0696      	lsls	r6, r2, #26
 8007d52:	d501      	bpl.n	8007d58 <LoRaMacProcess+0x7fc>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8007d54:	f000 fbec 	bl	8008530 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8007d58:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d849      	bhi.n	8007df4 <LoRaMacProcess+0x898>
 8007d60:	e8df f003 	tbb	[pc, r3]
 8007d64:	10411f06 	.word	0x10411f06
                    Nvm.MacGroup1.SrvAckRequested = false;
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
 8007d6e:	e7cb      	b.n	8007d08 <LoRaMacProcess+0x7ac>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8007d70:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8007d74:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8007d78:	4642      	mov	r2, r8
 8007d7a:	f001 010f 	and.w	r1, r1, #15
 8007d7e:	a820      	add	r0, sp, #128	; 0x80
 8007d80:	f7fe ff0e 	bl	8006ba0 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007d84:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8007d88:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8007d8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007d8e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8007d92:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8007d96:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
                    break;
 8007da0:	e00d      	b.n	8007dbe <LoRaMacProcess+0x862>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8007da2:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8007da6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8007daa:	4642      	mov	r2, r8
 8007dac:	f001 010f 	and.w	r1, r1, #15
 8007db0:	a820      	add	r0, sp, #128	; 0x80
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8007db2:	f7fe fef5 	bl	8006ba0 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007db6:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8007dba:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8007dbe:	f89d 2090 	ldrb.w	r2, [sp, #144]	; 0x90
 8007dc2:	2ae0      	cmp	r2, #224	; 0xe0
 8007dc4:	d108      	bne.n	8007dd8 <LoRaMacProcess+0x87c>
 8007dc6:	f895 318b 	ldrb.w	r3, [r5, #395]	; 0x18b
 8007dca:	b92b      	cbnz	r3, 8007dd8 <LoRaMacProcess+0x87c>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8007dcc:	f884 2423 	strb.w	r2, [r4, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8007dd0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8007dd4:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8007dd8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007ddc:	f043 0302 	orr.w	r3, r3, #2
 8007de0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            break;
 8007de4:	e66d      	b.n	8007ac2 <LoRaMacProcess+0x566>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8007de6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8007dea:	f89d 1098 	ldrb.w	r1, [sp, #152]	; 0x98
 8007dee:	9825      	ldr	r0, [sp, #148]	; 0x94
 8007df0:	4642      	mov	r2, r8
 8007df2:	e7de      	b.n	8007db2 <LoRaMacProcess+0x856>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8007dfa:	f7fe fcd5 	bl	80067a8 <PrepareRxDoneAbort>
                    break;
 8007dfe:	e7de      	b.n	8007dbe <LoRaMacProcess+0x862>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8007e00:	4d11      	ldr	r5, [pc, #68]	; (8007e48 <LoRaMacProcess+0x8ec>)
 8007e02:	3e01      	subs	r6, #1
 8007e04:	b2b2      	uxth	r2, r6
 8007e06:	1c79      	adds	r1, r7, #1
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f009 fd26 	bl	801185a <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	f8a4 3420 	strh.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8007e14:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8007e18:	f884 642c 	strb.w	r6, [r4, #1068]	; 0x42c
 8007e1c:	e7dc      	b.n	8007dd8 <LoRaMacProcess+0x87c>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8007e24:	f7fe fcc0 	bl	80067a8 <PrepareRxDoneAbort>
            break;
 8007e28:	e64b      	b.n	8007ac2 <LoRaMacProcess+0x566>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8007e2a:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f43f ae51 	beq.w	8007ad6 <LoRaMacProcess+0x57a>
                OnRetransmitTimeoutTimerEvent( NULL );
 8007e34:	2000      	movs	r0, #0
 8007e36:	f7fe fc9f 	bl	8006778 <OnRetransmitTimeoutTimerEvent>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
 8007e3a:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	f43f ae4f 	beq.w	8007ae2 <LoRaMacProcess+0x586>
 8007e44:	e647      	b.n	8007ad6 <LoRaMacProcess+0x57a>
 8007e46:	bf00      	nop
 8007e48:	20001454 	.word	0x20001454
 8007e4c:	20001734 	.word	0x20001734
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007e50:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007e54:	0758      	lsls	r0, r3, #29
 8007e56:	d515      	bpl.n	8007e84 <LoRaMacProcess+0x928>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8007e58:	2001      	movs	r0, #1
 8007e5a:	f000 fc4d 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 8007e5e:	b160      	cbz	r0, 8007e7a <LoRaMacProcess+0x91e>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8007e60:	2001      	movs	r0, #1
 8007e62:	f000 fc1f 	bl	80086a4 <LoRaMacConfirmQueueGetStatus>
 8007e66:	b908      	cbnz	r0, 8007e6c <LoRaMacProcess+0x910>
                MacCtx.ChannelsNbTransCounter = 0;
 8007e68:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007e6c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8007e70:	f023 0302 	bic.w	r3, r3, #2
 8007e74:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
 8007e78:	e004      	b.n	8007e84 <LoRaMacProcess+0x928>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8007e7a:	2005      	movs	r0, #5
 8007e7c:	f000 fc3c 	bl	80086f8 <LoRaMacConfirmQueueIsCmdActive>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d1f3      	bne.n	8007e6c <LoRaMacProcess+0x910>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8007e84:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8007e88:	07d9      	lsls	r1, r3, #31
 8007e8a:	f57f ac7d 	bpl.w	8007788 <LoRaMacProcess+0x22c>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8007e8e:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
 8007e92:	b10a      	cbz	r2, 8007e98 <LoRaMacProcess+0x93c>
 8007e94:	2a03      	cmp	r2, #3
 8007e96:	d118      	bne.n	8007eca <LoRaMacProcess+0x96e>
    if( counter >= limit )
 8007e98:	4a1d      	ldr	r2, [pc, #116]	; (8007f10 <LoRaMacProcess+0x9b4>)
 8007e9a:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
 8007e9e:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	d205      	bcs.n	8007eb2 <LoRaMacProcess+0x956>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007ea6:	079a      	lsls	r2, r3, #30
 8007ea8:	d523      	bpl.n	8007ef2 <LoRaMacProcess+0x996>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8007eaa:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d81f      	bhi.n	8007ef2 <LoRaMacProcess+0x996>
            TimerStop( &MacCtx.TxDelayedTimer );
 8007eb2:	4818      	ldr	r0, [pc, #96]	; (8007f14 <LoRaMacProcess+0x9b8>)
 8007eb4:	f7fd fa1e 	bl	80052f4 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8007eb8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8007ebc:	f023 0320 	bic.w	r3, r3, #32
 8007ec0:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 8007ec4:	f7ff f970 	bl	80071a8 <StopRetransmission.isra.0>
 8007ec8:	e45e      	b.n	8007788 <LoRaMacProcess+0x22c>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8007eca:	2a01      	cmp	r2, #1
 8007ecc:	d111      	bne.n	8007ef2 <LoRaMacProcess+0x996>
            if( MacCtx.RetransmitTimeoutRetry == true )
 8007ece:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	f43f ac58 	beq.w	8007788 <LoRaMacProcess+0x22c>
    if( counter >= limit )
 8007ed8:	4a0d      	ldr	r2, [pc, #52]	; (8007f10 <LoRaMacProcess+0x9b4>)
 8007eda:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
 8007ede:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	d2e5      	bcs.n	8007eb2 <LoRaMacProcess+0x956>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007ee6:	079b      	lsls	r3, r3, #30
 8007ee8:	d503      	bpl.n	8007ef2 <LoRaMacProcess+0x996>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007eea:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1df      	bne.n	8007eb2 <LoRaMacProcess+0x956>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8007ef2:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 8007ef6:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8007ef8:	f36f 1345 	bfc	r3, #5, #1
 8007efc:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 8007f00:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8007f04:	f7ff faf4 	bl	80074f0 <OnTxDelayedTimerEvent>
 8007f08:	e43e      	b.n	8007788 <LoRaMacProcess+0x22c>
}
 8007f0a:	b029      	add	sp, #164	; 0xa4
 8007f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f10:	20001734 	.word	0x20001734
 8007f14:	2000158c 	.word	0x2000158c

08007f18 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	4689      	mov	r9, r1
 8007f1e:	b08b      	sub	sp, #44	; 0x2c
 8007f20:	4690      	mov	r8, r2
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8007f22:	4606      	mov	r6, r0
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f000 817b 	beq.w	8008220 <LoRaMacInitialization+0x308>
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	f000 8178 	beq.w	8008220 <LoRaMacInitialization+0x308>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8007f30:	6803      	ldr	r3, [r0, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8174 	beq.w	8008220 <LoRaMacInitialization+0x308>
 8007f38:	6843      	ldr	r3, [r0, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 8170 	beq.w	8008220 <LoRaMacInitialization+0x308>
        ( primitives->MacMcpsIndication == NULL ) ||
 8007f40:	6883      	ldr	r3, [r0, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 816c 	beq.w	8008220 <LoRaMacInitialization+0x308>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8007f48:	68c3      	ldr	r3, [r0, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 8168 	beq.w	8008220 <LoRaMacInitialization+0x308>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8007f50:	4610      	mov	r0, r2
 8007f52:	f00a fd1a 	bl	801298a <RegionIsActive>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f000 8164 	beq.w	8008224 <LoRaMacInitialization+0x30c>

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8007f5c:	4cb3      	ldr	r4, [pc, #716]	; (800822c <LoRaMacInitialization+0x314>)
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8007f5e:	4db4      	ldr	r5, [pc, #720]	; (8008230 <LoRaMacInitialization+0x318>)
    LoRaMacConfirmQueueInit( primitives );
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 fb43 	bl	80085ec <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8007f66:	f240 62ec 	movw	r2, #1772	; 0x6ec
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f009 fc88 	bl	8011882 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8007f72:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 8007f76:	2100      	movs	r1, #0
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f009 fc82 	bl	8011882 <memset1>
    // Set non zero variables to its default value
    Nvm.MacGroup2.Region = region;
    Nvm.MacGroup2.DeviceClass = CLASS_A;

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8007f7e:	4bad      	ldr	r3, [pc, #692]	; (8008234 <LoRaMacInitialization+0x31c>)
 8007f80:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007f84:	f504 7351 	add.w	r3, r4, #836	; 0x344
 8007f88:	9306      	str	r3, [sp, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007f8a:	f504 7356 	add.w	r3, r4, #856	; 0x358
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8007f8e:	2700      	movs	r7, #0
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007f90:	4640      	mov	r0, r8
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007f92:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007f94:	a906      	add	r1, sp, #24
    params.Bands = &RegionBands;
 8007f96:	4ba8      	ldr	r3, [pc, #672]	; (8008238 <LoRaMacInitialization+0x320>)
    Nvm.MacGroup2.Region = region;
 8007f98:	f884 804c 	strb.w	r8, [r4, #76]	; 0x4c
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8007f9c:	f884 7184 	strb.w	r7, [r4, #388]	; 0x184
    params.Type = INIT_TYPE_DEFAULTS;
 8007fa0:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    params.Bands = &RegionBands;
 8007fa4:	9308      	str	r3, [sp, #32]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007fa6:	f00a fd05 	bl	80129b4 <RegionInitDefaults>

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007faa:	230e      	movs	r3, #14
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007fac:	a904      	add	r1, sp, #16
 8007fae:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007fb2:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007fb6:	f00a fced 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8007fba:	1bc0      	subs	r0, r0, r7
 8007fbc:	bf18      	it	ne
 8007fbe:	2001      	movne	r0, #1

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8007fc0:	f04f 0b0a 	mov.w	fp, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8007fc4:	f884 0188 	strb.w	r0, [r4, #392]	; 0x188
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007fc8:	a904      	add	r1, sp, #16
 8007fca:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8007fce:	f88d b010 	strb.w	fp, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007fd2:	f00a fcdf 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 8007fd6:	f04f 0a06 	mov.w	sl, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8007fda:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007fde:	a904      	add	r1, sp, #16
 8007fe0:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_TX_DR;
 8007fe4:	f88d a010 	strb.w	sl, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007fe8:	f00a fcd4 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8007fec:	230f      	movs	r3, #15
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8007fee:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007ff2:	a904      	add	r1, sp, #16
 8007ff4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8007ff8:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007ffc:	f00a fcca 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8008000:	2310      	movs	r3, #16
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008002:	eb0d 0103 	add.w	r1, sp, r3
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8008006:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800800a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800800e:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008012:	f00a fcbf 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8008016:	2311      	movs	r3, #17
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8008018:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800801c:	a904      	add	r1, sp, #16
 800801e:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8008022:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008026:	f00a fcb5 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800802a:	2312      	movs	r3, #18
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800802c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008030:	a904      	add	r1, sp, #16
 8008032:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8008036:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800803a:	f00a fcab 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800803e:	2313      	movs	r3, #19
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8008040:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008044:	a904      	add	r1, sp, #16
 8008046:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800804a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800804e:	f00a fca1 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8008052:	2315      	movs	r3, #21
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8008054:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008058:	a904      	add	r1, sp, #16
 800805a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800805e:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008062:	f00a fc97 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8008066:	2316      	movs	r3, #22
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8008068:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800806c:	a904      	add	r1, sp, #16
 800806e:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8008072:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008076:	f00a fc8d 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800807a:	2317      	movs	r3, #23
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800807c:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8008080:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008084:	a904      	add	r1, sp, #16
 8008086:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800808a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800808e:	f00a fc81 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8008092:	b2c0      	uxtb	r0, r0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8008094:	231c      	movs	r3, #28
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8008096:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800809a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800809e:	a904      	add	r1, sp, #16
 80080a0:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80080a4:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080a8:	f00a fc74 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80080ac:	231d      	movs	r3, #29
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80080ae:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080b2:	a904      	add	r1, sp, #16
 80080b4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80080b8:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080bc:	f00a fc6a 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80080c0:	231e      	movs	r3, #30
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80080c2:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080c6:	a904      	add	r1, sp, #16
 80080c8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80080cc:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080d0:	f00a fc60 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80080d4:	231f      	movs	r3, #31
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80080d6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080da:	a904      	add	r1, sp, #16
 80080dc:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80080e0:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080e4:	f00a fc56 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80080e8:	230b      	movs	r3, #11
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80080ea:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080ee:	a904      	add	r1, sp, #16
 80080f0:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80080f4:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080f8:	f00a fc4c 	bl	8012994 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80080fc:	230c      	movs	r3, #12
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80080fe:	a904      	add	r1, sp, #16
    MacCtx.AdrAckLimit = phyParam.Value;
 8008100:	f8a5 03fc 	strh.w	r0, [r5, #1020]	; 0x3fc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008104:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8008108:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800810c:	f00a fc42 	bl	8012994 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8008110:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008114:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8008116:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800811a:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800811c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008120:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8008122:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8008126:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8008128:	f04f 0801 	mov.w	r8, #1
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800812c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8008130:	66a3      	str	r3, [r4, #104]	; 0x68
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008132:	9003      	str	r0, [sp, #12]
    MacCtx.AdrAckDelay = phyParam.Value;
 8008134:	f8a5 03fe 	strh.w	r0, [r5, #1022]	; 0x3fe
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8008138:	f884 80a8 	strb.w	r8, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800813c:	f8c4 b08c 	str.w	fp, [r4, #140]	; 0x8c
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8008140:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8008144:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8008148:	f884 a054 	strb.w	sl, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800814c:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c

    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8008150:	f884 818b 	strb.w	r8, [r4, #395]	; 0x18b

    ResetMacParameters( );
 8008154:	f7fe fc24 	bl	80069a0 <ResetMacParameters>
    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8008158:	4938      	ldr	r1, [pc, #224]	; (800823c <LoRaMacInitialization+0x324>)
    MacCtx.MacFlags.Value = 0;
 800815a:	f885 748d 	strb.w	r7, [r5, #1165]	; 0x48d
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800815e:	f505 705c 	add.w	r0, r5, #880	; 0x370
    MacCtx.MacCallbacks = callbacks;
 8008162:	e9c5 69d1 	strd	r6, r9, [r5, #836]	; 0x344
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8008166:	e9c4 770e 	strd	r7, r7, [r4, #56]	; 0x38
    Nvm.MacGroup2.PublicNetwork = true;
 800816a:	f884 8185 	strb.w	r8, [r4, #389]	; 0x185
    MacCtx.MacState = LORAMAC_STOPPED;
 800816e:	f8c5 8340 	str.w	r8, [r5, #832]	; 0x340
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8008172:	f009 fc6e 	bl	8011a52 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8008176:	4932      	ldr	r1, [pc, #200]	; (8008240 <LoRaMacInitialization+0x328>)
 8008178:	f505 7062 	add.w	r0, r5, #904	; 0x388
 800817c:	f009 fc69 	bl	8011a52 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8008180:	4930      	ldr	r1, [pc, #192]	; (8008244 <LoRaMacInitialization+0x32c>)
 8008182:	f505 7068 	add.w	r0, r5, #928	; 0x3a0
 8008186:	f009 fc64 	bl	8011a52 <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800818a:	466e      	mov	r6, sp
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800818c:	492e      	ldr	r1, [pc, #184]	; (8008248 <LoRaMacInitialization+0x330>)
 800818e:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8008192:	f009 fc5e 	bl	8011a52 <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8008196:	4630      	mov	r0, r6
 8008198:	f009 fbf4 	bl	8011984 <SysTimeGetMcuTime>
 800819c:	e896 0003 	ldmia.w	r6, {r0, r1}
 80081a0:	f504 73c8 	add.w	r3, r4, #400	; 0x190
 80081a4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80081a8:	4b28      	ldr	r3, [pc, #160]	; (800824c <LoRaMacInitialization+0x334>)
 80081aa:	601f      	str	r7, [r3, #0]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80081ac:	4b28      	ldr	r3, [pc, #160]	; (8008250 <LoRaMacInitialization+0x338>)
 80081ae:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80081b2:	4b28      	ldr	r3, [pc, #160]	; (8008254 <LoRaMacInitialization+0x33c>)
 80081b4:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80081b8:	4b27      	ldr	r3, [pc, #156]	; (8008258 <LoRaMacInitialization+0x340>)
 80081ba:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 80081be:	4f27      	ldr	r7, [pc, #156]	; (800825c <LoRaMacInitialization+0x344>)
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80081c0:	4b27      	ldr	r3, [pc, #156]	; (8008260 <LoRaMacInitialization+0x348>)
 80081c2:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80081c6:	4b27      	ldr	r3, [pc, #156]	; (8008264 <LoRaMacInitialization+0x34c>)
 80081c8:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80081cc:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80081d4:	f504 70d2 	add.w	r0, r4, #420	; 0x1a4
 80081d8:	f7fe f94e 	bl	8006478 <SecureElementInit>
 80081dc:	b120      	cbz	r0, 80081e8 <LoRaMacInitialization+0x2d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80081de:	2611      	movs	r6, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 80081e0:	4630      	mov	r0, r6
 80081e2:	b00b      	add	sp, #44	; 0x2c
 80081e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fb57 	bl	800889c <LoRaMacCryptoInit>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d1f5      	bne.n	80081de <LoRaMacInitialization+0x2c6>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80081f2:	f000 f911 	bl	8008418 <LoRaMacCommandsInit>
 80081f6:	b9b8      	cbnz	r0, 8008228 <LoRaMacInitialization+0x310>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80081f8:	481b      	ldr	r0, [pc, #108]	; (8008268 <LoRaMacInitialization+0x350>)
 80081fa:	f000 fb79 	bl	80088f0 <LoRaMacCryptoSetMulticastReference>
 80081fe:	4606      	mov	r6, r0
 8008200:	2800      	cmp	r0, #0
 8008202:	d1ec      	bne.n	80081de <LoRaMacInitialization+0x2c6>
    srand1( Radio.Random( ) );
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	4798      	blx	r3
 8008208:	f7fc ffd4 	bl	80051b4 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800820c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800820e:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
 8008212:	4798      	blx	r3
    Radio.Sleep( );
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8008218:	2301      	movs	r3, #1
 800821a:	f885 348e 	strb.w	r3, [r5, #1166]	; 0x48e
    return LORAMAC_STATUS_OK;
 800821e:	e7df      	b.n	80081e0 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008220:	2603      	movs	r6, #3
 8008222:	e7dd      	b.n	80081e0 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8008224:	2609      	movs	r6, #9
 8008226:	e7db      	b.n	80081e0 <LoRaMacInitialization+0x2c8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008228:	2613      	movs	r6, #19
 800822a:	e7d9      	b.n	80081e0 <LoRaMacInitialization+0x2c8>
 800822c:	20001734 	.word	0x20001734
 8008230:	2000121c 	.word	0x2000121c
 8008234:	01000400 	.word	0x01000400
 8008238:	20001e20 	.word	0x20001e20
 800823c:	080074f1 	.word	0x080074f1
 8008240:	08006b11 	.word	0x08006b11
 8008244:	08006b55 	.word	0x08006b55
 8008248:	08006779 	.word	0x08006779
 800824c:	20001218 	.word	0x20001218
 8008250:	08006955 	.word	0x08006955
 8008254:	08006909 	.word	0x08006909
 8008258:	080066e9 	.word	0x080066e9
 800825c:	08017300 	.word	0x08017300
 8008260:	080066c5 	.word	0x080066c5
 8008264:	0800670d 	.word	0x0800670d
 8008268:	20001808 	.word	0x20001808

0800826c <LoRaMacMibGetRequestConfirm>:
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800826c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800826e:	4604      	mov	r4, r0
 8008270:	2800      	cmp	r0, #0
 8008272:	f000 80c4 	beq.w	80083fe <LoRaMacMibGetRequestConfirm+0x192>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 8008276:	7800      	ldrb	r0, [r0, #0]
 8008278:	2844      	cmp	r0, #68	; 0x44
 800827a:	f200 80ba 	bhi.w	80083f2 <LoRaMacMibGetRequestConfirm+0x186>
 800827e:	e8df f000 	tbb	[pc, r0]
 8008282:	2923      	.short	0x2923
 8008284:	3936332e 	.word	0x3936332e
 8008288:	b8b8423d 	.word	0xb8b8423d
 800828c:	b8b8b8b8 	.word	0xb8b8b8b8
 8008290:	b8b8b8b8 	.word	0xb8b8b8b8
 8008294:	b8b8b8b8 	.word	0xb8b8b8b8
 8008298:	b8b8b8b8 	.word	0xb8b8b8b8
 800829c:	46b8b8b8 	.word	0x46b8b8b8
 80082a0:	5e5b544a 	.word	0x5e5b544a
 80082a4:	68646661 	.word	0x68646661
 80082a8:	75726f6c 	.word	0x75726f6c
 80082ac:	8e8a7b78 	.word	0x8e8a7b78
 80082b0:	9d9a9296 	.word	0x9d9a9296
 80082b4:	b8a6a8a1 	.word	0xb8a6a8a1
 80082b8:	b8b8b8ac 	.word	0xb8b8b8ac
 80082bc:	b8b8b8b8 	.word	0xb8b8b8b8
 80082c0:	b8b8b8b8 	.word	0xb8b8b8b8
 80082c4:	b8b8      	.short	0xb8b8
 80082c6:	b4          	.byte	0xb4
 80082c7:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80082c8:	4b4e      	ldr	r3, [pc, #312]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80082ca:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80082ce:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 80082d0:	b004      	add	sp, #16
 80082d2:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80082d4:	4b4b      	ldr	r3, [pc, #300]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80082d6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80082da:	7123      	strb	r3, [r4, #4]
            break;
 80082dc:	e002      	b.n	80082e4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80082de:	f7fe f9df 	bl	80066a0 <SecureElementGetDevEui>
 80082e2:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80082e4:	2000      	movs	r0, #0
            break;
 80082e6:	e7f3      	b.n	80082d0 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80082e8:	f7fe f9e0 	bl	80066ac <SecureElementGetJoinEui>
 80082ec:	e7f9      	b.n	80082e2 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.SePin = SecureElementGetPin( );
 80082ee:	f7fe f9e3 	bl	80066b8 <SecureElementGetPin>
 80082f2:	e7f6      	b.n	80082e2 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80082f4:	4b43      	ldr	r3, [pc, #268]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80082f6:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 80082fa:	e7ee      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80082fc:	4b41      	ldr	r3, [pc, #260]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80082fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8008302:	6063      	str	r3, [r4, #4]
            break;
 8008304:	e7ee      	b.n	80082e4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8008306:	4b3f      	ldr	r3, [pc, #252]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 8008308:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800830c:	e7f9      	b.n	8008302 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800830e:	4b3d      	ldr	r3, [pc, #244]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 8008310:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8008314:	e7e1      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            getPhy.Attribute = PHY_CHANNELS;
 8008316:	231b      	movs	r3, #27
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8008318:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800831c:	4b39      	ldr	r3, [pc, #228]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 800831e:	a902      	add	r1, sp, #8
 8008320:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 8008324:	f00a fb36 	bl	8012994 <RegionGetPhyParam>
 8008328:	e7db      	b.n	80082e2 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800832a:	4b37      	ldr	r3, [pc, #220]	; (8008408 <LoRaMacMibGetRequestConfirm+0x19c>)
 800832c:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800832e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008332:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
 8008336:	e7d5      	b.n	80082e4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8008338:	4b34      	ldr	r3, [pc, #208]	; (800840c <LoRaMacMibGetRequestConfirm+0x1a0>)
 800833a:	3404      	adds	r4, #4
 800833c:	e7f7      	b.n	800832e <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800833e:	4b34      	ldr	r3, [pc, #208]	; (8008410 <LoRaMacMibGetRequestConfirm+0x1a4>)
 8008340:	3404      	adds	r4, #4
 8008342:	e7f4      	b.n	800832e <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008344:	4b33      	ldr	r3, [pc, #204]	; (8008414 <LoRaMacMibGetRequestConfirm+0x1a8>)
 8008346:	3404      	adds	r4, #4
 8008348:	e7f1      	b.n	800832e <LoRaMacMibGetRequestConfirm+0xc2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800834a:	2319      	movs	r3, #25
 800834c:	e7e4      	b.n	8008318 <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800834e:	2318      	movs	r3, #24
 8008350:	e7e2      	b.n	8008318 <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008352:	4b2c      	ldr	r3, [pc, #176]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 8008354:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008358:	e7bf      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800835a:	4b2a      	ldr	r3, [pc, #168]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	e7d0      	b.n	8008302 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8008360:	4b28      	ldr	r3, [pc, #160]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 8008362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008364:	e7cd      	b.n	8008302 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8008366:	4b27      	ldr	r3, [pc, #156]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 8008368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836a:	e7ca      	b.n	8008302 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800836c:	4b25      	ldr	r3, [pc, #148]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 800836e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008370:	e7c7      	b.n	8008302 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8008372:	4b24      	ldr	r3, [pc, #144]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 8008374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008376:	e7c4      	b.n	8008302 <LoRaMacMibGetRequestConfirm+0x96>
            getPhy.Attribute = PHY_MIN_TX_DR;
 8008378:	2302      	movs	r3, #2
 800837a:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800837e:	4b21      	ldr	r3, [pc, #132]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008380:	a902      	add	r1, sp, #8
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008382:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008386:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800838a:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800838e:	f00a fb01 	bl	8012994 <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8008392:	7120      	strb	r0, [r4, #4]
            break;
 8008394:	e7a6      	b.n	80082e4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8008396:	4b1b      	ldr	r3, [pc, #108]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 8008398:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800839c:	e79d      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800839e:	4b19      	ldr	r3, [pc, #100]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083a4:	e799      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80083a6:	4b17      	ldr	r3, [pc, #92]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083a8:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80083ac:	e795      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80083ae:	4b15      	ldr	r3, [pc, #84]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083b4:	e791      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80083b6:	4b13      	ldr	r3, [pc, #76]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ba:	e7a2      	b.n	8008302 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80083bc:	4b11      	ldr	r3, [pc, #68]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80083c2:	e78a      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80083c4:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80083ca:	6063      	str	r3, [r4, #4]
            break;
 80083cc:	e78a      	b.n	80082e4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Contexts = GetNvmData( );
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083d0:	e797      	b.n	8008302 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80083d2:	4b0c      	ldr	r3, [pc, #48]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80083d8:	e7f7      	b.n	80083ca <LoRaMacMibGetRequestConfirm+0x15e>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083dc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80083e0:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80083e2:	f000 fc3d 	bl	8008c60 <RegionGetVersion>
 80083e6:	60a0      	str	r0, [r4, #8]
            break;
 80083e8:	e77c      	b.n	80082e4 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80083ea:	4b06      	ldr	r3, [pc, #24]	; (8008404 <LoRaMacMibGetRequestConfirm+0x198>)
 80083ec:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 80083f0:	e773      	b.n	80082da <LoRaMacMibGetRequestConfirm+0x6e>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80083f2:	4620      	mov	r0, r4
}
 80083f4:	b004      	add	sp, #16
 80083f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80083fa:	f00a b895 	b.w	8012528 <LoRaMacClassBMibGetRequestConfirm>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80083fe:	2003      	movs	r0, #3
 8008400:	e766      	b.n	80082d0 <LoRaMacMibGetRequestConfirm+0x64>
 8008402:	bf00      	nop
 8008404:	20001734 	.word	0x20001734
 8008408:	200017a4 	.word	0x200017a4
 800840c:	200017e0 	.word	0x200017e0
 8008410:	200017ac 	.word	0x200017ac
 8008414:	200017e8 	.word	0x200017e8

08008418 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8008418:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800841a:	4c05      	ldr	r4, [pc, #20]	; (8008430 <LoRaMacCommandsInit+0x18>)
 800841c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008420:	4620      	mov	r0, r4
 8008422:	2100      	movs	r1, #0
 8008424:	f009 fa2d 	bl	8011882 <memset1>
    list->First = NULL;
 8008428:	2000      	movs	r0, #0
    list->Last = NULL;
 800842a:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800842e:	bd10      	pop	{r4, pc}
 8008430:	20001e4c 	.word	0x20001e4c

08008434 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8008434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008438:	4680      	mov	r8, r0
 800843a:	4616      	mov	r6, r2
    if( payload == NULL )
 800843c:	2900      	cmp	r1, #0
 800843e:	d040      	beq.n	80084c2 <LoRaMacCommandsAddCmd+0x8e>
 8008440:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <LoRaMacCommandsAddCmd+0x9c>)
 8008442:	2400      	movs	r4, #0
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8008444:	f103 0c01 	add.w	ip, r3, #1
 8008448:	4618      	mov	r0, r3
 800844a:	0122      	lsls	r2, r4, #4
 800844c:	3310      	adds	r3, #16
        if( mem[size] != 0x00 )
 800844e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008452:	bbc7      	cbnz	r7, 80084c6 <LoRaMacCommandsAddCmd+0x92>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8008454:	4298      	cmp	r0, r3
 8008456:	d1fa      	bne.n	800844e <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 8008458:	4d1e      	ldr	r5, [pc, #120]	; (80084d4 <LoRaMacCommandsAddCmd+0xa0>)
 800845a:	682b      	ldr	r3, [r5, #0]
 800845c:	b90b      	cbnz	r3, 8008462 <LoRaMacCommandsAddCmd+0x2e>
        list->First = element;
 800845e:	f8c5 c000 	str.w	ip, [r5]
    if( list->Last )
 8008462:	686b      	ldr	r3, [r5, #4]
 8008464:	b10b      	cbz	r3, 800846a <LoRaMacCommandsAddCmd+0x36>
        list->Last->Next = element;
 8008466:	f8c3 c000 	str.w	ip, [r3]
    element->Next = NULL;
 800846a:	18ab      	adds	r3, r5, r2
 800846c:	f04f 0900 	mov.w	r9, #0
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 8008470:	3401      	adds	r4, #1
    element->Next = NULL;
 8008472:	f8c3 9008 	str.w	r9, [r3, #8]
    newCmd->CID = cid;
 8008476:	f883 800c 	strb.w	r8, [r3, #12]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800847a:	f102 000d 	add.w	r0, r2, #13
    newCmd->PayloadSize = payloadSize;
 800847e:	0123      	lsls	r3, r4, #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8008480:	b2b2      	uxth	r2, r6
 8008482:	4428      	add	r0, r5
    newCmd->PayloadSize = payloadSize;
 8008484:	50ee      	str	r6, [r5, r3]
    list->Last = element;
 8008486:	f8c5 c004 	str.w	ip, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800848a:	f009 f9e6 	bl	801185a <memcpy1>
    switch( cid )
 800848e:	f1b8 0f11 	cmp.w	r8, #17
 8008492:	d814      	bhi.n	80084be <LoRaMacCommandsAddCmd+0x8a>
 8008494:	4b10      	ldr	r3, [pc, #64]	; (80084d8 <LoRaMacCommandsAddCmd+0xa4>)
 8008496:	2001      	movs	r0, #1
 8008498:	fa00 f808 	lsl.w	r8, r0, r8
 800849c:	ea18 0f03 	tst.w	r8, r3
 80084a0:	bf14      	ite	ne
 80084a2:	4603      	movne	r3, r0
 80084a4:	464b      	moveq	r3, r9
    newCmd->IsSticky = IsSticky( cid );
 80084a6:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 80084aa:	7123      	strb	r3, [r4, #4]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80084ac:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 80084b0:	3301      	adds	r3, #1
 80084b2:	441e      	add	r6, r3
 80084b4:	f8c5 6208 	str.w	r6, [r5, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
}
 80084b8:	4638      	mov	r0, r7
 80084ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80084be:	464b      	mov	r3, r9
 80084c0:	e7f1      	b.n	80084a6 <LoRaMacCommandsAddCmd+0x72>
        return LORAMAC_COMMANDS_ERROR_NPE;
 80084c2:	2701      	movs	r7, #1
 80084c4:	e7f8      	b.n	80084b8 <LoRaMacCommandsAddCmd+0x84>
        if( itr == NUM_OF_MAC_COMMANDS )
 80084c6:	3401      	adds	r4, #1
 80084c8:	2c20      	cmp	r4, #32
 80084ca:	d1bb      	bne.n	8008444 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80084cc:	2702      	movs	r7, #2
 80084ce:	e7f3      	b.n	80084b8 <LoRaMacCommandsAddCmd+0x84>
 80084d0:	20001e53 	.word	0x20001e53
 80084d4:	20001e4c 	.word	0x20001e4c
 80084d8:	00020720 	.word	0x00020720

080084dc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80084dc:	b510      	push	{r4, lr}
    if( macCmd == NULL )
 80084de:	b310      	cbz	r0, 8008526 <LoRaMacCommandsRemoveCmd+0x4a>
    curElement = list->First;
 80084e0:	4a12      	ldr	r2, [pc, #72]	; (800852c <LoRaMacCommandsRemoveCmd+0x50>)
 80084e2:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 80084e4:	4298      	cmp	r0, r3
 80084e6:	d104      	bne.n	80084f2 <LoRaMacCommandsRemoveCmd+0x16>
        list->First = element->Next;
 80084e8:	6803      	ldr	r3, [r0, #0]
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	2300      	movs	r3, #0
 80084ee:	e004      	b.n	80084fa <LoRaMacCommandsRemoveCmd+0x1e>
 80084f0:	460b      	mov	r3, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80084f2:	b113      	cbz	r3, 80084fa <LoRaMacCommandsRemoveCmd+0x1e>
 80084f4:	6819      	ldr	r1, [r3, #0]
 80084f6:	4288      	cmp	r0, r1
 80084f8:	d1fa      	bne.n	80084f0 <LoRaMacCommandsRemoveCmd+0x14>
    if( list->Last == element )
 80084fa:	6851      	ldr	r1, [r2, #4]
 80084fc:	4288      	cmp	r0, r1
        list->Last = PrevElement;
 80084fe:	bf08      	it	eq
 8008500:	6053      	streq	r3, [r2, #4]
    if( PrevElement != NULL )
 8008502:	b10b      	cbz	r3, 8008508 <LoRaMacCommandsRemoveCmd+0x2c>
        PrevElement->Next = element->Next;
 8008504:	6801      	ldr	r1, [r0, #0]
 8008506:	6019      	str	r1, [r3, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8008508:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800850c:	6881      	ldr	r1, [r0, #8]
 800850e:	3b01      	subs	r3, #1
    element->Next = NULL;
 8008510:	2400      	movs	r4, #0
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8008512:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 8008514:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8008516:	4621      	mov	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8008518:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800851c:	2210      	movs	r2, #16
 800851e:	f009 f9b0 	bl	8011882 <memset1>
    return true;
 8008522:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8008524:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008526:	2001      	movs	r0, #1
 8008528:	e7fc      	b.n	8008524 <LoRaMacCommandsRemoveCmd+0x48>
 800852a:	bf00      	nop
 800852c:	20001e4c 	.word	0x20001e4c

08008530 <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8008530:	4b09      	ldr	r3, [pc, #36]	; (8008558 <LoRaMacCommandsRemoveStickyAnsCmds+0x28>)
{
 8008532:	b570      	push	{r4, r5, r6, lr}
    curElement = CommandsCtx.MacCommandList.First;
 8008534:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8008536:	4d09      	ldr	r5, [pc, #36]	; (800855c <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
 8008538:	2401      	movs	r4, #1
 800853a:	b900      	cbnz	r0, 800853e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800853c:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800853e:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 8008540:	6806      	ldr	r6, [r0, #0]
    switch( cid )
 8008542:	2b11      	cmp	r3, #17
 8008544:	d805      	bhi.n	8008552 <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
 8008546:	fa04 f303 	lsl.w	r3, r4, r3
 800854a:	422b      	tst	r3, r5
 800854c:	d001      	beq.n	8008552 <LoRaMacCommandsRemoveStickyAnsCmds+0x22>
            LoRaMacCommandsRemoveCmd( curElement );
 800854e:	f7ff ffc5 	bl	80084dc <LoRaMacCommandsRemoveCmd>
{
 8008552:	4630      	mov	r0, r6
 8008554:	e7f1      	b.n	800853a <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
 8008556:	bf00      	nop
 8008558:	20001e4c 	.word	0x20001e4c
 800855c:	00020720 	.word	0x00020720

08008560 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 8008560:	b128      	cbz	r0, 800856e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8008562:	4b04      	ldr	r3, [pc, #16]	; (8008574 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 8008564:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008568:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800856a:	2000      	movs	r0, #0
 800856c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800856e:	2001      	movs	r0, #1
}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20001e4c 	.word	0x20001e4c

08008578 <LoRaMacCommandsStickyCmdsPending>:
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 8008578:	4603      	mov	r3, r0
 800857a:	b168      	cbz	r0, 8008598 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800857c:	4a07      	ldr	r2, [pc, #28]	; (800859c <LoRaMacCommandsStickyCmdsPending+0x24>)
 800857e:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8008584:	b900      	cbnz	r0, 8008588 <LoRaMacCommandsStickyCmdsPending+0x10>
 8008586:	4770      	bx	lr
    {
        if( curElement->IsSticky == true )
 8008588:	7b02      	ldrb	r2, [r0, #12]
 800858a:	b11a      	cbz	r2, 8008594 <LoRaMacCommandsStickyCmdsPending+0x1c>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800858c:	2201      	movs	r2, #1
 800858e:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8008590:	2000      	movs	r0, #0
 8008592:	4770      	bx	lr
        }
        curElement = curElement->Next;
 8008594:	6800      	ldr	r0, [r0, #0]
 8008596:	e7f5      	b.n	8008584 <LoRaMacCommandsStickyCmdsPending+0xc>
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008598:	2001      	movs	r0, #1
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800859a:	4770      	bx	lr
 800859c:	20001e4c 	.word	0x20001e4c

080085a0 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 80085a0:	3802      	subs	r0, #2
 80085a2:	b2c0      	uxtb	r0, r0
 80085a4:	2811      	cmp	r0, #17
 80085a6:	bf9a      	itte	ls
 80085a8:	4b01      	ldrls	r3, [pc, #4]	; (80085b0 <LoRaMacCommandsGetCmdSize+0x10>)
 80085aa:	5c18      	ldrbls	r0, [r3, r0]
{
 80085ac:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 80085ae:	4770      	bx	lr
 80085b0:	08018c0a 	.word	0x08018c0a

080085b4 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 80085b4:	b530      	push	{r4, r5, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <GetElement.constprop.0+0x30>)
 80085b8:	f893 2020 	ldrb.w	r2, [r3, #32]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 80085bc:	4604      	mov	r4, r0
 80085be:	4608      	mov	r0, r1
    if( count == 0 )
 80085c0:	b172      	cbz	r2, 80085e0 <GetElement.constprop.0+0x2c>
 80085c2:	2100      	movs	r1, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80085c4:	331c      	adds	r3, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 80085c6:	7805      	ldrb	r5, [r0, #0]
 80085c8:	42a5      	cmp	r5, r4
 80085ca:	d008      	beq.n	80085de <GetElement.constprop.0+0x2a>
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80085cc:	3101      	adds	r1, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80085ce:	4298      	cmp	r0, r3
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80085d0:	b2cd      	uxtb	r5, r1
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80085d2:	bf0c      	ite	eq
 80085d4:	4804      	ldreq	r0, [pc, #16]	; (80085e8 <GetElement.constprop.0+0x34>)
        bufferPointer++;
 80085d6:	3004      	addne	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80085d8:	42aa      	cmp	r2, r5
 80085da:	d8f4      	bhi.n	80085c6 <GetElement.constprop.0+0x12>
        return NULL;
 80085dc:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 80085de:	bd30      	pop	{r4, r5, pc}
        return NULL;
 80085e0:	4610      	mov	r0, r2
 80085e2:	e7fc      	b.n	80085de <GetElement.constprop.0+0x2a>
 80085e4:	20002058 	.word	0x20002058
 80085e8:	20002064 	.word	0x20002064

080085ec <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80085ec:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 80085ee:	4c08      	ldr	r4, [pc, #32]	; (8008610 <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80085f0:	2300      	movs	r3, #0
    ConfirmQueueCtx.Primitives = primitives;
 80085f2:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80085f4:	2214      	movs	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80085f6:	f104 000c 	add.w	r0, r4, #12
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80085fa:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80085fc:	f884 3020 	strb.w	r3, [r4, #32]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008600:	e9c4 0001 	strd	r0, r0, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8008604:	f009 f93d 	bl	8011882 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800860e:	bd10      	pop	{r4, pc}
 8008610:	20002058 	.word	0x20002058

08008614 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8008614:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008616:	4a0e      	ldr	r2, [pc, #56]	; (8008650 <LoRaMacConfirmQueueAdd+0x3c>)
 8008618:	f892 1020 	ldrb.w	r1, [r2, #32]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800861c:	2904      	cmp	r1, #4
 800861e:	d815      	bhi.n	800864c <LoRaMacConfirmQueueAdd+0x38>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8008620:	6893      	ldr	r3, [r2, #8]
 8008622:	7804      	ldrb	r4, [r0, #0]
 8008624:	701c      	strb	r4, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8008626:	7844      	ldrb	r4, [r0, #1]
 8008628:	705c      	strb	r4, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800862a:	78c4      	ldrb	r4, [r0, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800862c:	7880      	ldrb	r0, [r0, #2]
 800862e:	7098      	strb	r0, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8008630:	3101      	adds	r1, #1
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8008632:	70dc      	strb	r4, [r3, #3]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8008634:	f882 1020 	strb.w	r1, [r2, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008638:	f102 011c 	add.w	r1, r2, #28
 800863c:	428b      	cmp	r3, r1
        bufferPointer++;
 800863e:	bf14      	ite	ne
 8008640:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8008642:	f102 030c 	addeq.w	r3, r2, #12
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8008646:	6093      	str	r3, [r2, #8]

    return true;
 8008648:	2001      	movs	r0, #1
}
 800864a:	bd10      	pop	{r4, pc}
        return false;
 800864c:	2000      	movs	r0, #0
 800864e:	e7fc      	b.n	800864a <LoRaMacConfirmQueueAdd+0x36>
 8008650:	20002058 	.word	0x20002058

08008654 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8008654:	4b09      	ldr	r3, [pc, #36]	; (800867c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8008656:	f893 0020 	ldrb.w	r0, [r3, #32]
    if( count == 0 )
 800865a:	b168      	cbz	r0, 8008678 <LoRaMacConfirmQueueRemoveFirst+0x24>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800865c:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800865e:	f103 011c 	add.w	r1, r3, #28
 8008662:	428a      	cmp	r2, r1
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8008664:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
        bufferPointer++;
 8008668:	bf14      	ite	ne
 800866a:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800866c:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8008670:	f883 0020 	strb.w	r0, [r3, #32]
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8008674:	605a      	str	r2, [r3, #4]

    return true;
 8008676:	2001      	movs	r0, #1
}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20002058 	.word	0x20002058

08008680 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8008680:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8008682:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <LoRaMacConfirmQueueSetStatus+0x20>)
    if( count == 0 )
 8008684:	f893 2020 	ldrb.w	r2, [r3, #32]
{
 8008688:	4604      	mov	r4, r0
 800868a:	4608      	mov	r0, r1
    if( count == 0 )
 800868c:	b132      	cbz	r2, 800869c <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800868e:	6859      	ldr	r1, [r3, #4]
 8008690:	f7ff ff90 	bl	80085b4 <GetElement.constprop.0>
        if( element != NULL )
 8008694:	b110      	cbz	r0, 800869c <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 8008696:	2301      	movs	r3, #1
            element->Status = status;
 8008698:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800869a:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800869c:	bd10      	pop	{r4, pc}
 800869e:	bf00      	nop
 80086a0:	20002058 	.word	0x20002058

080086a4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80086a4:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80086a6:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <LoRaMacConfirmQueueGetStatus+0x1c>)
    if( count == 0 )
 80086a8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80086ac:	b12a      	cbz	r2, 80086ba <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80086ae:	6859      	ldr	r1, [r3, #4]
 80086b0:	f7ff ff80 	bl	80085b4 <GetElement.constprop.0>
        if( element != NULL )
 80086b4:	b108      	cbz	r0, 80086ba <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
 80086b6:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
 80086b8:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80086ba:	2001      	movs	r0, #1
 80086bc:	e7fc      	b.n	80086b8 <LoRaMacConfirmQueueGetStatus+0x14>
 80086be:	bf00      	nop
 80086c0:	20002058 	.word	0x20002058

080086c4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80086c4:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80086c6:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <LoRaMacConfirmQueueSetStatusCmn+0x2c>)
    if( count == 0 )
 80086c8:	f892 1020 	ldrb.w	r1, [r2, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80086cc:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80086ce:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
    if( count == 0 )
 80086d2:	b161      	cbz	r1, 80086ee <LoRaMacConfirmQueueSetStatusCmn+0x2a>
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 80086d4:	6891      	ldr	r1, [r2, #8]
                element->ReadyToHandle = true;
 80086d6:	2401      	movs	r4, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80086d8:	321c      	adds	r2, #28
            if( element->RestrictCommonReadyToHandle == false )
 80086da:	78dd      	ldrb	r5, [r3, #3]
            element->Status = status;
 80086dc:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 80086de:	b905      	cbnz	r5, 80086e2 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
 80086e0:	709c      	strb	r4, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80086e2:	4293      	cmp	r3, r2
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80086e4:	bf0c      	ite	eq
 80086e6:	4b03      	ldreq	r3, [pc, #12]	; (80086f4 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
        bufferPointer++;
 80086e8:	3304      	addne	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 80086ea:	4299      	cmp	r1, r3
 80086ec:	d1f5      	bne.n	80086da <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
 80086ee:	bd30      	pop	{r4, r5, pc}
 80086f0:	20002058 	.word	0x20002058
 80086f4:	20002064 	.word	0x20002064

080086f8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80086f8:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80086fa:	4b04      	ldr	r3, [pc, #16]	; (800870c <LoRaMacConfirmQueueIsCmdActive+0x14>)
 80086fc:	6859      	ldr	r1, [r3, #4]
 80086fe:	f7ff ff59 	bl	80085b4 <GetElement.constprop.0>
    {
        return true;
    }
    return false;
}
 8008702:	3800      	subs	r0, #0
 8008704:	bf18      	it	ne
 8008706:	2001      	movne	r0, #1
 8008708:	bd08      	pop	{r3, pc}
 800870a:	bf00      	nop
 800870c:	20002058 	.word	0x20002058

08008710 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8008710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8008714:	4e12      	ldr	r6, [pc, #72]	; (8008760 <LoRaMacConfirmQueueHandleCb+0x50>)
 8008716:	f896 8020 	ldrb.w	r8, [r6, #32]
{
 800871a:	4604      	mov	r4, r0
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800871c:	2500      	movs	r5, #0
 800871e:	b2eb      	uxtb	r3, r5
 8008720:	4598      	cmp	r8, r3
 8008722:	d802      	bhi.n	800872a <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 8008724:	b002      	add	sp, #8
 8008726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800872a:	6873      	ldr	r3, [r6, #4]
 800872c:	7819      	ldrb	r1, [r3, #0]
 800872e:	7021      	strb	r1, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8008730:	785a      	ldrb	r2, [r3, #1]
 8008732:	7062      	strb	r2, [r4, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8008734:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 8008736:	b15f      	cbz	r7, 8008750 <LoRaMacConfirmQueueHandleCb+0x40>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8008738:	6833      	ldr	r3, [r6, #0]
 800873a:	4620      	mov	r0, r4
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 8008740:	f7ff ff88 	bl	8008654 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 8008744:	b917      	cbnz	r7, 800874c <LoRaMacConfirmQueueHandleCb+0x3c>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8008746:	a801      	add	r0, sp, #4
 8008748:	f7ff ff64 	bl	8008614 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800874c:	3501      	adds	r5, #1
 800874e:	e7e6      	b.n	800871e <LoRaMacConfirmQueueHandleCb+0xe>
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8008750:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8008752:	f88d 1004 	strb.w	r1, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8008756:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800875a:	f88d 3007 	strb.w	r3, [sp, #7]
 800875e:	e7ef      	b.n	8008740 <LoRaMacConfirmQueueHandleCb+0x30>
 8008760:	20002058 	.word	0x20002058

08008764 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 8008764:	4b01      	ldr	r3, [pc, #4]	; (800876c <LoRaMacConfirmQueueGetCnt+0x8>)
 8008766:	f893 0020 	ldrb.w	r0, [r3, #32]
 800876a:	4770      	bx	lr
 800876c:	20002058 	.word	0x20002058

08008770 <GetLastFcntDown.constprop.0>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 8008770:	3801      	subs	r0, #1
 8008772:	2806      	cmp	r0, #6
 8008774:	d82a      	bhi.n	80087cc <GetLastFcntDown.constprop.0+0x5c>
 8008776:	e8df f000 	tbb	[pc, r0]
 800877a:	0c04      	.short	0x0c04
 800877c:	211d1812 	.word	0x211d1812
 8008780:	25          	.byte	0x25
 8008781:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8008782:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <GetLastFcntDown.constprop.0+0x60>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	691a      	ldr	r2, [r3, #16]
 8008788:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800878a:	691a      	ldr	r2, [r3, #16]
            break;
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800878c:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
#endif
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800878e:	2000      	movs	r0, #0
            break;
 8008790:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8008792:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <GetLastFcntDown.constprop.0+0x60>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	695a      	ldr	r2, [r3, #20]
 8008798:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800879a:	695a      	ldr	r2, [r3, #20]
 800879c:	e7f6      	b.n	800878c <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800879e:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <GetLastFcntDown.constprop.0+0x60>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80087a6:	699a      	ldr	r2, [r3, #24]
 80087a8:	e7f0      	b.n	800878c <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <GetLastFcntDown.constprop.0+0x60>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 80087b0:	600b      	str	r3, [r1, #0]
            break;
 80087b2:	e7ec      	b.n	800878e <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <GetLastFcntDown.constprop.0+0x60>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	e7f9      	b.n	80087b0 <GetLastFcntDown.constprop.0+0x40>
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
 80087bc:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <GetLastFcntDown.constprop.0+0x60>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	e7f5      	b.n	80087b0 <GetLastFcntDown.constprop.0+0x40>
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 80087c4:	4b02      	ldr	r3, [pc, #8]	; (80087d0 <GetLastFcntDown.constprop.0+0x60>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ca:	e7f1      	b.n	80087b0 <GetLastFcntDown.constprop.0+0x40>
    return LORAMAC_CRYPTO_SUCCESS;
 80087cc:	2005      	movs	r0, #5
}
 80087ce:	4770      	bx	lr
 80087d0:	2000207c 	.word	0x2000207c

080087d4 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 80087d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087d8:	b0c5      	sub	sp, #276	; 0x114
 80087da:	e9dd 654c 	ldrd	r6, r5, [sp, #304]	; 0x130
 80087de:	460c      	mov	r4, r1
 80087e0:	4690      	mov	r8, r2
 80087e2:	461f      	mov	r7, r3
    if( msg == 0 )
 80087e4:	4681      	mov	r9, r0
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d051      	beq.n	800888e <VerifyCmacB0.constprop.0+0xba>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80087ea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80087ee:	d850      	bhi.n	8008892 <VerifyCmacB0.constprop.0+0xbe>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80087f0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80087f4:	2100      	movs	r1, #0
 80087f6:	4668      	mov	r0, sp
 80087f8:	f009 f843 	bl	8011882 <memset1>
    b0[0] = 0x49;
 80087fc:	2349      	movs	r3, #73	; 0x49
 80087fe:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8008802:	2f00      	cmp	r7, #0
 8008804:	d03e      	beq.n	8008884 <VerifyCmacB0.constprop.0+0xb0>
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
 8008806:	4b24      	ldr	r3, [pc, #144]	; (8008898 <VerifyCmacB0.constprop.0+0xc4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 800880c:	f88d 3001 	strb.w	r3, [sp, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8008810:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008814:	f88d 3002 	strb.w	r3, [sp, #2]
    b0[5] = dir;
 8008818:	2201      	movs	r2, #1
 800881a:	f88d 2005 	strb.w	r2, [sp, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800881e:	0a32      	lsrs	r2, r6, #8
 8008820:	f88d 2007 	strb.w	r2, [sp, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008824:	0c32      	lsrs	r2, r6, #16
 8008826:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800882a:	0a2a      	lsrs	r2, r5, #8
 800882c:	f88d 200b 	strb.w	r2, [sp, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8008830:	0c2a      	lsrs	r2, r5, #16
    b0[3] = 0x00;
 8008832:	2300      	movs	r3, #0
    b0[6] = devAddr & 0xFF;
 8008834:	f88d 6006 	strb.w	r6, [sp, #6]
    b0[10] = fCnt & 0xFF;
 8008838:	f88d 500a 	strb.w	r5, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800883c:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8008840:	4649      	mov	r1, r9
 8008842:	4622      	mov	r2, r4
 8008844:	a804      	add	r0, sp, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8008846:	0e36      	lsrs	r6, r6, #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8008848:	0e2d      	lsrs	r5, r5, #24
    b0[3] = 0x00;
 800884a:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[4] = 0x00;
 800884e:	f88d 3004 	strb.w	r3, [sp, #4]
    b0[14] = 0x00;
 8008852:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8008856:	f88d 6009 	strb.w	r6, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800885a:	f88d 500d 	strb.w	r5, [sp, #13]
    b0[15] = msgLen & 0xFF;
 800885e:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8008862:	f008 fffa 	bl	801185a <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8008866:	f104 0110 	add.w	r1, r4, #16
 800886a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800886c:	4643      	mov	r3, r8
 800886e:	b289      	uxth	r1, r1
 8008870:	4668      	mov	r0, sp
 8008872:	f009 fda7 	bl	80123c4 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8008876:	b110      	cbz	r0, 800887e <VerifyCmacB0.constprop.0+0xaa>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008878:	2801      	cmp	r0, #1
 800887a:	bf18      	it	ne
 800887c:	200e      	movne	r0, #14
}
 800887e:	b045      	add	sp, #276	; 0x114
 8008880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        b0[1] = 0x00;
 8008884:	f88d 7001 	strb.w	r7, [sp, #1]
        b0[2] = 0x00;
 8008888:	f88d 7002 	strb.w	r7, [sp, #2]
 800888c:	e7c4      	b.n	8008818 <VerifyCmacB0.constprop.0+0x44>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800888e:	2009      	movs	r0, #9
 8008890:	e7f5      	b.n	800887e <VerifyCmacB0.constprop.0+0xaa>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8008892:	200d      	movs	r0, #13
 8008894:	e7f3      	b.n	800887e <VerifyCmacB0.constprop.0+0xaa>
 8008896:	bf00      	nop
 8008898:	2000207c 	.word	0x2000207c

0800889c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 800889c:	b510      	push	{r4, lr}
    if( nvm == NULL )
 800889e:	b1a8      	cbz	r0, 80088cc <LoRaMacCryptoInit+0x30>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80088a0:	4c0b      	ldr	r4, [pc, #44]	; (80088d0 <LoRaMacCryptoInit+0x34>)

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80088a2:	2234      	movs	r2, #52	; 0x34
 80088a4:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 80088a6:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80088a8:	f008 ffeb 	bl	8011882 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80088ac:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80088ae:	4a09      	ldr	r2, [pc, #36]	; (80088d4 <LoRaMacCryptoInit+0x38>)
 80088b0:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80088b2:	2000      	movs	r0, #0
 80088b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088b8:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80088bc:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80088c0:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80088c4:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80088c8:	62da      	str	r2, [r3, #44]	; 0x2c

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
 80088ca:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80088cc:	2008      	movs	r0, #8
 80088ce:	e7fc      	b.n	80088ca <LoRaMacCryptoInit+0x2e>
 80088d0:	2000207c 	.word	0x2000207c
 80088d4:	01010100 	.word	0x01010100

080088d8 <LoRaMacCryptoGetFCntUp>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 80088d8:	b130      	cbz	r0, 80088e8 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80088da:	4b04      	ldr	r3, [pc, #16]	; (80088ec <LoRaMacCryptoGetFCntUp+0x14>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80088e4:	2000      	movs	r0, #0
 80088e6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 80088e8:	2009      	movs	r0, #9
}
 80088ea:	4770      	bx	lr
 80088ec:	2000207c 	.word	0x2000207c

080088f0 <LoRaMacCryptoSetMulticastReference>:
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 80088f0:	b178      	cbz	r0, 8008912 <LoRaMacCryptoSetMulticastReference+0x22>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80088f2:	4b09      	ldr	r3, [pc, #36]	; (8008918 <LoRaMacCryptoSetMulticastReference+0x28>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f103 021c 	add.w	r2, r3, #28
 80088fa:	6202      	str	r2, [r0, #32]
 80088fc:	f103 0220 	add.w	r2, r3, #32
 8008900:	64c2      	str	r2, [r0, #76]	; 0x4c
 8008902:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8008906:	3328      	adds	r3, #40	; 0x28
 8008908:	6782      	str	r2, [r0, #120]	; 0x78
 800890a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800890e:	2000      	movs	r0, #0
 8008910:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008912:	2009      	movs	r0, #9
}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	2000207c 	.word	0x2000207c

0800891c <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800891c:	b513      	push	{r0, r1, r4, lr}
    if( macMsg == 0 )
 800891e:	4604      	mov	r4, r0
 8008920:	b1c8      	cbz	r0, 8008956 <LoRaMacCryptoPrepareJoinRequest+0x3a>
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8008922:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <LoRaMacCryptoPrepareJoinRequest+0x44>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	8893      	ldrh	r3, [r2, #4]
 8008928:	3301      	adds	r3, #1
 800892a:	b29b      	uxth	r3, r3
 800892c:	8093      	strh	r3, [r2, #4]
#endif
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800892e:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008930:	f009 ff8b 	bl	801284a <LoRaMacSerializerJoinRequest>
 8008934:	b960      	cbnz	r0, 8008950 <LoRaMacCryptoPrepareJoinRequest+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8008936:	f104 0318 	add.w	r3, r4, #24
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	6821      	ldr	r1, [r4, #0]
 800893e:	2301      	movs	r3, #1
 8008940:	2213      	movs	r2, #19
 8008942:	f009 fd36 	bl	80123b2 <SecureElementComputeAesCmac>
 8008946:	b940      	cbnz	r0, 800895a <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008948:	4620      	mov	r0, r4
 800894a:	f009 ff7e 	bl	801284a <LoRaMacSerializerJoinRequest>
 800894e:	b100      	cbz	r0, 8008952 <LoRaMacCryptoPrepareJoinRequest+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8008950:	2010      	movs	r0, #16
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8008952:	b002      	add	sp, #8
 8008954:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008956:	2009      	movs	r0, #9
 8008958:	e7fb      	b.n	8008952 <LoRaMacCryptoPrepareJoinRequest+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800895a:	200e      	movs	r0, #14
 800895c:	e7f9      	b.n	8008952 <LoRaMacCryptoPrepareJoinRequest+0x36>
 800895e:	bf00      	nop
 8008960:	2000207c 	.word	0x2000207c

08008964 <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8008964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008966:	4605      	mov	r5, r0
 8008968:	b087      	sub	sp, #28
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800896a:	461c      	mov	r4, r3
 800896c:	b323      	cbz	r3, 80089b8 <LoRaMacCryptoSecureMessage+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800896e:	4e35      	ldr	r6, [pc, #212]	; (8008a44 <LoRaMacCryptoSecureMessage+0xe0>)
 8008970:	6833      	ldr	r3, [r6, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	4283      	cmp	r3, r0
 8008976:	d863      	bhi.n	8008a40 <LoRaMacCryptoSecureMessage+0xdc>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8008978:	f894 2020 	ldrb.w	r2, [r4, #32]
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800897c:	2a00      	cmp	r2, #0
 800897e:	bf14      	ite	ne
 8008980:	2207      	movne	r2, #7
 8008982:	2206      	moveq	r2, #6
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8008984:	4283      	cmp	r3, r0
 8008986:	d305      	bcc.n	8008994 <LoRaMacCryptoSecureMessage+0x30>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008988:	4620      	mov	r0, r4
 800898a:	f009 ff92 	bl	80128b2 <LoRaMacSerializerData>
 800898e:	b170      	cbz	r0, 80089ae <LoRaMacCryptoSecureMessage+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8008990:	2010      	movs	r0, #16
 8008992:	e00a      	b.n	80089aa <LoRaMacCryptoSecureMessage+0x46>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8008994:	2300      	movs	r3, #0
 8008996:	9001      	str	r0, [sp, #4]
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80089a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80089a2:	f009 fdf9 	bl	8012598 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d0ee      	beq.n	8008988 <LoRaMacCryptoSecureMessage+0x24>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;

    return LORAMAC_CRYPTO_SUCCESS;
}
 80089aa:	b007      	add	sp, #28
 80089ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80089ae:	7927      	ldrb	r7, [r4, #4]
 80089b0:	6821      	ldr	r1, [r4, #0]
 80089b2:	3f04      	subs	r7, #4
 80089b4:	b2ba      	uxth	r2, r7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80089b6:	b909      	cbnz	r1, 80089bc <LoRaMacCryptoSecureMessage+0x58>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80089b8:	2009      	movs	r0, #9
 80089ba:	e7f6      	b.n	80089aa <LoRaMacCryptoSecureMessage+0x46>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80089bc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80089c0:	d83c      	bhi.n	8008a3c <LoRaMacCryptoSecureMessage+0xd8>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80089c2:	68a3      	ldr	r3, [r4, #8]
    b0[6] = devAddr & 0xFF;
 80089c4:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[0] = 0x49;
 80089c8:	f04f 0c49 	mov.w	ip, #73	; 0x49
 80089cc:	f88d c008 	strb.w	ip, [sp, #8]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80089d0:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80089d4:	f88d c00f 	strb.w	ip, [sp, #15]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80089d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80089dc:	0e1b      	lsrs	r3, r3, #24
 80089de:	f88d 3011 	strb.w	r3, [sp, #17]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80089e2:	0a2b      	lsrs	r3, r5, #8
 80089e4:	f88d 3013 	strb.w	r3, [sp, #19]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80089e8:	0c2b      	lsrs	r3, r5, #16
 80089ea:	f88d 3014 	strb.w	r3, [sp, #20]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80089ee:	0e2b      	lsrs	r3, r5, #24
 80089f0:	f88d 3015 	strb.w	r3, [sp, #21]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80089f4:	f104 032c 	add.w	r3, r4, #44	; 0x2c
        b0[1] = 0x00;
 80089f8:	f88d 0009 	strb.w	r0, [sp, #9]
        b0[2] = 0x00;
 80089fc:	f88d 000a 	strb.w	r0, [sp, #10]
    b0[3] = 0x00;
 8008a00:	f88d 000b 	strb.w	r0, [sp, #11]
    b0[4] = 0x00;
 8008a04:	f88d 000c 	strb.w	r0, [sp, #12]
    b0[5] = dir;
 8008a08:	f88d 000d 	strb.w	r0, [sp, #13]
    b0[14] = 0x00;
 8008a0c:	f88d 0016 	strb.w	r0, [sp, #22]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	a802      	add	r0, sp, #8
 8008a14:	2306      	movs	r3, #6
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8008a16:	f88d c010 	strb.w	ip, [sp, #16]
    b0[10] = fCnt & 0xFF;
 8008a1a:	f88d 5012 	strb.w	r5, [sp, #18]
    b0[15] = msgLen & 0xFF;
 8008a1e:	f88d 7017 	strb.w	r7, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8008a22:	f009 fcc6 	bl	80123b2 <SecureElementComputeAesCmac>
 8008a26:	b108      	cbz	r0, 8008a2c <LoRaMacCryptoSecureMessage+0xc8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008a28:	200e      	movs	r0, #14
 8008a2a:	e7be      	b.n	80089aa <LoRaMacCryptoSecureMessage+0x46>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f009 ff40 	bl	80128b2 <LoRaMacSerializerData>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d1ac      	bne.n	8008990 <LoRaMacCryptoSecureMessage+0x2c>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 8008a36:	6833      	ldr	r3, [r6, #0]
 8008a38:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 8008a3a:	e7b6      	b.n	80089aa <LoRaMacCryptoSecureMessage+0x46>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8008a3c:	200d      	movs	r0, #13
 8008a3e:	e7b4      	b.n	80089aa <LoRaMacCryptoSecureMessage+0x46>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8008a40:	2006      	movs	r0, #6
 8008a42:	e7b2      	b.n	80089aa <LoRaMacCryptoSecureMessage+0x46>
 8008a44:	2000207c 	.word	0x2000207c

08008a48 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8008a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4c:	b086      	sub	sp, #24
 8008a4e:	4681      	mov	r9, r0
 8008a50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008a52:	4688      	mov	r8, r1
 8008a54:	4617      	mov	r7, r2
 8008a56:	461c      	mov	r4, r3
    if( macMsg == 0 )
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	d079      	beq.n	8008b50 <LoRaMacCryptoUnsecureMessage+0x108>
    uint32_t lastDown = 0;
 8008a5c:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8008a5e:	a905      	add	r1, sp, #20
 8008a60:	4610      	mov	r0, r2
    uint32_t lastDown = 0;
 8008a62:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8008a64:	f7ff fe84 	bl	8008770 <GetLastFcntDown.constprop.0>
 8008a68:	b118      	cbz	r0, 8008a72 <LoRaMacCryptoUnsecureMessage+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8008a6a:	2006      	movs	r0, #6
#endif

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
 8008a6c:	b006      	add	sp, #24
 8008a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( currentDown > lastDown ) ||
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	429c      	cmp	r4, r3
 8008a76:	d801      	bhi.n	8008a7c <LoRaMacCryptoUnsecureMessage+0x34>
 8008a78:	3301      	adds	r3, #1
 8008a7a:	d1f6      	bne.n	8008a6a <LoRaMacCryptoUnsecureMessage+0x22>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f009 fe89 	bl	8012794 <LoRaMacParserData>
 8008a82:	4606      	mov	r6, r0
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d165      	bne.n	8008b54 <LoRaMacCryptoUnsecureMessage+0x10c>
        if( KeyAddrList[i].AddrID == addrID )
 8008a88:	4833      	ldr	r0, [pc, #204]	; (8008b58 <LoRaMacCryptoUnsecureMessage+0x110>)
 8008a8a:	f810 3026 	ldrb.w	r3, [r0, r6, lsl #2]
 8008a8e:	454b      	cmp	r3, r9
 8008a90:	d104      	bne.n	8008a9c <LoRaMacCryptoUnsecureMessage+0x54>
    if( address != macMsg->FHDR.DevAddr )
 8008a92:	68ab      	ldr	r3, [r5, #8]
 8008a94:	4543      	cmp	r3, r8
 8008a96:	d006      	beq.n	8008aa6 <LoRaMacCryptoUnsecureMessage+0x5e>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8008a98:	2002      	movs	r0, #2
 8008a9a:	e7e7      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8008a9c:	3601      	adds	r6, #1
 8008a9e:	2e05      	cmp	r6, #5
 8008aa0:	d1f3      	bne.n	8008a8a <LoRaMacCryptoUnsecureMessage+0x42>
 8008aa2:	200b      	movs	r0, #11
 8008aa4:	e7e2      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008aa6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8008b5c <LoRaMacCryptoUnsecureMessage+0x114>
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8008aaa:	7b2b      	ldrb	r3, [r5, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008aac:	f8d9 2000 	ldr.w	r2, [r9]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008ab0:	7929      	ldrb	r1, [r5, #4]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8008ab2:	7892      	ldrb	r2, [r2, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 8008ab4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        isAck = false;
 8008ab8:	2a00      	cmp	r2, #0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008aba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 8008abc:	f896 a001 	ldrb.w	sl, [r6, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008ac0:	f8cd 8000 	str.w	r8, [sp]
 8008ac4:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8008ac8:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8008acc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8008ad0:	78b2      	ldrb	r2, [r6, #2]
 8008ad2:	6828      	ldr	r0, [r5, #0]
 8008ad4:	bf08      	it	eq
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	b289      	uxth	r1, r1
 8008ada:	f7ff fe7b 	bl	80087d4 <VerifyCmacB0.constprop.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d1c4      	bne.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
    if( macMsg->FPort == 0 )
 8008ae2:	f895 3020 	ldrb.w	r3, [r5, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8008ae6:	9401      	str	r4, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8008ae8:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8008aea:	f04f 0301 	mov.w	r3, #1
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	bf14      	ite	ne
 8008af2:	4652      	movne	r2, sl
 8008af4:	2206      	moveq	r2, #6
 8008af6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8008afa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008afc:	4643      	mov	r3, r8
 8008afe:	f009 fd4b 	bl	8012598 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d1b2      	bne.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
    switch( fCntID )
 8008b06:	3f01      	subs	r7, #1
 8008b08:	2f06      	cmp	r7, #6
 8008b0a:	d8af      	bhi.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
 8008b0c:	e8df f007 	tbb	[pc, r7]
 8008b10:	100c0804 	.word	0x100c0804
 8008b14:	1814      	.short	0x1814
 8008b16:	1c          	.byte	0x1c
 8008b17:	00          	.byte	0x00
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8008b18:	f8d9 3000 	ldr.w	r3, [r9]
 8008b1c:	611c      	str	r4, [r3, #16]
            break;
 8008b1e:	e7a5      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8008b20:	f8d9 3000 	ldr.w	r3, [r9]
 8008b24:	615c      	str	r4, [r3, #20]
            break;
 8008b26:	e7a1      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.FCntDown = currentDown;
 8008b28:	f8d9 3000 	ldr.w	r3, [r9]
 8008b2c:	619c      	str	r4, [r3, #24]
            break;
 8008b2e:	e79d      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8008b30:	f8d9 3000 	ldr.w	r3, [r9]
 8008b34:	61dc      	str	r4, [r3, #28]
            break;
 8008b36:	e799      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
 8008b38:	f8d9 3000 	ldr.w	r3, [r9]
 8008b3c:	621c      	str	r4, [r3, #32]
            break;
 8008b3e:	e795      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
 8008b40:	f8d9 3000 	ldr.w	r3, [r9]
 8008b44:	625c      	str	r4, [r3, #36]	; 0x24
            break;
 8008b46:	e791      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 8008b48:	f8d9 3000 	ldr.w	r3, [r9]
 8008b4c:	629c      	str	r4, [r3, #40]	; 0x28
            break;
 8008b4e:	e78d      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008b50:	2009      	movs	r0, #9
 8008b52:	e78b      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8008b54:	200f      	movs	r0, #15
 8008b56:	e789      	b.n	8008a6c <LoRaMacCryptoUnsecureMessage+0x24>
 8008b58:	200002ad 	.word	0x200002ad
 8008b5c:	2000207c 	.word	0x2000207c

08008b60 <LoRaMacCryptoHandleJoinAccept>:
{
 8008b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b64:	4680      	mov	r8, r0
 8008b66:	b08f      	sub	sp, #60	; 0x3c
 8008b68:	460c      	mov	r4, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8008b6a:	4617      	mov	r7, r2
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	d06d      	beq.n	8008c4c <LoRaMacCryptoHandleJoinAccept+0xec>
 8008b70:	2900      	cmp	r1, #0
 8008b72:	d06b      	beq.n	8008c4c <LoRaMacCryptoHandleJoinAccept+0xec>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8008b74:	2500      	movs	r5, #0
 8008b76:	4629      	mov	r1, r5
 8008b78:	221d      	movs	r2, #29
 8008b7a:	a806      	add	r0, sp, #24
 8008b7c:	9505      	str	r5, [sp, #20]
 8008b7e:	f00d fd16 	bl	80165ae <memset>
    uint8_t versionMinor         = 0;
 8008b82:	f88d 5013 	strb.w	r5, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8008b86:	4d35      	ldr	r5, [pc, #212]	; (8008c5c <LoRaMacCryptoHandleJoinAccept+0xfc>)
 8008b88:	682b      	ldr	r3, [r5, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8008b8a:	f10d 0914 	add.w	r9, sp, #20
    uint16_t nonce               = CryptoNvm->DevNonce;
 8008b8e:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8008b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b94:	f10d 0313 	add.w	r3, sp, #19
 8008b98:	9302      	str	r3, [sp, #8]
 8008b9a:	793b      	ldrb	r3, [r7, #4]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	4632      	mov	r2, r6
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	f009 fc3f 	bl	8012428 <SecureElementProcessJoinAccept>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d150      	bne.n	8008c50 <LoRaMacCryptoHandleJoinAccept+0xf0>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8008bae:	4649      	mov	r1, r9
 8008bb0:	793a      	ldrb	r2, [r7, #4]
 8008bb2:	6838      	ldr	r0, [r7, #0]
 8008bb4:	f008 fe51 	bl	801185a <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f009 fd9d 	bl	80126f8 <LoRaMacParserJoinAccept>
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d147      	bne.n	8008c54 <LoRaMacCryptoHandleJoinAccept+0xf4>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8008bc4:	7a3c      	ldrb	r4, [r7, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8008bc6:	79fa      	ldrb	r2, [r7, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8008bc8:	79bb      	ldrb	r3, [r7, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8008bca:	0424      	lsls	r4, r4, #16
 8008bcc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8008bd0:	431c      	orrs	r4, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	42a2      	cmp	r2, r4
 8008bd8:	d03e      	beq.n	8008c58 <LoRaMacCryptoHandleJoinAccept+0xf8>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8008bda:	f89d 0013 	ldrb.w	r0, [sp, #19]
        CryptoNvm->JoinNonce = currentJoinNonce;
 8008bde:	609c      	str	r4, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8008be0:	f009 fd6f 	bl	80126c2 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008be4:	bb78      	cbnz	r0, 8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8008be6:	f009 fd38 	bl	801265a <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008bea:	bb60      	cbnz	r0, 8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
        netID = ( uint32_t )macMsg->NetID[0];
 8008bec:	7a7a      	ldrb	r2, [r7, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8008bee:	7abb      	ldrb	r3, [r7, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8008bf0:	7aff      	ldrb	r7, [r7, #11]
 8008bf2:	043f      	lsls	r7, r7, #16
 8008bf4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8008bf8:	4317      	orrs	r7, r2
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8008bfa:	4633      	mov	r3, r6
 8008bfc:	463a      	mov	r2, r7
 8008bfe:	4621      	mov	r1, r4
 8008c00:	2007      	movs	r0, #7
 8008c02:	f009 fc9f 	bl	8012544 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008c06:	b9f0      	cbnz	r0, 8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
 8008c08:	4633      	mov	r3, r6
 8008c0a:	463a      	mov	r2, r7
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	2006      	movs	r0, #6
 8008c10:	f009 fc98 	bl	8012544 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008c14:	b9b8      	cbnz	r0, 8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 8008c16:	4633      	mov	r3, r6
 8008c18:	463a      	mov	r2, r7
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	2004      	movs	r0, #4
 8008c1e:	f009 fc91 	bl	8012544 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008c22:	b980      	cbnz	r0, 8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 8008c24:	4633      	mov	r3, r6
 8008c26:	463a      	mov	r2, r7
 8008c28:	4621      	mov	r1, r4
 8008c2a:	2005      	movs	r0, #5
 8008c2c:	f009 fc8a 	bl	8012544 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8008c30:	b948      	cbnz	r0, 8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8008c38:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8008c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8008c3e:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntUp = 0;
 8008c42:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8008c44:	619a      	str	r2, [r3, #24]
}
 8008c46:	b00f      	add	sp, #60	; 0x3c
 8008c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008c4c:	2009      	movs	r0, #9
 8008c4e:	e7fa      	b.n	8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8008c50:	200e      	movs	r0, #14
 8008c52:	e7f8      	b.n	8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8008c54:	200f      	movs	r0, #15
 8008c56:	e7f6      	b.n	8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8008c58:	2003      	movs	r0, #3
 8008c5a:	e7f4      	b.n	8008c46 <LoRaMacCryptoHandleJoinAccept+0xe6>
 8008c5c:	2000207c 	.word	0x2000207c

08008c60 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8008c60:	4800      	ldr	r0, [pc, #0]	; (8008c64 <RegionGetVersion+0x4>)
 8008c62:	4770      	bx	lr
 8008c64:	02010001 	.word	0x02010001

08008c68 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	b091      	sub	sp, #68	; 0x44
 8008c6e:	4615      	mov	r5, r2
 8008c70:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8008c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	4606      	mov	r6, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8008c80:	f008 ff00 	bl	8011a84 <TimerGetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8008c84:	4a68      	ldr	r2, [pc, #416]	; (8008e28 <RegionCommonUpdateBandTimeOff+0x1c0>)
 8008c86:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8008e2c <RegionCommonUpdateBandTimeOff+0x1c4>
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8008c8a:	9005      	str	r0, [sp, #20]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8008c8c:	f5a8 33f6 	sub.w	r3, r8, #125952	; 0x1ec00
 8008c90:	3b30      	subs	r3, #48	; 0x30
 8008c92:	fbb3 f3f2 	udiv	r3, r3, r2
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8008c96:	4353      	muls	r3, r2
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8008c98:	f503 32f6 	add.w	r2, r3, #125952	; 0x1ec00
 8008c9c:	3230      	adds	r2, #48	; 0x30
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8008c9e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008ca2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8008ca6:	9206      	str	r2, [sp, #24]
 8008ca8:	2218      	movs	r2, #24
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	fb12 4305 	smlabb	r3, r2, r5, r4
 8008cb0:	9308      	str	r3, [sp, #32]
    uint8_t validBands = 0;
 8008cb2:	2500      	movs	r5, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8008cb4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    for( uint8_t i = 0; i < nbBands; i++ )
 8008cb8:	9b08      	ldr	r3, [sp, #32]
 8008cba:	42a3      	cmp	r3, r4
 8008cbc:	d107      	bne.n	8008cce <RegionCommonUpdateBandTimeOff+0x66>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8008cbe:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
 8008cc0:	bf14      	ite	ne
 8008cc2:	4650      	movne	r0, sl
 8008cc4:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 8008cc8:	b011      	add	sp, #68	; 0x44
 8008cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8008cce:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8008cd2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8008cd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cd8:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8008cdc:	4640      	mov	r0, r8
 8008cde:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008ce2:	f008 fe61 	bl	80119a8 <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8008ce6:	f8b4 9000 	ldrh.w	r9, [r4]
    if( joined == false )
 8008cea:	b96e      	cbnz	r6, 8008d08 <RegionCommonUpdateBandTimeOff+0xa0>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8008cec:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
 8008cf0:	d35b      	bcc.n	8008daa <RegionCommonUpdateBandTimeOff+0x142>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8008cf2:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8008cf6:	f242 7310 	movw	r3, #10000	; 0x2710
 8008cfa:	4590      	cmp	r8, r2
 8008cfc:	bf98      	it	ls
 8008cfe:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8008d02:	4599      	cmp	r9, r3
 8008d04:	bf38      	it	cc
 8008d06:	4699      	movcc	r9, r3
    if( dutyCycle == 0 )
 8008d08:	464b      	mov	r3, r9
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	bf38      	it	cc
 8008d0e:	2301      	movcc	r3, #1
 8008d10:	9307      	str	r3, [sp, #28]
    if( joined == false )
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	d152      	bne.n	8008dbc <RegionCommonUpdateBandTimeOff+0x154>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8008d16:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8008d1a:	d148      	bne.n	8008dae <RegionCommonUpdateBandTimeOff+0x146>
            band->LastMaxCreditAssignTime = elapsedTime;
 8008d1c:	60a0      	str	r0, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8008d1e:	465f      	mov	r7, fp
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8008d20:	68a1      	ldr	r1, [r4, #8]
 8008d22:	a80e      	add	r0, sp, #56	; 0x38
 8008d24:	f008 fe5f 	bl	80119e6 <SysTimeFromMs>
 8008d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d32:	a80c      	add	r0, sp, #48	; 0x30
 8008d34:	f008 fdc7 	bl	80118c6 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8008d38:	9b04      	ldr	r3, [sp, #16]
 8008d3a:	b90b      	cbnz	r3, 8008d40 <RegionCommonUpdateBandTimeOff+0xd8>
 8008d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3e:	b133      	cbz	r3, 8008d4e <RegionCommonUpdateBandTimeOff+0xe6>
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	42bb      	cmp	r3, r7
 8008d44:	d103      	bne.n	8008d4e <RegionCommonUpdateBandTimeOff+0xe6>
            ( band->MaxTimeCredits != maxCredits ) ||
 8008d46:	4b3a      	ldr	r3, [pc, #232]	; (8008e30 <RegionCommonUpdateBandTimeOff+0x1c8>)
 8008d48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d90d      	bls.n	8008d6a <RegionCommonUpdateBandTimeOff+0x102>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8008d4e:	4b39      	ldr	r3, [pc, #228]	; (8008e34 <RegionCommonUpdateBandTimeOff+0x1cc>)
            band->TimeCredits = maxCredits;
 8008d50:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8008d52:	4598      	cmp	r8, r3
 8008d54:	d909      	bls.n	8008d6a <RegionCommonUpdateBandTimeOff+0x102>
                timeDiff.SubSeconds = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8008d5c:	9b06      	ldr	r3, [sp, #24]
 8008d5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d60:	930c      	str	r3, [sp, #48]	; 0x30
 8008d62:	4618      	mov	r0, r3
 8008d64:	f008 fe20 	bl	80119a8 <SysTimeToMs>
 8008d68:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 8008d6a:	6860      	ldr	r0, [r4, #4]
 8008d6c:	b900      	cbnz	r0, 8008d70 <RegionCommonUpdateBandTimeOff+0x108>
        band->TimeCredits = maxCredits;
 8008d6e:	60e7      	str	r7, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 8008d70:	6127      	str	r7, [r4, #16]
    if( joined == true )
 8008d72:	b126      	cbz	r6, 8008d7e <RegionCommonUpdateBandTimeOff+0x116>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8008d74:	f008 fe8d 	bl	8011a92 <TimerGetElapsedTime>
 8008d78:	68e3      	ldr	r3, [r4, #12]
 8008d7a:	4403      	add	r3, r0
 8008d7c:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 8008d7e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8008d82:	4293      	cmp	r3, r2
    band->LastBandUpdateTime = currentTime;
 8008d84:	9b05      	ldr	r3, [sp, #20]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8008d86:	991d      	ldr	r1, [sp, #116]	; 0x74
    band->LastBandUpdateTime = currentTime;
 8008d88:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8008d8a:	9b07      	ldr	r3, [sp, #28]
        band->TimeCredits = band->MaxTimeCredits;
 8008d8c:	bf88      	it	hi
 8008d8e:	60e2      	strhi	r2, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
 8008d90:	434b      	muls	r3, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8008d92:	68e1      	ldr	r1, [r4, #12]
 8008d94:	4299      	cmp	r1, r3
 8008d96:	d802      	bhi.n	8008d9e <RegionCommonUpdateBandTimeOff+0x136>
 8008d98:	9804      	ldr	r0, [sp, #16]
 8008d9a:	b9a8      	cbnz	r0, 8008dc8 <RegionCommonUpdateBandTimeOff+0x160>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8008d9c:	b1a6      	cbz	r6, 8008dc8 <RegionCommonUpdateBandTimeOff+0x160>
            bands[i].ReadyForTransmission = true;
 8008d9e:	2301      	movs	r3, #1
            validBands++;
 8008da0:	441d      	add	r5, r3
            bands[i].ReadyForTransmission = true;
 8008da2:	7523      	strb	r3, [r4, #20]
            validBands++;
 8008da4:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
 8008da6:	3418      	adds	r4, #24
 8008da8:	e786      	b.n	8008cb8 <RegionCommonUpdateBandTimeOff+0x50>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8008daa:	2364      	movs	r3, #100	; 0x64
 8008dac:	e7a9      	b.n	8008d02 <RegionCommonUpdateBandTimeOff+0x9a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8008dae:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8008db2:	bf0a      	itet	eq
 8008db4:	4f20      	ldreq	r7, [pc, #128]	; (8008e38 <RegionCommonUpdateBandTimeOff+0x1d0>)
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8008db6:	4f21      	ldrne	r7, [pc, #132]	; (8008e3c <RegionCommonUpdateBandTimeOff+0x1d4>)
            band->LastMaxCreditAssignTime = elapsedTime;
 8008db8:	60a0      	streq	r0, [r4, #8]
 8008dba:	e7b1      	b.n	8008d20 <RegionCommonUpdateBandTimeOff+0xb8>
        if( dutyCycleEnabled == false )
 8008dbc:	9b04      	ldr	r3, [sp, #16]
 8008dbe:	b90b      	cbnz	r3, 8008dc4 <RegionCommonUpdateBandTimeOff+0x15c>
            band->TimeCredits = maxCredits;
 8008dc0:	f8c4 b00c 	str.w	fp, [r4, #12]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8008dc4:	465f      	mov	r7, fp
 8008dc6:	e7d0      	b.n	8008d6a <RegionCommonUpdateBandTimeOff+0x102>
            bands[i].ReadyForTransmission = false;
 8008dc8:	2000      	movs	r0, #0
            if( bands[i].MaxTimeCredits > creditCosts )
 8008dca:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
 8008dcc:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 8008dce:	d206      	bcs.n	8008dde <RegionCommonUpdateBandTimeOff+0x176>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8008dd0:	1a5b      	subs	r3, r3, r1
 8008dd2:	459a      	cmp	sl, r3
                validBands++;
 8008dd4:	f105 0501 	add.w	r5, r5, #1
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8008dd8:	bf28      	it	cs
 8008dda:	469a      	movcs	sl, r3
                validBands++;
 8008ddc:	b2ed      	uxtb	r5, r5
            if( joined == false )
 8008dde:	2e00      	cmp	r6, #0
 8008de0:	d1e1      	bne.n	8008da6 <RegionCommonUpdateBandTimeOff+0x13e>
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8008de2:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8008de6:	4a16      	ldr	r2, [pc, #88]	; (8008e40 <RegionCommonUpdateBandTimeOff+0x1d8>)
                SysTime_t backoffTimeRange = {
 8008de8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8008dec:	d019      	beq.n	8008e22 <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8008dee:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8008df2:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 8008df6:	bf18      	it	ne
 8008df8:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8008dfa:	4590      	cmp	r8, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8008dfc:	bf84      	itt	hi
 8008dfe:	9a03      	ldrhi	r2, [sp, #12]
 8008e00:	189b      	addhi	r3, r3, r2
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8008e02:	930c      	str	r3, [sp, #48]	; 0x30
 8008e04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	af0c      	add	r7, sp, #48	; 0x30
 8008e0a:	e897 0006 	ldmia.w	r7, {r1, r2}
 8008e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e10:	4638      	mov	r0, r7
 8008e12:	f008 fd58 	bl	80118c6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8008e16:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008e1a:	f008 fdc5 	bl	80119a8 <SysTimeToMs>
 8008e1e:	4682      	mov	sl, r0
 8008e20:	e7c1      	b.n	8008da6 <RegionCommonUpdateBandTimeOff+0x13e>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8008e22:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008e26:	e7e8      	b.n	8008dfa <RegionCommonUpdateBandTimeOff+0x192>
 8008e28:	00015180 	.word	0x00015180
 8008e2c:	001b7740 	.word	0x001b7740
 8008e30:	0001517f 	.word	0x0001517f
 8008e34:	0001ec2f 	.word	0x0001ec2f
 8008e38:	0112a880 	.word	0x0112a880
 8008e3c:	02932e00 	.word	0x02932e00
 8008e40:	0001ec30 	.word	0x0001ec30

08008e44 <RegionCommonComputeSymbolTimeLoRa>:
    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8008e44:	4b02      	ldr	r3, [pc, #8]	; (8008e50 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8008e46:	fa03 f000 	lsl.w	r0, r3, r0
}
 8008e4a:	fbb0 f0f1 	udiv	r0, r0, r1
 8008e4e:	4770      	bx	lr
 8008e50:	000f4240 	.word	0x000f4240

08008e54 <RegionCommonGetBandwidth>:
    return MAX( txPower, maxBandTxPower );
}

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8008e54:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <RegionCommonGetBandwidth+0x1c>)
 8008e5a:	4298      	cmp	r0, r3
 8008e5c:	d005      	beq.n	8008e6a <RegionCommonGetBandwidth+0x16>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <RegionCommonGetBandwidth+0x20>)
 8008e60:	4298      	cmp	r0, r3
 8008e62:	bf0c      	ite	eq
 8008e64:	2002      	moveq	r0, #2
 8008e66:	2000      	movne	r0, #0
 8008e68:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 8008e6a:	2001      	movs	r0, #1
    }
}
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	0003d090 	.word	0x0003d090
 8008e74:	0007a120 	.word	0x0007a120

08008e78 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8008e78:	b530      	push	{r4, r5, lr}
    int8_t phyDr = DataratesUS915[datarate];
 8008e7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <GetTimeOnAir+0x30>)
{
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	460c      	mov	r4, r1
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8008e80:	490a      	ldr	r1, [pc, #40]	; (8008eac <GetTimeOnAir+0x34>)
    int8_t phyDr = DataratesUS915[datarate];
 8008e82:	561d      	ldrsb	r5, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8008e84:	f7ff ffe6 	bl	8008e54 <RegionCommonGetBandwidth>

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8008e88:	2208      	movs	r2, #8
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8008e8a:	4601      	mov	r1, r0
    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e9cd 2000 	strd	r2, r0, [sp]
 8008e92:	4a07      	ldr	r2, [pc, #28]	; (8008eb0 <GetTimeOnAir+0x38>)
 8008e94:	2301      	movs	r3, #1
 8008e96:	b2e4      	uxtb	r4, r4
 8008e98:	9402      	str	r4, [sp, #8]
 8008e9a:	9303      	str	r3, [sp, #12]
 8008e9c:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	47a0      	blx	r4
}
 8008ea4:	b005      	add	sp, #20
 8008ea6:	bd30      	pop	{r4, r5, pc}
 8008ea8:	08018c30 	.word	0x08018c30
 8008eac:	0801736c 	.word	0x0801736c
 8008eb0:	08017300 	.word	0x08017300

08008eb4 <VerifyRfFreq>:
    if( Radio.CheckRfFrequency( freq ) == false )
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <VerifyRfFreq+0x30>)
{
 8008eb6:	b510      	push	{r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
{
 8008eba:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 8008ebc:	4798      	blx	r3
 8008ebe:	b168      	cbz	r0, 8008edc <VerifyRfFreq+0x28>
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8008ec0:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <VerifyRfFreq+0x34>)
 8008ec2:	4a0a      	ldr	r2, [pc, #40]	; (8008eec <VerifyRfFreq+0x38>)
 8008ec4:	4423      	add	r3, r4
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d809      	bhi.n	8008ede <VerifyRfFreq+0x2a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8008eca:	4a09      	ldr	r2, [pc, #36]	; (8008ef0 <VerifyRfFreq+0x3c>)
 8008ecc:	4353      	muls	r3, r2
 8008ece:	f641 32f6 	movw	r2, #7158	; 0x1bf6
 8008ed2:	ebb2 1fb3 	cmp.w	r2, r3, ror #6
 8008ed6:	bf2c      	ite	cs
 8008ed8:	2001      	movcs	r0, #1
 8008eda:	2000      	movcc	r0, #0
}
 8008edc:	bd10      	pop	{r4, pc}
        return false;
 8008ede:	2000      	movs	r0, #0
 8008ee0:	e7fc      	b.n	8008edc <VerifyRfFreq+0x28>
 8008ee2:	bf00      	nop
 8008ee4:	08017300 	.word	0x08017300
 8008ee8:	c8f78f60 	.word	0xc8f78f60
 8008eec:	00401640 	.word	0x00401640
 8008ef0:	5943f75f 	.word	0x5943f75f

08008ef4 <RegionUS915GetPhyParam>:

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8008ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
 8008efa:	7803      	ldrb	r3, [r0, #0]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	2b36      	cmp	r3, #54	; 0x36
 8008f00:	d81f      	bhi.n	8008f42 <RegionUS915GetPhyParam+0x4e>
 8008f02:	e8df f003 	tbb	[pc, r3]
 8008f06:	1e1c      	.short	0x1e1c
 8008f08:	1e1e1e1e 	.word	0x1e1e1e1e
 8008f0c:	1e1e1e1e 	.word	0x1e1e1e1e
 8008f10:	1e3b3937 	.word	0x1e3b3937
 8008f14:	49464340 	.word	0x49464340
 8008f18:	571e4f4c 	.word	0x571e4f4c
 8008f1c:	635e591c 	.word	0x635e591c
 8008f20:	681e1e65 	.word	0x681e1e65
 8008f24:	1e1e221e 	.word	0x1e1e221e
 8008f28:	1e1e1e1e 	.word	0x1e1e1e1e
 8008f2c:	1e1e1e1e 	.word	0x1e1e1e1e
 8008f30:	6b1e1e1e 	.word	0x6b1e1e1e
 8008f34:	1e1c1c71 	.word	0x1e1c1c71
 8008f38:	791c1c6b 	.word	0x791c1c6b
 8008f3c:	7d          	.byte	0x7d
 8008f3d:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8008f3e:	2308      	movs	r3, #8
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
            break;
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8008f40:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 8008f42:	9800      	ldr	r0, [sp, #0]
 8008f44:	b005      	add	sp, #20
 8008f46:	f85d fb04 	ldr.w	pc, [sp], #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8008f4a:	7843      	ldrb	r3, [r0, #1]
 8008f4c:	f88d 3004 	strb.w	r3, [sp, #4]
 8008f50:	2304      	movs	r3, #4
 8008f52:	f88d 3005 	strb.w	r3, [sp, #5]
 8008f56:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8008f5a:	f8ad 3006 	strh.w	r3, [sp, #6]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8008f5e:	4b2b      	ldr	r3, [pc, #172]	; (800900c <RegionUS915GetPhyParam+0x118>)
 8008f60:	681b      	ldr	r3, [r3, #0]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8008f62:	a801      	add	r0, sp, #4
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8008f64:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8008f68:	e9cd 2302 	strd	r2, r3, [sp, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8008f6c:	f009 ff7d 	bl	8012e6a <RegionCommonGetNextLowerTxDr>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8008f70:	9000      	str	r0, [sp, #0]
            break;
 8008f72:	e7e6      	b.n	8008f42 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	e7e3      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8008f78:	2320      	movs	r3, #32
 8008f7a:	e7e1      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8008f7c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008f80:	4a23      	ldr	r2, [pc, #140]	; (8009010 <RegionUS915GetPhyParam+0x11c>)
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8008f82:	5cd3      	ldrb	r3, [r2, r3]
 8008f84:	e7dc      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8008f86:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008f8a:	e7d9      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8008f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f90:	e7d6      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8008f92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008f96:	e7d3      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8008f98:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f9c:	e7d0      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8008f9e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008fa2:	e7cd      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8008fa4:	481b      	ldr	r0, [pc, #108]	; (8009014 <RegionUS915GetPhyParam+0x120>)
 8008fa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008faa:	f008 fc49 	bl	8011840 <randr>
 8008fae:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8008fb2:	e7dd      	b.n	8008f70 <RegionUS915GetPhyParam+0x7c>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8008fb4:	4b18      	ldr	r3, [pc, #96]	; (8009018 <RegionUS915GetPhyParam+0x124>)
 8008fb6:	e7c3      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8008fb8:	4b14      	ldr	r3, [pc, #80]	; (800900c <RegionUS915GetPhyParam+0x118>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8008fc0:	e7be      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8008fc2:	4b12      	ldr	r3, [pc, #72]	; (800900c <RegionUS915GetPhyParam+0x118>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8008fca:	e7b9      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8008fcc:	2348      	movs	r3, #72	; 0x48
 8008fce:	e7b7      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8008fd0:	4b0e      	ldr	r3, [pc, #56]	; (800900c <RegionUS915GetPhyParam+0x118>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	e7b4      	b.n	8008f40 <RegionUS915GetPhyParam+0x4c>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8008fd6:	4b11      	ldr	r3, [pc, #68]	; (800901c <RegionUS915GetPhyParam+0x128>)
 8008fd8:	9300      	str	r3, [sp, #0]
            break;
 8008fda:	e7b2      	b.n	8008f42 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8008fdc:	4a10      	ldr	r2, [pc, #64]	; (8009020 <RegionUS915GetPhyParam+0x12c>)
 8008fde:	490e      	ldr	r1, [pc, #56]	; (8009018 <RegionUS915GetPhyParam+0x124>)
 8008fe0:	7900      	ldrb	r0, [r0, #4]
 8008fe2:	f009 ffa5 	bl	8012f30 <RegionBaseUSCalcDownlinkFrequency>
 8008fe6:	e7c3      	b.n	8008f70 <RegionUS915GetPhyParam+0x7c>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8008fe8:	f240 4317 	movw	r3, #1047	; 0x417
 8008fec:	f8ad 3000 	strh.w	r3, [sp]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	f88d 3002 	strb.w	r3, [sp, #2]
            break;
 8008ff6:	e7a4      	b.n	8008f42 <RegionUS915GetPhyParam+0x4e>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8008ff8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008ffc:	4a09      	ldr	r2, [pc, #36]	; (8009024 <RegionUS915GetPhyParam+0x130>)
 8008ffe:	e7c0      	b.n	8008f82 <RegionUS915GetPhyParam+0x8e>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8009000:	4909      	ldr	r1, [pc, #36]	; (8009028 <RegionUS915GetPhyParam+0x134>)
 8009002:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8009006:	f7ff ff25 	bl	8008e54 <RegionCommonGetBandwidth>
 800900a:	e7b1      	b.n	8008f70 <RegionUS915GetPhyParam+0x7c>
 800900c:	20002088 	.word	0x20002088
 8009010:	08018c40 	.word	0x08018c40
 8009014:	fffffc18 	.word	0xfffffc18
 8009018:	370870a0 	.word	0x370870a0
 800901c:	4200999a 	.word	0x4200999a
 8009020:	000927c0 	.word	0x000927c0
 8009024:	08018c30 	.word	0x08018c30
 8009028:	0801736c 	.word	0x0801736c

0800902c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800902c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800902e:	4b0b      	ldr	r3, [pc, #44]	; (800905c <RegionUS915SetBandTxDone+0x30>)
 8009030:	7802      	ldrb	r2, [r0, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	210c      	movs	r1, #12
 8009036:	fb01 3302 	mla	r3, r1, r2, r3
 800903a:	7a5b      	ldrb	r3, [r3, #9]
 800903c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <RegionUS915SetBandTxDone+0x34>)
 8009042:	681d      	ldr	r5, [r3, #0]
 8009044:	6903      	ldr	r3, [r0, #16]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	68c3      	ldr	r3, [r0, #12]
 800904a:	7842      	ldrb	r2, [r0, #1]
 800904c:	6881      	ldr	r1, [r0, #8]
 800904e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8009052:	f009 fda6 	bl	8012ba2 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8009056:	b003      	add	sp, #12
 8009058:	bd30      	pop	{r4, r5, pc}
 800905a:	bf00      	nop
 800905c:	20002088 	.word	0x20002088
 8009060:	20002080 	.word	0x20002080

08009064 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8009064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009066:	b087      	sub	sp, #28
    Band_t bands[US915_MAX_NB_BANDS] =
 8009068:	2301      	movs	r3, #1
    {
       US915_BAND0
    };

    switch( params->Type )
 800906a:	7b04      	ldrb	r4, [r0, #12]
    Band_t bands[US915_MAX_NB_BANDS] =
 800906c:	f8ad 3000 	strh.w	r3, [sp]
 8009070:	2300      	movs	r3, #0
 8009072:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8009076:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800907a:	f88d 3002 	strb.w	r3, [sp, #2]
 800907e:	f88d 3014 	strb.w	r3, [sp, #20]
    switch( params->Type )
 8009082:	b124      	cbz	r4, 800908e <RegionUS915InitDefaults+0x2a>
 8009084:	3c01      	subs	r4, #1
 8009086:	2c01      	cmp	r4, #1
 8009088:	d94e      	bls.n	8009128 <RegionUS915InitDefaults+0xc4>
        default:
        {
            break;
        }
    }
}
 800908a:	b007      	add	sp, #28
 800908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800908e:	6803      	ldr	r3, [r0, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0fa      	beq.n	800908a <RegionUS915InitDefaults+0x26>
 8009094:	6842      	ldr	r2, [r0, #4]
 8009096:	2a00      	cmp	r2, #0
 8009098:	d0f7      	beq.n	800908a <RegionUS915InitDefaults+0x26>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800909a:	4e30      	ldr	r6, [pc, #192]	; (800915c <RegionUS915InitDefaults+0xf8>)
            RegionBands = (Band_t*) params->Bands;
 800909c:	6880      	ldr	r0, [r0, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800909e:	6032      	str	r2, [r6, #0]
            RegionBands = (Band_t*) params->Bands;
 80090a0:	4a2f      	ldr	r2, [pc, #188]	; (8009160 <RegionUS915InitDefaults+0xfc>)
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80090a2:	4d30      	ldr	r5, [pc, #192]	; (8009164 <RegionUS915InitDefaults+0x100>)
            RegionBands = (Band_t*) params->Bands;
 80090a4:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80090a6:	819c      	strh	r4, [r3, #12]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80090a8:	2218      	movs	r2, #24
 80090aa:	4669      	mov	r1, sp
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80090ac:	602b      	str	r3, [r5, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80090ae:	f008 fbd4 	bl	801185a <memcpy1>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80090b2:	6830      	ldr	r0, [r6, #0]
 80090b4:	4b2c      	ldr	r3, [pc, #176]	; (8009168 <RegionUS915InitDefaults+0x104>)
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80090b6:	4f2d      	ldr	r7, [pc, #180]	; (800916c <RegionUS915InitDefaults+0x108>)
 80090b8:	4602      	mov	r2, r0
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80090ba:	4601      	mov	r1, r0
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80090bc:	f04f 0c30 	mov.w	ip, #48	; 0x30
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80090c0:	600b      	str	r3, [r1, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80090c2:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 80090c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80090ca:	42bb      	cmp	r3, r7
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80090cc:	f881 c008 	strb.w	ip, [r1, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 80090d0:	724c      	strb	r4, [r1, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80090d2:	f101 010c 	add.w	r1, r1, #12
 80090d6:	d1f3      	bne.n	80090c0 <RegionUS915InitDefaults+0x5c>
 80090d8:	4b25      	ldr	r3, [pc, #148]	; (8009170 <RegionUS915InitDefaults+0x10c>)
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80090da:	4926      	ldr	r1, [pc, #152]	; (8009174 <RegionUS915InitDefaults+0x110>)
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80090dc:	2744      	movs	r7, #68	; 0x44
                RegionNvmGroup2->Channels[i].Band = 0;
 80090de:	2400      	movs	r4, #0
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80090e0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80090e4:	f503 13c3 	add.w	r3, r3, #1597440	; 0x186000
 80090e8:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 80090ec:	428b      	cmp	r3, r1
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80090ee:	f882 7308 	strb.w	r7, [r2, #776]	; 0x308
                RegionNvmGroup2->Channels[i].Band = 0;
 80090f2:	f882 4309 	strb.w	r4, [r2, #777]	; 0x309
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80090f6:	f102 020c 	add.w	r2, r2, #12
 80090fa:	d1f1      	bne.n	80090e0 <RegionUS915InitDefaults+0x7c>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80090fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8009100:	e9c0 33db 	strd	r3, r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8009104:	23ff      	movs	r3, #255	; 0xff
 8009106:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800910a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800910e:	2206      	movs	r2, #6
 8009110:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8009114:	f009 fd36 	bl	8012b84 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8009118:	6831      	ldr	r1, [r6, #0]
 800911a:	6828      	ldr	r0, [r5, #0]
 800911c:	2206      	movs	r2, #6
 800911e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8009122:	f009 fd2f 	bl	8012b84 <RegionCommonChanMaskCopy>
            break;
 8009126:	e7b0      	b.n	800908a <RegionUS915InitDefaults+0x26>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8009128:	4c0c      	ldr	r4, [pc, #48]	; (800915c <RegionUS915InitDefaults+0xf8>)
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	2206      	movs	r2, #6
 800912e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8009132:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8009136:	f009 fd25 	bl	8012b84 <RegionCommonChanMaskCopy>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800913a:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <RegionUS915InitDefaults+0x100>)
 800913c:	6821      	ldr	r1, [r4, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8009144:	1e9a      	subs	r2, r3, #2
 8009146:	330a      	adds	r3, #10
 8009148:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 800914c:	f831 0b02 	ldrh.w	r0, [r1], #2
            for( uint8_t i = 0; i < 6; i++ )
 8009150:	429a      	cmp	r2, r3
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8009152:	ea00 0004 	and.w	r0, r0, r4
 8009156:	8010      	strh	r0, [r2, #0]
            for( uint8_t i = 0; i < 6; i++ )
 8009158:	d1f6      	bne.n	8009148 <RegionUS915InitDefaults+0xe4>
 800915a:	e796      	b.n	800908a <RegionUS915InitDefaults+0x26>
 800915c:	20002088 	.word	0x20002088
 8009160:	20002080 	.word	0x20002080
 8009164:	20002084 	.word	0x20002084
 8009168:	35c80160 	.word	0x35c80160
 800916c:	368b5160 	.word	0x368b5160
 8009170:	35d2afc0 	.word	0x35d2afc0
 8009174:	3695ffc0 	.word	0x3695ffc0

08009178 <RegionUS915ApplyCFList>:
            return false;
    }
}

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8009178:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800917a:	7a03      	ldrb	r3, [r0, #8]
 800917c:	2b10      	cmp	r3, #16
 800917e:	d123      	bne.n	80091c8 <RegionUS915ApplyCFList+0x50>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8009180:	6844      	ldr	r4, [r0, #4]
 8009182:	7be3      	ldrb	r3, [r4, #15]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d11f      	bne.n	80091c8 <RegionUS915ApplyCFList+0x50>
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8009188:	4b10      	ldr	r3, [pc, #64]	; (80091cc <RegionUS915ApplyCFList+0x54>)
 800918a:	681d      	ldr	r5, [r3, #0]
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800918c:	4b10      	ldr	r3, [pc, #64]	; (80091d0 <RegionUS915ApplyCFList+0x58>)
 800918e:	6819      	ldr	r1, [r3, #0]
 8009190:	f505 7058 	add.w	r0, r5, #864	; 0x360
 8009194:	3902      	subs	r1, #2
 8009196:	2200      	movs	r2, #0
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8009198:	1c67      	adds	r7, r4, #1
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800919a:	f814 3012 	ldrb.w	r3, [r4, r2, lsl #1]
 800919e:	8003      	strh	r3, [r0, #0]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80091a0:	f817 6012 	ldrb.w	r6, [r7, r2, lsl #1]
        if( chMaskItr == 4 )
 80091a4:	2a04      	cmp	r2, #4
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80091a6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80091aa:	f820 3b02 	strh.w	r3, [r0], #2
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80091ae:	bf04      	itt	eq
 80091b0:	b2db      	uxtbeq	r3, r3
 80091b2:	f8a5 3368 	strheq.w	r3, [r5, #872]	; 0x368
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80091b6:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80091ba:	f830 6c02 	ldrh.w	r6, [r0, #-2]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80091be:	3201      	adds	r2, #1
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80091c0:	4033      	ands	r3, r6
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80091c2:	2a05      	cmp	r2, #5
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80091c4:	800b      	strh	r3, [r1, #0]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80091c6:	d1e8      	bne.n	800919a <RegionUS915ApplyCFList+0x22>
    }
}
 80091c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20002088 	.word	0x20002088
 80091d0:	20002084 	.word	0x20002084

080091d4 <RegionUS915ComputeRxWindowParameters>:
    }
    return true;
}

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80091d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80091d6:	280d      	cmp	r0, #13
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80091d8:	4d11      	ldr	r5, [pc, #68]	; (8009220 <RegionUS915ComputeRxWindowParameters+0x4c>)
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80091da:	bfa8      	it	ge
 80091dc:	200d      	movge	r0, #13
{
 80091de:	461c      	mov	r4, r3
 80091e0:	460e      	mov	r6, r1
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80091e2:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80091e4:	4629      	mov	r1, r5
{
 80091e6:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80091e8:	f7ff fe34 	bl	8008e54 <RegionCommonGetBandwidth>

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80091ec:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80091f0:	4a0c      	ldr	r2, [pc, #48]	; (8009224 <RegionUS915ComputeRxWindowParameters+0x50>)
 80091f2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80091f6:	70a0      	strb	r0, [r4, #2]
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80091f8:	5cd0      	ldrb	r0, [r2, r3]
 80091fa:	f7ff fe23 	bl	8008e44 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80091fe:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <RegionUS915ComputeRxWindowParameters+0x54>)
 8009200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8009202:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8009204:	4798      	blx	r3
 8009206:	f104 020c 	add.w	r2, r4, #12
 800920a:	3408      	adds	r4, #8
 800920c:	4603      	mov	r3, r0
 800920e:	9201      	str	r2, [sp, #4]
 8009210:	9400      	str	r4, [sp, #0]
 8009212:	463a      	mov	r2, r7
 8009214:	4631      	mov	r1, r6
 8009216:	4628      	mov	r0, r5
 8009218:	f009 fd4b 	bl	8012cb2 <RegionCommonComputeRxWindowParameters>
}
 800921c:	b003      	add	sp, #12
 800921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009220:	0801736c 	.word	0x0801736c
 8009224:	08018c30 	.word	0x08018c30
 8009228:	08017300 	.word	0x08017300

0800922c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800922c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int8_t dr = rxConfig->Datarate;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 8009230:	4e1f      	ldr	r6, [pc, #124]	; (80092b0 <RegionUS915RxConfig+0x84>)
    int8_t dr = rxConfig->Datarate;
 8009232:	f990 9001 	ldrsb.w	r9, [r0, #1]
    if( Radio.GetStatus( ) != RF_IDLE )
 8009236:	6873      	ldr	r3, [r6, #4]
    uint32_t frequency = rxConfig->Frequency;
 8009238:	6845      	ldr	r5, [r0, #4]
{
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	4604      	mov	r4, r0
 800923e:	4688      	mov	r8, r1
    if( Radio.GetStatus( ) != RF_IDLE )
 8009240:	4798      	blx	r3
 8009242:	2800      	cmp	r0, #0
 8009244:	d131      	bne.n	80092aa <RegionUS915RxConfig+0x7e>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8009246:	7ca3      	ldrb	r3, [r4, #18]
 8009248:	b933      	cbnz	r3, 8009258 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800924a:	7825      	ldrb	r5, [r4, #0]
 800924c:	4a19      	ldr	r2, [pc, #100]	; (80092b4 <RegionUS915RxConfig+0x88>)
 800924e:	f005 0307 	and.w	r3, r5, #7
 8009252:	4d19      	ldr	r5, [pc, #100]	; (80092b8 <RegionUS915RxConfig+0x8c>)
 8009254:	fb02 5503 	mla	r5, r2, r3, r5
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8009258:	4b18      	ldr	r3, [pc, #96]	; (80092bc <RegionUS915RxConfig+0x90>)

    Radio.SetChannel( frequency );
 800925a:	4628      	mov	r0, r5
    phyDr = DataratesUS915[dr];
 800925c:	f913 a009 	ldrsb.w	sl, [r3, r9]
    Radio.SetChannel( frequency );
 8009260:	68f3      	ldr	r3, [r6, #12]
 8009262:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8009264:	7c63      	ldrb	r3, [r4, #17]
 8009266:	8922      	ldrh	r2, [r4, #8]
 8009268:	9309      	str	r3, [sp, #36]	; 0x24
 800926a:	2501      	movs	r5, #1
 800926c:	2300      	movs	r3, #0
 800926e:	9202      	str	r2, [sp, #8]
 8009270:	2208      	movs	r2, #8
 8009272:	e9cd 3200 	strd	r3, r2, [sp]
 8009276:	e9cd 3507 	strd	r3, r5, [sp, #28]
 800927a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800927e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009282:	78a1      	ldrb	r1, [r4, #2]
 8009284:	69b7      	ldr	r7, [r6, #24]
 8009286:	462b      	mov	r3, r5
 8009288:	4652      	mov	r2, sl
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7

    Radio.SetMaxPayloadLength( MODEM_LORA, MaxPayloadOfDatarateUS915[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <RegionUS915RxConfig+0x94>)
 8009290:	f813 1009 	ldrb.w	r1, [r3, r9]
 8009294:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009296:	310d      	adds	r1, #13
 8009298:	4628      	mov	r0, r5
 800929a:	b2c9      	uxtb	r1, r1
 800929c:	4798      	blx	r3

    *datarate = (uint8_t) dr;
 800929e:	f888 9000 	strb.w	r9, [r8]
    return true;
 80092a2:	4628      	mov	r0, r5
}
 80092a4:	b00a      	add	sp, #40	; 0x28
 80092a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return false;
 80092aa:	2000      	movs	r0, #0
 80092ac:	e7fa      	b.n	80092a4 <RegionUS915RxConfig+0x78>
 80092ae:	bf00      	nop
 80092b0:	08017300 	.word	0x08017300
 80092b4:	000927c0 	.word	0x000927c0
 80092b8:	370870a0 	.word	0x370870a0
 80092bc:	08018c30 	.word	0x08018c30
 80092c0:	08018c40 	.word	0x08018c40

080092c4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80092c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80092c8:	4b37      	ldr	r3, [pc, #220]	; (80093a8 <RegionUS915TxConfig+0xe4>)
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80092ca:	4e38      	ldr	r6, [pc, #224]	; (80093ac <RegionUS915TxConfig+0xe8>)
 80092cc:	f990 a002 	ldrsb.w	sl, [r0, #2]
 80092d0:	f8d6 b000 	ldr.w	fp, [r6]
{
 80092d4:	4691      	mov	r9, r2
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80092d6:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80092da:	569f      	ldrsb	r7, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80092dc:	7803      	ldrb	r3, [r0, #0]
{
 80092de:	4688      	mov	r8, r1
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80092e0:	210c      	movs	r1, #12
 80092e2:	fb01 b303 	mla	r3, r1, r3, fp
 80092e6:	4932      	ldr	r1, [pc, #200]	; (80093b0 <RegionUS915TxConfig+0xec>)
 80092e8:	7a5b      	ldrb	r3, [r3, #9]
 80092ea:	6809      	ldr	r1, [r1, #0]
 80092ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80092f0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
{
 80092f4:	b08d      	sub	sp, #52	; 0x34
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80092f6:	f993 1002 	ldrsb.w	r1, [r3, #2]
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80092fa:	920b      	str	r2, [sp, #44]	; 0x2c
{
 80092fc:	4604      	mov	r4, r0
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80092fe:	4650      	mov	r0, sl
 8009300:	f009 fdce 	bl	8012ea0 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8009304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009306:	2a04      	cmp	r2, #4
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8009308:	4605      	mov	r5, r0
    if( datarate == DR_4 )
 800930a:	d13f      	bne.n	800938c <RegionUS915TxConfig+0xc8>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800930c:	4655      	mov	r5, sl
 800930e:	2d02      	cmp	r5, #2
 8009310:	bfb8      	it	lt
 8009312:	2502      	movlt	r5, #2
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8009314:	4927      	ldr	r1, [pc, #156]	; (80093b4 <RegionUS915TxConfig+0xf0>)
 8009316:	f994 0001 	ldrsb.w	r0, [r4, #1]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800931a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80093b8 <RegionUS915TxConfig+0xf4>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800931e:	f7ff fd99 	bl	8008e54 <RegionCommonGetBandwidth>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8009322:	4926      	ldr	r1, [pc, #152]	; (80093bc <RegionUS915TxConfig+0xf8>)
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8009324:	4683      	mov	fp, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8009326:	2200      	movs	r2, #0
 8009328:	4628      	mov	r0, r5
 800932a:	f009 fceb 	bl	8012d04 <RegionCommonComputeTxPower>
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800932e:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8009330:	900b      	str	r0, [sp, #44]	; 0x2c
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8009332:	230c      	movs	r3, #12
 8009334:	435a      	muls	r2, r3
 8009336:	6830      	ldr	r0, [r6, #0]
 8009338:	f8da 300c 	ldr.w	r3, [sl, #12]
 800933c:	5880      	ldr	r0, [r0, r2]
 800933e:	4798      	blx	r3

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8009340:	2200      	movs	r2, #0
 8009342:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009346:	2601      	movs	r6, #1
 8009348:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800934c:	2308      	movs	r3, #8
 800934e:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8009352:	e9cd 2603 	strd	r2, r6, [sp, #12]
 8009356:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800935a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800935c:	9700      	str	r7, [sp, #0]
 800935e:	465b      	mov	r3, fp
 8009360:	4630      	mov	r0, r6
 8009362:	f8da 701c 	ldr.w	r7, [sl, #28]
 8009366:	47b8      	blx	r7

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8009368:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800936c:	7b21      	ldrb	r1, [r4, #12]
 800936e:	4630      	mov	r0, r6
 8009370:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8009372:	89a1      	ldrh	r1, [r4, #12]
 8009374:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8009378:	f7ff fd7e 	bl	8008e78 <GetTimeOnAir>
 800937c:	f8c9 0000 	str.w	r0, [r9]

    *txPower = txPowerLimited;
    return true;
}
 8009380:	4630      	mov	r0, r6
    *txPower = txPowerLimited;
 8009382:	f888 5000 	strb.w	r5, [r8]
}
 8009386:	b00d      	add	sp, #52	; 0x34
 8009388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800938c:	2204      	movs	r2, #4
 800938e:	2100      	movs	r1, #0
 8009390:	f50b 7058 	add.w	r0, fp, #864	; 0x360
 8009394:	f009 fbd8 	bl	8012b48 <RegionCommonCountChannels>
 8009398:	2831      	cmp	r0, #49	; 0x31
 800939a:	d8bb      	bhi.n	8009314 <RegionUS915TxConfig+0x50>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800939c:	4655      	mov	r5, sl
 800939e:	2d05      	cmp	r5, #5
 80093a0:	bfb8      	it	lt
 80093a2:	2505      	movlt	r5, #5
 80093a4:	e7b6      	b.n	8009314 <RegionUS915TxConfig+0x50>
 80093a6:	bf00      	nop
 80093a8:	08018c30 	.word	0x08018c30
 80093ac:	20002088 	.word	0x20002088
 80093b0:	20002080 	.word	0x20002080
 80093b4:	0801736c 	.word	0x0801736c
 80093b8:	08017300 	.word	0x08017300
 80093bc:	41f00000 	.word	0x41f00000

080093c0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80093c4:	4f84      	ldr	r7, [pc, #528]	; (80095d8 <RegionUS915LinkAdrReq+0x218>)
{
 80093c6:	b093      	sub	sp, #76	; 0x4c
 80093c8:	e9cd 1201 	strd	r1, r2, [sp, #4]
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80093cc:	6839      	ldr	r1, [r7, #0]
{
 80093ce:	9303      	str	r3, [sp, #12]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80093d0:	ae07      	add	r6, sp, #28
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80093d2:	2400      	movs	r4, #0
{
 80093d4:	4605      	mov	r5, r0
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80093d6:	2206      	movs	r2, #6
 80093d8:	f501 7158 	add.w	r1, r1, #864	; 0x360
 80093dc:	4630      	mov	r0, r6
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80093de:	e9c6 4401 	strd	r4, r4, [r6, #4]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80093e2:	9405      	str	r4, [sp, #20]
 80093e4:	f8ad 4018 	strh.w	r4, [sp, #24]
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80093e8:	9407      	str	r4, [sp, #28]
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80093ea:	f009 fbcb 	bl	8012b84 <RegionCommonChanMaskCopy>
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80093ee:	46a0      	mov	r8, r4
            channelsMask[0] = 0xFFFF;
 80093f0:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80093f4:	7a2b      	ldrb	r3, [r5, #8]
 80093f6:	42a3      	cmp	r3, r4
 80093f8:	d906      	bls.n	8009408 <RegionUS915LinkAdrReq+0x48>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80093fa:	6868      	ldr	r0, [r5, #4]
 80093fc:	a905      	add	r1, sp, #20
 80093fe:	4420      	add	r0, r4
 8009400:	f009 fbf2 	bl	8012be8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8009404:	2800      	cmp	r0, #0
 8009406:	d176      	bne.n	80094f6 <RegionUS915LinkAdrReq+0x136>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8009408:	f99d 3015 	ldrsb.w	r3, [sp, #21]
 800940c:	2b03      	cmp	r3, #3
 800940e:	dc07      	bgt.n	8009420 <RegionUS915LinkAdrReq+0x60>
 8009410:	2204      	movs	r2, #4
 8009412:	2100      	movs	r1, #0
 8009414:	a807      	add	r0, sp, #28
 8009416:	f009 fb97 	bl	8012b48 <RegionCommonCountChannels>
 800941a:	2801      	cmp	r0, #1
 800941c:	f240 80da 	bls.w	80095d4 <RegionUS915LinkAdrReq+0x214>
    uint8_t bytesProcessed = 0;
 8009420:	2307      	movs	r3, #7
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionUS915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 8009422:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8009426:	7aab      	ldrb	r3, [r5, #10]
 8009428:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800942c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8009430:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8009434:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009438:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800943c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009440:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8009444:	7aeb      	ldrb	r3, [r5, #11]
 8009446:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800944a:	7b2b      	ldrb	r3, [r5, #12]
 800944c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8009450:	7b6b      	ldrb	r3, [r5, #13]
 8009452:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8009456:	2348      	movs	r3, #72	; 0x48
 8009458:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    linkAdrVerifyParams.ChannelsMask = channelsMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800945c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009460:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	9310      	str	r3, [sp, #64]	; 0x40
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8009468:	230e      	movs	r3, #14
 800946a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	930a      	str	r3, [sp, #40]	; 0x28

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009472:	f10d 0216 	add.w	r2, sp, #22
 8009476:	ab05      	add	r3, sp, #20
 8009478:	f10d 0115 	add.w	r1, sp, #21
 800947c:	a80a      	add	r0, sp, #40	; 0x28
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800947e:	960e      	str	r6, [sp, #56]	; 0x38
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009480:	f009 fbcc 	bl	8012c1c <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8009484:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8009486:	4605      	mov	r5, r0
    if( status == 0x07 )
 8009488:	d123      	bne.n	80094d2 <RegionUS915LinkAdrReq+0x112>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800948a:	6838      	ldr	r0, [r7, #0]
 800948c:	2206      	movs	r2, #6
 800948e:	4631      	mov	r1, r6
 8009490:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8009494:	f009 fb76 	bl	8012b84 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8009498:	4b50      	ldr	r3, [pc, #320]	; (80095dc <RegionUS915LinkAdrReq+0x21c>)
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f8b2 0360 	ldrh.w	r0, [r2, #864]	; 0x360
 80094a2:	8819      	ldrh	r1, [r3, #0]
 80094a4:	4001      	ands	r1, r0
 80094a6:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80094a8:	f8b2 0362 	ldrh.w	r0, [r2, #866]	; 0x362
 80094ac:	8859      	ldrh	r1, [r3, #2]
 80094ae:	4001      	ands	r1, r0
 80094b0:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 80094b2:	f8b2 0364 	ldrh.w	r0, [r2, #868]	; 0x364
 80094b6:	8899      	ldrh	r1, [r3, #4]
 80094b8:	4001      	ands	r1, r0
 80094ba:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 80094bc:	f8b2 0366 	ldrh.w	r0, [r2, #870]	; 0x366
 80094c0:	88d9      	ldrh	r1, [r3, #6]
 80094c2:	4001      	ands	r1, r0
 80094c4:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80094c6:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 80094ca:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80094ce:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 80094d0:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80094d2:	9a01      	ldr	r2, [sp, #4]
 80094d4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80094d8:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 80094da:	9a02      	ldr	r2, [sp, #8]
 80094dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80094e0:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80094e2:	9a03      	ldr	r2, [sp, #12]
 80094e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80094e8:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 80094ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    return status;
}
 80094ec:	4628      	mov	r0, r5
    *nbBytesParsed = bytesProcessed;
 80094ee:	701c      	strb	r4, [r3, #0]
}
 80094f0:	b013      	add	sp, #76	; 0x4c
 80094f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( linkAdrParams.ChMaskCtrl == 6 )
 80094f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80094fa:	f8bd 2018 	ldrh.w	r2, [sp, #24]
        bytesProcessed += nextIndex;
 80094fe:	4404      	add	r4, r0
        if( linkAdrParams.ChMaskCtrl == 6 )
 8009500:	2b06      	cmp	r3, #6
        bytesProcessed += nextIndex;
 8009502:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 8009504:	d10b      	bne.n	800951e <RegionUS915LinkAdrReq+0x15e>
            channelsMask[0] = 0xFFFF;
 8009506:	f8ad 901c 	strh.w	r9, [sp, #28]
            channelsMask[1] = 0xFFFF;
 800950a:	f8ad 901e 	strh.w	r9, [sp, #30]
            channelsMask[2] = 0xFFFF;
 800950e:	f8ad 9020 	strh.w	r9, [sp, #32]
            channelsMask[3] = 0xFFFF;
 8009512:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8009516:	b2d2      	uxtb	r2, r2
 8009518:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800951c:	e76a      	b.n	80093f4 <RegionUS915LinkAdrReq+0x34>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800951e:	2b07      	cmp	r3, #7
 8009520:	d108      	bne.n	8009534 <RegionUS915LinkAdrReq+0x174>
            channelsMask[0] = 0x0000;
 8009522:	f8ad 801c 	strh.w	r8, [sp, #28]
            channelsMask[1] = 0x0000;
 8009526:	f8ad 801e 	strh.w	r8, [sp, #30]
            channelsMask[2] = 0x0000;
 800952a:	f8ad 8020 	strh.w	r8, [sp, #32]
            channelsMask[3] = 0x0000;
 800952e:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8009532:	e7f0      	b.n	8009516 <RegionUS915LinkAdrReq+0x156>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8009534:	2b05      	cmp	r3, #5
 8009536:	d147      	bne.n	80095c8 <RegionUS915LinkAdrReq+0x208>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8009538:	f04f 0c00 	mov.w	ip, #0
 800953c:	b2d2      	uxtb	r2, r2
            uint8_t cntChannelMask = 0;
 800953e:	4661      	mov	r1, ip
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8009540:	2301      	movs	r3, #1
 8009542:	fa03 fa0c 	lsl.w	sl, r3, ip
                    if( ( i % 2 ) == 0 )
 8009546:	ea0c 0b03 	and.w	fp, ip, r3
                        channelsMask[cntChannelMask] |= 0x00FF;
 800954a:	ab12      	add	r3, sp, #72	; 0x48
 800954c:	eb03 0e41 	add.w	lr, r3, r1, lsl #1
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8009550:	ea12 0f0a 	tst.w	r2, sl
                        channelsMask[cntChannelMask] |= 0x00FF;
 8009554:	f83e 3c2c 	ldrh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 8009558:	fa0f f08a 	sxth.w	r0, sl
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800955c:	d01d      	beq.n	800959a <RegionUS915LinkAdrReq+0x1da>
                    if( ( i % 2 ) == 0 )
 800955e:	f1bb 0f00 	cmp.w	fp, #0
 8009562:	d10e      	bne.n	8009582 <RegionUS915LinkAdrReq+0x1c2>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8009564:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8009568:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 800956c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8009570:	4303      	orrs	r3, r0
 8009572:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            for( uint8_t i = 0; i <= 7; i++ )
 8009576:	f10c 0c01 	add.w	ip, ip, #1
 800957a:	f1bc 0f08 	cmp.w	ip, #8
 800957e:	d1df      	bne.n	8009540 <RegionUS915LinkAdrReq+0x180>
 8009580:	e738      	b.n	80093f4 <RegionUS915LinkAdrReq+0x34>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8009582:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8009586:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] |= ( bitMask << i );
 800958a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800958e:	4303      	orrs	r3, r0
 8009590:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                        cntChannelMask++;
 8009594:	3101      	adds	r1, #1
 8009596:	b2c9      	uxtb	r1, r1
 8009598:	e7ed      	b.n	8009576 <RegionUS915LinkAdrReq+0x1b6>
                        channelsMask[4] &= ~( bitMask << i );
 800959a:	43c0      	mvns	r0, r0
                    if( ( i % 2 ) == 0 )
 800959c:	f1bb 0f00 	cmp.w	fp, #0
 80095a0:	d109      	bne.n	80095b6 <RegionUS915LinkAdrReq+0x1f6>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80095a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095a6:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 80095aa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80095ae:	4018      	ands	r0, r3
 80095b0:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 80095b4:	e7df      	b.n	8009576 <RegionUS915LinkAdrReq+0x1b6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f82e 3c2c 	strh.w	r3, [lr, #-44]
                        channelsMask[4] &= ~( bitMask << i );
 80095bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80095c0:	4018      	ands	r0, r3
 80095c2:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 80095c6:	e7e5      	b.n	8009594 <RegionUS915LinkAdrReq+0x1d4>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80095c8:	a912      	add	r1, sp, #72	; 0x48
 80095ca:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80095ce:	f823 2c2c 	strh.w	r2, [r3, #-44]
 80095d2:	e70f      	b.n	80093f4 <RegionUS915LinkAdrReq+0x34>
        status &= 0xFE; // Channel mask KO
 80095d4:	2306      	movs	r3, #6
 80095d6:	e724      	b.n	8009422 <RegionUS915LinkAdrReq+0x62>
 80095d8:	20002088 	.word	0x20002088
 80095dc:	20002084 	.word	0x20002084

080095e0 <RegionUS915NextChannel>:
    }
    return currentDr;
}

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80095e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t nbEnabledChannels = 0;
 80095e4:	2500      	movs	r5, #0
{
 80095e6:	b0a4      	sub	sp, #144	; 0x90
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80095e8:	4e48      	ldr	r6, [pc, #288]	; (800970c <RegionUS915NextChannel+0x12c>)
    uint8_t nbEnabledChannels = 0;
 80095ea:	f88d 500e 	strb.w	r5, [sp, #14]
{
 80095ee:	4604      	mov	r4, r0
 80095f0:	460f      	mov	r7, r1
 80095f2:	4691      	mov	r9, r2
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 80095f4:	4629      	mov	r1, r5
 80095f6:	2244      	movs	r2, #68	; 0x44
 80095f8:	a813      	add	r0, sp, #76	; 0x4c
{
 80095fa:	4698      	mov	r8, r3
    uint8_t nbRestrictedChannels = 0;
 80095fc:	f88d 500f 	strb.w	r5, [sp, #15]
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8009600:	9512      	str	r5, [sp, #72]	; 0x48
 8009602:	f00c ffd4 	bl	80165ae <memset>
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8009606:	4629      	mov	r1, r5
 8009608:	6830      	ldr	r0, [r6, #0]
 800960a:	f8df a104 	ldr.w	sl, [pc, #260]	; 8009710 <RegionUS915NextChannel+0x130>
 800960e:	2204      	movs	r2, #4
 8009610:	f009 fa9a 	bl	8012b48 <RegionCommonCountChannels>
 8009614:	4605      	mov	r5, r0
 8009616:	b948      	cbnz	r0, 800962c <RegionUS915NextChannel+0x4c>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8009618:	f8da 1000 	ldr.w	r1, [sl]
 800961c:	6830      	ldr	r0, [r6, #0]
 800961e:	2204      	movs	r2, #4
 8009620:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8009624:	f009 faae 	bl	8012b84 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8009628:	6833      	ldr	r3, [r6, #0]
 800962a:	731d      	strb	r5, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800962c:	f994 3008 	ldrsb.w	r3, [r4, #8]
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8009630:	6832      	ldr	r2, [r6, #0]
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8009632:	f8da 1000 	ldr.w	r1, [sl]
    if( nextChanParams->Datarate >= DR_4 )
 8009636:	2b03      	cmp	r3, #3
 8009638:	dd04      	ble.n	8009644 <RegionUS915NextChannel+0x64>
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800963a:	7a10      	ldrb	r0, [r2, #8]
 800963c:	b910      	cbnz	r0, 8009644 <RegionUS915NextChannel+0x64>
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800963e:	f8b1 0368 	ldrh.w	r0, [r1, #872]	; 0x368
 8009642:	8110      	strh	r0, [r2, #8]

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8009644:	e9cd 2105 	strd	r2, r1, [sp, #20]
    countChannelsParams.Bands = RegionBands;
 8009648:	4a32      	ldr	r2, [pc, #200]	; (8009714 <RegionUS915NextChannel+0x134>)
    countChannelsParams.Joined = nextChanParams->Joined;
 800964a:	7a60      	ldrb	r0, [r4, #9]
    countChannelsParams.Bands = RegionBands;
 800964c:	6812      	ldr	r2, [r2, #0]
 800964e:	9207      	str	r2, [sp, #28]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8009650:	2248      	movs	r2, #72	; 0x48
 8009652:	f8ad 2020 	strh.w	r2, [sp, #32]
    countChannelsParams.JoinChannels = NULL;
 8009656:	2200      	movs	r2, #0
 8009658:	9209      	str	r2, [sp, #36]	; 0x24

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800965a:	6822      	ldr	r2, [r4, #0]
 800965c:	920a      	str	r2, [sp, #40]	; 0x28
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800965e:	6862      	ldr	r2, [r4, #4]
 8009660:	920b      	str	r2, [sp, #44]	; 0x2c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8009662:	7aa2      	ldrb	r2, [r4, #10]
    countChannelsParams.Joined = nextChanParams->Joined;
 8009664:	f88d 0010 	strb.w	r0, [sp, #16]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8009668:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800966c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8009670:	2201      	movs	r2, #1
 8009672:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8009676:	aa04      	add	r2, sp, #16
 8009678:	9211      	str	r2, [sp, #68]	; 0x44
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800967a:	aa0d      	add	r2, sp, #52	; 0x34
 800967c:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8009680:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009682:	8ae1      	ldrh	r1, [r4, #22]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8009684:	f88d 3011 	strb.w	r3, [sp, #17]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009688:	4618      	mov	r0, r3
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800968a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800968e:	f7ff fbf3 	bl	8008e78 <GetTimeOnAir>

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009692:	f10d 030f 	add.w	r3, sp, #15
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8009696:	9010      	str	r0, [sp, #64]	; 0x40
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	f8cd 9004 	str.w	r9, [sp, #4]
 800969e:	f10d 030e 	add.w	r3, sp, #14
 80096a2:	aa12      	add	r2, sp, #72	; 0x48
 80096a4:	4641      	mov	r1, r8
 80096a6:	a80a      	add	r0, sp, #40	; 0x28
 80096a8:	f009 fb9b 	bl	8012de2 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80096ac:	4605      	mov	r5, r0
 80096ae:	b980      	cbnz	r0, 80096d2 <RegionUS915NextChannel+0xf2>
    {
        if( nextChanParams->Joined == true )
 80096b0:	7a63      	ldrb	r3, [r4, #9]
 80096b2:	b193      	cbz	r3, 80096da <RegionUS915NextChannel+0xfa>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80096b4:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80096b8:	3901      	subs	r1, #1
 80096ba:	f008 f8c1 	bl	8011840 <randr>
 80096be:	ab24      	add	r3, sp, #144	; 0x90
 80096c0:	4418      	add	r0, r3
 80096c2:	f810 3c48 	ldrb.w	r3, [r0, #-72]
                uint8_t i = 0;
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
                }
                *channel = 64 + i;
 80096c6:	703b      	strb	r3, [r7, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80096c8:	7839      	ldrb	r1, [r7, #0]
 80096ca:	6830      	ldr	r0, [r6, #0]
 80096cc:	2248      	movs	r2, #72	; 0x48
 80096ce:	f009 fa22 	bl	8012b16 <RegionCommonChanDisable>
    }
    return status;
}
 80096d2:	4628      	mov	r0, r5
 80096d4:	b024      	add	sp, #144	; 0x90
 80096d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( nextChanParams->Datarate == DR_0 )
 80096da:	f994 3008 	ldrsb.w	r3, [r4, #8]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80096de:	6830      	ldr	r0, [r6, #0]
            if( nextChanParams->Datarate == DR_0 )
 80096e0:	b153      	cbz	r3, 80096f8 <RegionUS915NextChannel+0x118>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80096e2:	7a00      	ldrb	r0, [r0, #8]
 80096e4:	462a      	mov	r2, r5
 80096e6:	b2d3      	uxtb	r3, r2
 80096e8:	fa40 f103 	asr.w	r1, r0, r3
 80096ec:	07c9      	lsls	r1, r1, #31
 80096ee:	f102 0201 	add.w	r2, r2, #1
 80096f2:	d5f8      	bpl.n	80096e6 <RegionUS915NextChannel+0x106>
                *channel = 64 + i;
 80096f4:	3340      	adds	r3, #64	; 0x40
 80096f6:	e7e6      	b.n	80096c6 <RegionUS915NextChannel+0xe6>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80096f8:	463a      	mov	r2, r7
 80096fa:	f100 010c 	add.w	r1, r0, #12
 80096fe:	f009 fbd3 	bl	8012ea8 <RegionBaseUSComputeNext125kHzJoinChannel>
 8009702:	2803      	cmp	r0, #3
 8009704:	d1e0      	bne.n	80096c8 <RegionUS915NextChannel+0xe8>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8009706:	4605      	mov	r5, r0
 8009708:	e7e3      	b.n	80096d2 <RegionUS915NextChannel+0xf2>
 800970a:	bf00      	nop
 800970c:	20002084 	.word	0x20002084
 8009710:	20002088 	.word	0x20002088
 8009714:	20002080 	.word	0x20002080

08009718 <RegionUS915ApplyDrOffset>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8009718:	4b03      	ldr	r3, [pc, #12]	; (8009728 <RegionUS915ApplyDrOffset+0x10>)
 800971a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800971e:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 8009720:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8009724:	b2c0      	uxtb	r0, r0
 8009726:	4770      	bx	lr
 8009728:	08018c1c 	.word	0x08018c1c

0800972c <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
 800972c:	4b08      	ldr	r3, [pc, #32]	; (8009750 <registry_find+0x24>)
 800972e:	6859      	ldr	r1, [r3, #4]
{
 8009730:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
 8009732:	b111      	cbz	r1, 800973a <registry_find+0xe>
 8009734:	6819      	ldr	r1, [r3, #0]
 8009736:	4288      	cmp	r0, r1
 8009738:	d007      	beq.n	800974a <registry_find+0x1e>
 800973a:	68d8      	ldr	r0, [r3, #12]
 800973c:	b130      	cbz	r0, 800974c <registry_find+0x20>
 800973e:	689b      	ldr	r3, [r3, #8]
		struct registry_entry *ep = &registry[i];
 8009740:	4804      	ldr	r0, [pc, #16]	; (8009754 <registry_find+0x28>)
 8009742:	429a      	cmp	r2, r3
 8009744:	bf18      	it	ne
 8009746:	2000      	movne	r0, #0
 8009748:	4770      	bx	lr
 800974a:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	200020a8 	.word	0x200020a8
 8009754:	200020b0 	.word	0x200020b0

08009758 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8009758:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800975a:	ab0b      	add	r3, sp, #44	; 0x2c
 800975c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800975e:	9303      	str	r3, [sp, #12]
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <z_log_msg2_runtime_create.constprop.0+0x20>)
 8009762:	9302      	str	r3, [sp, #8]
 8009764:	2300      	movs	r3, #0
 8009766:	e9cd 3300 	strd	r3, r3, [sp]
 800976a:	2202      	movs	r2, #2
 800976c:	4618      	mov	r0, r3
 800976e:	f7fa f8e9 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8009772:	b007      	add	sp, #28
 8009774:	f85d fb04 	ldr.w	pc, [sp], #4
 8009778:	08018c50 	.word	0x08018c50

0800977c <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
 800977c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 800977e:	4804      	ldr	r0, [pc, #16]	; (8009790 <fs_init+0x14>)
 8009780:	f00c fbd8 	bl	8015f34 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
 8009784:	4b03      	ldr	r3, [pc, #12]	; (8009794 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
 8009786:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8009788:	e9c3 3300 	strd	r3, r3, [r3]
 800978c:	bd08      	pop	{r3, pc}
 800978e:	bf00      	nop
 8009790:	20002094 	.word	0x20002094
 8009794:	2000208c 	.word	0x2000208c

08009798 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800979c:	4801      	ldr	r0, [pc, #4]	; (80097a4 <k_mutex_lock.constprop.0.isra.0+0xc>)
 800979e:	f004 ba0f 	b.w	800dbc0 <z_impl_k_mutex_lock>
 80097a2:	bf00      	nop
 80097a4:	20002094 	.word	0x20002094

080097a8 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
 80097a8:	4801      	ldr	r0, [pc, #4]	; (80097b0 <k_mutex_unlock.constprop.0.isra.0+0x8>)
 80097aa:	f004 ba81 	b.w	800dcb0 <z_impl_k_mutex_unlock>
 80097ae:	bf00      	nop
 80097b0:	20002094 	.word	0x20002094

080097b4 <fs_get_mnt_point>:
{
 80097b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
 80097ba:	4608      	mov	r0, r1
{
 80097bc:	4688      	mov	r8, r1
 80097be:	4615      	mov	r5, r2
	size_t len, name_len = strlen(name);
 80097c0:	f7f7 fbb4 	bl	8000f2c <strlen>
	k_mutex_lock(&mutex, K_FOREVER);
 80097c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	size_t len, name_len = strlen(name);
 80097c8:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
 80097ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097ce:	f7ff ffe3 	bl	8009798 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
 80097d2:	4b1a      	ldr	r3, [pc, #104]	; (800983c <fs_get_mnt_point+0x88>)
 80097d4:	681c      	ldr	r4, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
 80097d6:	f04f 0900 	mov.w	r9, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80097da:	429c      	cmp	r4, r3
 80097dc:	bf08      	it	eq
 80097de:	2400      	moveq	r4, #0
	return (node == list->tail) ? NULL : node->next;
 80097e0:	464f      	mov	r7, r9
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 80097e2:	b954      	cbnz	r4, 80097fa <fs_get_mnt_point+0x46>
	k_mutex_unlock(&mutex);
 80097e4:	f7ff ffe0 	bl	80097a8 <k_mutex_unlock.constprop.0.isra.0>
	if (mnt_p == NULL) {
 80097e8:	b317      	cbz	r7, 8009830 <fs_get_mnt_point+0x7c>
	*mnt_pntp = mnt_p;
 80097ea:	f8ca 7000 	str.w	r7, [sl]
	if (match_len)
 80097ee:	b315      	cbz	r5, 8009836 <fs_get_mnt_point+0x82>
		*match_len = mnt_p->mountp_len;
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	602b      	str	r3, [r5, #0]
	return 0;
 80097f4:	2000      	movs	r0, #0
}
 80097f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
 80097fa:	69a6      	ldr	r6, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
 80097fc:	45b1      	cmp	r9, r6
 80097fe:	d812      	bhi.n	8009826 <fs_get_mnt_point+0x72>
 8009800:	45b3      	cmp	fp, r6
 8009802:	d310      	bcc.n	8009826 <fs_get_mnt_point+0x72>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
 8009804:	2e01      	cmp	r6, #1
 8009806:	d904      	bls.n	8009812 <fs_get_mnt_point+0x5e>
 8009808:	f818 2006 	ldrb.w	r2, [r8, r6]
 800980c:	2a2f      	cmp	r2, #47	; 0x2f
 800980e:	d000      	beq.n	8009812 <fs_get_mnt_point+0x5e>
 8009810:	b94a      	cbnz	r2, 8009826 <fs_get_mnt_point+0x72>
		if (strncmp(name, itr->mnt_point, len) == 0) {
 8009812:	68e1      	ldr	r1, [r4, #12]
 8009814:	4632      	mov	r2, r6
 8009816:	4640      	mov	r0, r8
 8009818:	f00c fee8 	bl	80165ec <strncmp>
 800981c:	4b07      	ldr	r3, [pc, #28]	; (800983c <fs_get_mnt_point+0x88>)
 800981e:	2800      	cmp	r0, #0
 8009820:	bf04      	itt	eq
 8009822:	46b1      	moveq	r9, r6
 8009824:	4627      	moveq	r7, r4
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	4294      	cmp	r4, r2
 800982a:	d0db      	beq.n	80097e4 <fs_get_mnt_point+0x30>
 800982c:	6824      	ldr	r4, [r4, #0]
 800982e:	e7d8      	b.n	80097e2 <fs_get_mnt_point+0x2e>
		return -ENOENT;
 8009830:	f06f 0001 	mvn.w	r0, #1
 8009834:	e7df      	b.n	80097f6 <fs_get_mnt_point+0x42>
	return 0;
 8009836:	4628      	mov	r0, r5
 8009838:	e7dd      	b.n	80097f6 <fs_get_mnt_point+0x42>
 800983a:	bf00      	nop
 800983c:	2000208c 	.word	0x2000208c

08009840 <fs_opendir>:
{
 8009840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009842:	4606      	mov	r6, r0
 8009844:	b089      	sub	sp, #36	; 0x24
	if ((abs_path == NULL) ||
 8009846:	460d      	mov	r5, r1
 8009848:	b971      	cbnz	r1, 8009868 <fs_opendir+0x28>
		LOG_ERR("invalid directory name!!");
 800984a:	4b30      	ldr	r3, [pc, #192]	; (800990c <fs_opendir+0xcc>)
 800984c:	9306      	str	r3, [sp, #24]
 800984e:	4830      	ldr	r0, [pc, #192]	; (8009910 <fs_opendir+0xd0>)
 8009850:	2302      	movs	r3, #2
 8009852:	aa05      	add	r2, sp, #20
 8009854:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 8009858:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("invalid directory name!!");
 800985c:	9305      	str	r3, [sp, #20]
 800985e:	f009 fb9f 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
}
 8009862:	4620      	mov	r0, r4
 8009864:	b009      	add	sp, #36	; 0x24
 8009866:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 8009868:	4608      	mov	r0, r1
 800986a:	f7f7 fb5f 	bl	8000f2c <strlen>
	if ((abs_path == NULL) ||
 800986e:	2800      	cmp	r0, #0
 8009870:	d0eb      	beq.n	800984a <fs_opendir+0xa>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 8009872:	782b      	ldrb	r3, [r5, #0]
 8009874:	2b2f      	cmp	r3, #47	; 0x2f
 8009876:	d1e8      	bne.n	800984a <fs_opendir+0xa>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
 8009878:	6873      	ldr	r3, [r6, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d140      	bne.n	8009900 <fs_opendir+0xc0>
 800987e:	6837      	ldr	r7, [r6, #0]
 8009880:	2f00      	cmp	r7, #0
 8009882:	d13d      	bne.n	8009900 <fs_opendir+0xc0>
	if (strcmp(abs_path, "/") == 0) {
 8009884:	4923      	ldr	r1, [pc, #140]	; (8009914 <fs_opendir+0xd4>)
 8009886:	4628      	mov	r0, r5
 8009888:	f7f7 fb46 	bl	8000f18 <strcmp>
 800988c:	4604      	mov	r4, r0
 800988e:	b980      	cbnz	r0, 80098b2 <fs_opendir+0x72>
		k_mutex_lock(&mutex, K_FOREVER);
 8009890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009898:	f7ff ff7e 	bl	8009798 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
 800989c:	4a1e      	ldr	r2, [pc, #120]	; (8009918 <fs_opendir+0xd8>)
		zdp->mp = NULL;
 800989e:	6074      	str	r4, [r6, #4]
 80098a0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80098a2:	4293      	cmp	r3, r2
 80098a4:	bf14      	ite	ne
 80098a6:	461f      	movne	r7, r3
 80098a8:	4627      	moveq	r7, r4
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
 80098aa:	6037      	str	r7, [r6, #0]
		k_mutex_unlock(&mutex);
 80098ac:	f7ff ff7c 	bl	80097a8 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
 80098b0:	e7d7      	b.n	8009862 <fs_opendir+0x22>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 80098b2:	463a      	mov	r2, r7
 80098b4:	4629      	mov	r1, r5
 80098b6:	a801      	add	r0, sp, #4
 80098b8:	f7ff ff7c 	bl	80097b4 <fs_get_mnt_point>
	if (rc < 0) {
 80098bc:	1e04      	subs	r4, r0, #0
 80098be:	da0a      	bge.n	80098d6 <fs_opendir+0x96>
		LOG_ERR("mount point not found!!");
 80098c0:	4b16      	ldr	r3, [pc, #88]	; (800991c <fs_opendir+0xdc>)
 80098c2:	9306      	str	r3, [sp, #24]
 80098c4:	2302      	movs	r3, #2
 80098c6:	9305      	str	r3, [sp, #20]
 80098c8:	aa05      	add	r2, sp, #20
 80098ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		LOG_ERR("directory open error (%d)", rc);
 80098ce:	4810      	ldr	r0, [pc, #64]	; (8009910 <fs_opendir+0xd0>)
 80098d0:	f009 fb66 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
 80098d4:	e7c5      	b.n	8009862 <fs_opendir+0x22>
	CHECKIF(mp->fs->opendir == NULL) {
 80098d6:	9901      	ldr	r1, [sp, #4]
 80098d8:	69cb      	ldr	r3, [r1, #28]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	b19b      	cbz	r3, 8009906 <fs_opendir+0xc6>
	zdp->mp = mp;
 80098de:	6071      	str	r1, [r6, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
 80098e0:	4630      	mov	r0, r6
 80098e2:	4629      	mov	r1, r5
 80098e4:	4798      	blx	r3
	if (rc < 0) {
 80098e6:	1e04      	subs	r4, r0, #0
 80098e8:	dabb      	bge.n	8009862 <fs_opendir+0x22>
		LOG_ERR("directory open error (%d)", rc);
 80098ea:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <fs_opendir+0xe0>)
 80098ec:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80098f0:	2303      	movs	r3, #3
		zdp->dirp = NULL;
 80098f2:	e9c6 7700 	strd	r7, r7, [r6]
		LOG_ERR("directory open error (%d)", rc);
 80098f6:	9305      	str	r3, [sp, #20]
 80098f8:	aa05      	add	r2, sp, #20
 80098fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80098fe:	e7e6      	b.n	80098ce <fs_opendir+0x8e>
		return -EBUSY;
 8009900:	f06f 040f 	mvn.w	r4, #15
 8009904:	e7ad      	b.n	8009862 <fs_opendir+0x22>
		return -ENOTSUP;
 8009906:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800990a:	e7aa      	b.n	8009862 <fs_opendir+0x22>
 800990c:	08018cb2 	.word	0x08018cb2
 8009910:	08016ed0 	.word	0x08016ed0
 8009914:	08018ccb 	.word	0x08018ccb
 8009918:	2000208c 	.word	0x2000208c
 800991c:	08018c85 	.word	0x08018c85
 8009920:	08018ccd 	.word	0x08018ccd

08009924 <fs_readdir>:
{
 8009924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (zdp->mp) {
 8009928:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 800992c:	b087      	sub	sp, #28
 800992e:	4606      	mov	r6, r0
 8009930:	460f      	mov	r7, r1
	if (zdp->mp) {
 8009932:	f1b8 0f00 	cmp.w	r8, #0
 8009936:	d024      	beq.n	8009982 <fs_readdir+0x5e>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
 8009938:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993e:	2b00      	cmp	r3, #0
 8009940:	d056      	beq.n	80099f0 <fs_readdir+0xcc>
			if ((strcmp(entry->name, ".") != 0)
 8009942:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a14 <fs_readdir+0xf0>
 8009946:	1c4d      	adds	r5, r1, #1
			rc = zdp->mp->fs->readdir(zdp, entry);
 8009948:	6873      	ldr	r3, [r6, #4]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	4639      	mov	r1, r7
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	4630      	mov	r0, r6
 8009952:	4798      	blx	r3
			if (rc < 0) {
 8009954:	1e04      	subs	r4, r0, #0
 8009956:	db51      	blt.n	80099fc <fs_readdir+0xd8>
			if (entry->name[0] == 0) {
 8009958:	787b      	ldrb	r3, [r7, #1]
 800995a:	b173      	cbz	r3, 800997a <fs_readdir+0x56>
			if (entry->type != FS_DIR_ENTRY_DIR) {
 800995c:	783b      	ldrb	r3, [r7, #0]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d10b      	bne.n	800997a <fs_readdir+0x56>
			if ((strcmp(entry->name, ".") != 0)
 8009962:	4641      	mov	r1, r8
 8009964:	4628      	mov	r0, r5
 8009966:	f7f7 fad7 	bl	8000f18 <strcmp>
 800996a:	2800      	cmp	r0, #0
 800996c:	d0ec      	beq.n	8009948 <fs_readdir+0x24>
			    && (strcmp(entry->name, "..") != 0)) {
 800996e:	492a      	ldr	r1, [pc, #168]	; (8009a18 <fs_readdir+0xf4>)
 8009970:	4628      	mov	r0, r5
 8009972:	f7f7 fad1 	bl	8000f18 <strcmp>
 8009976:	2800      	cmp	r0, #0
 8009978:	d0e6      	beq.n	8009948 <fs_readdir+0x24>
}
 800997a:	4620      	mov	r0, r4
 800997c:	b007      	add	sp, #28
 800997e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (zdp->dirp == NULL) {
 8009982:	6804      	ldr	r4, [r0, #0]
 8009984:	b90c      	cbnz	r4, 800998a <fs_readdir+0x66>
		entry->name[0] = 0;
 8009986:	704c      	strb	r4, [r1, #1]
		return 0;
 8009988:	e7f7      	b.n	800997a <fs_readdir+0x56>
	return list->head == list;
 800998a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009a1c <fs_readdir+0xf8>
	k_mutex_lock(&mutex, K_FOREVER);
 800998e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009992:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009996:	f7ff feff 	bl	8009798 <k_mutex_lock.constprop.0.isra.0>
 800999a:	f8d9 5000 	ldr.w	r5, [r9]
	return (node == list->tail) ? NULL : node->next;
 800999e:	f8d9 3004 	ldr.w	r3, [r9, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80099a2:	454d      	cmp	r5, r9
 80099a4:	bf08      	it	eq
 80099a6:	2500      	moveq	r5, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 80099a8:	b915      	cbnz	r5, 80099b0 <fs_readdir+0x8c>
	sys_dnode_t *node, *next = NULL;
 80099aa:	46a8      	mov	r8, r5
	bool found = false;
 80099ac:	2400      	movs	r4, #0
 80099ae:	e014      	b.n	80099da <fs_readdir+0xb6>
		if (node == zdp->dirp) {
 80099b0:	6832      	ldr	r2, [r6, #0]
 80099b2:	4295      	cmp	r5, r2
 80099b4:	d118      	bne.n	80099e8 <fs_readdir+0xc4>
			entry->type = FS_DIR_ENTRY_DIR;
 80099b6:	4638      	mov	r0, r7
 80099b8:	2401      	movs	r4, #1
 80099ba:	f800 4b01 	strb.w	r4, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
 80099be:	68e9      	ldr	r1, [r5, #12]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80099c0:	220c      	movs	r2, #12
 80099c2:	4421      	add	r1, r4
 80099c4:	f00c fe26 	bl	8016614 <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	737b      	strb	r3, [r7, #13]
			entry->size = 0;
 80099cc:	613b      	str	r3, [r7, #16]
	return (node == list->tail) ? NULL : node->next;
 80099ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80099d2:	429d      	cmp	r5, r3
 80099d4:	d001      	beq.n	80099da <fs_readdir+0xb6>
 80099d6:	f8d5 8000 	ldr.w	r8, [r5]
	k_mutex_unlock(&mutex);
 80099da:	f7ff fee5 	bl	80097a8 <k_mutex_unlock.constprop.0.isra.0>
	if (!found) {
 80099de:	b154      	cbz	r4, 80099f6 <fs_readdir+0xd2>
	zdp->dirp = next;
 80099e0:	f8c6 8000 	str.w	r8, [r6]
	return 0;
 80099e4:	2400      	movs	r4, #0
 80099e6:	e7c8      	b.n	800997a <fs_readdir+0x56>
 80099e8:	429d      	cmp	r5, r3
 80099ea:	d0df      	beq.n	80099ac <fs_readdir+0x88>
 80099ec:	682d      	ldr	r5, [r5, #0]
 80099ee:	e7db      	b.n	80099a8 <fs_readdir+0x84>
			return  -ENOTSUP;
 80099f0:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80099f4:	e7c1      	b.n	800997a <fs_readdir+0x56>
		return -ENOENT;
 80099f6:	f06f 0401 	mvn.w	r4, #1
 80099fa:	e7be      	b.n	800997a <fs_readdir+0x56>
			LOG_ERR("directory read error (%d)", rc);
 80099fc:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <fs_readdir+0xfc>)
 80099fe:	4809      	ldr	r0, [pc, #36]	; (8009a24 <fs_readdir+0x100>)
 8009a00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a04:	aa03      	add	r2, sp, #12
 8009a06:	2303      	movs	r3, #3
 8009a08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8009a0c:	9303      	str	r3, [sp, #12]
 8009a0e:	f009 fac7 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
 8009a12:	e7b2      	b.n	800997a <fs_readdir+0x56>
 8009a14:	08019372 	.word	0x08019372
 8009a18:	080179e5 	.word	0x080179e5
 8009a1c:	2000208c 	.word	0x2000208c
 8009a20:	08018ce7 	.word	0x08018ce7
 8009a24:	08016ed0 	.word	0x08016ed0

08009a28 <fs_closedir>:
{
 8009a28:	b530      	push	{r4, r5, lr}
	if (zdp->mp == NULL) {
 8009a2a:	6844      	ldr	r4, [r0, #4]
{
 8009a2c:	b087      	sub	sp, #28
 8009a2e:	4605      	mov	r5, r0
	if (zdp->mp == NULL) {
 8009a30:	b91c      	cbnz	r4, 8009a3a <fs_closedir+0x12>
		zdp->dirp = NULL;
 8009a32:	6004      	str	r4, [r0, #0]
}
 8009a34:	4620      	mov	r0, r4
 8009a36:	b007      	add	sp, #28
 8009a38:	bd30      	pop	{r4, r5, pc}
	CHECKIF(zdp->mp->fs->closedir == NULL) {
 8009a3a:	69e3      	ldr	r3, [r4, #28]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3e:	b193      	cbz	r3, 8009a66 <fs_closedir+0x3e>
	rc = zdp->mp->fs->closedir(zdp);
 8009a40:	4798      	blx	r3
	if (rc < 0) {
 8009a42:	1e04      	subs	r4, r0, #0
 8009a44:	da0b      	bge.n	8009a5e <fs_closedir+0x36>
		LOG_ERR("directory close error (%d)", rc);
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <fs_closedir+0x44>)
 8009a48:	4809      	ldr	r0, [pc, #36]	; (8009a70 <fs_closedir+0x48>)
 8009a4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a4e:	aa03      	add	r2, sp, #12
 8009a50:	2303      	movs	r3, #3
 8009a52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8009a56:	9303      	str	r3, [sp, #12]
 8009a58:	f009 faa2 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
		return rc;
 8009a5c:	e7ea      	b.n	8009a34 <fs_closedir+0xc>
	zdp->mp = NULL;
 8009a5e:	2300      	movs	r3, #0
	zdp->dirp = NULL;
 8009a60:	e9c5 3300 	strd	r3, r3, [r5]
	return rc;
 8009a64:	e7e6      	b.n	8009a34 <fs_closedir+0xc>
		return -ENOTSUP;
 8009a66:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8009a6a:	e7e3      	b.n	8009a34 <fs_closedir+0xc>
 8009a6c:	08018d01 	.word	0x08018d01
 8009a70:	08016ed0 	.word	0x08016ed0

08009a74 <fs_mount>:
{
 8009a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
 8009a78:	4604      	mov	r4, r0
{
 8009a7a:	b08a      	sub	sp, #40	; 0x28
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
 8009a7c:	b108      	cbz	r0, 8009a82 <fs_mount+0xe>
 8009a7e:	68c0      	ldr	r0, [r0, #12]
 8009a80:	b978      	cbnz	r0, 8009aa2 <fs_mount+0x2e>
		LOG_ERR("mount point not initialized!!");
 8009a82:	4b4a      	ldr	r3, [pc, #296]	; (8009bac <fs_mount+0x138>)
		LOG_ERR("invalid mount point!!");
 8009a84:	9308      	str	r3, [sp, #32]
 8009a86:	484a      	ldr	r0, [pc, #296]	; (8009bb0 <fs_mount+0x13c>)
 8009a88:	2302      	movs	r3, #2
 8009a8a:	aa07      	add	r2, sp, #28
 8009a8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
 8009a90:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("invalid mount point!!");
 8009a94:	9307      	str	r3, [sp, #28]
 8009a96:	f009 fa83 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
}
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	b00a      	add	sp, #40	; 0x28
 8009a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = strlen(mp->mnt_point);
 8009aa2:	f7f7 fa43 	bl	8000f2c <strlen>
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 8009aa6:	2801      	cmp	r0, #1
	len = strlen(mp->mnt_point);
 8009aa8:	4607      	mov	r7, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 8009aaa:	d903      	bls.n	8009ab4 <fs_mount+0x40>
 8009aac:	68e3      	ldr	r3, [r4, #12]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8009ab2:	d001      	beq.n	8009ab8 <fs_mount+0x44>
		LOG_ERR("invalid mount point!!");
 8009ab4:	4b3f      	ldr	r3, [pc, #252]	; (8009bb4 <fs_mount+0x140>)
 8009ab6:	e7e5      	b.n	8009a84 <fs_mount+0x10>
	return list->head == list;
 8009ab8:	4e3f      	ldr	r6, [pc, #252]	; (8009bb8 <fs_mount+0x144>)
	k_mutex_lock(&mutex, K_FOREVER);
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009abe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009ac2:	f7ff fe69 	bl	8009798 <k_mutex_lock.constprop.0.isra.0>
 8009ac6:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009ac8:	42b5      	cmp	r5, r6
 8009aca:	d115      	bne.n	8009af8 <fs_mount+0x84>
	fs = fs_type_get(mp->type);
 8009acc:	68a5      	ldr	r5, [r4, #8]
	struct registry_entry *ep = registry_find(type);
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f7ff fe2c 	bl	800972c <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 8009ad4:	bb58      	cbnz	r0, 8009b2e <fs_mount+0xba>
		LOG_ERR("requested file system type not registered!!");
 8009ad6:	4b39      	ldr	r3, [pc, #228]	; (8009bbc <fs_mount+0x148>)
 8009ad8:	9308      	str	r3, [sp, #32]
 8009ada:	4835      	ldr	r0, [pc, #212]	; (8009bb0 <fs_mount+0x13c>)
 8009adc:	2302      	movs	r3, #2
 8009ade:	aa07      	add	r2, sp, #28
 8009ae0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8009ae4:	9307      	str	r3, [sp, #28]
		rc = -ENOENT;
 8009ae6:	f06f 0501 	mvn.w	r5, #1
		LOG_ERR("requested file system type not registered!!");
 8009aea:	f009 fa59 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 8009aee:	e01b      	b.n	8009b28 <fs_mount+0xb4>
	return (node == list->tail) ? NULL : node->next;
 8009af0:	6873      	ldr	r3, [r6, #4]
 8009af2:	429d      	cmp	r5, r3
 8009af4:	d0ea      	beq.n	8009acc <fs_mount+0x58>
 8009af6:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 8009af8:	2d00      	cmp	r5, #0
 8009afa:	d0e7      	beq.n	8009acc <fs_mount+0x58>
		if (len != itr->mountp_len) {
 8009afc:	69ab      	ldr	r3, [r5, #24]
 8009afe:	42bb      	cmp	r3, r7
 8009b00:	d1f6      	bne.n	8009af0 <fs_mount+0x7c>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
 8009b02:	68e9      	ldr	r1, [r5, #12]
 8009b04:	68e0      	ldr	r0, [r4, #12]
 8009b06:	463a      	mov	r2, r7
 8009b08:	f00c fd70 	bl	80165ec <strncmp>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d1ef      	bne.n	8009af0 <fs_mount+0x7c>
			LOG_ERR("mount point already exists!!");
 8009b10:	4b2b      	ldr	r3, [pc, #172]	; (8009bc0 <fs_mount+0x14c>)
 8009b12:	9308      	str	r3, [sp, #32]
 8009b14:	4826      	ldr	r0, [pc, #152]	; (8009bb0 <fs_mount+0x13c>)
 8009b16:	2302      	movs	r3, #2
 8009b18:	aa07      	add	r2, sp, #28
 8009b1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			rc = -EBUSY;
 8009b1e:	f06f 050f 	mvn.w	r5, #15
			LOG_ERR("mount point already exists!!");
 8009b22:	9307      	str	r3, [sp, #28]
 8009b24:	f009 fa3c 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&mutex);
 8009b28:	f7ff fe3e 	bl	80097a8 <k_mutex_unlock.constprop.0.isra.0>
	return rc;
 8009b2c:	e7b5      	b.n	8009a9a <fs_mount+0x26>
	return (ep != NULL) ? ep->fstp : NULL;
 8009b2e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (fs == NULL) {
 8009b32:	f1b8 0f00 	cmp.w	r8, #0
 8009b36:	d0ce      	beq.n	8009ad6 <fs_mount+0x62>
	CHECKIF(fs->mount == NULL) {
 8009b38:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8009b3c:	b96b      	cbnz	r3, 8009b5a <fs_mount+0xe6>
		LOG_ERR("fs type %d does not support mounting", mp->type);
 8009b3e:	4b21      	ldr	r3, [pc, #132]	; (8009bc4 <fs_mount+0x150>)
 8009b40:	481b      	ldr	r0, [pc, #108]	; (8009bb0 <fs_mount+0x13c>)
 8009b42:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8009b46:	aa07      	add	r2, sp, #28
 8009b48:	2303      	movs	r3, #3
 8009b4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8009b4e:	9307      	str	r3, [sp, #28]
		rc = -ENOTSUP;
 8009b50:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("fs type %d does not support mounting", mp->type);
 8009b54:	f009 fa24 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 8009b58:	e7e6      	b.n	8009b28 <fs_mount+0xb4>
	if (fs->unmount == NULL) {
 8009b5a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8009b5e:	b953      	cbnz	r3, 8009b76 <fs_mount+0x102>
		LOG_WRN("mount path %s is not unmountable",
 8009b60:	68e2      	ldr	r2, [r4, #12]
 8009b62:	9203      	str	r2, [sp, #12]
 8009b64:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <fs_mount+0x154>)
 8009b66:	4912      	ldr	r1, [pc, #72]	; (8009bb0 <fs_mount+0x13c>)
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	2202      	movs	r2, #2
 8009b72:	f7ff fdf1 	bl	8009758 <z_log_msg2_runtime_create.constprop.0>
	rc = fs->mount(mp);
 8009b76:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	4798      	blx	r3
	if (rc < 0) {
 8009b7e:	1e05      	subs	r5, r0, #0
 8009b80:	da0b      	bge.n	8009b9a <fs_mount+0x126>
		LOG_ERR("fs mount error (%d)", rc);
 8009b82:	4b12      	ldr	r3, [pc, #72]	; (8009bcc <fs_mount+0x158>)
 8009b84:	480a      	ldr	r0, [pc, #40]	; (8009bb0 <fs_mount+0x13c>)
 8009b86:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8009b8a:	aa07      	add	r2, sp, #28
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8009b92:	9307      	str	r3, [sp, #28]
 8009b94:	f009 fa04 	bl	8012fa0 <z_log_msg2_static_create.constprop.0>
		goto mount_err;
 8009b98:	e7c6      	b.n	8009b28 <fs_mount+0xb4>
	sys_dnode_t *const tail = list->tail;
 8009b9a:	6873      	ldr	r3, [r6, #4]
	mp->fs = fs;
 8009b9c:	e9c4 7806 	strd	r7, r8, [r4, #24]
	node->prev = tail;
 8009ba0:	e9c4 6300 	strd	r6, r3, [r4]
	tail->next = node;
 8009ba4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009ba6:	6074      	str	r4, [r6, #4]
	LOG_DBG("fs mounted at %s", log_strdup(mp->mnt_point));
 8009ba8:	e7be      	b.n	8009b28 <fs_mount+0xb4>
 8009baa:	bf00      	nop
 8009bac:	08018d1c 	.word	0x08018d1c
 8009bb0:	08016ed0 	.word	0x08016ed0
 8009bb4:	08018d3a 	.word	0x08018d3a
 8009bb8:	2000208c 	.word	0x2000208c
 8009bbc:	08018d6d 	.word	0x08018d6d
 8009bc0:	08018d50 	.word	0x08018d50
 8009bc4:	08018d99 	.word	0x08018d99
 8009bc8:	08018c50 	.word	0x08018c50
 8009bcc:	08018dbe 	.word	0x08018dbe

08009bd0 <fs_register>:
{
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
 8009bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009bde:	f7ff fddb 	bl	8009798 <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
 8009be2:	4620      	mov	r0, r4
 8009be4:	f7ff fda2 	bl	800972c <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 8009be8:	b108      	cbz	r0, 8009bee <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
 8009bea:	6843      	ldr	r3, [r0, #4]
 8009bec:	b97b      	cbnz	r3, 8009c0e <fs_register+0x3e>
		if (ep->fstp == NULL) {
 8009bee:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <fs_register+0x4c>)
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	b112      	cbz	r2, 8009bfa <fs_register+0x2a>
 8009bf4:	68da      	ldr	r2, [r3, #12]
 8009bf6:	b96a      	cbnz	r2, 8009c14 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
 8009bf8:	2201      	movs	r2, #1
			ep->type = type;
 8009bfa:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			ep->fstp = fstp;
 8009bfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			rv = 0;
 8009c02:	2400      	movs	r4, #0
			ep->fstp = fstp;
 8009c04:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
 8009c06:	f7ff fdcf 	bl	80097a8 <k_mutex_unlock.constprop.0.isra.0>
}
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
 8009c0e:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8009c12:	e7f8      	b.n	8009c06 <fs_register+0x36>
	int rv = -ENOSPC;
 8009c14:	f06f 041b 	mvn.w	r4, #27
 8009c18:	e7f5      	b.n	8009c06 <fs_register+0x36>
 8009c1a:	bf00      	nop
 8009c1c:	200020a8 	.word	0x200020a8

08009c20 <translate_error>:
K_MEM_SLAB_DEFINE(fatfs_filep_pool, sizeof(FIL),
			CONFIG_FS_FATFS_NUM_FILES, 4);

static int translate_error(int error)
{
	switch (error) {
 8009c20:	2813      	cmp	r0, #19
 8009c22:	bf9a      	itte	ls
 8009c24:	4b02      	ldrls	r3, [pc, #8]	; (8009c30 <translate_error+0x10>)
 8009c26:	5618      	ldrsbls	r0, [r3, r0]
{
 8009c28:	f06f 0004 	mvnhi.w	r0, #4
	case FR_NOT_READY:
		return -EIO;
	}

	return -EIO;
}
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	08018dd5 	.word	0x08018dd5

08009c34 <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
 8009c34:	4901      	ldr	r1, [pc, #4]	; (8009c3c <fatfs_init+0x8>)
 8009c36:	2000      	movs	r0, #0
 8009c38:	f7ff bfca 	b.w	8009bd0 <fs_register>
 8009c3c:	080173ac 	.word	0x080173ac

08009c40 <fatfs_mount>:
{
 8009c40:	b530      	push	{r4, r5, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 8009c42:	68c1      	ldr	r1, [r0, #12]
 8009c44:	2201      	movs	r2, #1
{
 8009c46:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8009c4a:	4604      	mov	r4, r0
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 8009c4c:	4411      	add	r1, r2
 8009c4e:	6900      	ldr	r0, [r0, #16]
 8009c50:	f002 ffe6 	bl	800cc20 <f_mount>
	if (res == FR_NO_FILESYSTEM &&
 8009c54:	280d      	cmp	r0, #13
 8009c56:	d119      	bne.n	8009c8c <fatfs_mount+0x4c>
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
 8009c58:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
 8009c5c:	079a      	lsls	r2, r3, #30
 8009c5e:	d422      	bmi.n	8009ca6 <fatfs_mount+0x66>
	if (res == FR_NO_FILESYSTEM &&
 8009c60:	07db      	lsls	r3, r3, #31
 8009c62:	d41a      	bmi.n	8009c9a <fatfs_mount+0x5a>
		MKFS_PARM mkfs_opt = {
 8009c64:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <fatfs_mount+0x70>)
 8009c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009c68:	466d      	mov	r5, sp
 8009c6a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(&mountp->mnt_point[1], &mkfs_opt, work, sizeof(work));
 8009c6e:	68e0      	ldr	r0, [r4, #12]
 8009c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c74:	aa04      	add	r2, sp, #16
 8009c76:	4629      	mov	r1, r5
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f002 fff5 	bl	800cc68 <f_mkfs>
		if (res == FR_OK) {
 8009c7e:	b960      	cbnz	r0, 8009c9a <fatfs_mount+0x5a>
					&mountp->mnt_point[1], 1);
 8009c80:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
 8009c82:	6920      	ldr	r0, [r4, #16]
 8009c84:	2201      	movs	r2, #1
 8009c86:	4411      	add	r1, r2
 8009c88:	f002 ffca 	bl	800cc20 <f_mount>
	if (res == FR_OK) {
 8009c8c:	b928      	cbnz	r0, 8009c9a <fatfs_mount+0x5a>
		mountp->flags |= FS_MOUNT_FLAG_USE_DISK_ACCESS;
 8009c8e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009c92:	f043 0308 	orr.w	r3, r3, #8
 8009c96:	f884 3020 	strb.w	r3, [r4, #32]
}
 8009c9a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8009c9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 8009ca2:	f7ff bfbd 	b.w	8009c20 <translate_error>
}
 8009ca6:	f06f 001d 	mvn.w	r0, #29
 8009caa:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8009cae:	bd30      	pop	{r4, r5, pc}
 8009cb0:	08017034 	.word	0x08017034

08009cb4 <fatfs_closedir>:
{
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4604      	mov	r4, r0
	res = f_closedir(zdp->dirp);
 8009cb8:	6800      	ldr	r0, [r0, #0]
 8009cba:	f00b fd5d 	bl	8015778 <f_closedir>
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 8009cbe:	4621      	mov	r1, r4
	res = f_closedir(zdp->dirp);
 8009cc0:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 8009cc2:	4804      	ldr	r0, [pc, #16]	; (8009cd4 <fatfs_closedir+0x20>)
 8009cc4:	f00c f8ec 	bl	8015ea0 <k_mem_slab_free>
	return translate_error(res);
 8009cc8:	4628      	mov	r0, r5
}
 8009cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
 8009cce:	f7ff bfa7 	b.w	8009c20 <translate_error>
 8009cd2:	bf00      	nop
 8009cd4:	20000348 	.word	0x20000348

08009cd8 <fatfs_close>:
{
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
 8009cdc:	6800      	ldr	r0, [r0, #0]
 8009cde:	f00b fc88 	bl	80155f2 <f_close>
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 8009ce2:	4621      	mov	r1, r4
	res = f_close(zfp->filep);
 8009ce4:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 8009ce6:	4805      	ldr	r0, [pc, #20]	; (8009cfc <fatfs_close+0x24>)
 8009ce8:	f00c f8da 	bl	8015ea0 <k_mem_slab_free>
	zfp->filep = NULL;
 8009cec:	2300      	movs	r3, #0
 8009cee:	6023      	str	r3, [r4, #0]
	return translate_error(res);
 8009cf0:	4628      	mov	r0, r5
}
 8009cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
 8009cf6:	f7ff bf93 	b.w	8009c20 <translate_error>
 8009cfa:	bf00      	nop
 8009cfc:	20000364 	.word	0x20000364

08009d00 <fatfs_opendir>:
{
 8009d00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 8009d02:	2200      	movs	r2, #0
{
 8009d04:	4606      	mov	r6, r0
 8009d06:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 8009d08:	4810      	ldr	r0, [pc, #64]	; (8009d4c <fatfs_opendir+0x4c>)
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	a901      	add	r1, sp, #4
 8009d0e:	f003 fe7f 	bl	800da10 <k_mem_slab_alloc>
 8009d12:	4604      	mov	r4, r0
 8009d14:	b9b0      	cbnz	r0, 8009d44 <fatfs_opendir+0x44>
__ssp_bos_icheck3(memset, void *, int)
 8009d16:	4601      	mov	r1, r0
 8009d18:	222c      	movs	r2, #44	; 0x2c
 8009d1a:	9801      	ldr	r0, [sp, #4]
 8009d1c:	f00c fc47 	bl	80165ae <memset>
		zdp->dirp = ptr;
 8009d20:	9801      	ldr	r0, [sp, #4]
 8009d22:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
 8009d24:	1c69      	adds	r1, r5, #1
 8009d26:	f00b fcf4 	bl	8015712 <f_opendir>
	if (res != FR_OK) {
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	b120      	cbz	r0, 8009d38 <fatfs_opendir+0x38>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
 8009d2e:	4807      	ldr	r0, [pc, #28]	; (8009d4c <fatfs_opendir+0x4c>)
 8009d30:	a901      	add	r1, sp, #4
 8009d32:	f00c f8b5 	bl	8015ea0 <k_mem_slab_free>
		zdp->dirp = NULL;
 8009d36:	6034      	str	r4, [r6, #0]
	return translate_error(res);
 8009d38:	4628      	mov	r0, r5
}
 8009d3a:	b002      	add	sp, #8
 8009d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return translate_error(res);
 8009d40:	f7ff bf6e 	b.w	8009c20 <translate_error>
}
 8009d44:	f06f 000b 	mvn.w	r0, #11
 8009d48:	b002      	add	sp, #8
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	20000348 	.word	0x20000348

08009d50 <fatfs_open>:
{
 8009d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 8009d52:	2300      	movs	r3, #0
{
 8009d54:	4606      	mov	r6, r0
 8009d56:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 8009d58:	4812      	ldr	r0, [pc, #72]	; (8009da4 <fatfs_open+0x54>)
{
 8009d5a:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 8009d5c:	a901      	add	r1, sp, #4
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f003 fe56 	bl	800da10 <k_mem_slab_alloc>
 8009d64:	4604      	mov	r4, r0
 8009d66:	b9c0      	cbnz	r0, 8009d9a <fatfs_open+0x4a>
 8009d68:	4601      	mov	r1, r0
 8009d6a:	2228      	movs	r2, #40	; 0x28
 8009d6c:	9801      	ldr	r0, [sp, #4]
 8009d6e:	f00c fc1e 	bl	80165ae <memset>
		zfp->filep = ptr;
 8009d72:	9801      	ldr	r0, [sp, #4]
 8009d74:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
 8009d76:	1c69      	adds	r1, r5, #1
 8009d78:	f007 0213 	and.w	r2, r7, #19
 8009d7c:	f00b f9db 	bl	8015136 <f_open>
	if (res != FR_OK) {
 8009d80:	4605      	mov	r5, r0
 8009d82:	b120      	cbz	r0, 8009d8e <fatfs_open+0x3e>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
 8009d84:	4807      	ldr	r0, [pc, #28]	; (8009da4 <fatfs_open+0x54>)
 8009d86:	a901      	add	r1, sp, #4
 8009d88:	f00c f88a 	bl	8015ea0 <k_mem_slab_free>
		zfp->filep = NULL;
 8009d8c:	6034      	str	r4, [r6, #0]
	return translate_error(res);
 8009d8e:	4628      	mov	r0, r5
}
 8009d90:	b003      	add	sp, #12
 8009d92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return translate_error(res);
 8009d96:	f7ff bf43 	b.w	8009c20 <translate_error>
}
 8009d9a:	f06f 000b 	mvn.w	r0, #11
 8009d9e:	b003      	add	sp, #12
 8009da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000364 	.word	0x20000364

08009da8 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8009da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  *         @arg @ref LL_EXTI_LINE_22
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8009dac:	4f0d      	ldr	r7, [pc, #52]	; (8009de4 <__stm32_exti_isr.isra.0+0x3c>)
 8009dae:	4604      	mov	r4, r0
 8009db0:	460e      	mov	r6, r1
 8009db2:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8009db4:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8009db8:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8009dbc:	42b4      	cmp	r4, r6
 8009dbe:	db01      	blt.n	8009dc4 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8009dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc4:	68fa      	ldr	r2, [r7, #12]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8009dc6:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8009dca:	ea33 0202 	bics.w	r2, r3, r2
 8009dce:	d107      	bne.n	8009de0 <__stm32_exti_isr.isra.0+0x38>
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009dd0:	60fb      	str	r3, [r7, #12]
			if (!data->cb[line].cb) {
 8009dd2:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8009dd6:	b11b      	cbz	r3, 8009de0 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8009dd8:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8009de0:	3401      	adds	r4, #1
 8009de2:	e7eb      	b.n	8009dbc <__stm32_exti_isr.isra.0+0x14>
 8009de4:	58000800 	.word	0x58000800

08009de8 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009de8:	4a05      	ldr	r2, [pc, #20]	; (8009e00 <stm32_exti_enable+0x18>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8009dea:	2301      	movs	r3, #1
 8009dec:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8009df0:	4083      	lsls	r3, r0
 8009df2:	430b      	orrs	r3, r1
 8009df4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	irq_enable(irqnum);
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <stm32_exti_enable+0x1c>)
 8009dfa:	5618      	ldrsb	r0, [r3, r0]
 8009dfc:	f7f9 bf1a 	b.w	8003c34 <arch_irq_enable>
 8009e00:	58000800 	.word	0x58000800
 8009e04:	08018e07 	.word	0x08018e07

08009e08 <stm32_exti_disable>:
	if (line < 32) {
 8009e08:	281f      	cmp	r0, #31
 8009e0a:	dc09      	bgt.n	8009e20 <stm32_exti_disable+0x18>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009e0c:	4905      	ldr	r1, [pc, #20]	; (8009e24 <stm32_exti_disable+0x1c>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8009e14:	fa02 f000 	lsl.w	r0, r2, r0
 8009e18:	ea23 0000 	bic.w	r0, r3, r0
 8009e1c:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
}
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	58000800 	.word	0x58000800

08009e28 <stm32_exti_trigger>:
	switch (trigger) {
 8009e28:	2903      	cmp	r1, #3
 8009e2a:	d80f      	bhi.n	8009e4c <stm32_exti_trigger+0x24>
 8009e2c:	e8df f001 	tbb	[pc, r1]
 8009e30:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009e34:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8009e36:	2201      	movs	r2, #1
 8009e38:	6819      	ldr	r1, [r3, #0]
 8009e3a:	fa02 f000 	lsl.w	r0, r2, r0
 8009e3e:	ea21 0100 	bic.w	r1, r1, r0
 8009e42:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009e4a:	6058      	str	r0, [r3, #4]
}
 8009e4c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8009e4e:	2301      	movs	r3, #1
 8009e50:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009e54:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <stm32_exti_trigger+0x64>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	4302      	orrs	r2, r0
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	e7f2      	b.n	8009e44 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8009e5e:	2301      	movs	r3, #1
 8009e60:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009e64:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <stm32_exti_trigger+0x64>)
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	4302      	orrs	r2, r0
 8009e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	ea22 0000 	bic.w	r0, r2, r0
 8009e72:	6018      	str	r0, [r3, #0]
}
 8009e74:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8009e76:	2301      	movs	r3, #1
 8009e78:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009e7c:	4b03      	ldr	r3, [pc, #12]	; (8009e8c <stm32_exti_trigger+0x64>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	4302      	orrs	r2, r0
 8009e82:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	4310      	orrs	r0, r2
 8009e88:	e7df      	b.n	8009e4a <stm32_exti_trigger+0x22>
 8009e8a:	bf00      	nop
 8009e8c:	58000800 	.word	0x58000800

08009e90 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8009e90:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <stm32_exti_set_callback+0x20>)
{
 8009e92:	b510      	push	{r4, lr}
 8009e94:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8009e96:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8009e9a:	b928      	cbnz	r0, 8009ea8 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8009e9c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8009ea0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ea4:	605a      	str	r2, [r3, #4]

	return 0;
}
 8009ea6:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8009ea8:	f06f 000f 	mvn.w	r0, #15
 8009eac:	e7fb      	b.n	8009ea6 <stm32_exti_set_callback+0x16>
 8009eae:	bf00      	nop
 8009eb0:	200020b8 	.word	0x200020b8

08009eb4 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8009eb4:	4b03      	ldr	r3, [pc, #12]	; (8009ec4 <stm32_exti_unset_callback+0x10>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8009ebc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009ec0:	605a      	str	r2, [r3, #4]
}
 8009ec2:	4770      	bx	lr
 8009ec4:	200020b8 	.word	0x200020b8

08009ec8 <disk_spi_sdhc_access_ioctl>:
	return err;
}

static int disk_spi_sdhc_access_ioctl(struct disk_info *disk,
	uint8_t cmd, void *buf)
{
 8009ec8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = disk->dev;
	struct sdhc_spi_data *data = dev->data;
 8009eca:	6903      	ldr	r3, [r0, #16]
}

/* Converts disk status into an error code */
static inline int sdhc_map_disk_status(int status)
{
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 8009ecc:	480c      	ldr	r0, [pc, #48]	; (8009f00 <disk_spi_sdhc_access_ioctl+0x38>)
 8009ece:	691e      	ldr	r6, [r3, #16]
{
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	7c31      	ldrb	r1, [r6, #16]
 8009ed4:	4615      	mov	r5, r2
 8009ed6:	f009 f9c9 	bl	801326c <sdhc_map_flags>
	int err;

	err = sdhc_map_disk_status(data->status);
	if (err != 0) {
 8009eda:	b948      	cbnz	r0, 8009ef0 <disk_spi_sdhc_access_ioctl+0x28>
		return err;
	}

	switch (cmd) {
 8009edc:	1e61      	subs	r1, r4, #1
 8009ede:	2904      	cmp	r1, #4
 8009ee0:	d80a      	bhi.n	8009ef8 <disk_spi_sdhc_access_ioctl+0x30>
 8009ee2:	e8df f001 	tbb	[pc, r1]
 8009ee6:	0603      	.short	0x0603
 8009ee8:	0609      	.short	0x0609
 8009eea:	05          	.byte	0x05
 8009eeb:	00          	.byte	0x00
	case DISK_IOCTL_CTRL_SYNC:
		break;
	case DISK_IOCTL_GET_SECTOR_COUNT:
		*(uint32_t *)buf = data->sector_count;
 8009eec:	68f3      	ldr	r3, [r6, #12]
		break;
	case DISK_IOCTL_GET_SECTOR_SIZE:
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
 8009eee:	602b      	str	r3, [r5, #0]
	default:
		return -EINVAL;
	}

	return 0;
}
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
 8009ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ef6:	e7fa      	b.n	8009eee <disk_spi_sdhc_access_ioctl+0x26>
		return -EINVAL;
 8009ef8:	f06f 0015 	mvn.w	r0, #21
 8009efc:	e7f8      	b.n	8009ef0 <disk_spi_sdhc_access_ioctl+0x28>
 8009efe:	bf00      	nop
 8009f00:	08018eb8 	.word	0x08018eb8

08009f04 <sdhc_map_r1_idle_status>:
}

/* Converts an early stage idle mode R1 code into an error code */
static inline int sdhc_map_r1_idle_status(int status)
{
	if (status < 0) {
 8009f04:	2800      	cmp	r0, #0
 8009f06:	db06      	blt.n	8009f16 <sdhc_map_r1_idle_status+0x12>
		return status;
	}

	if (status == SDHC_R1_IDLE) {
 8009f08:	2801      	cmp	r0, #1
 8009f0a:	d003      	beq.n	8009f14 <sdhc_map_r1_idle_status+0x10>
	return sdhc_map_flags(sdhc_r1_flags, status);
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	4802      	ldr	r0, [pc, #8]	; (8009f18 <sdhc_map_r1_idle_status+0x14>)
 8009f10:	f009 b9ac 	b.w	801326c <sdhc_map_flags>
		return 0;
 8009f14:	2000      	movs	r0, #0
	}

	return sdhc_map_r1_status(status);
}
 8009f16:	4770      	bx	lr
 8009f18:	08018f00 	.word	0x08018f00

08009f1c <sdhc_spi_rx_bytes>:
{
 8009f1c:	b500      	push	{lr}
	struct spi_buf tx_bufs[] = {
 8009f1e:	4b0b      	ldr	r3, [pc, #44]	; (8009f4c <sdhc_spi_rx_bytes+0x30>)
{
 8009f20:	b089      	sub	sp, #36	; 0x24
	struct spi_buf tx_bufs[] = {
 8009f22:	e9cd 3200 	strd	r3, r2, [sp]
	struct spi_buf rx_bufs[] = {
 8009f26:	9205      	str	r2, [sp, #20]
	const struct spi_buf_set tx = {
 8009f28:	2301      	movs	r3, #1
	const struct spi_buf_set rx = {
 8009f2a:	aa04      	add	r2, sp, #16
	struct spi_buf rx_bufs[] = {
 8009f2c:	e9cd 3103 	strd	r3, r1, [sp, #12]
	const struct spi_buf_set rx = {
 8009f30:	e9cd 2306 	strd	r2, r3, [sp, #24]
	return sdhc_spi_trace(data, -1,
 8009f34:	e9d0 0100 	ldrd	r0, r1, [r0]
 8009f38:	ab06      	add	r3, sp, #24
 8009f3a:	aa02      	add	r2, sp, #8
	const struct spi_buf_set tx = {
 8009f3c:	f8cd d008 	str.w	sp, [sp, #8]
	return sdhc_spi_trace(data, -1,
 8009f40:	f009 f9a0 	bl	8013284 <spi_transceive.constprop.0>
}
 8009f44:	b009      	add	sp, #36	; 0x24
 8009f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f4a:	bf00      	nop
 8009f4c:	08018ec0 	.word	0x08018ec0

08009f50 <sdhc_spi_init>:
{
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4604      	mov	r4, r0
	struct sdhc_spi_data *data = dev->data;
 8009f54:	6905      	ldr	r5, [r0, #16]
 8009f56:	4807      	ldr	r0, [pc, #28]	; (8009f74 <sdhc_spi_init+0x24>)
 8009f58:	f003 fbc2 	bl	800d6e0 <z_impl_device_get_binding>
	struct sdhc_spi_data *data = dev->data;
 8009f5c:	6923      	ldr	r3, [r4, #16]
	data->spi = device_get_binding(DT_BUS_LABEL(SPI_SDHC_NODE));
 8009f5e:	6028      	str	r0, [r5, #0]
	const struct sdhc_spi_config *cfg = dev->config;
 8009f60:	6862      	ldr	r2, [r4, #4]

static int disk_spi_sdhc_init(const struct device *dev)
{
	sdhc_spi_set_status(dev, DISK_STATUS_UNINIT);

	spi_sdhc_disk.dev = dev;
 8009f62:	4805      	ldr	r0, [pc, #20]	; (8009f78 <sdhc_spi_init+0x28>)
		data->spi_cfg = &cfg->init_cfg;
 8009f64:	605a      	str	r2, [r3, #4]
	data->status = status;
 8009f66:	2101      	movs	r1, #1
 8009f68:	7419      	strb	r1, [r3, #16]
	spi_sdhc_disk.dev = dev;
 8009f6a:	6104      	str	r4, [r0, #16]

	return disk_access_register(&spi_sdhc_disk);
 8009f6c:	f7f9 fdb6 	bl	8003adc <disk_access_register>
}
 8009f70:	2000      	movs	r0, #0
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	08018e17 	.word	0x08018e17
 8009f78:	2000009c 	.word	0x2000009c

08009f7c <sdhc_spi_cmd_r1_raw>:
{
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	4605      	mov	r5, r0
 8009f80:	460e      	mov	r6, r1
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 8009f82:	f009 f995 	bl	80132b0 <sdhc_spi_tx_cmd>
	if (err != 0) {
 8009f86:	4604      	mov	r4, r0
 8009f88:	b968      	cbnz	r0, 8009fa6 <sdhc_spi_cmd_r1_raw+0x2a>
	err = sdhc_spi_skip_until_start(data);
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f009 f9f5 	bl	801337a <sdhc_spi_skip_until_start>
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
 8009f90:	2e19      	cmp	r6, #25
	err = sdhc_spi_skip_until_start(data);
 8009f92:	4604      	mov	r4, r0
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
 8009f94:	d804      	bhi.n	8009fa0 <sdhc_spi_cmd_r1_raw+0x24>
 8009f96:	4905      	ldr	r1, [pc, #20]	; (8009fac <sdhc_spi_cmd_r1_raw+0x30>)
 8009f98:	fa21 f606 	lsr.w	r6, r1, r6
 8009f9c:	07f3      	lsls	r3, r6, #31
 8009f9e:	d402      	bmi.n	8009fa6 <sdhc_spi_cmd_r1_raw+0x2a>
		sdhc_spi_rx_u8(data);
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f009 f9a7 	bl	80132f4 <sdhc_spi_rx_u8>
}
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
 8009faa:	bf00      	nop
 8009fac:	03060600 	.word	0x03060600

08009fb0 <sdhc_spi_rx_block>:
{
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	b08d      	sub	sp, #52	; 0x34
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 8009fb6:	f10d 0910 	add.w	r9, sp, #16
{
 8009fba:	4605      	mov	r5, r0
 8009fbc:	4688      	mov	r8, r1
 8009fbe:	4616      	mov	r6, r2
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 8009fc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4648      	mov	r0, r9
 8009fc8:	f009 f9c7 	bl	801335a <sdhc_retry_init>
		err = sdhc_spi_rx_u8(data);
 8009fcc:	4628      	mov	r0, r5
 8009fce:	f009 f991 	bl	80132f4 <sdhc_spi_rx_u8>
		if (err != discard) {
 8009fd2:	28ff      	cmp	r0, #255	; 0xff
		err = sdhc_spi_rx_u8(data);
 8009fd4:	4604      	mov	r4, r0
		if (err != discard) {
 8009fd6:	d116      	bne.n	800a006 <sdhc_spi_rx_block+0x56>
	} while (sdhc_retry_ok(&retry));
 8009fd8:	4648      	mov	r0, r9
 8009fda:	f009 f99e 	bl	801331a <sdhc_retry_ok>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1f3      	bne.n	8009fcc <sdhc_spi_rx_block+0x1c>
	LOG_WRN("Timeout while waiting for !%d", discard);
 8009fe4:	4a26      	ldr	r2, [pc, #152]	; (800a080 <sdhc_spi_rx_block+0xd0>)
 8009fe6:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 8009fea:	2203      	movs	r2, #3
 8009fec:	9209      	str	r2, [sp, #36]	; 0x24
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8009fee:	4825      	ldr	r0, [pc, #148]	; (800a084 <sdhc_spi_rx_block+0xd4>)
 8009ff0:	aa09      	add	r2, sp, #36	; 0x24
 8009ff2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
	return -ETIMEDOUT;
 8009ff6:	f06f 0473 	mvn.w	r4, #115	; 0x73
 8009ffa:	f007 fa46 	bl	801148a <z_impl_z_log_msg2_static_create>
}
 8009ffe:	4620      	mov	r0, r4
 800a000:	b00d      	add	sp, #52	; 0x34
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (token < 0) {
 800a006:	2800      	cmp	r0, #0
 800a008:	dbf9      	blt.n	8009ffe <sdhc_spi_rx_block+0x4e>
	if (token != SDHC_TOKEN_SINGLE) {
 800a00a:	28fe      	cmp	r0, #254	; 0xfe
 800a00c:	d135      	bne.n	800a07a <sdhc_spi_rx_block+0xca>
		struct spi_buf tx_bufs[] = {
 800a00e:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a088 <sdhc_spi_rx_block+0xd8>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
 800a012:	2700      	movs	r7, #0
		const struct spi_buf_set tx = {
 800a014:	f04f 0a01 	mov.w	sl, #1
		int remain = MIN(sizeof(sdhc_ones), len - i);
 800a018:	1bf3      	subs	r3, r6, r7
 800a01a:	2b40      	cmp	r3, #64	; 0x40
 800a01c:	bf28      	it	cs
 800a01e:	2340      	movcs	r3, #64	; 0x40
		struct spi_buf rx_bufs[] = {
 800a020:	eb08 0207 	add.w	r2, r8, r7
 800a024:	e9cd 2304 	strd	r2, r3, [sp, #16]
		struct spi_buf tx_bufs[] = {
 800a028:	e9cd b300 	strd	fp, r3, [sp]
		err = sdhc_spi_trace(data, -1,
 800a02c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a030:	ab06      	add	r3, sp, #24
 800a032:	aa02      	add	r2, sp, #8
		const struct spi_buf_set rx = {
 800a034:	e9cd 9a06 	strd	r9, sl, [sp, #24]
		const struct spi_buf_set tx = {
 800a038:	f8cd d008 	str.w	sp, [sp, #8]
 800a03c:	f8cd a00c 	str.w	sl, [sp, #12]
		err = sdhc_spi_trace(data, -1,
 800a040:	f009 f920 	bl	8013284 <spi_transceive.constprop.0>
		if (err != 0) {
 800a044:	4604      	mov	r4, r0
 800a046:	2800      	cmp	r0, #0
 800a048:	d1d9      	bne.n	8009ffe <sdhc_spi_rx_block+0x4e>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
 800a04a:	3740      	adds	r7, #64	; 0x40
 800a04c:	42be      	cmp	r6, r7
 800a04e:	dce3      	bgt.n	800a018 <sdhc_spi_rx_block+0x68>
	err = sdhc_spi_rx_bytes(data, crc, sizeof(crc));
 800a050:	2203      	movs	r2, #3
 800a052:	a906      	add	r1, sp, #24
 800a054:	4628      	mov	r0, r5
 800a056:	f7ff ff61 	bl	8009f1c <sdhc_spi_rx_bytes>
	if (err != 0) {
 800a05a:	4604      	mov	r4, r0
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d1ce      	bne.n	8009ffe <sdhc_spi_rx_block+0x4e>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
	return ((uint16_t)src[0] << 8) | src[1];
 800a060:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (sys_get_be16(crc) != crc16_itu_t(0, buf, len)) {
 800a064:	4632      	mov	r2, r6
 800a066:	4641      	mov	r1, r8
 800a068:	f006 fe48 	bl	8010cfc <crc16_itu_t>
 800a06c:	ba6d      	rev16	r5, r5
 800a06e:	b2ad      	uxth	r5, r5
		return -EILSEQ;
 800a070:	42a8      	cmp	r0, r5
 800a072:	bf18      	it	ne
 800a074:	f06f 0489 	mvnne.w	r4, #137	; 0x89
 800a078:	e7c1      	b.n	8009ffe <sdhc_spi_rx_block+0x4e>
		return -EIO;
 800a07a:	f06f 0404 	mvn.w	r4, #4
 800a07e:	e7be      	b.n	8009ffe <sdhc_spi_rx_block+0x4e>
 800a080:	08018e1d 	.word	0x08018e1d
 800a084:	08016f30 	.word	0x08016f30
 800a088:	08018ec0 	.word	0x08018ec0

0800a08c <sdhc_spi_cmd_r1>:
{
 800a08c:	b508      	push	{r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800a08e:	f7ff ff75 	bl	8009f7c <sdhc_spi_cmd_r1_raw>
}
 800a092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800a096:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
 800a098:	4801      	ldr	r0, [pc, #4]	; (800a0a0 <sdhc_spi_cmd_r1+0x14>)
 800a09a:	f009 b8e7 	b.w	801326c <sdhc_map_flags>
 800a09e:	bf00      	nop
 800a0a0:	08018f00 	.word	0x08018f00

0800a0a4 <disk_spi_sdhc_access_init>:
{
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	b093      	sub	sp, #76	; 0x4c
	const struct device *dev = disk->dev;
 800a0aa:	f8d0 8010 	ldr.w	r8, [r0, #16]
	sdhc_spi_tx(data, sdhc_ones, 10);
 800a0ae:	4da3      	ldr	r5, [pc, #652]	; (800a33c <disk_spi_sdhc_access_init+0x298>)
	struct sdhc_spi_data *data = dev->data;
 800a0b0:	f8d8 4010 	ldr.w	r4, [r8, #16]
	const struct sdhc_spi_config *cfg = dev->config;
 800a0b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
		data->spi_cfg = &cfg->init_cfg;
 800a0b8:	6063      	str	r3, [r4, #4]
{
 800a0ba:	af00      	add	r7, sp, #0
	data->status = status;
 800a0bc:	2201      	movs	r2, #1
 800a0be:	7422      	strb	r2, [r4, #16]
	sdhc_retry_init(&retry, SDHC_INIT_TIMEOUT, SDHC_RETRY_DELAY);
 800a0c0:	f241 3188 	movw	r1, #5000	; 0x1388
 800a0c4:	2214      	movs	r2, #20
 800a0c6:	f107 0018 	add.w	r0, r7, #24
 800a0ca:	f009 f946 	bl	801335a <sdhc_retry_init>
	sdhc_spi_tx(data, sdhc_ones, 10);
 800a0ce:	220a      	movs	r2, #10
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f009 f8dc 	bl	8013290 <sdhc_spi_tx>
	spi_release(data->spi, data->spi_cfg);
 800a0d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a0dc:	f009 f915 	bl	801330a <spi_release.isra.0>
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f7ff ff49 	bl	8009f7c <sdhc_spi_cmd_r1_raw>
 800a0ea:	f7ff ff0b 	bl	8009f04 <sdhc_map_r1_idle_status>
		if (err == 0) {
 800a0ee:	bb58      	cbnz	r0, 800a148 <disk_spi_sdhc_access_init+0xa4>
	return sdhc_map_r1_idle_status(
 800a0f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a0f8:	2108      	movs	r1, #8
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f009 f955 	bl	80133aa <sdhc_spi_cmd_r37_raw>
 800a100:	f7ff ff00 	bl	8009f04 <sdhc_map_r1_idle_status>
	if (err != 0) {
 800a104:	4605      	mov	r5, r0
 800a106:	b950      	cbnz	r0, 800a11e <disk_spi_sdhc_access_init+0x7a>
	if ((cond & 0xFF) != SDHC_CHECK) {
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	2aaa      	cmp	r2, #170	; 0xaa
 800a10e:	d118      	bne.n	800a142 <disk_spi_sdhc_access_init+0x9e>
	if ((cond & SDHC_VHS_MASK) != SDHC_VHS_3V3) {
 800a110:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
		return -ENOTSUP;
 800a114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a118:	bf18      	it	ne
 800a11a:	f06f 0585 	mvnne.w	r5, #133	; 0x85
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800a11e:	2201      	movs	r2, #1
 800a120:	213b      	movs	r1, #59	; 0x3b
 800a122:	4620      	mov	r0, r4
 800a124:	f7ff ff2a 	bl	8009f7c <sdhc_spi_cmd_r1_raw>
 800a128:	f7ff feec 	bl	8009f04 <sdhc_map_r1_idle_status>
	if (err != 0) {
 800a12c:	4606      	mov	r6, r0
 800a12e:	b1a0      	cbz	r0, 800a15a <disk_spi_sdhc_access_init+0xb6>
	spi_release(data->spi, data->spi_cfg);
 800a130:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a134:	f009 f8e9 	bl	801330a <spi_release.isra.0>
}
 800a138:	4630      	mov	r0, r6
 800a13a:	374c      	adds	r7, #76	; 0x4c
 800a13c:	46bd      	mov	sp, r7
 800a13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
 800a142:	f06f 0501 	mvn.w	r5, #1
 800a146:	e7ea      	b.n	800a11e <disk_spi_sdhc_access_init+0x7a>
		if (!sdhc_retry_ok(&retry)) {
 800a148:	f107 0018 	add.w	r0, r7, #24
 800a14c:	f009 f8e5 	bl	801331a <sdhc_retry_ok>
 800a150:	2800      	cmp	r0, #0
 800a152:	d1bc      	bne.n	800a0ce <disk_spi_sdhc_access_init+0x2a>
			return -ENOENT;
 800a154:	f06f 0601 	mvn.w	r6, #1
 800a158:	e7ea      	b.n	800a130 <disk_spi_sdhc_access_init+0x8c>
 800a15a:	2d00      	cmp	r5, #0
 800a15c:	bf0c      	ite	eq
 800a15e:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 800a162:	2600      	movne	r6, #0
		sdhc_spi_cmd_r1_raw(data, SDHC_APP_CMD, 0);
 800a164:	2200      	movs	r2, #0
 800a166:	2137      	movs	r1, #55	; 0x37
 800a168:	4620      	mov	r0, r4
 800a16a:	f7ff ff07 	bl	8009f7c <sdhc_spi_cmd_r1_raw>
		err = sdhc_spi_cmd_r1(data, SDHC_SEND_OP_COND, is_v2 ? SDHC_HCS : 0);
 800a16e:	4632      	mov	r2, r6
 800a170:	2129      	movs	r1, #41	; 0x29
 800a172:	4620      	mov	r0, r4
 800a174:	f7ff ff8a 	bl	800a08c <sdhc_spi_cmd_r1>
		if (err == 0) {
 800a178:	2800      	cmp	r0, #0
 800a17a:	f000 80d8 	beq.w	800a32e <disk_spi_sdhc_access_init+0x28a>
	} while (sdhc_retry_ok(&retry));
 800a17e:	f107 0018 	add.w	r0, r7, #24
 800a182:	f009 f8ca 	bl	801331a <sdhc_retry_ok>
 800a186:	2800      	cmp	r0, #0
 800a188:	d1ec      	bne.n	800a164 <disk_spi_sdhc_access_init+0xc0>
		return -ETIMEDOUT;
 800a18a:	f06f 0673 	mvn.w	r6, #115	; 0x73
 800a18e:	e7cf      	b.n	800a130 <disk_spi_sdhc_access_init+0x8c>
		} while (sdhc_retry_ok(&retry));
 800a190:	f107 0018 	add.w	r0, r7, #24
 800a194:	f009 f8c1 	bl	801331a <sdhc_retry_ok>
 800a198:	b180      	cbz	r0, 800a1bc <disk_spi_sdhc_access_init+0x118>
	return sdhc_map_r1_status(
 800a19a:	f107 0314 	add.w	r3, r7, #20
 800a19e:	2200      	movs	r2, #0
 800a1a0:	213a      	movs	r1, #58	; 0x3a
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f009 f901 	bl	80133aa <sdhc_spi_cmd_r37_raw>
 800a1a8:	4601      	mov	r1, r0
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f009 f85e 	bl	801326c <sdhc_map_flags>
			if (err != 0) {
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d1bc      	bne.n	800a130 <disk_spi_sdhc_access_init+0x8c>
			if ((ocr & SDHC_BUSY) != 0U) {
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dae9      	bge.n	800a190 <disk_spi_sdhc_access_init+0xec>
	if ((ocr & SDHC_CCS) != 0U) {
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	d40a      	bmi.n	800a1d8 <disk_spi_sdhc_access_init+0x134>
		data->high_capacity = false;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	7223      	strb	r3, [r4, #8]
		err = sdhc_spi_cmd_r1(data, SDHC_SET_BLOCK_SIZE, SDMMC_DEFAULT_BLOCK_SIZE);
 800a1c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1ca:	2110      	movs	r1, #16
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f7ff ff5d 	bl	800a08c <sdhc_spi_cmd_r1>
		if (err != 0) {
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	b110      	cbz	r0, 800a1dc <disk_spi_sdhc_access_init+0x138>
 800a1d6:	e7ab      	b.n	800a130 <disk_spi_sdhc_access_init+0x8c>
		data->high_capacity = true;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	7223      	strb	r3, [r4, #8]
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CSD, 0);
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2109      	movs	r1, #9
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f7ff ff53 	bl	800a08c <sdhc_spi_cmd_r1>
	if (err != 0) {
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d1a1      	bne.n	800a130 <disk_spi_sdhc_access_init+0x8c>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
 800a1ec:	2210      	movs	r2, #16
 800a1ee:	f107 0120 	add.w	r1, r7, #32
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f7ff fedc 	bl	8009fb0 <sdhc_spi_rx_block>
	if (err != 0) {
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d198      	bne.n	800a130 <disk_spi_sdhc_access_init+0x8c>
	structure = (buf[0] >> 6);
 800a1fe:	f897 3020 	ldrb.w	r3, [r7, #32]
	switch (structure) {
 800a202:	099b      	lsrs	r3, r3, #6
 800a204:	d005      	beq.n	800a212 <disk_spi_sdhc_access_init+0x16e>
 800a206:	2b01      	cmp	r3, #1
 800a208:	f000 8082 	beq.w	800a310 <disk_spi_sdhc_access_init+0x26c>
			return -ENOTSUP;
 800a20c:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800a210:	e78e      	b.n	800a130 <disk_spi_sdhc_access_init+0x8c>
		readbllen = buf[5] & ((1 << 4) - 1);
 800a212:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a216:	f003 030f 	and.w	r3, r3, #15
		if ((readbllen < 9) || (readbllen > 11)) {
 800a21a:	f1a3 0209 	sub.w	r2, r3, #9
 800a21e:	2a02      	cmp	r2, #2
 800a220:	d8f4      	bhi.n	800a20c <disk_spi_sdhc_access_init+0x168>
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
 800a222:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800a226:	f009 f80d 	bl	8013244 <sys_get_be32>
		csizemult = (uint8_t) ((sys_get_be16(&buf[9]) >> 7) & ((1 << 3) - 1));
 800a22a:	f8b7 2029 	ldrh.w	r2, [r7, #41]	; 0x29
 800a22e:	ba52      	rev16	r2, r2
 800a230:	f3c2 12c2 	ubfx	r2, r2, #7, #3
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
 800a234:	f3c0 308b 	ubfx	r0, r0, #14, #12
		data->sector_count = ((csize + 1) << (csizemult + 2 + readbllen - 9));
 800a238:	4413      	add	r3, r2
 800a23a:	3001      	adds	r0, #1
 800a23c:	3b07      	subs	r3, #7
 800a23e:	fa00 f303 	lsl.w	r3, r0, r3
 800a242:	60e3      	str	r3, [r4, #12]
	LOG_INF("Found a ~%u MiB SDHC card.",
 800a244:	68e3      	ldr	r3, [r4, #12]
 800a246:	4a3e      	ldr	r2, [pc, #248]	; (800a340 <disk_spi_sdhc_access_init+0x29c>)
 800a248:	0adb      	lsrs	r3, r3, #11
 800a24a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800a24e:	2303      	movs	r3, #3
 800a250:	46e9      	mov	r9, sp
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a254:	483b      	ldr	r0, [pc, #236]	; (800a344 <disk_spi_sdhc_access_init+0x2a0>)
 800a256:	2300      	movs	r3, #0
 800a258:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a25c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800a260:	f007 f913 	bl	801148a <z_impl_z_log_msg2_static_create>
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CID, 0);
 800a264:	2200      	movs	r2, #0
 800a266:	210a      	movs	r1, #10
 800a268:	4620      	mov	r0, r4
 800a26a:	f7ff ff0f 	bl	800a08c <sdhc_spi_cmd_r1>
	if (err != 0) {
 800a26e:	4606      	mov	r6, r0
 800a270:	2800      	cmp	r0, #0
 800a272:	f47f af5d 	bne.w	800a130 <disk_spi_sdhc_access_init+0x8c>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
 800a276:	2210      	movs	r2, #16
 800a278:	f107 0120 	add.w	r1, r7, #32
 800a27c:	4620      	mov	r0, r4
 800a27e:	f7ff fe97 	bl	8009fb0 <sdhc_spi_rx_block>
	if (err != 0) {
 800a282:	4606      	mov	r6, r0
 800a284:	2800      	cmp	r0, #0
 800a286:	f47f af53 	bne.w	800a130 <disk_spi_sdhc_access_init+0x8c>
	LOG_INF("Manufacturer ID=%d OEM='%c%c' Name='%c%c%c%c%c' "
 800a28a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a294:	60bb      	str	r3, [r7, #8]
 800a296:	f107 0029 	add.w	r0, r7, #41	; 0x29
 800a29a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a29e:	607b      	str	r3, [r7, #4]
 800a2a0:	f897 b020 	ldrb.w	fp, [r7, #32]
 800a2a4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a2a8:	f897 5026 	ldrb.w	r5, [r7, #38]	; 0x26
 800a2ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2b0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800a2b4:	f897 a021 	ldrb.w	sl, [r7, #33]	; 0x21
 800a2b8:	f008 ffc4 	bl	8013244 <sys_get_be32>
 800a2bc:	f8df e088 	ldr.w	lr, [pc, #136]	; 800a348 <disk_spi_sdhc_access_init+0x2a4>
 800a2c0:	b090      	sub	sp, #64	; 0x40
 800a2c2:	46ec      	mov	ip, sp
 800a2c4:	e9cc eb04 	strd	lr, fp, [ip, #16]
 800a2c8:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800a2cc:	f8cc e01c 	str.w	lr, [ip, #28]
 800a2d0:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800a2d4:	f8cc a018 	str.w	sl, [ip, #24]
 800a2d8:	e9cc e208 	strd	lr, r2, [ip, #32]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
 800a2e2:	e9cc 250a 	strd	r2, r5, [ip, #40]	; 0x28
 800a2e6:	4662      	mov	r2, ip
 800a2e8:	e9cc 130c 	strd	r1, r3, [ip, #48]	; 0x30
 800a2ec:	230c      	movs	r3, #12
 800a2ee:	f842 3f0c 	str.w	r3, [r2, #12]!
 800a2f2:	4814      	ldr	r0, [pc, #80]	; (800a344 <disk_spi_sdhc_access_init+0x2a0>)
 800a2f4:	4633      	mov	r3, r6
 800a2f6:	f246 01c0 	movw	r1, #24768	; 0x60c0
 800a2fa:	f007 f8c6 	bl	801148a <z_impl_z_log_msg2_static_create>
	const struct sdhc_spi_config *cfg = dev->config;
 800a2fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct sdhc_spi_data *data = dev->data;
 800a302:	f8d8 2010 	ldr.w	r2, [r8, #16]
		data->spi_cfg = &cfg->oper_cfg;
 800a306:	330c      	adds	r3, #12
 800a308:	46cd      	mov	sp, r9
	data->status = status;
 800a30a:	7416      	strb	r6, [r2, #16]
		data->spi_cfg = &cfg->oper_cfg;
 800a30c:	6053      	str	r3, [r2, #4]
	return 0;
 800a30e:	e70f      	b.n	800a130 <disk_spi_sdhc_access_init+0x8c>
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
 800a310:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800a314:	f008 ff96 	bl	8013244 <sys_get_be32>
		if (csize < 4112) {
 800a318:	f241 030f 	movw	r3, #4111	; 0x100f
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
 800a31c:	f3c0 0015 	ubfx	r0, r0, #0, #22
		if (csize < 4112) {
 800a320:	4298      	cmp	r0, r3
 800a322:	f67f af73 	bls.w	800a20c <disk_spi_sdhc_access_init+0x168>
		data->sector_count = (csize + 1) *
 800a326:	3001      	adds	r0, #1
 800a328:	0280      	lsls	r0, r0, #10
 800a32a:	60e0      	str	r0, [r4, #12]
		break;
 800a32c:	e78a      	b.n	800a244 <disk_spi_sdhc_access_init+0x1a0>
	ocr = 0;
 800a32e:	6178      	str	r0, [r7, #20]
	if (is_v2) {
 800a330:	2d00      	cmp	r5, #0
 800a332:	f47f af46 	bne.w	800a1c2 <disk_spi_sdhc_access_init+0x11e>
 800a336:	4d05      	ldr	r5, [pc, #20]	; (800a34c <disk_spi_sdhc_access_init+0x2a8>)
 800a338:	e72f      	b.n	800a19a <disk_spi_sdhc_access_init+0xf6>
 800a33a:	bf00      	nop
 800a33c:	08018ec0 	.word	0x08018ec0
 800a340:	08018e3b 	.word	0x08018e3b
 800a344:	08016f30 	.word	0x08016f30
 800a348:	08018e56 	.word	0x08018e56
 800a34c:	08018f00 	.word	0x08018f00

0800a350 <sdhc_spi_read>:
{
 800a350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a354:	4605      	mov	r5, r0
 800a356:	460f      	mov	r7, r1
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 800a358:	7c01      	ldrb	r1, [r0, #16]
 800a35a:	4818      	ldr	r0, [pc, #96]	; (800a3bc <sdhc_spi_read+0x6c>)
 800a35c:	4690      	mov	r8, r2
 800a35e:	461e      	mov	r6, r3
 800a360:	f008 ff84 	bl	801326c <sdhc_map_flags>
	if (err != 0) {
 800a364:	4604      	mov	r4, r0
 800a366:	b970      	cbnz	r0, 800a386 <sdhc_spi_read+0x36>
	if (data->high_capacity) {
 800a368:	7a2b      	ldrb	r3, [r5, #8]
 800a36a:	b90b      	cbnz	r3, 800a370 <sdhc_spi_read+0x20>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800a36c:	ea4f 2848 	mov.w	r8, r8, lsl #9
	err = sdhc_spi_cmd_r1(data, SDHC_READ_MULTIPLE_BLOCK, addr);
 800a370:	4642      	mov	r2, r8
 800a372:	2112      	movs	r1, #18
 800a374:	4628      	mov	r0, r5
 800a376:	f7ff fe89 	bl	800a08c <sdhc_spi_cmd_r1>
	if (err != 0) {
 800a37a:	4604      	mov	r4, r0
 800a37c:	b190      	cbz	r0, 800a3a4 <sdhc_spi_read+0x54>
	spi_release(data->spi, data->spi_cfg);
 800a37e:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a382:	f008 ffc2 	bl	801330a <spi_release.isra.0>
}
 800a386:	4620      	mov	r0, r4
 800a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = sdhc_spi_rx_block(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
 800a38c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a390:	4639      	mov	r1, r7
 800a392:	4628      	mov	r0, r5
 800a394:	f7ff fe0c 	bl	8009fb0 <sdhc_spi_rx_block>
		if (err != 0) {
 800a398:	4604      	mov	r4, r0
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d1ef      	bne.n	800a37e <sdhc_spi_read+0x2e>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800a39e:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
 800a3a2:	3e01      	subs	r6, #1
 800a3a4:	2e00      	cmp	r6, #0
 800a3a6:	d1f1      	bne.n	800a38c <sdhc_spi_read+0x3c>
	sdhc_spi_cmd_r1(data, SDHC_STOP_TRANSMISSION, 0);
 800a3a8:	4632      	mov	r2, r6
 800a3aa:	210c      	movs	r1, #12
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f7ff fe6d 	bl	800a08c <sdhc_spi_cmd_r1>
	err = sdhc_spi_skip_until_ready(data);
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f009 f818 	bl	80133e8 <sdhc_spi_skip_until_ready>
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	e7e0      	b.n	800a37e <sdhc_spi_read+0x2e>
 800a3bc:	08018eb8 	.word	0x08018eb8

0800a3c0 <sdhc_spi_write>:
{
 800a3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	7c01      	ldrb	r1, [r0, #16]
 800a3ca:	483d      	ldr	r0, [pc, #244]	; (800a4c0 <sdhc_spi_write+0x100>)
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	4698      	mov	r8, r3
 800a3d0:	f008 ff4c 	bl	801326c <sdhc_map_flags>
	if (err != 0) {
 800a3d4:	b960      	cbnz	r0, 800a3f0 <sdhc_spi_write+0x30>

/* Converts the data block response flags into an error code */
static inline int sdhc_map_data_status(int status)
{
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800a3d6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800a4c4 <sdhc_spi_write+0x104>
	return sdhc_map_flags(sdhc_r1_flags, status);
 800a3da:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800a4c8 <sdhc_spi_write+0x108>
 800a3de:	44b0      	add	r8, r6
	for (; count != 0U; count--) {
 800a3e0:	4546      	cmp	r6, r8
 800a3e2:	d108      	bne.n	800a3f6 <sdhc_spi_write+0x36>
	err = 0;
 800a3e4:	2400      	movs	r4, #0
	spi_release(data->spi, data->spi_cfg);
 800a3e6:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a3ea:	f008 ff8e 	bl	801330a <spi_release.isra.0>
 800a3ee:	4620      	mov	r0, r4
}
 800a3f0:	b003      	add	sp, #12
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (data->high_capacity) {
 800a3f6:	7a2b      	ldrb	r3, [r5, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d15c      	bne.n	800a4b6 <sdhc_spi_write+0xf6>
			addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800a3fc:	0272      	lsls	r2, r6, #9
		err = sdhc_spi_cmd_r1(data, SDHC_WRITE_BLOCK, addr);
 800a3fe:	2118      	movs	r1, #24
 800a400:	4628      	mov	r0, r5
 800a402:	f7ff fe43 	bl	800a08c <sdhc_spi_cmd_r1>
		if (err < 0) {
 800a406:	1e04      	subs	r4, r0, #0
 800a408:	dbed      	blt.n	800a3e6 <sdhc_spi_write+0x26>
	buf[0] = SDHC_TOKEN_SINGLE;
 800a40a:	23fe      	movs	r3, #254	; 0xfe
	err = sdhc_spi_tx(data, buf, 1);
 800a40c:	2201      	movs	r2, #1
 800a40e:	a901      	add	r1, sp, #4
 800a410:	4628      	mov	r0, r5
	buf[0] = SDHC_TOKEN_SINGLE;
 800a412:	f88d 3004 	strb.w	r3, [sp, #4]
	err = sdhc_spi_tx(data, buf, 1);
 800a416:	f008 ff3b 	bl	8013290 <sdhc_spi_tx>
	if (err != 0) {
 800a41a:	4604      	mov	r4, r0
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d1e2      	bne.n	800a3e6 <sdhc_spi_write+0x26>
	err = sdhc_spi_tx(data, send, len);
 800a420:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a424:	4639      	mov	r1, r7
 800a426:	4628      	mov	r0, r5
 800a428:	f008 ff32 	bl	8013290 <sdhc_spi_tx>
	if (err != 0) {
 800a42c:	4604      	mov	r4, r0
 800a42e:	2800      	cmp	r0, #0
 800a430:	d1d9      	bne.n	800a3e6 <sdhc_spi_write+0x26>
	sys_put_be16(crc16_itu_t(0, send, len), buf);
 800a432:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a436:	4639      	mov	r1, r7
 800a438:	f006 fc60 	bl	8010cfc <crc16_itu_t>
	err = sdhc_spi_tx(data, buf, sizeof(buf));
 800a43c:	2202      	movs	r2, #2
	dst[0] = val >> 8;
 800a43e:	0a03      	lsrs	r3, r0, #8
	dst[1] = val;
 800a440:	f88d 0005 	strb.w	r0, [sp, #5]
 800a444:	a901      	add	r1, sp, #4
 800a446:	4628      	mov	r0, r5
	dst[0] = val >> 8;
 800a448:	f88d 3004 	strb.w	r3, [sp, #4]
 800a44c:	f008 ff20 	bl	8013290 <sdhc_spi_tx>
	if (err != 0) {
 800a450:	4604      	mov	r4, r0
 800a452:	2800      	cmp	r0, #0
 800a454:	d1c7      	bne.n	800a3e6 <sdhc_spi_write+0x26>
	return sdhc_map_data_status(sdhc_spi_rx_u8(data));
 800a456:	4628      	mov	r0, r5
 800a458:	f008 ff4c 	bl	80132f4 <sdhc_spi_rx_u8>
 800a45c:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800a45e:	4648      	mov	r0, r9
 800a460:	f008 ff04 	bl	801326c <sdhc_map_flags>
		if (err != 0) {
 800a464:	4604      	mov	r4, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d1bd      	bne.n	800a3e6 <sdhc_spi_write+0x26>
		err = sdhc_spi_skip_until_ready(data);
 800a46a:	4628      	mov	r0, r5
 800a46c:	f008 ffbc 	bl	80133e8 <sdhc_spi_skip_until_ready>
		if (err != 0) {
 800a470:	4604      	mov	r4, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d1b7      	bne.n	800a3e6 <sdhc_spi_write+0x26>
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 800a476:	4602      	mov	r2, r0
 800a478:	210d      	movs	r1, #13
 800a47a:	4628      	mov	r0, r5
 800a47c:	f008 ff18 	bl	80132b0 <sdhc_spi_tx_cmd>
	if (err != 0) {
 800a480:	4604      	mov	r4, r0
 800a482:	2800      	cmp	r0, #0
 800a484:	d1af      	bne.n	800a3e6 <sdhc_spi_write+0x26>
	r1 = sdhc_map_r1_status(sdhc_spi_skip_until_start(data));
 800a486:	4628      	mov	r0, r5
 800a488:	f008 ff77 	bl	801337a <sdhc_spi_skip_until_start>
 800a48c:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
 800a48e:	4650      	mov	r0, sl
 800a490:	f008 feec 	bl	801326c <sdhc_map_flags>
 800a494:	4683      	mov	fp, r0
	r2 = sdhc_spi_rx_u8(data);
 800a496:	4628      	mov	r0, r5
 800a498:	f008 ff2c 	bl	80132f4 <sdhc_spi_rx_u8>
 800a49c:	4604      	mov	r4, r0
	sdhc_spi_rx_u8(data);
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f008 ff28 	bl	80132f4 <sdhc_spi_rx_u8>
	if (r1 < 0) {
 800a4a4:	f1bb 0f00 	cmp.w	fp, #0
 800a4a8:	db07      	blt.n	800a4ba <sdhc_spi_write+0xfa>
		if (err != 0) {
 800a4aa:	2c00      	cmp	r4, #0
 800a4ac:	d19b      	bne.n	800a3e6 <sdhc_spi_write+0x26>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800a4ae:	f507 7700 	add.w	r7, r7, #512	; 0x200
		sector++;
 800a4b2:	3601      	adds	r6, #1
	for (; count != 0U; count--) {
 800a4b4:	e794      	b.n	800a3e0 <sdhc_spi_write+0x20>
 800a4b6:	4632      	mov	r2, r6
 800a4b8:	e7a1      	b.n	800a3fe <sdhc_spi_write+0x3e>
 800a4ba:	465c      	mov	r4, fp
 800a4bc:	e793      	b.n	800a3e6 <sdhc_spi_write+0x26>
 800a4be:	bf00      	nop
 800a4c0:	08018eb8 	.word	0x08018eb8
 800a4c4:	08018eb0 	.word	0x08018eb0
 800a4c8:	08018f00 	.word	0x08018f00

0800a4cc <sdhc_spi_write_multi>:
{
 800a4cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	460f      	mov	r7, r1
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 800a4d4:	7c01      	ldrb	r1, [r0, #16]
 800a4d6:	4830      	ldr	r0, [pc, #192]	; (800a598 <sdhc_spi_write_multi+0xcc>)
 800a4d8:	4690      	mov	r8, r2
 800a4da:	461e      	mov	r6, r3
 800a4dc:	f008 fec6 	bl	801326c <sdhc_map_flags>
	if (err != 0) {
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	b9e0      	cbnz	r0, 800a51e <sdhc_spi_write_multi+0x52>
	if (data->high_capacity) {
 800a4e4:	7a2b      	ldrb	r3, [r5, #8]
 800a4e6:	b90b      	cbnz	r3, 800a4ec <sdhc_spi_write_multi+0x20>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800a4e8:	ea4f 2848 	mov.w	r8, r8, lsl #9
	err = sdhc_spi_cmd_r1(data, SDHC_WRITE_MULTIPLE_BLOCK, addr);
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	2119      	movs	r1, #25
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f7ff fdcb 	bl	800a08c <sdhc_spi_cmd_r1>
	if (err < 0) {
 800a4f6:	1e04      	subs	r4, r0, #0
 800a4f8:	db0d      	blt.n	800a516 <sdhc_spi_write_multi+0x4a>
	return sdhc_map_flags(sdhc_data_response_flags, status);
 800a4fa:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800a59c <sdhc_spi_write_multi+0xd0>
		block[0] = SDHC_TOKEN_MULTI_WRITE;
 800a4fe:	f04f 08fc 	mov.w	r8, #252	; 0xfc
	for (; count != 0U; count--) {
 800a502:	b986      	cbnz	r6, 800a526 <sdhc_spi_write_multi+0x5a>
	sdhc_spi_tx_cmd(data, SDHC_STOP_TRANSMISSION, 0);
 800a504:	4632      	mov	r2, r6
 800a506:	210c      	movs	r1, #12
 800a508:	4628      	mov	r0, r5
 800a50a:	f008 fed1 	bl	80132b0 <sdhc_spi_tx_cmd>
	err = sdhc_spi_skip_until_ready(data);
 800a50e:	4628      	mov	r0, r5
 800a510:	f008 ff6a 	bl	80133e8 <sdhc_spi_skip_until_ready>
 800a514:	4604      	mov	r4, r0
	spi_release(data->spi, data->spi_cfg);
 800a516:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a51a:	f008 fef6 	bl	801330a <spi_release.isra.0>
}
 800a51e:	4620      	mov	r0, r4
 800a520:	b003      	add	sp, #12
 800a522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sdhc_spi_tx(data, block, 1);
 800a526:	2201      	movs	r2, #1
 800a528:	a901      	add	r1, sp, #4
 800a52a:	4628      	mov	r0, r5
		block[0] = SDHC_TOKEN_MULTI_WRITE;
 800a52c:	f88d 8004 	strb.w	r8, [sp, #4]
		err = sdhc_spi_tx(data, block, 1);
 800a530:	f008 feae 	bl	8013290 <sdhc_spi_tx>
		if (err != 0) {
 800a534:	4604      	mov	r4, r0
 800a536:	2800      	cmp	r0, #0
 800a538:	d1ed      	bne.n	800a516 <sdhc_spi_write_multi+0x4a>
		err = sdhc_spi_tx(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
 800a53a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a53e:	4639      	mov	r1, r7
 800a540:	4628      	mov	r0, r5
 800a542:	f008 fea5 	bl	8013290 <sdhc_spi_tx>
		if (err != 0) {
 800a546:	4604      	mov	r4, r0
 800a548:	2800      	cmp	r0, #0
 800a54a:	d1e4      	bne.n	800a516 <sdhc_spi_write_multi+0x4a>
		sys_put_be16(crc16_itu_t(0, buf, SDMMC_DEFAULT_BLOCK_SIZE),
 800a54c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a550:	4639      	mov	r1, r7
 800a552:	f006 fbd3 	bl	8010cfc <crc16_itu_t>
		err = sdhc_spi_tx(data, block, sizeof(block));
 800a556:	2202      	movs	r2, #2
 800a558:	0a03      	lsrs	r3, r0, #8
	dst[1] = val;
 800a55a:	f88d 0005 	strb.w	r0, [sp, #5]
 800a55e:	a901      	add	r1, sp, #4
 800a560:	4628      	mov	r0, r5
	dst[0] = val >> 8;
 800a562:	f88d 3004 	strb.w	r3, [sp, #4]
 800a566:	f008 fe93 	bl	8013290 <sdhc_spi_tx>
		if (err != 0) {
 800a56a:	4604      	mov	r4, r0
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d1d2      	bne.n	800a516 <sdhc_spi_write_multi+0x4a>
		err = sdhc_map_data_status(sdhc_spi_rx_u8(data));
 800a570:	4628      	mov	r0, r5
 800a572:	f008 febf 	bl	80132f4 <sdhc_spi_rx_u8>
 800a576:	4601      	mov	r1, r0
 800a578:	4648      	mov	r0, r9
 800a57a:	f008 fe77 	bl	801326c <sdhc_map_flags>
		if (err != 0) {
 800a57e:	4604      	mov	r4, r0
 800a580:	2800      	cmp	r0, #0
 800a582:	d1c8      	bne.n	800a516 <sdhc_spi_write_multi+0x4a>
		err = sdhc_spi_skip_until_ready(data);
 800a584:	4628      	mov	r0, r5
 800a586:	f008 ff2f 	bl	80133e8 <sdhc_spi_skip_until_ready>
		if (err != 0) {
 800a58a:	4604      	mov	r4, r0
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d1c2      	bne.n	800a516 <sdhc_spi_write_multi+0x4a>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800a590:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
 800a594:	3e01      	subs	r6, #1
 800a596:	e7b4      	b.n	800a502 <sdhc_spi_write_multi+0x36>
 800a598:	08018eb8 	.word	0x08018eb8
 800a59c:	08018eb0 	.word	0x08018eb0

0800a5a0 <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800a5a0:	6809      	ldr	r1, [r1, #0]
 800a5a2:	290a      	cmp	r1, #10
 800a5a4:	d80a      	bhi.n	800a5bc <stm32_clock_control_get_subsys_rate+0x1c>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	408b      	lsls	r3, r1
 800a5aa:	f240 415f 	movw	r1, #1119	; 0x45f
 800a5ae:	420b      	tst	r3, r1
 800a5b0:	d004      	beq.n	800a5bc <stm32_clock_control_get_subsys_rate+0x1c>
	uint32_t ahb_clock = SystemCoreClock;
 800a5b2:	4b04      	ldr	r3, [pc, #16]	; (800a5c4 <stm32_clock_control_get_subsys_rate+0x24>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
#endif
#if defined(CONFIG_SOC_SERIES_STM32WLX)
	case STM32_CLOCK_BUS_AHB3:
	case STM32_CLOCK_BUS_APB3:
		/* AHB3 and APB3 share the same clock and prescaler. */
		*rate = ahb3_clock;
 800a5b6:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800a5b8:	2000      	movs	r0, #0
		break;
 800a5ba:	4770      	bx	lr
	switch (pclken->bus) {
 800a5bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20000228 	.word	0x20000228

0800a5c8 <rtc_stm32_cancel_alarm>:
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <rtc_stm32_cancel_alarm+0x2c>)
}


static int rtc_stm32_cancel_alarm(const struct device *dev, uint8_t chan_id)
{
	struct rtc_stm32_data *data = dev->data;
 800a5ca:	6901      	ldr	r1, [r0, #16]
 800a5cc:	22ca      	movs	r2, #202	; 0xca
 800a5ce:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a5d0:	2253      	movs	r2, #83	; 0x53
 800a5d2:	625a      	str	r2, [r3, #36]	; 0x24
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALRA(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	65da      	str	r2, [r3, #92]	; 0x5c
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableIT_ALRA(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800a5d8:	699a      	ldr	r2, [r3, #24]
 800a5da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a5de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800a5e0:	699a      	ldr	r2, [r3, #24]
 800a5e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5e6:	619a      	str	r2, [r3, #24]
	LL_RTC_ClearFlag_ALRA(RTC);
	LL_RTC_DisableIT_ALRA(RTC);
	LL_RTC_ALMA_Disable(RTC);
	LL_RTC_EnableWriteProtection(RTC);

	data->callback = NULL;
 800a5e8:	2000      	movs	r0, #0
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a5ea:	22ff      	movs	r2, #255	; 0xff
 800a5ec:	625a      	str	r2, [r3, #36]	; 0x24
 800a5ee:	6008      	str	r0, [r1, #0]

	return 0;
}
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	40002800 	.word	0x40002800

0800a5f8 <rtc_stm32_get_pending_int>:
  return ((READ_BIT(RTCx->SR, RTC_SR_ALRAF) == (RTC_SR_ALRAF)) ? 1U : 0U);
 800a5f8:	4b02      	ldr	r3, [pc, #8]	; (800a604 <rtc_stm32_get_pending_int+0xc>)
 800a5fa:	6d18      	ldr	r0, [r3, #80]	; 0x50


static uint32_t rtc_stm32_get_pending_int(const struct device *dev)
{
	return LL_RTC_IsActiveFlag_ALRA(RTC) != 0;
}
 800a5fc:	f000 0001 	and.w	r0, r0, #1
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	40002800 	.word	0x40002800

0800a608 <rtc_stm32_read>:
{
 800a608:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct tm now = { 0 };
 800a60a:	2500      	movs	r5, #0
{
 800a60c:	b08b      	sub	sp, #44	; 0x2c
	struct tm now = { 0 };
 800a60e:	e9cd 5507 	strd	r5, r5, [sp, #28]
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800a612:	4b31      	ldr	r3, [pc, #196]	; (800a6d8 <rtc_stm32_read+0xd0>)
 800a614:	9509      	str	r5, [sp, #36]	; 0x24
 800a616:	6819      	ldr	r1, [r3, #0]
  temp = READ_BIT(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU));
 800a618:	685b      	ldr	r3, [r3, #4]
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800a61a:	4a30      	ldr	r2, [pc, #192]	; (800a6dc <rtc_stm32_read+0xd4>)
                    ((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos)));
 800a61c:	f3c3 5403 	ubfx	r4, r3, #20, #4
{
 800a620:	4606      	mov	r6, r0
			__LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_YEAR(rtc_date));
 800a622:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a626:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800a62a:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800a62e:	b2c0      	uxtb	r0, r0
	now.tm_year = 100 +
 800a630:	3064      	adds	r0, #100	; 0x64
 800a632:	9006      	str	r0, [sp, #24]
	now.tm_mon = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MONTH(rtc_date)) - 1;
 800a634:	f3c3 3000 	ubfx	r0, r3, #12, #1
 800a638:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800a63c:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800a640:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800a644:	3801      	subs	r0, #1
 800a646:	9005      	str	r0, [sp, #20]
	now.tm_mday = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_DAY(rtc_date));
 800a648:	f3c3 1001 	ubfx	r0, r3, #4, #2
 800a64c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a650:	f003 030f 	and.w	r3, r3, #15
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU));
 800a654:	400a      	ands	r2, r1
 800a656:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a65a:	9304      	str	r3, [sp, #16]
	now.tm_hour = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_HOUR(rtc_time));
 800a65c:	0d13      	lsrs	r3, r2, #20
 800a65e:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800a662:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a666:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a66a:	9303      	str	r3, [sp, #12]
	now.tm_min = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MINUTE(rtc_time));
 800a66c:	f3c2 3302 	ubfx	r3, r2, #12, #3
 800a670:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a674:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800a678:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 800a67c:	f3c1 1302 	ubfx	r3, r1, #4, #3
 800a680:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a684:	f001 010f 	and.w	r1, r1, #15
 800a688:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	ts = timeutil_timegm(&now);
 800a68c:	a801      	add	r0, sp, #4
	now.tm_min = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_MINUTE(rtc_time));
 800a68e:	9202      	str	r2, [sp, #8]
	now.tm_sec = __LL_RTC_CONVERT_BCD2BIN(__LL_RTC_GET_SECOND(rtc_time));
 800a690:	9101      	str	r1, [sp, #4]
	ts = timeutil_timegm(&now);
 800a692:	f006 fbc9 	bl	8010e28 <timeutil_timegm>
 800a696:	4604      	mov	r4, r0
 800a698:	460f      	mov	r7, r1
	uint64_t ticks = (us * z_impl_counter_get_frequency(dev)) / USEC_PER_SEC;
 800a69a:	4630      	mov	r0, r6
 800a69c:	f009 f810 	bl	80136c0 <z_impl_counter_get_frequency>
	ts -= T_TIME_OFFSET;
 800a6a0:	490f      	ldr	r1, [pc, #60]	; (800a6e0 <rtc_stm32_read+0xd8>)
	ticks = counter_us_to_ticks(dev, ts * USEC_PER_SEC);
 800a6a2:	4b10      	ldr	r3, [pc, #64]	; (800a6e4 <rtc_stm32_read+0xdc>)
 800a6a4:	4a0f      	ldr	r2, [pc, #60]	; (800a6e4 <rtc_stm32_read+0xdc>)
	ts -= T_TIME_OFFSET;
 800a6a6:	1864      	adds	r4, r4, r1
 800a6a8:	f167 0700 	sbc.w	r7, r7, #0
	ticks = counter_us_to_ticks(dev, ts * USEC_PER_SEC);
 800a6ac:	fba4 4103 	umull	r4, r1, r4, r3
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	fb03 1107 	mla	r1, r3, r7, r1
 800a6b6:	fba4 0400 	umull	r0, r4, r4, r0
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	fb06 4101 	mla	r1, r6, r1, r4
 800a6c0:	f7f6 fa20 	bl	8000b04 <__aeabi_uldivmod>
	return (ticks > (uint64_t)UINT32_MAX) ? UINT32_MAX : ticks;
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6c8:	4282      	cmp	r2, r0
 800a6ca:	eb75 0301 	sbcs.w	r3, r5, r1
 800a6ce:	bf38      	it	cc
 800a6d0:	4610      	movcc	r0, r2
}
 800a6d2:	b00b      	add	sp, #44	; 0x2c
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	40002800 	.word	0x40002800
 800a6dc:	003f7f7f 	.word	0x003f7f7f
 800a6e0:	c792bc80 	.word	0xc792bc80
 800a6e4:	000f4240 	.word	0x000f4240

0800a6e8 <rtc_stm32_isr>:


}

void rtc_stm32_isr(const struct device *dev)
{
 800a6e8:	b570      	push	{r4, r5, r6, lr}
	struct rtc_stm32_data *data = dev->data;
 800a6ea:	6905      	ldr	r5, [r0, #16]
{
 800a6ec:	4604      	mov	r4, r0
	counter_alarm_callback_t alarm_callback = data->callback;
 800a6ee:	682e      	ldr	r6, [r5, #0]

	uint32_t now = rtc_stm32_read(dev);
 800a6f0:	f7ff ff8a 	bl	800a608 <rtc_stm32_read>
  return ((READ_BIT(RTCx->SR, RTC_SR_ALRAF) == (RTC_SR_ALRAF)) ? 1U : 0U);
 800a6f4:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <rtc_stm32_isr+0x4c>)
 800a6f6:	6d19      	ldr	r1, [r3, #80]	; 0x50

	if (LL_RTC_IsActiveFlag_ALRA(RTC) != 0) {
 800a6f8:	07c9      	lsls	r1, r1, #31
	uint32_t now = rtc_stm32_read(dev);
 800a6fa:	4602      	mov	r2, r0
	if (LL_RTC_IsActiveFlag_ALRA(RTC) != 0) {
 800a6fc:	d515      	bpl.n	800a72a <rtc_stm32_isr+0x42>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a6fe:	21ca      	movs	r1, #202	; 0xca
 800a700:	6259      	str	r1, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a702:	2153      	movs	r1, #83	; 0x53
 800a704:	6259      	str	r1, [r3, #36]	; 0x24
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800a706:	2101      	movs	r1, #1
 800a708:	65d9      	str	r1, [r3, #92]	; 0x5c
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800a70a:	6999      	ldr	r1, [r3, #24]
 800a70c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800a710:	6199      	str	r1, [r3, #24]
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800a712:	6999      	ldr	r1, [r3, #24]
 800a714:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a718:	6199      	str	r1, [r3, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a71a:	21ff      	movs	r1, #255	; 0xff
 800a71c:	6259      	str	r1, [r3, #36]	; 0x24
		LL_RTC_ClearFlag_ALRA(RTC);
		LL_RTC_DisableIT_ALRA(RTC);
		LL_RTC_ALMA_Disable(RTC);
		LL_RTC_EnableWriteProtection(RTC);

		if (alarm_callback != NULL) {
 800a71e:	b126      	cbz	r6, 800a72a <rtc_stm32_isr+0x42>
			data->callback = NULL;
 800a720:	2100      	movs	r1, #0
			alarm_callback(dev, 0, now, data->user_data);
 800a722:	68ab      	ldr	r3, [r5, #8]
			data->callback = NULL;
 800a724:	6029      	str	r1, [r5, #0]
			alarm_callback(dev, 0, now, data->user_data);
 800a726:	4620      	mov	r0, r4
 800a728:	47b0      	blx	r6
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a72a:	4b03      	ldr	r3, [pc, #12]	; (800a738 <rtc_stm32_isr+0x50>)
 800a72c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a730:	60da      	str	r2, [r3, #12]
#elif defined(CONFIG_SOC_SERIES_STM32G0X)
	LL_EXTI_ClearRisingFlag_0_31(RTC_EXTI_LINE);
#else
	LL_EXTI_ClearFlag_0_31(RTC_EXTI_LINE);
#endif
}
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	40002800 	.word	0x40002800
 800a738:	58000800 	.word	0x58000800

0800a73c <rtc_stm32_init>:


static int rtc_stm32_init(const struct device *dev)
{
 800a73c:	b570      	push	{r4, r5, r6, lr}
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct rtc_stm32_config *cfg = dev->config;
	struct rtc_stm32_data *data = dev->data;

	data->callback = NULL;
 800a73e:	6903      	ldr	r3, [r0, #16]
	const struct rtc_stm32_config *cfg = dev->config;
 800a740:	6846      	ldr	r6, [r0, #4]
	data->callback = NULL;
 800a742:	2200      	movs	r2, #0
{
 800a744:	b086      	sub	sp, #24
	data->callback = NULL;
 800a746:	601a      	str	r2, [r3, #0]

	if (clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken) != 0) {
 800a748:	f106 050c 	add.w	r5, r6, #12
 800a74c:	4c39      	ldr	r4, [pc, #228]	; (800a834 <rtc_stm32_init+0xf8>)
 800a74e:	4620      	mov	r0, r4
 800a750:	f00b fb7f 	bl	8015e52 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 800a754:	b978      	cbnz	r0, 800a776 <rtc_stm32_init+0x3a>
		LOG_ERR("clock op failed\n");
 800a756:	4b38      	ldr	r3, [pc, #224]	; (800a838 <rtc_stm32_init+0xfc>)
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	2302      	movs	r3, #2
 800a75c:	9303      	str	r3, [sp, #12]
 800a75e:	4837      	ldr	r0, [pc, #220]	; (800a83c <rtc_stm32_init+0x100>)
 800a760:	2300      	movs	r3, #0
 800a762:	aa03      	add	r2, sp, #12
 800a764:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800a768:	f006 fe8f 	bl	801148a <z_impl_z_log_msg2_static_create>

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#if !defined(CONFIG_COUNTER_RTC_STM32_SAVE_VALUE_BETWEEN_RESETS)
	if (LL_RTC_DeInit(RTC) != SUCCESS) {
		return -EIO;
 800a76c:	f06f 0504 	mvn.w	r5, #4
	LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE);

	rtc_stm32_irq_config(dev);

	return 0;
}
 800a770:	4628      	mov	r0, r5
 800a772:	b006      	add	sp, #24
 800a774:	bd70      	pop	{r4, r5, r6, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800a776:	68a3      	ldr	r3, [r4, #8]
 800a778:	4629      	mov	r1, r5
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4620      	mov	r0, r4
 800a77e:	4798      	blx	r3
	if (clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken) != 0) {
 800a780:	4605      	mov	r5, r0
 800a782:	2800      	cmp	r0, #0
 800a784:	d1e7      	bne.n	800a756 <rtc_stm32_init+0x1a>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a786:	4a2e      	ldr	r2, [pc, #184]	; (800a840 <rtc_stm32_init+0x104>)
 800a788:	6813      	ldr	r3, [r2, #0]
 800a78a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a78e:	6013      	str	r3, [r2, #0]
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a794:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a798:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a79c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a7a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a7a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a7a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800a7ac:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a7b0:	f042 0201 	orr.w	r2, r2, #1
 800a7b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800a7b8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a7bc:	0792      	lsls	r2, r2, #30
 800a7be:	d5fb      	bpl.n	800a7b8 <rtc_stm32_init+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a7c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	if (LL_RTC_DeInit(RTC) != SUCCESS) {
 800a7c4:	4c1f      	ldr	r4, [pc, #124]	; (800a844 <rtc_stm32_init+0x108>)
 800a7c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a7ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a7d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a7d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f002 fe1e 	bl	800d420 <LL_RTC_DeInit>
 800a7e4:	2801      	cmp	r0, #1
 800a7e6:	d1c1      	bne.n	800a76c <rtc_stm32_init+0x30>
	if (LL_RTC_Init(RTC, ((LL_RTC_InitTypeDef *)
 800a7e8:	f106 0114 	add.w	r1, r6, #20
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f00b fab0 	bl	8015d52 <LL_RTC_Init>
 800a7f2:	2801      	cmp	r0, #1
 800a7f4:	d1ba      	bne.n	800a76c <rtc_stm32_init+0x30>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a7f6:	23ca      	movs	r3, #202	; 0xca
 800a7f8:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a7fa:	2353      	movs	r3, #83	; 0x53
 800a7fc:	6263      	str	r3, [r4, #36]	; 0x24
  SET_BIT(RTCx->CR, RTC_CR_BYPSHAD);
 800a7fe:	69a3      	ldr	r3, [r4, #24]
 800a800:	f043 0320 	orr.w	r3, r3, #32
 800a804:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a806:	23ff      	movs	r3, #255	; 0xff
 800a808:	6263      	str	r3, [r4, #36]	; 0x24
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a80a:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <rtc_stm32_init+0x10c>)
 800a80c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a810:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a81e:	601a      	str	r2, [r3, #0]
		    &rtc_data, &rtc_config, PRE_KERNEL_1,
		    CONFIG_COUNTER_INIT_PRIORITY, &rtc_stm32_driver_api);

static void rtc_stm32_irq_config(const struct device *dev)
{
	IRQ_CONNECT(DT_INST_IRQN(0),
 800a820:	2200      	movs	r2, #0
 800a822:	4611      	mov	r1, r2
 800a824:	202a      	movs	r0, #42	; 0x2a
 800a826:	f7f9 fa29 	bl	8003c7c <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    rtc_stm32_isr, DEVICE_DT_INST_GET(0), 0);
	irq_enable(DT_INST_IRQN(0));
 800a82a:	202a      	movs	r0, #42	; 0x2a
 800a82c:	f7f9 fa02 	bl	8003c34 <arch_irq_enable>
}
 800a830:	e79e      	b.n	800a770 <rtc_stm32_init+0x34>
 800a832:	bf00      	nop
 800a834:	08016b00 	.word	0x08016b00
 800a838:	08018f1e 	.word	0x08018f1e
 800a83c:	08016eb8 	.word	0x08016eb8
 800a840:	58000400 	.word	0x58000400
 800a844:	40002800 	.word	0x40002800
 800a848:	58000800 	.word	0x58000800

0800a84c <rtc_stm32_set_alarm>:
{
 800a84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct rtc_stm32_data *data = dev->data;
 800a850:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 800a854:	b091      	sub	sp, #68	; 0x44
 800a856:	4616      	mov	r6, r2
 800a858:	4607      	mov	r7, r0
	uint32_t now = rtc_stm32_read(dev);
 800a85a:	f7ff fed5 	bl	800a608 <rtc_stm32_read>
	if (data->callback != NULL) {
 800a85e:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t ticks = alarm_cfg->ticks;
 800a862:	6875      	ldr	r5, [r6, #4]
	uint32_t now = rtc_stm32_read(dev);
 800a864:	4604      	mov	r4, r0
	if (data->callback != NULL) {
 800a866:	f1b9 0f00 	cmp.w	r9, #0
 800a86a:	d168      	bne.n	800a93e <rtc_stm32_set_alarm+0xf2>
	data->callback = alarm_cfg->callback;
 800a86c:	6833      	ldr	r3, [r6, #0]
	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800a86e:	68f2      	ldr	r2, [r6, #12]
	data->callback = alarm_cfg->callback;
 800a870:	f8c8 3000 	str.w	r3, [r8]
	data->user_data = alarm_cfg->user_data;
 800a874:	68b3      	ldr	r3, [r6, #8]
 800a876:	f8c8 3008 	str.w	r3, [r8, #8]
	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800a87a:	f012 0801 	ands.w	r8, r2, #1
 800a87e:	4e33      	ldr	r6, [pc, #204]	; (800a94c <rtc_stm32_set_alarm+0x100>)
 800a880:	d14d      	bne.n	800a91e <rtc_stm32_set_alarm+0xd2>
		ticks += now + 1;
 800a882:	3501      	adds	r5, #1
	return ((uint64_t)ticks * USEC_PER_SEC) / z_impl_counter_get_frequency(dev);
 800a884:	4638      	mov	r0, r7
 800a886:	f008 ff1b 	bl	80136c0 <z_impl_counter_get_frequency>
 800a88a:	1961      	adds	r1, r4, r5
 800a88c:	4602      	mov	r2, r0
 800a88e:	4643      	mov	r3, r8
 800a890:	fba1 0106 	umull	r0, r1, r1, r6
 800a894:	f7f6 f936 	bl	8000b04 <__aeabi_uldivmod>
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC)
 800a898:	2300      	movs	r3, #0
 800a89a:	4a2c      	ldr	r2, [pc, #176]	; (800a94c <rtc_stm32_set_alarm+0x100>)
 800a89c:	f7f6 f932 	bl	8000b04 <__aeabi_uldivmod>
			+ T_TIME_OFFSET;
 800a8a0:	4b2b      	ldr	r3, [pc, #172]	; (800a950 <rtc_stm32_set_alarm+0x104>)
 800a8a2:	18c0      	adds	r0, r0, r3
 800a8a4:	f141 0100 	adc.w	r1, r1, #0
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC)
 800a8a8:	e9cd 0100 	strd	r0, r1, [sp]
	gmtime_r(&alarm_val, &alarm_tm);
 800a8ac:	a907      	add	r1, sp, #28
 800a8ae:	4668      	mov	r0, sp
 800a8b0:	f004 f9d6 	bl	800ec60 <gmtime_r>
	rtc_alarm.AlarmTime.Hours = alarm_tm.tm_hour;
 800a8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b6:	f88d 300c 	strb.w	r3, [sp, #12]
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 800a8ba:	2500      	movs	r5, #0
	rtc_alarm.AlarmTime.Minutes = alarm_tm.tm_min;
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	f88d 300d 	strb.w	r3, [sp, #13]
	rtc_alarm.AlarmDateWeekDaySel = LL_RTC_ALMA_DATEWEEKDAYSEL_DATE;
 800a8c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
	rtc_alarm.AlarmTime.Seconds = alarm_tm.tm_sec;
 800a8c6:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a8c8:	4c22      	ldr	r4, [pc, #136]	; (800a954 <rtc_stm32_set_alarm+0x108>)
 800a8ca:	f88d 300e 	strb.w	r3, [sp, #14]
 800a8ce:	f04f 08ca 	mov.w	r8, #202	; 0xca
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 800a8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	rtc_alarm.AlarmTime.TimeFormat = LL_RTC_TIME_FORMAT_AM_OR_24;
 800a8d4:	9502      	str	r5, [sp, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a8d6:	2753      	movs	r7, #83	; 0x53
	rtc_alarm.AlarmDateWeekDay = alarm_tm.tm_mday;
 800a8d8:	f88d 3018 	strb.w	r3, [sp, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a8dc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a8e0:	6267      	str	r7, [r4, #36]	; 0x24
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800a8e2:	69a3      	ldr	r3, [r4, #24]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a8e4:	26ff      	movs	r6, #255	; 0xff
  CLEAR_BIT(RTCx->CR, RTC_CR_ALRAE);
 800a8e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8ea:	61a3      	str	r3, [r4, #24]
	if (LL_RTC_ALMA_Init(RTC, LL_RTC_FORMAT_BIN, &rtc_alarm) != SUCCESS) {
 800a8ec:	aa02      	add	r2, sp, #8
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a8ee:	6266      	str	r6, [r4, #36]	; 0x24
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f00b f993 	bl	8015c1e <LL_RTC_ALMA_Init>
 800a8f8:	2801      	cmp	r0, #1
 800a8fa:	d123      	bne.n	800a944 <rtc_stm32_set_alarm+0xf8>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a8fc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a900:	6267      	str	r7, [r4, #36]	; 0x24
  SET_BIT(RTCx->CR, RTC_CR_ALRAE);
 800a902:	69a3      	ldr	r3, [r4, #24]
 800a904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a908:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RTCx->SCR, RTC_SCR_CALRAF);
 800a90a:	65e0      	str	r0, [r4, #92]	; 0x5c
  SET_BIT(RTCx->CR, RTC_CR_ALRAIE);
 800a90c:	69a3      	ldr	r3, [r4, #24]
 800a90e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a912:	61a3      	str	r3, [r4, #24]
	return 0;
 800a914:	4628      	mov	r0, r5
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a916:	6266      	str	r6, [r4, #36]	; 0x24
}
 800a918:	b011      	add	sp, #68	; 0x44
 800a91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91e:	4638      	mov	r0, r7
 800a920:	f008 fece 	bl	80136c0 <z_impl_counter_get_frequency>
 800a924:	464b      	mov	r3, r9
 800a926:	4602      	mov	r2, r0
 800a928:	fba5 0106 	umull	r0, r1, r5, r6
 800a92c:	f7f6 f8ea 	bl	8000b04 <__aeabi_uldivmod>
		alarm_val = (time_t)(counter_ticks_to_us(dev, ticks) / USEC_PER_SEC);
 800a930:	4a06      	ldr	r2, [pc, #24]	; (800a94c <rtc_stm32_set_alarm+0x100>)
 800a932:	2300      	movs	r3, #0
 800a934:	f7f6 f8e6 	bl	8000b04 <__aeabi_uldivmod>
 800a938:	e9cd 0100 	strd	r0, r1, [sp]
 800a93c:	e7b6      	b.n	800a8ac <rtc_stm32_set_alarm+0x60>
		return -EBUSY;
 800a93e:	f06f 000f 	mvn.w	r0, #15
 800a942:	e7e9      	b.n	800a918 <rtc_stm32_set_alarm+0xcc>
		return -EIO;
 800a944:	f06f 0004 	mvn.w	r0, #4
 800a948:	e7e6      	b.n	800a918 <rtc_stm32_set_alarm+0xcc>
 800a94a:	bf00      	nop
 800a94c:	000f4240 	.word	0x000f4240
 800a950:	386d4380 	.word	0x386d4380
 800a954:	40002800 	.word	0x40002800

0800a958 <sync_timer_handler>:
	data->syncpoint.syncclock = data->isw_syncclock;
	sync_finish(dev, 0);
}

static void sync_timer_handler(struct k_timer *tmr)
{
 800a958:	b510      	push	{r4, lr}
 800a95a:	b086      	sub	sp, #24
	struct ds3231_data *data = CONTAINER_OF(tmr, struct ds3231_data,
						sync_timer);

	LOG_INF("sync_timer fired");
 800a95c:	4b08      	ldr	r3, [pc, #32]	; (800a980 <sync_timer_handler+0x28>)
 800a95e:	9304      	str	r3, [sp, #16]
{
 800a960:	4604      	mov	r4, r0
	LOG_INF("sync_timer fired");
 800a962:	2302      	movs	r3, #2
 800a964:	4807      	ldr	r0, [pc, #28]	; (800a984 <sync_timer_handler+0x2c>)
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	aa03      	add	r2, sp, #12
 800a96a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800a96e:	f008 ff30 	bl	80137d2 <z_log_msg2_static_create.constprop.0>
	k_work_submit(&data->sync_work);
 800a972:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 800a976:	b006      	add	sp, #24
 800a978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->sync_work);
 800a97c:	f003 bb0e 	b.w	800df9c <k_work_submit>
 800a980:	08018f47 	.word	0x08018f47
 800a984:	08016ea8 	.word	0x08016ea8

0800a988 <validate_isw_monitoring>:
{
 800a988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ds3231_data *data = dev->data;
 800a98c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 800a990:	6846      	ldr	r6, [r0, #4]
	if (rp->ctrl & (MAXIM_DS3231_ALARM1 | MAXIM_DS3231_ALARM2)) {
 800a992:	f898 4012 	ldrb.w	r4, [r8, #18]
	if (data->sync_state != SYNCSM_IDLE) {
 800a996:	f898 3113 	ldrb.w	r3, [r8, #275]	; 0x113
	uint8_t isw_mon_req = 0;
 800a99a:	f014 0403 	ands.w	r4, r4, #3
{
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	4605      	mov	r5, r0
	uint8_t isw_mon_req = 0;
 800a9a2:	bf18      	it	ne
 800a9a4:	2401      	movne	r4, #1
	if (data->sync_state != SYNCSM_IDLE) {
 800a9a6:	b10b      	cbz	r3, 800a9ac <validate_isw_monitoring+0x24>
		isw_mon_req |= ISW_MON_REQ_Sync;
 800a9a8:	f044 0402 	orr.w	r4, r4, #2
	if ((cfg->isw_gpios.port != NULL)
 800a9ac:	6973      	ldr	r3, [r6, #20]
 800a9ae:	b39b      	cbz	r3, 800aa18 <validate_isw_monitoring+0x90>
	    && (isw_mon_req != data->isw_mon_req)) {
 800a9b0:	f898 3112 	ldrb.w	r3, [r8, #274]	; 0x112
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d02f      	beq.n	800aa18 <validate_isw_monitoring+0x90>
		rc = gpio_pin_interrupt_configure_dt(&cfg->isw_gpios,
 800a9b8:	3614      	adds	r6, #20
 800a9ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f008 febc 	bl	801373c <gpio_pin_interrupt_configure_dt>
		if ((rc >= 0)
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	db0d      	blt.n	800a9e4 <validate_isw_monitoring+0x5c>
			!= (data->isw_mon_req & ISW_MON_REQ_Sync))) {
 800a9c8:	f898 3112 	ldrb.w	r3, [r8, #274]	; 0x112
 800a9cc:	4063      	eors	r3, r4
		    && ((isw_mon_req & ISW_MON_REQ_Sync)
 800a9ce:	079b      	lsls	r3, r3, #30
 800a9d0:	d508      	bpl.n	800a9e4 <validate_isw_monitoring+0x5c>
			if (isw_mon_req & ISW_MON_REQ_Sync) {
 800a9d2:	f014 0202 	ands.w	r2, r4, #2
				rc = sc_ctrl(dev, 0,
 800a9d6:	bf1a      	itte	ne
 800a9d8:	221c      	movne	r2, #28
 800a9da:	2100      	movne	r1, #0
				rc = sc_ctrl(dev, MAXIM_DS3231_REG_CTRL_INTCN, 0);
 800a9dc:	2104      	moveq	r1, #4
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f008 ff24 	bl	801382c <sc_ctrl>
		if ((rc >= 0) && (isw_mon_req != 0)) {
 800a9e4:	2800      	cmp	r0, #0
		data->isw_mon_req = isw_mon_req;
 800a9e6:	f888 4112 	strb.w	r4, [r8, #274]	; 0x112
		if ((rc >= 0) && (isw_mon_req != 0)) {
 800a9ea:	db05      	blt.n	800a9f8 <validate_isw_monitoring+0x70>
 800a9ec:	b124      	cbz	r4, 800a9f8 <validate_isw_monitoring+0x70>
			rc = gpio_pin_interrupt_configure_dt(
 800a9ee:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f008 fea2 	bl	801373c <gpio_pin_interrupt_configure_dt>
		LOG_INF("ISW reconfigure to %x: %d", isw_mon_req, rc);
 800a9f8:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <validate_isw_monitoring+0x98>)
 800a9fa:	466d      	mov	r5, sp
 800a9fc:	b088      	sub	sp, #32
 800a9fe:	466a      	mov	r2, sp
 800aa00:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800aa04:	2304      	movs	r3, #4
 800aa06:	6190      	str	r0, [r2, #24]
 800aa08:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 800aa0c:	f842 3f0c 	str.w	r3, [r2, #12]!
 800aa10:	4804      	ldr	r0, [pc, #16]	; (800aa24 <validate_isw_monitoring+0x9c>)
 800aa12:	f008 fede 	bl	80137d2 <z_log_msg2_static_create.constprop.0>
 800aa16:	46ad      	mov	sp, r5
}
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa1e:	bf00      	nop
 800aa20:	08018f58 	.word	0x08018f58
 800aa24:	08016ea8 	.word	0x08016ea8

0800aa28 <alarm_worker>:
{
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct device *ds3231 = data->ds3231;
 800aa2c:	f850 5c68 	ldr.w	r5, [r0, #-104]
{
 800aa30:	b089      	sub	sp, #36	; 0x24
	const struct ds3231_config *cfg = ds3231->config;
 800aa32:	686b      	ldr	r3, [r5, #4]
 800aa34:	9300      	str	r3, [sp, #0]
	k_sem_take(&data->lock, K_FOREVER);
 800aa36:	f1a0 0750 	sub.w	r7, r0, #80	; 0x50
{
 800aa3a:	4606      	mov	r6, r0
	k_sem_take(&data->lock, K_FOREVER);
 800aa3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa44:	4638      	mov	r0, r7
 800aa46:	f008 fedf 	bl	8013808 <k_sem_take.constprop.0.isra.0>
		af = check_handled_alarms(ds3231);
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	f008 ff99 	bl	8013982 <check_handled_alarms>
	while (af > 0) {
 800aa50:	2800      	cmp	r0, #0
		af = check_handled_alarms(ds3231);
 800aa52:	4604      	mov	r4, r0
	while (af > 0) {
 800aa54:	dc5a      	bgt.n	800ab0c <alarm_worker+0xe4>
	k_sem_give(&data->lock);
 800aa56:	4638      	mov	r0, r7
 800aa58:	f008 fe97 	bl	801378a <k_sem_give>
	if (af < 0) {
 800aa5c:	b14c      	cbz	r4, 800aa72 <alarm_worker+0x4a>
		LOG_ERR("failed to read alarm flags");
 800aa5e:	4b2d      	ldr	r3, [pc, #180]	; (800ab14 <alarm_worker+0xec>)
 800aa60:	9306      	str	r3, [sp, #24]
 800aa62:	482d      	ldr	r0, [pc, #180]	; (800ab18 <alarm_worker+0xf0>)
 800aa64:	2302      	movs	r3, #2
 800aa66:	aa05      	add	r2, sp, #20
 800aa68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800aa6c:	9305      	str	r3, [sp, #20]
 800aa6e:	f008 feb0 	bl	80137d2 <z_log_msg2_static_create.constprop.0>
}
 800aa72:	b009      	add	sp, #36	; 0x24
 800aa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((af & (MAXIM_DS3231_ALARM1 << id)) == 0) {
 800aa78:	fa24 f30a 	lsr.w	r3, r4, sl
 800aa7c:	07db      	lsls	r3, r3, #31
 800aa7e:	d533      	bpl.n	800aae8 <alarm_worker+0xc0>
			if (data->alarm_flags[id] & MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE) {
 800aa80:	eb06 020a 	add.w	r2, r6, sl
 800aa84:	eb06 038a 	add.w	r3, r6, sl, lsl #2
 800aa88:	f992 20a8 	ldrsb.w	r2, [r2, #168]	; 0xa8
			maxim_ds3231_alarm_callback_handler_t handler
 800aa8c:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
			void *ud = data->alarm_user_data[id];
 800aa90:	f8d3 b0a0 	ldr.w	fp, [r3, #160]	; 0xa0
			if (data->alarm_flags[id] & MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE) {
 800aa94:	2a00      	cmp	r2, #0
 800aa96:	da08      	bge.n	800aaaa <alarm_worker+0x82>
				int rc = cancel_alarm(ds3231, id);
 800aa98:	4651      	mov	r1, sl
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	f008 fee0 	bl	8013862 <cancel_alarm>
				validate_isw_monitoring(ds3231);
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f7ff ff70 	bl	800a988 <validate_isw_monitoring>
 800aaa8:	9b01      	ldr	r3, [sp, #4]
			if (handler == counter_alarm_forwarder) {
 800aaaa:	4a1c      	ldr	r2, [pc, #112]	; (800ab1c <alarm_worker+0xf4>)
 800aaac:	4591      	cmp	r9, r2
 800aaae:	d124      	bne.n	800aafa <alarm_worker+0xd2>
				uint32_t ticks = data->counter_ticks[id];
 800aab0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
				counter_alarm_callback_t cb = data->counter_handler[id];
 800aab4:	f8d3 9088 	ldr.w	r9, [r3, #136]	; 0x88
				uint32_t ticks = data->counter_ticks[id];
 800aab8:	9201      	str	r2, [sp, #4]
				data->counter_handler[id] = NULL;
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				data->counter_ticks[id] = 0;
 800aac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				if (cb) {
 800aac4:	f1b9 0f00 	cmp.w	r9, #0
 800aac8:	d00e      	beq.n	800aae8 <alarm_worker+0xc0>
					k_sem_give(&data->lock);
 800aaca:	4638      	mov	r0, r7
 800aacc:	f008 fe5d 	bl	801378a <k_sem_give>
					cb(ds3231, id, ticks, ud);
 800aad0:	9a01      	ldr	r2, [sp, #4]
 800aad2:	465b      	mov	r3, fp
				handler(ds3231, id, data->isw_syncclock, ud);
 800aad4:	4628      	mov	r0, r5
 800aad6:	4651      	mov	r1, sl
 800aad8:	47c8      	blx	r9
				k_sem_take(&data->lock, K_FOREVER);
 800aada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aae2:	4638      	mov	r0, r7
 800aae4:	f008 fe90 	bl	8013808 <k_sem_take.constprop.0.isra.0>
		for (id = 0; id < cfg->generic.channels; ++id) {
 800aae8:	f108 0801 	add.w	r8, r8, #1
 800aaec:	9b00      	ldr	r3, [sp, #0]
 800aaee:	7a5b      	ldrb	r3, [r3, #9]
 800aaf0:	fa5f fa88 	uxtb.w	sl, r8
 800aaf4:	4553      	cmp	r3, sl
 800aaf6:	d8bf      	bhi.n	800aa78 <alarm_worker+0x50>
 800aaf8:	e7a7      	b.n	800aa4a <alarm_worker+0x22>
			} else if (handler != NULL) {
 800aafa:	f1b9 0f00 	cmp.w	r9, #0
 800aafe:	d0f3      	beq.n	800aae8 <alarm_worker+0xc0>
				k_sem_give(&data->lock);
 800ab00:	4638      	mov	r0, r7
 800ab02:	f008 fe42 	bl	801378a <k_sem_give>
				handler(ds3231, id, data->isw_syncclock, ud);
 800ab06:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800ab08:	465b      	mov	r3, fp
 800ab0a:	e7e3      	b.n	800aad4 <alarm_worker+0xac>
 800ab0c:	f04f 0800 	mov.w	r8, #0
 800ab10:	e7ec      	b.n	800aaec <alarm_worker+0xc4>
 800ab12:	bf00      	nop
 800ab14:	08018f72 	.word	0x08018f72
 800ab18:	08016ea8 	.word	0x08016ea8
 800ab1c:	0801376d 	.word	0x0801376d

0800ab20 <ds3231_counter_set_alarm>:
}

int ds3231_counter_set_alarm(const struct device *dev,
			     uint8_t id,
			     const struct counter_alarm_cfg *alarm_cfg)
{
 800ab20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct register_map *rp = &data->registers;
	const struct ds3231_config *cfg = dev->config;
	time_t when;
	int rc = 0;

	if (id >= cfg->generic.channels) {
 800ab24:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 800ab26:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (id >= cfg->generic.channels) {
 800ab2a:	7a5b      	ldrb	r3, [r3, #9]
 800ab2c:	428b      	cmp	r3, r1
{
 800ab2e:	b089      	sub	sp, #36	; 0x24
 800ab30:	4606      	mov	r6, r0
 800ab32:	460f      	mov	r7, r1
 800ab34:	4615      	mov	r5, r2
	if (id >= cfg->generic.channels) {
 800ab36:	d949      	bls.n	800abcc <ds3231_counter_set_alarm+0xac>
		rc = -ENOTSUP;
		goto out;
	}

	k_sem_take(&data->lock, K_FOREVER);
 800ab38:	f108 0918 	add.w	r9, r8, #24
 800ab3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab44:	4648      	mov	r0, r9
 800ab46:	f008 fe5f 	bl	8013808 <k_sem_take.constprop.0.isra.0>

	if (rp->ctrl & (MAXIM_DS3231_ALARM1 << id)) {
 800ab4a:	f898 4012 	ldrb.w	r4, [r8, #18]
 800ab4e:	40fc      	lsrs	r4, r7
 800ab50:	f014 0401 	ands.w	r4, r4, #1
 800ab54:	d137      	bne.n	800abc6 <ds3231_counter_set_alarm+0xa6>
		rc = -EBUSY;
		goto out_locked;
	}

	if ((alarm_cfg->flags & COUNTER_ALARM_CFG_ABSOLUTE) == 0) {
 800ab56:	68eb      	ldr	r3, [r5, #12]
 800ab58:	07db      	lsls	r3, r3, #31
 800ab5a:	d430      	bmi.n	800abbe <ds3231_counter_set_alarm+0x9e>
		rc = read_time(dev, &when);
 800ab5c:	4669      	mov	r1, sp
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f009 f81b 	bl	8013b9a <read_time>
		if (rc >= 0) {
 800ab64:	1e04      	subs	r4, r0, #0
 800ab66:	db07      	blt.n	800ab78 <ds3231_counter_set_alarm+0x58>
			when += alarm_cfg->ticks;
 800ab68:	686a      	ldr	r2, [r5, #4]
 800ab6a:	9b00      	ldr	r3, [sp, #0]
 800ab6c:	189b      	adds	r3, r3, r2
 800ab6e:	9a01      	ldr	r2, [sp, #4]
 800ab70:	f142 0200 	adc.w	r2, r2, #0
 800ab74:	e9cd 3200 	strd	r3, r2, [sp]
		}
	} else {
		when = alarm_cfg->ticks;
	}

	struct maxim_ds3231_alarm alarm = {
 800ab78:	2200      	movs	r2, #0
 800ab7a:	9203      	str	r2, [sp, #12]
 800ab7c:	4a15      	ldr	r2, [pc, #84]	; (800abd4 <ds3231_counter_set_alarm+0xb4>)
 800ab7e:	9204      	str	r2, [sp, #16]
 800ab80:	68aa      	ldr	r2, [r5, #8]
		.time = (uint32_t)when,
 800ab82:	9b00      	ldr	r3, [sp, #0]
	struct maxim_ds3231_alarm alarm = {
 800ab84:	9205      	str	r2, [sp, #20]
		.handler = counter_alarm_forwarder,
		.user_data = alarm_cfg->user_data,
		.flags = MAXIM_DS3231_ALARM_FLAGS_AUTODISABLE,
	};

	if (rc >= 0) {
 800ab86:	2c00      	cmp	r4, #0
	struct maxim_ds3231_alarm alarm = {
 800ab88:	f04f 0280 	mov.w	r2, #128	; 0x80
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	f88d 2018 	strb.w	r2, [sp, #24]
	if (rc >= 0) {
 800ab92:	db0c      	blt.n	800abae <ds3231_counter_set_alarm+0x8e>
		data->counter_handler[id] = alarm_cfg->callback;
 800ab94:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800ab98:	682a      	ldr	r2, [r5, #0]
 800ab9a:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
		.time = (uint32_t)when,
 800ab9e:	f8c8 30f8 	str.w	r3, [r8, #248]	; 0xf8
		data->counter_ticks[id] = alarm.time;
		rc = set_alarm(dev, id, &alarm);
 800aba2:	aa02      	add	r2, sp, #8
 800aba4:	4639      	mov	r1, r7
 800aba6:	4630      	mov	r0, r6
 800aba8:	f008 fef8 	bl	801399c <set_alarm>
 800abac:	4604      	mov	r4, r0
	}

out_locked:
	k_sem_give(&data->lock);
 800abae:	4648      	mov	r0, r9
 800abb0:	f008 fdeb 	bl	801378a <k_sem_give>

out:
	/* Throw away information counter API disallows */
	if (rc >= 0) {
 800abb4:	ea04 70e4 	and.w	r0, r4, r4, asr #31
		rc = 0;
	}

	return rc;
}
 800abb8:	b009      	add	sp, #36	; 0x24
 800abba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		when = alarm_cfg->ticks;
 800abbe:	686b      	ldr	r3, [r5, #4]
 800abc0:	e9cd 3400 	strd	r3, r4, [sp]
 800abc4:	e7d8      	b.n	800ab78 <ds3231_counter_set_alarm+0x58>
		rc = -EBUSY;
 800abc6:	f06f 040f 	mvn.w	r4, #15
 800abca:	e7f0      	b.n	800abae <ds3231_counter_set_alarm+0x8e>
		rc = -ENOTSUP;
 800abcc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800abd0:	e7f2      	b.n	800abb8 <ds3231_counter_set_alarm+0x98>
 800abd2:	bf00      	nop
 800abd4:	0801376d 	.word	0x0801376d

0800abd8 <sync_worker>:
{
 800abd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abdc:	4604      	mov	r4, r0
 800abde:	b091      	sub	sp, #68	; 0x44
	k_sem_take(&data->lock, K_FOREVER);
 800abe0:	f1a4 0670 	sub.w	r6, r4, #112	; 0x70
{
 800abe4:	af02      	add	r7, sp, #8
 *
 * @return the current value of the synchronization clock.
 */
static inline uint32_t maxim_ds3231_read_syncclock(const struct device *dev)
{
	return k_uptime_get_32();
 800abe6:	f008 fdd2 	bl	801378e <k_uptime_get_32>
	k_sem_take(&data->lock, K_FOREVER);
 800abea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abf2:	4630      	mov	r0, r6
 800abf4:	f008 fe08 	bl	8013808 <k_sem_take.constprop.0.isra.0>
	switch (data->sync_state) {
 800abf8:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800abfc:	3b01      	subs	r3, #1
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d817      	bhi.n	800ac32 <sync_worker+0x5a>
 800ac02:	e8df f003 	tbb	[pc, r3]
 800ac06:	1a02      	.short	0x1a02
 800ac08:	8833      	.short	0x8833
		sync_prep_read(data->ds3231);
 800ac0a:	f854 4c88 	ldr.w	r4, [r4, #-136]
	int rc = sc_ctrl(dev, 0U, MAXIM_DS3231_REG_CTRL_INTCN
 800ac0e:	2100      	movs	r1, #0
 800ac10:	221c      	movs	r2, #28
 800ac12:	4620      	mov	r0, r4
	struct ds3231_data *data = dev->data;
 800ac14:	6925      	ldr	r5, [r4, #16]
	int rc = sc_ctrl(dev, 0U, MAXIM_DS3231_REG_CTRL_INTCN
 800ac16:	f008 fe09 	bl	801382c <sc_ctrl>
	if (rc < 0) {
 800ac1a:	1e01      	subs	r1, r0, #0
 800ac1c:	da03      	bge.n	800ac26 <sync_worker+0x4e>
		sync_finish(dev, rc);
 800ac1e:	4620      	mov	r0, r4
	sync_finish(dev, 0);
 800ac20:	f008 fe4c 	bl	80138bc <sync_finish>
}
 800ac24:	e005      	b.n	800ac32 <sync_worker+0x5a>
	data->sync_state = SYNCSM_FINISH_READ;
 800ac26:	2302      	movs	r3, #2
 800ac28:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
	validate_isw_monitoring(dev);
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f7ff feab 	bl	800a988 <validate_isw_monitoring>
		k_sem_give(&data->lock);
 800ac32:	4630      	mov	r0, r6
 800ac34:	f008 fda9 	bl	801378a <k_sem_give>
 800ac38:	e0ce      	b.n	800add8 <sync_worker+0x200>
		sync_finish_read(data->ds3231);
 800ac3a:	f854 5c88 	ldr.w	r5, [r4, #-136]
	time_t time = 0;
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2300      	movs	r3, #0
	(void)read_time(dev, &time);
 800ac42:	f107 0110 	add.w	r1, r7, #16
 800ac46:	4628      	mov	r0, r5
	struct ds3231_data *data = dev->data;
 800ac48:	692c      	ldr	r4, [r5, #16]
	time_t time = 0;
 800ac4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	(void)read_time(dev, &time);
 800ac4e:	f008 ffa4 	bl	8013b9a <read_time>
	data->syncpoint.rtc.tv_sec = time;
 800ac52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	data->syncpoint.rtc.tv_nsec = 0;
 800ac56:	2100      	movs	r1, #0
	data->syncpoint.rtc.tv_sec = time;
 800ac58:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
	data->syncpoint.syncclock = data->isw_syncclock;
 800ac5c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	data->syncpoint.rtc.tv_nsec = 0;
 800ac60:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	data->syncpoint.syncclock = data->isw_syncclock;
 800ac64:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	sync_finish(dev, 0);
 800ac68:	4628      	mov	r0, r5
 800ac6a:	e7d9      	b.n	800ac20 <sync_worker+0x48>
		sync_prep_write(data->ds3231);
 800ac6c:	f854 3c88 	ldr.w	r3, [r4, #-136]
 800ac70:	691d      	ldr	r5, [r3, #16]
 800ac72:	f008 fd8c 	bl	801378e <k_uptime_get_32>
	uint32_t offset = syncclock - data->new_sp.syncclock;
 800ac76:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	uint32_t offset_ms = (offset % syncclock_Hz) * 1000U / syncclock_Hz;
 800ac7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	uint32_t offset = syncclock - data->new_sp.syncclock;
 800ac7e:	1ac3      	subs	r3, r0, r3
	uint32_t offset_ms = (offset % syncclock_Hz) * 1000U / syncclock_Hz;
 800ac80:	fbb3 f4f2 	udiv	r4, r3, r2
 800ac84:	fb02 3314 	mls	r3, r2, r4, r3
 800ac88:	4353      	muls	r3, r2
 800ac8a:	fbb3 f3f2 	udiv	r3, r3, r2
	time_t when = data->new_sp.rtc.tv_sec;
 800ac8e:	e9d5 2130 	ldrd	r2, r1, [r5, #192]	; 0xc0
 800ac92:	4680      	mov	r8, r0
	when += offset_s;
 800ac94:	18a4      	adds	r4, r4, r2
	offset_ms += data->new_sp.rtc.tv_nsec / NSEC_PER_USEC / USEC_PER_MSEC;
 800ac96:	4852      	ldr	r0, [pc, #328]	; (800ade0 <sync_worker+0x208>)
 800ac98:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
 800ac9c:	fbb2 f2f0 	udiv	r2, r2, r0
 800aca0:	4413      	add	r3, r2
	when += offset_s;
 800aca2:	f141 0100 	adc.w	r1, r1, #0
	if (offset_ms >= MSEC_PER_SEC) {
 800aca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acaa:	d330      	bcc.n	800ad0e <sync_worker+0x136>
		offset_ms -= MSEC_PER_SEC;
 800acac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
	uint32_t rem_ms = MSEC_PER_SEC - offset_ms;
 800acb0:	f5c3 797a 	rsb	r9, r3, #1000	; 0x3e8
	if (rem_ms < 5) {
 800acb4:	f1b9 0f04 	cmp.w	r9, #4
 800acb8:	d804      	bhi.n	800acc4 <sync_worker+0xec>
		when += 1;
 800acba:	3401      	adds	r4, #1
 800acbc:	f141 0100 	adc.w	r1, r1, #0
		rem_ms += MSEC_PER_SEC;
 800acc0:	f5c3 69fa 	rsb	r9, r3, #2000	; 0x7d0
	data->new_sp.rtc.tv_nsec = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	data->sync_state = SYNCSM_FINISH_WRITE;
 800acca:	2304      	movs	r3, #4
 800accc:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
 800acd0:	230a      	movs	r3, #10
	data->new_sp.rtc.tv_sec = when;
 800acd2:	e9c5 4130 	strd	r4, r1, [r5, #192]	; 0xc0
 800acd6:	fba9 2303 	umull	r2, r3, r9, r3
	z_impl_k_timer_start(timer, duration, period);
 800acda:	2100      	movs	r1, #0
 800acdc:	2000      	movs	r0, #0
 800acde:	e9cd 0100 	strd	r0, r1, [sp]
 800ace2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800ace6:	f003 fea7 	bl	800ea38 <z_impl_k_timer_start>
	LOG_INF("sync %u in %u ms after %u", (uint32_t)when, rem_ms, syncclock);
 800acea:	466d      	mov	r5, sp
 800acec:	4b3d      	ldr	r3, [pc, #244]	; (800ade4 <sync_worker+0x20c>)
 800acee:	483e      	ldr	r0, [pc, #248]	; (800ade8 <sync_worker+0x210>)
 800acf0:	b088      	sub	sp, #32
 800acf2:	aa02      	add	r2, sp, #8
 800acf4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800acf8:	2305      	movs	r3, #5
 800acfa:	e9c2 9806 	strd	r9, r8, [r2, #24]
 800acfe:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 800ad02:	f842 3f0c 	str.w	r3, [r2, #12]!
 800ad06:	f008 fd64 	bl	80137d2 <z_log_msg2_static_create.constprop.0>
 800ad0a:	46ad      	mov	sp, r5
}
 800ad0c:	e791      	b.n	800ac32 <sync_worker+0x5a>
		when += 1;
 800ad0e:	3401      	adds	r4, #1
 800ad10:	f141 0100 	adc.w	r1, r1, #0
 800ad14:	e7cc      	b.n	800acb0 <sync_worker+0xd8>
		sync_finish_write(data->ds3231);
 800ad16:	f854 4c88 	ldr.w	r4, [r4, #-136]
	struct ds3231_data *data = dev->data;
 800ad1a:	6926      	ldr	r6, [r4, #16]
	const struct ds3231_config *cfg = dev->config;
 800ad1c:	6865      	ldr	r5, [r4, #4]
	time_t when = data->new_sp.rtc.tv_sec;
 800ad1e:	e9d6 2330 	ldrd	r2, r3, [r6, #192]	; 0xc0
	(void)gmtime_r(&when, &tm);
 800ad22:	f107 0110 	add.w	r1, r7, #16
	time_t when = data->new_sp.rtc.tv_sec;
 800ad26:	e9c7 2300 	strd	r2, r3, [r7]
	(void)gmtime_r(&when, &tm);
 800ad2a:	4638      	mov	r0, r7
	*bp++ = offsetof(struct register_map, sec);
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	723b      	strb	r3, [r7, #8]
	(void)gmtime_r(&when, &tm);
 800ad30:	f003 ff96 	bl	800ec60 <gmtime_r>
	val = bin2bcd(tm.tm_sec);
 800ad34:	7c38      	ldrb	r0, [r7, #16]
 800ad36:	f008 fcf8 	bl	801372a <bin2bcd>
	*bp++ = val;
 800ad3a:	7278      	strb	r0, [r7, #9]
	val = bin2bcd(tm.tm_min);
 800ad3c:	7d38      	ldrb	r0, [r7, #20]
 800ad3e:	f008 fcf4 	bl	801372a <bin2bcd>
	*bp++ = val;
 800ad42:	72b8      	strb	r0, [r7, #10]
	val = bin2bcd(tm.tm_hour);
 800ad44:	7e38      	ldrb	r0, [r7, #24]
 800ad46:	f008 fcf0 	bl	801372a <bin2bcd>
	*bp++ = 1 + tm.tm_wday;
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	*bp++ = val;
 800ad4c:	72f8      	strb	r0, [r7, #11]
	*bp++ = 1 + tm.tm_wday;
 800ad4e:	3301      	adds	r3, #1
	val = bin2bcd(tm.tm_mday);
 800ad50:	7f38      	ldrb	r0, [r7, #28]
	*bp++ = 1 + tm.tm_wday;
 800ad52:	733b      	strb	r3, [r7, #12]
	val = bin2bcd(tm.tm_mday);
 800ad54:	f008 fce9 	bl	801372a <bin2bcd>
	*bp++ = val;
 800ad58:	7378      	strb	r0, [r7, #13]
	tm.tm_mon += 1;
 800ad5a:	6a38      	ldr	r0, [r7, #32]
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	6238      	str	r0, [r7, #32]
	val = bin2bcd(tm.tm_mon);
 800ad60:	b2c0      	uxtb	r0, r0
 800ad62:	f008 fce2 	bl	801372a <bin2bcd>
	if (tm.tm_year >= 100) {
 800ad66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad68:	2b63      	cmp	r3, #99	; 0x63
		val |= REG_MONCEN_CENTURY;
 800ad6a:	bfc1      	itttt	gt
 800ad6c:	f060 007f 	orngt	r0, r0, #127	; 0x7f
		tm.tm_year -= 100;
 800ad70:	3b64      	subgt	r3, #100	; 0x64
		val |= REG_MONCEN_CENTURY;
 800ad72:	b2c0      	uxtbgt	r0, r0
		tm.tm_year -= 100;
 800ad74:	627b      	strgt	r3, [r7, #36]	; 0x24
	*bp++ = val;
 800ad76:	73b8      	strb	r0, [r7, #14]
	val = bin2bcd(tm.tm_year);
 800ad78:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800ad7c:	f008 fcd5 	bl	801372a <bin2bcd>
	*bp++ = val;
 800ad80:	73f8      	strb	r0, [r7, #15]
 800ad82:	f008 fd04 	bl	801378e <k_uptime_get_32>
	int rc = i2c_write_dt(&cfg->bus, buf, bp - buf);
 800ad86:	2208      	movs	r2, #8
 800ad88:	4680      	mov	r8, r0
 800ad8a:	18b9      	adds	r1, r7, r2
 800ad8c:	f105 000c 	add.w	r0, r5, #12
 800ad90:	f008 fd3c 	bl	801380c <i2c_write_dt>
	if (rc >= 0) {
 800ad94:	1e05      	subs	r5, r0, #0
 800ad96:	db1b      	blt.n	800add0 <sync_worker+0x1f8>
		data->syncpoint.rtc.tv_sec = when;
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
		data->syncpoint.rtc.tv_nsec = 0;
 800ada4:	2200      	movs	r2, #0
 800ada6:	f8c6 20b0 	str.w	r2, [r6, #176]	; 0xb0
		data->syncpoint.syncclock = syncclock;
 800adaa:	f8c6 80b8 	str.w	r8, [r6, #184]	; 0xb8
		LOG_INF("sync %u at %u", (uint32_t)when, syncclock);
 800adae:	490f      	ldr	r1, [pc, #60]	; (800adec <sync_worker+0x214>)
 800adb0:	480d      	ldr	r0, [pc, #52]	; (800ade8 <sync_worker+0x210>)
 800adb2:	466e      	mov	r6, sp
 800adb4:	b088      	sub	sp, #32
 800adb6:	aa02      	add	r2, sp, #8
 800adb8:	e9c2 1304 	strd	r1, r3, [r2, #16]
 800adbc:	2304      	movs	r3, #4
 800adbe:	f8c2 8018 	str.w	r8, [r2, #24]
 800adc2:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 800adc6:	f842 3f0c 	str.w	r3, [r2, #12]!
 800adca:	f008 fd02 	bl	80137d2 <z_log_msg2_static_create.constprop.0>
 800adce:	46b5      	mov	sp, r6
	sync_finish(dev, rc);
 800add0:	4629      	mov	r1, r5
 800add2:	4620      	mov	r0, r4
 800add4:	f008 fd72 	bl	80138bc <sync_finish>
}
 800add8:	373c      	adds	r7, #60	; 0x3c
 800adda:	46bd      	mov	sp, r7
 800addc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ade0:	000f4240 	.word	0x000f4240
 800ade4:	08018f8d 	.word	0x08018f8d
 800ade8:	08016ea8 	.word	0x08016ea8
 800adec:	08018fa7 	.word	0x08018fa7

0800adf0 <ds3231_init>:
{
 800adf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct ds3231_data *data = dev->data;
 800adf4:	6905      	ldr	r5, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 800adf6:	6847      	ldr	r7, [r0, #4]
{
 800adf8:	b086      	sub	sp, #24
 800adfa:	4606      	mov	r6, r0
	k_sem_init(&data->lock, 0, 1);
 800adfc:	f105 0818 	add.w	r8, r5, #24
	return z_impl_k_sem_init(sem, initial_count, limit);
 800ae00:	2201      	movs	r2, #1
 800ae02:	2100      	movs	r1, #0
 800ae04:	4640      	mov	r0, r8
 800ae06:	f00b f89c 	bl	8015f42 <z_impl_k_sem_init>
	if (!device_is_ready(cfg->bus.bus)) {
 800ae0a:	68f8      	ldr	r0, [r7, #12]
	data->ds3231 = dev;
 800ae0c:	602e      	str	r6, [r5, #0]
 800ae0e:	f00b f820 	bl	8015e52 <z_device_is_ready>
	if (!device_is_ready(cfg->bus.bus)) {
 800ae12:	b998      	cbnz	r0, 800ae3c <ds3231_init+0x4c>
		LOG_ERR("I2C device not ready");
 800ae14:	4b4d      	ldr	r3, [pc, #308]	; (800af4c <ds3231_init+0x15c>)
			LOG_ERR("INTn/SQW GPIO device not ready");
 800ae16:	9304      	str	r3, [sp, #16]
 800ae18:	484d      	ldr	r0, [pc, #308]	; (800af50 <ds3231_init+0x160>)
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	aa03      	add	r2, sp, #12
 800ae1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			rc = -ENODEV;
 800ae22:	f06f 0412 	mvn.w	r4, #18
			LOG_ERR("INTn/SQW GPIO device not ready");
 800ae26:	9303      	str	r3, [sp, #12]
 800ae28:	f008 fcd3 	bl	80137d2 <z_log_msg2_static_create.constprop.0>
	k_sem_give(&data->lock);
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	f008 fcac 	bl	801378a <k_sem_give>
}
 800ae32:	ea04 70e4 	and.w	r0, r4, r4, asr #31
 800ae36:	b006      	add	sp, #24
 800ae38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t addr = 0;
 800ae3c:	f04f 0a00 	mov.w	sl, #0
	struct ds3231_data *data = dev->data;
 800ae40:	f8d6 9010 	ldr.w	r9, [r6, #16]
	const struct ds3231_config *cfg = dev->config;
 800ae44:	6874      	ldr	r4, [r6, #4]
	uint8_t addr = 0;
 800ae46:	f88d a000 	strb.w	sl, [sp]
 800ae4a:	f008 fca0 	bl	801378e <k_uptime_get_32>
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &data->registers,
 800ae4e:	2313      	movs	r3, #19
	data->syncclock_base = maxim_ds3231_read_syncclock(dev);
 800ae50:	f8c9 00e8 	str.w	r0, [r9, #232]	; 0xe8
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &data->registers,
 800ae54:	f109 0204 	add.w	r2, r9, #4
 800ae58:	4669      	mov	r1, sp
 800ae5a:	f104 000c 	add.w	r0, r4, #12
 800ae5e:	f008 fcbb 	bl	80137d8 <i2c_write_read_dt.constprop.0>
 800ae62:	4604      	mov	r4, r0
 800ae64:	f008 fc93 	bl	801378e <k_uptime_get_32>
	if (rc < 0) {
 800ae68:	4554      	cmp	r4, sl
 800ae6a:	db0d      	blt.n	800ae88 <ds3231_init+0x98>
	data->rtc_base = decode_rtc(data);
 800ae6c:	4648      	mov	r0, r9
 800ae6e:	f008 fe5a 	bl	8013b26 <decode_rtc>
	rc = sc_ctrl(dev,
 800ae72:	221b      	movs	r2, #27
	data->rtc_base = decode_rtc(data);
 800ae74:	e9c9 0a38 	strd	r0, sl, [r9, #224]	; 0xe0
	rc = sc_ctrl(dev,
 800ae78:	2104      	movs	r1, #4
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f008 fcd6 	bl	801382c <sc_ctrl>
	if (rc < 0) {
 800ae80:	1e04      	subs	r4, r0, #0
 800ae82:	da0d      	bge.n	800aea0 <ds3231_init+0xb0>
		LOG_WRN("Failed to reset config: %d", rc);
 800ae84:	4b33      	ldr	r3, [pc, #204]	; (800af54 <ds3231_init+0x164>)
 800ae86:	e000      	b.n	800ae8a <ds3231_init+0x9a>
		LOG_WRN("Failed to fetch registers: %d", rc);
 800ae88:	4b33      	ldr	r3, [pc, #204]	; (800af58 <ds3231_init+0x168>)
		LOG_WRN("Failed to reset config: %d", rc);
 800ae8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae8e:	2303      	movs	r3, #3
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	aa03      	add	r2, sp, #12
 800ae94:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
				LOG_ERR("Failed to configure ISW callback: %d",
 800ae98:	482d      	ldr	r0, [pc, #180]	; (800af50 <ds3231_init+0x160>)
 800ae9a:	f008 fc9a 	bl	80137d2 <z_log_msg2_static_create.constprop.0>
 800ae9e:	e7c5      	b.n	800ae2c <ds3231_init+0x3c>
	if (cfg->isw_gpios.port != NULL) {
 800aea0:	6978      	ldr	r0, [r7, #20]
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d0c2      	beq.n	800ae2c <ds3231_init+0x3c>
 800aea6:	f00a ffd4 	bl	8015e52 <z_device_is_ready>
		if (!device_is_ready(cfg->isw_gpios.port)) {
 800aeaa:	b908      	cbnz	r0, 800aeb0 <ds3231_init+0xc0>
			LOG_ERR("INTn/SQW GPIO device not ready");
 800aeac:	4b2b      	ldr	r3, [pc, #172]	; (800af5c <ds3231_init+0x16c>)
 800aeae:	e7b2      	b.n	800ae16 <ds3231_init+0x26>
		k_timer_init(&data->sync_timer, sync_timer_handler, NULL);
 800aeb0:	4652      	mov	r2, sl
 800aeb2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800aeb6:	492a      	ldr	r1, [pc, #168]	; (800af60 <ds3231_init+0x170>)
 800aeb8:	f00b f9d3 	bl	8016262 <k_timer_init>
		k_work_init(&data->alarm_work, alarm_worker);
 800aebc:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800aec0:	4928      	ldr	r1, [pc, #160]	; (800af64 <ds3231_init+0x174>)
 800aec2:	f00b f860 	bl	8015f86 <k_work_init>
		k_work_init(&data->sqw_work, sqw_worker);
 800aec6:	f105 0078 	add.w	r0, r5, #120	; 0x78
 800aeca:	4927      	ldr	r1, [pc, #156]	; (800af68 <ds3231_init+0x178>)
 800aecc:	f00b f85b 	bl	8015f86 <k_work_init>
		k_work_init(&data->sync_work, sync_worker);
 800aed0:	f105 0088 	add.w	r0, r5, #136	; 0x88
 800aed4:	4925      	ldr	r1, [pc, #148]	; (800af6c <ds3231_init+0x17c>)
 800aed6:	f00b f856 	bl	8015f86 <k_work_init>
				   BIT(cfg->isw_gpios.pin));
 800aeda:	7e39      	ldrb	r1, [r7, #24]
	return gpio_pin_configure(spec->port,
 800aedc:	6978      	ldr	r0, [r7, #20]
 800aede:	2301      	movs	r3, #1
 800aee0:	fa03 f401 	lsl.w	r4, r3, r1
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 800aee4:	4b22      	ldr	r3, [pc, #136]	; (800af70 <ds3231_init+0x180>)
	callback->pin_mask = pin_mask;
 800aee6:	e9c5 3427 	strd	r3, r4, [r5, #156]	; 0x9c
				  spec->dt_flags | extra_flags);
 800aeea:	8b7b      	ldrh	r3, [r7, #26]
	return gpio_pin_configure(spec->port,
 800aeec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
 800aef0:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
 800aef2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800aef6:	f013 0f01 	tst.w	r3, #1
 800aefa:	6833      	ldr	r3, [r6, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800aefc:	bf14      	ite	ne
 800aefe:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800af00:	43a3      	biceq	r3, r4
 800af02:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 800af04:	f8dc 3000 	ldr.w	r3, [ip]
 800af08:	4798      	blx	r3
		if (rc >= 0) {
 800af0a:	1e04      	subs	r4, r0, #0
 800af0c:	db8e      	blt.n	800ae2c <ds3231_init+0x3c>
			rc = gpio_pin_interrupt_configure_dt(&cfg->isw_gpios,
 800af0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af12:	f107 0014 	add.w	r0, r7, #20
 800af16:	f008 fc11 	bl	801373c <gpio_pin_interrupt_configure_dt>
		if (rc >= 0) {
 800af1a:	1e04      	subs	r4, r0, #0
 800af1c:	db86      	blt.n	800ae2c <ds3231_init+0x3c>
			rc = gpio_add_callback(cfg->isw_gpios.port,
 800af1e:	6978      	ldr	r0, [r7, #20]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 800af20:	6883      	ldr	r3, [r0, #8]
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	b17b      	cbz	r3, 800af46 <ds3231_init+0x156>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 800af26:	2201      	movs	r2, #1
 800af28:	f105 0198 	add.w	r1, r5, #152	; 0x98
 800af2c:	4798      	blx	r3
			if (rc < 0) {
 800af2e:	1e04      	subs	r4, r0, #0
 800af30:	f6bf af7c 	bge.w	800ae2c <ds3231_init+0x3c>
				LOG_ERR("Failed to configure ISW callback: %d",
 800af34:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <ds3231_init+0x184>)
 800af36:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af3a:	2303      	movs	r3, #3
 800af3c:	9303      	str	r3, [sp, #12]
 800af3e:	aa03      	add	r2, sp, #12
 800af40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800af44:	e7a8      	b.n	800ae98 <ds3231_init+0xa8>
		return -ENOTSUP;
 800af46:	f06f 0485 	mvn.w	r4, #133	; 0x85
 800af4a:	e7f3      	b.n	800af34 <ds3231_init+0x144>
 800af4c:	08018fb5 	.word	0x08018fb5
 800af50:	08016ea8 	.word	0x08016ea8
 800af54:	08018fe8 	.word	0x08018fe8
 800af58:	08018fca 	.word	0x08018fca
 800af5c:	08019003 	.word	0x08019003
 800af60:	0800a959 	.word	0x0800a959
 800af64:	0800aa29 	.word	0x0800aa29
 800af68:	0801379f 	.word	0x0801379f
 800af6c:	0800abd9 	.word	0x0800abd9
 800af70:	080137a3 	.word	0x080137a3
 800af74:	08019022 	.word	0x08019022

0800af78 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800af78:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800af7a:	4b08      	ldr	r3, [pc, #32]	; (800af9c <uart_console_init+0x24>)
 800af7c:	4808      	ldr	r0, [pc, #32]	; (800afa0 <uart_console_init+0x28>)
 800af7e:	6018      	str	r0, [r3, #0]
 800af80:	f00a ff67 	bl	8015e52 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 800af84:	b138      	cbz	r0, 800af96 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
 800af86:	4807      	ldr	r0, [pc, #28]	; (800afa4 <uart_console_init+0x2c>)
 800af88:	f7f9 fb28 	bl	80045dc <__stdout_hook_install>
	__printk_hook_install(console_out);
 800af8c:	4805      	ldr	r0, [pc, #20]	; (800afa4 <uart_console_init+0x2c>)
 800af8e:	f7f7 f96d 	bl	800226c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 800af92:	2000      	movs	r0, #0
}
 800af94:	bd08      	pop	{r3, pc}
		return -ENODEV;
 800af96:	f06f 0012 	mvn.w	r0, #18
 800af9a:	e7fb      	b.n	800af94 <uart_console_init+0x1c>
 800af9c:	20002158 	.word	0x20002158
 800afa0:	08016b90 	.word	0x08016b90
 800afa4:	0800afa9 	.word	0x0800afa9

0800afa8 <console_out>:
	if ('\n' == c) {
 800afa8:	280a      	cmp	r0, #10
{
 800afaa:	b538      	push	{r3, r4, r5, lr}
 800afac:	4d07      	ldr	r5, [pc, #28]	; (800afcc <console_out+0x24>)
 800afae:	4604      	mov	r4, r0
	if ('\n' == c) {
 800afb0:	d104      	bne.n	800afbc <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 800afb2:	6828      	ldr	r0, [r5, #0]
 800afb4:	6883      	ldr	r3, [r0, #8]
 800afb6:	210d      	movs	r1, #13
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 800afbc:	6828      	ldr	r0, [r5, #0]
 800afbe:	6883      	ldr	r3, [r0, #8]
 800afc0:	b2e1      	uxtb	r1, r4
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	4798      	blx	r3
}
 800afc6:	4620      	mov	r0, r4
 800afc8:	bd38      	pop	{r3, r4, r5, pc}
 800afca:	bf00      	nop
 800afcc:	20002158 	.word	0x20002158

0800afd0 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800afd0:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 800afd2:	6903      	ldr	r3, [r0, #16]
 800afd4:	6058      	str	r0, [r3, #4]
					(clock_control_subsys_t *)&cfg->pclken);
 800afd6:	6845      	ldr	r5, [r0, #4]
 800afd8:	350c      	adds	r5, #12
 800afda:	4c08      	ldr	r4, [pc, #32]	; (800affc <gpio_stm32_init+0x2c>)
 800afdc:	4620      	mov	r0, r4
 800afde:	f00a ff38 	bl	8015e52 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800afe2:	b138      	cbz	r0, 800aff4 <gpio_stm32_init+0x24>
	return api->on(dev, sys);
 800afe4:	68a3      	ldr	r3, [r4, #8]
 800afe6:	4629      	mov	r1, r5
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4620      	mov	r0, r4
 800afec:	4798      	blx	r3

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 800afee:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 800aff4:	f06f 0012 	mvn.w	r0, #18
 800aff8:	e7f9      	b.n	800afee <gpio_stm32_init+0x1e>
 800affa:	bf00      	nop
 800affc:	08016b00 	.word	0x08016b00

0800b000 <gpio_stm32_pin_interrupt_configure>:
{
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	460c      	mov	r4, r1
 800b004:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 800b006:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 800b00a:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800b00c:	6902      	ldr	r2, [r0, #16]
{
 800b00e:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800b010:	d124      	bne.n	800b05c <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800b012:	f004 0303 	and.w	r3, r4, #3
 800b016:	3304      	adds	r3, #4
 800b018:	009a      	lsls	r2, r3, #2
 800b01a:	230f      	movs	r3, #15
 800b01c:	4093      	lsls	r3, r2
 800b01e:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT)) >> POSITION_VAL(Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT));
 800b022:	f003 0203 	and.w	r2, r3, #3
 800b026:	492f      	ldr	r1, [pc, #188]	; (800b0e4 <gpio_stm32_pin_interrupt_configure+0xe4>)
 800b028:	3202      	adds	r2, #2
 800b02a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b02e:	0c19      	lsrs	r1, r3, #16
 800b030:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b034:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 800b038:	fab2 f282 	clz	r2, r2
 800b03c:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	429a      	cmp	r2, r3
 800b042:	d109      	bne.n	800b058 <gpio_stm32_pin_interrupt_configure+0x58>
			stm32_exti_disable(pin);
 800b044:	4620      	mov	r0, r4
 800b046:	f7fe fedf 	bl	8009e08 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800b04a:	4620      	mov	r0, r4
 800b04c:	f7fe ff32 	bl	8009eb4 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 800b050:	2100      	movs	r1, #0
 800b052:	4620      	mov	r0, r4
 800b054:	f7fe fee8 	bl	8009e28 <stm32_exti_trigger>
	int err = 0;
 800b058:	2500      	movs	r5, #0
 800b05a:	e037      	b.n	800b0cc <gpio_stm32_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
 800b05c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800b060:	d03a      	beq.n	800b0d8 <gpio_stm32_pin_interrupt_configure+0xd8>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800b062:	4921      	ldr	r1, [pc, #132]	; (800b0e8 <gpio_stm32_pin_interrupt_configure+0xe8>)
 800b064:	4620      	mov	r0, r4
 800b066:	f7fe ff13 	bl	8009e90 <stm32_exti_set_callback>
 800b06a:	4605      	mov	r5, r0
 800b06c:	bbb8      	cbnz	r0, 800b0de <gpio_stm32_pin_interrupt_configure+0xde>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800b06e:	f004 0303 	and.w	r3, r4, #3
 800b072:	3304      	adds	r3, #4
 800b074:	009a      	lsls	r2, r3, #2
 800b076:	230f      	movs	r3, #15
 800b078:	4093      	lsls	r3, r2
 800b07a:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT), (Port << ((POSITION_VAL((Line >> LL_SYSCFG_EXTI_REGISTER_PINPOS_SHFT))) & 0x0000000FUL)));
 800b07e:	f003 0203 	and.w	r2, r3, #3
 800b082:	0092      	lsls	r2, r2, #2
 800b084:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b088:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	LL_SYSCFG_SetEXTISource(port, line);
 800b08c:	68b8      	ldr	r0, [r7, #8]
 800b08e:	6897      	ldr	r7, [r2, #8]
 800b090:	0c19      	lsrs	r1, r3, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b092:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 800b096:	fab1 f181 	clz	r1, r1
 800b09a:	f001 010f 	and.w	r1, r1, #15
 800b09e:	ea27 4313 	bic.w	r3, r7, r3, lsr #16
 800b0a2:	fa00 f101 	lsl.w	r1, r0, r1
 800b0a6:	430b      	orrs	r3, r1
	switch (trig) {
 800b0a8:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
 800b0ac:	6093      	str	r3, [r2, #8]
 800b0ae:	d00f      	beq.n	800b0d0 <gpio_stm32_pin_interrupt_configure+0xd0>
 800b0b0:	f1b6 6fc0 	cmp.w	r6, #100663296	; 0x6000000
 800b0b4:	d00e      	beq.n	800b0d4 <gpio_stm32_pin_interrupt_configure+0xd4>
 800b0b6:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800b0ba:	bf14      	ite	ne
 800b0bc:	2100      	movne	r1, #0
 800b0be:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f7fe feb1 	bl	8009e28 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f7fe fe8e 	bl	8009de8 <stm32_exti_enable>
}
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		edge = STM32_EXTI_TRIG_RISING;
 800b0d0:	2101      	movs	r1, #1
 800b0d2:	e7f5      	b.n	800b0c0 <gpio_stm32_pin_interrupt_configure+0xc0>
		edge = STM32_EXTI_TRIG_BOTH;
 800b0d4:	2103      	movs	r1, #3
 800b0d6:	e7f3      	b.n	800b0c0 <gpio_stm32_pin_interrupt_configure+0xc0>
		err = -ENOTSUP;
 800b0d8:	f06f 0585 	mvn.w	r5, #133	; 0x85
 800b0dc:	e7f6      	b.n	800b0cc <gpio_stm32_pin_interrupt_configure+0xcc>
		err = -EBUSY;
 800b0de:	f06f 050f 	mvn.w	r5, #15
	return err;
 800b0e2:	e7f3      	b.n	800b0cc <gpio_stm32_pin_interrupt_configure+0xcc>
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	08013e17 	.word	0x08013e17

0800b0ec <msg_init>:
#define STM32_I2C_TRANSFER_TIMEOUT_MSEC  500

static inline void msg_init(const struct device *dev, struct i2c_msg *msg,
			    uint8_t *next_msg_flags, uint16_t slave,
			    uint32_t transfer)
{
 800b0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0ee:	4606      	mov	r6, r0
	const struct i2c_stm32_config *cfg = dev->config;
	struct i2c_stm32_data *data = dev->data;
	I2C_TypeDef *i2c = cfg->i2c;
 800b0f0:	6840      	ldr	r0, [r0, #4]
  * @param  TransferSize This parameter must be a value between Min_Data=0x00 and Max_Data=0xFF.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800b0f2:	684d      	ldr	r5, [r1, #4]
 800b0f4:	68c4      	ldr	r4, [r0, #12]
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800b0f6:	6860      	ldr	r0, [r4, #4]
 800b0f8:	01c0      	lsls	r0, r0, #7
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800b0fa:	ea4f 4505 	mov.w	r5, r5, lsl #16
  return ((READ_BIT(I2Cx->CR2, I2C_CR2_RELOAD) == (I2C_CR2_RELOAD)) ? 1UL : 0UL);
 800b0fe:	d505      	bpl.n	800b10c <msg_init+0x20>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800b100:	6863      	ldr	r3, [r4, #4]
 800b102:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800b106:	432b      	orrs	r3, r5
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800b108:	6063      	str	r3, [r4, #4]
#endif
		LL_I2C_Enable(i2c);

		LL_I2C_GenerateStartCondition(i2c);
	}
}
 800b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (I2C_ADDR_10_BITS & data->dev_config) {
 800b10c:	6930      	ldr	r0, [r6, #16]
 800b10e:	4f1d      	ldr	r7, [pc, #116]	; (800b184 <msg_init+0x98>)
 800b110:	6b00      	ldr	r0, [r0, #48]	; 0x30
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800b112:	6866      	ldr	r6, [r4, #4]
 800b114:	f010 0f01 	tst.w	r0, #1
 800b118:	d028      	beq.n	800b16c <msg_init+0x80>
 800b11a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 800b11e:	6066      	str	r6, [r4, #4]
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800b120:	6860      	ldr	r0, [r4, #4]
 800b122:	4038      	ands	r0, r7
 800b124:	4318      	orrs	r0, r3
 800b126:	6060      	str	r0, [r4, #4]
		if (!(msg->flags & I2C_MSG_STOP) && next_msg_flags &&
 800b128:	7a0b      	ldrb	r3, [r1, #8]
 800b12a:	0799      	lsls	r1, r3, #30
 800b12c:	d426      	bmi.n	800b17c <msg_init+0x90>
 800b12e:	b32a      	cbz	r2, 800b17c <msg_init+0x90>
 800b130:	7813      	ldrb	r3, [r2, #0]
 800b132:	075b      	lsls	r3, r3, #29
 800b134:	d422      	bmi.n	800b17c <msg_init+0x90>
  SET_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800b136:	6863      	ldr	r3, [r4, #4]
 800b138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800b13c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800b13e:	6863      	ldr	r3, [r4, #4]
 800b140:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b144:	6063      	str	r3, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800b146:	6862      	ldr	r2, [r4, #4]
 800b148:	9b05      	ldr	r3, [sp, #20]
 800b14a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b14e:	431a      	orrs	r2, r3
 800b150:	6062      	str	r2, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800b152:	6863      	ldr	r3, [r4, #4]
 800b154:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800b158:	432b      	orrs	r3, r5
 800b15a:	6063      	str	r3, [r4, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	f043 0301 	orr.w	r3, r3, #1
 800b162:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800b164:	6863      	ldr	r3, [r4, #4]
 800b166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b16a:	e7cd      	b.n	800b108 <msg_init+0x1c>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_ADD10, AddressingMode);
 800b16c:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 800b170:	6066      	str	r6, [r4, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800b172:	6860      	ldr	r0, [r4, #4]
 800b174:	4038      	ands	r0, r7
 800b176:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800b17a:	e7d4      	b.n	800b126 <msg_init+0x3a>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 800b17c:	6863      	ldr	r3, [r4, #4]
 800b17e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b182:	e7db      	b.n	800b13c <msg_init+0x50>
 800b184:	fffffc00 	.word	0xfffffc00

0800b188 <stm32_i2c_configure_timing>:
	return msg_done(dev, msg->flags);
}
#endif

int stm32_i2c_configure_timing(const struct device *dev, uint32_t clock)
{
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 800b18c:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800b18e:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800b192:	f8d7 800c 	ldr.w	r8, [r7, #12]
{
 800b196:	b087      	sub	sp, #28
 800b198:	460c      	mov	r4, r1
	uint32_t i2c_h_min_time, i2c_l_min_time;
	uint32_t presc = 1U;
	uint32_t timing = 0U;

	/*  Look for an adequate preset timing value */
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 800b19a:	2500      	movs	r5, #0
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	42ab      	cmp	r3, r5
 800b1a0:	d83d      	bhi.n	800b21e <stm32_i2c_configure_timing+0x96>
			return 0;
		}
	}

	/* No preset timing was provided, let's dynamically configure */
	switch (I2C_SPEED_GET(data->dev_config)) {
 800b1a2:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800b1a6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d07c      	beq.n	800b2a8 <stm32_i2c_configure_timing+0x120>
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	f040 8086 	bne.w	800b2c0 <stm32_i2c_configure_timing+0x138>
 800b1b4:	f240 5014 	movw	r0, #1300	; 0x514
 800b1b8:	f44f 7616 	mov.w	r6, #600	; 0x258
 800b1bc:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800b1c0:	f240 1777 	movw	r7, #375	; 0x177
	}

	/* Calculate period until prescaler matches */
	do {
		uint32_t t_presc = clock / presc;
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800b1c4:	f8df c100 	ldr.w	ip, [pc, #256]	; 800b2c8 <stm32_i2c_configure_timing+0x140>
	switch (I2C_SPEED_GET(data->dev_config)) {
 800b1c8:	2102      	movs	r1, #2
		uint32_t t_presc = clock / presc;
 800b1ca:	1e4b      	subs	r3, r1, #1
 800b1cc:	fbb4 f3f3 	udiv	r3, r4, r3
		uint32_t ns_presc = NSEC_PER_SEC / t_presc;
 800b1d0:	fbbc f3f3 	udiv	r3, ip, r3
		uint32_t sclh = i2c_h_min_time / ns_presc;
 800b1d4:	fbb6 fef3 	udiv	lr, r6, r3
		uint32_t scll = i2c_l_min_time / ns_presc;
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
		uint32_t scldel = i2c_setup_time_min / ns_presc;

		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800b1d8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800b1dc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800b1e0:	d86b      	bhi.n	800b2ba <stm32_i2c_configure_timing+0x132>
		uint32_t scll = i2c_l_min_time / ns_presc;
 800b1e2:	fbb0 f9f3 	udiv	r9, r0, r3
		if ((sclh - 1) > 255 ||  (scll - 1) > 255) {
 800b1e6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b1ea:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800b1ee:	d864      	bhi.n	800b2ba <stm32_i2c_configure_timing+0x132>
		uint32_t sdadel = i2c_hold_time_min / ns_presc;
 800b1f0:	fbb7 f2f3 	udiv	r2, r7, r3
			++presc;
			continue;
		}

		if (sdadel > 15 || (scldel - 1) > 15) {
 800b1f4:	2a0f      	cmp	r2, #15
 800b1f6:	d860      	bhi.n	800b2ba <stm32_i2c_configure_timing+0x132>
		uint32_t scldel = i2c_setup_time_min / ns_presc;
 800b1f8:	fbb5 f3f3 	udiv	r3, r5, r3
		if (sdadel > 15 || (scldel - 1) > 15) {
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	2b0f      	cmp	r3, #15
 800b200:	d85b      	bhi.n	800b2ba <stm32_i2c_configure_timing+0x132>
			++presc;
			continue;
		}

		timing = __LL_I2C_CONVERT_TIMINGS(presc - 1,
 800b202:	0412      	lsls	r2, r2, #16
 800b204:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 800b208:	ea43 0309 	orr.w	r3, r3, r9
 800b20c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800b210:	3902      	subs	r1, #2
 800b212:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800b216:	f8c8 3010 	str.w	r3, [r8, #16]
		return -EINVAL;
	}

	LL_I2C_SetTiming(i2c, timing);

	return 0;
 800b21a:	2000      	movs	r0, #0
 800b21c:	e02c      	b.n	800b278 <stm32_i2c_configure_timing+0xf0>
		const struct i2c_config_timing *preset = &cfg->timings[i];
 800b21e:	f8d7 b018 	ldr.w	fp, [r7, #24]
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
 800b222:	4a2a      	ldr	r2, [pc, #168]	; (800b2cc <stm32_i2c_configure_timing+0x144>)
 800b224:	260c      	movs	r6, #12
 800b226:	436e      	muls	r6, r5
 800b228:	eb0b 0a06 	add.w	sl, fp, r6
		uint32_t speed = i2c_map_dt_bitrate(preset->i2c_speed);
 800b22c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b230:	4293      	cmp	r3, r2
 800b232:	d02f      	beq.n	800b294 <stm32_i2c_configure_timing+0x10c>
 800b234:	d823      	bhi.n	800b27e <stm32_i2c_configure_timing+0xf6>
 800b236:	4a26      	ldr	r2, [pc, #152]	; (800b2d0 <stm32_i2c_configure_timing+0x148>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d02d      	beq.n	800b298 <stm32_i2c_configure_timing+0x110>
 800b23c:	4a25      	ldr	r2, [pc, #148]	; (800b2d4 <stm32_i2c_configure_timing+0x14c>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d02c      	beq.n	800b29c <stm32_i2c_configure_timing+0x114>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");
 800b242:	4b25      	ldr	r3, [pc, #148]	; (800b2d8 <stm32_i2c_configure_timing+0x150>)
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	2302      	movs	r3, #2
 800b248:	9303      	str	r3, [sp, #12]
 800b24a:	2300      	movs	r3, #0
 800b24c:	4823      	ldr	r0, [pc, #140]	; (800b2dc <stm32_i2c_configure_timing+0x154>)
 800b24e:	aa03      	add	r2, sp, #12
 800b250:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b254:	f006 f919 	bl	801148a <z_impl_z_log_msg2_static_create>

	return 0;
 800b258:	2300      	movs	r3, #0
		if ((I2C_SPEED_GET(speed) == I2C_SPEED_GET(data->dev_config))
 800b25a:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 800b25e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800b262:	ea90 0053 	eors.w	r0, r0, r3, lsr #1
 800b266:	d11d      	bne.n	800b2a4 <stm32_i2c_configure_timing+0x11c>
		   && (preset->periph_clock == clock)) {
 800b268:	f85b 3006 	ldr.w	r3, [fp, r6]
 800b26c:	42a3      	cmp	r3, r4
 800b26e:	d119      	bne.n	800b2a4 <stm32_i2c_configure_timing+0x11c>
			LL_I2C_SetTiming(i2c, preset->timing_setting);
 800b270:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b274:	f8c8 3010 	str.w	r3, [r8, #16]
}
 800b278:	b007      	add	sp, #28
 800b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (bitrate) {
 800b27e:	4a18      	ldr	r2, [pc, #96]	; (800b2e0 <stm32_i2c_configure_timing+0x158>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00d      	beq.n	800b2a0 <stm32_i2c_configure_timing+0x118>
 800b284:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800b288:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d1d8      	bne.n	800b242 <stm32_i2c_configure_timing+0xba>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800b290:	230a      	movs	r3, #10
 800b292:	e7e2      	b.n	800b25a <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800b294:	2306      	movs	r3, #6
 800b296:	e7e0      	b.n	800b25a <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800b298:	2302      	movs	r3, #2
 800b29a:	e7de      	b.n	800b25a <stm32_i2c_configure_timing+0xd2>
	switch (bitrate) {
 800b29c:	2304      	movs	r3, #4
 800b29e:	e7dc      	b.n	800b25a <stm32_i2c_configure_timing+0xd2>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800b2a0:	2308      	movs	r3, #8
 800b2a2:	e7da      	b.n	800b25a <stm32_i2c_configure_timing+0xd2>
	for (uint32_t i = 0; i < cfg->n_timings; i++) {
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	e779      	b.n	800b19c <stm32_i2c_configure_timing+0x14>
		i2c_l_min_time = 4700U;
 800b2a8:	f241 205c 	movw	r0, #4700	; 0x125c
		i2c_h_min_time = 4000U;
 800b2ac:	f44f 667a 	mov.w	r6, #4000	; 0xfa0
		i2c_setup_time_min = 1250U;
 800b2b0:	f240 45e2 	movw	r5, #1250	; 0x4e2
		i2c_hold_time_min = 500U;
 800b2b4:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800b2b8:	e784      	b.n	800b1c4 <stm32_i2c_configure_timing+0x3c>
	} while (presc < 16);
 800b2ba:	3101      	adds	r1, #1
 800b2bc:	2911      	cmp	r1, #17
 800b2be:	d184      	bne.n	800b1ca <stm32_i2c_configure_timing+0x42>
	switch (I2C_SPEED_GET(data->dev_config)) {
 800b2c0:	f06f 0015 	mvn.w	r0, #21
 800b2c4:	e7d8      	b.n	800b278 <stm32_i2c_configure_timing+0xf0>
 800b2c6:	bf00      	nop
 800b2c8:	3b9aca00 	.word	0x3b9aca00
 800b2cc:	000f4240 	.word	0x000f4240
 800b2d0:	000186a0 	.word	0x000186a0
 800b2d4:	00061a80 	.word	0x00061a80
 800b2d8:	08019057 	.word	0x08019057
 800b2dc:	08016ee8 	.word	0x08016ee8
 800b2e0:	0033e140 	.word	0x0033e140

0800b2e4 <i2c_stm32_runtime_configure>:
LOG_MODULE_REGISTER(i2c_ll_stm32);

#include "i2c-priv.h"

int i2c_stm32_runtime_configure(const struct device *dev, uint32_t config)
{
 800b2e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct i2c_stm32_config *cfg = dev->config;
 800b2e8:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 800b2ea:	f8d0 9010 	ldr.w	r9, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 800b2ee:	68fe      	ldr	r6, [r7, #12]
{
 800b2f0:	b089      	sub	sp, #36	; 0x24
	uint32_t clock = 0U;
 800b2f2:	2200      	movs	r2, #0
{
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	460c      	mov	r4, r1
	uint32_t clock = 0U;
 800b2f8:	9201      	str	r2, [sp, #4]
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			(clock_control_subsys_t *) &cfg->pclken, &clock) < 0) {
 800b2fa:	3704      	adds	r7, #4
 800b2fc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800b378 <i2c_stm32_runtime_configure+0x94>
 800b300:	4640      	mov	r0, r8
 800b302:	f00a fda6 	bl	8015e52 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 800b306:	b980      	cbnz	r0, 800b32a <i2c_stm32_runtime_configure+0x46>
		LOG_ERR("Failed call clock_control_get_rate");
 800b308:	4b1c      	ldr	r3, [pc, #112]	; (800b37c <i2c_stm32_runtime_configure+0x98>)
 800b30a:	9306      	str	r3, [sp, #24]
 800b30c:	2302      	movs	r3, #2
 800b30e:	9305      	str	r3, [sp, #20]
 800b310:	481b      	ldr	r0, [pc, #108]	; (800b380 <i2c_stm32_runtime_configure+0x9c>)
 800b312:	2300      	movs	r3, #0
 800b314:	aa05      	add	r2, sp, #20
 800b316:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800b31a:	f06f 0504 	mvn.w	r5, #4
 800b31e:	f006 f8b4 	bl	801148a <z_impl_z_log_msg2_static_create>
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);
	ret = stm32_i2c_configure_timing(dev, clock);
	k_sem_give(&data->bus_mutex);

	return ret;
}
 800b322:	4628      	mov	r0, r5
 800b324:	b009      	add	sp, #36	; 0x24
 800b326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800b32a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0e9      	beq.n	800b308 <i2c_stm32_runtime_configure+0x24>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800b334:	aa01      	add	r2, sp, #4
 800b336:	4639      	mov	r1, r7
 800b338:	4640      	mov	r0, r8
 800b33a:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dbe3      	blt.n	800b308 <i2c_stm32_runtime_configure+0x24>
	data->dev_config = config;
 800b340:	f8c9 4030 	str.w	r4, [r9, #48]	; 0x30
	k_sem_take(&data->bus_mutex, K_FOREVER);
 800b344:	f109 0918 	add.w	r9, r9, #24
	return z_impl_k_sem_take(sem, timeout);
 800b348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b350:	4648      	mov	r0, r9
 800b352:	f002 fd15 	bl	800dd80 <z_impl_k_sem_take>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800b356:	6833      	ldr	r3, [r6, #0]
	ret = stm32_i2c_configure_timing(dev, clock);
 800b358:	9901      	ldr	r1, [sp, #4]
 800b35a:	f023 0301 	bic.w	r3, r3, #1
 800b35e:	6033      	str	r3, [r6, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800b360:	6833      	ldr	r3, [r6, #0]
 800b362:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b366:	6033      	str	r3, [r6, #0]
 800b368:	4628      	mov	r0, r5
 800b36a:	f7ff ff0d 	bl	800b188 <stm32_i2c_configure_timing>
 800b36e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800b370:	4648      	mov	r0, r9
 800b372:	f002 fcdf 	bl	800dd34 <z_impl_k_sem_give>
}
 800b376:	e7d4      	b.n	800b322 <i2c_stm32_runtime_configure+0x3e>
 800b378:	08016b00 	.word	0x08016b00
 800b37c:	08019082 	.word	0x08019082
 800b380:	08016ee0 	.word	0x08016ee0

0800b384 <i2c_stm32_init>:
	.slave_unregister = i2c_stm32_slave_unregister,
#endif
};

static int i2c_stm32_init(const struct device *dev)
{
 800b384:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	const struct i2c_stm32_config *cfg = dev->config;
 800b386:	6845      	ldr	r5, [r0, #4]
	uint32_t bitrate_cfg;
	int ret;
	struct i2c_stm32_data *data = dev->data;
 800b388:	6906      	ldr	r6, [r0, #16]
{
 800b38a:	b087      	sub	sp, #28
 800b38c:	4607      	mov	r7, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 800b38e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b392:	2100      	movs	r1, #0
 800b394:	4630      	mov	r0, r6
 800b396:	f00a fdd4 	bl	8015f42 <z_impl_k_sem_init>
#ifdef CONFIG_I2C_STM32_INTERRUPT
	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	cfg->irq_config_func(dev);
 800b39a:	682b      	ldr	r3, [r5, #0]
 800b39c:	4638      	mov	r0, r7
 800b39e:	4798      	blx	r3
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800b3a0:	6968      	ldr	r0, [r5, #20]
 800b3a2:	466a      	mov	r2, sp
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	f009 fb33 	bl	8014a10 <pinctrl_lookup_state>
	if (ret < 0) {
 800b3aa:	1e04      	subs	r4, r0, #0
 800b3ac:	db07      	blt.n	800b3be <i2c_stm32_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 800b3ae:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	7919      	ldrb	r1, [r3, #4]
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	f001 f977 	bl	800c6a8 <pinctrl_configure_pins>
#endif

	/* Configure dt provided device signals when available */
	ret = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (ret < 0) {
 800b3ba:	1e04      	subs	r4, r0, #0
 800b3bc:	da0e      	bge.n	800b3dc <i2c_stm32_init+0x58>
		LOG_ERR("I2C pinctrl setup failed (%d)", ret);
 800b3be:	4b37      	ldr	r3, [pc, #220]	; (800b49c <i2c_stm32_init+0x118>)
 800b3c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	9303      	str	r3, [sp, #12]
 800b3c8:	4835      	ldr	r0, [pc, #212]	; (800b4a0 <i2c_stm32_init+0x11c>)
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	aa03      	add	r2, sp, #12
 800b3ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800b3d2:	f006 f85a 	bl	801148a <z_impl_z_log_msg2_static_create>
		LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	b007      	add	sp, #28
 800b3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3dc:	2201      	movs	r2, #1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	f106 0018 	add.w	r0, r6, #24
 800b3e4:	f00a fdad 	bl	8015f42 <z_impl_k_sem_init>
		(clock_control_subsys_t *) &cfg->pclken) != 0) {
 800b3e8:	1d2e      	adds	r6, r5, #4
 800b3ea:	4c2e      	ldr	r4, [pc, #184]	; (800b4a4 <i2c_stm32_init+0x120>)
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f00a fd30 	bl	8015e52 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800b3f2:	b968      	cbnz	r0, 800b410 <i2c_stm32_init+0x8c>
		LOG_ERR("i2c: failure enabling clock");
 800b3f4:	4b2c      	ldr	r3, [pc, #176]	; (800b4a8 <i2c_stm32_init+0x124>)
 800b3f6:	9304      	str	r3, [sp, #16]
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	9303      	str	r3, [sp, #12]
 800b3fc:	4828      	ldr	r0, [pc, #160]	; (800b4a0 <i2c_stm32_init+0x11c>)
 800b3fe:	2300      	movs	r3, #0
 800b400:	aa03      	add	r2, sp, #12
 800b402:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b406:	f006 f840 	bl	801148a <z_impl_z_log_msg2_static_create>
		return -EIO;
 800b40a:	f06f 0404 	mvn.w	r4, #4
 800b40e:	e7e2      	b.n	800b3d6 <i2c_stm32_init+0x52>
	return api->on(dev, sys);
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	4620      	mov	r0, r4
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4631      	mov	r1, r6
 800b418:	4798      	blx	r3
	if (clock_control_on(clock,
 800b41a:	4604      	mov	r4, r0
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1e9      	bne.n	800b3f4 <i2c_stm32_init+0x70>
	bitrate_cfg = i2c_map_dt_bitrate(cfg->bitrate);
 800b420:	692b      	ldr	r3, [r5, #16]
	switch (bitrate) {
 800b422:	4a22      	ldr	r2, [pc, #136]	; (800b4ac <i2c_stm32_init+0x128>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d031      	beq.n	800b48c <i2c_stm32_init+0x108>
 800b428:	d825      	bhi.n	800b476 <i2c_stm32_init+0xf2>
 800b42a:	4a21      	ldr	r2, [pc, #132]	; (800b4b0 <i2c_stm32_init+0x12c>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d02f      	beq.n	800b490 <i2c_stm32_init+0x10c>
 800b430:	4a20      	ldr	r2, [pc, #128]	; (800b4b4 <i2c_stm32_init+0x130>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d02e      	beq.n	800b494 <i2c_stm32_init+0x110>
	LOG_ERR("Invalid I2C bit rate value");
 800b436:	4b20      	ldr	r3, [pc, #128]	; (800b4b8 <i2c_stm32_init+0x134>)
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	2302      	movs	r3, #2
 800b43c:	9303      	str	r3, [sp, #12]
 800b43e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b442:	4817      	ldr	r0, [pc, #92]	; (800b4a0 <i2c_stm32_init+0x11c>)
 800b444:	2300      	movs	r3, #0
 800b446:	aa03      	add	r2, sp, #12
 800b448:	f006 f81f 	bl	801148a <z_impl_z_log_msg2_static_create>
	return 0;
 800b44c:	2100      	movs	r1, #0
	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 800b44e:	f041 0110 	orr.w	r1, r1, #16
 800b452:	4638      	mov	r0, r7
 800b454:	f7ff ff46 	bl	800b2e4 <i2c_stm32_runtime_configure>
	if (ret < 0) {
 800b458:	1e05      	subs	r5, r0, #0
 800b45a:	dabc      	bge.n	800b3d6 <i2c_stm32_init+0x52>
		LOG_ERR("i2c: failure initializing");
 800b45c:	4b17      	ldr	r3, [pc, #92]	; (800b4bc <i2c_stm32_init+0x138>)
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	2302      	movs	r3, #2
 800b462:	9303      	str	r3, [sp, #12]
 800b464:	480e      	ldr	r0, [pc, #56]	; (800b4a0 <i2c_stm32_init+0x11c>)
 800b466:	2300      	movs	r3, #0
 800b468:	aa03      	add	r2, sp, #12
 800b46a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800b46e:	f006 f80c 	bl	801148a <z_impl_z_log_msg2_static_create>
		return ret;
 800b472:	462c      	mov	r4, r5
 800b474:	e7af      	b.n	800b3d6 <i2c_stm32_init+0x52>
	switch (bitrate) {
 800b476:	4a12      	ldr	r2, [pc, #72]	; (800b4c0 <i2c_stm32_init+0x13c>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d00d      	beq.n	800b498 <i2c_stm32_init+0x114>
 800b47c:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 800b480:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 800b484:	4293      	cmp	r3, r2
 800b486:	d1d6      	bne.n	800b436 <i2c_stm32_init+0xb2>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 800b488:	210a      	movs	r1, #10
 800b48a:	e7e0      	b.n	800b44e <i2c_stm32_init+0xca>
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 800b48c:	2106      	movs	r1, #6
 800b48e:	e7de      	b.n	800b44e <i2c_stm32_init+0xca>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 800b490:	2102      	movs	r1, #2
 800b492:	e7dc      	b.n	800b44e <i2c_stm32_init+0xca>
	switch (bitrate) {
 800b494:	2104      	movs	r1, #4
 800b496:	e7da      	b.n	800b44e <i2c_stm32_init+0xca>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 800b498:	2108      	movs	r1, #8
 800b49a:	e7d8      	b.n	800b44e <i2c_stm32_init+0xca>
 800b49c:	080190a5 	.word	0x080190a5
 800b4a0:	08016ee0 	.word	0x08016ee0
 800b4a4:	08016b00 	.word	0x08016b00
 800b4a8:	080190c3 	.word	0x080190c3
 800b4ac:	000f4240 	.word	0x000f4240
 800b4b0:	000186a0 	.word	0x000186a0
 800b4b4:	00061a80 	.word	0x00061a80
 800b4b8:	08019057 	.word	0x08019057
 800b4bc:	080190df 	.word	0x080190df
 800b4c0:	0033e140 	.word	0x0033e140

0800b4c4 <bme280_channel_get>:
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme280_data *data = dev->data;

	switch (chan) {
 800b4c4:	290e      	cmp	r1, #14
{
 800b4c6:	b510      	push	{r4, lr}
	struct bme280_data *data = dev->data;
 800b4c8:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
 800b4ca:	d010      	beq.n	800b4ee <bme280_channel_get+0x2a>
 800b4cc:	2910      	cmp	r1, #16
 800b4ce:	d01d      	beq.n	800b50c <bme280_channel_get+0x48>
 800b4d0:	290d      	cmp	r1, #13
 800b4d2:	d124      	bne.n	800b51e <bme280_channel_get+0x5a>
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->comp_temp has a resolution of 0.01 degC.  So
		 * 5123 equals 51.23 degC.
		 */
		val->val1 = data->comp_temp / 100;
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d6:	2064      	movs	r0, #100	; 0x64
 800b4d8:	fb93 f1f0 	sdiv	r1, r3, r0
		val->val2 = data->comp_temp % 100 * 10000;
 800b4dc:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = data->comp_temp / 100;
 800b4e0:	6011      	str	r1, [r2, #0]
		val->val2 = data->comp_temp % 100 * 10000;
 800b4e2:	f242 7110 	movw	r1, #10000	; 0x2710
 800b4e6:	434b      	muls	r3, r1
		 * data->comp_humidity has 22 integer bits and 10
		 * fractional.  Output value of 47445 represents
		 * 47445/1024 = 46.333 %RH
		 */
		val->val1 = (data->comp_humidity >> 10);
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
 800b4e8:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
 800b4ea:	2000      	movs	r0, #0
}
 800b4ec:	bd10      	pop	{r4, pc}
		val->val1 = (data->comp_press >> 8) / 1000U;
 800b4ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b4f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b4f4:	0a0b      	lsrs	r3, r1, #8
			(((data->comp_press & 0xff) * 1000U) >> 8);
 800b4f6:	b2c9      	uxtb	r1, r1
		val->val1 = (data->comp_press >> 8) / 1000U;
 800b4f8:	fbb3 f4f0 	udiv	r4, r3, r0
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800b4fc:	fb00 3314 	mls	r3, r0, r4, r3
			(((data->comp_press & 0xff) * 1000U) >> 8);
 800b500:	4341      	muls	r1, r0
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800b502:	4343      	muls	r3, r0
		val->val1 = (data->comp_press >> 8) / 1000U;
 800b504:	6014      	str	r4, [r2, #0]
		val->val2 = (data->comp_press >> 8) % 1000 * 1000U +
 800b506:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 800b50a:	e7ed      	b.n	800b4e8 <bme280_channel_get+0x24>
		val->val1 = (data->comp_humidity >> 10);
 800b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50e:	0a99      	lsrs	r1, r3, #10
 800b510:	6011      	str	r1, [r2, #0]
		val->val2 = (((data->comp_humidity & 0x3ff) * 1000U * 1000U) >> 10);
 800b512:	4904      	ldr	r1, [pc, #16]	; (800b524 <bme280_channel_get+0x60>)
 800b514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b518:	434b      	muls	r3, r1
 800b51a:	0a9b      	lsrs	r3, r3, #10
 800b51c:	e7e4      	b.n	800b4e8 <bme280_channel_get+0x24>
	switch (chan) {
 800b51e:	f06f 0015 	mvn.w	r0, #21
 800b522:	e7e3      	b.n	800b4ec <bme280_channel_get+0x28>
 800b524:	000f4240 	.word	0x000f4240

0800b528 <sht3xd_channel_get>:

	/*
	 * See datasheet "Conversion of Signal Output" section
	 * for more details on processing sample data.
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800b528:	290d      	cmp	r1, #13
{
 800b52a:	b570      	push	{r4, r5, r6, lr}
	const struct sht3xd_data *data = dev->data;
 800b52c:	6903      	ldr	r3, [r0, #16]
{
 800b52e:	4614      	mov	r4, r2
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
 800b530:	d121      	bne.n	800b576 <sht3xd_channel_get+0x4e>
		/* val = -45 + 175 * sample / (2^16 -1) */
		tmp = (uint64_t)data->t_sample * 175U;
 800b532:	881e      	ldrh	r6, [r3, #0]
 800b534:	25af      	movs	r5, #175	; 0xaf
 800b536:	fba6 6505 	umull	r6, r5, r6, r5
		val->val1 = (int32_t)(tmp / 0xFFFF) - 45;
 800b53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b53e:	2300      	movs	r3, #0
 800b540:	4630      	mov	r0, r6
 800b542:	4629      	mov	r1, r5
 800b544:	f7f5 fade 	bl	8000b04 <__aeabi_uldivmod>
 800b548:	382d      	subs	r0, #45	; 0x2d
 800b54a:	6020      	str	r0, [r4, #0]
		val->val2 = ((tmp % 0xFFFF) * 1000000U) / 0xFFFF;
 800b54c:	4629      	mov	r1, r5
 800b54e:	4630      	mov	r0, r6
 800b550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b554:	2300      	movs	r3, #0
 800b556:	f7f5 fad5 	bl	8000b04 <__aeabi_uldivmod>
 800b55a:	4d12      	ldr	r5, [pc, #72]	; (800b5a4 <sht3xd_channel_get+0x7c>)
 800b55c:	461e      	mov	r6, r3
 800b55e:	fba2 0105 	umull	r0, r1, r2, r5
 800b562:	2300      	movs	r3, #0
 800b564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b568:	fb05 1106 	mla	r1, r5, r6, r1
 800b56c:	f7f5 faca 	bl	8000b04 <__aeabi_uldivmod>
 800b570:	6060      	str	r0, [r4, #4]
		val->val2 = (tmp2 % 0xFFFF) * 15625U / 1024;
	} else {
		return -ENOTSUP;
	}

	return 0;
 800b572:	2000      	movs	r0, #0
}
 800b574:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
 800b576:	2910      	cmp	r1, #16
 800b578:	d110      	bne.n	800b59c <sht3xd_channel_get+0x74>
		uint32_t tmp2 = (uint32_t)data->rh_sample * 100U;
 800b57a:	885b      	ldrh	r3, [r3, #2]
 800b57c:	2264      	movs	r2, #100	; 0x64
 800b57e:	4353      	muls	r3, r2
		val->val1 = tmp2 / 0xFFFF;
 800b580:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b584:	fbb3 f1f1 	udiv	r1, r3, r1
 800b588:	6021      	str	r1, [r4, #0]
		val->val2 = (tmp2 % 0xFFFF) * 15625U / 1024;
 800b58a:	ebc1 4101 	rsb	r1, r1, r1, lsl #16
 800b58e:	1a5b      	subs	r3, r3, r1
 800b590:	f643 5209 	movw	r2, #15625	; 0x3d09
 800b594:	4353      	muls	r3, r2
 800b596:	0a9b      	lsrs	r3, r3, #10
 800b598:	6063      	str	r3, [r4, #4]
 800b59a:	e7ea      	b.n	800b572 <sht3xd_channel_get+0x4a>
		return -ENOTSUP;
 800b59c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800b5a0:	e7e8      	b.n	800b574 <sht3xd_channel_get+0x4c>
 800b5a2:	bf00      	nop
 800b5a4:	000f4240 	.word	0x000f4240

0800b5a8 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800b5a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800b5aa:	ab0b      	add	r3, sp, #44	; 0x2c
 800b5ac:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800b5ae:	9303      	str	r3, [sp, #12]
 800b5b0:	4b05      	ldr	r3, [pc, #20]	; (800b5c8 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800b5b2:	9302      	str	r3, [sp, #8]
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	e9cd 3300 	strd	r3, r3, [sp]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7f8 f9c1 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 800b5c2:	b007      	add	sp, #28
 800b5c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5c8:	08019119 	.word	0x08019119

0800b5cc <sht3xd_init>:
	.sample_fetch = sht3xd_sample_fetch,
	.channel_get = sht3xd_channel_get,
};

static int sht3xd_init(const struct device *dev)
{
 800b5cc:	b530      	push	{r4, r5, lr}
	const struct sht3xd_config *cfg = dev->config;
 800b5ce:	6845      	ldr	r5, [r0, #4]
{
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	b085      	sub	sp, #20

	if (!device_is_ready(cfg->bus.bus)) {
 800b5d4:	6828      	ldr	r0, [r5, #0]
 800b5d6:	f00a fc3c 	bl	8015e52 <z_device_is_ready>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	b970      	cbnz	r0, 800b5fc <sht3xd_init+0x30>
		LOG_ERR("I2C bus %s is not ready!", cfg->bus.bus->name);
 800b5de:	682a      	ldr	r2, [r5, #0]
 800b5e0:	4914      	ldr	r1, [pc, #80]	; (800b634 <sht3xd_init+0x68>)
 800b5e2:	6812      	ldr	r2, [r2, #0]
 800b5e4:	9203      	str	r2, [sp, #12]
 800b5e6:	4a14      	ldr	r2, [pc, #80]	; (800b638 <sht3xd_init+0x6c>)
 800b5e8:	9000      	str	r0, [sp, #0]
 800b5ea:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f7ff ffda 	bl	800b5a8 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
 800b5f4:	f06f 0015 	mvn.w	r0, #21
		return -EIO;
	}
#endif

	return 0;
}
 800b5f8:	b005      	add	sp, #20
 800b5fa:	bd30      	pop	{r4, r5, pc}
	if (sht3xd_write_command(dev, SHT3XD_CMD_CLEAR_STATUS) < 0) {
 800b5fc:	f243 0141 	movw	r1, #12353	; 0x3041
 800b600:	4620      	mov	r0, r4
 800b602:	f009 f856 	bl	80146b2 <sht3xd_write_command>
 800b606:	2800      	cmp	r0, #0
 800b608:	da02      	bge.n	800b610 <sht3xd_init+0x44>
		return -EIO;
 800b60a:	f06f 0004 	mvn.w	r0, #4
 800b60e:	e7f3      	b.n	800b5f8 <sht3xd_init+0x2c>
	z_impl_k_busy_wait(usec_to_wait);
 800b610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b614:	f003 f9b2 	bl	800e97c <z_impl_k_busy_wait>
	if (sht3xd_write_command(dev,
 800b618:	f242 1130 	movw	r1, #8496	; 0x2130
 800b61c:	4620      	mov	r0, r4
 800b61e:	f009 f848 	bl	80146b2 <sht3xd_write_command>
 800b622:	2800      	cmp	r0, #0
 800b624:	dbf1      	blt.n	800b60a <sht3xd_init+0x3e>
 800b626:	f643 2098 	movw	r0, #15000	; 0x3a98
 800b62a:	f003 f9a7 	bl	800e97c <z_impl_k_busy_wait>
	return 0;
 800b62e:	2000      	movs	r0, #0
}
 800b630:	e7e2      	b.n	800b5f8 <sht3xd_init+0x2c>
 800b632:	bf00      	nop
 800b634:	08016eb0 	.word	0x08016eb0
 800b638:	08019119 	.word	0x08019119

0800b63c <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 800b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 800b640:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800b642:	6847      	ldr	r7, [r0, #4]
{
 800b644:	b08c      	sub	sp, #48	; 0x30
 800b646:	4604      	mov	r4, r0
 800b648:	4d3f      	ldr	r5, [pc, #252]	; (800b748 <spi_stm32_init+0x10c>)
 800b64a:	4628      	mov	r0, r5
 800b64c:	f00a fc01 	bl	8015e52 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800b650:	b980      	cbnz	r0, 800b674 <spi_stm32_init+0x38>
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 800b652:	4b3e      	ldr	r3, [pc, #248]	; (800b74c <spi_stm32_init+0x110>)
 800b654:	930a      	str	r3, [sp, #40]	; 0x28
 800b656:	2302      	movs	r3, #2
 800b658:	9309      	str	r3, [sp, #36]	; 0x24
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800b65a:	483d      	ldr	r0, [pc, #244]	; (800b750 <spi_stm32_init+0x114>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	aa09      	add	r2, sp, #36	; 0x24
 800b660:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800b664:	f06f 0404 	mvn.w	r4, #4
 800b668:	f005 ff0f 	bl	801148a <z_impl_z_log_msg2_static_create>
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 800b66c:	4620      	mov	r0, r4
 800b66e:	b00c      	add	sp, #48	; 0x30
 800b670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
 800b674:	68ab      	ldr	r3, [r5, #8]
 800b676:	4639      	mov	r1, r7
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4628      	mov	r0, r5
 800b67c:	4798      	blx	r3
	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800b67e:	2800      	cmp	r0, #0
 800b680:	d1e7      	bne.n	800b652 <spi_stm32_init+0x16>
	return cfg->use_subghzspi_nss;
 800b682:	6863      	ldr	r3, [r4, #4]
	if (!spi_stm32_is_subghzspi(dev)) {
 800b684:	7c1d      	ldrb	r5, [r3, #16]
 800b686:	b9dd      	cbnz	r5, 800b6c0 <spi_stm32_init+0x84>
	ret = pinctrl_lookup_state(config, id, &state);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	aa06      	add	r2, sp, #24
 800b68c:	4629      	mov	r1, r5
 800b68e:	f009 f9bf 	bl	8014a10 <pinctrl_lookup_state>
	if (ret < 0) {
 800b692:	1e04      	subs	r4, r0, #0
 800b694:	db07      	blt.n	800b6a6 <spi_stm32_init+0x6a>
	return pinctrl_apply_state_direct(config, state);
 800b696:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800b698:	462a      	mov	r2, r5
 800b69a:	7919      	ldrb	r1, [r3, #4]
 800b69c:	6818      	ldr	r0, [r3, #0]
 800b69e:	f001 f803 	bl	800c6a8 <pinctrl_configure_pins>
		if (err < 0) {
 800b6a2:	1e04      	subs	r4, r0, #0
 800b6a4:	da0c      	bge.n	800b6c0 <spi_stm32_init+0x84>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 800b6a6:	4b2b      	ldr	r3, [pc, #172]	; (800b754 <spi_stm32_init+0x118>)
 800b6a8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b0:	4827      	ldr	r0, [pc, #156]	; (800b750 <spi_stm32_init+0x114>)
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	aa09      	add	r2, sp, #36	; 0x24
 800b6b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800b6ba:	f005 fee6 	bl	801148a <z_impl_z_log_msg2_static_create>
			return err;
 800b6be:	e7d5      	b.n	800b66c <spi_stm32_init+0x30>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800b6c0:	68b5      	ldr	r5, [r6, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800b6c2:	2701      	movs	r7, #1
 800b6c4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b6c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6cc:	429d      	cmp	r5, r3
 800b6ce:	d304      	bcc.n	800b6da <spi_stm32_init+0x9e>
	spi_context_unlock_unconditionally(&data->ctx);
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f009 f85e 	bl	8014792 <spi_context_unlock_unconditionally>
	return 0;
 800b6d6:	2400      	movs	r4, #0
 800b6d8:	e7c8      	b.n	800b66c <spi_stm32_init+0x30>
		if (!device_is_ready(cs_gpio->port)) {
 800b6da:	6828      	ldr	r0, [r5, #0]
 800b6dc:	f00a fbb9 	bl	8015e52 <z_device_is_ready>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	b978      	cbnz	r0, 800b704 <spi_stm32_init+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 800b6e4:	792a      	ldrb	r2, [r5, #4]
 800b6e6:	9204      	str	r2, [sp, #16]
 800b6e8:	682a      	ldr	r2, [r5, #0]
 800b6ea:	4919      	ldr	r1, [pc, #100]	; (800b750 <spi_stm32_init+0x114>)
 800b6ec:	6812      	ldr	r2, [r2, #0]
 800b6ee:	9203      	str	r2, [sp, #12]
 800b6f0:	4a19      	ldr	r2, [pc, #100]	; (800b758 <spi_stm32_init+0x11c>)
 800b6f2:	9000      	str	r0, [sp, #0]
 800b6f4:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f009 f804 	bl	8014706 <z_log_msg2_runtime_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 800b6fe:	f06f 0412 	mvn.w	r4, #18
 800b702:	e7b3      	b.n	800b66c <spi_stm32_init+0x30>
	return gpio_pin_configure(spec->port,
 800b704:	6828      	ldr	r0, [r5, #0]
 800b706:	7929      	ldrb	r1, [r5, #4]
				  spec->dt_flags | extra_flags);
 800b708:	88eb      	ldrh	r3, [r5, #6]
	struct gpio_driver_data *data =
 800b70a:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 800b70e:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800b712:	f8dc 4000 	ldr.w	r4, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800b716:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 800b718:	bf54      	ite	pl
 800b71a:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800b71e:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800b722:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800b726:	fa07 fe01 	lsl.w	lr, r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800b72a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800b72c:	bf4c      	ite	mi
 800b72e:	ea4e 0404 	orrmi.w	r4, lr, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800b732:	ea24 040e 	bicpl.w	r4, r4, lr
 800b736:	f8cc 4000 	str.w	r4, [ip]
	return api->pin_configure(port, pin, flags);
 800b73a:	f8d8 3000 	ldr.w	r3, [r8]
 800b73e:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 800b740:	1e04      	subs	r4, r0, #0
 800b742:	db93      	blt.n	800b66c <spi_stm32_init+0x30>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800b744:	3508      	adds	r5, #8
 800b746:	e7bd      	b.n	800b6c4 <spi_stm32_init+0x88>
 800b748:	08016b00 	.word	0x08016b00
 800b74c:	08019139 	.word	0x08019139
 800b750:	08016f40 	.word	0x08016f40
 800b754:	08019154 	.word	0x08019154
 800b758:	08019172 	.word	0x08019172

0800b75c <spi_stm32_transceive>:
{
 800b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b760:	b09b      	sub	sp, #108	; 0x6c
 800b762:	461e      	mov	r6, r3
 800b764:	af06      	add	r7, sp, #24
	SPI_TypeDef *spi = cfg->spi;
 800b766:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800b768:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800b76a:	f8d3 b008 	ldr.w	fp, [r3, #8]
{
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	4688      	mov	r8, r1
	if (!tx_bufs && !rx_bufs) {
 800b772:	4691      	mov	r9, r2
 800b774:	b90a      	cbnz	r2, 800b77a <spi_stm32_transceive+0x1e>
 800b776:	2e00      	cmp	r6, #0
 800b778:	d055      	beq.n	800b826 <spi_stm32_transceive+0xca>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800b77a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800b77e:	049d      	lsls	r5, r3, #18
 800b780:	d456      	bmi.n	800b830 <spi_stm32_transceive+0xd4>
	return z_impl_k_sem_take(sem, timeout);
 800b782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b78a:	f104 0010 	add.w	r0, r4, #16
 800b78e:	f002 faf7 	bl	800dd80 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800b792:	f8c4 8004 	str.w	r8, [r4, #4]
	const struct spi_stm32_config *cfg = dev->config;
 800b796:	68fb      	ldr	r3, [r7, #12]
	const uint32_t scaler[] = {
 800b798:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 800ba5c <spi_stm32_transceive+0x300>
	const struct spi_stm32_config *cfg = dev->config;
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	60bb      	str	r3, [r7, #8]
	struct spi_stm32_data *data = dev->data;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	607b      	str	r3, [r7, #4]
	const uint32_t scaler[] = {
 800b7a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b7aa:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800b7ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b7b0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800b7b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4598      	cmp	r8, r3
 800b7be:	f000 80b2 	beq.w	800b926 <spi_stm32_transceive+0x1ca>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800b7c2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800b7c6:	f3c3 1245 	ubfx	r2, r3, #5, #6
 800b7ca:	2a08      	cmp	r2, #8
 800b7cc:	d002      	beq.n	800b7d4 <spi_stm32_transceive+0x78>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 800b7ce:	2a10      	cmp	r2, #16
 800b7d0:	f040 812d 	bne.w	800ba2e <spi_stm32_transceive+0x2d2>
	SPI_TypeDef *spi = cfg->spi;
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	6895      	ldr	r5, [r2, #8]
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 800b7d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800b7dc:	686b      	ldr	r3, [r5, #4]
 800b7de:	bf14      	ite	ne
 800b7e0:	f043 0310 	orrne.w	r3, r3, #16
 800b7e4:	f023 0310 	biceq.w	r3, r3, #16
 800b7e8:	606b      	str	r3, [r5, #4]
 800b7ea:	f8df a274 	ldr.w	sl, [pc, #628]	; 800ba60 <spi_stm32_transceive+0x304>
 800b7ee:	4650      	mov	r0, sl
 800b7f0:	f00a fb2f 	bl	8015e52 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800b7f4:	bb18      	cbnz	r0, 800b83e <spi_stm32_transceive+0xe2>
		LOG_ERR("Failed call clock_control_get_rate");
 800b7f6:	4b9b      	ldr	r3, [pc, #620]	; (800ba64 <spi_stm32_transceive+0x308>)
 800b7f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7fe:	489a      	ldr	r0, [pc, #616]	; (800ba68 <spi_stm32_transceive+0x30c>)
 800b800:	2300      	movs	r3, #0
 800b802:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b806:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
 800b80a:	f06f 0604 	mvn.w	r6, #4
 800b80e:	f005 fe3c 	bl	801148a <z_impl_z_log_msg2_static_create>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	889b      	ldrh	r3, [r3, #4]
 800b816:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800b81a:	d104      	bne.n	800b826 <spi_stm32_transceive+0xca>
		ctx->owner = NULL;
 800b81c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 800b81e:	f104 0010 	add.w	r0, r4, #16
 800b822:	f002 fa87 	bl	800dd34 <z_impl_k_sem_give>
}
 800b826:	4630      	mov	r0, r6
 800b828:	3754      	adds	r7, #84	; 0x54
 800b82a:	46bd      	mov	sp, r7
 800b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800b830:	69a3      	ldr	r3, [r4, #24]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1a5      	bne.n	800b782 <spi_stm32_transceive+0x26>
		(k_sem_count_get(&ctx->lock) == 0) &&
 800b836:	6863      	ldr	r3, [r4, #4]
 800b838:	4598      	cmp	r8, r3
 800b83a:	d1a2      	bne.n	800b782 <spi_stm32_transceive+0x26>
 800b83c:	e7ab      	b.n	800b796 <spi_stm32_transceive+0x3a>
	if (api->get_rate == NULL) {
 800b83e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0d6      	beq.n	800b7f6 <spi_stm32_transceive+0x9a>
	return api->get_rate(dev, sys, rate);
 800b848:	68b9      	ldr	r1, [r7, #8]
 800b84a:	f107 0214 	add.w	r2, r7, #20
 800b84e:	4650      	mov	r0, sl
 800b850:	4798      	blx	r3
	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800b852:	2800      	cmp	r0, #0
 800b854:	dbcf      	blt.n	800b7f6 <spi_stm32_transceive+0x9a>
		uint32_t clk = clock >> br;
 800b856:	6979      	ldr	r1, [r7, #20]
		if (clk <= config->frequency) {
 800b858:	f8d8 0000 	ldr.w	r0, [r8]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800b85c:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 800b85e:	fa21 f203 	lsr.w	r2, r1, r3
		if (clk <= config->frequency) {
 800b862:	4282      	cmp	r2, r0
 800b864:	f240 8218 	bls.w	800bc98 <spi_stm32_transceive+0x53c>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800b868:	3301      	adds	r3, #1
 800b86a:	2b09      	cmp	r3, #9
 800b86c:	d1f7      	bne.n	800b85e <spi_stm32_transceive+0x102>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 800b86e:	4b7f      	ldr	r3, [pc, #508]	; (800ba6c <spi_stm32_transceive+0x310>)
 800b870:	466d      	mov	r5, sp
 800b872:	b088      	sub	sp, #32
 800b874:	aa06      	add	r2, sp, #24
 800b876:	e9c2 3004 	strd	r3, r0, [r2, #16]
 800b87a:	084b      	lsrs	r3, r1, #1
 800b87c:	6193      	str	r3, [r2, #24]
 800b87e:	0a09      	lsrs	r1, r1, #8
 800b880:	2305      	movs	r3, #5
 800b882:	61d1      	str	r1, [r2, #28]
 800b884:	f842 3f0c 	str.w	r3, [r2, #12]!
 800b888:	4877      	ldr	r0, [pc, #476]	; (800ba68 <spi_stm32_transceive+0x30c>)
 800b88a:	2300      	movs	r3, #0
 800b88c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 800b890:	f005 fdfb 	bl	801148a <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800b894:	f06f 0615 	mvn.w	r6, #21
 800b898:	46ad      	mov	sp, r5
	if (ret) {
 800b89a:	e7ba      	b.n	800b812 <spi_stm32_transceive+0xb6>
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800b89c:	682a      	ldr	r2, [r5, #0]
 800b89e:	f042 0202 	orr.w	r2, r2, #2
 800b8a2:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800b8a4:	682a      	ldr	r2, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800b8a6:	0758      	lsls	r0, r3, #29
 800b8a8:	bf4c      	ite	mi
 800b8aa:	f042 0201 	orrmi.w	r2, r2, #1
 800b8ae:	f022 0201 	bicpl.w	r2, r2, #1
 800b8b2:	602a      	str	r2, [r5, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800b8b4:	682a      	ldr	r2, [r5, #0]
 800b8b6:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800b8ba:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800b8bc:	682a      	ldr	r2, [r5, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 800b8be:	06d9      	lsls	r1, r3, #27
 800b8c0:	bf4c      	ite	mi
 800b8c2:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 800b8c6:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800b8ca:	602a      	str	r2, [r5, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 800b8cc:	682a      	ldr	r2, [r5, #0]
 800b8ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8d2:	602a      	str	r2, [r5, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800b8d4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b8d8:	f003 0101 	and.w	r1, r3, #1
 800b8dc:	2a00      	cmp	r2, #0
 800b8de:	f000 8095 	beq.w	800ba0c <spi_stm32_transceive+0x2b0>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800b8e2:	682a      	ldr	r2, [r5, #0]
 800b8e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8e8:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800b8ea:	686a      	ldr	r2, [r5, #4]
 800b8ec:	f022 0204 	bic.w	r2, r2, #4
 800b8f0:	606a      	str	r2, [r5, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800b8f2:	2900      	cmp	r1, #0
 800b8f4:	f000 8097 	beq.w	800ba26 <spi_stm32_transceive+0x2ca>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800b8f8:	682a      	ldr	r2, [r5, #0]
 800b8fa:	f422 7282 	bic.w	r2, r2, #260	; 0x104
 800b8fe:	602a      	str	r2, [r5, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 800b900:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800b904:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800b906:	686b      	ldr	r3, [r5, #4]
 800b908:	bf06      	itte	eq
 800b90a:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 800b90e:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 800b912:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 800b916:	606b      	str	r3, [r5, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800b918:	686b      	ldr	r3, [r5, #4]
 800b91a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b91e:	606b      	str	r3, [r5, #4]
	data->ctx.config = config;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8c3 8000 	str.w	r8, [r3]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800b926:	f1b9 0f00 	cmp.w	r9, #0
 800b92a:	f040 8083 	bne.w	800ba34 <spi_stm32_transceive+0x2d8>
 800b92e:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800b932:	464a      	mov	r2, r9
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800b934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b938:	60bb      	str	r3, [r7, #8]
 800b93a:	f104 0558 	add.w	r5, r4, #88	; 0x58
 800b93e:	f104 0348 	add.w	r3, r4, #72	; 0x48
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800b942:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800b944:	607b      	str	r3, [r7, #4]
 800b946:	462a      	mov	r2, r5
 800b948:	2301      	movs	r3, #1
 800b94a:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800b94e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800b952:	f008 fec4 	bl	80146de <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 800b956:	6560      	str	r0, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800b958:	2e00      	cmp	r6, #0
 800b95a:	d174      	bne.n	800ba46 <spi_stm32_transceive+0x2ea>
 800b95c:	64e6      	str	r6, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800b95e:	f104 084c 	add.w	r8, r4, #76	; 0x4c
 800b962:	f104 0950 	add.w	r9, r4, #80	; 0x50
 800b966:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 800b96a:	2301      	movs	r3, #1
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800b96c:	6526      	str	r6, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800b96e:	4652      	mov	r2, sl
 800b970:	4649      	mov	r1, r9
 800b972:	4640      	mov	r0, r8
 800b974:	f008 feb3 	bl	80146de <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 800b978:	2300      	movs	r3, #0
	ctx->rx_buf = (uint8_t *)
 800b97a:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
 800b97c:	6423      	str	r3, [r4, #64]	; 0x40
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800b97e:	f8db 2008 	ldr.w	r2, [fp, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800b982:	f012 0201 	ands.w	r2, r2, #1
 800b986:	d165      	bne.n	800ba54 <spi_stm32_transceive+0x2f8>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800b988:	f8db 3000 	ldr.w	r3, [fp]
 800b98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b990:	f8cb 3000 	str.w	r3, [fp]
	_spi_context_cs_control(ctx, on, false);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2101      	movs	r1, #1
 800b998:	6918      	ldr	r0, [r3, #16]
 800b99a:	f008 fed8 	bl	801474e <_spi_context_cs_control>
	if (cfg->use_subghzspi_nss) {
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	7c1b      	ldrb	r3, [r3, #16]
 800b9a4:	b133      	cbz	r3, 800b9b4 <spi_stm32_transceive+0x258>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b9a6:	4a32      	ldr	r2, [pc, #200]	; (800ba70 <spi_stm32_transceive+0x314>)
 800b9a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b9ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	uint16_t operation = data->ctx.config->operation;
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800b9b8:	f013 0101 	ands.w	r1, r3, #1
 800b9bc:	f040 80d2 	bne.w	800bb64 <spi_stm32_transceive+0x408>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800b9c0:	f8db 2008 	ldr.w	r2, [fp, #8]
 800b9c4:	0792      	lsls	r2, r2, #30
 800b9c6:	d5fb      	bpl.n	800b9c0 <spi_stm32_transceive+0x264>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800b9c8:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800b9cc:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800b9ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800b9d0:	f040 809c 	bne.w	800bb0c <spi_stm32_transceive+0x3b0>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 800b9d4:	b112      	cbz	r2, 800b9dc <spi_stm32_transceive+0x280>
 800b9d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9d8:	b103      	cbz	r3, 800b9dc <spi_stm32_transceive+0x280>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800b9da:	7811      	ldrb	r1, [r2, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800b9dc:	b2c9      	uxtb	r1, r1
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800b9de:	f88b 100c 	strb.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 800b9e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d049      	beq.n	800ba7c <spi_stm32_transceive+0x320>
	ctx->tx_len -= len;
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d141      	bne.n	800ba74 <spi_stm32_transceive+0x318>
		++ctx->current_tx;
 800b9f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800b9f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
 800ba02:	462a      	mov	r2, r5
 800ba04:	f008 fe6b 	bl	80146de <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800ba08:	6560      	str	r0, [r4, #84]	; 0x54
 800ba0a:	e037      	b.n	800ba7c <spi_stm32_transceive+0x320>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800ba0c:	682a      	ldr	r2, [r5, #0]
 800ba0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800ba12:	2900      	cmp	r1, #0
 800ba14:	f47f af68 	bne.w	800b8e8 <spi_stm32_transceive+0x18c>
 800ba18:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ba1c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800ba1e:	686a      	ldr	r2, [r5, #4]
 800ba20:	f042 0204 	orr.w	r2, r2, #4
 800ba24:	606a      	str	r2, [r5, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800ba26:	682a      	ldr	r2, [r5, #0]
 800ba28:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 800ba2c:	e767      	b.n	800b8fe <spi_stm32_transceive+0x1a2>
		return -ENOTSUP;
 800ba2e:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800ba32:	e6ee      	b.n	800b812 <spi_stm32_transceive+0xb6>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800ba34:	f8d9 2000 	ldr.w	r2, [r9]
 800ba38:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800ba3a:	2a00      	cmp	r2, #0
 800ba3c:	f43f af7a 	beq.w	800b934 <spi_stm32_transceive+0x1d8>
 800ba40:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ba44:	e776      	b.n	800b934 <spi_stm32_transceive+0x1d8>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800ba46:	6833      	ldr	r3, [r6, #0]
 800ba48:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800ba4a:	b10b      	cbz	r3, 800ba50 <spi_stm32_transceive+0x2f4>
 800ba4c:	6876      	ldr	r6, [r6, #4]
 800ba4e:	e786      	b.n	800b95e <spi_stm32_transceive+0x202>
 800ba50:	461e      	mov	r6, r3
 800ba52:	e784      	b.n	800b95e <spi_stm32_transceive+0x202>
  return (*((__IO uint8_t *)&SPIx->DR));
 800ba54:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800ba58:	e791      	b.n	800b97e <spi_stm32_transceive+0x222>
 800ba5a:	bf00      	nop
 800ba5c:	08017044 	.word	0x08017044
 800ba60:	08016b00 	.word	0x08016b00
 800ba64:	08019082 	.word	0x08019082
 800ba68:	08016f40 	.word	0x08016f40
 800ba6c:	080191a1 	.word	0x080191a1
 800ba70:	58000400 	.word	0x58000400
	} else if (ctx->tx_buf) {
 800ba74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ba76:	b10b      	cbz	r3, 800ba7c <spi_stm32_transceive+0x320>
		ctx->tx_buf += dfs * len;
 800ba78:	3301      	adds	r3, #1
 800ba7a:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800ba7c:	f8db 3008 	ldr.w	r3, [fp, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 800ba80:	07de      	lsls	r6, r3, #31
 800ba82:	d5fb      	bpl.n	800ba7c <spi_stm32_transceive+0x320>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ba84:	6822      	ldr	r2, [r4, #0]
 800ba86:	8892      	ldrh	r2, [r2, #4]
 800ba88:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800ba8c:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800ba8e:	e9d4 3117 	ldrd	r3, r1, [r4, #92]	; 0x5c
 800ba92:	d153      	bne.n	800bb3c <spi_stm32_transceive+0x3e0>
  return (*((__IO uint8_t *)&SPIx->DR));
 800ba94:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800ba98:	b2d2      	uxtb	r2, r2
 800ba9a:	b10b      	cbz	r3, 800baa0 <spi_stm32_transceive+0x344>
 800ba9c:	b101      	cbz	r1, 800baa0 <spi_stm32_transceive+0x344>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800ba9e:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800baa0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800baa2:	b18b      	cbz	r3, 800bac8 <spi_stm32_transceive+0x36c>
	ctx->rx_len -= len;
 800baa4:	3b01      	subs	r3, #1
 800baa6:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f040 80ac 	bne.w	800bc06 <spi_stm32_transceive+0x4aa>
		++ctx->current_rx;
 800baae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bab0:	3308      	adds	r3, #8
 800bab2:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800bab4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bab6:	3b01      	subs	r3, #1
 800bab8:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800baba:	2301      	movs	r3, #1
 800babc:	4652      	mov	r2, sl
 800babe:	4649      	mov	r1, r9
 800bac0:	4640      	mov	r0, r8
 800bac2:	f008 fe0c 	bl	80146de <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 800bac6:	65e0      	str	r0, [r4, #92]	; 0x5c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800bac8:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 800bacc:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 800bad0:	f000 80a9 	beq.w	800bc26 <spi_stm32_transceive+0x4ca>
		LOG_ERR("%s: err=%d", __func__,
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	4b7c      	ldr	r3, [pc, #496]	; (800bcc8 <spi_stm32_transceive+0x56c>)
 800bad8:	9303      	str	r3, [sp, #12]
 800bada:	4b7c      	ldr	r3, [pc, #496]	; (800bccc <spi_stm32_transceive+0x570>)
 800badc:	9302      	str	r3, [sp, #8]
 800bade:	2300      	movs	r3, #0
 800bae0:	e9cd 3300 	strd	r3, r3, [sp]
 800bae4:	2201      	movs	r2, #1
 800bae6:	4618      	mov	r0, r3
 800bae8:	4979      	ldr	r1, [pc, #484]	; (800bcd0 <spi_stm32_transceive+0x574>)
 800baea:	f008 fe0c 	bl	8014706 <z_log_msg2_runtime_create.constprop.0>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 800baee:	f8db 3008 	ldr.w	r3, [fp, #8]
 800baf2:	065a      	lsls	r2, r3, #25
 800baf4:	d507      	bpl.n	800bb06 <spi_stm32_transceive+0x3aa>
  tmpreg = SPIx->DR;
 800baf6:	f8db 300c 	ldr.w	r3, [fp, #12]
 800bafa:	61bb      	str	r3, [r7, #24]
  (void) tmpreg;
 800bafc:	69bb      	ldr	r3, [r7, #24]
  tmpreg = SPIx->SR;
 800bafe:	f8db 3008 	ldr.w	r3, [fp, #8]
 800bb02:	61bb      	str	r3, [r7, #24]
  (void) tmpreg;
 800bb04:	69bb      	ldr	r3, [r7, #24]
		return -EIO;
 800bb06:	f06f 0604 	mvn.w	r6, #4
 800bb0a:	e094      	b.n	800bc36 <spi_stm32_transceive+0x4da>
	return !!(ctx->tx_len);
 800bb0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
 800bb0e:	b10a      	cbz	r2, 800bb14 <spi_stm32_transceive+0x3b8>
 800bb10:	b103      	cbz	r3, 800bb14 <spi_stm32_transceive+0x3b8>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800bb12:	8811      	ldrh	r1, [r2, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800bb14:	f8ab 100c 	strh.w	r1, [fp, #12]
	if (!ctx->tx_len) {
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d0af      	beq.n	800ba7c <spi_stm32_transceive+0x320>
	ctx->tx_len -= len;
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800bb20:	b93b      	cbnz	r3, 800bb32 <spi_stm32_transceive+0x3d6>
		++ctx->current_tx;
 800bb22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb24:	3308      	adds	r3, #8
 800bb26:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800bb28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e765      	b.n	800b9fe <spi_stm32_transceive+0x2a2>
	} else if (ctx->tx_buf) {
 800bb32:	2a00      	cmp	r2, #0
 800bb34:	d0a2      	beq.n	800ba7c <spi_stm32_transceive+0x320>
		ctx->tx_buf += dfs * len;
 800bb36:	3202      	adds	r2, #2
 800bb38:	6562      	str	r2, [r4, #84]	; 0x54
 800bb3a:	e79f      	b.n	800ba7c <spi_stm32_transceive+0x320>
  return (uint16_t)(READ_REG(SPIx->DR));
 800bb3c:	f8db 200c 	ldr.w	r2, [fp, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
 800bb40:	b10b      	cbz	r3, 800bb46 <spi_stm32_transceive+0x3ea>
 800bb42:	b101      	cbz	r1, 800bb46 <spi_stm32_transceive+0x3ea>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800bb44:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800bb46:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0bd      	beq.n	800bac8 <spi_stm32_transceive+0x36c>
	ctx->rx_len -= len;
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d162      	bne.n	800bc1a <spi_stm32_transceive+0x4be>
		++ctx->current_rx;
 800bb54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bb56:	3308      	adds	r3, #8
 800bb58:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800bb5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800bb60:	2302      	movs	r3, #2
 800bb62:	e7ab      	b.n	800babc <spi_stm32_transceive+0x360>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800bb64:	f8db 2008 	ldr.w	r2, [fp, #8]
 800bb68:	0790      	lsls	r0, r2, #30
 800bb6a:	d545      	bpl.n	800bbf8 <spi_stm32_transceive+0x49c>
	return !!(ctx->tx_len);
 800bb6c:	6da1      	ldr	r1, [r4, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	d042      	beq.n	800bbf8 <spi_stm32_transceive+0x49c>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800bb72:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800bb76:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800bb78:	6d62      	ldr	r2, [r4, #84]	; 0x54
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800bb7a:	d12c      	bne.n	800bbd6 <spi_stm32_transceive+0x47a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800bb7c:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 800bb7e:	f88b 300c 	strb.w	r3, [fp, #12]
	if (!ctx->tx_len) {
 800bb82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb84:	b1a3      	cbz	r3, 800bbb0 <spi_stm32_transceive+0x454>
	ctx->tx_len -= len;
 800bb86:	3b01      	subs	r3, #1
 800bb88:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800bb8a:	b96b      	cbnz	r3, 800bba8 <spi_stm32_transceive+0x44c>
		++ctx->current_tx;
 800bb8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb8e:	3308      	adds	r3, #8
 800bb90:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800bb92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bb94:	3b01      	subs	r3, #1
 800bb96:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
 800bb9e:	462a      	mov	r2, r5
 800bba0:	f008 fd9d 	bl	80146de <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800bba4:	6560      	str	r0, [r4, #84]	; 0x54
 800bba6:	e003      	b.n	800bbb0 <spi_stm32_transceive+0x454>
	} else if (ctx->tx_buf) {
 800bba8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bbaa:	b10b      	cbz	r3, 800bbb0 <spi_stm32_transceive+0x454>
		ctx->tx_buf += dfs * len;
 800bbac:	3301      	adds	r3, #1
 800bbae:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800bbb0:	f8db 3008 	ldr.w	r3, [fp, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 800bbb4:	07d9      	lsls	r1, r3, #31
 800bbb6:	d587      	bpl.n	800bac8 <spi_stm32_transceive+0x36c>
	return !!(ctx->rx_buf && ctx->rx_len);
 800bbb8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d084      	beq.n	800bac8 <spi_stm32_transceive+0x36c>
 800bbbe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	d081      	beq.n	800bac8 <spi_stm32_transceive+0x36c>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	8892      	ldrh	r2, [r2, #4]
 800bbc8:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800bbcc:	2a08      	cmp	r2, #8
 800bbce:	d121      	bne.n	800bc14 <spi_stm32_transceive+0x4b8>
  return (*((__IO uint8_t *)&SPIx->DR));
 800bbd0:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800bbd4:	e763      	b.n	800ba9e <spi_stm32_transceive+0x342>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800bbd6:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 800bbd8:	f8ab 300c 	strh.w	r3, [fp, #12]
	ctx->tx_len -= len;
 800bbdc:	3901      	subs	r1, #1
 800bbde:	65a1      	str	r1, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800bbe0:	b939      	cbnz	r1, 800bbf2 <spi_stm32_transceive+0x496>
		++ctx->current_tx;
 800bbe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bbe4:	3308      	adds	r3, #8
 800bbe6:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
 800bbe8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bbea:	3b01      	subs	r3, #1
 800bbec:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e7d3      	b.n	800bb9a <spi_stm32_transceive+0x43e>
		ctx->tx_buf += dfs * len;
 800bbf2:	3202      	adds	r2, #2
 800bbf4:	6562      	str	r2, [r4, #84]	; 0x54
 800bbf6:	e7db      	b.n	800bbb0 <spi_stm32_transceive+0x454>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800bbf8:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bbfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc00:	f8cb 3004 	str.w	r3, [fp, #4]
	defined(CONFIG_SOC_SERIES_STM32U5X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 800bc04:	e7d4      	b.n	800bbb0 <spi_stm32_transceive+0x454>
	} else if (ctx->rx_buf) {
 800bc06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f43f af5d 	beq.w	800bac8 <spi_stm32_transceive+0x36c>
		ctx->rx_buf += dfs * len;
 800bc0e:	3301      	adds	r3, #1
 800bc10:	65e3      	str	r3, [r4, #92]	; 0x5c
 800bc12:	e759      	b.n	800bac8 <spi_stm32_transceive+0x36c>
  return (uint16_t)(READ_REG(SPIx->DR));
 800bc14:	f8db 200c 	ldr.w	r2, [fp, #12]
 800bc18:	e794      	b.n	800bb44 <spi_stm32_transceive+0x3e8>
	} else if (ctx->rx_buf) {
 800bc1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f43f af53 	beq.w	800bac8 <spi_stm32_transceive+0x36c>
		ctx->rx_buf += dfs * len;
 800bc22:	3302      	adds	r3, #2
 800bc24:	e7f4      	b.n	800bc10 <spi_stm32_transceive+0x4b4>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800bc26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f47f aec3 	bne.w	800b9b4 <spi_stm32_transceive+0x258>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 800bc2e:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800bc30:	2e00      	cmp	r6, #0
 800bc32:	f47f aebf 	bne.w	800b9b4 <spi_stm32_transceive+0x258>
	SPI_TypeDef *spi = cfg->spi;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	689d      	ldr	r5, [r3, #8]
	_spi_context_cs_control(ctx, on, false);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	6918      	ldr	r0, [r3, #16]
 800bc42:	4611      	mov	r1, r2
 800bc44:	f008 fd83 	bl	801474e <_spi_context_cs_control>
	if (cfg->use_subghzspi_nss) {
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	7c1b      	ldrb	r3, [r3, #16]
 800bc4e:	b133      	cbz	r3, 800bc5e <spi_stm32_transceive+0x502>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800bc50:	4a20      	ldr	r2, [pc, #128]	; (800bcd4 <spi_stm32_transceive+0x578>)
 800bc52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bc56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800bc5e:	68ab      	ldr	r3, [r5, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 800bc60:	07db      	lsls	r3, r3, #31
 800bc62:	d417      	bmi.n	800bc94 <spi_stm32_transceive+0x538>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800bc6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc6e:	d102      	bne.n	800bc76 <spi_stm32_transceive+0x51a>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800bc70:	68ab      	ldr	r3, [r5, #8]
 800bc72:	0618      	lsls	r0, r3, #24
 800bc74:	d4fc      	bmi.n	800bc70 <spi_stm32_transceive+0x514>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800bc76:	68ab      	ldr	r3, [r5, #8]
 800bc78:	0699      	lsls	r1, r3, #26
 800bc7a:	d506      	bpl.n	800bc8a <spi_stm32_transceive+0x52e>
  tmpreg_sr = SPIx->SR;
 800bc7c:	68ab      	ldr	r3, [r5, #8]
 800bc7e:	633b      	str	r3, [r7, #48]	; 0x30
  (void) tmpreg_sr;
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc88:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800bc8a:	682b      	ldr	r3, [r5, #0]
 800bc8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc90:	602b      	str	r3, [r5, #0]
}
 800bc92:	e5be      	b.n	800b812 <spi_stm32_transceive+0xb6>
  return (*((__IO uint8_t *)&SPIx->DR));
 800bc94:	7b2b      	ldrb	r3, [r5, #12]
 800bc96:	e7e2      	b.n	800bc5e <spi_stm32_transceive+0x502>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800bc98:	682a      	ldr	r2, [r5, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 800bc9a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800bc9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bca2:	602a      	str	r2, [r5, #0]
 800bca4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800bca8:	682a      	ldr	r2, [r5, #0]
 800bcaa:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800bcae:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	602b      	str	r3, [r5, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800bcb6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800bcba:	079a      	lsls	r2, r3, #30
 800bcbc:	f53f adee 	bmi.w	800b89c <spi_stm32_transceive+0x140>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800bcc0:	682a      	ldr	r2, [r5, #0]
 800bcc2:	f022 0202 	bic.w	r2, r2, #2
 800bcc6:	e5ec      	b.n	800b8a2 <spi_stm32_transceive+0x146>
 800bcc8:	080191e7 	.word	0x080191e7
 800bccc:	08019196 	.word	0x08019196
 800bcd0:	08016f40 	.word	0x08016f40
 800bcd4:	58000400 	.word	0x58000400

0800bcd8 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800bcd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800bcda:	ab0b      	add	r3, sp, #44	; 0x2c
 800bcdc:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800bcde:	9303      	str	r3, [sp, #12]
 800bce0:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800bce2:	9302      	str	r3, [sp, #8]
 800bce4:	2300      	movs	r3, #0
 800bce6:	e9cd 3300 	strd	r3, r3, [sp]
 800bcea:	2201      	movs	r2, #1
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7f7 fe29 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 800bcf2:	b007      	add	sp, #28
 800bcf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcf8:	08019172 	.word	0x08019172

0800bcfc <spi_bitbang_init>:
	.transceive_async = spi_bitbang_transceive_async,
#endif /* CONFIG_SPI_ASYNC */
};

int spi_bitbang_init(const struct device *dev)
{
 800bcfc:	b530      	push	{r4, r5, lr}
	const struct spi_bitbang_config *config = dev->config;
 800bcfe:	6845      	ldr	r5, [r0, #4]
{
 800bd00:	b087      	sub	sp, #28
	int rc;

	if (!device_is_ready(config->clk_gpio.port)) {
 800bd02:	6828      	ldr	r0, [r5, #0]
 800bd04:	f00a f8a5 	bl	8015e52 <z_device_is_ready>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	b970      	cbnz	r0, 800bd2a <spi_bitbang_init+0x2e>
		LOG_ERR("GPIO port for clk pin is not ready");
 800bd0c:	4a24      	ldr	r2, [pc, #144]	; (800bda0 <spi_bitbang_init+0xa4>)
		return rc;
	}

	if (config->mosi_gpio.port != NULL) {
		if (!device_is_ready(config->mosi_gpio.port)) {
			LOG_ERR("GPIO port for mosi pin is not ready");
 800bd0e:	9204      	str	r2, [sp, #16]
 800bd10:	2202      	movs	r2, #2
 800bd12:	9203      	str	r2, [sp, #12]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800bd14:	4823      	ldr	r0, [pc, #140]	; (800bda4 <spi_bitbang_init+0xa8>)
 800bd16:	aa03      	add	r2, sp, #12
 800bd18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			return -ENODEV;
 800bd1c:	f06f 0412 	mvn.w	r4, #18
 800bd20:	f005 fbb3 	bl	801148a <z_impl_z_log_msg2_static_create>
			return rc;
		}
	}

	return 0;
}
 800bd24:	4620      	mov	r0, r4
 800bd26:	b007      	add	sp, #28
 800bd28:	bd30      	pop	{r4, r5, pc}
	rc = gpio_pin_configure_dt(&config->clk_gpio, GPIO_OUTPUT_INACTIVE);
 800bd2a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f008 fd45 	bl	80147be <gpio_pin_configure_dt>
	if (rc < 0) {
 800bd34:	1e04      	subs	r4, r0, #0
 800bd36:	da0c      	bge.n	800bd52 <spi_bitbang_init+0x56>
		LOG_ERR("Couldn't configure clk pin; (%d)", rc);
 800bd38:	4b1b      	ldr	r3, [pc, #108]	; (800bda8 <spi_bitbang_init+0xac>)
			LOG_ERR("Couldn't configure miso pin; (%d)", rc);
 800bd3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bd3e:	2303      	movs	r3, #3
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	4818      	ldr	r0, [pc, #96]	; (800bda4 <spi_bitbang_init+0xa8>)
 800bd44:	2300      	movs	r3, #0
 800bd46:	aa03      	add	r2, sp, #12
 800bd48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 800bd4c:	f005 fb9d 	bl	801148a <z_impl_z_log_msg2_static_create>
			return rc;
 800bd50:	e7e8      	b.n	800bd24 <spi_bitbang_init+0x28>
	if (config->mosi_gpio.port != NULL) {
 800bd52:	68a8      	ldr	r0, [r5, #8]
 800bd54:	b178      	cbz	r0, 800bd76 <spi_bitbang_init+0x7a>
 800bd56:	f00a f87c 	bl	8015e52 <z_device_is_ready>
		if (!device_is_ready(config->mosi_gpio.port)) {
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	b908      	cbnz	r0, 800bd62 <spi_bitbang_init+0x66>
			LOG_ERR("GPIO port for mosi pin is not ready");
 800bd5e:	4a13      	ldr	r2, [pc, #76]	; (800bdac <spi_bitbang_init+0xb0>)
 800bd60:	e7d5      	b.n	800bd0e <spi_bitbang_init+0x12>
		rc = gpio_pin_configure_dt(&config->mosi_gpio,
 800bd62:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800bd66:	f105 0008 	add.w	r0, r5, #8
 800bd6a:	f008 fd28 	bl	80147be <gpio_pin_configure_dt>
		if (rc < 0) {
 800bd6e:	1e04      	subs	r4, r0, #0
 800bd70:	da01      	bge.n	800bd76 <spi_bitbang_init+0x7a>
			LOG_ERR("Couldn't configure mosi pin; (%d)", rc);
 800bd72:	4b0f      	ldr	r3, [pc, #60]	; (800bdb0 <spi_bitbang_init+0xb4>)
 800bd74:	e7e1      	b.n	800bd3a <spi_bitbang_init+0x3e>
	if (config->miso_gpio.port != NULL) {
 800bd76:	6928      	ldr	r0, [r5, #16]
 800bd78:	b908      	cbnz	r0, 800bd7e <spi_bitbang_init+0x82>
	return 0;
 800bd7a:	2400      	movs	r4, #0
 800bd7c:	e7d2      	b.n	800bd24 <spi_bitbang_init+0x28>
 800bd7e:	f00a f868 	bl	8015e52 <z_device_is_ready>
		if (!device_is_ready(config->miso_gpio.port)) {
 800bd82:	4603      	mov	r3, r0
 800bd84:	b908      	cbnz	r0, 800bd8a <spi_bitbang_init+0x8e>
			LOG_ERR("GPIO port for miso pin is not ready");
 800bd86:	4a0b      	ldr	r2, [pc, #44]	; (800bdb4 <spi_bitbang_init+0xb8>)
 800bd88:	e7c1      	b.n	800bd0e <spi_bitbang_init+0x12>
		rc = gpio_pin_configure_dt(&config->miso_gpio, GPIO_INPUT);
 800bd8a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bd8e:	f105 0010 	add.w	r0, r5, #16
 800bd92:	f008 fd14 	bl	80147be <gpio_pin_configure_dt>
		if (rc < 0) {
 800bd96:	1e04      	subs	r4, r0, #0
 800bd98:	daef      	bge.n	800bd7a <spi_bitbang_init+0x7e>
			LOG_ERR("Couldn't configure miso pin; (%d)", rc);
 800bd9a:	4b07      	ldr	r3, [pc, #28]	; (800bdb8 <spi_bitbang_init+0xbc>)
 800bd9c:	e7cd      	b.n	800bd3a <spi_bitbang_init+0x3e>
 800bd9e:	bf00      	nop
 800bda0:	080191f9 	.word	0x080191f9
 800bda4:	08016f38 	.word	0x08016f38
 800bda8:	0801921c 	.word	0x0801921c
 800bdac:	0801923d 	.word	0x0801923d
 800bdb0:	08019261 	.word	0x08019261
 800bdb4:	08019283 	.word	0x08019283
 800bdb8:	080192a7 	.word	0x080192a7

0800bdbc <spi_bitbang_transceive>:
{
 800bdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	460f      	mov	r7, r1
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800bdc2:	8889      	ldrh	r1, [r1, #4]
	const struct spi_bitbang_config *info = dev->config;
 800bdc4:	6846      	ldr	r6, [r0, #4]
	struct spi_bitbang_data *data = dev->data;
 800bdc6:	6904      	ldr	r4, [r0, #16]
{
 800bdc8:	4691      	mov	r9, r2
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800bdca:	f011 0201 	ands.w	r2, r1, #1
{
 800bdce:	b09d      	sub	sp, #116	; 0x74
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	4698      	mov	r8, r3
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800bdd4:	f000 808d 	beq.w	800bef2 <spi_bitbang_transceive+0x136>
		LOG_ERR("Slave mode not supported");
 800bdd8:	4b75      	ldr	r3, [pc, #468]	; (800bfb0 <spi_bitbang_transceive+0x1f4>)
 800bdda:	931a      	str	r3, [sp, #104]	; 0x68
 800bddc:	2302      	movs	r3, #2
 800bdde:	9319      	str	r3, [sp, #100]	; 0x64
 800bde0:	2300      	movs	r3, #0
 800bde2:	4874      	ldr	r0, [pc, #464]	; (800bfb4 <spi_bitbang_transceive+0x1f8>)
 800bde4:	aa19      	add	r2, sp, #100	; 0x64
 800bde6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800bdea:	f005 fb4e 	bl	801148a <z_impl_z_log_msg2_static_create>
	spi_context_buffers_setup(ctx, tx_bufs, rx_bufs, data->dfs);
 800bdee:	f894 a06c 	ldrb.w	sl, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800bdf2:	f1b9 0f00 	cmp.w	r9, #0
 800bdf6:	f040 80c5 	bne.w	800bf84 <spi_bitbang_transceive+0x1c8>
 800bdfa:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800bdfe:	464a      	mov	r2, r9
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800be00:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800be04:	930d      	str	r3, [sp, #52]	; 0x34
 800be06:	f104 0b44 	add.w	fp, r4, #68	; 0x44
 800be0a:	f104 0358 	add.w	r3, r4, #88	; 0x58
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800be0e:	64a2      	str	r2, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 800be10:	930e      	str	r3, [sp, #56]	; 0x38
 800be12:	f104 0258 	add.w	r2, r4, #88	; 0x58
 800be16:	4653      	mov	r3, sl
 800be18:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800be1c:	4658      	mov	r0, fp
 800be1e:	f008 fd01 	bl	8014824 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 800be22:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800be24:	f1b8 0f00 	cmp.w	r8, #0
 800be28:	f040 80b5 	bne.w	800bf96 <spi_bitbang_transceive+0x1da>
 800be2c:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800be30:	4643      	mov	r3, r8
 800be32:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 800be34:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800be38:	9310      	str	r3, [sp, #64]	; 0x40
 800be3a:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800be3e:	9311      	str	r3, [sp, #68]	; 0x44
 800be40:	f104 0360 	add.w	r3, r4, #96	; 0x60
 800be44:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800be48:	9312      	str	r3, [sp, #72]	; 0x48
 800be4a:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800be4e:	4653      	mov	r3, sl
 800be50:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800be54:	f008 fce6 	bl	8014824 <spi_context_get_next_buf>
	if (SPI_MODE_GET(spi_cfg->operation) & SPI_MODE_CPOL) {
 800be58:	88bf      	ldrh	r7, [r7, #4]
	ctx->rx_buf = (uint8_t *)
 800be5a:	65e0      	str	r0, [r4, #92]	; 0x5c
 800be5c:	f007 0302 	and.w	r3, r7, #2
 800be60:	930a      	str	r3, [sp, #40]	; 0x28
 800be62:	f3c7 0340 	ubfx	r3, r7, #1, #1
	ctx->sync_status = 0;
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	930f      	str	r3, [sp, #60]	; 0x3c
 800be6c:	f007 0304 	and.w	r3, r7, #4
 800be70:	930b      	str	r3, [sp, #44]	; 0x2c
	gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800be72:	f3c7 0140 	ubfx	r1, r7, #1, #1
 800be76:	f007 0308 	and.w	r3, r7, #8
 800be7a:	4630      	mov	r0, r6
 800be7c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
	if (SPI_MODE_GET(spi_cfg->operation) & SPI_MODE_LOOP) {
 800be80:	930c      	str	r3, [sp, #48]	; 0x30
	gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800be82:	f008 fce3 	bl	801484c <gpio_pin_set_dt.isra.0>
	_spi_context_cs_control(ctx, on, false);
 800be86:	4642      	mov	r2, r8
 800be88:	2101      	movs	r1, #1
 800be8a:	4620      	mov	r0, r4
 800be8c:	f008 fcf2 	bl	8014874 <_spi_context_cs_control>
	const uint32_t wait_us = data->wait_us;
 800be90:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800be92:	9308      	str	r3, [sp, #32]
	const struct spi_bitbang_config *info = dev->config;
 800be94:	686b      	ldr	r3, [r5, #4]
	return info->miso_gpio.port != NULL;
 800be96:	691a      	ldr	r2, [r3, #16]
	return info->mosi_gpio.port != NULL;
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	9309      	str	r3, [sp, #36]	; 0x24
			if (!loop && do_read && !cpha) {
 800be9c:	f007 030c 	and.w	r3, r7, #12
	return info->miso_gpio.port != NULL;
 800bea0:	9207      	str	r2, [sp, #28]
			if (!loop && do_read && !cpha) {
 800bea2:	9314      	str	r3, [sp, #80]	; 0x50
	return !!(ctx->tx_buf && ctx->tx_len);
 800bea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bea6:	b10b      	cbz	r3, 800beac <spi_bitbang_transceive+0xf0>
 800bea8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800beaa:	b94a      	cbnz	r2, 800bec0 <spi_bitbang_transceive+0x104>
	return !!(ctx->rx_buf && ctx->rx_len);
 800beac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800beae:	2a00      	cmp	r2, #0
 800beb0:	f000 8116 	beq.w	800c0e0 <spi_bitbang_transceive+0x324>
 800beb4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800beb6:	2a00      	cmp	r2, #0
 800beb8:	f000 8112 	beq.w	800c0e0 <spi_bitbang_transceive+0x324>
		if (ctx->tx_len) {
 800bebc:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800bebe:	b12f      	cbz	r7, 800becc <spi_bitbang_transceive+0x110>
			switch (data->dfs) {
 800bec0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800bec2:	2a01      	cmp	r2, #1
 800bec4:	d070      	beq.n	800bfa8 <spi_bitbang_transceive+0x1ec>
 800bec6:	2a02      	cmp	r2, #2
 800bec8:	d170      	bne.n	800bfac <spi_bitbang_transceive+0x1f0>
				w = *(uint16_t *)(ctx->tx_buf);
 800beca:	881f      	ldrh	r7, [r3, #0]
		int shift = data->bits - 1;
 800becc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bece:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
		if (has_miso && spi_context_rx_buf_on(ctx)) {
 800bed2:	9b07      	ldr	r3, [sp, #28]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f000 80ef 	beq.w	800c0b8 <spi_bitbang_transceive+0x2fc>
 800beda:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800bedc:	b11d      	cbz	r5, 800bee6 <spi_bitbang_transceive+0x12a>
 800bede:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800bee0:	3d00      	subs	r5, #0
 800bee2:	bf18      	it	ne
 800bee4:	2501      	movne	r5, #1
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800bee6:	f106 0308 	add.w	r3, r6, #8
		bool do_read = false;
 800beea:	f04f 0900 	mov.w	r9, #0
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800beee:	9313      	str	r3, [sp, #76]	; 0x4c
 800bef0:	e0a5      	b.n	800c03e <spi_bitbang_transceive+0x282>
	if (config->operation & (SPI_TRANSFER_LSB | SPI_LINES_DUAL
 800bef2:	f011 0310 	ands.w	r3, r1, #16
 800bef6:	d001      	beq.n	800befc <spi_bitbang_transceive+0x140>
		LOG_ERR("Unsupported configuration");
 800bef8:	4b2f      	ldr	r3, [pc, #188]	; (800bfb8 <spi_bitbang_transceive+0x1fc>)
 800befa:	e76e      	b.n	800bdda <spi_bitbang_transceive+0x1e>
	const int bits = SPI_WORD_SIZE_GET(config->operation);
 800befc:	f3c1 1145 	ubfx	r1, r1, #5, #6
	if (bits > 16) {
 800bf00:	2910      	cmp	r1, #16
 800bf02:	dd04      	ble.n	800bf0e <spi_bitbang_transceive+0x152>
		LOG_ERR("Word sizes > 16 bits not supported");
 800bf04:	4a2d      	ldr	r2, [pc, #180]	; (800bfbc <spi_bitbang_transceive+0x200>)
 800bf06:	921a      	str	r2, [sp, #104]	; 0x68
 800bf08:	2202      	movs	r2, #2
 800bf0a:	9219      	str	r2, [sp, #100]	; 0x64
 800bf0c:	e769      	b.n	800bde2 <spi_bitbang_transceive+0x26>
	data->dfs = ((data->bits - 1) / 8) + 1;
 800bf0e:	1e4b      	subs	r3, r1, #1
 800bf10:	bf48      	it	mi
 800bf12:	1d8b      	addmi	r3, r1, #6
 800bf14:	10db      	asrs	r3, r3, #3
	if (config->frequency > 0) {
 800bf16:	683a      	ldr	r2, [r7, #0]
	data->bits = bits;
 800bf18:	6661      	str	r1, [r4, #100]	; 0x64
	data->dfs = ((data->bits - 1) / 8) + 1;
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (config->frequency > 0) {
 800bf1e:	b322      	cbz	r2, 800bf6a <spi_bitbang_transceive+0x1ae>
		data->wait_us = (1000000ul * 2000ul / config->frequency) / 2000ul;
 800bf20:	4b27      	ldr	r3, [pc, #156]	; (800bfc0 <spi_bitbang_transceive+0x204>)
 800bf22:	fbb3 f3f2 	udiv	r3, r3, r2
		data->wait_us /= 2;
 800bf26:	105b      	asrs	r3, r3, #1
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800bf28:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800bf2c:	66a3      	str	r3, [r4, #104]	; 0x68
	data->ctx.config = config;
 800bf2e:	6027      	str	r7, [r4, #0]
 800bf30:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800bf34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf38:	459a      	cmp	sl, r3
 800bf3a:	f4bf af58 	bcs.w	800bdee <spi_bitbang_transceive+0x32>
		if (!device_is_ready(cs_gpio->port)) {
 800bf3e:	f8da 0000 	ldr.w	r0, [sl]
 800bf42:	f009 ff86 	bl	8015e52 <z_device_is_ready>
 800bf46:	4603      	mov	r3, r0
 800bf48:	b988      	cbnz	r0, 800bf6e <spi_bitbang_transceive+0x1b2>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 800bf4a:	f89a 2004 	ldrb.w	r2, [sl, #4]
 800bf4e:	9204      	str	r2, [sp, #16]
 800bf50:	f8da 2000 	ldr.w	r2, [sl]
 800bf54:	4917      	ldr	r1, [pc, #92]	; (800bfb4 <spi_bitbang_transceive+0x1f8>)
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	9203      	str	r2, [sp, #12]
 800bf5a:	4a1a      	ldr	r2, [pc, #104]	; (800bfc4 <spi_bitbang_transceive+0x208>)
 800bf5c:	9000      	str	r0, [sp, #0]
 800bf5e:	e9cd 0201 	strd	r0, r2, [sp, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f7ff feb8 	bl	800bcd8 <z_log_msg2_runtime_create.constprop.0>
			return -ENODEV;
 800bf68:	e741      	b.n	800bdee <spi_bitbang_transceive+0x32>
		data->wait_us = 8 / 2; /* 125 kHz */
 800bf6a:	2304      	movs	r3, #4
 800bf6c:	e7dc      	b.n	800bf28 <spi_bitbang_transceive+0x16c>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
 800bf6e:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800bf72:	4650      	mov	r0, sl
 800bf74:	f008 fc23 	bl	80147be <gpio_pin_configure_dt>
		if (ret < 0) {
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	f6ff af38 	blt.w	800bdee <spi_bitbang_transceive+0x32>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 800bf7e:	f10a 0a08 	add.w	sl, sl, #8
 800bf82:	e7d5      	b.n	800bf30 <spi_bitbang_transceive+0x174>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800bf84:	f8d9 2000 	ldr.w	r2, [r9]
 800bf88:	6462      	str	r2, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800bf8a:	2a00      	cmp	r2, #0
 800bf8c:	f43f af38 	beq.w	800be00 <spi_bitbang_transceive+0x44>
 800bf90:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bf94:	e734      	b.n	800be00 <spi_bitbang_transceive+0x44>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800bf96:	f8d8 3000 	ldr.w	r3, [r8]
 800bf9a:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f43f af48 	beq.w	800be32 <spi_bitbang_transceive+0x76>
 800bfa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfa6:	e744      	b.n	800be32 <spi_bitbang_transceive+0x76>
				w = *(uint8_t *)(ctx->tx_buf);
 800bfa8:	781f      	ldrb	r7, [r3, #0]
				break;
 800bfaa:	e78f      	b.n	800becc <spi_bitbang_transceive+0x110>
			switch (data->dfs) {
 800bfac:	2700      	movs	r7, #0
 800bfae:	e78d      	b.n	800becc <spi_bitbang_transceive+0x110>
 800bfb0:	080192c9 	.word	0x080192c9
 800bfb4:	08016f38 	.word	0x08016f38
 800bfb8:	080192e2 	.word	0x080192e2
 800bfbc:	080192fc 	.word	0x080192fc
 800bfc0:	000f4240 	.word	0x000f4240
 800bfc4:	08019172 	.word	0x08019172
			if (has_mosi) {
 800bfc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
			const int d = (w >> shift) & 0x1;
 800bfca:	fa47 fa08 	asr.w	sl, r7, r8
 800bfce:	f00a 0a01 	and.w	sl, sl, #1
			if (has_mosi) {
 800bfd2:	b11b      	cbz	r3, 800bfdc <spi_bitbang_transceive+0x220>
				gpio_pin_set_dt(&info->mosi_gpio, d);
 800bfd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bfd6:	4651      	mov	r1, sl
 800bfd8:	f008 fc38 	bl	801484c <gpio_pin_set_dt.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
 800bfdc:	9808      	ldr	r0, [sp, #32]
 800bfde:	f002 fccd 	bl	800e97c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, !clock_state);
 800bfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe4:	fab3 f183 	clz	r1, r3
 800bfe8:	0949      	lsrs	r1, r1, #5
 800bfea:	4630      	mov	r0, r6
 800bfec:	f008 fc2e 	bl	801484c <gpio_pin_set_dt.isra.0>
			if (!loop && do_read && !cpha) {
 800bff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d15a      	bne.n	800c0ac <spi_bitbang_transceive+0x2f0>
 800bff6:	2d00      	cmp	r5, #0
 800bff8:	d05a      	beq.n	800c0b0 <spi_bitbang_transceive+0x2f4>
	return gpio_pin_get(spec->port, spec->pin);
 800bffa:	7d31      	ldrb	r1, [r6, #20]
 800bffc:	6930      	ldr	r0, [r6, #16]
 800bffe:	f008 fbfd 	bl	80147fc <gpio_pin_get>
 800c002:	4603      	mov	r3, r0
 800c004:	9315      	str	r3, [sp, #84]	; 0x54
 800c006:	9808      	ldr	r0, [sp, #32]
 800c008:	f002 fcb8 	bl	800e97c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&info->clk_gpio, clock_state);
 800c00c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c00e:	4630      	mov	r0, r6
 800c010:	f008 fc1c 	bl	801484c <gpio_pin_set_dt.isra.0>
			if (!loop && do_read && cpha) {
 800c014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c016:	2b00      	cmp	r3, #0
 800c018:	d14c      	bne.n	800c0b4 <spi_bitbang_transceive+0x2f8>
 800c01a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c01c:	b135      	cbz	r5, 800c02c <spi_bitbang_transceive+0x270>
 800c01e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c020:	b122      	cbz	r2, 800c02c <spi_bitbang_transceive+0x270>
 800c022:	7d31      	ldrb	r1, [r6, #20]
 800c024:	6930      	ldr	r0, [r6, #16]
 800c026:	f008 fbe9 	bl	80147fc <gpio_pin_get>
 800c02a:	4603      	mov	r3, r0
			r = (r << 1) | (b ? 0x1 : 0x0);
 800c02c:	3b00      	subs	r3, #0
 800c02e:	bf18      	it	ne
 800c030:	2301      	movne	r3, #1
 800c032:	ea43 0949 	orr.w	r9, r3, r9, lsl #1
 800c036:	fa1f f989 	uxth.w	r9, r9
			--shift;
 800c03a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		while (shift >= 0) {
 800c03e:	f1b8 0f00 	cmp.w	r8, #0
 800c042:	dac1      	bge.n	800bfc8 <spi_bitbang_transceive+0x20c>
	return !!(ctx->rx_buf && ctx->rx_len);
 800c044:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c046:	b143      	cbz	r3, 800c05a <spi_bitbang_transceive+0x29e>
 800c048:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c04a:	b132      	cbz	r2, 800c05a <spi_bitbang_transceive+0x29e>
			switch (data->dfs) {
 800c04c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c04e:	2a01      	cmp	r2, #1
 800c050:	d034      	beq.n	800c0bc <spi_bitbang_transceive+0x300>
 800c052:	2a02      	cmp	r2, #2
 800c054:	d101      	bne.n	800c05a <spi_bitbang_transceive+0x29e>
				*(uint16_t *)(ctx->rx_buf) = r;
 800c056:	f8a3 9000 	strh.w	r9, [r3]
	if (!ctx->tx_len) {
 800c05a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800c05c:	b182      	cbz	r2, 800c080 <spi_bitbang_transceive+0x2c4>
	ctx->tx_len -= len;
 800c05e:	3a01      	subs	r2, #1
		spi_context_update_tx(ctx, data->dfs, 1);
 800c060:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c062:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
 800c064:	bb6a      	cbnz	r2, 800c0c2 <spi_bitbang_transceive+0x306>
		++ctx->current_tx;
 800c066:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c068:	3208      	adds	r2, #8
 800c06a:	6462      	str	r2, [r4, #68]	; 0x44
		--ctx->tx_count;
 800c06c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c06e:	3a01      	subs	r2, #1
 800c070:	64a2      	str	r2, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800c072:	b2db      	uxtb	r3, r3
 800c074:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 800c078:	4658      	mov	r0, fp
 800c07a:	f008 fbd3 	bl	8014824 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 800c07e:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
 800c080:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c082:	2a00      	cmp	r2, #0
 800c084:	f43f af0e 	beq.w	800bea4 <spi_bitbang_transceive+0xe8>
	ctx->rx_len -= len;
 800c088:	3a01      	subs	r2, #1
		spi_context_update_rx(ctx, data->dfs, 1);
 800c08a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c08c:	6622      	str	r2, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
 800c08e:	b9fa      	cbnz	r2, 800c0d0 <spi_bitbang_transceive+0x314>
		++ctx->current_rx;
 800c090:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
 800c092:	9810      	ldr	r0, [sp, #64]	; 0x40
		++ctx->current_rx;
 800c094:	3208      	adds	r2, #8
 800c096:	64e2      	str	r2, [r4, #76]	; 0x4c
		--ctx->rx_count;
 800c098:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c09a:	3a01      	subs	r2, #1
 800c09c:	6522      	str	r2, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 800c0a4:	f008 fbbe 	bl	8014824 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 800c0a8:	65e0      	str	r0, [r4, #92]	; 0x5c
 800c0aa:	e6fb      	b.n	800bea4 <spi_bitbang_transceive+0xe8>
			b = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e7a9      	b.n	800c004 <spi_bitbang_transceive+0x248>
 800c0b0:	462b      	mov	r3, r5
 800c0b2:	e7a7      	b.n	800c004 <spi_bitbang_transceive+0x248>
				b = d;
 800c0b4:	4653      	mov	r3, sl
 800c0b6:	e7b9      	b.n	800c02c <spi_bitbang_transceive+0x270>
		bool do_read = false;
 800c0b8:	9d07      	ldr	r5, [sp, #28]
 800c0ba:	e714      	b.n	800bee6 <spi_bitbang_transceive+0x12a>
				*(uint8_t *)(ctx->rx_buf) = r;
 800c0bc:	f883 9000 	strb.w	r9, [r3]
				break;
 800c0c0:	e7cb      	b.n	800c05a <spi_bitbang_transceive+0x29e>
	} else if (ctx->tx_buf) {
 800c0c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c0c4:	2a00      	cmp	r2, #0
 800c0c6:	d0db      	beq.n	800c080 <spi_bitbang_transceive+0x2c4>
		ctx->tx_buf += dfs * len;
 800c0c8:	fa52 f383 	uxtab	r3, r2, r3
 800c0cc:	6563      	str	r3, [r4, #84]	; 0x54
 800c0ce:	e7d7      	b.n	800c080 <spi_bitbang_transceive+0x2c4>
	} else if (ctx->rx_buf) {
 800c0d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c0d2:	2a00      	cmp	r2, #0
 800c0d4:	f43f aee6 	beq.w	800bea4 <spi_bitbang_transceive+0xe8>
		ctx->rx_buf += dfs * len;
 800c0d8:	fa52 f383 	uxtab	r3, r2, r3
 800c0dc:	65e3      	str	r3, [r4, #92]	; 0x5c
 800c0de:	e6e1      	b.n	800bea4 <spi_bitbang_transceive+0xe8>
	_spi_context_cs_control(ctx, on, false);
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	4620      	mov	r0, r4
	ctx->sync_status = status;
 800c0e6:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
 800c0e8:	f008 fbc4 	bl	8014874 <_spi_context_cs_control>
	ctx->sync_status = status;
 800c0ec:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
 800c0ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c0f2:	f001 fe1f 	bl	800dd34 <z_impl_k_sem_give>
}
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	b01d      	add	sp, #116	; 0x74
 800c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fe:	bf00      	nop

0800c100 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 800c100:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 800c102:	ab0b      	add	r3, sp, #44	; 0x2c
 800c104:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 800c106:	9303      	str	r3, [sp, #12]
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <z_log_msg2_runtime_create.constprop.0+0x20>)
 800c10a:	9302      	str	r3, [sp, #8]
 800c10c:	2300      	movs	r3, #0
 800c10e:	e9cd 3300 	strd	r3, r3, [sp]
 800c112:	2201      	movs	r2, #1
 800c114:	4618      	mov	r0, r3
 800c116:	f7f7 fc15 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 800c11a:	b007      	add	sp, #28
 800c11c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c120:	0801932b 	.word	0x0801932b

0800c124 <lpuartdiv_calc>:

#if HAS_LPUART_1
#ifdef USART_PRESC_PRESCALER
uint32_t lpuartdiv_calc(const uint64_t clock_rate, const uint16_t presc_idx,
			const uint32_t baud_rate)
{
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	461d      	mov	r5, r3
	uint64_t lpuartdiv;

	lpuartdiv = clock_rate / LPUART_PRESCALER_TAB[presc_idx];
 800c128:	4b09      	ldr	r3, [pc, #36]	; (800c150 <lpuartdiv_calc+0x2c>)
 800c12a:	2600      	movs	r6, #0
 800c12c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c130:	4633      	mov	r3, r6
 800c132:	f7f4 fce7 	bl	8000b04 <__aeabi_uldivmod>
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 800c136:	0209      	lsls	r1, r1, #8
 800c138:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
	lpuartdiv += baud_rate / 2;
 800c13c:	086c      	lsrs	r4, r5, #1
	lpuartdiv *= LPUART_LPUARTDIV_FREQ_MUL;
 800c13e:	0200      	lsls	r0, r0, #8
	lpuartdiv += baud_rate / 2;
 800c140:	1820      	adds	r0, r4, r0
	lpuartdiv /= baud_rate;
 800c142:	462a      	mov	r2, r5
 800c144:	4633      	mov	r3, r6
 800c146:	f141 0100 	adc.w	r1, r1, #0
 800c14a:	f7f4 fcdb 	bl	8000b04 <__aeabi_uldivmod>

	return (uint32_t)lpuartdiv;
}
 800c14e:	bd70      	pop	{r4, r5, r6, pc}
 800c150:	08017986 	.word	0x08017986

0800c154 <uart_stm32_set_baudrate>:
}
#endif /* CONFIG_PM */

static inline void uart_stm32_set_baudrate(const struct device *dev,
					   uint32_t baud_rate)
{
 800c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uart_stm32_data *data = dev->data;

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 800c158:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 800c15a:	6846      	ldr	r6, [r0, #4]
	if (clock_control_get_rate(data->clock,
 800c15c:	685d      	ldr	r5, [r3, #4]
{
 800c15e:	b08e      	sub	sp, #56	; 0x38
 800c160:	4607      	mov	r7, r0
 800c162:	460c      	mov	r4, r1
			       (clock_control_subsys_t *)&config->pclken,
 800c164:	f106 0804 	add.w	r8, r6, #4
 800c168:	4628      	mov	r0, r5
 800c16a:	f009 fe72 	bl	8015e52 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800c16e:	b968      	cbnz	r0, 800c18c <uart_stm32_set_baudrate+0x38>
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 800c170:	4b34      	ldr	r3, [pc, #208]	; (800c244 <uart_stm32_set_baudrate+0xf0>)
 800c172:	930c      	str	r3, [sp, #48]	; 0x30
 800c174:	2302      	movs	r3, #2
 800c176:	930b      	str	r3, [sp, #44]	; 0x2c
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 800c178:	4833      	ldr	r0, [pc, #204]	; (800c248 <uart_stm32_set_baudrate+0xf4>)
 800c17a:	2300      	movs	r3, #0
 800c17c:	aa0b      	add	r2, sp, #44	; 0x2c
 800c17e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800c182:	f005 f982 	bl	801148a <z_impl_z_log_msg2_static_create>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 800c186:	b00e      	add	sp, #56	; 0x38
 800c188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (api->get_rate == NULL) {
 800c18c:	68ab      	ldr	r3, [r5, #8]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d0ed      	beq.n	800c170 <uart_stm32_set_baudrate+0x1c>
	return api->get_rate(dev, sys, rate);
 800c194:	aa07      	add	r2, sp, #28
 800c196:	4641      	mov	r1, r8
 800c198:	4628      	mov	r0, r5
 800c19a:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 800c19c:	2800      	cmp	r0, #0
 800c19e:	dbe7      	blt.n	800c170 <uart_stm32_set_baudrate+0x1c>
	if (IS_LPUART_INSTANCE(config->usart)) {
 800c1a0:	6833      	ldr	r3, [r6, #0]
 800c1a2:	4a2a      	ldr	r2, [pc, #168]	; (800c24c <uart_stm32_set_baudrate+0xf8>)
		LL_USART_SetBaudRate(config->usart,
 800c1a4:	9d07      	ldr	r5, [sp, #28]
	if (IS_LPUART_INSTANCE(config->usart)) {
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d11d      	bne.n	800c1e6 <uart_stm32_set_baudrate+0x92>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 800c1aa:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800c250 <uart_stm32_set_baudrate+0xfc>
			lpuartdiv = lpuartdiv_calc(clock_rate, presc_idx, baud_rate);
 800c1ae:	2600      	movs	r6, #0
 800c1b0:	4623      	mov	r3, r4
 800c1b2:	b2b2      	uxth	r2, r6
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	f7ff ffb4 	bl	800c124 <lpuartdiv_calc>
			if (lpuartdiv >= LPUART_BRR_MIN_VALUE && lpuartdiv <= LPUART_BRR_MASK) {
 800c1bc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
 800c1c0:	4540      	cmp	r0, r8
 800c1c2:	d91d      	bls.n	800c200 <uart_stm32_set_baudrate+0xac>
		for (presc_idx = 0; presc_idx < ARRAY_SIZE(LPUART_PRESCALER_TAB); presc_idx++) {
 800c1c4:	3601      	adds	r6, #1
 800c1c6:	2e0c      	cmp	r6, #12
 800c1c8:	d1f2      	bne.n	800c1b0 <uart_stm32_set_baudrate+0x5c>
			LOG_ERR("Unable to set %s to %d", dev->name, baud_rate);
 800c1ca:	9404      	str	r4, [sp, #16]
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	9303      	str	r3, [sp, #12]
 800c1d0:	4b20      	ldr	r3, [pc, #128]	; (800c254 <uart_stm32_set_baudrate+0x100>)
 800c1d2:	9302      	str	r3, [sp, #8]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e9cd 3300 	strd	r3, r3, [sp]
 800c1da:	491b      	ldr	r1, [pc, #108]	; (800c248 <uart_stm32_set_baudrate+0xf4>)
 800c1dc:	2201      	movs	r2, #1
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff ff8e 	bl	800c100 <z_log_msg2_runtime_create.constprop.0>
			return;
 800c1e4:	e7cf      	b.n	800c186 <uart_stm32_set_baudrate+0x32>
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c1ec:	601a      	str	r2, [r3, #0]

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 800c1ee:	2c00      	cmp	r4, #0
 800c1f0:	d0c9      	beq.n	800c186 <uart_stm32_set_baudrate+0x32>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c1f2:	eb05 0554 	add.w	r5, r5, r4, lsr #1
 800c1f6:	fbb5 f4f4 	udiv	r4, r5, r4
 800c1fa:	b2a4      	uxth	r4, r4
 800c1fc:	60dc      	str	r4, [r3, #12]
 800c1fe:	e7c2      	b.n	800c186 <uart_stm32_set_baudrate+0x32>
  *         @arg @ref LL_LPUART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetPrescaler(USART_TypeDef *LPUARTx, uint32_t PrescalerValue)
{
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c200:	4f12      	ldr	r7, [pc, #72]	; (800c24c <uart_stm32_set_baudrate+0xf8>)
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	f023 030f 	bic.w	r3, r3, #15
 800c208:	4333      	orrs	r3, r6
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
  if (BaudRate != 0U)
 800c20c:	2c00      	cmp	r4, #0
 800c20e:	d0ba      	beq.n	800c186 <uart_stm32_set_baudrate+0x32>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800c210:	4b11      	ldr	r3, [pc, #68]	; (800c258 <uart_stm32_set_baudrate+0x104>)
 800c212:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800c216:	2300      	movs	r3, #0
 800c218:	4619      	mov	r1, r3
 800c21a:	4628      	mov	r0, r5
 800c21c:	f7f4 fc72 	bl	8000b04 <__aeabi_uldivmod>
 800c220:	0209      	lsls	r1, r1, #8
 800c222:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c226:	0863      	lsrs	r3, r4, #1
 800c228:	0200      	lsls	r0, r0, #8
 800c22a:	18c0      	adds	r0, r0, r3
 800c22c:	4622      	mov	r2, r4
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	f141 0100 	adc.w	r1, r1, #0
 800c236:	f7f4 fc65 	bl	8000b04 <__aeabi_uldivmod>
 800c23a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	e7a1      	b.n	800c186 <uart_stm32_set_baudrate+0x32>
 800c242:	bf00      	nop
 800c244:	08019082 	.word	0x08019082
 800c248:	08016f60 	.word	0x08016f60
 800c24c:	40008000 	.word	0x40008000
 800c250:	000ffcff 	.word	0x000ffcff
 800c254:	0801932b 	.word	0x0801932b
 800c258:	08017986 	.word	0x08017986

0800c25c <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 800c25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800c260:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 800c262:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800c264:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 800c266:	2b01      	cmp	r3, #1
{
 800c268:	460c      	mov	r4, r1
	switch (parity) {
 800c26a:	d01b      	beq.n	800c2a4 <uart_stm32_configure+0x48>
		return LL_USART_PARITY_NONE;
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	bf0c      	ite	eq
 800c270:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 800c274:	f04f 0800 	movne.w	r8, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800c278:	f894 9005 	ldrb.w	r9, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800c27c:	79a7      	ldrb	r7, [r4, #6]
 800c27e:	f1b9 0f02 	cmp.w	r9, #2
 800c282:	bf96      	itet	ls
 800c284:	4a43      	ldrls	r2, [pc, #268]	; (800c394 <uart_stm32_configure+0x138>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800c286:	f44f 5100 	movhi.w	r1, #8192	; 0x2000
 800c28a:	f832 1019 	ldrhls.w	r1, [r2, r9, lsl #1]
	switch (db) {
 800c28e:	2f02      	cmp	r7, #2
 800c290:	d00b      	beq.n	800c2aa <uart_stm32_configure+0x4e>
 800c292:	2f04      	cmp	r7, #4
 800c294:	d077      	beq.n	800c386 <uart_stm32_configure+0x12a>
			return LL_USART_DATAWIDTH_8B;
 800c296:	2b00      	cmp	r3, #0
 800c298:	bf14      	ite	ne
 800c29a:	f44f 5e80 	movne.w	lr, #4096	; 0x1000
 800c29e:	f04f 0e00 	moveq.w	lr, #0
 800c2a2:	e008      	b.n	800c2b6 <uart_stm32_configure+0x5a>
	switch (parity) {
 800c2a4:	f44f 68c0 	mov.w	r8, #1536	; 0x600
 800c2a8:	e7e6      	b.n	800c278 <uart_stm32_configure+0x1c>
			return LL_USART_DATAWIDTH_8B;
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	bf0c      	ite	eq
 800c2ae:	f04f 5e80 	moveq.w	lr, #268435456	; 0x10000000
 800c2b2:	f04f 0e00 	movne.w	lr, #0
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800c2b6:	79e2      	ldrb	r2, [r4, #7]

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800c2b8:	f1a3 0a03 	sub.w	sl, r3, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800c2bc:	2a01      	cmp	r2, #1
 800c2be:	bf14      	ite	ne
 800c2c0:	f04f 0c00 	movne.w	ip, #0
 800c2c4:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800c2c8:	f1ba 0f01 	cmp.w	sl, #1
 800c2cc:	d95e      	bls.n	800c38c <uart_stm32_configure+0x130>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800c2ce:	b10b      	cbz	r3, 800c2d4 <uart_stm32_configure+0x78>
 800c2d0:	2f04      	cmp	r7, #4
 800c2d2:	d05b      	beq.n	800c38c <uart_stm32_configure+0x130>
	    (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
		return -ENOTSUP;
	}

#if defined(LL_USART_STOPBITS_0_5) && HAS_LPUART_1
	if (IS_LPUART_INSTANCE(config->usart) &&
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800c398 <uart_stm32_configure+0x13c>
 800c2da:	4553      	cmp	r3, sl
 800c2dc:	d102      	bne.n	800c2e4 <uart_stm32_configure+0x88>
 800c2de:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800c2e2:	d053      	beq.n	800c38c <uart_stm32_configure+0x130>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800c2e4:	2f01      	cmp	r7, #1
 800c2e6:	d951      	bls.n	800c38c <uart_stm32_configure+0x130>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800c2e8:	2f04      	cmp	r7, #4
 800c2ea:	d04f      	beq.n	800c38c <uart_stm32_configure+0x130>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800c2ec:	b162      	cbz	r2, 800c308 <uart_stm32_configure+0xac>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 800c2ee:	4f2b      	ldr	r7, [pc, #172]	; (800c39c <uart_stm32_configure+0x140>)
 800c2f0:	42bb      	cmp	r3, r7
 800c2f2:	d007      	beq.n	800c304 <uart_stm32_configure+0xa8>
 800c2f4:	f5a7 4774 	sub.w	r7, r7, #62464	; 0xf400
 800c2f8:	42bb      	cmp	r3, r7
 800c2fa:	d003      	beq.n	800c304 <uart_stm32_configure+0xa8>
 800c2fc:	f507 5770 	add.w	r7, r7, #15360	; 0x3c00
 800c300:	42bb      	cmp	r3, r7
 800c302:	d143      	bne.n	800c38c <uart_stm32_configure+0x130>
 800c304:	2a01      	cmp	r2, #1
 800c306:	d141      	bne.n	800c38c <uart_stm32_configure+0x130>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	f022 0201 	bic.w	r2, r2, #1
 800c30e:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(config->usart);

	if (parity != uart_stm32_get_parity(dev)) {
 800c316:	4590      	cmp	r8, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800c318:	bf1f      	itttt	ne
 800c31a:	681a      	ldrne	r2, [r3, #0]
 800c31c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800c320:	ea42 0208 	orrne.w	r2, r2, r8
 800c324:	601a      	strne	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800c32c:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c32e:	bf1f      	itttt	ne
 800c330:	685f      	ldrne	r7, [r3, #4]
 800c332:	f427 5740 	bicne.w	r7, r7, #12288	; 0x3000
 800c336:	430f      	orrne	r7, r1
 800c338:	605f      	strne	r7, [r3, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 800c340:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800c342:	bf1f      	itttt	ne
 800c344:	6819      	ldrne	r1, [r3, #0]
 800c346:	f021 2110 	bicne.w	r1, r1, #268439552	; 0x10001000
 800c34a:	ea41 010e 	orrne.w	r1, r1, lr
 800c34e:	6019      	strne	r1, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800c350:	689a      	ldr	r2, [r3, #8]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800c352:	6821      	ldr	r1, [r4, #0]
 800c354:	f402 7240 	and.w	r2, r2, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800c358:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c35a:	bf1f      	itttt	ne
 800c35c:	689a      	ldrne	r2, [r3, #8]
 800c35e:	f422 7240 	bicne.w	r2, r2, #768	; 0x300
 800c362:	ea42 020c 	orrne.w	r2, r2, ip
 800c366:	609a      	strne	r2, [r3, #8]
	if (cfg->baudrate != data->baud_rate) {
 800c368:	6833      	ldr	r3, [r6, #0]
 800c36a:	4299      	cmp	r1, r3
 800c36c:	d003      	beq.n	800c376 <uart_stm32_configure+0x11a>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800c36e:	f7ff fef1 	bl	800c154 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	6033      	str	r3, [r6, #0]
	}

	LL_USART_Enable(config->usart);
 800c376:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800c378:	6813      	ldr	r3, [r2, #0]
 800c37a:	f043 0301 	orr.w	r3, r3, #1
 800c37e:	6013      	str	r3, [r2, #0]
	return 0;
 800c380:	2000      	movs	r0, #0
};
 800c382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 800c386:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 800c38a:	e794      	b.n	800c2b6 <uart_stm32_configure+0x5a>
		return -ENOTSUP;
 800c38c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800c390:	e7f7      	b.n	800c382 <uart_stm32_configure+0x126>
 800c392:	bf00      	nop
 800c394:	08017980 	.word	0x08017980
 800c398:	40008000 	.word	0x40008000
 800c39c:	40013800 	.word	0x40013800

0800c3a0 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = dev->config;
 800c3a4:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800c3a6:	6907      	ldr	r7, [r0, #16]
	data->clock = clk;
 800c3a8:	4c3e      	ldr	r4, [pc, #248]	; (800c4a4 <uart_stm32_init+0x104>)
 800c3aa:	607c      	str	r4, [r7, #4]
{
 800c3ac:	b086      	sub	sp, #24
 800c3ae:	4606      	mov	r6, r0
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
			(clock_control_subsys_t *)&config->pclken) != 0) {
 800c3b0:	f105 0804 	add.w	r8, r5, #4
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f009 fd4c 	bl	8015e52 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d06c      	beq.n	800c498 <uart_stm32_init+0xf8>
	return api->on(dev, sys);
 800c3be:	68a3      	ldr	r3, [r4, #8]
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4641      	mov	r1, r8
 800c3c6:	4798      	blx	r3
	if (clock_control_on(data->clock,
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d164      	bne.n	800c498 <uart_stm32_init+0xf8>
	ret = pinctrl_lookup_state(config, id, &state);
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	466a      	mov	r2, sp
 800c3d2:	69a8      	ldr	r0, [r5, #24]
 800c3d4:	f008 fb1c 	bl	8014a10 <pinctrl_lookup_state>
	if (ret < 0) {
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	db5f      	blt.n	800c49c <uart_stm32_init+0xfc>
	return pinctrl_apply_state_direct(config, state);
 800c3dc:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800c3de:	4622      	mov	r2, r4
 800c3e0:	7919      	ldrb	r1, [r3, #4]
 800c3e2:	6818      	ldr	r0, [r3, #0]
 800c3e4:	f000 f960 	bl	800c6a8 <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	db57      	blt.n	800c49c <uart_stm32_init+0xfc>
		return err;
	}

	LL_USART_Disable(config->usart);
 800c3ec:	682a      	ldr	r2, [r5, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800c3ee:	6813      	ldr	r3, [r2, #0]
 800c3f0:	f023 0301 	bic.w	r3, r3, #1
 800c3f4:	6013      	str	r3, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f6:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800c3fa:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	e842 3400 	strex	r4, r3, [r2]
 800c402:	2c00      	cmp	r4, #0
 800c404:	d1f7      	bne.n	800c3f6 <uart_stm32_init+0x56>
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800c406:	692b      	ldr	r3, [r5, #16]
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d010      	beq.n	800c42e <uart_stm32_init+0x8e>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d03e      	beq.n	800c48e <uart_stm32_init+0xee>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 800c410:	b15b      	cbz	r3, 800c42a <uart_stm32_init+0x8a>
			LOG_WRN("Invalid parity setting '%d'."
 800c412:	4a25      	ldr	r2, [pc, #148]	; (800c4a8 <uart_stm32_init+0x108>)
 800c414:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c418:	2303      	movs	r3, #3
 800c41a:	9303      	str	r3, [sp, #12]
 800c41c:	4823      	ldr	r0, [pc, #140]	; (800c4ac <uart_stm32_init+0x10c>)
 800c41e:	4623      	mov	r3, r4
 800c420:	aa03      	add	r2, sp, #12
 800c422:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800c426:	f005 f830 	bl	801148a <z_impl_z_log_msg2_static_create>
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800c42a:	4622      	mov	r2, r4
 800c42c:	e003      	b.n	800c436 <uart_stm32_init+0x96>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800c42e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800c432:	f44f 6480 	mov.w	r4, #1024	; 0x400
	}

	/* Set datawidth and parity, 1 start bit, 1 stop bit  */
	LL_USART_ConfigCharacter(config->usart,
 800c436:	6829      	ldr	r1, [r5, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800c438:	680b      	ldr	r3, [r1, #0]
 800c43a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c43e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c442:	4314      	orrs	r4, r2
 800c444:	4323      	orrs	r3, r4
 800c446:	600b      	str	r3, [r1, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c448:	684b      	ldr	r3, [r1, #4]
 800c44a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c44e:	604b      	str	r3, [r1, #4]
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800c450:	7b2b      	ldrb	r3, [r5, #12]
 800c452:	b12b      	cbz	r3, 800c460 <uart_stm32_init+0xc0>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 800c454:	6873      	ldr	r3, [r6, #4]
 800c456:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c458:	6893      	ldr	r3, [r2, #8]
 800c45a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c45e:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	4630      	mov	r0, r6
 800c464:	f7ff fe76 	bl	800c154 <uart_stm32_set_baudrate>

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 800c468:	7d2a      	ldrb	r2, [r5, #20]
 800c46a:	682b      	ldr	r3, [r5, #0]
 800c46c:	b11a      	cbz	r2, 800c476 <uart_stm32_init+0xd6>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	f042 0208 	orr.w	r2, r2, #8
 800c474:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	f042 0201 	orr.w	r2, r2, #1
 800c47c:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800c47e:	69da      	ldr	r2, [r3, #28]
 800c480:	0291      	lsls	r1, r2, #10
 800c482:	d5fc      	bpl.n	800c47e <uart_stm32_init+0xde>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800c484:	69da      	ldr	r2, [r3, #28]
 800c486:	0252      	lsls	r2, r2, #9
 800c488:	d5fc      	bpl.n	800c484 <uart_stm32_init+0xe4>
#endif /* CONFIG_PM || CONFIG_UART_INTERRUPT_DRIVEN || CONFIG_UART_ASYNC_API */

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
 800c48a:	2000      	movs	r0, #0
 800c48c:	e006      	b.n	800c49c <uart_stm32_init+0xfc>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800c48e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800c492:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800c496:	e7ce      	b.n	800c436 <uart_stm32_init+0x96>
		return -EIO;
 800c498:	f06f 0004 	mvn.w	r0, #4
#endif
}
 800c49c:	b006      	add	sp, #24
 800c49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a2:	bf00      	nop
 800c4a4:	08016b00 	.word	0x08016b00
 800c4a8:	08019342 	.word	0x08019342
 800c4ac:	08016f60 	.word	0x08016f60

0800c4b0 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800c4b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800c4b4:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 800c4b6:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800c4b8:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800c4ba:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800c4bc:	4b09      	ldr	r3, [pc, #36]	; (800c4e4 <elapsed+0x34>)
 800c4be:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800c4c2:	4909      	ldr	r1, [pc, #36]	; (800c4e8 <elapsed+0x38>)
 800c4c4:	d101      	bne.n	800c4ca <elapsed+0x1a>
	    || (val1 < val2)) {
 800c4c6:	4282      	cmp	r2, r0
 800c4c8:	d206      	bcs.n	800c4d8 <elapsed+0x28>
		overflow_cyc += last_load;
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	680c      	ldr	r4, [r1, #0]
 800c4ce:	4422      	add	r2, r4
 800c4d0:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800c4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800c4d6:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	680a      	ldr	r2, [r1, #0]
 800c4dc:	4413      	add	r3, r2
}
 800c4de:	1a18      	subs	r0, r3, r0
 800c4e0:	bd10      	pop	{r4, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20002280 	.word	0x20002280
 800c4e8:	2000227c 	.word	0x2000227c

0800c4ec <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4ec:	4b09      	ldr	r3, [pc, #36]	; (800c514 <sys_clock_driver_init+0x28>)
 800c4ee:	2210      	movs	r2, #16
 800c4f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800c4f4:	4b08      	ldr	r3, [pc, #32]	; (800c518 <sys_clock_driver_init+0x2c>)
 800c4f6:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800c4fa:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800c4fc:	4b07      	ldr	r3, [pc, #28]	; (800c51c <sys_clock_driver_init+0x30>)
 800c4fe:	2000      	movs	r0, #0
 800c500:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800c502:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c506:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800c508:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800c50a:	691a      	ldr	r2, [r3, #16]
 800c50c:	f042 0207 	orr.w	r2, r2, #7
 800c510:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800c512:	4770      	bx	lr
 800c514:	e000ed00 	.word	0xe000ed00
 800c518:	2000227c 	.word	0x2000227c
 800c51c:	20002280 	.word	0x20002280

0800c520 <sys_clock_isr>:
{
 800c520:	b508      	push	{r3, lr}
	elapsed();
 800c522:	f7ff ffc5 	bl	800c4b0 <elapsed>
	cycle_count += overflow_cyc;
 800c526:	4b0c      	ldr	r3, [pc, #48]	; (800c558 <sys_clock_isr+0x38>)
 800c528:	4a0c      	ldr	r2, [pc, #48]	; (800c55c <sys_clock_isr+0x3c>)
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	6811      	ldr	r1, [r2, #0]
 800c52e:	4408      	add	r0, r1
 800c530:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800c532:	2200      	movs	r2, #0
 800c534:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800c536:	4a0a      	ldr	r2, [pc, #40]	; (800c560 <sys_clock_isr+0x40>)
 800c538:	6813      	ldr	r3, [r2, #0]
 800c53a:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 800c53e:	1ac0      	subs	r0, r0, r3
 800c540:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 800c544:	fb01 3300 	mla	r3, r1, r0, r3
 800c548:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800c54a:	f002 f9a3 	bl	800e894 <sys_clock_announce>
}
 800c54e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800c552:	f7f7 bc75 	b.w	8003e40 <z_arm_exc_exit>
 800c556:	bf00      	nop
 800c558:	20002280 	.word	0x20002280
 800c55c:	20002278 	.word	0x20002278
 800c560:	20002274 	.word	0x20002274

0800c564 <sys_clock_set_timeout>:
{
 800c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c566:	4c31      	ldr	r4, [pc, #196]	; (800c62c <sys_clock_set_timeout+0xc8>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800c568:	b159      	cbz	r1, 800c582 <sys_clock_set_timeout+0x1e>
 800c56a:	1c42      	adds	r2, r0, #1
 800c56c:	d109      	bne.n	800c582 <sys_clock_set_timeout+0x1e>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800c56e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800c572:	6913      	ldr	r3, [r2, #16]
 800c574:	f023 0301 	bic.w	r3, r3, #1
 800c578:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800c57a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c57e:	6023      	str	r3, [r4, #0]
}
 800c580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800c582:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 800c584:	6826      	ldr	r6, [r4, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800c586:	d023      	beq.n	800c5d0 <sys_clock_set_timeout+0x6c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800c588:	2801      	cmp	r0, #1
 800c58a:	dd24      	ble.n	800c5d6 <sys_clock_set_timeout+0x72>
 800c58c:	f640 53a6 	movw	r3, #3494	; 0xda6
 800c590:	4298      	cmp	r0, r3
 800c592:	dc22      	bgt.n	800c5da <sys_clock_set_timeout+0x76>
 800c594:	1e47      	subs	r7, r0, #1
	__asm__ volatile(
 800c596:	f04f 0310 	mov.w	r3, #16
 800c59a:	f3ef 8511 	mrs	r5, BASEPRI
 800c59e:	f383 8812 	msr	BASEPRI_MAX, r3
 800c5a2:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800c5a6:	f7ff ff83 	bl	800c4b0 <elapsed>
	cycle_count += pending;
 800c5aa:	4921      	ldr	r1, [pc, #132]	; (800c630 <sys_clock_set_timeout+0xcc>)
	val1 = SysTick->VAL;
 800c5ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 800c5b0:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
 800c5b2:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 800c5b6:	680b      	ldr	r3, [r1, #0]
 800c5b8:	4418      	add	r0, r3
	overflow_cyc = 0U;
 800c5ba:	4b1e      	ldr	r3, [pc, #120]	; (800c634 <sys_clock_set_timeout+0xd0>)
	cycle_count += pending;
 800c5bc:	6008      	str	r0, [r1, #0]
	overflow_cyc = 0U;
 800c5be:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800c5c0:	4b1d      	ldr	r3, [pc, #116]	; (800c638 <sys_clock_set_timeout+0xd4>)
 800c5c2:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800c5c4:	1a83      	subs	r3, r0, r2
 800c5c6:	d50a      	bpl.n	800c5de <sys_clock_set_timeout+0x7a>
		delay = MAX(delay, MIN_DELAY);
 800c5c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	e019      	b.n	800c604 <sys_clock_set_timeout+0xa0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800c5d0:	f640 50a6 	movw	r0, #3494	; 0xda6
 800c5d4:	e7de      	b.n	800c594 <sys_clock_set_timeout+0x30>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800c5d6:	2700      	movs	r7, #0
 800c5d8:	e7dd      	b.n	800c596 <sys_clock_set_timeout+0x32>
 800c5da:	461f      	mov	r7, r3
 800c5dc:	e7db      	b.n	800c596 <sys_clock_set_timeout+0x32>
		delay = ticks * CYC_PER_TICK;
 800c5de:	f44f 5e96 	mov.w	lr, #4800	; 0x12c0
		delay += unannounced;
 800c5e2:	fb0e 3307 	mla	r3, lr, r7, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800c5e6:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
		delay -= unannounced;
 800c5ea:	1a12      	subs	r2, r2, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800c5ec:	331f      	adds	r3, #31
 800c5ee:	fbb3 f3fe 	udiv	r3, r3, lr
		delay -= unannounced;
 800c5f2:	fb0e 2303 	mla	r3, lr, r3, r2
		delay = MAX(delay, MIN_DELAY);
 800c5f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5fa:	d9e5      	bls.n	800c5c8 <sys_clock_set_timeout+0x64>
		if (delay > MAX_CYCLES) {
 800c5fc:	4a0f      	ldr	r2, [pc, #60]	; (800c63c <sys_clock_set_timeout+0xd8>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d9e4      	bls.n	800c5cc <sys_clock_set_timeout+0x68>
			last_load = MAX_CYCLES;
 800c602:	6022      	str	r2, [r4, #0]
	val2 = SysTick->VAL;
 800c604:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	SysTick->LOAD = last_load - 1;
 800c608:	6824      	ldr	r4, [r4, #0]
	val2 = SysTick->VAL;
 800c60a:	6993      	ldr	r3, [r2, #24]
	if (val1 < val2) {
 800c60c:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 800c60e:	bf38      	it	cc
 800c610:	44b4      	addcc	ip, r6
	SysTick->LOAD = last_load - 1;
 800c612:	3c01      	subs	r4, #1
		cycle_count += (val1 - val2);
 800c614:	ebac 0c03 	sub.w	ip, ip, r3
	SysTick->LOAD = last_load - 1;
 800c618:	6154      	str	r4, [r2, #20]
		cycle_count += (val1 - val2);
 800c61a:	4460      	add	r0, ip
	SysTick->VAL = 0; /* resets timer to last_load */
 800c61c:	2400      	movs	r4, #0
 800c61e:	6194      	str	r4, [r2, #24]
		cycle_count += (val1 - val2);
 800c620:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
 800c622:	f385 8811 	msr	BASEPRI, r5
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	e7a9      	b.n	800c580 <sys_clock_set_timeout+0x1c>
 800c62c:	2000227c 	.word	0x2000227c
 800c630:	20002278 	.word	0x20002278
 800c634:	20002280 	.word	0x20002280
 800c638:	20002274 	.word	0x20002274
 800c63c:	00ffe880 	.word	0x00ffe880

0800c640 <sys_clock_elapsed>:
{
 800c640:	b510      	push	{r4, lr}
	__asm__ volatile(
 800c642:	f04f 0310 	mov.w	r3, #16
 800c646:	f3ef 8411 	mrs	r4, BASEPRI
 800c64a:	f383 8812 	msr	BASEPRI_MAX, r3
 800c64e:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800c652:	f7ff ff2d 	bl	800c4b0 <elapsed>
 800c656:	4b07      	ldr	r3, [pc, #28]	; (800c674 <sys_clock_elapsed+0x34>)
 800c658:	4a07      	ldr	r2, [pc, #28]	; (800c678 <sys_clock_elapsed+0x38>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6812      	ldr	r2, [r2, #0]
 800c65e:	1a9b      	subs	r3, r3, r2
 800c660:	4403      	add	r3, r0
	__asm__ volatile(
 800c662:	f384 8811 	msr	BASEPRI, r4
 800c666:	f3bf 8f6f 	isb	sy
}
 800c66a:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800c66e:	fbb3 f0f0 	udiv	r0, r3, r0
 800c672:	bd10      	pop	{r4, pc}
 800c674:	20002278 	.word	0x20002278
 800c678:	20002274 	.word	0x20002274

0800c67c <sys_clock_cycle_get_32>:
{
 800c67c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800c67e:	f04f 0310 	mov.w	r3, #16
 800c682:	f3ef 8411 	mrs	r4, BASEPRI
 800c686:	f383 8812 	msr	BASEPRI_MAX, r3
 800c68a:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800c68e:	f7ff ff0f 	bl	800c4b0 <elapsed>
 800c692:	4b04      	ldr	r3, [pc, #16]	; (800c6a4 <sys_clock_cycle_get_32+0x28>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4418      	add	r0, r3
	__asm__ volatile(
 800c698:	f384 8811 	msr	BASEPRI, r4
 800c69c:	f3bf 8f6f 	isb	sy
}
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20002278 	.word	0x20002278

0800c6a8 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800c6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 800c6ac:	4f1c      	ldr	r7, [pc, #112]	; (800c720 <pinctrl_configure_pins+0x78>)
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t func = 0;
 800c6b4:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800c6b6:	42b4      	cmp	r4, r6
 800c6b8:	d101      	bne.n	800c6be <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e014      	b.n	800c6e8 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 800c6be:	6820      	ldr	r0, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800c6c0:	06c3      	lsls	r3, r0, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800c6c2:	f000 091f 	and.w	r9, r0, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800c6c6:	d411      	bmi.n	800c6ec <pinctrl_configure_pins+0x44>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800c6c8:	6865      	ldr	r5, [r4, #4]
 800c6ca:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800c6ce:	f3c0 1a47 	ubfx	sl, r0, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800c6d2:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800c6d6:	280a      	cmp	r0, #10
 800c6d8:	d81e      	bhi.n	800c718 <pinctrl_configure_pins+0x70>
	port_device = gpio_ports[STM32_PORT(pin)];
 800c6da:	f857 8020 	ldr.w	r8, [r7, r0, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800c6de:	f1b8 0f00 	cmp.w	r8, #0
 800c6e2:	d108      	bne.n	800c6f6 <pinctrl_configure_pins+0x4e>
		return -ENODEV;
 800c6e4:	f06f 0012 	mvn.w	r0, #18
}
 800c6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			func = STM32_MODER_ANALOG_MODE;
 800c6ec:	f1b9 0f10 	cmp.w	r9, #16
 800c6f0:	bf08      	it	eq
 800c6f2:	2530      	moveq	r5, #48	; 0x30
 800c6f4:	e7eb      	b.n	800c6ce <pinctrl_configure_pins+0x26>
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	f009 fbab 	bl	8015e52 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d0f1      	beq.n	800c6e4 <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800c700:	464b      	mov	r3, r9
 800c702:	462a      	mov	r2, r5
 800c704:	f00a 010f 	and.w	r1, sl, #15
 800c708:	4640      	mov	r0, r8
 800c70a:	f007 fb97 	bl	8013e3c <gpio_stm32_configure>
		if (ret < 0) {
 800c70e:	2800      	cmp	r0, #0
 800c710:	f104 0408 	add.w	r4, r4, #8
 800c714:	dacf      	bge.n	800c6b6 <pinctrl_configure_pins+0xe>
 800c716:	e7e7      	b.n	800c6e8 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 800c718:	f06f 0015 	mvn.w	r0, #21
 800c71c:	e7e4      	b.n	800c6e8 <pinctrl_configure_pins+0x40>
 800c71e:	bf00      	nop
 800c720:	080176dc 	.word	0x080176dc

0800c724 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800c724:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800c726:	6804      	ldr	r4, [r0, #0]
{
 800c728:	4605      	mov	r5, r0
	if (!tp) return vol;	/* Invalid path name? */
 800c72a:	b37c      	cbz	r4, 800c78c <get_ldnumber+0x68>
 800c72c:	4621      	mov	r1, r4
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
 800c72e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c732:	2b20      	cmp	r3, #32
 800c734:	d92d      	bls.n	800c792 <get_ldnumber+0x6e>
 800c736:	2b3a      	cmp	r3, #58	; 0x3a
 800c738:	d1f9      	bne.n	800c72e <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800c73a:	7820      	ldrb	r0, [r4, #0]
 800c73c:	3830      	subs	r0, #48	; 0x30
 800c73e:	b2c3      	uxtb	r3, r0
 800c740:	2b09      	cmp	r3, #9
 800c742:	d91e      	bls.n	800c782 <get_ldnumber+0x5e>
 800c744:	4f16      	ldr	r7, [pc, #88]	; (800c7a0 <get_ldnumber+0x7c>)
 800c746:	2000      	movs	r0, #0
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
 800c748:	f857 cb04 	ldr.w	ip, [r7], #4
 800c74c:	4626      	mov	r6, r4
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
 800c74e:	f81c 3b01 	ldrb.w	r3, [ip], #1
 800c752:	f816 2b01 	ldrb.w	r2, [r6], #1
					if (IsLower(c)) c -= 0x20;
 800c756:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 800c75a:	f1be 0f19 	cmp.w	lr, #25
 800c75e:	bf98      	it	ls
 800c760:	3b20      	subls	r3, #32
					if (IsLower(tc)) tc -= 0x20;
 800c762:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
					if (IsLower(c)) c -= 0x20;
 800c766:	bf98      	it	ls
 800c768:	b2db      	uxtbls	r3, r3
					if (IsLower(tc)) tc -= 0x20;
 800c76a:	f1be 0f19 	cmp.w	lr, #25
 800c76e:	bf9c      	itt	ls
 800c770:	3a20      	subls	r2, #32
 800c772:	b2d2      	uxtbls	r2, r2
				} while (c && (TCHAR)c == tc);
 800c774:	b17b      	cbz	r3, 800c796 <get_ldnumber+0x72>
 800c776:	429a      	cmp	r2, r3
 800c778:	d0e9      	beq.n	800c74e <get_ldnumber+0x2a>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 800c77a:	3001      	adds	r0, #1
 800c77c:	2808      	cmp	r0, #8
 800c77e:	d1e3      	bne.n	800c748 <get_ldnumber+0x24>
 800c780:	e004      	b.n	800c78c <get_ldnumber+0x68>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800c782:	1ca3      	adds	r3, r4, #2
 800c784:	4299      	cmp	r1, r3
 800c786:	d1dd      	bne.n	800c744 <get_ldnumber+0x20>
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800c788:	2807      	cmp	r0, #7
 800c78a:	dd06      	ble.n	800c79a <get_ldnumber+0x76>
	if (!tp) return vol;	/* Invalid path name? */
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c790:	e004      	b.n	800c79c <get_ldnumber+0x78>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 800c792:	2000      	movs	r0, #0
 800c794:	e002      	b.n	800c79c <get_ldnumber+0x78>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 800c796:	42b1      	cmp	r1, r6
 800c798:	d1ef      	bne.n	800c77a <get_ldnumber+0x56>
			*path = tt;		/* Snip the drive prefix off */
 800c79a:	6029      	str	r1, [r5, #0]
}
 800c79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	08017708 	.word	0x08017708

0800c7a4 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800c7a4:	b538      	push	{r3, r4, r5, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	70c3      	strb	r3, [r0, #3]
 800c7aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7ae:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800c7b0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800c7b2:	f008 f9a4 	bl	8014afe <move_window>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d146      	bne.n	800c848 <check_fs+0xa4>
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800c7ba:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c7be:	f8b4 522e 	ldrh.w	r5, [r4, #558]	; 0x22e
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800c7c2:	2beb      	cmp	r3, #235	; 0xeb
 800c7c4:	d00a      	beq.n	800c7dc <check_fs+0x38>
 800c7c6:	3318      	adds	r3, #24
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d906      	bls.n	800c7dc <check_fs+0x38>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800c7ce:	f64a 2055 	movw	r0, #43605	; 0xaa55
 800c7d2:	4285      	cmp	r5, r0
 800c7d4:	bf0c      	ite	eq
 800c7d6:	2002      	moveq	r0, #2
 800c7d8:	2003      	movne	r0, #3
}
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800c7dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c7e0:	429d      	cmp	r5, r3
 800c7e2:	d027      	beq.n	800c834 <check_fs+0x90>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800c7e4:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 800c7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ec:	d1ef      	bne.n	800c7ce <check_fs+0x2a>
		b = fs->win[BPB_SecPerClus];
 800c7ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0eb      	beq.n	800c7ce <check_fs+0x2a>
 800c7f6:	1e5a      	subs	r2, r3, #1
 800c7f8:	421a      	tst	r2, r3
 800c7fa:	d1e8      	bne.n	800c7ce <check_fs+0x2a>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800c7fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d0e5      	beq.n	800c7ce <check_fs+0x2a>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800c802:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c806:	3b01      	subs	r3, #1
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d8e0      	bhi.n	800c7ce <check_fs+0x2a>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800c80c:	f8b4 3041 	ldrh.w	r3, [r4, #65]	; 0x41
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0dc      	beq.n	800c7ce <check_fs+0x2a>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800c814:	f8b4 3043 	ldrh.w	r3, [r4, #67]	; 0x43
 800c818:	2b7f      	cmp	r3, #127	; 0x7f
 800c81a:	d806      	bhi.n	800c82a <check_fs+0x86>
 800c81c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c820:	f008 f90e 	bl	8014a40 <ld_dword>
 800c824:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800c828:	d3d1      	bcc.n	800c7ce <check_fs+0x2a>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800c82a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d0cd      	beq.n	800c7ce <check_fs+0x2a>
 800c832:	e007      	b.n	800c844 <check_fs+0xa0>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800c834:	4905      	ldr	r1, [pc, #20]	; (800c84c <check_fs+0xa8>)
 800c836:	2208      	movs	r2, #8
 800c838:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800c83c:	f009 fe7f 	bl	801653e <memcmp>
 800c840:	2800      	cmp	r0, #0
 800c842:	d1cf      	bne.n	800c7e4 <check_fs+0x40>
			return 0;	/* It is an FAT32 VBR */
 800c844:	2000      	movs	r0, #0
 800c846:	e7c8      	b.n	800c7da <check_fs+0x36>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800c848:	2004      	movs	r0, #4
 800c84a:	e7c6      	b.n	800c7da <check_fs+0x36>
 800c84c:	080193ae 	.word	0x080193ae

0800c850 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 800c850:	b5f0      	push	{r4, r5, r6, r7, lr}
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800c852:	2300      	movs	r3, #0
{
 800c854:	b085      	sub	sp, #20
	*rfs = 0;
 800c856:	600b      	str	r3, [r1, #0]
{
 800c858:	460f      	mov	r7, r1
 800c85a:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800c85c:	f7ff ff62 	bl	800c724 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c860:	1e06      	subs	r6, r0, #0
 800c862:	f2c0 8101 	blt.w	800ca68 <mount_volume+0x218>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800c866:	4b87      	ldr	r3, [pc, #540]	; (800ca84 <mount_volume+0x234>)
 800c868:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800c86c:	2c00      	cmp	r4, #0
 800c86e:	f000 80fd 	beq.w	800ca6c <mount_volume+0x21c>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800c872:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800c874:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c876:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800c87a:	b163      	cbz	r3, 800c896 <mount_volume+0x46>
		stat = disk_status(fs->pdrv);
 800c87c:	7860      	ldrb	r0, [r4, #1]
 800c87e:	f000 fd71 	bl	800d364 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c882:	07c7      	lsls	r7, r0, #31
 800c884:	d407      	bmi.n	800c896 <mount_volume+0x46>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c886:	b11d      	cbz	r5, 800c890 <mount_volume+0x40>
 800c888:	f010 0504 	ands.w	r5, r0, #4
 800c88c:	d000      	beq.n	800c890 <mount_volume+0x40>
				return FR_WRITE_PROTECTED;
 800c88e:	250a      	movs	r5, #10
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800c890:	4628      	mov	r0, r5
 800c892:	b005      	add	sp, #20
 800c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800c896:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
 800c898:	2300      	movs	r3, #0
 800c89a:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800c89c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800c89e:	f000 fd6d 	bl	800d37c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c8a2:	07c6      	lsls	r6, r0, #31
 800c8a4:	f100 80e4 	bmi.w	800ca70 <mount_volume+0x220>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c8a8:	b10d      	cbz	r5, 800c8ae <mount_volume+0x5e>
 800c8aa:	0741      	lsls	r1, r0, #29
 800c8ac:	d4ef      	bmi.n	800c88e <mount_volume+0x3e>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f7ff ff77 	bl	800c7a4 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800c8b6:	2802      	cmp	r0, #2
 800c8b8:	f040 80c0 	bne.w	800ca3c <mount_volume+0x1ec>
 800c8bc:	466e      	mov	r6, sp
 800c8be:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 800c8c2:	f204 2136 	addw	r1, r4, #566	; 0x236
 800c8c6:	4632      	mov	r2, r6
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f008 f8b9 	bl	8014a40 <ld_dword>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800c8ce:	3310      	adds	r3, #16
 800c8d0:	428b      	cmp	r3, r1
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800c8d2:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800c8d6:	d1f7      	bne.n	800c8c8 <mount_volume+0x78>
 800c8d8:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800c8da:	f856 1b04 	ldr.w	r1, [r6], #4
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	f000 80a3 	beq.w	800ca2a <mount_volume+0x1da>
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f7ff ff5d 	bl	800c7a4 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800c8ea:	2801      	cmp	r0, #1
 800c8ec:	f200 809e 	bhi.w	800ca2c <mount_volume+0x1dc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c8f0:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 800c8f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8f8:	f040 80a5 	bne.w	800ca46 <mount_volume+0x1f6>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c8fc:	f8b4 6046 	ldrh.w	r6, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c900:	b926      	cbnz	r6, 800c90c <mount_volume+0xbc>
 800c902:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800c906:	f008 f89b 	bl	8014a40 <ld_dword>
 800c90a:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c90c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
	bsect = fs->winsect;					/* Volume offset */
 800c910:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		fs->fsize = fasize;
 800c912:	61a6      	str	r6, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c914:	1e5a      	subs	r2, r3, #1
 800c916:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c918:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c91a:	f200 8094 	bhi.w	800ca46 <mount_volume+0x1f6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c91e:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 800c922:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c924:	2d00      	cmp	r5, #0
 800c926:	f000 808e 	beq.w	800ca46 <mount_volume+0x1f6>
 800c92a:	1e6a      	subs	r2, r5, #1
 800c92c:	422a      	tst	r2, r5
 800c92e:	f040 808a 	bne.w	800ca46 <mount_volume+0x1f6>
	rv = ptr[1];
 800c932:	f8b4 7041 	ldrh.w	r7, [r4, #65]	; 0x41
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c936:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c938:	073a      	lsls	r2, r7, #28
 800c93a:	f040 8084 	bne.w	800ca46 <mount_volume+0x1f6>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c93e:	f8b4 0043 	ldrh.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c942:	b918      	cbnz	r0, 800c94c <mount_volume+0xfc>
 800c944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c948:	f008 f87a 	bl	8014a40 <ld_dword>
	rv = ptr[1];
 800c94c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c94e:	2a00      	cmp	r2, #0
 800c950:	d079      	beq.n	800ca46 <mount_volume+0x1f6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c952:	fb06 fe03 	mul.w	lr, r6, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c956:	eb02 1c17 	add.w	ip, r2, r7, lsr #4
 800c95a:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c95c:	4560      	cmp	r0, ip
 800c95e:	d372      	bcc.n	800ca46 <mount_volume+0x1f6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c960:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c964:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c966:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c96a:	d36c      	bcc.n	800ca46 <mount_volume+0x1f6>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800c96c:	4846      	ldr	r0, [pc, #280]	; (800ca88 <mount_volume+0x238>)
 800c96e:	4283      	cmp	r3, r0
 800c970:	d869      	bhi.n	800ca46 <mount_volume+0x1f6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c972:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800c976:	4283      	cmp	r3, r0
 800c978:	d97c      	bls.n	800ca74 <mount_volume+0x224>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800c97a:	2503      	movs	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c97c:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c97e:	440a      	add	r2, r1
		fs->database = bsect + sysect;					/* Data start sector */
 800c980:	eb01 000c 	add.w	r0, r1, ip
		if (fmt == FS_FAT32) {
 800c984:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c986:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c988:	61e1      	str	r1, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c98a:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c98c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c98e:	d15c      	bne.n	800ca4a <mount_volume+0x1fa>
	rv = rv << 8 | ptr[0];
 800c990:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c994:	433a      	orrs	r2, r7
 800c996:	d156      	bne.n	800ca46 <mount_volume+0x1f6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c99c:	f008 f850 	bl	8014a40 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c9a0:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c9a2:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c9a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c9a8:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 800c9ac:	d34b      	bcc.n	800ca46 <mount_volume+0x1f6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c9ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9b2:	e9c4 3303 	strd	r3, r3, [r4, #12]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800c9b6:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
 800c9b8:	f04f 0380 	mov.w	r3, #128	; 0x80
 800c9bc:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800c9be:	d12b      	bne.n	800ca18 <mount_volume+0x1c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c9c0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d127      	bne.n	800ca18 <mount_volume+0x1c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c9c8:	3101      	adds	r1, #1
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f008 f897 	bl	8014afe <move_window>
 800c9d0:	bb10      	cbnz	r0, 800ca18 <mount_volume+0x1c8>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800c9d2:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 800c9d6:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800c9d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d11b      	bne.n	800ca18 <mount_volume+0x1c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c9e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800c9e4:	f008 f82c 	bl	8014a40 <ld_dword>
 800c9e8:	4b28      	ldr	r3, [pc, #160]	; (800ca8c <mount_volume+0x23c>)
 800c9ea:	4298      	cmp	r0, r3
 800c9ec:	d114      	bne.n	800ca18 <mount_volume+0x1c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c9ee:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800c9f2:	f008 f825 	bl	8014a40 <ld_dword>
 800c9f6:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800c9fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c9fe:	3320      	adds	r3, #32
 800ca00:	4298      	cmp	r0, r3
 800ca02:	d109      	bne.n	800ca18 <mount_volume+0x1c8>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ca04:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800ca08:	f008 f81a 	bl	8014a40 <ld_dword>
 800ca0c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ca0e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800ca12:	f008 f815 	bl	8014a40 <ld_dword>
 800ca16:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* Volume mount ID */
 800ca18:	4a1d      	ldr	r2, [pc, #116]	; (800ca90 <mount_volume+0x240>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 800ca1a:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800ca1c:	8813      	ldrh	r3, [r2, #0]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	8013      	strh	r3, [r2, #0]
 800ca24:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800ca26:	2500      	movs	r5, #0
 800ca28:	e732      	b.n	800c890 <mount_volume+0x40>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800ca2a:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800ca2c:	3501      	adds	r5, #1
 800ca2e:	2d04      	cmp	r5, #4
 800ca30:	f47f af53 	bne.w	800c8da <mount_volume+0x8a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ca34:	2804      	cmp	r0, #4
 800ca36:	d106      	bne.n	800ca46 <mount_volume+0x1f6>
 800ca38:	2501      	movs	r5, #1
 800ca3a:	e729      	b.n	800c890 <mount_volume+0x40>
 800ca3c:	2804      	cmp	r0, #4
 800ca3e:	d0fb      	beq.n	800ca38 <mount_volume+0x1e8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ca40:	2801      	cmp	r0, #1
 800ca42:	f67f af55 	bls.w	800c8f0 <mount_volume+0xa0>
 800ca46:	250d      	movs	r5, #13
 800ca48:	e722      	b.n	800c890 <mount_volume+0x40>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ca4a:	2f00      	cmp	r7, #0
 800ca4c:	d0fb      	beq.n	800ca46 <mount_volume+0x1f6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca4e:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ca50:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ca52:	6262      	str	r2, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ca54:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ca58:	bf1b      	ittet	ne
 800ca5a:	18d2      	addne	r2, r2, r3
 800ca5c:	f003 0301 	andne.w	r3, r3, #1
 800ca60:	4613      	moveq	r3, r2
 800ca62:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800ca66:	e79d      	b.n	800c9a4 <mount_volume+0x154>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca68:	250b      	movs	r5, #11
 800ca6a:	e711      	b.n	800c890 <mount_volume+0x40>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800ca6c:	250c      	movs	r5, #12
 800ca6e:	e70f      	b.n	800c890 <mount_volume+0x40>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca70:	2503      	movs	r5, #3
 800ca72:	e70d      	b.n	800c890 <mount_volume+0x40>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ca74:	f640 75f5 	movw	r5, #4085	; 0xff5
 800ca78:	42ab      	cmp	r3, r5
 800ca7a:	bf8c      	ite	hi
 800ca7c:	2502      	movhi	r5, #2
 800ca7e:	2501      	movls	r5, #1
 800ca80:	e77c      	b.n	800c97c <mount_volume+0x12c>
 800ca82:	bf00      	nop
 800ca84:	20002284 	.word	0x20002284
 800ca88:	0ffffff5 	.word	0x0ffffff5
 800ca8c:	41615252 	.word	0x41615252
 800ca90:	20002300 	.word	0x20002300

0800ca94 <follow_path>:
{
 800ca94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800ca98:	f8d0 b000 	ldr.w	fp, [r0]
{
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	460d      	mov	r5, r1
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800caa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caa4:	2b2f      	cmp	r3, #47	; 0x2f
 800caa6:	d0fa      	beq.n	800ca9e <follow_path+0xa>
 800caa8:	2b5c      	cmp	r3, #92	; 0x5c
 800caaa:	d0f8      	beq.n	800ca9e <follow_path+0xa>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800caac:	2300      	movs	r3, #0
 800caae:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cab0:	782b      	ldrb	r3, [r5, #0]
 800cab2:	2b1f      	cmp	r3, #31
 800cab4:	d956      	bls.n	800cb64 <follow_path+0xd0>
	p = *path; sfn = dp->fn;
 800cab6:	f104 0720 	add.w	r7, r4, #32
 800caba:	f04f 3a20 	mov.w	sl, #538976288	; 0x20202020
 800cabe:	f1c5 0302 	rsb	r3, r5, #2
 800cac2:	9300      	str	r3, [sp, #0]
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800cac4:	4a54      	ldr	r2, [pc, #336]	; (800cc18 <follow_path+0x184>)
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cac6:	4b55      	ldr	r3, [pc, #340]	; (800cc1c <follow_path+0x188>)
 800cac8:	f8c7 a004 	str.w	sl, [r7, #4]
 800cacc:	f8c7 a000 	str.w	sl, [r7]
 800cad0:	f8c7 a007 	str.w	sl, [r7, #7]
 800cad4:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800cad8:	2600      	movs	r6, #0
 800cada:	f04f 0808 	mov.w	r8, #8
		c = (BYTE)p[si++];				/* Get a byte */
 800cade:	9900      	ldr	r1, [sp, #0]
 800cae0:	eb01 0009 	add.w	r0, r1, r9
 800cae4:	f819 1f01 	ldrb.w	r1, [r9, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cae8:	2920      	cmp	r1, #32
 800caea:	d908      	bls.n	800cafe <follow_path+0x6a>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800caec:	292f      	cmp	r1, #47	; 0x2f
 800caee:	d001      	beq.n	800caf4 <follow_path+0x60>
 800caf0:	295c      	cmp	r1, #92	; 0x5c
 800caf2:	d142      	bne.n	800cb7a <follow_path+0xe6>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800caf4:	5c2b      	ldrb	r3, [r5, r0]
 800caf6:	2b2f      	cmp	r3, #47	; 0x2f
 800caf8:	d03d      	beq.n	800cb76 <follow_path+0xe2>
 800cafa:	2b5c      	cmp	r3, #92	; 0x5c
 800cafc:	d03b      	beq.n	800cb76 <follow_path+0xe2>
	*path = &p[si];						/* Return pointer to the next segment */
 800cafe:	4405      	add	r5, r0
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cb00:	2e00      	cmp	r6, #0
 800cb02:	d07e      	beq.n	800cc02 <follow_path+0x16e>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cb04:	f894 3020 	ldrb.w	r3, [r4, #32]
 800cb08:	2be5      	cmp	r3, #229	; 0xe5
 800cb0a:	bf04      	itt	eq
 800cb0c:	2305      	moveq	r3, #5
 800cb0e:	f884 3020 	strbeq.w	r3, [r4, #32]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800cb12:	2920      	cmp	r1, #32
 800cb14:	d94d      	bls.n	800cbb2 <follow_path+0x11e>
 800cb16:	782b      	ldrb	r3, [r5, #0]
 800cb18:	2b21      	cmp	r3, #33	; 0x21
 800cb1a:	bf34      	ite	cc
 800cb1c:	2304      	movcc	r3, #4
 800cb1e:	2300      	movcs	r3, #0
 800cb20:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb24:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800cb26:	f8d4 8000 	ldr.w	r8, [r4]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb2a:	f008 fa1d 	bl	8014f68 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800cb2e:	4606      	mov	r6, r0
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d146      	bne.n	800cbc2 <follow_path+0x12e>
		res = move_window(fs, dp->sect);
 800cb34:	69a1      	ldr	r1, [r4, #24]
 800cb36:	4640      	mov	r0, r8
 800cb38:	f007 ffe1 	bl	8014afe <move_window>
		if (res != FR_OK) break;
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d13f      	bne.n	800cbc2 <follow_path+0x12e>
		c = dp->dir[DIR_Name];
 800cb42:	69e0      	ldr	r0, [r4, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb44:	7803      	ldrb	r3, [r0, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d048      	beq.n	800cbdc <follow_path+0x148>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cb4a:	7ac3      	ldrb	r3, [r0, #11]
 800cb4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb50:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cb52:	7ac6      	ldrb	r6, [r0, #11]
 800cb54:	f016 0608 	ands.w	r6, r6, #8
 800cb58:	d02d      	beq.n	800cbb6 <follow_path+0x122>
		res = dir_next(dp, 0);	/* Next entry */
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f008 fa35 	bl	8014fcc <dir_next>
 800cb62:	e7e4      	b.n	800cb2e <follow_path+0x9a>
		dp->fn[NSFLAG] = NS_NONAME;
 800cb64:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800cb66:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800cb68:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 800cb6c:	b003      	add	sp, #12
 800cb6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800cb72:	f008 b9f9 	b.w	8014f68 <dir_sdi.constprop.0>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800cb76:	3001      	adds	r0, #1
 800cb78:	e7bc      	b.n	800caf4 <follow_path+0x60>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800cb7a:	292e      	cmp	r1, #46	; 0x2e
 800cb7c:	d045      	beq.n	800cc0a <follow_path+0x176>
 800cb7e:	45b0      	cmp	r8, r6
 800cb80:	d93f      	bls.n	800cc02 <follow_path+0x16e>
		if (c >= 0x80) {				/* Is SBC extended character? */
 800cb82:	0608      	lsls	r0, r1, #24
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800cb84:	bf48      	it	mi
 800cb86:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cb8a:	4618      	mov	r0, r3
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 800cb8c:	bf48      	it	mi
 800cb8e:	5c51      	ldrbmi	r1, [r2, r1]
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cb90:	9101      	str	r1, [sp, #4]
 800cb92:	f009 fd14 	bl	80165be <strchr>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d133      	bne.n	800cc02 <follow_path+0x16e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cb9a:	9901      	ldr	r1, [sp, #4]
 800cb9c:	4b1f      	ldr	r3, [pc, #124]	; (800cc1c <follow_path+0x188>)
 800cb9e:	4a1e      	ldr	r2, [pc, #120]	; (800cc18 <follow_path+0x184>)
 800cba0:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
 800cba4:	2819      	cmp	r0, #25
 800cba6:	bf9c      	itt	ls
 800cba8:	3920      	subls	r1, #32
 800cbaa:	b2c9      	uxtbls	r1, r1
			sfn[i++] = c;
 800cbac:	55b9      	strb	r1, [r7, r6]
 800cbae:	3601      	adds	r6, #1
 800cbb0:	e795      	b.n	800cade <follow_path+0x4a>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800cbb2:	2304      	movs	r3, #4
 800cbb4:	e7b4      	b.n	800cb20 <follow_path+0x8c>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cbb6:	220b      	movs	r2, #11
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f009 fcc0 	bl	801653e <memcmp>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d1cb      	bne.n	800cb5a <follow_path+0xc6>
			ns = dp->fn[NSFLAG];
 800cbc2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 800cbc6:	b15e      	cbz	r6, 800cbe0 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cbc8:	2e04      	cmp	r6, #4
 800cbca:	d103      	bne.n	800cbd4 <follow_path+0x140>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cbcc:	f013 0f04 	tst.w	r3, #4
 800cbd0:	bf08      	it	eq
 800cbd2:	2605      	moveq	r6, #5
}
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	b003      	add	sp, #12
 800cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cbdc:	2604      	movs	r6, #4
 800cbde:	e7f0      	b.n	800cbc2 <follow_path+0x12e>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800cbe0:	075a      	lsls	r2, r3, #29
 800cbe2:	d4f7      	bmi.n	800cbd4 <follow_path+0x140>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800cbe4:	79a3      	ldrb	r3, [r4, #6]
 800cbe6:	06db      	lsls	r3, r3, #27
 800cbe8:	d50d      	bpl.n	800cc06 <follow_path+0x172>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cbea:	6921      	ldr	r1, [r4, #16]
 800cbec:	f89b 0000 	ldrb.w	r0, [fp]
 800cbf0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 800cbf4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800cbf8:	4419      	add	r1, r3
 800cbfa:	f008 f8b3 	bl	8014d64 <ld_clust.isra.0>
 800cbfe:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc00:	e75d      	b.n	800cabe <follow_path+0x2a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc02:	2606      	movs	r6, #6
 800cc04:	e7e6      	b.n	800cbd4 <follow_path+0x140>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cc06:	2605      	movs	r6, #5
	return res;
 800cc08:	e7e4      	b.n	800cbd4 <follow_path+0x140>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800cc0a:	f1b8 0f0b 	cmp.w	r8, #11
 800cc0e:	d0f8      	beq.n	800cc02 <follow_path+0x16e>
			i = 8; ni = 11;				/* Enter file extension field */
 800cc10:	2608      	movs	r6, #8
 800cc12:	f04f 080b 	mov.w	r8, #11
 800cc16:	e762      	b.n	800cade <follow_path+0x4a>
 800cc18:	080193e9 	.word	0x080193e9
 800cc1c:	08019388 	.word	0x08019388

0800cc20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800cc20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc22:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cc26:	a803      	add	r0, sp, #12
{
 800cc28:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 800cc2a:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800cc2c:	f7ff fd7a 	bl	800c724 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc30:	2800      	cmp	r0, #0
 800cc32:	db15      	blt.n	800cc60 <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cc34:	4a0b      	ldr	r2, [pc, #44]	; (800cc64 <f_mount+0x44>)
 800cc36:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {
 800cc3a:	b10b      	cbz	r3, 800cc40 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 800cc40:	9b01      	ldr	r3, [sp, #4]
 800cc42:	b10b      	cbz	r3, 800cc48 <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
 800cc44:	2100      	movs	r1, #0
 800cc46:	7019      	strb	r1, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cc48:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 800cc4c:	b12c      	cbz	r4, 800cc5a <f_mount+0x3a>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cc4e:	2200      	movs	r2, #0
 800cc50:	a901      	add	r1, sp, #4
 800cc52:	4668      	mov	r0, sp
 800cc54:	f7ff fdfc 	bl	800c850 <mount_volume>
 800cc58:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	b004      	add	sp, #16
 800cc5e:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc60:	240b      	movs	r4, #11
 800cc62:	e7fa      	b.n	800cc5a <f_mount+0x3a>
 800cc64:	20002284 	.word	0x20002284

0800cc68 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	b091      	sub	sp, #68	; 0x44
 800cc6e:	460e      	mov	r6, r1
 800cc70:	9009      	str	r0, [sp, #36]	; 0x24
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800cc72:	a809      	add	r0, sp, #36	; 0x24
{
 800cc74:	4614      	mov	r4, r2
 800cc76:	9307      	str	r3, [sp, #28]
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800cc78:	f7ff fd54 	bl	800c724 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	f2c0 8361 	blt.w	800d344 <f_mkfs+0x6dc>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800cc82:	4ba6      	ldr	r3, [pc, #664]	; (800cf1c <f_mkfs+0x2b4>)
 800cc84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cc88:	b10b      	cbz	r3, 800cc8e <f_mkfs+0x26>
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800cc8e:	4ba4      	ldr	r3, [pc, #656]	; (800cf20 <f_mkfs+0x2b8>)
	pdrv = LD2PD(vol);			/* Physical drive */
 800cc90:	fa5f fb80 	uxtb.w	fp, r0

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
 800cc94:	4658      	mov	r0, fp
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	bf08      	it	eq
 800cc9a:	461e      	moveq	r6, r3
	ds = disk_initialize(pdrv);
 800cc9c:	f000 fb6e 	bl	800d37c <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800cca0:	07c2      	lsls	r2, r0, #31
 800cca2:	f100 8351 	bmi.w	800d348 <f_mkfs+0x6e0>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800cca6:	0743      	lsls	r3, r0, #29
 800cca8:	f100 8350 	bmi.w	800d34c <f_mkfs+0x6e4>
	sz_blk = opt->align;
 800ccac:	6873      	ldr	r3, [r6, #4]
 800ccae:	930b      	str	r3, [sp, #44]	; 0x2c
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
 800ccb0:	b93b      	cbnz	r3, 800ccc2 <f_mkfs+0x5a>
 800ccb2:	aa0b      	add	r2, sp, #44	; 0x2c
 800ccb4:	2103      	movs	r1, #3
 800ccb6:	4658      	mov	r0, fp
 800ccb8:	f000 fb84 	bl	800d3c4 <disk_ioctl>
 800ccbc:	b108      	cbz	r0, 800ccc2 <f_mkfs+0x5a>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	930b      	str	r3, [sp, #44]	; 0x2c
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
 800ccc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccc4:	1e53      	subs	r3, r2, #1
 800ccc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccca:	d201      	bcs.n	800ccd0 <f_mkfs+0x68>
 800cccc:	421a      	tst	r2, r3
 800ccce:	d001      	beq.n	800ccd4 <f_mkfs+0x6c>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	930b      	str	r3, [sp, #44]	; 0x2c
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800ccd4:	7873      	ldrb	r3, [r6, #1]
 800ccd6:	9301      	str	r3, [sp, #4]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	2b01      	cmp	r3, #1
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800ccdc:	f8d6 9008 	ldr.w	r9, [r6, #8]
 800cce0:	9b01      	ldr	r3, [sp, #4]
 800cce2:	bf88      	it	hi
 800cce4:	2301      	movhi	r3, #1
 800cce6:	9301      	str	r3, [sp, #4]
 800cce8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800ccec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccf0:	d26b      	bcs.n	800cdca <f_mkfs+0x162>
 800ccf2:	f019 0f0f 	tst.w	r9, #15
 800ccf6:	bf18      	it	ne
 800ccf8:	f44f 7900 	movne.w	r9, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800ccfc:	68f5      	ldr	r5, [r6, #12]
 800ccfe:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 800cd02:	d865      	bhi.n	800cdd0 <f_mkfs+0x168>
 800cd04:	1e6b      	subs	r3, r5, #1
 800cd06:	422b      	tst	r3, r5
 800cd08:	bf18      	it	ne
 800cd0a:	2500      	movne	r5, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800cd0c:	9b07      	ldr	r3, [sp, #28]
 800cd0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd12:	f0c0 831d 	bcc.w	800d350 <f_mkfs+0x6e8>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800cd16:	2c00      	cmp	r4, #0
 800cd18:	f000 831a 	beq.w	800d350 <f_mkfs+0x6e8>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800cd1c:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800cd1e:	aa0c      	add	r2, sp, #48	; 0x30
 800cd20:	2101      	movs	r1, #1
 800cd22:	4658      	mov	r0, fp
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800cd24:	f896 8000 	ldrb.w	r8, [r6]
	b_vol = sz_vol = 0;
 800cd28:	930c      	str	r3, [sp, #48]	; 0x30
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800cd2a:	f000 fb4b 	bl	800d3c4 <disk_ioctl>
 800cd2e:	4607      	mov	r7, r0
 800cd30:	2800      	cmp	r0, #0
 800cd32:	f040 8183 	bne.w	800d03c <f_mkfs+0x3d4>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800cd36:	f018 0308 	ands.w	r3, r8, #8
 800cd3a:	9308      	str	r3, [sp, #32]
 800cd3c:	d105      	bne.n	800cd4a <f_mkfs+0xe2>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800cd3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd40:	2b3f      	cmp	r3, #63	; 0x3f
 800cd42:	d947      	bls.n	800cdd4 <f_mkfs+0x16c>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800cd44:	3b3f      	subs	r3, #63	; 0x3f
 800cd46:	930c      	str	r3, [sp, #48]	; 0x30
 800cd48:	273f      	movs	r7, #63	; 0x3f
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800cd4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cd4c:	2e7f      	cmp	r6, #127	; 0x7f
 800cd4e:	f240 80d7 	bls.w	800cf00 <f_mkfs+0x298>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800cd52:	f5b5 3f81 	cmp.w	r5, #66048	; 0x10200
	sz_au /= ss;	/* Byte --> Sector */
 800cd56:	bf34      	ite	cc
 800cd58:	0a6b      	lsrcc	r3, r5, #9
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800cd5a:	2380      	movcs	r3, #128	; 0x80
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800cd5c:	f018 0e02 	ands.w	lr, r8, #2
 800cd60:	f008 0201 	and.w	r2, r8, #1
 800cd64:	d039      	beq.n	800cdda <f_mkfs+0x172>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800cd66:	2a00      	cmp	r2, #0
 800cd68:	d03b      	beq.n	800cde2 <f_mkfs+0x17a>
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
		fsty = FS_FAT16;
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800cd6a:	f106 42a0 	add.w	r2, r6, #1342177280	; 0x50000000
 800cd6e:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000
 800cd72:	9204      	str	r2, [sp, #16]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f040 8097 	bne.w	800cea8 <f_mkfs+0x240>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800cd7a:	486a      	ldr	r0, [pc, #424]	; (800cf24 <f_mkfs+0x2bc>)
 800cd7c:	ea4f 3c16 	mov.w	ip, r6, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cd80:	2501      	movs	r5, #1
 800cd82:	f830 2b02 	ldrh.w	r2, [r0], #2
 800cd86:	b112      	cbz	r2, 800cd8e <f_mkfs+0x126>
 800cd88:	4562      	cmp	r2, ip
 800cd8a:	f240 808b 	bls.w	800cea4 <f_mkfs+0x23c>
				}
				n_clst = (DWORD)sz_vol / pau;
				if (n_clst > MAX_FAT12) {
 800cd8e:	f640 70f5 	movw	r0, #4085	; 0xff5
				n_clst = (DWORD)sz_vol / pau;
 800cd92:	fbb6 f2f5 	udiv	r2, r6, r5
				if (n_clst > MAX_FAT12) {
 800cd96:	4282      	cmp	r2, r0
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fsty = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800cd98:	bf9b      	ittet	ls
 800cd9a:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
 800cd9e:	3201      	addls	r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800cda0:	3202      	addhi	r2, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800cda2:	0852      	lsrls	r2, r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800cda4:	bf8c      	ite	hi
 800cda6:	0052      	lslhi	r2, r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800cda8:	3203      	addls	r2, #3
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800cdaa:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 800cdae:	ea4f 2252 	mov.w	r2, r2, lsr #9
 800cdb2:	9203      	str	r2, [sp, #12]
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800cdb4:	f3c9 1216 	ubfx	r2, r9, #4, #23
 800cdb8:	bf8c      	ite	hi
 800cdba:	f04f 0802 	movhi.w	r8, #2
					fsty = FS_FAT12;
 800cdbe:	f04f 0801 	movls.w	r8, #1
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800cdc2:	9206      	str	r2, [sp, #24]
				sz_rsv = 1;						/* Number of reserved sectors */
 800cdc4:	f04f 0a01 	mov.w	sl, #1
 800cdc8:	e030      	b.n	800ce2c <f_mkfs+0x1c4>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800cdca:	f44f 7900 	mov.w	r9, #512	; 0x200
 800cdce:	e795      	b.n	800ccfc <f_mkfs+0x94>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800cdd0:	2500      	movs	r5, #0
 800cdd2:	e79b      	b.n	800cd0c <f_mkfs+0xa4>
	b_vol = sz_vol = 0;
 800cdd4:	f018 0708 	ands.w	r7, r8, #8
 800cdd8:	e7b7      	b.n	800cd4a <f_mkfs+0xe2>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800cdda:	2a00      	cmp	r2, #0
 800cddc:	d1c5      	bne.n	800cd6a <f_mkfs+0x102>
 800cdde:	2013      	movs	r0, #19
 800cde0:	e2ad      	b.n	800d33e <f_mkfs+0x6d6>
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800cde2:	f106 42a0 	add.w	r2, r6, #1342177280	; 0x50000000
 800cde6:	f502 1204 	add.w	r2, r2, #2162688	; 0x210000
 800cdea:	9204      	str	r2, [sp, #16]
				if (pau == 0) {	/* AU auto-selection */
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d157      	bne.n	800cea0 <f_mkfs+0x238>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800cdf0:	484d      	ldr	r0, [pc, #308]	; (800cf28 <f_mkfs+0x2c0>)
 800cdf2:	0c75      	lsrs	r5, r6, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f830 2b02 	ldrh.w	r2, [r0], #2
 800cdfa:	b112      	cbz	r2, 800ce02 <f_mkfs+0x19a>
 800cdfc:	42aa      	cmp	r2, r5
 800cdfe:	d94d      	bls.n	800ce9c <f_mkfs+0x234>
 800ce00:	2200      	movs	r2, #0
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800ce02:	fbb6 f0f3 	udiv	r0, r6, r3
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ce06:	0085      	lsls	r5, r0, #2
 800ce08:	f205 2507 	addw	r5, r5, #519	; 0x207
 800ce0c:	0a69      	lsrs	r1, r5, #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800ce0e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
 800ce12:	4d46      	ldr	r5, [pc, #280]	; (800cf2c <f_mkfs+0x2c4>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ce14:	9103      	str	r1, [sp, #12]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800ce16:	38f6      	subs	r0, #246	; 0xf6
 800ce18:	42a8      	cmp	r0, r5
 800ce1a:	d871      	bhi.n	800cf00 <f_mkfs+0x298>
 800ce1c:	461d      	mov	r5, r3
 800ce1e:	4613      	mov	r3, r2
				sz_dir = 0;		/* No static directory */
 800ce20:	2200      	movs	r2, #0
 800ce22:	9206      	str	r2, [sp, #24]
				sz_rsv = 32;	/* Number of reserved sectors */
 800ce24:	f04f 0a20 	mov.w	sl, #32
 800ce28:	f04f 0803 	mov.w	r8, #3
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800ce2c:	9903      	ldr	r1, [sp, #12]
 800ce2e:	9801      	ldr	r0, [sp, #4]

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800ce30:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ce34:	eb0a 0207 	add.w	r2, sl, r7
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800ce38:	fb00 2001 	mla	r0, r0, r1, r2
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ce3c:	9202      	str	r2, [sp, #8]
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800ce3e:	9a06      	ldr	r2, [sp, #24]
 800ce40:	4410      	add	r0, r2
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800ce42:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800ce46:	4402      	add	r2, r0
 800ce48:	f1cc 0c00 	rsb	ip, ip, #0
 800ce4c:	ea02 020c 	and.w	r2, r2, ip
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800ce50:	f1b8 0f03 	cmp.w	r8, #3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800ce54:	eba2 0200 	sub.w	r2, r2, r0
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800ce58:	d128      	bne.n	800ceac <f_mkfs+0x244>
				sz_rsv += n; b_fat += n;
 800ce5a:	9902      	ldr	r1, [sp, #8]
 800ce5c:	4411      	add	r1, r2
 800ce5e:	4492      	add	sl, r2
 800ce60:	9102      	str	r1, [sp, #8]
				}
				sz_fat += n / n_fat;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800ce62:	ebc7 1205 	rsb	r2, r7, r5, lsl #4
 800ce66:	4410      	add	r0, r2
 800ce68:	4286      	cmp	r6, r0
 800ce6a:	d349      	bcc.n	800cf00 <f_mkfs+0x298>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800ce6c:	9a06      	ldr	r2, [sp, #24]
 800ce6e:	9903      	ldr	r1, [sp, #12]
 800ce70:	9801      	ldr	r0, [sp, #4]
 800ce72:	1ab2      	subs	r2, r6, r2
 800ce74:	eba2 020a 	sub.w	r2, r2, sl
			if (fsty == FS_FAT32) {
 800ce78:	f1b8 0f03 	cmp.w	r8, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800ce7c:	fb00 2211 	mls	r2, r0, r1, r2
 800ce80:	fbb2 f2f5 	udiv	r2, r2, r5
 800ce84:	9205      	str	r2, [sp, #20]
			if (fsty == FS_FAT32) {
 800ce86:	d126      	bne.n	800ced6 <f_mkfs+0x26e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800ce88:	9905      	ldr	r1, [sp, #20]
 800ce8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ce8e:	4291      	cmp	r1, r2
 800ce90:	d855      	bhi.n	800cf3e <f_mkfs+0x2d6>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ce92:	bbab      	cbnz	r3, 800cf00 <f_mkfs+0x298>
 800ce94:	2d01      	cmp	r5, #1
 800ce96:	d933      	bls.n	800cf00 <f_mkfs+0x298>
 800ce98:	086b      	lsrs	r3, r5, #1
 800ce9a:	e7a7      	b.n	800cdec <f_mkfs+0x184>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	e7aa      	b.n	800cdf6 <f_mkfs+0x18e>
 800cea0:	461a      	mov	r2, r3
 800cea2:	e7ae      	b.n	800ce02 <f_mkfs+0x19a>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cea4:	006d      	lsls	r5, r5, #1
 800cea6:	e76c      	b.n	800cd82 <f_mkfs+0x11a>
 800cea8:	461d      	mov	r5, r3
 800ceaa:	e770      	b.n	800cd8e <f_mkfs+0x126>
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800ceac:	9901      	ldr	r1, [sp, #4]
 800ceae:	fbb2 fcf1 	udiv	ip, r2, r1
 800ceb2:	fb01 2c1c 	mls	ip, r1, ip, r2
 800ceb6:	f1bc 0f00 	cmp.w	ip, #0
 800ceba:	d005      	beq.n	800cec8 <f_mkfs+0x260>
					n--; sz_rsv++; b_fat++;
 800cebc:	9902      	ldr	r1, [sp, #8]
 800cebe:	3101      	adds	r1, #1
 800cec0:	3a01      	subs	r2, #1
 800cec2:	f10a 0a01 	add.w	sl, sl, #1
 800cec6:	9102      	str	r1, [sp, #8]
				sz_fat += n / n_fat;
 800cec8:	9901      	ldr	r1, [sp, #4]
 800ceca:	fbb2 f2f1 	udiv	r2, r2, r1
 800cece:	9903      	ldr	r1, [sp, #12]
 800ced0:	4411      	add	r1, r2
 800ced2:	9103      	str	r1, [sp, #12]
 800ced4:	e7c5      	b.n	800ce62 <f_mkfs+0x1fa>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT16) {
 800ced6:	f1b8 0f02 	cmp.w	r8, #2
 800ceda:	d129      	bne.n	800cf30 <f_mkfs+0x2c8>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800cedc:	9905      	ldr	r1, [sp, #20]
 800cede:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cee2:	4291      	cmp	r1, r2
 800cee4:	d90e      	bls.n	800cf04 <f_mkfs+0x29c>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f040 8234 	bne.w	800d354 <f_mkfs+0x6ec>
 800ceec:	006b      	lsls	r3, r5, #1
 800ceee:	2b40      	cmp	r3, #64	; 0x40
 800cef0:	f67f af40 	bls.w	800cd74 <f_mkfs+0x10c>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
					}
					if ((fsopt & FM_FAT32)) {
 800cef4:	f1be 0f00 	cmp.w	lr, #0
 800cef8:	f47f af7a 	bne.w	800cdf0 <f_mkfs+0x188>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cefc:	2b80      	cmp	r3, #128	; 0x80
 800cefe:	d9d3      	bls.n	800cea8 <f_mkfs+0x240>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800cf00:	200e      	movs	r0, #14
 800cf02:	e21c      	b.n	800d33e <f_mkfs+0x6d6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800cf04:	9905      	ldr	r1, [sp, #20]
 800cf06:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cf0a:	4291      	cmp	r1, r2
 800cf0c:	d817      	bhi.n	800cf3e <f_mkfs+0x2d6>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1f6      	bne.n	800cf00 <f_mkfs+0x298>
 800cf12:	006b      	lsls	r3, r5, #1
 800cf14:	2b80      	cmp	r3, #128	; 0x80
 800cf16:	f67f af2d 	bls.w	800cd74 <f_mkfs+0x10c>
 800cf1a:	e7f1      	b.n	800cf00 <f_mkfs+0x298>
 800cf1c:	20002284 	.word	0x20002284
 800cf20:	08017728 	.word	0x08017728
 800cf24:	0801799e 	.word	0x0801799e
 800cf28:	080179ac 	.word	0x080179ac
 800cf2c:	0ffeffff 	.word	0x0ffeffff
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800cf30:	9a05      	ldr	r2, [sp, #20]
 800cf32:	f640 73f5 	movw	r3, #4085	; 0xff5
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d8e2      	bhi.n	800cf00 <f_mkfs+0x298>
 800cf3a:	f04f 0801 	mov.w	r8, #1
 800cf3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf42:	2100      	movs	r1, #0
 800cf44:	4620      	mov	r0, r4
 800cf46:	f009 fb32 	bl	80165ae <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800cf4a:	4b4e      	ldr	r3, [pc, #312]	; (800d084 <f_mkfs+0x41c>)
	*ptr++ = (BYTE)val; val >>= 8;
 800cf4c:	f884 a00e 	strb.w	sl, [r4, #14]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	6022      	str	r2, [r4, #0]
 800cf54:	685a      	ldr	r2, [r3, #4]
 800cf56:	6062      	str	r2, [r4, #4]
 800cf58:	f1b8 0f03 	cmp.w	r8, #3
 800cf5c:	891a      	ldrh	r2, [r3, #8]
 800cf5e:	7a9b      	ldrb	r3, [r3, #10]
 800cf60:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 800cf62:	bf08      	it	eq
 800cf64:	f04f 0900 	moveq.w	r9, #0
 800cf68:	2302      	movs	r3, #2
 800cf6a:	7323      	strb	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf6c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
		memset(buf, 0, ss);
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800cf70:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf72:	f884 9011 	strb.w	r9, [r4, #17]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
 800cf76:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
 800cf7a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800cf7e:	8122      	strh	r2, [r4, #8]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800cf80:	7365      	strb	r5, [r4, #13]
	*ptr++ = (BYTE)val;
 800cf82:	f884 a00f 	strb.w	sl, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800cf86:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val;
 800cf88:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
 800cf8c:	d258      	bcs.n	800d040 <f_mkfs+0x3d8>
	*ptr++ = (BYTE)val; val >>= 8;
 800cf8e:	74e6      	strb	r6, [r4, #19]
 800cf90:	f3c6 2607 	ubfx	r6, r6, #8, #8
	*ptr++ = (BYTE)val;
 800cf94:	7526      	strb	r6, [r4, #20]
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800cf96:	23f8      	movs	r3, #248	; 0xf8
 800cf98:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf9a:	233f      	movs	r3, #63	; 0x3f
 800cf9c:	7623      	strb	r3, [r4, #24]
	*ptr++ = (BYTE)val;
 800cf9e:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800cfa0:	23ff      	movs	r3, #255	; 0xff
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800cfa2:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val;
 800cfa4:	7662      	strb	r2, [r4, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfa6:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
 800cfa8:	76e2      	strb	r2, [r4, #27]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800cfaa:	f104 001c 	add.w	r0, r4, #28
 800cfae:	f007 fd49 	bl	8014a44 <st_dword>
		if (fsty == FS_FAT32) {
 800cfb2:	f1b8 0f03 	cmp.w	r8, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800cfb6:	9904      	ldr	r1, [sp, #16]
		if (fsty == FS_FAT32) {
 800cfb8:	d148      	bne.n	800d04c <f_mkfs+0x3e4>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800cfba:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800cfbe:	f007 fd41 	bl	8014a44 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800cfc2:	9903      	ldr	r1, [sp, #12]
 800cfc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cfc8:	f007 fd3c 	bl	8014a44 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800cfcc:	2302      	movs	r3, #2
 800cfce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800cfd8:	2306      	movs	r3, #6
 800cfda:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800cfde:	2380      	movs	r3, #128	; 0x80
 800cfe0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800cfe4:	2329      	movs	r3, #41	; 0x29
 800cfe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfea:	4b27      	ldr	r3, [pc, #156]	; (800d088 <f_mkfs+0x420>)
	*ptr++ = (BYTE)val; val >>= 8;
 800cfec:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
 800cff0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	*ptr++ = (BYTE)val;
 800cff4:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	*ptr++ = (BYTE)val;
 800cff8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 800cffc:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 800d000:	f103 0110 	add.w	r1, r3, #16
 800d004:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d008:	f853 0b04 	ldr.w	r0, [r3], #4
 800d00c:	f842 0b04 	str.w	r0, [r2], #4
 800d010:	428b      	cmp	r3, r1
 800d012:	d1f9      	bne.n	800d008 <f_mkfs+0x3a0>
 800d014:	8819      	ldrh	r1, [r3, #0]
 800d016:	789b      	ldrb	r3, [r3, #2]
 800d018:	8011      	strh	r1, [r2, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d01a:	f04f 0a55 	mov.w	sl, #85	; 0x55
	*ptr++ = (BYTE)val;
 800d01e:	f04f 09aa 	mov.w	r9, #170	; 0xaa
 800d022:	7093      	strb	r3, [r2, #2]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800d024:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800d026:	f884 a1fe 	strb.w	sl, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800d02a:	f884 91ff 	strb.w	r9, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800d02e:	2301      	movs	r3, #1
 800d030:	463a      	mov	r2, r7
 800d032:	4658      	mov	r0, fp
 800d034:	f000 f9ba 	bl	800d3ac <disk_write>
 800d038:	4606      	mov	r6, r0
 800d03a:	b348      	cbz	r0, 800d090 <f_mkfs+0x428>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800d03c:	2001      	movs	r0, #1
 800d03e:	e17e      	b.n	800d33e <f_mkfs+0x6d6>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800d040:	4631      	mov	r1, r6
 800d042:	f104 0020 	add.w	r0, r4, #32
 800d046:	f007 fcfd 	bl	8014a44 <st_dword>
 800d04a:	e7a4      	b.n	800cf96 <f_mkfs+0x32e>
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800d04c:	f104 0027 	add.w	r0, r4, #39	; 0x27
 800d050:	f007 fcf8 	bl	8014a44 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800d054:	9b03      	ldr	r3, [sp, #12]
 800d056:	75a3      	strb	r3, [r4, #22]
 800d058:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
 800d05c:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800d05e:	2380      	movs	r3, #128	; 0x80
 800d060:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800d064:	2329      	movs	r3, #41	; 0x29
 800d066:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800d06a:	4b08      	ldr	r3, [pc, #32]	; (800d08c <f_mkfs+0x424>)
 800d06c:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800d070:	f103 0110 	add.w	r1, r3, #16
 800d074:	f853 0b04 	ldr.w	r0, [r3], #4
 800d078:	f842 0b04 	str.w	r0, [r2], #4
 800d07c:	428b      	cmp	r3, r1
 800d07e:	d1f9      	bne.n	800d074 <f_mkfs+0x40c>
 800d080:	e7c8      	b.n	800d014 <f_mkfs+0x3ac>
 800d082:	bf00      	nop
 800d084:	08019397 	.word	0x08019397
 800d088:	080193a3 	.word	0x080193a3
 800d08c:	080193b7 	.word	0x080193b7

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800d090:	f1b8 0f03 	cmp.w	r8, #3
 800d094:	d13a      	bne.n	800d10c <f_mkfs+0x4a4>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800d096:	2301      	movs	r3, #1
 800d098:	1dba      	adds	r2, r7, #6
 800d09a:	4621      	mov	r1, r4
 800d09c:	4658      	mov	r0, fp
 800d09e:	f000 f985 	bl	800d3ac <disk_write>
__ssp_bos_icheck3(memset, void *, int)
 800d0a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0a6:	4631      	mov	r1, r6
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f009 fa80 	bl	80165ae <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800d0ae:	2352      	movs	r3, #82	; 0x52
 800d0b0:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0b2:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0b4:	2361      	movs	r3, #97	; 0x61
 800d0b6:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 800d0b8:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			memset(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d0bc:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val;
 800d0be:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800d0c0:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val;
 800d0c2:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0c4:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 800d0c8:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 800d0cc:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d0d0:	1e59      	subs	r1, r3, #1
 800d0d2:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 800d0d6:	f007 fcb5 	bl	8014a44 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800d0da:	2302      	movs	r3, #2
 800d0dc:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d0e0:	1dfa      	adds	r2, r7, #7
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800d0e6:	f884 61ed 	strb.w	r6, [r4, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 800d0ea:	f884 61ee 	strb.w	r6, [r4, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
 800d0ee:	f884 61ef 	strb.w	r6, [r4, #495]	; 0x1ef
	*ptr++ = (BYTE)val; val >>= 8;
 800d0f2:	f884 a1fe 	strb.w	sl, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800d0f6:	f884 91ff 	strb.w	r9, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d0fa:	4658      	mov	r0, fp
 800d0fc:	f000 f956 	bl	800d3ac <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800d100:	2301      	movs	r3, #1
 800d102:	18fa      	adds	r2, r7, r3
 800d104:	4621      	mov	r1, r4
 800d106:	4658      	mov	r0, fp
 800d108:	f000 f950 	bl	800d3ac <disk_write>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800d10c:	9b07      	ldr	r3, [sp, #28]
 800d10e:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 800d112:	f022 0201 	bic.w	r2, r2, #1
 800d116:	2100      	movs	r1, #0
 800d118:	4620      	mov	r0, r4
 800d11a:	ea4f 2a53 	mov.w	sl, r3, lsr #9
 800d11e:	f009 fa46 	bl	80165ae <memset>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800d122:	f1b8 0f01 	cmp.w	r8, #1
 800d126:	4b8e      	ldr	r3, [pc, #568]	; (800d360 <f_mkfs+0x6f8>)
 800d128:	bf18      	it	ne
 800d12a:	f06f 0307 	mvnne.w	r3, #7
 800d12e:	9305      	str	r3, [sp, #20]
 800d130:	2300      	movs	r3, #0
 800d132:	9304      	str	r3, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800d134:	26ff      	movs	r6, #255	; 0xff
			if (fsty == FS_FAT32) {
 800d136:	f1b8 0f03 	cmp.w	r8, #3
 800d13a:	f040 80d6 	bne.w	800d2ea <f_mkfs+0x682>
	*ptr++ = (BYTE)val; val >>= 8;
 800d13e:	f06f 0307 	mvn.w	r3, #7
 800d142:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val;
 800d144:	f04f 030f 	mov.w	r3, #15
	*ptr++ = (BYTE)val; val >>= 8;
 800d148:	7066      	strb	r6, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800d14a:	70a6      	strb	r6, [r4, #2]
	*ptr++ = (BYTE)val;
 800d14c:	70e6      	strb	r6, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800d14e:	7126      	strb	r6, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800d150:	7166      	strb	r6, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 800d152:	71a6      	strb	r6, [r4, #6]
	*ptr++ = (BYTE)val;
 800d154:	71e6      	strb	r6, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d156:	7226      	strb	r6, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800d158:	7266      	strb	r6, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 800d15a:	72a6      	strb	r6, [r4, #10]
	*ptr++ = (BYTE)val;
 800d15c:	72e3      	strb	r3, [r4, #11]
 800d15e:	9f03      	ldr	r7, [sp, #12]
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800d160:	9a02      	ldr	r2, [sp, #8]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d162:	4557      	cmp	r7, sl
 800d164:	46b9      	mov	r9, r7
 800d166:	bf28      	it	cs
 800d168:	46d1      	movcs	r9, sl
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800d16a:	4621      	mov	r1, r4
 800d16c:	464b      	mov	r3, r9
 800d16e:	4658      	mov	r0, fp
 800d170:	f000 f91c 	bl	800d3ac <disk_write>
 800d174:	4601      	mov	r1, r0
 800d176:	2800      	cmp	r0, #0
 800d178:	f47f af60 	bne.w	800d03c <f_mkfs+0x3d4>
 800d17c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d180:	4620      	mov	r0, r4
 800d182:	f009 fa14 	bl	80165ae <memset>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
				sect += n; nsect -= n;
 800d186:	9b02      	ldr	r3, [sp, #8]
			} while (nsect);
 800d188:	ebb7 0709 	subs.w	r7, r7, r9
				sect += n; nsect -= n;
 800d18c:	444b      	add	r3, r9
 800d18e:	9302      	str	r3, [sp, #8]
			} while (nsect);
 800d190:	d1e6      	bne.n	800d160 <f_mkfs+0x4f8>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800d192:	9b04      	ldr	r3, [sp, #16]
 800d194:	2201      	movs	r2, #1
 800d196:	9204      	str	r2, [sp, #16]
 800d198:	9a01      	ldr	r2, [sp, #4]
 800d19a:	3301      	adds	r3, #1
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d8ca      	bhi.n	800d136 <f_mkfs+0x4ce>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d1a0:	9b06      	ldr	r3, [sp, #24]
 800d1a2:	f1b8 0f03 	cmp.w	r8, #3
 800d1a6:	bf18      	it	ne
 800d1a8:	461d      	movne	r5, r3
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d1aa:	4555      	cmp	r5, sl
 800d1ac:	462e      	mov	r6, r5
 800d1ae:	bf28      	it	cs
 800d1b0:	4656      	movcs	r6, sl
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800d1b2:	9a02      	ldr	r2, [sp, #8]
 800d1b4:	4633      	mov	r3, r6
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	4658      	mov	r0, fp
 800d1ba:	f000 f8f7 	bl	800d3ac <disk_write>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	f47f af3c 	bne.w	800d03c <f_mkfs+0x3d4>
			sect += n; nsect -= n;
 800d1c4:	9b02      	ldr	r3, [sp, #8]
		} while (nsect);
 800d1c6:	1bad      	subs	r5, r5, r6
			sect += n; nsect -= n;
 800d1c8:	4433      	add	r3, r6
 800d1ca:	9302      	str	r3, [sp, #8]
		} while (nsect);
 800d1cc:	d1ed      	bne.n	800d1aa <f_mkfs+0x542>

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;			/* exFAT */
	} else {
		if (fsty == FS_FAT32) {
 800d1ce:	f1b8 0f03 	cmp.w	r8, #3
 800d1d2:	f000 808f 	beq.w	800d2f4 <f_mkfs+0x68c>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
 800d1d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1dc:	f080 808d 	bcs.w	800d2fa <f_mkfs+0x692>
				sys = 0x06;	/* FAT12/16 (large) */
			} else {
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 800d1e0:	f1b8 0f02 	cmp.w	r8, #2
 800d1e4:	bf0c      	ite	eq
 800d1e6:	f04f 0904 	moveq.w	r9, #4
 800d1ea:	f04f 0901 	movne.w	r9, #1
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
 800d1ee:	9b08      	ldr	r3, [sp, #32]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f040 809c 	bne.w	800d32e <f_mkfs+0x6c6>
			lba[0] = sz_vol; lba[1] = 0;
 800d1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1f8:	930e      	str	r3, [sp, #56]	; 0x38
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800d1fa:	aa0d      	add	r2, sp, #52	; 0x34
			lba[0] = sz_vol; lba[1] = 0;
 800d1fc:	9b08      	ldr	r3, [sp, #32]
 800d1fe:	930f      	str	r3, [sp, #60]	; 0x3c
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800d200:	2101      	movs	r1, #1
 800d202:	4658      	mov	r0, fp
 800d204:	f000 f8de 	bl	800d3c4 <disk_ioctl>
 800d208:	2800      	cmp	r0, #0
 800d20a:	f47f af17 	bne.w	800d03c <f_mkfs+0x3d4>
		sz_drv32 = (DWORD)sz_drv;
 800d20e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800d212:	2305      	movs	r3, #5
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800d214:	2708      	movs	r7, #8
 800d216:	f64f 423e 	movw	r2, #64574	; 0xfc3e
 800d21a:	fbb8 f1f7 	udiv	r1, r8, r7
 800d21e:	4291      	cmp	r1, r2
 800d220:	d86e      	bhi.n	800d300 <f_mkfs+0x698>
 800d222:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d226:	2100      	movs	r1, #0
 800d228:	4620      	mov	r0, r4
 800d22a:	f009 f9c0 	bl	80165ae <memset>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800d22e:	2364      	movs	r3, #100	; 0x64
 800d230:	fbb8 f3f3 	udiv	r3, r8, r3
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 800d23a:	f504 75e3 	add.w	r5, r4, #454	; 0x1c6
 800d23e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800d242:	9302      	str	r3, [sp, #8]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800d244:	223f      	movs	r2, #63	; 0x3f
 800d246:	4590      	cmp	r8, r2
 800d248:	d962      	bls.n	800d310 <f_mkfs+0x6a8>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800d24a:	f85a 6b04 	ldr.w	r6, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800d24e:	2e64      	cmp	r6, #100	; 0x64
 800d250:	d803      	bhi.n	800d25a <f_mkfs+0x5f2>
 800d252:	bf16      	itet	ne
 800d254:	9901      	ldrne	r1, [sp, #4]
 800d256:	4646      	moveq	r6, r8
 800d258:	434e      	mulne	r6, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800d25a:	18b0      	adds	r0, r6, r2
 800d25c:	bf2c      	ite	cs
 800d25e:	2101      	movcs	r1, #1
 800d260:	2100      	movcc	r1, #0
 800d262:	4580      	cmp	r8, r0
 800d264:	d301      	bcc.n	800d26a <f_mkfs+0x602>
 800d266:	2900      	cmp	r1, #0
 800d268:	d050      	beq.n	800d30c <f_mkfs+0x6a4>
 800d26a:	eba8 0602 	sub.w	r6, r8, r2
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800d26e:	4611      	mov	r1, r2
 800d270:	4628      	mov	r0, r5
 800d272:	f007 fbe7 	bl	8014a44 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800d276:	4631      	mov	r1, r6
 800d278:	1d28      	adds	r0, r5, #4
 800d27a:	f007 fbe3 	bl	8014a44 <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800d27e:	233f      	movs	r3, #63	; 0x3f
 800d280:	fbb2 f1f3 	udiv	r1, r2, r3
 800d284:	fbb1 f0f7 	udiv	r0, r1, r7
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800d288:	fb07 1c10 	mls	ip, r7, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800d28c:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 800d290:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800d292:	f805 cc07 	strb.w	ip, [r5, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800d296:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 800d29a:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800d29e:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800d2a0:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800d2a4:	4432      	add	r2, r6
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800d2a6:	f805 1c06 	strb.w	r1, [r5, #-6]
			pte[PTE_StCyl] = (BYTE)cy;
 800d2aa:	f805 0c05 	strb.w	r0, [r5, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800d2ae:	1e51      	subs	r1, r2, #1
 800d2b0:	fbb1 f6f3 	udiv	r6, r1, r3
 800d2b4:	fbb6 f0f7 	udiv	r0, r6, r7
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800d2b8:	fb07 6c10 	mls	ip, r7, r0, r6
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800d2bc:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
 800d2c0:	1b89      	subs	r1, r1, r6
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800d2c2:	0886      	lsrs	r6, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800d2c4:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800d2c6:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800d2ca:	4331      	orrs	r1, r6
 800d2cc:	f805 1c02 	strb.w	r1, [r5, #-2]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800d2d0:	9902      	ldr	r1, [sp, #8]
			pte[PTE_System] = sys;					/* System type */
 800d2d2:	f805 9c04 	strb.w	r9, [r5, #-4]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800d2d6:	42a9      	cmp	r1, r5
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800d2d8:	f805 cc03 	strb.w	ip, [r5, #-3]
			pte[PTE_EdCyl] = (BYTE)cy;
 800d2dc:	f805 0c01 	strb.w	r0, [r5, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800d2e0:	d016      	beq.n	800d310 <f_mkfs+0x6a8>
 800d2e2:	3510      	adds	r5, #16
 800d2e4:	2a00      	cmp	r2, #0
 800d2e6:	d1ae      	bne.n	800d246 <f_mkfs+0x5de>
 800d2e8:	e012      	b.n	800d310 <f_mkfs+0x6a8>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800d2ea:	9905      	ldr	r1, [sp, #20]
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f007 fba9 	bl	8014a44 <st_dword>
 800d2f2:	e734      	b.n	800d15e <f_mkfs+0x4f6>
			sys = 0x0C;		/* FAT32X */
 800d2f4:	f04f 090c 	mov.w	r9, #12
 800d2f8:	e779      	b.n	800d1ee <f_mkfs+0x586>
				sys = 0x06;	/* FAT12/16 (large) */
 800d2fa:	f04f 0906 	mov.w	r9, #6
 800d2fe:	e776      	b.n	800d1ee <f_mkfs+0x586>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800d300:	007f      	lsls	r7, r7, #1
 800d302:	3b01      	subs	r3, #1
 800d304:	b2ff      	uxtb	r7, r7
 800d306:	d188      	bne.n	800d21a <f_mkfs+0x5b2>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800d308:	27ff      	movs	r7, #255	; 0xff
 800d30a:	e78a      	b.n	800d222 <f_mkfs+0x5ba>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800d30c:	2e00      	cmp	r6, #0
 800d30e:	d1ae      	bne.n	800d26e <f_mkfs+0x606>
	*ptr++ = (BYTE)val; val >>= 8;
 800d310:	2355      	movs	r3, #85	; 0x55
 800d312:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800d316:	23aa      	movs	r3, #170	; 0xaa
 800d318:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d31c:	2200      	movs	r2, #0
 800d31e:	2301      	movs	r3, #1
 800d320:	4621      	mov	r1, r4
 800d322:	4658      	mov	r0, fp
 800d324:	f000 f842 	bl	800d3ac <disk_write>
 800d328:	2800      	cmp	r0, #0
 800d32a:	f47f ae87 	bne.w	800d03c <f_mkfs+0x3d4>
			fr = create_partition(pdrv, lba, sys, buf);
			if (fr != FR_OK) LEAVE_MKFS(fr);
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800d32e:	2200      	movs	r2, #0
 800d330:	4611      	mov	r1, r2
 800d332:	4658      	mov	r0, fp
 800d334:	f000 f846 	bl	800d3c4 <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d338:	3800      	subs	r0, #0
 800d33a:	bf18      	it	ne
 800d33c:	2001      	movne	r0, #1

	LEAVE_MKFS(FR_OK);
}
 800d33e:	b011      	add	sp, #68	; 0x44
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800d344:	200b      	movs	r0, #11
 800d346:	e7fa      	b.n	800d33e <f_mkfs+0x6d6>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800d348:	2003      	movs	r0, #3
 800d34a:	e7f8      	b.n	800d33e <f_mkfs+0x6d6>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d34c:	200a      	movs	r0, #10
 800d34e:	e7f6      	b.n	800d33e <f_mkfs+0x6d6>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800d350:	2011      	movs	r0, #17
 800d352:	e7f4      	b.n	800d33e <f_mkfs+0x6d6>
					if ((fsopt & FM_FAT32)) {
 800d354:	f1be 0f00 	cmp.w	lr, #0
 800d358:	f47f ad48 	bne.w	800cdec <f_mkfs+0x184>
 800d35c:	e5d0      	b.n	800cf00 <f_mkfs+0x298>
 800d35e:	bf00      	nop
 800d360:	00fffff8 	.word	0x00fffff8

0800d364 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
 800d364:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
 800d366:	4b04      	ldr	r3, [pc, #16]	; (800d378 <disk_status+0x14>)
 800d368:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d36c:	f004 f8bb 	bl	80114e6 <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 800d370:	3800      	subs	r0, #0
 800d372:	bf18      	it	ne
 800d374:	2001      	movne	r0, #1
 800d376:	bd08      	pop	{r3, pc}
 800d378:	08017738 	.word	0x08017738

0800d37c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
 800d37c:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
 800d37e:	4b04      	ldr	r3, [pc, #16]	; (800d390 <disk_initialize+0x14>)
 800d380:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d384:	f004 f8a1 	bl	80114ca <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 800d388:	3800      	subs	r0, #0
 800d38a:	bf18      	it	ne
 800d38c:	2001      	movne	r0, #1
 800d38e:	bd08      	pop	{r3, pc}
 800d390:	08017738 	.word	0x08017738

0800d394 <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 800d394:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
 800d396:	4c04      	ldr	r4, [pc, #16]	; (800d3a8 <disk_read+0x14>)
 800d398:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800d39c:	f004 f8b1 	bl	8011502 <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
 800d3a0:	3800      	subs	r0, #0
 800d3a2:	bf18      	it	ne
 800d3a4:	2001      	movne	r0, #1
 800d3a6:	bd10      	pop	{r4, pc}
 800d3a8:	08017738 	.word	0x08017738

0800d3ac <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 800d3ac:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
 800d3ae:	4c04      	ldr	r4, [pc, #16]	; (800d3c0 <disk_write+0x14>)
 800d3b0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800d3b4:	f004 f8bc 	bl	8011530 <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
 800d3b8:	3800      	subs	r0, #0
 800d3ba:	bf18      	it	ne
 800d3bc:	2001      	movne	r0, #1
 800d3be:	bd10      	pop	{r4, pc}
 800d3c0:	08017738 	.word	0x08017738

0800d3c4 <disk_ioctl>:
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
 800d3c4:	b513      	push	{r0, r1, r4, lr}
	int ret = RES_OK;
	uint32_t sector_size = 0;
 800d3c6:	2300      	movs	r3, #0
{
 800d3c8:	4614      	mov	r4, r2
	uint32_t sector_size = 0;
 800d3ca:	9301      	str	r3, [sp, #4]

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
 800d3cc:	2903      	cmp	r1, #3
 800d3ce:	d821      	bhi.n	800d414 <disk_ioctl+0x50>
 800d3d0:	e8df f001 	tbb	[pc, r1]
 800d3d4:	1e0e0c02 	.word	0x1e0e0c02
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
 800d3d8:	2105      	movs	r1, #5
			ret = RES_ERROR;
		}
		break;

	case GET_BLOCK_SIZE:
		if (disk_access_ioctl(pdrv_str[pdrv],
 800d3da:	4b10      	ldr	r3, [pc, #64]	; (800d41c <disk_ioctl+0x58>)
 800d3dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d3e0:	f004 f8bd 	bl	801155e <disk_access_ioctl>
 800d3e4:	3800      	subs	r0, #0
 800d3e6:	bf18      	it	ne
 800d3e8:	2001      	movne	r0, #1
 800d3ea:	e00e      	b.n	800d40a <disk_ioctl+0x46>
		if (disk_access_ioctl(pdrv_str[pdrv],
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	e7f4      	b.n	800d3da <disk_ioctl+0x16>
		if ((disk_access_ioctl(pdrv_str[pdrv],
 800d3f0:	4b0a      	ldr	r3, [pc, #40]	; (800d41c <disk_ioctl+0x58>)
 800d3f2:	aa01      	add	r2, sp, #4
 800d3f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d3f8:	2102      	movs	r1, #2
 800d3fa:	f004 f8b0 	bl	801155e <disk_access_ioctl>
 800d3fe:	b958      	cbnz	r0, 800d418 <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
 800d400:	9b01      	ldr	r3, [sp, #4]
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
 800d402:	b29a      	uxth	r2, r3
 800d404:	4293      	cmp	r3, r2
 800d406:	d107      	bne.n	800d418 <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
 800d408:	8023      	strh	r3, [r4, #0]
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
 800d40a:	b2c0      	uxtb	r0, r0
 800d40c:	b002      	add	sp, #8
 800d40e:	bd10      	pop	{r4, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
 800d410:	2104      	movs	r1, #4
 800d412:	e7e2      	b.n	800d3da <disk_ioctl+0x16>
	uint32_t sector_size = 0;
 800d414:	2004      	movs	r0, #4
 800d416:	e7f8      	b.n	800d40a <disk_ioctl+0x46>
			ret = RES_ERROR;
 800d418:	2001      	movs	r0, #1
 800d41a:	e7f6      	b.n	800d40a <disk_ioctl+0x46>
 800d41c:	08017738 	.word	0x08017738

0800d420 <LL_RTC_DeInit>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800d420:	23ca      	movs	r3, #202	; 0xca
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are de-initialized
  *          - ERROR: RTC registers are not de-initialized
  */
ErrorStatus LL_RTC_DeInit(RTC_TypeDef *RTCx)
{
 800d422:	b510      	push	{r4, lr}
 800d424:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800d426:	2353      	movs	r3, #83	; 0x53
 800d428:	6243      	str	r3, [r0, #36]	; 0x24
 800d42a:	4604      	mov	r4, r0

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800d42c:	f008 fc69 	bl	8015d02 <LL_RTC_EnterInitMode>
 800d430:	b1a0      	cbz	r0, 800d45c <LL_RTC_DeInit+0x3c>
  {
    /* Reset TR, DR and CR registers */
    WRITE_REG(RTCx->TR,       0x00000000U);
 800d432:	2300      	movs	r3, #0
#if defined(RTC_WAKEUP_SUPPORT)
    WRITE_REG(RTCx->WUTR,     RTC_WUTR_WUT);
#endif /* RTC_WAKEUP_SUPPORT */
    WRITE_REG(RTCx->DR, (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800d434:	f242 1201 	movw	r2, #8449	; 0x2101
    WRITE_REG(RTCx->TR,       0x00000000U);
 800d438:	6023      	str	r3, [r4, #0]
    WRITE_REG(RTCx->DR, (RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800d43a:	6062      	str	r2, [r4, #4]
#if defined(RTC_WAKEUP_SUPPORT)
    WRITE_REG(RTCx->CR, (LL_RTC_ReadReg(RTCx, CR) & RTC_CR_WUCKSEL));
#else
    WRITE_REG(RTCx->CR, 0x00000000U);
#endif /* RTC_WAKEUP_SUPPORT */
    WRITE_REG(RTCx->PRER, (RTC_PRER_PREDIV_A | RTC_SYNCH_PRESC_DEFAULT));
 800d43c:	4a0e      	ldr	r2, [pc, #56]	; (800d478 <LL_RTC_DeInit+0x58>)
    WRITE_REG(RTCx->CR, 0x00000000U);
 800d43e:	61a3      	str	r3, [r4, #24]
    WRITE_REG(RTCx->PRER, (RTC_PRER_PREDIV_A | RTC_SYNCH_PRESC_DEFAULT));
 800d440:	6122      	str	r2, [r4, #16]
    WRITE_REG(RTCx->ALRMAR,   0x00000000U);
 800d442:	6423      	str	r3, [r4, #64]	; 0x40
    WRITE_REG(RTCx->ALRMBR,   0x00000000U);
 800d444:	64a3      	str	r3, [r4, #72]	; 0x48
    WRITE_REG(RTCx->SHIFTR,   0x00000000U);
 800d446:	62e3      	str	r3, [r4, #44]	; 0x2c
    WRITE_REG(RTCx->CALR,     0x00000000U);
 800d448:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(RTCx->ALRMASSR, 0x00000000U);
 800d44a:	6463      	str	r3, [r4, #68]	; 0x44
    WRITE_REG(RTCx->ALRMBSSR, 0x00000000U);
 800d44c:	64e3      	str	r3, [r4, #76]	; 0x4c
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 800d44e:	68e3      	ldr	r3, [r4, #12]
 800d450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d454:	60e3      	str	r3, [r4, #12]

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);

    /* Wait till the RTC RSF flag is set */
    status = LL_RTC_WaitForSynchro(RTCx);
 800d456:	4620      	mov	r0, r4
 800d458:	f008 fca2 	bl	8015da0 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800d45c:	23ff      	movs	r3, #255	; 0xff
 800d45e:	6263      	str	r3, [r4, #36]	; 0x24
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);

  /* DeInitialization of the TAMP */
  /* Reset TAMP CR1 and CR2 registers */
  WRITE_REG(TAMP->CR1,      0xFFFF0000U);
 800d460:	4b06      	ldr	r3, [pc, #24]	; (800d47c <LL_RTC_DeInit+0x5c>)
 800d462:	4a07      	ldr	r2, [pc, #28]	; (800d480 <LL_RTC_DeInit+0x60>)
 800d464:	601a      	str	r2, [r3, #0]
  WRITE_REG(TAMP->CR2,     0x00000000U);
 800d466:	2200      	movs	r2, #0
 800d468:	605a      	str	r2, [r3, #4]
#if defined (RTC_OTHER_SUPPORT)
  WRITE_REG(TAMP->CR3,     0x00000000U);
  WRITE_REG(TAMP->SMCR,     0x00000000U);
  WRITE_REG(TAMP->PRIVCR,   0x00000000U);
#endif /* RTC_OTHER_SUPPORT */
  WRITE_REG(TAMP->FLTCR,    0x00000000U);
 800d46a:	60da      	str	r2, [r3, #12]
#if defined (RTC_ACTIVE_TAMPER_SUPPORT)
  WRITE_REG(TAMP->ATCR1,    0x00000000U);
  WRITE_REG(TAMP->ATCR2,    0x00000000U);
#endif /* RTC_ACTIVE_TAMPER_SUPPORT */
  WRITE_REG(TAMP->IER,      0x00000000U);
 800d46c:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(TAMP->SCR,      0xFFFFFFFFU);
 800d46e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d472:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined (RTC_OPTION_REG_SUPPORT)
  WRITE_REG(TAMP->OR,       0x00000000U);
#endif /* RTC_OPTION_REG_SUPPORT */

  return status;
}
 800d474:	bd10      	pop	{r4, pc}
 800d476:	bf00      	nop
 800d478:	007f00ff 	.word	0x007f00ff
 800d47c:	4000b000 	.word	0x4000b000
 800d480:	ffff0000 	.word	0xffff0000

0800d484 <LL_SetFlashLatency>:

  /* Flash Clock source (HCLK3) range in MHz with a VCORE is range2 */
  const uint32_t UTILS_CLK_SRC_RANGE_VOS2[] = {6000000U, 12000000U, UTILS_MAX_FREQUENCY_SCALE2};

  /* Flash Latency range */
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800d484:	4a1f      	ldr	r2, [pc, #124]	; (800d504 <LL_SetFlashLatency+0x80>)
{
 800d486:	4603      	mov	r3, r0
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800d488:	ca07      	ldmia	r2, {r0, r1, r2}
{
 800d48a:	b084      	sub	sp, #16
  const uint32_t UTILS_LATENCY_RANGE[] = {LL_FLASH_LATENCY_0, LL_FLASH_LATENCY_1, LL_FLASH_LATENCY_2};
 800d48c:	f10d 0c10 	add.w	ip, sp, #16
 800d490:	e90c 0007 	stmdb	ip, {r0, r1, r2}

  /* Frequency cannot be equal to 0 */
  if (HCLK3_Frequency != 0U)
 800d494:	4618      	mov	r0, r3
 800d496:	b333      	cbz	r3, 800d4e6 <LL_SetFlashLatency+0x62>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800d498:	4b1b      	ldr	r3, [pc, #108]	; (800d508 <LL_SetFlashLatency+0x84>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  {
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800d4a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4a4:	d122      	bne.n	800d4ec <LL_SetFlashLatency+0x68>
    {
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE1)
 800d4a6:	4b19      	ldr	r3, [pc, #100]	; (800d50c <LL_SetFlashLatency+0x88>)
 800d4a8:	4298      	cmp	r0, r3
 800d4aa:	d81c      	bhi.n	800d4e6 <LL_SetFlashLatency+0x62>
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS1); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS1[index])
 800d4ac:	4b18      	ldr	r3, [pc, #96]	; (800d510 <LL_SetFlashLatency+0x8c>)
 800d4ae:	4298      	cmp	r0, r3
 800d4b0:	d924      	bls.n	800d4fc <LL_SetFlashLatency+0x78>
 800d4b2:	4b18      	ldr	r3, [pc, #96]	; (800d514 <LL_SetFlashLatency+0x90>)
      /* Frequency cannot be greater than a defined max clock */
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
      {
        for (index = 0; index < COUNTOF(UTILS_CLK_SRC_RANGE_VOS2); index++)
        {
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 800d4b4:	4298      	cmp	r0, r3
 800d4b6:	bf94      	ite	ls
 800d4b8:	2001      	movls	r0, #1
 800d4ba:	2002      	movhi	r0, #2
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800d4bc:	4916      	ldr	r1, [pc, #88]	; (800d518 <LL_SetFlashLatency+0x94>)
          {
            latency = UTILS_LATENCY_RANGE[index];
 800d4be:	ab04      	add	r3, sp, #16
 800d4c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d4c4:	680b      	ldr	r3, [r1, #0]
 800d4c6:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 800d4ca:	f023 0307 	bic.w	r3, r3, #7
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	600b      	str	r3, [r1, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800d4d2:	680b      	ldr	r3, [r1, #0]
 800d4d4:	f003 0307 	and.w	r3, r3, #7
      do
      {
        /* Wait for Flash latency to be updated */
        getlatency = LL_FLASH_GetLatency();
        timeout--;
      } while ((getlatency != latency) && (timeout > 0U));
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d011      	beq.n	800d500 <LL_SetFlashLatency+0x7c>
 800d4dc:	680b      	ldr	r3, [r1, #0]
 800d4de:	f003 0307 	and.w	r3, r3, #7
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d00c      	beq.n	800d500 <LL_SetFlashLatency+0x7c>
  ErrorStatus status = ERROR;
 800d4e6:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800d4e8:	b004      	add	sp, #16
 800d4ea:	4770      	bx	lr
      if (HCLK3_Frequency <= UTILS_MAX_FREQUENCY_SCALE2)
 800d4ec:	4b0b      	ldr	r3, [pc, #44]	; (800d51c <LL_SetFlashLatency+0x98>)
 800d4ee:	4298      	cmp	r0, r3
 800d4f0:	d8f9      	bhi.n	800d4e6 <LL_SetFlashLatency+0x62>
          if (HCLK3_Frequency <= UTILS_CLK_SRC_RANGE_VOS2[index])
 800d4f2:	4b0b      	ldr	r3, [pc, #44]	; (800d520 <LL_SetFlashLatency+0x9c>)
 800d4f4:	4298      	cmp	r0, r3
 800d4f6:	d901      	bls.n	800d4fc <LL_SetFlashLatency+0x78>
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <LL_SetFlashLatency+0xa0>)
 800d4fa:	e7db      	b.n	800d4b4 <LL_SetFlashLatency+0x30>
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	e7dd      	b.n	800d4bc <LL_SetFlashLatency+0x38>
 800d500:	2001      	movs	r0, #1
 800d502:	e7f1      	b.n	800d4e8 <LL_SetFlashLatency+0x64>
 800d504:	08017064 	.word	0x08017064
 800d508:	58000400 	.word	0x58000400
 800d50c:	02dc6c00 	.word	0x02dc6c00
 800d510:	0112a880 	.word	0x0112a880
 800d514:	02255100 	.word	0x02255100
 800d518:	58004000 	.word	0x58004000
 800d51c:	00f42400 	.word	0x00f42400
 800d520:	005b8d80 	.word	0x005b8d80
 800d524:	00b71b00 	.word	0x00b71b00

0800d528 <UTILS_EnablePLLAndSwitchSystem>:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency,
                                                  LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800d528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHB3CLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK3 frequency based on SYSCLK_Frequency target */
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800d52c:	688b      	ldr	r3, [r1, #8]
 800d52e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800d618 <UTILS_EnablePLLAndSwitchSystem+0xf0>

  /* Calculate HCLK3 frequency current */
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800d532:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800d61c <UTILS_EnablePLLAndSwitchSystem+0xf4>
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800d536:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 800d53a:	4607      	mov	r7, r0
  hclks_frequency_target = __LL_RCC_CALC_HCLK3_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHB3CLKDivider);
 800d53c:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 800d540:	fbb0 f5f5 	udiv	r5, r0, r5
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800d548:	460c      	mov	r4, r1
 800d54a:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800d54c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800d550:	f3c2 1203 	ubfx	r2, r2, #4, #4
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800d554:	f003 030f 	and.w	r3, r3, #15
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800d558:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
 800d55c:	f8d9 2000 	ldr.w	r2, [r9]
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800d560:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  sysclk_current = (SystemCoreClock * AHBPrescTable[(LL_RCC_GetAHBPrescaler() & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos]);
 800d564:	4356      	muls	r6, r2
  hclks_frequency_current = __LL_RCC_CALC_HCLK3_FREQ(sysclk_current, LL_RCC_GetAHB3Prescaler());
 800d566:	fbb6 f6f3 	udiv	r6, r6, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (hclks_frequency_current < hclks_frequency_target)
 800d56a:	42b5      	cmp	r5, r6
 800d56c:	d847      	bhi.n	800d5fe <UTILS_EnablePLLAndSwitchSystem+0xd6>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800d56e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d578:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800d57a:	68da      	ldr	r2, [r3, #12]
 800d57c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d580:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	0192      	lsls	r2, r2, #6
 800d586:	d5fc      	bpl.n	800d582 <UTILS_EnablePLLAndSwitchSystem+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800d588:	6899      	ldr	r1, [r3, #8]
 800d58a:	6822      	ldr	r2, [r4, #0]
 800d58c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800d590:	430a      	orrs	r2, r1
 800d592:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800d594:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800d598:	6862      	ldr	r2, [r4, #4]
 800d59a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800d5a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d5a8:	68a1      	ldr	r1, [r4, #8]
 800d5aa:	f022 020f 	bic.w	r2, r2, #15
 800d5ae:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 800d5b2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800d5b6:	689a      	ldr	r2, [r3, #8]
 800d5b8:	f042 0203 	orr.w	r2, r2, #3
 800d5bc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d5be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5c2:	689a      	ldr	r2, [r3, #8]
 800d5c4:	f002 020c 	and.w	r2, r2, #12
#if defined(DUAL_CORE)
    LL_C2_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->CPU2CLKDivider);
#endif /* DUAL_CORE */
    LL_RCC_SetAHB3Prescaler(UTILS_ClkInitStruct->AHB3CLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800d5c8:	2a0c      	cmp	r2, #12
 800d5ca:	d1fa      	bne.n	800d5c2 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800d5cc:	6899      	ldr	r1, [r3, #8]
 800d5ce:	68e2      	ldr	r2, [r4, #12]
 800d5d0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800d5d4:	430a      	orrs	r2, r1
 800d5d6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800d5d8:	6899      	ldr	r1, [r3, #8]
 800d5da:	6922      	ldr	r2, [r4, #16]
 800d5dc:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800d5e0:	430a      	orrs	r2, r1
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (hclks_frequency_current > hclks_frequency_target)
 800d5e2:	42b5      	cmp	r5, r6
 800d5e4:	609a      	str	r2, [r3, #8]
 800d5e6:	d311      	bcc.n	800d60c <UTILS_EnablePLLAndSwitchSystem+0xe4>
  if (status == SUCCESS)
  {
#if defined(CORE_CM0PLUS) && defined(DUAL_CORE)
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK2_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU2CLKDivider));
#else
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->CPU1CLKDivider));
 800d5e8:	6823      	ldr	r3, [r4, #0]
 800d5ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d5ee:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800d5f2:	fbb7 f7f0 	udiv	r7, r7, r0
}
 800d5f6:	2001      	movs	r0, #1
  SystemCoreClock = HCLKFrequency;
 800d5f8:	f8c9 7000 	str.w	r7, [r9]
}
 800d5fc:	e004      	b.n	800d608 <UTILS_EnablePLLAndSwitchSystem+0xe0>
    status = LL_SetFlashLatency(hclks_frequency_target);
 800d5fe:	4628      	mov	r0, r5
 800d600:	f7ff ff40 	bl	800d484 <LL_SetFlashLatency>
  if (status == SUCCESS)
 800d604:	2801      	cmp	r0, #1
 800d606:	d0b2      	beq.n	800d56e <UTILS_EnablePLLAndSwitchSystem+0x46>
#endif /* CORE_CM0PLUS && DUAL_CORE */
  }

  return status;
}
 800d608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    status = LL_SetFlashLatency(hclks_frequency_target);
 800d60c:	4628      	mov	r0, r5
 800d60e:	f7ff ff39 	bl	800d484 <LL_SetFlashLatency>
  if (status == SUCCESS)
 800d612:	2801      	cmp	r0, #1
 800d614:	d1f8      	bne.n	800d608 <UTILS_EnablePLLAndSwitchSystem+0xe0>
 800d616:	e7e7      	b.n	800d5e8 <UTILS_EnablePLLAndSwitchSystem+0xc0>
 800d618:	08017758 	.word	0x08017758
 800d61c:	20000228 	.word	0x20000228

0800d620 <LL_PLL_ConfigSystemClock_HSI>:
{
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	4604      	mov	r4, r0
  if (UTILS_PLL_IsBusy() == SUCCESS)
 800d624:	f008 fc0c 	bl	8015e40 <UTILS_PLL_IsBusy>
 800d628:	2801      	cmp	r0, #1
{
 800d62a:	460d      	mov	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 800d62c:	d12e      	bne.n	800d68c <LL_PLL_ConfigSystemClock_HSI+0x6c>
    pllrfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800d62e:	4818      	ldr	r0, [pc, #96]	; (800d690 <LL_PLL_ConfigSystemClock_HSI+0x70>)
 800d630:	4621      	mov	r1, r4
 800d632:	f008 fbf6 	bl	8015e22 <UTILS_GetPLLOutputFrequency>
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 800d636:	686b      	ldr	r3, [r5, #4]
 800d638:	4a16      	ldr	r2, [pc, #88]	; (800d694 <LL_PLL_ConfigSystemClock_HSI+0x74>)
 800d63a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (hclk2freq > UTILS_HCLK2_MAX)
 800d642:	4a15      	ldr	r2, [pc, #84]	; (800d698 <LL_PLL_ConfigSystemClock_HSI+0x78>)
    hclk2freq = __LL_RCC_CALC_HCLK2_FREQ(pllrfreq, UTILS_ClkInitStruct->CPU2CLKDivider);
 800d644:	fbb0 f3f3 	udiv	r3, r0, r3
    if (hclk2freq > UTILS_HCLK2_MAX)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d81f      	bhi.n	800d68c <LL_PLL_ConfigSystemClock_HSI+0x6c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d64c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	0551      	lsls	r1, r2, #21
 800d654:	d406      	bmi.n	800d664 <LL_PLL_ConfigSystemClock_HSI+0x44>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d65c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	0552      	lsls	r2, r2, #21
 800d662:	d5fc      	bpl.n	800d65e <LL_PLL_ConfigSystemClock_HSI+0x3e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800d664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d668:	4b0c      	ldr	r3, [pc, #48]	; (800d69c <LL_PLL_ConfigSystemClock_HSI+0x7c>)
 800d66a:	68d6      	ldr	r6, [r2, #12]
 800d66c:	6861      	ldr	r1, [r4, #4]
 800d66e:	4033      	ands	r3, r6
 800d670:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d674:	6821      	ldr	r1, [r4, #0]
 800d676:	430b      	orrs	r3, r1
 800d678:	68a1      	ldr	r1, [r4, #8]
 800d67a:	430b      	orrs	r3, r1
 800d67c:	f043 0302 	orr.w	r3, r3, #2
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 800d680:	4629      	mov	r1, r5
 800d682:	60d3      	str	r3, [r2, #12]
}
 800d684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      status = UTILS_EnablePLLAndSwitchSystem(pllrfreq, UTILS_ClkInitStruct);
 800d688:	f7ff bf4e 	b.w	800d528 <UTILS_EnablePLLAndSwitchSystem>
}
 800d68c:	2000      	movs	r0, #0
 800d68e:	bd70      	pop	{r4, r5, r6, pc}
 800d690:	00f42400 	.word	0x00f42400
 800d694:	08017758 	.word	0x08017758
 800d698:	02dc6c00 	.word	0x02dc6c00
 800d69c:	1fff808c 	.word	0x1fff808c

0800d6a0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800d6a0:	4b0e      	ldr	r3, [pc, #56]	; (800d6dc <z_sys_init_run_level+0x3c>)
{
 800d6a2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800d6a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800d6ae:	42a6      	cmp	r6, r4
 800d6b0:	d800      	bhi.n	800d6b4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 800d6b4:	e9d4 3500 	ldrd	r3, r5, [r4]
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	4798      	blx	r3
		if (dev != NULL) {
 800d6bc:	b165      	cbz	r5, 800d6d8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
 800d6be:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
 800d6c0:	b130      	cbz	r0, 800d6d0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	bfb8      	it	lt
 800d6c6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800d6c8:	28ff      	cmp	r0, #255	; 0xff
 800d6ca:	bfa8      	it	ge
 800d6cc:	20ff      	movge	r0, #255	; 0xff
 800d6ce:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 800d6d0:	785a      	ldrb	r2, [r3, #1]
 800d6d2:	f042 0201 	orr.w	r2, r2, #1
 800d6d6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800d6d8:	3408      	adds	r4, #8
 800d6da:	e7e8      	b.n	800d6ae <z_sys_init_run_level+0xe>
 800d6dc:	08017798 	.word	0x08017798

0800d6e0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800d6e0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800d6e2:	4605      	mov	r5, r0
 800d6e4:	b910      	cbnz	r0, 800d6ec <z_impl_device_get_binding+0xc>
		return NULL;
 800d6e6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
 800d6ec:	7803      	ldrb	r3, [r0, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d0f9      	beq.n	800d6e6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
 800d6f2:	4c0e      	ldr	r4, [pc, #56]	; (800d72c <z_impl_device_get_binding+0x4c>)
 800d6f4:	4e0e      	ldr	r6, [pc, #56]	; (800d730 <z_impl_device_get_binding+0x50>)
 800d6f6:	42b4      	cmp	r4, r6
 800d6f8:	d108      	bne.n	800d70c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
 800d6fa:	4c0c      	ldr	r4, [pc, #48]	; (800d72c <z_impl_device_get_binding+0x4c>)
 800d6fc:	42b4      	cmp	r4, r6
 800d6fe:	d0f2      	beq.n	800d6e6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800d700:	4620      	mov	r0, r4
 800d702:	f008 fba6 	bl	8015e52 <z_device_is_ready>
 800d706:	b950      	cbnz	r0, 800d71e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
 800d708:	3418      	adds	r4, #24
 800d70a:	e7f7      	b.n	800d6fc <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800d70c:	4620      	mov	r0, r4
 800d70e:	f008 fba0 	bl	8015e52 <z_device_is_ready>
 800d712:	b110      	cbz	r0, 800d71a <z_impl_device_get_binding+0x3a>
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	42ab      	cmp	r3, r5
 800d718:	d0e6      	beq.n	800d6e8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
 800d71a:	3418      	adds	r4, #24
 800d71c:	e7eb      	b.n	800d6f6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800d71e:	6821      	ldr	r1, [r4, #0]
 800d720:	4628      	mov	r0, r5
 800d722:	f7f3 fbf9 	bl	8000f18 <strcmp>
 800d726:	2800      	cmp	r0, #0
 800d728:	d1ee      	bne.n	800d708 <z_impl_device_get_binding+0x28>
 800d72a:	e7dd      	b.n	800d6e8 <z_impl_device_get_binding+0x8>
 800d72c:	08016b00 	.word	0x08016b00
 800d730:	08016cb0 	.word	0x08016cb0

0800d734 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 800d734:	4b01      	ldr	r3, [pc, #4]	; (800d73c <z_impl_z_errno+0x8>)
 800d736:	6898      	ldr	r0, [r3, #8]
}
 800d738:	3064      	adds	r0, #100	; 0x64
 800d73a:	4770      	bx	lr
 800d73c:	200022a4 	.word	0x200022a4

0800d740 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800d740:	b510      	push	{r4, lr}
 800d742:	4604      	mov	r4, r0
 800d744:	b086      	sub	sp, #24
	z_impl_log_panic();
 800d746:	f7f5 fecf 	bl	80034e8 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 800d74a:	4b07      	ldr	r3, [pc, #28]	; (800d768 <k_sys_fatal_error_handler+0x28>)
 800d74c:	9304      	str	r3, [sp, #16]
 800d74e:	2302      	movs	r3, #2
 800d750:	9303      	str	r3, [sp, #12]
 800d752:	4806      	ldr	r0, [pc, #24]	; (800d76c <k_sys_fatal_error_handler+0x2c>)
 800d754:	2300      	movs	r3, #0
 800d756:	aa03      	add	r2, sp, #12
 800d758:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d75c:	f003 fe95 	bl	801148a <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800d760:	4620      	mov	r0, r4
 800d762:	f008 fb90 	bl	8015e86 <arch_system_halt>
 800d766:	bf00      	nop
 800d768:	08019469 	.word	0x08019469
 800d76c:	08016f28 	.word	0x08016f28

0800d770 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800d770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d774:	4605      	mov	r5, r0
 800d776:	b08c      	sub	sp, #48	; 0x30
 800d778:	460f      	mov	r7, r1
	__asm__ volatile(
 800d77a:	f04f 0310 	mov.w	r3, #16
 800d77e:	f3ef 8811 	mrs	r8, BASEPRI
 800d782:	f383 8812 	msr	BASEPRI_MAX, r3
 800d786:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800d78a:	f000 ff2b 	bl	800e5e4 <z_impl_z_current_get>
 800d78e:	2d04      	cmp	r5, #4
 800d790:	bf96      	itet	ls
 800d792:	4b22      	ldrls	r3, [pc, #136]	; (800d81c <z_fatal_error+0xac>)
 800d794:	4b22      	ldrhi	r3, [pc, #136]	; (800d820 <z_fatal_error+0xb0>)
 800d796:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800d79a:	4922      	ldr	r1, [pc, #136]	; (800d824 <z_fatal_error+0xb4>)
 800d79c:	9503      	str	r5, [sp, #12]
 800d79e:	2600      	movs	r6, #0
 800d7a0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 800d7a4:	4b20      	ldr	r3, [pc, #128]	; (800d828 <z_fatal_error+0xb8>)
 800d7a6:	9600      	str	r6, [sp, #0]
 800d7a8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800d7ac:	4604      	mov	r4, r0
 800d7ae:	4633      	mov	r3, r6
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f008 fb57 	bl	8015e66 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800d7b8:	b177      	cbz	r7, 800d7d8 <z_fatal_error+0x68>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c0:	b153      	cbz	r3, 800d7d8 <z_fatal_error+0x68>
		LOG_ERR("Fault during interrupt handling\n");
 800d7c2:	4b1a      	ldr	r3, [pc, #104]	; (800d82c <z_fatal_error+0xbc>)
 800d7c4:	930a      	str	r3, [sp, #40]	; 0x28
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ca:	4816      	ldr	r0, [pc, #88]	; (800d824 <z_fatal_error+0xb4>)
 800d7cc:	4633      	mov	r3, r6
 800d7ce:	aa09      	add	r2, sp, #36	; 0x24
 800d7d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800d7d4:	f003 fe59 	bl	801148a <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800d7d8:	b12c      	cbz	r4, 800d7e6 <z_fatal_error+0x76>
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f008 fb92 	bl	8015f04 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800d7e0:	b108      	cbz	r0, 800d7e6 <z_fatal_error+0x76>
 800d7e2:	7803      	ldrb	r3, [r0, #0]
 800d7e4:	b903      	cbnz	r3, 800d7e8 <z_fatal_error+0x78>
		thread_name = "unknown";
 800d7e6:	4812      	ldr	r0, [pc, #72]	; (800d830 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800d7e8:	4b12      	ldr	r3, [pc, #72]	; (800d834 <z_fatal_error+0xc4>)
 800d7ea:	9302      	str	r3, [sp, #8]
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	e9cd 4003 	strd	r4, r0, [sp, #12]
 800d7f2:	e9cd 3300 	strd	r3, r3, [sp]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	490a      	ldr	r1, [pc, #40]	; (800d824 <z_fatal_error+0xb4>)
 800d7fc:	f008 fb33 	bl	8015e66 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800d800:	4639      	mov	r1, r7
 800d802:	4628      	mov	r0, r5
 800d804:	f7ff ff9c 	bl	800d740 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800d808:	f388 8811 	msr	BASEPRI, r8
 800d80c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800d810:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800d812:	b00c      	add	sp, #48	; 0x30
 800d814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d818:	f7f6 bdf0 	b.w	80043fc <z_impl_k_thread_abort>
 800d81c:	080177b0 	.word	0x080177b0
 800d820:	080187ad 	.word	0x080187ad
 800d824:	08016f28 	.word	0x08016f28
 800d828:	08019478 	.word	0x08019478
 800d82c:	080194a0 	.word	0x080194a0
 800d830:	08018618 	.word	0x08018618
 800d834:	080194c1 	.word	0x080194c1

0800d838 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800d838:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800d83a:	4b0a      	ldr	r3, [pc, #40]	; (800d864 <bg_thread_main+0x2c>)
 800d83c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800d83e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 800d840:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800d842:	f7ff ff2d 	bl	800d6a0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800d846:	f001 f9d3 	bl	800ebf0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800d84a:	2003      	movs	r0, #3
 800d84c:	f7ff ff28 	bl	800d6a0 <z_sys_init_run_level>

	z_init_static_threads();
 800d850:	f000 f96a 	bl	800db28 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 800d854:	f7f3 fd78 	bl	8001348 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800d858:	4a03      	ldr	r2, [pc, #12]	; (800d868 <bg_thread_main+0x30>)
 800d85a:	7b13      	ldrb	r3, [r2, #12]
 800d85c:	f023 0301 	bic.w	r3, r3, #1
 800d860:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800d862:	bd08      	pop	{r3, pc}
 800d864:	20002451 	.word	0x20002451
 800d868:	20000bf0 	.word	0x20000bf0

0800d86c <z_bss_zero>:
{
 800d86c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 800d86e:	4803      	ldr	r0, [pc, #12]	; (800d87c <z_bss_zero+0x10>)
 800d870:	4a03      	ldr	r2, [pc, #12]	; (800d880 <z_bss_zero+0x14>)
 800d872:	2100      	movs	r1, #0
 800d874:	1a12      	subs	r2, r2, r0
 800d876:	f008 fb0f 	bl	8015e98 <z_early_memset>
}
 800d87a:	bd08      	pop	{r3, pc}
 800d87c:	20000420 	.word	0x20000420
 800d880:	20002468 	.word	0x20002468

0800d884 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 800d884:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 800d886:	2300      	movs	r3, #0
{
 800d888:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 800d88a:	2201      	movs	r2, #1
 800d88c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 800d890:	4e13      	ldr	r6, [pc, #76]	; (800d8e0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800d892:	4d14      	ldr	r5, [pc, #80]	; (800d8e4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	220f      	movs	r2, #15
 800d898:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d89c:	4912      	ldr	r1, [pc, #72]	; (800d8e8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800d89e:	2318      	movs	r3, #24
 800d8a0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 800d8a4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 800d8a8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 800d8aa:	f44f 7090 	mov.w	r0, #288	; 0x120
 800d8ae:	fb00 1104 	mla	r1, r0, r4, r1
 800d8b2:	4b0e      	ldr	r3, [pc, #56]	; (800d8ec <z_init_cpu+0x68>)
 800d8b4:	9500      	str	r5, [sp, #0]
 800d8b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	f000 f8d6 	bl	800da6c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800d8c0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800d8c2:	480b      	ldr	r0, [pc, #44]	; (800d8f0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
 800d8c4:	752c      	strb	r4, [r5, #20]
 800d8c6:	f023 0304 	bic.w	r3, r3, #4
 800d8ca:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800d8cc:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800d8d0:	fb03 0404 	mla	r4, r3, r4, r0
 800d8d4:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 800d8d6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 800d8d8:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 800d8da:	b006      	add	sp, #24
 800d8dc:	bd70      	pop	{r4, r5, r6, pc}
 800d8de:	bf00      	nop
 800d8e0:	20000b70 	.word	0x20000b70
 800d8e4:	200022a4 	.word	0x200022a4
 800d8e8:	20009020 	.word	0x20009020
 800d8ec:	08015f0d 	.word	0x08015f0d
 800d8f0:	20009140 	.word	0x20009140

0800d8f4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800d8f4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800d8f6:	4b2e      	ldr	r3, [pc, #184]	; (800d9b0 <z_cstart+0xbc>)
 800d8f8:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800d8fa:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800d8fe:	4d2d      	ldr	r5, [pc, #180]	; (800d9b4 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 800d900:	4e2d      	ldr	r6, [pc, #180]	; (800d9b8 <z_cstart+0xc4>)
 800d902:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800d904:	4f2d      	ldr	r7, [pc, #180]	; (800d9bc <z_cstart+0xc8>)
 800d906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d90a:	616b      	str	r3, [r5, #20]
 800d90c:	2400      	movs	r4, #0
 800d90e:	23f0      	movs	r3, #240	; 0xf0
 800d910:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 800d914:	77ec      	strb	r4, [r5, #31]
 800d916:	762c      	strb	r4, [r5, #24]
 800d918:	766c      	strb	r4, [r5, #25]
 800d91a:	76ac      	strb	r4, [r5, #26]
 800d91c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800d920:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d922:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d926:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800d928:	f7f6 fd34 	bl	8004394 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800d92c:	f7f6 f90e 	bl	8003b4c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800d930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d934:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800d936:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
 800d938:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800d93a:	f7f6 fe1f 	bl	800457c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800d93e:	f7f6 fd6f 	bl	8004420 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800d942:	f7f5 fcdb 	bl	80032fc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800d946:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
 800d94a:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
 800d94c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
 800d950:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
 800d954:	f001 f946 	bl	800ebe4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
 800d958:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800d95a:	f008 fa79 	bl	8015e50 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800d95e:	4620      	mov	r0, r4
 800d960:	f7ff fe9e 	bl	800d6a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800d964:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
 800d966:	4d16      	ldr	r5, [pc, #88]	; (800d9c0 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800d968:	f7ff fe9a 	bl	800d6a0 <z_sys_init_run_level>
	z_sched_init();
 800d96c:	f000 fd8e 	bl	800e48c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800d970:	4b14      	ldr	r3, [pc, #80]	; (800d9c4 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 800d972:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800d974:	9305      	str	r3, [sp, #20]
 800d976:	2301      	movs	r3, #1
 800d978:	4913      	ldr	r1, [pc, #76]	; (800d9c8 <z_cstart+0xd4>)
 800d97a:	9400      	str	r4, [sp, #0]
 800d97c:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800d980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d984:	463b      	mov	r3, r7
 800d986:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800d98a:	4628      	mov	r0, r5
 800d98c:	f000 f86e 	bl	800da6c <z_setup_new_thread>
 800d990:	7b6a      	ldrb	r2, [r5, #13]
 800d992:	4606      	mov	r6, r0
 800d994:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 800d998:	4628      	mov	r0, r5
 800d99a:	736a      	strb	r2, [r5, #13]
 800d99c:	f008 fb74 	bl	8016088 <z_ready_thread>
	z_init_cpu(0);
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f7ff ff6f 	bl	800d884 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800d9a6:	463a      	mov	r2, r7
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	f7f6 fa1e 	bl	8003dec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800d9b0:	20009960 	.word	0x20009960
 800d9b4:	e000ed00 	.word	0xe000ed00
 800d9b8:	200022a4 	.word	0x200022a4
 800d9bc:	0800d839 	.word	0x0800d839
 800d9c0:	20000bf0 	.word	0x20000bf0
 800d9c4:	08017b96 	.word	0x08017b96
 800d9c8:	20008800 	.word	0x20008800

0800d9cc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800d9cc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800d9ce:	4b0e      	ldr	r3, [pc, #56]	; (800da08 <init_mem_slab_module+0x3c>)
 800d9d0:	4c0e      	ldr	r4, [pc, #56]	; (800da0c <init_mem_slab_module+0x40>)
 800d9d2:	42a3      	cmp	r3, r4
 800d9d4:	d301      	bcc.n	800d9da <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
 800d9d6:	2000      	movs	r0, #0
	return rc;
}
 800d9d8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800d9da:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 800d9de:	ea41 0200 	orr.w	r2, r1, r0
 800d9e2:	f012 0203 	ands.w	r2, r2, #3
 800d9e6:	d10b      	bne.n	800da00 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 800d9e8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 800d9ea:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 800d9ec:	42aa      	cmp	r2, r5
 800d9ee:	d101      	bne.n	800d9f4 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800d9f0:	331c      	adds	r3, #28
 800d9f2:	e7ee      	b.n	800d9d2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 800d9f4:	695e      	ldr	r6, [r3, #20]
 800d9f6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 800d9f8:	3201      	adds	r2, #1
		slab->free_list = p;
 800d9fa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
 800d9fc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 800d9fe:	e7f5      	b.n	800d9ec <init_mem_slab_module+0x20>
	return rc;
 800da00:	f06f 0015 	mvn.w	r0, #21
 800da04:	e7e8      	b.n	800d9d8 <init_mem_slab_module+0xc>
 800da06:	bf00      	nop
 800da08:	20000348 	.word	0x20000348
 800da0c:	20000380 	.word	0x20000380

0800da10 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 800da10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da12:	460c      	mov	r4, r1
	__asm__ volatile(
 800da14:	f04f 0510 	mov.w	r5, #16
 800da18:	f3ef 8111 	mrs	r1, BASEPRI
 800da1c:	f385 8812 	msr	BASEPRI_MAX, r5
 800da20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 800da24:	6945      	ldr	r5, [r0, #20]
 800da26:	b15d      	cbz	r5, 800da40 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
 800da28:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 800da2a:	682b      	ldr	r3, [r5, #0]
 800da2c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 800da2e:	6983      	ldr	r3, [r0, #24]
 800da30:	3301      	adds	r3, #1
 800da32:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 800da34:	2000      	movs	r0, #0
	__asm__ volatile(
 800da36:	f381 8811 	msr	BASEPRI, r1
 800da3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
 800da3e:	e011      	b.n	800da64 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 800da40:	ea52 0c03 	orrs.w	ip, r2, r3
 800da44:	d103      	bne.n	800da4e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
 800da46:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
 800da48:	f06f 000b 	mvn.w	r0, #11
 800da4c:	e7f3      	b.n	800da36 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 800da4e:	e9cd 2300 	strd	r2, r3, [sp]
 800da52:	4602      	mov	r2, r0
 800da54:	3008      	adds	r0, #8
 800da56:	f000 fc6f 	bl	800e338 <z_pend_curr>
		if (result == 0) {
 800da5a:	b918      	cbnz	r0, 800da64 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <k_mem_slab_alloc+0x58>)
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	695b      	ldr	r3, [r3, #20]
 800da62:	6023      	str	r3, [r4, #0]
}
 800da64:	b003      	add	sp, #12
 800da66:	bd30      	pop	{r4, r5, pc}
 800da68:	200022a4 	.word	0x200022a4

0800da6c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800da6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 800da70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800da72:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800da74:	2604      	movs	r6, #4
 800da76:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 800da78:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800da7a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800da7c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 800da80:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800da82:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
 800da84:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800da88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 800da8a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800da8c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800da90:	3720      	adds	r7, #32
	node->prev = NULL;
 800da92:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 800da96:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
 800da9a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 800da9c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800da9e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800daa0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800daa4:	9202      	str	r2, [sp, #8]
 800daa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daa8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800daaa:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800daac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daae:	9200      	str	r2, [sp, #0]
 800dab0:	4642      	mov	r2, r8
{
 800dab2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800dab4:	f7f6 f968 	bl	8003d88 <arch_new_thread>
	if (!_current) {
 800dab8:	4b04      	ldr	r3, [pc, #16]	; (800dacc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 800daba:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	b103      	cbz	r3, 800dac2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 800dac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800dac2:	6763      	str	r3, [r4, #116]	; 0x74
}
 800dac4:	4640      	mov	r0, r8
 800dac6:	b004      	add	sp, #16
 800dac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dacc:	200022a4 	.word	0x200022a4

0800dad0 <z_impl_k_thread_create>:
{
 800dad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dad2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800dad4:	2700      	movs	r7, #0
 800dad6:	9705      	str	r7, [sp, #20]
 800dad8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800dada:	9704      	str	r7, [sp, #16]
 800dadc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800dade:	9703      	str	r7, [sp, #12]
 800dae0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800dae2:	9702      	str	r7, [sp, #8]
{
 800dae4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800dae8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800daea:	9701      	str	r7, [sp, #4]
 800daec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800daee:	9700      	str	r7, [sp, #0]
{
 800daf0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800daf2:	f7ff ffbb 	bl	800da6c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800daf6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800dafa:	bf08      	it	eq
 800dafc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800db00:	d005      	beq.n	800db0e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800db02:	ea55 0306 	orrs.w	r3, r5, r6
 800db06:	d105      	bne.n	800db14 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 fbb9 	bl	800e280 <z_sched_start>
}
 800db0e:	4620      	mov	r0, r4
 800db10:	b007      	add	sp, #28
 800db12:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800db14:	4903      	ldr	r1, [pc, #12]	; (800db24 <z_impl_k_thread_create+0x54>)
 800db16:	4632      	mov	r2, r6
 800db18:	462b      	mov	r3, r5
 800db1a:	f104 0018 	add.w	r0, r4, #24
 800db1e:	f000 fe3f 	bl	800e7a0 <z_add_timeout>
 800db22:	e7f4      	b.n	800db0e <z_impl_k_thread_create+0x3e>
 800db24:	080160a9 	.word	0x080160a9

0800db28 <z_init_static_threads>:
{
 800db28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2a:	4c22      	ldr	r4, [pc, #136]	; (800dbb4 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 800db2c:	4d22      	ldr	r5, [pc, #136]	; (800dbb8 <z_init_static_threads+0x90>)
{
 800db2e:	b087      	sub	sp, #28
 800db30:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 800db32:	42ae      	cmp	r6, r5
 800db34:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800db38:	d30b      	bcc.n	800db52 <z_init_static_threads+0x2a>
	k_sched_lock();
 800db3a:	f000 fabb 	bl	800e0b4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800db3e:	4c1d      	ldr	r4, [pc, #116]	; (800dbb4 <z_init_static_threads+0x8c>)
 800db40:	4f1e      	ldr	r7, [pc, #120]	; (800dbbc <z_init_static_threads+0x94>)
 800db42:	260a      	movs	r6, #10
 800db44:	42ac      	cmp	r4, r5
 800db46:	d320      	bcc.n	800db8a <z_init_static_threads+0x62>
}
 800db48:	b007      	add	sp, #28
 800db4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800db4e:	f000 bc81 	b.w	800e454 <k_sched_unlock>
		z_setup_new_thread(
 800db52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800db56:	9305      	str	r3, [sp, #20]
 800db58:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800db5c:	9304      	str	r3, [sp, #16]
 800db5e:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800db62:	9303      	str	r3, [sp, #12]
 800db64:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800db68:	9302      	str	r3, [sp, #8]
 800db6a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800db6e:	9301      	str	r3, [sp, #4]
 800db70:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800db7a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800db7e:	f7ff ff75 	bl	800da6c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800db82:	f854 3c30 	ldr.w	r3, [r4, #-48]
 800db86:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800db88:	e7d2      	b.n	800db30 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800db8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db8c:	1c53      	adds	r3, r2, #1
 800db8e:	d009      	beq.n	800dba4 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800db90:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800db94:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800db98:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800db9c:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800db9e:	d103      	bne.n	800dba8 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800dba0:	f000 fb6e 	bl	800e280 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800dba4:	3430      	adds	r4, #48	; 0x30
 800dba6:	e7cd      	b.n	800db44 <z_init_static_threads+0x1c>
 800dba8:	4639      	mov	r1, r7
 800dbaa:	3018      	adds	r0, #24
 800dbac:	f000 fdf8 	bl	800e7a0 <z_add_timeout>
 800dbb0:	e7f8      	b.n	800dba4 <z_init_static_threads+0x7c>
 800dbb2:	bf00      	nop
 800dbb4:	2000030c 	.word	0x2000030c
 800dbb8:	2000030c 	.word	0x2000030c
 800dbbc:	080160a9 	.word	0x080160a9

0800dbc0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800dbc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	4617      	mov	r7, r2
 800dbc8:	461e      	mov	r6, r3
	__asm__ volatile(
 800dbca:	f04f 0310 	mov.w	r3, #16
 800dbce:	f3ef 8811 	mrs	r8, BASEPRI
 800dbd2:	f383 8812 	msr	BASEPRI_MAX, r3
 800dbd6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800dbda:	68c3      	ldr	r3, [r0, #12]
 800dbdc:	4a32      	ldr	r2, [pc, #200]	; (800dca8 <z_impl_k_mutex_lock+0xe8>)
 800dbde:	b16b      	cbz	r3, 800dbfc <z_impl_k_mutex_lock+0x3c>
 800dbe0:	6880      	ldr	r0, [r0, #8]
 800dbe2:	6891      	ldr	r1, [r2, #8]
 800dbe4:	4288      	cmp	r0, r1
 800dbe6:	d019      	beq.n	800dc1c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800dbe8:	ea57 0306 	orrs.w	r3, r7, r6
 800dbec:	d118      	bne.n	800dc20 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 800dbee:	f388 8811 	msr	BASEPRI, r8
 800dbf2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 800dbf6:	f06f 000f 	mvn.w	r0, #15
 800dbfa:	e00c      	b.n	800dc16 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 800dbfc:	6891      	ldr	r1, [r2, #8]
 800dbfe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800dc02:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 800dc04:	3301      	adds	r3, #1
 800dc06:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 800dc08:	6893      	ldr	r3, [r2, #8]
 800dc0a:	60a3      	str	r3, [r4, #8]
 800dc0c:	f388 8811 	msr	BASEPRI, r8
 800dc10:	f3bf 8f6f 	isb	sy
		return 0;
 800dc14:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800dc16:	b002      	add	sp, #8
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 800dc1c:	6921      	ldr	r1, [r4, #16]
 800dc1e:	e7f0      	b.n	800dc02 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800dc20:	f991 100e 	ldrsb.w	r1, [r1, #14]
 800dc24:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 800dc28:	4299      	cmp	r1, r3
 800dc2a:	bfa8      	it	ge
 800dc2c:	4619      	movge	r1, r3
 800dc2e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 800dc32:	4291      	cmp	r1, r2
 800dc34:	bfb8      	it	lt
 800dc36:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800dc38:	428b      	cmp	r3, r1
 800dc3a:	dd2e      	ble.n	800dc9a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 800dc3c:	f008 f972 	bl	8015f24 <adjust_owner_prio.isra.0>
 800dc40:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800dc42:	e9cd 7600 	strd	r7, r6, [sp]
 800dc46:	4819      	ldr	r0, [pc, #100]	; (800dcac <z_impl_k_mutex_lock+0xec>)
 800dc48:	4622      	mov	r2, r4
 800dc4a:	4641      	mov	r1, r8
 800dc4c:	f000 fb74 	bl	800e338 <z_pend_curr>
	if (got_mutex == 0) {
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d0e0      	beq.n	800dc16 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 800dc54:	f04f 0310 	mov.w	r3, #16
 800dc58:	f3ef 8611 	mrs	r6, BASEPRI
 800dc5c:	f383 8812 	msr	BASEPRI_MAX, r3
 800dc60:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800dc64:	6823      	ldr	r3, [r4, #0]
 800dc66:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800dc68:	429c      	cmp	r4, r3
 800dc6a:	d00a      	beq.n	800dc82 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800dc6c:	b14b      	cbz	r3, 800dc82 <z_impl_k_mutex_lock+0xc2>
 800dc6e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800dc72:	4299      	cmp	r1, r3
 800dc74:	bfa8      	it	ge
 800dc76:	4619      	movge	r1, r3
 800dc78:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800dc7c:	4299      	cmp	r1, r3
 800dc7e:	bfb8      	it	lt
 800dc80:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800dc82:	68a0      	ldr	r0, [r4, #8]
 800dc84:	f008 f94e 	bl	8015f24 <adjust_owner_prio.isra.0>
 800dc88:	b900      	cbnz	r0, 800dc8c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
 800dc8a:	b145      	cbz	r5, 800dc9e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 800dc8c:	4807      	ldr	r0, [pc, #28]	; (800dcac <z_impl_k_mutex_lock+0xec>)
 800dc8e:	4631      	mov	r1, r6
 800dc90:	f000 f9fe 	bl	800e090 <z_reschedule>
	return -EAGAIN;
 800dc94:	f06f 000a 	mvn.w	r0, #10
 800dc98:	e7bd      	b.n	800dc16 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 800dc9a:	2500      	movs	r5, #0
 800dc9c:	e7d1      	b.n	800dc42 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
 800dc9e:	f386 8811 	msr	BASEPRI, r6
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	e7f5      	b.n	800dc94 <z_impl_k_mutex_lock+0xd4>
 800dca8:	200022a4 	.word	0x200022a4
 800dcac:	20002452 	.word	0x20002452

0800dcb0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 800dcb0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800dcb2:	6883      	ldr	r3, [r0, #8]
{
 800dcb4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d032      	beq.n	800dd20 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800dcba:	4a1c      	ldr	r2, [pc, #112]	; (800dd2c <z_impl_k_mutex_unlock+0x7c>)
 800dcbc:	6892      	ldr	r2, [r2, #8]
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d131      	bne.n	800dd26 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800dcc2:	7bda      	ldrb	r2, [r3, #15]
 800dcc4:	3a01      	subs	r2, #1
 800dcc6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800dcc8:	68c3      	ldr	r3, [r0, #12]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d905      	bls.n	800dcda <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800dcd2:	f000 fbbf 	bl	800e454 <k_sched_unlock>

	return 0;
 800dcd6:	2000      	movs	r0, #0
}
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800dcda:	f04f 0310 	mov.w	r3, #16
 800dcde:	f3ef 8511 	mrs	r5, BASEPRI
 800dce2:	f383 8812 	msr	BASEPRI_MAX, r3
 800dce6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800dcea:	6901      	ldr	r1, [r0, #16]
 800dcec:	6880      	ldr	r0, [r0, #8]
 800dcee:	f008 f919 	bl	8015f24 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f008 fa39 	bl	801616a <z_unpend_first_thread>
	mutex->owner = new_owner;
 800dcf8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800dcfa:	b158      	cbz	r0, 800dd14 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
 800dcfc:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800dd00:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800dd02:	2200      	movs	r2, #0
 800dd04:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800dd06:	f008 f9bf 	bl	8016088 <z_ready_thread>
		z_reschedule(&lock, key);
 800dd0a:	4809      	ldr	r0, [pc, #36]	; (800dd30 <z_impl_k_mutex_unlock+0x80>)
 800dd0c:	4629      	mov	r1, r5
 800dd0e:	f000 f9bf 	bl	800e090 <z_reschedule>
 800dd12:	e7de      	b.n	800dcd2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800dd14:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800dd16:	f385 8811 	msr	BASEPRI, r5
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	e7d8      	b.n	800dcd2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800dd20:	f06f 0015 	mvn.w	r0, #21
 800dd24:	e7d8      	b.n	800dcd8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 800dd26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd2a:	e7d5      	b.n	800dcd8 <z_impl_k_mutex_unlock+0x28>
 800dd2c:	200022a4 	.word	0x200022a4
 800dd30:	20002452 	.word	0x20002452

0800dd34 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800dd34:	b538      	push	{r3, r4, r5, lr}
 800dd36:	4604      	mov	r4, r0
	__asm__ volatile(
 800dd38:	f04f 0310 	mov.w	r3, #16
 800dd3c:	f3ef 8511 	mrs	r5, BASEPRI
 800dd40:	f383 8812 	msr	BASEPRI_MAX, r3
 800dd44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800dd48:	f008 fa0f 	bl	801616a <z_unpend_first_thread>

	if (thread != NULL) {
 800dd4c:	b148      	cbz	r0, 800dd62 <z_impl_k_sem_give+0x2e>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800dd52:	f008 f999 	bl	8016088 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800dd56:	4629      	mov	r1, r5
 800dd58:	4808      	ldr	r0, [pc, #32]	; (800dd7c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800dd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800dd5e:	f000 b997 	b.w	800e090 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800dd62:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	bf18      	it	ne
 800dd6a:	3301      	addne	r3, #1
 800dd6c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800dd6e:	2102      	movs	r1, #2
 800dd70:	f104 0010 	add.w	r0, r4, #16
 800dd74:	f008 fbcd 	bl	8016512 <z_handle_obj_poll_events>
}
 800dd78:	e7ed      	b.n	800dd56 <z_impl_k_sem_give+0x22>
 800dd7a:	bf00      	nop
 800dd7c:	20002452 	.word	0x20002452

0800dd80 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800dd80:	b513      	push	{r0, r1, r4, lr}
 800dd82:	f04f 0410 	mov.w	r4, #16
 800dd86:	f3ef 8111 	mrs	r1, BASEPRI
 800dd8a:	f384 8812 	msr	BASEPRI_MAX, r4
 800dd8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800dd92:	6884      	ldr	r4, [r0, #8]
 800dd94:	b144      	cbz	r4, 800dda8 <z_impl_k_sem_take+0x28>
		sem->count--;
 800dd96:	3c01      	subs	r4, #1
 800dd98:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800dd9a:	f381 8811 	msr	BASEPRI, r1
 800dd9e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800dda2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800dda4:	b002      	add	sp, #8
 800dda6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800dda8:	ea52 0403 	orrs.w	r4, r2, r3
 800ddac:	d106      	bne.n	800ddbc <z_impl_k_sem_take+0x3c>
 800ddae:	f381 8811 	msr	BASEPRI, r1
 800ddb2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800ddb6:	f06f 000f 	mvn.w	r0, #15
 800ddba:	e7f3      	b.n	800dda4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800ddbc:	e9cd 2300 	strd	r2, r3, [sp]
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	4802      	ldr	r0, [pc, #8]	; (800ddcc <z_impl_k_sem_take+0x4c>)
 800ddc4:	f000 fab8 	bl	800e338 <z_pend_curr>
	return ret;
 800ddc8:	e7ec      	b.n	800dda4 <z_impl_k_sem_take+0x24>
 800ddca:	bf00      	nop
 800ddcc:	20002452 	.word	0x20002452

0800ddd0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
 800ddd4:	4e47      	ldr	r6, [pc, #284]	; (800def4 <work_queue_main+0x124>)
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 800ddda:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ddde:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
 800dde2:	f04f 0310 	mov.w	r3, #16
 800dde6:	f3ef 8711 	mrs	r7, BASEPRI
 800ddea:	f383 8812 	msr	BASEPRI_MAX, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 800ddf6:	b98d      	cbnz	r5, 800de1c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 800ddf8:	2102      	movs	r1, #2
 800ddfa:	f104 0098 	add.w	r0, r4, #152	; 0x98
 800ddfe:	f008 f8b0 	bl	8015f62 <flag_test_and_clear>
 800de02:	2800      	cmp	r0, #0
 800de04:	d135      	bne.n	800de72 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800de06:	2300      	movs	r3, #0
 800de08:	e9cd 8900 	strd	r8, r9, [sp]
 800de0c:	9302      	str	r3, [sp, #8]
 800de0e:	f104 0288 	add.w	r2, r4, #136	; 0x88
 800de12:	4639      	mov	r1, r7
 800de14:	4838      	ldr	r0, [pc, #224]	; (800def8 <work_queue_main+0x128>)
 800de16:	f000 fc4d 	bl	800e6b4 <z_sched_wait>
			continue;
 800de1a:	e7e2      	b.n	800dde2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800de1c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 800de20:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 800de22:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800de26:	4295      	cmp	r5, r2
 800de28:	d101      	bne.n	800de2e <work_queue_main+0x5e>
	list->tail = node;
 800de2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 800de2e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800de32:	f043 0302 	orr.w	r3, r3, #2
 800de36:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800de3a:	68eb      	ldr	r3, [r5, #12]
 800de3c:	f023 0304 	bic.w	r3, r3, #4
 800de40:	f043 0301 	orr.w	r3, r3, #1
 800de44:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 800de46:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 800de48:	f387 8811 	msr	BASEPRI, r7
 800de4c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 800de50:	4628      	mov	r0, r5
 800de52:	4798      	blx	r3
	__asm__ volatile(
 800de54:	f04f 0310 	mov.w	r3, #16
 800de58:	f3ef 8b11 	mrs	fp, BASEPRI
 800de5c:	f383 8812 	msr	BASEPRI_MAX, r3
 800de60:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800de64:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800de66:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 800de68:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800de6c:	d40b      	bmi.n	800de86 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
 800de6e:	60ea      	str	r2, [r5, #12]
 800de70:	e00e      	b.n	800de90 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800de72:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800de76:	2200      	movs	r2, #0
 800de78:	2101      	movs	r1, #1
 800de7a:	4628      	mov	r0, r5
 800de7c:	f008 f99e 	bl	80161bc <z_sched_wake>
 800de80:	2800      	cmp	r0, #0
 800de82:	d1f8      	bne.n	800de76 <work_queue_main+0xa6>
 800de84:	e7bf      	b.n	800de06 <work_queue_main+0x36>
	return list->head;
 800de86:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 800de88:	f023 0303 	bic.w	r3, r3, #3
 800de8c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800de8e:	b970      	cbnz	r0, 800deae <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
 800de90:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800de94:	f023 0302 	bic.w	r3, r3, #2
 800de98:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
 800de9c:	f38b 8811 	msr	BASEPRI, fp
 800dea0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 800dea4:	05d8      	lsls	r0, r3, #23
 800dea6:	d49c      	bmi.n	800dde2 <work_queue_main+0x12>
	z_impl_k_yield();
 800dea8:	f000 fafc 	bl	800e4a4 <z_impl_k_yield>
}
 800deac:	e799      	b.n	800dde2 <work_queue_main+0x12>
	return node->next;
 800deae:	2700      	movs	r7, #0
 800deb0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
 800deb4:	463b      	mov	r3, r7
		if (wc->work == work) {
 800deb6:	6842      	ldr	r2, [r0, #4]
 800deb8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800deba:	4601      	mov	r1, r0
		if (wc->work == work) {
 800debc:	d10c      	bne.n	800ded8 <work_queue_main+0x108>
	return node->next;
 800debe:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800dec0:	b997      	cbnz	r7, 800dee8 <work_queue_main+0x118>
 800dec2:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 800dec4:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 800dec6:	4282      	cmp	r2, r0
 800dec8:	d100      	bne.n	800decc <work_queue_main+0xfc>
	list->tail = node;
 800deca:	6071      	str	r1, [r6, #4]
	parent->next = child;
 800decc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 800ded0:	f7ff ff30 	bl	800dd34 <z_impl_k_sem_give>
}
 800ded4:	4639      	mov	r1, r7
 800ded6:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800ded8:	f1ba 0f00 	cmp.w	sl, #0
 800dedc:	d0d8      	beq.n	800de90 <work_queue_main+0xc0>
	return node->next;
 800dede:	4650      	mov	r0, sl
 800dee0:	460f      	mov	r7, r1
 800dee2:	f8da a000 	ldr.w	sl, [sl]
 800dee6:	e7e6      	b.n	800deb6 <work_queue_main+0xe6>
	return list->tail;
 800dee8:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
 800deea:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 800deec:	4282      	cmp	r2, r0
	list->tail = node;
 800deee:	bf08      	it	eq
 800def0:	6077      	streq	r7, [r6, #4]
}
 800def2:	e7eb      	b.n	800decc <work_queue_main+0xfc>
 800def4:	200022c8 	.word	0x200022c8
 800def8:	20002452 	.word	0x20002452

0800defc <submit_to_queue_locked>:
{
 800defc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 800defe:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800df00:	079a      	lsls	r2, r3, #30
{
 800df02:	4604      	mov	r4, r0
 800df04:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800df06:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800df0a:	d41f      	bmi.n	800df4c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800df0c:	075f      	lsls	r7, r3, #29
 800df0e:	d41f      	bmi.n	800df50 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
 800df10:	680a      	ldr	r2, [r1, #0]
 800df12:	b90a      	cbnz	r2, 800df18 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 800df14:	6882      	ldr	r2, [r0, #8]
 800df16:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800df18:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
 800df1a:	bf44      	itt	mi
 800df1c:	68a3      	ldrmi	r3, [r4, #8]
 800df1e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
 800df20:	6837      	ldr	r7, [r6, #0]
			ret = 2;
 800df22:	bf4c      	ite	mi
 800df24:	2502      	movmi	r5, #2
		ret = 1;
 800df26:	2501      	movpl	r5, #1
	if (queue == NULL) {
 800df28:	b37f      	cbz	r7, 800df8a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800df2a:	4b1b      	ldr	r3, [pc, #108]	; (800df98 <submit_to_queue_locked+0x9c>)
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	42bb      	cmp	r3, r7
 800df30:	d111      	bne.n	800df56 <submit_to_queue_locked+0x5a>
 800df32:	f007 ffde 	bl	8015ef2 <k_is_in_isr>
 800df36:	f080 0001 	eor.w	r0, r0, #1
 800df3a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
 800df3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800df40:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800df42:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800df46:	d523      	bpl.n	800df90 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
 800df48:	b13a      	cbz	r2, 800df5a <submit_to_queue_locked+0x5e>
 800df4a:	b940      	cbnz	r0, 800df5e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 800df4c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
 800df50:	2300      	movs	r3, #0
 800df52:	6033      	str	r3, [r6, #0]
	return ret;
 800df54:	e013      	b.n	800df7e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800df56:	2000      	movs	r0, #0
 800df58:	e7f0      	b.n	800df3c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
 800df5a:	071b      	lsls	r3, r3, #28
 800df5c:	d4f6      	bmi.n	800df4c <submit_to_queue_locked+0x50>
	parent->next = child;
 800df5e:	2300      	movs	r3, #0
 800df60:	6023      	str	r3, [r4, #0]
	return list->tail;
 800df62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 800df66:	b963      	cbnz	r3, 800df82 <submit_to_queue_locked+0x86>
	list->head = node;
 800df68:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
 800df6c:	4638      	mov	r0, r7
 800df6e:	f008 f803 	bl	8015f78 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 800df72:	68e3      	ldr	r3, [r4, #12]
 800df74:	f043 0304 	orr.w	r3, r3, #4
 800df78:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 800df7a:	6833      	ldr	r3, [r6, #0]
 800df7c:	60a3      	str	r3, [r4, #8]
}
 800df7e:	4628      	mov	r0, r5
 800df80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 800df82:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800df84:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
 800df88:	e7f0      	b.n	800df6c <submit_to_queue_locked+0x70>
		return -EINVAL;
 800df8a:	f06f 0515 	mvn.w	r5, #21
 800df8e:	e7df      	b.n	800df50 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
 800df90:	f06f 0512 	mvn.w	r5, #18
 800df94:	e7dc      	b.n	800df50 <submit_to_queue_locked+0x54>
 800df96:	bf00      	nop
 800df98:	200022a4 	.word	0x200022a4

0800df9c <k_work_submit>:
{
 800df9c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800df9e:	4801      	ldr	r0, [pc, #4]	; (800dfa4 <k_work_submit+0x8>)
 800dfa0:	f007 bffa 	b.w	8015f98 <k_work_submit_to_queue>
 800dfa4:	20000c78 	.word	0x20000c78

0800dfa8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 800dfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfaa:	b089      	sub	sp, #36	; 0x24
 800dfac:	4604      	mov	r4, r0
	list->head = NULL;
 800dfae:	2000      	movs	r0, #0
	list->tail = NULL;
 800dfb0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 800dfb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dfb6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 800dfba:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 800dfbe:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800dfc2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800dfc6:	b31d      	cbz	r5, 800e010 <k_work_queue_start+0x68>
 800dfc8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	f240 1001 	movw	r0, #257	; 0x101
 800dfd0:	bf08      	it	eq
 800dfd2:	2001      	moveq	r0, #1
	*flagp = flags;
 800dfd4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800dfd8:	2000      	movs	r0, #0
 800dfda:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800dfde:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dfe2:	e9cd 3003 	strd	r3, r0, [sp, #12]
 800dfe6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800dfea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dfee:	4b09      	ldr	r3, [pc, #36]	; (800e014 <k_work_queue_start+0x6c>)
 800dff0:	9400      	str	r4, [sp, #0]
 800dff2:	4620      	mov	r0, r4
 800dff4:	f7ff fd6c 	bl	800dad0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 800dff8:	b125      	cbz	r5, 800e004 <k_work_queue_start+0x5c>
 800dffa:	6829      	ldr	r1, [r5, #0]
 800dffc:	b111      	cbz	r1, 800e004 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 800dffe:	4620      	mov	r0, r4
 800e000:	f007 ff7d 	bl	8015efe <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800e004:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 800e006:	b009      	add	sp, #36	; 0x24
 800e008:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e00c:	f007 bf7c 	b.w	8015f08 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800e010:	2001      	movs	r0, #1
 800e012:	e7df      	b.n	800dfd4 <k_work_queue_start+0x2c>
 800e014:	0800ddd1 	.word	0x0800ddd1

0800e018 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 800e018:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 800e01a:	4d07      	ldr	r5, [pc, #28]	; (800e038 <z_reset_time_slice+0x20>)
 800e01c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 800e01e:	b154      	cbz	r4, 800e036 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 800e020:	f7fe fb0e 	bl	800c640 <sys_clock_elapsed>
 800e024:	4b05      	ldr	r3, [pc, #20]	; (800e03c <z_reset_time_slice+0x24>)
 800e026:	4404      	add	r4, r0
 800e028:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 800e02a:	6828      	ldr	r0, [r5, #0]
 800e02c:	2100      	movs	r1, #0
	}
}
 800e02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 800e032:	f008 b8f6 	b.w	8016222 <z_set_timeout_expiry>
}
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	200022d8 	.word	0x200022d8
 800e03c:	200022a4 	.word	0x200022a4

0800e040 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 800e040:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e042:	f04f 0310 	mov.w	r3, #16
 800e046:	f3ef 8411 	mrs	r4, BASEPRI
 800e04a:	f383 8812 	msr	BASEPRI_MAX, r3
 800e04e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800e052:	4a0c      	ldr	r2, [pc, #48]	; (800e084 <k_sched_time_slice_set+0x44>)
 800e054:	2300      	movs	r3, #0
 800e056:	6113      	str	r3, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800e058:	2800      	cmp	r0, #0
			return ((uint32_t)t) * (to_hz / from_hz);
 800e05a:	f04f 030a 	mov.w	r3, #10
 800e05e:	fb00 f303 	mul.w	r3, r0, r3
 800e062:	4809      	ldr	r0, [pc, #36]	; (800e088 <k_sched_time_slice_set+0x48>)
 800e064:	dc0a      	bgt.n	800e07c <k_sched_time_slice_set+0x3c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
 800e066:	6003      	str	r3, [r0, #0]
		}
		slice_max_prio = prio;
 800e068:	4b08      	ldr	r3, [pc, #32]	; (800e08c <k_sched_time_slice_set+0x4c>)
		z_reset_time_slice(_current);
 800e06a:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 800e06c:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 800e06e:	f7ff ffd3 	bl	800e018 <z_reset_time_slice>
	__asm__ volatile(
 800e072:	f384 8811 	msr	BASEPRI, r4
 800e076:	f3bf 8f6f 	isb	sy
	}
}
 800e07a:	bd10      	pop	{r4, pc}
			slice_ticks = MAX(2, slice_ticks);
 800e07c:	2b02      	cmp	r3, #2
 800e07e:	bfb8      	it	lt
 800e080:	2302      	movlt	r3, #2
 800e082:	e7f0      	b.n	800e066 <k_sched_time_slice_set+0x26>
 800e084:	200022a4 	.word	0x200022a4
 800e088:	200022d8 	.word	0x200022d8
 800e08c:	200022d4 	.word	0x200022d4

0800e090 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800e090:	b949      	cbnz	r1, 800e0a6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e092:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 800e096:	b930      	cbnz	r0, 800e0a6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 800e098:	4b05      	ldr	r3, [pc, #20]	; (800e0b0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800e09a:	699a      	ldr	r2, [r3, #24]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d001      	beq.n	800e0a6 <z_reschedule+0x16>
	ret = arch_swap(key);
 800e0a2:	f7f5 be1d 	b.w	8003ce0 <arch_swap>
 800e0a6:	f381 8811 	msr	BASEPRI, r1
 800e0aa:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 800e0ae:	4770      	bx	lr
 800e0b0:	200022a4 	.word	0x200022a4

0800e0b4 <k_sched_lock>:
	__asm__ volatile(
 800e0b4:	f04f 0310 	mov.w	r3, #16
 800e0b8:	f3ef 8111 	mrs	r1, BASEPRI
 800e0bc:	f383 8812 	msr	BASEPRI_MAX, r3
 800e0c0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 800e0c4:	4b04      	ldr	r3, [pc, #16]	; (800e0d8 <k_sched_lock+0x24>)
 800e0c6:	689a      	ldr	r2, [r3, #8]
 800e0c8:	7bd3      	ldrb	r3, [r2, #15]
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800e0ce:	f381 8811 	msr	BASEPRI, r1
 800e0d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800e0d6:	4770      	bx	lr
 800e0d8:	200022a4 	.word	0x200022a4

0800e0dc <update_cache>:
{
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
 800e0e0:	480c      	ldr	r0, [pc, #48]	; (800e114 <update_cache+0x38>)
 800e0e2:	4d0d      	ldr	r5, [pc, #52]	; (800e118 <update_cache+0x3c>)
 800e0e4:	f007 ffca 	bl	801607c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	b900      	cbnz	r0, 800e0ee <update_cache+0x12>
 800e0ec:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 800e0ee:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800e0f0:	b94a      	cbnz	r2, 800e106 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
 800e0f2:	7b5a      	ldrb	r2, [r3, #13]
 800e0f4:	06d2      	lsls	r2, r2, #27
 800e0f6:	d106      	bne.n	800e106 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800e0f8:	69a2      	ldr	r2, [r4, #24]
 800e0fa:	b922      	cbnz	r2, 800e106 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
 800e0fc:	89da      	ldrh	r2, [r3, #14]
 800e0fe:	2a7f      	cmp	r2, #127	; 0x7f
 800e100:	d901      	bls.n	800e106 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
 800e102:	61ab      	str	r3, [r5, #24]
}
 800e104:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 800e106:	429c      	cmp	r4, r3
 800e108:	d002      	beq.n	800e110 <update_cache+0x34>
			z_reset_time_slice(thread);
 800e10a:	4620      	mov	r0, r4
 800e10c:	f7ff ff84 	bl	800e018 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800e110:	61ac      	str	r4, [r5, #24]
}
 800e112:	e7f7      	b.n	800e104 <update_cache+0x28>
 800e114:	200022c0 	.word	0x200022c0
 800e118:	200022a4 	.word	0x200022a4

0800e11c <move_thread_to_end_of_prio_q>:
{
 800e11c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800e11e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800e122:	7b43      	ldrb	r3, [r0, #13]
 800e124:	2a00      	cmp	r2, #0
{
 800e126:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800e128:	da04      	bge.n	800e134 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e12e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 800e130:	f007 ff4f 	bl	8015fd2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800e134:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 800e136:	4a15      	ldr	r2, [pc, #84]	; (800e18c <move_thread_to_end_of_prio_q+0x70>)
 800e138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e13c:	734b      	strb	r3, [r1, #13]
	return (node == list->tail) ? NULL : node->next;
 800e13e:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e142:	f102 051c 	add.w	r5, r2, #28
 800e146:	42ab      	cmp	r3, r5
 800e148:	d01b      	beq.n	800e182 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e14a:	b1d3      	cbz	r3, 800e182 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
 800e14c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 800e150:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
 800e154:	4286      	cmp	r6, r0
 800e156:	d00f      	beq.n	800e178 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
 800e158:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e15a:	2800      	cmp	r0, #0
 800e15c:	dd0c      	ble.n	800e178 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800e15e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 800e160:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 800e164:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800e166:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 800e168:	6890      	ldr	r0, [r2, #8]
 800e16a:	1a43      	subs	r3, r0, r1
 800e16c:	4258      	negs	r0, r3
}
 800e16e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 800e172:	4158      	adcs	r0, r3
 800e174:	f7ff bfb2 	b.w	800e0dc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800e178:	42a3      	cmp	r3, r4
 800e17a:	d002      	beq.n	800e182 <move_thread_to_end_of_prio_q+0x66>
 800e17c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d1e6      	bne.n	800e150 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
 800e182:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
 800e186:	6021      	str	r1, [r4, #0]
	list->tail = node;
 800e188:	6211      	str	r1, [r2, #32]
}
 800e18a:	e7ed      	b.n	800e168 <move_thread_to_end_of_prio_q+0x4c>
 800e18c:	200022a4 	.word	0x200022a4

0800e190 <z_time_slice>:
{
 800e190:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800e192:	f04f 0310 	mov.w	r3, #16
 800e196:	f3ef 8511 	mrs	r5, BASEPRI
 800e19a:	f383 8812 	msr	BASEPRI_MAX, r3
 800e19e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800e1a2:	4b17      	ldr	r3, [pc, #92]	; (800e200 <z_time_slice+0x70>)
 800e1a4:	4a17      	ldr	r2, [pc, #92]	; (800e204 <z_time_slice+0x74>)
 800e1a6:	689c      	ldr	r4, [r3, #8]
 800e1a8:	6811      	ldr	r1, [r2, #0]
 800e1aa:	428c      	cmp	r4, r1
 800e1ac:	d107      	bne.n	800e1be <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f7ff ff32 	bl	800e018 <z_reset_time_slice>
	__asm__ volatile(
 800e1b4:	f385 8811 	msr	BASEPRI, r5
 800e1b8:	f3bf 8f6f 	isb	sy
}
 800e1bc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 800e1be:	2100      	movs	r1, #0
 800e1c0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 800e1c2:	4a11      	ldr	r2, [pc, #68]	; (800e208 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 800e1c4:	6812      	ldr	r2, [r2, #0]
 800e1c6:	b1c2      	cbz	r2, 800e1fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 800e1c8:	89e2      	ldrh	r2, [r4, #14]
 800e1ca:	2a7f      	cmp	r2, #127	; 0x7f
 800e1cc:	d815      	bhi.n	800e1fa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 800e1ce:	7b62      	ldrb	r2, [r4, #13]
 800e1d0:	06d2      	lsls	r2, r2, #27
 800e1d2:	d112      	bne.n	800e1fa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800e1d4:	4a0d      	ldr	r2, [pc, #52]	; (800e20c <z_time_slice+0x7c>)
 800e1d6:	f994 100e 	ldrsb.w	r1, [r4, #14]
 800e1da:	6812      	ldr	r2, [r2, #0]
 800e1dc:	4291      	cmp	r1, r2
 800e1de:	db0c      	blt.n	800e1fa <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
 800e1e0:	4a0b      	ldr	r2, [pc, #44]	; (800e210 <z_time_slice+0x80>)
 800e1e2:	4294      	cmp	r4, r2
 800e1e4:	d009      	beq.n	800e1fa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 800e1e6:	691a      	ldr	r2, [r3, #16]
 800e1e8:	4282      	cmp	r2, r0
 800e1ea:	dc03      	bgt.n	800e1f4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	f7ff ff95 	bl	800e11c <move_thread_to_end_of_prio_q>
 800e1f2:	e7dc      	b.n	800e1ae <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 800e1f4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 800e1f6:	611a      	str	r2, [r3, #16]
 800e1f8:	e7dc      	b.n	800e1b4 <z_time_slice+0x24>
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	e7fb      	b.n	800e1f6 <z_time_slice+0x66>
 800e1fe:	bf00      	nop
 800e200:	200022a4 	.word	0x200022a4
 800e204:	200022d0 	.word	0x200022d0
 800e208:	200022d8 	.word	0x200022d8
 800e20c:	200022d4 	.word	0x200022d4
 800e210:	20000b70 	.word	0x20000b70

0800e214 <ready_thread>:
{
 800e214:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800e216:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800e21a:	7b43      	ldrb	r3, [r0, #13]
 800e21c:	2a00      	cmp	r2, #0
 800e21e:	db2a      	blt.n	800e276 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800e220:	06da      	lsls	r2, r3, #27
 800e222:	d128      	bne.n	800e276 <ready_thread+0x62>
 800e224:	6982      	ldr	r2, [r0, #24]
 800e226:	bb32      	cbnz	r2, 800e276 <ready_thread+0x62>
	return list->head == list;
 800e228:	4a14      	ldr	r2, [pc, #80]	; (800e27c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800e22a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e22e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
 800e230:	e9d2 3407 	ldrd	r3, r4, [r2, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e234:	f102 051c 	add.w	r5, r2, #28
 800e238:	42ab      	cmp	r3, r5
 800e23a:	d017      	beq.n	800e26c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e23c:	b1b3      	cbz	r3, 800e26c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
 800e23e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800e242:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 800e246:	428e      	cmp	r6, r1
 800e248:	d00b      	beq.n	800e262 <ready_thread+0x4e>
		return b2 - b1;
 800e24a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e24c:	2900      	cmp	r1, #0
 800e24e:	dd08      	ble.n	800e262 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
 800e250:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800e252:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800e256:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800e258:	6058      	str	r0, [r3, #4]
}
 800e25a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 800e25c:	2000      	movs	r0, #0
 800e25e:	f7ff bf3d 	b.w	800e0dc <update_cache>
	return (node == list->tail) ? NULL : node->next;
 800e262:	42a3      	cmp	r3, r4
 800e264:	d002      	beq.n	800e26c <ready_thread+0x58>
 800e266:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1ea      	bne.n	800e242 <ready_thread+0x2e>
	node->prev = tail;
 800e26c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
 800e270:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800e272:	6210      	str	r0, [r2, #32]
}
 800e274:	e7f1      	b.n	800e25a <ready_thread+0x46>
}
 800e276:	bc70      	pop	{r4, r5, r6}
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	200022a4 	.word	0x200022a4

0800e280 <z_sched_start>:
{
 800e280:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e282:	f04f 0210 	mov.w	r2, #16
 800e286:	f3ef 8411 	mrs	r4, BASEPRI
 800e28a:	f382 8812 	msr	BASEPRI_MAX, r2
 800e28e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800e292:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 800e294:	0751      	lsls	r1, r2, #29
 800e296:	d404      	bmi.n	800e2a2 <z_sched_start+0x22>
	__asm__ volatile(
 800e298:	f384 8811 	msr	BASEPRI, r4
 800e29c:	f3bf 8f6f 	isb	sy
}
 800e2a0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800e2a2:	f022 0204 	bic.w	r2, r2, #4
 800e2a6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800e2a8:	f7ff ffb4 	bl	800e214 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	4802      	ldr	r0, [pc, #8]	; (800e2b8 <z_sched_start+0x38>)
}
 800e2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 800e2b4:	f7ff beec 	b.w	800e090 <z_reschedule>
 800e2b8:	20002452 	.word	0x20002452

0800e2bc <unready_thread>:
{
 800e2bc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800e2be:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800e2c2:	7b43      	ldrb	r3, [r0, #13]
 800e2c4:	2a00      	cmp	r2, #0
{
 800e2c6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 800e2c8:	da04      	bge.n	800e2d4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e2ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2ce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800e2d0:	f007 fe7f 	bl	8015fd2 <sys_dlist_remove>
	update_cache(thread == _current);
 800e2d4:	4b04      	ldr	r3, [pc, #16]	; (800e2e8 <unready_thread+0x2c>)
 800e2d6:	6898      	ldr	r0, [r3, #8]
 800e2d8:	1a43      	subs	r3, r0, r1
 800e2da:	4258      	negs	r0, r3
 800e2dc:	4158      	adcs	r0, r3
}
 800e2de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 800e2e2:	f7ff befb 	b.w	800e0dc <update_cache>
 800e2e6:	bf00      	nop
 800e2e8:	200022a4 	.word	0x200022a4

0800e2ec <pend>:
{
 800e2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	4615      	mov	r5, r2
 800e2f4:	461c      	mov	r4, r3
	__asm__ volatile(
 800e2f6:	f04f 0310 	mov.w	r3, #16
 800e2fa:	f3ef 8711 	mrs	r7, BASEPRI
 800e2fe:	f383 8812 	msr	BASEPRI_MAX, r3
 800e302:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 800e306:	f007 fef1 	bl	80160ec <add_to_waitq_locked>
	__asm__ volatile(
 800e30a:	f387 8811 	msr	BASEPRI, r7
 800e30e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e312:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800e316:	bf08      	it	eq
 800e318:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800e31c:	d008      	beq.n	800e330 <pend+0x44>
 800e31e:	462a      	mov	r2, r5
 800e320:	4623      	mov	r3, r4
 800e322:	f106 0018 	add.w	r0, r6, #24
 800e326:	4903      	ldr	r1, [pc, #12]	; (800e334 <pend+0x48>)
}
 800e328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e32c:	f000 ba38 	b.w	800e7a0 <z_add_timeout>
 800e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e334:	080160a9 	.word	0x080160a9

0800e338 <z_pend_curr>:
{
 800e338:	b510      	push	{r4, lr}
	pending_current = _current;
 800e33a:	4b07      	ldr	r3, [pc, #28]	; (800e358 <z_pend_curr+0x20>)
 800e33c:	6898      	ldr	r0, [r3, #8]
 800e33e:	4b07      	ldr	r3, [pc, #28]	; (800e35c <z_pend_curr+0x24>)
{
 800e340:	460c      	mov	r4, r1
	pending_current = _current;
 800e342:	6018      	str	r0, [r3, #0]
{
 800e344:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 800e346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e34a:	f7ff ffcf 	bl	800e2ec <pend>
 800e34e:	4620      	mov	r0, r4
}
 800e350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e354:	f7f5 bcc4 	b.w	8003ce0 <arch_swap>
 800e358:	200022a4 	.word	0x200022a4
 800e35c:	200022d0 	.word	0x200022d0

0800e360 <z_set_prio>:
{
 800e360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e362:	4604      	mov	r4, r0
	__asm__ volatile(
 800e364:	f04f 0310 	mov.w	r3, #16
 800e368:	f3ef 8611 	mrs	r6, BASEPRI
 800e36c:	f383 8812 	msr	BASEPRI_MAX, r3
 800e370:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 800e374:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800e376:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 800e378:	b249      	sxtb	r1, r1
 800e37a:	d133      	bne.n	800e3e4 <z_set_prio+0x84>
		if (need_sched) {
 800e37c:	6982      	ldr	r2, [r0, #24]
 800e37e:	bb8a      	cbnz	r2, 800e3e4 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e384:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800e386:	f007 fe24 	bl	8015fd2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 800e38a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 800e38c:	4a17      	ldr	r2, [pc, #92]	; (800e3ec <z_set_prio+0x8c>)
				thread->base.prio = prio;
 800e38e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800e390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e394:	7343      	strb	r3, [r0, #13]
 800e396:	4610      	mov	r0, r2
 800e398:	f850 3f1c 	ldr.w	r3, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e39c:	4283      	cmp	r3, r0
 800e39e:	d01b      	beq.n	800e3d8 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e3a0:	b1d3      	cbz	r3, 800e3d8 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
 800e3a2:	6a17      	ldr	r7, [r2, #32]
	int32_t b2 = thread_2->base.prio;
 800e3a4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
 800e3a8:	42a9      	cmp	r1, r5
 800e3aa:	d010      	beq.n	800e3ce <z_set_prio+0x6e>
		return b2 - b1;
 800e3ac:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e3ae:	2d00      	cmp	r5, #0
 800e3b0:	dd0d      	ble.n	800e3ce <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
 800e3b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800e3b4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800e3b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800e3ba:	605c      	str	r4, [r3, #4]
			update_cache(1);
 800e3bc:	2001      	movs	r0, #1
 800e3be:	f7ff fe8d 	bl	800e0dc <update_cache>
 800e3c2:	2001      	movs	r0, #1
	__asm__ volatile(
 800e3c4:	f386 8811 	msr	BASEPRI, r6
 800e3c8:	f3bf 8f6f 	isb	sy
}
 800e3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 800e3ce:	42bb      	cmp	r3, r7
 800e3d0:	d002      	beq.n	800e3d8 <z_set_prio+0x78>
 800e3d2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1e5      	bne.n	800e3a4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
 800e3d8:	6a13      	ldr	r3, [r2, #32]
	node->prev = tail;
 800e3da:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
 800e3de:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800e3e0:	6214      	str	r4, [r2, #32]
}
 800e3e2:	e7eb      	b.n	800e3bc <z_set_prio+0x5c>
			thread->base.prio = prio;
 800e3e4:	73a1      	strb	r1, [r4, #14]
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	e7ec      	b.n	800e3c4 <z_set_prio+0x64>
 800e3ea:	bf00      	nop
 800e3ec:	200022a4 	.word	0x200022a4

0800e3f0 <z_impl_k_thread_suspend>:
{
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800e3f4:	3018      	adds	r0, #24
 800e3f6:	f007 fefe 	bl	80161f6 <z_abort_timeout>
	__asm__ volatile(
 800e3fa:	f04f 0310 	mov.w	r3, #16
 800e3fe:	f3ef 8611 	mrs	r6, BASEPRI
 800e402:	f383 8812 	msr	BASEPRI_MAX, r3
 800e406:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800e40a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 800e40e:	7b63      	ldrb	r3, [r4, #13]
 800e410:	2a00      	cmp	r2, #0
 800e412:	da05      	bge.n	800e420 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e418:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800e41a:	4620      	mov	r0, r4
 800e41c:	f007 fdd9 	bl	8015fd2 <sys_dlist_remove>
		update_cache(thread == _current);
 800e420:	4d0b      	ldr	r5, [pc, #44]	; (800e450 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800e422:	7b63      	ldrb	r3, [r4, #13]
 800e424:	68a8      	ldr	r0, [r5, #8]
 800e426:	f043 0310 	orr.w	r3, r3, #16
 800e42a:	7363      	strb	r3, [r4, #13]
 800e42c:	1b03      	subs	r3, r0, r4
 800e42e:	4258      	negs	r0, r3
 800e430:	4158      	adcs	r0, r3
 800e432:	f7ff fe53 	bl	800e0dc <update_cache>
	__asm__ volatile(
 800e436:	f386 8811 	msr	BASEPRI, r6
 800e43a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800e43e:	68ab      	ldr	r3, [r5, #8]
 800e440:	42a3      	cmp	r3, r4
 800e442:	d103      	bne.n	800e44c <z_impl_k_thread_suspend+0x5c>
}
 800e444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 800e448:	f007 be0e 	b.w	8016068 <z_reschedule_unlocked>
}
 800e44c:	bd70      	pop	{r4, r5, r6, pc}
 800e44e:	bf00      	nop
 800e450:	200022a4 	.word	0x200022a4

0800e454 <k_sched_unlock>:
{
 800e454:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e456:	f04f 0310 	mov.w	r3, #16
 800e45a:	f3ef 8411 	mrs	r4, BASEPRI
 800e45e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e462:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800e466:	4b08      	ldr	r3, [pc, #32]	; (800e488 <k_sched_unlock+0x34>)
 800e468:	689a      	ldr	r2, [r3, #8]
 800e46a:	7bd3      	ldrb	r3, [r2, #15]
 800e46c:	3301      	adds	r3, #1
 800e46e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800e470:	2000      	movs	r0, #0
 800e472:	f7ff fe33 	bl	800e0dc <update_cache>
	__asm__ volatile(
 800e476:	f384 8811 	msr	BASEPRI, r4
 800e47a:	f3bf 8f6f 	isb	sy
}
 800e47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 800e482:	f007 bdf1 	b.w	8016068 <z_reschedule_unlocked>
 800e486:	bf00      	nop
 800e488:	200022a4 	.word	0x200022a4

0800e48c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800e48c:	4b04      	ldr	r3, [pc, #16]	; (800e4a0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800e48e:	2100      	movs	r1, #0
 800e490:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 800e494:	e9c3 2207 	strd	r2, r2, [r3, #28]
 800e498:	4608      	mov	r0, r1
 800e49a:	f7ff bdd1 	b.w	800e040 <k_sched_time_slice_set>
 800e49e:	bf00      	nop
 800e4a0:	200022a4 	.word	0x200022a4

0800e4a4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 800e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800e4a6:	f04f 0310 	mov.w	r3, #16
 800e4aa:	f3ef 8511 	mrs	r5, BASEPRI
 800e4ae:	f383 8812 	msr	BASEPRI_MAX, r3
 800e4b2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 800e4b6:	491a      	ldr	r1, [pc, #104]	; (800e520 <z_impl_k_yield+0x7c>)
 800e4b8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e4ba:	7b43      	ldrb	r3, [r0, #13]
 800e4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4c0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800e4c2:	f007 fd86 	bl	8015fd2 <sys_dlist_remove>
	}
	queue_thread(_current);
 800e4c6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800e4c8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 800e4ca:	4608      	mov	r0, r1
 800e4cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e4d0:	735a      	strb	r2, [r3, #13]
 800e4d2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e4d6:	4282      	cmp	r2, r0
 800e4d8:	d01c      	beq.n	800e514 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e4da:	b1da      	cbz	r2, 800e514 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
 800e4dc:	6a0f      	ldr	r7, [r1, #32]
	int32_t b1 = thread_1->base.prio;
 800e4de:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 800e4e2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
 800e4e6:	42a6      	cmp	r6, r4
 800e4e8:	d00f      	beq.n	800e50a <z_impl_k_yield+0x66>
		return b2 - b1;
 800e4ea:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e4ec:	2c00      	cmp	r4, #0
 800e4ee:	dd0c      	ble.n	800e50a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
 800e4f0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 800e4f2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 800e4f6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 800e4f8:	6053      	str	r3, [r2, #4]
	update_cache(1);
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	f7ff fdee 	bl	800e0dc <update_cache>
 800e500:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 800e502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e506:	f7f5 bbeb 	b.w	8003ce0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 800e50a:	42ba      	cmp	r2, r7
 800e50c:	d002      	beq.n	800e514 <z_impl_k_yield+0x70>
 800e50e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e510:	2a00      	cmp	r2, #0
 800e512:	d1e6      	bne.n	800e4e2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
 800e514:	6a0a      	ldr	r2, [r1, #32]
	node->prev = tail;
 800e516:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
 800e51a:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800e51c:	620b      	str	r3, [r1, #32]
}
 800e51e:	e7ec      	b.n	800e4fa <z_impl_k_yield+0x56>
 800e520:	200022a4 	.word	0x200022a4

0800e524 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 800e524:	ea50 0301 	orrs.w	r3, r0, r1
{
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	4605      	mov	r5, r0
 800e52e:	460e      	mov	r6, r1
	if (ticks == 0) {
 800e530:	d103      	bne.n	800e53a <z_tick_sleep+0x16>
	z_impl_k_yield();
 800e532:	f7ff ffb7 	bl	800e4a4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
 800e536:	2000      	movs	r0, #0
 800e538:	e033      	b.n	800e5a2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 800e53a:	f06f 0401 	mvn.w	r4, #1
 800e53e:	1a24      	subs	r4, r4, r0
 800e540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e544:	eb63 0301 	sbc.w	r3, r3, r1
 800e548:	2c01      	cmp	r4, #1
 800e54a:	f173 0300 	sbcs.w	r3, r3, #0
 800e54e:	da02      	bge.n	800e556 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800e550:	f007 fe81 	bl	8016256 <sys_clock_tick_get_32>
 800e554:	1944      	adds	r4, r0, r5
 800e556:	f04f 0310 	mov.w	r3, #16
 800e55a:	f3ef 8811 	mrs	r8, BASEPRI
 800e55e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e562:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800e566:	4f10      	ldr	r7, [pc, #64]	; (800e5a8 <z_tick_sleep+0x84>)
 800e568:	4b10      	ldr	r3, [pc, #64]	; (800e5ac <z_tick_sleep+0x88>)
 800e56a:	68b8      	ldr	r0, [r7, #8]
 800e56c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800e56e:	f7ff fea5 	bl	800e2bc <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800e572:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800e574:	490e      	ldr	r1, [pc, #56]	; (800e5b0 <z_tick_sleep+0x8c>)
 800e576:	462a      	mov	r2, r5
 800e578:	4633      	mov	r3, r6
 800e57a:	3018      	adds	r0, #24
 800e57c:	f000 f910 	bl	800e7a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	7b53      	ldrb	r3, [r2, #13]
 800e584:	f043 0310 	orr.w	r3, r3, #16
 800e588:	7353      	strb	r3, [r2, #13]
 800e58a:	4640      	mov	r0, r8
 800e58c:	f7f5 fba8 	bl	8003ce0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800e590:	f007 fe61 	bl	8016256 <sys_clock_tick_get_32>
 800e594:	1a20      	subs	r0, r4, r0
 800e596:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800e59a:	2801      	cmp	r0, #1
 800e59c:	f173 0300 	sbcs.w	r3, r3, #0
 800e5a0:	dbc9      	blt.n	800e536 <z_tick_sleep+0x12>
}
 800e5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a6:	bf00      	nop
 800e5a8:	200022a4 	.word	0x200022a4
 800e5ac:	200022d0 	.word	0x200022d0
 800e5b0:	080160a9 	.word	0x080160a9

0800e5b4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e5b4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800e5b8:	bf08      	it	eq
 800e5ba:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 800e5be:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e5c0:	d106      	bne.n	800e5d0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 800e5c2:	4b07      	ldr	r3, [pc, #28]	; (800e5e0 <z_impl_k_sleep+0x2c>)
 800e5c4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800e5c6:	f7ff ff13 	bl	800e3f0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 800e5ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 800e5ce:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 800e5d0:	f7ff ffa8 	bl	800e524 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800e5d4:	220a      	movs	r2, #10
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	17c1      	asrs	r1, r0, #31
 800e5da:	f7f2 fa93 	bl	8000b04 <__aeabi_uldivmod>
	return ret;
 800e5de:	e7f6      	b.n	800e5ce <z_impl_k_sleep+0x1a>
 800e5e0:	200022a4 	.word	0x200022a4

0800e5e4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800e5e4:	4b01      	ldr	r3, [pc, #4]	; (800e5ec <z_impl_z_current_get+0x8>)
 800e5e6:	6898      	ldr	r0, [r3, #8]
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	200022a4 	.word	0x200022a4

0800e5f0 <z_impl_k_is_preempt_thread>:
 800e5f0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 800e5f4:	b93b      	cbnz	r3, 800e606 <z_impl_k_is_preempt_thread+0x16>
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800e5f8:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 800e5fa:	89d8      	ldrh	r0, [r3, #14]
 800e5fc:	287f      	cmp	r0, #127	; 0x7f
 800e5fe:	bf8c      	ite	hi
 800e600:	2000      	movhi	r0, #0
 800e602:	2001      	movls	r0, #1
 800e604:	4770      	bx	lr
 800e606:	2000      	movs	r0, #0
}
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	200022a4 	.word	0x200022a4

0800e610 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 800e610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e614:	4604      	mov	r4, r0
 800e616:	f04f 0310 	mov.w	r3, #16
 800e61a:	f3ef 8611 	mrs	r6, BASEPRI
 800e61e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e622:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800e626:	7b43      	ldrb	r3, [r0, #13]
 800e628:	071a      	lsls	r2, r3, #28
 800e62a:	d505      	bpl.n	800e638 <z_thread_abort+0x28>
	__asm__ volatile(
 800e62c:	f386 8811 	msr	BASEPRI, r6
 800e630:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800e634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800e638:	f023 0220 	bic.w	r2, r3, #32
 800e63c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 800e640:	09d2      	lsrs	r2, r2, #7
 800e642:	d120      	bne.n	800e686 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800e644:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 800e646:	68a3      	ldr	r3, [r4, #8]
 800e648:	b113      	cbz	r3, 800e650 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
 800e64a:	4620      	mov	r0, r4
 800e64c:	f007 fcc9 	bl	8015fe2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 800e650:	f104 0018 	add.w	r0, r4, #24
 800e654:	f007 fdcf 	bl	80161f6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800e658:	f104 0758 	add.w	r7, r4, #88	; 0x58
 800e65c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 800e660:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e662:	42bd      	cmp	r5, r7
 800e664:	d000      	beq.n	800e668 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800e666:	b9b5      	cbnz	r5, 800e696 <z_thread_abort+0x86>
		update_cache(1);
 800e668:	2001      	movs	r0, #1
 800e66a:	f7ff fd37 	bl	800e0dc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800e66e:	4b10      	ldr	r3, [pc, #64]	; (800e6b0 <z_thread_abort+0xa0>)
 800e670:	689b      	ldr	r3, [r3, #8]
 800e672:	42a3      	cmp	r3, r4
 800e674:	d1da      	bne.n	800e62c <z_thread_abort+0x1c>
 800e676:	f3ef 8305 	mrs	r3, IPSR
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1d6      	bne.n	800e62c <z_thread_abort+0x1c>
 800e67e:	4630      	mov	r0, r6
 800e680:	f7f5 fb2e 	bl	8003ce0 <arch_swap>
	return ret;
 800e684:	e7d2      	b.n	800e62c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e686:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800e68a:	f043 0308 	orr.w	r3, r3, #8
 800e68e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 800e690:	f007 fc9f 	bl	8015fd2 <sys_dlist_remove>
}
 800e694:	e7d7      	b.n	800e646 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
 800e696:	4628      	mov	r0, r5
 800e698:	f007 fca3 	bl	8015fe2 <unpend_thread_no_timeout>
 800e69c:	f105 0018 	add.w	r0, r5, #24
 800e6a0:	f007 fda9 	bl	80161f6 <z_abort_timeout>
 800e6a4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f7ff fdb3 	bl	800e214 <ready_thread>
 800e6ae:	e7d7      	b.n	800e660 <z_thread_abort+0x50>
 800e6b0:	200022a4 	.word	0x200022a4

0800e6b4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800e6b4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800e6b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 800e6ba:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800e6bc:	e9cd 6700 	strd	r6, r7, [sp]
 800e6c0:	f7ff fe3a 	bl	800e338 <z_pend_curr>

	if (data != NULL) {
 800e6c4:	b11c      	cbz	r4, 800e6ce <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 800e6c6:	4b03      	ldr	r3, [pc, #12]	; (800e6d4 <z_sched_wait+0x20>)
 800e6c8:	689b      	ldr	r3, [r3, #8]
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800e6ce:	b002      	add	sp, #8
 800e6d0:	bdd0      	pop	{r4, r6, r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	200022a4 	.word	0x200022a4

0800e6d8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800e6d8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 800e6da:	4806      	ldr	r0, [pc, #24]	; (800e6f4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 800e6dc:	4a06      	ldr	r2, [pc, #24]	; (800e6f8 <z_data_copy+0x20>)
 800e6de:	4907      	ldr	r1, [pc, #28]	; (800e6fc <z_data_copy+0x24>)
 800e6e0:	1a12      	subs	r2, r2, r0
 800e6e2:	f007 fbdb 	bl	8015e9c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800e6e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 800e6ea:	4a05      	ldr	r2, [pc, #20]	; (800e700 <z_data_copy+0x28>)
 800e6ec:	4905      	ldr	r1, [pc, #20]	; (800e704 <z_data_copy+0x2c>)
 800e6ee:	4806      	ldr	r0, [pc, #24]	; (800e708 <z_data_copy+0x30>)
 800e6f0:	f007 bbd4 	b.w	8015e9c <z_early_memcpy>
 800e6f4:	20000000 	.word	0x20000000
 800e6f8:	2000041c 	.word	0x2000041c
 800e6fc:	08019878 	.word	0x08019878
 800e700:	00000000 	.word	0x00000000
 800e704:	08019878 	.word	0x08019878
 800e708:	20000000 	.word	0x20000000

0800e70c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800e70c:	4b03      	ldr	r3, [pc, #12]	; (800e71c <elapsed+0x10>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	b90b      	cbnz	r3, 800e716 <elapsed+0xa>
 800e712:	f7fd bf95 	b.w	800c640 <sys_clock_elapsed>
}
 800e716:	2000      	movs	r0, #0
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	200022dc 	.word	0x200022dc

0800e720 <next_timeout>:
	return list->head == list;
 800e720:	4b10      	ldr	r3, [pc, #64]	; (800e764 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
 800e722:	b510      	push	{r4, lr}
 800e724:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e726:	429c      	cmp	r4, r3
 800e728:	bf08      	it	eq
 800e72a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 800e72c:	f7ff ffee 	bl	800e70c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 800e730:	b1a4      	cbz	r4, 800e75c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800e732:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e736:	1a1b      	subs	r3, r3, r0
 800e738:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800e73c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e740:	f170 0200 	sbcs.w	r2, r0, #0
 800e744:	da0a      	bge.n	800e75c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 800e746:	2800      	cmp	r0, #0
 800e748:	bfac      	ite	ge
 800e74a:	4618      	movge	r0, r3
 800e74c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800e74e:	4b06      	ldr	r3, [pc, #24]	; (800e768 <next_timeout+0x48>)
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	b113      	cbz	r3, 800e75a <next_timeout+0x3a>
 800e754:	4298      	cmp	r0, r3
 800e756:	bfa8      	it	ge
 800e758:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800e75a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
 800e75c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800e760:	e7f5      	b.n	800e74e <next_timeout+0x2e>
 800e762:	bf00      	nop
 800e764:	2000022c 	.word	0x2000022c
 800e768:	200022a4 	.word	0x200022a4

0800e76c <remove_timeout>:
{
 800e76c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
 800e76e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800e770:	b168      	cbz	r0, 800e78e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 800e772:	4a0a      	ldr	r2, [pc, #40]	; (800e79c <remove_timeout+0x30>)
 800e774:	6852      	ldr	r2, [r2, #4]
 800e776:	4290      	cmp	r0, r2
 800e778:	d009      	beq.n	800e78e <remove_timeout+0x22>
	if (next(t) != NULL) {
 800e77a:	b143      	cbz	r3, 800e78e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800e77c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 800e780:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 800e784:	1912      	adds	r2, r2, r4
 800e786:	eb41 0105 	adc.w	r1, r1, r5
 800e78a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800e78e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800e790:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e792:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800e794:	2300      	movs	r3, #0
	node->prev = NULL;
 800e796:	e9c0 3300 	strd	r3, r3, [r0]
}
 800e79a:	bd30      	pop	{r4, r5, pc}
 800e79c:	2000022c 	.word	0x2000022c

0800e7a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e7a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7a4:	bf08      	it	eq
 800e7a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800e7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	461f      	mov	r7, r3
 800e7b0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e7b2:	d067      	beq.n	800e884 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800e7b4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 800e7b6:	f04f 0310 	mov.w	r3, #16
 800e7ba:	f3ef 8611 	mrs	r6, BASEPRI
 800e7be:	f383 8812 	msr	BASEPRI_MAX, r3
 800e7c2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800e7c6:	f06f 0201 	mvn.w	r2, #1
 800e7ca:	1b53      	subs	r3, r2, r5
 800e7cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e7d0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	db1b      	blt.n	800e810 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800e7d8:	4b2b      	ldr	r3, [pc, #172]	; (800e888 <z_add_timeout+0xe8>)
 800e7da:	e9d3 1300 	ldrd	r1, r3, [r3]
 800e7de:	1a52      	subs	r2, r2, r1
 800e7e0:	eb6c 0303 	sbc.w	r3, ip, r3
 800e7e4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
 800e7e6:	eb63 0307 	sbc.w	r3, r3, r7
 800e7ea:	2d01      	cmp	r5, #1
 800e7ec:	f173 0200 	sbcs.w	r2, r3, #0
 800e7f0:	bfbc      	itt	lt
 800e7f2:	2501      	movlt	r5, #1
 800e7f4:	2300      	movlt	r3, #0
 800e7f6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
 800e7fa:	4824      	ldr	r0, [pc, #144]	; (800e88c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
 800e7fc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e800:	4283      	cmp	r3, r0
 800e802:	d118      	bne.n	800e836 <z_add_timeout+0x96>
	node->prev = tail;
 800e804:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
 800e808:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 800e80c:	6044      	str	r4, [r0, #4]
}
 800e80e:	e026      	b.n	800e85e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800e810:	f7ff ff7c 	bl	800e70c <elapsed>
 800e814:	3501      	adds	r5, #1
 800e816:	f147 0700 	adc.w	r7, r7, #0
 800e81a:	182d      	adds	r5, r5, r0
 800e81c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 800e820:	e9c4 5704 	strd	r5, r7, [r4, #16]
 800e824:	e7e9      	b.n	800e7fa <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 800e826:	1a52      	subs	r2, r2, r1
 800e828:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
 800e82c:	4563      	cmp	r3, ip
 800e82e:	e9c4 2504 	strd	r2, r5, [r4, #16]
 800e832:	d0e7      	beq.n	800e804 <z_add_timeout+0x64>
 800e834:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0e4      	beq.n	800e804 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
 800e83a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
 800e83e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
 800e842:	428a      	cmp	r2, r1
 800e844:	eb75 0e07 	sbcs.w	lr, r5, r7
 800e848:	daed      	bge.n	800e826 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
 800e84a:	1a8a      	subs	r2, r1, r2
 800e84c:	eb67 0505 	sbc.w	r5, r7, r5
 800e850:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
 800e854:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800e856:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800e85a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800e85c:	605c      	str	r4, [r3, #4]
	return list->head == list;
 800e85e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e860:	4283      	cmp	r3, r0
 800e862:	d00b      	beq.n	800e87c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800e864:	429c      	cmp	r4, r3
 800e866:	d109      	bne.n	800e87c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800e868:	f7ff ff5a 	bl	800e720 <next_timeout>

			if (next_time == 0 ||
 800e86c:	b118      	cbz	r0, 800e876 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
 800e86e:	4b08      	ldr	r3, [pc, #32]	; (800e890 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
 800e870:	691b      	ldr	r3, [r3, #16]
 800e872:	4283      	cmp	r3, r0
 800e874:	d002      	beq.n	800e87c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
 800e876:	2100      	movs	r1, #0
 800e878:	f7fd fe74 	bl	800c564 <sys_clock_set_timeout>
	__asm__ volatile(
 800e87c:	f386 8811 	msr	BASEPRI, r6
 800e880:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800e884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e886:	bf00      	nop
 800e888:	20000c70 	.word	0x20000c70
 800e88c:	2000022c 	.word	0x2000022c
 800e890:	200022a4 	.word	0x200022a4

0800e894 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800e894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e898:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800e89a:	f7ff fc79 	bl	800e190 <z_time_slice>
	__asm__ volatile(
 800e89e:	f04f 0310 	mov.w	r3, #16
 800e8a2:	f3ef 8411 	mrs	r4, BASEPRI
 800e8a6:	f383 8812 	msr	BASEPRI_MAX, r3
 800e8aa:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800e8ae:	4e24      	ldr	r6, [pc, #144]	; (800e940 <sys_clock_announce+0xac>)
	return list->head == list;
 800e8b0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800e944 <sys_clock_announce+0xb0>
 800e8b4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800e8b6:	4d24      	ldr	r5, [pc, #144]	; (800e948 <sys_clock_announce+0xb4>)
 800e8b8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800e8bc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e8be:	4540      	cmp	r0, r8
		curr_tick += dt;
 800e8c0:	e9d5 1e00 	ldrd	r1, lr, [r5]
 800e8c4:	ea4f 77e2 	mov.w	r7, r2, asr #31
 800e8c8:	d00b      	beq.n	800e8e2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800e8ca:	b150      	cbz	r0, 800e8e2 <sys_clock_announce+0x4e>
 800e8cc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	eb77 090c 	sbcs.w	r9, r7, ip
 800e8d6:	da16      	bge.n	800e906 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800e8d8:	1a9b      	subs	r3, r3, r2
 800e8da:	eb6c 0c07 	sbc.w	ip, ip, r7
 800e8de:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 800e8e2:	1852      	adds	r2, r2, r1
 800e8e4:	eb4e 0707 	adc.w	r7, lr, r7
 800e8e8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
 800e8ec:	2500      	movs	r5, #0
 800e8ee:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800e8f0:	f7ff ff16 	bl	800e720 <next_timeout>
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	f7fd fe35 	bl	800c564 <sys_clock_set_timeout>
	__asm__ volatile(
 800e8fa:	f384 8811 	msr	BASEPRI, r4
 800e8fe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800e902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 800e906:	1859      	adds	r1, r3, r1
 800e908:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 800e910:	2200      	movs	r2, #0
 800e912:	2300      	movs	r3, #0
 800e914:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
 800e918:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
 800e91c:	f7ff ff26 	bl	800e76c <remove_timeout>
 800e920:	f384 8811 	msr	BASEPRI, r4
 800e924:	f3bf 8f6f 	isb	sy
		t->fn(t);
 800e928:	6883      	ldr	r3, [r0, #8]
 800e92a:	4798      	blx	r3
	__asm__ volatile(
 800e92c:	f04f 0310 	mov.w	r3, #16
 800e930:	f3ef 8411 	mrs	r4, BASEPRI
 800e934:	f383 8812 	msr	BASEPRI_MAX, r3
 800e938:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800e93c:	e7bc      	b.n	800e8b8 <sys_clock_announce+0x24>
 800e93e:	bf00      	nop
 800e940:	200022dc 	.word	0x200022dc
 800e944:	2000022c 	.word	0x2000022c
 800e948:	20000c70 	.word	0x20000c70

0800e94c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800e94c:	b510      	push	{r4, lr}
 800e94e:	f04f 0310 	mov.w	r3, #16
 800e952:	f3ef 8411 	mrs	r4, BASEPRI
 800e956:	f383 8812 	msr	BASEPRI_MAX, r3
 800e95a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
 800e95e:	f7fd fe6f 	bl	800c640 <sys_clock_elapsed>
 800e962:	4a05      	ldr	r2, [pc, #20]	; (800e978 <sys_clock_tick_get+0x2c>)
 800e964:	e9d2 3100 	ldrd	r3, r1, [r2]
 800e968:	18c0      	adds	r0, r0, r3
 800e96a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800e96e:	f384 8811 	msr	BASEPRI, r4
 800e972:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800e976:	bd10      	pop	{r4, pc}
 800e978:	20000c70 	.word	0x20000c70

0800e97c <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 800e97c:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800e97e:	4604      	mov	r4, r0
 800e980:	b178      	cbz	r0, 800e9a2 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800e982:	f7fd fe7b 	bl	800c67c <sys_clock_cycle_get_32>
 800e986:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800e988:	4806      	ldr	r0, [pc, #24]	; (800e9a4 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800e98a:	4a07      	ldr	r2, [pc, #28]	; (800e9a8 <z_impl_k_busy_wait+0x2c>)
 800e98c:	fba4 0100 	umull	r0, r1, r4, r0
 800e990:	2300      	movs	r3, #0
 800e992:	f7f2 f8b7 	bl	8000b04 <__aeabi_uldivmod>
 800e996:	4604      	mov	r4, r0
 800e998:	f7fd fe70 	bl	800c67c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800e99c:	1b43      	subs	r3, r0, r5
 800e99e:	42a3      	cmp	r3, r4
 800e9a0:	d3fa      	bcc.n	800e998 <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
 800e9a4:	02dc6c00 	.word	0x02dc6c00
 800e9a8:	000f4240 	.word	0x000f4240

0800e9ac <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	4604      	mov	r4, r0
	__asm__ volatile(
 800e9b0:	f04f 0310 	mov.w	r3, #16
 800e9b4:	f3ef 8511 	mrs	r5, BASEPRI
 800e9b8:	f383 8812 	msr	BASEPRI_MAX, r3
 800e9bc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800e9c0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	f142 0200 	adc.w	r2, r2, #0
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	f172 0300 	sbcs.w	r3, r2, #0
 800e9d0:	d304      	bcc.n	800e9dc <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800e9d2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800e9d6:	4917      	ldr	r1, [pc, #92]	; (800ea34 <z_timer_expiration_handler+0x88>)
 800e9d8:	f7ff fee2 	bl	800e7a0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800e9dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e9de:	3301      	adds	r3, #1
 800e9e0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800e9e2:	6a23      	ldr	r3, [r4, #32]
 800e9e4:	b173      	cbz	r3, 800ea04 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
 800e9e6:	f385 8811 	msr	BASEPRI, r5
 800e9ea:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800e9ee:	6a23      	ldr	r3, [r4, #32]
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	4798      	blx	r3
	__asm__ volatile(
 800e9f4:	f04f 0310 	mov.w	r3, #16
 800e9f8:	f3ef 8511 	mrs	r5, BASEPRI
 800e9fc:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea00:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800ea04:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ea08:	42a6      	cmp	r6, r4
 800ea0a:	d000      	beq.n	800ea0e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800ea0c:	b926      	cbnz	r6, 800ea18 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
 800ea0e:	f385 8811 	msr	BASEPRI, r5
 800ea12:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 800ea16:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
 800ea18:	4630      	mov	r0, r6
 800ea1a:	f007 faf5 	bl	8016008 <z_unpend_thread_no_timeout>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	67f3      	str	r3, [r6, #124]	; 0x7c
 800ea22:	f385 8811 	msr	BASEPRI, r5
 800ea26:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 800ea2a:	4630      	mov	r0, r6
}
 800ea2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 800ea30:	f007 bb2a 	b.w	8016088 <z_ready_thread>
 800ea34:	0800e9ad 	.word	0x0800e9ad

0800ea38 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800ea38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea3c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800ea3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea42:	bf08      	it	eq
 800ea44:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
 800ea48:	4606      	mov	r6, r0
 800ea4a:	461c      	mov	r4, r3
 800ea4c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
 800ea50:	4689      	mov	r9, r1
 800ea52:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800ea54:	d03e      	beq.n	800ead4 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800ea56:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ea5a:	bf08      	it	eq
 800ea5c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800ea60:	4615      	mov	r5, r2
 800ea62:	4607      	mov	r7, r0
 800ea64:	d014      	beq.n	800ea90 <z_impl_k_timer_start+0x58>
 800ea66:	ea50 0302 	orrs.w	r3, r0, r2
 800ea6a:	d011      	beq.n	800ea90 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
 800ea6c:	f06f 0301 	mvn.w	r3, #1
 800ea70:	1a9b      	subs	r3, r3, r2
 800ea72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea76:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	da08      	bge.n	800ea90 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
 800ea7e:	2a02      	cmp	r2, #2
 800ea80:	f170 0300 	sbcs.w	r3, r0, #0
 800ea84:	bfbc      	itt	lt
 800ea86:	2502      	movlt	r5, #2
 800ea88:	2700      	movlt	r7, #0
 800ea8a:	3d01      	subs	r5, #1
 800ea8c:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800ea90:	f06f 0301 	mvn.w	r3, #1
 800ea94:	1a5b      	subs	r3, r3, r1
 800ea96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea9a:	eb63 0304 	sbc.w	r3, r3, r4
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	da09      	bge.n	800eab6 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800eaa2:	2901      	cmp	r1, #1
 800eaa4:	f174 0300 	sbcs.w	r3, r4, #0
 800eaa8:	bfbc      	itt	lt
 800eaaa:	2101      	movlt	r1, #1
 800eaac:	2400      	movlt	r4, #0
 800eaae:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
 800eab2:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
 800eab6:	4630      	mov	r0, r6
 800eab8:	f007 fb9d 	bl	80161f6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 800eabc:	2300      	movs	r3, #0
 800eabe:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
 800eac0:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800eac4:	464a      	mov	r2, r9
 800eac6:	4643      	mov	r3, r8
 800eac8:	4630      	mov	r0, r6
 800eaca:	4903      	ldr	r1, [pc, #12]	; (800ead8 <z_impl_k_timer_start+0xa0>)
		     duration);
}
 800eacc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800ead0:	f7ff be66 	b.w	800e7a0 <z_add_timeout>
}
 800ead4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead8:	0800e9ad 	.word	0x0800e9ad

0800eadc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800eadc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800eae0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800eae2:	4b29      	ldr	r3, [pc, #164]	; (800eb88 <z_impl_k_poll+0xac>)
 800eae4:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
 800eae6:	2301      	movs	r3, #1
 800eae8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 800eaec:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800eaf0:	ea52 0305 	orrs.w	r3, r2, r5
{
 800eaf4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
 800eaf6:	bf0c      	ite	eq
 800eaf8:	2301      	moveq	r3, #1
 800eafa:	2300      	movne	r3, #0
 800eafc:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 800eb00:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
 800eb02:	f007 fc06 	bl	8016312 <register_events>
 800eb06:	4681      	mov	r9, r0
	__asm__ volatile(
 800eb08:	f04f 0310 	mov.w	r3, #16
 800eb0c:	f3ef 8a11 	mrs	sl, BASEPRI
 800eb10:	f383 8812 	msr	BASEPRI_MAX, r3
 800eb14:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800eb18:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 800eb1c:	b964      	cbnz	r4, 800eb38 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
 800eb1e:	4601      	mov	r1, r0
 800eb20:	4652      	mov	r2, sl
 800eb22:	4640      	mov	r0, r8
 800eb24:	f007 fcc6 	bl	80164b4 <clear_event_registrations>
	__asm__ volatile(
 800eb28:	f38a 8811 	msr	BASEPRI, sl
 800eb2c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800eb30:	4620      	mov	r0, r4
 800eb32:	b002      	add	sp, #8
 800eb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800eb3e:	ea56 0305 	orrs.w	r3, r6, r5
 800eb42:	d106      	bne.n	800eb52 <z_impl_k_poll+0x76>
 800eb44:	f38a 8811 	msr	BASEPRI, sl
 800eb48:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800eb4c:	f06f 040a 	mvn.w	r4, #10
 800eb50:	e7ee      	b.n	800eb30 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800eb52:	e9cd 6500 	strd	r6, r5, [sp]
 800eb56:	4a0d      	ldr	r2, [pc, #52]	; (800eb8c <z_impl_k_poll+0xb0>)
 800eb58:	480d      	ldr	r0, [pc, #52]	; (800eb90 <z_impl_k_poll+0xb4>)
 800eb5a:	4651      	mov	r1, sl
 800eb5c:	f7ff fbec 	bl	800e338 <z_pend_curr>
 800eb60:	4604      	mov	r4, r0
	__asm__ volatile(
 800eb62:	f04f 0310 	mov.w	r3, #16
 800eb66:	f3ef 8511 	mrs	r5, BASEPRI
 800eb6a:	f383 8812 	msr	BASEPRI_MAX, r3
 800eb6e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
 800eb72:	462a      	mov	r2, r5
 800eb74:	4649      	mov	r1, r9
 800eb76:	4640      	mov	r0, r8
 800eb78:	f007 fc9c 	bl	80164b4 <clear_event_registrations>
	__asm__ volatile(
 800eb7c:	f385 8811 	msr	BASEPRI, r5
 800eb80:	f3bf 8f6f 	isb	sy
	return swap_rc;
 800eb84:	e7d4      	b.n	800eb30 <z_impl_k_poll+0x54>
 800eb86:	bf00      	nop
 800eb88:	200022a4 	.word	0x200022a4
 800eb8c:	20000234 	.word	0x20000234
 800eb90:	20002452 	.word	0x20002452

0800eb94 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800eb94:	b538      	push	{r3, r4, r5, lr}
 800eb96:	4603      	mov	r3, r0
	__asm__ volatile(
 800eb98:	f04f 0210 	mov.w	r2, #16
 800eb9c:	f3ef 8511 	mrs	r5, BASEPRI
 800eba0:	f382 8812 	msr	BASEPRI_MAX, r2
 800eba4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800eba8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800ebaa:	2101      	movs	r1, #1
 800ebac:	6081      	str	r1, [r0, #8]
	return list->head == list;
 800ebae:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800ebb0:	4283      	cmp	r3, r0
 800ebb2:	d106      	bne.n	800ebc2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
 800ebb4:	f385 8811 	msr	BASEPRI, r5
 800ebb8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
 800ebbc:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
 800ebc2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800ebc6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ebc8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800ebca:	2300      	movs	r3, #0
	node->prev = NULL;
 800ebcc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800ebd0:	f007 fc16 	bl	8016400 <signal_poll_event>
	z_reschedule(&lock, key);
 800ebd4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800ebd6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 800ebd8:	4801      	ldr	r0, [pc, #4]	; (800ebe0 <z_impl_k_poll_signal_raise+0x4c>)
 800ebda:	f7ff fa59 	bl	800e090 <z_reschedule>
	return rc;
 800ebde:	e7ee      	b.n	800ebbe <z_impl_k_poll_signal_raise+0x2a>
 800ebe0:	20002452 	.word	0x20002452

0800ebe4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
 800ebe4:	4b01      	ldr	r3, [pc, #4]	; (800ebec <k_thread_system_pool_assign+0x8>)
 800ebe6:	6743      	str	r3, [r0, #116]	; 0x74
}
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	20000380 	.word	0x20000380

0800ebf0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800ebf0:	4a02      	ldr	r2, [pc, #8]	; (800ebfc <boot_banner+0xc>)
 800ebf2:	4903      	ldr	r1, [pc, #12]	; (800ec00 <boot_banner+0x10>)
 800ebf4:	4803      	ldr	r0, [pc, #12]	; (800ec04 <boot_banner+0x14>)
 800ebf6:	f002 b8f3 	b.w	8010de0 <printk>
 800ebfa:	bf00      	nop
 800ebfc:	08017f66 	.word	0x08017f66
 800ec00:	08019526 	.word	0x08019526
 800ec04:	08019547 	.word	0x08019547

0800ec08 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800ec08:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800ec0a:	4c06      	ldr	r4, [pc, #24]	; (800ec24 <statics_init+0x1c>)
 800ec0c:	4d06      	ldr	r5, [pc, #24]	; (800ec28 <statics_init+0x20>)
 800ec0e:	42ac      	cmp	r4, r5
 800ec10:	d301      	bcc.n	800ec16 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 800ec12:	2000      	movs	r0, #0
 800ec14:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800ec16:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f007 fc87 	bl	801652e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800ec20:	3414      	adds	r4, #20
 800ec22:	e7f4      	b.n	800ec0e <statics_init+0x6>
 800ec24:	20000380 	.word	0x20000380
 800ec28:	20000394 	.word	0x20000394

0800ec2c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800ec2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800ec2e:	4b09      	ldr	r3, [pc, #36]	; (800ec54 <k_sys_work_q_init+0x28>)
 800ec30:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800ec32:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 800ec34:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	4907      	ldr	r1, [pc, #28]	; (800ec58 <k_sys_work_q_init+0x2c>)
 800ec3a:	4808      	ldr	r0, [pc, #32]	; (800ec5c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 800ec3c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 800ec40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec48:	f7ff f9ae 	bl	800dfa8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	b004      	add	sp, #16
 800ec50:	bd10      	pop	{r4, pc}
 800ec52:	bf00      	nop
 800ec54:	0801956e 	.word	0x0801956e
 800ec58:	20009960 	.word	0x20009960
 800ec5c:	20000c78 	.word	0x20000c78

0800ec60 <gmtime_r>:
 800ec60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec64:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ec68:	460c      	mov	r4, r1
 800ec6a:	4a50      	ldr	r2, [pc, #320]	; (800edac <gmtime_r+0x14c>)
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4630      	mov	r0, r6
 800ec70:	4639      	mov	r1, r7
 800ec72:	f7f1 fef7 	bl	8000a64 <__aeabi_ldivmod>
 800ec76:	4639      	mov	r1, r7
 800ec78:	4605      	mov	r5, r0
 800ec7a:	4a4c      	ldr	r2, [pc, #304]	; (800edac <gmtime_r+0x14c>)
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f7f1 fef0 	bl	8000a64 <__aeabi_ldivmod>
 800ec84:	2a00      	cmp	r2, #0
 800ec86:	bfbc      	itt	lt
 800ec88:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800ec8c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800ec90:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800ec94:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 800ec98:	fbb2 f1f0 	udiv	r1, r2, r0
 800ec9c:	fb00 2211 	mls	r2, r0, r1, r2
 800eca0:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800eca4:	bfac      	ite	ge
 800eca6:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800ecaa:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800ecae:	60a1      	str	r1, [r4, #8]
 800ecb0:	fbb2 f1f0 	udiv	r1, r2, r0
 800ecb4:	fb00 2211 	mls	r2, r0, r1, r2
 800ecb8:	6061      	str	r1, [r4, #4]
 800ecba:	6022      	str	r2, [r4, #0]
 800ecbc:	2107      	movs	r1, #7
 800ecbe:	1cda      	adds	r2, r3, #3
 800ecc0:	fb92 f1f1 	sdiv	r1, r2, r1
 800ecc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ecc8:	1a52      	subs	r2, r2, r1
 800ecca:	bf48      	it	mi
 800eccc:	3207      	addmi	r2, #7
 800ecce:	4d38      	ldr	r5, [pc, #224]	; (800edb0 <gmtime_r+0x150>)
 800ecd0:	4838      	ldr	r0, [pc, #224]	; (800edb4 <gmtime_r+0x154>)
 800ecd2:	61a2      	str	r2, [r4, #24]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	bfb7      	itett	lt
 800ecd8:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800ecdc:	fb93 f5f5 	sdivge	r5, r3, r5
 800ece0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800ece4:	fb92 f5f5 	sdivlt	r5, r2, r5
 800ece8:	fb00 3005 	mla	r0, r0, r5, r3
 800ecec:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800ecf0:	fbb0 f2f2 	udiv	r2, r0, r2
 800ecf4:	4402      	add	r2, r0
 800ecf6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800ecfa:	fbb0 f1f3 	udiv	r1, r0, r3
 800ecfe:	1a52      	subs	r2, r2, r1
 800ed00:	f240 1c6d 	movw	ip, #365	; 0x16d
 800ed04:	492c      	ldr	r1, [pc, #176]	; (800edb8 <gmtime_r+0x158>)
 800ed06:	fbb0 f1f1 	udiv	r1, r0, r1
 800ed0a:	2764      	movs	r7, #100	; 0x64
 800ed0c:	1a52      	subs	r2, r2, r1
 800ed0e:	fbb2 f1fc 	udiv	r1, r2, ip
 800ed12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed16:	fbb1 f6f7 	udiv	r6, r1, r7
 800ed1a:	1af3      	subs	r3, r6, r3
 800ed1c:	4403      	add	r3, r0
 800ed1e:	fb0c 3311 	mls	r3, ip, r1, r3
 800ed22:	2299      	movs	r2, #153	; 0x99
 800ed24:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800ed28:	f10e 0e02 	add.w	lr, lr, #2
 800ed2c:	f103 0c01 	add.w	ip, r3, #1
 800ed30:	fbbe f0f2 	udiv	r0, lr, r2
 800ed34:	4342      	muls	r2, r0
 800ed36:	3202      	adds	r2, #2
 800ed38:	f04f 0805 	mov.w	r8, #5
 800ed3c:	fbb2 f2f8 	udiv	r2, r2, r8
 800ed40:	ebac 0c02 	sub.w	ip, ip, r2
 800ed44:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800ed48:	4596      	cmp	lr, r2
 800ed4a:	bf94      	ite	ls
 800ed4c:	2202      	movls	r2, #2
 800ed4e:	f06f 0209 	mvnhi.w	r2, #9
 800ed52:	4410      	add	r0, r2
 800ed54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ed58:	fb02 1505 	mla	r5, r2, r5, r1
 800ed5c:	2801      	cmp	r0, #1
 800ed5e:	bf98      	it	ls
 800ed60:	3501      	addls	r5, #1
 800ed62:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800ed66:	d30d      	bcc.n	800ed84 <gmtime_r+0x124>
 800ed68:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ed6c:	61e3      	str	r3, [r4, #28]
 800ed6e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800ed72:	2300      	movs	r3, #0
 800ed74:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800ed78:	f8c4 c00c 	str.w	ip, [r4, #12]
 800ed7c:	6223      	str	r3, [r4, #32]
 800ed7e:	4620      	mov	r0, r4
 800ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed84:	078a      	lsls	r2, r1, #30
 800ed86:	d102      	bne.n	800ed8e <gmtime_r+0x12e>
 800ed88:	fb07 1616 	mls	r6, r7, r6, r1
 800ed8c:	b95e      	cbnz	r6, 800eda6 <gmtime_r+0x146>
 800ed8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ed92:	fbb1 f6f2 	udiv	r6, r1, r2
 800ed96:	fb02 1216 	mls	r2, r2, r6, r1
 800ed9a:	fab2 f282 	clz	r2, r2
 800ed9e:	0952      	lsrs	r2, r2, #5
 800eda0:	333b      	adds	r3, #59	; 0x3b
 800eda2:	4413      	add	r3, r2
 800eda4:	e7e2      	b.n	800ed6c <gmtime_r+0x10c>
 800eda6:	2201      	movs	r2, #1
 800eda8:	e7fa      	b.n	800eda0 <gmtime_r+0x140>
 800edaa:	bf00      	nop
 800edac:	00015180 	.word	0x00015180
 800edb0:	00023ab1 	.word	0x00023ab1
 800edb4:	fffdc54f 	.word	0xfffdc54f
 800edb8:	00023ab0 	.word	0x00023ab0

0800edbc <free>:
 800edbc:	4b02      	ldr	r3, [pc, #8]	; (800edc8 <free+0xc>)
 800edbe:	4601      	mov	r1, r0
 800edc0:	6818      	ldr	r0, [r3, #0]
 800edc2:	f000 b803 	b.w	800edcc <_free_r>
 800edc6:	bf00      	nop
 800edc8:	2000023c 	.word	0x2000023c

0800edcc <_free_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4605      	mov	r5, r0
 800edd0:	2900      	cmp	r1, #0
 800edd2:	d041      	beq.n	800ee58 <_free_r+0x8c>
 800edd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edd8:	1f0c      	subs	r4, r1, #4
 800edda:	2b00      	cmp	r3, #0
 800eddc:	bfb8      	it	lt
 800edde:	18e4      	addlt	r4, r4, r3
 800ede0:	f001 f82c 	bl	800fe3c <__malloc_lock>
 800ede4:	4a1d      	ldr	r2, [pc, #116]	; (800ee5c <_free_r+0x90>)
 800ede6:	6813      	ldr	r3, [r2, #0]
 800ede8:	b933      	cbnz	r3, 800edf8 <_free_r+0x2c>
 800edea:	6063      	str	r3, [r4, #4]
 800edec:	6014      	str	r4, [r2, #0]
 800edee:	4628      	mov	r0, r5
 800edf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edf4:	f001 b828 	b.w	800fe48 <__malloc_unlock>
 800edf8:	42a3      	cmp	r3, r4
 800edfa:	d908      	bls.n	800ee0e <_free_r+0x42>
 800edfc:	6820      	ldr	r0, [r4, #0]
 800edfe:	1821      	adds	r1, r4, r0
 800ee00:	428b      	cmp	r3, r1
 800ee02:	bf01      	itttt	eq
 800ee04:	6819      	ldreq	r1, [r3, #0]
 800ee06:	685b      	ldreq	r3, [r3, #4]
 800ee08:	1809      	addeq	r1, r1, r0
 800ee0a:	6021      	streq	r1, [r4, #0]
 800ee0c:	e7ed      	b.n	800edea <_free_r+0x1e>
 800ee0e:	461a      	mov	r2, r3
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	b10b      	cbz	r3, 800ee18 <_free_r+0x4c>
 800ee14:	42a3      	cmp	r3, r4
 800ee16:	d9fa      	bls.n	800ee0e <_free_r+0x42>
 800ee18:	6811      	ldr	r1, [r2, #0]
 800ee1a:	1850      	adds	r0, r2, r1
 800ee1c:	42a0      	cmp	r0, r4
 800ee1e:	d10b      	bne.n	800ee38 <_free_r+0x6c>
 800ee20:	6820      	ldr	r0, [r4, #0]
 800ee22:	4401      	add	r1, r0
 800ee24:	1850      	adds	r0, r2, r1
 800ee26:	4283      	cmp	r3, r0
 800ee28:	6011      	str	r1, [r2, #0]
 800ee2a:	d1e0      	bne.n	800edee <_free_r+0x22>
 800ee2c:	6818      	ldr	r0, [r3, #0]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	6053      	str	r3, [r2, #4]
 800ee32:	4401      	add	r1, r0
 800ee34:	6011      	str	r1, [r2, #0]
 800ee36:	e7da      	b.n	800edee <_free_r+0x22>
 800ee38:	d902      	bls.n	800ee40 <_free_r+0x74>
 800ee3a:	230c      	movs	r3, #12
 800ee3c:	602b      	str	r3, [r5, #0]
 800ee3e:	e7d6      	b.n	800edee <_free_r+0x22>
 800ee40:	6820      	ldr	r0, [r4, #0]
 800ee42:	1821      	adds	r1, r4, r0
 800ee44:	428b      	cmp	r3, r1
 800ee46:	bf04      	itt	eq
 800ee48:	6819      	ldreq	r1, [r3, #0]
 800ee4a:	685b      	ldreq	r3, [r3, #4]
 800ee4c:	6063      	str	r3, [r4, #4]
 800ee4e:	bf04      	itt	eq
 800ee50:	1809      	addeq	r1, r1, r0
 800ee52:	6021      	streq	r1, [r4, #0]
 800ee54:	6054      	str	r4, [r2, #4]
 800ee56:	e7ca      	b.n	800edee <_free_r+0x22>
 800ee58:	bd38      	pop	{r3, r4, r5, pc}
 800ee5a:	bf00      	nop
 800ee5c:	200022e0 	.word	0x200022e0

0800ee60 <_malloc_r>:
 800ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee62:	1ccd      	adds	r5, r1, #3
 800ee64:	f025 0503 	bic.w	r5, r5, #3
 800ee68:	3508      	adds	r5, #8
 800ee6a:	2d0c      	cmp	r5, #12
 800ee6c:	bf38      	it	cc
 800ee6e:	250c      	movcc	r5, #12
 800ee70:	2d00      	cmp	r5, #0
 800ee72:	4606      	mov	r6, r0
 800ee74:	db01      	blt.n	800ee7a <_malloc_r+0x1a>
 800ee76:	42a9      	cmp	r1, r5
 800ee78:	d903      	bls.n	800ee82 <_malloc_r+0x22>
 800ee7a:	230c      	movs	r3, #12
 800ee7c:	6033      	str	r3, [r6, #0]
 800ee7e:	2000      	movs	r0, #0
 800ee80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee82:	f000 ffdb 	bl	800fe3c <__malloc_lock>
 800ee86:	4921      	ldr	r1, [pc, #132]	; (800ef0c <_malloc_r+0xac>)
 800ee88:	680a      	ldr	r2, [r1, #0]
 800ee8a:	4614      	mov	r4, r2
 800ee8c:	b99c      	cbnz	r4, 800eeb6 <_malloc_r+0x56>
 800ee8e:	4f20      	ldr	r7, [pc, #128]	; (800ef10 <_malloc_r+0xb0>)
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	b923      	cbnz	r3, 800ee9e <_malloc_r+0x3e>
 800ee94:	4621      	mov	r1, r4
 800ee96:	4630      	mov	r0, r6
 800ee98:	f000 f83c 	bl	800ef14 <_sbrk_r>
 800ee9c:	6038      	str	r0, [r7, #0]
 800ee9e:	4629      	mov	r1, r5
 800eea0:	4630      	mov	r0, r6
 800eea2:	f000 f837 	bl	800ef14 <_sbrk_r>
 800eea6:	1c43      	adds	r3, r0, #1
 800eea8:	d123      	bne.n	800eef2 <_malloc_r+0x92>
 800eeaa:	230c      	movs	r3, #12
 800eeac:	6033      	str	r3, [r6, #0]
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f000 ffca 	bl	800fe48 <__malloc_unlock>
 800eeb4:	e7e3      	b.n	800ee7e <_malloc_r+0x1e>
 800eeb6:	6823      	ldr	r3, [r4, #0]
 800eeb8:	1b5b      	subs	r3, r3, r5
 800eeba:	d417      	bmi.n	800eeec <_malloc_r+0x8c>
 800eebc:	2b0b      	cmp	r3, #11
 800eebe:	d903      	bls.n	800eec8 <_malloc_r+0x68>
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	441c      	add	r4, r3
 800eec4:	6025      	str	r5, [r4, #0]
 800eec6:	e004      	b.n	800eed2 <_malloc_r+0x72>
 800eec8:	6863      	ldr	r3, [r4, #4]
 800eeca:	42a2      	cmp	r2, r4
 800eecc:	bf0c      	ite	eq
 800eece:	600b      	streq	r3, [r1, #0]
 800eed0:	6053      	strne	r3, [r2, #4]
 800eed2:	4630      	mov	r0, r6
 800eed4:	f000 ffb8 	bl	800fe48 <__malloc_unlock>
 800eed8:	f104 000b 	add.w	r0, r4, #11
 800eedc:	1d23      	adds	r3, r4, #4
 800eede:	f020 0007 	bic.w	r0, r0, #7
 800eee2:	1ac2      	subs	r2, r0, r3
 800eee4:	d0cc      	beq.n	800ee80 <_malloc_r+0x20>
 800eee6:	1a1b      	subs	r3, r3, r0
 800eee8:	50a3      	str	r3, [r4, r2]
 800eeea:	e7c9      	b.n	800ee80 <_malloc_r+0x20>
 800eeec:	4622      	mov	r2, r4
 800eeee:	6864      	ldr	r4, [r4, #4]
 800eef0:	e7cc      	b.n	800ee8c <_malloc_r+0x2c>
 800eef2:	1cc4      	adds	r4, r0, #3
 800eef4:	f024 0403 	bic.w	r4, r4, #3
 800eef8:	42a0      	cmp	r0, r4
 800eefa:	d0e3      	beq.n	800eec4 <_malloc_r+0x64>
 800eefc:	1a21      	subs	r1, r4, r0
 800eefe:	4630      	mov	r0, r6
 800ef00:	f000 f808 	bl	800ef14 <_sbrk_r>
 800ef04:	3001      	adds	r0, #1
 800ef06:	d1dd      	bne.n	800eec4 <_malloc_r+0x64>
 800ef08:	e7cf      	b.n	800eeaa <_malloc_r+0x4a>
 800ef0a:	bf00      	nop
 800ef0c:	200022e0 	.word	0x200022e0
 800ef10:	200022e4 	.word	0x200022e4

0800ef14 <_sbrk_r>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	4d06      	ldr	r5, [pc, #24]	; (800ef30 <_sbrk_r+0x1c>)
 800ef18:	2300      	movs	r3, #0
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	602b      	str	r3, [r5, #0]
 800ef20:	f7f5 fb62 	bl	80045e8 <_sbrk>
 800ef24:	1c43      	adds	r3, r0, #1
 800ef26:	d102      	bne.n	800ef2e <_sbrk_r+0x1a>
 800ef28:	682b      	ldr	r3, [r5, #0]
 800ef2a:	b103      	cbz	r3, 800ef2e <_sbrk_r+0x1a>
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}
 800ef30:	200022f4 	.word	0x200022f4

0800ef34 <iso_year_adjust>:
 800ef34:	6942      	ldr	r2, [r0, #20]
 800ef36:	2a00      	cmp	r2, #0
 800ef38:	f240 736c 	movw	r3, #1900	; 0x76c
 800ef3c:	bfa8      	it	ge
 800ef3e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800ef42:	4413      	add	r3, r2
 800ef44:	0792      	lsls	r2, r2, #30
 800ef46:	d105      	bne.n	800ef54 <iso_year_adjust+0x20>
 800ef48:	2164      	movs	r1, #100	; 0x64
 800ef4a:	fb93 f2f1 	sdiv	r2, r3, r1
 800ef4e:	fb01 3212 	mls	r2, r1, r2, r3
 800ef52:	b9da      	cbnz	r2, 800ef8c <iso_year_adjust+0x58>
 800ef54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ef58:	fb93 f1f2 	sdiv	r1, r3, r2
 800ef5c:	fb02 3311 	mls	r3, r2, r1, r3
 800ef60:	fab3 f383 	clz	r3, r3
 800ef64:	095b      	lsrs	r3, r3, #5
 800ef66:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800ef6a:	0040      	lsls	r0, r0, #1
 800ef6c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800ef70:	4418      	add	r0, r3
 800ef72:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800ef76:	4298      	cmp	r0, r3
 800ef78:	d03a      	beq.n	800eff0 <iso_year_adjust+0xbc>
 800ef7a:	dc21      	bgt.n	800efc0 <iso_year_adjust+0x8c>
 800ef7c:	2801      	cmp	r0, #1
 800ef7e:	dc1a      	bgt.n	800efb6 <iso_year_adjust+0x82>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	bfb4      	ite	lt
 800ef84:	2000      	movlt	r0, #0
 800ef86:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 800ef8a:	4770      	bx	lr
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	e7ea      	b.n	800ef66 <iso_year_adjust+0x32>
 800ef90:	2817      	cmp	r0, #23
 800ef92:	d813      	bhi.n	800efbc <iso_year_adjust+0x88>
 800ef94:	e8df f000 	tbb	[pc, r0]
 800ef98:	0c0c0c0c 	.word	0x0c0c0c0c
 800ef9c:	0c0c1212 	.word	0x0c0c1212
 800efa0:	12121212 	.word	0x12121212
 800efa4:	12121212 	.word	0x12121212
 800efa8:	0c0c1212 	.word	0x0c0c1212
 800efac:	0c0c1212 	.word	0x0c0c1212
 800efb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efb4:	4770      	bx	lr
 800efb6:	380a      	subs	r0, #10
 800efb8:	2817      	cmp	r0, #23
 800efba:	d9e9      	bls.n	800ef90 <iso_year_adjust+0x5c>
 800efbc:	2000      	movs	r0, #0
 800efbe:	4770      	bx	lr
 800efc0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800efc4:	4298      	cmp	r0, r3
 800efc6:	dc06      	bgt.n	800efd6 <iso_year_adjust+0xa2>
 800efc8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800efcc:	4298      	cmp	r0, r3
 800efce:	bfd4      	ite	le
 800efd0:	2000      	movle	r0, #0
 800efd2:	2001      	movgt	r0, #1
 800efd4:	4770      	bx	lr
 800efd6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800efda:	3802      	subs	r0, #2
 800efdc:	2815      	cmp	r0, #21
 800efde:	d8ed      	bhi.n	800efbc <iso_year_adjust+0x88>
 800efe0:	2301      	movs	r3, #1
 800efe2:	4083      	lsls	r3, r0
 800efe4:	4803      	ldr	r0, [pc, #12]	; (800eff4 <iso_year_adjust+0xc0>)
 800efe6:	4018      	ands	r0, r3
 800efe8:	3800      	subs	r0, #0
 800efea:	bf18      	it	ne
 800efec:	2001      	movne	r0, #1
 800efee:	4770      	bx	lr
 800eff0:	2001      	movs	r0, #1
 800eff2:	4770      	bx	lr
 800eff4:	002a001f 	.word	0x002a001f

0800eff8 <__strftime.isra.0>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	b08f      	sub	sp, #60	; 0x3c
 800effe:	461e      	mov	r6, r3
 800f000:	2300      	movs	r3, #0
 800f002:	4607      	mov	r7, r0
 800f004:	460d      	mov	r5, r1
 800f006:	9302      	str	r3, [sp, #8]
 800f008:	461c      	mov	r4, r3
 800f00a:	7813      	ldrb	r3, [r2, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	f000 84b8 	beq.w	800f982 <__strftime.isra.0+0x98a>
 800f012:	2b25      	cmp	r3, #37	; 0x25
 800f014:	d11f      	bne.n	800f056 <__strftime.isra.0+0x5e>
 800f016:	f892 b001 	ldrb.w	fp, [r2, #1]
 800f01a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800f01e:	d024      	beq.n	800f06a <__strftime.isra.0+0x72>
 800f020:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800f024:	d021      	beq.n	800f06a <__strftime.isra.0+0x72>
 800f026:	f102 0801 	add.w	r8, r2, #1
 800f02a:	f04f 0b00 	mov.w	fp, #0
 800f02e:	f898 2000 	ldrb.w	r2, [r8]
 800f032:	3a31      	subs	r2, #49	; 0x31
 800f034:	2a08      	cmp	r2, #8
 800f036:	d81b      	bhi.n	800f070 <__strftime.isra.0+0x78>
 800f038:	4640      	mov	r0, r8
 800f03a:	220a      	movs	r2, #10
 800f03c:	a906      	add	r1, sp, #24
 800f03e:	f000 fd21 	bl	800fa84 <strtoul>
 800f042:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f046:	4681      	mov	r9, r0
 800f048:	f898 2000 	ldrb.w	r2, [r8]
 800f04c:	2a45      	cmp	r2, #69	; 0x45
 800f04e:	d112      	bne.n	800f076 <__strftime.isra.0+0x7e>
 800f050:	f108 0801 	add.w	r8, r8, #1
 800f054:	e011      	b.n	800f07a <__strftime.isra.0+0x82>
 800f056:	1e69      	subs	r1, r5, #1
 800f058:	42a1      	cmp	r1, r4
 800f05a:	d802      	bhi.n	800f062 <__strftime.isra.0+0x6a>
 800f05c:	2400      	movs	r4, #0
 800f05e:	f000 bc93 	b.w	800f988 <__strftime.isra.0+0x990>
 800f062:	553b      	strb	r3, [r7, r4]
 800f064:	3201      	adds	r2, #1
 800f066:	3401      	adds	r4, #1
 800f068:	e7cf      	b.n	800f00a <__strftime.isra.0+0x12>
 800f06a:	f102 0802 	add.w	r8, r2, #2
 800f06e:	e7de      	b.n	800f02e <__strftime.isra.0+0x36>
 800f070:	f04f 0900 	mov.w	r9, #0
 800f074:	e7e8      	b.n	800f048 <__strftime.isra.0+0x50>
 800f076:	2a4f      	cmp	r2, #79	; 0x4f
 800f078:	d0ea      	beq.n	800f050 <__strftime.isra.0+0x58>
 800f07a:	f898 0000 	ldrb.w	r0, [r8]
 800f07e:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800f082:	2a55      	cmp	r2, #85	; 0x55
 800f084:	d8ea      	bhi.n	800f05c <__strftime.isra.0+0x64>
 800f086:	a301      	add	r3, pc, #4	; (adr r3, 800f08c <__strftime.isra.0+0x94>)
 800f088:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800f08c:	0800f977 	.word	0x0800f977
 800f090:	0800f05d 	.word	0x0800f05d
 800f094:	0800f05d 	.word	0x0800f05d
 800f098:	0800f05d 	.word	0x0800f05d
 800f09c:	0800f05d 	.word	0x0800f05d
 800f0a0:	0800f05d 	.word	0x0800f05d
 800f0a4:	0800f05d 	.word	0x0800f05d
 800f0a8:	0800f05d 	.word	0x0800f05d
 800f0ac:	0800f05d 	.word	0x0800f05d
 800f0b0:	0800f05d 	.word	0x0800f05d
 800f0b4:	0800f05d 	.word	0x0800f05d
 800f0b8:	0800f05d 	.word	0x0800f05d
 800f0bc:	0800f05d 	.word	0x0800f05d
 800f0c0:	0800f05d 	.word	0x0800f05d
 800f0c4:	0800f05d 	.word	0x0800f05d
 800f0c8:	0800f05d 	.word	0x0800f05d
 800f0cc:	0800f05d 	.word	0x0800f05d
 800f0d0:	0800f05d 	.word	0x0800f05d
 800f0d4:	0800f05d 	.word	0x0800f05d
 800f0d8:	0800f05d 	.word	0x0800f05d
 800f0dc:	0800f05d 	.word	0x0800f05d
 800f0e0:	0800f05d 	.word	0x0800f05d
 800f0e4:	0800f05d 	.word	0x0800f05d
 800f0e8:	0800f05d 	.word	0x0800f05d
 800f0ec:	0800f05d 	.word	0x0800f05d
 800f0f0:	0800f05d 	.word	0x0800f05d
 800f0f4:	0800f05d 	.word	0x0800f05d
 800f0f8:	0800f05d 	.word	0x0800f05d
 800f0fc:	0800f221 	.word	0x0800f221
 800f100:	0800f279 	.word	0x0800f279
 800f104:	0800f2e7 	.word	0x0800f2e7
 800f108:	0800f385 	.word	0x0800f385
 800f10c:	0800f05d 	.word	0x0800f05d
 800f110:	0800f3cf 	.word	0x0800f3cf
 800f114:	0800f4bd 	.word	0x0800f4bd
 800f118:	0800f595 	.word	0x0800f595
 800f11c:	0800f5a3 	.word	0x0800f5a3
 800f120:	0800f05d 	.word	0x0800f05d
 800f124:	0800f05d 	.word	0x0800f05d
 800f128:	0800f05d 	.word	0x0800f05d
 800f12c:	0800f5d3 	.word	0x0800f5d3
 800f130:	0800f05d 	.word	0x0800f05d
 800f134:	0800f05d 	.word	0x0800f05d
 800f138:	0800f5e7 	.word	0x0800f5e7
 800f13c:	0800f05d 	.word	0x0800f05d
 800f140:	0800f639 	.word	0x0800f639
 800f144:	0800f74d 	.word	0x0800f74d
 800f148:	0800f75d 	.word	0x0800f75d
 800f14c:	0800f785 	.word	0x0800f785
 800f150:	0800f7bd 	.word	0x0800f7bd
 800f154:	0800f831 	.word	0x0800f831
 800f158:	0800f2df 	.word	0x0800f2df
 800f15c:	0800f85d 	.word	0x0800f85d
 800f160:	0800f925 	.word	0x0800f925
 800f164:	0800f05d 	.word	0x0800f05d
 800f168:	0800f05d 	.word	0x0800f05d
 800f16c:	0800f05d 	.word	0x0800f05d
 800f170:	0800f05d 	.word	0x0800f05d
 800f174:	0800f05d 	.word	0x0800f05d
 800f178:	0800f05d 	.word	0x0800f05d
 800f17c:	0800f1e5 	.word	0x0800f1e5
 800f180:	0800f24f 	.word	0x0800f24f
 800f184:	0800f2a5 	.word	0x0800f2a5
 800f188:	0800f361 	.word	0x0800f361
 800f18c:	0800f361 	.word	0x0800f361
 800f190:	0800f05d 	.word	0x0800f05d
 800f194:	0800f421 	.word	0x0800f421
 800f198:	0800f24f 	.word	0x0800f24f
 800f19c:	0800f05d 	.word	0x0800f05d
 800f1a0:	0800f5c5 	.word	0x0800f5c5
 800f1a4:	0800f595 	.word	0x0800f595
 800f1a8:	0800f5a3 	.word	0x0800f5a3
 800f1ac:	0800f5cd 	.word	0x0800f5cd
 800f1b0:	0800f5d7 	.word	0x0800f5d7
 800f1b4:	0800f05d 	.word	0x0800f05d
 800f1b8:	0800f5e7 	.word	0x0800f5e7
 800f1bc:	0800f05d 	.word	0x0800f05d
 800f1c0:	0800f2cf 	.word	0x0800f2cf
 800f1c4:	0800f64b 	.word	0x0800f64b
 800f1c8:	0800f751 	.word	0x0800f751
 800f1cc:	0800f76b 	.word	0x0800f76b
 800f1d0:	0800f05d 	.word	0x0800f05d
 800f1d4:	0800f823 	.word	0x0800f823
 800f1d8:	0800f2d7 	.word	0x0800f2d7
 800f1dc:	0800f841 	.word	0x0800f841
 800f1e0:	0800f8af 	.word	0x0800f8af
 800f1e4:	69b3      	ldr	r3, [r6, #24]
 800f1e6:	4aa9      	ldr	r2, [pc, #676]	; (800f48c <__strftime.isra.0+0x494>)
 800f1e8:	3318      	adds	r3, #24
 800f1ea:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800f1ee:	4648      	mov	r0, r9
 800f1f0:	f7f1 fe9c 	bl	8000f2c <strlen>
 800f1f4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f1f8:	4420      	add	r0, r4
 800f1fa:	1e6b      	subs	r3, r5, #1
 800f1fc:	42a0      	cmp	r0, r4
 800f1fe:	d107      	bne.n	800f210 <__strftime.isra.0+0x218>
 800f200:	f898 3000 	ldrb.w	r3, [r8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	f000 83bc 	beq.w	800f982 <__strftime.isra.0+0x98a>
 800f20a:	f108 0201 	add.w	r2, r8, #1
 800f20e:	e6fc      	b.n	800f00a <__strftime.isra.0+0x12>
 800f210:	42a3      	cmp	r3, r4
 800f212:	f67f af23 	bls.w	800f05c <__strftime.isra.0+0x64>
 800f216:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800f21a:	553a      	strb	r2, [r7, r4]
 800f21c:	3401      	adds	r4, #1
 800f21e:	e7ed      	b.n	800f1fc <__strftime.isra.0+0x204>
 800f220:	69b2      	ldr	r2, [r6, #24]
 800f222:	4b9a      	ldr	r3, [pc, #616]	; (800f48c <__strftime.isra.0+0x494>)
 800f224:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f228:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800f22c:	4648      	mov	r0, r9
 800f22e:	f7f1 fe7d 	bl	8000f2c <strlen>
 800f232:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f236:	4420      	add	r0, r4
 800f238:	1e6b      	subs	r3, r5, #1
 800f23a:	42a0      	cmp	r0, r4
 800f23c:	d0e0      	beq.n	800f200 <__strftime.isra.0+0x208>
 800f23e:	42a3      	cmp	r3, r4
 800f240:	f67f af0c 	bls.w	800f05c <__strftime.isra.0+0x64>
 800f244:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800f248:	553a      	strb	r2, [r7, r4]
 800f24a:	3401      	adds	r4, #1
 800f24c:	e7f5      	b.n	800f23a <__strftime.isra.0+0x242>
 800f24e:	4b8f      	ldr	r3, [pc, #572]	; (800f48c <__strftime.isra.0+0x494>)
 800f250:	6932      	ldr	r2, [r6, #16]
 800f252:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800f256:	4648      	mov	r0, r9
 800f258:	f7f1 fe68 	bl	8000f2c <strlen>
 800f25c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f260:	4420      	add	r0, r4
 800f262:	1e6b      	subs	r3, r5, #1
 800f264:	42a0      	cmp	r0, r4
 800f266:	d0cb      	beq.n	800f200 <__strftime.isra.0+0x208>
 800f268:	42a3      	cmp	r3, r4
 800f26a:	f67f aef7 	bls.w	800f05c <__strftime.isra.0+0x64>
 800f26e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800f272:	553a      	strb	r2, [r7, r4]
 800f274:	3401      	adds	r4, #1
 800f276:	e7f5      	b.n	800f264 <__strftime.isra.0+0x26c>
 800f278:	6933      	ldr	r3, [r6, #16]
 800f27a:	4a84      	ldr	r2, [pc, #528]	; (800f48c <__strftime.isra.0+0x494>)
 800f27c:	330c      	adds	r3, #12
 800f27e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800f282:	4648      	mov	r0, r9
 800f284:	f7f1 fe52 	bl	8000f2c <strlen>
 800f288:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f28c:	4420      	add	r0, r4
 800f28e:	1e6b      	subs	r3, r5, #1
 800f290:	42a0      	cmp	r0, r4
 800f292:	d0b5      	beq.n	800f200 <__strftime.isra.0+0x208>
 800f294:	42a3      	cmp	r3, r4
 800f296:	f67f aee1 	bls.w	800f05c <__strftime.isra.0+0x64>
 800f29a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800f29e:	553a      	strb	r2, [r7, r4]
 800f2a0:	3401      	adds	r4, #1
 800f2a2:	e7f5      	b.n	800f290 <__strftime.isra.0+0x298>
 800f2a4:	4b79      	ldr	r3, [pc, #484]	; (800f48c <__strftime.isra.0+0x494>)
 800f2a6:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800f2aa:	4648      	mov	r0, r9
 800f2ac:	f7f1 fe3e 	bl	8000f2c <strlen>
 800f2b0:	f899 3000 	ldrb.w	r3, [r9]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d0a3      	beq.n	800f200 <__strftime.isra.0+0x208>
 800f2b8:	4633      	mov	r3, r6
 800f2ba:	464a      	mov	r2, r9
 800f2bc:	1b29      	subs	r1, r5, r4
 800f2be:	1938      	adds	r0, r7, r4
 800f2c0:	f7ff fe9a 	bl	800eff8 <__strftime.isra.0>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	f77f aec9 	ble.w	800f05c <__strftime.isra.0+0x64>
 800f2ca:	4404      	add	r4, r0
 800f2cc:	e798      	b.n	800f200 <__strftime.isra.0+0x208>
 800f2ce:	4b6f      	ldr	r3, [pc, #444]	; (800f48c <__strftime.isra.0+0x494>)
 800f2d0:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800f2d4:	e7e9      	b.n	800f2aa <__strftime.isra.0+0x2b2>
 800f2d6:	4b6d      	ldr	r3, [pc, #436]	; (800f48c <__strftime.isra.0+0x494>)
 800f2d8:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800f2dc:	e7e5      	b.n	800f2aa <__strftime.isra.0+0x2b2>
 800f2de:	4b6b      	ldr	r3, [pc, #428]	; (800f48c <__strftime.isra.0+0x494>)
 800f2e0:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800f2e4:	e7e1      	b.n	800f2aa <__strftime.isra.0+0x2b2>
 800f2e6:	496a      	ldr	r1, [pc, #424]	; (800f490 <__strftime.isra.0+0x498>)
 800f2e8:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800f2ec:	458a      	cmp	sl, r1
 800f2ee:	bfac      	ite	ge
 800f2f0:	2100      	movge	r1, #0
 800f2f2:	2101      	movlt	r1, #1
 800f2f4:	f1ba 0f00 	cmp.w	sl, #0
 800f2f8:	db11      	blt.n	800f31e <__strftime.isra.0+0x326>
 800f2fa:	2064      	movs	r0, #100	; 0x64
 800f2fc:	fb9a f0f0 	sdiv	r0, sl, r0
 800f300:	3013      	adds	r0, #19
 800f302:	f1bb 0f00 	cmp.w	fp, #0
 800f306:	d014      	beq.n	800f332 <__strftime.isra.0+0x33a>
 800f308:	2863      	cmp	r0, #99	; 0x63
 800f30a:	dd27      	ble.n	800f35c <__strftime.isra.0+0x364>
 800f30c:	4b61      	ldr	r3, [pc, #388]	; (800f494 <__strftime.isra.0+0x49c>)
 800f30e:	4a62      	ldr	r2, [pc, #392]	; (800f498 <__strftime.isra.0+0x4a0>)
 800f310:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800f314:	bf18      	it	ne
 800f316:	461a      	movne	r2, r3
 800f318:	f8df c180 	ldr.w	ip, [pc, #384]	; 800f49c <__strftime.isra.0+0x4a4>
 800f31c:	e00c      	b.n	800f338 <__strftime.isra.0+0x340>
 800f31e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800f322:	9103      	str	r1, [sp, #12]
 800f324:	f007 f997 	bl	8016656 <abs>
 800f328:	2264      	movs	r2, #100	; 0x64
 800f32a:	9903      	ldr	r1, [sp, #12]
 800f32c:	fb90 f0f2 	sdiv	r0, r0, r2
 800f330:	e7e7      	b.n	800f302 <__strftime.isra.0+0x30a>
 800f332:	4a58      	ldr	r2, [pc, #352]	; (800f494 <__strftime.isra.0+0x49c>)
 800f334:	f8df c168 	ldr.w	ip, [pc, #360]	; 800f4a0 <__strftime.isra.0+0x4a8>
 800f338:	4b5a      	ldr	r3, [pc, #360]	; (800f4a4 <__strftime.isra.0+0x4ac>)
 800f33a:	9001      	str	r0, [sp, #4]
 800f33c:	f1b9 0f02 	cmp.w	r9, #2
 800f340:	bf2c      	ite	cs
 800f342:	ebc1 0109 	rsbcs	r1, r1, r9
 800f346:	f1c1 0102 	rsbcc	r1, r1, #2
 800f34a:	9100      	str	r1, [sp, #0]
 800f34c:	4950      	ldr	r1, [pc, #320]	; (800f490 <__strftime.isra.0+0x498>)
 800f34e:	458a      	cmp	sl, r1
 800f350:	bfa8      	it	ge
 800f352:	4613      	movge	r3, r2
 800f354:	4662      	mov	r2, ip
 800f356:	1b29      	subs	r1, r5, r4
 800f358:	1938      	adds	r0, r7, r4
 800f35a:	e029      	b.n	800f3b0 <__strftime.isra.0+0x3b8>
 800f35c:	4a4d      	ldr	r2, [pc, #308]	; (800f494 <__strftime.isra.0+0x49c>)
 800f35e:	e7db      	b.n	800f318 <__strftime.isra.0+0x320>
 800f360:	4951      	ldr	r1, [pc, #324]	; (800f4a8 <__strftime.isra.0+0x4b0>)
 800f362:	4a52      	ldr	r2, [pc, #328]	; (800f4ac <__strftime.isra.0+0x4b4>)
 800f364:	68f3      	ldr	r3, [r6, #12]
 800f366:	2864      	cmp	r0, #100	; 0x64
 800f368:	bf08      	it	eq
 800f36a:	460a      	moveq	r2, r1
 800f36c:	1b29      	subs	r1, r5, r4
 800f36e:	1938      	adds	r0, r7, r4
 800f370:	f000 fd70 	bl	800fe54 <sniprintf>
 800f374:	2800      	cmp	r0, #0
 800f376:	f6ff ae71 	blt.w	800f05c <__strftime.isra.0+0x64>
 800f37a:	4404      	add	r4, r0
 800f37c:	42a5      	cmp	r5, r4
 800f37e:	f63f af3f 	bhi.w	800f200 <__strftime.isra.0+0x208>
 800f382:	e66b      	b.n	800f05c <__strftime.isra.0+0x64>
 800f384:	6970      	ldr	r0, [r6, #20]
 800f386:	6933      	ldr	r3, [r6, #16]
 800f388:	68f2      	ldr	r2, [r6, #12]
 800f38a:	2800      	cmp	r0, #0
 800f38c:	eb07 0904 	add.w	r9, r7, r4
 800f390:	eba5 0a04 	sub.w	sl, r5, r4
 800f394:	f103 0b01 	add.w	fp, r3, #1
 800f398:	db0d      	blt.n	800f3b6 <__strftime.isra.0+0x3be>
 800f39a:	2164      	movs	r1, #100	; 0x64
 800f39c:	fb90 fcf1 	sdiv	ip, r0, r1
 800f3a0:	fb01 001c 	mls	r0, r1, ip, r0
 800f3a4:	e9cd 2000 	strd	r2, r0, [sp]
 800f3a8:	4a41      	ldr	r2, [pc, #260]	; (800f4b0 <__strftime.isra.0+0x4b8>)
 800f3aa:	465b      	mov	r3, fp
 800f3ac:	4651      	mov	r1, sl
 800f3ae:	4648      	mov	r0, r9
 800f3b0:	f000 fd50 	bl	800fe54 <sniprintf>
 800f3b4:	e7de      	b.n	800f374 <__strftime.isra.0+0x37c>
 800f3b6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800f3ba:	9203      	str	r2, [sp, #12]
 800f3bc:	f007 f94b 	bl	8016656 <abs>
 800f3c0:	2164      	movs	r1, #100	; 0x64
 800f3c2:	9a03      	ldr	r2, [sp, #12]
 800f3c4:	fb90 fcf1 	sdiv	ip, r0, r1
 800f3c8:	fb0c 0011 	mls	r0, ip, r1, r0
 800f3cc:	e7ea      	b.n	800f3a4 <__strftime.isra.0+0x3ac>
 800f3ce:	2225      	movs	r2, #37	; 0x25
 800f3d0:	f88d 2018 	strb.w	r2, [sp, #24]
 800f3d4:	f1bb 0f00 	cmp.w	fp, #0
 800f3d8:	d011      	beq.n	800f3fe <__strftime.isra.0+0x406>
 800f3da:	f1b9 0f06 	cmp.w	r9, #6
 800f3de:	bf38      	it	cc
 800f3e0:	f04f 0906 	movcc.w	r9, #6
 800f3e4:	f1b9 0306 	subs.w	r3, r9, #6
 800f3e8:	f88d b019 	strb.w	fp, [sp, #25]
 800f3ec:	d10c      	bne.n	800f408 <__strftime.isra.0+0x410>
 800f3ee:	f10d 001a 	add.w	r0, sp, #26
 800f3f2:	4930      	ldr	r1, [pc, #192]	; (800f4b4 <__strftime.isra.0+0x4bc>)
 800f3f4:	f007 f8f0 	bl	80165d8 <strcpy>
 800f3f8:	4633      	mov	r3, r6
 800f3fa:	aa06      	add	r2, sp, #24
 800f3fc:	e75e      	b.n	800f2bc <__strftime.isra.0+0x2c4>
 800f3fe:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800f402:	f04f 090a 	mov.w	r9, #10
 800f406:	e7ed      	b.n	800f3e4 <__strftime.isra.0+0x3ec>
 800f408:	4a2b      	ldr	r2, [pc, #172]	; (800f4b8 <__strftime.isra.0+0x4c0>)
 800f40a:	211e      	movs	r1, #30
 800f40c:	f10d 001a 	add.w	r0, sp, #26
 800f410:	f000 fd20 	bl	800fe54 <sniprintf>
 800f414:	2800      	cmp	r0, #0
 800f416:	ddea      	ble.n	800f3ee <__strftime.isra.0+0x3f6>
 800f418:	f10d 031a 	add.w	r3, sp, #26
 800f41c:	4418      	add	r0, r3
 800f41e:	e7e8      	b.n	800f3f2 <__strftime.isra.0+0x3fa>
 800f420:	4630      	mov	r0, r6
 800f422:	f7ff fd87 	bl	800ef34 <iso_year_adjust>
 800f426:	4681      	mov	r9, r0
 800f428:	6970      	ldr	r0, [r6, #20]
 800f42a:	2800      	cmp	r0, #0
 800f42c:	db11      	blt.n	800f452 <__strftime.isra.0+0x45a>
 800f42e:	2364      	movs	r3, #100	; 0x64
 800f430:	fb90 f2f3 	sdiv	r2, r0, r3
 800f434:	fb03 0012 	mls	r0, r3, r2, r0
 800f438:	2264      	movs	r2, #100	; 0x64
 800f43a:	4481      	add	r9, r0
 800f43c:	fb99 f3f2 	sdiv	r3, r9, r2
 800f440:	fb02 9913 	mls	r9, r2, r3, r9
 800f444:	4491      	add	r9, r2
 800f446:	fbb9 f3f2 	udiv	r3, r9, r2
 800f44a:	fb02 9313 	mls	r3, r2, r3, r9
 800f44e:	4a16      	ldr	r2, [pc, #88]	; (800f4a8 <__strftime.isra.0+0x4b0>)
 800f450:	e78c      	b.n	800f36c <__strftime.isra.0+0x374>
 800f452:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800f456:	f007 f8fe 	bl	8016656 <abs>
 800f45a:	2364      	movs	r3, #100	; 0x64
 800f45c:	f1b9 0f00 	cmp.w	r9, #0
 800f460:	fb90 f2f3 	sdiv	r2, r0, r3
 800f464:	fb02 0013 	mls	r0, r2, r3, r0
 800f468:	da07      	bge.n	800f47a <__strftime.isra.0+0x482>
 800f46a:	6972      	ldr	r2, [r6, #20]
 800f46c:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800f470:	429a      	cmp	r2, r3
 800f472:	bfb8      	it	lt
 800f474:	f04f 0901 	movlt.w	r9, #1
 800f478:	e7de      	b.n	800f438 <__strftime.isra.0+0x440>
 800f47a:	d0dd      	beq.n	800f438 <__strftime.isra.0+0x440>
 800f47c:	6972      	ldr	r2, [r6, #20]
 800f47e:	4b04      	ldr	r3, [pc, #16]	; (800f490 <__strftime.isra.0+0x498>)
 800f480:	429a      	cmp	r2, r3
 800f482:	bfb8      	it	lt
 800f484:	f04f 39ff 	movlt.w	r9, #4294967295	; 0xffffffff
 800f488:	e7d6      	b.n	800f438 <__strftime.isra.0+0x440>
 800f48a:	bf00      	nop
 800f48c:	080177c4 	.word	0x080177c4
 800f490:	fffff894 	.word	0xfffff894
 800f494:	08017f66 	.word	0x08017f66
 800f498:	08019687 	.word	0x08019687
 800f49c:	0801967f 	.word	0x0801967f
 800f4a0:	08019678 	.word	0x08019678
 800f4a4:	08019860 	.word	0x08019860
 800f4a8:	08019697 	.word	0x08019697
 800f4ac:	08019689 	.word	0x08019689
 800f4b0:	0801968d 	.word	0x0801968d
 800f4b4:	080196a0 	.word	0x080196a0
 800f4b8:	0801969c 	.word	0x0801969c
 800f4bc:	6971      	ldr	r1, [r6, #20]
 800f4be:	4ab5      	ldr	r2, [pc, #724]	; (800f794 <__strftime.isra.0+0x79c>)
 800f4c0:	4291      	cmp	r1, r2
 800f4c2:	bfac      	ite	ge
 800f4c4:	2300      	movge	r3, #0
 800f4c6:	2301      	movlt	r3, #1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800f4ce:	f7ff fd31 	bl	800ef34 <iso_year_adjust>
 800f4d2:	9904      	ldr	r1, [sp, #16]
 800f4d4:	2900      	cmp	r1, #0
 800f4d6:	4682      	mov	sl, r0
 800f4d8:	db2c      	blt.n	800f534 <__strftime.isra.0+0x53c>
 800f4da:	2264      	movs	r2, #100	; 0x64
 800f4dc:	fb91 f2f2 	sdiv	r2, r1, r2
 800f4e0:	3213      	adds	r2, #19
 800f4e2:	6970      	ldr	r0, [r6, #20]
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	db2f      	blt.n	800f548 <__strftime.isra.0+0x550>
 800f4e8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800f4ec:	fb90 fefc 	sdiv	lr, r0, ip
 800f4f0:	fb0c 001e 	mls	r0, ip, lr, r0
 800f4f4:	f1ba 0f00 	cmp.w	sl, #0
 800f4f8:	da35      	bge.n	800f566 <__strftime.isra.0+0x56e>
 800f4fa:	6971      	ldr	r1, [r6, #20]
 800f4fc:	4ba6      	ldr	r3, [pc, #664]	; (800f798 <__strftime.isra.0+0x7a0>)
 800f4fe:	4299      	cmp	r1, r3
 800f500:	db3c      	blt.n	800f57c <__strftime.isra.0+0x584>
 800f502:	4482      	add	sl, r0
 800f504:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800f508:	d13d      	bne.n	800f586 <__strftime.isra.0+0x58e>
 800f50a:	3a01      	subs	r2, #1
 800f50c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800f510:	9b03      	ldr	r3, [sp, #12]
 800f512:	2064      	movs	r0, #100	; 0x64
 800f514:	fb00 aa02 	mla	sl, r0, r2, sl
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f000 81ab 	beq.w	800f874 <__strftime.isra.0+0x87c>
 800f51e:	222d      	movs	r2, #45	; 0x2d
 800f520:	f88d 2018 	strb.w	r2, [sp, #24]
 800f524:	f1b9 0f00 	cmp.w	r9, #0
 800f528:	d001      	beq.n	800f52e <__strftime.isra.0+0x536>
 800f52a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f52e:	f10d 0219 	add.w	r2, sp, #25
 800f532:	e1aa      	b.n	800f88a <__strftime.isra.0+0x892>
 800f534:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800f538:	9104      	str	r1, [sp, #16]
 800f53a:	f007 f88c 	bl	8016656 <abs>
 800f53e:	2264      	movs	r2, #100	; 0x64
 800f540:	9904      	ldr	r1, [sp, #16]
 800f542:	fb90 f2f2 	sdiv	r2, r0, r2
 800f546:	e7cc      	b.n	800f4e2 <__strftime.isra.0+0x4ea>
 800f548:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800f54c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f550:	f007 f881 	bl	8016656 <abs>
 800f554:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800f558:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800f55c:	fb90 fefc 	sdiv	lr, r0, ip
 800f560:	fb0e 001c 	mls	r0, lr, ip, r0
 800f564:	e7c6      	b.n	800f4f4 <__strftime.isra.0+0x4fc>
 800f566:	d0cc      	beq.n	800f502 <__strftime.isra.0+0x50a>
 800f568:	4b8a      	ldr	r3, [pc, #552]	; (800f794 <__strftime.isra.0+0x79c>)
 800f56a:	4299      	cmp	r1, r3
 800f56c:	bfb4      	ite	lt
 800f56e:	2301      	movlt	r3, #1
 800f570:	2300      	movge	r3, #0
 800f572:	9303      	str	r3, [sp, #12]
 800f574:	bfb8      	it	lt
 800f576:	f04f 3aff 	movlt.w	sl, #4294967295	; 0xffffffff
 800f57a:	e7c2      	b.n	800f502 <__strftime.isra.0+0x50a>
 800f57c:	f04f 0a01 	mov.w	sl, #1
 800f580:	f8cd a00c 	str.w	sl, [sp, #12]
 800f584:	e7bd      	b.n	800f502 <__strftime.isra.0+0x50a>
 800f586:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800f58a:	bf04      	itt	eq
 800f58c:	3201      	addeq	r2, #1
 800f58e:	f04f 0a00 	moveq.w	sl, #0
 800f592:	e7bd      	b.n	800f510 <__strftime.isra.0+0x518>
 800f594:	4981      	ldr	r1, [pc, #516]	; (800f79c <__strftime.isra.0+0x7a4>)
 800f596:	4a82      	ldr	r2, [pc, #520]	; (800f7a0 <__strftime.isra.0+0x7a8>)
 800f598:	68b3      	ldr	r3, [r6, #8]
 800f59a:	286b      	cmp	r0, #107	; 0x6b
 800f59c:	bf08      	it	eq
 800f59e:	460a      	moveq	r2, r1
 800f5a0:	e6e4      	b.n	800f36c <__strftime.isra.0+0x374>
 800f5a2:	68b3      	ldr	r3, [r6, #8]
 800f5a4:	b163      	cbz	r3, 800f5c0 <__strftime.isra.0+0x5c8>
 800f5a6:	2b0c      	cmp	r3, #12
 800f5a8:	d004      	beq.n	800f5b4 <__strftime.isra.0+0x5bc>
 800f5aa:	210c      	movs	r1, #12
 800f5ac:	fb93 f2f1 	sdiv	r2, r3, r1
 800f5b0:	fb01 3312 	mls	r3, r1, r2, r3
 800f5b4:	497a      	ldr	r1, [pc, #488]	; (800f7a0 <__strftime.isra.0+0x7a8>)
 800f5b6:	4a79      	ldr	r2, [pc, #484]	; (800f79c <__strftime.isra.0+0x7a4>)
 800f5b8:	2849      	cmp	r0, #73	; 0x49
 800f5ba:	bf08      	it	eq
 800f5bc:	460a      	moveq	r2, r1
 800f5be:	e6d5      	b.n	800f36c <__strftime.isra.0+0x374>
 800f5c0:	230c      	movs	r3, #12
 800f5c2:	e7f7      	b.n	800f5b4 <__strftime.isra.0+0x5bc>
 800f5c4:	69f3      	ldr	r3, [r6, #28]
 800f5c6:	4a77      	ldr	r2, [pc, #476]	; (800f7a4 <__strftime.isra.0+0x7ac>)
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	e6cf      	b.n	800f36c <__strftime.isra.0+0x374>
 800f5cc:	6933      	ldr	r3, [r6, #16]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	e73d      	b.n	800f44e <__strftime.isra.0+0x456>
 800f5d2:	6873      	ldr	r3, [r6, #4]
 800f5d4:	e73b      	b.n	800f44e <__strftime.isra.0+0x456>
 800f5d6:	1e6b      	subs	r3, r5, #1
 800f5d8:	429c      	cmp	r4, r3
 800f5da:	f4bf ad3f 	bcs.w	800f05c <__strftime.isra.0+0x64>
 800f5de:	230a      	movs	r3, #10
 800f5e0:	553b      	strb	r3, [r7, r4]
 800f5e2:	3401      	adds	r4, #1
 800f5e4:	e60c      	b.n	800f200 <__strftime.isra.0+0x208>
 800f5e6:	68b3      	ldr	r3, [r6, #8]
 800f5e8:	2b0b      	cmp	r3, #11
 800f5ea:	4b6f      	ldr	r3, [pc, #444]	; (800f7a8 <__strftime.isra.0+0x7b0>)
 800f5ec:	bfd4      	ite	le
 800f5ee:	2200      	movle	r2, #0
 800f5f0:	2201      	movgt	r2, #1
 800f5f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f5f6:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800f5fa:	4648      	mov	r0, r9
 800f5fc:	f7f1 fc96 	bl	8000f2c <strlen>
 800f600:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800f604:	4420      	add	r0, r4
 800f606:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800f60a:	42a0      	cmp	r0, r4
 800f60c:	f43f adf8 	beq.w	800f200 <__strftime.isra.0+0x208>
 800f610:	45a4      	cmp	ip, r4
 800f612:	f67f ad23 	bls.w	800f05c <__strftime.isra.0+0x64>
 800f616:	f898 1000 	ldrb.w	r1, [r8]
 800f61a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800f61e:	2950      	cmp	r1, #80	; 0x50
 800f620:	d107      	bne.n	800f632 <__strftime.isra.0+0x63a>
 800f622:	4962      	ldr	r1, [pc, #392]	; (800f7ac <__strftime.isra.0+0x7b4>)
 800f624:	5cc9      	ldrb	r1, [r1, r3]
 800f626:	f001 0103 	and.w	r1, r1, #3
 800f62a:	2901      	cmp	r1, #1
 800f62c:	bf08      	it	eq
 800f62e:	3320      	addeq	r3, #32
 800f630:	b2db      	uxtb	r3, r3
 800f632:	553b      	strb	r3, [r7, r4]
 800f634:	3401      	adds	r4, #1
 800f636:	e7e8      	b.n	800f60a <__strftime.isra.0+0x612>
 800f638:	6873      	ldr	r3, [r6, #4]
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	4a5c      	ldr	r2, [pc, #368]	; (800f7b0 <__strftime.isra.0+0x7b8>)
 800f63e:	68b3      	ldr	r3, [r6, #8]
 800f640:	1b29      	subs	r1, r5, r4
 800f642:	1938      	adds	r0, r7, r4
 800f644:	f000 fc06 	bl	800fe54 <sniprintf>
 800f648:	e694      	b.n	800f374 <__strftime.isra.0+0x37c>
 800f64a:	6a33      	ldr	r3, [r6, #32]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	db7a      	blt.n	800f746 <__strftime.isra.0+0x74e>
 800f650:	f000 fa22 	bl	800fa98 <__tz_lock>
 800f654:	9b02      	ldr	r3, [sp, #8]
 800f656:	b90b      	cbnz	r3, 800f65c <__strftime.isra.0+0x664>
 800f658:	f000 fa2a 	bl	800fab0 <_tzset_unlocked>
 800f65c:	f000 fbea 	bl	800fe34 <__gettzinfo>
 800f660:	6a33      	ldr	r3, [r6, #32]
 800f662:	2b00      	cmp	r3, #0
 800f664:	bfd4      	ite	le
 800f666:	2200      	movle	r2, #0
 800f668:	2201      	movgt	r2, #1
 800f66a:	2328      	movs	r3, #40	; 0x28
 800f66c:	fb02 3303 	mla	r3, r2, r3, r3
 800f670:	58c3      	ldr	r3, [r0, r3]
 800f672:	f1c3 0900 	rsb	r9, r3, #0
 800f676:	f000 fa15 	bl	800faa4 <__tz_unlock>
 800f67a:	2301      	movs	r3, #1
 800f67c:	9302      	str	r3, [sp, #8]
 800f67e:	6972      	ldr	r2, [r6, #20]
 800f680:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800f684:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800f688:	f16c 0c00 	sbc.w	ip, ip, #0
 800f68c:	f1bc 0f00 	cmp.w	ip, #0
 800f690:	eba5 0104 	sub.w	r1, r5, r4
 800f694:	eb07 0004 	add.w	r0, r7, r4
 800f698:	da02      	bge.n	800f6a0 <__strftime.isra.0+0x6a8>
 800f69a:	3303      	adds	r3, #3
 800f69c:	f14c 0c00 	adc.w	ip, ip, #0
 800f6a0:	089b      	lsrs	r3, r3, #2
 800f6a2:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800f6a6:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 800f6aa:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800f6ae:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800f6b2:	fb9a fefe 	sdiv	lr, sl, lr
 800f6b6:	ebb3 030e 	subs.w	r3, r3, lr
 800f6ba:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800f6be:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800f6c2:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800f6c6:	fb9a fefe 	sdiv	lr, sl, lr
 800f6ca:	eb13 030e 	adds.w	r3, r3, lr
 800f6ce:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800f6d2:	3a46      	subs	r2, #70	; 0x46
 800f6d4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800f6d8:	fb0c f202 	mul.w	r2, ip, r2
 800f6dc:	189b      	adds	r3, r3, r2
 800f6de:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800f6e2:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800f6e6:	f04f 0c18 	mov.w	ip, #24
 800f6ea:	eb13 030e 	adds.w	r3, r3, lr
 800f6ee:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f6f2:	fba3 3e0c 	umull	r3, lr, r3, ip
 800f6f6:	fb0c e202 	mla	r2, ip, r2, lr
 800f6fa:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800f6fe:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800f702:	eb13 030e 	adds.w	r3, r3, lr
 800f706:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800f70a:	fba3 320c 	umull	r3, r2, r3, ip
 800f70e:	fb0c 220e 	mla	r2, ip, lr, r2
 800f712:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800f716:	eb13 030e 	adds.w	r3, r3, lr
 800f71a:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f71e:	fba3 3e0c 	umull	r3, lr, r3, ip
 800f722:	fb0c e202 	mla	r2, ip, r2, lr
 800f726:	f8d6 e000 	ldr.w	lr, [r6]
 800f72a:	eb13 030e 	adds.w	r3, r3, lr
 800f72e:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800f732:	ebb3 0309 	subs.w	r3, r3, r9
 800f736:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800f73a:	e9cd 3200 	strd	r3, r2, [sp]
 800f73e:	4a1d      	ldr	r2, [pc, #116]	; (800f7b4 <__strftime.isra.0+0x7bc>)
 800f740:	f000 fb88 	bl	800fe54 <sniprintf>
 800f744:	e616      	b.n	800f374 <__strftime.isra.0+0x37c>
 800f746:	f04f 0900 	mov.w	r9, #0
 800f74a:	e798      	b.n	800f67e <__strftime.isra.0+0x686>
 800f74c:	6833      	ldr	r3, [r6, #0]
 800f74e:	e67e      	b.n	800f44e <__strftime.isra.0+0x456>
 800f750:	1e6b      	subs	r3, r5, #1
 800f752:	429c      	cmp	r4, r3
 800f754:	f4bf ac82 	bcs.w	800f05c <__strftime.isra.0+0x64>
 800f758:	2309      	movs	r3, #9
 800f75a:	e741      	b.n	800f5e0 <__strftime.isra.0+0x5e8>
 800f75c:	6833      	ldr	r3, [r6, #0]
 800f75e:	9301      	str	r3, [sp, #4]
 800f760:	6873      	ldr	r3, [r6, #4]
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	4a14      	ldr	r2, [pc, #80]	; (800f7b8 <__strftime.isra.0+0x7c0>)
 800f766:	68b3      	ldr	r3, [r6, #8]
 800f768:	e5f5      	b.n	800f356 <__strftime.isra.0+0x35e>
 800f76a:	1e6b      	subs	r3, r5, #1
 800f76c:	429c      	cmp	r4, r3
 800f76e:	f4bf ac75 	bcs.w	800f05c <__strftime.isra.0+0x64>
 800f772:	69b3      	ldr	r3, [r6, #24]
 800f774:	1c62      	adds	r2, r4, #1
 800f776:	b91b      	cbnz	r3, 800f780 <__strftime.isra.0+0x788>
 800f778:	2337      	movs	r3, #55	; 0x37
 800f77a:	553b      	strb	r3, [r7, r4]
 800f77c:	4614      	mov	r4, r2
 800f77e:	e53f      	b.n	800f200 <__strftime.isra.0+0x208>
 800f780:	3330      	adds	r3, #48	; 0x30
 800f782:	e7fa      	b.n	800f77a <__strftime.isra.0+0x782>
 800f784:	69f3      	ldr	r3, [r6, #28]
 800f786:	69b2      	ldr	r2, [r6, #24]
 800f788:	3307      	adds	r3, #7
 800f78a:	1a9b      	subs	r3, r3, r2
 800f78c:	2207      	movs	r2, #7
 800f78e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f792:	e65c      	b.n	800f44e <__strftime.isra.0+0x456>
 800f794:	fffff894 	.word	0xfffff894
 800f798:	fffff895 	.word	0xfffff895
 800f79c:	08019689 	.word	0x08019689
 800f7a0:	08019697 	.word	0x08019697
 800f7a4:	080196ac 	.word	0x080196ac
 800f7a8:	080177c4 	.word	0x080177c4
 800f7ac:	08019578 	.word	0x08019578
 800f7b0:	080196bb 	.word	0x080196bb
 800f7b4:	080196b1 	.word	0x080196b1
 800f7b8:	080196b6 	.word	0x080196b6
 800f7bc:	4630      	mov	r0, r6
 800f7be:	f7ff fbb9 	bl	800ef34 <iso_year_adjust>
 800f7c2:	69b2      	ldr	r2, [r6, #24]
 800f7c4:	b132      	cbz	r2, 800f7d4 <__strftime.isra.0+0x7dc>
 800f7c6:	3a01      	subs	r2, #1
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	dc28      	bgt.n	800f81e <__strftime.isra.0+0x826>
 800f7cc:	69f3      	ldr	r3, [r6, #28]
 800f7ce:	d103      	bne.n	800f7d8 <__strftime.isra.0+0x7e0>
 800f7d0:	330a      	adds	r3, #10
 800f7d2:	e7da      	b.n	800f78a <__strftime.isra.0+0x792>
 800f7d4:	2206      	movs	r2, #6
 800f7d6:	e7f7      	b.n	800f7c8 <__strftime.isra.0+0x7d0>
 800f7d8:	6971      	ldr	r1, [r6, #20]
 800f7da:	2900      	cmp	r1, #0
 800f7dc:	eba2 0203 	sub.w	r2, r2, r3
 800f7e0:	f240 736b 	movw	r3, #1899	; 0x76b
 800f7e4:	bfa8      	it	ge
 800f7e6:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800f7ea:	440b      	add	r3, r1
 800f7ec:	0799      	lsls	r1, r3, #30
 800f7ee:	d105      	bne.n	800f7fc <__strftime.isra.0+0x804>
 800f7f0:	2064      	movs	r0, #100	; 0x64
 800f7f2:	fb93 f1f0 	sdiv	r1, r3, r0
 800f7f6:	fb00 3111 	mls	r1, r0, r1, r3
 800f7fa:	b971      	cbnz	r1, 800f81a <__strftime.isra.0+0x822>
 800f7fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800f800:	fb93 f0f1 	sdiv	r0, r3, r1
 800f804:	fb01 3310 	mls	r3, r1, r0, r3
 800f808:	fab3 f383 	clz	r3, r3
 800f80c:	095b      	lsrs	r3, r3, #5
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	2b05      	cmp	r3, #5
 800f812:	bfb4      	ite	lt
 800f814:	2335      	movlt	r3, #53	; 0x35
 800f816:	2334      	movge	r3, #52	; 0x34
 800f818:	e619      	b.n	800f44e <__strftime.isra.0+0x456>
 800f81a:	2301      	movs	r3, #1
 800f81c:	e7f7      	b.n	800f80e <__strftime.isra.0+0x816>
 800f81e:	2301      	movs	r3, #1
 800f820:	e615      	b.n	800f44e <__strftime.isra.0+0x456>
 800f822:	1e6b      	subs	r3, r5, #1
 800f824:	429c      	cmp	r4, r3
 800f826:	f4bf ac19 	bcs.w	800f05c <__strftime.isra.0+0x64>
 800f82a:	69b3      	ldr	r3, [r6, #24]
 800f82c:	3330      	adds	r3, #48	; 0x30
 800f82e:	e6d7      	b.n	800f5e0 <__strftime.isra.0+0x5e8>
 800f830:	69b2      	ldr	r2, [r6, #24]
 800f832:	b11a      	cbz	r2, 800f83c <__strftime.isra.0+0x844>
 800f834:	3a01      	subs	r2, #1
 800f836:	69f3      	ldr	r3, [r6, #28]
 800f838:	3307      	adds	r3, #7
 800f83a:	e7a6      	b.n	800f78a <__strftime.isra.0+0x792>
 800f83c:	2206      	movs	r2, #6
 800f83e:	e7fa      	b.n	800f836 <__strftime.isra.0+0x83e>
 800f840:	6970      	ldr	r0, [r6, #20]
 800f842:	2800      	cmp	r0, #0
 800f844:	db05      	blt.n	800f852 <__strftime.isra.0+0x85a>
 800f846:	2364      	movs	r3, #100	; 0x64
 800f848:	fb90 f2f3 	sdiv	r2, r0, r3
 800f84c:	fb02 0313 	mls	r3, r2, r3, r0
 800f850:	e5fd      	b.n	800f44e <__strftime.isra.0+0x456>
 800f852:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800f856:	f006 fefe 	bl	8016656 <abs>
 800f85a:	e7f4      	b.n	800f846 <__strftime.isra.0+0x84e>
 800f85c:	6972      	ldr	r2, [r6, #20]
 800f85e:	494c      	ldr	r1, [pc, #304]	; (800f990 <__strftime.isra.0+0x998>)
 800f860:	428a      	cmp	r2, r1
 800f862:	da05      	bge.n	800f870 <__strftime.isra.0+0x878>
 800f864:	202d      	movs	r0, #45	; 0x2d
 800f866:	f88d 0018 	strb.w	r0, [sp, #24]
 800f86a:	eba1 0a02 	sub.w	sl, r1, r2
 800f86e:	e659      	b.n	800f524 <__strftime.isra.0+0x52c>
 800f870:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800f874:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800f878:	d106      	bne.n	800f888 <__strftime.isra.0+0x890>
 800f87a:	f242 720f 	movw	r2, #9999	; 0x270f
 800f87e:	4592      	cmp	sl, r2
 800f880:	d902      	bls.n	800f888 <__strftime.isra.0+0x890>
 800f882:	f88d b018 	strb.w	fp, [sp, #24]
 800f886:	e64d      	b.n	800f524 <__strftime.isra.0+0x52c>
 800f888:	aa06      	add	r2, sp, #24
 800f88a:	2125      	movs	r1, #37	; 0x25
 800f88c:	7011      	strb	r1, [r2, #0]
 800f88e:	f1bb 0f00 	cmp.w	fp, #0
 800f892:	d108      	bne.n	800f8a6 <__strftime.isra.0+0x8ae>
 800f894:	1c50      	adds	r0, r2, #1
 800f896:	493f      	ldr	r1, [pc, #252]	; (800f994 <__strftime.isra.0+0x99c>)
 800f898:	f006 fe9e 	bl	80165d8 <strcpy>
 800f89c:	f8cd a000 	str.w	sl, [sp]
 800f8a0:	464b      	mov	r3, r9
 800f8a2:	aa06      	add	r2, sp, #24
 800f8a4:	e6cc      	b.n	800f640 <__strftime.isra.0+0x648>
 800f8a6:	2330      	movs	r3, #48	; 0x30
 800f8a8:	1c90      	adds	r0, r2, #2
 800f8aa:	7053      	strb	r3, [r2, #1]
 800f8ac:	e7f3      	b.n	800f896 <__strftime.isra.0+0x89e>
 800f8ae:	6a33      	ldr	r3, [r6, #32]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f6ff aca5 	blt.w	800f200 <__strftime.isra.0+0x208>
 800f8b6:	f000 f8ef 	bl	800fa98 <__tz_lock>
 800f8ba:	9b02      	ldr	r3, [sp, #8]
 800f8bc:	b90b      	cbnz	r3, 800f8c2 <__strftime.isra.0+0x8ca>
 800f8be:	f000 f8f7 	bl	800fab0 <_tzset_unlocked>
 800f8c2:	f000 fab7 	bl	800fe34 <__gettzinfo>
 800f8c6:	6a33      	ldr	r3, [r6, #32]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	bfd4      	ite	le
 800f8cc:	2200      	movle	r2, #0
 800f8ce:	2201      	movgt	r2, #1
 800f8d0:	2328      	movs	r3, #40	; 0x28
 800f8d2:	fb02 3303 	mla	r3, r2, r3, r3
 800f8d6:	eb07 0a04 	add.w	sl, r7, r4
 800f8da:	58c3      	ldr	r3, [r0, r3]
 800f8dc:	f1c3 0900 	rsb	r9, r3, #0
 800f8e0:	f000 f8e0 	bl	800faa4 <__tz_unlock>
 800f8e4:	233c      	movs	r3, #60	; 0x3c
 800f8e6:	fb99 f0f3 	sdiv	r0, r9, r3
 800f8ea:	f006 febf 	bl	801666c <labs>
 800f8ee:	233c      	movs	r3, #60	; 0x3c
 800f8f0:	eba5 0b04 	sub.w	fp, r5, r4
 800f8f4:	fb90 f2f3 	sdiv	r2, r0, r3
 800f8f8:	fb02 0013 	mls	r0, r2, r3, r0
 800f8fc:	9000      	str	r0, [sp, #0]
 800f8fe:	4a26      	ldr	r2, [pc, #152]	; (800f998 <__strftime.isra.0+0x9a0>)
 800f900:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f904:	4659      	mov	r1, fp
 800f906:	4650      	mov	r0, sl
 800f908:	fb99 f3f3 	sdiv	r3, r9, r3
 800f90c:	f000 faa2 	bl	800fe54 <sniprintf>
 800f910:	2800      	cmp	r0, #0
 800f912:	f6ff aba3 	blt.w	800f05c <__strftime.isra.0+0x64>
 800f916:	4404      	add	r4, r0
 800f918:	42a5      	cmp	r5, r4
 800f91a:	f67f ab9f 	bls.w	800f05c <__strftime.isra.0+0x64>
 800f91e:	2301      	movs	r3, #1
 800f920:	9302      	str	r3, [sp, #8]
 800f922:	e46d      	b.n	800f200 <__strftime.isra.0+0x208>
 800f924:	6a33      	ldr	r3, [r6, #32]
 800f926:	2b00      	cmp	r3, #0
 800f928:	f6ff ac6a 	blt.w	800f200 <__strftime.isra.0+0x208>
 800f92c:	f000 f8b4 	bl	800fa98 <__tz_lock>
 800f930:	9b02      	ldr	r3, [sp, #8]
 800f932:	b90b      	cbnz	r3, 800f938 <__strftime.isra.0+0x940>
 800f934:	f000 f8bc 	bl	800fab0 <_tzset_unlocked>
 800f938:	6a33      	ldr	r3, [r6, #32]
 800f93a:	4a18      	ldr	r2, [pc, #96]	; (800f99c <__strftime.isra.0+0x9a4>)
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	bfd4      	ite	le
 800f940:	2300      	movle	r3, #0
 800f942:	2301      	movgt	r3, #1
 800f944:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800f948:	4648      	mov	r0, r9
 800f94a:	f7f1 faef 	bl	8000f2c <strlen>
 800f94e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f952:	4420      	add	r0, r4
 800f954:	1e6b      	subs	r3, r5, #1
 800f956:	42a0      	cmp	r0, r4
 800f958:	d102      	bne.n	800f960 <__strftime.isra.0+0x968>
 800f95a:	f000 f8a3 	bl	800faa4 <__tz_unlock>
 800f95e:	e7de      	b.n	800f91e <__strftime.isra.0+0x926>
 800f960:	42a3      	cmp	r3, r4
 800f962:	d904      	bls.n	800f96e <__strftime.isra.0+0x976>
 800f964:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800f968:	553a      	strb	r2, [r7, r4]
 800f96a:	3401      	adds	r4, #1
 800f96c:	e7f3      	b.n	800f956 <__strftime.isra.0+0x95e>
 800f96e:	f000 f899 	bl	800faa4 <__tz_unlock>
 800f972:	f7ff bb73 	b.w	800f05c <__strftime.isra.0+0x64>
 800f976:	1e6b      	subs	r3, r5, #1
 800f978:	429c      	cmp	r4, r3
 800f97a:	f4bf ab6f 	bcs.w	800f05c <__strftime.isra.0+0x64>
 800f97e:	2325      	movs	r3, #37	; 0x25
 800f980:	e62e      	b.n	800f5e0 <__strftime.isra.0+0x5e8>
 800f982:	b10d      	cbz	r5, 800f988 <__strftime.isra.0+0x990>
 800f984:	2300      	movs	r3, #0
 800f986:	553b      	strb	r3, [r7, r4]
 800f988:	4620      	mov	r0, r4
 800f98a:	b00f      	add	sp, #60	; 0x3c
 800f98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f990:	fffff894 	.word	0xfffff894
 800f994:	080196a8 	.word	0x080196a8
 800f998:	080196c5 	.word	0x080196c5
 800f99c:	200002a0 	.word	0x200002a0

0800f9a0 <_strtoul_l.constprop.0>:
 800f9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9a4:	4f36      	ldr	r7, [pc, #216]	; (800fa80 <_strtoul_l.constprop.0+0xe0>)
 800f9a6:	4686      	mov	lr, r0
 800f9a8:	460d      	mov	r5, r1
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9b0:	5de6      	ldrb	r6, [r4, r7]
 800f9b2:	f016 0608 	ands.w	r6, r6, #8
 800f9b6:	d1f8      	bne.n	800f9aa <_strtoul_l.constprop.0+0xa>
 800f9b8:	2c2d      	cmp	r4, #45	; 0x2d
 800f9ba:	d12f      	bne.n	800fa1c <_strtoul_l.constprop.0+0x7c>
 800f9bc:	782c      	ldrb	r4, [r5, #0]
 800f9be:	2601      	movs	r6, #1
 800f9c0:	1c85      	adds	r5, r0, #2
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d057      	beq.n	800fa76 <_strtoul_l.constprop.0+0xd6>
 800f9c6:	2b10      	cmp	r3, #16
 800f9c8:	d109      	bne.n	800f9de <_strtoul_l.constprop.0+0x3e>
 800f9ca:	2c30      	cmp	r4, #48	; 0x30
 800f9cc:	d107      	bne.n	800f9de <_strtoul_l.constprop.0+0x3e>
 800f9ce:	7828      	ldrb	r0, [r5, #0]
 800f9d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f9d4:	2858      	cmp	r0, #88	; 0x58
 800f9d6:	d149      	bne.n	800fa6c <_strtoul_l.constprop.0+0xcc>
 800f9d8:	786c      	ldrb	r4, [r5, #1]
 800f9da:	2310      	movs	r3, #16
 800f9dc:	3502      	adds	r5, #2
 800f9de:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f9e2:	2700      	movs	r7, #0
 800f9e4:	fbb8 f8f3 	udiv	r8, r8, r3
 800f9e8:	fb03 f908 	mul.w	r9, r3, r8
 800f9ec:	ea6f 0909 	mvn.w	r9, r9
 800f9f0:	4638      	mov	r0, r7
 800f9f2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f9f6:	f1bc 0f09 	cmp.w	ip, #9
 800f9fa:	d814      	bhi.n	800fa26 <_strtoul_l.constprop.0+0x86>
 800f9fc:	4664      	mov	r4, ip
 800f9fe:	42a3      	cmp	r3, r4
 800fa00:	dd22      	ble.n	800fa48 <_strtoul_l.constprop.0+0xa8>
 800fa02:	2f00      	cmp	r7, #0
 800fa04:	db1d      	blt.n	800fa42 <_strtoul_l.constprop.0+0xa2>
 800fa06:	4580      	cmp	r8, r0
 800fa08:	d31b      	bcc.n	800fa42 <_strtoul_l.constprop.0+0xa2>
 800fa0a:	d101      	bne.n	800fa10 <_strtoul_l.constprop.0+0x70>
 800fa0c:	45a1      	cmp	r9, r4
 800fa0e:	db18      	blt.n	800fa42 <_strtoul_l.constprop.0+0xa2>
 800fa10:	fb00 4003 	mla	r0, r0, r3, r4
 800fa14:	2701      	movs	r7, #1
 800fa16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa1a:	e7ea      	b.n	800f9f2 <_strtoul_l.constprop.0+0x52>
 800fa1c:	2c2b      	cmp	r4, #43	; 0x2b
 800fa1e:	bf04      	itt	eq
 800fa20:	782c      	ldrbeq	r4, [r5, #0]
 800fa22:	1c85      	addeq	r5, r0, #2
 800fa24:	e7cd      	b.n	800f9c2 <_strtoul_l.constprop.0+0x22>
 800fa26:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fa2a:	f1bc 0f19 	cmp.w	ip, #25
 800fa2e:	d801      	bhi.n	800fa34 <_strtoul_l.constprop.0+0x94>
 800fa30:	3c37      	subs	r4, #55	; 0x37
 800fa32:	e7e4      	b.n	800f9fe <_strtoul_l.constprop.0+0x5e>
 800fa34:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fa38:	f1bc 0f19 	cmp.w	ip, #25
 800fa3c:	d804      	bhi.n	800fa48 <_strtoul_l.constprop.0+0xa8>
 800fa3e:	3c57      	subs	r4, #87	; 0x57
 800fa40:	e7dd      	b.n	800f9fe <_strtoul_l.constprop.0+0x5e>
 800fa42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fa46:	e7e6      	b.n	800fa16 <_strtoul_l.constprop.0+0x76>
 800fa48:	2f00      	cmp	r7, #0
 800fa4a:	da07      	bge.n	800fa5c <_strtoul_l.constprop.0+0xbc>
 800fa4c:	2322      	movs	r3, #34	; 0x22
 800fa4e:	f8ce 3000 	str.w	r3, [lr]
 800fa52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa56:	b932      	cbnz	r2, 800fa66 <_strtoul_l.constprop.0+0xc6>
 800fa58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa5c:	b106      	cbz	r6, 800fa60 <_strtoul_l.constprop.0+0xc0>
 800fa5e:	4240      	negs	r0, r0
 800fa60:	2a00      	cmp	r2, #0
 800fa62:	d0f9      	beq.n	800fa58 <_strtoul_l.constprop.0+0xb8>
 800fa64:	b107      	cbz	r7, 800fa68 <_strtoul_l.constprop.0+0xc8>
 800fa66:	1e69      	subs	r1, r5, #1
 800fa68:	6011      	str	r1, [r2, #0]
 800fa6a:	e7f5      	b.n	800fa58 <_strtoul_l.constprop.0+0xb8>
 800fa6c:	2430      	movs	r4, #48	; 0x30
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1b5      	bne.n	800f9de <_strtoul_l.constprop.0+0x3e>
 800fa72:	2308      	movs	r3, #8
 800fa74:	e7b3      	b.n	800f9de <_strtoul_l.constprop.0+0x3e>
 800fa76:	2c30      	cmp	r4, #48	; 0x30
 800fa78:	d0a9      	beq.n	800f9ce <_strtoul_l.constprop.0+0x2e>
 800fa7a:	230a      	movs	r3, #10
 800fa7c:	e7af      	b.n	800f9de <_strtoul_l.constprop.0+0x3e>
 800fa7e:	bf00      	nop
 800fa80:	08019578 	.word	0x08019578

0800fa84 <strtoul>:
 800fa84:	4613      	mov	r3, r2
 800fa86:	460a      	mov	r2, r1
 800fa88:	4601      	mov	r1, r0
 800fa8a:	4802      	ldr	r0, [pc, #8]	; (800fa94 <strtoul+0x10>)
 800fa8c:	6800      	ldr	r0, [r0, #0]
 800fa8e:	f7ff bf87 	b.w	800f9a0 <_strtoul_l.constprop.0>
 800fa92:	bf00      	nop
 800fa94:	2000023c 	.word	0x2000023c

0800fa98 <__tz_lock>:
 800fa98:	4801      	ldr	r0, [pc, #4]	; (800faa0 <__tz_lock+0x8>)
 800fa9a:	f001 bd89 	b.w	80115b0 <__retarget_lock_acquire>
 800fa9e:	bf00      	nop
 800faa0:	200003bc 	.word	0x200003bc

0800faa4 <__tz_unlock>:
 800faa4:	4801      	ldr	r0, [pc, #4]	; (800faac <__tz_unlock+0x8>)
 800faa6:	f001 bd8f 	b.w	80115c8 <__retarget_lock_release>
 800faaa:	bf00      	nop
 800faac:	200003bc 	.word	0x200003bc

0800fab0 <_tzset_unlocked>:
 800fab0:	4b01      	ldr	r3, [pc, #4]	; (800fab8 <_tzset_unlocked+0x8>)
 800fab2:	6818      	ldr	r0, [r3, #0]
 800fab4:	f000 b802 	b.w	800fabc <_tzset_unlocked_r>
 800fab8:	2000023c 	.word	0x2000023c

0800fabc <_tzset_unlocked_r>:
 800fabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac0:	b08d      	sub	sp, #52	; 0x34
 800fac2:	4607      	mov	r7, r0
 800fac4:	f000 f9b6 	bl	800fe34 <__gettzinfo>
 800fac8:	49b0      	ldr	r1, [pc, #704]	; (800fd8c <_tzset_unlocked_r+0x2d0>)
 800faca:	4eb1      	ldr	r6, [pc, #708]	; (800fd90 <_tzset_unlocked_r+0x2d4>)
 800facc:	4605      	mov	r5, r0
 800face:	4638      	mov	r0, r7
 800fad0:	f006 fdc5 	bl	801665e <_getenv_r>
 800fad4:	4604      	mov	r4, r0
 800fad6:	b970      	cbnz	r0, 800faf6 <_tzset_unlocked_r+0x3a>
 800fad8:	4bae      	ldr	r3, [pc, #696]	; (800fd94 <_tzset_unlocked_r+0x2d8>)
 800fada:	4aaf      	ldr	r2, [pc, #700]	; (800fd98 <_tzset_unlocked_r+0x2dc>)
 800fadc:	6018      	str	r0, [r3, #0]
 800fade:	4baf      	ldr	r3, [pc, #700]	; (800fd9c <_tzset_unlocked_r+0x2e0>)
 800fae0:	6018      	str	r0, [r3, #0]
 800fae2:	4baf      	ldr	r3, [pc, #700]	; (800fda0 <_tzset_unlocked_r+0x2e4>)
 800fae4:	6830      	ldr	r0, [r6, #0]
 800fae6:	e9c3 2200 	strd	r2, r2, [r3]
 800faea:	f7ff f967 	bl	800edbc <free>
 800faee:	6034      	str	r4, [r6, #0]
 800faf0:	b00d      	add	sp, #52	; 0x34
 800faf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf6:	6831      	ldr	r1, [r6, #0]
 800faf8:	2900      	cmp	r1, #0
 800fafa:	d162      	bne.n	800fbc2 <_tzset_unlocked_r+0x106>
 800fafc:	6830      	ldr	r0, [r6, #0]
 800fafe:	f7ff f95d 	bl	800edbc <free>
 800fb02:	4620      	mov	r0, r4
 800fb04:	f7f1 fa12 	bl	8000f2c <strlen>
 800fb08:	1c41      	adds	r1, r0, #1
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	f7ff f9a8 	bl	800ee60 <_malloc_r>
 800fb10:	6030      	str	r0, [r6, #0]
 800fb12:	2800      	cmp	r0, #0
 800fb14:	d15a      	bne.n	800fbcc <_tzset_unlocked_r+0x110>
 800fb16:	7823      	ldrb	r3, [r4, #0]
 800fb18:	4aa2      	ldr	r2, [pc, #648]	; (800fda4 <_tzset_unlocked_r+0x2e8>)
 800fb1a:	49a3      	ldr	r1, [pc, #652]	; (800fda8 <_tzset_unlocked_r+0x2ec>)
 800fb1c:	2b3a      	cmp	r3, #58	; 0x3a
 800fb1e:	bf08      	it	eq
 800fb20:	3401      	addeq	r4, #1
 800fb22:	ae0a      	add	r6, sp, #40	; 0x28
 800fb24:	4633      	mov	r3, r6
 800fb26:	4620      	mov	r0, r4
 800fb28:	f000 f9c8 	bl	800febc <siscanf>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	dddf      	ble.n	800faf0 <_tzset_unlocked_r+0x34>
 800fb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb32:	18e7      	adds	r7, r4, r3
 800fb34:	5ce3      	ldrb	r3, [r4, r3]
 800fb36:	2b2d      	cmp	r3, #45	; 0x2d
 800fb38:	d14c      	bne.n	800fbd4 <_tzset_unlocked_r+0x118>
 800fb3a:	3701      	adds	r7, #1
 800fb3c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800fb40:	f10d 0a20 	add.w	sl, sp, #32
 800fb44:	f10d 0b1e 	add.w	fp, sp, #30
 800fb48:	2400      	movs	r4, #0
 800fb4a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800fb4e:	4997      	ldr	r1, [pc, #604]	; (800fdac <_tzset_unlocked_r+0x2f0>)
 800fb50:	9603      	str	r6, [sp, #12]
 800fb52:	f8cd b000 	str.w	fp, [sp]
 800fb56:	4633      	mov	r3, r6
 800fb58:	aa07      	add	r2, sp, #28
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	f8ad 401e 	strh.w	r4, [sp, #30]
 800fb60:	f8ad 4020 	strh.w	r4, [sp, #32]
 800fb64:	f000 f9aa 	bl	800febc <siscanf>
 800fb68:	42a0      	cmp	r0, r4
 800fb6a:	ddc1      	ble.n	800faf0 <_tzset_unlocked_r+0x34>
 800fb6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fb70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fb74:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800fdb0 <_tzset_unlocked_r+0x2f4>
 800fb78:	213c      	movs	r1, #60	; 0x3c
 800fb7a:	fb01 3302 	mla	r3, r1, r2, r3
 800fb7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800fb82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800fb86:	fb01 3302 	mla	r3, r1, r2, r3
 800fb8a:	fb08 f303 	mul.w	r3, r8, r3
 800fb8e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800fda0 <_tzset_unlocked_r+0x2e4>
 800fb92:	62ab      	str	r3, [r5, #40]	; 0x28
 800fb94:	4b83      	ldr	r3, [pc, #524]	; (800fda4 <_tzset_unlocked_r+0x2e8>)
 800fb96:	f8c8 3000 	str.w	r3, [r8]
 800fb9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb9c:	4982      	ldr	r1, [pc, #520]	; (800fda8 <_tzset_unlocked_r+0x2ec>)
 800fb9e:	441f      	add	r7, r3
 800fba0:	464a      	mov	r2, r9
 800fba2:	4633      	mov	r3, r6
 800fba4:	4638      	mov	r0, r7
 800fba6:	f000 f989 	bl	800febc <siscanf>
 800fbaa:	42a0      	cmp	r0, r4
 800fbac:	dc18      	bgt.n	800fbe0 <_tzset_unlocked_r+0x124>
 800fbae:	f8d8 3000 	ldr.w	r3, [r8]
 800fbb2:	f8c8 3004 	str.w	r3, [r8, #4]
 800fbb6:	4b77      	ldr	r3, [pc, #476]	; (800fd94 <_tzset_unlocked_r+0x2d8>)
 800fbb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	4b77      	ldr	r3, [pc, #476]	; (800fd9c <_tzset_unlocked_r+0x2e0>)
 800fbbe:	601c      	str	r4, [r3, #0]
 800fbc0:	e796      	b.n	800faf0 <_tzset_unlocked_r+0x34>
 800fbc2:	f7f1 f9a9 	bl	8000f18 <strcmp>
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	d198      	bne.n	800fafc <_tzset_unlocked_r+0x40>
 800fbca:	e791      	b.n	800faf0 <_tzset_unlocked_r+0x34>
 800fbcc:	4621      	mov	r1, r4
 800fbce:	f006 fd03 	bl	80165d8 <strcpy>
 800fbd2:	e7a0      	b.n	800fb16 <_tzset_unlocked_r+0x5a>
 800fbd4:	2b2b      	cmp	r3, #43	; 0x2b
 800fbd6:	bf08      	it	eq
 800fbd8:	3701      	addeq	r7, #1
 800fbda:	f04f 0801 	mov.w	r8, #1
 800fbde:	e7af      	b.n	800fb40 <_tzset_unlocked_r+0x84>
 800fbe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbe2:	f8c8 9004 	str.w	r9, [r8, #4]
 800fbe6:	18fc      	adds	r4, r7, r3
 800fbe8:	5cfb      	ldrb	r3, [r7, r3]
 800fbea:	2b2d      	cmp	r3, #45	; 0x2d
 800fbec:	f040 808b 	bne.w	800fd06 <_tzset_unlocked_r+0x24a>
 800fbf0:	3401      	adds	r4, #1
 800fbf2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fbfc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fc00:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fc04:	930a      	str	r3, [sp, #40]	; 0x28
 800fc06:	e9cd a602 	strd	sl, r6, [sp, #8]
 800fc0a:	e9cd b600 	strd	fp, r6, [sp]
 800fc0e:	4967      	ldr	r1, [pc, #412]	; (800fdac <_tzset_unlocked_r+0x2f0>)
 800fc10:	4633      	mov	r3, r6
 800fc12:	aa07      	add	r2, sp, #28
 800fc14:	4620      	mov	r0, r4
 800fc16:	f000 f951 	bl	800febc <siscanf>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	dc78      	bgt.n	800fd10 <_tzset_unlocked_r+0x254>
 800fc1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fc20:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800fc24:	652b      	str	r3, [r5, #80]	; 0x50
 800fc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc28:	462f      	mov	r7, r5
 800fc2a:	441c      	add	r4, r3
 800fc2c:	f04f 0900 	mov.w	r9, #0
 800fc30:	7823      	ldrb	r3, [r4, #0]
 800fc32:	2b2c      	cmp	r3, #44	; 0x2c
 800fc34:	bf08      	it	eq
 800fc36:	3401      	addeq	r4, #1
 800fc38:	f894 8000 	ldrb.w	r8, [r4]
 800fc3c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800fc40:	d178      	bne.n	800fd34 <_tzset_unlocked_r+0x278>
 800fc42:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800fc46:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800fc4a:	ab09      	add	r3, sp, #36	; 0x24
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	4959      	ldr	r1, [pc, #356]	; (800fdb4 <_tzset_unlocked_r+0x2f8>)
 800fc50:	9603      	str	r6, [sp, #12]
 800fc52:	4633      	mov	r3, r6
 800fc54:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800fc58:	4620      	mov	r0, r4
 800fc5a:	f000 f92f 	bl	800febc <siscanf>
 800fc5e:	2803      	cmp	r0, #3
 800fc60:	f47f af46 	bne.w	800faf0 <_tzset_unlocked_r+0x34>
 800fc64:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800fc68:	1e4b      	subs	r3, r1, #1
 800fc6a:	2b0b      	cmp	r3, #11
 800fc6c:	f63f af40 	bhi.w	800faf0 <_tzset_unlocked_r+0x34>
 800fc70:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800fc74:	1e53      	subs	r3, r2, #1
 800fc76:	2b04      	cmp	r3, #4
 800fc78:	f63f af3a 	bhi.w	800faf0 <_tzset_unlocked_r+0x34>
 800fc7c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800fc80:	2b06      	cmp	r3, #6
 800fc82:	f63f af35 	bhi.w	800faf0 <_tzset_unlocked_r+0x34>
 800fc86:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800fc8a:	f887 8008 	strb.w	r8, [r7, #8]
 800fc8e:	617b      	str	r3, [r7, #20]
 800fc90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc92:	eb04 0803 	add.w	r8, r4, r3
 800fc96:	2302      	movs	r3, #2
 800fc98:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fca2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fca6:	930a      	str	r3, [sp, #40]	; 0x28
 800fca8:	f898 3000 	ldrb.w	r3, [r8]
 800fcac:	2b2f      	cmp	r3, #47	; 0x2f
 800fcae:	d109      	bne.n	800fcc4 <_tzset_unlocked_r+0x208>
 800fcb0:	e9cd a602 	strd	sl, r6, [sp, #8]
 800fcb4:	e9cd b600 	strd	fp, r6, [sp]
 800fcb8:	493f      	ldr	r1, [pc, #252]	; (800fdb8 <_tzset_unlocked_r+0x2fc>)
 800fcba:	4633      	mov	r3, r6
 800fcbc:	aa07      	add	r2, sp, #28
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	f000 f8fc 	bl	800febc <siscanf>
 800fcc4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fcc8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fccc:	213c      	movs	r1, #60	; 0x3c
 800fcce:	fb01 3302 	mla	r3, r1, r2, r3
 800fcd2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800fcd6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800fcda:	fb01 3302 	mla	r3, r1, r2, r3
 800fcde:	61bb      	str	r3, [r7, #24]
 800fce0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fce2:	3728      	adds	r7, #40	; 0x28
 800fce4:	4444      	add	r4, r8
 800fce6:	f1b9 0f00 	cmp.w	r9, #0
 800fcea:	d020      	beq.n	800fd2e <_tzset_unlocked_r+0x272>
 800fcec:	6868      	ldr	r0, [r5, #4]
 800fcee:	f000 f90f 	bl	800ff10 <__tzcalc_limits>
 800fcf2:	4b28      	ldr	r3, [pc, #160]	; (800fd94 <_tzset_unlocked_r+0x2d8>)
 800fcf4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800fcf6:	601a      	str	r2, [r3, #0]
 800fcf8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800fcfa:	1a9b      	subs	r3, r3, r2
 800fcfc:	4a27      	ldr	r2, [pc, #156]	; (800fd9c <_tzset_unlocked_r+0x2e0>)
 800fcfe:	bf18      	it	ne
 800fd00:	2301      	movne	r3, #1
 800fd02:	6013      	str	r3, [r2, #0]
 800fd04:	e6f4      	b.n	800faf0 <_tzset_unlocked_r+0x34>
 800fd06:	2b2b      	cmp	r3, #43	; 0x2b
 800fd08:	bf08      	it	eq
 800fd0a:	3401      	addeq	r4, #1
 800fd0c:	2701      	movs	r7, #1
 800fd0e:	e772      	b.n	800fbf6 <_tzset_unlocked_r+0x13a>
 800fd10:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fd14:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fd18:	213c      	movs	r1, #60	; 0x3c
 800fd1a:	fb01 3302 	mla	r3, r1, r2, r3
 800fd1e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800fd22:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800fd26:	fb01 3302 	mla	r3, r1, r2, r3
 800fd2a:	437b      	muls	r3, r7
 800fd2c:	e77a      	b.n	800fc24 <_tzset_unlocked_r+0x168>
 800fd2e:	f04f 0901 	mov.w	r9, #1
 800fd32:	e77d      	b.n	800fc30 <_tzset_unlocked_r+0x174>
 800fd34:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800fd38:	bf06      	itte	eq
 800fd3a:	3401      	addeq	r4, #1
 800fd3c:	4643      	moveq	r3, r8
 800fd3e:	2344      	movne	r3, #68	; 0x44
 800fd40:	220a      	movs	r2, #10
 800fd42:	a90b      	add	r1, sp, #44	; 0x2c
 800fd44:	4620      	mov	r0, r4
 800fd46:	9305      	str	r3, [sp, #20]
 800fd48:	f7ff fe9c 	bl	800fa84 <strtoul>
 800fd4c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800fd50:	9b05      	ldr	r3, [sp, #20]
 800fd52:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800fd56:	45a0      	cmp	r8, r4
 800fd58:	d114      	bne.n	800fd84 <_tzset_unlocked_r+0x2c8>
 800fd5a:	234d      	movs	r3, #77	; 0x4d
 800fd5c:	f1b9 0f00 	cmp.w	r9, #0
 800fd60:	d107      	bne.n	800fd72 <_tzset_unlocked_r+0x2b6>
 800fd62:	722b      	strb	r3, [r5, #8]
 800fd64:	2103      	movs	r1, #3
 800fd66:	2302      	movs	r3, #2
 800fd68:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800fd6c:	f8c5 9014 	str.w	r9, [r5, #20]
 800fd70:	e791      	b.n	800fc96 <_tzset_unlocked_r+0x1da>
 800fd72:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800fd76:	220b      	movs	r2, #11
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800fd7e:	2300      	movs	r3, #0
 800fd80:	63eb      	str	r3, [r5, #60]	; 0x3c
 800fd82:	e788      	b.n	800fc96 <_tzset_unlocked_r+0x1da>
 800fd84:	b280      	uxth	r0, r0
 800fd86:	723b      	strb	r3, [r7, #8]
 800fd88:	6178      	str	r0, [r7, #20]
 800fd8a:	e784      	b.n	800fc96 <_tzset_unlocked_r+0x1da>
 800fd8c:	080197f0 	.word	0x080197f0
 800fd90:	200022e8 	.word	0x200022e8
 800fd94:	200022f0 	.word	0x200022f0
 800fd98:	080197f3 	.word	0x080197f3
 800fd9c:	200022ec 	.word	0x200022ec
 800fda0:	200002a0 	.word	0x200002a0
 800fda4:	2000245d 	.word	0x2000245d
 800fda8:	080197f7 	.word	0x080197f7
 800fdac:	0801981a 	.word	0x0801981a
 800fdb0:	20002452 	.word	0x20002452
 800fdb4:	08019806 	.word	0x08019806
 800fdb8:	08019819 	.word	0x08019819

0800fdbc <_findenv_r>:
 800fdbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800fe30 <_findenv_r+0x74>
 800fdc4:	4607      	mov	r7, r0
 800fdc6:	4689      	mov	r9, r1
 800fdc8:	4616      	mov	r6, r2
 800fdca:	f000 f947 	bl	801005c <__env_lock>
 800fdce:	f8da 4000 	ldr.w	r4, [sl]
 800fdd2:	b134      	cbz	r4, 800fde2 <_findenv_r+0x26>
 800fdd4:	464b      	mov	r3, r9
 800fdd6:	4698      	mov	r8, r3
 800fdd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fddc:	b13a      	cbz	r2, 800fdee <_findenv_r+0x32>
 800fdde:	2a3d      	cmp	r2, #61	; 0x3d
 800fde0:	d1f9      	bne.n	800fdd6 <_findenv_r+0x1a>
 800fde2:	4638      	mov	r0, r7
 800fde4:	f000 f940 	bl	8010068 <__env_unlock>
 800fde8:	2000      	movs	r0, #0
 800fdea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdee:	eba8 0809 	sub.w	r8, r8, r9
 800fdf2:	46a3      	mov	fp, r4
 800fdf4:	f854 0b04 	ldr.w	r0, [r4], #4
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	d0f2      	beq.n	800fde2 <_findenv_r+0x26>
 800fdfc:	4642      	mov	r2, r8
 800fdfe:	4649      	mov	r1, r9
 800fe00:	f006 fbf4 	bl	80165ec <strncmp>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d1f4      	bne.n	800fdf2 <_findenv_r+0x36>
 800fe08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fe0c:	eb03 0508 	add.w	r5, r3, r8
 800fe10:	f813 3008 	ldrb.w	r3, [r3, r8]
 800fe14:	2b3d      	cmp	r3, #61	; 0x3d
 800fe16:	d1ec      	bne.n	800fdf2 <_findenv_r+0x36>
 800fe18:	f8da 3000 	ldr.w	r3, [sl]
 800fe1c:	ebab 0303 	sub.w	r3, fp, r3
 800fe20:	109b      	asrs	r3, r3, #2
 800fe22:	4638      	mov	r0, r7
 800fe24:	6033      	str	r3, [r6, #0]
 800fe26:	f000 f91f 	bl	8010068 <__env_unlock>
 800fe2a:	1c68      	adds	r0, r5, #1
 800fe2c:	e7dd      	b.n	800fdea <_findenv_r+0x2e>
 800fe2e:	bf00      	nop
 800fe30:	200002a8 	.word	0x200002a8

0800fe34 <__gettzinfo>:
 800fe34:	4800      	ldr	r0, [pc, #0]	; (800fe38 <__gettzinfo+0x4>)
 800fe36:	4770      	bx	lr
 800fe38:	20000000 	.word	0x20000000

0800fe3c <__malloc_lock>:
 800fe3c:	4801      	ldr	r0, [pc, #4]	; (800fe44 <__malloc_lock+0x8>)
 800fe3e:	f001 bbbd 	b.w	80115bc <__retarget_lock_acquire_recursive>
 800fe42:	bf00      	nop
 800fe44:	200003a8 	.word	0x200003a8

0800fe48 <__malloc_unlock>:
 800fe48:	4801      	ldr	r0, [pc, #4]	; (800fe50 <__malloc_unlock+0x8>)
 800fe4a:	f001 bbbf 	b.w	80115cc <__retarget_lock_release_recursive>
 800fe4e:	bf00      	nop
 800fe50:	200003a8 	.word	0x200003a8

0800fe54 <sniprintf>:
 800fe54:	b40c      	push	{r2, r3}
 800fe56:	b530      	push	{r4, r5, lr}
 800fe58:	4b17      	ldr	r3, [pc, #92]	; (800feb8 <sniprintf+0x64>)
 800fe5a:	1e0c      	subs	r4, r1, #0
 800fe5c:	681d      	ldr	r5, [r3, #0]
 800fe5e:	b09d      	sub	sp, #116	; 0x74
 800fe60:	da08      	bge.n	800fe74 <sniprintf+0x20>
 800fe62:	238b      	movs	r3, #139	; 0x8b
 800fe64:	602b      	str	r3, [r5, #0]
 800fe66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe6a:	b01d      	add	sp, #116	; 0x74
 800fe6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe70:	b002      	add	sp, #8
 800fe72:	4770      	bx	lr
 800fe74:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fe78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fe7c:	bf14      	ite	ne
 800fe7e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fe82:	4623      	moveq	r3, r4
 800fe84:	9304      	str	r3, [sp, #16]
 800fe86:	9307      	str	r3, [sp, #28]
 800fe88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe8c:	9002      	str	r0, [sp, #8]
 800fe8e:	9006      	str	r0, [sp, #24]
 800fe90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe96:	ab21      	add	r3, sp, #132	; 0x84
 800fe98:	a902      	add	r1, sp, #8
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	9301      	str	r3, [sp, #4]
 800fe9e:	f000 f8e9 	bl	8010074 <_svfiprintf_r>
 800fea2:	1c43      	adds	r3, r0, #1
 800fea4:	bfbc      	itt	lt
 800fea6:	238b      	movlt	r3, #139	; 0x8b
 800fea8:	602b      	strlt	r3, [r5, #0]
 800feaa:	2c00      	cmp	r4, #0
 800feac:	d0dd      	beq.n	800fe6a <sniprintf+0x16>
 800feae:	9b02      	ldr	r3, [sp, #8]
 800feb0:	2200      	movs	r2, #0
 800feb2:	701a      	strb	r2, [r3, #0]
 800feb4:	e7d9      	b.n	800fe6a <sniprintf+0x16>
 800feb6:	bf00      	nop
 800feb8:	2000023c 	.word	0x2000023c

0800febc <siscanf>:
 800febc:	b40e      	push	{r1, r2, r3}
 800febe:	b530      	push	{r4, r5, lr}
 800fec0:	b09c      	sub	sp, #112	; 0x70
 800fec2:	ac1f      	add	r4, sp, #124	; 0x7c
 800fec4:	f44f 7201 	mov.w	r2, #516	; 0x204
 800fec8:	f854 5b04 	ldr.w	r5, [r4], #4
 800fecc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fed0:	9002      	str	r0, [sp, #8]
 800fed2:	9006      	str	r0, [sp, #24]
 800fed4:	f7f1 f82a 	bl	8000f2c <strlen>
 800fed8:	4b0b      	ldr	r3, [pc, #44]	; (800ff08 <siscanf+0x4c>)
 800feda:	9003      	str	r0, [sp, #12]
 800fedc:	9007      	str	r0, [sp, #28]
 800fede:	930b      	str	r3, [sp, #44]	; 0x2c
 800fee0:	480a      	ldr	r0, [pc, #40]	; (800ff0c <siscanf+0x50>)
 800fee2:	9401      	str	r4, [sp, #4]
 800fee4:	2300      	movs	r3, #0
 800fee6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fee8:	9314      	str	r3, [sp, #80]	; 0x50
 800feea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800feee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fef2:	462a      	mov	r2, r5
 800fef4:	4623      	mov	r3, r4
 800fef6:	a902      	add	r1, sp, #8
 800fef8:	6800      	ldr	r0, [r0, #0]
 800fefa:	f000 f9bb 	bl	8010274 <__ssvfiscanf_r>
 800fefe:	b01c      	add	sp, #112	; 0x70
 800ff00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff04:	b003      	add	sp, #12
 800ff06:	4770      	bx	lr
 800ff08:	08016675 	.word	0x08016675
 800ff0c:	2000023c 	.word	0x2000023c

0800ff10 <__tzcalc_limits>:
 800ff10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	4605      	mov	r5, r0
 800ff16:	f7ff ff8d 	bl	800fe34 <__gettzinfo>
 800ff1a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800ff1e:	429d      	cmp	r5, r3
 800ff20:	f340 8095 	ble.w	801004e <__tzcalc_limits+0x13e>
 800ff24:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800ff28:	18ac      	adds	r4, r5, r2
 800ff2a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800ff2e:	f240 126d 	movw	r2, #365	; 0x16d
 800ff32:	10a4      	asrs	r4, r4, #2
 800ff34:	fb02 4403 	mla	r4, r2, r3, r4
 800ff38:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800ff3c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800ff40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff44:	441c      	add	r4, r3
 800ff46:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ff4a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800ff4e:	fb95 fef3 	sdiv	lr, r5, r3
 800ff52:	fb03 5e1e 	mls	lr, r3, lr, r5
 800ff56:	186a      	adds	r2, r5, r1
 800ff58:	fabe f78e 	clz	r7, lr
 800ff5c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ff60:	4414      	add	r4, r2
 800ff62:	2264      	movs	r2, #100	; 0x64
 800ff64:	6045      	str	r5, [r0, #4]
 800ff66:	fb95 fcf2 	sdiv	ip, r5, r2
 800ff6a:	097f      	lsrs	r7, r7, #5
 800ff6c:	fb02 5c1c 	mls	ip, r2, ip, r5
 800ff70:	4601      	mov	r1, r0
 800ff72:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ff76:	f005 0303 	and.w	r3, r5, #3
 800ff7a:	7a0a      	ldrb	r2, [r1, #8]
 800ff7c:	694d      	ldr	r5, [r1, #20]
 800ff7e:	2a4a      	cmp	r2, #74	; 0x4a
 800ff80:	d12a      	bne.n	800ffd8 <__tzcalc_limits+0xc8>
 800ff82:	1962      	adds	r2, r4, r5
 800ff84:	b913      	cbnz	r3, 800ff8c <__tzcalc_limits+0x7c>
 800ff86:	f1bc 0f00 	cmp.w	ip, #0
 800ff8a:	d102      	bne.n	800ff92 <__tzcalc_limits+0x82>
 800ff8c:	f1be 0f00 	cmp.w	lr, #0
 800ff90:	d120      	bne.n	800ffd4 <__tzcalc_limits+0xc4>
 800ff92:	2d3b      	cmp	r5, #59	; 0x3b
 800ff94:	bfd4      	ite	le
 800ff96:	2500      	movle	r5, #0
 800ff98:	2501      	movgt	r5, #1
 800ff9a:	4415      	add	r5, r2
 800ff9c:	3d01      	subs	r5, #1
 800ff9e:	698e      	ldr	r6, [r1, #24]
 800ffa0:	4a2c      	ldr	r2, [pc, #176]	; (8010054 <__tzcalc_limits+0x144>)
 800ffa2:	fb02 6505 	mla	r5, r2, r5, r6
 800ffa6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800ffa8:	4415      	add	r5, r2
 800ffaa:	17ea      	asrs	r2, r5, #31
 800ffac:	e9c1 5208 	strd	r5, r2, [r1, #32]
 800ffb0:	3128      	adds	r1, #40	; 0x28
 800ffb2:	458b      	cmp	fp, r1
 800ffb4:	d1e1      	bne.n	800ff7a <__tzcalc_limits+0x6a>
 800ffb6:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800ffba:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800ffbe:	428c      	cmp	r4, r1
 800ffc0:	eb72 0303 	sbcs.w	r3, r2, r3
 800ffc4:	bfb4      	ite	lt
 800ffc6:	2301      	movlt	r3, #1
 800ffc8:	2300      	movge	r3, #0
 800ffca:	6003      	str	r3, [r0, #0]
 800ffcc:	2001      	movs	r0, #1
 800ffce:	b003      	add	sp, #12
 800ffd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd4:	2500      	movs	r5, #0
 800ffd6:	e7e0      	b.n	800ff9a <__tzcalc_limits+0x8a>
 800ffd8:	2a44      	cmp	r2, #68	; 0x44
 800ffda:	d101      	bne.n	800ffe0 <__tzcalc_limits+0xd0>
 800ffdc:	4425      	add	r5, r4
 800ffde:	e7de      	b.n	800ff9e <__tzcalc_limits+0x8e>
 800ffe0:	bb7b      	cbnz	r3, 8010042 <__tzcalc_limits+0x132>
 800ffe2:	f1bc 0f00 	cmp.w	ip, #0
 800ffe6:	bf0c      	ite	eq
 800ffe8:	463e      	moveq	r6, r7
 800ffea:	2601      	movne	r6, #1
 800ffec:	f8df a068 	ldr.w	sl, [pc, #104]	; 8010058 <__tzcalc_limits+0x148>
 800fff0:	68ca      	ldr	r2, [r1, #12]
 800fff2:	9201      	str	r2, [sp, #4]
 800fff4:	f04f 0830 	mov.w	r8, #48	; 0x30
 800fff8:	fb08 a606 	mla	r6, r8, r6, sl
 800fffc:	4622      	mov	r2, r4
 800fffe:	f04f 0900 	mov.w	r9, #0
 8010002:	3e04      	subs	r6, #4
 8010004:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010008:	f109 0901 	add.w	r9, r9, #1
 801000c:	45c8      	cmp	r8, r9
 801000e:	f856 a029 	ldr.w	sl, [r6, r9, lsl #2]
 8010012:	dc18      	bgt.n	8010046 <__tzcalc_limits+0x136>
 8010014:	1d16      	adds	r6, r2, #4
 8010016:	f04f 0807 	mov.w	r8, #7
 801001a:	fb96 f9f8 	sdiv	r9, r6, r8
 801001e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8010022:	eba6 0909 	sub.w	r9, r6, r9
 8010026:	ebb5 0909 	subs.w	r9, r5, r9
 801002a:	690d      	ldr	r5, [r1, #16]
 801002c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8010030:	bf48      	it	mi
 8010032:	44c1      	addmi	r9, r8
 8010034:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8010038:	444d      	add	r5, r9
 801003a:	4555      	cmp	r5, sl
 801003c:	da05      	bge.n	801004a <__tzcalc_limits+0x13a>
 801003e:	4415      	add	r5, r2
 8010040:	e7ad      	b.n	800ff9e <__tzcalc_limits+0x8e>
 8010042:	463e      	mov	r6, r7
 8010044:	e7d2      	b.n	800ffec <__tzcalc_limits+0xdc>
 8010046:	4452      	add	r2, sl
 8010048:	e7dc      	b.n	8010004 <__tzcalc_limits+0xf4>
 801004a:	3d07      	subs	r5, #7
 801004c:	e7f5      	b.n	801003a <__tzcalc_limits+0x12a>
 801004e:	2000      	movs	r0, #0
 8010050:	e7bd      	b.n	800ffce <__tzcalc_limits+0xbe>
 8010052:	bf00      	nop
 8010054:	00015180 	.word	0x00015180
 8010058:	08017920 	.word	0x08017920

0801005c <__env_lock>:
 801005c:	4801      	ldr	r0, [pc, #4]	; (8010064 <__env_lock+0x8>)
 801005e:	f001 baad 	b.w	80115bc <__retarget_lock_acquire_recursive>
 8010062:	bf00      	nop
 8010064:	20000394 	.word	0x20000394

08010068 <__env_unlock>:
 8010068:	4801      	ldr	r0, [pc, #4]	; (8010070 <__env_unlock+0x8>)
 801006a:	f001 baaf 	b.w	80115cc <__retarget_lock_release_recursive>
 801006e:	bf00      	nop
 8010070:	20000394 	.word	0x20000394

08010074 <_svfiprintf_r>:
 8010074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010078:	4698      	mov	r8, r3
 801007a:	898b      	ldrh	r3, [r1, #12]
 801007c:	061b      	lsls	r3, r3, #24
 801007e:	b09d      	sub	sp, #116	; 0x74
 8010080:	4607      	mov	r7, r0
 8010082:	460d      	mov	r5, r1
 8010084:	4614      	mov	r4, r2
 8010086:	d50e      	bpl.n	80100a6 <_svfiprintf_r+0x32>
 8010088:	690b      	ldr	r3, [r1, #16]
 801008a:	b963      	cbnz	r3, 80100a6 <_svfiprintf_r+0x32>
 801008c:	2140      	movs	r1, #64	; 0x40
 801008e:	f7fe fee7 	bl	800ee60 <_malloc_r>
 8010092:	6028      	str	r0, [r5, #0]
 8010094:	6128      	str	r0, [r5, #16]
 8010096:	b920      	cbnz	r0, 80100a2 <_svfiprintf_r+0x2e>
 8010098:	230c      	movs	r3, #12
 801009a:	603b      	str	r3, [r7, #0]
 801009c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100a0:	e0d1      	b.n	8010246 <_svfiprintf_r+0x1d2>
 80100a2:	2340      	movs	r3, #64	; 0x40
 80100a4:	616b      	str	r3, [r5, #20]
 80100a6:	2300      	movs	r3, #0
 80100a8:	9309      	str	r3, [sp, #36]	; 0x24
 80100aa:	2320      	movs	r3, #32
 80100ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80100b4:	2330      	movs	r3, #48	; 0x30
 80100b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010260 <_svfiprintf_r+0x1ec>
 80100ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100be:	f04f 0901 	mov.w	r9, #1
 80100c2:	4623      	mov	r3, r4
 80100c4:	469a      	mov	sl, r3
 80100c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100ca:	b10a      	cbz	r2, 80100d0 <_svfiprintf_r+0x5c>
 80100cc:	2a25      	cmp	r2, #37	; 0x25
 80100ce:	d1f9      	bne.n	80100c4 <_svfiprintf_r+0x50>
 80100d0:	ebba 0b04 	subs.w	fp, sl, r4
 80100d4:	d00b      	beq.n	80100ee <_svfiprintf_r+0x7a>
 80100d6:	465b      	mov	r3, fp
 80100d8:	4622      	mov	r2, r4
 80100da:	4629      	mov	r1, r5
 80100dc:	4638      	mov	r0, r7
 80100de:	f006 facb 	bl	8016678 <__ssputs_r>
 80100e2:	3001      	adds	r0, #1
 80100e4:	f000 80aa 	beq.w	801023c <_svfiprintf_r+0x1c8>
 80100e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100ea:	445a      	add	r2, fp
 80100ec:	9209      	str	r2, [sp, #36]	; 0x24
 80100ee:	f89a 3000 	ldrb.w	r3, [sl]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f000 80a2 	beq.w	801023c <_svfiprintf_r+0x1c8>
 80100f8:	2300      	movs	r3, #0
 80100fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010102:	f10a 0a01 	add.w	sl, sl, #1
 8010106:	9304      	str	r3, [sp, #16]
 8010108:	9307      	str	r3, [sp, #28]
 801010a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801010e:	931a      	str	r3, [sp, #104]	; 0x68
 8010110:	4654      	mov	r4, sl
 8010112:	2205      	movs	r2, #5
 8010114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010118:	4851      	ldr	r0, [pc, #324]	; (8010260 <_svfiprintf_r+0x1ec>)
 801011a:	f7f0 f811 	bl	8000140 <memchr>
 801011e:	9a04      	ldr	r2, [sp, #16]
 8010120:	b9d8      	cbnz	r0, 801015a <_svfiprintf_r+0xe6>
 8010122:	06d0      	lsls	r0, r2, #27
 8010124:	bf44      	itt	mi
 8010126:	2320      	movmi	r3, #32
 8010128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801012c:	0711      	lsls	r1, r2, #28
 801012e:	bf44      	itt	mi
 8010130:	232b      	movmi	r3, #43	; 0x2b
 8010132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010136:	f89a 3000 	ldrb.w	r3, [sl]
 801013a:	2b2a      	cmp	r3, #42	; 0x2a
 801013c:	d015      	beq.n	801016a <_svfiprintf_r+0xf6>
 801013e:	9a07      	ldr	r2, [sp, #28]
 8010140:	4654      	mov	r4, sl
 8010142:	2000      	movs	r0, #0
 8010144:	f04f 0c0a 	mov.w	ip, #10
 8010148:	4621      	mov	r1, r4
 801014a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801014e:	3b30      	subs	r3, #48	; 0x30
 8010150:	2b09      	cmp	r3, #9
 8010152:	d94e      	bls.n	80101f2 <_svfiprintf_r+0x17e>
 8010154:	b1b0      	cbz	r0, 8010184 <_svfiprintf_r+0x110>
 8010156:	9207      	str	r2, [sp, #28]
 8010158:	e014      	b.n	8010184 <_svfiprintf_r+0x110>
 801015a:	eba0 0308 	sub.w	r3, r0, r8
 801015e:	fa09 f303 	lsl.w	r3, r9, r3
 8010162:	4313      	orrs	r3, r2
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	46a2      	mov	sl, r4
 8010168:	e7d2      	b.n	8010110 <_svfiprintf_r+0x9c>
 801016a:	9b03      	ldr	r3, [sp, #12]
 801016c:	1d19      	adds	r1, r3, #4
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	9103      	str	r1, [sp, #12]
 8010172:	2b00      	cmp	r3, #0
 8010174:	bfbb      	ittet	lt
 8010176:	425b      	neglt	r3, r3
 8010178:	f042 0202 	orrlt.w	r2, r2, #2
 801017c:	9307      	strge	r3, [sp, #28]
 801017e:	9307      	strlt	r3, [sp, #28]
 8010180:	bfb8      	it	lt
 8010182:	9204      	strlt	r2, [sp, #16]
 8010184:	7823      	ldrb	r3, [r4, #0]
 8010186:	2b2e      	cmp	r3, #46	; 0x2e
 8010188:	d10c      	bne.n	80101a4 <_svfiprintf_r+0x130>
 801018a:	7863      	ldrb	r3, [r4, #1]
 801018c:	2b2a      	cmp	r3, #42	; 0x2a
 801018e:	d135      	bne.n	80101fc <_svfiprintf_r+0x188>
 8010190:	9b03      	ldr	r3, [sp, #12]
 8010192:	1d1a      	adds	r2, r3, #4
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	9203      	str	r2, [sp, #12]
 8010198:	2b00      	cmp	r3, #0
 801019a:	bfb8      	it	lt
 801019c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80101a0:	3402      	adds	r4, #2
 80101a2:	9305      	str	r3, [sp, #20]
 80101a4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010264 <_svfiprintf_r+0x1f0>
 80101a8:	7821      	ldrb	r1, [r4, #0]
 80101aa:	2203      	movs	r2, #3
 80101ac:	4650      	mov	r0, sl
 80101ae:	f7ef ffc7 	bl	8000140 <memchr>
 80101b2:	b140      	cbz	r0, 80101c6 <_svfiprintf_r+0x152>
 80101b4:	2340      	movs	r3, #64	; 0x40
 80101b6:	eba0 000a 	sub.w	r0, r0, sl
 80101ba:	fa03 f000 	lsl.w	r0, r3, r0
 80101be:	9b04      	ldr	r3, [sp, #16]
 80101c0:	4303      	orrs	r3, r0
 80101c2:	3401      	adds	r4, #1
 80101c4:	9304      	str	r3, [sp, #16]
 80101c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ca:	4827      	ldr	r0, [pc, #156]	; (8010268 <_svfiprintf_r+0x1f4>)
 80101cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101d0:	2206      	movs	r2, #6
 80101d2:	f7ef ffb5 	bl	8000140 <memchr>
 80101d6:	2800      	cmp	r0, #0
 80101d8:	d038      	beq.n	801024c <_svfiprintf_r+0x1d8>
 80101da:	4b24      	ldr	r3, [pc, #144]	; (801026c <_svfiprintf_r+0x1f8>)
 80101dc:	bb1b      	cbnz	r3, 8010226 <_svfiprintf_r+0x1b2>
 80101de:	9b03      	ldr	r3, [sp, #12]
 80101e0:	3307      	adds	r3, #7
 80101e2:	f023 0307 	bic.w	r3, r3, #7
 80101e6:	3308      	adds	r3, #8
 80101e8:	9303      	str	r3, [sp, #12]
 80101ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ec:	4433      	add	r3, r6
 80101ee:	9309      	str	r3, [sp, #36]	; 0x24
 80101f0:	e767      	b.n	80100c2 <_svfiprintf_r+0x4e>
 80101f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80101f6:	460c      	mov	r4, r1
 80101f8:	2001      	movs	r0, #1
 80101fa:	e7a5      	b.n	8010148 <_svfiprintf_r+0xd4>
 80101fc:	2300      	movs	r3, #0
 80101fe:	3401      	adds	r4, #1
 8010200:	9305      	str	r3, [sp, #20]
 8010202:	4619      	mov	r1, r3
 8010204:	f04f 0c0a 	mov.w	ip, #10
 8010208:	4620      	mov	r0, r4
 801020a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801020e:	3a30      	subs	r2, #48	; 0x30
 8010210:	2a09      	cmp	r2, #9
 8010212:	d903      	bls.n	801021c <_svfiprintf_r+0x1a8>
 8010214:	2b00      	cmp	r3, #0
 8010216:	d0c5      	beq.n	80101a4 <_svfiprintf_r+0x130>
 8010218:	9105      	str	r1, [sp, #20]
 801021a:	e7c3      	b.n	80101a4 <_svfiprintf_r+0x130>
 801021c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010220:	4604      	mov	r4, r0
 8010222:	2301      	movs	r3, #1
 8010224:	e7f0      	b.n	8010208 <_svfiprintf_r+0x194>
 8010226:	ab03      	add	r3, sp, #12
 8010228:	9300      	str	r3, [sp, #0]
 801022a:	462a      	mov	r2, r5
 801022c:	4b10      	ldr	r3, [pc, #64]	; (8010270 <_svfiprintf_r+0x1fc>)
 801022e:	a904      	add	r1, sp, #16
 8010230:	4638      	mov	r0, r7
 8010232:	f3af 8000 	nop.w
 8010236:	1c42      	adds	r2, r0, #1
 8010238:	4606      	mov	r6, r0
 801023a:	d1d6      	bne.n	80101ea <_svfiprintf_r+0x176>
 801023c:	89ab      	ldrh	r3, [r5, #12]
 801023e:	065b      	lsls	r3, r3, #25
 8010240:	f53f af2c 	bmi.w	801009c <_svfiprintf_r+0x28>
 8010244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010246:	b01d      	add	sp, #116	; 0x74
 8010248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024c:	ab03      	add	r3, sp, #12
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	462a      	mov	r2, r5
 8010252:	4b07      	ldr	r3, [pc, #28]	; (8010270 <_svfiprintf_r+0x1fc>)
 8010254:	a904      	add	r1, sp, #16
 8010256:	4638      	mov	r0, r7
 8010258:	f000 f984 	bl	8010564 <_printf_i>
 801025c:	e7eb      	b.n	8010236 <_svfiprintf_r+0x1c2>
 801025e:	bf00      	nop
 8010260:	0801982c 	.word	0x0801982c
 8010264:	08019832 	.word	0x08019832
 8010268:	08019836 	.word	0x08019836
 801026c:	00000000 	.word	0x00000000
 8010270:	08016679 	.word	0x08016679

08010274 <__ssvfiscanf_r>:
 8010274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010278:	460c      	mov	r4, r1
 801027a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801027e:	2100      	movs	r1, #0
 8010280:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010284:	49a6      	ldr	r1, [pc, #664]	; (8010520 <__ssvfiscanf_r+0x2ac>)
 8010286:	91a0      	str	r1, [sp, #640]	; 0x280
 8010288:	f10d 0804 	add.w	r8, sp, #4
 801028c:	49a5      	ldr	r1, [pc, #660]	; (8010524 <__ssvfiscanf_r+0x2b0>)
 801028e:	4fa6      	ldr	r7, [pc, #664]	; (8010528 <__ssvfiscanf_r+0x2b4>)
 8010290:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801052c <__ssvfiscanf_r+0x2b8>
 8010294:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010298:	4606      	mov	r6, r0
 801029a:	91a1      	str	r1, [sp, #644]	; 0x284
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	7813      	ldrb	r3, [r2, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f000 815a 	beq.w	801055a <__ssvfiscanf_r+0x2e6>
 80102a6:	5dd9      	ldrb	r1, [r3, r7]
 80102a8:	f011 0108 	ands.w	r1, r1, #8
 80102ac:	f102 0501 	add.w	r5, r2, #1
 80102b0:	d019      	beq.n	80102e6 <__ssvfiscanf_r+0x72>
 80102b2:	6863      	ldr	r3, [r4, #4]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	dd0f      	ble.n	80102d8 <__ssvfiscanf_r+0x64>
 80102b8:	6823      	ldr	r3, [r4, #0]
 80102ba:	781a      	ldrb	r2, [r3, #0]
 80102bc:	5cba      	ldrb	r2, [r7, r2]
 80102be:	0712      	lsls	r2, r2, #28
 80102c0:	d401      	bmi.n	80102c6 <__ssvfiscanf_r+0x52>
 80102c2:	462a      	mov	r2, r5
 80102c4:	e7eb      	b.n	801029e <__ssvfiscanf_r+0x2a>
 80102c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80102c8:	3201      	adds	r2, #1
 80102ca:	9245      	str	r2, [sp, #276]	; 0x114
 80102cc:	6862      	ldr	r2, [r4, #4]
 80102ce:	3301      	adds	r3, #1
 80102d0:	3a01      	subs	r2, #1
 80102d2:	6062      	str	r2, [r4, #4]
 80102d4:	6023      	str	r3, [r4, #0]
 80102d6:	e7ec      	b.n	80102b2 <__ssvfiscanf_r+0x3e>
 80102d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80102da:	4621      	mov	r1, r4
 80102dc:	4630      	mov	r0, r6
 80102de:	4798      	blx	r3
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d0e9      	beq.n	80102b8 <__ssvfiscanf_r+0x44>
 80102e4:	e7ed      	b.n	80102c2 <__ssvfiscanf_r+0x4e>
 80102e6:	2b25      	cmp	r3, #37	; 0x25
 80102e8:	d012      	beq.n	8010310 <__ssvfiscanf_r+0x9c>
 80102ea:	469a      	mov	sl, r3
 80102ec:	6863      	ldr	r3, [r4, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f340 8091 	ble.w	8010416 <__ssvfiscanf_r+0x1a2>
 80102f4:	6822      	ldr	r2, [r4, #0]
 80102f6:	7813      	ldrb	r3, [r2, #0]
 80102f8:	4553      	cmp	r3, sl
 80102fa:	f040 812e 	bne.w	801055a <__ssvfiscanf_r+0x2e6>
 80102fe:	6863      	ldr	r3, [r4, #4]
 8010300:	3b01      	subs	r3, #1
 8010302:	6063      	str	r3, [r4, #4]
 8010304:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010306:	3201      	adds	r2, #1
 8010308:	3301      	adds	r3, #1
 801030a:	6022      	str	r2, [r4, #0]
 801030c:	9345      	str	r3, [sp, #276]	; 0x114
 801030e:	e7d8      	b.n	80102c2 <__ssvfiscanf_r+0x4e>
 8010310:	9141      	str	r1, [sp, #260]	; 0x104
 8010312:	9143      	str	r1, [sp, #268]	; 0x10c
 8010314:	7853      	ldrb	r3, [r2, #1]
 8010316:	2b2a      	cmp	r3, #42	; 0x2a
 8010318:	bf02      	ittt	eq
 801031a:	2310      	moveq	r3, #16
 801031c:	1c95      	addeq	r5, r2, #2
 801031e:	9341      	streq	r3, [sp, #260]	; 0x104
 8010320:	220a      	movs	r2, #10
 8010322:	46aa      	mov	sl, r5
 8010324:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010328:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801032c:	2b09      	cmp	r3, #9
 801032e:	d91d      	bls.n	801036c <__ssvfiscanf_r+0xf8>
 8010330:	487e      	ldr	r0, [pc, #504]	; (801052c <__ssvfiscanf_r+0x2b8>)
 8010332:	2203      	movs	r2, #3
 8010334:	f7ef ff04 	bl	8000140 <memchr>
 8010338:	b140      	cbz	r0, 801034c <__ssvfiscanf_r+0xd8>
 801033a:	2301      	movs	r3, #1
 801033c:	eba0 0009 	sub.w	r0, r0, r9
 8010340:	fa03 f000 	lsl.w	r0, r3, r0
 8010344:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010346:	4318      	orrs	r0, r3
 8010348:	9041      	str	r0, [sp, #260]	; 0x104
 801034a:	4655      	mov	r5, sl
 801034c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010350:	2b78      	cmp	r3, #120	; 0x78
 8010352:	d806      	bhi.n	8010362 <__ssvfiscanf_r+0xee>
 8010354:	2b57      	cmp	r3, #87	; 0x57
 8010356:	d810      	bhi.n	801037a <__ssvfiscanf_r+0x106>
 8010358:	2b25      	cmp	r3, #37	; 0x25
 801035a:	d0c6      	beq.n	80102ea <__ssvfiscanf_r+0x76>
 801035c:	d856      	bhi.n	801040c <__ssvfiscanf_r+0x198>
 801035e:	2b00      	cmp	r3, #0
 8010360:	d064      	beq.n	801042c <__ssvfiscanf_r+0x1b8>
 8010362:	2303      	movs	r3, #3
 8010364:	9347      	str	r3, [sp, #284]	; 0x11c
 8010366:	230a      	movs	r3, #10
 8010368:	9342      	str	r3, [sp, #264]	; 0x108
 801036a:	e071      	b.n	8010450 <__ssvfiscanf_r+0x1dc>
 801036c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801036e:	fb02 1103 	mla	r1, r2, r3, r1
 8010372:	3930      	subs	r1, #48	; 0x30
 8010374:	9143      	str	r1, [sp, #268]	; 0x10c
 8010376:	4655      	mov	r5, sl
 8010378:	e7d3      	b.n	8010322 <__ssvfiscanf_r+0xae>
 801037a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801037e:	2a20      	cmp	r2, #32
 8010380:	d8ef      	bhi.n	8010362 <__ssvfiscanf_r+0xee>
 8010382:	a101      	add	r1, pc, #4	; (adr r1, 8010388 <__ssvfiscanf_r+0x114>)
 8010384:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010388:	0801043b 	.word	0x0801043b
 801038c:	08010363 	.word	0x08010363
 8010390:	08010363 	.word	0x08010363
 8010394:	08010499 	.word	0x08010499
 8010398:	08010363 	.word	0x08010363
 801039c:	08010363 	.word	0x08010363
 80103a0:	08010363 	.word	0x08010363
 80103a4:	08010363 	.word	0x08010363
 80103a8:	08010363 	.word	0x08010363
 80103ac:	08010363 	.word	0x08010363
 80103b0:	08010363 	.word	0x08010363
 80103b4:	080104af 	.word	0x080104af
 80103b8:	08010485 	.word	0x08010485
 80103bc:	08010413 	.word	0x08010413
 80103c0:	08010413 	.word	0x08010413
 80103c4:	08010413 	.word	0x08010413
 80103c8:	08010363 	.word	0x08010363
 80103cc:	08010489 	.word	0x08010489
 80103d0:	08010363 	.word	0x08010363
 80103d4:	08010363 	.word	0x08010363
 80103d8:	08010363 	.word	0x08010363
 80103dc:	08010363 	.word	0x08010363
 80103e0:	080104bf 	.word	0x080104bf
 80103e4:	08010491 	.word	0x08010491
 80103e8:	08010433 	.word	0x08010433
 80103ec:	08010363 	.word	0x08010363
 80103f0:	08010363 	.word	0x08010363
 80103f4:	080104bb 	.word	0x080104bb
 80103f8:	08010363 	.word	0x08010363
 80103fc:	08010485 	.word	0x08010485
 8010400:	08010363 	.word	0x08010363
 8010404:	08010363 	.word	0x08010363
 8010408:	0801043b 	.word	0x0801043b
 801040c:	3b45      	subs	r3, #69	; 0x45
 801040e:	2b02      	cmp	r3, #2
 8010410:	d8a7      	bhi.n	8010362 <__ssvfiscanf_r+0xee>
 8010412:	2305      	movs	r3, #5
 8010414:	e01b      	b.n	801044e <__ssvfiscanf_r+0x1da>
 8010416:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010418:	4621      	mov	r1, r4
 801041a:	4630      	mov	r0, r6
 801041c:	4798      	blx	r3
 801041e:	2800      	cmp	r0, #0
 8010420:	f43f af68 	beq.w	80102f4 <__ssvfiscanf_r+0x80>
 8010424:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010426:	2800      	cmp	r0, #0
 8010428:	f040 808d 	bne.w	8010546 <__ssvfiscanf_r+0x2d2>
 801042c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010430:	e08f      	b.n	8010552 <__ssvfiscanf_r+0x2de>
 8010432:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010434:	f042 0220 	orr.w	r2, r2, #32
 8010438:	9241      	str	r2, [sp, #260]	; 0x104
 801043a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801043c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010440:	9241      	str	r2, [sp, #260]	; 0x104
 8010442:	2210      	movs	r2, #16
 8010444:	2b6f      	cmp	r3, #111	; 0x6f
 8010446:	9242      	str	r2, [sp, #264]	; 0x108
 8010448:	bf34      	ite	cc
 801044a:	2303      	movcc	r3, #3
 801044c:	2304      	movcs	r3, #4
 801044e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010450:	6863      	ldr	r3, [r4, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	dd41      	ble.n	80104da <__ssvfiscanf_r+0x266>
 8010456:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010458:	0659      	lsls	r1, r3, #25
 801045a:	d404      	bmi.n	8010466 <__ssvfiscanf_r+0x1f2>
 801045c:	6823      	ldr	r3, [r4, #0]
 801045e:	781a      	ldrb	r2, [r3, #0]
 8010460:	5cba      	ldrb	r2, [r7, r2]
 8010462:	0712      	lsls	r2, r2, #28
 8010464:	d440      	bmi.n	80104e8 <__ssvfiscanf_r+0x274>
 8010466:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010468:	2b02      	cmp	r3, #2
 801046a:	dc4f      	bgt.n	801050c <__ssvfiscanf_r+0x298>
 801046c:	466b      	mov	r3, sp
 801046e:	4622      	mov	r2, r4
 8010470:	a941      	add	r1, sp, #260	; 0x104
 8010472:	4630      	mov	r0, r6
 8010474:	f000 f99c 	bl	80107b0 <_scanf_chars>
 8010478:	2801      	cmp	r0, #1
 801047a:	d06e      	beq.n	801055a <__ssvfiscanf_r+0x2e6>
 801047c:	2802      	cmp	r0, #2
 801047e:	f47f af20 	bne.w	80102c2 <__ssvfiscanf_r+0x4e>
 8010482:	e7cf      	b.n	8010424 <__ssvfiscanf_r+0x1b0>
 8010484:	220a      	movs	r2, #10
 8010486:	e7dd      	b.n	8010444 <__ssvfiscanf_r+0x1d0>
 8010488:	2300      	movs	r3, #0
 801048a:	9342      	str	r3, [sp, #264]	; 0x108
 801048c:	2303      	movs	r3, #3
 801048e:	e7de      	b.n	801044e <__ssvfiscanf_r+0x1da>
 8010490:	2308      	movs	r3, #8
 8010492:	9342      	str	r3, [sp, #264]	; 0x108
 8010494:	2304      	movs	r3, #4
 8010496:	e7da      	b.n	801044e <__ssvfiscanf_r+0x1da>
 8010498:	4629      	mov	r1, r5
 801049a:	4640      	mov	r0, r8
 801049c:	f006 fa0e 	bl	80168bc <__sccl>
 80104a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80104a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104a6:	9341      	str	r3, [sp, #260]	; 0x104
 80104a8:	4605      	mov	r5, r0
 80104aa:	2301      	movs	r3, #1
 80104ac:	e7cf      	b.n	801044e <__ssvfiscanf_r+0x1da>
 80104ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80104b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104b4:	9341      	str	r3, [sp, #260]	; 0x104
 80104b6:	2300      	movs	r3, #0
 80104b8:	e7c9      	b.n	801044e <__ssvfiscanf_r+0x1da>
 80104ba:	2302      	movs	r3, #2
 80104bc:	e7c7      	b.n	801044e <__ssvfiscanf_r+0x1da>
 80104be:	9841      	ldr	r0, [sp, #260]	; 0x104
 80104c0:	06c3      	lsls	r3, r0, #27
 80104c2:	f53f aefe 	bmi.w	80102c2 <__ssvfiscanf_r+0x4e>
 80104c6:	9b00      	ldr	r3, [sp, #0]
 80104c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80104ca:	1d19      	adds	r1, r3, #4
 80104cc:	9100      	str	r1, [sp, #0]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	07c0      	lsls	r0, r0, #31
 80104d2:	bf4c      	ite	mi
 80104d4:	801a      	strhmi	r2, [r3, #0]
 80104d6:	601a      	strpl	r2, [r3, #0]
 80104d8:	e6f3      	b.n	80102c2 <__ssvfiscanf_r+0x4e>
 80104da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80104dc:	4621      	mov	r1, r4
 80104de:	4630      	mov	r0, r6
 80104e0:	4798      	blx	r3
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d0b7      	beq.n	8010456 <__ssvfiscanf_r+0x1e2>
 80104e6:	e79d      	b.n	8010424 <__ssvfiscanf_r+0x1b0>
 80104e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80104ea:	3201      	adds	r2, #1
 80104ec:	9245      	str	r2, [sp, #276]	; 0x114
 80104ee:	6862      	ldr	r2, [r4, #4]
 80104f0:	3a01      	subs	r2, #1
 80104f2:	2a00      	cmp	r2, #0
 80104f4:	6062      	str	r2, [r4, #4]
 80104f6:	dd02      	ble.n	80104fe <__ssvfiscanf_r+0x28a>
 80104f8:	3301      	adds	r3, #1
 80104fa:	6023      	str	r3, [r4, #0]
 80104fc:	e7ae      	b.n	801045c <__ssvfiscanf_r+0x1e8>
 80104fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010500:	4621      	mov	r1, r4
 8010502:	4630      	mov	r0, r6
 8010504:	4798      	blx	r3
 8010506:	2800      	cmp	r0, #0
 8010508:	d0a8      	beq.n	801045c <__ssvfiscanf_r+0x1e8>
 801050a:	e78b      	b.n	8010424 <__ssvfiscanf_r+0x1b0>
 801050c:	2b04      	cmp	r3, #4
 801050e:	dc0f      	bgt.n	8010530 <__ssvfiscanf_r+0x2bc>
 8010510:	466b      	mov	r3, sp
 8010512:	4622      	mov	r2, r4
 8010514:	a941      	add	r1, sp, #260	; 0x104
 8010516:	4630      	mov	r0, r6
 8010518:	f000 f9a4 	bl	8010864 <_scanf_i>
 801051c:	e7ac      	b.n	8010478 <__ssvfiscanf_r+0x204>
 801051e:	bf00      	nop
 8010520:	0801672f 	.word	0x0801672f
 8010524:	080167a9 	.word	0x080167a9
 8010528:	08019578 	.word	0x08019578
 801052c:	08019832 	.word	0x08019832
 8010530:	4b0b      	ldr	r3, [pc, #44]	; (8010560 <__ssvfiscanf_r+0x2ec>)
 8010532:	2b00      	cmp	r3, #0
 8010534:	f43f aec5 	beq.w	80102c2 <__ssvfiscanf_r+0x4e>
 8010538:	466b      	mov	r3, sp
 801053a:	4622      	mov	r2, r4
 801053c:	a941      	add	r1, sp, #260	; 0x104
 801053e:	4630      	mov	r0, r6
 8010540:	f3af 8000 	nop.w
 8010544:	e798      	b.n	8010478 <__ssvfiscanf_r+0x204>
 8010546:	89a3      	ldrh	r3, [r4, #12]
 8010548:	f013 0f40 	tst.w	r3, #64	; 0x40
 801054c:	bf18      	it	ne
 801054e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8010552:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801055a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801055c:	e7f9      	b.n	8010552 <__ssvfiscanf_r+0x2de>
 801055e:	bf00      	nop
 8010560:	00000000 	.word	0x00000000

08010564 <_printf_i>:
 8010564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010568:	7e0f      	ldrb	r7, [r1, #24]
 801056a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801056c:	2f78      	cmp	r7, #120	; 0x78
 801056e:	4691      	mov	r9, r2
 8010570:	4680      	mov	r8, r0
 8010572:	460c      	mov	r4, r1
 8010574:	469a      	mov	sl, r3
 8010576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801057a:	d807      	bhi.n	801058c <_printf_i+0x28>
 801057c:	2f62      	cmp	r7, #98	; 0x62
 801057e:	d80a      	bhi.n	8010596 <_printf_i+0x32>
 8010580:	2f00      	cmp	r7, #0
 8010582:	f000 80d8 	beq.w	8010736 <_printf_i+0x1d2>
 8010586:	2f58      	cmp	r7, #88	; 0x58
 8010588:	f000 80a3 	beq.w	80106d2 <_printf_i+0x16e>
 801058c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010594:	e03a      	b.n	801060c <_printf_i+0xa8>
 8010596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801059a:	2b15      	cmp	r3, #21
 801059c:	d8f6      	bhi.n	801058c <_printf_i+0x28>
 801059e:	a101      	add	r1, pc, #4	; (adr r1, 80105a4 <_printf_i+0x40>)
 80105a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105a4:	080105fd 	.word	0x080105fd
 80105a8:	08010611 	.word	0x08010611
 80105ac:	0801058d 	.word	0x0801058d
 80105b0:	0801058d 	.word	0x0801058d
 80105b4:	0801058d 	.word	0x0801058d
 80105b8:	0801058d 	.word	0x0801058d
 80105bc:	08010611 	.word	0x08010611
 80105c0:	0801058d 	.word	0x0801058d
 80105c4:	0801058d 	.word	0x0801058d
 80105c8:	0801058d 	.word	0x0801058d
 80105cc:	0801058d 	.word	0x0801058d
 80105d0:	0801071d 	.word	0x0801071d
 80105d4:	08010641 	.word	0x08010641
 80105d8:	080106ff 	.word	0x080106ff
 80105dc:	0801058d 	.word	0x0801058d
 80105e0:	0801058d 	.word	0x0801058d
 80105e4:	0801073f 	.word	0x0801073f
 80105e8:	0801058d 	.word	0x0801058d
 80105ec:	08010641 	.word	0x08010641
 80105f0:	0801058d 	.word	0x0801058d
 80105f4:	0801058d 	.word	0x0801058d
 80105f8:	08010707 	.word	0x08010707
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	1d1a      	adds	r2, r3, #4
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	602a      	str	r2, [r5, #0]
 8010604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801060c:	2301      	movs	r3, #1
 801060e:	e0a3      	b.n	8010758 <_printf_i+0x1f4>
 8010610:	6820      	ldr	r0, [r4, #0]
 8010612:	6829      	ldr	r1, [r5, #0]
 8010614:	0606      	lsls	r6, r0, #24
 8010616:	f101 0304 	add.w	r3, r1, #4
 801061a:	d50a      	bpl.n	8010632 <_printf_i+0xce>
 801061c:	680e      	ldr	r6, [r1, #0]
 801061e:	602b      	str	r3, [r5, #0]
 8010620:	2e00      	cmp	r6, #0
 8010622:	da03      	bge.n	801062c <_printf_i+0xc8>
 8010624:	232d      	movs	r3, #45	; 0x2d
 8010626:	4276      	negs	r6, r6
 8010628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801062c:	485e      	ldr	r0, [pc, #376]	; (80107a8 <_printf_i+0x244>)
 801062e:	230a      	movs	r3, #10
 8010630:	e019      	b.n	8010666 <_printf_i+0x102>
 8010632:	680e      	ldr	r6, [r1, #0]
 8010634:	602b      	str	r3, [r5, #0]
 8010636:	f010 0f40 	tst.w	r0, #64	; 0x40
 801063a:	bf18      	it	ne
 801063c:	b236      	sxthne	r6, r6
 801063e:	e7ef      	b.n	8010620 <_printf_i+0xbc>
 8010640:	682b      	ldr	r3, [r5, #0]
 8010642:	6820      	ldr	r0, [r4, #0]
 8010644:	1d19      	adds	r1, r3, #4
 8010646:	6029      	str	r1, [r5, #0]
 8010648:	0601      	lsls	r1, r0, #24
 801064a:	d501      	bpl.n	8010650 <_printf_i+0xec>
 801064c:	681e      	ldr	r6, [r3, #0]
 801064e:	e002      	b.n	8010656 <_printf_i+0xf2>
 8010650:	0646      	lsls	r6, r0, #25
 8010652:	d5fb      	bpl.n	801064c <_printf_i+0xe8>
 8010654:	881e      	ldrh	r6, [r3, #0]
 8010656:	4854      	ldr	r0, [pc, #336]	; (80107a8 <_printf_i+0x244>)
 8010658:	2f6f      	cmp	r7, #111	; 0x6f
 801065a:	bf0c      	ite	eq
 801065c:	2308      	moveq	r3, #8
 801065e:	230a      	movne	r3, #10
 8010660:	2100      	movs	r1, #0
 8010662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010666:	6865      	ldr	r5, [r4, #4]
 8010668:	60a5      	str	r5, [r4, #8]
 801066a:	2d00      	cmp	r5, #0
 801066c:	bfa2      	ittt	ge
 801066e:	6821      	ldrge	r1, [r4, #0]
 8010670:	f021 0104 	bicge.w	r1, r1, #4
 8010674:	6021      	strge	r1, [r4, #0]
 8010676:	b90e      	cbnz	r6, 801067c <_printf_i+0x118>
 8010678:	2d00      	cmp	r5, #0
 801067a:	d04d      	beq.n	8010718 <_printf_i+0x1b4>
 801067c:	4615      	mov	r5, r2
 801067e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010682:	fb03 6711 	mls	r7, r3, r1, r6
 8010686:	5dc7      	ldrb	r7, [r0, r7]
 8010688:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801068c:	4637      	mov	r7, r6
 801068e:	42bb      	cmp	r3, r7
 8010690:	460e      	mov	r6, r1
 8010692:	d9f4      	bls.n	801067e <_printf_i+0x11a>
 8010694:	2b08      	cmp	r3, #8
 8010696:	d10b      	bne.n	80106b0 <_printf_i+0x14c>
 8010698:	6823      	ldr	r3, [r4, #0]
 801069a:	07de      	lsls	r6, r3, #31
 801069c:	d508      	bpl.n	80106b0 <_printf_i+0x14c>
 801069e:	6923      	ldr	r3, [r4, #16]
 80106a0:	6861      	ldr	r1, [r4, #4]
 80106a2:	4299      	cmp	r1, r3
 80106a4:	bfde      	ittt	le
 80106a6:	2330      	movle	r3, #48	; 0x30
 80106a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80106b0:	1b52      	subs	r2, r2, r5
 80106b2:	6122      	str	r2, [r4, #16]
 80106b4:	f8cd a000 	str.w	sl, [sp]
 80106b8:	464b      	mov	r3, r9
 80106ba:	aa03      	add	r2, sp, #12
 80106bc:	4621      	mov	r1, r4
 80106be:	4640      	mov	r0, r8
 80106c0:	f006 f88f 	bl	80167e2 <_printf_common>
 80106c4:	3001      	adds	r0, #1
 80106c6:	d14c      	bne.n	8010762 <_printf_i+0x1fe>
 80106c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106cc:	b004      	add	sp, #16
 80106ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106d2:	4835      	ldr	r0, [pc, #212]	; (80107a8 <_printf_i+0x244>)
 80106d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106d8:	6829      	ldr	r1, [r5, #0]
 80106da:	6823      	ldr	r3, [r4, #0]
 80106dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80106e0:	6029      	str	r1, [r5, #0]
 80106e2:	061d      	lsls	r5, r3, #24
 80106e4:	d514      	bpl.n	8010710 <_printf_i+0x1ac>
 80106e6:	07df      	lsls	r7, r3, #31
 80106e8:	bf44      	itt	mi
 80106ea:	f043 0320 	orrmi.w	r3, r3, #32
 80106ee:	6023      	strmi	r3, [r4, #0]
 80106f0:	b91e      	cbnz	r6, 80106fa <_printf_i+0x196>
 80106f2:	6823      	ldr	r3, [r4, #0]
 80106f4:	f023 0320 	bic.w	r3, r3, #32
 80106f8:	6023      	str	r3, [r4, #0]
 80106fa:	2310      	movs	r3, #16
 80106fc:	e7b0      	b.n	8010660 <_printf_i+0xfc>
 80106fe:	6823      	ldr	r3, [r4, #0]
 8010700:	f043 0320 	orr.w	r3, r3, #32
 8010704:	6023      	str	r3, [r4, #0]
 8010706:	2378      	movs	r3, #120	; 0x78
 8010708:	4828      	ldr	r0, [pc, #160]	; (80107ac <_printf_i+0x248>)
 801070a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801070e:	e7e3      	b.n	80106d8 <_printf_i+0x174>
 8010710:	0659      	lsls	r1, r3, #25
 8010712:	bf48      	it	mi
 8010714:	b2b6      	uxthmi	r6, r6
 8010716:	e7e6      	b.n	80106e6 <_printf_i+0x182>
 8010718:	4615      	mov	r5, r2
 801071a:	e7bb      	b.n	8010694 <_printf_i+0x130>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	6826      	ldr	r6, [r4, #0]
 8010720:	6961      	ldr	r1, [r4, #20]
 8010722:	1d18      	adds	r0, r3, #4
 8010724:	6028      	str	r0, [r5, #0]
 8010726:	0635      	lsls	r5, r6, #24
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	d501      	bpl.n	8010730 <_printf_i+0x1cc>
 801072c:	6019      	str	r1, [r3, #0]
 801072e:	e002      	b.n	8010736 <_printf_i+0x1d2>
 8010730:	0670      	lsls	r0, r6, #25
 8010732:	d5fb      	bpl.n	801072c <_printf_i+0x1c8>
 8010734:	8019      	strh	r1, [r3, #0]
 8010736:	2300      	movs	r3, #0
 8010738:	6123      	str	r3, [r4, #16]
 801073a:	4615      	mov	r5, r2
 801073c:	e7ba      	b.n	80106b4 <_printf_i+0x150>
 801073e:	682b      	ldr	r3, [r5, #0]
 8010740:	1d1a      	adds	r2, r3, #4
 8010742:	602a      	str	r2, [r5, #0]
 8010744:	681d      	ldr	r5, [r3, #0]
 8010746:	6862      	ldr	r2, [r4, #4]
 8010748:	2100      	movs	r1, #0
 801074a:	4628      	mov	r0, r5
 801074c:	f7ef fcf8 	bl	8000140 <memchr>
 8010750:	b108      	cbz	r0, 8010756 <_printf_i+0x1f2>
 8010752:	1b40      	subs	r0, r0, r5
 8010754:	6060      	str	r0, [r4, #4]
 8010756:	6863      	ldr	r3, [r4, #4]
 8010758:	6123      	str	r3, [r4, #16]
 801075a:	2300      	movs	r3, #0
 801075c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010760:	e7a8      	b.n	80106b4 <_printf_i+0x150>
 8010762:	6923      	ldr	r3, [r4, #16]
 8010764:	462a      	mov	r2, r5
 8010766:	4649      	mov	r1, r9
 8010768:	4640      	mov	r0, r8
 801076a:	47d0      	blx	sl
 801076c:	3001      	adds	r0, #1
 801076e:	d0ab      	beq.n	80106c8 <_printf_i+0x164>
 8010770:	6823      	ldr	r3, [r4, #0]
 8010772:	079b      	lsls	r3, r3, #30
 8010774:	d413      	bmi.n	801079e <_printf_i+0x23a>
 8010776:	68e0      	ldr	r0, [r4, #12]
 8010778:	9b03      	ldr	r3, [sp, #12]
 801077a:	4298      	cmp	r0, r3
 801077c:	bfb8      	it	lt
 801077e:	4618      	movlt	r0, r3
 8010780:	e7a4      	b.n	80106cc <_printf_i+0x168>
 8010782:	2301      	movs	r3, #1
 8010784:	4632      	mov	r2, r6
 8010786:	4649      	mov	r1, r9
 8010788:	4640      	mov	r0, r8
 801078a:	47d0      	blx	sl
 801078c:	3001      	adds	r0, #1
 801078e:	d09b      	beq.n	80106c8 <_printf_i+0x164>
 8010790:	3501      	adds	r5, #1
 8010792:	68e3      	ldr	r3, [r4, #12]
 8010794:	9903      	ldr	r1, [sp, #12]
 8010796:	1a5b      	subs	r3, r3, r1
 8010798:	42ab      	cmp	r3, r5
 801079a:	dcf2      	bgt.n	8010782 <_printf_i+0x21e>
 801079c:	e7eb      	b.n	8010776 <_printf_i+0x212>
 801079e:	2500      	movs	r5, #0
 80107a0:	f104 0619 	add.w	r6, r4, #25
 80107a4:	e7f5      	b.n	8010792 <_printf_i+0x22e>
 80107a6:	bf00      	nop
 80107a8:	0801983d 	.word	0x0801983d
 80107ac:	0801984e 	.word	0x0801984e

080107b0 <_scanf_chars>:
 80107b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107b4:	4615      	mov	r5, r2
 80107b6:	688a      	ldr	r2, [r1, #8]
 80107b8:	4680      	mov	r8, r0
 80107ba:	460c      	mov	r4, r1
 80107bc:	b932      	cbnz	r2, 80107cc <_scanf_chars+0x1c>
 80107be:	698a      	ldr	r2, [r1, #24]
 80107c0:	2a00      	cmp	r2, #0
 80107c2:	bf0c      	ite	eq
 80107c4:	2201      	moveq	r2, #1
 80107c6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80107ca:	608a      	str	r2, [r1, #8]
 80107cc:	6822      	ldr	r2, [r4, #0]
 80107ce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010860 <_scanf_chars+0xb0>
 80107d2:	06d1      	lsls	r1, r2, #27
 80107d4:	bf5f      	itttt	pl
 80107d6:	681a      	ldrpl	r2, [r3, #0]
 80107d8:	1d11      	addpl	r1, r2, #4
 80107da:	6019      	strpl	r1, [r3, #0]
 80107dc:	6816      	ldrpl	r6, [r2, #0]
 80107de:	2700      	movs	r7, #0
 80107e0:	69a0      	ldr	r0, [r4, #24]
 80107e2:	b188      	cbz	r0, 8010808 <_scanf_chars+0x58>
 80107e4:	2801      	cmp	r0, #1
 80107e6:	d107      	bne.n	80107f8 <_scanf_chars+0x48>
 80107e8:	682b      	ldr	r3, [r5, #0]
 80107ea:	781a      	ldrb	r2, [r3, #0]
 80107ec:	6963      	ldr	r3, [r4, #20]
 80107ee:	5c9b      	ldrb	r3, [r3, r2]
 80107f0:	b953      	cbnz	r3, 8010808 <_scanf_chars+0x58>
 80107f2:	2f00      	cmp	r7, #0
 80107f4:	d031      	beq.n	801085a <_scanf_chars+0xaa>
 80107f6:	e022      	b.n	801083e <_scanf_chars+0x8e>
 80107f8:	2802      	cmp	r0, #2
 80107fa:	d120      	bne.n	801083e <_scanf_chars+0x8e>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010804:	071b      	lsls	r3, r3, #28
 8010806:	d41a      	bmi.n	801083e <_scanf_chars+0x8e>
 8010808:	6823      	ldr	r3, [r4, #0]
 801080a:	06da      	lsls	r2, r3, #27
 801080c:	bf5e      	ittt	pl
 801080e:	682b      	ldrpl	r3, [r5, #0]
 8010810:	781b      	ldrbpl	r3, [r3, #0]
 8010812:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010816:	682a      	ldr	r2, [r5, #0]
 8010818:	686b      	ldr	r3, [r5, #4]
 801081a:	3201      	adds	r2, #1
 801081c:	602a      	str	r2, [r5, #0]
 801081e:	68a2      	ldr	r2, [r4, #8]
 8010820:	3b01      	subs	r3, #1
 8010822:	3a01      	subs	r2, #1
 8010824:	606b      	str	r3, [r5, #4]
 8010826:	3701      	adds	r7, #1
 8010828:	60a2      	str	r2, [r4, #8]
 801082a:	b142      	cbz	r2, 801083e <_scanf_chars+0x8e>
 801082c:	2b00      	cmp	r3, #0
 801082e:	dcd7      	bgt.n	80107e0 <_scanf_chars+0x30>
 8010830:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010834:	4629      	mov	r1, r5
 8010836:	4640      	mov	r0, r8
 8010838:	4798      	blx	r3
 801083a:	2800      	cmp	r0, #0
 801083c:	d0d0      	beq.n	80107e0 <_scanf_chars+0x30>
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	f013 0310 	ands.w	r3, r3, #16
 8010844:	d105      	bne.n	8010852 <_scanf_chars+0xa2>
 8010846:	68e2      	ldr	r2, [r4, #12]
 8010848:	3201      	adds	r2, #1
 801084a:	60e2      	str	r2, [r4, #12]
 801084c:	69a2      	ldr	r2, [r4, #24]
 801084e:	b102      	cbz	r2, 8010852 <_scanf_chars+0xa2>
 8010850:	7033      	strb	r3, [r6, #0]
 8010852:	6923      	ldr	r3, [r4, #16]
 8010854:	443b      	add	r3, r7
 8010856:	6123      	str	r3, [r4, #16]
 8010858:	2000      	movs	r0, #0
 801085a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801085e:	bf00      	nop
 8010860:	08019578 	.word	0x08019578

08010864 <_scanf_i>:
 8010864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010868:	4698      	mov	r8, r3
 801086a:	4b74      	ldr	r3, [pc, #464]	; (8010a3c <_scanf_i+0x1d8>)
 801086c:	460c      	mov	r4, r1
 801086e:	4682      	mov	sl, r0
 8010870:	4616      	mov	r6, r2
 8010872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010876:	b087      	sub	sp, #28
 8010878:	ab03      	add	r3, sp, #12
 801087a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801087e:	4b70      	ldr	r3, [pc, #448]	; (8010a40 <_scanf_i+0x1dc>)
 8010880:	69a1      	ldr	r1, [r4, #24]
 8010882:	4a70      	ldr	r2, [pc, #448]	; (8010a44 <_scanf_i+0x1e0>)
 8010884:	2903      	cmp	r1, #3
 8010886:	bf18      	it	ne
 8010888:	461a      	movne	r2, r3
 801088a:	68a3      	ldr	r3, [r4, #8]
 801088c:	9201      	str	r2, [sp, #4]
 801088e:	1e5a      	subs	r2, r3, #1
 8010890:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010894:	bf88      	it	hi
 8010896:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801089a:	4627      	mov	r7, r4
 801089c:	bf82      	ittt	hi
 801089e:	eb03 0905 	addhi.w	r9, r3, r5
 80108a2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80108a6:	60a3      	strhi	r3, [r4, #8]
 80108a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80108ac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80108b0:	bf98      	it	ls
 80108b2:	f04f 0900 	movls.w	r9, #0
 80108b6:	6023      	str	r3, [r4, #0]
 80108b8:	463d      	mov	r5, r7
 80108ba:	f04f 0b00 	mov.w	fp, #0
 80108be:	6831      	ldr	r1, [r6, #0]
 80108c0:	ab03      	add	r3, sp, #12
 80108c2:	7809      	ldrb	r1, [r1, #0]
 80108c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80108c8:	2202      	movs	r2, #2
 80108ca:	f7ef fc39 	bl	8000140 <memchr>
 80108ce:	b328      	cbz	r0, 801091c <_scanf_i+0xb8>
 80108d0:	f1bb 0f01 	cmp.w	fp, #1
 80108d4:	d159      	bne.n	801098a <_scanf_i+0x126>
 80108d6:	6862      	ldr	r2, [r4, #4]
 80108d8:	b92a      	cbnz	r2, 80108e6 <_scanf_i+0x82>
 80108da:	6822      	ldr	r2, [r4, #0]
 80108dc:	2308      	movs	r3, #8
 80108de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80108e2:	6063      	str	r3, [r4, #4]
 80108e4:	6022      	str	r2, [r4, #0]
 80108e6:	6822      	ldr	r2, [r4, #0]
 80108e8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80108ec:	6022      	str	r2, [r4, #0]
 80108ee:	68a2      	ldr	r2, [r4, #8]
 80108f0:	1e51      	subs	r1, r2, #1
 80108f2:	60a1      	str	r1, [r4, #8]
 80108f4:	b192      	cbz	r2, 801091c <_scanf_i+0xb8>
 80108f6:	6832      	ldr	r2, [r6, #0]
 80108f8:	1c51      	adds	r1, r2, #1
 80108fa:	6031      	str	r1, [r6, #0]
 80108fc:	7812      	ldrb	r2, [r2, #0]
 80108fe:	f805 2b01 	strb.w	r2, [r5], #1
 8010902:	6872      	ldr	r2, [r6, #4]
 8010904:	3a01      	subs	r2, #1
 8010906:	2a00      	cmp	r2, #0
 8010908:	6072      	str	r2, [r6, #4]
 801090a:	dc07      	bgt.n	801091c <_scanf_i+0xb8>
 801090c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010910:	4631      	mov	r1, r6
 8010912:	4650      	mov	r0, sl
 8010914:	4790      	blx	r2
 8010916:	2800      	cmp	r0, #0
 8010918:	f040 8085 	bne.w	8010a26 <_scanf_i+0x1c2>
 801091c:	f10b 0b01 	add.w	fp, fp, #1
 8010920:	f1bb 0f03 	cmp.w	fp, #3
 8010924:	d1cb      	bne.n	80108be <_scanf_i+0x5a>
 8010926:	6863      	ldr	r3, [r4, #4]
 8010928:	b90b      	cbnz	r3, 801092e <_scanf_i+0xca>
 801092a:	230a      	movs	r3, #10
 801092c:	6063      	str	r3, [r4, #4]
 801092e:	6863      	ldr	r3, [r4, #4]
 8010930:	4945      	ldr	r1, [pc, #276]	; (8010a48 <_scanf_i+0x1e4>)
 8010932:	6960      	ldr	r0, [r4, #20]
 8010934:	1ac9      	subs	r1, r1, r3
 8010936:	f005 ffc1 	bl	80168bc <__sccl>
 801093a:	f04f 0b00 	mov.w	fp, #0
 801093e:	68a3      	ldr	r3, [r4, #8]
 8010940:	6822      	ldr	r2, [r4, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d03d      	beq.n	80109c2 <_scanf_i+0x15e>
 8010946:	6831      	ldr	r1, [r6, #0]
 8010948:	6960      	ldr	r0, [r4, #20]
 801094a:	f891 c000 	ldrb.w	ip, [r1]
 801094e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010952:	2800      	cmp	r0, #0
 8010954:	d035      	beq.n	80109c2 <_scanf_i+0x15e>
 8010956:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801095a:	d124      	bne.n	80109a6 <_scanf_i+0x142>
 801095c:	0510      	lsls	r0, r2, #20
 801095e:	d522      	bpl.n	80109a6 <_scanf_i+0x142>
 8010960:	f10b 0b01 	add.w	fp, fp, #1
 8010964:	f1b9 0f00 	cmp.w	r9, #0
 8010968:	d003      	beq.n	8010972 <_scanf_i+0x10e>
 801096a:	3301      	adds	r3, #1
 801096c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8010970:	60a3      	str	r3, [r4, #8]
 8010972:	6873      	ldr	r3, [r6, #4]
 8010974:	3b01      	subs	r3, #1
 8010976:	2b00      	cmp	r3, #0
 8010978:	6073      	str	r3, [r6, #4]
 801097a:	dd1b      	ble.n	80109b4 <_scanf_i+0x150>
 801097c:	6833      	ldr	r3, [r6, #0]
 801097e:	3301      	adds	r3, #1
 8010980:	6033      	str	r3, [r6, #0]
 8010982:	68a3      	ldr	r3, [r4, #8]
 8010984:	3b01      	subs	r3, #1
 8010986:	60a3      	str	r3, [r4, #8]
 8010988:	e7d9      	b.n	801093e <_scanf_i+0xda>
 801098a:	f1bb 0f02 	cmp.w	fp, #2
 801098e:	d1ae      	bne.n	80108ee <_scanf_i+0x8a>
 8010990:	6822      	ldr	r2, [r4, #0]
 8010992:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010996:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801099a:	d1bf      	bne.n	801091c <_scanf_i+0xb8>
 801099c:	2310      	movs	r3, #16
 801099e:	6063      	str	r3, [r4, #4]
 80109a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80109a4:	e7a2      	b.n	80108ec <_scanf_i+0x88>
 80109a6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80109aa:	6022      	str	r2, [r4, #0]
 80109ac:	780b      	ldrb	r3, [r1, #0]
 80109ae:	f805 3b01 	strb.w	r3, [r5], #1
 80109b2:	e7de      	b.n	8010972 <_scanf_i+0x10e>
 80109b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80109b8:	4631      	mov	r1, r6
 80109ba:	4650      	mov	r0, sl
 80109bc:	4798      	blx	r3
 80109be:	2800      	cmp	r0, #0
 80109c0:	d0df      	beq.n	8010982 <_scanf_i+0x11e>
 80109c2:	6823      	ldr	r3, [r4, #0]
 80109c4:	05d9      	lsls	r1, r3, #23
 80109c6:	d50d      	bpl.n	80109e4 <_scanf_i+0x180>
 80109c8:	42bd      	cmp	r5, r7
 80109ca:	d909      	bls.n	80109e0 <_scanf_i+0x17c>
 80109cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80109d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80109d4:	4632      	mov	r2, r6
 80109d6:	4650      	mov	r0, sl
 80109d8:	4798      	blx	r3
 80109da:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80109de:	464d      	mov	r5, r9
 80109e0:	42bd      	cmp	r5, r7
 80109e2:	d028      	beq.n	8010a36 <_scanf_i+0x1d2>
 80109e4:	6822      	ldr	r2, [r4, #0]
 80109e6:	f012 0210 	ands.w	r2, r2, #16
 80109ea:	d113      	bne.n	8010a14 <_scanf_i+0x1b0>
 80109ec:	702a      	strb	r2, [r5, #0]
 80109ee:	6863      	ldr	r3, [r4, #4]
 80109f0:	9e01      	ldr	r6, [sp, #4]
 80109f2:	4639      	mov	r1, r7
 80109f4:	4650      	mov	r0, sl
 80109f6:	47b0      	blx	r6
 80109f8:	f8d8 3000 	ldr.w	r3, [r8]
 80109fc:	6821      	ldr	r1, [r4, #0]
 80109fe:	1d1a      	adds	r2, r3, #4
 8010a00:	f8c8 2000 	str.w	r2, [r8]
 8010a04:	f011 0f20 	tst.w	r1, #32
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	d00f      	beq.n	8010a2c <_scanf_i+0x1c8>
 8010a0c:	6018      	str	r0, [r3, #0]
 8010a0e:	68e3      	ldr	r3, [r4, #12]
 8010a10:	3301      	adds	r3, #1
 8010a12:	60e3      	str	r3, [r4, #12]
 8010a14:	1bed      	subs	r5, r5, r7
 8010a16:	44ab      	add	fp, r5
 8010a18:	6925      	ldr	r5, [r4, #16]
 8010a1a:	445d      	add	r5, fp
 8010a1c:	6125      	str	r5, [r4, #16]
 8010a1e:	2000      	movs	r0, #0
 8010a20:	b007      	add	sp, #28
 8010a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a26:	f04f 0b00 	mov.w	fp, #0
 8010a2a:	e7ca      	b.n	80109c2 <_scanf_i+0x15e>
 8010a2c:	07ca      	lsls	r2, r1, #31
 8010a2e:	bf4c      	ite	mi
 8010a30:	8018      	strhmi	r0, [r3, #0]
 8010a32:	6018      	strpl	r0, [r3, #0]
 8010a34:	e7eb      	b.n	8010a0e <_scanf_i+0x1aa>
 8010a36:	2001      	movs	r0, #1
 8010a38:	e7f2      	b.n	8010a20 <_scanf_i+0x1bc>
 8010a3a:	bf00      	nop
 8010a3c:	08017070 	.word	0x08017070
 8010a40:	08016653 	.word	0x08016653
 8010a44:	0801692d 	.word	0x0801692d
 8010a48:	08019875 	.word	0x08019875

08010a4c <_strtol_l.constprop.0>:
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a52:	4680      	mov	r8, r0
 8010a54:	d001      	beq.n	8010a5a <_strtol_l.constprop.0+0xe>
 8010a56:	2b24      	cmp	r3, #36	; 0x24
 8010a58:	d906      	bls.n	8010a68 <_strtol_l.constprop.0+0x1c>
 8010a5a:	f000 fdb9 	bl	80115d0 <__errno>
 8010a5e:	2316      	movs	r3, #22
 8010a60:	6003      	str	r3, [r0, #0]
 8010a62:	2000      	movs	r0, #0
 8010a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a68:	4f35      	ldr	r7, [pc, #212]	; (8010b40 <_strtol_l.constprop.0+0xf4>)
 8010a6a:	460d      	mov	r5, r1
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a72:	5de6      	ldrb	r6, [r4, r7]
 8010a74:	f016 0608 	ands.w	r6, r6, #8
 8010a78:	d1f8      	bne.n	8010a6c <_strtol_l.constprop.0+0x20>
 8010a7a:	2c2d      	cmp	r4, #45	; 0x2d
 8010a7c:	d12f      	bne.n	8010ade <_strtol_l.constprop.0+0x92>
 8010a7e:	782c      	ldrb	r4, [r5, #0]
 8010a80:	2601      	movs	r6, #1
 8010a82:	1c85      	adds	r5, r0, #2
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d057      	beq.n	8010b38 <_strtol_l.constprop.0+0xec>
 8010a88:	2b10      	cmp	r3, #16
 8010a8a:	d109      	bne.n	8010aa0 <_strtol_l.constprop.0+0x54>
 8010a8c:	2c30      	cmp	r4, #48	; 0x30
 8010a8e:	d107      	bne.n	8010aa0 <_strtol_l.constprop.0+0x54>
 8010a90:	7828      	ldrb	r0, [r5, #0]
 8010a92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010a96:	2858      	cmp	r0, #88	; 0x58
 8010a98:	d149      	bne.n	8010b2e <_strtol_l.constprop.0+0xe2>
 8010a9a:	786c      	ldrb	r4, [r5, #1]
 8010a9c:	2310      	movs	r3, #16
 8010a9e:	3502      	adds	r5, #2
 8010aa0:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8010aa4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8010aa8:	2700      	movs	r7, #0
 8010aaa:	fbbe f9f3 	udiv	r9, lr, r3
 8010aae:	4638      	mov	r0, r7
 8010ab0:	fb03 ea19 	mls	sl, r3, r9, lr
 8010ab4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010ab8:	f1bc 0f09 	cmp.w	ip, #9
 8010abc:	d814      	bhi.n	8010ae8 <_strtol_l.constprop.0+0x9c>
 8010abe:	4664      	mov	r4, ip
 8010ac0:	42a3      	cmp	r3, r4
 8010ac2:	dd22      	ble.n	8010b0a <_strtol_l.constprop.0+0xbe>
 8010ac4:	2f00      	cmp	r7, #0
 8010ac6:	db1d      	blt.n	8010b04 <_strtol_l.constprop.0+0xb8>
 8010ac8:	4581      	cmp	r9, r0
 8010aca:	d31b      	bcc.n	8010b04 <_strtol_l.constprop.0+0xb8>
 8010acc:	d101      	bne.n	8010ad2 <_strtol_l.constprop.0+0x86>
 8010ace:	45a2      	cmp	sl, r4
 8010ad0:	db18      	blt.n	8010b04 <_strtol_l.constprop.0+0xb8>
 8010ad2:	fb00 4003 	mla	r0, r0, r3, r4
 8010ad6:	2701      	movs	r7, #1
 8010ad8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010adc:	e7ea      	b.n	8010ab4 <_strtol_l.constprop.0+0x68>
 8010ade:	2c2b      	cmp	r4, #43	; 0x2b
 8010ae0:	bf04      	itt	eq
 8010ae2:	782c      	ldrbeq	r4, [r5, #0]
 8010ae4:	1c85      	addeq	r5, r0, #2
 8010ae6:	e7cd      	b.n	8010a84 <_strtol_l.constprop.0+0x38>
 8010ae8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010aec:	f1bc 0f19 	cmp.w	ip, #25
 8010af0:	d801      	bhi.n	8010af6 <_strtol_l.constprop.0+0xaa>
 8010af2:	3c37      	subs	r4, #55	; 0x37
 8010af4:	e7e4      	b.n	8010ac0 <_strtol_l.constprop.0+0x74>
 8010af6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010afa:	f1bc 0f19 	cmp.w	ip, #25
 8010afe:	d804      	bhi.n	8010b0a <_strtol_l.constprop.0+0xbe>
 8010b00:	3c57      	subs	r4, #87	; 0x57
 8010b02:	e7dd      	b.n	8010ac0 <_strtol_l.constprop.0+0x74>
 8010b04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010b08:	e7e6      	b.n	8010ad8 <_strtol_l.constprop.0+0x8c>
 8010b0a:	2f00      	cmp	r7, #0
 8010b0c:	da07      	bge.n	8010b1e <_strtol_l.constprop.0+0xd2>
 8010b0e:	2322      	movs	r3, #34	; 0x22
 8010b10:	f8c8 3000 	str.w	r3, [r8]
 8010b14:	4670      	mov	r0, lr
 8010b16:	2a00      	cmp	r2, #0
 8010b18:	d0a4      	beq.n	8010a64 <_strtol_l.constprop.0+0x18>
 8010b1a:	1e69      	subs	r1, r5, #1
 8010b1c:	e005      	b.n	8010b2a <_strtol_l.constprop.0+0xde>
 8010b1e:	b106      	cbz	r6, 8010b22 <_strtol_l.constprop.0+0xd6>
 8010b20:	4240      	negs	r0, r0
 8010b22:	2a00      	cmp	r2, #0
 8010b24:	d09e      	beq.n	8010a64 <_strtol_l.constprop.0+0x18>
 8010b26:	2f00      	cmp	r7, #0
 8010b28:	d1f7      	bne.n	8010b1a <_strtol_l.constprop.0+0xce>
 8010b2a:	6011      	str	r1, [r2, #0]
 8010b2c:	e79a      	b.n	8010a64 <_strtol_l.constprop.0+0x18>
 8010b2e:	2430      	movs	r4, #48	; 0x30
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d1b5      	bne.n	8010aa0 <_strtol_l.constprop.0+0x54>
 8010b34:	2308      	movs	r3, #8
 8010b36:	e7b3      	b.n	8010aa0 <_strtol_l.constprop.0+0x54>
 8010b38:	2c30      	cmp	r4, #48	; 0x30
 8010b3a:	d0a9      	beq.n	8010a90 <_strtol_l.constprop.0+0x44>
 8010b3c:	230a      	movs	r3, #10
 8010b3e:	e7af      	b.n	8010aa0 <_strtol_l.constprop.0+0x54>
 8010b40:	08019578 	.word	0x08019578

08010b44 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8010b44:	4770      	bx	lr

08010b46 <z_log_msg2_static_create.constprop.0>:
 8010b46:	2300      	movs	r3, #0
 8010b48:	f000 bc9f 	b.w	801148a <z_impl_z_log_msg2_static_create>

08010b4c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8010b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8010b4e:	ab0b      	add	r3, sp, #44	; 0x2c
 8010b50:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8010b52:	9303      	str	r3, [sp, #12]
 8010b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b56:	9302      	str	r3, [sp, #8]
 8010b58:	2300      	movs	r3, #0
 8010b5a:	e9cd 3300 	strd	r3, r3, [sp]
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7f2 fef0 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010b64:	b007      	add	sp, #28
 8010b66:	f85d fb04 	ldr.w	pc, [sp], #4

08010b6a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8010b6a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8010b6c:	ab0b      	add	r3, sp, #44	; 0x2c
 8010b6e:	9305      	str	r3, [sp, #20]
 8010b70:	9303      	str	r3, [sp, #12]
 8010b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b74:	9302      	str	r3, [sp, #8]
 8010b76:	2300      	movs	r3, #0
 8010b78:	e9cd 3300 	strd	r3, r3, [sp]
 8010b7c:	2203      	movs	r2, #3
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7f2 fee0 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010b84:	b007      	add	sp, #28
 8010b86:	f85d fb04 	ldr.w	pc, [sp], #4

08010b8a <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 8010b8e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8010b90:	7919      	ldrb	r1, [r3, #4]
 8010b92:	2301      	movs	r3, #1
 8010b94:	fa03 f101 	lsl.w	r1, r3, r1
 8010b98:	6903      	ldr	r3, [r0, #16]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8010b9e:	bf18      	it	ne
 8010ba0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8010ba4:	b112      	cbz	r2, 8010bac <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 8010ba6:	6883      	ldr	r3, [r0, #8]
 8010ba8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8010baa:	4718      	bx	r3
 8010bac:	6883      	ldr	r3, [r0, #8]
 8010bae:	691b      	ldr	r3, [r3, #16]
 8010bb0:	e7fb      	b.n	8010baa <gpio_pin_set_dt.isra.0+0x20>

08010bb2 <gpio_pin_configure.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
 8010bb2:	b4f0      	push	{r4, r5, r6, r7}
 8010bb4:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8010bb6:	02d4      	lsls	r4, r2, #11
	const struct gpio_driver_api *api =
 8010bb8:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8010bba:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8010bbc:	d506      	bpl.n	8010bcc <gpio_pin_configure.isra.0+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8010bbe:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 8010bc2:	d003      	beq.n	8010bcc <gpio_pin_configure.isra.0+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8010bc4:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8010bc6:	bf48      	it	mi
 8010bc8:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8010bcc:	6834      	ldr	r4, [r6, #0]
 8010bce:	2501      	movs	r5, #1
 8010bd0:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8010bd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8010bd6:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8010bd8:	bf4c      	ite	mi
 8010bda:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8010bdc:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
 8010be2:	bcf0      	pop	{r4, r5, r6, r7}
 8010be4:	4718      	bx	r3

08010be6 <k_msleep.isra.0>:
			return t * ((uint64_t)to_hz / from_hz);
 8010be6:	210a      	movs	r1, #10
 8010be8:	fb80 0101 	smull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 8010bec:	f7fd bce2 	b.w	800e5b4 <z_impl_k_sleep>

08010bf0 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	f000 bc4a 	b.w	801148a <z_impl_z_log_msg2_static_create>

08010bf6 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8010bf6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8010bf8:	aa0b      	add	r2, sp, #44	; 0x2c
 8010bfa:	9205      	str	r2, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 8010bfc:	9203      	str	r2, [sp, #12]
 8010bfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c00:	9202      	str	r2, [sp, #8]
 8010c02:	2000      	movs	r0, #0
 8010c04:	9a08      	ldr	r2, [sp, #32]
 8010c06:	9200      	str	r2, [sp, #0]
 8010c08:	9001      	str	r0, [sp, #4]
 8010c0a:	2203      	movs	r2, #3
 8010c0c:	f7f2 fe9a 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010c10:	b007      	add	sp, #28
 8010c12:	f85d fb04 	ldr.w	pc, [sp], #4

08010c16 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8010c16:	2301      	movs	r3, #1
 8010c18:	fa03 f101 	lsl.w	r1, r3, r1
 8010c1c:	6903      	ldr	r3, [r0, #16]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8010c22:	bf18      	it	ne
 8010c24:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8010c28:	b112      	cbz	r2, 8010c30 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 8010c2a:	6883      	ldr	r3, [r0, #8]
 8010c2c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8010c2e:	4718      	bx	r3
 8010c30:	6883      	ldr	r3, [r0, #8]
 8010c32:	691b      	ldr	r3, [r3, #16]
 8010c34:	e7fb      	b.n	8010c2e <gpio_pin_set.isra.0+0x18>

08010c36 <gpio_pin_configure.isra.0>:
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
 8010c36:	b470      	push	{r4, r5, r6}
	struct gpio_driver_data *data =
 8010c38:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
 8010c3a:	6886      	ldr	r6, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	fa03 f401 	lsl.w	r4, r3, r1
 8010c42:	682b      	ldr	r3, [r5, #0]
 8010c44:	ea23 0304 	bic.w	r3, r3, r4
 8010c48:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 8010c4a:	6833      	ldr	r3, [r6, #0]
}
 8010c4c:	bc70      	pop	{r4, r5, r6}
 8010c4e:	4718      	bx	r3

08010c50 <k_msleep.isra.0>:
 8010c50:	210a      	movs	r1, #10
 8010c52:	fb80 0101 	smull	r0, r1, r0, r1
 8010c56:	f7fd bcad 	b.w	800e5b4 <z_impl_k_sleep>

08010c5a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8010c5a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8010c5c:	ab0b      	add	r3, sp, #44	; 0x2c
 8010c5e:	9305      	str	r3, [sp, #20]
 8010c60:	9303      	str	r3, [sp, #12]
 8010c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c64:	9302      	str	r3, [sp, #8]
 8010c66:	2300      	movs	r3, #0
 8010c68:	e9cd 3300 	strd	r3, r3, [sp]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7f2 fe69 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010c72:	b007      	add	sp, #28
 8010c74:	f85d fb04 	ldr.w	pc, [sp], #4

08010c78 <str_out>:
	if (scp->dp < scp->dpe) {
 8010c78:	e9d1 3200 	ldrd	r3, r2, [r1]
 8010c7c:	4293      	cmp	r3, r2
		*(scp->dp++) = c;
 8010c7e:	bf3e      	ittt	cc
 8010c80:	1c5a      	addcc	r2, r3, #1
 8010c82:	600a      	strcc	r2, [r1, #0]
 8010c84:	7018      	strbcc	r0, [r3, #0]
}
 8010c86:	4770      	bx	lr

08010c88 <snprintfcb>:
{
 8010c88:	b40c      	push	{r2, r3}
 8010c8a:	b507      	push	{r0, r1, r2, lr}
 8010c8c:	ab04      	add	r3, sp, #16
 8010c8e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, format);
 8010c92:	9301      	str	r3, [sp, #4]
	rc = vsnprintfcb(str, size, format, ap);
 8010c94:	f7f1 f896 	bl	8001dc4 <vsnprintfcb>
}
 8010c98:	b003      	add	sp, #12
 8010c9a:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c9e:	b002      	add	sp, #8
 8010ca0:	4770      	bx	lr

08010ca2 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
 8010ca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ca6:	4607      	mov	r7, r0
 8010ca8:	460e      	mov	r6, r1
 8010caa:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
 8010cac:	461d      	mov	r5, r3
 8010cae:	b30b      	cbz	r3, 8010cf4 <cbpprintf_external+0x52>
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
	rws_nbr   = buf[3];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 8010cb0:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
 8010cb2:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
 8010cb4:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
 8010cb8:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
 8010cba:	441c      	add	r4, r3
 8010cbc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8010cc0:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 8010cc2:	f04f 0900 	mov.w	r9, #0
 8010cc6:	45d1      	cmp	r9, sl
 8010cc8:	d308      	bcc.n	8010cdc <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
 8010cca:	686a      	ldr	r2, [r5, #4]
 8010ccc:	f105 0308 	add.w	r3, r5, #8
 8010cd0:	4641      	mov	r1, r8
 8010cd2:	4638      	mov	r0, r7
 8010cd4:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
 8010cd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 8010cda:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
 8010cdc:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
 8010ce0:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	f7f0 f921 	bl	8000f2c <strlen>
 8010cea:	3001      	adds	r0, #1
 8010cec:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 8010cee:	f109 0901 	add.w	r9, r9, #1
 8010cf2:	e7e8      	b.n	8010cc6 <cbpprintf_external+0x24>
}
 8010cf4:	f06f 0015 	mvn.w	r0, #21
 8010cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010cfc <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
 8010cfc:	440a      	add	r2, r1
 8010cfe:	428a      	cmp	r2, r1
 8010d00:	d100      	bne.n	8010d04 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
 8010d02:	4770      	bx	lr
		seed ^= *src++;
 8010d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d08:	ba40      	rev16	r0, r0
 8010d0a:	b280      	uxth	r0, r0
 8010d0c:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
 8010d0e:	f3c0 1303 	ubfx	r3, r0, #4, #4
 8010d12:	4058      	eors	r0, r3
		seed ^= seed << 12U;
 8010d14:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
 8010d18:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
 8010d1a:	0158      	lsls	r0, r3, #5
 8010d1c:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
 8010d20:	4058      	eors	r0, r3
	for (; len > 0; len--) {
 8010d22:	e7ec      	b.n	8010cfe <crc16_itu_t+0x2>

08010d24 <crc8>:
	return val;
}

uint8_t crc8(const uint8_t *src, size_t len, uint8_t polynomial, uint8_t initial_value,
	  bool reversed)
{
 8010d24:	b570      	push	{r4, r5, r6, lr}
 8010d26:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	4401      	add	r1, r0
	uint8_t crc = initial_value;
 8010d2e:	4618      	mov	r0, r3
	size_t i, j;

	for (i = 0; i < len; i++) {
 8010d30:	428c      	cmp	r4, r1
 8010d32:	d100      	bne.n	8010d36 <crc8+0x12>
			}
		}
	}

	return crc;
}
 8010d34:	bd70      	pop	{r4, r5, r6, pc}
		crc ^= src[i];
 8010d36:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d3a:	2508      	movs	r5, #8
 8010d3c:	4058      	eors	r0, r3
			if (reversed) {
 8010d3e:	b14e      	cbz	r6, 8010d54 <crc8+0x30>
				if (crc & 0x01) {
 8010d40:	f000 0301 	and.w	r3, r0, #1
					crc = (crc >> 1) ^ polynomial;
 8010d44:	0840      	lsrs	r0, r0, #1
				if (crc & 0x01) {
 8010d46:	b113      	cbz	r3, 8010d4e <crc8+0x2a>
					crc = (crc >> 1) ^ polynomial;
 8010d48:	ea80 0302 	eor.w	r3, r0, r2
 8010d4c:	b2d8      	uxtb	r0, r3
		for (j = 0; j < 8; j++) {
 8010d4e:	3d01      	subs	r5, #1
 8010d50:	d1f5      	bne.n	8010d3e <crc8+0x1a>
 8010d52:	e7ed      	b.n	8010d30 <crc8+0xc>
				if (crc & 0x80) {
 8010d54:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010d58:	ea4f 0040 	mov.w	r0, r0, lsl #1
					crc = (crc << 1) ^ polynomial;
 8010d5c:	bf18      	it	ne
 8010d5e:	4050      	eorne	r0, r2
					crc <<= 1;
 8010d60:	b2c0      	uxtb	r0, r0
 8010d62:	e7f4      	b.n	8010d4e <crc8+0x2a>

08010d64 <crc7_be>:

#include <sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
 8010d64:	440a      	add	r2, r1
 8010d66:	4291      	cmp	r1, r2
 8010d68:	d100      	bne.n	8010d6c <crc7_be+0x8>

		seed = (f << 1) ^ (f << 4);
	}

	return seed;
}
 8010d6a:	4770      	bx	lr
		uint8_t e = seed ^ *src++;
 8010d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d70:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
 8010d72:	09c3      	lsrs	r3, r0, #7
 8010d74:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
		seed = (f << 1) ^ (f << 4);
 8010d78:	4058      	eors	r0, r3
 8010d7a:	0103      	lsls	r3, r0, #4
 8010d7c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
 8010d80:	b2c0      	uxtb	r0, r0
 8010d82:	e7f0      	b.n	8010d66 <crc7_be+0x2>

08010d84 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 8010d84:	6842      	ldr	r2, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
 8010d86:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 8010d8a:	2a02      	cmp	r2, #2
{
 8010d8c:	b510      	push	{r4, lr}
 8010d8e:	4603      	mov	r3, r0
	notify->result = res;
 8010d90:	6081      	str	r1, [r0, #8]
	switch (method) {
 8010d92:	d00a      	beq.n	8010daa <sys_notify_finalize+0x26>
 8010d94:	2a03      	cmp	r2, #3
 8010d96:	d10b      	bne.n	8010db0 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 8010d98:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
 8010d9a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
 8010da0:	b108      	cbz	r0, 8010da6 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
 8010da2:	f7fd fef7 	bl	800eb94 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 8010da6:	4620      	mov	r0, r4
 8010da8:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
 8010daa:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
 8010dac:	2400      	movs	r4, #0
		break;
 8010dae:	e7f5      	b.n	8010d9c <sys_notify_finalize+0x18>
	switch (method) {
 8010db0:	2400      	movs	r4, #0
 8010db2:	4620      	mov	r0, r4
 8010db4:	e7f2      	b.n	8010d9c <sys_notify_finalize+0x18>

08010db6 <arch_printk_char_out>:
}
 8010db6:	2000      	movs	r0, #0
 8010db8:	4770      	bx	lr

08010dba <str_out>:
{
 8010dba:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8010dbc:	688a      	ldr	r2, [r1, #8]
 8010dbe:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 8010dc0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8010dc2:	b114      	cbz	r4, 8010dca <str_out+0x10>
 8010dc4:	684b      	ldr	r3, [r1, #4]
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	dc01      	bgt.n	8010dce <str_out+0x14>
		ctx->count++;
 8010dca:	608d      	str	r5, [r1, #8]
}
 8010dcc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 8010dd2:	bf08      	it	eq
 8010dd4:	2200      	moveq	r2, #0
 8010dd6:	608d      	str	r5, [r1, #8]
 8010dd8:	bf0c      	ite	eq
 8010dda:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 8010ddc:	54a0      	strbne	r0, [r4, r2]
 8010dde:	e7f5      	b.n	8010dcc <str_out+0x12>

08010de0 <printk>:
{
 8010de0:	b40f      	push	{r0, r1, r2, r3}
 8010de2:	b507      	push	{r0, r1, r2, lr}
 8010de4:	a904      	add	r1, sp, #16
 8010de6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8010dea:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 8010dec:	f7f1 fa44 	bl	8002278 <vprintk>
}
 8010df0:	b003      	add	sp, #12
 8010df2:	f85d eb04 	ldr.w	lr, [sp], #4
 8010df6:	b004      	add	sp, #16
 8010df8:	4770      	bx	lr

08010dfa <snprintk>:
{
 8010dfa:	b40c      	push	{r2, r3}
 8010dfc:	b507      	push	{r0, r1, r2, lr}
 8010dfe:	ab04      	add	r3, sp, #16
 8010e00:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8010e04:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8010e06:	f7f1 fa45 	bl	8002294 <vsnprintk>
}
 8010e0a:	b003      	add	sp, #12
 8010e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e10:	b002      	add	sp, #8
 8010e12:	4770      	bx	lr

08010e14 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8010e14:	4604      	mov	r4, r0
 8010e16:	b508      	push	{r3, lr}
 8010e18:	4608      	mov	r0, r1
 8010e1a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	47a0      	blx	r4
	return z_impl_z_current_get();
 8010e20:	f7fd fbe0 	bl	800e5e4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8010e24:	f7f3 faea 	bl	80043fc <z_impl_k_thread_abort>

08010e28 <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
 8010e28:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
 8010e2a:	f7f1 fa47 	bl	80022bc <timeutil_timegm64>
 8010e2e:	4605      	mov	r5, r0
 8010e30:	460c      	mov	r4, r1
	time_t rv = (time_t)time;

	errno = 0;
 8010e32:	f000 fbcd 	bl	80115d0 <__errno>
 8010e36:	2300      	movs	r3, #0
 8010e38:	6003      	str	r3, [r0, #0]
		errno = ERANGE;
		rv = -1;
	}

	return rv;
}
 8010e3a:	4621      	mov	r1, r4
 8010e3c:	4628      	mov	r0, r5
 8010e3e:	bd38      	pop	{r3, r4, r5, pc}

08010e40 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 8010e40:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8010e44:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
 8010e46:	0840      	lsrs	r0, r0, #1
 8010e48:	4770      	bx	lr

08010e4a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8010e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4c:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
 8010e4e:	f7ff fff7 	bl	8010e40 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 8010e52:	fab0 f080 	clz	r0, r0
 8010e56:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
 8010e5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
 8010e5e:	00ca      	lsls	r2, r1, #3
 8010e60:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
 8010e64:	1d17      	adds	r7, r2, #4
{
 8010e66:	460c      	mov	r4, r1
 8010e68:	3206      	adds	r2, #6
 8010e6a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
 8010e6c:	b956      	cbnz	r6, 8010e84 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
 8010e6e:	2101      	movs	r1, #1
 8010e70:	fa01 f000 	lsl.w	r0, r1, r0
 8010e74:	68d9      	ldr	r1, [r3, #12]
 8010e76:	4301      	orrs	r1, r0
 8010e78:	60d9      	str	r1, [r3, #12]
		b->next = c;
 8010e7a:	f8cc 4010 	str.w	r4, [ip, #16]
 8010e7e:	53dd      	strh	r5, [r3, r7]
 8010e80:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
 8010e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
 8010e84:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
 8010e86:	3104      	adds	r1, #4
 8010e88:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
 8010e8a:	53d8      	strh	r0, [r3, r7]
 8010e8c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010e90:	529e      	strh	r6, [r3, r2]
 8010e92:	80c5      	strh	r5, [r0, #6]
 8010e94:	525d      	strh	r5, [r3, r1]
 8010e96:	e7f4      	b.n	8010e82 <free_list_add+0x38>

08010e98 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8010e98:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8010e9a:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8010e9c:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8010e9e:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8010ea2:	f021 0107 	bic.w	r1, r1, #7
{
 8010ea6:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8010ea8:	1acd      	subs	r5, r1, r3
 8010eaa:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8010eac:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
 8010eae:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8010eb2:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
 8010eb6:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8010eb8:	3407      	adds	r4, #7
	h->avail_buckets = 0;
 8010eba:	2600      	movs	r6, #0
 8010ebc:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8010ebe:	f1c0 0020 	rsb	r0, r0, #32
 8010ec2:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
 8010ec6:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
 8010ec8:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8010eca:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8010ece:	4284      	cmp	r4, r0
 8010ed0:	d118      	bne.n	8010f04 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8010ed2:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8010ed4:	f040 0001 	orr.w	r0, r0, #1
 8010ed8:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
 8010eda:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8010ede:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8010ee0:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
 8010ee2:	801e      	strh	r6, [r3, #0]
 8010ee4:	8067      	strh	r7, [r4, #2]
 8010ee6:	195c      	adds	r4, r3, r5
 8010ee8:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
 8010eec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
 8010ef0:	8066      	strh	r6, [r4, #2]
 8010ef2:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8010ef4:	8850      	ldrh	r0, [r2, #2]
 8010ef6:	f040 0001 	orr.w	r0, r0, #1
 8010efa:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 8010efc:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7ff bfa3 	b.w	8010e4a <free_list_add>
		h->buckets[i].next = 0;
 8010f04:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
 8010f08:	e7e1      	b.n	8010ece <sys_heap_init+0x36>

08010f0a <_ldiv5>:
	uint32_t v_lo = *v;
 8010f0a:	e9d0 2100 	ldrd	r2, r1, [r0]
{
 8010f0e:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
 8010f10:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
 8010f14:	fba2 2403 	umull	r2, r4, r2, r3
 8010f18:	18d5      	adds	r5, r2, r3
 8010f1a:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
 8010f1e:	fba1 1303 	umull	r1, r3, r1, r3
 8010f22:	1852      	adds	r2, r2, r1
 8010f24:	eb44 0403 	adc.w	r4, r4, r3
 8010f28:	1952      	adds	r2, r2, r5
 8010f2a:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
 8010f2e:	1889      	adds	r1, r1, r2
 8010f30:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
 8010f34:	e9c0 1300 	strd	r1, r3, [r0]
}
 8010f38:	bd30      	pop	{r4, r5, pc}

08010f3a <_get_digit>:
	if (*digit_count > 0) {
 8010f3a:	680a      	ldr	r2, [r1, #0]
 8010f3c:	2a00      	cmp	r2, #0
{
 8010f3e:	b510      	push	{r4, lr}
 8010f40:	4603      	mov	r3, r0
	if (*digit_count > 0) {
 8010f42:	dd0f      	ble.n	8010f64 <_get_digit+0x2a>
		--*digit_count;
 8010f44:	3a01      	subs	r2, #1
 8010f46:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
 8010f48:	681a      	ldr	r2, [r3, #0]
 8010f4a:	6844      	ldr	r4, [r0, #4]
 8010f4c:	200a      	movs	r0, #10
 8010f4e:	fba2 1200 	umull	r1, r2, r2, r0
 8010f52:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 8010f56:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
 8010f58:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8010f5c:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
 8010f60:	3030      	adds	r0, #48	; 0x30
}
 8010f62:	bd10      	pop	{r4, pc}
		rval = '0';
 8010f64:	2030      	movs	r0, #48	; 0x30
 8010f66:	e7fc      	b.n	8010f62 <_get_digit+0x28>

08010f68 <outs>:
{
 8010f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6c:	4607      	mov	r7, r0
 8010f6e:	4688      	mov	r8, r1
 8010f70:	4615      	mov	r5, r2
 8010f72:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8010f74:	4614      	mov	r4, r2
 8010f76:	42b4      	cmp	r4, r6
 8010f78:	eba4 0005 	sub.w	r0, r4, r5
 8010f7c:	d302      	bcc.n	8010f84 <outs+0x1c>
 8010f7e:	b93e      	cbnz	r6, 8010f90 <outs+0x28>
 8010f80:	7823      	ldrb	r3, [r4, #0]
 8010f82:	b12b      	cbz	r3, 8010f90 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 8010f84:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010f88:	4641      	mov	r1, r8
 8010f8a:	47b8      	blx	r7
		if (rc < 0) {
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	daf2      	bge.n	8010f76 <outs+0xe>
}
 8010f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f94 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
 8010f94:	4602      	mov	r2, r0
 8010f96:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 8010f98:	68c0      	ldr	r0, [r0, #12]
 8010f9a:	6814      	ldr	r4, [r2, #0]
 8010f9c:	42a0      	cmp	r0, r4
 8010f9e:	d904      	bls.n	8010faa <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 8010fa0:	3801      	subs	r0, #1
 8010fa2:	1b00      	subs	r0, r0, r4
 8010fa4:	6008      	str	r0, [r1, #0]

		return false;
 8010fa6:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
 8010fa8:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 8010faa:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
 8010fac:	b918      	cbnz	r0, 8010fb6 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 8010fae:	3b01      	subs	r3, #1
 8010fb0:	1b1b      	subs	r3, r3, r4
 8010fb2:	600b      	str	r3, [r1, #0]
		return false;
 8010fb4:	e7f8      	b.n	8010fa8 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
 8010fb6:	1b1b      	subs	r3, r3, r4
 8010fb8:	600b      	str	r3, [r1, #0]
	return true;
 8010fba:	2001      	movs	r0, #1
 8010fbc:	e7f4      	b.n	8010fa8 <free_space+0x14>

08010fbe <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
 8010fbe:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
 8010fc0:	a901      	add	r1, sp, #4
{
 8010fc2:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 8010fc4:	f7ff ffe6 	bl	8010f94 <free_space>
 8010fc8:	b120      	cbz	r0, 8010fd4 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 8010fca:	9b01      	ldr	r3, [sp, #4]
 8010fcc:	68e2      	ldr	r2, [r4, #12]
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	4413      	add	r3, r2
 8010fd2:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
 8010fd4:	9801      	ldr	r0, [sp, #4]
 8010fd6:	6a23      	ldr	r3, [r4, #32]
 8010fd8:	43c0      	mvns	r0, r0
}
 8010fda:	4418      	add	r0, r3
 8010fdc:	b002      	add	sp, #8
 8010fde:	bd10      	pop	{r4, pc}

08010fe0 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
 8010fe0:	b510      	push	{r4, lr}
 8010fe2:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 8010fe4:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8010fe6:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 8010fe8:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8010fea:	07d2      	lsls	r2, r2, #31
 8010fec:	d502      	bpl.n	8010ff4 <idx_inc+0x14>
		return i & (buffer->size - 1);
 8010fee:	3b01      	subs	r3, #1
 8010ff0:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
 8010ff2:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 8010ff4:	4298      	cmp	r0, r3
 8010ff6:	bf28      	it	cs
 8010ff8:	1ac0      	subcs	r0, r0, r3
 8010ffa:	e7fa      	b.n	8010ff2 <idx_inc+0x12>

08010ffc <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 8010ffc:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8010ffe:	69c2      	ldr	r2, [r0, #28]
{
 8011000:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
 8011002:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 8011004:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 8011006:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801100a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801100e:	462a      	mov	r2, r5
 8011010:	6801      	ldr	r1, [r0, #0]
{
 8011012:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8011014:	f7ff ffe4 	bl	8010fe0 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8011018:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801101a:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801101c:	462a      	mov	r2, r5
 801101e:	4620      	mov	r0, r4
 8011020:	f7ff ffde 	bl	8010fe0 <idx_inc>
 8011024:	6060      	str	r0, [r4, #4]
}
 8011026:	bd38      	pop	{r3, r4, r5, pc}

08011028 <max_utilization_update>:
{
 8011028:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 801102a:	6903      	ldr	r3, [r0, #16]
 801102c:	075b      	lsls	r3, r3, #29
{
 801102e:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 8011030:	d506      	bpl.n	8011040 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8011032:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011034:	f7ff ffc3 	bl	8010fbe <get_usage>
 8011038:	4285      	cmp	r5, r0
 801103a:	d902      	bls.n	8011042 <max_utilization_update+0x1a>
 801103c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801103e:	6260      	str	r0, [r4, #36]	; 0x24
}
 8011040:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 8011042:	4620      	mov	r0, r4
 8011044:	f7ff ffbb 	bl	8010fbe <get_usage>
 8011048:	e7f9      	b.n	801103e <max_utilization_update+0x16>

0801104a <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 801104a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801104e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8011052:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
 8011056:	461f      	mov	r7, r3
	*user_packet = false;
 8011058:	2300      	movs	r3, #0
 801105a:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
 801105c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 8011060:	f003 0303 	and.w	r3, r3, #3
 8011064:	2b02      	cmp	r3, #2
{
 8011066:	4604      	mov	r4, r0
 8011068:	468b      	mov	fp, r1
 801106a:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801106c:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 8011070:	d103      	bne.n	801107a <drop_item_locked+0x30>
		return item->skip.len;
 8011072:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 8011076:	08ad      	lsrs	r5, r5, #2
 8011078:	d12e      	bne.n	80110d8 <drop_item_locked+0x8e>
 801107a:	69a3      	ldr	r3, [r4, #24]
 801107c:	4630      	mov	r0, r6
 801107e:	4798      	blx	r3
 8011080:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
 8011082:	f1b8 0f00 	cmp.w	r8, #0
 8011086:	d036      	beq.n	80110f6 <drop_item_locked+0xac>
		if (item->hdr.busy) {
 8011088:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 801108c:	079b      	lsls	r3, r3, #30
 801108e:	d52f      	bpl.n	80110f0 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
 8011090:	f10b 0101 	add.w	r1, fp, #1
 8011094:	4620      	mov	r0, r4
 8011096:	f7ff ffb1 	bl	8010ffc <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 801109a:	6861      	ldr	r1, [r4, #4]
 801109c:	462a      	mov	r2, r5
 801109e:	4620      	mov	r0, r4
 80110a0:	f7ff ff9e 	bl	8010fe0 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80110a4:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 80110a6:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80110a8:	462a      	mov	r2, r5
 80110aa:	4620      	mov	r0, r4
 80110ac:	f7ff ff98 	bl	8010fe0 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80110b0:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80110b2:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80110b4:	68e1      	ldr	r1, [r4, #12]
 80110b6:	4620      	mov	r0, r4
 80110b8:	f7ff ff92 	bl	8010fe0 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 80110bc:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
 80110be:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
 80110c2:	f002 0203 	and.w	r2, r2, #3
 80110c6:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 80110c8:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 80110cc:	d10c      	bne.n	80110e8 <drop_item_locked+0x9e>
		return item->skip.len;
 80110ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
 80110d2:	089b      	lsrs	r3, r3, #2
 80110d4:	d008      	beq.n	80110e8 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
 80110d6:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80110d8:	68e1      	ldr	r1, [r4, #12]
 80110da:	462a      	mov	r2, r5
 80110dc:	4620      	mov	r0, r4
 80110de:	f7ff ff7f 	bl	8010fe0 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 80110e2:	e9c4 0002 	strd	r0, r0, [r4, #8]
 80110e6:	e007      	b.n	80110f8 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
 80110e8:	69a3      	ldr	r3, [r4, #24]
 80110ea:	4630      	mov	r0, r6
 80110ec:	4798      	blx	r3
 80110ee:	4405      	add	r5, r0
			*user_packet = true;
 80110f0:	2301      	movs	r3, #1
 80110f2:	703b      	strb	r3, [r7, #0]
 80110f4:	e7f0      	b.n	80110d8 <drop_item_locked+0x8e>
		item = NULL;
 80110f6:	4646      	mov	r6, r8
	}

	return item;
}
 80110f8:	4630      	mov	r0, r6
 80110fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110fe <mpsc_pbuf_init>:
{
 80110fe:	b538      	push	{r3, r4, r5, lr}
 8011100:	460d      	mov	r5, r1
 8011102:	4604      	mov	r4, r0
 8011104:	221c      	movs	r2, #28
 8011106:	2100      	movs	r1, #0
 8011108:	f005 fa51 	bl	80165ae <memset>
	buffer->get_wlen = cfg->get_wlen;
 801110c:	68eb      	ldr	r3, [r5, #12]
 801110e:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
 8011110:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
 8011112:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
 8011114:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
 8011116:	682b      	ldr	r3, [r5, #0]
 8011118:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
 801111a:	2300      	movs	r3, #0
 801111c:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
 801111e:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
 8011120:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 8011122:	b122      	cbz	r2, 801112e <mpsc_pbuf_init+0x30>
 8011124:	1e51      	subs	r1, r2, #1
 8011126:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 8011128:	bf08      	it	eq
 801112a:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
 801112e:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8011130:	2201      	movs	r2, #1
 8011132:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8011136:	2100      	movs	r1, #0
}
 8011138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801113c:	f004 bf01 	b.w	8015f42 <z_impl_k_sem_init>

08011140 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 8011140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011144:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 8011146:	6a03      	ldr	r3, [r0, #32]
 8011148:	3b01      	subs	r3, #1
 801114a:	428b      	cmp	r3, r1
{
 801114c:	b085      	sub	sp, #20
 801114e:	4604      	mov	r4, r0
 8011150:	460f      	mov	r7, r1
 8011152:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
 8011154:	d364      	bcc.n	8011220 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
 8011156:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
 8011158:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
 801115a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
 801115e:	f04f 0310 	mov.w	r3, #16
 8011162:	f3ef 8611 	mrs	r6, BASEPRI
 8011166:	f383 8812 	msr	BASEPRI_MAX, r3
 801116a:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
 801116e:	a903      	add	r1, sp, #12
 8011170:	4620      	mov	r0, r4
 8011172:	f7ff ff0f 	bl	8010f94 <free_space>
		if (free_wlen >= wlen) {
 8011176:	9903      	ldr	r1, [sp, #12]
 8011178:	42b9      	cmp	r1, r7
 801117a:	d321      	bcc.n	80111c0 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 801117c:	6821      	ldr	r1, [r4, #0]
			item =
 801117e:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
 8011180:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
 8011184:	f022 0203 	bic.w	r2, r2, #3
 8011188:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 801118c:	4620      	mov	r0, r4
 801118e:	463a      	mov	r2, r7
			item =
 8011190:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
 8011194:	f7ff ff24 	bl	8010fe0 <idx_inc>
		cont = false;
 8011198:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
 801119a:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
 801119c:	f386 8811 	msr	BASEPRI, r6
 80111a0:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d03d      	beq.n	8011224 <mpsc_pbuf_alloc+0xe4>
 80111a8:	2d00      	cmp	r5, #0
 80111aa:	d0d8      	beq.n	801115e <mpsc_pbuf_alloc+0x1e>
 80111ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d0d4      	beq.n	801115e <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 80111b4:	4629      	mov	r1, r5
 80111b6:	6963      	ldr	r3, [r4, #20]
 80111b8:	4620      	mov	r0, r4
 80111ba:	4798      	blx	r3
			dropped_item = NULL;
 80111bc:	2500      	movs	r5, #0
 80111be:	e7ce      	b.n	801115e <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
 80111c0:	b128      	cbz	r0, 80111ce <mpsc_pbuf_alloc+0x8e>
 80111c2:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
 80111c4:	4620      	mov	r0, r4
 80111c6:	f7ff ff19 	bl	8010ffc <add_skip_item>
			cont = true;
 80111ca:	9b01      	ldr	r3, [sp, #4]
 80111cc:	e7e6      	b.n	801119c <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80111ce:	ea58 0309 	orrs.w	r3, r8, r9
 80111d2:	d017      	beq.n	8011204 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
 80111d4:	f004 fe8d 	bl	8015ef2 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 80111d8:	b9a0      	cbnz	r0, 8011204 <mpsc_pbuf_alloc+0xc4>
 80111da:	f386 8811 	msr	BASEPRI, r6
 80111de:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
 80111e2:	4642      	mov	r2, r8
 80111e4:	464b      	mov	r3, r9
 80111e6:	4658      	mov	r0, fp
 80111e8:	f7fc fdca 	bl	800dd80 <z_impl_k_sem_take>
	__asm__ volatile(
 80111ec:	f04f 0310 	mov.w	r3, #16
 80111f0:	f3ef 8611 	mrs	r6, BASEPRI
 80111f4:	f383 8812 	msr	BASEPRI_MAX, r3
 80111f8:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 80111fc:	fab0 f380 	clz	r3, r0
 8011200:	095b      	lsrs	r3, r3, #5
 8011202:	e7cb      	b.n	801119c <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 8011204:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 8011206:	9903      	ldr	r1, [sp, #12]
 8011208:	f10d 030b 	add.w	r3, sp, #11
 801120c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8011210:	4620      	mov	r0, r4
 8011212:	f7ff ff1a 	bl	801104a <drop_item_locked>
			cont = dropped_item != NULL;
 8011216:	1e03      	subs	r3, r0, #0
 8011218:	4605      	mov	r5, r0
 801121a:	bf18      	it	ne
 801121c:	2301      	movne	r3, #1
 801121e:	e7bd      	b.n	801119c <mpsc_pbuf_alloc+0x5c>
		return NULL;
 8011220:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 8011224:	4650      	mov	r0, sl
 8011226:	b005      	add	sp, #20
 8011228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801122c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 801122c:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
 801122e:	6983      	ldr	r3, [r0, #24]
{
 8011230:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 8011232:	4608      	mov	r0, r1
{
 8011234:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 8011236:	4798      	blx	r3
 8011238:	4602      	mov	r2, r0
 801123a:	f04f 0310 	mov.w	r3, #16
 801123e:	f3ef 8611 	mrs	r6, BASEPRI
 8011242:	f383 8812 	msr	BASEPRI_MAX, r3
 8011246:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 801124a:	782b      	ldrb	r3, [r5, #0]
 801124c:	f043 0301 	orr.w	r3, r3, #1
 8011250:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8011252:	6861      	ldr	r1, [r4, #4]
 8011254:	4620      	mov	r0, r4
 8011256:	f7ff fec3 	bl	8010fe0 <idx_inc>
 801125a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 801125c:	4620      	mov	r0, r4
 801125e:	f7ff fee3 	bl	8011028 <max_utilization_update>
	__asm__ volatile(
 8011262:	f386 8811 	msr	BASEPRI, r6
 8011266:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 801126a:	bd70      	pop	{r4, r5, r6, pc}

0801126c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 801126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011270:	4604      	mov	r4, r0
	__asm__ volatile(
 8011272:	f04f 0310 	mov.w	r3, #16
 8011276:	f3ef 8611 	mrs	r6, BASEPRI
 801127a:	f383 8812 	msr	BASEPRI_MAX, r3
 801127e:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 8011282:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011286:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 8011288:	bf88      	it	hi
 801128a:	6a23      	ldrhi	r3, [r4, #32]
 801128c:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
 801128e:	b1f3      	cbz	r3, 80112ce <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
 8011290:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
 8011292:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
 8011296:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
 801129a:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
 801129e:	d016      	beq.n	80112ce <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
 80112a0:	2b02      	cmp	r3, #2
 80112a2:	d103      	bne.n	80112ac <mpsc_pbuf_claim+0x40>
		return item->skip.len;
 80112a4:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 80112a8:	08ad      	lsrs	r5, r5, #2
 80112aa:	d115      	bne.n	80112d8 <mpsc_pbuf_claim+0x6c>
 80112ac:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
 80112ae:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
 80112b0:	d50f      	bpl.n	80112d2 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
 80112b2:	f042 0202 	orr.w	r2, r2, #2
 80112b6:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 80112ba:	4640      	mov	r0, r8
 80112bc:	4798      	blx	r3
 80112be:	4639      	mov	r1, r7
 80112c0:	4602      	mov	r2, r0
 80112c2:	4620      	mov	r0, r4
 80112c4:	f7ff fe8c 	bl	8010fe0 <idx_inc>
		cont = false;
 80112c8:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
 80112ca:	60a0      	str	r0, [r4, #8]
 80112cc:	e011      	b.n	80112f2 <mpsc_pbuf_claim+0x86>
			item = NULL;
 80112ce:	4698      	mov	r8, r3
 80112d0:	e00f      	b.n	80112f2 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
 80112d2:	4640      	mov	r0, r8
 80112d4:	4798      	blx	r3
 80112d6:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 80112d8:	68a1      	ldr	r1, [r4, #8]
 80112da:	462a      	mov	r2, r5
 80112dc:	4620      	mov	r0, r4
 80112de:	f7ff fe7f 	bl	8010fe0 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
 80112e2:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
 80112e4:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
 80112e6:	462a      	mov	r2, r5
 80112e8:	4620      	mov	r0, r4
 80112ea:	f7ff fe79 	bl	8010fe0 <idx_inc>
				cont = true;
 80112ee:	2301      	movs	r3, #1
				buffer->rd_idx =
 80112f0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80112f2:	f386 8811 	msr	BASEPRI, r6
 80112f6:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d1b9      	bne.n	8011272 <mpsc_pbuf_claim+0x6>

	return item;
}
 80112fe:	4640      	mov	r0, r8
 8011300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011304 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 8011304:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
 8011306:	6983      	ldr	r3, [r0, #24]
{
 8011308:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 801130a:	4608      	mov	r0, r1
{
 801130c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 801130e:	4798      	blx	r3
 8011310:	4602      	mov	r2, r0
	__asm__ volatile(
 8011312:	f04f 0310 	mov.w	r3, #16
 8011316:	f3ef 8611 	mrs	r6, BASEPRI
 801131a:	f383 8812 	msr	BASEPRI_MAX, r3
 801131e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 8011322:	782b      	ldrb	r3, [r5, #0]
 8011324:	f36f 0300 	bfc	r3, #0, #1
 8011328:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 801132a:	6923      	ldr	r3, [r4, #16]
 801132c:	079b      	lsls	r3, r3, #30
 801132e:	d505      	bpl.n	801133c <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 8011330:	68e1      	ldr	r1, [r4, #12]
 8011332:	69e3      	ldr	r3, [r4, #28]
 8011334:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8011338:	429d      	cmp	r5, r3
 801133a:	d112      	bne.n	8011362 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
 801133c:	782b      	ldrb	r3, [r5, #0]
 801133e:	f36f 0341 	bfc	r3, #1, #1
 8011342:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 8011344:	68e1      	ldr	r1, [r4, #12]
 8011346:	4620      	mov	r0, r4
 8011348:	f7ff fe4a 	bl	8010fe0 <idx_inc>
 801134c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 801134e:	f386 8811 	msr	BASEPRI, r6
 8011352:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 8011356:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 801135a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801135e:	f7fc bce9 	b.w	800dd34 <z_impl_k_sem_give>
		witem->skip.len = wlen;
 8011362:	682b      	ldr	r3, [r5, #0]
 8011364:	f360 039f 	bfi	r3, r0, #2, #30
 8011368:	602b      	str	r3, [r5, #0]
 801136a:	e7f0      	b.n	801134e <mpsc_pbuf_free+0x4a>

0801136c <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 801136c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8011370:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 8011372:	bf8a      	itet	hi
 8011374:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 8011376:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
 8011378:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 801137a:	1e18      	subs	r0, r3, #0
 801137c:	bf18      	it	ne
 801137e:	2001      	movne	r0, #1
 8011380:	4770      	bx	lr

08011382 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8011382:	4770      	bx	lr

08011384 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8011384:	2000      	movs	r0, #0
 8011386:	4770      	bx	lr

08011388 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 8011388:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 801138a:	075b      	lsls	r3, r3, #29
 801138c:	d40b      	bmi.n	80113a6 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 801138e:	6803      	ldr	r3, [r0, #0]
 8011390:	8840      	ldrh	r0, [r0, #2]
 8011392:	f3c3 2349 	ubfx	r3, r3, #9, #10
 8011396:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 801139a:	4418      	add	r0, r3
 801139c:	3013      	adds	r0, #19
 801139e:	f020 0007 	bic.w	r0, r0, #7
 80113a2:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 80113a4:	4770      	bx	lr
	return 0;
 80113a6:	2000      	movs	r0, #0
}
 80113a8:	4770      	bx	lr

080113aa <default_lf_get_timestamp>:
{
 80113aa:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80113ac:	f004 ff57 	bl	801625e <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80113b0:	220a      	movs	r2, #10
 80113b2:	2300      	movs	r3, #0
 80113b4:	f7ef fba6 	bl	8000b04 <__aeabi_uldivmod>
}
 80113b8:	bd08      	pop	{r3, pc}

080113ba <dummy_timestamp>:
 80113ba:	2000      	movs	r0, #0
 80113bc:	4770      	bx	lr

080113be <notify_drop>:
	z_log_dropped(true);
 80113be:	2001      	movs	r0, #1
 80113c0:	f7f1 bf4a 	b.w	8003258 <z_log_dropped>

080113c4 <get_msg>:
{
 80113c4:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 80113c6:	f7f1 ffbb 	bl	8003340 <z_log_msg2_claim>
}
 80113ca:	bd08      	pop	{r3, pc}

080113cc <z_log_get_tag>:
}
 80113cc:	2000      	movs	r0, #0
 80113ce:	4770      	bx	lr

080113d0 <buffer_write>:
{
 80113d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d2:	4606      	mov	r6, r0
 80113d4:	460d      	mov	r5, r1
 80113d6:	4614      	mov	r4, r2
 80113d8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 80113da:	4621      	mov	r1, r4
 80113dc:	4628      	mov	r0, r5
 80113de:	463a      	mov	r2, r7
 80113e0:	47b0      	blx	r6
	} while (len != 0);
 80113e2:	1a24      	subs	r4, r4, r0
		buf += processed;
 80113e4:	4405      	add	r5, r0
	} while (len != 0);
 80113e6:	d1f8      	bne.n	80113da <buffer_write+0xa>
}
 80113e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113ea <log_output_flush>:
		     output->control_block->offset,
 80113ea:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 80113ec:	6881      	ldr	r1, [r0, #8]
{
 80113ee:	b510      	push	{r4, lr}
 80113f0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 80113f2:	e9d2 2300 	ldrd	r2, r3, [r2]
 80113f6:	6800      	ldr	r0, [r0, #0]
 80113f8:	f7ff ffea 	bl	80113d0 <buffer_write>
	output->control_block->offset = 0;
 80113fc:	6863      	ldr	r3, [r4, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	601a      	str	r2, [r3, #0]
}
 8011402:	bd10      	pop	{r4, pc}

08011404 <out_func>:
{
 8011404:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 8011406:	684b      	ldr	r3, [r1, #4]
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	68cb      	ldr	r3, [r1, #12]
 801140c:	429a      	cmp	r2, r3
{
 801140e:	4605      	mov	r5, r0
 8011410:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 8011412:	d102      	bne.n	801141a <out_func+0x16>
		log_output_flush(out_ctx);
 8011414:	4608      	mov	r0, r1
 8011416:	f7ff ffe8 	bl	80113ea <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801141a:	6863      	ldr	r3, [r4, #4]
 801141c:	f3bf 8f5b 	dmb	ish
 8011420:	e853 2f00 	ldrex	r2, [r3]
 8011424:	1c51      	adds	r1, r2, #1
 8011426:	e843 1000 	strex	r0, r1, [r3]
 801142a:	2800      	cmp	r0, #0
 801142c:	d1f8      	bne.n	8011420 <out_func+0x1c>
 801142e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 8011432:	68a3      	ldr	r3, [r4, #8]
 8011434:	549d      	strb	r5, [r3, r2]
}
 8011436:	2000      	movs	r0, #0
 8011438:	bd38      	pop	{r3, r4, r5, pc}

0801143a <cr_out_func>:
{
 801143a:	b538      	push	{r3, r4, r5, lr}
 801143c:	4605      	mov	r5, r0
 801143e:	460c      	mov	r4, r1
	out_func(c, ctx);
 8011440:	f7ff ffe0 	bl	8011404 <out_func>
	if (c == '\n') {
 8011444:	2d0a      	cmp	r5, #10
 8011446:	d103      	bne.n	8011450 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
 8011448:	4621      	mov	r1, r4
 801144a:	200d      	movs	r0, #13
 801144c:	f7ff ffda 	bl	8011404 <out_func>
}
 8011450:	2000      	movs	r0, #0
 8011452:	bd38      	pop	{r3, r4, r5, pc}

08011454 <z_log_msg2_finalize>:
{
 8011454:	b570      	push	{r4, r5, r6, lr}
 8011456:	460e      	mov	r6, r1
 8011458:	4615      	mov	r5, r2
 801145a:	4619      	mov	r1, r3
	if (!msg) {
 801145c:	4604      	mov	r4, r0
 801145e:	b918      	cbnz	r0, 8011468 <z_log_msg2_finalize+0x14>
}
 8011460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 8011464:	f7f1 bef8 	b.w	8003258 <z_log_dropped>
	if (data) {
 8011468:	b143      	cbz	r3, 801147c <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
 801146a:	f100 030c 	add.w	r3, r0, #12
 801146e:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8011472:	4418      	add	r0, r3
 8011474:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 8011478:	f005 f871 	bl	801655e <memcpy>
	msg->hdr.source = source;
 801147c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
 8011480:	4620      	mov	r0, r4
}
 8011482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
 8011486:	f7f2 b81d 	b.w	80034c4 <z_log_msg2_commit>

0801148a <z_impl_z_log_msg2_static_create>:
{
 801148a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 801148e:	f3c1 2949 	ubfx	r9, r1, #9, #10
 8011492:	f3c1 44cb 	ubfx	r4, r1, #19, #12
 8011496:	444c      	add	r4, r9
 8011498:	3413      	adds	r4, #19
 801149a:	f024 0407 	bic.w	r4, r4, #7
 801149e:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 80114a0:	08a0      	lsrs	r0, r4, #2
{
 80114a2:	460d      	mov	r5, r1
 80114a4:	4690      	mov	r8, r2
 80114a6:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 80114a8:	f7f1 ff42 	bl	8003330 <z_log_msg2_alloc>
	if (msg) {
 80114ac:	4604      	mov	r4, r0
 80114ae:	b120      	cbz	r0, 80114ba <z_impl_z_log_msg2_static_create+0x30>
 80114b0:	464a      	mov	r2, r9
 80114b2:	4641      	mov	r1, r8
 80114b4:	300c      	adds	r0, #12
 80114b6:	f005 f852 	bl	801655e <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
 80114ba:	463b      	mov	r3, r7
 80114bc:	462a      	mov	r2, r5
 80114be:	4631      	mov	r1, r6
 80114c0:	4620      	mov	r0, r4
}
 80114c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
 80114c6:	f7ff bfc5 	b.w	8011454 <z_log_msg2_finalize>

080114ca <disk_access_init>:
{
 80114ca:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 80114cc:	f7f2 fad8 	bl	8003a80 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 80114d0:	b130      	cbz	r0, 80114e0 <disk_access_init+0x16>
 80114d2:	68c3      	ldr	r3, [r0, #12]
 80114d4:	b123      	cbz	r3, 80114e0 <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
 80114d6:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
 80114d8:	b113      	cbz	r3, 80114e0 <disk_access_init+0x16>
}
 80114da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
 80114de:	4718      	bx	r3
}
 80114e0:	f06f 0015 	mvn.w	r0, #21
 80114e4:	bd10      	pop	{r4, pc}

080114e6 <disk_access_status>:
{
 80114e6:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 80114e8:	f7f2 faca 	bl	8003a80 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 80114ec:	b130      	cbz	r0, 80114fc <disk_access_status+0x16>
 80114ee:	68c3      	ldr	r3, [r0, #12]
 80114f0:	b123      	cbz	r3, 80114fc <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
 80114f2:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
 80114f4:	b113      	cbz	r3, 80114fc <disk_access_status+0x16>
}
 80114f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
 80114fa:	4718      	bx	r3
}
 80114fc:	f06f 0015 	mvn.w	r0, #21
 8011500:	bd10      	pop	{r4, pc}

08011502 <disk_access_read>:
{
 8011502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011506:	460d      	mov	r5, r1
 8011508:	4616      	mov	r6, r2
 801150a:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
 801150c:	f7f2 fab8 	bl	8003a80 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8011510:	b150      	cbz	r0, 8011528 <disk_access_read+0x26>
 8011512:	68c3      	ldr	r3, [r0, #12]
 8011514:	b143      	cbz	r3, 8011528 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
 8011516:	689c      	ldr	r4, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8011518:	b134      	cbz	r4, 8011528 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 801151a:	463b      	mov	r3, r7
 801151c:	4632      	mov	r2, r6
 801151e:	4629      	mov	r1, r5
 8011520:	46a4      	mov	ip, r4
}
 8011522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 8011526:	4760      	bx	ip
}
 8011528:	f06f 0015 	mvn.w	r0, #21
 801152c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011530 <disk_access_write>:
{
 8011530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	460d      	mov	r5, r1
 8011536:	4616      	mov	r6, r2
 8011538:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
 801153a:	f7f2 faa1 	bl	8003a80 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 801153e:	b150      	cbz	r0, 8011556 <disk_access_write+0x26>
 8011540:	68c3      	ldr	r3, [r0, #12]
 8011542:	b143      	cbz	r3, 8011556 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
 8011544:	68dc      	ldr	r4, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8011546:	b134      	cbz	r4, 8011556 <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 8011548:	463b      	mov	r3, r7
 801154a:	4632      	mov	r2, r6
 801154c:	4629      	mov	r1, r5
 801154e:	46a4      	mov	ip, r4
}
 8011550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 8011554:	4760      	bx	ip
}
 8011556:	f06f 0015 	mvn.w	r0, #21
 801155a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801155e <disk_access_ioctl>:
{
 801155e:	b570      	push	{r4, r5, r6, lr}
 8011560:	460c      	mov	r4, r1
 8011562:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
 8011564:	f7f2 fa8c 	bl	8003a80 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8011568:	b140      	cbz	r0, 801157c <disk_access_ioctl+0x1e>
 801156a:	68c3      	ldr	r3, [r0, #12]
 801156c:	b133      	cbz	r3, 801157c <disk_access_ioctl+0x1e>
				(disk->ops->ioctl != NULL)) {
 801156e:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8011570:	b123      	cbz	r3, 801157c <disk_access_ioctl+0x1e>
		rc = disk->ops->ioctl(disk, cmd, buf);
 8011572:	462a      	mov	r2, r5
 8011574:	4621      	mov	r1, r4
}
 8011576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
 801157a:	4718      	bx	r3
}
 801157c:	f06f 0015 	mvn.w	r0, #21
 8011580:	bd70      	pop	{r4, r5, r6, pc}

08011582 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8011582:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8011584:	6800      	ldr	r0, [r0, #0]
 8011586:	f7f2 baf5 	b.w	8003b74 <z_arm_fatal_error>

0801158a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 801158a:	2100      	movs	r1, #0
 801158c:	2001      	movs	r0, #1
 801158e:	f7f2 baf1 	b.w	8003b74 <z_arm_fatal_error>

08011592 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8011592:	b508      	push	{r3, lr}
	handler();
 8011594:	f7f2 fb8a 	bl	8003cac <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8011598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 801159c:	f7f2 bc50 	b.w	8003e40 <z_arm_exc_exit>

080115a0 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 80115a0:	2300      	movs	r3, #0
 80115a2:	f7ff bf72 	b.w	801148a <z_impl_z_log_msg2_static_create>

080115a6 <malloc_prepare>:
}
 80115a6:	2000      	movs	r0, #0
 80115a8:	4770      	bx	lr

080115aa <_stdout_hook_default>:
}
 80115aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115ae:	4770      	bx	lr

080115b0 <__retarget_lock_acquire>:
	return z_impl_k_sem_take(sem, timeout);
 80115b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115b8:	f7fc bbe2 	b.w	800dd80 <z_impl_k_sem_take>

080115bc <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
 80115bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115c4:	f7fc bafc 	b.w	800dbc0 <z_impl_k_mutex_lock>

080115c8 <__retarget_lock_release>:
	z_impl_k_sem_give(sem);
 80115c8:	f7fc bbb4 	b.w	800dd34 <z_impl_k_sem_give>

080115cc <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 80115cc:	f7fc bb70 	b.w	800dcb0 <z_impl_k_mutex_unlock>

080115d0 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 80115d0:	f7fc b8b0 	b.w	800d734 <z_impl_z_errno>

080115d4 <MlmeIndication>:
}
 80115d4:	4770      	bx	lr

080115d6 <OnMacProcessNotify>:
	LoRaMacProcess();
 80115d6:	f7f5 bfc1 	b.w	800755c <LoRaMacProcess>

080115da <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 80115da:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 80115dc:	ab0b      	add	r3, sp, #44	; 0x2c
 80115de:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 80115e0:	9303      	str	r3, [sp, #12]
 80115e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115e4:	9302      	str	r3, [sp, #8]
 80115e6:	2300      	movs	r3, #0
 80115e8:	e9cd 3300 	strd	r3, r3, [sp]
 80115ec:	2201      	movs	r2, #1
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7f2 f9a8 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 80115f4:	b007      	add	sp, #28
 80115f6:	f85d fb04 	ldr.w	pc, [sp], #4

080115fa <BoardGetUniqueId>:
}
 80115fa:	4770      	bx	lr

080115fc <timer_work_handler>:
	TimerIrqHandler();
 80115fc:	f7f3 be3e 	b.w	800527c <TimerIrqHandler>

08011600 <k_uptime_get_32>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
 8011600:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8011602:	f004 fe2c 	bl	801625e <z_impl_k_uptime_ticks>
 8011606:	220a      	movs	r2, #10
 8011608:	2300      	movs	r3, #0
 801160a:	f7ef fa7b 	bl	8000b04 <__aeabi_uldivmod>
	return (uint32_t)k_uptime_get();
}
 801160e:	bd08      	pop	{r3, pc}

08011610 <RtcGetCalendarTime>:
{
 8011610:	b570      	push	{r4, r5, r6, lr}
 8011612:	4606      	mov	r6, r0
 8011614:	f004 fe23 	bl	801625e <z_impl_k_uptime_ticks>
 8011618:	220a      	movs	r2, #10
 801161a:	2300      	movs	r3, #0
 801161c:	f7ef fa72 	bl	8000b04 <__aeabi_uldivmod>
	*milliseconds = now % MSEC_PER_SEC;
 8011620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011624:	2300      	movs	r3, #0
 8011626:	4605      	mov	r5, r0
 8011628:	460c      	mov	r4, r1
 801162a:	f7ef fa1b 	bl	8000a64 <__aeabi_ldivmod>
	return now / MSEC_PER_SEC;
 801162e:	2300      	movs	r3, #0
	*milliseconds = now % MSEC_PER_SEC;
 8011630:	8032      	strh	r2, [r6, #0]
	return now / MSEC_PER_SEC;
 8011632:	4628      	mov	r0, r5
 8011634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011638:	4621      	mov	r1, r4
 801163a:	f7ef fa13 	bl	8000a64 <__aeabi_ldivmod>
}
 801163e:	bd70      	pop	{r4, r5, r6, pc}

08011640 <RtcGetTimerValue>:
	return k_uptime_get_32();
 8011640:	f7ff bfde 	b.w	8011600 <k_uptime_get_32>

08011644 <RtcGetMinimumTimeout>:
}
 8011644:	2001      	movs	r0, #1
 8011646:	4770      	bx	lr

08011648 <DelayMsMcu>:
			return t * ((uint64_t)to_hz / from_hz);
 8011648:	210a      	movs	r1, #10
 801164a:	fba0 0101 	umull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 801164e:	f7fc bfb1 	b.w	800e5b4 <z_impl_k_sleep>

08011652 <RtcMs2Tick>:
}

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 8011652:	4770      	bx	lr

08011654 <RtcTick2Ms>:
 8011654:	4770      	bx	lr

08011656 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 8011656:	f04f 0210 	mov.w	r2, #16
 801165a:	f3ef 8311 	mrs	r3, BASEPRI
 801165e:	f382 8812 	msr	BASEPRI_MAX, r2
 8011662:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 8011666:	6003      	str	r3, [r0, #0]
}
 8011668:	4770      	bx	lr

0801166a <BoardCriticalSectionEnd>:
	__asm__ volatile(
 801166a:	6803      	ldr	r3, [r0, #0]
 801166c:	f383 8811 	msr	BASEPRI, r3
 8011670:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
 8011674:	4770      	bx	lr

08011676 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8011676:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8011678:	ab0b      	add	r3, sp, #44	; 0x2c
 801167a:	9305      	str	r3, [sp, #20]
 801167c:	9303      	str	r3, [sp, #12]
 801167e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011680:	9302      	str	r3, [sp, #8]
 8011682:	2300      	movs	r3, #0
 8011684:	e9cd 3300 	strd	r3, r3, [sp]
 8011688:	2201      	movs	r2, #1
 801168a:	4618      	mov	r0, r3
 801168c:	f7f2 f95a 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8011690:	b007      	add	sp, #28
 8011692:	f85d fb04 	ldr.w	pc, [sp], #4

08011696 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8011696:	2301      	movs	r3, #1
 8011698:	fa03 f101 	lsl.w	r1, r3, r1
 801169c:	6903      	ldr	r3, [r0, #16]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 80116a2:	bf18      	it	ne
 80116a4:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 80116a8:	b112      	cbz	r2, 80116b0 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
 80116aa:	6883      	ldr	r3, [r0, #8]
 80116ac:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80116ae:	4718      	bx	r3
 80116b0:	6883      	ldr	r3, [r0, #8]
 80116b2:	691b      	ldr	r3, [r3, #16]
 80116b4:	e7fb      	b.n	80116ae <gpio_pin_set.isra.0+0x18>

080116b6 <SX126xAntSwOn>:
}
 80116b6:	4770      	bx	lr

080116b8 <SX126xAntSwOff>:
 80116b8:	4770      	bx	lr

080116ba <SX126xGetBoardTcxoWakeupTime>:
}
 80116ba:	2005      	movs	r0, #5
 80116bc:	4770      	bx	lr

080116be <SX126xGetDeviceId>:
}
 80116be:	2002      	movs	r0, #2
 80116c0:	4770      	bx	lr

080116c2 <SX126xIoTcxoInit>:
{
 80116c2:	b508      	push	{r3, lr}
	SX126xSetDio3AsTcxoCtrl(TCXO_DIO3_VOLTAGE,
 80116c4:	2001      	movs	r0, #1
 80116c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80116ca:	f000 fb73 	bl	8011db4 <SX126xSetDio3AsTcxoCtrl>
}
 80116ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SX126xCalibrate(cal);
 80116d2:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80116d6:	f000 bb18 	b.w	8011d0a <SX126xCalibrate>

080116da <SX126xIoRfSwitchInit>:
	SX126xSetDio2AsRfSwitchCtrl(DIO2_TX_ENABLE);
 80116da:	2000      	movs	r0, #0
 80116dc:	f000 bb5e 	b.w	8011d9c <SX126xSetDio2AsRfSwitchCtrl>

080116e0 <SX126xSetRfTxPower>:
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 80116e0:	2102      	movs	r1, #2
 80116e2:	f000 bb7d 	b.w	8011de0 <SX126xSetTxParams>

080116e6 <SX126xWriteBuffer>:
{
 80116e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116e8:	460b      	mov	r3, r1
	uint8_t req[] = {
 80116ea:	210e      	movs	r1, #14
 80116ec:	f88d 100c 	strb.w	r1, [sp, #12]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 80116f0:	2100      	movs	r1, #0
	uint8_t req[] = {
 80116f2:	f88d 000d 	strb.w	r0, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 80116f6:	9201      	str	r2, [sp, #4]
 80116f8:	9100      	str	r1, [sp, #0]
 80116fa:	2202      	movs	r2, #2
 80116fc:	a803      	add	r0, sp, #12
 80116fe:	f7f3 fc9d 	bl	800503c <sx126x_spi_transceive.isra.0>
}
 8011702:	b005      	add	sp, #20
 8011704:	f85d fb04 	ldr.w	pc, [sp], #4

08011708 <SX126xReadBuffer>:
{
 8011708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t req[] = {
 801170a:	231e      	movs	r3, #30
 801170c:	f88d 300c 	strb.w	r3, [sp, #12]
 8011710:	2300      	movs	r3, #0
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 8011712:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t req[] = {
 8011716:	f88d 000d 	strb.w	r0, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 801171a:	2203      	movs	r2, #3
 801171c:	4619      	mov	r1, r3
 801171e:	a803      	add	r0, sp, #12
	uint8_t req[] = {
 8011720:	f88d 300e 	strb.w	r3, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 8011724:	f7f3 fc8a 	bl	800503c <sx126x_spi_transceive.isra.0>
}
 8011728:	b005      	add	sp, #20
 801172a:	f85d fb04 	ldr.w	pc, [sp], #4

0801172e <SX126xWriteCommand>:
{
 801172e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011730:	460b      	mov	r3, r1
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 8011732:	2100      	movs	r1, #0
	uint8_t req[] = {
 8011734:	f88d 000c 	strb.w	r0, [sp, #12]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 8011738:	9201      	str	r2, [sp, #4]
 801173a:	9100      	str	r1, [sp, #0]
 801173c:	2201      	movs	r2, #1
 801173e:	a803      	add	r0, sp, #12
 8011740:	f7f3 fc7c 	bl	800503c <sx126x_spi_transceive.isra.0>
}
 8011744:	b005      	add	sp, #20
 8011746:	f85d fb04 	ldr.w	pc, [sp], #4

0801174a <SX126xReadCommand>:
{
 801174a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_req[] = {
 801174c:	2300      	movs	r3, #0
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 801174e:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t tx_req[] = {
 8011752:	f88d 0008 	strb.w	r0, [sp, #8]
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 8011756:	2202      	movs	r2, #2
 8011758:	a802      	add	r0, sp, #8
 801175a:	a903      	add	r1, sp, #12
	uint8_t tx_req[] = {
 801175c:	f88d 3009 	strb.w	r3, [sp, #9]
	sx126x_spi_transceive(tx_req, rx_req, sizeof(rx_req),
 8011760:	f7f3 fc6c 	bl	800503c <sx126x_spi_transceive.isra.0>
}
 8011764:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8011768:	b005      	add	sp, #20
 801176a:	f85d fb04 	ldr.w	pc, [sp], #4

0801176e <SX126xWriteRegisters>:
{
 801176e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011770:	460b      	mov	r3, r1
	uint8_t req[] = {
 8011772:	210d      	movs	r1, #13
 8011774:	f88d 100c 	strb.w	r1, [sp, #12]
 8011778:	0a01      	lsrs	r1, r0, #8
 801177a:	f88d 100d 	strb.w	r1, [sp, #13]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 801177e:	2100      	movs	r1, #0
	uint8_t req[] = {
 8011780:	f88d 000e 	strb.w	r0, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), buffer, NULL, size);
 8011784:	9201      	str	r2, [sp, #4]
 8011786:	9100      	str	r1, [sp, #0]
 8011788:	2203      	movs	r2, #3
 801178a:	a803      	add	r0, sp, #12
 801178c:	f7f3 fc56 	bl	800503c <sx126x_spi_transceive.isra.0>
}
 8011790:	b005      	add	sp, #20
 8011792:	f85d fb04 	ldr.w	pc, [sp], #4

08011796 <SX126xWriteRegister>:
{
 8011796:	b507      	push	{r0, r1, r2, lr}
	SX126xWriteRegisters(address, &value, 1);
 8011798:	2201      	movs	r2, #1
{
 801179a:	f88d 1007 	strb.w	r1, [sp, #7]
	SX126xWriteRegisters(address, &value, 1);
 801179e:	f10d 0107 	add.w	r1, sp, #7
 80117a2:	f7ff ffe4 	bl	801176e <SX126xWriteRegisters>
}
 80117a6:	b003      	add	sp, #12
 80117a8:	f85d fb04 	ldr.w	pc, [sp], #4

080117ac <SX126xReadRegisters>:
{
 80117ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t req[] = {
 80117ae:	231d      	movs	r3, #29
 80117b0:	f88d 300c 	strb.w	r3, [sp, #12]
 80117b4:	0a03      	lsrs	r3, r0, #8
 80117b6:	f88d 300d 	strb.w	r3, [sp, #13]
 80117ba:	2300      	movs	r3, #0
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 80117bc:	e9cd 1200 	strd	r1, r2, [sp]
	uint8_t req[] = {
 80117c0:	f88d 000e 	strb.w	r0, [sp, #14]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 80117c4:	2204      	movs	r2, #4
 80117c6:	4619      	mov	r1, r3
 80117c8:	a803      	add	r0, sp, #12
	uint8_t req[] = {
 80117ca:	f88d 300f 	strb.w	r3, [sp, #15]
	sx126x_spi_transceive(req, NULL, sizeof(req), NULL, buffer, size);
 80117ce:	f7f3 fc35 	bl	800503c <sx126x_spi_transceive.isra.0>
}
 80117d2:	b005      	add	sp, #20
 80117d4:	f85d fb04 	ldr.w	pc, [sp], #4

080117d8 <SX126xReadRegister>:
{
 80117d8:	b507      	push	{r0, r1, r2, lr}
	SX126xReadRegisters(address, &data, 1);
 80117da:	2201      	movs	r2, #1
 80117dc:	f10d 0107 	add.w	r1, sp, #7
 80117e0:	f7ff ffe4 	bl	80117ac <SX126xReadRegisters>
}
 80117e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80117e8:	b003      	add	sp, #12
 80117ea:	f85d fb04 	ldr.w	pc, [sp], #4

080117ee <radio_isr>:
{
 80117ee:	b510      	push	{r4, lr}
	struct sx126x_data *dev_data = dev->data;
 80117f0:	6904      	ldr	r4, [r0, #16]
	irq_disable(DT_INST_IRQN(0));
 80117f2:	2032      	movs	r0, #50	; 0x32
 80117f4:	f7f2 fa2e 	bl	8003c54 <arch_irq_disable>
	k_work_submit(&dev_data->dio1_irq_work);
 80117f8:	f104 000c 	add.w	r0, r4, #12
}
 80117fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&dev_data->dio1_irq_work);
 8011800:	f7fc bbcc 	b.w	800df9c <k_work_submit>

08011804 <sx126x_reset>:
{
 8011804:	b510      	push	{r4, lr}
  SET_BIT(RCC->CSR, RCC_CSR_RFRST);
 8011806:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 801180a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801180e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011812:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8011816:	2100      	movs	r1, #0
 8011818:	20c8      	movs	r0, #200	; 0xc8
 801181a:	f7fc fecb 	bl	800e5b4 <z_impl_k_sleep>
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 801181e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8011822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011826:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801182a:	2064      	movs	r0, #100	; 0x64
}
 801182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011830:	2100      	movs	r1, #0
 8011832:	f7fc bebf 	b.w	800e5b4 <z_impl_k_sleep>

08011836 <sx126x_get_dio1_pin_state>:
}
 8011836:	2000      	movs	r0, #0
 8011838:	4770      	bx	lr

0801183a <sx126x_dio1_irq_disable>:
	irq_disable(DT_INST_IRQN(0));
 801183a:	2032      	movs	r0, #50	; 0x32
 801183c:	f7f2 ba0a 	b.w	8003c54 <arch_irq_disable>

08011840 <randr>:
{
 8011840:	b538      	push	{r3, r4, r5, lr}
 8011842:	4605      	mov	r5, r0
 8011844:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8011846:	f7f3 fca1 	bl	800518c <rand1>
 801184a:	1b61      	subs	r1, r4, r5
 801184c:	3101      	adds	r1, #1
 801184e:	fb90 f3f1 	sdiv	r3, r0, r1
 8011852:	fb03 0011 	mls	r0, r3, r1, r0
}
 8011856:	4428      	add	r0, r5
 8011858:	bd38      	pop	{r3, r4, r5, pc}

0801185a <memcpy1>:
    while( size-- )
 801185a:	3801      	subs	r0, #1
 801185c:	440a      	add	r2, r1
 801185e:	4291      	cmp	r1, r2
 8011860:	d100      	bne.n	8011864 <memcpy1+0xa>
}
 8011862:	4770      	bx	lr
        *dst++ = *src++;
 8011864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011868:	f800 3f01 	strb.w	r3, [r0, #1]!
 801186c:	e7f7      	b.n	801185e <memcpy1+0x4>

0801186e <memcpyr>:
    while( size-- )
 801186e:	4410      	add	r0, r2
 8011870:	440a      	add	r2, r1
 8011872:	4291      	cmp	r1, r2
 8011874:	d100      	bne.n	8011878 <memcpyr+0xa>
}
 8011876:	4770      	bx	lr
        *dst-- = *src++;
 8011878:	f811 3b01 	ldrb.w	r3, [r1], #1
 801187c:	f800 3d01 	strb.w	r3, [r0, #-1]!
 8011880:	e7f7      	b.n	8011872 <memcpyr+0x4>

08011882 <memset1>:
    while( size-- )
 8011882:	4402      	add	r2, r0
 8011884:	4290      	cmp	r0, r2
 8011886:	d100      	bne.n	801188a <memset1+0x8>
}
 8011888:	4770      	bx	lr
        *dst++ = value;
 801188a:	f800 1b01 	strb.w	r1, [r0], #1
 801188e:	e7f9      	b.n	8011884 <memset1+0x2>

08011890 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011890:	b082      	sub	sp, #8
 8011892:	b082      	sub	sp, #8
 8011894:	f10d 0c08 	add.w	ip, sp, #8
 8011898:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801189c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 80118a0:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 80118a2:	440b      	add	r3, r1
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80118a4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80118a8:	440a      	add	r2, r1
 80118aa:	b291      	uxth	r1, r2
 80118ac:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
 80118ae:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 80118b2:	bfa2      	ittt	ge
 80118b4:	f5a1 727a 	subge.w	r2, r1, #1000	; 0x3e8
        c.Seconds++;
 80118b8:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
 80118ba:	b212      	sxthge	r2, r2
    }
    return c;
 80118bc:	6003      	str	r3, [r0, #0]
 80118be:	8082      	strh	r2, [r0, #4]
}
 80118c0:	b002      	add	sp, #8
 80118c2:	b002      	add	sp, #8
 80118c4:	4770      	bx	lr

080118c6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80118c6:	b082      	sub	sp, #8
 80118c8:	b082      	sub	sp, #8
 80118ca:	f10d 0c08 	add.w	ip, sp, #8
 80118ce:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80118d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
 80118d6:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
 80118d8:	1acb      	subs	r3, r1, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80118da:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80118de:	1a52      	subs	r2, r2, r1
 80118e0:	b291      	uxth	r1, r2
 80118e2:	b212      	sxth	r2, r2
    if( c.SubSeconds < 0 )
 80118e4:	2a00      	cmp	r2, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 80118e6:	bfbe      	ittt	lt
 80118e8:	f501 727a 	addlt.w	r2, r1, #1000	; 0x3e8
        c.Seconds--;
 80118ec:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 80118f0:	b212      	sxthlt	r2, r2
    }
    return c;
 80118f2:	6003      	str	r3, [r0, #0]
 80118f4:	8082      	strh	r2, [r0, #4]
}
 80118f6:	b002      	add	sp, #8
 80118f8:	b002      	add	sp, #8
 80118fa:	4770      	bx	lr

080118fc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80118fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118fe:	466b      	mov	r3, sp
 8011900:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011904:	2300      	movs	r3, #0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011906:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011908:	9302      	str	r3, [sp, #8]
 801190a:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801190e:	f7ff fe7f 	bl	8011610 <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 8011912:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8011914:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011918:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 801191a:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801191c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011920:	1ac9      	subs	r1, r1, r3
 8011922:	b28b      	uxth	r3, r1
 8011924:	b209      	sxth	r1, r1
    if( c.SubSeconds < 0 )
 8011926:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
 8011928:	bfbe      	ittt	lt
 801192a:	f503 717a 	addlt.w	r1, r3, #1000	; 0x3e8
        c.Seconds--;
 801192e:	f100 30ff 	addlt.w	r0, r0, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 8011932:	b209      	sxthlt	r1, r1

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
 8011934:	f7f2 ffb6 	bl	80048a4 <RtcBkupWrite>
}
 8011938:	b005      	add	sp, #20
 801193a:	f85d fb04 	ldr.w	pc, [sp], #4

0801193e <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801193e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011940:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011942:	2300      	movs	r3, #0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011944:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011946:	9302      	str	r3, [sp, #8]
 8011948:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801194c:	f7ff fe60 	bl	8011610 <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
 8011950:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011952:	9002      	str	r0, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
 8011954:	4668      	mov	r0, sp
 8011956:	f7f2 ffab 	bl	80048b0 <RtcBkupRead>
    c.Seconds = a.Seconds + b.Seconds;
 801195a:	9b02      	ldr	r3, [sp, #8]
 801195c:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801195e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
 8011962:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011964:	9b01      	ldr	r3, [sp, #4]
 8011966:	440b      	add	r3, r1
 8011968:	b299      	uxth	r1, r3
 801196a:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 801196c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 8011970:	bfa2      	ittt	ge
 8011972:	f5a1 737a 	subge.w	r3, r1, #1000	; 0x3e8
        c.Seconds++;
 8011976:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
 8011978:	b21b      	sxthge	r3, r3
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
 801197a:	4620      	mov	r0, r4
    return sysTime;
 801197c:	6022      	str	r2, [r4, #0]
 801197e:	80a3      	strh	r3, [r4, #4]
}
 8011980:	b004      	add	sp, #16
 8011982:	bd10      	pop	{r4, pc}

08011984 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
 8011984:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011986:	2300      	movs	r3, #0
{
 8011988:	4604      	mov	r4, r0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801198a:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011992:	f7ff fe3d 	bl	8011610 <RtcGetCalendarTime>
 8011996:	466d      	mov	r5, sp
 8011998:	9000      	str	r0, [sp, #0]

    return calendarTime;
 801199a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801199e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80119a2:	4620      	mov	r0, r4
 80119a4:	b003      	add	sp, #12
 80119a6:	bd30      	pop	{r4, r5, pc}

080119a8 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80119a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119aa:	466b      	mov	r3, sp
 80119ac:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
 80119b0:	a903      	add	r1, sp, #12
 80119b2:	a802      	add	r0, sp, #8
 80119b4:	f7f2 ff7c 	bl	80048b0 <RtcBkupRead>
    c.Seconds = a.Seconds - b.Seconds;
 80119b8:	9802      	ldr	r0, [sp, #8]
 80119ba:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80119bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c.Seconds = a.Seconds - b.Seconds;
 80119c0:	1a12      	subs	r2, r2, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80119c2:	9803      	ldr	r0, [sp, #12]
 80119c4:	1a1b      	subs	r3, r3, r0
 80119c6:	b299      	uxth	r1, r3
 80119c8:	b21b      	sxth	r3, r3
    if( c.SubSeconds < 0 )
 80119ca:	2b00      	cmp	r3, #0
        c.SubSeconds += 1000;
 80119cc:	bfbe      	ittt	lt
 80119ce:	f501 737a 	addlt.w	r3, r1, #1000	; 0x3e8
        c.Seconds--;
 80119d2:	f102 32ff 	addlt.w	r2, r2, #4294967295	; 0xffffffff
        c.SubSeconds += 1000;
 80119d6:	b21b      	sxthlt	r3, r3
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
}
 80119d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80119dc:	fb00 3002 	mla	r0, r0, r2, r3
 80119e0:	b005      	add	sp, #20
 80119e2:	f85d fb04 	ldr.w	pc, [sp], #4

080119e6 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80119e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t seconds = timeMs / 1000;
 80119e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80119ec:	4606      	mov	r6, r0
    uint32_t seconds = timeMs / 1000;
 80119ee:	fbb1 f4f3 	udiv	r4, r1, r3
    uint32_t subSeconds = timeMs - seconds * 1000;
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
 80119f2:	4668      	mov	r0, sp
 80119f4:	fb03 1514 	mls	r5, r3, r4, r1
 80119f8:	a901      	add	r1, sp, #4
    uint32_t seconds = timeMs / 1000;
 80119fa:	9400      	str	r4, [sp, #0]
    uint32_t subSeconds = timeMs - seconds * 1000;
 80119fc:	9501      	str	r5, [sp, #4]
    RtcBkupRead( &seconds, &subSeconds );
 80119fe:	f7f2 ff57 	bl	80048b0 <RtcBkupRead>
    c.Seconds = a.Seconds + b.Seconds;
 8011a02:	9b00      	ldr	r3, [sp, #0]
 8011a04:	441c      	add	r4, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011a06:	9b01      	ldr	r3, [sp, #4]
 8011a08:	442b      	add	r3, r5
 8011a0a:	b29a      	uxth	r2, r3
 8011a0c:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
 8011a0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
 8011a12:	bfa2      	ittt	ge
 8011a14:	f5a2 737a 	subge.w	r3, r2, #1000	; 0x3e8
        c.Seconds++;
 8011a18:	3401      	addge	r4, #1
        c.SubSeconds -= 1000;
 8011a1a:	b21b      	sxthge	r3, r3

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
 8011a1c:	4630      	mov	r0, r6
    return c;
 8011a1e:	6034      	str	r4, [r6, #0]
 8011a20:	80b3      	strh	r3, [r6, #4]
}
 8011a22:	b002      	add	sp, #8
 8011a24:	bd70      	pop	{r4, r5, r6, pc}

08011a26 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8011a26:	b570      	push	{r4, r5, r6, lr}
 8011a28:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 8011a2a:	f7ff fe0b 	bl	8011644 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8011a32:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8011a34:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8011a36:	f7f2 ff43 	bl	80048c0 <RtcGetTimerElapsedTime>
 8011a3a:	4428      	add	r0, r5
 8011a3c:	4286      	cmp	r6, r0
 8011a3e:	d203      	bcs.n	8011a48 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8011a40:	f7f2 ff3e 	bl	80048c0 <RtcGetTimerElapsedTime>
 8011a44:	4405      	add	r5, r0
 8011a46:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8011a48:	6820      	ldr	r0, [r4, #0]
}
 8011a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
 8011a4e:	f7f2 bf47 	b.w	80048e0 <RtcSetAlarm>

08011a52 <TimerInit>:
    obj->Timestamp = 0;
 8011a52:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
 8011a54:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
 8011a58:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
 8011a5c:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
 8011a5e:	6143      	str	r3, [r0, #20]
}
 8011a60:	4770      	bx	lr

08011a62 <TimerSetValue>:
{
 8011a62:	b538      	push	{r3, r4, r5, lr}
 8011a64:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
 8011a66:	4608      	mov	r0, r1
 8011a68:	f7ff fdf3 	bl	8011652 <RtcMs2Tick>
 8011a6c:	4604      	mov	r4, r0
    TimerStop( obj );
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f7f3 fc40 	bl	80052f4 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 8011a74:	f7ff fde6 	bl	8011644 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 8011a78:	42a0      	cmp	r0, r4
 8011a7a:	bf38      	it	cc
 8011a7c:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
 8011a7e:	e9c5 0000 	strd	r0, r0, [r5]
}
 8011a82:	bd38      	pop	{r3, r4, r5, pc}

08011a84 <TimerGetCurrentTime>:
{
 8011a84:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 8011a86:	f7ff fddb 	bl	8011640 <RtcGetTimerValue>
}
 8011a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
 8011a8e:	f7ff bde1 	b.w	8011654 <RtcTick2Ms>

08011a92 <TimerGetElapsedTime>:
{
 8011a92:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 8011a94:	4604      	mov	r4, r0
 8011a96:	b150      	cbz	r0, 8011aae <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
 8011a98:	f7ff fdd2 	bl	8011640 <RtcGetTimerValue>
 8011a9c:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f7ff fdd7 	bl	8011652 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8011aa4:	1a28      	subs	r0, r5, r0
}
 8011aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8011aaa:	f7ff bdd3 	b.w	8011654 <RtcTick2Ms>
}
 8011aae:	bd38      	pop	{r3, r4, r5, pc}

08011ab0 <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
 8011ab0:	f7ff bdca 	b.w	8011648 <DelayMsMcu>

08011ab4 <SX126xCheckDeviceReady>:
{
 8011ab4:	b508      	push	{r3, lr}
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 8011ab6:	f7f3 fa75 	bl	8004fa4 <SX126xGetOperatingMode>
 8011aba:	b938      	cbnz	r0, 8011acc <SX126xCheckDeviceReady+0x18>
        SX126xWakeup( );
 8011abc:	f7f3 fb02 	bl	80050c4 <SX126xWakeup>
        SX126xAntSwOn( );
 8011ac0:	f7ff fdf9 	bl	80116b6 <SX126xAntSwOn>
}
 8011ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xWaitOnBusy( );
 8011ac8:	f7f3 baaa 	b.w	8005020 <SX126xWaitOnBusy>
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 8011acc:	f7f3 fa6a 	bl	8004fa4 <SX126xGetOperatingMode>
 8011ad0:	2806      	cmp	r0, #6
 8011ad2:	d1f7      	bne.n	8011ac4 <SX126xCheckDeviceReady+0x10>
 8011ad4:	e7f2      	b.n	8011abc <SX126xCheckDeviceReady+0x8>

08011ad6 <SX126xSetPayload>:
{
 8011ad6:	460a      	mov	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 8011ad8:	4601      	mov	r1, r0
 8011ada:	2000      	movs	r0, #0
 8011adc:	f7ff be03 	b.w	80116e6 <SX126xWriteBuffer>

08011ae0 <SX126xSetSyncWord>:
{
 8011ae0:	b508      	push	{r3, lr}
 8011ae2:	4601      	mov	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8011ae4:	2208      	movs	r2, #8
 8011ae6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8011aea:	f7ff fe40 	bl	801176e <SX126xWriteRegisters>
}
 8011aee:	2000      	movs	r0, #0
 8011af0:	bd08      	pop	{r3, pc}

08011af2 <SX126xSetStandby>:
{
 8011af2:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8011af4:	2201      	movs	r2, #1
{
 8011af6:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8011afa:	f10d 0107 	add.w	r1, sp, #7
 8011afe:	2080      	movs	r0, #128	; 0x80
 8011b00:	f7ff fe15 	bl	801172e <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 8011b04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b08:	b92b      	cbnz	r3, 8011b16 <SX126xSetStandby+0x24>
        SX126xSetOperatingMode( MODE_STDBY_RC );
 8011b0a:	2001      	movs	r0, #1
        SX126xSetOperatingMode( MODE_STDBY_XOSC );
 8011b0c:	f7f3 fa50 	bl	8004fb0 <SX126xSetOperatingMode>
}
 8011b10:	b003      	add	sp, #12
 8011b12:	f85d fb04 	ldr.w	pc, [sp], #4
        SX126xSetOperatingMode( MODE_STDBY_XOSC );
 8011b16:	2002      	movs	r0, #2
 8011b18:	e7f8      	b.n	8011b0c <SX126xSetStandby+0x1a>

08011b1a <SX126xSetTx>:
{
 8011b1a:	b513      	push	{r0, r1, r4, lr}
 8011b1c:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_TX );
 8011b1e:	2004      	movs	r0, #4
 8011b20:	f7f3 fa46 	bl	8004fb0 <SX126xSetOperatingMode>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011b24:	0c23      	lsrs	r3, r4, #16
 8011b26:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8011b2a:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011b2c:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8011b2e:	a901      	add	r1, sp, #4
 8011b30:	2083      	movs	r0, #131	; 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011b32:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011b36:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 8011b3a:	f7ff fdf8 	bl	801172e <SX126xWriteCommand>
}
 8011b3e:	b002      	add	sp, #8
 8011b40:	bd10      	pop	{r4, pc}

08011b42 <SX126xSendPayload>:
{
 8011b42:	b510      	push	{r4, lr}
 8011b44:	4614      	mov	r4, r2
    SX126xSetPayload( payload, size );
 8011b46:	f7ff ffc6 	bl	8011ad6 <SX126xSetPayload>
    SX126xSetTx( timeout );
 8011b4a:	4620      	mov	r0, r4
}
 8011b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX126xSetTx( timeout );
 8011b50:	f7ff bfe3 	b.w	8011b1a <SX126xSetTx>

08011b54 <SX126xSetRx>:
{
 8011b54:	b513      	push	{r0, r1, r4, lr}
 8011b56:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 8011b58:	2005      	movs	r0, #5
 8011b5a:	f7f3 fa29 	bl	8004fb0 <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x94 ); // default gain
 8011b5e:	2194      	movs	r1, #148	; 0x94
 8011b60:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8011b64:	f7ff fe17 	bl	8011796 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011b68:	0c23      	lsrs	r3, r4, #16
 8011b6a:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8011b6e:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011b70:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8011b72:	a901      	add	r1, sp, #4
 8011b74:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011b76:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011b7a:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8011b7e:	f7ff fdd6 	bl	801172e <SX126xWriteCommand>
}
 8011b82:	b002      	add	sp, #8
 8011b84:	bd10      	pop	{r4, pc}

08011b86 <SX126xGetRandom>:
{
 8011b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t number = 0;
 8011b88:	2600      	movs	r6, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8011b8a:	f640 00e2 	movw	r0, #2274	; 0x8e2
    uint32_t number = 0;
 8011b8e:	9601      	str	r6, [sp, #4]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8011b90:	f7ff fe22 	bl	80117d8 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8011b94:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 8011b98:	4605      	mov	r5, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8011b9a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011b9e:	f7ff fdfa 	bl	8011796 <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8011ba2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011ba6:	f7ff fe17 	bl	80117d8 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8011baa:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 8011bae:	4604      	mov	r4, r0
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8011bb0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011bb4:	f7ff fdef 	bl	8011796 <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 8011bb8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011bbc:	f7ff ffca 	bl	8011b54 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8011bc0:	2204      	movs	r2, #4
 8011bc2:	eb0d 0102 	add.w	r1, sp, r2
 8011bc6:	f640 0019 	movw	r0, #2073	; 0x819
 8011bca:	f7ff fdef 	bl	80117ac <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 8011bce:	4630      	mov	r0, r6
 8011bd0:	f7ff ff8f 	bl	8011af2 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 8011bd4:	4629      	mov	r1, r5
 8011bd6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011bda:	f7ff fddc 	bl	8011796 <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 8011bde:	4621      	mov	r1, r4
 8011be0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011be4:	f7ff fdd7 	bl	8011796 <SX126xWriteRegister>
}
 8011be8:	9801      	ldr	r0, [sp, #4]
 8011bea:	b002      	add	sp, #8
 8011bec:	bd70      	pop	{r4, r5, r6, pc}

08011bee <SX126xSetRxBoosted>:
{
 8011bee:	b513      	push	{r0, r1, r4, lr}
 8011bf0:	4604      	mov	r4, r0
    SX126xSetOperatingMode( MODE_RX );
 8011bf2:	2005      	movs	r0, #5
 8011bf4:	f7f3 f9dc 	bl	8004fb0 <SX126xSetOperatingMode>
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8011bf8:	2196      	movs	r1, #150	; 0x96
 8011bfa:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8011bfe:	f7ff fdca 	bl	8011796 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011c02:	0c23      	lsrs	r3, r4, #16
 8011c04:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8011c08:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011c0a:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8011c0c:	a901      	add	r1, sp, #4
 8011c0e:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011c10:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011c14:	f88d 4006 	strb.w	r4, [sp, #6]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 8011c18:	f7ff fd89 	bl	801172e <SX126xWriteCommand>
}
 8011c1c:	b002      	add	sp, #8
 8011c1e:	bd10      	pop	{r4, pc}

08011c20 <SX126xSetRxDutyCycle>:
{
 8011c20:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8011c22:	0c03      	lsrs	r3, r0, #16
 8011c24:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8011c28:	0a03      	lsrs	r3, r0, #8
 8011c2a:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8011c2e:	0c0b      	lsrs	r3, r1, #16
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8011c30:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8011c34:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8011c38:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8011c3c:	0a0b      	lsrs	r3, r1, #8
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8011c3e:	2206      	movs	r2, #6
 8011c40:	4669      	mov	r1, sp
 8011c42:	2094      	movs	r0, #148	; 0x94
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8011c44:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8011c48:	f7ff fd71 	bl	801172e <SX126xWriteCommand>
    SX126xSetOperatingMode( MODE_RX_DC );
 8011c4c:	2006      	movs	r0, #6
 8011c4e:	f7f3 f9af 	bl	8004fb0 <SX126xSetOperatingMode>
}
 8011c52:	b003      	add	sp, #12
 8011c54:	f85d fb04 	ldr.w	pc, [sp], #4

08011c58 <SX126xSetCad>:
{
 8011c58:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	20c5      	movs	r0, #197	; 0xc5
 8011c5e:	4611      	mov	r1, r2
 8011c60:	f7ff fd65 	bl	801172e <SX126xWriteCommand>
}
 8011c64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetOperatingMode( MODE_CAD );
 8011c68:	2007      	movs	r0, #7
 8011c6a:	f7f3 b9a1 	b.w	8004fb0 <SX126xSetOperatingMode>

08011c6e <SX126xSetTxContinuousWave>:
{
 8011c6e:	b508      	push	{r3, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8011c70:	2200      	movs	r2, #0
 8011c72:	20d1      	movs	r0, #209	; 0xd1
 8011c74:	4611      	mov	r1, r2
 8011c76:	f7ff fd5a 	bl	801172e <SX126xWriteCommand>
}
 8011c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetOperatingMode( MODE_TX );
 8011c7e:	2004      	movs	r0, #4
 8011c80:	f7f3 b996 	b.w	8004fb0 <SX126xSetOperatingMode>

08011c84 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 8011c84:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011c86:	2201      	movs	r2, #1
{
 8011c88:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011c8c:	f10d 0107 	add.w	r1, sp, #7
 8011c90:	209f      	movs	r0, #159	; 0x9f
 8011c92:	f7ff fd4c 	bl	801172e <SX126xWriteCommand>
}
 8011c96:	b003      	add	sp, #12
 8011c98:	f85d fb04 	ldr.w	pc, [sp], #4

08011c9c <SX126xSetLoRaSymbNumTimeout>:
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 8011c9c:	28f8      	cmp	r0, #248	; 0xf8
{
 8011c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
                       SX126X_MAX_LORA_SYMB_NUM_TIMEOUT : 
 8011ca0:	4604      	mov	r4, r0
 8011ca2:	bf28      	it	cs
 8011ca4:	24f8      	movcs	r4, #248	; 0xf8
                       symbNum ) + 1 ) >> 1;
 8011ca6:	3401      	adds	r4, #1
{
 8011ca8:	4606      	mov	r6, r0
    uint8_t mant = ( ( ( symbNum > SX126X_MAX_LORA_SYMB_NUM_TIMEOUT ) ?
 8011caa:	f3c4 0446 	ubfx	r4, r4, #1, #7
    while( mant > 31 )
 8011cae:	2300      	movs	r3, #0
 8011cb0:	2c1f      	cmp	r4, #31
 8011cb2:	b2dd      	uxtb	r5, r3
 8011cb4:	f103 0301 	add.w	r3, r3, #1
 8011cb8:	d817      	bhi.n	8011cea <SX126xSetLoRaSymbNumTimeout+0x4e>
    reg = mant << ( 2 * exp + 1 );
 8011cba:	006b      	lsls	r3, r5, #1
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	fa04 f303 	lsl.w	r3, r4, r3
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	f10d 0107 	add.w	r1, sp, #7
 8011cc8:	20a0      	movs	r0, #160	; 0xa0
    reg = mant << ( 2 * exp + 1 );
 8011cca:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &reg, 1 );
 8011cce:	f7ff fd2e 	bl	801172e <SX126xWriteCommand>
    if( symbNum != 0 )
 8011cd2:	b146      	cbz	r6, 8011ce6 <SX126xSetLoRaSymbNumTimeout+0x4a>
        reg = exp + ( mant << 3 );
 8011cd4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011cd8:	b2c9      	uxtb	r1, r1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8011cda:	f240 7006 	movw	r0, #1798	; 0x706
        reg = exp + ( mant << 3 );
 8011cde:	f88d 1007 	strb.w	r1, [sp, #7]
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8011ce2:	f7ff fd58 	bl	8011796 <SX126xWriteRegister>
}
 8011ce6:	b002      	add	sp, #8
 8011ce8:	bd70      	pop	{r4, r5, r6, pc}
        mant = ( mant + 3 ) >> 2;
 8011cea:	3403      	adds	r4, #3
 8011cec:	f3c4 0487 	ubfx	r4, r4, #2, #8
        exp++;
 8011cf0:	e7de      	b.n	8011cb0 <SX126xSetLoRaSymbNumTimeout+0x14>

08011cf2 <SX126xSetRegulatorMode>:
{
 8011cf2:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8011cf4:	2201      	movs	r2, #1
{
 8011cf6:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8011cfa:	f10d 0107 	add.w	r1, sp, #7
 8011cfe:	2096      	movs	r0, #150	; 0x96
 8011d00:	f7ff fd15 	bl	801172e <SX126xWriteCommand>
}
 8011d04:	b003      	add	sp, #12
 8011d06:	f85d fb04 	ldr.w	pc, [sp], #4

08011d0a <SX126xCalibrate>:
{
 8011d0a:	b507      	push	{r0, r1, r2, lr}
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011d0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011d10:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 8011d14:	2201      	movs	r2, #1
 8011d16:	f10d 0107 	add.w	r1, sp, #7
 8011d1a:	2089      	movs	r0, #137	; 0x89
 8011d1c:	f7ff fd07 	bl	801172e <SX126xWriteCommand>
}
 8011d20:	b003      	add	sp, #12
 8011d22:	f85d fb04 	ldr.w	pc, [sp], #4

08011d26 <SX126xSetPaConfig>:
{
 8011d26:	b507      	push	{r0, r1, r2, lr}
    buf[2] = deviceSel;
 8011d28:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011d2c:	2204      	movs	r2, #4
    buf[0] = paDutyCycle;
 8011d2e:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8011d32:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011d36:	2095      	movs	r0, #149	; 0x95
 8011d38:	eb0d 0102 	add.w	r1, sp, r2
    buf[3] = paLut;
 8011d3c:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011d40:	f7ff fcf5 	bl	801172e <SX126xWriteCommand>
}
 8011d44:	b003      	add	sp, #12
 8011d46:	f85d fb04 	ldr.w	pc, [sp], #4

08011d4a <SX126xSetDioIrqParams>:
{
 8011d4a:	b513      	push	{r0, r1, r4, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8011d4c:	0a04      	lsrs	r4, r0, #8
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8011d4e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8011d52:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8011d56:	0a08      	lsrs	r0, r1, #8
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8011d58:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8011d5c:	0a11      	lsrs	r1, r2, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8011d5e:	0a1a      	lsrs	r2, r3, #8
 8011d60:	f88d 2006 	strb.w	r2, [sp, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011d64:	2208      	movs	r2, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8011d66:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8011d6a:	f88d 1004 	strb.w	r1, [sp, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011d6e:	4610      	mov	r0, r2
 8011d70:	4669      	mov	r1, sp
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8011d72:	f88d 4000 	strb.w	r4, [sp]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8011d76:	f88d 3007 	strb.w	r3, [sp, #7]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011d7a:	f7ff fcd8 	bl	801172e <SX126xWriteCommand>
}
 8011d7e:	b002      	add	sp, #8
 8011d80:	bd10      	pop	{r4, pc}

08011d82 <SX126xGetIrqStatus>:
{
 8011d82:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8011d84:	2202      	movs	r2, #2
 8011d86:	a901      	add	r1, sp, #4
 8011d88:	2012      	movs	r0, #18
 8011d8a:	f7ff fcde 	bl	801174a <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8011d8e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8011d92:	ba40      	rev16	r0, r0
}
 8011d94:	b280      	uxth	r0, r0
 8011d96:	b003      	add	sp, #12
 8011d98:	f85d fb04 	ldr.w	pc, [sp], #4

08011d9c <SX126xSetDio2AsRfSwitchCtrl>:
{
 8011d9c:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8011d9e:	2201      	movs	r2, #1
{
 8011da0:	f88d 0007 	strb.w	r0, [sp, #7]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 8011da4:	f10d 0107 	add.w	r1, sp, #7
 8011da8:	209d      	movs	r0, #157	; 0x9d
 8011daa:	f7ff fcc0 	bl	801172e <SX126xWriteCommand>
}
 8011dae:	b003      	add	sp, #12
 8011db0:	f85d fb04 	ldr.w	pc, [sp], #4

08011db4 <SX126xSetDio3AsTcxoCtrl>:
{
 8011db4:	b507      	push	{r0, r1, r2, lr}
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011db6:	0c0b      	lsrs	r3, r1, #16
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011db8:	2204      	movs	r2, #4
    buf[0] = tcxoVoltage & 0x07;
 8011dba:	f000 0007 	and.w	r0, r0, #7
 8011dbe:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011dc2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8011dc6:	f88d 1007 	strb.w	r1, [sp, #7]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011dca:	0a0b      	lsrs	r3, r1, #8
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011dcc:	2097      	movs	r0, #151	; 0x97
 8011dce:	eb0d 0102 	add.w	r1, sp, r2
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011dd2:	f88d 3006 	strb.w	r3, [sp, #6]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011dd6:	f7ff fcaa 	bl	801172e <SX126xWriteCommand>
}
 8011dda:	b003      	add	sp, #12
 8011ddc:	f85d fb04 	ldr.w	pc, [sp], #4

08011de0 <SX126xSetTxParams>:
{
 8011de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011de2:	4604      	mov	r4, r0
 8011de4:	460d      	mov	r5, r1
    if( SX126xGetDeviceId( ) == SX1261 )
 8011de6:	f7ff fc6a 	bl	80116be <SX126xGetDeviceId>
 8011dea:	2801      	cmp	r0, #1
 8011dec:	4603      	mov	r3, r0
 8011dee:	d11b      	bne.n	8011e28 <SX126xSetTxParams+0x48>
        if( power == 15 )
 8011df0:	2c0f      	cmp	r4, #15
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8011df2:	4602      	mov	r2, r0
 8011df4:	f04f 0100 	mov.w	r1, #0
 8011df8:	bf0c      	ite	eq
 8011dfa:	2006      	moveq	r0, #6
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8011dfc:	2004      	movne	r0, #4
 8011dfe:	f7ff ff92 	bl	8011d26 <SX126xSetPaConfig>
        if( power >= 14 )
 8011e02:	f06f 0010 	mvn.w	r0, #16
 8011e06:	4284      	cmp	r4, r0
 8011e08:	bfb8      	it	lt
 8011e0a:	4604      	movlt	r4, r0
 8011e0c:	2c0e      	cmp	r4, #14
 8011e0e:	bfa8      	it	ge
 8011e10:	240e      	movge	r4, #14
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8011e12:	2202      	movs	r2, #2
 8011e14:	a901      	add	r1, sp, #4
 8011e16:	208e      	movs	r0, #142	; 0x8e
    buf[0] = power;
 8011e18:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = ( uint8_t )rampTime;
 8011e1c:	f88d 5005 	strb.w	r5, [sp, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8011e20:	f7ff fc85 	bl	801172e <SX126xWriteCommand>
}
 8011e24:	b003      	add	sp, #12
 8011e26:	bd30      	pop	{r4, r5, pc}
        SX126xWriteRegister( REG_TX_CLAMP_CFG, SX126xReadRegister( REG_TX_CLAMP_CFG ) | ( 0x0F << 1 ) );
 8011e28:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8011e2c:	f7ff fcd4 	bl	80117d8 <SX126xReadRegister>
 8011e30:	f040 011e 	orr.w	r1, r0, #30
 8011e34:	b2c9      	uxtb	r1, r1
 8011e36:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8011e3a:	f7ff fcac 	bl	8011796 <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8011e3e:	2004      	movs	r0, #4
 8011e40:	2301      	movs	r3, #1
 8011e42:	2200      	movs	r2, #0
 8011e44:	2107      	movs	r1, #7
 8011e46:	f7ff ff6e 	bl	8011d26 <SX126xSetPaConfig>
        if( power > 22 )
 8011e4a:	f06f 0008 	mvn.w	r0, #8
 8011e4e:	4284      	cmp	r4, r0
 8011e50:	bfb8      	it	lt
 8011e52:	4604      	movlt	r4, r0
 8011e54:	2c16      	cmp	r4, #22
 8011e56:	bfa8      	it	ge
 8011e58:	2416      	movge	r4, #22
 8011e5a:	e7da      	b.n	8011e12 <SX126xSetTxParams+0x32>

08011e5c <SX126xSetBufferBaseAddress>:
{
 8011e5c:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011e5e:	2202      	movs	r2, #2
    buf[0] = txBaseAddress;
 8011e60:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011e64:	f88d 1005 	strb.w	r1, [sp, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011e68:	208f      	movs	r0, #143	; 0x8f
 8011e6a:	a901      	add	r1, sp, #4
 8011e6c:	f7ff fc5f 	bl	801172e <SX126xWriteCommand>
}
 8011e70:	b003      	add	sp, #12
 8011e72:	f85d fb04 	ldr.w	pc, [sp], #4

08011e76 <SX126xGetRssiInst>:
{
 8011e76:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011e78:	2201      	movs	r2, #1
 8011e7a:	a901      	add	r1, sp, #4
 8011e7c:	2015      	movs	r0, #21
 8011e7e:	f7ff fc64 	bl	801174a <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 8011e82:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011e86:	4240      	negs	r0, r0
}
 8011e88:	1040      	asrs	r0, r0, #1
 8011e8a:	b003      	add	sp, #12
 8011e8c:	f85d fb04 	ldr.w	pc, [sp], #4

08011e90 <SX126xGetPayload>:
{
 8011e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e92:	460d      	mov	r5, r1
 8011e94:	4606      	mov	r6, r0
    uint8_t offset = 0;
 8011e96:	2400      	movs	r4, #0
    SX126xGetRxBufferStatus( size, &offset );
 8011e98:	f10d 0107 	add.w	r1, sp, #7
 8011e9c:	4628      	mov	r0, r5
{
 8011e9e:	4617      	mov	r7, r2
    uint8_t offset = 0;
 8011ea0:	f88d 4007 	strb.w	r4, [sp, #7]
    SX126xGetRxBufferStatus( size, &offset );
 8011ea4:	f7f3 fc0e 	bl	80056c4 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 8011ea8:	782a      	ldrb	r2, [r5, #0]
 8011eaa:	42ba      	cmp	r2, r7
 8011eac:	d807      	bhi.n	8011ebe <SX126xGetPayload+0x2e>
    SX126xReadBuffer( offset, buffer, *size );
 8011eae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011eb2:	4631      	mov	r1, r6
 8011eb4:	f7ff fc28 	bl	8011708 <SX126xReadBuffer>
    return 0;
 8011eb8:	4620      	mov	r0, r4
}
 8011eba:	b003      	add	sp, #12
 8011ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 8011ebe:	2001      	movs	r0, #1
 8011ec0:	e7fb      	b.n	8011eba <SX126xGetPayload+0x2a>

08011ec2 <SX126xClearIrqStatus>:
{
 8011ec2:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8011ec4:	2202      	movs	r2, #2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8011ec6:	0a03      	lsrs	r3, r0, #8
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 8011ec8:	f88d 0005 	strb.w	r0, [sp, #5]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8011ecc:	a901      	add	r1, sp, #4
 8011ece:	4610      	mov	r0, r2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 8011ed0:	f88d 3004 	strb.w	r3, [sp, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8011ed4:	f7ff fc2b 	bl	801172e <SX126xWriteCommand>
}
 8011ed8:	b003      	add	sp, #12
 8011eda:	f85d fb04 	ldr.w	pc, [sp], #4

08011ede <RadioCheckRfFrequency>:
}
 8011ede:	2001      	movs	r0, #1
 8011ee0:	4770      	bx	lr

08011ee2 <RadioStandby>:
    SX126xSetStandby( STDBY_RC );
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	f7ff be05 	b.w	8011af2 <SX126xSetStandby>

08011ee8 <RadioSetChannel>:
    SX126xSetRfFrequency( freq );
 8011ee8:	f7f3 bae8 	b.w	80054bc <SX126xSetRfFrequency>

08011eec <RadioRead>:
    return SX126xReadRegister( addr );
 8011eec:	b280      	uxth	r0, r0
 8011eee:	f7ff bc73 	b.w	80117d8 <SX126xReadRegister>

08011ef2 <RadioWrite>:
    SX126xWriteRegister( addr, data );
 8011ef2:	b280      	uxth	r0, r0
 8011ef4:	f7ff bc4f 	b.w	8011796 <SX126xWriteRegister>

08011ef8 <RadioSleep>:
{
 8011ef8:	b508      	push	{r3, lr}
    SX126xSetSleep( params );
 8011efa:	f04f 0004 	mov.w	r0, #4
 8011efe:	f7f3 fa69 	bl	80053d4 <SX126xSetSleep>
}
 8011f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DelayMs( 2 );
 8011f06:	2002      	movs	r0, #2
 8011f08:	f7ff bdd2 	b.w	8011ab0 <DelayMs>

08011f0c <RadioSetRxDutyCycle>:
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 8011f0c:	f7ff be88 	b.w	8011c20 <SX126xSetRxDutyCycle>

08011f10 <RadioReadBuffer>:
    SX126xReadRegisters( addr, buffer, size );
 8011f10:	b280      	uxth	r0, r0
 8011f12:	f7ff bc4b 	b.w	80117ac <SX126xReadRegisters>

08011f16 <RadioWriteBuffer>:
    SX126xWriteRegisters( addr, buffer, size );
 8011f16:	b280      	uxth	r0, r0
 8011f18:	f7ff bc29 	b.w	801176e <SX126xWriteRegisters>

08011f1c <RadioStartCad>:
{
 8011f1c:	b508      	push	{r3, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011f1e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8011f22:	2300      	movs	r3, #0
 8011f24:	461a      	mov	r2, r3
 8011f26:	4608      	mov	r0, r1
 8011f28:	f7ff ff0f 	bl	8011d4a <SX126xSetDioIrqParams>
}
 8011f2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SX126xSetCad( );
 8011f30:	f7ff be92 	b.w	8011c58 <SX126xSetCad>

08011f34 <RadioRssi>:
{
 8011f34:	b508      	push	{r3, lr}
    return SX126xGetRssiInst( );
 8011f36:	f7ff ff9e 	bl	8011e76 <SX126xGetRssiInst>
}
 8011f3a:	b200      	sxth	r0, r0
 8011f3c:	bd08      	pop	{r3, pc}

08011f3e <RadioGetWakeupTime>:
{
 8011f3e:	b508      	push	{r3, lr}
    return SX126xGetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8011f40:	f7ff fbbb 	bl	80116ba <SX126xGetBoardTcxoWakeupTime>
}
 8011f44:	3003      	adds	r0, #3
 8011f46:	bd08      	pop	{r3, pc}

08011f48 <RadioIsChannelFree>:
{
 8011f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	b08a      	sub	sp, #40	; 0x28
    RadioSetModem( MODEM_FSK );
 8011f50:	2000      	movs	r0, #0
{
 8011f52:	460d      	mov	r5, r1
 8011f54:	4617      	mov	r7, r2
 8011f56:	461e      	mov	r6, r3
    RadioSetModem( MODEM_FSK );
 8011f58:	f7f3 fe5e 	bl	8005c18 <RadioSetModem>
    SX126xSetRfFrequency( freq );
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f7f3 faad 	bl	80054bc <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8011f62:	2400      	movs	r4, #0
 8011f64:	f04f 0801 	mov.w	r8, #1
 8011f68:	2303      	movs	r3, #3
 8011f6a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8011f6e:	4629      	mov	r1, r5
 8011f70:	4620      	mov	r0, r4
 8011f72:	e9cd 4808 	strd	r4, r8, [sp, #32]
 8011f76:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8011f7a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8011f7e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8011f82:	e9cd 5300 	strd	r5, r3, [sp]
 8011f86:	4623      	mov	r3, r4
 8011f88:	f7f3 fe56 	bl	8005c38 <RadioSetRxConfig>
    RadioRx( 0 );
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	f7f3 fc97 	bl	80058c0 <RadioRx>
    DelayMs( 1 );
 8011f92:	4640      	mov	r0, r8
 8011f94:	f7ff fd8c 	bl	8011ab0 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8011f98:	f7ff fd74 	bl	8011a84 <TimerGetCurrentTime>
 8011f9c:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f7ff fd77 	bl	8011a92 <TimerGetElapsedTime>
 8011fa4:	42b0      	cmp	r0, r6
 8011fa6:	d306      	bcc.n	8011fb6 <RadioIsChannelFree+0x6e>
    bool     status           = true;
 8011fa8:	2401      	movs	r4, #1
    RadioSleep( );
 8011faa:	f7ff ffa5 	bl	8011ef8 <RadioSleep>
}
 8011fae:	4620      	mov	r0, r4
 8011fb0:	b00a      	add	sp, #40	; 0x28
 8011fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return SX126xGetRssiInst( );
 8011fb6:	f7ff ff5e 	bl	8011e76 <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 8011fba:	b200      	sxth	r0, r0
 8011fbc:	4287      	cmp	r7, r0
 8011fbe:	daee      	bge.n	8011f9e <RadioIsChannelFree+0x56>
            status = false;
 8011fc0:	2400      	movs	r4, #0
 8011fc2:	e7f2      	b.n	8011faa <RadioIsChannelFree+0x62>

08011fc4 <RadioRandom>:
{
 8011fc4:	b508      	push	{r3, lr}
 8011fc6:	f7f3 fe15 	bl	8005bf4 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011fca:	2300      	movs	r3, #0
 8011fcc:	461a      	mov	r2, r3
 8011fce:	4619      	mov	r1, r3
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff feba 	bl	8011d4a <SX126xSetDioIrqParams>
}
 8011fd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rnd = SX126xGetRandom( );
 8011fda:	f7ff bdd4 	b.w	8011b86 <SX126xGetRandom>

08011fde <RadioAddRegisterToRetentionList>:
{
 8011fde:	b530      	push	{r4, r5, lr}
 8011fe0:	b085      	sub	sp, #20
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8011fe2:	a901      	add	r1, sp, #4
{
 8011fe4:	4604      	mov	r4, r0
    SX126xReadRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8011fe6:	2209      	movs	r2, #9
 8011fe8:	f240 209f 	movw	r0, #671	; 0x29f
 8011fec:	f7ff fbde 	bl	80117ac <SX126xReadRegisters>
    const uint8_t nbOfRegisters = buffer[0];
 8011ff0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( uint8_t i = 0; i < nbOfRegisters; i++ )
 8011ff4:	a801      	add	r0, sp, #4
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	b2ca      	uxtb	r2, r1
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d817      	bhi.n	801202e <RadioAddRegisterToRetentionList+0x50>
    if( nbOfRegisters < MAX_NB_REG_IN_RETENTION )
 8011ffe:	2b03      	cmp	r3, #3
 8012000:	d820      	bhi.n	8012044 <RadioAddRegisterToRetentionList+0x66>
        buffer[0] += 1;
 8012002:	1c5a      	adds	r2, r3, #1
 8012004:	f88d 2004 	strb.w	r2, [sp, #4]
        registerList[2 * nbOfRegisters]     = ( uint8_t )( registerAddress >> 8 );
 8012008:	a904      	add	r1, sp, #16
 801200a:	2202      	movs	r2, #2
 801200c:	fb03 1102 	mla	r1, r3, r2, r1
 8012010:	0a20      	lsrs	r0, r4, #8
 8012012:	f801 0c0b 	strb.w	r0, [r1, #-11]
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 8012016:	a904      	add	r1, sp, #16
 8012018:	fb02 1303 	mla	r3, r2, r3, r1
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 801201c:	f240 209f 	movw	r0, #671	; 0x29f
        registerList[2 * nbOfRegisters + 1] = ( uint8_t )( registerAddress >> 0 );
 8012020:	f803 4c0a 	strb.w	r4, [r3, #-10]
        SX126xWriteRegisters( REG_RETENTION_LIST_BASE_ADDRESS, buffer, 9 );
 8012024:	2209      	movs	r2, #9
 8012026:	a901      	add	r1, sp, #4
 8012028:	f7ff fba1 	bl	801176e <SX126xWriteRegisters>
 801202c:	e00a      	b.n	8012044 <RadioAddRegisterToRetentionList+0x66>
        if( registerAddress == ( ( uint16_t ) registerList[2 * i] << 8 ) + registerList[2 * i + 1] )
 801202e:	4602      	mov	r2, r0
 8012030:	7845      	ldrb	r5, [r0, #1]
 8012032:	7892      	ldrb	r2, [r2, #2]
 8012034:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8012038:	4294      	cmp	r4, r2
 801203a:	f101 0101 	add.w	r1, r1, #1
 801203e:	f100 0002 	add.w	r0, r0, #2
 8012042:	d1d9      	bne.n	8011ff8 <RadioAddRegisterToRetentionList+0x1a>
}
 8012044:	b005      	add	sp, #20
 8012046:	bd30      	pop	{r4, r5, pc}

08012048 <xor_block>:
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8012048:	780a      	ldrb	r2, [r1, #0]
 801204a:	7803      	ldrb	r3, [r0, #0]
 801204c:	4053      	eors	r3, r2
 801204e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8012050:	784a      	ldrb	r2, [r1, #1]
 8012052:	7843      	ldrb	r3, [r0, #1]
 8012054:	4053      	eors	r3, r2
 8012056:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8012058:	788a      	ldrb	r2, [r1, #2]
 801205a:	7883      	ldrb	r3, [r0, #2]
 801205c:	4053      	eors	r3, r2
 801205e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8012060:	78ca      	ldrb	r2, [r1, #3]
 8012062:	78c3      	ldrb	r3, [r0, #3]
 8012064:	4053      	eors	r3, r2
 8012066:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8012068:	790a      	ldrb	r2, [r1, #4]
 801206a:	7903      	ldrb	r3, [r0, #4]
 801206c:	4053      	eors	r3, r2
 801206e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8012070:	794a      	ldrb	r2, [r1, #5]
 8012072:	7943      	ldrb	r3, [r0, #5]
 8012074:	4053      	eors	r3, r2
 8012076:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8012078:	798a      	ldrb	r2, [r1, #6]
 801207a:	7983      	ldrb	r3, [r0, #6]
 801207c:	4053      	eors	r3, r2
 801207e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8012080:	79ca      	ldrb	r2, [r1, #7]
 8012082:	79c3      	ldrb	r3, [r0, #7]
 8012084:	4053      	eors	r3, r2
 8012086:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8012088:	7a0a      	ldrb	r2, [r1, #8]
 801208a:	7a03      	ldrb	r3, [r0, #8]
 801208c:	4053      	eors	r3, r2
 801208e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8012090:	7a4a      	ldrb	r2, [r1, #9]
 8012092:	7a43      	ldrb	r3, [r0, #9]
 8012094:	4053      	eors	r3, r2
 8012096:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8012098:	7a8a      	ldrb	r2, [r1, #10]
 801209a:	7a83      	ldrb	r3, [r0, #10]
 801209c:	4053      	eors	r3, r2
 801209e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80120a0:	7aca      	ldrb	r2, [r1, #11]
 80120a2:	7ac3      	ldrb	r3, [r0, #11]
 80120a4:	4053      	eors	r3, r2
 80120a6:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80120a8:	7b0a      	ldrb	r2, [r1, #12]
 80120aa:	7b03      	ldrb	r3, [r0, #12]
 80120ac:	4053      	eors	r3, r2
 80120ae:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80120b0:	7b4a      	ldrb	r2, [r1, #13]
 80120b2:	7b43      	ldrb	r3, [r0, #13]
 80120b4:	4053      	eors	r3, r2
 80120b6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80120b8:	7b8a      	ldrb	r2, [r1, #14]
 80120ba:	7b83      	ldrb	r3, [r0, #14]
 80120bc:	4053      	eors	r3, r2
 80120be:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80120c0:	7bca      	ldrb	r2, [r1, #15]
 80120c2:	7bc3      	ldrb	r3, [r0, #15]
 80120c4:	4053      	eors	r3, r2
 80120c6:	73c3      	strb	r3, [r0, #15]
}
 80120c8:	4770      	bx	lr

080120ca <copy_and_key>:
{
 80120ca:	b510      	push	{r4, lr}
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80120cc:	780b      	ldrb	r3, [r1, #0]
 80120ce:	7814      	ldrb	r4, [r2, #0]
 80120d0:	4063      	eors	r3, r4
 80120d2:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80120d4:	7854      	ldrb	r4, [r2, #1]
 80120d6:	784b      	ldrb	r3, [r1, #1]
 80120d8:	4063      	eors	r3, r4
 80120da:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80120dc:	7894      	ldrb	r4, [r2, #2]
 80120de:	788b      	ldrb	r3, [r1, #2]
 80120e0:	4063      	eors	r3, r4
 80120e2:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80120e4:	78d4      	ldrb	r4, [r2, #3]
 80120e6:	78cb      	ldrb	r3, [r1, #3]
 80120e8:	4063      	eors	r3, r4
 80120ea:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80120ec:	7914      	ldrb	r4, [r2, #4]
 80120ee:	790b      	ldrb	r3, [r1, #4]
 80120f0:	4063      	eors	r3, r4
 80120f2:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80120f4:	7954      	ldrb	r4, [r2, #5]
 80120f6:	794b      	ldrb	r3, [r1, #5]
 80120f8:	4063      	eors	r3, r4
 80120fa:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80120fc:	7994      	ldrb	r4, [r2, #6]
 80120fe:	798b      	ldrb	r3, [r1, #6]
 8012100:	4063      	eors	r3, r4
 8012102:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8012104:	79d4      	ldrb	r4, [r2, #7]
 8012106:	79cb      	ldrb	r3, [r1, #7]
 8012108:	4063      	eors	r3, r4
 801210a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801210c:	7a14      	ldrb	r4, [r2, #8]
 801210e:	7a0b      	ldrb	r3, [r1, #8]
 8012110:	4063      	eors	r3, r4
 8012112:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8012114:	7a54      	ldrb	r4, [r2, #9]
 8012116:	7a4b      	ldrb	r3, [r1, #9]
 8012118:	4063      	eors	r3, r4
 801211a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 801211c:	7a8b      	ldrb	r3, [r1, #10]
 801211e:	7a94      	ldrb	r4, [r2, #10]
 8012120:	4063      	eors	r3, r4
 8012122:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8012124:	7ad4      	ldrb	r4, [r2, #11]
 8012126:	7acb      	ldrb	r3, [r1, #11]
 8012128:	4063      	eors	r3, r4
 801212a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 801212c:	7b14      	ldrb	r4, [r2, #12]
 801212e:	7b0b      	ldrb	r3, [r1, #12]
 8012130:	4063      	eors	r3, r4
 8012132:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8012134:	7b54      	ldrb	r4, [r2, #13]
 8012136:	7b4b      	ldrb	r3, [r1, #13]
 8012138:	4063      	eors	r3, r4
 801213a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 801213c:	7b94      	ldrb	r4, [r2, #14]
 801213e:	7b8b      	ldrb	r3, [r1, #14]
 8012140:	4063      	eors	r3, r4
 8012142:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8012144:	7bcb      	ldrb	r3, [r1, #15]
 8012146:	7bd2      	ldrb	r2, [r2, #15]
 8012148:	4053      	eors	r3, r2
 801214a:	73c3      	strb	r3, [r0, #15]
}
 801214c:	bd10      	pop	{r4, pc}

0801214e <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 801214e:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
 8012150:	2210      	movs	r2, #16
{
 8012152:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8012154:	2100      	movs	r1, #0
 8012156:	30f1      	adds	r0, #241	; 0xf1
 8012158:	f7ff fb93 	bl	8011882 <memset1>
    ctx->M_n = 0;
 801215c:	2100      	movs	r1, #0
 801215e:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8012162:	4620      	mov	r0, r4
 8012164:	22f0      	movs	r2, #240	; 0xf0
}
 8012166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
 801216a:	f7ff bb8a 	b.w	8011882 <memset1>

0801216e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801216e:	4602      	mov	r2, r0
 8012170:	4608      	mov	r0, r1
    aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8012172:	2110      	movs	r1, #16
 8012174:	f7f3 bf5e 	b.w	8006034 <aes_set_key>

08012178 <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8012178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801217c:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 801217e:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
 8012182:	b085      	sub	sp, #20
 8012184:	460e      	mov	r6, r1
 8012186:	4615      	mov	r5, r2
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8012188:	f204 1701 	addw	r7, r4, #257	; 0x101
    if( ctx->M_n > 0 )
 801218c:	b388      	cbz	r0, 80121f2 <AES_CMAC_Update+0x7a>
        mlen = MIN( 16 - ctx->M_n, len );
 801218e:	f1c0 0910 	rsb	r9, r0, #16
 8012192:	4591      	cmp	r9, r2
 8012194:	46c8      	mov	r8, r9
 8012196:	bf28      	it	cs
 8012198:	4690      	movcs	r8, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 801219a:	fa1f f288 	uxth.w	r2, r8
 801219e:	4438      	add	r0, r7
 80121a0:	f7ff fb5b 	bl	801185a <memcpy1>
        ctx->M_n += mlen;
 80121a4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80121a8:	4443      	add	r3, r8
        if( ctx->M_n < 16 || len == mlen )
 80121aa:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
 80121ac:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 80121b0:	d928      	bls.n	8012204 <AES_CMAC_Update+0x8c>
 80121b2:	45a9      	cmp	r9, r5
 80121b4:	d226      	bcs.n	8012204 <AES_CMAC_Update+0x8c>
 80121b6:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 80121ba:	4699      	mov	r9, r3
            return;
        XOR( ctx->M_last, ctx->X );
 80121bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121c0:	7bd9      	ldrb	r1, [r3, #15]
 80121c2:	42bb      	cmp	r3, r7
 80121c4:	ea82 0201 	eor.w	r2, r2, r1
 80121c8:	f803 2c01 	strb.w	r2, [r3, #-1]
 80121cc:	d1f6      	bne.n	80121bc <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80121ce:	2210      	movs	r2, #16
 80121d0:	4649      	mov	r1, r9
 80121d2:	4668      	mov	r0, sp
 80121d4:	f7ff fb41 	bl	801185a <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 80121d8:	4622      	mov	r2, r4
 80121da:	4669      	mov	r1, sp
 80121dc:	4668      	mov	r0, sp
 80121de:	f7f3 ffa5 	bl	800612c <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80121e2:	2210      	movs	r2, #16
 80121e4:	4669      	mov	r1, sp
 80121e6:	4648      	mov	r0, r9
 80121e8:	f7ff fb37 	bl	801185a <memcpy1>

        data += mlen;
 80121ec:	4446      	add	r6, r8
        len -= mlen;
 80121ee:	eba5 0508 	sub.w	r5, r5, r8
    }
    while( len > 16 )
 80121f2:	2d10      	cmp	r5, #16
 80121f4:	d809      	bhi.n	801220a <AES_CMAC_Update+0x92>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80121f6:	b2aa      	uxth	r2, r5
 80121f8:	4631      	mov	r1, r6
 80121fa:	4638      	mov	r0, r7
 80121fc:	f7ff fb2d 	bl	801185a <memcpy1>
    ctx->M_n = len;
 8012200:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
 8012204:	b005      	add	sp, #20
 8012206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801220a:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 801220e:	1e71      	subs	r1, r6, #1
 8012210:	4698      	mov	r8, r3
        XOR( data, ctx->X );
 8012212:	781a      	ldrb	r2, [r3, #0]
 8012214:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012218:	4042      	eors	r2, r0
 801221a:	f803 2b01 	strb.w	r2, [r3], #1
 801221e:	42bb      	cmp	r3, r7
 8012220:	d1f7      	bne.n	8012212 <AES_CMAC_Update+0x9a>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012222:	2210      	movs	r2, #16
 8012224:	4641      	mov	r1, r8
 8012226:	4668      	mov	r0, sp
 8012228:	f7ff fb17 	bl	801185a <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
 801222c:	4622      	mov	r2, r4
 801222e:	4669      	mov	r1, sp
 8012230:	4668      	mov	r0, sp
 8012232:	f7f3 ff7b 	bl	800612c <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8012236:	2210      	movs	r2, #16
 8012238:	4669      	mov	r1, sp
 801223a:	4640      	mov	r0, r8
 801223c:	f7ff fb0d 	bl	801185a <memcpy1>
        data += 16;
 8012240:	3610      	adds	r6, #16
        len -= 16;
 8012242:	3d10      	subs	r5, #16
 8012244:	e7d5      	b.n	80121f2 <AES_CMAC_Update+0x7a>

08012246 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8012246:	b570      	push	{r4, r5, r6, lr}
 8012248:	b088      	sub	sp, #32
 801224a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801224c:	2210      	movs	r2, #16
 801224e:	2100      	movs	r1, #0
{
 8012250:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
 8012252:	4668      	mov	r0, sp
 8012254:	f7ff fb15 	bl	8011882 <memset1>

    aes_encrypt( K, K, &ctx->rijndael );
 8012258:	4622      	mov	r2, r4
 801225a:	4669      	mov	r1, sp
 801225c:	4668      	mov	r0, sp
 801225e:	f7f3 ff65 	bl	800612c <aes_encrypt>

    if( K[0] & 0x80 )
 8012262:	f99d 3000 	ldrsb.w	r3, [sp]
 8012266:	2b00      	cmp	r3, #0
 8012268:	466a      	mov	r2, sp
    {
        LSHIFT( K, K );
 801226a:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
 801226e:	da41      	bge.n	80122f4 <AES_CMAC_Final+0xae>
        LSHIFT( K, K );
 8012270:	7813      	ldrb	r3, [r2, #0]
 8012272:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012276:	3101      	adds	r1, #1
 8012278:	005b      	lsls	r3, r3, #1
 801227a:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 801227e:	290f      	cmp	r1, #15
 8012280:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012284:	d1f4      	bne.n	8012270 <AES_CMAC_Final+0x2a>
 8012286:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801228a:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
 801228c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
    }
    else
        LSHIFT( K, K );
 8012290:	f88d 300f 	strb.w	r3, [sp, #15]

    if( ctx->M_n == 16 )
 8012294:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8012298:	2b10      	cmp	r3, #16
 801229a:	d13a      	bne.n	8012312 <AES_CMAC_Final+0xcc>
 801229c:	f204 1301 	addw	r3, r4, #257	; 0x101
 80122a0:	4669      	mov	r1, sp
 80122a2:	f204 1011 	addw	r0, r4, #273	; 0x111
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 80122a6:	781a      	ldrb	r2, [r3, #0]
 80122a8:	f811 6b01 	ldrb.w	r6, [r1], #1
 80122ac:	4072      	eors	r2, r6
 80122ae:	f803 2b01 	strb.w	r2, [r3], #1
 80122b2:	4298      	cmp	r0, r3
 80122b4:	d1f7      	bne.n	80122a6 <AES_CMAC_Final+0x60>
 80122b6:	f104 03f1 	add.w	r3, r4, #241	; 0xf1
 80122ba:	f204 1001 	addw	r0, r4, #257	; 0x101
 80122be:	4619      	mov	r1, r3
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 80122c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122c4:	7bde      	ldrb	r6, [r3, #15]
 80122c6:	4298      	cmp	r0, r3
 80122c8:	ea82 0206 	eor.w	r2, r2, r6
 80122cc:	f803 2c01 	strb.w	r2, [r3, #-1]
 80122d0:	d1f6      	bne.n	80122c0 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80122d2:	2210      	movs	r2, #16
 80122d4:	eb0d 0002 	add.w	r0, sp, r2
 80122d8:	f7ff fabf 	bl	801185a <memcpy1>
    aes_encrypt( in, digest, &ctx->rijndael );
 80122dc:	4622      	mov	r2, r4
 80122de:	4629      	mov	r1, r5
 80122e0:	a804      	add	r0, sp, #16
 80122e2:	f7f3 ff23 	bl	800612c <aes_encrypt>
    memset1( K, 0, sizeof K );
 80122e6:	2210      	movs	r2, #16
 80122e8:	2100      	movs	r1, #0
 80122ea:	4668      	mov	r0, sp
 80122ec:	f7ff fac9 	bl	8011882 <memset1>
}
 80122f0:	b008      	add	sp, #32
 80122f2:	bd70      	pop	{r4, r5, r6, pc}
        LSHIFT( K, K );
 80122f4:	7813      	ldrb	r3, [r2, #0]
 80122f6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80122fa:	3101      	adds	r1, #1
 80122fc:	005b      	lsls	r3, r3, #1
 80122fe:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8012302:	290f      	cmp	r1, #15
 8012304:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012308:	d1f4      	bne.n	80122f4 <AES_CMAC_Final+0xae>
 801230a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801230e:	005b      	lsls	r3, r3, #1
 8012310:	e7be      	b.n	8012290 <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
 8012312:	f99d 2000 	ldrsb.w	r2, [sp]
 8012316:	2a00      	cmp	r2, #0
 8012318:	4669      	mov	r1, sp
            LSHIFT( K, K );
 801231a:	f04f 0000 	mov.w	r0, #0
        if( K[0] & 0x80 )
 801231e:	da36      	bge.n	801238e <AES_CMAC_Final+0x148>
            LSHIFT( K, K );
 8012320:	780a      	ldrb	r2, [r1, #0]
 8012322:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8012326:	3001      	adds	r0, #1
 8012328:	0052      	lsls	r2, r2, #1
 801232a:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 801232e:	280f      	cmp	r0, #15
 8012330:	f801 2c01 	strb.w	r2, [r1, #-1]
 8012334:	d1f4      	bne.n	8012320 <AES_CMAC_Final+0xda>
 8012336:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801233a:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 801233c:	f082 0287 	eor.w	r2, r2, #135	; 0x87
            LSHIFT( K, K );
 8012340:	f88d 200f 	strb.w	r2, [sp, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 8012344:	18e2      	adds	r2, r4, r3
 8012346:	2180      	movs	r1, #128	; 0x80
 8012348:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 801234c:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8012350:	f503 7281 	add.w	r2, r3, #258	; 0x102
 8012354:	4422      	add	r2, r4
 8012356:	1b00      	subs	r0, r0, r4
            ctx->M_last[ctx->M_n] = 0;
 8012358:	2600      	movs	r6, #0
        while( ++ctx->M_n < 16 )
 801235a:	1881      	adds	r1, r0, r2
 801235c:	290f      	cmp	r1, #15
 801235e:	d925      	bls.n	80123ac <AES_CMAC_Final+0x166>
 8012360:	1c5a      	adds	r2, r3, #1
 8012362:	2a10      	cmp	r2, #16
 8012364:	f1c3 030f 	rsb	r3, r3, #15
 8012368:	bf88      	it	hi
 801236a:	2300      	movhi	r3, #0
 801236c:	4413      	add	r3, r2
 801236e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8012372:	4669      	mov	r1, sp
 8012374:	f204 1301 	addw	r3, r4, #257	; 0x101
 8012378:	f204 1011 	addw	r0, r4, #273	; 0x111
        XOR( K, ctx->M_last );
 801237c:	781a      	ldrb	r2, [r3, #0]
 801237e:	f811 6b01 	ldrb.w	r6, [r1], #1
 8012382:	4072      	eors	r2, r6
 8012384:	f803 2b01 	strb.w	r2, [r3], #1
 8012388:	4298      	cmp	r0, r3
 801238a:	d1f7      	bne.n	801237c <AES_CMAC_Final+0x136>
 801238c:	e793      	b.n	80122b6 <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 801238e:	780a      	ldrb	r2, [r1, #0]
 8012390:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8012394:	3001      	adds	r0, #1
 8012396:	0052      	lsls	r2, r2, #1
 8012398:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 801239c:	280f      	cmp	r0, #15
 801239e:	f801 2c01 	strb.w	r2, [r1, #-1]
 80123a2:	d1f4      	bne.n	801238e <AES_CMAC_Final+0x148>
 80123a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80123a8:	0052      	lsls	r2, r2, #1
 80123aa:	e7c9      	b.n	8012340 <AES_CMAC_Final+0xfa>
            ctx->M_last[ctx->M_n] = 0;
 80123ac:	f802 6b01 	strb.w	r6, [r2], #1
 80123b0:	e7d3      	b.n	801235a <AES_CMAC_Final+0x114>

080123b2 <SecureElementComputeAesCmac>:
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80123b2:	2b7e      	cmp	r3, #126	; 0x7e
{
 80123b4:	b410      	push	{r4}
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80123b6:	d802      	bhi.n	80123be <SecureElementComputeAesCmac+0xc>
}
 80123b8:	bc10      	pop	{r4}
    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80123ba:	f7f4 b81d 	b.w	80063f8 <ComputeCmac>
}
 80123be:	2003      	movs	r0, #3
 80123c0:	bc10      	pop	{r4}
 80123c2:	4770      	bx	lr

080123c4 <SecureElementVerifyAesCmac>:
{
 80123c4:	b530      	push	{r4, r5, lr}
 80123c6:	460d      	mov	r5, r1
 80123c8:	b085      	sub	sp, #20
 80123ca:	4614      	mov	r4, r2
    if( buffer == NULL )
 80123cc:	4601      	mov	r1, r0
 80123ce:	b168      	cbz	r0, 80123ec <SecureElementVerifyAesCmac+0x28>
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80123d0:	aa03      	add	r2, sp, #12
    uint32_t              compCmac = 0;
 80123d2:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80123d4:	9200      	str	r2, [sp, #0]
 80123d6:	462a      	mov	r2, r5
    uint32_t              compCmac = 0;
 80123d8:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80123da:	f7f4 f80d 	bl	80063f8 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80123de:	b918      	cbnz	r0, 80123e8 <SecureElementVerifyAesCmac+0x24>
        return SECURE_ELEMENT_ERROR_NPE;
 80123e0:	9803      	ldr	r0, [sp, #12]
 80123e2:	1b00      	subs	r0, r0, r4
 80123e4:	bf18      	it	ne
 80123e6:	2001      	movne	r0, #1
}
 80123e8:	b005      	add	sp, #20
 80123ea:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80123ec:	2002      	movs	r0, #2
 80123ee:	e7fb      	b.n	80123e8 <SecureElementVerifyAesCmac+0x24>

080123f0 <SecureElementDeriveAndStoreKey>:
{
 80123f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123f2:	4614      	mov	r4, r2
    if( input == NULL )
 80123f4:	b1a0      	cbz	r0, 8012420 <SecureElementDeriveAndStoreKey+0x30>
    uint8_t               key[16] = { 0 };
 80123f6:	2300      	movs	r3, #0
    if( targetKeyID == MC_KE_KEY )
 80123f8:	2a7f      	cmp	r2, #127	; 0x7f
    uint8_t               key[16] = { 0 };
 80123fa:	e9cd 3300 	strd	r3, r3, [sp]
 80123fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( targetKeyID == MC_KE_KEY )
 8012402:	d101      	bne.n	8012408 <SecureElementDeriveAndStoreKey+0x18>
        if( rootKeyID != MC_ROOT_KEY )
 8012404:	2908      	cmp	r1, #8
 8012406:	d10d      	bne.n	8012424 <SecureElementDeriveAndStoreKey+0x34>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8012408:	460a      	mov	r2, r1
 801240a:	466b      	mov	r3, sp
 801240c:	2110      	movs	r1, #16
 801240e:	f7f4 f8cd 	bl	80065ac <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012412:	b918      	cbnz	r0, 801241c <SecureElementDeriveAndStoreKey+0x2c>
    if( key == NULL )
 8012414:	4669      	mov	r1, sp
 8012416:	4620      	mov	r0, r4
 8012418:	f7f4 f906 	bl	8006628 <SecureElementSetKey.part.0>
}
 801241c:	b004      	add	sp, #16
 801241e:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012420:	2002      	movs	r0, #2
 8012422:	e7fb      	b.n	801241c <SecureElementDeriveAndStoreKey+0x2c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012424:	2003      	movs	r0, #3
 8012426:	e7f9      	b.n	801241c <SecureElementDeriveAndStoreKey+0x2c>

08012428 <SecureElementProcessJoinAccept>:
{
 8012428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 801242c:	461f      	mov	r7, r3
{
 801242e:	e9dd 5809 	ldrd	r5, r8, [sp, #36]	; 0x24
 8012432:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8012436:	2b00      	cmp	r3, #0
 8012438:	d038      	beq.n	80124ac <SecureElementProcessJoinAccept+0x84>
 801243a:	b3bd      	cbz	r5, 80124ac <SecureElementProcessJoinAccept+0x84>
 801243c:	f1b8 0f00 	cmp.w	r8, #0
 8012440:	d034      	beq.n	80124ac <SecureElementProcessJoinAccept+0x84>
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8012442:	2c21      	cmp	r4, #33	; 0x21
 8012444:	d834      	bhi.n	80124b0 <SecureElementProcessJoinAccept+0x88>
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8012446:	b2a6      	uxth	r6, r4
        encKeyID = J_S_ENC_KEY;
 8012448:	28ff      	cmp	r0, #255	; 0xff
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 801244a:	4619      	mov	r1, r3
 801244c:	4632      	mov	r2, r6
 801244e:	4628      	mov	r0, r5
        encKeyID = J_S_ENC_KEY;
 8012450:	bf0c      	ite	eq
 8012452:	f04f 0901 	moveq.w	r9, #1
 8012456:	f04f 0903 	movne.w	r9, #3
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 801245a:	f7ff f9fe 	bl	801185a <memcpy1>
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801245e:	1e71      	subs	r1, r6, #1
 8012460:	1c6b      	adds	r3, r5, #1
 8012462:	464a      	mov	r2, r9
 8012464:	b289      	uxth	r1, r1
 8012466:	1c78      	adds	r0, r7, #1
 8012468:	f7f4 f8a0 	bl	80065ac <SecureElementAesEncrypt>
 801246c:	bb10      	cbnz	r0, 80124b4 <SecureElementProcessJoinAccept+0x8c>
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801246e:	7aeb      	ldrb	r3, [r5, #11]
 8012470:	09db      	lsrs	r3, r3, #7
 8012472:	f888 3000 	strb.w	r3, [r8]
    if( *versionMinor == 0 )
 8012476:	b9fb      	cbnz	r3, 80124b8 <SecureElementProcessJoinAccept+0x90>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8012478:	192b      	adds	r3, r5, r4
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 801247a:	1f31      	subs	r1, r6, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 801247c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8012480:	f813 2c02 	ldrb.w	r2, [r3, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8012484:	0600      	lsls	r0, r0, #24
 8012486:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 801248a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 801248e:	4310      	orrs	r0, r2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8012490:	f813 2c03 	ldrb.w	r2, [r3, #-3]
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8012494:	b289      	uxth	r1, r1
 8012496:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 801249a:	2301      	movs	r3, #1
 801249c:	4628      	mov	r0, r5
 801249e:	f7ff ff91 	bl	80123c4 <SecureElementVerifyAesCmac>
        return SECURE_ELEMENT_ERROR_NPE;
 80124a2:	3800      	subs	r0, #0
 80124a4:	bf18      	it	ne
 80124a6:	2001      	movne	r0, #1
}
 80124a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80124ac:	2002      	movs	r0, #2
 80124ae:	e7fb      	b.n	80124a8 <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80124b0:	2005      	movs	r0, #5
 80124b2:	e7f9      	b.n	80124a8 <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 80124b4:	2007      	movs	r0, #7
 80124b6:	e7f7      	b.n	80124a8 <SecureElementProcessJoinAccept+0x80>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80124b8:	2004      	movs	r0, #4
 80124ba:	e7f5      	b.n	80124a8 <SecureElementProcessJoinAccept+0x80>

080124bc <SoftSeHalGetUniqueId>:

#include "soft-se-hal.h"

void SoftSeHalGetUniqueId( uint8_t *id )
{
    BoardGetUniqueId( id );
 80124bc:	f7ff b89d 	b.w	80115fa <BoardGetUniqueId>

080124c0 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80124c0:	4603      	mov	r3, r0
 80124c2:	b1d0      	cbz	r0, 80124fa <DetermineFrameType+0x3a>
 80124c4:	b1c9      	cbz	r1, 80124fa <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80124c6:	7b02      	ldrb	r2, [r0, #12]
 80124c8:	f012 020f 	ands.w	r2, r2, #15
 80124cc:	d005      	beq.n	80124da <DetermineFrameType+0x1a>
 80124ce:	f890 0020 	ldrb.w	r0, [r0, #32]
 80124d2:	b110      	cbz	r0, 80124da <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 80124d4:	2000      	movs	r0, #0
 80124d6:	7008      	strb	r0, [r1, #0]
 80124d8:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 80124da:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 80124de:	b910      	cbnz	r0, 80124e6 <DetermineFrameType+0x26>
        *fType = FRAME_TYPE_B;
 80124e0:	2301      	movs	r3, #1
        *fType = FRAME_TYPE_C;
 80124e2:	700b      	strb	r3, [r1, #0]
 80124e4:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80124e6:	b952      	cbnz	r2, 80124fe <DetermineFrameType+0x3e>
 80124e8:	f893 0020 	ldrb.w	r0, [r3, #32]
 80124ec:	b908      	cbnz	r0, 80124f2 <DetermineFrameType+0x32>
        *fType = FRAME_TYPE_C;
 80124ee:	2302      	movs	r3, #2
 80124f0:	e7f7      	b.n	80124e2 <DetermineFrameType+0x22>
        *fType = FRAME_TYPE_D;
 80124f2:	2303      	movs	r3, #3
 80124f4:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
 80124f6:	4610      	mov	r0, r2
        *fType = FRAME_TYPE_D;
 80124f8:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80124fa:	2003      	movs	r0, #3
 80124fc:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80124fe:	2017      	movs	r0, #23
}
 8012500:	4770      	bx	lr

08012502 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8012502:	4770      	bx	lr

08012504 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8012504:	4770      	bx	lr

08012506 <LoRaMacClassBSetPingSlotState>:
 8012506:	4770      	bx	lr

08012508 <LoRaMacClassBSetMulticastSlotState>:
 8012508:	4770      	bx	lr

0801250a <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801250a:	4770      	bx	lr

0801250c <LoRaMacClassBPingSlotTimerEvent>:
 801250c:	4770      	bx	lr

0801250e <LoRaMacClassBMulticastSlotTimerEvent>:
 801250e:	4770      	bx	lr

08012510 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8012510:	2000      	movs	r0, #0
 8012512:	4770      	bx	lr

08012514 <LoRaMacClassBIsBeaconExpected>:
 8012514:	2000      	movs	r0, #0
 8012516:	4770      	bx	lr

08012518 <LoRaMacClassBIsPingExpected>:
 8012518:	2000      	movs	r0, #0
 801251a:	4770      	bx	lr

0801251c <LoRaMacClassBIsMulticastExpected>:
 801251c:	2000      	movs	r0, #0
 801251e:	4770      	bx	lr

08012520 <LoRaMacClassBIsBeaconModeActive>:
 8012520:	2000      	movs	r0, #0
 8012522:	4770      	bx	lr

08012524 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8012524:	4770      	bx	lr

08012526 <LoRaMacClassBResumeBeaconing>:
 8012526:	4770      	bx	lr

08012528 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 8012528:	2002      	movs	r0, #2
 801252a:	4770      	bx	lr

0801252c <LoRaMacClassBPingSlotInfoAns>:
 801252c:	4770      	bx	lr

0801252e <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 801252e:	2000      	movs	r0, #0
 8012530:	4770      	bx	lr

08012532 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8012532:	4770      	bx	lr

08012534 <LoRaMacClassBDeviceTimeAns>:
 8012534:	4770      	bx	lr

08012536 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8012536:	2000      	movs	r0, #0
 8012538:	4770      	bx	lr

0801253a <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 801253a:	2000      	movs	r0, #0
 801253c:	4770      	bx	lr

0801253e <LoRaMacClassBStopRxSlots>:
 801253e:	4770      	bx	lr

08012540 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
 8012540:	4770      	bx	lr

08012542 <LoRaMacClassBProcess>:
 8012542:	4770      	bx	lr

08012544 <DeriveSessionKey10x>:
{
 8012544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            compBase[0] = 0x01;
 8012546:	2807      	cmp	r0, #7
    uint8_t compBase[16] = { 0 };
 8012548:	f04f 0400 	mov.w	r4, #0
 801254c:	e9cd 4402 	strd	r4, r4, [sp, #8]
            compBase[0] = 0x01;
 8012550:	bf0c      	ite	eq
 8012552:	2402      	moveq	r4, #2
 8012554:	2401      	movne	r4, #1
 8012556:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801255a:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801255e:	0a0c      	lsrs	r4, r1, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012560:	0c09      	lsrs	r1, r1, #16
 8012562:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012566:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801256a:	0a11      	lsrs	r1, r2, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801256c:	0c12      	lsrs	r2, r2, #16
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801256e:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012572:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012576:	f88d 3007 	strb.w	r3, [sp, #7]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801257a:	4602      	mov	r2, r0
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801257c:	0a1b      	lsrs	r3, r3, #8
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801257e:	2101      	movs	r1, #1
 8012580:	4668      	mov	r0, sp
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012582:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012586:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801258a:	f7ff ff31 	bl	80123f0 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801258e:	2800      	cmp	r0, #0
}
 8012590:	bf18      	it	ne
 8012592:	200e      	movne	r0, #14
 8012594:	b004      	add	sp, #16
 8012596:	bd10      	pop	{r4, pc}

08012598 <PayloadEncrypt>:
{
 8012598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801259c:	b088      	sub	sp, #32
 801259e:	4617      	mov	r7, r2
 80125a0:	460d      	mov	r5, r1
 80125a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 80125a4:	4606      	mov	r6, r0
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d053      	beq.n	8012652 <PayloadEncrypt+0xba>
    uint8_t sBlock[16] = { 0 };
 80125aa:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
 80125ac:	2101      	movs	r1, #1
    uint8_t aBlock[16] = { 0 };
 80125ae:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
 80125b2:	f88d 1010 	strb.w	r1, [sp, #16]
    aBlock[5] = dir;
 80125b6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80125ba:	f88d 1015 	strb.w	r1, [sp, #21]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80125be:	0a19      	lsrs	r1, r3, #8
    aBlock[6] = address & 0xFF;
 80125c0:	f88d 3016 	strb.w	r3, [sp, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80125c4:	f88d 1017 	strb.w	r1, [sp, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80125c8:	0c19      	lsrs	r1, r3, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80125ca:	0e1b      	lsrs	r3, r3, #24
 80125cc:	f88d 3019 	strb.w	r3, [sp, #25]
    uint8_t sBlock[16] = { 0 };
 80125d0:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80125d4:	0a13      	lsrs	r3, r2, #8
    uint8_t sBlock[16] = { 0 };
 80125d6:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[10] = frameCounter & 0xFF;
 80125da:	f88d 201a 	strb.w	r2, [sp, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80125de:	f88d 301b 	strb.w	r3, [sp, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80125e2:	0c13      	lsrs	r3, r2, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80125e4:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
 80125e6:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80125e8:	f88d 1018 	strb.w	r1, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80125ec:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80125f0:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
 80125f4:	b2e3      	uxtb	r3, r4
 80125f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80125fa:	2d00      	cmp	r5, #0
 80125fc:	fa5f f888 	uxtb.w	r8, r8
 8012600:	dc03      	bgt.n	801260a <PayloadEncrypt+0x72>
    return LORAMAC_CRYPTO_SUCCESS;
 8012602:	2000      	movs	r0, #0
}
 8012604:	b008      	add	sp, #32
 8012606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        aBlock[15] = ctr & 0xFF;
 801260a:	3301      	adds	r3, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801260c:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 801260e:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012612:	463a      	mov	r2, r7
 8012614:	466b      	mov	r3, sp
 8012616:	eb0d 0001 	add.w	r0, sp, r1
 801261a:	f7f3 ffc7 	bl	80065ac <SecureElementAesEncrypt>
 801261e:	4603      	mov	r3, r0
 8012620:	b9c8      	cbnz	r0, 8012656 <PayloadEncrypt+0xbe>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012622:	2d10      	cmp	r5, #16
 8012624:	46ac      	mov	ip, r5
 8012626:	bfa8      	it	ge
 8012628:	f04f 0c10 	movge.w	ip, #16
 801262c:	b2da      	uxtb	r2, r3
 801262e:	4562      	cmp	r2, ip
 8012630:	f103 0301 	add.w	r3, r3, #1
 8012634:	db03      	blt.n	801263e <PayloadEncrypt+0xa6>
        size -= 16;
 8012636:	3d10      	subs	r5, #16
 8012638:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 801263a:	3401      	adds	r4, #1
 801263c:	e7da      	b.n	80125f4 <PayloadEncrypt+0x5c>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801263e:	a908      	add	r1, sp, #32
 8012640:	eb08 0002 	add.w	r0, r8, r2
 8012644:	440a      	add	r2, r1
 8012646:	5c31      	ldrb	r1, [r6, r0]
 8012648:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 801264c:	404a      	eors	r2, r1
 801264e:	5432      	strb	r2, [r6, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012650:	e7ec      	b.n	801262c <PayloadEncrypt+0x94>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012652:	2009      	movs	r0, #9
 8012654:	e7d6      	b.n	8012604 <PayloadEncrypt+0x6c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012656:	200e      	movs	r0, #14
 8012658:	e7d4      	b.n	8012604 <PayloadEncrypt+0x6c>

0801265a <LoRaMacCryptoDeriveMcKEKey.part.0>:
LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 801265a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 801265c:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801265e:	227f      	movs	r2, #127	; 0x7f
 8012660:	2108      	movs	r1, #8
 8012662:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
 8012664:	e9cd 3300 	strd	r3, r3, [sp]
 8012668:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801266c:	f7ff fec0 	bl	80123f0 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012670:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8012672:	bf18      	it	ne
 8012674:	200e      	movne	r0, #14
 8012676:	b005      	add	sp, #20
 8012678:	f85d fb04 	ldr.w	pc, [sp], #4

0801267c <LoRaMacCryptoGetFCntDown>:
{
 801267c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t lastDown = 0;
 801267e:	2300      	movs	r3, #0
{
 8012680:	460d      	mov	r5, r1
    uint32_t lastDown = 0;
 8012682:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 8012684:	4614      	mov	r4, r2
 8012686:	b1d2      	cbz	r2, 80126be <LoRaMacCryptoGetFCntDown+0x42>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8012688:	a901      	add	r1, sp, #4
 801268a:	f7f6 f871 	bl	8008770 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801268e:	b918      	cbnz	r0, 8012698 <LoRaMacCryptoGetFCntDown+0x1c>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8012690:	9b01      	ldr	r3, [sp, #4]
 8012692:	1c5a      	adds	r2, r3, #1
 8012694:	d102      	bne.n	801269c <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
 8012696:	6025      	str	r5, [r4, #0]
}
 8012698:	b003      	add	sp, #12
 801269a:	bd30      	pop	{r4, r5, pc}
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801269c:	b29a      	uxth	r2, r3
 801269e:	1aaa      	subs	r2, r5, r2
        if( fCntDiff > 0 )
 80126a0:	2a00      	cmp	r2, #0
 80126a2:	dd02      	ble.n	80126aa <LoRaMacCryptoGetFCntDown+0x2e>
            *currentDown = lastDown + fCntDiff;
 80126a4:	4413      	add	r3, r2
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80126a6:	6023      	str	r3, [r4, #0]
 80126a8:	e7f6      	b.n	8012698 <LoRaMacCryptoGetFCntDown+0x1c>
        else if( fCntDiff == 0 )
 80126aa:	d102      	bne.n	80126b2 <LoRaMacCryptoGetFCntDown+0x36>
            *currentDown = lastDown;
 80126ac:	6023      	str	r3, [r4, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80126ae:	2007      	movs	r0, #7
 80126b0:	e7f2      	b.n	8012698 <LoRaMacCryptoGetFCntDown+0x1c>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80126b2:	0c1b      	lsrs	r3, r3, #16
 80126b4:	041b      	lsls	r3, r3, #16
 80126b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80126ba:	442b      	add	r3, r5
 80126bc:	e7f3      	b.n	80126a6 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80126be:	2009      	movs	r0, #9
 80126c0:	e7ea      	b.n	8012698 <LoRaMacCryptoGetFCntDown+0x1c>

080126c2 <LoRaMacCryptoDeriveMcRootKey>:
{
 80126c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
 80126c4:	b9b1      	cbnz	r1, 80126f4 <LoRaMacCryptoDeriveMcRootKey+0x32>
    if( versionMinor == 1 )
 80126c6:	2801      	cmp	r0, #1
    uint8_t compBase[16] = { 0 };
 80126c8:	e9cd 1100 	strd	r1, r1, [sp]
        compBase[0] = 0x20;
 80126cc:	bf08      	it	eq
 80126ce:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
 80126d0:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80126d4:	f04f 0208 	mov.w	r2, #8
 80126d8:	f04f 0100 	mov.w	r1, #0
 80126dc:	4668      	mov	r0, sp
        compBase[0] = 0x20;
 80126de:	bf08      	it	eq
 80126e0:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80126e4:	f7ff fe84 	bl	80123f0 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80126e8:	2800      	cmp	r0, #0
 80126ea:	bf18      	it	ne
 80126ec:	200e      	movne	r0, #14
}
 80126ee:	b005      	add	sp, #20
 80126f0:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80126f4:	200a      	movs	r0, #10
 80126f6:	e7fa      	b.n	80126ee <LoRaMacCryptoDeriveMcRootKey+0x2c>

080126f8 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80126f8:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80126fa:	4604      	mov	r4, r0
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d045      	beq.n	801278c <LoRaMacParserJoinAccept+0x94>
 8012700:	6801      	ldr	r1, [r0, #0]
 8012702:	2900      	cmp	r1, #0
 8012704:	d042      	beq.n	801278c <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012706:	f811 3b01 	ldrb.w	r3, [r1], #1
 801270a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801270c:	2203      	movs	r2, #3
 801270e:	3006      	adds	r0, #6
 8012710:	f7ff f8a3 	bl	801185a <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8012714:	4620      	mov	r0, r4
 8012716:	2203      	movs	r2, #3
 8012718:	f850 1b09 	ldr.w	r1, [r0], #9
 801271c:	3104      	adds	r1, #4
 801271e:	f7ff f89c 	bl	801185a <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012722:	6821      	ldr	r1, [r4, #0]
 8012724:	79cb      	ldrb	r3, [r1, #7]
 8012726:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012728:	7a0a      	ldrb	r2, [r1, #8]
 801272a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801272e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012730:	7a4a      	ldrb	r2, [r1, #9]
 8012732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012736:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012738:	7a8a      	ldrb	r2, [r1, #10]
 801273a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801273e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8012740:	7acb      	ldrb	r3, [r1, #11]
 8012742:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8012744:	7b0b      	ldrb	r3, [r1, #12]
 8012746:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8012748:	7923      	ldrb	r3, [r4, #4]
 801274a:	2b21      	cmp	r3, #33	; 0x21
 801274c:	d11a      	bne.n	8012784 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801274e:	2210      	movs	r2, #16
 8012750:	310d      	adds	r1, #13
 8012752:	f104 0012 	add.w	r0, r4, #18
 8012756:	f7ff f880 	bl	801185a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801275a:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801275c:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801275e:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012760:	5c8b      	ldrb	r3, [r1, r2]
 8012762:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012764:	5c08      	ldrb	r0, [r1, r0]
 8012766:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801276a:	1c90      	adds	r0, r2, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801276c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801276e:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012770:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012772:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012776:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012778:	5c8a      	ldrb	r2, [r1, r2]
 801277a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801277e:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8012780:	2000      	movs	r0, #0
}
 8012782:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8012784:	2b11      	cmp	r3, #17
 8012786:	dc03      	bgt.n	8012790 <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8012788:	220d      	movs	r2, #13
 801278a:	e7e7      	b.n	801275c <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
 801278c:	2002      	movs	r0, #2
 801278e:	e7f8      	b.n	8012782 <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
 8012790:	2001      	movs	r0, #1
 8012792:	e7f6      	b.n	8012782 <LoRaMacParserJoinAccept+0x8a>

08012794 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8012794:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012796:	4604      	mov	r4, r0
 8012798:	2800      	cmp	r0, #0
 801279a:	d054      	beq.n	8012846 <LoRaMacParserData+0xb2>
 801279c:	6801      	ldr	r1, [r0, #0]
 801279e:	2900      	cmp	r1, #0
 80127a0:	d051      	beq.n	8012846 <LoRaMacParserData+0xb2>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80127a2:	780b      	ldrb	r3, [r1, #0]
 80127a4:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80127a6:	784b      	ldrb	r3, [r1, #1]
 80127a8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80127aa:	788a      	ldrb	r2, [r1, #2]
 80127ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80127b0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80127b2:	78ca      	ldrb	r2, [r1, #3]
 80127b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80127b8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80127ba:	790a      	ldrb	r2, [r1, #4]
 80127bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80127c0:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80127c2:	794b      	ldrb	r3, [r1, #5]
 80127c4:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80127c6:	798b      	ldrb	r3, [r1, #6]
 80127c8:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80127ca:	79ca      	ldrb	r2, [r1, #7]
 80127cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80127d0:	7b02      	ldrb	r2, [r0, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80127d2:	81c3      	strh	r3, [r0, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80127d4:	f002 020f 	and.w	r2, r2, #15
 80127d8:	3108      	adds	r1, #8
 80127da:	3010      	adds	r0, #16
 80127dc:	f7ff f83d 	bl	801185a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80127e0:	7b23      	ldrb	r3, [r4, #12]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80127e2:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80127e4:	f003 030f 	and.w	r3, r3, #15
    macMsg->FPort = 0;
 80127e8:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 80127ec:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80127f0:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80127f2:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80127f6:	1a11      	subs	r1, r2, r0
 80127f8:	2904      	cmp	r1, #4
 80127fa:	dd0d      	ble.n	8012818 <LoRaMacParserData+0x84>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80127fc:	6821      	ldr	r1, [r4, #0]
 80127fe:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012800:	3a04      	subs	r2, #4
 8012802:	1ad2      	subs	r2, r2, r3
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012804:	5c08      	ldrb	r0, [r1, r0]
 8012806:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801280a:	b2d2      	uxtb	r2, r2
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801280c:	6a60      	ldr	r0, [r4, #36]	; 0x24
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801280e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012812:	4419      	add	r1, r3
 8012814:	f7ff f821 	bl	801185a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012818:	7923      	ldrb	r3, [r4, #4]
 801281a:	6822      	ldr	r2, [r4, #0]
 801281c:	441a      	add	r2, r3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 801281e:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012820:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8012824:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012826:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801282a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801282e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012830:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012834:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8012838:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801283a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 801283e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012842:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8012844:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
 8012846:	2002      	movs	r0, #2
 8012848:	e7fc      	b.n	8012844 <LoRaMacParserData+0xb0>

0801284a <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801284a:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801284c:	4604      	mov	r4, r0
 801284e:	b360      	cbz	r0, 80128aa <LoRaMacSerializerJoinRequest+0x60>
 8012850:	6803      	ldr	r3, [r0, #0]
 8012852:	b353      	cbz	r3, 80128aa <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012854:	7902      	ldrb	r2, [r0, #4]
 8012856:	2a16      	cmp	r2, #22
 8012858:	d929      	bls.n	80128ae <LoRaMacSerializerJoinRequest+0x64>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801285a:	7942      	ldrb	r2, [r0, #5]
 801285c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801285e:	4601      	mov	r1, r0
 8012860:	2208      	movs	r2, #8
 8012862:	f851 0b06 	ldr.w	r0, [r1], #6
 8012866:	3001      	adds	r0, #1
 8012868:	f7ff f801 	bl	801186e <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801286c:	4621      	mov	r1, r4
 801286e:	2208      	movs	r2, #8
 8012870:	f851 0b0e 	ldr.w	r0, [r1], #14
 8012874:	3009      	adds	r0, #9
 8012876:	f7fe fffa 	bl	801186e <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801287a:	6823      	ldr	r3, [r4, #0]
 801287c:	8ae2      	ldrh	r2, [r4, #22]
 801287e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8012880:	8ae3      	ldrh	r3, [r4, #22]
 8012882:	6822      	ldr	r2, [r4, #0]
 8012884:	0a1b      	lsrs	r3, r3, #8
 8012886:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	69a2      	ldr	r2, [r4, #24]
 801288c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801288e:	69a3      	ldr	r3, [r4, #24]
 8012890:	6822      	ldr	r2, [r4, #0]
 8012892:	0a1b      	lsrs	r3, r3, #8
 8012894:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012896:	6823      	ldr	r3, [r4, #0]
 8012898:	8b62      	ldrh	r2, [r4, #26]
 801289a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801289c:	6823      	ldr	r3, [r4, #0]
 801289e:	7ee2      	ldrb	r2, [r4, #27]
 80128a0:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 80128a2:	2317      	movs	r3, #23
 80128a4:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80128a6:	2000      	movs	r0, #0
}
 80128a8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80128aa:	2001      	movs	r0, #1
 80128ac:	e7fc      	b.n	80128a8 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80128ae:	2002      	movs	r0, #2
 80128b0:	e7fa      	b.n	80128a8 <LoRaMacSerializerJoinRequest+0x5e>

080128b2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80128b2:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80128b4:	4604      	mov	r4, r0
 80128b6:	2800      	cmp	r0, #0
 80128b8:	d063      	beq.n	8012982 <LoRaMacSerializerData+0xd0>
 80128ba:	6801      	ldr	r1, [r0, #0]
 80128bc:	2900      	cmp	r1, #0
 80128be:	d060      	beq.n	8012982 <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80128c0:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80128c2:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80128c6:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
 80128ca:	2a00      	cmp	r2, #0
 80128cc:	d157      	bne.n	801297e <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80128ce:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
 80128d0:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80128d2:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
 80128d4:	4413      	add	r3, r2
 80128d6:	4298      	cmp	r0, r3
 80128d8:	d355      	bcc.n	8012986 <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80128da:	7963      	ldrb	r3, [r4, #5]
 80128dc:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80128de:	6823      	ldr	r3, [r4, #0]
 80128e0:	68a2      	ldr	r2, [r4, #8]
 80128e2:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80128e4:	68a3      	ldr	r3, [r4, #8]
 80128e6:	6822      	ldr	r2, [r4, #0]
 80128e8:	0a1b      	lsrs	r3, r3, #8
 80128ea:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80128ec:	6823      	ldr	r3, [r4, #0]
 80128ee:	8962      	ldrh	r2, [r4, #10]
 80128f0:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80128f2:	6823      	ldr	r3, [r4, #0]
 80128f4:	7ae2      	ldrb	r2, [r4, #11]
 80128f6:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80128f8:	6823      	ldr	r3, [r4, #0]
 80128fa:	7b22      	ldrb	r2, [r4, #12]
 80128fc:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80128fe:	6823      	ldr	r3, [r4, #0]
 8012900:	89e2      	ldrh	r2, [r4, #14]
 8012902:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012904:	89e3      	ldrh	r3, [r4, #14]
 8012906:	6822      	ldr	r2, [r4, #0]
 8012908:	0a1b      	lsrs	r3, r3, #8

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801290a:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801290c:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801290e:	7b22      	ldrb	r2, [r4, #12]
 8012910:	f851 0b10 	ldr.w	r0, [r1], #16
 8012914:	f002 020f 	and.w	r2, r2, #15
 8012918:	3008      	adds	r0, #8
 801291a:	f7fe ff9e 	bl	801185a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801291e:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8012920:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012924:	f003 030f 	and.w	r3, r3, #15
 8012928:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
 801292c:	b12a      	cbz	r2, 801293a <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801292e:	6822      	ldr	r2, [r4, #0]
 8012930:	f894 1020 	ldrb.w	r1, [r4, #32]
 8012934:	5551      	strb	r1, [r2, r5]
 8012936:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801293a:	6820      	ldr	r0, [r4, #0]
 801293c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8012940:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012942:	4428      	add	r0, r5
 8012944:	f7fe ff89 	bl	801185a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012948:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801294c:	6822      	ldr	r2, [r4, #0]
 801294e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012950:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012952:	54d1      	strb	r1, [r2, r3]
 8012954:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012956:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012958:	6820      	ldr	r0, [r4, #0]
 801295a:	b292      	uxth	r2, r2
 801295c:	0a09      	lsrs	r1, r1, #8
 801295e:	5481      	strb	r1, [r0, r2]
 8012960:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012962:	6821      	ldr	r1, [r4, #0]
 8012964:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8012966:	b292      	uxth	r2, r2
 8012968:	5488      	strb	r0, [r1, r2]
 801296a:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801296c:	6821      	ldr	r1, [r4, #0]
 801296e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8012972:	b292      	uxth	r2, r2
 8012974:	3304      	adds	r3, #4
 8012976:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 8012978:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801297a:	2000      	movs	r0, #0
}
 801297c:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801297e:	3309      	adds	r3, #9
 8012980:	e7a6      	b.n	80128d0 <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012982:	2001      	movs	r0, #1
 8012984:	e7fa      	b.n	801297c <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012986:	2002      	movs	r0, #2
 8012988:	e7f8      	b.n	801297c <LoRaMacSerializerData+0xca>

0801298a <RegionIsActive>:
}
 801298a:	f1a0 0308 	sub.w	r3, r0, #8
 801298e:	4258      	negs	r0, r3
 8012990:	4158      	adcs	r0, r3
 8012992:	4770      	bx	lr

08012994 <RegionGetPhyParam>:
    switch( region )
 8012994:	2808      	cmp	r0, #8
{
 8012996:	b082      	sub	sp, #8
    switch( region )
 8012998:	d103      	bne.n	80129a2 <RegionGetPhyParam+0xe>
        US915_GET_PHY_PARAM( );
 801299a:	4608      	mov	r0, r1
}
 801299c:	b002      	add	sp, #8
        US915_GET_PHY_PARAM( );
 801299e:	f7f6 baa9 	b.w	8008ef4 <RegionUS915GetPhyParam>
}
 80129a2:	2000      	movs	r0, #0
 80129a4:	b002      	add	sp, #8
 80129a6:	4770      	bx	lr

080129a8 <RegionSetBandTxDone>:
    switch( region )
 80129a8:	2808      	cmp	r0, #8
 80129aa:	d102      	bne.n	80129b2 <RegionSetBandTxDone+0xa>
        US915_SET_BAND_TX_DONE( );
 80129ac:	4608      	mov	r0, r1
 80129ae:	f7f6 bb3d 	b.w	800902c <RegionUS915SetBandTxDone>
}
 80129b2:	4770      	bx	lr

080129b4 <RegionInitDefaults>:
    switch( region )
 80129b4:	2808      	cmp	r0, #8
 80129b6:	d102      	bne.n	80129be <RegionInitDefaults+0xa>
        US915_INIT_DEFAULTS( );
 80129b8:	4608      	mov	r0, r1
 80129ba:	f7f6 bb53 	b.w	8009064 <RegionUS915InitDefaults>
}
 80129be:	4770      	bx	lr

080129c0 <RegionApplyCFList>:
    switch( region )
 80129c0:	2808      	cmp	r0, #8
 80129c2:	d102      	bne.n	80129ca <RegionApplyCFList+0xa>
        US915_APPLY_CF_LIST( );
 80129c4:	4608      	mov	r0, r1
 80129c6:	f7f6 bbd7 	b.w	8009178 <RegionUS915ApplyCFList>
}
 80129ca:	4770      	bx	lr

080129cc <RegionComputeRxWindowParameters>:
{
 80129cc:	b410      	push	{r4}
 80129ce:	4604      	mov	r4, r0
    switch( region )
 80129d0:	2c08      	cmp	r4, #8
{
 80129d2:	4608      	mov	r0, r1
 80129d4:	4611      	mov	r1, r2
 80129d6:	461a      	mov	r2, r3
 80129d8:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 80129da:	d102      	bne.n	80129e2 <RegionComputeRxWindowParameters+0x16>
}
 80129dc:	bc10      	pop	{r4}
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80129de:	f7f6 bbf9 	b.w	80091d4 <RegionUS915ComputeRxWindowParameters>
}
 80129e2:	bc10      	pop	{r4}
 80129e4:	4770      	bx	lr

080129e6 <RegionRxConfig>:
{
 80129e6:	4603      	mov	r3, r0
    switch( region )
 80129e8:	2b08      	cmp	r3, #8
{
 80129ea:	4608      	mov	r0, r1
 80129ec:	4611      	mov	r1, r2
    switch( region )
 80129ee:	d101      	bne.n	80129f4 <RegionRxConfig+0xe>
        US915_RX_CONFIG( );
 80129f0:	f7f6 bc1c 	b.w	800922c <RegionUS915RxConfig>
}
 80129f4:	2000      	movs	r0, #0
 80129f6:	4770      	bx	lr

080129f8 <RegionTxConfig>:
{
 80129f8:	b410      	push	{r4}
 80129fa:	4604      	mov	r4, r0
    switch( region )
 80129fc:	2c08      	cmp	r4, #8
{
 80129fe:	4608      	mov	r0, r1
 8012a00:	4611      	mov	r1, r2
 8012a02:	461a      	mov	r2, r3
    switch( region )
 8012a04:	d102      	bne.n	8012a0c <RegionTxConfig+0x14>
}
 8012a06:	bc10      	pop	{r4}
        US915_TX_CONFIG( );
 8012a08:	f7f6 bc5c 	b.w	80092c4 <RegionUS915TxConfig>
}
 8012a0c:	2000      	movs	r0, #0
 8012a0e:	bc10      	pop	{r4}
 8012a10:	4770      	bx	lr

08012a12 <RegionLinkAdrReq>:
{
 8012a12:	b430      	push	{r4, r5}
 8012a14:	4605      	mov	r5, r0
    switch( region )
 8012a16:	2d08      	cmp	r5, #8
{
 8012a18:	4608      	mov	r0, r1
 8012a1a:	4611      	mov	r1, r2
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
 8012a22:	d103      	bne.n	8012a2c <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 8012a24:	9402      	str	r4, [sp, #8]
}
 8012a26:	bc30      	pop	{r4, r5}
        US915_LINK_ADR_REQ( );
 8012a28:	f7f6 bcca 	b.w	80093c0 <RegionUS915LinkAdrReq>
}
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	bc30      	pop	{r4, r5}
 8012a30:	4770      	bx	lr

08012a32 <RegionRxParamSetupReq>:
    switch( region )
 8012a32:	2808      	cmp	r0, #8
 8012a34:	d102      	bne.n	8012a3c <RegionRxParamSetupReq+0xa>
        US915_RX_PARAM_SETUP_REQ( );
 8012a36:	4608      	mov	r0, r1
 8012a38:	f000 ba7d 	b.w	8012f36 <RegionUS915RxParamSetupReq>
}
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	4770      	bx	lr

08012a40 <RegionNewChannelReq>:
    switch( region )
 8012a40:	2808      	cmp	r0, #8
 8012a42:	d102      	bne.n	8012a4a <RegionNewChannelReq+0xa>
        US915_NEW_CHANNEL_REQ( );
 8012a44:	4608      	mov	r0, r1
 8012a46:	f000 baa2 	b.w	8012f8e <RegionUS915NewChannelReq>
}
 8012a4a:	2000      	movs	r0, #0
 8012a4c:	4770      	bx	lr

08012a4e <RegionTxParamSetupReq>:
    switch( region )
 8012a4e:	2808      	cmp	r0, #8
 8012a50:	d102      	bne.n	8012a58 <RegionTxParamSetupReq+0xa>
        US915_TX_PARAM_SETUP_REQ( );
 8012a52:	4608      	mov	r0, r1
 8012a54:	f000 ba9e 	b.w	8012f94 <RegionUS915TxParamSetupReq>
}
 8012a58:	2000      	movs	r0, #0
 8012a5a:	4770      	bx	lr

08012a5c <RegionDlChannelReq>:
    switch( region )
 8012a5c:	2808      	cmp	r0, #8
 8012a5e:	d102      	bne.n	8012a66 <RegionDlChannelReq+0xa>
        US915_DL_CHANNEL_REQ( );
 8012a60:	4608      	mov	r0, r1
 8012a62:	f000 ba9a 	b.w	8012f9a <RegionUS915DlChannelReq>
}
 8012a66:	2000      	movs	r0, #0
 8012a68:	4770      	bx	lr

08012a6a <RegionNextChannel>:
{
 8012a6a:	b410      	push	{r4}
 8012a6c:	4604      	mov	r4, r0
    switch( region )
 8012a6e:	2c08      	cmp	r4, #8
{
 8012a70:	4608      	mov	r0, r1
 8012a72:	4611      	mov	r1, r2
 8012a74:	461a      	mov	r2, r3
 8012a76:	9b01      	ldr	r3, [sp, #4]
    switch( region )
 8012a78:	d102      	bne.n	8012a80 <RegionNextChannel+0x16>
}
 8012a7a:	bc10      	pop	{r4}
        US915_NEXT_CHANNEL( );
 8012a7c:	f7f6 bdb0 	b.w	80095e0 <RegionUS915NextChannel>
}
 8012a80:	2009      	movs	r0, #9
 8012a82:	bc10      	pop	{r4}
 8012a84:	4770      	bx	lr

08012a86 <RegionApplyDrOffset>:
{
 8012a86:	b410      	push	{r4}
 8012a88:	4604      	mov	r4, r0
    switch( region )
 8012a8a:	2c08      	cmp	r4, #8
{
 8012a8c:	4608      	mov	r0, r1
 8012a8e:	4611      	mov	r1, r2
 8012a90:	461a      	mov	r2, r3
    switch( region )
 8012a92:	d102      	bne.n	8012a9a <RegionApplyDrOffset+0x14>
}
 8012a94:	bc10      	pop	{r4}
        US915_APPLY_DR_OFFSET( );
 8012a96:	f7f6 be3f 	b.w	8009718 <RegionUS915ApplyDrOffset>
}
 8012a9a:	b2c8      	uxtb	r0, r1
 8012a9c:	bc10      	pop	{r4}
 8012a9e:	4770      	bx	lr

08012aa0 <RegionCommonChanVerifyDr>:
{
 8012aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ( value >= min ) && ( value <= max ) )
 8012aa2:	429a      	cmp	r2, r3
{
 8012aa4:	9e06      	ldr	r6, [sp, #24]
    if( ( value >= min ) && ( value <= max ) )
 8012aa6:	db03      	blt.n	8012ab0 <RegionCommonChanVerifyDr+0x10>
 8012aa8:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	dd25      	ble.n	8012afc <RegionCommonChanVerifyDr+0x5c>
        return false;
 8012ab0:	2000      	movs	r0, #0
}
 8012ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8012ab8:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
 8012abc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012ac0:	2700      	movs	r7, #0
 8012ac2:	fa4e f507 	asr.w	r5, lr, r7
 8012ac6:	07ed      	lsls	r5, r5, #31
 8012ac8:	d50c      	bpl.n	8012ae4 <RegionCommonChanVerifyDr+0x44>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8012aca:	f893 c008 	ldrb.w	ip, [r3, #8]
 8012ace:	f34c 1503 	sbfx	r5, ip, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 8012ad2:	f00c 0c0f 	and.w	ip, ip, #15
 8012ad6:	4562      	cmp	r2, ip
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8012ad8:	b26d      	sxtb	r5, r5
    if( ( value >= min ) && ( value <= max ) )
 8012ada:	db03      	blt.n	8012ae4 <RegionCommonChanVerifyDr+0x44>
 8012adc:	f005 050f 	and.w	r5, r5, #15
 8012ae0:	42aa      	cmp	r2, r5
 8012ae2:	dd0d      	ble.n	8012b00 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8012ae4:	3701      	adds	r7, #1
 8012ae6:	2f10      	cmp	r7, #16
 8012ae8:	f103 030c 	add.w	r3, r3, #12
 8012aec:	d1e9      	bne.n	8012ac2 <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8012aee:	3401      	adds	r4, #1
 8012af0:	b2e4      	uxtb	r4, r4
 8012af2:	0123      	lsls	r3, r4, #4
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	4298      	cmp	r0, r3
 8012af8:	d8dc      	bhi.n	8012ab4 <RegionCommonChanVerifyDr+0x14>
 8012afa:	e7d9      	b.n	8012ab0 <RegionCommonChanVerifyDr+0x10>
 8012afc:	2400      	movs	r4, #0
 8012afe:	e7f8      	b.n	8012af2 <RegionCommonChanVerifyDr+0x52>
                    return true;
 8012b00:	2001      	movs	r0, #1
 8012b02:	e7d6      	b.n	8012ab2 <RegionCommonChanVerifyDr+0x12>

08012b04 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
 8012b04:	4288      	cmp	r0, r1
 8012b06:	db04      	blt.n	8012b12 <RegionCommonValueInRange+0xe>
        return 1;
 8012b08:	4290      	cmp	r0, r2
 8012b0a:	bfcc      	ite	gt
 8012b0c:	2000      	movgt	r0, #0
 8012b0e:	2001      	movle	r0, #1
 8012b10:	4770      	bx	lr
    return 0;
 8012b12:	2000      	movs	r0, #0
}
 8012b14:	4770      	bx	lr

08012b16 <RegionCommonChanDisable>:
{
 8012b16:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8012b18:	0914      	lsrs	r4, r2, #4
 8012b1a:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
{
 8012b1e:	4603      	mov	r3, r0
    uint8_t index = id / 16;
 8012b20:	ea4f 1011 	mov.w	r0, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8012b24:	d30e      	bcc.n	8012b44 <RegionCommonChanDisable+0x2e>
 8012b26:	4291      	cmp	r1, r2
 8012b28:	d20c      	bcs.n	8012b44 <RegionCommonChanDisable+0x2e>
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8012b2a:	b202      	sxth	r2, r0
 8012b2c:	f001 010f 	and.w	r1, r1, #15
 8012b30:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8012b34:	2001      	movs	r0, #1
 8012b36:	fa00 f101 	lsl.w	r1, r0, r1
 8012b3a:	ea24 0101 	bic.w	r1, r4, r1
 8012b3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8012b42:	bd10      	pop	{r4, pc}
        return false;
 8012b44:	2000      	movs	r0, #0
 8012b46:	e7fc      	b.n	8012b42 <RegionCommonChanDisable+0x2c>

08012b48 <RegionCommonCountChannels>:
{
 8012b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( channelsMask == NULL )
 8012b4a:	b128      	cbz	r0, 8012b58 <RegionCommonCountChannels+0x10>
 8012b4c:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012b50:	2601      	movs	r6, #1
    uint8_t nbChannels = 0;
 8012b52:	2000      	movs	r0, #0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012b54:	4291      	cmp	r1, r2
 8012b56:	d300      	bcc.n	8012b5a <RegionCommonCountChannels+0x12>
}
 8012b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 8012b5a:	2400      	movs	r4, #0
 8012b5c:	f835 7b02 	ldrh.w	r7, [r5], #2
    uint8_t nbActiveBits = 0;
 8012b60:	4623      	mov	r3, r4
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012b62:	fa06 fc04 	lsl.w	ip, r6, r4
 8012b66:	ea3c 0c07 	bics.w	ip, ip, r7
            nbActiveBits++;
 8012b6a:	bf08      	it	eq
 8012b6c:	3301      	addeq	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 8012b6e:	f104 0401 	add.w	r4, r4, #1
            nbActiveBits++;
 8012b72:	bf08      	it	eq
 8012b74:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8012b76:	2c10      	cmp	r4, #16
 8012b78:	d1f3      	bne.n	8012b62 <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
 8012b7a:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012b7c:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 8012b7e:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8012b80:	b2c9      	uxtb	r1, r1
 8012b82:	e7e7      	b.n	8012b54 <RegionCommonCountChannels+0xc>

08012b84 <RegionCommonChanMaskCopy>:
{
 8012b84:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8012b86:	b100      	cbz	r0, 8012b8a <RegionCommonChanMaskCopy+0x6>
 8012b88:	b949      	cbnz	r1, 8012b9e <RegionCommonChanMaskCopy+0x1a>
}
 8012b8a:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 8012b8c:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8012b90:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8012b94:	3301      	adds	r3, #1
 8012b96:	b2dc      	uxtb	r4, r3
 8012b98:	42a2      	cmp	r2, r4
 8012b9a:	d8f7      	bhi.n	8012b8c <RegionCommonChanMaskCopy+0x8>
 8012b9c:	e7f5      	b.n	8012b8a <RegionCommonChanMaskCopy+0x6>
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	e7f9      	b.n	8012b96 <RegionCommonChanMaskCopy+0x12>

08012ba2 <RegionCommonSetBandTxDone>:
{
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	b530      	push	{r4, r5, lr}
 8012ba6:	8804      	ldrh	r4, [r0, #0]
 8012ba8:	9304      	str	r3, [sp, #16]
    if( joined == false )
 8012baa:	b96a      	cbnz	r2, 8012bc8 <RegionCommonSetBandTxDone+0x26>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8012bac:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8012bb0:	d318      	bcc.n	8012be4 <RegionCommonSetBandTxDone+0x42>
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8012bb2:	f649 25af 	movw	r5, #39599	; 0x9aaf
 8012bb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8012bba:	42ab      	cmp	r3, r5
 8012bbc:	bf98      	it	ls
 8012bbe:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8012bc2:	4294      	cmp	r4, r2
 8012bc4:	bf38      	it	cc
 8012bc6:	4614      	movcc	r4, r2
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8012bc8:	2c01      	cmp	r4, #1
 8012bca:	68c3      	ldr	r3, [r0, #12]
 8012bcc:	bf38      	it	cc
 8012bce:	2401      	movcc	r4, #1
 8012bd0:	434c      	muls	r4, r1
 8012bd2:	42a3      	cmp	r3, r4
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8012bd4:	bf8c      	ite	hi
 8012bd6:	1b1c      	subhi	r4, r3, r4
        band->TimeCredits = 0;
 8012bd8:	2400      	movls	r4, #0
 8012bda:	60c4      	str	r4, [r0, #12]
}
 8012bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012be0:	b002      	add	sp, #8
 8012be2:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8012be4:	2264      	movs	r2, #100	; 0x64
 8012be6:	e7ec      	b.n	8012bc2 <RegionCommonSetBandTxDone+0x20>

08012be8 <RegionCommonParseLinkAdrReq>:
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8012be8:	7803      	ldrb	r3, [r0, #0]
 8012bea:	2b03      	cmp	r3, #3
 8012bec:	d114      	bne.n	8012c18 <RegionCommonParseLinkAdrReq+0x30>
        linkAdrParams->Datarate = payload[1];
 8012bee:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8012bf0:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8012bf4:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8012bf6:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8012bf8:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8012bfa:	7883      	ldrb	r3, [r0, #2]
 8012bfc:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8012bfe:	78c2      	ldrb	r2, [r0, #3]
 8012c00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012c04:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8012c06:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8012c08:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
 8012c0c:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8012c10:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8012c12:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8012c14:	2005      	movs	r0, #5
 8012c16:	4770      	bx	lr
    uint8_t retIndex = 0;
 8012c18:	2000      	movs	r0, #0
}
 8012c1a:	4770      	bx	lr

08012c1c <RegionCommonLinkAdrReqVerifyParams>:
{
 8012c1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c20:	4698      	mov	r8, r3
    if( verifyParams->AdrEnabled == false )
 8012c22:	7943      	ldrb	r3, [r0, #5]
    uint8_t status = verifyParams->Status;
 8012c24:	7905      	ldrb	r5, [r0, #4]
    int8_t txPower = verifyParams->TxPower;
 8012c26:	f990 7007 	ldrsb.w	r7, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8012c2a:	7a06      	ldrb	r6, [r0, #8]
{
 8012c2c:	4691      	mov	r9, r2
 8012c2e:	4604      	mov	r4, r0
    int8_t datarate = verifyParams->Datarate;
 8012c30:	f990 2006 	ldrsb.w	r2, [r0, #6]
{
 8012c34:	468a      	mov	sl, r1
    if( verifyParams->AdrEnabled == false )
 8012c36:	b17b      	cbz	r3, 8012c58 <RegionCommonLinkAdrReqVerifyParams+0x3c>
    int8_t nbRepetitions = verifyParams->NbRep;
 8012c38:	b276      	sxtb	r6, r6
    if( status != 0 )
 8012c3a:	b375      	cbz	r5, 8012c9a <RegionCommonLinkAdrReqVerifyParams+0x7e>
        if( datarate == 0x0F )
 8012c3c:	2a0f      	cmp	r2, #15
 8012c3e:	d112      	bne.n	8012c66 <RegionCommonLinkAdrReqVerifyParams+0x4a>
            datarate =  verifyParams->CurrentDatarate;
 8012c40:	f994 2009 	ldrsb.w	r2, [r4, #9]
        if( txPower == 0x0F )
 8012c44:	2f0f      	cmp	r7, #15
 8012c46:	d11e      	bne.n	8012c86 <RegionCommonLinkAdrReqVerifyParams+0x6a>
            txPower =  verifyParams->CurrentTxPower;
 8012c48:	f994 700a 	ldrsb.w	r7, [r4, #10]
    if( status == 0x07 )
 8012c4c:	2d07      	cmp	r5, #7
 8012c4e:	d124      	bne.n	8012c9a <RegionCommonLinkAdrReqVerifyParams+0x7e>
            nbRepetitions = 1;
 8012c50:	2e00      	cmp	r6, #0
 8012c52:	bf08      	it	eq
 8012c54:	2601      	moveq	r6, #1
 8012c56:	e020      	b.n	8012c9a <RegionCommonLinkAdrReqVerifyParams+0x7e>
        nbRepetitions = verifyParams->CurrentNbRep;
 8012c58:	f990 600b 	ldrsb.w	r6, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8012c5c:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8012c60:	f990 700a 	ldrsb.w	r7, [r0, #10]
 8012c64:	e7e9      	b.n	8012c3a <RegionCommonLinkAdrReqVerifyParams+0x1e>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8012c66:	69a3      	ldr	r3, [r4, #24]
 8012c68:	9301      	str	r3, [sp, #4]
 8012c6a:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8012c6e:	9300      	str	r3, [sp, #0]
 8012c70:	6921      	ldr	r1, [r4, #16]
 8012c72:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8012c76:	7b20      	ldrb	r0, [r4, #12]
 8012c78:	f7ff ff12 	bl	8012aa0 <RegionCommonChanVerifyDr>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	d1e1      	bne.n	8012c44 <RegionCommonLinkAdrReqVerifyParams+0x28>
            status &= 0xFD; // Datarate KO
 8012c80:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8012c84:	e7de      	b.n	8012c44 <RegionCommonLinkAdrReqVerifyParams+0x28>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8012c86:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8012c8a:	f994 101c 	ldrsb.w	r1, [r4, #28]
    if( ( value >= min ) && ( value <= max ) )
 8012c8e:	42bb      	cmp	r3, r7
 8012c90:	dc0d      	bgt.n	8012cae <RegionCommonLinkAdrReqVerifyParams+0x92>
 8012c92:	42b9      	cmp	r1, r7
 8012c94:	dada      	bge.n	8012c4c <RegionCommonLinkAdrReqVerifyParams+0x30>
                status &= 0xFB; // TxPower KO
 8012c96:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
}
 8012c9a:	4628      	mov	r0, r5
    *dr = datarate;
 8012c9c:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
 8012ca0:	f889 7000 	strb.w	r7, [r9]
    *nbRep = nbRepetitions;
 8012ca4:	f888 6000 	strb.w	r6, [r8]
}
 8012ca8:	b002      	add	sp, #8
 8012caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cae:	461f      	mov	r7, r3
 8012cb0:	e7cc      	b.n	8012c4c <RegionCommonLinkAdrReqVerifyParams+0x30>

08012cb2 <RegionCommonComputeRxWindowParameters>:
{
 8012cb2:	b530      	push	{r4, r5, lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8012cb4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8012cb8:	1f0c      	subs	r4, r1, #4
 8012cba:	436a      	muls	r2, r5
 8012cbc:	fb00 2204 	mla	r2, r0, r4, r2
 8012cc0:	0052      	lsls	r2, r2, #1
 8012cc2:	bf1e      	ittt	ne
 8012cc4:	f100 34ff 	addne.w	r4, r0, #4294967295	; 0xffffffff
 8012cc8:	1912      	addne	r2, r2, r4
 8012cca:	fbb2 f2f0 	udivne	r2, r2, r0
 8012cce:	428a      	cmp	r2, r1
 8012cd0:	bf38      	it	cc
 8012cd2:	460a      	movcc	r2, r1
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8012cd4:	0084      	lsls	r4, r0, #2
 8012cd6:	4350      	muls	r0, r2
 8012cd8:	bf18      	it	ne
 8012cda:	3001      	addne	r0, #1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8012cdc:	9903      	ldr	r1, [sp, #12]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8012cde:	bf18      	it	ne
 8012ce0:	0840      	lsrne	r0, r0, #1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8012ce2:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8012ce4:	1a20      	subs	r0, r4, r0
 8012ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012cea:	fb02 0013 	mls	r0, r2, r3, r0
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	9b04      	ldr	r3, [sp, #16]
 8012cf2:	bfd2      	itee	le
 8012cf4:	fb90 f0f2 	sdivle	r0, r0, r2
 8012cf8:	f200 30e7 	addwgt	r0, r0, #999	; 0x3e7
 8012cfc:	fbb0 f0f2 	udivgt	r0, r0, r2
 8012d00:	6018      	str	r0, [r3, #0]
}
 8012d02:	bd30      	pop	{r4, r5, pc}

08012d04 <RegionCommonComputeTxPower>:
{
 8012d04:	b538      	push	{r3, r4, r5, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8012d06:	0040      	lsls	r0, r0, #1
{
 8012d08:	4614      	mov	r4, r2
 8012d0a:	460d      	mov	r5, r1
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8012d0c:	f7ed fd02 	bl	8000714 <__aeabi_ui2f>
 8012d10:	4601      	mov	r1, r0
 8012d12:	4628      	mov	r0, r5
 8012d14:	f7ed fc4c 	bl	80005b0 <__aeabi_fsub>
 8012d18:	4621      	mov	r1, r4
 8012d1a:	f7ed fc49 	bl	80005b0 <__aeabi_fsub>
 8012d1e:	f7ed fbc3 	bl	80004a8 <__aeabi_f2d>
 8012d22:	f7ee f90d 	bl	8000f40 <floor>
 8012d26:	f7ed fc17 	bl	8000558 <__aeabi_d2iz>
}
 8012d2a:	b240      	sxtb	r0, r0
 8012d2c:	bd38      	pop	{r3, r4, r5, pc}

08012d2e <RegionCommonCountNbOfEnabledChannels>:
{
 8012d2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d32:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012d34:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 8012d36:	461f      	mov	r7, r3
    uint8_t nbChannelCount = 0;
 8012d38:	469c      	mov	ip, r3
 8012d3a:	011c      	lsls	r4, r3, #4
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012d3c:	8a05      	ldrh	r5, [r0, #16]
 8012d3e:	fa5f fe84 	uxtb.w	lr, r4
 8012d42:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8012d46:	42a5      	cmp	r5, r4
 8012d48:	d806      	bhi.n	8012d58 <RegionCommonCountNbOfEnabledChannels+0x2a>
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8012d4a:	9b01      	ldr	r3, [sp, #4]
    *nbEnabledChannels = nbChannelCount;
 8012d4c:	f882 c000 	strb.w	ip, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8012d50:	701f      	strb	r7, [r3, #0]
}
 8012d52:	b003      	add	sp, #12
 8012d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d58:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8012d5c:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8012d60:	00ad      	lsls	r5, r5, #2
 8012d62:	2400      	movs	r4, #0
 8012d64:	6846      	ldr	r6, [r0, #4]
 8012d66:	f836 6009 	ldrh.w	r6, [r6, r9]
 8012d6a:	4126      	asrs	r6, r4
 8012d6c:	07f6      	lsls	r6, r6, #31
 8012d6e:	d527      	bpl.n	8012dc0 <RegionCommonCountNbOfEnabledChannels+0x92>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8012d70:	6886      	ldr	r6, [r0, #8]
 8012d72:	eb06 0a05 	add.w	sl, r6, r5
 8012d76:	5976      	ldr	r6, [r6, r5]
 8012d78:	b316      	cbz	r6, 8012dc0 <RegionCommonCountNbOfEnabledChannels+0x92>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8012d7a:	7806      	ldrb	r6, [r0, #0]
 8012d7c:	b936      	cbnz	r6, 8012d8c <RegionCommonCountNbOfEnabledChannels+0x5e>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8012d7e:	6946      	ldr	r6, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8012d80:	b126      	cbz	r6, 8012d8c <RegionCommonCountNbOfEnabledChannels+0x5e>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8012d82:	f836 6009 	ldrh.w	r6, [r6, r9]
 8012d86:	4126      	asrs	r6, r4
 8012d88:	07f6      	lsls	r6, r6, #31
 8012d8a:	d519      	bpl.n	8012dc0 <RegionCommonCountNbOfEnabledChannels+0x92>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8012d8c:	f89a 6008 	ldrb.w	r6, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8012d90:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8012d94:	f346 0803 	sbfx	r8, r6, #0, #4
    if( ( value >= min ) && ( value <= max ) )
 8012d98:	fa4f f888 	sxtb.w	r8, r8
 8012d9c:	45d8      	cmp	r8, fp
 8012d9e:	dc0f      	bgt.n	8012dc0 <RegionCommonCountNbOfEnabledChannels+0x92>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8012da0:	f346 1603 	sbfx	r6, r6, #4, #4
    if( ( value >= min ) && ( value <= max ) )
 8012da4:	b276      	sxtb	r6, r6
 8012da6:	455e      	cmp	r6, fp
 8012da8:	db0a      	blt.n	8012dc0 <RegionCommonCountNbOfEnabledChannels+0x92>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8012daa:	f89a 6009 	ldrb.w	r6, [sl, #9]
 8012dae:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8012db2:	68c6      	ldr	r6, [r0, #12]
 8012db4:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 8012db8:	7d36      	ldrb	r6, [r6, #20]
 8012dba:	b94e      	cbnz	r6, 8012dd0 <RegionCommonCountNbOfEnabledChannels+0xa2>
                    nbRestrictedChannelsCount++;
 8012dbc:	3701      	adds	r7, #1
 8012dbe:	b2ff      	uxtb	r7, r7
        for( uint8_t j = 0; j < 16; j++ )
 8012dc0:	3401      	adds	r4, #1
 8012dc2:	2c10      	cmp	r4, #16
 8012dc4:	f105 050c 	add.w	r5, r5, #12
 8012dc8:	d1cc      	bne.n	8012d64 <RegionCommonCountNbOfEnabledChannels+0x36>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012dca:	3301      	adds	r3, #1
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	e7b4      	b.n	8012d3a <RegionCommonCountNbOfEnabledChannels+0xc>
                enabledChannels[nbChannelCount++] = i + j;
 8012dd0:	f10c 0601 	add.w	r6, ip, #1
 8012dd4:	eb0e 0804 	add.w	r8, lr, r4
 8012dd8:	f801 800c 	strb.w	r8, [r1, ip]
 8012ddc:	fa5f fc86 	uxtb.w	ip, r6
 8012de0:	e7ee      	b.n	8012dc0 <RegionCommonCountNbOfEnabledChannels+0x92>

08012de2 <RegionCommonIdentifyChannels>:
{
 8012de2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012de6:	4604      	mov	r4, r0
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8012de8:	6840      	ldr	r0, [r0, #4]
{
 8012dea:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8012dee:	461d      	mov	r5, r3
 8012df0:	468a      	mov	sl, r1
 8012df2:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8012df4:	f7fe fe4d 	bl	8011a92 <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8012df8:	6823      	ldr	r3, [r4, #0]
 8012dfa:	1a1b      	subs	r3, r3, r0
 8012dfc:	603b      	str	r3, [r7, #0]
    *nbEnabledChannels = 0;
 8012dfe:	f04f 0800 	mov.w	r8, #0
    *nbRestrictedChannels = 1;
 8012e02:	2301      	movs	r3, #1
 8012e04:	7033      	strb	r3, [r6, #0]
    *nbEnabledChannels = 0;
 8012e06:	f885 8000 	strb.w	r8, [r5]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012e0a:	6863      	ldr	r3, [r4, #4]
 8012e0c:	b113      	cbz	r3, 8012e14 <RegionCommonIdentifyChannels+0x32>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	4283      	cmp	r3, r0
 8012e12:	d824      	bhi.n	8012e5e <RegionCommonIdentifyChannels+0x7c>
        *aggregatedTimeOff = 0;
 8012e14:	f8ca 8000 	str.w	r8, [sl]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8012e18:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8012e1c:	69a3      	ldr	r3, [r4, #24]
 8012e1e:	f89c e000 	ldrb.w	lr, [ip]
 8012e22:	9303      	str	r3, [sp, #12]
 8012e24:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8012e28:	ab01      	add	r3, sp, #4
 8012e2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e2e:	7d23      	ldrb	r3, [r4, #20]
 8012e30:	9300      	str	r3, [sp, #0]
 8012e32:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8012e36:	7a23      	ldrb	r3, [r4, #8]
 8012e38:	7a62      	ldrb	r2, [r4, #9]
 8012e3a:	4670      	mov	r0, lr
 8012e3c:	f7f5 ff14 	bl	8008c68 <RegionCommonUpdateBandTimeOff>
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8012e40:	4633      	mov	r3, r6
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8012e42:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8012e44:	462a      	mov	r2, r5
 8012e46:	69e0      	ldr	r0, [r4, #28]
 8012e48:	4649      	mov	r1, r9
 8012e4a:	f7ff ff70 	bl	8012d2e <RegionCommonCountNbOfEnabledChannels>
    if( *nbEnabledChannels > 0 )
 8012e4e:	782b      	ldrb	r3, [r5, #0]
 8012e50:	b12b      	cbz	r3, 8012e5e <RegionCommonIdentifyChannels+0x7c>
        *nextTxDelay = 0;
 8012e52:	f8c7 8000 	str.w	r8, [r7]
        return LORAMAC_STATUS_OK;
 8012e56:	2000      	movs	r0, #0
}
 8012e58:	b004      	add	sp, #16
 8012e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
 8012e5e:	7833      	ldrb	r3, [r6, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	bf14      	ite	ne
 8012e64:	200b      	movne	r0, #11
 8012e66:	200c      	moveq	r0, #12
 8012e68:	e7f6      	b.n	8012e58 <RegionCommonIdentifyChannels+0x76>

08012e6a <RegionCommonGetNextLowerTxDr>:
{
 8012e6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t drLocal = params->CurrentDr;
 8012e6c:	f990 2000 	ldrsb.w	r2, [r0]
    if( params->CurrentDr == params->MinDr )
 8012e70:	f990 5002 	ldrsb.w	r5, [r0, #2]
 8012e74:	4295      	cmp	r5, r2
{
 8012e76:	4604      	mov	r4, r0
    if( params->CurrentDr == params->MinDr )
 8012e78:	d00f      	beq.n	8012e9a <RegionCommonGetNextLowerTxDr+0x30>
            drLocal = ( drLocal - 1 );
 8012e7a:	3a01      	subs	r2, #1
 8012e7c:	b252      	sxtb	r2, r2
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8012e7e:	4295      	cmp	r5, r2
 8012e80:	d00b      	beq.n	8012e9a <RegionCommonGetNextLowerTxDr+0x30>
 8012e82:	68a3      	ldr	r3, [r4, #8]
 8012e84:	9301      	str	r3, [sp, #4]
 8012e86:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8012e8a:	9300      	str	r3, [sp, #0]
 8012e8c:	6861      	ldr	r1, [r4, #4]
 8012e8e:	78e0      	ldrb	r0, [r4, #3]
 8012e90:	462b      	mov	r3, r5
 8012e92:	f7ff fe05 	bl	8012aa0 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8012e96:	2800      	cmp	r0, #0
 8012e98:	d0ef      	beq.n	8012e7a <RegionCommonGetNextLowerTxDr+0x10>
}
 8012e9a:	4610      	mov	r0, r2
 8012e9c:	b003      	add	sp, #12
 8012e9e:	bd30      	pop	{r4, r5, pc}

08012ea0 <RegionCommonLimitTxPower>:
}
 8012ea0:	4288      	cmp	r0, r1
 8012ea2:	bfb8      	it	lt
 8012ea4:	4608      	movlt	r0, r1
 8012ea6:	4770      	bx	lr

08012ea8 <RegionBaseUSComputeNext125kHzJoinChannel>:
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8012ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8012eac:	2300      	movs	r3, #0
 8012eae:	e9cd 3300 	strd	r3, r3, [sp]
{
 8012eb2:	460e      	mov	r6, r1
 8012eb4:	4690      	mov	r8, r2
    uint8_t availableChannels = 0;
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8012eb6:	4607      	mov	r7, r0
 8012eb8:	b918      	cbnz	r0, 8012ec2 <RegionBaseUSComputeNext125kHzJoinChannel+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012eba:	2003      	movs	r0, #3
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
}
 8012ebc:	b002      	add	sp, #8
 8012ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8012ec2:	2900      	cmp	r1, #0
 8012ec4:	d0f9      	beq.n	8012eba <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
 8012ec6:	2a00      	cmp	r2, #0
 8012ec8:	d0f7      	beq.n	8012eba <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
    startIndex = *groupsCurrentIndex;
 8012eca:	780c      	ldrb	r4, [r1, #0]
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8012ecc:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 8012ece:	07e0      	lsls	r0, r4, #31
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8012ed0:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
{
 8012ed4:	f04f 0300 	mov.w	r3, #0
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8012ed8:	bf54      	ite	pl
 8012eda:	b2c9      	uxtbpl	r1, r1
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8012edc:	0a09      	lsrmi	r1, r1, #8
    *availableChannels = 0;
 8012ede:	461d      	mov	r5, r3
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8012ee0:	fa41 f203 	asr.w	r2, r1, r3
 8012ee4:	07d2      	lsls	r2, r2, #31
 8012ee6:	b2d8      	uxtb	r0, r3
 8012ee8:	d505      	bpl.n	8012ef6 <RegionBaseUSComputeNext125kHzJoinChannel+0x4e>
            findAvailableChannelsIndex[*availableChannels] = i;
 8012eea:	aa02      	add	r2, sp, #8
 8012eec:	442a      	add	r2, r5
            ( *availableChannels )++;
 8012eee:	3501      	adds	r5, #1
            findAvailableChannelsIndex[*availableChannels] = i;
 8012ef0:	f802 0c08 	strb.w	r0, [r2, #-8]
            ( *availableChannels )++;
 8012ef4:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < 8; i++ )
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	2b08      	cmp	r3, #8
 8012efa:	d1f1      	bne.n	8012ee0 <RegionBaseUSComputeNext125kHzJoinChannel+0x38>
        if ( availableChannels > 0 )
 8012efc:	b15d      	cbz	r5, 8012f16 <RegionBaseUSComputeNext125kHzJoinChannel+0x6e>
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8012efe:	1e69      	subs	r1, r5, #1
 8012f00:	2000      	movs	r0, #0
 8012f02:	f7fe fc9d 	bl	8011840 <randr>
 8012f06:	ab02      	add	r3, sp, #8
 8012f08:	4418      	add	r0, r3
 8012f0a:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 8012f0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012f12:	f888 3000 	strb.w	r3, [r8]
        startIndex++;
 8012f16:	3401      	adds	r4, #1
 8012f18:	b2e4      	uxtb	r4, r4
            startIndex = 0;
 8012f1a:	2c08      	cmp	r4, #8
 8012f1c:	bf28      	it	cs
 8012f1e:	2400      	movcs	r4, #0
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8012f20:	b91d      	cbnz	r5, 8012f2a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 8012f22:	7833      	ldrb	r3, [r6, #0]
 8012f24:	42a3      	cmp	r3, r4
 8012f26:	d1d1      	bne.n	8012ecc <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
 8012f28:	e7c7      	b.n	8012eba <RegionBaseUSComputeNext125kHzJoinChannel+0x12>
        *groupsCurrentIndex = startIndex;
 8012f2a:	7034      	strb	r4, [r6, #0]
        return LORAMAC_STATUS_OK;
 8012f2c:	2000      	movs	r0, #0
 8012f2e:	e7c5      	b.n	8012ebc <RegionBaseUSComputeNext125kHzJoinChannel+0x14>

08012f30 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 8012f30:	fb02 1000 	mla	r0, r2, r0, r1
 8012f34:	4770      	bx	lr

08012f36 <RegionUS915RxParamSetupReq>:
{
 8012f36:	b538      	push	{r3, r4, r5, lr}
 8012f38:	4605      	mov	r5, r0
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8012f3a:	6840      	ldr	r0, [r0, #4]
 8012f3c:	f7f5 ffba 	bl	8008eb4 <VerifyRfFreq>
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8012f40:	220d      	movs	r2, #13
        status &= 0xFE; // Channel frequency KO
 8012f42:	2800      	cmp	r0, #0
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8012f44:	f04f 0108 	mov.w	r1, #8
 8012f48:	f995 0000 	ldrsb.w	r0, [r5]
        status &= 0xFE; // Channel frequency KO
 8012f4c:	bf14      	ite	ne
 8012f4e:	2407      	movne	r4, #7
 8012f50:	2406      	moveq	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8012f52:	f7ff fdd7 	bl	8012b04 <RegionCommonValueInRange>
 8012f56:	b908      	cbnz	r0, 8012f5c <RegionUS915RxParamSetupReq+0x26>
        status &= 0xFD; // Datarate KO
 8012f58:	f004 0405 	and.w	r4, r4, #5
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8012f5c:	f995 0000 	ldrsb.w	r0, [r5]
 8012f60:	2207      	movs	r2, #7
 8012f62:	2105      	movs	r1, #5
 8012f64:	f7ff fdce 	bl	8012b04 <RegionCommonValueInRange>
 8012f68:	2801      	cmp	r0, #1
 8012f6a:	d003      	beq.n	8012f74 <RegionUS915RxParamSetupReq+0x3e>
 8012f6c:	f995 3000 	ldrsb.w	r3, [r5]
 8012f70:	2b0d      	cmp	r3, #13
 8012f72:	dd01      	ble.n	8012f78 <RegionUS915RxParamSetupReq+0x42>
        status &= 0xFD; // Datarate KO
 8012f74:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8012f78:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8012f7c:	2203      	movs	r2, #3
 8012f7e:	2100      	movs	r1, #0
 8012f80:	f7ff fdc0 	bl	8012b04 <RegionCommonValueInRange>
 8012f84:	b908      	cbnz	r0, 8012f8a <RegionUS915RxParamSetupReq+0x54>
        status &= 0xFB; // Rx1DrOffset range KO
 8012f86:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
}
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	bd38      	pop	{r3, r4, r5, pc}

08012f8e <RegionUS915NewChannelReq>:
}
 8012f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f92:	4770      	bx	lr

08012f94 <RegionUS915TxParamSetupReq>:
 8012f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f98:	4770      	bx	lr

08012f9a <RegionUS915DlChannelReq>:
 8012f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f9e:	4770      	bx	lr

08012fa0 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	f7fe ba72 	b.w	801148a <z_impl_z_log_msg2_static_create>

08012fa6 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
 8012fa6:	6803      	ldr	r3, [r0, #0]
}
 8012fa8:	6958      	ldr	r0, [r3, #20]
 8012faa:	4770      	bx	lr

08012fac <fatfs_mkdir>:
{
 8012fac:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
 8012fae:	1c48      	adds	r0, r1, #1
 8012fb0:	f002 fd19 	bl	80159e6 <f_mkdir>
}
 8012fb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 8012fb8:	f7f6 be32 	b.w	8009c20 <translate_error>

08012fbc <fatfs_unlink>:
{
 8012fbc:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
 8012fbe:	1c48      	adds	r0, r1, #1
 8012fc0:	f002 fcc4 	bl	801594c <f_unlink>
}
 8012fc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 8012fc8:	f7f6 be2a 	b.w	8009c20 <translate_error>

08012fcc <fatfs_rename>:
{
 8012fcc:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
 8012fce:	1c54      	adds	r4, r2, #1
{
 8012fd0:	b087      	sub	sp, #28
 8012fd2:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	4669      	mov	r1, sp
 8012fd8:	f002 fbf8 	bl	80157cc <f_stat>
	if (FR_OK == res) {
 8012fdc:	b940      	cbnz	r0, 8012ff0 <fatfs_rename+0x24>
		res = f_unlink(&to[1]);
 8012fde:	4620      	mov	r0, r4
 8012fe0:	f002 fcb4 	bl	801594c <f_unlink>
		if (FR_OK != res)
 8012fe4:	b120      	cbz	r0, 8012ff0 <fatfs_rename+0x24>
}
 8012fe6:	b007      	add	sp, #28
 8012fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	res = translate_error(res);
 8012fec:	f7f6 be18 	b.w	8009c20 <translate_error>
	res = f_rename(&from[1], &to[1]);
 8012ff0:	4621      	mov	r1, r4
 8012ff2:	1c68      	adds	r0, r5, #1
 8012ff4:	f002 fd7c 	bl	8015af0 <f_rename>
 8012ff8:	e7f5      	b.n	8012fe6 <fatfs_rename+0x1a>

08012ffa <fatfs_unmount>:
{
 8012ffa:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
 8012ffc:	68c1      	ldr	r1, [r0, #12]
 8012ffe:	2200      	movs	r2, #0
 8013000:	3101      	adds	r1, #1
 8013002:	4610      	mov	r0, r2
 8013004:	f7f9 fe0c 	bl	800cc20 <f_mount>
}
 8013008:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
 801300c:	f7f6 be08 	b.w	8009c20 <translate_error>

08013010 <fatfs_sync>:
{
 8013010:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
 8013012:	6800      	ldr	r0, [r0, #0]
 8013014:	f002 fab8 	bl	8015588 <f_sync>
}
 8013018:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
 801301c:	f7f6 be00 	b.w	8009c20 <translate_error>

08013020 <fatfs_seek>:
	switch (whence) {
 8013020:	2a01      	cmp	r2, #1
{
 8013022:	b508      	push	{r3, lr}
	switch (whence) {
 8013024:	d00e      	beq.n	8013044 <fatfs_seek+0x24>
 8013026:	2a02      	cmp	r2, #2
 8013028:	d010      	beq.n	801304c <fatfs_seek+0x2c>
 801302a:	b992      	cbnz	r2, 8013052 <fatfs_seek+0x32>
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
 801302c:	2900      	cmp	r1, #0
 801302e:	db10      	blt.n	8013052 <fatfs_seek+0x32>
 8013030:	6800      	ldr	r0, [r0, #0]
 8013032:	68c3      	ldr	r3, [r0, #12]
 8013034:	428b      	cmp	r3, r1
 8013036:	d30c      	bcc.n	8013052 <fatfs_seek+0x32>
	res = f_lseek(zfp->filep, pos);
 8013038:	f002 fae8 	bl	801560c <f_lseek>
}
 801303c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
 8013040:	f7f6 bdee 	b.w	8009c20 <translate_error>
		pos = f_tell((FIL *)zfp->filep) + offset;
 8013044:	6803      	ldr	r3, [r0, #0]
 8013046:	695b      	ldr	r3, [r3, #20]
		pos = f_size((FIL *)zfp->filep) + offset;
 8013048:	4419      	add	r1, r3
		break;
 801304a:	e7ef      	b.n	801302c <fatfs_seek+0xc>
		pos = f_size((FIL *)zfp->filep) + offset;
 801304c:	6803      	ldr	r3, [r0, #0]
 801304e:	68db      	ldr	r3, [r3, #12]
 8013050:	e7fa      	b.n	8013048 <fatfs_seek+0x28>
}
 8013052:	f06f 0015 	mvn.w	r0, #21
 8013056:	bd08      	pop	{r3, pc}

08013058 <fatfs_truncate>:
{
 8013058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801305a:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
 801305c:	6800      	ldr	r0, [r0, #0]
{
 801305e:	460e      	mov	r6, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
 8013060:	68c7      	ldr	r7, [r0, #12]
	res = f_lseek(zfp->filep, length);
 8013062:	f002 fad3 	bl	801560c <f_lseek>
	if (res != FR_OK) {
 8013066:	b120      	cbz	r0, 8013072 <fatfs_truncate+0x1a>
}
 8013068:	b003      	add	sp, #12
 801306a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	res = translate_error(res);
 801306e:	f7f6 bdd7 	b.w	8009c20 <translate_error>
	if (length < cur_length) {
 8013072:	42b7      	cmp	r7, r6
		res = f_truncate(zfp->filep);
 8013074:	6820      	ldr	r0, [r4, #0]
	off_t cur_length = f_size((FIL *)zfp->filep);
 8013076:	463d      	mov	r5, r7
	if (length < cur_length) {
 8013078:	dd02      	ble.n	8013080 <fatfs_truncate+0x28>
		res = f_truncate(zfp->filep);
 801307a:	f002 fc2c 	bl	80158d6 <f_truncate>
 801307e:	e7f3      	b.n	8013068 <fatfs_truncate+0x10>
		res = f_lseek(zfp->filep, cur_length);
 8013080:	4639      	mov	r1, r7
		length = f_tell((FIL *)zfp->filep);
 8013082:	6946      	ldr	r6, [r0, #20]
		res = f_lseek(zfp->filep, cur_length);
 8013084:	f002 fac2 	bl	801560c <f_lseek>
		if (res != FR_OK) {
 8013088:	2800      	cmp	r0, #0
 801308a:	d1ed      	bne.n	8013068 <fatfs_truncate+0x10>
		uint8_t c = 0U;
 801308c:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
 8013090:	42b5      	cmp	r5, r6
 8013092:	db01      	blt.n	8013098 <fatfs_truncate+0x40>
 8013094:	2000      	movs	r0, #0
 8013096:	e7e7      	b.n	8013068 <fatfs_truncate+0x10>
			res = f_write(zfp->filep, &c, 1, &bw);
 8013098:	6820      	ldr	r0, [r4, #0]
 801309a:	ab01      	add	r3, sp, #4
 801309c:	2201      	movs	r2, #1
 801309e:	f10d 0103 	add.w	r1, sp, #3
 80130a2:	f002 f9b1 	bl	8015408 <f_write>
			if (res != FR_OK) {
 80130a6:	2800      	cmp	r0, #0
 80130a8:	d1de      	bne.n	8013068 <fatfs_truncate+0x10>
		for (int i = cur_length; i < length; i++) {
 80130aa:	3501      	adds	r5, #1
 80130ac:	e7f0      	b.n	8013090 <fatfs_truncate+0x38>

080130ae <fatfs_write>:
{
 80130ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (zfp->flags & FS_O_APPEND) {
 80130b0:	7a03      	ldrb	r3, [r0, #8]
 80130b2:	069b      	lsls	r3, r3, #26
{
 80130b4:	4604      	mov	r4, r0
 80130b6:	460d      	mov	r5, r1
 80130b8:	4616      	mov	r6, r2
	if (zfp->flags & FS_O_APPEND) {
 80130ba:	d40b      	bmi.n	80130d4 <fatfs_write+0x26>
		res = f_write(zfp->filep, ptr, size, &bw);
 80130bc:	6820      	ldr	r0, [r4, #0]
 80130be:	ab01      	add	r3, sp, #4
 80130c0:	4632      	mov	r2, r6
 80130c2:	4629      	mov	r1, r5
 80130c4:	f002 f9a0 	bl	8015408 <f_write>
	if (res != FR_OK) {
 80130c8:	b158      	cbz	r0, 80130e2 <fatfs_write+0x34>
}
 80130ca:	b002      	add	sp, #8
 80130cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = translate_error(res);
 80130d0:	f7f6 bda6 	b.w	8009c20 <translate_error>
	off_t pos = f_size((FIL *)zfp->filep);
 80130d4:	6800      	ldr	r0, [r0, #0]
		res = f_lseek(zfp->filep, pos);
 80130d6:	68c1      	ldr	r1, [r0, #12]
 80130d8:	f002 fa98 	bl	801560c <f_lseek>
	if (res == FR_OK) {
 80130dc:	2800      	cmp	r0, #0
 80130de:	d0ed      	beq.n	80130bc <fatfs_write+0xe>
 80130e0:	e7f3      	b.n	80130ca <fatfs_write+0x1c>
}
 80130e2:	9801      	ldr	r0, [sp, #4]
 80130e4:	b002      	add	sp, #8
 80130e6:	bd70      	pop	{r4, r5, r6, pc}

080130e8 <fatfs_read>:
{
 80130e8:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
 80130ea:	6800      	ldr	r0, [r0, #0]
 80130ec:	ab01      	add	r3, sp, #4
 80130ee:	f002 f8f5 	bl	80152dc <f_read>
	if (res != FR_OK) {
 80130f2:	b120      	cbz	r0, 80130fe <fatfs_read+0x16>
}
 80130f4:	b003      	add	sp, #12
 80130f6:	f85d eb04 	ldr.w	lr, [sp], #4
		return translate_error(res);
 80130fa:	f7f6 bd91 	b.w	8009c20 <translate_error>
}
 80130fe:	9801      	ldr	r0, [sp, #4]
 8013100:	b003      	add	sp, #12
 8013102:	f85d fb04 	ldr.w	pc, [sp], #4

08013106 <fatfs_stat>:
{
 8013106:	b530      	push	{r4, r5, lr}
 8013108:	4608      	mov	r0, r1
 801310a:	b087      	sub	sp, #28
	res = f_stat(&path[1], &fno);
 801310c:	4669      	mov	r1, sp
 801310e:	3001      	adds	r0, #1
{
 8013110:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
 8013112:	f002 fb5b 	bl	80157cc <f_stat>
	if (res == FR_OK) {
 8013116:	4604      	mov	r4, r0
 8013118:	b960      	cbnz	r0, 8013134 <fatfs_stat+0x2e>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 801311a:	f89d 3008 	ldrb.w	r3, [sp, #8]
		entry->type = ((fno.fattrib & AM_DIR) ?
 801311e:	4628      	mov	r0, r5
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 8013120:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
 8013124:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 8013128:	f10d 0109 	add.w	r1, sp, #9
 801312c:	f003 fa54 	bl	80165d8 <strcpy>
		entry->size = fno.fsize;
 8013130:	9b00      	ldr	r3, [sp, #0]
 8013132:	612b      	str	r3, [r5, #16]
	return translate_error(res);
 8013134:	4620      	mov	r0, r4
}
 8013136:	b007      	add	sp, #28
 8013138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 801313c:	f7f6 bd70 	b.w	8009c20 <translate_error>

08013140 <fatfs_readdir>:
{
 8013140:	b530      	push	{r4, r5, lr}
 8013142:	b087      	sub	sp, #28
	res = f_readdir(zdp->dirp, &fno);
 8013144:	6800      	ldr	r0, [r0, #0]
{
 8013146:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
 8013148:	4669      	mov	r1, sp
 801314a:	f002 fb1e 	bl	801578a <f_readdir>
	if (res == FR_OK) {
 801314e:	4605      	mov	r5, r0
 8013150:	b968      	cbnz	r0, 801316e <fatfs_readdir+0x2e>
 8013152:	f10d 0109 	add.w	r1, sp, #9
 8013156:	1c60      	adds	r0, r4, #1
 8013158:	f003 fa3e 	bl	80165d8 <strcpy>
		if (entry->name[0] != 0) {
 801315c:	7863      	ldrb	r3, [r4, #1]
 801315e:	b133      	cbz	r3, 801316e <fatfs_readdir+0x2e>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 8013160:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013164:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
 8013168:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
 801316a:	9b00      	ldr	r3, [sp, #0]
 801316c:	6123      	str	r3, [r4, #16]
	return translate_error(res);
 801316e:	4628      	mov	r0, r5
}
 8013170:	b007      	add	sp, #28
 8013172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
 8013176:	f7f6 bd53 	b.w	8009c20 <translate_error>

0801317a <fatfs_statvfs>:
{
 801317a:	b513      	push	{r0, r1, r4, lr}
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 801317c:	68c0      	ldr	r0, [r0, #12]
{
 801317e:	4614      	mov	r4, r2
	DWORD f_bfree = 0;
 8013180:	2300      	movs	r3, #0
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 8013182:	466a      	mov	r2, sp
 8013184:	a901      	add	r1, sp, #4
 8013186:	3001      	adds	r0, #1
	DWORD f_bfree = 0;
 8013188:	9301      	str	r3, [sp, #4]
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
 801318a:	f002 fb41 	bl	8015810 <f_getfree>
	if (res != FR_OK) {
 801318e:	b968      	cbnz	r0, 80131ac <fatfs_statvfs+0x32>
	stat->f_bfree = f_bfree;
 8013190:	9b01      	ldr	r3, [sp, #4]
	stat->f_frsize = fs->csize * stat->f_bsize;
 8013192:	9a00      	ldr	r2, [sp, #0]
	stat->f_bfree = f_bfree;
 8013194:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
 8013196:	f44f 7300 	mov.w	r3, #512	; 0x200
 801319a:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
 801319c:	8953      	ldrh	r3, [r2, #10]
 801319e:	025b      	lsls	r3, r3, #9
 80131a0:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
 80131a2:	6953      	ldr	r3, [r2, #20]
 80131a4:	3b02      	subs	r3, #2
 80131a6:	60a3      	str	r3, [r4, #8]
}
 80131a8:	b002      	add	sp, #8
 80131aa:	bd10      	pop	{r4, pc}
		return -EIO;
 80131ac:	f06f 0004 	mvn.w	r0, #4
 80131b0:	e7fa      	b.n	80131a8 <fatfs_statvfs+0x2e>

080131b2 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80131b2:	2200      	movs	r2, #0
{
 80131b4:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80131b6:	4611      	mov	r1, r2
 80131b8:	2006      	movs	r0, #6
 80131ba:	f7f0 fd5f 	bl	8003c7c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80131be:	2200      	movs	r2, #0
 80131c0:	4611      	mov	r1, r2
 80131c2:	2007      	movs	r0, #7
 80131c4:	f7f0 fd5a 	bl	8003c7c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80131c8:	2200      	movs	r2, #0
 80131ca:	4611      	mov	r1, r2
 80131cc:	2008      	movs	r0, #8
 80131ce:	f7f0 fd55 	bl	8003c7c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 80131d2:	2200      	movs	r2, #0
 80131d4:	4611      	mov	r1, r2
 80131d6:	2009      	movs	r0, #9
 80131d8:	f7f0 fd50 	bl	8003c7c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 80131dc:	2200      	movs	r2, #0
 80131de:	4611      	mov	r1, r2
 80131e0:	200a      	movs	r0, #10
 80131e2:	f7f0 fd4b 	bl	8003c7c <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 80131e6:	2200      	movs	r2, #0
 80131e8:	4611      	mov	r1, r2
 80131ea:	2016      	movs	r0, #22
 80131ec:	f7f0 fd46 	bl	8003c7c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 80131f0:	2200      	movs	r2, #0
 80131f2:	4611      	mov	r1, r2
 80131f4:	2029      	movs	r0, #41	; 0x29
 80131f6:	f7f0 fd41 	bl	8003c7c <z_arm_irq_priority_set>
}
 80131fa:	2000      	movs	r0, #0
 80131fc:	bd08      	pop	{r3, pc}

080131fe <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 80131fe:	6902      	ldr	r2, [r0, #16]
 8013200:	2110      	movs	r1, #16
 8013202:	200a      	movs	r0, #10
 8013204:	f7f6 bdd0 	b.w	8009da8 <__stm32_exti_isr.isra.0>

08013208 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 8013208:	6902      	ldr	r2, [r0, #16]
 801320a:	210a      	movs	r1, #10
 801320c:	2005      	movs	r0, #5
 801320e:	f7f6 bdcb 	b.w	8009da8 <__stm32_exti_isr.isra.0>

08013212 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8013212:	6902      	ldr	r2, [r0, #16]
 8013214:	2105      	movs	r1, #5
 8013216:	2004      	movs	r0, #4
 8013218:	f7f6 bdc6 	b.w	8009da8 <__stm32_exti_isr.isra.0>

0801321c <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 801321c:	6902      	ldr	r2, [r0, #16]
 801321e:	2104      	movs	r1, #4
 8013220:	2003      	movs	r0, #3
 8013222:	f7f6 bdc1 	b.w	8009da8 <__stm32_exti_isr.isra.0>

08013226 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 8013226:	6902      	ldr	r2, [r0, #16]
 8013228:	2103      	movs	r1, #3
 801322a:	2002      	movs	r0, #2
 801322c:	f7f6 bdbc 	b.w	8009da8 <__stm32_exti_isr.isra.0>

08013230 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 8013230:	6902      	ldr	r2, [r0, #16]
 8013232:	2102      	movs	r1, #2
 8013234:	2001      	movs	r0, #1
 8013236:	f7f6 bdb7 	b.w	8009da8 <__stm32_exti_isr.isra.0>

0801323a <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 801323a:	6902      	ldr	r2, [r0, #16]
 801323c:	2101      	movs	r1, #1
 801323e:	2000      	movs	r0, #0
 8013240:	f7f6 bdb2 	b.w	8009da8 <__stm32_exti_isr.isra.0>

08013244 <sys_get_be32>:
	return ((uint16_t)src[0] << 8) | src[1];
 8013244:	6800      	ldr	r0, [r0, #0]
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
}
 8013246:	ba00      	rev	r0, r0
 8013248:	4770      	bx	lr

0801324a <sdhc_is_retryable>:
	switch (err) {
 801324a:	f110 0f74 	cmn.w	r0, #116	; 0x74
 801324e:	d007      	beq.n	8013260 <sdhc_is_retryable+0x16>
 8013250:	1d43      	adds	r3, r0, #5
 8013252:	d005      	beq.n	8013260 <sdhc_is_retryable+0x16>
 8013254:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 8013258:	bf14      	ite	ne
 801325a:	2000      	movne	r0, #0
 801325c:	2001      	moveq	r0, #1
 801325e:	4770      	bx	lr
 8013260:	2001      	movs	r0, #1
}
 8013262:	4770      	bx	lr

08013264 <disk_spi_sdhc_access_status>:
	struct sdhc_spi_data *data = dev->data;
 8013264:	6903      	ldr	r3, [r0, #16]
	return data->status;
 8013266:	691b      	ldr	r3, [r3, #16]
}
 8013268:	7c18      	ldrb	r0, [r3, #16]
 801326a:	4770      	bx	lr

0801326c <sdhc_map_flags>:
{
 801326c:	4603      	mov	r3, r0
	if (flags < 0) {
 801326e:	1e08      	subs	r0, r1, #0
 8013270:	da01      	bge.n	8013276 <sdhc_map_flags+0xa>
 8013272:	4770      	bx	lr
	for (; map->mask != 0U; map++) {
 8013274:	3302      	adds	r3, #2
 8013276:	781a      	ldrb	r2, [r3, #0]
 8013278:	b10a      	cbz	r2, 801327e <sdhc_map_flags+0x12>
		if ((flags & map->mask) == map->mask) {
 801327a:	4382      	bics	r2, r0
 801327c:	d1fa      	bne.n	8013274 <sdhc_map_flags+0x8>
	return -map->err;
 801327e:	7858      	ldrb	r0, [r3, #1]
 8013280:	4240      	negs	r0, r0
}
 8013282:	4770      	bx	lr

08013284 <spi_transceive.constprop.0>:
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
 8013284:	b410      	push	{r4}
 8013286:	6884      	ldr	r4, [r0, #8]
 8013288:	6824      	ldr	r4, [r4, #0]
 801328a:	46a4      	mov	ip, r4
}
 801328c:	bc10      	pop	{r4}
 801328e:	4760      	bx	ip

08013290 <sdhc_spi_tx>:
{
 8013290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct spi_buf_set tx = {
 8013292:	2301      	movs	r3, #1
	struct spi_buf spi_bufs[] = {
 8013294:	e9cd 1200 	strd	r1, r2, [sp]
	const struct spi_buf_set tx = {
 8013298:	9303      	str	r3, [sp, #12]
	return spi_transceive(dev, config, tx_bufs, NULL);
 801329a:	e9d0 0100 	ldrd	r0, r1, [r0]
 801329e:	2300      	movs	r3, #0
 80132a0:	aa02      	add	r2, sp, #8
 80132a2:	f8cd d008 	str.w	sp, [sp, #8]
 80132a6:	f7ff ffed 	bl	8013284 <spi_transceive.constprop.0>
}
 80132aa:	b005      	add	sp, #20
 80132ac:	f85d fb04 	ldr.w	pc, [sp], #4

080132b0 <sdhc_spi_tx_cmd>:
{
 80132b0:	b513      	push	{r0, r1, r4, lr}
	buf[0] = SDHC_TX | (cmd & ~SDHC_START);
 80132b2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80132b6:	f88d 1000 	strb.w	r1, [sp]
	sys_put_be16(val >> 16, dst);
 80132ba:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
 80132bc:	0e11      	lsrs	r1, r2, #24
{
 80132be:	4604      	mov	r4, r0
 80132c0:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[1] = val;
 80132c4:	f88d 3002 	strb.w	r3, [sp, #2]
 80132c8:	f88d 2004 	strb.w	r2, [sp, #4]
	dst[0] = val >> 8;
 80132cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
	buf[SDHC_CMD_BODY_SIZE] = crc7_be(0, buf, SDHC_CMD_BODY_SIZE) | 0x01;
 80132d0:	4669      	mov	r1, sp
 80132d2:	2205      	movs	r2, #5
 80132d4:	2000      	movs	r0, #0
 80132d6:	f88d 3003 	strb.w	r3, [sp, #3]
 80132da:	f7fd fd43 	bl	8010d64 <crc7_be>
 80132de:	f040 0001 	orr.w	r0, r0, #1
 80132e2:	f88d 0005 	strb.w	r0, [sp, #5]
	return sdhc_spi_tx(data, buf, sizeof(buf));
 80132e6:	2206      	movs	r2, #6
 80132e8:	4669      	mov	r1, sp
 80132ea:	4620      	mov	r0, r4
 80132ec:	f7ff ffd0 	bl	8013290 <sdhc_spi_tx>
}
 80132f0:	b002      	add	sp, #8
 80132f2:	bd10      	pop	{r4, pc}

080132f4 <sdhc_spi_rx_u8>:
{
 80132f4:	b507      	push	{r0, r1, r2, lr}
	int err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 80132f6:	2201      	movs	r2, #1
 80132f8:	a901      	add	r1, sp, #4
 80132fa:	f7f6 fe0f 	bl	8009f1c <sdhc_spi_rx_bytes>
	if (err != 0) {
 80132fe:	b908      	cbnz	r0, 8013304 <sdhc_spi_rx_u8+0x10>
	return buf[0];
 8013300:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8013304:	b003      	add	sp, #12
 8013306:	f85d fb04 	ldr.w	pc, [sp], #4

0801330a <spi_release.isra.0>:
	return api->release(dev, config);
 801330a:	6883      	ldr	r3, [r0, #8]
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	4718      	bx	r3

08013310 <k_msleep.isra.0>:
 8013310:	210a      	movs	r1, #10
 8013312:	fb80 0101 	smull	r0, r1, r0, r1
 8013316:	f7fb b94d 	b.w	800e5b4 <z_impl_k_sleep>

0801331a <sdhc_retry_ok>:

/* Called at the end of a retry loop.  Returns if the minimum try
 * count and timeout has passed.  Delays/yields on retry.
 */
static inline bool sdhc_retry_ok(struct sdhc_retry *retry)
{
 801331a:	b538      	push	{r3, r4, r5, lr}
	int32_t remain = retry->end - k_uptime_get_32();
 801331c:	6805      	ldr	r5, [r0, #0]
{
 801331e:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 8013320:	f002 ff9d 	bl	801625e <z_impl_k_uptime_ticks>

	if (retry->tries < SDHC_MIN_TRIES) {
 8013324:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013328:	2b13      	cmp	r3, #19
 801332a:	dc07      	bgt.n	801333c <sdhc_retry_ok+0x22>
		retry->tries++;
		if (retry->sleep != 0U) {
 801332c:	88e0      	ldrh	r0, [r4, #6]
		retry->tries++;
 801332e:	3301      	adds	r3, #1
 8013330:	80a3      	strh	r3, [r4, #4]
		if (retry->sleep != 0U) {
 8013332:	b108      	cbz	r0, 8013338 <sdhc_retry_ok+0x1e>
		return true;
	}

	if (remain >= 0) {
		if (retry->sleep > 0) {
			k_msleep(retry->sleep);
 8013334:	f7ff ffec 	bl	8013310 <k_msleep.isra.0>
		return true;
 8013338:	2001      	movs	r0, #1

		return true;
	}

	return false;
}
 801333a:	bd38      	pop	{r3, r4, r5, pc}
			return t / ((uint64_t)from_hz / to_hz);
 801333c:	220a      	movs	r2, #10
 801333e:	2300      	movs	r3, #0
 8013340:	f7ed fbe0 	bl	8000b04 <__aeabi_uldivmod>
	int32_t remain = retry->end - k_uptime_get_32();
 8013344:	1a2d      	subs	r5, r5, r0
	if (remain >= 0) {
 8013346:	2d00      	cmp	r5, #0
 8013348:	db05      	blt.n	8013356 <sdhc_retry_ok+0x3c>
 801334a:	88e0      	ldrh	r0, [r4, #6]
		if (retry->sleep > 0) {
 801334c:	2800      	cmp	r0, #0
 801334e:	d1f1      	bne.n	8013334 <sdhc_retry_ok+0x1a>
	z_impl_k_yield();
 8013350:	f7fb f8a8 	bl	800e4a4 <z_impl_k_yield>
 8013354:	e7f0      	b.n	8013338 <sdhc_retry_ok+0x1e>
	return false;
 8013356:	2000      	movs	r0, #0
 8013358:	e7ef      	b.n	801333a <sdhc_retry_ok+0x20>

0801335a <sdhc_retry_init>:
{
 801335a:	b570      	push	{r4, r5, r6, lr}
 801335c:	4604      	mov	r4, r0
 801335e:	460d      	mov	r5, r1
 8013360:	4616      	mov	r6, r2
	return z_impl_k_uptime_ticks();
 8013362:	f002 ff7c 	bl	801625e <z_impl_k_uptime_ticks>
 8013366:	2300      	movs	r3, #0
 8013368:	220a      	movs	r2, #10
 801336a:	f7ed fbcb 	bl	8000b04 <__aeabi_uldivmod>
	retry->tries = 0;
 801336e:	2300      	movs	r3, #0
	retry->end = k_uptime_get_32() + timeout;
 8013370:	4405      	add	r5, r0
 8013372:	6025      	str	r5, [r4, #0]
	retry->tries = 0;
 8013374:	80a3      	strh	r3, [r4, #4]
	retry->sleep = sleep;
 8013376:	80e6      	strh	r6, [r4, #6]
}
 8013378:	bd70      	pop	{r4, r5, r6, pc}

0801337a <sdhc_spi_skip_until_start>:
{
 801337a:	b513      	push	{r0, r1, r4, lr}
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 801337c:	2200      	movs	r2, #0
{
 801337e:	4604      	mov	r4, r0
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 8013380:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8013384:	4668      	mov	r0, sp
 8013386:	f7ff ffe8 	bl	801335a <sdhc_retry_init>
		status = sdhc_spi_rx_u8(data);
 801338a:	4620      	mov	r0, r4
 801338c:	f7ff ffb2 	bl	80132f4 <sdhc_spi_rx_u8>
		if (status < 0) {
 8013390:	2800      	cmp	r0, #0
 8013392:	db08      	blt.n	80133a6 <sdhc_spi_skip_until_start+0x2c>
		if ((status & SDHC_START) == 0) {
 8013394:	0603      	lsls	r3, r0, #24
 8013396:	d506      	bpl.n	80133a6 <sdhc_spi_skip_until_start+0x2c>
	} while (sdhc_retry_ok(&retry));
 8013398:	4668      	mov	r0, sp
 801339a:	f7ff ffbe 	bl	801331a <sdhc_retry_ok>
 801339e:	2800      	cmp	r0, #0
 80133a0:	d1f3      	bne.n	801338a <sdhc_spi_skip_until_start+0x10>
	return -ETIMEDOUT;
 80133a2:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
 80133a6:	b002      	add	sp, #8
 80133a8:	bd10      	pop	{r4, pc}

080133aa <sdhc_spi_cmd_r37_raw>:
{
 80133aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133ac:	4605      	mov	r5, r0
 80133ae:	461f      	mov	r7, r3
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 80133b0:	f7ff ff7e 	bl	80132b0 <sdhc_spi_tx_cmd>
	if (err != 0) {
 80133b4:	4604      	mov	r4, r0
 80133b6:	b9a0      	cbnz	r0, 80133e2 <sdhc_spi_cmd_r37_raw+0x38>
	status = sdhc_spi_skip_until_start(data);
 80133b8:	4628      	mov	r0, r5
 80133ba:	f7ff ffde 	bl	801337a <sdhc_spi_skip_until_start>
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 80133be:	2204      	movs	r2, #4
	status = sdhc_spi_skip_until_start(data);
 80133c0:	4604      	mov	r4, r0
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 80133c2:	eb0d 0102 	add.w	r1, sp, r2
 80133c6:	4628      	mov	r0, r5
 80133c8:	f7f6 fda8 	bl	8009f1c <sdhc_spi_rx_bytes>
 80133cc:	4606      	mov	r6, r0
	*reply = sys_get_be32(buf);
 80133ce:	a801      	add	r0, sp, #4
 80133d0:	f7ff ff38 	bl	8013244 <sys_get_be32>
 80133d4:	6038      	str	r0, [r7, #0]
	sdhc_spi_rx_u8(data);
 80133d6:	4628      	mov	r0, r5
 80133d8:	f7ff ff8c 	bl	80132f4 <sdhc_spi_rx_u8>
	if (err != 0) {
 80133dc:	2e00      	cmp	r6, #0
 80133de:	bf18      	it	ne
 80133e0:	4634      	movne	r4, r6
}
 80133e2:	4620      	mov	r0, r4
 80133e4:	b003      	add	sp, #12
 80133e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133e8 <sdhc_spi_skip_until_ready>:
{
 80133e8:	b513      	push	{r0, r1, r4, lr}
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 80133ea:	2200      	movs	r2, #0
{
 80133ec:	4604      	mov	r4, r0
	sdhc_retry_init(&retry, SDHC_READY_TIMEOUT, 0);
 80133ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80133f2:	4668      	mov	r0, sp
 80133f4:	f7ff ffb1 	bl	801335a <sdhc_retry_init>
		status = sdhc_spi_rx_u8(data);
 80133f8:	4620      	mov	r0, r4
 80133fa:	f7ff ff7b 	bl	80132f4 <sdhc_spi_rx_u8>
		if (status < 0) {
 80133fe:	2800      	cmp	r0, #0
 8013400:	db07      	blt.n	8013412 <sdhc_spi_skip_until_ready+0x2a>
		if (status == 0) {
 8013402:	d108      	bne.n	8013416 <sdhc_spi_skip_until_ready+0x2e>
	} while (sdhc_retry_ok(&retry));
 8013404:	4668      	mov	r0, sp
 8013406:	f7ff ff88 	bl	801331a <sdhc_retry_ok>
 801340a:	2800      	cmp	r0, #0
 801340c:	d1f4      	bne.n	80133f8 <sdhc_spi_skip_until_ready+0x10>
	return -ETIMEDOUT;
 801340e:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
 8013412:	b002      	add	sp, #8
 8013414:	bd10      	pop	{r4, pc}
		if (status == 0xFF) {
 8013416:	28ff      	cmp	r0, #255	; 0xff
 8013418:	d101      	bne.n	801341e <sdhc_spi_skip_until_ready+0x36>
			return 0;
 801341a:	2000      	movs	r0, #0
 801341c:	e7f9      	b.n	8013412 <sdhc_spi_skip_until_ready+0x2a>
		status = sdhc_spi_rx_u8(data);
 801341e:	4620      	mov	r0, r4
 8013420:	f7ff ff68 	bl	80132f4 <sdhc_spi_rx_u8>
		if (status < 0) {
 8013424:	2800      	cmp	r0, #0
 8013426:	dbf4      	blt.n	8013412 <sdhc_spi_skip_until_ready+0x2a>
		if (status == 0xFF) {
 8013428:	28ff      	cmp	r0, #255	; 0xff
 801342a:	d0f6      	beq.n	801341a <sdhc_spi_skip_until_ready+0x32>
		return -EPROTO;
 801342c:	f06f 0046 	mvn.w	r0, #70	; 0x46
 8013430:	e7ef      	b.n	8013412 <sdhc_spi_skip_until_ready+0x2a>

08013432 <sdhc_spi_recover.isra.0>:
	return sdhc_spi_cmd_r1(data, SDHC_SEND_STATUS, 0);
 8013432:	2200      	movs	r2, #0
 8013434:	210d      	movs	r1, #13
 8013436:	f7f6 be29 	b.w	800a08c <sdhc_spi_cmd_r1>

0801343a <disk_spi_sdhc_access_read>:
	struct sdhc_spi_data *data = dev->data;
 801343a:	6900      	ldr	r0, [r0, #16]
{
 801343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sdhc_spi_data *data = dev->data;
 8013440:	6905      	ldr	r5, [r0, #16]
	err = sdhc_spi_read(data, buf, sector, count);
 8013442:	4628      	mov	r0, r5
{
 8013444:	460e      	mov	r6, r1
 8013446:	4617      	mov	r7, r2
 8013448:	4698      	mov	r8, r3
	err = sdhc_spi_read(data, buf, sector, count);
 801344a:	f7f6 ff81 	bl	800a350 <sdhc_spi_read>
	if (err != 0 && sdhc_is_retryable(err)) {
 801344e:	4604      	mov	r4, r0
 8013450:	b168      	cbz	r0, 801346e <disk_spi_sdhc_access_read+0x34>
 8013452:	f7ff fefa 	bl	801324a <sdhc_is_retryable>
 8013456:	b150      	cbz	r0, 801346e <disk_spi_sdhc_access_read+0x34>
		sdhc_spi_recover(data);
 8013458:	4628      	mov	r0, r5
 801345a:	f7ff ffea 	bl	8013432 <sdhc_spi_recover.isra.0>
		err = sdhc_spi_read(data, buf, sector, count);
 801345e:	4643      	mov	r3, r8
 8013460:	463a      	mov	r2, r7
 8013462:	4631      	mov	r1, r6
 8013464:	4628      	mov	r0, r5
}
 8013466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		err = sdhc_spi_read(data, buf, sector, count);
 801346a:	f7f6 bf71 	b.w	800a350 <sdhc_spi_read>
}
 801346e:	4620      	mov	r0, r4
 8013470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013474 <disk_spi_sdhc_access_write>:
	struct sdhc_spi_data *data = dev->data;
 8013474:	6900      	ldr	r0, [r0, #16]
{
 8013476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct sdhc_spi_data *data = dev->data;
 801347a:	6905      	ldr	r5, [r0, #16]
	if (count > 2) {
 801347c:	2b02      	cmp	r3, #2
{
 801347e:	460f      	mov	r7, r1
 8013480:	4690      	mov	r8, r2
 8013482:	461e      	mov	r6, r3
		err = sdhc_spi_write_multi(data, buf, sector, count);
 8013484:	4628      	mov	r0, r5
	if (count > 2) {
 8013486:	d916      	bls.n	80134b6 <disk_spi_sdhc_access_write+0x42>
		err = sdhc_spi_write_multi(data, buf, sector, count);
 8013488:	f7f7 f820 	bl	800a4cc <sdhc_spi_write_multi>
		if (err != 0 && sdhc_is_retryable(err)) {
 801348c:	4604      	mov	r4, r0
 801348e:	b918      	cbnz	r0, 8013498 <disk_spi_sdhc_access_write+0x24>
{
 8013490:	2400      	movs	r4, #0
}
 8013492:	4620      	mov	r0, r4
 8013494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (err != 0 && sdhc_is_retryable(err)) {
 8013498:	f7ff fed7 	bl	801324a <sdhc_is_retryable>
 801349c:	2800      	cmp	r0, #0
 801349e:	d0f8      	beq.n	8013492 <disk_spi_sdhc_access_write+0x1e>
			sdhc_spi_recover(data);
 80134a0:	4628      	mov	r0, r5
 80134a2:	f7ff ffc6 	bl	8013432 <sdhc_spi_recover.isra.0>
			err = sdhc_spi_write_multi(data, buf, sector, count);
 80134a6:	4633      	mov	r3, r6
 80134a8:	4642      	mov	r2, r8
 80134aa:	4639      	mov	r1, r7
 80134ac:	4628      	mov	r0, r5
}
 80134ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = sdhc_spi_write_multi(data, buf, sector, count);
 80134b2:	f7f7 b80b 	b.w	800a4cc <sdhc_spi_write_multi>
		err = sdhc_spi_write(data, buf, sector, count);
 80134b6:	f7f6 ff83 	bl	800a3c0 <sdhc_spi_write>
		if (err != 0 && sdhc_is_retryable(err)) {
 80134ba:	4604      	mov	r4, r0
 80134bc:	2800      	cmp	r0, #0
 80134be:	d0e7      	beq.n	8013490 <disk_spi_sdhc_access_write+0x1c>
 80134c0:	f7ff fec3 	bl	801324a <sdhc_is_retryable>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	d0e4      	beq.n	8013492 <disk_spi_sdhc_access_write+0x1e>
			sdhc_spi_recover(data);
 80134c8:	4628      	mov	r0, r5
 80134ca:	f7ff ffb2 	bl	8013432 <sdhc_spi_recover.isra.0>
			err = sdhc_spi_write(data, buf, sector, count);
 80134ce:	4633      	mov	r3, r6
 80134d0:	4642      	mov	r2, r8
 80134d2:	4639      	mov	r1, r7
 80134d4:	4628      	mov	r0, r5
}
 80134d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = sdhc_spi_write(data, buf, sector, count);
 80134da:	f7f6 bf71 	b.w	800a3c0 <sdhc_spi_write>

080134de <stm32_clock_control_on>:
	switch (pclken->bus) {
 80134de:	680b      	ldr	r3, [r1, #0]
{
 80134e0:	b088      	sub	sp, #32
 80134e2:	2b0a      	cmp	r3, #10
 80134e4:	d856      	bhi.n	8013594 <stm32_clock_control_on+0xb6>
 80134e6:	e8df f003 	tbb	[pc, r3]
 80134ea:	1306      	.short	0x1306
 80134ec:	55343f29 	.word	0x55343f29
 80134f0:	5555551e 	.word	0x5555551e
 80134f4:	4a          	.byte	0x4a
 80134f5:	00          	.byte	0x00
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80134f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80134fa:	684b      	ldr	r3, [r1, #4]
 80134fc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80134fe:	4319      	orrs	r1, r3
 8013500:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8013502:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013504:	4013      	ands	r3, r2
 8013506:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8013508:	9b01      	ldr	r3, [sp, #4]
	return 0;
 801350a:	2000      	movs	r0, #0
}
 801350c:	b008      	add	sp, #32
 801350e:	4770      	bx	lr
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8013510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8013514:	684b      	ldr	r3, [r1, #4]
 8013516:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8013518:	4319      	orrs	r1, r3
 801351a:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801351c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801351e:	4013      	ands	r3, r2
 8013520:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8013522:	9b02      	ldr	r3, [sp, #8]
 8013524:	e7f1      	b.n	801350a <stm32_clock_control_on+0x2c>
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8013526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 801352a:	684b      	ldr	r3, [r1, #4]
 801352c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 801352e:	4319      	orrs	r1, r3
 8013530:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8013532:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8013534:	4013      	ands	r3, r2
 8013536:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8013538:	9b03      	ldr	r3, [sp, #12]
 801353a:	e7e6      	b.n	801350a <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 801353c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8013540:	684b      	ldr	r3, [r1, #4]
 8013542:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8013544:	4319      	orrs	r1, r3
 8013546:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8013548:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801354a:	4013      	ands	r3, r2
 801354c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 801354e:	9b04      	ldr	r3, [sp, #16]
 8013550:	e7db      	b.n	801350a <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8013552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8013556:	684b      	ldr	r3, [r1, #4]
 8013558:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 801355a:	4319      	orrs	r1, r3
 801355c:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801355e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8013560:	4013      	ands	r3, r2
 8013562:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8013564:	9b05      	ldr	r3, [sp, #20]
 8013566:	e7d0      	b.n	801350a <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8013568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB2_GRP1_EnableClock(pclken->enr);
 801356c:	684b      	ldr	r3, [r1, #4]
 801356e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8013570:	4319      	orrs	r1, r3
 8013572:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8013574:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8013576:	4013      	ands	r3, r2
 8013578:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 801357a:	9b06      	ldr	r3, [sp, #24]
 801357c:	e7c5      	b.n	801350a <stm32_clock_control_on+0x2c>
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 801357e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
		LL_APB3_GRP1_EnableClock(pclken->enr);
 8013582:	684b      	ldr	r3, [r1, #4]
 8013584:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8013586:	4319      	orrs	r1, r3
 8013588:	6651      	str	r1, [r2, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 801358a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801358c:	4013      	ands	r3, r2
 801358e:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8013590:	9b07      	ldr	r3, [sp, #28]
 8013592:	e7ba      	b.n	801350a <stm32_clock_control_on+0x2c>
	switch (pclken->bus) {
 8013594:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8013598:	e7b8      	b.n	801350c <stm32_clock_control_on+0x2e>

0801359a <stm32_clock_control_off>:
	switch (pclken->bus) {
 801359a:	680b      	ldr	r3, [r1, #0]
 801359c:	2b0a      	cmp	r3, #10
 801359e:	d840      	bhi.n	8013622 <stm32_clock_control_off+0x88>
 80135a0:	e8df f003 	tbb	[pc, r3]
 80135a4:	2f1f0f06 	.word	0x2f1f0f06
 80135a8:	3f173f27 	.word	0x3f173f27
 80135ac:	3f3f      	.short	0x3f3f
 80135ae:	37          	.byte	0x37
 80135af:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80135b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80135b4:	6849      	ldr	r1, [r1, #4]
 80135b6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80135b8:	ea23 0301 	bic.w	r3, r3, r1
 80135bc:	6493      	str	r3, [r2, #72]	; 0x48
	return 0;
 80135be:	2000      	movs	r0, #0
}
 80135c0:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80135c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80135c6:	6849      	ldr	r1, [r1, #4]
 80135c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80135ca:	ea23 0301 	bic.w	r3, r3, r1
 80135ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80135d0:	e7f5      	b.n	80135be <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80135d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80135d6:	6849      	ldr	r1, [r1, #4]
 80135d8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80135da:	ea23 0301 	bic.w	r3, r3, r1
 80135de:	6513      	str	r3, [r2, #80]	; 0x50
 80135e0:	e7ed      	b.n	80135be <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80135e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80135e6:	6849      	ldr	r1, [r1, #4]
 80135e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80135ea:	ea23 0301 	bic.w	r3, r3, r1
 80135ee:	6593      	str	r3, [r2, #88]	; 0x58
 80135f0:	e7e5      	b.n	80135be <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80135f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80135f6:	6849      	ldr	r1, [r1, #4]
 80135f8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80135fa:	ea23 0301 	bic.w	r3, r3, r1
 80135fe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8013600:	e7dd      	b.n	80135be <stm32_clock_control_off+0x24>
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8013602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013606:	6849      	ldr	r1, [r1, #4]
 8013608:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801360a:	ea23 0301 	bic.w	r3, r3, r1
 801360e:	6613      	str	r3, [r2, #96]	; 0x60
 8013610:	e7d5      	b.n	80135be <stm32_clock_control_off+0x24>
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB3ENR, Periphs);
 8013612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013616:	6849      	ldr	r1, [r1, #4]
 8013618:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801361a:	ea23 0301 	bic.w	r3, r3, r1
 801361e:	6653      	str	r3, [r2, #100]	; 0x64
 8013620:	e7cd      	b.n	80135be <stm32_clock_control_off+0x24>
	switch (pclken->bus) {
 8013622:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8013626:	4770      	bx	lr

08013628 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8013628:	b510      	push	{r4, lr}
 801362a:	b088      	sub	sp, #32
	clk_init->CPU2CLKDivider = ahb_prescaler(STM32_CPU2_PRESCALER);
 801362c:	2300      	movs	r3, #0
	clk_init->CPU1CLKDivider = ahb_prescaler(STM32_CPU1_PRESCALER);
 801362e:	e9cd 3303 	strd	r3, r3, [sp, #12]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8013632:	e9cd 3305 	strd	r3, r3, [sp, #20]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8013636:	9307      	str	r3, [sp, #28]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8013638:	f000 f841 	bl	80136be <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 801363c:	4668      	mov	r0, sp
 801363e:	f000 f836 	bl	80136ae <config_pll_init>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8013642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	0551      	lsls	r1, r2, #21
 801364a:	d406      	bmi.n	801365a <stm32_clock_control_init+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 801364c:	681a      	ldr	r2, [r3, #0]
 801364e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013652:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	0552      	lsls	r2, r2, #21
 8013658:	d5fc      	bpl.n	8013654 <stm32_clock_control_init+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 801365a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 801365e:	68a3      	ldr	r3, [r4, #8]
 8013660:	f023 0303 	bic.w	r3, r3, #3
 8013664:	f043 0301 	orr.w	r3, r3, #1
 8013668:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 801366a:	68a3      	ldr	r3, [r4, #8]
 801366c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013670:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8013672:	68a3      	ldr	r3, [r4, #8]
 8013674:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8013678:	2b04      	cmp	r3, #4
 801367a:	d1fa      	bne.n	8013672 <stm32_clock_control_init+0x4a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801367c:	6823      	ldr	r3, [r4, #0]
 801367e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013682:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8013684:	68e3      	ldr	r3, [r4, #12]
 8013686:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 801368a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801368e:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8013690:	a903      	add	r1, sp, #12
 8013692:	4668      	mov	r0, sp
 8013694:	f7f9 ffc4 	bl	800d620 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8013698:	6823      	ldr	r3, [r4, #0]
 801369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801369e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80136a0:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80136a2:	2000      	movs	r0, #0
 80136a4:	f023 0301 	bic.w	r3, r3, #1
 80136a8:	6023      	str	r3, [r4, #0]
 80136aa:	b008      	add	sp, #32
 80136ac:	bd10      	pop	{r4, pc}

080136ae <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 80136ae:	2306      	movs	r3, #6
 80136b0:	2200      	movs	r2, #0
 80136b2:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 80136b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80136ba:	6083      	str	r3, [r0, #8]
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 80136bc:	4770      	bx	lr

080136be <config_enable_default_clocks>:
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 80136be:	4770      	bx	lr

080136c0 <z_impl_counter_get_frequency>:
	return api->get_freq ? api->get_freq(dev) : config->freq;
 80136c0:	6882      	ldr	r2, [r0, #8]
 80136c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80136c4:	b102      	cbz	r2, 80136c8 <z_impl_counter_get_frequency+0x8>
 80136c6:	4710      	bx	r2
 80136c8:	6843      	ldr	r3, [r0, #4]
}
 80136ca:	6858      	ldr	r0, [r3, #4]
 80136cc:	4770      	bx	lr

080136ce <rtc_stm32_stop>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80136ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
}
 80136d2:	2000      	movs	r0, #0
 80136d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80136d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80136dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80136e0:	4770      	bx	lr

080136e2 <rtc_stm32_get_top_value>:
	return info->max_top_value;
 80136e2:	6843      	ldr	r3, [r0, #4]
}
 80136e4:	6818      	ldr	r0, [r3, #0]
 80136e6:	4770      	bx	lr

080136e8 <rtc_stm32_set_top_value>:
	if ((cfg->ticks != info->max_top_value) ||
 80136e8:	6843      	ldr	r3, [r0, #4]
 80136ea:	680a      	ldr	r2, [r1, #0]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d107      	bne.n	8013702 <rtc_stm32_set_top_value+0x1a>
		!(cfg->flags & COUNTER_TOP_CFG_DONT_RESET)) {
 80136f2:	68cb      	ldr	r3, [r1, #12]
		return 0;
 80136f4:	f013 0f01 	tst.w	r3, #1
 80136f8:	bf0c      	ite	eq
 80136fa:	f06f 0085 	mvneq.w	r0, #133	; 0x85
 80136fe:	2000      	movne	r0, #0
 8013700:	4770      	bx	lr
		return -ENOTSUP;
 8013702:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8013706:	4770      	bx	lr

08013708 <rtc_stm32_get_value>:
{
 8013708:	b510      	push	{r4, lr}
 801370a:	460c      	mov	r4, r1
	*ticks = rtc_stm32_read(dev);
 801370c:	f7f6 ff7c 	bl	800a608 <rtc_stm32_read>
 8013710:	6020      	str	r0, [r4, #0]
}
 8013712:	2000      	movs	r0, #0
 8013714:	bd10      	pop	{r4, pc}

08013716 <rtc_stm32_start>:
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8013716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
}
 801371a:	2000      	movs	r0, #0
 801371c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8013720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013728:	4770      	bx	lr

0801372a <bin2bcd>:
 *
 * @return BCD 8421 representation of input value.
 */
static inline uint8_t bin2bcd(uint8_t bin)
{
	return (((bin / 10) << 4) | (bin % 10));
 801372a:	220a      	movs	r2, #10
 801372c:	fbb0 f3f2 	udiv	r3, r0, r2
 8013730:	fb02 0013 	mls	r0, r2, r3, r0
 8013734:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8013738:	b2c0      	uxtb	r0, r0
 801373a:	4770      	bx	lr

0801373c <gpio_pin_interrupt_configure_dt>:
{
 801373c:	b430      	push	{r4, r5}
 801373e:	4603      	mov	r3, r0
 8013740:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
 8013742:	6800      	ldr	r0, [r0, #0]
 8013744:	7919      	ldrb	r1, [r3, #4]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8013746:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
 8013748:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 801374a:	d507      	bpl.n	801375c <gpio_pin_interrupt_configure_dt+0x20>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 801374c:	6905      	ldr	r5, [r0, #16]
 801374e:	2301      	movs	r3, #1
 8013750:	682d      	ldr	r5, [r5, #0]
 8013752:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8013754:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8013756:	bf18      	it	ne
 8013758:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 801375c:	69a4      	ldr	r4, [r4, #24]
 801375e:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
 8013762:	46a4      	mov	ip, r4
 8013764:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
 8013768:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
 801376a:	4760      	bx	ip

0801376c <counter_alarm_forwarder>:
}
 801376c:	4770      	bx	lr

0801376e <ds3231_counter_start>:
}
 801376e:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8013772:	4770      	bx	lr

08013774 <ds3231_counter_stop>:
}
 8013774:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8013778:	4770      	bx	lr

0801377a <ds3231_counter_get_top_value>:

static uint32_t ds3231_counter_get_top_value(const struct device *dev)
{
	return UINT32_MAX;
}
 801377a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801377e:	4770      	bx	lr

08013780 <ds3231_counter_get_pending_int>:

static uint32_t ds3231_counter_get_pending_int(const struct device *dev)
{
	return 0;
}
 8013780:	2000      	movs	r0, #0
 8013782:	4770      	bx	lr

08013784 <ds3231_counter_set_top_value>:

static int ds3231_counter_set_top_value(const struct device *dev,
					const struct counter_top_cfg *cfg)
{
	return -ENOTSUP;
}
 8013784:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8013788:	4770      	bx	lr

0801378a <k_sem_give>:
	z_impl_k_sem_give(sem);
 801378a:	f7fa bad3 	b.w	800dd34 <z_impl_k_sem_give>

0801378e <k_uptime_get_32>:
{
 801378e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8013790:	f002 fd65 	bl	801625e <z_impl_k_uptime_ticks>
 8013794:	220a      	movs	r2, #10
 8013796:	2300      	movs	r3, #0
 8013798:	f7ed f9b4 	bl	8000b04 <__aeabi_uldivmod>
}
 801379c:	bd08      	pop	{r3, pc}

0801379e <sqw_worker>:
 801379e:	f7ff bff6 	b.w	801378e <k_uptime_get_32>

080137a2 <isw_gpio_callback>:
{
 80137a2:	b510      	push	{r4, lr}
 80137a4:	460c      	mov	r4, r1
 80137a6:	f7ff fff2 	bl	801378e <k_uptime_get_32>
	if (data->registers.ctrl & MAXIM_DS3231_REG_CTRL_INTCN) {
 80137aa:	f814 3c86 	ldrb.w	r3, [r4, #-134]
	data->isw_syncclock = maxim_ds3231_read_syncclock(data->ds3231);
 80137ae:	60e0      	str	r0, [r4, #12]
	if (data->registers.ctrl & MAXIM_DS3231_REG_CTRL_INTCN) {
 80137b0:	075b      	lsls	r3, r3, #29
 80137b2:	d505      	bpl.n	80137c0 <isw_gpio_callback+0x1e>
		k_work_submit(&data->alarm_work);
 80137b4:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
}
 80137b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_submit(&data->sqw_work);
 80137bc:	f7fa bbee 	b.w	800df9c <k_work_submit>
	} else if (data->sync_state != SYNCSM_IDLE) {
 80137c0:	f894 307b 	ldrb.w	r3, [r4, #123]	; 0x7b
 80137c4:	b113      	cbz	r3, 80137cc <isw_gpio_callback+0x2a>
		k_work_submit(&data->sync_work);
 80137c6:	f1a4 0010 	sub.w	r0, r4, #16
 80137ca:	e7f5      	b.n	80137b8 <isw_gpio_callback+0x16>
		k_work_submit(&data->sqw_work);
 80137cc:	f1a4 0020 	sub.w	r0, r4, #32
 80137d0:	e7f2      	b.n	80137b8 <isw_gpio_callback+0x16>

080137d2 <z_log_msg2_static_create.constprop.0>:
 80137d2:	2300      	movs	r3, #0
 80137d4:	f7fd be59 	b.w	801148a <z_impl_z_log_msg2_static_create>

080137d8 <i2c_write_read_dt.constprop.0>:
 * @param read_buf Pointer to storage for read data
 * @param num_read Number of bytes to read
 *
 * @return a value from i2c_write_read()
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
 80137d8:	b530      	push	{r4, r5, lr}
 80137da:	b087      	sub	sp, #28
 80137dc:	4604      	mov	r4, r0
 80137de:	461d      	mov	r5, r3
	msg[0].buf = (uint8_t *)write_buf;
 80137e0:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
 80137e2:	2101      	movs	r1, #1
	msg[1].len = num_read;
 80137e4:	e9cd 2503 	strd	r2, r5, [sp, #12]
	msg[0].len = num_write;
 80137e8:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80137ea:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 80137ec:	2100      	movs	r1, #0
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
 80137ee:	6800      	ldr	r0, [r0, #0]
 80137f0:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 80137f2:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80137f6:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80137fa:	6882      	ldr	r2, [r0, #8]
 80137fc:	4669      	mov	r1, sp
 80137fe:	6894      	ldr	r4, [r2, #8]
 8013800:	2202      	movs	r2, #2
 8013802:	47a0      	blx	r4
			      write_buf, num_write,
			      read_buf, num_read);
}
 8013804:	b007      	add	sp, #28
 8013806:	bd30      	pop	{r4, r5, pc}

08013808 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
 8013808:	f7fa baba 	b.w	800dd80 <z_impl_k_sem_take>

0801380c <i2c_write_dt>:
{
 801380c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801380e:	4603      	mov	r3, r0
	msg.len = num_bytes;
 8013810:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8013814:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
 8013816:	6800      	ldr	r0, [r0, #0]
 8013818:	889b      	ldrh	r3, [r3, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 801381a:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 801381e:	6882      	ldr	r2, [r0, #8]
 8013820:	a901      	add	r1, sp, #4
 8013822:	6894      	ldr	r4, [r2, #8]
 8013824:	2201      	movs	r2, #1
 8013826:	47a0      	blx	r4
}
 8013828:	b004      	add	sp, #16
 801382a:	bd10      	pop	{r4, pc}

0801382c <sc_ctrl>:
{
 801382c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ds3231_data *data = dev->data;
 801382e:	6905      	ldr	r5, [r0, #16]
	uint8_t ctrl = (rp->ctrl & ~clear) | set;
 8013830:	7cae      	ldrb	r6, [r5, #18]
 8013832:	ea26 0402 	bic.w	r4, r6, r2
 8013836:	430c      	orrs	r4, r1
	if (rp->ctrl != ctrl) {
 8013838:	42a6      	cmp	r6, r4
{
 801383a:	4603      	mov	r3, r0
	int rc = ctrl;
 801383c:	4620      	mov	r0, r4
	if (rp->ctrl != ctrl) {
 801383e:	d00e      	beq.n	801385e <sc_ctrl+0x32>
	const struct ds3231_config *cfg = dev->config;
 8013840:	6858      	ldr	r0, [r3, #4]
		uint8_t buf[2] = {
 8013842:	f88d 4005 	strb.w	r4, [sp, #5]
 8013846:	230e      	movs	r3, #14
		rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8013848:	2202      	movs	r2, #2
 801384a:	a901      	add	r1, sp, #4
 801384c:	300c      	adds	r0, #12
		uint8_t buf[2] = {
 801384e:	f88d 3004 	strb.w	r3, [sp, #4]
		rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8013852:	f7ff ffdb 	bl	801380c <i2c_write_dt>
		if (rc >= 0) {
 8013856:	2800      	cmp	r0, #0
			rp->ctrl = ctrl;
 8013858:	bfa4      	itt	ge
 801385a:	74ac      	strbge	r4, [r5, #18]
			rc = ctrl;
 801385c:	4620      	movge	r0, r4
}
 801385e:	b002      	add	sp, #8
 8013860:	bd70      	pop	{r4, r5, r6, pc}

08013862 <cancel_alarm>:
	data->alarm_handler[id] = NULL;
 8013862:	6903      	ldr	r3, [r0, #16]
 8013864:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8013868:	460a      	mov	r2, r1
	data->alarm_handler[id] = NULL;
 801386a:	2100      	movs	r1, #0
 801386c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	data->alarm_user_data[id] = NULL;
 8013870:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	return sc_ctrl(dev, 0, MAXIM_DS3231_ALARM1 << id);
 8013874:	2301      	movs	r3, #1
 8013876:	fa03 f202 	lsl.w	r2, r3, r2
 801387a:	b2d2      	uxtb	r2, r2
 801387c:	f7ff bfd6 	b.w	801382c <sc_ctrl>

08013880 <ds3231_counter_cancel_alarm>:
{
 8013880:	b570      	push	{r4, r5, r6, lr}
	if (id >= cfg->generic.channels) {
 8013882:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 8013884:	6905      	ldr	r5, [r0, #16]
	if (id >= cfg->generic.channels) {
 8013886:	7a5b      	ldrb	r3, [r3, #9]
 8013888:	428b      	cmp	r3, r1
{
 801388a:	4604      	mov	r4, r0
 801388c:	460e      	mov	r6, r1
	if (id >= cfg->generic.channels) {
 801388e:	d912      	bls.n	80138b6 <ds3231_counter_cancel_alarm+0x36>
	k_sem_take(&data->lock, K_FOREVER);
 8013890:	3518      	adds	r5, #24
 8013892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801389a:	4628      	mov	r0, r5
 801389c:	f7ff ffb4 	bl	8013808 <k_sem_take.constprop.0.isra.0>
	rv = cancel_alarm(dev, id);
 80138a0:	4631      	mov	r1, r6
 80138a2:	4620      	mov	r0, r4
 80138a4:	f7ff ffdd 	bl	8013862 <cancel_alarm>
 80138a8:	4604      	mov	r4, r0
	k_sem_give(&data->lock);
 80138aa:	4628      	mov	r0, r5
 80138ac:	f7ff ff6d 	bl	801378a <k_sem_give>
	if (rv >= 0) {
 80138b0:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
 80138b4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EINVAL;
 80138b6:	f06f 0015 	mvn.w	r0, #21
 80138ba:	e7fb      	b.n	80138b4 <ds3231_counter_cancel_alarm+0x34>

080138bc <sync_finish>:
{
 80138bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ds3231_data *data = dev->data;
 80138c0:	6904      	ldr	r4, [r0, #16]
	if (data->sync_signal) {
 80138c2:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
		signal = data->sync.signal;
 80138c6:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
{
 80138ca:	4606      	mov	r6, r0
 80138cc:	460d      	mov	r5, r1
 80138ce:	2300      	movs	r3, #0
	if (data->sync_signal) {
 80138d0:	b1da      	cbz	r2, 801390a <sync_finish+0x4e>
		signal = data->sync.signal;
 80138d2:	46b8      	mov	r8, r7
	struct sys_notify *notify = NULL;
 80138d4:	461f      	mov	r7, r3
	(void)validate_isw_monitoring(dev);
 80138d6:	4630      	mov	r0, r6
	data->sync.ptr = NULL;
 80138d8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	data->sync_signal = false;
 80138dc:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
	data->sync_state = SYNCSM_IDLE;
 80138e0:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	(void)validate_isw_monitoring(dev);
 80138e4:	f7f7 f850 	bl	800a988 <validate_isw_monitoring>
	k_sem_give(&data->lock);
 80138e8:	f104 0018 	add.w	r0, r4, #24
 80138ec:	f7ff ff4d 	bl	801378a <k_sem_give>
	if (notify != NULL) {
 80138f0:	b16f      	cbz	r7, 801390e <sync_finish+0x52>
			(maxim_ds3231_notify_callback)sys_notify_finalize(notify, rc);
 80138f2:	4629      	mov	r1, r5
 80138f4:	4638      	mov	r0, r7
 80138f6:	f7fd fa45 	bl	8010d84 <sys_notify_finalize>
		if (cb) {
 80138fa:	4603      	mov	r3, r0
 80138fc:	b180      	cbz	r0, 8013920 <sync_finish+0x64>
			cb(dev, notify, rc);
 80138fe:	462a      	mov	r2, r5
 8013900:	4639      	mov	r1, r7
 8013902:	4630      	mov	r0, r6
}
 8013904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			cb(dev, notify, rc);
 8013908:	4718      	bx	r3
	struct k_poll_signal *signal = NULL;
 801390a:	4698      	mov	r8, r3
 801390c:	e7e3      	b.n	80138d6 <sync_finish+0x1a>
	} else if (signal != NULL) {
 801390e:	f1b8 0f00 	cmp.w	r8, #0
 8013912:	d005      	beq.n	8013920 <sync_finish+0x64>
	return z_impl_k_poll_signal_raise(sig, result);
 8013914:	4629      	mov	r1, r5
 8013916:	4640      	mov	r0, r8
}
 8013918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801391c:	f7fb b93a 	b.w	800eb94 <z_impl_k_poll_signal_raise>
 8013920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013924 <rsc_stat>:
{
 8013924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct ds3231_config *cfg = dev->config;
 8013926:	6846      	ldr	r6, [r0, #4]
	struct ds3231_data *data = dev->data;
 8013928:	6905      	ldr	r5, [r0, #16]
	uint8_t addr = offsetof(struct register_map, ctrl_stat);
 801392a:	230f      	movs	r3, #15
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &rp->ctrl_stat,
 801392c:	360c      	adds	r6, #12
	uint8_t addr = offsetof(struct register_map, ctrl_stat);
 801392e:	f88d 3003 	strb.w	r3, [sp, #3]
{
 8013932:	460f      	mov	r7, r1
 8013934:	4614      	mov	r4, r2
	rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr), &rp->ctrl_stat,
 8013936:	2301      	movs	r3, #1
 8013938:	f105 0213 	add.w	r2, r5, #19
 801393c:	f10d 0103 	add.w	r1, sp, #3
 8013940:	4630      	mov	r0, r6
 8013942:	f7ff ff49 	bl	80137d8 <i2c_write_read_dt.constprop.0>
	if (rc >= 0) {
 8013946:	2800      	cmp	r0, #0
 8013948:	db06      	blt.n	8013958 <rsc_stat+0x34>
		uint8_t stat = rp->ctrl_stat & ~clear;
 801394a:	7ce9      	ldrb	r1, [r5, #19]
 801394c:	ea21 0204 	bic.w	r2, r1, r4
		if (rp->ctrl_stat != stat) {
 8013950:	4291      	cmp	r1, r2
		uint8_t stat = rp->ctrl_stat & ~clear;
 8013952:	b253      	sxtb	r3, r2
		if (rp->ctrl_stat != stat) {
 8013954:	d102      	bne.n	801395c <rsc_stat+0x38>
			rc = rp->ctrl_stat;
 8013956:	7ce8      	ldrb	r0, [r5, #19]
}
 8013958:	b003      	add	sp, #12
 801395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				stat | (ign & ~(set | clear)),
 801395c:	433c      	orrs	r4, r7
 801395e:	43e4      	mvns	r4, r4
			uint8_t buf[2] = {
 8013960:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013964:	f88d 2004 	strb.w	r2, [sp, #4]
				stat | (ign & ~(set | clear)),
 8013968:	f024 047c 	bic.w	r4, r4, #124	; 0x7c
 801396c:	431c      	orrs	r4, r3
			rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 801396e:	2202      	movs	r2, #2
 8013970:	a901      	add	r1, sp, #4
 8013972:	4630      	mov	r0, r6
			uint8_t buf[2] = {
 8013974:	f88d 4005 	strb.w	r4, [sp, #5]
			rc = i2c_write_dt(&cfg->bus, buf, sizeof(buf));
 8013978:	f7ff ff48 	bl	801380c <i2c_write_dt>
		if (rc >= 0) {
 801397c:	2800      	cmp	r0, #0
 801397e:	dbeb      	blt.n	8013958 <rsc_stat+0x34>
 8013980:	e7e9      	b.n	8013956 <rsc_stat+0x32>

08013982 <check_handled_alarms>:
{
 8013982:	b510      	push	{r4, lr}
	mask &= rp->ctrl;
 8013984:	6903      	ldr	r3, [r0, #16]
 8013986:	7c9c      	ldrb	r4, [r3, #18]
 8013988:	f004 0403 	and.w	r4, r4, #3
	int rv = rsc_stat(dev, 0U, mask);
 801398c:	4622      	mov	r2, r4
 801398e:	2100      	movs	r1, #0
 8013990:	f7ff ffc8 	bl	8013924 <rsc_stat>
	if (rv > 0) {
 8013994:	2800      	cmp	r0, #0
		rv &= mask;
 8013996:	bfc8      	it	gt
 8013998:	4020      	andgt	r0, r4
}
 801399a:	bd10      	pop	{r4, pc}

0801399c <set_alarm>:
{
 801399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a0:	b091      	sub	sp, #68	; 0x44
	const struct ds3231_config *cfg = dev->config;
 80139a2:	6843      	ldr	r3, [r0, #4]
	struct ds3231_data *data = dev->data;
 80139a4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 80139a8:	9301      	str	r3, [sp, #4]
{
 80139aa:	4607      	mov	r7, r0
 80139ac:	4615      	mov	r5, r2
	if (id == 0) {
 80139ae:	460e      	mov	r6, r1
 80139b0:	b1e9      	cbz	r1, 80139ee <set_alarm+0x52>
	} else if (id < cfg->generic.channels) {
 80139b2:	7a5b      	ldrb	r3, [r3, #9]
 80139b4:	428b      	cmp	r3, r1
 80139b6:	d917      	bls.n	80139e8 <set_alarm+0x4c>
		len = sizeof(data->registers.alarm2);
 80139b8:	f04f 0a03 	mov.w	sl, #3
		addr = offsetof(struct register_map, alarm2);
 80139bc:	f04f 090b 	mov.w	r9, #11
	uint8_t buf[5] = { addr };
 80139c0:	2300      	movs	r3, #0
 80139c2:	f8cd 3009 	str.w	r3, [sp, #9]
 80139c6:	e9d5 2300 	ldrd	r2, r3, [r5]
	int rc = encode_alarm(buf + 1, (id == 0), cp->time, cp->flags);
 80139ca:	7c2c      	ldrb	r4, [r5, #16]
	uint8_t buf[5] = { addr };
 80139cc:	f88d 9008 	strb.w	r9, [sp, #8]
	(void)gmtime_r(&time, &tm);
 80139d0:	a907      	add	r1, sp, #28
 80139d2:	a804      	add	r0, sp, #16
 80139d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80139d8:	f7fb f942 	bl	800ec60 <gmtime_r>
	if (!is_power_of_two(1U + (0x0F & ~flags))) {
 80139dc:	43e3      	mvns	r3, r4
 80139de:	f003 030f 	and.w	r3, r3, #15
 80139e2:	1c5a      	adds	r2, r3, #1
 80139e4:	421a      	tst	r2, r3
 80139e6:	d007      	beq.n	80139f8 <set_alarm+0x5c>
		return -EINVAL;
 80139e8:	f06f 0415 	mvn.w	r4, #21
 80139ec:	e05c      	b.n	8013aa8 <set_alarm+0x10c>
		len = sizeof(data->registers.alarm1);
 80139ee:	f04f 0a04 	mov.w	sl, #4
		addr = offsetof(struct register_map, alarm1);
 80139f2:	f04f 0907 	mov.w	r9, #7
 80139f6:	e7e3      	b.n	80139c0 <set_alarm+0x24>
	if (with_sec) {
 80139f8:	2e00      	cmp	r6, #0
 80139fa:	d15b      	bne.n	8013ab4 <set_alarm+0x118>
		if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNSE) {
 80139fc:	07e2      	lsls	r2, r4, #31
 80139fe:	d457      	bmi.n	8013ab0 <set_alarm+0x114>
			val = bin2bcd(tm.tm_sec);
 8013a00:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8013a04:	f7ff fe91 	bl	801372a <bin2bcd>
		*ap++ = val;
 8013a08:	f88d 0009 	strb.w	r0, [sp, #9]
 8013a0c:	f10d 010a 	add.w	r1, sp, #10
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNMN) {
 8013a10:	07a3      	lsls	r3, r4, #30
 8013a12:	d452      	bmi.n	8013aba <set_alarm+0x11e>
		val = bin2bcd(tm.tm_min);
 8013a14:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8013a18:	f7ff fe87 	bl	801372a <bin2bcd>
	*ap++ = val;
 8013a1c:	7008      	strb	r0, [r1, #0]
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNHR) {
 8013a1e:	0760      	lsls	r0, r4, #29
 8013a20:	d44d      	bmi.n	8013abe <set_alarm+0x122>
		val = bin2bcd(tm.tm_hour);
 8013a22:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8013a26:	f7ff fe80 	bl	801372a <bin2bcd>
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNDA) {
 8013a2a:	0722      	lsls	r2, r4, #28
	*ap++ = val;
 8013a2c:	7048      	strb	r0, [r1, #1]
	if (flags & MAXIM_DS3231_ALARM_FLAGS_IGNDA) {
 8013a2e:	d44d      	bmi.n	8013acc <set_alarm+0x130>
	} else if (flags & MAXIM_DS3231_ALARM_FLAGS_DOW) {
 8013a30:	06e3      	lsls	r3, r4, #27
 8013a32:	d546      	bpl.n	8013ac2 <set_alarm+0x126>
		val = REG_DAYDATE_DOW | (tm.tm_wday + 1);
 8013a34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013a36:	3001      	adds	r0, #1
 8013a38:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8013a3c:	b2c0      	uxtb	r0, r0
	rc = rsc_stat(dev, 0U, (MAXIM_DS3231_ALARM1 << id));
 8013a3e:	2301      	movs	r3, #1
 8013a40:	40b3      	lsls	r3, r6
 8013a42:	fa5f fb83 	uxtb.w	fp, r3
	*ap++ = val;
 8013a46:	7088      	strb	r0, [r1, #2]
	rc = rsc_stat(dev, 0U, (MAXIM_DS3231_ALARM1 << id));
 8013a48:	465a      	mov	r2, fp
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	4638      	mov	r0, r7
 8013a4e:	f7ff ff69 	bl	8013924 <rsc_stat>
	if (rc >= 0) {
 8013a52:	1e04      	subs	r4, r0, #0
 8013a54:	db28      	blt.n	8013aa8 <set_alarm+0x10c>
		rc = i2c_write_dt(&cfg->bus, buf, len + 1);
 8013a56:	9801      	ldr	r0, [sp, #4]
 8013a58:	f10a 0201 	add.w	r2, sl, #1
 8013a5c:	a902      	add	r1, sp, #8
 8013a5e:	300c      	adds	r0, #12
 8013a60:	f7ff fed4 	bl	801380c <i2c_write_dt>
	if ((rc >= 0)
 8013a64:	1e04      	subs	r4, r0, #0
 8013a66:	db1f      	blt.n	8013aa8 <set_alarm+0x10c>
	    && (cp->handler != NULL)) {
 8013a68:	68aa      	ldr	r2, [r5, #8]
 8013a6a:	b132      	cbz	r2, 8013a7a <set_alarm+0xde>
		rc = sc_ctrl(dev, MAXIM_DS3231_ALARM1 << id, 0);
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	4659      	mov	r1, fp
 8013a70:	4638      	mov	r0, r7
 8013a72:	f7ff fedb 	bl	801382c <sc_ctrl>
	if (rc >= 0) {
 8013a76:	1e04      	subs	r4, r0, #0
 8013a78:	db16      	blt.n	8013aa8 <set_alarm+0x10c>
		memmove(&data->registers.sec + addr, buf + 1, len);
 8013a7a:	f108 0004 	add.w	r0, r8, #4
__ssp_bos_icheck3(memmove, void *, const void *)
 8013a7e:	4652      	mov	r2, sl
 8013a80:	f10d 0109 	add.w	r1, sp, #9
 8013a84:	4448      	add	r0, r9
 8013a86:	f002 fd78 	bl	801657a <memmove>
		data->alarm_handler[id] = cp->handler;
 8013a8a:	eb08 0386 	add.w	r3, r8, r6, lsl #2
 8013a8e:	68aa      	ldr	r2, [r5, #8]
 8013a90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		data->alarm_user_data[id] = cp->user_data;
 8013a94:	68ea      	ldr	r2, [r5, #12]
 8013a96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		data->alarm_flags[id] = cp->flags;
 8013a9a:	4446      	add	r6, r8
 8013a9c:	7c2b      	ldrb	r3, [r5, #16]
 8013a9e:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
		validate_isw_monitoring(dev);
 8013aa2:	4638      	mov	r0, r7
 8013aa4:	f7f6 ff70 	bl	800a988 <validate_isw_monitoring>
}
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	b011      	add	sp, #68	; 0x44
 8013aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			val = REG_ALARM_IGN;
 8013ab0:	2080      	movs	r0, #128	; 0x80
 8013ab2:	e7a9      	b.n	8013a08 <set_alarm+0x6c>
 8013ab4:	f10d 0109 	add.w	r1, sp, #9
 8013ab8:	e7aa      	b.n	8013a10 <set_alarm+0x74>
		val = REG_ALARM_IGN;
 8013aba:	2080      	movs	r0, #128	; 0x80
 8013abc:	e7ae      	b.n	8013a1c <set_alarm+0x80>
		val = REG_ALARM_IGN;
 8013abe:	2080      	movs	r0, #128	; 0x80
 8013ac0:	e7b3      	b.n	8013a2a <set_alarm+0x8e>
		val = bin2bcd(tm.tm_mday);
 8013ac2:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8013ac6:	f7ff fe30 	bl	801372a <bin2bcd>
 8013aca:	e7b8      	b.n	8013a3e <set_alarm+0xa2>
		val = REG_ALARM_IGN;
 8013acc:	2080      	movs	r0, #128	; 0x80
 8013ace:	e7b6      	b.n	8013a3e <set_alarm+0xa2>

08013ad0 <decode_time>:
{
 8013ad0:	b510      	push	{r4, lr}
 8013ad2:	4603      	mov	r3, r0
	if (with_sec) {
 8013ad4:	b152      	cbz	r2, 8013aec <decode_time+0x1c>
		uint8_t reg = *rp++;
 8013ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
	return ((10 * (bcd >> 4)) + (bcd & 0x0F));
 8013ada:	f3c2 1002 	ubfx	r0, r2, #4, #3
 8013ade:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013ae2:	f002 020f 	and.w	r2, r2, #15
		tp->tm_sec = bcd2bin(reg & 0x7F);
 8013ae6:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8013aea:	601a      	str	r2, [r3, #0]
	reg = *rp++;
 8013aec:	4608      	mov	r0, r1
 8013aee:	f810 2b02 	ldrb.w	r2, [r0], #2
 8013af2:	f3c2 1402 	ubfx	r4, r2, #4, #3
 8013af6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8013afa:	f002 020f 	and.w	r2, r2, #15
	tp->tm_min = bcd2bin(reg & 0x7F);
 8013afe:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8013b02:	605a      	str	r2, [r3, #4]
	reg = *rp++;
 8013b04:	784a      	ldrb	r2, [r1, #1]
	if (REG_HOURS_12H & reg) {
 8013b06:	0654      	lsls	r4, r2, #25
 8013b08:	f002 010f 	and.w	r1, r2, #15
 8013b0c:	d504      	bpl.n	8013b18 <decode_time+0x48>
		if (REG_HOURS_10 & reg) {
 8013b0e:	0692      	lsls	r2, r2, #26
			tp->tm_hour += 12;
 8013b10:	bf48      	it	mi
 8013b12:	3116      	addmi	r1, #22
 8013b14:	6099      	str	r1, [r3, #8]
}
 8013b16:	bd10      	pop	{r4, pc}
		tp->tm_hour += 10 * ((reg >> 4) & 0x03);
 8013b18:	f3c2 1201 	ubfx	r2, r2, #4, #2
 8013b1c:	240a      	movs	r4, #10
 8013b1e:	fb14 1202 	smlabb	r2, r4, r2, r1
 8013b22:	609a      	str	r2, [r3, #8]
	return rp;
 8013b24:	e7f7      	b.n	8013b16 <decode_time+0x46>

08013b26 <decode_rtc>:
{
 8013b26:	b510      	push	{r4, lr}
 8013b28:	b08a      	sub	sp, #40	; 0x28
 8013b2a:	4604      	mov	r4, r0
	struct tm tm = { 0 };
 8013b2c:	2224      	movs	r2, #36	; 0x24
 8013b2e:	2100      	movs	r1, #0
 8013b30:	a801      	add	r0, sp, #4
 8013b32:	f002 fd3c 	bl	80165ae <memset>
	decode_time(&tm, &rp->sec, true);
 8013b36:	1d21      	adds	r1, r4, #4
 8013b38:	2201      	movs	r2, #1
 8013b3a:	a801      	add	r0, sp, #4
 8013b3c:	f7ff ffc8 	bl	8013ad0 <decode_time>
	tm.tm_wday = (rp->dow & 0x07) - 1;
 8013b40:	79e3      	ldrb	r3, [r4, #7]
	tm.tm_mon = 10 * (((0xF0 & ~REG_MONCEN_CENTURY) & rp->moncen) >> 4)
 8013b42:	7a60      	ldrb	r0, [r4, #9]
	tm.tm_wday = (rp->dow & 0x07) - 1;
 8013b44:	f003 0307 	and.w	r3, r3, #7
 8013b48:	3b01      	subs	r3, #1
 8013b4a:	9307      	str	r3, [sp, #28]
	tm.tm_mday = bcd2bin(rp->dom & 0x3F);
 8013b4c:	7a23      	ldrb	r3, [r4, #8]
 8013b4e:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8013b52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8013b56:	f003 030f 	and.w	r3, r3, #15
 8013b5a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013b5e:	9304      	str	r3, [sp, #16]
		    + (rp->moncen & 0x0F) - 1;
 8013b60:	f3c0 1102 	ubfx	r1, r0, #4, #3
 8013b64:	f000 020f 	and.w	r2, r0, #15
 8013b68:	230a      	movs	r3, #10
 8013b6a:	fb13 2301 	smlabb	r3, r3, r1, r2
	tm.tm_year = bcd2bin(rp->year);
 8013b6e:	7aa2      	ldrb	r2, [r4, #10]
		    + (rp->moncen & 0x0F) - 1;
 8013b70:	3b01      	subs	r3, #1
	tm.tm_mon = 10 * (((0xF0 & ~REG_MONCEN_CENTURY) & rp->moncen) >> 4)
 8013b72:	9305      	str	r3, [sp, #20]
 8013b74:	0913      	lsrs	r3, r2, #4
 8013b76:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8013b7a:	f002 030f 	and.w	r3, r2, #15
 8013b7e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	tm.tm_year = bcd2bin(rp->year);
 8013b82:	b2db      	uxtb	r3, r3
	if (REG_MONCEN_CENTURY & rp->moncen) {
 8013b84:	0602      	lsls	r2, r0, #24
		tm.tm_year += 100;
 8013b86:	bf48      	it	mi
 8013b88:	3364      	addmi	r3, #100	; 0x64
	data->rtc_registers = timeutil_timegm(&tm);
 8013b8a:	a801      	add	r0, sp, #4
		tm.tm_year += 100;
 8013b8c:	9306      	str	r3, [sp, #24]
	data->rtc_registers = timeutil_timegm(&tm);
 8013b8e:	f7fd f94b 	bl	8010e28 <timeutil_timegm>
 8013b92:	e9c4 0136 	strd	r0, r1, [r4, #216]	; 0xd8
}
 8013b96:	b00a      	add	sp, #40	; 0x28
 8013b98:	bd10      	pop	{r4, pc}

08013b9a <read_time>:
{
 8013b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ds3231_data *data = dev->data;
 8013b9c:	6907      	ldr	r7, [r0, #16]
	const struct ds3231_config *cfg = dev->config;
 8013b9e:	6840      	ldr	r0, [r0, #4]
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8013ba0:	2307      	movs	r3, #7
{
 8013ba2:	460d      	mov	r5, r1
	uint8_t addr = 0;
 8013ba4:	2600      	movs	r6, #0
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8013ba6:	1d3a      	adds	r2, r7, #4
 8013ba8:	eb0d 0103 	add.w	r1, sp, r3
 8013bac:	300c      	adds	r0, #12
	uint8_t addr = 0;
 8013bae:	f88d 6007 	strb.w	r6, [sp, #7]
	int rc = i2c_write_read_dt(&cfg->bus, &addr, sizeof(addr),
 8013bb2:	f7ff fe11 	bl	80137d8 <i2c_write_read_dt.constprop.0>
	if (rc >= 0) {
 8013bb6:	1e04      	subs	r4, r0, #0
 8013bb8:	db04      	blt.n	8013bc4 <read_time+0x2a>
		*time = decode_rtc(data);
 8013bba:	4638      	mov	r0, r7
 8013bbc:	f7ff ffb3 	bl	8013b26 <decode_rtc>
 8013bc0:	e9c5 0600 	strd	r0, r6, [r5]
}
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	b003      	add	sp, #12
 8013bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013bca <ds3231_counter_get_value>:
{
 8013bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ds3231_data *data = dev->data;
 8013bcc:	6905      	ldr	r5, [r0, #16]
	time_t time = 0;
 8013bce:	2200      	movs	r2, #0
	k_sem_take(&data->lock, K_FOREVER);
 8013bd0:	3518      	adds	r5, #24
	time_t time = 0;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	e9cd 2300 	strd	r2, r3, [sp]
{
 8013bd8:	4604      	mov	r4, r0
	k_sem_take(&data->lock, K_FOREVER);
 8013bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013be2:	4628      	mov	r0, r5
{
 8013be4:	460e      	mov	r6, r1
	k_sem_take(&data->lock, K_FOREVER);
 8013be6:	f7ff fe0f 	bl	8013808 <k_sem_take.constprop.0.isra.0>
	int rc = read_time(dev, &time);
 8013bea:	4669      	mov	r1, sp
 8013bec:	4620      	mov	r0, r4
 8013bee:	f7ff ffd4 	bl	8013b9a <read_time>
 8013bf2:	4604      	mov	r4, r0
	k_sem_give(&data->lock);
 8013bf4:	4628      	mov	r0, r5
 8013bf6:	f7ff fdc8 	bl	801378a <k_sem_give>
	if (rc >= 0) {
 8013bfa:	2c00      	cmp	r4, #0
		*ticks = time;
 8013bfc:	bfa4      	itt	ge
 8013bfe:	9b00      	ldrge	r3, [sp, #0]
 8013c00:	6033      	strge	r3, [r6, #0]
}
 8013c02:	4620      	mov	r0, r4
 8013c04:	b002      	add	sp, #8
 8013c06:	bd70      	pop	{r4, r5, r6, pc}

08013c08 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8013c08:	6843      	ldr	r3, [r0, #4]
 8013c0a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8013c0c:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8013c0e:	600b      	str	r3, [r1, #0]
}
 8013c10:	2000      	movs	r0, #0
 8013c12:	4770      	bx	lr

08013c14 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8013c14:	6843      	ldr	r3, [r0, #4]
 8013c16:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8013c18:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8013c1a:	4042      	eors	r2, r0
 8013c1c:	400a      	ands	r2, r1
 8013c1e:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8013c20:	615a      	str	r2, [r3, #20]
}
 8013c22:	2000      	movs	r0, #0
 8013c24:	4770      	bx	lr

08013c26 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8013c26:	6843      	ldr	r3, [r0, #4]
 8013c28:	685b      	ldr	r3, [r3, #4]
}
 8013c2a:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8013c2c:	6199      	str	r1, [r3, #24]
}
 8013c2e:	4770      	bx	lr

08013c30 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8013c30:	6843      	ldr	r3, [r0, #4]
 8013c32:	685b      	ldr	r3, [r3, #4]
}
 8013c34:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8013c36:	6299      	str	r1, [r3, #40]	; 0x28
 8013c38:	4770      	bx	lr

08013c3a <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8013c3a:	6843      	ldr	r3, [r0, #4]
 8013c3c:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8013c3e:	6953      	ldr	r3, [r2, #20]
 8013c40:	404b      	eors	r3, r1
 8013c42:	6153      	str	r3, [r2, #20]
}
 8013c44:	2000      	movs	r0, #0
 8013c46:	4770      	bx	lr

08013c48 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 8013c48:	6903      	ldr	r3, [r0, #16]
	return list->head;
 8013c4a:	6898      	ldr	r0, [r3, #8]
{
 8013c4c:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8013c4e:	b158      	cbz	r0, 8013c68 <gpio_stm32_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8013c50:	2400      	movs	r4, #0
 8013c52:	4281      	cmp	r1, r0
 8013c54:	d112      	bne.n	8013c7c <gpio_stm32_manage_callback+0x34>
	return node->next;
 8013c56:	6808      	ldr	r0, [r1, #0]
	return list->tail;
 8013c58:	68dd      	ldr	r5, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
 8013c5a:	b954      	cbnz	r4, 8013c72 <gpio_stm32_manage_callback+0x2a>
 8013c5c:	428d      	cmp	r5, r1
	list->head = node;
 8013c5e:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8013c60:	d100      	bne.n	8013c64 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8013c62:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8013c64:	2000      	movs	r0, #0
 8013c66:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
 8013c68:	b96a      	cbnz	r2, 8013c86 <gpio_stm32_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8013c6a:	2000      	movs	r0, #0
}
 8013c6c:	bd30      	pop	{r4, r5, pc}
 8013c6e:	4628      	mov	r0, r5
 8013c70:	e7ef      	b.n	8013c52 <gpio_stm32_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8013c72:	428d      	cmp	r5, r1
	parent->next = child;
 8013c74:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8013c76:	bf08      	it	eq
 8013c78:	60dc      	streq	r4, [r3, #12]
}
 8013c7a:	e7f3      	b.n	8013c64 <gpio_stm32_manage_callback+0x1c>
	return node->next;
 8013c7c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8013c7e:	4604      	mov	r4, r0
 8013c80:	2d00      	cmp	r5, #0
 8013c82:	d1f4      	bne.n	8013c6e <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8013c84:	b13a      	cbz	r2, 8013c96 <gpio_stm32_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
 8013c86:	68d8      	ldr	r0, [r3, #12]
	parent->next = child;
 8013c88:	689a      	ldr	r2, [r3, #8]
 8013c8a:	600a      	str	r2, [r1, #0]
	list->head = node;
 8013c8c:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	d1eb      	bne.n	8013c6a <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8013c92:	60d9      	str	r1, [r3, #12]
}
 8013c94:	e7ea      	b.n	8013c6c <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8013c96:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8013c9a:	e7e7      	b.n	8013c6c <gpio_stm32_manage_callback+0x24>

08013c9c <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8013c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8013c9e:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8013ca0:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8013ca2:	6867      	ldr	r7, [r4, #4]
 8013ca4:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8013ca6:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8013caa:	ea27 0700 	bic.w	r7, r7, r0
 8013cae:	408e      	lsls	r6, r1
 8013cb0:	433e      	orrs	r6, r7
 8013cb2:	6066      	str	r6, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013cb4:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8013cb8:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8013cbc:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8013cc0:	f04f 0e03 	mov.w	lr, #3
 8013cc4:	007f      	lsls	r7, r7, #1
 8013cc6:	fa0e f707 	lsl.w	r7, lr, r7
 8013cca:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013cce:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8013cd2:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8013cd6:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8013cda:	007f      	lsls	r7, r7, #1
 8013cdc:	40be      	lsls	r6, r7
 8013cde:	ea46 060c 	orr.w	r6, r6, ip
 8013ce2:	60a6      	str	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013ce4:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8013ce8:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8013cec:	68e7      	ldr	r7, [r4, #12]
 8013cee:	0076      	lsls	r6, r6, #1
 8013cf0:	fa0e f606 	lsl.w	r6, lr, r6
 8013cf4:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013cf8:	fa90 f6a0 	rbit	r6, r0
  return __builtin_clz(value);
 8013cfc:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8013d00:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8013d04:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8013d06:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8013d0a:	40b2      	lsls	r2, r6
 8013d0c:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8013d0e:	2d20      	cmp	r5, #32
 8013d10:	60e2      	str	r2, [r4, #12]
 8013d12:	d115      	bne.n	8013d40 <gpio_stm32_configure_raw.isra.0+0xa4>
		if (pin < 8) {
 8013d14:	2907      	cmp	r1, #7
 8013d16:	dc2b      	bgt.n	8013d70 <gpio_stm32_configure_raw.isra.0+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d18:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8013d1c:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8013d1e:	b32a      	cbz	r2, 8013d6c <gpio_stm32_configure_raw.isra.0+0xd0>
  return __builtin_clz(value);
 8013d20:	fab2 f282 	clz	r2, r2
 8013d24:	0092      	lsls	r2, r2, #2
 8013d26:	260f      	movs	r6, #15
 8013d28:	fa06 f202 	lsl.w	r2, r6, r2
 8013d2c:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d30:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8013d34:	fab2 f282 	clz	r2, r2
 8013d38:	0092      	lsls	r2, r2, #2
 8013d3a:	4093      	lsls	r3, r2
 8013d3c:	430b      	orrs	r3, r1
 8013d3e:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d40:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8013d44:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8013d48:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d4a:	fa90 f0a0 	rbit	r0, r0
 8013d4e:	005b      	lsls	r3, r3, #1
 8013d50:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8013d52:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8013d56:	092d      	lsrs	r5, r5, #4
 8013d58:	fa01 f303 	lsl.w	r3, r1, r3
 8013d5c:	0040      	lsls	r0, r0, #1
 8013d5e:	ea22 0303 	bic.w	r3, r2, r3
 8013d62:	fa05 f000 	lsl.w	r0, r5, r0
 8013d66:	4318      	orrs	r0, r3
 8013d68:	6020      	str	r0, [r4, #0]
}
 8013d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8013d6c:	462a      	mov	r2, r5
 8013d6e:	e7d9      	b.n	8013d24 <gpio_stm32_configure_raw.isra.0+0x88>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8013d70:	0a02      	lsrs	r2, r0, #8
 8013d72:	6a66      	ldr	r6, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d74:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8013d78:	b181      	cbz	r1, 8013d9c <gpio_stm32_configure_raw.isra.0+0x100>
  return __builtin_clz(value);
 8013d7a:	fab1 f181 	clz	r1, r1
 8013d7e:	0089      	lsls	r1, r1, #2
 8013d80:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013d82:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8013d86:	fab2 f282 	clz	r2, r2
 8013d8a:	fa07 f101 	lsl.w	r1, r7, r1
 8013d8e:	0092      	lsls	r2, r2, #2
 8013d90:	ea26 0101 	bic.w	r1, r6, r1
 8013d94:	4093      	lsls	r3, r2
 8013d96:	430b      	orrs	r3, r1
 8013d98:	6263      	str	r3, [r4, #36]	; 0x24
}
 8013d9a:	e7d1      	b.n	8013d40 <gpio_stm32_configure_raw.isra.0+0xa4>
    return 32U;
 8013d9c:	4629      	mov	r1, r5
 8013d9e:	e7ee      	b.n	8013d7e <gpio_stm32_configure_raw.isra.0+0xe2>

08013da0 <gpio_stm32_config>:
{
 8013da0:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8013da2:	039a      	lsls	r2, r3, #14
{
 8013da4:	b510      	push	{r4, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8013da6:	d51a      	bpl.n	8013dde <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8013da8:	079c      	lsls	r4, r3, #30
 8013daa:	d511      	bpl.n	8013dd0 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8013dac:	075a      	lsls	r2, r3, #29
 8013dae:	d52f      	bpl.n	8013e10 <gpio_stm32_config+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8013db0:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8013db2:	06dc      	lsls	r4, r3, #27
 8013db4:	d50e      	bpl.n	8013dd4 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8013db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8013dba:	f413 2f00 	tst.w	r3, #524288	; 0x80000
	const struct gpio_stm32_config *cfg = dev->config;
 8013dbe:	6844      	ldr	r4, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8013dc0:	d11c      	bne.n	8013dfc <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8013dc2:	035b      	lsls	r3, r3, #13
 8013dc4:	d514      	bpl.n	8013df0 <gpio_stm32_config+0x50>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8013dc6:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8013dc8:	2301      	movs	r3, #1
 8013dca:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8013dcc:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8013dce:	e00f      	b.n	8013df0 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8013dd0:	2210      	movs	r2, #16
 8013dd2:	e7ee      	b.n	8013db2 <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8013dd4:	069c      	lsls	r4, r3, #26
 8013dd6:	d5f0      	bpl.n	8013dba <gpio_stm32_config+0x1a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8013dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8013ddc:	e7ed      	b.n	8013dba <gpio_stm32_config+0x1a>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8013dde:	03dc      	lsls	r4, r3, #15
 8013de0:	d511      	bpl.n	8013e06 <gpio_stm32_config+0x66>
		if ((flags & GPIO_PULL_UP) != 0) {
 8013de2:	06da      	lsls	r2, r3, #27
 8013de4:	d411      	bmi.n	8013e0a <gpio_stm32_config+0x6a>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8013de6:	f013 0220 	ands.w	r2, r3, #32
 8013dea:	bf18      	it	ne
 8013dec:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8013df0:	6840      	ldr	r0, [r0, #4]
 8013df2:	2300      	movs	r3, #0
 8013df4:	f7ff ff52 	bl	8013c9c <gpio_stm32_configure_raw.isra.0>
	return 0;
 8013df8:	2000      	movs	r0, #0
}
 8013dfa:	bd10      	pop	{r4, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8013dfc:	6864      	ldr	r4, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8013dfe:	2301      	movs	r3, #1
 8013e00:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8013e02:	61a3      	str	r3, [r4, #24]
	return 0;
 8013e04:	e7f4      	b.n	8013df0 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8013e06:	2230      	movs	r2, #48	; 0x30
 8013e08:	e7f2      	b.n	8013df0 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8013e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e0e:	e7ef      	b.n	8013df0 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8013e10:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8013e14:	e7f1      	b.n	8013dfa <gpio_stm32_config+0x5a>

08013e16 <gpio_stm32_isr>:
{
 8013e16:	460b      	mov	r3, r1
 8013e18:	6889      	ldr	r1, [r1, #8]
 8013e1a:	b570      	push	{r4, r5, r6, lr}
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8013e1c:	b169      	cbz	r1, 8013e3a <gpio_stm32_isr+0x24>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8013e1e:	2501      	movs	r5, #1
 8013e20:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8013e22:	680c      	ldr	r4, [r1, #0]
 8013e24:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8013e26:	688a      	ldr	r2, [r1, #8]
 8013e28:	402a      	ands	r2, r5
 8013e2a:	d002      	beq.n	8013e32 <gpio_stm32_isr+0x1c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8013e2c:	684b      	ldr	r3, [r1, #4]
 8013e2e:	4630      	mov	r0, r6
 8013e30:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8013e32:	b114      	cbz	r4, 8013e3a <gpio_stm32_isr+0x24>
 8013e34:	4621      	mov	r1, r4
 8013e36:	6824      	ldr	r4, [r4, #0]
 8013e38:	e7f5      	b.n	8013e26 <gpio_stm32_isr+0x10>
}
 8013e3a:	bd70      	pop	{r4, r5, r6, pc}

08013e3c <gpio_stm32_configure>:
{
 8013e3c:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8013e3e:	6840      	ldr	r0, [r0, #4]
 8013e40:	f7ff ff2c 	bl	8013c9c <gpio_stm32_configure_raw.isra.0>
}
 8013e44:	2000      	movs	r0, #0
 8013e46:	bd08      	pop	{r3, pc}

08013e48 <stm32_i2c_enable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8013e48:	68c3      	ldr	r3, [r0, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	f042 0220 	orr.w	r2, r2, #32
 8013e50:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	f042 0210 	orr.w	r2, r2, #16
 8013e58:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e60:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013e68:	601a      	str	r2, [r3, #0]
}
 8013e6a:	4770      	bx	lr

08013e6c <stm32_i2c_disable_transfer_interrupts.isra.0>:
	I2C_TypeDef *i2c = cfg->i2c;
 8013e6c:	68c3      	ldr	r3, [r0, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8013e6e:	681a      	ldr	r2, [r3, #0]
 8013e70:	f022 0202 	bic.w	r2, r2, #2
 8013e74:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	f022 0204 	bic.w	r2, r2, #4
 8013e7c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8013e7e:	681a      	ldr	r2, [r3, #0]
 8013e80:	f022 0220 	bic.w	r2, r2, #32
 8013e84:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8013e86:	681a      	ldr	r2, [r3, #0]
 8013e88:	f022 0210 	bic.w	r2, r2, #16
 8013e8c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_TCIE);
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013e94:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8013e96:	681a      	ldr	r2, [r3, #0]
 8013e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013e9c:	601a      	str	r2, [r3, #0]
}
 8013e9e:	4770      	bx	lr

08013ea0 <stm32_i2c_master_mode_end>:
{
 8013ea0:	4603      	mov	r3, r0
	const struct i2c_stm32_config *cfg = dev->config;
 8013ea2:	6840      	ldr	r0, [r0, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 8013ea4:	68c1      	ldr	r1, [r0, #12]
{
 8013ea6:	b510      	push	{r4, lr}
	struct i2c_stm32_data *data = dev->data;
 8013ea8:	691c      	ldr	r4, [r3, #16]
	stm32_i2c_disable_transfer_interrupts(dev);
 8013eaa:	f7ff ffdf 	bl	8013e6c <stm32_i2c_disable_transfer_interrupts.isra.0>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8013eae:	680b      	ldr	r3, [r1, #0]
 8013eb0:	f023 0301 	bic.w	r3, r3, #1
 8013eb4:	600b      	str	r3, [r1, #0]
	z_impl_k_sem_give(sem);
 8013eb6:	4620      	mov	r0, r4
}
 8013eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ebc:	f7f9 bf3a 	b.w	800dd34 <z_impl_k_sem_give>

08013ec0 <stm32_i2c_event_isr>:
	struct i2c_stm32_data *data = dev->data;
 8013ec0:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8013ec2:	6843      	ldr	r3, [r0, #4]
	if (data->current.len) {
 8013ec4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
	I2C_TypeDef *i2c = cfg->i2c;
 8013ec6:	68db      	ldr	r3, [r3, #12]
{
 8013ec8:	b510      	push	{r4, lr}
	if (data->current.len) {
 8013eca:	b182      	cbz	r2, 8013eee <stm32_i2c_event_isr+0x2e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8013ecc:	699c      	ldr	r4, [r3, #24]
			LL_I2C_TransmitData8(i2c, *data->current.buf);
 8013ece:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8013ed0:	07a4      	lsls	r4, r4, #30
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8013ed2:	bf44      	itt	mi
 8013ed4:	7814      	ldrbmi	r4, [r2, #0]
 8013ed6:	629c      	strmi	r4, [r3, #40]	; 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8013ed8:	699c      	ldr	r4, [r3, #24]
 8013eda:	0764      	lsls	r4, r4, #29
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8013edc:	bf44      	itt	mi
 8013ede:	6a5c      	ldrmi	r4, [r3, #36]	; 0x24
 8013ee0:	7014      	strbmi	r4, [r2, #0]
		data->current.buf++;
 8013ee2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8013ee4:	3201      	adds	r2, #1
 8013ee6:	64ca      	str	r2, [r1, #76]	; 0x4c
		data->current.len--;
 8013ee8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8013eea:	3a01      	subs	r2, #1
 8013eec:	648a      	str	r2, [r1, #72]	; 0x48
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8013eee:	699a      	ldr	r2, [r3, #24]
 8013ef0:	06d2      	lsls	r2, r2, #27
 8013ef2:	d414      	bmi.n	8013f1e <stm32_i2c_event_isr+0x5e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8013ef4:	699a      	ldr	r2, [r3, #24]
 8013ef6:	0694      	lsls	r4, r2, #26
 8013ef8:	d41c      	bmi.n	8013f34 <stm32_i2c_event_isr+0x74>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8013efa:	699a      	ldr	r2, [r3, #24]
 8013efc:	0652      	lsls	r2, r2, #25
 8013efe:	d402      	bmi.n	8013f06 <stm32_i2c_event_isr+0x46>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 8013f00:	699a      	ldr	r2, [r3, #24]
 8013f02:	0614      	lsls	r4, r2, #24
 8013f04:	d515      	bpl.n	8013f32 <stm32_i2c_event_isr+0x72>
		if (data->current.msg->flags & I2C_MSG_STOP) {
 8013f06:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8013f08:	7a12      	ldrb	r2, [r2, #8]
 8013f0a:	0792      	lsls	r2, r2, #30
 8013f0c:	d40d      	bmi.n	8013f2a <stm32_i2c_event_isr+0x6a>
			stm32_i2c_disable_transfer_interrupts(dev);
 8013f0e:	6840      	ldr	r0, [r0, #4]
 8013f10:	f7ff ffac 	bl	8013e6c <stm32_i2c_disable_transfer_interrupts.isra.0>
}
 8013f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f18:	4608      	mov	r0, r1
 8013f1a:	f7f9 bf0b 	b.w	800dd34 <z_impl_k_sem_give>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8013f1e:	69da      	ldr	r2, [r3, #28]
 8013f20:	f042 0210 	orr.w	r2, r2, #16
 8013f24:	61da      	str	r2, [r3, #28]
		data->current.is_nack = 1U;
 8013f26:	2201      	movs	r2, #1
 8013f28:	63ca      	str	r2, [r1, #60]	; 0x3c
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8013f2a:	685a      	ldr	r2, [r3, #4]
 8013f2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013f30:	605a      	str	r2, [r3, #4]
}
 8013f32:	bd10      	pop	{r4, pc}
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8013f34:	69da      	ldr	r2, [r3, #28]
 8013f36:	f042 0220 	orr.w	r2, r2, #32
 8013f3a:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_RELOAD);
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8013f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f46:	605a      	str	r2, [r3, #4]
	stm32_i2c_master_mode_end(dev);
 8013f48:	f7ff bfaa 	b.w	8013ea0 <stm32_i2c_master_mode_end>

08013f4c <stm32_i2c_error_isr>:
	I2C_TypeDef *i2c = cfg->i2c;
 8013f4c:	6843      	ldr	r3, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8013f4e:	6901      	ldr	r1, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8013f50:	68db      	ldr	r3, [r3, #12]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ARLO) == (I2C_ISR_ARLO)) ? 1UL : 0UL);
 8013f52:	699a      	ldr	r2, [r3, #24]
 8013f54:	0592      	lsls	r2, r2, #22
 8013f56:	d507      	bpl.n	8013f68 <stm32_i2c_error_isr+0x1c>
  SET_BIT(I2Cx->ICR, I2C_ICR_ARLOCF);
 8013f58:	69da      	ldr	r2, [r3, #28]
 8013f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013f5e:	61da      	str	r2, [r3, #28]
		data->current.is_arlo = 1U;
 8013f60:	2301      	movs	r3, #1
 8013f62:	638b      	str	r3, [r1, #56]	; 0x38
	stm32_i2c_master_mode_end(dev);
 8013f64:	f7ff bf9c 	b.w	8013ea0 <stm32_i2c_master_mode_end>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BERR) == (I2C_ISR_BERR)) ? 1UL : 0UL);
 8013f68:	699a      	ldr	r2, [r3, #24]
 8013f6a:	05d2      	lsls	r2, r2, #23
 8013f6c:	d506      	bpl.n	8013f7c <stm32_i2c_error_isr+0x30>
  SET_BIT(I2Cx->ICR, I2C_ICR_BERRCF);
 8013f6e:	69da      	ldr	r2, [r3, #28]
 8013f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013f74:	61da      	str	r2, [r3, #28]
		data->current.is_err = 1U;
 8013f76:	2301      	movs	r3, #1
 8013f78:	640b      	str	r3, [r1, #64]	; 0x40
		goto end;
 8013f7a:	e7f3      	b.n	8013f64 <stm32_i2c_error_isr+0x18>
}
 8013f7c:	4770      	bx	lr

08013f7e <stm32_i2c_msg_write>:
{
 8013f7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8013f82:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8013f84:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8013f86:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 8013f8a:	684f      	ldr	r7, [r1, #4]
 8013f8c:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 8013f8e:	680f      	ldr	r7, [r1, #0]
 8013f90:	64e7      	str	r7, [r4, #76]	; 0x4c
	data->current.is_nack = 0U;
 8013f92:	f04f 0c00 	mov.w	ip, #0
{
 8013f96:	4605      	mov	r5, r0
	data->current.is_write = 1U;
 8013f98:	2701      	movs	r7, #1
	data->current.is_err = 0U;
 8013f9a:	e9c4 cc0f 	strd	ip, ip, [r4, #60]	; 0x3c
	data->current.is_write = 1U;
 8013f9e:	6367      	str	r7, [r4, #52]	; 0x34
	data->current.msg = msg;
 8013fa0:	6461      	str	r1, [r4, #68]	; 0x44
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_WRITE);
 8013fa2:	f8cd c000 	str.w	ip, [sp]
 8013fa6:	f7f7 f8a1 	bl	800b0ec <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 8013faa:	6868      	ldr	r0, [r5, #4]
 8013fac:	f7ff ff4c 	bl	8013e48 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8013fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8013fb4:	f043 0302 	orr.w	r3, r3, #2
 8013fb8:	f8c8 3000 	str.w	r3, [r8]
	return z_impl_k_sem_take(sem, timeout);
 8013fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	4620      	mov	r0, r4
 8013fc4:	f7f9 fedc 	bl	800dd80 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8013fc8:	b150      	cbz	r0, 8013fe0 <stm32_i2c_msg_write+0x62>
		stm32_i2c_master_mode_end(dev);
 8013fca:	4628      	mov	r0, r5
 8013fcc:	f7ff ff68 	bl	8013ea0 <stm32_i2c_master_mode_end>
 8013fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fd8:	4620      	mov	r0, r4
 8013fda:	f7f9 fed1 	bl	800dd80 <z_impl_k_sem_take>
		is_timeout = true;
 8013fde:	4638      	mov	r0, r7
	if (data->current.is_nack || data->current.is_err ||
 8013fe0:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8013fe4:	ea52 0503 	orrs.w	r5, r2, r3
	    data->current.is_arlo || is_timeout) {
 8013fe8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (data->current.is_nack || data->current.is_err ||
 8013fea:	d104      	bne.n	8013ff6 <stm32_i2c_msg_write+0x78>
 8013fec:	b921      	cbnz	r1, 8013ff8 <stm32_i2c_msg_write+0x7a>
	    data->current.is_arlo || is_timeout) {
 8013fee:	b940      	cbnz	r0, 8014002 <stm32_i2c_msg_write+0x84>
}
 8013ff0:	b002      	add	sp, #8
 8013ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8013ff6:	b109      	cbz	r1, 8013ffc <stm32_i2c_msg_write+0x7e>
		data->current.is_arlo = 0U;
 8013ff8:	2100      	movs	r1, #0
 8013ffa:	63a1      	str	r1, [r4, #56]	; 0x38
	if (data->current.is_nack) {
 8013ffc:	b10a      	cbz	r2, 8014002 <stm32_i2c_msg_write+0x84>
		data->current.is_nack = 0U;
 8013ffe:	2200      	movs	r2, #0
 8014000:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 8014002:	b10b      	cbz	r3, 8014008 <stm32_i2c_msg_write+0x8a>
		data->current.is_err = 0U;
 8014004:	2300      	movs	r3, #0
 8014006:	6423      	str	r3, [r4, #64]	; 0x40
	return -EIO;
 8014008:	f06f 0004 	mvn.w	r0, #4
 801400c:	e7f0      	b.n	8013ff0 <stm32_i2c_msg_write+0x72>

0801400e <stm32_i2c_msg_read>:
{
 801400e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8014012:	6847      	ldr	r7, [r0, #4]
	struct i2c_stm32_data *data = dev->data;
 8014014:	6904      	ldr	r4, [r0, #16]
	I2C_TypeDef *i2c = cfg->i2c;
 8014016:	f8d7 800c 	ldr.w	r8, [r7, #12]
	data->current.len = msg->len;
 801401a:	684f      	ldr	r7, [r1, #4]
 801401c:	64a7      	str	r7, [r4, #72]	; 0x48
	data->current.buf = msg->buf;
 801401e:	680f      	ldr	r7, [r1, #0]
 8014020:	64e7      	str	r7, [r4, #76]	; 0x4c
{
 8014022:	4605      	mov	r5, r0
	data->current.is_write = 0U;
 8014024:	2700      	movs	r7, #0
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8014026:	f44f 6680 	mov.w	r6, #1024	; 0x400
	data->current.is_arlo = 0U;
 801402a:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
	data->current.is_nack = 0U;
 801402e:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
	data->current.msg = msg;
 8014032:	6461      	str	r1, [r4, #68]	; 0x44
	msg_init(dev, msg, next_msg_flags, slave, LL_I2C_REQUEST_READ);
 8014034:	9600      	str	r6, [sp, #0]
 8014036:	f7f7 f859 	bl	800b0ec <msg_init>
	stm32_i2c_enable_transfer_interrupts(dev);
 801403a:	6868      	ldr	r0, [r5, #4]
 801403c:	f7ff ff04 	bl	8013e48 <stm32_i2c_enable_transfer_interrupts.isra.0>
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8014040:	f8d8 3000 	ldr.w	r3, [r8]
 8014044:	f043 0304 	orr.w	r3, r3, #4
 8014048:	f8c8 3000 	str.w	r3, [r8]
 801404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014050:	2300      	movs	r3, #0
 8014052:	4620      	mov	r0, r4
 8014054:	f7f9 fe94 	bl	800dd80 <z_impl_k_sem_take>
	if (k_sem_take(&data->device_sync_sem,
 8014058:	b150      	cbz	r0, 8014070 <stm32_i2c_msg_read+0x62>
		stm32_i2c_master_mode_end(dev);
 801405a:	4628      	mov	r0, r5
 801405c:	f7ff ff20 	bl	8013ea0 <stm32_i2c_master_mode_end>
 8014060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014068:	4620      	mov	r0, r4
 801406a:	f7f9 fe89 	bl	800dd80 <z_impl_k_sem_take>
		is_timeout = true;
 801406e:	2001      	movs	r0, #1
	if (data->current.is_nack || data->current.is_err ||
 8014070:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8014074:	ea52 0503 	orrs.w	r5, r2, r3
	    data->current.is_arlo || is_timeout) {
 8014078:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (data->current.is_nack || data->current.is_err ||
 801407a:	d104      	bne.n	8014086 <stm32_i2c_msg_read+0x78>
 801407c:	b921      	cbnz	r1, 8014088 <stm32_i2c_msg_read+0x7a>
	    data->current.is_arlo || is_timeout) {
 801407e:	b940      	cbnz	r0, 8014092 <stm32_i2c_msg_read+0x84>
}
 8014080:	b002      	add	sp, #8
 8014082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data->current.is_arlo) {
 8014086:	b109      	cbz	r1, 801408c <stm32_i2c_msg_read+0x7e>
		data->current.is_arlo = 0U;
 8014088:	2100      	movs	r1, #0
 801408a:	63a1      	str	r1, [r4, #56]	; 0x38
	if (data->current.is_nack) {
 801408c:	b10a      	cbz	r2, 8014092 <stm32_i2c_msg_read+0x84>
		data->current.is_nack = 0U;
 801408e:	2200      	movs	r2, #0
 8014090:	63e2      	str	r2, [r4, #60]	; 0x3c
	if (data->current.is_err) {
 8014092:	b10b      	cbz	r3, 8014098 <stm32_i2c_msg_read+0x8a>
		data->current.is_err = 0U;
 8014094:	2300      	movs	r3, #0
 8014096:	6423      	str	r3, [r4, #64]	; 0x40
	return -EIO;
 8014098:	f06f 0004 	mvn.w	r0, #4
 801409c:	e7f0      	b.n	8014080 <stm32_i2c_msg_read+0x72>

0801409e <i2c_stm32_irq_config_func_i2c2>:
#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c1), okay)
STM32_I2C_INIT(i2c1);
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c2), okay)
STM32_I2C_INIT(i2c2);
 801409e:	b508      	push	{r3, lr}
 80140a0:	2200      	movs	r2, #0
 80140a2:	4611      	mov	r1, r2
 80140a4:	2020      	movs	r0, #32
 80140a6:	f7ef fde9 	bl	8003c7c <z_arm_irq_priority_set>
 80140aa:	2020      	movs	r0, #32
 80140ac:	f7ef fdc2 	bl	8003c34 <arch_irq_enable>
 80140b0:	2200      	movs	r2, #0
 80140b2:	2021      	movs	r0, #33	; 0x21
 80140b4:	4611      	mov	r1, r2
 80140b6:	f7ef fde1 	bl	8003c7c <z_arm_irq_priority_set>
 80140ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80140be:	2021      	movs	r0, #33	; 0x21
 80140c0:	f7ef bdb8 	b.w	8003c34 <arch_irq_enable>

080140c4 <i2c_stm32_irq_config_func_i2c3>:
#endif

#if DT_NODE_HAS_STATUS(DT_NODELABEL(i2c3), okay)
STM32_I2C_INIT(i2c3);
 80140c4:	b508      	push	{r3, lr}
 80140c6:	2200      	movs	r2, #0
 80140c8:	4611      	mov	r1, r2
 80140ca:	2030      	movs	r0, #48	; 0x30
 80140cc:	f7ef fdd6 	bl	8003c7c <z_arm_irq_priority_set>
 80140d0:	2030      	movs	r0, #48	; 0x30
 80140d2:	f7ef fdaf 	bl	8003c34 <arch_irq_enable>
 80140d6:	2200      	movs	r2, #0
 80140d8:	2031      	movs	r0, #49	; 0x31
 80140da:	4611      	mov	r1, r2
 80140dc:	f7ef fdce 	bl	8003c7c <z_arm_irq_priority_set>
 80140e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80140e4:	2031      	movs	r0, #49	; 0x31
 80140e6:	f7ef bda5 	b.w	8003c34 <arch_irq_enable>

080140ea <i2c_stm32_transfer>:
{
 80140ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ee:	4699      	mov	r9, r3
	current->flags |= I2C_MSG_RESTART;
 80140f0:	7a0b      	ldrb	r3, [r1, #8]
	struct i2c_stm32_data *data = dev->data;
 80140f2:	6906      	ldr	r6, [r0, #16]
	current->flags |= I2C_MSG_RESTART;
 80140f4:	f043 0304 	orr.w	r3, r3, #4
{
 80140f8:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 80140fa:	720b      	strb	r3, [r1, #8]
{
 80140fc:	b087      	sub	sp, #28
 80140fe:	4607      	mov	r7, r0
 8014100:	460c      	mov	r4, r1
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8014102:	460a      	mov	r2, r1
 8014104:	2301      	movs	r3, #1
 8014106:	42ab      	cmp	r3, r5
 8014108:	d90c      	bls.n	8014124 <i2c_stm32_transfer+0x3a>
	k_sem_take(&data->bus_mutex, K_FOREVER);
 801410a:	f106 0818 	add.w	r8, r6, #24
 801410e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014116:	4640      	mov	r0, r8
 8014118:	f7f9 fe32 	bl	800dd80 <z_impl_k_sem_take>
	while (num_msgs > 0) {
 801411c:	3414      	adds	r4, #20
 801411e:	2300      	movs	r3, #0
 8014120:	ae03      	add	r6, sp, #12
 8014122:	e054      	b.n	80141ce <i2c_stm32_transfer+0xe4>
			if (OPERATION(current) != OPERATION(next)) {
 8014124:	7a11      	ldrb	r1, [r2, #8]
		if (i < num_msgs) {
 8014126:	d20c      	bcs.n	8014142 <i2c_stm32_transfer+0x58>
			if (OPERATION(current) != OPERATION(next)) {
 8014128:	7d10      	ldrb	r0, [r2, #20]
 801412a:	ea80 0c01 	eor.w	ip, r0, r1
 801412e:	f01c 0f01 	tst.w	ip, #1
 8014132:	d001      	beq.n	8014138 <i2c_stm32_transfer+0x4e>
				if (!(next->flags & I2C_MSG_RESTART)) {
 8014134:	0740      	lsls	r0, r0, #29
 8014136:	d501      	bpl.n	801413c <i2c_stm32_transfer+0x52>
			if (current->flags & I2C_MSG_STOP) {
 8014138:	0789      	lsls	r1, r1, #30
 801413a:	d505      	bpl.n	8014148 <i2c_stm32_transfer+0x5e>
 801413c:	f06f 0315 	mvn.w	r3, #21
 8014140:	e04c      	b.n	80141dc <i2c_stm32_transfer+0xf2>
			current->flags |= I2C_MSG_STOP;
 8014142:	f041 0102 	orr.w	r1, r1, #2
 8014146:	7211      	strb	r1, [r2, #8]
	for (uint8_t i = 1; i <= num_msgs; i++) {
 8014148:	3301      	adds	r3, #1
		current++;
 801414a:	320c      	adds	r2, #12
	for (uint8_t i = 1; i <= num_msgs; i++) {
 801414c:	b2db      	uxtb	r3, r3
 801414e:	e7da      	b.n	8014106 <i2c_stm32_transfer+0x1c>
		if (num_msgs > 1) {
 8014150:	2d01      	cmp	r5, #1
 8014152:	bf14      	ite	ne
 8014154:	4623      	movne	r3, r4
 8014156:	2300      	moveq	r3, #0
 8014158:	9301      	str	r3, [sp, #4]
		ret = i2c_stm32_transaction(dev, *current, next_msg_flags, slave);
 801415a:	f1a4 0314 	sub.w	r3, r4, #20
 801415e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014162:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	const uint8_t saved_flags = msg.flags;
 8014166:	f89d b014 	ldrb.w	fp, [sp, #20]
	uint32_t rest = msg.len;
 801416a:	f8dd a010 	ldr.w	sl, [sp, #16]
		saved_flags & ~(I2C_MSG_STOP | I2C_MSG_RESTART);
 801416e:	f02b 0306 	bic.w	r3, fp, #6
	uint8_t combine_flags =
 8014172:	f88d 300b 	strb.w	r3, [sp, #11]
		if (msg.len > i2c_stm32_maxchunk) {
 8014176:	9b04      	ldr	r3, [sp, #16]
 8014178:	2bff      	cmp	r3, #255	; 0xff
			msg.len = i2c_stm32_maxchunk;
 801417a:	bf83      	ittte	hi
 801417c:	23ff      	movhi	r3, #255	; 0xff
 801417e:	9304      	strhi	r3, [sp, #16]
			msg.flags &= ~I2C_MSG_STOP;
 8014180:	f89d 3014 	ldrbhi.w	r3, [sp, #20]
			msg.flags = saved_flags;
 8014184:	f88d b014 	strbls.w	fp, [sp, #20]
			msg.flags &= ~I2C_MSG_STOP;
 8014188:	bf84      	itt	hi
 801418a:	f023 0302 	bichi.w	r3, r3, #2
 801418e:	f88d 3014 	strbhi.w	r3, [sp, #20]
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8014192:	f89d 3014 	ldrb.w	r3, [sp, #20]
			flagsp = next_msg_flags;
 8014196:	bf94      	ite	ls
 8014198:	9a01      	ldrls	r2, [sp, #4]
			flagsp = &combine_flags;
 801419a:	f10d 020b 	addhi.w	r2, sp, #11
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 801419e:	f013 0f01 	tst.w	r3, #1
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 80141a2:	4631      	mov	r1, r6
 80141a4:	464b      	mov	r3, r9
 80141a6:	4638      	mov	r0, r7
		if ((msg.flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 80141a8:	d11c      	bne.n	80141e4 <i2c_stm32_transfer+0xfa>
			ret = stm32_i2c_msg_write(dev, &msg, flagsp, periph);
 80141aa:	f7ff fee8 	bl	8013f7e <stm32_i2c_msg_write>
		if (ret < 0) {
 80141ae:	2800      	cmp	r0, #0
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 80141b0:	4603      	mov	r3, r0
		if (ret < 0) {
 80141b2:	db0e      	blt.n	80141d2 <i2c_stm32_transfer+0xe8>
		rest -= msg.len;
 80141b4:	9904      	ldr	r1, [sp, #16]
		msg.buf += msg.len;
 80141b6:	9a03      	ldr	r2, [sp, #12]
		rest -= msg.len;
 80141b8:	ebaa 0a01 	sub.w	sl, sl, r1
		msg.buf += msg.len;
 80141bc:	440a      	add	r2, r1
		msg.len = rest;
 80141be:	e9cd 2a03 	strd	r2, sl, [sp, #12]
	} while (rest > 0U);
 80141c2:	f1ba 0f00 	cmp.w	sl, #0
 80141c6:	d1d6      	bne.n	8014176 <i2c_stm32_transfer+0x8c>
		num_msgs--;
 80141c8:	3d01      	subs	r5, #1
 80141ca:	b2ed      	uxtb	r5, r5
 80141cc:	340c      	adds	r4, #12
	while (num_msgs > 0) {
 80141ce:	2d00      	cmp	r5, #0
 80141d0:	d1be      	bne.n	8014150 <i2c_stm32_transfer+0x66>
 80141d2:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 80141d4:	4640      	mov	r0, r8
 80141d6:	f7f9 fdad 	bl	800dd34 <z_impl_k_sem_give>
}
 80141da:	9b01      	ldr	r3, [sp, #4]
}
 80141dc:	4618      	mov	r0, r3
 80141de:	b007      	add	sp, #28
 80141e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = stm32_i2c_msg_read(dev, &msg, flagsp, periph);
 80141e4:	f7ff ff13 	bl	801400e <stm32_i2c_msg_read>
 80141e8:	e7e1      	b.n	80141ae <i2c_stm32_transfer+0xc4>

080141ea <bme280_reg_write.isra.0>:
	return cfg->bus_io->write(&cfg->bus, reg, val);
 80141ea:	6883      	ldr	r3, [r0, #8]
 80141ec:	689b      	ldr	r3, [r3, #8]
 80141ee:	4718      	bx	r3

080141f0 <bme280_reg_read.isra.0>:
static inline int bme280_reg_read(const struct device *dev,
 80141f0:	b410      	push	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
 80141f2:	6884      	ldr	r4, [r0, #8]
 80141f4:	6864      	ldr	r4, [r4, #4]
 80141f6:	46a4      	mov	ip, r4
}
 80141f8:	bc10      	pop	{r4}
	return cfg->bus_io->read(&cfg->bus, start, buf, size);
 80141fa:	4760      	bx	ip

080141fc <bme280_wait_until_ready>:
{
 80141fc:	b513      	push	{r0, r1, r4, lr}
	uint8_t status = 0;
 80141fe:	2300      	movs	r3, #0
{
 8014200:	4604      	mov	r4, r0
	uint8_t status = 0;
 8014202:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_sleep(timeout);
 8014206:	2100      	movs	r1, #0
 8014208:	201e      	movs	r0, #30
 801420a:	f7fa f9d3 	bl	800e5b4 <z_impl_k_sleep>
		ret = bme280_reg_read(dev, BME280_REG_STATUS, &status, 1);
 801420e:	6860      	ldr	r0, [r4, #4]
 8014210:	2301      	movs	r3, #1
 8014212:	f10d 0207 	add.w	r2, sp, #7
 8014216:	21f3      	movs	r1, #243	; 0xf3
 8014218:	f7ff ffea 	bl	80141f0 <bme280_reg_read.isra.0>
		if (ret < 0) {
 801421c:	2800      	cmp	r0, #0
 801421e:	db04      	blt.n	801422a <bme280_wait_until_ready+0x2e>
	} while (status & (BME280_STATUS_MEASURING | BME280_STATUS_IM_UPDATE));
 8014220:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014224:	f013 0009 	ands.w	r0, r3, #9
 8014228:	d1ed      	bne.n	8014206 <bme280_wait_until_ready+0xa>
}
 801422a:	b002      	add	sp, #8
 801422c:	bd10      	pop	{r4, pc}

0801422e <bme280_sample_fetch>:
{
 801422e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bme280_data *data = dev->data;
 8014232:	6905      	ldr	r5, [r0, #16]
{
 8014234:	4604      	mov	r4, r0
	ret = bme280_wait_until_ready(dev);
 8014236:	f7ff ffe1 	bl	80141fc <bme280_wait_until_ready>
	if (ret < 0) {
 801423a:	2800      	cmp	r0, #0
 801423c:	f2c0 8103 	blt.w	8014446 <bme280_sample_fetch+0x218>
	if (data->chip_id == BME280_CHIP_ID) {
 8014240:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
 8014244:	6860      	ldr	r0, [r4, #4]
		size = 8;
 8014246:	2b60      	cmp	r3, #96	; 0x60
	ret = bme280_reg_read(dev, BME280_REG_PRESS_MSB, buf, size);
 8014248:	bf14      	ite	ne
 801424a:	2306      	movne	r3, #6
 801424c:	2308      	moveq	r3, #8
 801424e:	466a      	mov	r2, sp
 8014250:	21f7      	movs	r1, #247	; 0xf7
 8014252:	f7ff ffcd 	bl	80141f0 <bme280_reg_read.isra.0>
	if (ret < 0) {
 8014256:	2800      	cmp	r0, #0
 8014258:	f2c0 80f5 	blt.w	8014446 <bme280_sample_fetch+0x218>
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
 801425c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014260:	f89d 2003 	ldrb.w	r2, [sp, #3]
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 8014264:	f8b5 9006 	ldrh.w	r9, [r5, #6]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 8014268:	f89d c000 	ldrb.w	ip, [sp]
 801426c:	f89d e001 	ldrb.w	lr, [sp, #1]
 8014270:	f89d 1002 	ldrb.w	r1, [sp, #2]
	adc_temp = (buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4);
 8014274:	011b      	lsls	r3, r3, #4
 8014276:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 801427a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801427e:	ea43 1412 	orr.w	r4, r3, r2, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 8014282:	882a      	ldrh	r2, [r5, #0]
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 8014284:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 8014288:	0052      	lsls	r2, r2, #1
 801428a:	ebc2 02d4 	rsb	r2, r2, r4, lsr #3
		((int32_t)data->dig_t2)) >> 11;
 801428e:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
	var1 = (((adc_temp >> 3) - ((int32_t)data->dig_t1 << 1)) *
 8014292:	4362      	muls	r2, r4
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 8014294:	fb03 f403 	mul.w	r4, r3, r3
		((int32_t)data->dig_t3)) >> 14;
 8014298:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
		  ((adc_temp >> 4) - ((int32_t)data->dig_t1))) >> 12) *
 801429c:	1324      	asrs	r4, r4, #12
 801429e:	435c      	muls	r4, r3
	var2 = (((((adc_temp >> 4) - ((int32_t)data->dig_t1)) *
 80142a0:	13a4      	asrs	r4, r4, #14
	data->t_fine = var1 + var2;
 80142a2:	eb04 24e2 	add.w	r4, r4, r2, asr #11
	data->comp_temp = (data->t_fine * 5 + 128) >> 8;
 80142a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80142aa:	3380      	adds	r3, #128	; 0x80
 80142ac:	121b      	asrs	r3, r3, #8
 80142ae:	f5a4 38fa 	sub.w	r8, r4, #128000	; 0x1f400
 80142b2:	626b      	str	r3, [r5, #36]	; 0x24
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80142b4:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
	data->t_fine = var1 + var2;
 80142b8:	632c      	str	r4, [r5, #48]	; 0x30
	var2 = var1 * var1 * (int64_t)data->dig_p6;
 80142ba:	fb88 6a08 	smull	r6, sl, r8, r8
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80142be:	17d8      	asrs	r0, r3, #31
 80142c0:	fb03 f20a 	mul.w	r2, r3, sl
 80142c4:	fb06 2200 	mla	r2, r6, r0, r2
 80142c8:	fba3 3006 	umull	r3, r0, r3, r6
 80142cc:	0a1f      	lsrs	r7, r3, #8
		((var1 * (int64_t)data->dig_p2) << 12);
 80142ce:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80142d2:	4410      	add	r0, r2
		((var1 * (int64_t)data->dig_p2) << 12);
 80142d4:	fb83 3208 	smull	r3, r2, r3, r8
 80142d8:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80142da:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
		((var1 * (int64_t)data->dig_p2) << 12);
 80142de:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
 80142e2:	031b      	lsls	r3, r3, #12
	var1 = ((var1 * var1 * (int64_t)data->dig_p3) >> 8) +
 80142e4:	18fb      	adds	r3, r7, r3
 80142e6:	eb42 2220 	adc.w	r2, r2, r0, asr #8
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 80142ea:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80142ee:	fba3 3709 	umull	r3, r7, r3, r9
 80142f2:	fb09 7702 	mla	r7, r9, r2, r7
 80142f6:	17fb      	asrs	r3, r7, #31
 80142f8:	107a      	asrs	r2, r7, #1
	if (var1 == 0) {
 80142fa:	ea53 0767 	orrs.w	r7, r3, r7, asr #1
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)data->dig_p1) >> 33;
 80142fe:	f04f 0000 	mov.w	r0, #0
	if (var1 == 0) {
 8014302:	d066      	beq.n	80143d2 <bme280_sample_fetch+0x1a4>
	var2 = var1 * var1 * (int64_t)data->dig_p6;
 8014304:	f9b5 9010 	ldrsh.w	r9, [r5, #16]
 8014308:	ea4f 7be9 	mov.w	fp, r9, asr #31
 801430c:	fb09 f70a 	mul.w	r7, r9, sl
 8014310:	fb06 770b 	mla	r7, r6, fp, r7
 8014314:	fba9 9606 	umull	r9, r6, r9, r6
 8014318:	4437      	add	r7, r6
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 801431a:	f9b5 600e 	ldrsh.w	r6, [r5, #14]
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 801431e:	0909      	lsrs	r1, r1, #4
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8014320:	fb86 6808 	smull	r6, r8, r6, r8
	adc_press = (buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4);
 8014324:	ea41 110e 	orr.w	r1, r1, lr, lsl #4
 8014328:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 801432c:	ea4f 4848 	mov.w	r8, r8, lsl #17
	p = 1048576 - adc_press;
 8014330:	f5c1 1180 	rsb	r1, r1, #1048576	; 0x100000
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8014334:	ea48 38d6 	orr.w	r8, r8, r6, lsr #15
 8014338:	0476      	lsls	r6, r6, #17
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 801433a:	f9b5 e00c 	ldrsh.w	lr, [r5, #12]
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 801433e:	eb16 0609 	adds.w	r6, r6, r9
	p = (((p << 31) - var2) * 3125) / var1;
 8014342:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
	var2 = var2 + ((var1 * (int64_t)data->dig_p5) << 17);
 8014346:	eb47 0708 	adc.w	r7, r7, r8
	p = (((p << 31) - var2) * 3125) / var1;
 801434a:	ea4c 0c51 	orr.w	ip, ip, r1, lsr #1
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 801434e:	1980      	adds	r0, r0, r6
	p = (((p << 31) - var2) * 3125) / var1;
 8014350:	07c9      	lsls	r1, r1, #31
	var2 = var2 + (((int64_t)data->dig_p4) << 35);
 8014352:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
 8014356:	1a08      	subs	r0, r1, r0
 8014358:	f640 4635 	movw	r6, #3125	; 0xc35
 801435c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8014360:	fba0 0106 	umull	r0, r1, r0, r6
 8014364:	fb06 110c 	mla	r1, r6, ip, r1
 8014368:	f7ec fb7c 	bl	8000a64 <__aeabi_ldivmod>
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
 801436c:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8014370:	134e      	asrs	r6, r1, #13
 8014372:	0b43      	lsrs	r3, r0, #13
 8014374:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 8014378:	fb02 f706 	mul.w	r7, r2, r6
 801437c:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 8014380:	fb03 770e 	mla	r7, r3, lr, r7
 8014384:	fba2 2e03 	umull	r2, lr, r2, r3
 8014388:	44be      	add	lr, r7
 801438a:	fb02 f706 	mul.w	r7, r2, r6
 801438e:	fb03 770e 	mla	r7, r3, lr, r7
 8014392:	fba2 2303 	umull	r2, r3, r2, r3
 8014396:	441f      	add	r7, r3
 8014398:	0e53      	lsrs	r3, r2, #25
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
 801439a:	f9b5 6014 	ldrsh.w	r6, [r5, #20]
	var1 = (((int64_t)data->dig_p9) * (p >> 13) * (p >> 13)) >> 25;
 801439e:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
 80143a2:	181b      	adds	r3, r3, r0
 80143a4:	eb41 6767 	adc.w	r7, r1, r7, asr #25
	p = (((p << 31) - var2) * 3125) / var1;
 80143a8:	4684      	mov	ip, r0
	var2 = (((int64_t)data->dig_p8) * p) >> 19;
 80143aa:	17f2      	asrs	r2, r6, #31
 80143ac:	4371      	muls	r1, r6
 80143ae:	fb02 110c 	mla	r1, r2, ip, r1
 80143b2:	fba6 0600 	umull	r0, r6, r6, r0
 80143b6:	4431      	add	r1, r6
 80143b8:	0cc0      	lsrs	r0, r0, #19
 80143ba:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)data->dig_p7) << 4);
 80143be:	1818      	adds	r0, r3, r0
 80143c0:	eb47 47e1 	adc.w	r7, r7, r1, asr #19
 80143c4:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 80143c8:	0a00      	lsrs	r0, r0, #8
 80143ca:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
	data->comp_press = (uint32_t)p;
 80143ce:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	if (data->chip_id == BME280_CHIP_ID) {
 80143d2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80143d6:	62a8      	str	r0, [r5, #40]	; 0x28
 80143d8:	2b60      	cmp	r3, #96	; 0x60
 80143da:	d133      	bne.n	8014444 <bme280_sample_fetch+0x216>
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 80143dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80143e0:	ba5b      	rev16	r3, r3
 80143e2:	b29a      	uxth	r2, r3
 80143e4:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
 80143e8:	051b      	lsls	r3, r3, #20
 80143ea:	ebc3 3382 	rsb	r3, r3, r2, lsl #14
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
 80143ee:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
	h = (data->t_fine - ((int32_t)76800));
 80143f2:	f5a4 3196 	sub.w	r1, r4, #76800	; 0x12c00
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 80143f6:	fb01 3312 	mls	r3, r1, r2, r3
		(((int32_t)data->dig_h5) * h)) + ((int32_t)16384)) >> 15) *
 80143fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80143fe:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8014400:	7f2b      	ldrb	r3, [r5, #28]
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
 8014402:	f995 4022 	ldrsb.w	r4, [r5, #34]	; 0x22
 8014406:	434b      	muls	r3, r1
 8014408:	434c      	muls	r4, r1
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 801440a:	12db      	asrs	r3, r3, #11
 801440c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		(((((((h * ((int32_t)data->dig_h6)) >> 10) * (((h *
 8014410:	12a4      	asrs	r4, r4, #10
 8014412:	4363      	muls	r3, r4
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
 8014414:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
		((int32_t)data->dig_h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8014418:	129b      	asrs	r3, r3, #10
 801441a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)data->dig_h2) + 8192) >> 14);
 801441e:	434b      	muls	r3, r1
 8014420:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014424:	139b      	asrs	r3, r3, #14
	h = ((((adc_humidity << 14) - (((int32_t)data->dig_h4) << 20) -
 8014426:	4353      	muls	r3, r2
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
 8014428:	13da      	asrs	r2, r3, #15
		((int32_t)data->dig_h1)) >> 4));
 801442a:	7e29      	ldrb	r1, [r5, #24]
	h = (h - (((((h >> 15) * (h >> 15)) >> 7) *
 801442c:	4352      	muls	r2, r2
 801442e:	11d2      	asrs	r2, r2, #7
 8014430:	434a      	muls	r2, r1
 8014432:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	h = (h > 419430400 ? 419430400 : h);
 8014436:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 801443a:	bfa8      	it	ge
 801443c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	data->comp_humidity = (uint32_t)(h >> 12);
 8014440:	131b      	asrs	r3, r3, #12
 8014442:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
 8014444:	2000      	movs	r0, #0
}
 8014446:	b003      	add	sp, #12
 8014448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801444c <bme280_chip_init>:

	return 0;
}

static int bme280_chip_init(const struct device *dev)
{
 801444c:	b570      	push	{r4, r5, r6, lr}
	struct bme280_data *data = dev->data;
 801444e:	6905      	ldr	r5, [r0, #16]
{
 8014450:	4604      	mov	r4, r0
 8014452:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->check(&cfg->bus);
 8014454:	6883      	ldr	r3, [r0, #8]
{
 8014456:	b088      	sub	sp, #32
	return cfg->bus_io->check(&cfg->bus);
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	4798      	blx	r3
	int err;

	err = bme280_bus_check(dev);
	if (err < 0) {
 801445c:	2800      	cmp	r0, #0
 801445e:	f2c0 8087 	blt.w	8014570 <bme280_chip_init+0x124>
		LOG_DBG("bus check failed: %d", err);
		return err;
	}

	err = bme280_reg_read(dev, BME280_REG_ID, &data->chip_id, 1);
 8014462:	6860      	ldr	r0, [r4, #4]
 8014464:	2301      	movs	r3, #1
 8014466:	f105 0234 	add.w	r2, r5, #52	; 0x34
 801446a:	21d0      	movs	r1, #208	; 0xd0
 801446c:	f7ff fec0 	bl	80141f0 <bme280_reg_read.isra.0>
	if (err < 0) {
 8014470:	2800      	cmp	r0, #0
 8014472:	db7d      	blt.n	8014570 <bme280_chip_init+0x124>
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
		LOG_DBG("ID OK");
	} else if (data->chip_id == BMP280_CHIP_ID_MP ||
 8014474:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8014478:	3b56      	subs	r3, #86	; 0x56
 801447a:	b2db      	uxtb	r3, r3
 801447c:	2b0a      	cmp	r3, #10
 801447e:	f200 808e 	bhi.w	801459e <bme280_chip_init+0x152>
 8014482:	f240 4205 	movw	r2, #1029	; 0x405
 8014486:	fa22 f303 	lsr.w	r3, r2, r3
 801448a:	07db      	lsls	r3, r3, #31
 801448c:	f140 8087 	bpl.w	801459e <bme280_chip_init+0x152>
	} else {
		LOG_DBG("bad chip id 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme280_reg_write(dev, BME280_REG_RESET, BME280_CMD_SOFT_RESET);
 8014490:	22b6      	movs	r2, #182	; 0xb6
 8014492:	21e0      	movs	r1, #224	; 0xe0
 8014494:	6860      	ldr	r0, [r4, #4]
 8014496:	f7ff fea8 	bl	80141ea <bme280_reg_write.isra.0>
	if (err < 0) {
		LOG_DBG("Soft-reset failed: %d", err);
	}

	err = bme280_wait_until_ready(dev);
 801449a:	4620      	mov	r0, r4
 801449c:	f7ff feae 	bl	80141fc <bme280_wait_until_ready>
	if (err < 0) {
 80144a0:	2800      	cmp	r0, #0
 80144a2:	db65      	blt.n	8014570 <bme280_chip_init+0x124>
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
 80144a4:	6860      	ldr	r0, [r4, #4]
	struct bme280_data *data = dev->data;
 80144a6:	6926      	ldr	r6, [r4, #16]
	err = bme280_reg_read(dev, BME280_REG_COMP_START,
 80144a8:	2318      	movs	r3, #24
 80144aa:	aa02      	add	r2, sp, #8
 80144ac:	2188      	movs	r1, #136	; 0x88
 80144ae:	f7ff fe9f 	bl	80141f0 <bme280_reg_read.isra.0>
	if (err < 0) {
 80144b2:	2800      	cmp	r0, #0
 80144b4:	db5c      	blt.n	8014570 <bme280_chip_init+0x124>
	data->dig_t1 = sys_le16_to_cpu(buf[0]);
 80144b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80144ba:	8033      	strh	r3, [r6, #0]
	data->dig_t2 = sys_le16_to_cpu(buf[1]);
 80144bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80144c0:	8073      	strh	r3, [r6, #2]
	data->dig_t3 = sys_le16_to_cpu(buf[2]);
 80144c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80144c6:	80b3      	strh	r3, [r6, #4]
	data->dig_p1 = sys_le16_to_cpu(buf[3]);
 80144c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80144cc:	80f3      	strh	r3, [r6, #6]
	data->dig_p2 = sys_le16_to_cpu(buf[4]);
 80144ce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80144d2:	8133      	strh	r3, [r6, #8]
	data->dig_p3 = sys_le16_to_cpu(buf[5]);
 80144d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80144d8:	8173      	strh	r3, [r6, #10]
	data->dig_p4 = sys_le16_to_cpu(buf[6]);
 80144da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80144de:	81b3      	strh	r3, [r6, #12]
	data->dig_p5 = sys_le16_to_cpu(buf[7]);
 80144e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80144e4:	81f3      	strh	r3, [r6, #14]
	data->dig_p6 = sys_le16_to_cpu(buf[8]);
 80144e6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80144ea:	8233      	strh	r3, [r6, #16]
	data->dig_p7 = sys_le16_to_cpu(buf[9]);
 80144ec:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80144f0:	8273      	strh	r3, [r6, #18]
	data->dig_p8 = sys_le16_to_cpu(buf[10]);
 80144f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80144f6:	82b3      	strh	r3, [r6, #20]
	data->dig_p9 = sys_le16_to_cpu(buf[11]);
 80144f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80144fc:	82f3      	strh	r3, [r6, #22]
	if (data->chip_id == BME280_CHIP_ID) {
 80144fe:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8014502:	2b60      	cmp	r3, #96	; 0x60
 8014504:	d129      	bne.n	801455a <bme280_chip_init+0x10e>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART1,
 8014506:	6860      	ldr	r0, [r4, #4]
 8014508:	2301      	movs	r3, #1
 801450a:	f106 0218 	add.w	r2, r6, #24
 801450e:	21a1      	movs	r1, #161	; 0xa1
 8014510:	f7ff fe6e 	bl	80141f0 <bme280_reg_read.isra.0>
		if (err < 0) {
 8014514:	2800      	cmp	r0, #0
 8014516:	db2b      	blt.n	8014570 <bme280_chip_init+0x124>
		err = bme280_reg_read(dev, BME280_REG_HUM_COMP_PART2, hbuf, 7);
 8014518:	6860      	ldr	r0, [r4, #4]
 801451a:	2307      	movs	r3, #7
 801451c:	466a      	mov	r2, sp
 801451e:	21e1      	movs	r1, #225	; 0xe1
 8014520:	f7ff fe66 	bl	80141f0 <bme280_reg_read.isra.0>
		if (err < 0) {
 8014524:	2800      	cmp	r0, #0
 8014526:	db23      	blt.n	8014570 <bme280_chip_init+0x124>
		data->dig_h2 = (hbuf[1] << 8) | hbuf[0];
 8014528:	f8bd 3000 	ldrh.w	r3, [sp]
 801452c:	8373      	strh	r3, [r6, #26]
		data->dig_h3 = hbuf[2];
 801452e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8014532:	7733      	strb	r3, [r6, #28]
		data->dig_h4 = (hbuf[3] << 4) | (hbuf[4] & 0x0F);
 8014534:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014538:	f89d 1003 	ldrb.w	r1, [sp, #3]
 801453c:	f003 020f 	and.w	r2, r3, #15
 8014540:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8014544:	83f2      	strh	r2, [r6, #30]
		data->dig_h5 = ((hbuf[4] >> 4) & 0x0F) | (hbuf[5] << 4);
 8014546:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801454a:	091b      	lsrs	r3, r3, #4
 801454c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8014550:	8433      	strh	r3, [r6, #32]
		data->dig_h6 = hbuf[6];
 8014552:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014556:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	err = bme280_read_compensation(dev);
	if (err < 0) {
		return err;
	}

	if (data->chip_id == BME280_CHIP_ID) {
 801455a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801455e:	2b60      	cmp	r3, #96	; 0x60
 8014560:	d008      	beq.n	8014574 <bme280_chip_init+0x128>
			LOG_DBG("CTRL_HUM write failed: %d", err);
			return err;
		}
	}

	err = bme280_reg_write(dev, BME280_REG_CTRL_MEAS,
 8014562:	6860      	ldr	r0, [r4, #4]
 8014564:	2257      	movs	r2, #87	; 0x57
 8014566:	21f4      	movs	r1, #244	; 0xf4
 8014568:	f7ff fe3f 	bl	80141ea <bme280_reg_write.isra.0>
			       BME280_CTRL_MEAS_VAL);
	if (err < 0) {
 801456c:	2800      	cmp	r0, #0
 801456e:	da09      	bge.n	8014584 <bme280_chip_init+0x138>
	/* Wait for the sensor to be ready */
	k_sleep(K_MSEC(1));

	LOG_DBG("\"%s\" OK", dev->name);
	return 0;
}
 8014570:	b008      	add	sp, #32
 8014572:	bd70      	pop	{r4, r5, r6, pc}
		err = bme280_reg_write(dev, BME280_REG_CTRL_HUM,
 8014574:	6860      	ldr	r0, [r4, #4]
 8014576:	2205      	movs	r2, #5
 8014578:	21f2      	movs	r1, #242	; 0xf2
 801457a:	f7ff fe36 	bl	80141ea <bme280_reg_write.isra.0>
		if (err < 0) {
 801457e:	2800      	cmp	r0, #0
 8014580:	daef      	bge.n	8014562 <bme280_chip_init+0x116>
 8014582:	e7f5      	b.n	8014570 <bme280_chip_init+0x124>
	err = bme280_reg_write(dev, BME280_REG_CONFIG,
 8014584:	6860      	ldr	r0, [r4, #4]
 8014586:	22a8      	movs	r2, #168	; 0xa8
 8014588:	21f5      	movs	r1, #245	; 0xf5
 801458a:	f7ff fe2e 	bl	80141ea <bme280_reg_write.isra.0>
	if (err < 0) {
 801458e:	2800      	cmp	r0, #0
 8014590:	dbee      	blt.n	8014570 <bme280_chip_init+0x124>
 8014592:	200a      	movs	r0, #10
 8014594:	2100      	movs	r1, #0
 8014596:	f7fa f80d 	bl	800e5b4 <z_impl_k_sleep>
	return 0;
 801459a:	2000      	movs	r0, #0
 801459c:	e7e8      	b.n	8014570 <bme280_chip_init+0x124>
		return -ENOTSUP;
 801459e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80145a2:	e7e5      	b.n	8014570 <bme280_chip_init+0x124>

080145a4 <bme280_bus_check_i2c>:

#include "bme280.h"

#if BME280_BUS_I2C
static int bme280_bus_check_i2c(const union bme280_bus *bus)
{
 80145a4:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
 80145a6:	6800      	ldr	r0, [r0, #0]
 80145a8:	f001 fc53 	bl	8015e52 <z_device_is_ready>
 80145ac:	2800      	cmp	r0, #0
}
 80145ae:	bf0c      	ite	eq
 80145b0:	f06f 0012 	mvneq.w	r0, #18
 80145b4:	2000      	movne	r0, #0
 80145b6:	bd08      	pop	{r3, pc}

080145b8 <bme280_reg_read_i2c>:

static int bme280_reg_read_i2c(const union bme280_bus *bus,
			       uint8_t start, uint8_t *buf, int size)
{
 80145b8:	b530      	push	{r4, r5, lr}
 80145ba:	b089      	sub	sp, #36	; 0x24
 80145bc:	4604      	mov	r4, r0
 80145be:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
 80145c2:	f10d 0107 	add.w	r1, sp, #7
 80145c6:	461d      	mov	r5, r3
 80145c8:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
 80145ca:	2101      	movs	r1, #1
	msg[1].len = num_read;
 80145cc:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
 80145d0:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80145d2:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
 80145d4:	2100      	movs	r1, #0
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
	return i2c_burst_read(spec->bus, spec->addr,
 80145d6:	6800      	ldr	r0, [r0, #0]
 80145d8:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
 80145da:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 80145de:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80145e2:	6882      	ldr	r2, [r0, #8]
 80145e4:	a902      	add	r1, sp, #8
 80145e6:	6894      	ldr	r4, [r2, #8]
 80145e8:	2202      	movs	r2, #2
 80145ea:	47a0      	blx	r4
	return i2c_burst_read_dt(&bus->i2c, start, buf, size);
}
 80145ec:	b009      	add	sp, #36	; 0x24
 80145ee:	bd30      	pop	{r4, r5, pc}

080145f0 <bme280_reg_write_i2c>:

static int bme280_reg_write_i2c(const union bme280_bus *bus,
				uint8_t reg, uint8_t val)
{
 80145f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80145f2:	4603      	mov	r3, r0
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
 80145f4:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
 80145f8:	2202      	movs	r2, #2
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
 80145fa:	6800      	ldr	r0, [r0, #0]
 80145fc:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
 80145fe:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
 8014602:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 8014606:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 8014608:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 801460c:	6882      	ldr	r2, [r0, #8]
 801460e:	a901      	add	r1, sp, #4
 8014610:	6894      	ldr	r4, [r2, #8]
 8014612:	2201      	movs	r2, #1
 8014614:	47a0      	blx	r4
	return i2c_reg_write_byte_dt(&bus->i2c, reg, val);
}
 8014616:	b004      	add	sp, #16
 8014618:	bd10      	pop	{r4, pc}

0801461a <sht3xd_compute_crc>:
{
 801461a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801461c:	0a03      	lsrs	r3, r0, #8
 801461e:	f88d 300c 	strb.w	r3, [sp, #12]
	return crc8(buf, 2, 0x31, 0xFF, false);
 8014622:	2300      	movs	r3, #0
	dst[1] = val;
 8014624:	f88d 000d 	strb.w	r0, [sp, #13]
 8014628:	9300      	str	r3, [sp, #0]
 801462a:	2231      	movs	r2, #49	; 0x31
 801462c:	23ff      	movs	r3, #255	; 0xff
 801462e:	2102      	movs	r1, #2
 8014630:	a803      	add	r0, sp, #12
 8014632:	f7fc fb77 	bl	8010d24 <crc8>
}
 8014636:	b005      	add	sp, #20
 8014638:	f85d fb04 	ldr.w	pc, [sp], #4

0801463c <sht3xd_sample_fetch>:
{
 801463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801463e:	b08b      	sub	sp, #44	; 0x2c
	const struct sht3xd_config *config = dev->config;
 8014640:	6843      	ldr	r3, [r0, #4]
	struct sht3xd_data *data = dev->data;
 8014642:	6907      	ldr	r7, [r0, #16]
 8014644:	2400      	movs	r4, #0
	dst[0] = val >> 8;
 8014646:	22e0      	movs	r2, #224	; 0xe0
 8014648:	f88d 2004 	strb.w	r2, [sp, #4]
	msg[1].buf = (uint8_t *)read_buf;
 801464c:	a902      	add	r1, sp, #8
	dst[1] = val;
 801464e:	f88d 4005 	strb.w	r4, [sp, #5]
	return i2c_write_read(spec->bus, spec->addr,
 8014652:	6818      	ldr	r0, [r3, #0]
 8014654:	889b      	ldrh	r3, [r3, #4]
	msg[1].buf = (uint8_t *)read_buf;
 8014656:	9107      	str	r1, [sp, #28]
	msg[0].buf = (uint8_t *)write_buf;
 8014658:	aa01      	add	r2, sp, #4
	msg[1].len = num_read;
 801465a:	2106      	movs	r1, #6
	msg[0].buf = (uint8_t *)write_buf;
 801465c:	9204      	str	r2, [sp, #16]
	msg[1].len = num_read;
 801465e:	9108      	str	r1, [sp, #32]
	msg[0].len = num_write;
 8014660:	2202      	movs	r2, #2
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 8014662:	2107      	movs	r1, #7
	msg[0].len = num_write;
 8014664:	9205      	str	r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
 8014666:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
 801466a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 801466e:	6881      	ldr	r1, [r0, #8]
 8014670:	688d      	ldr	r5, [r1, #8]
 8014672:	a904      	add	r1, sp, #16
 8014674:	47a8      	blx	r5
	if (i2c_write_read_dt(&config->bus, tx_buf, sizeof(tx_buf),
 8014676:	42a0      	cmp	r0, r4
 8014678:	da03      	bge.n	8014682 <sht3xd_sample_fetch+0x46>
		return -EIO;
 801467a:	f06f 0004 	mvn.w	r0, #4
}
 801467e:	b00b      	add	sp, #44	; 0x2c
 8014680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((uint16_t)src[0] << 8) | src[1];
 8014682:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014686:	ba76      	rev16	r6, r6
	if (sht3xd_compute_crc(t_sample) != rx_buf[2]) {
 8014688:	b2b0      	uxth	r0, r6
 801468a:	f7ff ffc6 	bl	801461a <sht3xd_compute_crc>
 801468e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8014692:	4283      	cmp	r3, r0
 8014694:	d1f1      	bne.n	801467a <sht3xd_sample_fetch+0x3e>
 8014696:	f8bd 500b 	ldrh.w	r5, [sp, #11]
 801469a:	ba6d      	rev16	r5, r5
	if (sht3xd_compute_crc(rh_sample) != rx_buf[5]) {
 801469c:	b2a8      	uxth	r0, r5
 801469e:	f7ff ffbc 	bl	801461a <sht3xd_compute_crc>
 80146a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80146a6:	4283      	cmp	r3, r0
 80146a8:	d1e7      	bne.n	801467a <sht3xd_sample_fetch+0x3e>
	data->t_sample = t_sample;
 80146aa:	803e      	strh	r6, [r7, #0]
	data->rh_sample = rh_sample;
 80146ac:	807d      	strh	r5, [r7, #2]
	return 0;
 80146ae:	4620      	mov	r0, r4
 80146b0:	e7e5      	b.n	801467e <sht3xd_sample_fetch+0x42>

080146b2 <sht3xd_write_command>:
{
 80146b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct sht3xd_config *config = dev->config;
 80146b4:	6843      	ldr	r3, [r0, #4]
	dst[1] = val;
 80146b6:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[0] = val >> 8;
 80146ba:	0a0a      	lsrs	r2, r1, #8
 80146bc:	f88d 2000 	strb.w	r2, [sp]
	msg.len = num_bytes;
 80146c0:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
 80146c2:	6818      	ldr	r0, [r3, #0]
 80146c4:	889b      	ldrh	r3, [r3, #4]
	msg.buf = (uint8_t *)buf;
 80146c6:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
 80146ca:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
 80146cc:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
 80146d0:	6882      	ldr	r2, [r0, #8]
 80146d2:	a901      	add	r1, sp, #4
 80146d4:	6894      	ldr	r4, [r2, #8]
 80146d6:	2201      	movs	r2, #1
 80146d8:	47a0      	blx	r4
}
 80146da:	b004      	add	sp, #16
 80146dc:	bd10      	pop	{r4, pc}

080146de <spi_context_get_next_buf>:
{
 80146de:	b570      	push	{r4, r5, r6, lr}
 80146e0:	4605      	mov	r5, r0
	while (*count) {
 80146e2:	6808      	ldr	r0, [r1, #0]
 80146e4:	b908      	cbnz	r0, 80146ea <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 80146e6:	6010      	str	r0, [r2, #0]
	return NULL;
 80146e8:	e007      	b.n	80146fa <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 80146ea:	682c      	ldr	r4, [r5, #0]
 80146ec:	6866      	ldr	r6, [r4, #4]
 80146ee:	429e      	cmp	r6, r3
 80146f0:	d304      	bcc.n	80146fc <spi_context_get_next_buf+0x1e>
			return (*current)->buf;
 80146f2:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
 80146f4:	fbb6 f3f3 	udiv	r3, r6, r3
 80146f8:	6013      	str	r3, [r2, #0]
}
 80146fa:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 80146fc:	3408      	adds	r4, #8
		--(*count);
 80146fe:	3801      	subs	r0, #1
		++(*current);
 8014700:	602c      	str	r4, [r5, #0]
		--(*count);
 8014702:	6008      	str	r0, [r1, #0]
 8014704:	e7ed      	b.n	80146e2 <spi_context_get_next_buf+0x4>

08014706 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8014706:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8014708:	ab0b      	add	r3, sp, #44	; 0x2c
 801470a:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 801470c:	9303      	str	r3, [sp, #12]
 801470e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014710:	9302      	str	r3, [sp, #8]
 8014712:	2300      	movs	r3, #0
 8014714:	e9cd 3300 	strd	r3, r3, [sp]
 8014718:	2201      	movs	r2, #1
 801471a:	4618      	mov	r0, r3
 801471c:	f7ef f912 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8014720:	b007      	add	sp, #28
 8014722:	f85d fb04 	ldr.w	pc, [sp], #4

08014726 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8014726:	4603      	mov	r3, r0
 8014728:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 801472a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801472c:	7919      	ldrb	r1, [r3, #4]
 801472e:	2301      	movs	r3, #1
 8014730:	fa03 f101 	lsl.w	r1, r3, r1
 8014734:	6903      	ldr	r3, [r0, #16]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 801473a:	bf18      	it	ne
 801473c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8014740:	b112      	cbz	r2, 8014748 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 8014742:	6883      	ldr	r3, [r0, #8]
 8014744:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8014746:	4718      	bx	r3
 8014748:	6883      	ldr	r3, [r0, #8]
 801474a:	691b      	ldr	r3, [r3, #16]
 801474c:	e7fb      	b.n	8014746 <gpio_pin_set_dt.isra.0+0x20>

0801474e <_spi_context_cs_control>:
{
 801474e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8014750:	6803      	ldr	r3, [r0, #0]
{
 8014752:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8014754:	b1e3      	cbz	r3, 8014790 <_spi_context_cs_control+0x42>
 8014756:	6898      	ldr	r0, [r3, #8]
 8014758:	b1d0      	cbz	r0, 8014790 <_spi_context_cs_control+0x42>
 801475a:	6805      	ldr	r5, [r0, #0]
 801475c:	b1c5      	cbz	r5, 8014790 <_spi_context_cs_control+0x42>
		if (on) {
 801475e:	b149      	cbz	r1, 8014774 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8014760:	2101      	movs	r1, #1
 8014762:	f7ff ffe0 	bl	8014726 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8014766:	6823      	ldr	r3, [r4, #0]
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	6898      	ldr	r0, [r3, #8]
}
 801476c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8014770:	f7fa b904 	b.w	800e97c <z_impl_k_busy_wait>
			if (!force_off &&
 8014774:	b912      	cbnz	r2, 801477c <_spi_context_cs_control+0x2e>
 8014776:	889b      	ldrh	r3, [r3, #4]
 8014778:	04db      	lsls	r3, r3, #19
 801477a:	d409      	bmi.n	8014790 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 801477c:	6880      	ldr	r0, [r0, #8]
 801477e:	f7fa f8fd 	bl	800e97c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8014782:	6823      	ldr	r3, [r4, #0]
 8014784:	2100      	movs	r1, #0
 8014786:	6898      	ldr	r0, [r3, #8]
}
 8014788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 801478c:	f7ff bfcb 	b.w	8014726 <gpio_pin_set_dt.isra.0>
}
 8014790:	bd38      	pop	{r3, r4, r5, pc}

08014792 <spi_context_unlock_unconditionally>:
{
 8014792:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 8014794:	2201      	movs	r2, #1
 8014796:	2100      	movs	r1, #0
{
 8014798:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 801479a:	f7ff ffd8 	bl	801474e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 801479e:	69a3      	ldr	r3, [r4, #24]
 80147a0:	b933      	cbnz	r3, 80147b0 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 80147a2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80147a4:	f104 0010 	add.w	r0, r4, #16
}
 80147a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ac:	f7f9 bac2 	b.w	800dd34 <z_impl_k_sem_give>
 80147b0:	bd10      	pop	{r4, pc}

080147b2 <spi_stm32_release>:
{
 80147b2:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80147b4:	6900      	ldr	r0, [r0, #16]
 80147b6:	f7ff ffec 	bl	8014792 <spi_context_unlock_unconditionally>
}
 80147ba:	2000      	movs	r0, #0
 80147bc:	bd08      	pop	{r3, pc}

080147be <gpio_pin_configure_dt>:
{
 80147be:	b4f0      	push	{r4, r5, r6, r7}
 80147c0:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
 80147c2:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
 80147c4:	88d3      	ldrh	r3, [r2, #6]
	return gpio_pin_configure(spec->port,
 80147c6:	7916      	ldrb	r6, [r2, #4]
 80147c8:	430b      	orrs	r3, r1
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80147ca:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
 80147cc:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 80147ce:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80147d0:	d506      	bpl.n	80147e0 <gpio_pin_configure_dt+0x22>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80147d2:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 80147d6:	d003      	beq.n	80147e0 <gpio_pin_configure_dt+0x22>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80147d8:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80147da:	bf48      	it	mi
 80147dc:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80147e0:	680c      	ldr	r4, [r1, #0]
 80147e2:	2501      	movs	r5, #1
 80147e4:	40b5      	lsls	r5, r6
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80147e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80147ea:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80147ec:	bf4c      	ite	mi
 80147ee:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80147f0:	43ac      	bicpl	r4, r5
 80147f2:	600c      	str	r4, [r1, #0]
	return api->pin_configure(port, pin, flags);
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	4631      	mov	r1, r6
}
 80147f8:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
 80147fa:	4718      	bx	r3

080147fc <gpio_pin_get>:
{
 80147fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
 80147fe:	6905      	ldr	r5, [r0, #16]
{
 8014800:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
 8014802:	6883      	ldr	r3, [r0, #8]
 8014804:	a901      	add	r1, sp, #4
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	4798      	blx	r3
	if (ret == 0) {
 801480a:	b948      	cbnz	r0, 8014820 <gpio_pin_get+0x24>
		*value ^= data->invert;
 801480c:	9b01      	ldr	r3, [sp, #4]
 801480e:	682a      	ldr	r2, [r5, #0]
 8014810:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8014812:	2301      	movs	r3, #1
 8014814:	fa03 f104 	lsl.w	r1, r3, r4
 8014818:	420a      	tst	r2, r1
 801481a:	bf14      	ite	ne
 801481c:	4618      	movne	r0, r3
 801481e:	2000      	moveq	r0, #0
}
 8014820:	b003      	add	sp, #12
 8014822:	bd30      	pop	{r4, r5, pc}

08014824 <spi_context_get_next_buf>:
{
 8014824:	b570      	push	{r4, r5, r6, lr}
 8014826:	4605      	mov	r5, r0
	while (*count) {
 8014828:	6808      	ldr	r0, [r1, #0]
 801482a:	b908      	cbnz	r0, 8014830 <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 801482c:	6010      	str	r0, [r2, #0]
	return NULL;
 801482e:	e007      	b.n	8014840 <spi_context_get_next_buf+0x1c>
		if (((*current)->len / dfs) != 0) {
 8014830:	682c      	ldr	r4, [r5, #0]
 8014832:	6866      	ldr	r6, [r4, #4]
 8014834:	429e      	cmp	r6, r3
 8014836:	d304      	bcc.n	8014842 <spi_context_get_next_buf+0x1e>
			return (*current)->buf;
 8014838:	6820      	ldr	r0, [r4, #0]
			*buf_len = (*current)->len / dfs;
 801483a:	fbb6 f3f3 	udiv	r3, r6, r3
 801483e:	6013      	str	r3, [r2, #0]
}
 8014840:	bd70      	pop	{r4, r5, r6, pc}
		++(*current);
 8014842:	3408      	adds	r4, #8
		--(*count);
 8014844:	3801      	subs	r0, #1
		++(*current);
 8014846:	602c      	str	r4, [r5, #0]
		--(*count);
 8014848:	6008      	str	r0, [r1, #0]
 801484a:	e7ed      	b.n	8014828 <spi_context_get_next_buf+0x4>

0801484c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 801484c:	4603      	mov	r3, r0
 801484e:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
 8014850:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8014852:	7919      	ldrb	r1, [r3, #4]
 8014854:	2301      	movs	r3, #1
 8014856:	fa03 f101 	lsl.w	r1, r3, r1
 801485a:	6903      	ldr	r3, [r0, #16]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	4219      	tst	r1, r3
 8014860:	d003      	beq.n	801486a <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
 8014862:	b122      	cbz	r2, 801486e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
 8014864:	6883      	ldr	r3, [r0, #8]
 8014866:	691b      	ldr	r3, [r3, #16]
 8014868:	e003      	b.n	8014872 <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
 801486a:	2a00      	cmp	r2, #0
 801486c:	d0fa      	beq.n	8014864 <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
 801486e:	6883      	ldr	r3, [r0, #8]
 8014870:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8014872:	4718      	bx	r3

08014874 <_spi_context_cs_control>:
{
 8014874:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8014876:	6803      	ldr	r3, [r0, #0]
{
 8014878:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 801487a:	b1e3      	cbz	r3, 80148b6 <_spi_context_cs_control+0x42>
 801487c:	6898      	ldr	r0, [r3, #8]
 801487e:	b1d0      	cbz	r0, 80148b6 <_spi_context_cs_control+0x42>
 8014880:	6805      	ldr	r5, [r0, #0]
 8014882:	b1c5      	cbz	r5, 80148b6 <_spi_context_cs_control+0x42>
		if (on) {
 8014884:	b149      	cbz	r1, 801489a <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 8014886:	2101      	movs	r1, #1
 8014888:	f7ff ffe0 	bl	801484c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 801488c:	6823      	ldr	r3, [r4, #0]
 801488e:	689b      	ldr	r3, [r3, #8]
 8014890:	6898      	ldr	r0, [r3, #8]
}
 8014892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8014896:	f7fa b871 	b.w	800e97c <z_impl_k_busy_wait>
			if (!force_off &&
 801489a:	b912      	cbnz	r2, 80148a2 <_spi_context_cs_control+0x2e>
 801489c:	889b      	ldrh	r3, [r3, #4]
 801489e:	04db      	lsls	r3, r3, #19
 80148a0:	d409      	bmi.n	80148b6 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 80148a2:	6880      	ldr	r0, [r0, #8]
 80148a4:	f7fa f86a 	bl	800e97c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80148a8:	6823      	ldr	r3, [r4, #0]
 80148aa:	2100      	movs	r1, #0
 80148ac:	6898      	ldr	r0, [r3, #8]
}
 80148ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80148b2:	f7ff bfcb 	b.w	801484c <gpio_pin_set_dt.isra.0>
}
 80148b6:	bd38      	pop	{r3, r4, r5, pc}

080148b8 <spi_bitbang_release>:
{
 80148b8:	b510      	push	{r4, lr}
	struct spi_bitbang_data *data = dev->data;
 80148ba:	6904      	ldr	r4, [r0, #16]
	_spi_context_cs_control(ctx, false, true);
 80148bc:	2201      	movs	r2, #1
 80148be:	2100      	movs	r1, #0
 80148c0:	4620      	mov	r0, r4
 80148c2:	f7ff ffd7 	bl	8014874 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 80148c6:	69a3      	ldr	r3, [r4, #24]
 80148c8:	b923      	cbnz	r3, 80148d4 <spi_bitbang_release+0x1c>
		ctx->owner = NULL;
 80148ca:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80148cc:	f104 0010 	add.w	r0, r4, #16
 80148d0:	f7f9 fa30 	bl	800dd34 <z_impl_k_sem_give>
}
 80148d4:	2000      	movs	r0, #0
 80148d6:	bd10      	pop	{r4, pc}

080148d8 <uart_stm32_err_check>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80148d8:	6843      	ldr	r3, [r0, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80148dc:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 80148de:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 80148e0:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80148e2:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80148e4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 80148e8:	bf48      	it	mi
 80148ea:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80148ee:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 80148f0:	69da      	ldr	r2, [r3, #28]
		err |= UART_ERROR_FRAMING;
 80148f2:	bf48      	it	mi
 80148f4:	f040 0004 	orrmi.w	r0, r0, #4
 80148f8:	05d1      	lsls	r1, r2, #23
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 80148fa:	bf42      	ittt	mi
 80148fc:	f44f 7280 	movmi.w	r2, #256	; 0x100
		err |= UART_BREAK;
 8014900:	f040 0008 	orrmi.w	r0, r0, #8
 8014904:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8014906:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8014908:	bf44      	itt	mi
 801490a:	2208      	movmi	r2, #8
 801490c:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 801490e:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8014910:	bf44      	itt	mi
 8014912:	2201      	movmi	r2, #1
 8014914:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8014916:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8014918:	bf44      	itt	mi
 801491a:	2202      	movmi	r2, #2
 801491c:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 801491e:	2204      	movs	r2, #4
 8014920:	621a      	str	r2, [r3, #32]
}
 8014922:	4770      	bx	lr

08014924 <uart_stm32_poll_out>:
{
 8014924:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 8014926:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8014928:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 801492a:	69d3      	ldr	r3, [r2, #28]
 801492c:	061b      	lsls	r3, r3, #24
 801492e:	d5fc      	bpl.n	801492a <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 8014930:	f04f 0210 	mov.w	r2, #16
 8014934:	f3ef 8311 	mrs	r3, BASEPRI
 8014938:	f382 8812 	msr	BASEPRI_MAX, r2
 801493c:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8014940:	6802      	ldr	r2, [r0, #0]
 8014942:	69d4      	ldr	r4, [r2, #28]
 8014944:	0624      	lsls	r4, r4, #24
 8014946:	d404      	bmi.n	8014952 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8014948:	f383 8811 	msr	BASEPRI, r3
 801494c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8014950:	e7ea      	b.n	8014928 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8014952:	6291      	str	r1, [r2, #40]	; 0x28
	__asm__ volatile(
 8014954:	f383 8811 	msr	BASEPRI, r3
 8014958:	f3bf 8f6f 	isb	sy
}
 801495c:	bd10      	pop	{r4, pc}

0801495e <uart_stm32_poll_in>:
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 801495e:	6843      	ldr	r3, [r0, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8014962:	69da      	ldr	r2, [r3, #28]
 8014964:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8014966:	bf44      	itt	mi
 8014968:	2208      	movmi	r2, #8
 801496a:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 801496c:	69da      	ldr	r2, [r3, #28]
 801496e:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8014970:	bf43      	ittte	mi
 8014972:	6a5b      	ldrmi	r3, [r3, #36]	; 0x24
 8014974:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8014976:	2000      	movmi	r0, #0
		return -1;
 8014978:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 801497c:	4770      	bx	lr

0801497e <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 801497e:	6903      	ldr	r3, [r0, #16]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 8014984:	6843      	ldr	r3, [r0, #4]
 8014986:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8014988:	6813      	ldr	r3, [r2, #0]
 801498a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 801498e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014992:	d02d      	beq.n	80149f0 <uart_stm32_config_get+0x72>
		return UART_CFG_PARITY_NONE;
 8014994:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8014998:	4243      	negs	r3, r0
 801499a:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 801499c:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 801499e:	6853      	ldr	r3, [r2, #4]
 80149a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80149a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80149a8:	d024      	beq.n	80149f4 <uart_stm32_config_get+0x76>
 80149aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80149ae:	d023      	beq.n	80149f8 <uart_stm32_config_get+0x7a>
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	bf14      	ite	ne
 80149b4:	2303      	movne	r3, #3
 80149b6:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80149b8:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80149ba:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80149bc:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80149be:	f000 2010 	and.w	r0, r0, #268439552	; 0x10001000
	switch (db) {
 80149c2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80149c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80149ca:	d017      	beq.n	80149fc <uart_stm32_config_get+0x7e>
 80149cc:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80149d0:	d119      	bne.n	8014a06 <uart_stm32_config_get+0x88>
			return UART_CFG_DATA_BITS_6;
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	bf0c      	ite	eq
 80149d6:	2302      	moveq	r3, #2
 80149d8:	2301      	movne	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80149da:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80149dc:	6893      	ldr	r3, [r2, #8]
 80149de:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80149e2:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80149e6:	4253      	negs	r3, r2
 80149e8:	4153      	adcs	r3, r2
 80149ea:	71cb      	strb	r3, [r1, #7]
}
 80149ec:	2000      	movs	r0, #0
 80149ee:	4770      	bx	lr
	switch (parity) {
 80149f0:	2302      	movs	r3, #2
 80149f2:	e7d3      	b.n	801499c <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 80149f4:	2300      	movs	r3, #0
 80149f6:	e7df      	b.n	80149b8 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 80149f8:	2302      	movs	r3, #2
 80149fa:	e7dd      	b.n	80149b8 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_9;
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	bf14      	ite	ne
 8014a00:	2303      	movne	r3, #3
 8014a02:	2304      	moveq	r3, #4
 8014a04:	e7e9      	b.n	80149da <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	bf14      	ite	ne
 8014a0a:	2302      	movne	r3, #2
 8014a0c:	2303      	moveq	r3, #3
 8014a0e:	e7e4      	b.n	80149da <uart_stm32_config_get+0x5c>

08014a10 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8014a10:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 8014a12:	6803      	ldr	r3, [r0, #0]
 8014a14:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8014a16:	7903      	ldrb	r3, [r0, #4]
 8014a18:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8014a1c:	3b01      	subs	r3, #1
 8014a1e:	00db      	lsls	r3, r3, #3
 8014a20:	6805      	ldr	r5, [r0, #0]
 8014a22:	6814      	ldr	r4, [r2, #0]
 8014a24:	441d      	add	r5, r3
 8014a26:	42ac      	cmp	r4, r5
 8014a28:	d902      	bls.n	8014a30 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
 8014a2a:	f06f 0001 	mvn.w	r0, #1
}
 8014a2e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 8014a30:	7965      	ldrb	r5, [r4, #5]
 8014a32:	428d      	cmp	r5, r1
 8014a34:	d002      	beq.n	8014a3c <pinctrl_lookup_state+0x2c>
		(*state)++;
 8014a36:	3408      	adds	r4, #8
 8014a38:	6014      	str	r4, [r2, #0]
 8014a3a:	e7f1      	b.n	8014a20 <pinctrl_lookup_state+0x10>
			return 0;
 8014a3c:	2000      	movs	r0, #0
 8014a3e:	e7f6      	b.n	8014a2e <pinctrl_lookup_state+0x1e>

08014a40 <ld_dword>:
}
 8014a40:	6800      	ldr	r0, [r0, #0]
 8014a42:	4770      	bx	lr

08014a44 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
 8014a44:	0a0b      	lsrs	r3, r1, #8
 8014a46:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a48:	7043      	strb	r3, [r0, #1]
 8014a4a:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014a4c:	0e09      	lsrs	r1, r1, #24
 8014a4e:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8014a50:	70c1      	strb	r1, [r0, #3]
}
 8014a52:	4770      	bx	lr

08014a54 <clst2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8014a54:	6943      	ldr	r3, [r0, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
 8014a56:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8014a58:	3b02      	subs	r3, #2
 8014a5a:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8014a5c:	bf83      	ittte	hi
 8014a5e:	8943      	ldrhhi	r3, [r0, #10]
 8014a60:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
 8014a62:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8014a66:	2000      	movls	r0, #0
}
 8014a68:	4770      	bx	lr

08014a6a <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8014a6a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014a6e:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8014a70:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8014a72:	7803      	ldrb	r3, [r0, #0]
 8014a74:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014a76:	bf01      	itttt	eq
 8014a78:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014a7a:	750a      	strbeq	r2, [r1, #20]
 8014a7c:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8014a7e:	754a      	strbeq	r2, [r1, #21]
}
 8014a80:	4770      	bx	lr

08014a82 <validate>:
{
 8014a82:	b538      	push	{r3, r4, r5, lr}
 8014a84:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014a86:	4604      	mov	r4, r0
 8014a88:	b918      	cbnz	r0, 8014a92 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8014a8a:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	602b      	str	r3, [r5, #0]
}
 8014a90:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014a92:	6803      	ldr	r3, [r0, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d0f8      	beq.n	8014a8a <validate+0x8>
 8014a98:	781a      	ldrb	r2, [r3, #0]
 8014a9a:	2a00      	cmp	r2, #0
 8014a9c:	d0f5      	beq.n	8014a8a <validate+0x8>
 8014a9e:	8881      	ldrh	r1, [r0, #4]
 8014aa0:	88da      	ldrh	r2, [r3, #6]
 8014aa2:	4291      	cmp	r1, r2
 8014aa4:	d1f1      	bne.n	8014a8a <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014aa6:	7858      	ldrb	r0, [r3, #1]
 8014aa8:	f7f8 fc5c 	bl	800d364 <disk_status>
 8014aac:	f010 0001 	ands.w	r0, r0, #1
 8014ab0:	d1eb      	bne.n	8014a8a <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014ab2:	6823      	ldr	r3, [r4, #0]
 8014ab4:	e7eb      	b.n	8014a8e <validate+0xc>

08014ab6 <sync_window>:
{
 8014ab6:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8014ab8:	78c3      	ldrb	r3, [r0, #3]
{
 8014aba:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8014abc:	b913      	cbnz	r3, 8014ac4 <sync_window+0xe>
	FRESULT res = FR_OK;
 8014abe:	2500      	movs	r5, #0
}
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8014ac4:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8014ac8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014aca:	7840      	ldrb	r0, [r0, #1]
 8014acc:	2301      	movs	r3, #1
 8014ace:	4631      	mov	r1, r6
 8014ad0:	f7f8 fc6c 	bl	800d3ac <disk_write>
 8014ad4:	4605      	mov	r5, r0
 8014ad6:	b980      	cbnz	r0, 8014afa <sync_window+0x44>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8014ad8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014ada:	6a23      	ldr	r3, [r4, #32]
 8014adc:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
 8014ade:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8014ae0:	1acb      	subs	r3, r1, r3
 8014ae2:	4293      	cmp	r3, r2
 8014ae4:	d2eb      	bcs.n	8014abe <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8014ae6:	78a3      	ldrb	r3, [r4, #2]
 8014ae8:	2b02      	cmp	r3, #2
 8014aea:	d1e8      	bne.n	8014abe <sync_window+0x8>
 8014aec:	440a      	add	r2, r1
 8014aee:	7860      	ldrb	r0, [r4, #1]
 8014af0:	2301      	movs	r3, #1
 8014af2:	4631      	mov	r1, r6
 8014af4:	f7f8 fc5a 	bl	800d3ac <disk_write>
 8014af8:	e7e2      	b.n	8014ac0 <sync_window+0xa>
			res = FR_DISK_ERR;
 8014afa:	2501      	movs	r5, #1
 8014afc:	e7e0      	b.n	8014ac0 <sync_window+0xa>

08014afe <move_window>:
{
 8014afe:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8014b00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014b02:	428b      	cmp	r3, r1
{
 8014b04:	4605      	mov	r5, r0
 8014b06:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 8014b08:	d010      	beq.n	8014b2c <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
 8014b0a:	f7ff ffd4 	bl	8014ab6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014b0e:	b960      	cbnz	r0, 8014b2a <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8014b10:	4622      	mov	r2, r4
 8014b12:	7868      	ldrb	r0, [r5, #1]
 8014b14:	2301      	movs	r3, #1
 8014b16:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8014b1a:	f7f8 fc3b 	bl	800d394 <disk_read>
				res = FR_DISK_ERR;
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	bf1c      	itt	ne
 8014b22:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8014b26:	2001      	movne	r0, #1
			fs->winsect = sect;
 8014b28:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8014b2a:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8014b2c:	2000      	movs	r0, #0
 8014b2e:	e7fc      	b.n	8014b2a <move_window+0x2c>

08014b30 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014b30:	2901      	cmp	r1, #1
{
 8014b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b36:	4606      	mov	r6, r0
 8014b38:	460c      	mov	r4, r1
 8014b3a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014b3c:	d972      	bls.n	8014c24 <put_fat+0xf4>
 8014b3e:	6943      	ldr	r3, [r0, #20]
 8014b40:	428b      	cmp	r3, r1
 8014b42:	d96f      	bls.n	8014c24 <put_fat+0xf4>
		switch (fs->fs_type) {
 8014b44:	7803      	ldrb	r3, [r0, #0]
 8014b46:	2b02      	cmp	r3, #2
 8014b48:	d03f      	beq.n	8014bca <put_fat+0x9a>
 8014b4a:	2b03      	cmp	r3, #3
 8014b4c:	d050      	beq.n	8014bf0 <put_fat+0xc0>
 8014b4e:	2b01      	cmp	r3, #1
 8014b50:	d168      	bne.n	8014c24 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8014b52:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014b56:	6a01      	ldr	r1, [r0, #32]
 8014b58:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8014b5c:	f7ff ffcf 	bl	8014afe <move_window>
 8014b60:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8014b62:	bb38      	cbnz	r0, 8014bb4 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8014b64:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8014b68:	f108 0a01 	add.w	sl, r8, #1
 8014b6c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8014b70:	f014 0401 	ands.w	r4, r4, #1
 8014b74:	bf1f      	itttt	ne
 8014b76:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8014b7a:	f003 020f 	andne.w	r2, r3, #15
 8014b7e:	013b      	lslne	r3, r7, #4
 8014b80:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8014b84:	bf14      	ite	ne
 8014b86:	4313      	orrne	r3, r2
 8014b88:	b2fb      	uxtbeq	r3, r7
 8014b8a:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014b8e:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 8014b90:	2301      	movs	r3, #1
 8014b92:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014b94:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8014b98:	4630      	mov	r0, r6
 8014b9a:	f7ff ffb0 	bl	8014afe <move_window>
			if (res != FR_OK) break;
 8014b9e:	4605      	mov	r5, r0
 8014ba0:	b940      	cbnz	r0, 8014bb4 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8014ba2:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8014ba6:	b144      	cbz	r4, 8014bba <put_fat+0x8a>
 8014ba8:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8014bac:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8014bb0:	2301      	movs	r3, #1
 8014bb2:	70f3      	strb	r3, [r6, #3]
}
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8014bba:	f819 300a 	ldrb.w	r3, [r9, sl]
 8014bbe:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8014bc2:	f023 030f 	bic.w	r3, r3, #15
 8014bc6:	431f      	orrs	r7, r3
 8014bc8:	e7f0      	b.n	8014bac <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014bca:	6a01      	ldr	r1, [r0, #32]
 8014bcc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8014bd0:	f7ff ff95 	bl	8014afe <move_window>
			if (res != FR_OK) break;
 8014bd4:	4605      	mov	r5, r0
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	d1ec      	bne.n	8014bb4 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8014bda:	0064      	lsls	r4, r4, #1
 8014bdc:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8014be0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8014be4:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8014be6:	551f      	strb	r7, [r3, r4]
 8014be8:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8014bec:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8014bee:	e7df      	b.n	8014bb0 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014bf0:	6a01      	ldr	r1, [r0, #32]
 8014bf2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8014bf6:	f7ff ff82 	bl	8014afe <move_window>
			if (res != FR_OK) break;
 8014bfa:	4605      	mov	r5, r0
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	d1d9      	bne.n	8014bb4 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014c00:	00a4      	lsls	r4, r4, #2
 8014c02:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8014c06:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8014c0a:	441c      	add	r4, r3
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f7ff ff17 	bl	8014a40 <ld_dword>
 8014c12:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8014c16:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014c1a:	4339      	orrs	r1, r7
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	f7ff ff11 	bl	8014a44 <st_dword>
 8014c22:	e7c5      	b.n	8014bb0 <put_fat+0x80>
		switch (fs->fs_type) {
 8014c24:	2502      	movs	r5, #2
 8014c26:	e7c5      	b.n	8014bb4 <put_fat+0x84>

08014c28 <dir_clear>:
{
 8014c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2a:	4605      	mov	r5, r0
 8014c2c:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014c2e:	f7ff ff42 	bl	8014ab6 <sync_window>
 8014c32:	4604      	mov	r4, r0
 8014c34:	b9f8      	cbnz	r0, 8014c76 <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8014c36:	4631      	mov	r1, r6
 8014c38:	4628      	mov	r0, r5
 8014c3a:	f7ff ff0b 	bl	8014a54 <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8014c3e:	f105 0730 	add.w	r7, r5, #48	; 0x30
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8014c42:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 8014c44:	62e8      	str	r0, [r5, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
 8014c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c4a:	4621      	mov	r1, r4
 8014c4c:	4638      	mov	r0, r7
 8014c4e:	f001 fcae 	bl	80165ae <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8014c52:	896b      	ldrh	r3, [r5, #10]
 8014c54:	429c      	cmp	r4, r3
 8014c56:	d304      	bcc.n	8014c62 <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8014c58:	8968      	ldrh	r0, [r5, #10]
 8014c5a:	1b00      	subs	r0, r0, r4
 8014c5c:	bf18      	it	ne
 8014c5e:	2001      	movne	r0, #1
}
 8014c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8014c62:	7868      	ldrb	r0, [r5, #1]
 8014c64:	2301      	movs	r3, #1
 8014c66:	1932      	adds	r2, r6, r4
 8014c68:	4639      	mov	r1, r7
 8014c6a:	f7f8 fb9f 	bl	800d3ac <disk_write>
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d1f2      	bne.n	8014c58 <dir_clear+0x30>
 8014c72:	3401      	adds	r4, #1
 8014c74:	e7ed      	b.n	8014c52 <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014c76:	2001      	movs	r0, #1
 8014c78:	e7f2      	b.n	8014c60 <dir_clear+0x38>

08014c7a <sync_fs>:
{
 8014c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c7c:	4604      	mov	r4, r0
	res = sync_window(fs);
 8014c7e:	f7ff ff1a 	bl	8014ab6 <sync_window>
 8014c82:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d142      	bne.n	8014d0e <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8014c88:	7823      	ldrb	r3, [r4, #0]
 8014c8a:	2b03      	cmp	r3, #3
 8014c8c:	d137      	bne.n	8014cfe <sync_fs+0x84>
 8014c8e:	7927      	ldrb	r7, [r4, #4]
 8014c90:	2f01      	cmp	r7, #1
 8014c92:	d134      	bne.n	8014cfe <sync_fs+0x84>
			memset(fs->win, 0, sizeof fs->win);
 8014c94:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014c98:	4601      	mov	r1, r0
 8014c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	f001 fc85 	bl	80165ae <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8014ca4:	2355      	movs	r3, #85	; 0x55
 8014ca6:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8014caa:	23aa      	movs	r3, #170	; 0xaa
 8014cac:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8014cb0:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8014cb2:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8014cb4:	2172      	movs	r1, #114	; 0x72
 8014cb6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8014cba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8014cbe:	2361      	movs	r3, #97	; 0x61
 8014cc0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8014cc4:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
 8014cc8:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8014ccc:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8014cd0:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 8014cd4:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8014cd8:	6921      	ldr	r1, [r4, #16]
 8014cda:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8014cde:	f7ff feb1 	bl	8014a44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8014ce2:	68e1      	ldr	r1, [r4, #12]
 8014ce4:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8014ce8:	f7ff feac 	bl	8014a44 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8014cec:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8014cee:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8014cf0:	3201      	adds	r2, #1
 8014cf2:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8014cf4:	463b      	mov	r3, r7
 8014cf6:	4631      	mov	r1, r6
 8014cf8:	f7f8 fb58 	bl	800d3ac <disk_write>
			fs->fsi_flag = 0;
 8014cfc:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014cfe:	2200      	movs	r2, #0
 8014d00:	7860      	ldrb	r0, [r4, #1]
 8014d02:	4611      	mov	r1, r2
 8014d04:	f7f8 fb5e 	bl	800d3c4 <disk_ioctl>
	res = sync_window(fs);
 8014d08:	3800      	subs	r0, #0
 8014d0a:	bf18      	it	ne
 8014d0c:	2001      	movne	r0, #1
}
 8014d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d10 <get_fileinfo.part.0.isra.0>:
static void get_fileinfo (
 8014d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	si = di = 0;
 8014d12:	2300      	movs	r3, #0
static void get_fileinfo (
 8014d14:	4602      	mov	r2, r0
 8014d16:	1e45      	subs	r5, r0, #1
	si = di = 0;
 8014d18:	461c      	mov	r4, r3
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8014d1a:	262e      	movs	r6, #46	; 0x2e
		c = (TCHAR)dp->dir[si++];
 8014d1c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
		if (c == ' ') continue;		/* Skip padding spaces */
 8014d20:	2820      	cmp	r0, #32
		c = (TCHAR)dp->dir[si++];
 8014d22:	f104 0401 	add.w	r4, r4, #1
		if (c == ' ') continue;		/* Skip padding spaces */
 8014d26:	d00a      	beq.n	8014d3e <get_fileinfo.part.0.isra.0+0x2e>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 8014d28:	2805      	cmp	r0, #5
 8014d2a:	bf08      	it	eq
 8014d2c:	20e5      	moveq	r0, #229	; 0xe5
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8014d2e:	2c09      	cmp	r4, #9
 8014d30:	bf02      	ittt	eq
 8014d32:	18cf      	addeq	r7, r1, r3
 8014d34:	3301      	addeq	r3, #1
 8014d36:	727e      	strbeq	r6, [r7, #9]
		fno->fname[di++] = c;
 8014d38:	18cf      	adds	r7, r1, r3
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	7278      	strb	r0, [r7, #9]
	while (si < 11) {		/* Copy name body and extension */
 8014d3e:	2c0b      	cmp	r4, #11
 8014d40:	d1ec      	bne.n	8014d1c <get_fileinfo.part.0.isra.0+0xc>
	fno->fname[di] = 0;		/* Terminate the SFN */
 8014d42:	440b      	add	r3, r1
 8014d44:	2000      	movs	r0, #0
 8014d46:	7258      	strb	r0, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8014d48:	7ad3      	ldrb	r3, [r2, #11]
 8014d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d4e:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8014d50:	f102 001c 	add.w	r0, r2, #28
 8014d54:	f7ff fe74 	bl	8014a40 <ld_dword>
 8014d58:	6008      	str	r0, [r1, #0]
	rv = ptr[1];
 8014d5a:	8ad3      	ldrh	r3, [r2, #22]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8014d5c:	80cb      	strh	r3, [r1, #6]
	rv = ptr[1];
 8014d5e:	8b13      	ldrh	r3, [r2, #24]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8014d60:	808b      	strh	r3, [r1, #4]
}
 8014d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d64 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8014d64:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8014d66:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014d68:	bf04      	itt	eq
 8014d6a:	8a8a      	ldrheq	r2, [r1, #20]
 8014d6c:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	4770      	bx	lr

08014d74 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014d74:	2901      	cmp	r1, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8014d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d78:	4606      	mov	r6, r0
 8014d7a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014d7c:	d94e      	bls.n	8014e1c <get_fat.isra.0+0xa8>
 8014d7e:	6943      	ldr	r3, [r0, #20]
 8014d80:	4299      	cmp	r1, r3
 8014d82:	d24b      	bcs.n	8014e1c <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8014d84:	7803      	ldrb	r3, [r0, #0]
 8014d86:	2b02      	cmp	r3, #2
 8014d88:	d029      	beq.n	8014dde <get_fat.isra.0+0x6a>
 8014d8a:	2b03      	cmp	r3, #3
 8014d8c:	d034      	beq.n	8014df8 <get_fat.isra.0+0x84>
 8014d8e:	2b01      	cmp	r3, #1
 8014d90:	d144      	bne.n	8014e1c <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8014d92:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014d96:	6a01      	ldr	r1, [r0, #32]
 8014d98:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8014d9c:	f7ff feaf 	bl	8014afe <move_window>
 8014da0:	b110      	cbz	r0, 8014da8 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8014da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8014da8:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014daa:	6a31      	ldr	r1, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8014dac:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8014db0:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014db2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8014db6:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8014db8:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014dbc:	f7ff fe9f 	bl	8014afe <move_window>
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	d1ee      	bne.n	8014da2 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8014dc4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8014dc8:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8014dca:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8014dcc:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8014dd0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8014dd4:	bf4c      	ite	mi
 8014dd6:	0900      	lsrmi	r0, r0, #4
 8014dd8:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8014ddc:	e7e3      	b.n	8014da6 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014dde:	6a01      	ldr	r1, [r0, #32]
 8014de0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8014de4:	f7ff fe8b 	bl	8014afe <move_window>
 8014de8:	2800      	cmp	r0, #0
 8014dea:	d1da      	bne.n	8014da2 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8014dec:	0064      	lsls	r4, r4, #1
 8014dee:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8014df2:	4426      	add	r6, r4
 8014df4:	8e30      	ldrh	r0, [r6, #48]	; 0x30
			break;
 8014df6:	e7d6      	b.n	8014da6 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014df8:	6a01      	ldr	r1, [r0, #32]
 8014dfa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8014dfe:	f7ff fe7e 	bl	8014afe <move_window>
 8014e02:	2800      	cmp	r0, #0
 8014e04:	d1cd      	bne.n	8014da2 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8014e06:	00a4      	lsls	r4, r4, #2
 8014e08:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8014e0c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8014e10:	4420      	add	r0, r4
 8014e12:	f7ff fe15 	bl	8014a40 <ld_dword>
 8014e16:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8014e1a:	e7c4      	b.n	8014da6 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8014e1c:	2001      	movs	r0, #1
	return val;
 8014e1e:	e7c2      	b.n	8014da6 <get_fat.isra.0+0x32>

08014e20 <remove_chain.isra.0>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 8014e20:	b570      	push	{r4, r5, r6, lr}
 8014e22:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014e24:	2c01      	cmp	r4, #1
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 8014e26:	4605      	mov	r5, r0
 8014e28:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014e2a:	d92a      	bls.n	8014e82 <remove_chain.isra.0+0x62>
 8014e2c:	6943      	ldr	r3, [r0, #20]
 8014e2e:	429c      	cmp	r4, r3
 8014e30:	d227      	bcs.n	8014e82 <remove_chain.isra.0+0x62>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014e32:	b122      	cbz	r2, 8014e3e <remove_chain.isra.0+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e38:	f7ff fe7a 	bl	8014b30 <put_fat>
		if (res != FR_OK) return res;
 8014e3c:	b938      	cbnz	r0, 8014e4e <remove_chain.isra.0+0x2e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014e3e:	4621      	mov	r1, r4
 8014e40:	4628      	mov	r0, r5
 8014e42:	f7ff ff97 	bl	8014d74 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014e46:	4626      	mov	r6, r4
 8014e48:	4604      	mov	r4, r0
 8014e4a:	b908      	cbnz	r0, 8014e50 <remove_chain.isra.0+0x30>
	return FR_OK;
 8014e4c:	2000      	movs	r0, #0
}
 8014e4e:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014e50:	2801      	cmp	r0, #1
 8014e52:	d016      	beq.n	8014e82 <remove_chain.isra.0+0x62>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014e54:	1c43      	adds	r3, r0, #1
 8014e56:	d016      	beq.n	8014e86 <remove_chain.isra.0+0x66>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014e58:	2200      	movs	r2, #0
 8014e5a:	4631      	mov	r1, r6
 8014e5c:	4628      	mov	r0, r5
 8014e5e:	f7ff fe67 	bl	8014b30 <put_fat>
			if (res != FR_OK) return res;
 8014e62:	2800      	cmp	r0, #0
 8014e64:	d1f3      	bne.n	8014e4e <remove_chain.isra.0+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014e66:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8014e6a:	1e91      	subs	r1, r2, #2
 8014e6c:	428b      	cmp	r3, r1
 8014e6e:	d205      	bcs.n	8014e7c <remove_chain.isra.0+0x5c>
			fs->free_clst++;
 8014e70:	3301      	adds	r3, #1
 8014e72:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8014e74:	792b      	ldrb	r3, [r5, #4]
 8014e76:	f043 0301 	orr.w	r3, r3, #1
 8014e7a:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014e7c:	4294      	cmp	r4, r2
 8014e7e:	d3de      	bcc.n	8014e3e <remove_chain.isra.0+0x1e>
 8014e80:	e7e4      	b.n	8014e4c <remove_chain.isra.0+0x2c>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014e82:	2002      	movs	r0, #2
 8014e84:	e7e3      	b.n	8014e4e <remove_chain.isra.0+0x2e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014e86:	2001      	movs	r0, #1
 8014e88:	e7e1      	b.n	8014e4e <remove_chain.isra.0+0x2e>

08014e8a <create_chain.isra.0>:
static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
 8014e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e8c:	4605      	mov	r5, r0
	if (clst == 0) {	/* Create a new chain */
 8014e8e:	460f      	mov	r7, r1
 8014e90:	b949      	cbnz	r1, 8014ea6 <create_chain.isra.0+0x1c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8014e92:	68c6      	ldr	r6, [r0, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014e94:	b1b6      	cbz	r6, 8014ec4 <create_chain.isra.0+0x3a>
 8014e96:	6943      	ldr	r3, [r0, #20]
 8014e98:	429e      	cmp	r6, r3
 8014e9a:	bf28      	it	cs
 8014e9c:	2601      	movcs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8014e9e:	692b      	ldr	r3, [r5, #16]
 8014ea0:	b993      	cbnz	r3, 8014ec8 <create_chain.isra.0+0x3e>
 8014ea2:	2400      	movs	r4, #0
 8014ea4:	e005      	b.n	8014eb2 <create_chain.isra.0+0x28>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014ea6:	f7ff ff65 	bl	8014d74 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Test for insanity */
 8014eaa:	2801      	cmp	r0, #1
 8014eac:	4604      	mov	r4, r0
 8014eae:	d802      	bhi.n	8014eb6 <create_chain.isra.0+0x2c>
 8014eb0:	2401      	movs	r4, #1
}
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8014eb6:	1c42      	adds	r2, r0, #1
 8014eb8:	d050      	beq.n	8014f5c <create_chain.isra.0+0xd2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014eba:	696b      	ldr	r3, [r5, #20]
 8014ebc:	4298      	cmp	r0, r3
 8014ebe:	d3f8      	bcc.n	8014eb2 <create_chain.isra.0+0x28>
 8014ec0:	463e      	mov	r6, r7
 8014ec2:	e7ec      	b.n	8014e9e <create_chain.isra.0+0x14>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014ec4:	2601      	movs	r6, #1
 8014ec6:	e7ea      	b.n	8014e9e <create_chain.isra.0+0x14>
		if (scl == clst) {						/* Stretching an existing chain? */
 8014ec8:	42b7      	cmp	r7, r6
 8014eca:	d115      	bne.n	8014ef8 <create_chain.isra.0+0x6e>
			if (ncl >= fs->n_fatent) ncl = 2;
 8014ecc:	696b      	ldr	r3, [r5, #20]
			ncl = scl + 1;						/* Test if next cluster is free */
 8014ece:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8014ed0:	429c      	cmp	r4, r3
 8014ed2:	bf28      	it	cs
 8014ed4:	2402      	movcs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	4628      	mov	r0, r5
 8014eda:	f7ff ff4b 	bl	8014d74 <get_fat.isra.0>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8014ede:	2801      	cmp	r0, #1
 8014ee0:	d0e6      	beq.n	8014eb0 <create_chain.isra.0+0x26>
 8014ee2:	1c43      	adds	r3, r0, #1
 8014ee4:	d03a      	beq.n	8014f5c <create_chain.isra.0+0xd2>
			if (cs != 0) {						/* Not free? */
 8014ee6:	b1d8      	cbz	r0, 8014f20 <create_chain.isra.0+0x96>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8014ee8:	68eb      	ldr	r3, [r5, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8014eea:	2b01      	cmp	r3, #1
 8014eec:	d904      	bls.n	8014ef8 <create_chain.isra.0+0x6e>
 8014eee:	696a      	ldr	r2, [r5, #20]
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	bf34      	ite	cc
 8014ef4:	461e      	movcc	r6, r3
 8014ef6:	463e      	movcs	r6, r7
 8014ef8:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014efa:	696b      	ldr	r3, [r5, #20]
				ncl++;							/* Next cluster */
 8014efc:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014efe:	429c      	cmp	r4, r3
 8014f00:	d302      	bcc.n	8014f08 <create_chain.isra.0+0x7e>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8014f02:	2e01      	cmp	r6, #1
 8014f04:	d9cd      	bls.n	8014ea2 <create_chain.isra.0+0x18>
					ncl = 2;
 8014f06:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014f08:	4621      	mov	r1, r4
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	f7ff ff32 	bl	8014d74 <get_fat.isra.0>
				if (cs == 0) break;				/* Found a free cluster? */
 8014f10:	b140      	cbz	r0, 8014f24 <create_chain.isra.0+0x9a>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8014f12:	2801      	cmp	r0, #1
 8014f14:	d0cc      	beq.n	8014eb0 <create_chain.isra.0+0x26>
 8014f16:	3001      	adds	r0, #1
 8014f18:	d020      	beq.n	8014f5c <create_chain.isra.0+0xd2>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8014f1a:	42a6      	cmp	r6, r4
 8014f1c:	d1ed      	bne.n	8014efa <create_chain.isra.0+0x70>
 8014f1e:	e7c0      	b.n	8014ea2 <create_chain.isra.0+0x18>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8014f20:	2c00      	cmp	r4, #0
 8014f22:	d0e9      	beq.n	8014ef8 <create_chain.isra.0+0x6e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8014f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f28:	4621      	mov	r1, r4
 8014f2a:	4628      	mov	r0, r5
 8014f2c:	f7ff fe00 	bl	8014b30 <put_fat>
		if (res == FR_OK && clst != 0) {
 8014f30:	b990      	cbnz	r0, 8014f58 <create_chain.isra.0+0xce>
 8014f32:	b957      	cbnz	r7, 8014f4a <create_chain.isra.0+0xc0>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014f34:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8014f38:	3a02      	subs	r2, #2
 8014f3a:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8014f3c:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014f3e:	d910      	bls.n	8014f62 <create_chain.isra.0+0xd8>
		fs->fsi_flag |= 1;
 8014f40:	792b      	ldrb	r3, [r5, #4]
 8014f42:	f043 0301 	orr.w	r3, r3, #1
 8014f46:	712b      	strb	r3, [r5, #4]
 8014f48:	e7b3      	b.n	8014eb2 <create_chain.isra.0+0x28>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8014f4a:	4622      	mov	r2, r4
 8014f4c:	4639      	mov	r1, r7
 8014f4e:	4628      	mov	r0, r5
 8014f50:	f7ff fdee 	bl	8014b30 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d0ed      	beq.n	8014f34 <create_chain.isra.0+0xaa>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014f58:	2801      	cmp	r0, #1
 8014f5a:	d1a9      	bne.n	8014eb0 <create_chain.isra.0+0x26>
 8014f5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014f60:	e7a7      	b.n	8014eb2 <create_chain.isra.0+0x28>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014f62:	3b01      	subs	r3, #1
 8014f64:	612b      	str	r3, [r5, #16]
 8014f66:	e7eb      	b.n	8014f40 <create_chain.isra.0+0xb6>

08014f68 <dir_sdi.constprop.0>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014f68:	6882      	ldr	r2, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8014f6a:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8014f6c:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 8014f6e:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8014f70:	6103      	str	r3, [r0, #16]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8014f72:	4604      	mov	r4, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014f74:	b99a      	cbnz	r2, 8014f9e <dir_sdi.constprop.0+0x36>
 8014f76:	782b      	ldrb	r3, [r5, #0]
 8014f78:	2b02      	cmp	r3, #2
 8014f7a:	d901      	bls.n	8014f80 <dir_sdi.constprop.0+0x18>
		clst = (DWORD)fs->dirbase;
 8014f7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8014f7e:	b96b      	cbnz	r3, 8014f9c <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8014f80:	892b      	ldrh	r3, [r5, #8]
 8014f82:	b90b      	cbnz	r3, 8014f88 <dir_sdi.constprop.0+0x20>
 8014f84:	2002      	movs	r0, #2
}
 8014f86:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8014f88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014f8a:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 8014f8c:	69a3      	ldr	r3, [r4, #24]
	dp->clust = clst;					/* Current cluster# */
 8014f8e:	6162      	str	r2, [r4, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d0f7      	beq.n	8014f84 <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014f94:	3530      	adds	r5, #48	; 0x30
 8014f96:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 8014f98:	2000      	movs	r0, #0
 8014f9a:	e7f4      	b.n	8014f86 <dir_sdi.constprop.0+0x1e>
 8014f9c:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014f9e:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014fa0:	b963      	cbnz	r3, 8014fbc <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014fa2:	4611      	mov	r1, r2
 8014fa4:	6820      	ldr	r0, [r4, #0]
 8014fa6:	f7ff fee5 	bl	8014d74 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014faa:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014fac:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014fae:	d00b      	beq.n	8014fc8 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014fb0:	2801      	cmp	r0, #1
 8014fb2:	d9e7      	bls.n	8014f84 <dir_sdi.constprop.0+0x1c>
 8014fb4:	696b      	ldr	r3, [r5, #20]
 8014fb6:	4298      	cmp	r0, r3
 8014fb8:	d3f3      	bcc.n	8014fa2 <dir_sdi.constprop.0+0x3a>
 8014fba:	e7e3      	b.n	8014f84 <dir_sdi.constprop.0+0x1c>
		dp->sect = clst2sect(fs, clst);
 8014fbc:	4611      	mov	r1, r2
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	f7ff fd48 	bl	8014a54 <clst2sect>
 8014fc4:	61a0      	str	r0, [r4, #24]
 8014fc6:	e7e1      	b.n	8014f8c <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014fc8:	2001      	movs	r0, #1
 8014fca:	e7dc      	b.n	8014f86 <dir_sdi.constprop.0+0x1e>

08014fcc <dir_next>:
{
 8014fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014fd0:	6907      	ldr	r7, [r0, #16]
	FATFS *fs = dp->obj.fs;
 8014fd2:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014fd4:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8014fd6:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8014fda:	bf24      	itt	cs
 8014fdc:	2300      	movcs	r3, #0
 8014fde:	6183      	strcs	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8014fe0:	6983      	ldr	r3, [r0, #24]
{
 8014fe2:	4604      	mov	r4, r0
 8014fe4:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8014fe6:	b173      	cbz	r3, 8015006 <dir_next+0x3a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014fe8:	f3c7 0808 	ubfx	r8, r7, #0, #9
 8014fec:	f1b8 0f00 	cmp.w	r8, #0
 8014ff0:	d139      	bne.n	8015066 <dir_next+0x9a>
		if (dp->clust == 0) {	/* Static table */
 8014ff2:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 8014ff8:	b939      	cbnz	r1, 801500a <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014ffa:	8933      	ldrh	r3, [r6, #8]
 8014ffc:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8015000:	d831      	bhi.n	8015066 <dir_next+0x9a>
				dp->sect = 0; return FR_NO_FILE;
 8015002:	2300      	movs	r3, #0
 8015004:	61a3      	str	r3, [r4, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8015006:	2004      	movs	r0, #4
 8015008:	e00b      	b.n	8015022 <dir_next+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 801500a:	8973      	ldrh	r3, [r6, #10]
 801500c:	3b01      	subs	r3, #1
 801500e:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8015012:	d128      	bne.n	8015066 <dir_next+0x9a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8015014:	4630      	mov	r0, r6
 8015016:	f7ff fead 	bl	8014d74 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 801501a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 801501c:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 801501e:	d802      	bhi.n	8015026 <dir_next+0x5a>
 8015020:	2002      	movs	r0, #2
}
 8015022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015026:	1c42      	adds	r2, r0, #1
 8015028:	d101      	bne.n	801502e <dir_next+0x62>
 801502a:	2001      	movs	r0, #1
 801502c:	e7f9      	b.n	8015022 <dir_next+0x56>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 801502e:	6973      	ldr	r3, [r6, #20]
 8015030:	4283      	cmp	r3, r0
 8015032:	d812      	bhi.n	801505a <dir_next+0x8e>
					if (!stretch) {								/* If no stretch, report EOT */
 8015034:	f1b9 0f00 	cmp.w	r9, #0
 8015038:	d0e3      	beq.n	8015002 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801503a:	6961      	ldr	r1, [r4, #20]
 801503c:	6820      	ldr	r0, [r4, #0]
 801503e:	f7ff ff24 	bl	8014e8a <create_chain.isra.0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015042:	4605      	mov	r5, r0
 8015044:	b1a8      	cbz	r0, 8015072 <dir_next+0xa6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015046:	2801      	cmp	r0, #1
 8015048:	d0ea      	beq.n	8015020 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801504a:	1c43      	adds	r3, r0, #1
 801504c:	d0ed      	beq.n	801502a <dir_next+0x5e>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 801504e:	4601      	mov	r1, r0
 8015050:	4630      	mov	r0, r6
 8015052:	f7ff fde9 	bl	8014c28 <dir_clear>
 8015056:	2800      	cmp	r0, #0
 8015058:	d1e7      	bne.n	801502a <dir_next+0x5e>
				dp->clust = clst;		/* Initialize data for new cluster */
 801505a:	6165      	str	r5, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 801505c:	4629      	mov	r1, r5
 801505e:	4630      	mov	r0, r6
 8015060:	f7ff fcf8 	bl	8014a54 <clst2sect>
 8015064:	61a0      	str	r0, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015066:	3630      	adds	r6, #48	; 0x30
 8015068:	4446      	add	r6, r8
	dp->dptr = ofs;						/* Current entry */
 801506a:	6127      	str	r7, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801506c:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 801506e:	2000      	movs	r0, #0
 8015070:	e7d7      	b.n	8015022 <dir_next+0x56>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015072:	2007      	movs	r0, #7
 8015074:	e7d5      	b.n	8015022 <dir_next+0x56>

08015076 <dir_read.constprop.0>:
static FRESULT dir_read (
 8015076:	b538      	push	{r3, r4, r5, lr}
	FATFS *fs = dp->obj.fs;
 8015078:	6805      	ldr	r5, [r0, #0]
static FRESULT dir_read (
 801507a:	4604      	mov	r4, r0
	FRESULT res = FR_NO_FILE;
 801507c:	2004      	movs	r0, #4
	while (dp->sect) {
 801507e:	69a1      	ldr	r1, [r4, #24]
 8015080:	b909      	cbnz	r1, 8015086 <dir_read.constprop.0+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8015082:	b1a8      	cbz	r0, 80150b0 <dir_read.constprop.0+0x3a>
 8015084:	e01c      	b.n	80150c0 <dir_read.constprop.0+0x4a>
		res = move_window(fs, dp->sect);
 8015086:	4628      	mov	r0, r5
 8015088:	f7ff fd39 	bl	8014afe <move_window>
		if (res != FR_OK) break;
 801508c:	b9c0      	cbnz	r0, 80150c0 <dir_read.constprop.0+0x4a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 801508e:	69e3      	ldr	r3, [r4, #28]
 8015090:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
 8015092:	b1c2      	cbz	r2, 80150c6 <dir_read.constprop.0+0x50>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8015094:	7adb      	ldrb	r3, [r3, #11]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8015096:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8015098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801509c:	71a3      	strb	r3, [r4, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801509e:	d009      	beq.n	80150b4 <dir_read.constprop.0+0x3e>
 80150a0:	2a2e      	cmp	r2, #46	; 0x2e
 80150a2:	d007      	beq.n	80150b4 <dir_read.constprop.0+0x3e>
 80150a4:	2b0f      	cmp	r3, #15
 80150a6:	d005      	beq.n	80150b4 <dir_read.constprop.0+0x3e>
 80150a8:	f023 0320 	bic.w	r3, r3, #32
 80150ac:	2b08      	cmp	r3, #8
 80150ae:	d001      	beq.n	80150b4 <dir_read.constprop.0+0x3e>
		res = move_window(fs, dp->sect);
 80150b0:	2000      	movs	r0, #0
}
 80150b2:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 80150b4:	2100      	movs	r1, #0
 80150b6:	4620      	mov	r0, r4
 80150b8:	f7ff ff88 	bl	8014fcc <dir_next>
		if (res != FR_OK) break;
 80150bc:	2800      	cmp	r0, #0
 80150be:	d0de      	beq.n	801507e <dir_read.constprop.0+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80150c0:	2300      	movs	r3, #0
 80150c2:	61a3      	str	r3, [r4, #24]
 80150c4:	e7f5      	b.n	80150b2 <dir_read.constprop.0+0x3c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80150c6:	2004      	movs	r0, #4
 80150c8:	e7fa      	b.n	80150c0 <dir_read.constprop.0+0x4a>

080150ca <dir_register>:
{
 80150ca:	b570      	push	{r4, r5, r6, lr}
	FATFS *fs = dp->obj.fs;
 80150cc:	6806      	ldr	r6, [r0, #0]
{
 80150ce:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 80150d0:	f7ff ff4a 	bl	8014f68 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 80150d4:	4604      	mov	r4, r0
 80150d6:	bb50      	cbnz	r0, 801512e <dir_register+0x64>
			res = move_window(fs, dp->sect);
 80150d8:	69a9      	ldr	r1, [r5, #24]
 80150da:	4630      	mov	r0, r6
 80150dc:	f7ff fd0f 	bl	8014afe <move_window>
			if (res != FR_OK) break;
 80150e0:	4604      	mov	r4, r0
 80150e2:	bb20      	cbnz	r0, 801512e <dir_register+0x64>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 80150e4:	69eb      	ldr	r3, [r5, #28]
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	2be5      	cmp	r3, #229	; 0xe5
 80150ea:	d107      	bne.n	80150fc <dir_register+0x32>
		res = move_window(fs, dp->sect);
 80150ec:	69a9      	ldr	r1, [r5, #24]
 80150ee:	4630      	mov	r0, r6
 80150f0:	f7ff fd05 	bl	8014afe <move_window>
		if (res == FR_OK) {
 80150f4:	4604      	mov	r4, r0
 80150f6:	b140      	cbz	r0, 801510a <dir_register+0x40>
}
 80150f8:	4620      	mov	r0, r4
 80150fa:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d0f5      	beq.n	80150ec <dir_register+0x22>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8015100:	2101      	movs	r1, #1
 8015102:	4628      	mov	r0, r5
 8015104:	f7ff ff62 	bl	8014fcc <dir_next>
 8015108:	e7e4      	b.n	80150d4 <dir_register+0xa>
 801510a:	4601      	mov	r1, r0
 801510c:	2220      	movs	r2, #32
 801510e:	69e8      	ldr	r0, [r5, #28]
 8015110:	f001 fa4d 	bl	80165ae <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8015114:	3520      	adds	r5, #32
 8015116:	f855 3c04 	ldr.w	r3, [r5, #-4]
 801511a:	cd03      	ldmia	r5!, {r0, r1}
 801511c:	6018      	str	r0, [r3, #0]
 801511e:	6059      	str	r1, [r3, #4]
 8015120:	8829      	ldrh	r1, [r5, #0]
 8015122:	78aa      	ldrb	r2, [r5, #2]
 8015124:	729a      	strb	r2, [r3, #10]
 8015126:	8119      	strh	r1, [r3, #8]
			fs->wflag = 1;
 8015128:	2301      	movs	r3, #1
 801512a:	70f3      	strb	r3, [r6, #3]
 801512c:	e7e4      	b.n	80150f8 <dir_register+0x2e>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801512e:	2c04      	cmp	r4, #4
 8015130:	bf08      	it	eq
 8015132:	2407      	moveq	r4, #7
 8015134:	e7e0      	b.n	80150f8 <dir_register+0x2e>

08015136 <f_open>:
{
 8015136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801513a:	b08e      	sub	sp, #56	; 0x38
 801513c:	4617      	mov	r7, r2
 801513e:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8015140:	4605      	mov	r5, r0
 8015142:	2800      	cmp	r0, #0
 8015144:	f000 80c8 	beq.w	80152d8 <f_open+0x1a2>
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8015148:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 801514c:	4632      	mov	r2, r6
 801514e:	a902      	add	r1, sp, #8
 8015150:	a801      	add	r0, sp, #4
 8015152:	f7f7 fb7d 	bl	800c850 <mount_volume>
	if (res == FR_OK) {
 8015156:	2800      	cmp	r0, #0
 8015158:	f040 80b6 	bne.w	80152c8 <f_open+0x192>
		dj.obj.fs = fs;
 801515c:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 801515e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8015160:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8015162:	a803      	add	r0, sp, #12
 8015164:	f7f7 fc96 	bl	800ca94 <follow_path>
		if (res == FR_OK) {
 8015168:	4604      	mov	r4, r0
 801516a:	b920      	cbnz	r0, 8015176 <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801516c:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
				res = FR_INVALID_NAME;
 8015170:	2b00      	cmp	r3, #0
 8015172:	bfb8      	it	lt
 8015174:	2406      	movlt	r4, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015176:	f017 0f1c 	tst.w	r7, #28
 801517a:	d072      	beq.n	8015262 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 801517c:	2c00      	cmp	r4, #0
 801517e:	d043      	beq.n	8015208 <f_open+0xd2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015180:	2c04      	cmp	r4, #4
 8015182:	d13e      	bne.n	8015202 <f_open+0xcc>
					res = dir_register(&dj);
 8015184:	a803      	add	r0, sp, #12
 8015186:	f7ff ffa0 	bl	80150ca <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 801518a:	4604      	mov	r4, r0
 801518c:	2800      	cmp	r0, #0
 801518e:	d138      	bne.n	8015202 <f_open+0xcc>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015190:	f046 0608 	orr.w	r6, r6, #8
					st_dword(dj.dir + DIR_CrtTime, tm);
 8015194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8015196:	f8dd 8008 	ldr.w	r8, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801519a:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val;
 801519c:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 801519e:	2121      	movs	r1, #33	; 0x21
	*ptr++ = (BYTE)val;
 80151a0:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 80151a2:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80151a4:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 80151a6:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
 80151a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val;
 80151aa:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80151ac:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80151ae:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80151b0:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80151b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80151b4:	f898 0000 	ldrb.w	r0, [r8]
 80151b8:	f7ff fdd4 	bl	8014d64 <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80151bc:	2320      	movs	r3, #32
 80151be:	72cb      	strb	r3, [r1, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80151c0:	4622      	mov	r2, r4
 80151c2:	990a      	ldr	r1, [sp, #40]	; 0x28
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80151c4:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80151c6:	4640      	mov	r0, r8
 80151c8:	f7ff fc4f 	bl	8014a6a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80151cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 80151ce:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80151d0:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80151d2:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 80151d4:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
 80151d6:	9b02      	ldr	r3, [sp, #8]
 80151d8:	2201      	movs	r2, #1
 80151da:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80151dc:	b1ef      	cbz	r7, 801521a <f_open+0xe4>
						res = remove_chain(&dj.obj, cl, 0);
 80151de:	4622      	mov	r2, r4
 80151e0:	9803      	ldr	r0, [sp, #12]
						sc = fs->winsect;
 80151e2:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80151e6:	4639      	mov	r1, r7
 80151e8:	f7ff fe1a 	bl	8014e20 <remove_chain.isra.0>
						if (res == FR_OK) {
 80151ec:	4604      	mov	r4, r0
 80151ee:	b940      	cbnz	r0, 8015202 <f_open+0xcc>
							res = move_window(fs, sc);
 80151f0:	9802      	ldr	r0, [sp, #8]
 80151f2:	4641      	mov	r1, r8
 80151f4:	f7ff fc83 	bl	8014afe <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80151f8:	9b02      	ldr	r3, [sp, #8]
 80151fa:	3f01      	subs	r7, #1
 80151fc:	60df      	str	r7, [r3, #12]
		if (res == FR_OK) {
 80151fe:	4604      	mov	r4, r0
 8015200:	b158      	cbz	r0, 801521a <f_open+0xe4>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015202:	2300      	movs	r3, #0
 8015204:	602b      	str	r3, [r5, #0]
 8015206:	e028      	b.n	801525a <f_open+0x124>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015208:	f89d 3012 	ldrb.w	r3, [sp, #18]
 801520c:	f013 0f11 	tst.w	r3, #17
 8015210:	d131      	bne.n	8015276 <f_open+0x140>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015212:	0778      	lsls	r0, r7, #29
 8015214:	d45a      	bmi.n	80152cc <f_open+0x196>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8015216:	0739      	lsls	r1, r7, #28
 8015218:	d4bc      	bmi.n	8015194 <f_open+0x5e>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801521a:	9c02      	ldr	r4, [sp, #8]
			fp->dir_ptr = dj.dir;
 801521c:	990a      	ldr	r1, [sp, #40]	; 0x28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801521e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015220:	622b      	str	r3, [r5, #32]
			fp->dir_ptr = dj.dir;
 8015222:	6269      	str	r1, [r5, #36]	; 0x24
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8015224:	0730      	lsls	r0, r6, #28
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015226:	7820      	ldrb	r0, [r4, #0]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8015228:	bf48      	it	mi
 801522a:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801522e:	f7ff fd99 	bl	8014d64 <ld_clust.isra.0>
 8015232:	60a8      	str	r0, [r5, #8]
 8015234:	4603      	mov	r3, r0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015236:	f101 001c 	add.w	r0, r1, #28
 801523a:	f7ff fc01 	bl	8014a40 <ld_dword>
			fp->obj.id = fs->id;
 801523e:	88e2      	ldrh	r2, [r4, #6]
 8015240:	80aa      	strh	r2, [r5, #4]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015242:	06b1      	lsls	r1, r6, #26
			fp->err = 0;		/* Clear error flag */
 8015244:	f04f 0200 	mov.w	r2, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015248:	4607      	mov	r7, r0
 801524a:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	/* Validate the file object */
 801524c:	602c      	str	r4, [r5, #0]
			fp->flag = mode;	/* Set file access mode */
 801524e:	742e      	strb	r6, [r5, #16]
			fp->err = 0;		/* Clear error flag */
 8015250:	746a      	strb	r2, [r5, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8015252:	61ea      	str	r2, [r5, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8015254:	616a      	str	r2, [r5, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015256:	d410      	bmi.n	801527a <f_open+0x144>
						res = FR_INT_ERR;
 8015258:	2400      	movs	r4, #0
}
 801525a:	4620      	mov	r0, r4
 801525c:	b00e      	add	sp, #56	; 0x38
 801525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (res == FR_OK) {					/* Is the object exsiting? */
 8015262:	2c00      	cmp	r4, #0
 8015264:	d1cd      	bne.n	8015202 <f_open+0xcc>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8015266:	f89d 3012 	ldrb.w	r3, [sp, #18]
 801526a:	06da      	lsls	r2, r3, #27
 801526c:	d430      	bmi.n	80152d0 <f_open+0x19a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 801526e:	07bf      	lsls	r7, r7, #30
 8015270:	d5d3      	bpl.n	801521a <f_open+0xe4>
 8015272:	07dc      	lsls	r4, r3, #31
 8015274:	d5d1      	bpl.n	801521a <f_open+0xe4>
					res = FR_DENIED;
 8015276:	2407      	movs	r4, #7
 8015278:	e7c3      	b.n	8015202 <f_open+0xcc>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801527a:	2800      	cmp	r0, #0
 801527c:	d0ec      	beq.n	8015258 <f_open+0x122>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801527e:	8964      	ldrh	r4, [r4, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015280:	6168      	str	r0, [r5, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015282:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015284:	42bc      	cmp	r4, r7
 8015286:	d310      	bcc.n	80152aa <f_open+0x174>
 8015288:	2400      	movs	r4, #0
				fp->clust = clst;
 801528a:	61ab      	str	r3, [r5, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801528c:	2c00      	cmp	r4, #0
 801528e:	d1b8      	bne.n	8015202 <f_open+0xcc>
 8015290:	f3c7 0208 	ubfx	r2, r7, #0, #9
 8015294:	2a00      	cmp	r2, #0
 8015296:	d0df      	beq.n	8015258 <f_open+0x122>
					sc = clst2sect(fs, clst);
 8015298:	9802      	ldr	r0, [sp, #8]
 801529a:	4619      	mov	r1, r3
 801529c:	f7ff fbda 	bl	8014a54 <clst2sect>
					if (sc == 0) {
 80152a0:	b1c0      	cbz	r0, 80152d4 <f_open+0x19e>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80152a2:	eb00 2057 	add.w	r0, r0, r7, lsr #9
 80152a6:	61e8      	str	r0, [r5, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80152a8:	e7d7      	b.n	801525a <f_open+0x124>
					clst = get_fat(&fp->obj, clst);
 80152aa:	4619      	mov	r1, r3
 80152ac:	6828      	ldr	r0, [r5, #0]
 80152ae:	f7ff fd61 	bl	8014d74 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80152b2:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80152b4:	4603      	mov	r3, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80152b6:	eba7 0704 	sub.w	r7, r7, r4
					if (clst <= 1) res = FR_INT_ERR;
 80152ba:	d903      	bls.n	80152c4 <f_open+0x18e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80152bc:	1c42      	adds	r2, r0, #1
 80152be:	d1e1      	bne.n	8015284 <f_open+0x14e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80152c0:	2401      	movs	r4, #1
 80152c2:	e7e2      	b.n	801528a <f_open+0x154>
					if (clst <= 1) res = FR_INT_ERR;
 80152c4:	2402      	movs	r4, #2
 80152c6:	e7e0      	b.n	801528a <f_open+0x154>
 80152c8:	4604      	mov	r4, r0
 80152ca:	e79a      	b.n	8015202 <f_open+0xcc>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80152cc:	2408      	movs	r4, #8
 80152ce:	e798      	b.n	8015202 <f_open+0xcc>
					res = FR_NO_FILE;
 80152d0:	2404      	movs	r4, #4
 80152d2:	e796      	b.n	8015202 <f_open+0xcc>
						res = FR_INT_ERR;
 80152d4:	2402      	movs	r4, #2
 80152d6:	e794      	b.n	8015202 <f_open+0xcc>
	if (!fp) return FR_INVALID_OBJECT;
 80152d8:	2409      	movs	r4, #9
 80152da:	e7be      	b.n	801525a <f_open+0x124>

080152dc <f_read>:
{
 80152dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e0:	4699      	mov	r9, r3
 80152e2:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80152e4:	2300      	movs	r3, #0
{
 80152e6:	4688      	mov	r8, r1
	*br = 0;	/* Clear read byte counter */
 80152e8:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80152ec:	a903      	add	r1, sp, #12
{
 80152ee:	4604      	mov	r4, r0
 80152f0:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80152f2:	f7ff fbc6 	bl	8014a82 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80152f6:	4606      	mov	r6, r0
 80152f8:	b9f8      	cbnz	r0, 801533a <f_read+0x5e>
 80152fa:	7c66      	ldrb	r6, [r4, #17]
 80152fc:	b9ee      	cbnz	r6, 801533a <f_read+0x5e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80152fe:	f894 a010 	ldrb.w	sl, [r4, #16]
 8015302:	f01a 0301 	ands.w	r3, sl, #1
 8015306:	9300      	str	r3, [sp, #0]
 8015308:	d07c      	beq.n	8015404 <f_read+0x128>
	remain = fp->obj.objsize - fp->fptr;
 801530a:	68e7      	ldr	r7, [r4, #12]
 801530c:	6962      	ldr	r2, [r4, #20]
 801530e:	1abf      	subs	r7, r7, r2
 8015310:	42af      	cmp	r7, r5
 8015312:	bf28      	it	cs
 8015314:	462f      	movcs	r7, r5
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8015316:	b187      	cbz	r7, 801533a <f_read+0x5e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8015318:	6962      	ldr	r2, [r4, #20]
 801531a:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801531e:	2b00      	cmp	r3, #0
 8015320:	d157      	bne.n	80153d2 <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8015322:	9b03      	ldr	r3, [sp, #12]
 8015324:	895b      	ldrh	r3, [r3, #10]
 8015326:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8015328:	ea13 2a52 	ands.w	sl, r3, r2, lsr #9
 801532c:	d115      	bne.n	801535a <f_read+0x7e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801532e:	b942      	cbnz	r2, 8015342 <f_read+0x66>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8015330:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8015332:	2801      	cmp	r0, #1
 8015334:	d80a      	bhi.n	801534c <f_read+0x70>
 8015336:	2602      	movs	r6, #2
 8015338:	7466      	strb	r6, [r4, #17]
}
 801533a:	4630      	mov	r0, r6
 801533c:	b005      	add	sp, #20
 801533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8015342:	69a1      	ldr	r1, [r4, #24]
 8015344:	6820      	ldr	r0, [r4, #0]
 8015346:	f7ff fd15 	bl	8014d74 <get_fat.isra.0>
 801534a:	e7f2      	b.n	8015332 <f_read+0x56>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801534c:	1c43      	adds	r3, r0, #1
 801534e:	d103      	bne.n	8015358 <f_read+0x7c>
 8015350:	2301      	movs	r3, #1
 8015352:	9e00      	ldr	r6, [sp, #0]
 8015354:	7463      	strb	r3, [r4, #17]
 8015356:	e7f0      	b.n	801533a <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 8015358:	61a0      	str	r0, [r4, #24]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 801535a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801535e:	69a1      	ldr	r1, [r4, #24]
 8015360:	4658      	mov	r0, fp
 8015362:	f7ff fb77 	bl	8014a54 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8015366:	2800      	cmp	r0, #0
 8015368:	d0e5      	beq.n	8015336 <f_read+0x5a>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 801536a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 801536e:	eb0a 0200 	add.w	r2, sl, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8015372:	d32d      	bcc.n	80153d0 <f_read+0xf4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015374:	f8bb 100a 	ldrh.w	r1, [fp, #10]
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015378:	9201      	str	r2, [sp, #4]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801537a:	eb0a 2057 	add.w	r0, sl, r7, lsr #9
 801537e:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8015380:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fs->csize - csect;
 8015384:	bf88      	it	hi
 8015386:	eba1 050a 	subhi.w	r5, r1, sl
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801538a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801538e:	462b      	mov	r3, r5
 8015390:	4641      	mov	r1, r8
 8015392:	f7f7 ffff 	bl	800d394 <disk_read>
 8015396:	2800      	cmp	r0, #0
 8015398:	d1da      	bne.n	8015350 <f_read+0x74>
				if (fs->wflag && fs->winsect - sect < cc) {
 801539a:	9903      	ldr	r1, [sp, #12]
 801539c:	78cb      	ldrb	r3, [r1, #3]
 801539e:	b15b      	cbz	r3, 80153b8 <f_read+0xdc>
 80153a0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80153a2:	9a01      	ldr	r2, [sp, #4]
 80153a4:	1a80      	subs	r0, r0, r2
 80153a6:	42a8      	cmp	r0, r5
 80153a8:	d206      	bcs.n	80153b8 <f_read+0xdc>
 80153aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80153ae:	3130      	adds	r1, #48	; 0x30
 80153b0:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 80153b4:	f001 f8d3 	bl	801655e <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80153b8:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 80153ba:	f8d9 3000 	ldr.w	r3, [r9]
 80153be:	442b      	add	r3, r5
 80153c0:	f8c9 3000 	str.w	r3, [r9]
 80153c4:	6963      	ldr	r3, [r4, #20]
 80153c6:	442b      	add	r3, r5
 80153c8:	1b7f      	subs	r7, r7, r5
 80153ca:	44a8      	add	r8, r5
 80153cc:	6163      	str	r3, [r4, #20]
 80153ce:	e7a2      	b.n	8015316 <f_read+0x3a>
			fp->sect = sect;
 80153d0:	61e2      	str	r2, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80153d2:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80153d4:	69e1      	ldr	r1, [r4, #28]
 80153d6:	9803      	ldr	r0, [sp, #12]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80153d8:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80153dc:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80153e0:	42bd      	cmp	r5, r7
 80153e2:	bf28      	it	cs
 80153e4:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 80153e6:	f7ff fb8a 	bl	8014afe <move_window>
 80153ea:	2800      	cmp	r0, #0
 80153ec:	d1b0      	bne.n	8015350 <f_read+0x74>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80153ee:	9903      	ldr	r1, [sp, #12]
 80153f0:	6963      	ldr	r3, [r4, #20]
 80153f2:	3130      	adds	r1, #48	; 0x30
 80153f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153f8:	462a      	mov	r2, r5
 80153fa:	4419      	add	r1, r3
 80153fc:	4640      	mov	r0, r8
 80153fe:	f001 f8ae 	bl	801655e <memcpy>
 8015402:	e7da      	b.n	80153ba <f_read+0xde>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8015404:	2607      	movs	r6, #7
 8015406:	e798      	b.n	801533a <f_read+0x5e>

08015408 <f_write>:
{
 8015408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801540c:	469a      	mov	sl, r3
 801540e:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8015410:	2300      	movs	r3, #0
{
 8015412:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8015414:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015418:	a903      	add	r1, sp, #12
{
 801541a:	4604      	mov	r4, r0
 801541c:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801541e:	f7ff fb30 	bl	8014a82 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015422:	4606      	mov	r6, r0
 8015424:	bb20      	cbnz	r0, 8015470 <f_write+0x68>
 8015426:	7c66      	ldrb	r6, [r4, #17]
 8015428:	bb16      	cbnz	r6, 8015470 <f_write+0x68>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801542a:	7c23      	ldrb	r3, [r4, #16]
 801542c:	079a      	lsls	r2, r3, #30
 801542e:	f140 80a9 	bpl.w	8015584 <f_write+0x17c>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015432:	6963      	ldr	r3, [r4, #20]
 8015434:	42fb      	cmn	r3, r7
 8015436:	d300      	bcc.n	801543a <f_write+0x32>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015438:	43df      	mvns	r7, r3
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 801543a:	b1af      	cbz	r7, 8015468 <f_write+0x60>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801543c:	6963      	ldr	r3, [r4, #20]
 801543e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015442:	2a00      	cmp	r2, #0
 8015444:	f040 8081 	bne.w	801554a <f_write+0x142>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015448:	9a03      	ldr	r2, [sp, #12]
 801544a:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 801544e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8015452:	ea18 2853 	ands.w	r8, r8, r3, lsr #9
 8015456:	d11e      	bne.n	8015496 <f_write+0x8e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015458:	b973      	cbnz	r3, 8015478 <f_write+0x70>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801545a:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 801545c:	b971      	cbnz	r1, 801547c <f_write+0x74>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801545e:	6820      	ldr	r0, [r4, #0]
 8015460:	f7ff fd13 	bl	8014e8a <create_chain.isra.0>
 8015464:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015466:	b948      	cbnz	r0, 801547c <f_write+0x74>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015468:	7c23      	ldrb	r3, [r4, #16]
 801546a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801546e:	7423      	strb	r3, [r4, #16]
}
 8015470:	4630      	mov	r0, r6
 8015472:	b005      	add	sp, #20
 8015474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015478:	69a1      	ldr	r1, [r4, #24]
 801547a:	e7f0      	b.n	801545e <f_write+0x56>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801547c:	2901      	cmp	r1, #1
 801547e:	d102      	bne.n	8015486 <f_write+0x7e>
 8015480:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015482:	7466      	strb	r6, [r4, #17]
 8015484:	e7f4      	b.n	8015470 <f_write+0x68>
 8015486:	1c4b      	adds	r3, r1, #1
 8015488:	d101      	bne.n	801548e <f_write+0x86>
 801548a:	2601      	movs	r6, #1
 801548c:	e7f9      	b.n	8015482 <f_write+0x7a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801548e:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8015490:	61a1      	str	r1, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015492:	b903      	cbnz	r3, 8015496 <f_write+0x8e>
 8015494:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8015496:	9803      	ldr	r0, [sp, #12]
 8015498:	69e3      	ldr	r3, [r4, #28]
 801549a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801549c:	429a      	cmp	r2, r3
 801549e:	d103      	bne.n	80154a8 <f_write+0xa0>
 80154a0:	f7ff fb09 	bl	8014ab6 <sync_window>
 80154a4:	2800      	cmp	r0, #0
 80154a6:	d1f0      	bne.n	801548a <f_write+0x82>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80154a8:	9d03      	ldr	r5, [sp, #12]
 80154aa:	69a1      	ldr	r1, [r4, #24]
 80154ac:	4628      	mov	r0, r5
 80154ae:	f7ff fad1 	bl	8014a54 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80154b2:	2800      	cmp	r0, #0
 80154b4:	d0e4      	beq.n	8015480 <f_write+0x78>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80154b6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 80154ba:	eb08 0b00 	add.w	fp, r8, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80154be:	d336      	bcc.n	801552e <f_write+0x126>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80154c0:	8969      	ldrh	r1, [r5, #10]
 80154c2:	eb08 2057 	add.w	r0, r8, r7, lsr #9
 80154c6:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80154c8:	ea4f 2357 	mov.w	r3, r7, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80154cc:	7868      	ldrb	r0, [r5, #1]
					cc = fs->csize - csect;
 80154ce:	bf88      	it	hi
 80154d0:	eba1 0308 	subhi.w	r3, r1, r8
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80154d4:	465a      	mov	r2, fp
 80154d6:	4649      	mov	r1, r9
 80154d8:	9301      	str	r3, [sp, #4]
 80154da:	f7f7 ff67 	bl	800d3ac <disk_write>
 80154de:	4605      	mov	r5, r0
 80154e0:	2800      	cmp	r0, #0
 80154e2:	d1d2      	bne.n	801548a <f_write+0x82>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 80154e4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80154e8:	9b01      	ldr	r3, [sp, #4]
 80154ea:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80154ee:	eba1 010b 	sub.w	r1, r1, fp
 80154f2:	4299      	cmp	r1, r3
 80154f4:	d20a      	bcs.n	801550c <f_write+0x104>
 80154f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80154fa:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80154fe:	f108 0030 	add.w	r0, r8, #48	; 0x30
 8015502:	f001 f82c 	bl	801655e <memcpy>
					fs->wflag = 0;
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	f888 5003 	strb.w	r5, [r8, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801550c:	025d      	lsls	r5, r3, #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 801550e:	f8da 3000 	ldr.w	r3, [sl]
 8015512:	442b      	add	r3, r5
 8015514:	f8ca 3000 	str.w	r3, [sl]
 8015518:	6962      	ldr	r2, [r4, #20]
 801551a:	68e3      	ldr	r3, [r4, #12]
 801551c:	1b7f      	subs	r7, r7, r5
 801551e:	44a9      	add	r9, r5
 8015520:	4415      	add	r5, r2
 8015522:	6165      	str	r5, [r4, #20]
 8015524:	42ab      	cmp	r3, r5
 8015526:	bf2c      	ite	cs
 8015528:	60e3      	strcs	r3, [r4, #12]
 801552a:	60e5      	strcc	r5, [r4, #12]
 801552c:	e785      	b.n	801543a <f_write+0x32>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 801552e:	6961      	ldr	r1, [r4, #20]
 8015530:	68e3      	ldr	r3, [r4, #12]
 8015532:	4299      	cmp	r1, r3
 8015534:	d307      	bcc.n	8015546 <f_write+0x13e>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 8015536:	4628      	mov	r0, r5
 8015538:	f7ff fabd 	bl	8014ab6 <sync_window>
 801553c:	2800      	cmp	r0, #0
 801553e:	d1a4      	bne.n	801548a <f_write+0x82>
				fs->winsect = sect;
 8015540:	9b03      	ldr	r3, [sp, #12]
 8015542:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
			fp->sect = sect;
 8015546:	f8c4 b01c 	str.w	fp, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 801554a:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 801554c:	69e1      	ldr	r1, [r4, #28]
 801554e:	9803      	ldr	r0, [sp, #12]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8015550:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8015554:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015558:	42bd      	cmp	r5, r7
 801555a:	bf28      	it	cs
 801555c:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 801555e:	f7ff face 	bl	8014afe <move_window>
 8015562:	2800      	cmp	r0, #0
 8015564:	d191      	bne.n	801548a <f_write+0x82>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015566:	9803      	ldr	r0, [sp, #12]
 8015568:	6963      	ldr	r3, [r4, #20]
 801556a:	3030      	adds	r0, #48	; 0x30
 801556c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015570:	462a      	mov	r2, r5
 8015572:	4418      	add	r0, r3
 8015574:	4649      	mov	r1, r9
 8015576:	f000 fff2 	bl	801655e <memcpy>
		fs->wflag = 1;
 801557a:	9b03      	ldr	r3, [sp, #12]
 801557c:	f04f 0201 	mov.w	r2, #1
 8015580:	70da      	strb	r2, [r3, #3]
 8015582:	e7c4      	b.n	801550e <f_write+0x106>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015584:	2607      	movs	r6, #7
 8015586:	e773      	b.n	8015470 <f_write+0x68>

08015588 <f_sync>:
{
 8015588:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801558a:	a901      	add	r1, sp, #4
{
 801558c:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801558e:	f7ff fa78 	bl	8014a82 <validate>
	if (res == FR_OK) {
 8015592:	4604      	mov	r4, r0
 8015594:	bb50      	cbnz	r0, 80155ec <f_sync+0x64>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015596:	7c2c      	ldrb	r4, [r5, #16]
 8015598:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 801559c:	d026      	beq.n	80155ec <f_sync+0x64>
				res = move_window(fs, fp->dir_sect);
 801559e:	6a29      	ldr	r1, [r5, #32]
 80155a0:	9801      	ldr	r0, [sp, #4]
 80155a2:	f7ff faac 	bl	8014afe <move_window>
				if (res == FR_OK) {
 80155a6:	4604      	mov	r4, r0
 80155a8:	bb00      	cbnz	r0, 80155ec <f_sync+0x64>
					dir = fp->dir_ptr;
 80155aa:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80155ac:	7af3      	ldrb	r3, [r6, #11]
 80155ae:	f043 0320 	orr.w	r3, r3, #32
 80155b2:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80155b4:	68aa      	ldr	r2, [r5, #8]
 80155b6:	6828      	ldr	r0, [r5, #0]
 80155b8:	4631      	mov	r1, r6
 80155ba:	f7ff fa56 	bl	8014a6a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80155be:	68e9      	ldr	r1, [r5, #12]
 80155c0:	f106 001c 	add.w	r0, r6, #28
 80155c4:	f7ff fa3e 	bl	8014a44 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 80155c8:	2321      	movs	r3, #33	; 0x21
 80155ca:	7633      	strb	r3, [r6, #24]
					fs->wflag = 1;
 80155cc:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80155ce:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val;
 80155d0:	2350      	movs	r3, #80	; 0x50
 80155d2:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
 80155d4:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80155d6:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80155d8:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 80155da:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 80155dc:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80155de:	f7ff fb4c 	bl	8014c7a <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80155e2:	7c2b      	ldrb	r3, [r5, #16]
 80155e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80155e8:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80155ea:	742b      	strb	r3, [r5, #16]
}
 80155ec:	4620      	mov	r0, r4
 80155ee:	b002      	add	sp, #8
 80155f0:	bd70      	pop	{r4, r5, r6, pc}

080155f2 <f_close>:
{
 80155f2:	b513      	push	{r0, r1, r4, lr}
 80155f4:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80155f6:	f7ff ffc7 	bl	8015588 <f_sync>
	if (res == FR_OK)
 80155fa:	b928      	cbnz	r0, 8015608 <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80155fc:	a901      	add	r1, sp, #4
 80155fe:	4620      	mov	r0, r4
 8015600:	f7ff fa3f 	bl	8014a82 <validate>
		if (res == FR_OK) {
 8015604:	b900      	cbnz	r0, 8015608 <f_close+0x16>
			fp->obj.fs = 0;	/* Invalidate file object */
 8015606:	6020      	str	r0, [r4, #0]
}
 8015608:	b002      	add	sp, #8
 801560a:	bd10      	pop	{r4, pc}

0801560c <f_lseek>:
{
 801560c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015610:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015612:	a901      	add	r1, sp, #4
{
 8015614:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015616:	f7ff fa34 	bl	8014a82 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 801561a:	4606      	mov	r6, r0
 801561c:	2800      	cmp	r0, #0
 801561e:	d150      	bne.n	80156c2 <f_lseek+0xb6>
 8015620:	7c66      	ldrb	r6, [r4, #17]
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015622:	2e00      	cmp	r6, #0
 8015624:	d14d      	bne.n	80156c2 <f_lseek+0xb6>
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015626:	68e3      	ldr	r3, [r4, #12]
 8015628:	42ab      	cmp	r3, r5
 801562a:	d204      	bcs.n	8015636 <f_lseek+0x2a>
 801562c:	7c22      	ldrb	r2, [r4, #16]
 801562e:	f012 0f02 	tst.w	r2, #2
 8015632:	bf08      	it	eq
 8015634:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8015636:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8015638:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 801563a:	6162      	str	r2, [r4, #20]
		if (ofs > 0) {
 801563c:	b99d      	cbnz	r5, 8015666 <f_lseek+0x5a>
		fp->fptr = nsect = 0;
 801563e:	2500      	movs	r5, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8015640:	68e2      	ldr	r2, [r4, #12]
 8015642:	6963      	ldr	r3, [r4, #20]
 8015644:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
 8015646:	bf82      	ittt	hi
 8015648:	7c22      	ldrbhi	r2, [r4, #16]
			fp->obj.objsize = fp->fptr;
 801564a:	60e3      	strhi	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 801564c:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015650:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 8015654:	bf88      	it	hi
 8015656:	7422      	strbhi	r2, [r4, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015658:	2b00      	cmp	r3, #0
 801565a:	d032      	beq.n	80156c2 <f_lseek+0xb6>
 801565c:	69e3      	ldr	r3, [r4, #28]
 801565e:	42ab      	cmp	r3, r5
			fp->sect = nsect;
 8015660:	bf18      	it	ne
 8015662:	61e5      	strne	r5, [r4, #28]
 8015664:	e02d      	b.n	80156c2 <f_lseek+0xb6>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015666:	9a01      	ldr	r2, [sp, #4]
 8015668:	8957      	ldrh	r7, [r2, #10]
 801566a:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 801566c:	b1fb      	cbz	r3, 80156ae <f_lseek+0xa2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801566e:	3b01      	subs	r3, #1
 8015670:	1e6a      	subs	r2, r5, #1
 8015672:	fbb3 f1f7 	udiv	r1, r3, r7
 8015676:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 801567a:	428a      	cmp	r2, r1
 801567c:	d317      	bcc.n	80156ae <f_lseek+0xa2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801567e:	427a      	negs	r2, r7
 8015680:	4013      	ands	r3, r2
				clst = fp->clust;
 8015682:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015684:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8015686:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8015688:	2900      	cmp	r1, #0
 801568a:	d0d8      	beq.n	801563e <f_lseek+0x32>
				while (ofs > bcs) {						/* Cluster following loop */
 801568c:	42bd      	cmp	r5, r7
					ofs -= bcs; fp->fptr += bcs;
 801568e:	6963      	ldr	r3, [r4, #20]
				while (ofs > bcs) {						/* Cluster following loop */
 8015690:	d822      	bhi.n	80156d8 <f_lseek+0xcc>
				fp->fptr += ofs;
 8015692:	6963      	ldr	r3, [r4, #20]
 8015694:	442b      	add	r3, r5
 8015696:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8015698:	f3c5 0308 	ubfx	r3, r5, #0, #9
 801569c:	2b00      	cmp	r3, #0
 801569e:	d0ce      	beq.n	801563e <f_lseek+0x32>
					nsect = clst2sect(fs, clst);	/* Current sector */
 80156a0:	9801      	ldr	r0, [sp, #4]
 80156a2:	f7ff f9d7 	bl	8014a54 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 80156a6:	b150      	cbz	r0, 80156be <f_lseek+0xb2>
					nsect += (DWORD)(ofs / SS(fs));
 80156a8:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 80156ac:	e7c8      	b.n	8015640 <f_lseek+0x34>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80156ae:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80156b0:	b981      	cbnz	r1, 80156d4 <f_lseek+0xc8>
					clst = create_chain(&fp->obj, 0);
 80156b2:	6820      	ldr	r0, [r4, #0]
 80156b4:	f7ff fbe9 	bl	8014e8a <create_chain.isra.0>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80156b8:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 80156ba:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80156bc:	d105      	bne.n	80156ca <f_lseek+0xbe>
 80156be:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156c0:	7466      	strb	r6, [r4, #17]
}
 80156c2:	4630      	mov	r0, r6
 80156c4:	b002      	add	sp, #8
 80156c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156ca:	1c48      	adds	r0, r1, #1
 80156cc:	d101      	bne.n	80156d2 <f_lseek+0xc6>
 80156ce:	2601      	movs	r6, #1
 80156d0:	e7f6      	b.n	80156c0 <f_lseek+0xb4>
					fp->obj.sclust = clst;
 80156d2:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 80156d4:	61a1      	str	r1, [r4, #24]
 80156d6:	e7d7      	b.n	8015688 <f_lseek+0x7c>
					ofs -= bcs; fp->fptr += bcs;
 80156d8:	443b      	add	r3, r7
 80156da:	6163      	str	r3, [r4, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80156dc:	7c23      	ldrb	r3, [r4, #16]
 80156de:	6820      	ldr	r0, [r4, #0]
 80156e0:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 80156e2:	eba5 0807 	sub.w	r8, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80156e6:	d505      	bpl.n	80156f4 <f_lseek+0xe8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80156e8:	f7ff fbcf 	bl	8014e8a <create_chain.isra.0>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80156ec:	4605      	mov	r5, r0
 80156ee:	b920      	cbnz	r0, 80156fa <f_lseek+0xee>
 80156f0:	4601      	mov	r1, r0
 80156f2:	e7ce      	b.n	8015692 <f_lseek+0x86>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80156f4:	f7ff fb3e 	bl	8014d74 <get_fat.isra.0>
 80156f8:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156fa:	1c6b      	adds	r3, r5, #1
 80156fc:	d0e7      	beq.n	80156ce <f_lseek+0xc2>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80156fe:	2d01      	cmp	r5, #1
 8015700:	d9dd      	bls.n	80156be <f_lseek+0xb2>
 8015702:	9b01      	ldr	r3, [sp, #4]
 8015704:	695b      	ldr	r3, [r3, #20]
 8015706:	42ab      	cmp	r3, r5
 8015708:	d9d9      	bls.n	80156be <f_lseek+0xb2>
					fp->clust = clst;
 801570a:	61a5      	str	r5, [r4, #24]
 801570c:	4629      	mov	r1, r5
					ofs -= bcs; fp->fptr += bcs;
 801570e:	4645      	mov	r5, r8
 8015710:	e7bc      	b.n	801568c <f_lseek+0x80>

08015712 <f_opendir>:
{
 8015712:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!dp) return FR_INVALID_OBJECT;
 8015714:	4604      	mov	r4, r0
{
 8015716:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8015718:	b348      	cbz	r0, 801576e <f_opendir+0x5c>
	res = mount_volume(&path, &fs, 0);
 801571a:	2200      	movs	r2, #0
 801571c:	a903      	add	r1, sp, #12
 801571e:	a801      	add	r0, sp, #4
 8015720:	f7f7 f896 	bl	800c850 <mount_volume>
	if (res == FR_OK) {
 8015724:	b970      	cbnz	r0, 8015744 <f_opendir+0x32>
		dp->obj.fs = fs;
 8015726:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015728:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
 801572a:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801572c:	4620      	mov	r0, r4
 801572e:	f7f7 f9b1 	bl	800ca94 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8015732:	b9f0      	cbnz	r0, 8015772 <f_opendir+0x60>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015734:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 8015738:	2b00      	cmp	r3, #0
 801573a:	db0c      	blt.n	8015756 <f_opendir+0x44>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 801573c:	79a3      	ldrb	r3, [r4, #6]
 801573e:	06db      	lsls	r3, r3, #27
 8015740:	d403      	bmi.n	801574a <f_opendir+0x38>
					res = FR_NO_PATH;
 8015742:	2005      	movs	r0, #5
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8015744:	2300      	movs	r3, #0
 8015746:	6023      	str	r3, [r4, #0]
 8015748:	e00f      	b.n	801576a <f_opendir+0x58>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801574a:	9b03      	ldr	r3, [sp, #12]
 801574c:	69e1      	ldr	r1, [r4, #28]
 801574e:	7818      	ldrb	r0, [r3, #0]
 8015750:	f7ff fb08 	bl	8014d64 <ld_clust.isra.0>
 8015754:	60a0      	str	r0, [r4, #8]
				dp->obj.id = fs->id;
 8015756:	9b03      	ldr	r3, [sp, #12]
 8015758:	88db      	ldrh	r3, [r3, #6]
 801575a:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801575c:	4620      	mov	r0, r4
 801575e:	f7ff fc03 	bl	8014f68 <dir_sdi.constprop.0>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015762:	2804      	cmp	r0, #4
 8015764:	d0ed      	beq.n	8015742 <f_opendir+0x30>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8015766:	2800      	cmp	r0, #0
 8015768:	d1ec      	bne.n	8015744 <f_opendir+0x32>
}
 801576a:	b004      	add	sp, #16
 801576c:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
 801576e:	2009      	movs	r0, #9
 8015770:	e7fb      	b.n	801576a <f_opendir+0x58>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015772:	2804      	cmp	r0, #4
 8015774:	d0e5      	beq.n	8015742 <f_opendir+0x30>
 8015776:	e7e5      	b.n	8015744 <f_opendir+0x32>

08015778 <f_closedir>:
{
 8015778:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 801577a:	a901      	add	r1, sp, #4
{
 801577c:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 801577e:	f7ff f980 	bl	8014a82 <validate>
	if (res == FR_OK) {
 8015782:	b900      	cbnz	r0, 8015786 <f_closedir+0xe>
		dp->obj.fs = 0;	/* Invalidate directory object */
 8015784:	6020      	str	r0, [r4, #0]
}
 8015786:	b002      	add	sp, #8
 8015788:	bd10      	pop	{r4, pc}

0801578a <f_readdir>:
{
 801578a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801578c:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801578e:	a901      	add	r1, sp, #4
{
 8015790:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015792:	f7ff f976 	bl	8014a82 <validate>
	if (res == FR_OK) {
 8015796:	b918      	cbnz	r0, 80157a0 <f_readdir+0x16>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015798:	4620      	mov	r0, r4
		if (!fno) {
 801579a:	b91d      	cbnz	r5, 80157a4 <f_readdir+0x1a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801579c:	f7ff fbe4 	bl	8014f68 <dir_sdi.constprop.0>
}
 80157a0:	b003      	add	sp, #12
 80157a2:	bd30      	pop	{r4, r5, pc}
			res = DIR_READ_FILE(dp);		/* Read an item */
 80157a4:	f7ff fc67 	bl	8015076 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 80157a8:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
 80157ac:	d1f8      	bne.n	80157a0 <f_readdir+0x16>
	fno->fname[0] = 0;			/* Invaidate file info */
 80157ae:	726b      	strb	r3, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80157b0:	69a3      	ldr	r3, [r4, #24]
 80157b2:	b11b      	cbz	r3, 80157bc <f_readdir+0x32>
 80157b4:	69e0      	ldr	r0, [r4, #28]
 80157b6:	4629      	mov	r1, r5
 80157b8:	f7ff faaa 	bl	8014d10 <get_fileinfo.part.0.isra.0>
				res = dir_next(dp, 0);		/* Increment index for next */
 80157bc:	2100      	movs	r1, #0
 80157be:	4620      	mov	r0, r4
 80157c0:	f7ff fc04 	bl	8014fcc <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80157c4:	2804      	cmp	r0, #4
 80157c6:	bf08      	it	eq
 80157c8:	2000      	moveq	r0, #0
 80157ca:	e7e9      	b.n	80157a0 <f_readdir+0x16>

080157cc <f_stat>:
{
 80157cc:	b530      	push	{r4, r5, lr}
 80157ce:	b08f      	sub	sp, #60	; 0x3c
 80157d0:	460d      	mov	r5, r1
 80157d2:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &dj.obj.fs, 0);
 80157d4:	2200      	movs	r2, #0
 80157d6:	a903      	add	r1, sp, #12
 80157d8:	a801      	add	r0, sp, #4
 80157da:	f7f7 f839 	bl	800c850 <mount_volume>
	if (res == FR_OK) {
 80157de:	4604      	mov	r4, r0
 80157e0:	b988      	cbnz	r0, 8015806 <f_stat+0x3a>
		res = follow_path(&dj, path);	/* Follow the file path */
 80157e2:	9901      	ldr	r1, [sp, #4]
 80157e4:	a803      	add	r0, sp, #12
 80157e6:	f7f7 f955 	bl	800ca94 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 80157ea:	4604      	mov	r4, r0
 80157ec:	b958      	cbnz	r0, 8015806 <f_stat+0x3a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80157ee:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	db0a      	blt.n	801580c <f_stat+0x40>
				if (fno) get_fileinfo(&dj, fno);
 80157f6:	b135      	cbz	r5, 8015806 <f_stat+0x3a>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80157f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	fno->fname[0] = 0;			/* Invaidate file info */
 80157fa:	7268      	strb	r0, [r5, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80157fc:	b11b      	cbz	r3, 8015806 <f_stat+0x3a>
 80157fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015800:	4629      	mov	r1, r5
 8015802:	f7ff fa85 	bl	8014d10 <get_fileinfo.part.0.isra.0>
}
 8015806:	4620      	mov	r0, r4
 8015808:	b00f      	add	sp, #60	; 0x3c
 801580a:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 801580c:	2406      	movs	r4, #6
 801580e:	e7fa      	b.n	8015806 <f_stat+0x3a>

08015810 <f_getfree>:
{
 8015810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015814:	b085      	sub	sp, #20
 8015816:	460f      	mov	r7, r1
 8015818:	9001      	str	r0, [sp, #4]
 801581a:	4615      	mov	r5, r2
	res = mount_volume(&path, &fs, 0);
 801581c:	a903      	add	r1, sp, #12
 801581e:	2200      	movs	r2, #0
 8015820:	a801      	add	r0, sp, #4
 8015822:	f7f7 f815 	bl	800c850 <mount_volume>
	if (res == FR_OK) {
 8015826:	4604      	mov	r4, r0
 8015828:	b940      	cbnz	r0, 801583c <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 801582a:	9e03      	ldr	r6, [sp, #12]
 801582c:	602e      	str	r6, [r5, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 801582e:	e9d6 3804 	ldrd	r3, r8, [r6, #16]
 8015832:	f1a8 0202 	sub.w	r2, r8, #2
 8015836:	4293      	cmp	r3, r2
 8015838:	d804      	bhi.n	8015844 <f_getfree+0x34>
			*nclst = fs->free_clst;
 801583a:	603b      	str	r3, [r7, #0]
}
 801583c:	4620      	mov	r0, r4
 801583e:	b005      	add	sp, #20
 8015840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8015844:	7833      	ldrb	r3, [r6, #0]
 8015846:	2b01      	cmp	r3, #1
 8015848:	d11a      	bne.n	8015880 <f_getfree+0x70>
				clst = 2; obj.fs = fs;
 801584a:	f04f 0802 	mov.w	r8, #2
			nfree = 0;
 801584e:	4605      	mov	r5, r0
					stat = get_fat(&obj, clst);
 8015850:	4641      	mov	r1, r8
 8015852:	4630      	mov	r0, r6
 8015854:	f7ff fa8e 	bl	8014d74 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8015858:	1c43      	adds	r3, r0, #1
 801585a:	d036      	beq.n	80158ca <f_getfree+0xba>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801585c:	2801      	cmp	r0, #1
 801585e:	d036      	beq.n	80158ce <f_getfree+0xbe>
					if (stat == 0) nfree++;
 8015860:	b900      	cbnz	r0, 8015864 <f_getfree+0x54>
 8015862:	3501      	adds	r5, #1
				} while (++clst < fs->n_fatent);
 8015864:	9b03      	ldr	r3, [sp, #12]
 8015866:	695b      	ldr	r3, [r3, #20]
 8015868:	f108 0801 	add.w	r8, r8, #1
 801586c:	4543      	cmp	r3, r8
 801586e:	d8ef      	bhi.n	8015850 <f_getfree+0x40>
				fs->free_clst = nfree;	/* Now free_clst is valid */
 8015870:	9b03      	ldr	r3, [sp, #12]
				*nclst = nfree;			/* Return the free clusters */
 8015872:	603d      	str	r5, [r7, #0]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8015874:	791a      	ldrb	r2, [r3, #4]
				fs->free_clst = nfree;	/* Now free_clst is valid */
 8015876:	611d      	str	r5, [r3, #16]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8015878:	f042 0201 	orr.w	r2, r2, #1
 801587c:	711a      	strb	r2, [r3, #4]
	LEAVE_FF(fs, res);
 801587e:	e7dd      	b.n	801583c <f_getfree+0x2c>
					sect = fs->fatbase;		/* Top of the FAT */
 8015880:	6a31      	ldr	r1, [r6, #32]
			nfree = 0;
 8015882:	4605      	mov	r5, r0
					i = 0;					/* Offset in the sector */
 8015884:	4606      	mov	r6, r0
						if (i == 0) {
 8015886:	b936      	cbnz	r6, 8015896 <f_getfree+0x86>
							res = move_window(fs, sect++);
 8015888:	9803      	ldr	r0, [sp, #12]
 801588a:	f101 0901 	add.w	r9, r1, #1
 801588e:	f7ff f936 	bl	8014afe <move_window>
							if (res != FR_OK) break;
 8015892:	b9f0      	cbnz	r0, 80158d2 <f_getfree+0xc2>
							res = move_window(fs, sect++);
 8015894:	4649      	mov	r1, r9
						if (fs->fs_type == FS_FAT16) {
 8015896:	9a03      	ldr	r2, [sp, #12]
							if (ld_word(fs->win + i) == 0) nfree++;
 8015898:	f102 0330 	add.w	r3, r2, #48	; 0x30
						if (fs->fs_type == FS_FAT16) {
 801589c:	7812      	ldrb	r2, [r2, #0]
 801589e:	2a02      	cmp	r2, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 80158a0:	eb03 0006 	add.w	r0, r3, r6
						if (fs->fs_type == FS_FAT16) {
 80158a4:	d109      	bne.n	80158ba <f_getfree+0xaa>
							if (ld_word(fs->win + i) == 0) nfree++;
 80158a6:	5b9b      	ldrh	r3, [r3, r6]
 80158a8:	b903      	cbnz	r3, 80158ac <f_getfree+0x9c>
 80158aa:	3501      	adds	r5, #1
							i += 2;
 80158ac:	3602      	adds	r6, #2
					} while (--clst);
 80158ae:	f1b8 0801 	subs.w	r8, r8, #1
						i %= SS(fs);
 80158b2:	f3c6 0608 	ubfx	r6, r6, #0, #9
					} while (--clst);
 80158b6:	d1e6      	bne.n	8015886 <f_getfree+0x76>
 80158b8:	e7da      	b.n	8015870 <f_getfree+0x60>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 80158ba:	f7ff f8c1 	bl	8014a40 <ld_dword>
 80158be:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 80158c2:	bf08      	it	eq
 80158c4:	3501      	addeq	r5, #1
							i += 4;
 80158c6:	3604      	adds	r6, #4
 80158c8:	e7f1      	b.n	80158ae <f_getfree+0x9e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80158ca:	2401      	movs	r4, #1
 80158cc:	e7b6      	b.n	801583c <f_getfree+0x2c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80158ce:	2402      	movs	r4, #2
 80158d0:	e7b4      	b.n	801583c <f_getfree+0x2c>
 80158d2:	4604      	mov	r4, r0
 80158d4:	e7b2      	b.n	801583c <f_getfree+0x2c>

080158d6 <f_truncate>:
{
 80158d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80158d8:	a901      	add	r1, sp, #4
{
 80158da:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80158dc:	f7ff f8d1 	bl	8014a82 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 80158e0:	4604      	mov	r4, r0
 80158e2:	b9c0      	cbnz	r0, 8015916 <f_truncate+0x40>
 80158e4:	7c6c      	ldrb	r4, [r5, #17]
 80158e6:	b9b4      	cbnz	r4, 8015916 <f_truncate+0x40>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80158e8:	7c2b      	ldrb	r3, [r5, #16]
 80158ea:	079a      	lsls	r2, r3, #30
 80158ec:	d52c      	bpl.n	8015948 <f_truncate+0x72>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 80158ee:	696e      	ldr	r6, [r5, #20]
 80158f0:	68eb      	ldr	r3, [r5, #12]
 80158f2:	429e      	cmp	r6, r3
 80158f4:	d20f      	bcs.n	8015916 <f_truncate+0x40>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 80158f6:	6828      	ldr	r0, [r5, #0]
 80158f8:	b986      	cbnz	r6, 801591c <f_truncate+0x46>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80158fa:	4622      	mov	r2, r4
 80158fc:	68a9      	ldr	r1, [r5, #8]
 80158fe:	f7ff fa8f 	bl	8014e20 <remove_chain.isra.0>
			fp->obj.sclust = 0;
 8015902:	60ae      	str	r6, [r5, #8]
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8015904:	4604      	mov	r4, r0
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 8015906:	696b      	ldr	r3, [r5, #20]
 8015908:	60eb      	str	r3, [r5, #12]
		fp->flag |= FA_MODIFIED;
 801590a:	7c2b      	ldrb	r3, [r5, #16]
 801590c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015910:	742b      	strb	r3, [r5, #16]
		if (res != FR_OK) ABORT(fs, res);
 8015912:	b104      	cbz	r4, 8015916 <f_truncate+0x40>
 8015914:	746c      	strb	r4, [r5, #17]
}
 8015916:	4620      	mov	r0, r4
 8015918:	b002      	add	sp, #8
 801591a:	bd70      	pop	{r4, r5, r6, pc}
			ncl = get_fat(&fp->obj, fp->clust);
 801591c:	69a9      	ldr	r1, [r5, #24]
 801591e:	f7ff fa29 	bl	8014d74 <get_fat.isra.0>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015922:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
 8015924:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015926:	d00b      	beq.n	8015940 <f_truncate+0x6a>
			if (ncl == 1) res = FR_INT_ERR;
 8015928:	2801      	cmp	r0, #1
 801592a:	d00b      	beq.n	8015944 <f_truncate+0x6e>
			if (res == FR_OK && ncl < fs->n_fatent) {
 801592c:	9b01      	ldr	r3, [sp, #4]
 801592e:	695b      	ldr	r3, [r3, #20]
 8015930:	4283      	cmp	r3, r0
 8015932:	d9e8      	bls.n	8015906 <f_truncate+0x30>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 8015934:	69aa      	ldr	r2, [r5, #24]
 8015936:	6828      	ldr	r0, [r5, #0]
 8015938:	f7ff fa72 	bl	8014e20 <remove_chain.isra.0>
 801593c:	4604      	mov	r4, r0
 801593e:	e7e2      	b.n	8015906 <f_truncate+0x30>
 8015940:	2401      	movs	r4, #1
 8015942:	e7e0      	b.n	8015906 <f_truncate+0x30>
			if (ncl == 1) res = FR_INT_ERR;
 8015944:	2402      	movs	r4, #2
 8015946:	e7de      	b.n	8015906 <f_truncate+0x30>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015948:	2407      	movs	r4, #7
 801594a:	e7e4      	b.n	8015916 <f_truncate+0x40>

0801594c <f_unlink>:
{
 801594c:	b570      	push	{r4, r5, r6, lr}
 801594e:	b09a      	sub	sp, #104	; 0x68
	res = mount_volume(&path, &fs, FA_WRITE);
 8015950:	2202      	movs	r2, #2
{
 8015952:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
 8015954:	a903      	add	r1, sp, #12
 8015956:	a801      	add	r0, sp, #4
 8015958:	f7f6 ff7a 	bl	800c850 <mount_volume>
	if (res == FR_OK) {
 801595c:	b978      	cbnz	r0, 801597e <f_unlink+0x32>
		dj.obj.fs = fs;
 801595e:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8015960:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8015962:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 8015964:	a804      	add	r0, sp, #16
 8015966:	f7f7 f895 	bl	800ca94 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 801596a:	b940      	cbnz	r0, 801597e <f_unlink+0x32>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801596c:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8015970:	2b00      	cmp	r3, #0
 8015972:	db36      	blt.n	80159e2 <f_unlink+0x96>
				if (dj.obj.attr & AM_RDO) {
 8015974:	f89d 6016 	ldrb.w	r6, [sp, #22]
 8015978:	07f2      	lsls	r2, r6, #31
 801597a:	d502      	bpl.n	8015982 <f_unlink+0x36>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801597c:	2007      	movs	r0, #7
}
 801597e:	b01a      	add	sp, #104	; 0x68
 8015980:	bd70      	pop	{r4, r5, r6, pc}
					dclst = ld_clust(fs, dj.dir);
 8015982:	9d03      	ldr	r5, [sp, #12]
 8015984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015986:	7828      	ldrb	r0, [r5, #0]
 8015988:	f7ff f9ec 	bl	8014d64 <ld_clust.isra.0>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801598c:	06f3      	lsls	r3, r6, #27
					dclst = ld_clust(fs, dj.dir);
 801598e:	4604      	mov	r4, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8015990:	d410      	bmi.n	80159b4 <f_unlink+0x68>
	FATFS *fs = dp->obj.fs;
 8015992:	9d04      	ldr	r5, [sp, #16]
	res = move_window(fs, dp->sect);
 8015994:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015996:	4628      	mov	r0, r5
 8015998:	f7ff f8b1 	bl	8014afe <move_window>
	if (res == FR_OK) {
 801599c:	2800      	cmp	r0, #0
 801599e:	d1ee      	bne.n	801597e <f_unlink+0x32>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 80159a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159a2:	22e5      	movs	r2, #229	; 0xe5
 80159a4:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80159a6:	2301      	movs	r3, #1
 80159a8:	70eb      	strb	r3, [r5, #3]
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 80159aa:	b994      	cbnz	r4, 80159d2 <f_unlink+0x86>
				if (res == FR_OK) res = sync_fs(fs);
 80159ac:	9803      	ldr	r0, [sp, #12]
 80159ae:	f7ff f964 	bl	8014c7a <sync_fs>
 80159b2:	e7e4      	b.n	801597e <f_unlink+0x32>
						sdj.obj.sclust = dclst;
 80159b4:	9011      	str	r0, [sp, #68]	; 0x44
						res = dir_sdi(&sdj, 0);
 80159b6:	a80f      	add	r0, sp, #60	; 0x3c
						sdj.obj.fs = fs;			/* Open the sub-directory */
 80159b8:	950f      	str	r5, [sp, #60]	; 0x3c
						res = dir_sdi(&sdj, 0);
 80159ba:	f7ff fad5 	bl	8014f68 <dir_sdi.constprop.0>
						if (res == FR_OK) {
 80159be:	2800      	cmp	r0, #0
 80159c0:	d1dd      	bne.n	801597e <f_unlink+0x32>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 80159c2:	a80f      	add	r0, sp, #60	; 0x3c
 80159c4:	f7ff fb57 	bl	8015076 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80159c8:	2800      	cmp	r0, #0
 80159ca:	d0d7      	beq.n	801597c <f_unlink+0x30>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80159cc:	2804      	cmp	r0, #4
 80159ce:	d1d6      	bne.n	801597e <f_unlink+0x32>
 80159d0:	e7df      	b.n	8015992 <f_unlink+0x46>
					res = remove_chain(&dj.obj, dclst, 0);
 80159d2:	4602      	mov	r2, r0
 80159d4:	4621      	mov	r1, r4
 80159d6:	9804      	ldr	r0, [sp, #16]
 80159d8:	f7ff fa22 	bl	8014e20 <remove_chain.isra.0>
				if (res == FR_OK) res = sync_fs(fs);
 80159dc:	2800      	cmp	r0, #0
 80159de:	d1ce      	bne.n	801597e <f_unlink+0x32>
 80159e0:	e7e4      	b.n	80159ac <f_unlink+0x60>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80159e2:	2006      	movs	r0, #6
 80159e4:	e7cb      	b.n	801597e <f_unlink+0x32>

080159e6 <f_mkdir>:
{
 80159e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159e8:	b08f      	sub	sp, #60	; 0x3c
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 80159ea:	2202      	movs	r2, #2
{
 80159ec:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 80159ee:	a902      	add	r1, sp, #8
 80159f0:	a801      	add	r0, sp, #4
 80159f2:	f7f6 ff2d 	bl	800c850 <mount_volume>
 80159f6:	4604      	mov	r4, r0
 80159f8:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80159fa:	2800      	cmp	r0, #0
 80159fc:	d168      	bne.n	8015ad0 <f_mkdir+0xea>
		dj.obj.fs = fs;
 80159fe:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);			/* Follow the file path */
 8015a00:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8015a02:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 8015a04:	a803      	add	r0, sp, #12
 8015a06:	f7f7 f845 	bl	800ca94 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	2800      	cmp	r0, #0
 8015a0e:	d06d      	beq.n	8015aec <f_mkdir+0x106>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 8015a10:	2804      	cmp	r0, #4
 8015a12:	d15d      	bne.n	8015ad0 <f_mkdir+0xea>
			sobj.fs = fs;						/* New object id to create a new chain */
 8015a14:	9e02      	ldr	r6, [sp, #8]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 8015a16:	4629      	mov	r1, r5
 8015a18:	4630      	mov	r0, r6
 8015a1a:	f7ff fa36 	bl	8014e8a <create_chain.isra.0>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8015a1e:	4605      	mov	r5, r0
 8015a20:	2800      	cmp	r0, #0
 8015a22:	d058      	beq.n	8015ad6 <f_mkdir+0xf0>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8015a24:	2801      	cmp	r0, #1
 8015a26:	d05d      	beq.n	8015ae4 <f_mkdir+0xfe>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8015a28:	1c43      	adds	r3, r0, #1
 8015a2a:	d05d      	beq.n	8015ae8 <f_mkdir+0x102>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 8015a2c:	9802      	ldr	r0, [sp, #8]
 8015a2e:	4629      	mov	r1, r5
 8015a30:	f7ff f8fa 	bl	8014c28 <dir_clear>
 8015a34:	4603      	mov	r3, r0
 8015a36:	4604      	mov	r4, r0
				if (res == FR_OK) {
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d14d      	bne.n	8015ad8 <f_mkdir+0xf2>
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 8015a3c:	9802      	ldr	r0, [sp, #8]
__ssp_bos_icheck3(memset, void *, int)
 8015a3e:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 8015a42:	6302      	str	r2, [r0, #48]	; 0x30
 8015a44:	6342      	str	r2, [r0, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8015a46:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8015a4a:	f8c0 2037 	str.w	r2, [r0, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8015a4e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
						fs->win[DIR_Name] = '.';
 8015a52:	222e      	movs	r2, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 8015a54:	2321      	movs	r3, #33	; 0x21
						fs->win[DIR_Name] = '.';
 8015a56:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8015a5a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
						fs->win[DIR_Attr] = AM_DIR;
 8015a5e:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val;
 8015a60:	2350      	movs	r3, #80	; 0x50
						fs->win[DIR_Attr] = AM_DIR;
 8015a62:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
	*ptr++ = (BYTE)val;
 8015a66:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
						st_clust(fs, fs->win, dcl);
 8015a6a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8015a6e:	462a      	mov	r2, r5
 8015a70:	f7fe fffb 	bl	8014a6a <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
 8015a74:	9802      	ldr	r0, [sp, #8]
 8015a76:	f100 0350 	add.w	r3, r0, #80	; 0x50
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8015a7a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8015a7e:	461a      	mov	r2, r3
 8015a80:	f851 4b04 	ldr.w	r4, [r1], #4
 8015a84:	f842 4b04 	str.w	r4, [r2], #4
 8015a88:	4299      	cmp	r1, r3
 8015a8a:	d1f9      	bne.n	8015a80 <f_mkdir+0x9a>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015a8c:	232e      	movs	r3, #46	; 0x2e
 8015a8e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
						st_clust(fs, fs->win + SZDIRE, pcl);
 8015a92:	9a05      	ldr	r2, [sp, #20]
 8015a94:	f7fe ffe9 	bl	8014a6a <st_clust>
						fs->wflag = 1;
 8015a98:	9b02      	ldr	r3, [sp, #8]
 8015a9a:	2701      	movs	r7, #1
 8015a9c:	70df      	strb	r7, [r3, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 8015a9e:	a803      	add	r0, sp, #12
 8015aa0:	f7ff fb13 	bl	80150ca <dir_register>
			if (res == FR_OK) {
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	b9b8      	cbnz	r0, 8015ad8 <f_mkdir+0xf2>
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 8015aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8015aaa:	2221      	movs	r2, #33	; 0x21
 8015aac:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8015aae:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
 8015ab0:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8015ab2:	75d8      	strb	r0, [r3, #23]
	*ptr++ = (BYTE)val;
 8015ab4:	765a      	strb	r2, [r3, #25]
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 8015ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015ab8:	9802      	ldr	r0, [sp, #8]
 8015aba:	462a      	mov	r2, r5
 8015abc:	f7fe ffd5 	bl	8014a6a <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8015ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					fs->wflag = 1;
 8015ac2:	9802      	ldr	r0, [sp, #8]
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8015ac4:	2210      	movs	r2, #16
 8015ac6:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
 8015ac8:	70c7      	strb	r7, [r0, #3]
					res = sync_fs(fs);
 8015aca:	f7ff f8d6 	bl	8014c7a <sync_fs>
 8015ace:	4604      	mov	r4, r0
}
 8015ad0:	4620      	mov	r0, r4
 8015ad2:	b00f      	add	sp, #60	; 0x3c
 8015ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8015ad6:	2407      	movs	r4, #7
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 8015ad8:	2200      	movs	r2, #0
 8015ada:	4629      	mov	r1, r5
 8015adc:	4630      	mov	r0, r6
 8015ade:	f7ff f99f 	bl	8014e20 <remove_chain.isra.0>
 8015ae2:	e7f5      	b.n	8015ad0 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8015ae4:	2402      	movs	r4, #2
 8015ae6:	e7f7      	b.n	8015ad8 <f_mkdir+0xf2>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8015ae8:	2401      	movs	r4, #1
 8015aea:	e7f5      	b.n	8015ad8 <f_mkdir+0xf2>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8015aec:	2408      	movs	r4, #8
	LEAVE_FF(fs, res);
 8015aee:	e7ef      	b.n	8015ad0 <f_mkdir+0xea>

08015af0 <f_rename>:
{
 8015af0:	b530      	push	{r4, r5, lr}
 8015af2:	b0a3      	sub	sp, #140	; 0x8c
 8015af4:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 8015af8:	4668      	mov	r0, sp
 8015afa:	f7f6 fe13 	bl	800c724 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8015afe:	2202      	movs	r2, #2
 8015b00:	a903      	add	r1, sp, #12
 8015b02:	a801      	add	r0, sp, #4
 8015b04:	f7f6 fea4 	bl	800c850 <mount_volume>
	if (res == FR_OK) {
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	f040 8082 	bne.w	8015c12 <f_rename+0x122>
		djo.obj.fs = fs;
 8015b0e:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&djo, path_old);			/* Check old object */
 8015b10:	9901      	ldr	r1, [sp, #4]
		djo.obj.fs = fs;
 8015b12:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&djo, path_old);			/* Check old object */
 8015b14:	a80c      	add	r0, sp, #48	; 0x30
 8015b16:	f7f6 ffbd 	bl	800ca94 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8015b1a:	2800      	cmp	r0, #0
 8015b1c:	d179      	bne.n	8015c12 <f_rename+0x122>
 8015b1e:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8015b22:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8015b26:	d176      	bne.n	8015c16 <f_rename+0x126>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 8015b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015b2a:	ac04      	add	r4, sp, #16
 8015b2c:	f103 0520 	add.w	r5, r3, #32
 8015b30:	6818      	ldr	r0, [r3, #0]
 8015b32:	6859      	ldr	r1, [r3, #4]
 8015b34:	4622      	mov	r2, r4
 8015b36:	c203      	stmia	r2!, {r0, r1}
 8015b38:	3308      	adds	r3, #8
 8015b3a:	42ab      	cmp	r3, r5
 8015b3c:	4614      	mov	r4, r2
 8015b3e:	d1f7      	bne.n	8015b30 <f_rename+0x40>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8015b40:	ac0c      	add	r4, sp, #48	; 0x30
 8015b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b44:	ad17      	add	r5, sp, #92	; 0x5c
 8015b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015b4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015b50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8015b54:	9900      	ldr	r1, [sp, #0]
 8015b56:	a817      	add	r0, sp, #92	; 0x5c
 8015b58:	f7f6 ff9c 	bl	800ca94 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8015b5c:	b948      	cbnz	r0, 8015b72 <f_rename+0x82>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8015b5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d103      	bne.n	8015b6e <f_rename+0x7e>
 8015b66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d003      	beq.n	8015b76 <f_rename+0x86>
 8015b6e:	2008      	movs	r0, #8
 8015b70:	e04f      	b.n	8015c12 <f_rename+0x122>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8015b72:	2804      	cmp	r0, #4
 8015b74:	d14d      	bne.n	8015c12 <f_rename+0x122>
					res = dir_register(&djn);			/* Register the new entry */
 8015b76:	a817      	add	r0, sp, #92	; 0x5c
 8015b78:	f7ff faa7 	bl	80150ca <dir_register>
					if (res == FR_OK) {
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	d148      	bne.n	8015c12 <f_rename+0x122>
						dir = djn.dir;					/* Copy directory entry of the object except name */
 8015b80:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015b82:	f10d 031d 	add.w	r3, sp, #29
 8015b86:	f101 020d 	add.w	r2, r1, #13
 8015b8a:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8015b8e:	f853 4b04 	ldr.w	r4, [r3], #4
 8015b92:	f842 4b04 	str.w	r4, [r2], #4
 8015b96:	4283      	cmp	r3, r0
 8015b98:	d1f9      	bne.n	8015b8e <f_rename+0x9e>
 8015b9a:	8818      	ldrh	r0, [r3, #0]
 8015b9c:	8010      	strh	r0, [r2, #0]
 8015b9e:	789b      	ldrb	r3, [r3, #2]
 8015ba0:	7093      	strb	r3, [r2, #2]
						dir[DIR_Attr] = buf[DIR_Attr];
 8015ba2:	f89d 301b 	ldrb.w	r3, [sp, #27]
						fs->wflag = 1;
 8015ba6:	9c03      	ldr	r4, [sp, #12]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 8015ba8:	06da      	lsls	r2, r3, #27
 8015baa:	bf58      	it	pl
 8015bac:	f043 0320 	orrpl.w	r3, r3, #32
						fs->wflag = 1;
 8015bb0:	2501      	movs	r5, #1
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
 8015bb2:	72cb      	strb	r3, [r1, #11]
						fs->wflag = 1;
 8015bb4:	70e5      	strb	r5, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8015bb6:	7acb      	ldrb	r3, [r1, #11]
 8015bb8:	06db      	lsls	r3, r3, #27
 8015bba:	d51c      	bpl.n	8015bf6 <f_rename+0x106>
 8015bbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015bbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d018      	beq.n	8015bf6 <f_rename+0x106>
							sect = clst2sect(fs, ld_clust(fs, dir));
 8015bc4:	7820      	ldrb	r0, [r4, #0]
 8015bc6:	f7ff f8cd 	bl	8014d64 <ld_clust.isra.0>
 8015bca:	4601      	mov	r1, r0
 8015bcc:	4620      	mov	r0, r4
 8015bce:	f7fe ff41 	bl	8014a54 <clst2sect>
							if (sect == 0) {
 8015bd2:	4601      	mov	r1, r0
 8015bd4:	b308      	cbz	r0, 8015c1a <f_rename+0x12a>
								res = move_window(fs, sect);
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	f7fe ff91 	bl	8014afe <move_window>
								if (res == FR_OK && dir[1] == '.') {
 8015bdc:	b9c8      	cbnz	r0, 8015c12 <f_rename+0x122>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8015bde:	9803      	ldr	r0, [sp, #12]
								if (res == FR_OK && dir[1] == '.') {
 8015be0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8015be4:	2b2e      	cmp	r3, #46	; 0x2e
 8015be6:	d106      	bne.n	8015bf6 <f_rename+0x106>
									st_clust(fs, dir, djn.obj.sclust);
 8015be8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015bea:	f100 0150 	add.w	r1, r0, #80	; 0x50
 8015bee:	f7fe ff3c 	bl	8014a6a <st_clust>
									fs->wflag = 1;
 8015bf2:	9b03      	ldr	r3, [sp, #12]
 8015bf4:	70dd      	strb	r5, [r3, #3]
	FATFS *fs = dp->obj.fs;
 8015bf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	res = move_window(fs, dp->sect);
 8015bf8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	f7fe ff7f 	bl	8014afe <move_window>
	if (res == FR_OK) {
 8015c00:	b938      	cbnz	r0, 8015c12 <f_rename+0x122>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 8015c02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c04:	22e5      	movs	r2, #229	; 0xe5
 8015c06:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	70e3      	strb	r3, [r4, #3]
					res = sync_fs(fs);
 8015c0c:	9803      	ldr	r0, [sp, #12]
 8015c0e:	f7ff f834 	bl	8014c7a <sync_fs>
}
 8015c12:	b023      	add	sp, #140	; 0x8c
 8015c14:	bd30      	pop	{r4, r5, pc}
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8015c16:	2006      	movs	r0, #6
 8015c18:	e7fb      	b.n	8015c12 <f_rename+0x122>
								res = FR_INT_ERR;
 8015c1a:	2002      	movs	r0, #2
 8015c1c:	e7f9      	b.n	8015c12 <f_rename+0x122>

08015c1e <LL_RTC_ALMA_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8015c1e:	6983      	ldr	r3, [r0, #24]
  assert_param(IS_LL_RTC_ALMA_MASK(RTC_AlarmStruct->AlarmMask));
  assert_param(IS_LL_RTC_ALMA_DATE_WEEKDAY_SEL(RTC_AlarmStruct->AlarmDateWeekDaySel));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8015c20:	065b      	lsls	r3, r3, #25
{
 8015c22:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_LL_RTC_HOUR12(RTC_AlarmStruct->AlarmTime.Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_AlarmStruct->AlarmTime.TimeFormat));
    }
    else
    {
      RTC_AlarmStruct->AlarmTime.TimeFormat = 0x00U;
 8015c24:	bf5c      	itt	pl
 8015c26:	2300      	movpl	r3, #0
 8015c28:	6013      	strpl	r3, [r2, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8015c2a:	23ca      	movs	r3, #202	; 0xca
 8015c2c:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8015c2e:	2353      	movs	r3, #83	; 0x53
 8015c30:	6243      	str	r3, [r0, #36]	; 0x24

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);

  /* Select weekday selection */
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 8015c32:	68d3      	ldr	r3, [r2, #12]
  {
    /* Set the date for ALARM */
    LL_RTC_ALMA_DisableWeekday(RTCx);
    if (RTC_Format != LL_RTC_FORMAT_BIN)
    {
      LL_RTC_ALMA_SetDay(RTCx, RTC_AlarmStruct->AlarmDateWeekDay);
 8015c34:	7c14      	ldrb	r4, [r2, #16]
 8015c36:	6817      	ldr	r7, [r2, #0]
  if (RTC_AlarmStruct->AlarmDateWeekDaySel == LL_RTC_ALMA_DATEWEEKDAYSEL_DATE)
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d155      	bne.n	8015ce8 <LL_RTC_ALMA_Init+0xca>
  CLEAR_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8015c3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015c42:	6403      	str	r3, [r0, #64]	; 0x40
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8015c44:	b1f1      	cbz	r1, 8015c84 <LL_RTC_ALMA_Init+0x66>
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8015c46:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015c48:	f021 517c 	bic.w	r1, r1, #1056964608	; 0x3f000000
 8015c4c:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8015c50:	6401      	str	r1, [r0, #64]	; 0x40
  }

  /* Configure the Alarm register */
  if (RTC_Format != LL_RTC_FORMAT_BIN)
  {
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat, RTC_AlarmStruct->AlarmTime.Hours,
 8015c52:	7993      	ldrb	r3, [r2, #6]
 8015c54:	7914      	ldrb	r4, [r2, #4]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8015c56:	6c01      	ldr	r1, [r0, #64]	; 0x40
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8015c58:	433b      	orrs	r3, r7
 8015c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015c5e:	7954      	ldrb	r4, [r2, #5]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8015c60:	f021 117f 	bic.w	r1, r1, #8323199	; 0x7f007f
  temp = Format12_24 | (((Hours & 0xF0U) << (RTC_ALRMAR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_ALRMAR_HU_Pos))    | \
 8015c64:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8015c68:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 8015c6c:	430b      	orrs	r3, r1
 8015c6e:	6403      	str	r3, [r0, #64]	; 0x40
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1, Mask);
 8015c70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015c72:	6892      	ldr	r2, [r2, #8]
 8015c74:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8015c78:	4313      	orrs	r3, r2
 8015c7a:	6403      	str	r3, [r0, #64]	; 0x40
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8015c7c:	23ff      	movs	r3, #255	; 0xff
 8015c7e:	6243      	str	r3, [r0, #36]	; 0x24

  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);

  return SUCCESS;
}
 8015c80:	2001      	movs	r0, #1
 8015c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(RTCx->ALRMAR, (RTC_ALRMAR_DT | RTC_ALRMAR_DU),
 8015c84:	6c03      	ldr	r3, [r0, #64]	; 0x40
      LL_RTC_ALMA_SetDay(RTCx, __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmDateWeekDay));
 8015c86:	210a      	movs	r1, #10
 8015c88:	fbb4 f5f1 	udiv	r5, r4, r1
 8015c8c:	fb01 4115 	mls	r1, r1, r5, r4
 8015c90:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8015c94:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8015c98:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8015c9c:	6401      	str	r1, [r0, #64]	; 0x40
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 8015c9e:	7993      	ldrb	r3, [r2, #6]
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_PM | RTC_ALRMAR_HT | RTC_ALRMAR_HU | RTC_ALRMAR_MNT | RTC_ALRMAR_MNU | RTC_ALRMAR_ST | RTC_ALRMAR_SU, temp);
 8015ca0:	6c06      	ldr	r6, [r0, #64]	; 0x40
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 8015ca2:	7914      	ldrb	r4, [r2, #4]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 8015ca4:	7951      	ldrb	r1, [r2, #5]
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Seconds));
 8015ca6:	250a      	movs	r5, #10
 8015ca8:	f026 167f 	bic.w	r6, r6, #8323199	; 0x7f007f
 8015cac:	fbb3 fcf5 	udiv	ip, r3, r5
 8015cb0:	fb05 331c 	mls	r3, r5, ip, r3
 8015cb4:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8015cb8:	f426 46fe 	bic.w	r6, r6, #32512	; 0x7f00
 8015cbc:	433e      	orrs	r6, r7
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	4333      	orrs	r3, r6
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Hours),
 8015cc2:	fbb4 f6f5 	udiv	r6, r4, r5
 8015cc6:	fb05 4416 	mls	r4, r5, r6, r4
 8015cca:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8015cce:	b2e4      	uxtb	r4, r4
 8015cd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                           __LL_RTC_CONVERT_BIN2BCD(RTC_AlarmStruct->AlarmTime.Minutes),
 8015cd4:	fbb1 f4f5 	udiv	r4, r1, r5
 8015cd8:	fb05 1114 	mls	r1, r5, r4, r1
 8015cdc:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
    LL_RTC_ALMA_ConfigTime(RTCx, RTC_AlarmStruct->AlarmTime.TimeFormat,
 8015ce0:	b2c9      	uxtb	r1, r1
 8015ce2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8015ce6:	e7c2      	b.n	8015c6e <LL_RTC_ALMA_Init+0x50>
  SET_BIT(RTCx->ALRMAR, RTC_ALRMAR_WDSEL);
 8015ce8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015cee:	6403      	str	r3, [r0, #64]	; 0x40
  MODIFY_REG(RTCx->ALRMAR, RTC_ALRMAR_DU, WeekDay << RTC_ALRMAR_DU_Pos);
 8015cf0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015cf2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8015cf6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8015cfa:	6403      	str	r3, [r0, #64]	; 0x40
  if (RTC_Format != LL_RTC_FORMAT_BIN)
 8015cfc:	2900      	cmp	r1, #0
 8015cfe:	d0ce      	beq.n	8015c9e <LL_RTC_ALMA_Init+0x80>
 8015d00:	e7a7      	b.n	8015c52 <LL_RTC_ALMA_Init+0x34>

08015d02 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8015d02:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8015d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d08:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF)) ? 1U : 0U);
 8015d0a:	68c2      	ldr	r2, [r0, #12]
 8015d0c:	0651      	lsls	r1, r2, #25
{
 8015d0e:	4603      	mov	r3, r0
 8015d10:	d41d      	bmi.n	8015d4e <LL_RTC_EnterInitMode+0x4c>
  SET_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8015d12:	68c2      	ldr	r2, [r0, #12]
 8015d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015d18:	60c2      	str	r2, [r0, #12]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF)) ? 1U : 0U);
 8015d1a:	68c2      	ldr	r2, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8015d1c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8015d20:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8015d24:	2001      	movs	r0, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8015d26:	9c01      	ldr	r4, [sp, #4]
 8015d28:	b104      	cbz	r4, 8015d2c <LL_RTC_EnterInitMode+0x2a>
 8015d2a:	b10a      	cbz	r2, 8015d30 <LL_RTC_EnterInitMode+0x2e>
        status = ERROR;
      }
    }
  }
  return status;
}
 8015d2c:	b002      	add	sp, #8
 8015d2e:	bd10      	pop	{r4, pc}
 8015d30:	690a      	ldr	r2, [r1, #16]
 8015d32:	03d2      	lsls	r2, r2, #15
        timeout --;
 8015d34:	bf42      	ittt	mi
 8015d36:	9a01      	ldrmi	r2, [sp, #4]
 8015d38:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8015d3c:	9201      	strmi	r2, [sp, #4]
 8015d3e:	68da      	ldr	r2, [r3, #12]
      if (timeout == 0U)
 8015d40:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8015d42:	2c00      	cmp	r4, #0
 8015d44:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8015d48:	bf08      	it	eq
 8015d4a:	2000      	moveq	r0, #0
 8015d4c:	e7eb      	b.n	8015d26 <LL_RTC_EnterInitMode+0x24>
  ErrorStatus status = SUCCESS;
 8015d4e:	2001      	movs	r0, #1
 8015d50:	e7ec      	b.n	8015d2c <LL_RTC_EnterInitMode+0x2a>

08015d52 <LL_RTC_Init>:
{
 8015d52:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8015d54:	23ca      	movs	r3, #202	; 0xca
 8015d56:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8015d58:	2353      	movs	r3, #83	; 0x53
 8015d5a:	6243      	str	r3, [r0, #36]	; 0x24
 8015d5c:	4604      	mov	r4, r0
 8015d5e:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8015d60:	f7ff ffcf 	bl	8015d02 <LL_RTC_EnterInitMode>
 8015d64:	b1c8      	cbz	r0, 8015d9a <LL_RTC_Init+0x48>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8015d66:	69a3      	ldr	r3, [r4, #24]
 8015d68:	682a      	ldr	r2, [r5, #0]
 8015d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d6e:	4313      	orrs	r3, r2
 8015d70:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8015d72:	6923      	ldr	r3, [r4, #16]
 8015d74:	68aa      	ldr	r2, [r5, #8]
 8015d76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8015d7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015d7e:	4313      	orrs	r3, r2
 8015d80:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8015d82:	6923      	ldr	r3, [r4, #16]
 8015d84:	686a      	ldr	r2, [r5, #4]
 8015d86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8015d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d8e:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 8015d90:	68e3      	ldr	r3, [r4, #12]
 8015d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d96:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8015d98:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8015d9a:	23ff      	movs	r3, #255	; 0xff
 8015d9c:	6263      	str	r3, [r4, #36]	; 0x24
}
 8015d9e:	bd38      	pop	{r3, r4, r5, pc}

08015da0 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8015da0:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8015da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015da6:	9201      	str	r2, [sp, #4]
  WRITE_REG(RTCx->ICSR, (~((RTC_ICSR_RSF | RTC_ICSR_INIT) & 0x000000FFU) | (RTCx->ICSR & RTC_ICSR_INIT)));
 8015da8:	68c2      	ldr	r2, [r0, #12]
 8015daa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8015dae:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8015db2:	60c2      	str	r2, [r0, #12]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_RSF) == (RTC_ICSR_RSF)) ? 1U : 0U);
 8015db4:	68c2      	ldr	r2, [r0, #12]
{
 8015db6:	4603      	mov	r3, r0
 8015db8:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8015dbc:	2001      	movs	r0, #1
 8015dbe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8015dc2:	9c01      	ldr	r4, [sp, #4]
 8015dc4:	b96c      	cbnz	r4, 8015de2 <LL_RTC_WaitForSynchro+0x42>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8015dc6:	b150      	cbz	r0, 8015dde <LL_RTC_WaitForSynchro+0x3e>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 8015dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015dcc:	9201      	str	r2, [sp, #4]
 8015dce:	68da      	ldr	r2, [r3, #12]
 8015dd0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8015dd4:	f3c2 1240 	ubfx	r2, r2, #5, #1
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8015dd8:	9c01      	ldr	r4, [sp, #4]
 8015dda:	b104      	cbz	r4, 8015dde <LL_RTC_WaitForSynchro+0x3e>
 8015ddc:	b192      	cbz	r2, 8015e04 <LL_RTC_WaitForSynchro+0x64>
      }
    }
  }

  return (status);
}
 8015dde:	b002      	add	sp, #8
 8015de0:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 8015de2:	2a00      	cmp	r2, #0
 8015de4:	d0ef      	beq.n	8015dc6 <LL_RTC_WaitForSynchro+0x26>
 8015de6:	690a      	ldr	r2, [r1, #16]
 8015de8:	03d4      	lsls	r4, r2, #15
      timeout--;
 8015dea:	bf42      	ittt	mi
 8015dec:	9a01      	ldrmi	r2, [sp, #4]
 8015dee:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8015df2:	9201      	strmi	r2, [sp, #4]
 8015df4:	68da      	ldr	r2, [r3, #12]
    if (timeout == 0U)
 8015df6:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8015df8:	2c00      	cmp	r4, #0
 8015dfa:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8015dfe:	bf08      	it	eq
 8015e00:	2000      	moveq	r0, #0
 8015e02:	e7de      	b.n	8015dc2 <LL_RTC_WaitForSynchro+0x22>
 8015e04:	690a      	ldr	r2, [r1, #16]
 8015e06:	03d2      	lsls	r2, r2, #15
        timeout--;
 8015e08:	bf42      	ittt	mi
 8015e0a:	9a01      	ldrmi	r2, [sp, #4]
 8015e0c:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8015e10:	9201      	strmi	r2, [sp, #4]
 8015e12:	68da      	ldr	r2, [r3, #12]
      if (timeout == 0U)
 8015e14:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8015e16:	2c00      	cmp	r4, #0
 8015e18:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8015e1c:	bf08      	it	eq
 8015e1e:	2000      	moveq	r0, #0
 8015e20:	e7da      	b.n	8015dd8 <LL_RTC_WaitForSynchro+0x38>

08015e22 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8015e22:	680a      	ldr	r2, [r1, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8015e24:	684b      	ldr	r3, [r1, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8015e26:	0912      	lsrs	r2, r2, #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8015e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8015e2c:	3201      	adds	r2, #1
 8015e2e:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8015e32:	4358      	muls	r0, r3
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8015e34:	688b      	ldr	r3, [r1, #8]
 8015e36:	0f5b      	lsrs	r3, r3, #29
 8015e38:	3301      	adds	r3, #1
}
 8015e3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8015e3e:	4770      	bx	lr

08015e40 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8015e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015e44:	6818      	ldr	r0, [r3, #0]
 8015e46:	f080 7000 	eor.w	r0, r0, #33554432	; 0x2000000
}
 8015e4a:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8015e4e:	4770      	bx	lr

08015e50 <z_device_state_init>:
}
 8015e50:	4770      	bx	lr

08015e52 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8015e52:	b138      	cbz	r0, 8015e64 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8015e54:	68c3      	ldr	r3, [r0, #12]
 8015e56:	8818      	ldrh	r0, [r3, #0]
 8015e58:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8015e5c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8015e60:	4258      	negs	r0, r3
 8015e62:	4158      	adcs	r0, r3
}
 8015e64:	4770      	bx	lr

08015e66 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
 8015e66:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
 8015e68:	ab0b      	add	r3, sp, #44	; 0x2c
 8015e6a:	9305      	str	r3, [sp, #20]
 8015e6c:	9303      	str	r3, [sp, #12]
 8015e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e70:	9302      	str	r3, [sp, #8]
 8015e72:	2300      	movs	r3, #0
 8015e74:	e9cd 3300 	strd	r3, r3, [sp]
 8015e78:	2201      	movs	r2, #1
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7ed fd62 	bl	8003944 <z_impl_z_log_msg2_runtime_vcreate>
}
 8015e80:	b007      	add	sp, #28
 8015e82:	f85d fb04 	ldr.w	pc, [sp], #4

08015e86 <arch_system_halt>:
	__asm__ volatile(
 8015e86:	f04f 0210 	mov.w	r2, #16
 8015e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8015e8e:	f382 8812 	msr	BASEPRI_MAX, r2
 8015e92:	f3bf 8f6f 	isb	sy
	for (;;) {
 8015e96:	e7fe      	b.n	8015e96 <arch_system_halt+0x10>

08015e98 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
 8015e98:	f000 bb89 	b.w	80165ae <memset>

08015e9c <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8015e9c:	f000 bb5f 	b.w	801655e <memcpy>

08015ea0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8015ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	460d      	mov	r5, r1
 8015ea6:	f04f 0310 	mov.w	r3, #16
 8015eaa:	f3ef 8611 	mrs	r6, BASEPRI
 8015eae:	f383 8812 	msr	BASEPRI_MAX, r3
 8015eb2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 8015eb6:	6947      	ldr	r7, [r0, #20]
 8015eb8:	b977      	cbnz	r7, 8015ed8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 8015eba:	f000 f956 	bl	801616a <z_unpend_first_thread>

		if (pending_thread != NULL) {
 8015ebe:	b158      	cbz	r0, 8015ed8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8015ec0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8015ec2:	6142      	str	r2, [r0, #20]
 8015ec4:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
 8015ec6:	f000 f8df 	bl	8016088 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 8015eca:	4631      	mov	r1, r6
 8015ecc:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 8015ed0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
 8015ed4:	f7f8 b8dc 	b.w	800e090 <z_reschedule>
	**(char ***) mem = slab->free_list;
 8015ed8:	682b      	ldr	r3, [r5, #0]
 8015eda:	6962      	ldr	r2, [r4, #20]
 8015edc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 8015ede:	682b      	ldr	r3, [r5, #0]
 8015ee0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
 8015ee2:	69a3      	ldr	r3, [r4, #24]
 8015ee4:	3b01      	subs	r3, #1
 8015ee6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 8015ee8:	f386 8811 	msr	BASEPRI, r6
 8015eec:	f3bf 8f6f 	isb	sy
}
 8015ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ef2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ef2:	f3ef 8005 	mrs	r0, IPSR
}
 8015ef6:	3800      	subs	r0, #0
 8015ef8:	bf18      	it	ne
 8015efa:	2001      	movne	r0, #1
 8015efc:	4770      	bx	lr

08015efe <z_impl_k_thread_name_set>:
}
 8015efe:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8015f02:	4770      	bx	lr

08015f04 <k_thread_name_get>:
}
 8015f04:	2000      	movs	r0, #0
 8015f06:	4770      	bx	lr

08015f08 <z_impl_k_thread_start>:
	z_sched_start(thread);
 8015f08:	f7f8 b9ba 	b.w	800e280 <z_sched_start>

08015f0c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8015f0c:	b508      	push	{r3, lr}
	__asm__ volatile(
 8015f0e:	f04f 0210 	mov.w	r2, #16
 8015f12:	f3ef 8311 	mrs	r3, BASEPRI
 8015f16:	f382 8812 	msr	BASEPRI_MAX, r2
 8015f1a:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8015f1e:	f7ed fe1b 	bl	8003b58 <arch_cpu_idle>
 8015f22:	e7f4      	b.n	8015f0e <idle+0x2>

08015f24 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 8015f24:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8015f28:	428b      	cmp	r3, r1
 8015f2a:	d001      	beq.n	8015f30 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 8015f2c:	f7f8 ba18 	b.w	800e360 <z_set_prio>
}
 8015f30:	2000      	movs	r0, #0
 8015f32:	4770      	bx	lr

08015f34 <z_impl_k_mutex_init>:
{
 8015f34:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8015f36:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 8015f38:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 8015f3c:	e9c3 3300 	strd	r3, r3, [r3]
}
 8015f40:	4770      	bx	lr

08015f42 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8015f42:	b15a      	cbz	r2, 8015f5c <z_impl_k_sem_init+0x1a>
 8015f44:	428a      	cmp	r2, r1
 8015f46:	d309      	bcc.n	8015f5c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
 8015f48:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 8015f4c:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8015f50:	e9c0 0000 	strd	r0, r0, [r0]
 8015f54:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
 8015f58:	2000      	movs	r0, #0
 8015f5a:	4770      	bx	lr
		return -EINVAL;
 8015f5c:	f06f 0015 	mvn.w	r0, #21
}
 8015f60:	4770      	bx	lr

08015f62 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 8015f62:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 8015f64:	2301      	movs	r3, #1
 8015f66:	408b      	lsls	r3, r1
 8015f68:	ea22 0303 	bic.w	r3, r2, r3
 8015f6c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 8015f6e:	fa22 f001 	lsr.w	r0, r2, r1
}
 8015f72:	f000 0001 	and.w	r0, r0, #1
 8015f76:	4770      	bx	lr

08015f78 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 8015f78:	b120      	cbz	r0, 8015f84 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	4611      	mov	r1, r2
 8015f7e:	3088      	adds	r0, #136	; 0x88
 8015f80:	f000 b91c 	b.w	80161bc <z_sched_wake>
}
 8015f84:	4770      	bx	lr

08015f86 <k_work_init>:
{
 8015f86:	b538      	push	{r3, r4, r5, lr}
 8015f88:	4604      	mov	r4, r0
 8015f8a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8015f8c:	2210      	movs	r2, #16
 8015f8e:	2100      	movs	r1, #0
 8015f90:	f000 fb0d 	bl	80165ae <memset>
 8015f94:	6065      	str	r5, [r4, #4]
}
 8015f96:	bd38      	pop	{r3, r4, r5, pc}

08015f98 <k_work_submit_to_queue>:
{
 8015f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f9a:	9001      	str	r0, [sp, #4]
 8015f9c:	4608      	mov	r0, r1
 8015f9e:	f04f 0310 	mov.w	r3, #16
 8015fa2:	f3ef 8511 	mrs	r5, BASEPRI
 8015fa6:	f383 8812 	msr	BASEPRI_MAX, r3
 8015faa:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8015fae:	a901      	add	r1, sp, #4
 8015fb0:	f7f7 ffa4 	bl	800defc <submit_to_queue_locked>
 8015fb4:	4604      	mov	r4, r0
	__asm__ volatile(
 8015fb6:	f385 8811 	msr	BASEPRI, r5
 8015fba:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8015fbe:	2800      	cmp	r0, #0
 8015fc0:	dd04      	ble.n	8015fcc <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
 8015fc2:	f7f8 fb15 	bl	800e5f0 <z_impl_k_is_preempt_thread>
 8015fc6:	b108      	cbz	r0, 8015fcc <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
 8015fc8:	f7f8 fa6c 	bl	800e4a4 <z_impl_k_yield>
}
 8015fcc:	4620      	mov	r0, r4
 8015fce:	b003      	add	sp, #12
 8015fd0:	bd30      	pop	{r4, r5, pc}

08015fd2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8015fd2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 8015fd6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8015fd8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8015fda:	2300      	movs	r3, #0
	node->prev = NULL;
 8015fdc:	e9c0 3300 	strd	r3, r3, [r0]
}
 8015fe0:	4770      	bx	lr

08015fe2 <unpend_thread_no_timeout>:
{
 8015fe2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8015fe4:	f7ff fff5 	bl	8015fd2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8015fe8:	7b43      	ldrb	r3, [r0, #13]
 8015fea:	f023 0302 	bic.w	r3, r3, #2
 8015fee:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	6083      	str	r3, [r0, #8]
}
 8015ff4:	bd08      	pop	{r3, pc}

08015ff6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 8015ff6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8015ffa:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8015ffe:	4283      	cmp	r3, r0
		return b2 - b1;
 8016000:	bf14      	ite	ne
 8016002:	1ac0      	subne	r0, r0, r3
	return 0;
 8016004:	2000      	moveq	r0, #0
}
 8016006:	4770      	bx	lr

08016008 <z_unpend_thread_no_timeout>:
{
 8016008:	b508      	push	{r3, lr}
	__asm__ volatile(
 801600a:	f04f 0310 	mov.w	r3, #16
 801600e:	f3ef 8111 	mrs	r1, BASEPRI
 8016012:	f383 8812 	msr	BASEPRI_MAX, r3
 8016016:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 801601a:	f7ff ffe2 	bl	8015fe2 <unpend_thread_no_timeout>
	__asm__ volatile(
 801601e:	f381 8811 	msr	BASEPRI, r1
 8016022:	f3bf 8f6f 	isb	sy
}
 8016026:	bd08      	pop	{r3, pc}

08016028 <z_unpend_thread>:
{
 8016028:	b510      	push	{r4, lr}
	__asm__ volatile(
 801602a:	f04f 0310 	mov.w	r3, #16
 801602e:	f3ef 8411 	mrs	r4, BASEPRI
 8016032:	f383 8812 	msr	BASEPRI_MAX, r3
 8016036:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 801603a:	f7ff ffd2 	bl	8015fe2 <unpend_thread_no_timeout>
	__asm__ volatile(
 801603e:	f384 8811 	msr	BASEPRI, r4
 8016042:	f3bf 8f6f 	isb	sy
}
 8016046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801604a:	3018      	adds	r0, #24
 801604c:	f000 b8d3 	b.w	80161f6 <z_abort_timeout>

08016050 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8016050:	4603      	mov	r3, r0
 8016052:	b920      	cbnz	r0, 801605e <z_reschedule_irqlock+0xe>
 8016054:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
 8016058:	b90a      	cbnz	r2, 801605e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 801605a:	f7ed be41 	b.w	8003ce0 <arch_swap>
 801605e:	f383 8811 	msr	BASEPRI, r3
 8016062:	f3bf 8f6f 	isb	sy
}
 8016066:	4770      	bx	lr

08016068 <z_reschedule_unlocked>:
	__asm__ volatile(
 8016068:	f04f 0310 	mov.w	r3, #16
 801606c:	f3ef 8011 	mrs	r0, BASEPRI
 8016070:	f383 8812 	msr	BASEPRI_MAX, r3
 8016074:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8016078:	f7ff bfea 	b.w	8016050 <z_reschedule_irqlock>

0801607c <z_priq_dumb_best>:
{
 801607c:	4603      	mov	r3, r0
	return list->head == list;
 801607e:	6800      	ldr	r0, [r0, #0]
}
 8016080:	4283      	cmp	r3, r0
 8016082:	bf08      	it	eq
 8016084:	2000      	moveq	r0, #0
 8016086:	4770      	bx	lr

08016088 <z_ready_thread>:
{
 8016088:	b510      	push	{r4, lr}
 801608a:	f04f 0310 	mov.w	r3, #16
 801608e:	f3ef 8411 	mrs	r4, BASEPRI
 8016092:	f383 8812 	msr	BASEPRI_MAX, r3
 8016096:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 801609a:	f7f8 f8bb 	bl	800e214 <ready_thread>
	__asm__ volatile(
 801609e:	f384 8811 	msr	BASEPRI, r4
 80160a2:	f3bf 8f6f 	isb	sy
}
 80160a6:	bd10      	pop	{r4, pc}

080160a8 <z_thread_timeout>:
{
 80160a8:	b510      	push	{r4, lr}
 80160aa:	4601      	mov	r1, r0
	__asm__ volatile(
 80160ac:	f04f 0310 	mov.w	r3, #16
 80160b0:	f3ef 8411 	mrs	r4, BASEPRI
 80160b4:	f383 8812 	msr	BASEPRI_MAX, r3
 80160b8:	f3bf 8f6f 	isb	sy
		if (!killed) {
 80160bc:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 80160c0:	f013 0f28 	tst.w	r3, #40	; 0x28
 80160c4:	d10d      	bne.n	80160e2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 80160c6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 80160ca:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 80160cc:	b10b      	cbz	r3, 80160d2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80160ce:	f7ff ff88 	bl	8015fe2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80160d2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80160d6:	f023 0314 	bic.w	r3, r3, #20
 80160da:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80160de:	f7f8 f899 	bl	800e214 <ready_thread>
	__asm__ volatile(
 80160e2:	f384 8811 	msr	BASEPRI, r4
 80160e6:	f3bf 8f6f 	isb	sy
}
 80160ea:	bd10      	pop	{r4, pc}

080160ec <add_to_waitq_locked>:
{
 80160ec:	b538      	push	{r3, r4, r5, lr}
 80160ee:	4604      	mov	r4, r0
 80160f0:	460d      	mov	r5, r1
	unready_thread(thread);
 80160f2:	f7f8 f8e3 	bl	800e2bc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80160f6:	7b63      	ldrb	r3, [r4, #13]
 80160f8:	f043 0302 	orr.w	r3, r3, #2
 80160fc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80160fe:	b195      	cbz	r5, 8016126 <add_to_waitq_locked+0x3a>
 8016100:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8016102:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8016104:	429d      	cmp	r5, r3
 8016106:	d015      	beq.n	8016134 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8016108:	b1a3      	cbz	r3, 8016134 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
 801610a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 801610e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 8016112:	4291      	cmp	r1, r2
 8016114:	d008      	beq.n	8016128 <add_to_waitq_locked+0x3c>
		return b2 - b1;
 8016116:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
 8016118:	2a00      	cmp	r2, #0
 801611a:	dd05      	ble.n	8016128 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
 801611c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 801611e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8016122:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8016124:	605c      	str	r4, [r3, #4]
}
 8016126:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 8016128:	686a      	ldr	r2, [r5, #4]
 801612a:	4293      	cmp	r3, r2
 801612c:	d002      	beq.n	8016134 <add_to_waitq_locked+0x48>
 801612e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8016130:	2b00      	cmp	r3, #0
 8016132:	d1ec      	bne.n	801610e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
 8016134:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 8016136:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 801613a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 801613c:	606c      	str	r4, [r5, #4]
}
 801613e:	e7f2      	b.n	8016126 <add_to_waitq_locked+0x3a>

08016140 <z_unpend1_no_timeout>:
{
 8016140:	b510      	push	{r4, lr}
	__asm__ volatile(
 8016142:	f04f 0310 	mov.w	r3, #16
 8016146:	f3ef 8411 	mrs	r4, BASEPRI
 801614a:	f383 8812 	msr	BASEPRI_MAX, r3
 801614e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 8016152:	f7ff ff93 	bl	801607c <z_priq_dumb_best>
		if (thread != NULL) {
 8016156:	4601      	mov	r1, r0
 8016158:	b108      	cbz	r0, 801615e <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
 801615a:	f7ff ff42 	bl	8015fe2 <unpend_thread_no_timeout>
	__asm__ volatile(
 801615e:	f384 8811 	msr	BASEPRI, r4
 8016162:	f3bf 8f6f 	isb	sy
}
 8016166:	4608      	mov	r0, r1
 8016168:	bd10      	pop	{r4, pc}

0801616a <z_unpend_first_thread>:
{
 801616a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 801616c:	f04f 0310 	mov.w	r3, #16
 8016170:	f3ef 8511 	mrs	r5, BASEPRI
 8016174:	f383 8812 	msr	BASEPRI_MAX, r3
 8016178:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 801617c:	f7ff ff7e 	bl	801607c <z_priq_dumb_best>
		if (thread != NULL) {
 8016180:	4604      	mov	r4, r0
 8016182:	b120      	cbz	r0, 801618e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
 8016184:	f7ff ff2d 	bl	8015fe2 <unpend_thread_no_timeout>
 8016188:	3018      	adds	r0, #24
 801618a:	f000 f834 	bl	80161f6 <z_abort_timeout>
	__asm__ volatile(
 801618e:	f385 8811 	msr	BASEPRI, r5
 8016192:	f3bf 8f6f 	isb	sy
}
 8016196:	4620      	mov	r0, r4
 8016198:	bd38      	pop	{r3, r4, r5, pc}

0801619a <z_impl_k_usleep>:
	ticks = k_us_to_ticks_ceil64(us);
 801619a:	17c1      	asrs	r1, r0, #31
		t += off;
 801619c:	3063      	adds	r0, #99	; 0x63
{
 801619e:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 80161a0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80161a4:	f04f 0300 	mov.w	r3, #0
 80161a8:	f141 0100 	adc.w	r1, r1, #0
 80161ac:	f7ea fcaa 	bl	8000b04 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 80161b0:	17c1      	asrs	r1, r0, #31
 80161b2:	f7f8 f9b7 	bl	800e524 <z_tick_sleep>
}
 80161b6:	2364      	movs	r3, #100	; 0x64
 80161b8:	4358      	muls	r0, r3
 80161ba:	bd08      	pop	{r3, pc}

080161bc <z_sched_wake>:
{
 80161bc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80161be:	f04f 0310 	mov.w	r3, #16
 80161c2:	f3ef 8511 	mrs	r5, BASEPRI
 80161c6:	f383 8812 	msr	BASEPRI_MAX, r3
 80161ca:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
 80161ce:	f7ff ff55 	bl	801607c <z_priq_dumb_best>
		if (thread != NULL) {
 80161d2:	4604      	mov	r4, r0
 80161d4:	b150      	cbz	r0, 80161ec <z_sched_wake+0x30>
 80161d6:	67c1      	str	r1, [r0, #124]	; 0x7c
 80161d8:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
 80161da:	f7ff ff02 	bl	8015fe2 <unpend_thread_no_timeout>
 80161de:	3018      	adds	r0, #24
 80161e0:	f000 f809 	bl	80161f6 <z_abort_timeout>
			ready_thread(thread);
 80161e4:	4620      	mov	r0, r4
 80161e6:	f7f8 f815 	bl	800e214 <ready_thread>
			ret = true;
 80161ea:	2001      	movs	r0, #1
	__asm__ volatile(
 80161ec:	f385 8811 	msr	BASEPRI, r5
 80161f0:	f3bf 8f6f 	isb	sy
}
 80161f4:	bd38      	pop	{r3, r4, r5, pc}

080161f6 <z_abort_timeout>:
{
 80161f6:	b510      	push	{r4, lr}
	__asm__ volatile(
 80161f8:	f04f 0210 	mov.w	r2, #16
 80161fc:	f3ef 8411 	mrs	r4, BASEPRI
 8016200:	f382 8812 	msr	BASEPRI_MAX, r2
 8016204:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8016208:	6803      	ldr	r3, [r0, #0]
 801620a:	b13b      	cbz	r3, 801621c <z_abort_timeout+0x26>
			remove_timeout(to);
 801620c:	f7f8 faae 	bl	800e76c <remove_timeout>
			ret = 0;
 8016210:	2000      	movs	r0, #0
	__asm__ volatile(
 8016212:	f384 8811 	msr	BASEPRI, r4
 8016216:	f3bf 8f6f 	isb	sy
}
 801621a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 801621c:	f06f 0015 	mvn.w	r0, #21
 8016220:	e7f7      	b.n	8016212 <z_abort_timeout+0x1c>

08016222 <z_set_timeout_expiry>:
{
 8016222:	b570      	push	{r4, r5, r6, lr}
 8016224:	4604      	mov	r4, r0
 8016226:	460d      	mov	r5, r1
	__asm__ volatile(
 8016228:	f04f 0310 	mov.w	r3, #16
 801622c:	f3ef 8611 	mrs	r6, BASEPRI
 8016230:	f383 8812 	msr	BASEPRI_MAX, r3
 8016234:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8016238:	f7f8 fa72 	bl	800e720 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 801623c:	2801      	cmp	r0, #1
 801623e:	dd05      	ble.n	801624c <z_set_timeout_expiry+0x2a>
 8016240:	42a0      	cmp	r0, r4
 8016242:	db03      	blt.n	801624c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8016244:	4629      	mov	r1, r5
 8016246:	4620      	mov	r0, r4
 8016248:	f7f6 f98c 	bl	800c564 <sys_clock_set_timeout>
	__asm__ volatile(
 801624c:	f386 8811 	msr	BASEPRI, r6
 8016250:	f3bf 8f6f 	isb	sy
}
 8016254:	bd70      	pop	{r4, r5, r6, pc}

08016256 <sys_clock_tick_get_32>:
{
 8016256:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 8016258:	f7f8 fb78 	bl	800e94c <sys_clock_tick_get>
}
 801625c:	bd08      	pop	{r3, pc}

0801625e <z_impl_k_uptime_ticks>:
	return sys_clock_tick_get();
 801625e:	f7f8 bb75 	b.w	800e94c <sys_clock_tick_get>

08016262 <k_timer_init>:
	timer->status = 0U;
 8016262:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 8016264:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 8016268:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 801626c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 8016270:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 8016274:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 8016276:	6343      	str	r3, [r0, #52]	; 0x34
}
 8016278:	4770      	bx	lr

0801627a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 801627a:	b510      	push	{r4, lr}
 801627c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 801627e:	f7ff ffba 	bl	80161f6 <z_abort_timeout>

	if (inactive) {
 8016282:	b9b0      	cbnz	r0, 80162b2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 8016284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016286:	b10b      	cbz	r3, 801628c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8016288:	4620      	mov	r0, r4
 801628a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 801628c:	f104 0018 	add.w	r0, r4, #24
 8016290:	f7ff ff56 	bl	8016140 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8016294:	b168      	cbz	r0, 80162b2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 8016296:	f7ff fef7 	bl	8016088 <z_ready_thread>
	__asm__ volatile(
 801629a:	f04f 0310 	mov.w	r3, #16
 801629e:	f3ef 8011 	mrs	r0, BASEPRI
 80162a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80162a6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 80162aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 80162ae:	f7ff becf 	b.w	8016050 <z_reschedule_irqlock>
 80162b2:	bd10      	pop	{r4, pc}

080162b4 <add_event>:
{
 80162b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162b6:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80162b8:	e9d0 1300 	ldrd	r1, r3, [r0]
 80162bc:	4288      	cmp	r0, r1
 80162be:	4604      	mov	r4, r0
 80162c0:	d00d      	beq.n	80162de <add_event+0x2a>
	if ((pending == NULL) ||
 80162c2:	b163      	cbz	r3, 80162de <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80162c4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 80162c6:	b100      	cbz	r0, 80162ca <add_event+0x16>
 80162c8:	3860      	subs	r0, #96	; 0x60
 80162ca:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80162ce:	4639      	mov	r1, r7
 80162d0:	f7ff fe91 	bl	8015ff6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80162d4:	2800      	cmp	r0, #0
 80162d6:	dc02      	bgt.n	80162de <add_event+0x2a>
	return list->head == list;
 80162d8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80162da:	42b4      	cmp	r4, r6
 80162dc:	d109      	bne.n	80162f2 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
 80162de:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
 80162e0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
 80162e4:	601d      	str	r5, [r3, #0]
	list->tail = node;
 80162e6:	6065      	str	r5, [r4, #4]
}
 80162e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 80162ea:	6863      	ldr	r3, [r4, #4]
 80162ec:	429e      	cmp	r6, r3
 80162ee:	d0f6      	beq.n	80162de <add_event+0x2a>
 80162f0:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80162f2:	2e00      	cmp	r6, #0
 80162f4:	d0f3      	beq.n	80162de <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
 80162f6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 80162f8:	b101      	cbz	r1, 80162fc <add_event+0x48>
 80162fa:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 80162fc:	4638      	mov	r0, r7
 80162fe:	f7ff fe7a 	bl	8015ff6 <z_sched_prio_cmp>
 8016302:	2800      	cmp	r0, #0
 8016304:	ddf1      	ble.n	80162ea <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
 8016306:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
 8016308:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
 801630c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 801630e:	6075      	str	r5, [r6, #4]
			return;
 8016310:	e7ea      	b.n	80162e8 <add_event+0x34>

08016312 <register_events>:
{
 8016312:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 8016316:	2500      	movs	r5, #0
{
 8016318:	468b      	mov	fp, r1
 801631a:	4614      	mov	r4, r2
 801631c:	461f      	mov	r7, r3
 801631e:	4682      	mov	sl, r0
	int events_registered = 0;
 8016320:	462e      	mov	r6, r5
	event->poller = NULL;
 8016322:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
 8016324:	455d      	cmp	r5, fp
 8016326:	db02      	blt.n	801632e <register_events+0x1c>
}
 8016328:	4630      	mov	r0, r6
 801632a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801632e:	f04f 0310 	mov.w	r3, #16
 8016332:	f3ef 8911 	mrs	r9, BASEPRI
 8016336:	f383 8812 	msr	BASEPRI_MAX, r3
 801633a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 801633e:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8016342:	f003 031f 	and.w	r3, r3, #31
 8016346:	3b01      	subs	r3, #1
 8016348:	2b07      	cmp	r3, #7
 801634a:	d80f      	bhi.n	801636c <register_events+0x5a>
 801634c:	e8df f003 	tbb	[pc, r3]
 8016350:	0a0e041e 	.word	0x0a0e041e
 8016354:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
 8016358:	f8da 3010 	ldr.w	r3, [sl, #16]
 801635c:	689b      	ldr	r3, [r3, #8]
 801635e:	b12b      	cbz	r3, 801636c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8016360:	2302      	movs	r3, #2
 8016362:	e020      	b.n	80163a6 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 8016364:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	bb8b      	cbnz	r3, 80163d0 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
 801636c:	bb47      	cbnz	r7, 80163c0 <register_events+0xae>
 801636e:	7823      	ldrb	r3, [r4, #0]
 8016370:	b333      	cbz	r3, 80163c0 <register_events+0xae>
	switch (event->type) {
 8016372:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8016376:	f003 031f 	and.w	r3, r3, #31
 801637a:	3b01      	subs	r3, #1
 801637c:	2b07      	cmp	r3, #7
 801637e:	d830      	bhi.n	80163e2 <register_events+0xd0>
 8016380:	e8df f003 	tbb	[pc, r3]
 8016384:	282f2833 	.word	0x282f2833
 8016388:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
 801638c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016390:	689b      	ldr	r3, [r3, #8]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d0ea      	beq.n	801636c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
 8016396:	2301      	movs	r3, #1
 8016398:	e005      	b.n	80163a6 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
 801639a:	f8da 3010 	ldr.w	r3, [sl, #16]
 801639e:	6a1b      	ldr	r3, [r3, #32]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d0e3      	beq.n	801636c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 80163a4:	2310      	movs	r3, #16
	event->state |= state;
 80163a6:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
 80163aa:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
 80163ae:	f3c2 3145 	ubfx	r1, r2, #13, #6
 80163b2:	430b      	orrs	r3, r1
 80163b4:	f363 3252 	bfi	r2, r3, #13, #6
 80163b8:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
 80163bc:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
 80163c0:	f389 8811 	msr	BASEPRI, r9
 80163c4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 80163c8:	3501      	adds	r5, #1
 80163ca:	f10a 0a14 	add.w	sl, sl, #20
 80163ce:	e7a9      	b.n	8016324 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 80163d0:	2304      	movs	r3, #4
 80163d2:	e7e8      	b.n	80163a6 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
 80163d4:	f8da 0010 	ldr.w	r0, [sl, #16]
 80163d8:	4622      	mov	r2, r4
 80163da:	4651      	mov	r1, sl
 80163dc:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
 80163de:	f7ff ff69 	bl	80162b4 <add_event>
	event->poller = poller;
 80163e2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
 80163e6:	3601      	adds	r6, #1
 80163e8:	e7ea      	b.n	80163c0 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
 80163ea:	f8da 0010 	ldr.w	r0, [sl, #16]
 80163ee:	4622      	mov	r2, r4
 80163f0:	4651      	mov	r1, sl
 80163f2:	e7f4      	b.n	80163de <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
 80163f4:	f8da 0010 	ldr.w	r0, [sl, #16]
 80163f8:	4622      	mov	r2, r4
 80163fa:	4651      	mov	r1, sl
 80163fc:	3024      	adds	r0, #36	; 0x24
 80163fe:	e7ee      	b.n	80163de <register_events+0xcc>

08016400 <signal_poll_event>:
{
 8016400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
 8016404:	6884      	ldr	r4, [r0, #8]
{
 8016406:	4605      	mov	r5, r0
 8016408:	460e      	mov	r6, r1
	if (poller != NULL) {
 801640a:	b144      	cbz	r4, 801641e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
 801640c:	7863      	ldrb	r3, [r4, #1]
 801640e:	2b01      	cmp	r3, #1
 8016410:	d136      	bne.n	8016480 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
 8016412:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 8016416:	f013 0302 	ands.w	r3, r3, #2
 801641a:	d10a      	bne.n	8016432 <signal_poll_event+0x32>
		poller->is_polling = false;
 801641c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
 801641e:	68eb      	ldr	r3, [r5, #12]
 8016420:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8016424:	430e      	orrs	r6, r1
	event->poller = NULL;
 8016426:	2000      	movs	r0, #0
	event->state |= state;
 8016428:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
 801642c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
 801642e:	60eb      	str	r3, [r5, #12]
	return retcode;
 8016430:	e00b      	b.n	801644a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
 8016432:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 8016436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801643a:	bf08      	it	eq
 801643c:	f112 0f02 	cmneq.w	r2, #2
 8016440:	d105      	bne.n	801644e <signal_poll_event+0x4e>
		poller->is_polling = false;
 8016442:	2300      	movs	r3, #0
 8016444:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
 8016446:	f06f 000a 	mvn.w	r0, #10
}
 801644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801644e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
 8016452:	4640      	mov	r0, r8
 8016454:	f7ff fde8 	bl	8016028 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8016458:	2e08      	cmp	r6, #8
 801645a:	bf0c      	ite	eq
 801645c:	f06f 0303 	mvneq.w	r3, #3
 8016460:	2300      	movne	r3, #0
 8016462:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8016464:	f814 3c53 	ldrb.w	r3, [r4, #-83]
 8016468:	06db      	lsls	r3, r3, #27
 801646a:	d102      	bne.n	8016472 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
 801646c:	f854 7c48 	ldr.w	r7, [r4, #-72]
 8016470:	b10f      	cbz	r7, 8016476 <signal_poll_event+0x76>
		poller->is_polling = false;
 8016472:	2300      	movs	r3, #0
 8016474:	e7d2      	b.n	801641c <signal_poll_event+0x1c>
	z_ready_thread(thread);
 8016476:	4640      	mov	r0, r8
 8016478:	f7ff fe06 	bl	8016088 <z_ready_thread>
		poller->is_polling = false;
 801647c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
 801647e:	e7ce      	b.n	801641e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
 8016480:	2b02      	cmp	r3, #2
 8016482:	d1f6      	bne.n	8016472 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 8016484:	7823      	ldrb	r3, [r4, #0]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d0c9      	beq.n	801641e <signal_poll_event+0x1e>
 801648a:	f854 7c04 	ldr.w	r7, [r4, #-4]
 801648e:	2f00      	cmp	r7, #0
 8016490:	d0f4      	beq.n	801647c <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
 8016492:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 8016496:	f1a4 0914 	sub.w	r9, r4, #20
 801649a:	f104 0014 	add.w	r0, r4, #20
 801649e:	f7ff feaa 	bl	80161f6 <z_abort_timeout>
		twork->poll_result = 0;
 80164a2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 80164a6:	4649      	mov	r1, r9
 80164a8:	4638      	mov	r0, r7
 80164aa:	f7ff fd75 	bl	8015f98 <k_work_submit_to_queue>
		poller->is_polling = false;
 80164ae:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
 80164b2:	e7b4      	b.n	801641e <signal_poll_event+0x1e>

080164b4 <clear_event_registrations>:
	while (num_events--) {
 80164b4:	2314      	movs	r3, #20
{
 80164b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164b8:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
 80164bc:	2400      	movs	r4, #0
 80164be:	2601      	movs	r6, #1
	while (num_events--) {
 80164c0:	b901      	cbnz	r1, 80164c4 <clear_event_registrations+0x10>
}
 80164c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
 80164c4:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
 80164c8:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
 80164cc:	f003 031f 	and.w	r3, r3, #31
 80164d0:	2b08      	cmp	r3, #8
 80164d2:	f1a0 0714 	sub.w	r7, r0, #20
 80164d6:	d80d      	bhi.n	80164f4 <clear_event_registrations+0x40>
 80164d8:	fa06 f303 	lsl.w	r3, r6, r3
 80164dc:	f413 7f8b 	tst.w	r3, #278	; 0x116
 80164e0:	d008      	beq.n	80164f4 <clear_event_registrations+0x40>
	return node->next != NULL;
 80164e2:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80164e6:	b12b      	cbz	r3, 80164f4 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
 80164e8:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
 80164ec:	602b      	str	r3, [r5, #0]
	next->prev = prev;
 80164ee:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
 80164f0:	e940 4405 	strd	r4, r4, [r0, #-20]
 80164f4:	f382 8811 	msr	BASEPRI, r2
 80164f8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80164fc:	f04f 0310 	mov.w	r3, #16
 8016500:	f3ef 8211 	mrs	r2, BASEPRI
 8016504:	f383 8812 	msr	BASEPRI_MAX, r3
 8016508:	f3bf 8f6f 	isb	sy
 801650c:	3901      	subs	r1, #1
 801650e:	4638      	mov	r0, r7
 8016510:	e7d6      	b.n	80164c0 <clear_event_registrations+0xc>

08016512 <z_handle_obj_poll_events>:
{
 8016512:	4603      	mov	r3, r0
	return list->head == list;
 8016514:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8016516:	4283      	cmp	r3, r0
 8016518:	d008      	beq.n	801652c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
 801651a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 801651e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8016520:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8016522:	2300      	movs	r3, #0
	node->prev = NULL;
 8016524:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
 8016528:	f7ff bf6a 	b.w	8016400 <signal_poll_event>
}
 801652c:	4770      	bx	lr

0801652e <k_heap_init>:
{
 801652e:	b410      	push	{r4}
 8016530:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8016534:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8016538:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 801653a:	f7fa bcad 	b.w	8010e98 <sys_heap_init>

0801653e <memcmp>:
 801653e:	b510      	push	{r4, lr}
 8016540:	3901      	subs	r1, #1
 8016542:	4402      	add	r2, r0
 8016544:	4290      	cmp	r0, r2
 8016546:	d101      	bne.n	801654c <memcmp+0xe>
 8016548:	2000      	movs	r0, #0
 801654a:	e005      	b.n	8016558 <memcmp+0x1a>
 801654c:	7803      	ldrb	r3, [r0, #0]
 801654e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016552:	42a3      	cmp	r3, r4
 8016554:	d001      	beq.n	801655a <memcmp+0x1c>
 8016556:	1b18      	subs	r0, r3, r4
 8016558:	bd10      	pop	{r4, pc}
 801655a:	3001      	adds	r0, #1
 801655c:	e7f2      	b.n	8016544 <memcmp+0x6>

0801655e <memcpy>:
 801655e:	440a      	add	r2, r1
 8016560:	4291      	cmp	r1, r2
 8016562:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016566:	d100      	bne.n	801656a <memcpy+0xc>
 8016568:	4770      	bx	lr
 801656a:	b510      	push	{r4, lr}
 801656c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016574:	4291      	cmp	r1, r2
 8016576:	d1f9      	bne.n	801656c <memcpy+0xe>
 8016578:	bd10      	pop	{r4, pc}

0801657a <memmove>:
 801657a:	4288      	cmp	r0, r1
 801657c:	b510      	push	{r4, lr}
 801657e:	eb01 0402 	add.w	r4, r1, r2
 8016582:	d902      	bls.n	801658a <memmove+0x10>
 8016584:	4284      	cmp	r4, r0
 8016586:	4623      	mov	r3, r4
 8016588:	d807      	bhi.n	801659a <memmove+0x20>
 801658a:	1e43      	subs	r3, r0, #1
 801658c:	42a1      	cmp	r1, r4
 801658e:	d008      	beq.n	80165a2 <memmove+0x28>
 8016590:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016594:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016598:	e7f8      	b.n	801658c <memmove+0x12>
 801659a:	4402      	add	r2, r0
 801659c:	4601      	mov	r1, r0
 801659e:	428a      	cmp	r2, r1
 80165a0:	d100      	bne.n	80165a4 <memmove+0x2a>
 80165a2:	bd10      	pop	{r4, pc}
 80165a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80165a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80165ac:	e7f7      	b.n	801659e <memmove+0x24>

080165ae <memset>:
 80165ae:	4402      	add	r2, r0
 80165b0:	4603      	mov	r3, r0
 80165b2:	4293      	cmp	r3, r2
 80165b4:	d100      	bne.n	80165b8 <memset+0xa>
 80165b6:	4770      	bx	lr
 80165b8:	f803 1b01 	strb.w	r1, [r3], #1
 80165bc:	e7f9      	b.n	80165b2 <memset+0x4>

080165be <strchr>:
 80165be:	b2c9      	uxtb	r1, r1
 80165c0:	4603      	mov	r3, r0
 80165c2:	4618      	mov	r0, r3
 80165c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165c8:	b112      	cbz	r2, 80165d0 <strchr+0x12>
 80165ca:	428a      	cmp	r2, r1
 80165cc:	d1f9      	bne.n	80165c2 <strchr+0x4>
 80165ce:	4770      	bx	lr
 80165d0:	2900      	cmp	r1, #0
 80165d2:	bf18      	it	ne
 80165d4:	2000      	movne	r0, #0
 80165d6:	4770      	bx	lr

080165d8 <strcpy>:
 80165d8:	4603      	mov	r3, r0
 80165da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165de:	f803 2b01 	strb.w	r2, [r3], #1
 80165e2:	2a00      	cmp	r2, #0
 80165e4:	d1f9      	bne.n	80165da <strcpy+0x2>
 80165e6:	4770      	bx	lr

080165e8 <strftime>:
 80165e8:	f7f8 bd06 	b.w	800eff8 <__strftime.isra.0>

080165ec <strncmp>:
 80165ec:	b510      	push	{r4, lr}
 80165ee:	4603      	mov	r3, r0
 80165f0:	b172      	cbz	r2, 8016610 <strncmp+0x24>
 80165f2:	3901      	subs	r1, #1
 80165f4:	1884      	adds	r4, r0, r2
 80165f6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80165fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80165fe:	4290      	cmp	r0, r2
 8016600:	d101      	bne.n	8016606 <strncmp+0x1a>
 8016602:	42a3      	cmp	r3, r4
 8016604:	d101      	bne.n	801660a <strncmp+0x1e>
 8016606:	1a80      	subs	r0, r0, r2
 8016608:	bd10      	pop	{r4, pc}
 801660a:	2800      	cmp	r0, #0
 801660c:	d1f3      	bne.n	80165f6 <strncmp+0xa>
 801660e:	e7fa      	b.n	8016606 <strncmp+0x1a>
 8016610:	4610      	mov	r0, r2
 8016612:	e7f9      	b.n	8016608 <strncmp+0x1c>

08016614 <strncpy>:
 8016614:	b510      	push	{r4, lr}
 8016616:	3901      	subs	r1, #1
 8016618:	4603      	mov	r3, r0
 801661a:	b132      	cbz	r2, 801662a <strncpy+0x16>
 801661c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016620:	f803 4b01 	strb.w	r4, [r3], #1
 8016624:	3a01      	subs	r2, #1
 8016626:	2c00      	cmp	r4, #0
 8016628:	d1f7      	bne.n	801661a <strncpy+0x6>
 801662a:	441a      	add	r2, r3
 801662c:	2100      	movs	r1, #0
 801662e:	4293      	cmp	r3, r2
 8016630:	d100      	bne.n	8016634 <strncpy+0x20>
 8016632:	bd10      	pop	{r4, pc}
 8016634:	f803 1b01 	strb.w	r1, [r3], #1
 8016638:	e7f9      	b.n	801662e <strncpy+0x1a>

0801663a <strnlen>:
 801663a:	b510      	push	{r4, lr}
 801663c:	4602      	mov	r2, r0
 801663e:	4401      	add	r1, r0
 8016640:	428a      	cmp	r2, r1
 8016642:	4613      	mov	r3, r2
 8016644:	d003      	beq.n	801664e <strnlen+0x14>
 8016646:	781c      	ldrb	r4, [r3, #0]
 8016648:	3201      	adds	r2, #1
 801664a:	2c00      	cmp	r4, #0
 801664c:	d1f8      	bne.n	8016640 <strnlen+0x6>
 801664e:	1a18      	subs	r0, r3, r0
 8016650:	bd10      	pop	{r4, pc}

08016652 <_strtoul_r>:
 8016652:	f7f9 b9a5 	b.w	800f9a0 <_strtoul_l.constprop.0>

08016656 <abs>:
 8016656:	2800      	cmp	r0, #0
 8016658:	bfb8      	it	lt
 801665a:	4240      	neglt	r0, r0
 801665c:	4770      	bx	lr

0801665e <_getenv_r>:
 801665e:	b507      	push	{r0, r1, r2, lr}
 8016660:	aa01      	add	r2, sp, #4
 8016662:	f7f9 fbab 	bl	800fdbc <_findenv_r>
 8016666:	b003      	add	sp, #12
 8016668:	f85d fb04 	ldr.w	pc, [sp], #4

0801666c <labs>:
 801666c:	2800      	cmp	r0, #0
 801666e:	bfb8      	it	lt
 8016670:	4240      	neglt	r0, r0
 8016672:	4770      	bx	lr

08016674 <__seofread>:
 8016674:	2000      	movs	r0, #0
 8016676:	4770      	bx	lr

08016678 <__ssputs_r>:
 8016678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801667c:	688e      	ldr	r6, [r1, #8]
 801667e:	429e      	cmp	r6, r3
 8016680:	4682      	mov	sl, r0
 8016682:	460c      	mov	r4, r1
 8016684:	4690      	mov	r8, r2
 8016686:	461f      	mov	r7, r3
 8016688:	d838      	bhi.n	80166fc <__ssputs_r+0x84>
 801668a:	898a      	ldrh	r2, [r1, #12]
 801668c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016690:	d032      	beq.n	80166f8 <__ssputs_r+0x80>
 8016692:	6825      	ldr	r5, [r4, #0]
 8016694:	6909      	ldr	r1, [r1, #16]
 8016696:	eba5 0901 	sub.w	r9, r5, r1
 801669a:	6965      	ldr	r5, [r4, #20]
 801669c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80166a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80166a4:	3301      	adds	r3, #1
 80166a6:	444b      	add	r3, r9
 80166a8:	106d      	asrs	r5, r5, #1
 80166aa:	429d      	cmp	r5, r3
 80166ac:	bf38      	it	cc
 80166ae:	461d      	movcc	r5, r3
 80166b0:	0553      	lsls	r3, r2, #21
 80166b2:	d531      	bpl.n	8016718 <__ssputs_r+0xa0>
 80166b4:	4629      	mov	r1, r5
 80166b6:	f7f8 fbd3 	bl	800ee60 <_malloc_r>
 80166ba:	4606      	mov	r6, r0
 80166bc:	b950      	cbnz	r0, 80166d4 <__ssputs_r+0x5c>
 80166be:	230c      	movs	r3, #12
 80166c0:	f8ca 3000 	str.w	r3, [sl]
 80166c4:	89a3      	ldrh	r3, [r4, #12]
 80166c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166ca:	81a3      	strh	r3, [r4, #12]
 80166cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166d4:	6921      	ldr	r1, [r4, #16]
 80166d6:	464a      	mov	r2, r9
 80166d8:	f7ff ff41 	bl	801655e <memcpy>
 80166dc:	89a3      	ldrh	r3, [r4, #12]
 80166de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80166e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166e6:	81a3      	strh	r3, [r4, #12]
 80166e8:	6126      	str	r6, [r4, #16]
 80166ea:	6165      	str	r5, [r4, #20]
 80166ec:	444e      	add	r6, r9
 80166ee:	eba5 0509 	sub.w	r5, r5, r9
 80166f2:	6026      	str	r6, [r4, #0]
 80166f4:	60a5      	str	r5, [r4, #8]
 80166f6:	463e      	mov	r6, r7
 80166f8:	42be      	cmp	r6, r7
 80166fa:	d900      	bls.n	80166fe <__ssputs_r+0x86>
 80166fc:	463e      	mov	r6, r7
 80166fe:	6820      	ldr	r0, [r4, #0]
 8016700:	4632      	mov	r2, r6
 8016702:	4641      	mov	r1, r8
 8016704:	f7ff ff39 	bl	801657a <memmove>
 8016708:	68a3      	ldr	r3, [r4, #8]
 801670a:	1b9b      	subs	r3, r3, r6
 801670c:	60a3      	str	r3, [r4, #8]
 801670e:	6823      	ldr	r3, [r4, #0]
 8016710:	4433      	add	r3, r6
 8016712:	6023      	str	r3, [r4, #0]
 8016714:	2000      	movs	r0, #0
 8016716:	e7db      	b.n	80166d0 <__ssputs_r+0x58>
 8016718:	462a      	mov	r2, r5
 801671a:	f000 f943 	bl	80169a4 <_realloc_r>
 801671e:	4606      	mov	r6, r0
 8016720:	2800      	cmp	r0, #0
 8016722:	d1e1      	bne.n	80166e8 <__ssputs_r+0x70>
 8016724:	6921      	ldr	r1, [r4, #16]
 8016726:	4650      	mov	r0, sl
 8016728:	f7f8 fb50 	bl	800edcc <_free_r>
 801672c:	e7c7      	b.n	80166be <__ssputs_r+0x46>

0801672e <_sungetc_r>:
 801672e:	b538      	push	{r3, r4, r5, lr}
 8016730:	1c4b      	adds	r3, r1, #1
 8016732:	4614      	mov	r4, r2
 8016734:	d103      	bne.n	801673e <_sungetc_r+0x10>
 8016736:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801673a:	4628      	mov	r0, r5
 801673c:	bd38      	pop	{r3, r4, r5, pc}
 801673e:	8993      	ldrh	r3, [r2, #12]
 8016740:	f023 0320 	bic.w	r3, r3, #32
 8016744:	8193      	strh	r3, [r2, #12]
 8016746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016748:	6852      	ldr	r2, [r2, #4]
 801674a:	b2cd      	uxtb	r5, r1
 801674c:	b18b      	cbz	r3, 8016772 <_sungetc_r+0x44>
 801674e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016750:	4293      	cmp	r3, r2
 8016752:	dd08      	ble.n	8016766 <_sungetc_r+0x38>
 8016754:	6823      	ldr	r3, [r4, #0]
 8016756:	1e5a      	subs	r2, r3, #1
 8016758:	6022      	str	r2, [r4, #0]
 801675a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801675e:	6863      	ldr	r3, [r4, #4]
 8016760:	3301      	adds	r3, #1
 8016762:	6063      	str	r3, [r4, #4]
 8016764:	e7e9      	b.n	801673a <_sungetc_r+0xc>
 8016766:	4621      	mov	r1, r4
 8016768:	f000 f8e2 	bl	8016930 <__submore>
 801676c:	2800      	cmp	r0, #0
 801676e:	d0f1      	beq.n	8016754 <_sungetc_r+0x26>
 8016770:	e7e1      	b.n	8016736 <_sungetc_r+0x8>
 8016772:	6921      	ldr	r1, [r4, #16]
 8016774:	6823      	ldr	r3, [r4, #0]
 8016776:	b151      	cbz	r1, 801678e <_sungetc_r+0x60>
 8016778:	4299      	cmp	r1, r3
 801677a:	d208      	bcs.n	801678e <_sungetc_r+0x60>
 801677c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016780:	42a9      	cmp	r1, r5
 8016782:	d104      	bne.n	801678e <_sungetc_r+0x60>
 8016784:	3b01      	subs	r3, #1
 8016786:	3201      	adds	r2, #1
 8016788:	6023      	str	r3, [r4, #0]
 801678a:	6062      	str	r2, [r4, #4]
 801678c:	e7d5      	b.n	801673a <_sungetc_r+0xc>
 801678e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016796:	6363      	str	r3, [r4, #52]	; 0x34
 8016798:	2303      	movs	r3, #3
 801679a:	63a3      	str	r3, [r4, #56]	; 0x38
 801679c:	4623      	mov	r3, r4
 801679e:	f803 5f46 	strb.w	r5, [r3, #70]!
 80167a2:	6023      	str	r3, [r4, #0]
 80167a4:	2301      	movs	r3, #1
 80167a6:	e7dc      	b.n	8016762 <_sungetc_r+0x34>

080167a8 <__ssrefill_r>:
 80167a8:	b510      	push	{r4, lr}
 80167aa:	460c      	mov	r4, r1
 80167ac:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80167ae:	b169      	cbz	r1, 80167cc <__ssrefill_r+0x24>
 80167b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167b4:	4299      	cmp	r1, r3
 80167b6:	d001      	beq.n	80167bc <__ssrefill_r+0x14>
 80167b8:	f7f8 fb08 	bl	800edcc <_free_r>
 80167bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80167be:	6063      	str	r3, [r4, #4]
 80167c0:	2000      	movs	r0, #0
 80167c2:	6360      	str	r0, [r4, #52]	; 0x34
 80167c4:	b113      	cbz	r3, 80167cc <__ssrefill_r+0x24>
 80167c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80167c8:	6023      	str	r3, [r4, #0]
 80167ca:	bd10      	pop	{r4, pc}
 80167cc:	6923      	ldr	r3, [r4, #16]
 80167ce:	6023      	str	r3, [r4, #0]
 80167d0:	2300      	movs	r3, #0
 80167d2:	6063      	str	r3, [r4, #4]
 80167d4:	89a3      	ldrh	r3, [r4, #12]
 80167d6:	f043 0320 	orr.w	r3, r3, #32
 80167da:	81a3      	strh	r3, [r4, #12]
 80167dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167e0:	e7f3      	b.n	80167ca <__ssrefill_r+0x22>

080167e2 <_printf_common>:
 80167e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167e6:	4616      	mov	r6, r2
 80167e8:	4699      	mov	r9, r3
 80167ea:	688a      	ldr	r2, [r1, #8]
 80167ec:	690b      	ldr	r3, [r1, #16]
 80167ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80167f2:	4293      	cmp	r3, r2
 80167f4:	bfb8      	it	lt
 80167f6:	4613      	movlt	r3, r2
 80167f8:	6033      	str	r3, [r6, #0]
 80167fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80167fe:	4607      	mov	r7, r0
 8016800:	460c      	mov	r4, r1
 8016802:	b10a      	cbz	r2, 8016808 <_printf_common+0x26>
 8016804:	3301      	adds	r3, #1
 8016806:	6033      	str	r3, [r6, #0]
 8016808:	6823      	ldr	r3, [r4, #0]
 801680a:	0699      	lsls	r1, r3, #26
 801680c:	bf42      	ittt	mi
 801680e:	6833      	ldrmi	r3, [r6, #0]
 8016810:	3302      	addmi	r3, #2
 8016812:	6033      	strmi	r3, [r6, #0]
 8016814:	6825      	ldr	r5, [r4, #0]
 8016816:	f015 0506 	ands.w	r5, r5, #6
 801681a:	d106      	bne.n	801682a <_printf_common+0x48>
 801681c:	f104 0a19 	add.w	sl, r4, #25
 8016820:	68e3      	ldr	r3, [r4, #12]
 8016822:	6832      	ldr	r2, [r6, #0]
 8016824:	1a9b      	subs	r3, r3, r2
 8016826:	42ab      	cmp	r3, r5
 8016828:	dc26      	bgt.n	8016878 <_printf_common+0x96>
 801682a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801682e:	1e13      	subs	r3, r2, #0
 8016830:	6822      	ldr	r2, [r4, #0]
 8016832:	bf18      	it	ne
 8016834:	2301      	movne	r3, #1
 8016836:	0692      	lsls	r2, r2, #26
 8016838:	d42b      	bmi.n	8016892 <_printf_common+0xb0>
 801683a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801683e:	4649      	mov	r1, r9
 8016840:	4638      	mov	r0, r7
 8016842:	47c0      	blx	r8
 8016844:	3001      	adds	r0, #1
 8016846:	d01e      	beq.n	8016886 <_printf_common+0xa4>
 8016848:	6823      	ldr	r3, [r4, #0]
 801684a:	68e5      	ldr	r5, [r4, #12]
 801684c:	6832      	ldr	r2, [r6, #0]
 801684e:	f003 0306 	and.w	r3, r3, #6
 8016852:	2b04      	cmp	r3, #4
 8016854:	bf08      	it	eq
 8016856:	1aad      	subeq	r5, r5, r2
 8016858:	68a3      	ldr	r3, [r4, #8]
 801685a:	6922      	ldr	r2, [r4, #16]
 801685c:	bf0c      	ite	eq
 801685e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016862:	2500      	movne	r5, #0
 8016864:	4293      	cmp	r3, r2
 8016866:	bfc4      	itt	gt
 8016868:	1a9b      	subgt	r3, r3, r2
 801686a:	18ed      	addgt	r5, r5, r3
 801686c:	2600      	movs	r6, #0
 801686e:	341a      	adds	r4, #26
 8016870:	42b5      	cmp	r5, r6
 8016872:	d11a      	bne.n	80168aa <_printf_common+0xc8>
 8016874:	2000      	movs	r0, #0
 8016876:	e008      	b.n	801688a <_printf_common+0xa8>
 8016878:	2301      	movs	r3, #1
 801687a:	4652      	mov	r2, sl
 801687c:	4649      	mov	r1, r9
 801687e:	4638      	mov	r0, r7
 8016880:	47c0      	blx	r8
 8016882:	3001      	adds	r0, #1
 8016884:	d103      	bne.n	801688e <_printf_common+0xac>
 8016886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801688a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801688e:	3501      	adds	r5, #1
 8016890:	e7c6      	b.n	8016820 <_printf_common+0x3e>
 8016892:	18e1      	adds	r1, r4, r3
 8016894:	1c5a      	adds	r2, r3, #1
 8016896:	2030      	movs	r0, #48	; 0x30
 8016898:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801689c:	4422      	add	r2, r4
 801689e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80168a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80168a6:	3302      	adds	r3, #2
 80168a8:	e7c7      	b.n	801683a <_printf_common+0x58>
 80168aa:	2301      	movs	r3, #1
 80168ac:	4622      	mov	r2, r4
 80168ae:	4649      	mov	r1, r9
 80168b0:	4638      	mov	r0, r7
 80168b2:	47c0      	blx	r8
 80168b4:	3001      	adds	r0, #1
 80168b6:	d0e6      	beq.n	8016886 <_printf_common+0xa4>
 80168b8:	3601      	adds	r6, #1
 80168ba:	e7d9      	b.n	8016870 <_printf_common+0x8e>

080168bc <__sccl>:
 80168bc:	b570      	push	{r4, r5, r6, lr}
 80168be:	780b      	ldrb	r3, [r1, #0]
 80168c0:	4604      	mov	r4, r0
 80168c2:	2b5e      	cmp	r3, #94	; 0x5e
 80168c4:	bf0b      	itete	eq
 80168c6:	784b      	ldrbeq	r3, [r1, #1]
 80168c8:	1c48      	addne	r0, r1, #1
 80168ca:	1c88      	addeq	r0, r1, #2
 80168cc:	2200      	movne	r2, #0
 80168ce:	bf08      	it	eq
 80168d0:	2201      	moveq	r2, #1
 80168d2:	1e61      	subs	r1, r4, #1
 80168d4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80168d8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80168dc:	42a9      	cmp	r1, r5
 80168de:	d1fb      	bne.n	80168d8 <__sccl+0x1c>
 80168e0:	b90b      	cbnz	r3, 80168e6 <__sccl+0x2a>
 80168e2:	3801      	subs	r0, #1
 80168e4:	bd70      	pop	{r4, r5, r6, pc}
 80168e6:	f082 0201 	eor.w	r2, r2, #1
 80168ea:	54e2      	strb	r2, [r4, r3]
 80168ec:	4605      	mov	r5, r0
 80168ee:	4628      	mov	r0, r5
 80168f0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80168f4:	292d      	cmp	r1, #45	; 0x2d
 80168f6:	d006      	beq.n	8016906 <__sccl+0x4a>
 80168f8:	295d      	cmp	r1, #93	; 0x5d
 80168fa:	d0f3      	beq.n	80168e4 <__sccl+0x28>
 80168fc:	b909      	cbnz	r1, 8016902 <__sccl+0x46>
 80168fe:	4628      	mov	r0, r5
 8016900:	e7f0      	b.n	80168e4 <__sccl+0x28>
 8016902:	460b      	mov	r3, r1
 8016904:	e7f1      	b.n	80168ea <__sccl+0x2e>
 8016906:	786e      	ldrb	r6, [r5, #1]
 8016908:	2e5d      	cmp	r6, #93	; 0x5d
 801690a:	d0fa      	beq.n	8016902 <__sccl+0x46>
 801690c:	42b3      	cmp	r3, r6
 801690e:	dcf8      	bgt.n	8016902 <__sccl+0x46>
 8016910:	3502      	adds	r5, #2
 8016912:	4619      	mov	r1, r3
 8016914:	3101      	adds	r1, #1
 8016916:	428e      	cmp	r6, r1
 8016918:	5462      	strb	r2, [r4, r1]
 801691a:	dcfb      	bgt.n	8016914 <__sccl+0x58>
 801691c:	1af1      	subs	r1, r6, r3
 801691e:	3901      	subs	r1, #1
 8016920:	1c58      	adds	r0, r3, #1
 8016922:	42b3      	cmp	r3, r6
 8016924:	bfa8      	it	ge
 8016926:	2100      	movge	r1, #0
 8016928:	1843      	adds	r3, r0, r1
 801692a:	e7e0      	b.n	80168ee <__sccl+0x32>

0801692c <_strtol_r>:
 801692c:	f7fa b88e 	b.w	8010a4c <_strtol_l.constprop.0>

08016930 <__submore>:
 8016930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016934:	460c      	mov	r4, r1
 8016936:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801693c:	4299      	cmp	r1, r3
 801693e:	d11d      	bne.n	801697c <__submore+0x4c>
 8016940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016944:	f7f8 fa8c 	bl	800ee60 <_malloc_r>
 8016948:	b918      	cbnz	r0, 8016952 <__submore+0x22>
 801694a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801694e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016956:	63a3      	str	r3, [r4, #56]	; 0x38
 8016958:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801695c:	6360      	str	r0, [r4, #52]	; 0x34
 801695e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016962:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016966:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801696a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801696e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016972:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016976:	6020      	str	r0, [r4, #0]
 8016978:	2000      	movs	r0, #0
 801697a:	e7e8      	b.n	801694e <__submore+0x1e>
 801697c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801697e:	0077      	lsls	r7, r6, #1
 8016980:	463a      	mov	r2, r7
 8016982:	f000 f80f 	bl	80169a4 <_realloc_r>
 8016986:	4605      	mov	r5, r0
 8016988:	2800      	cmp	r0, #0
 801698a:	d0de      	beq.n	801694a <__submore+0x1a>
 801698c:	eb00 0806 	add.w	r8, r0, r6
 8016990:	4601      	mov	r1, r0
 8016992:	4632      	mov	r2, r6
 8016994:	4640      	mov	r0, r8
 8016996:	f7ff fde2 	bl	801655e <memcpy>
 801699a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801699e:	f8c4 8000 	str.w	r8, [r4]
 80169a2:	e7e9      	b.n	8016978 <__submore+0x48>

080169a4 <_realloc_r>:
 80169a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169a6:	4607      	mov	r7, r0
 80169a8:	4614      	mov	r4, r2
 80169aa:	460e      	mov	r6, r1
 80169ac:	b921      	cbnz	r1, 80169b8 <_realloc_r+0x14>
 80169ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80169b2:	4611      	mov	r1, r2
 80169b4:	f7f8 ba54 	b.w	800ee60 <_malloc_r>
 80169b8:	b922      	cbnz	r2, 80169c4 <_realloc_r+0x20>
 80169ba:	f7f8 fa07 	bl	800edcc <_free_r>
 80169be:	4625      	mov	r5, r4
 80169c0:	4628      	mov	r0, r5
 80169c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169c4:	f000 f814 	bl	80169f0 <_malloc_usable_size_r>
 80169c8:	42a0      	cmp	r0, r4
 80169ca:	d20f      	bcs.n	80169ec <_realloc_r+0x48>
 80169cc:	4621      	mov	r1, r4
 80169ce:	4638      	mov	r0, r7
 80169d0:	f7f8 fa46 	bl	800ee60 <_malloc_r>
 80169d4:	4605      	mov	r5, r0
 80169d6:	2800      	cmp	r0, #0
 80169d8:	d0f2      	beq.n	80169c0 <_realloc_r+0x1c>
 80169da:	4631      	mov	r1, r6
 80169dc:	4622      	mov	r2, r4
 80169de:	f7ff fdbe 	bl	801655e <memcpy>
 80169e2:	4631      	mov	r1, r6
 80169e4:	4638      	mov	r0, r7
 80169e6:	f7f8 f9f1 	bl	800edcc <_free_r>
 80169ea:	e7e9      	b.n	80169c0 <_realloc_r+0x1c>
 80169ec:	4635      	mov	r5, r6
 80169ee:	e7e7      	b.n	80169c0 <_realloc_r+0x1c>

080169f0 <_malloc_usable_size_r>:
 80169f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169f4:	1f18      	subs	r0, r3, #4
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	bfbc      	itt	lt
 80169fa:	580b      	ldrlt	r3, [r1, r0]
 80169fc:	18c0      	addlt	r0, r0, r3
 80169fe:	4770      	bx	lr
